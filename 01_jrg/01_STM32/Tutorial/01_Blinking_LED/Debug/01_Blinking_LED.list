
01_Blinking_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007848  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080079d0  080079d0  000179d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079ec  080079ec  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080079ec  080079ec  000179ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079f4  080079f4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079f4  080079f4  000179f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079f8  080079f8  000179f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080079fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007c8  20000090  08007a8c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000858  08007a8c  00020858  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000186bb  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003553  00000000  00000000  0003877b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001108  00000000  00000000  0003bcd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa8  00000000  00000000  0003cdd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000238bd  00000000  00000000  0003dd80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010faf  00000000  00000000  0006163d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cadcf  00000000  00000000  000725ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013d3bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047c0  00000000  00000000  0013d438  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080079b8 	.word	0x080079b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080079b8 	.word	0x080079b8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fbfc 	bl	8000cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f818 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f92c 	bl	8000730 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d8:	f000 f896 	bl	8000608 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004dc:	f000 f8c2 	bl	8000664 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e0:	f000 f8f0 	bl	80006c4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e4:	f006 fe64 	bl	80071b0 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004e8:	f006 fe88 	bl	80071fc <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 80004ec:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80004f0:	4803      	ldr	r0, [pc, #12]	; (8000500 <main+0x38>)
 80004f2:	f000 ff42 	bl	800137a <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 80004f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004fa:	f000 fc57 	bl	8000dac <HAL_Delay>
    MX_USB_HOST_Process();
 80004fe:	e7f3      	b.n	80004e8 <main+0x20>
 8000500:	40020c00 	.word	0x40020c00

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b098      	sub	sp, #96	; 0x60
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800050e:	2230      	movs	r2, #48	; 0x30
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f007 f98e 	bl	8007834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	f107 031c 	add.w	r3, r7, #28
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000528:	f107 030c 	add.w	r3, r7, #12
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	4b31      	ldr	r3, [pc, #196]	; (8000600 <SystemClock_Config+0xfc>)
 800053c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053e:	4a30      	ldr	r2, [pc, #192]	; (8000600 <SystemClock_Config+0xfc>)
 8000540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000544:	6413      	str	r3, [r2, #64]	; 0x40
 8000546:	4b2e      	ldr	r3, [pc, #184]	; (8000600 <SystemClock_Config+0xfc>)
 8000548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000552:	2300      	movs	r3, #0
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	4b2b      	ldr	r3, [pc, #172]	; (8000604 <SystemClock_Config+0x100>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a2a      	ldr	r2, [pc, #168]	; (8000604 <SystemClock_Config+0x100>)
 800055c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000560:	6013      	str	r3, [r2, #0]
 8000562:	4b28      	ldr	r3, [pc, #160]	; (8000604 <SystemClock_Config+0x100>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800056e:	2301      	movs	r3, #1
 8000570:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000572:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000576:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000578:	2302      	movs	r3, #2
 800057a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000580:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000582:	2308      	movs	r3, #8
 8000584:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000586:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800058a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800058c:	2302      	movs	r3, #2
 800058e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000590:	2307      	movs	r3, #7
 8000592:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000598:	4618      	mov	r0, r3
 800059a:	f003 f9d3 	bl	8003944 <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005a4:	f000 f9c2 	bl	800092c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ac:	2302      	movs	r3, #2
 80005ae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005be:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005c0:	f107 031c 	add.w	r3, r7, #28
 80005c4:	2105      	movs	r1, #5
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 fc2c 	bl	8003e24 <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005d2:	f000 f9ab 	bl	800092c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80005d6:	2301      	movs	r3, #1
 80005d8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80005da:	23c0      	movs	r3, #192	; 0xc0
 80005dc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80005de:	2302      	movs	r3, #2
 80005e0:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	4618      	mov	r0, r3
 80005e8:	f003 fdfa 	bl	80041e0 <HAL_RCCEx_PeriphCLKConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80005f2:	f000 f99b 	bl	800092c <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3760      	adds	r7, #96	; 0x60
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <MX_I2C1_Init+0x50>)
 800060e:	4a13      	ldr	r2, [pc, #76]	; (800065c <MX_I2C1_Init+0x54>)
 8000610:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000612:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_I2C1_Init+0x50>)
 8000614:	4a12      	ldr	r2, [pc, #72]	; (8000660 <MX_I2C1_Init+0x58>)
 8000616:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000618:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <MX_I2C1_Init+0x50>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_I2C1_Init+0x50>)
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <MX_I2C1_Init+0x50>)
 8000626:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800062a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <MX_I2C1_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <MX_I2C1_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000638:	4b07      	ldr	r3, [pc, #28]	; (8000658 <MX_I2C1_Init+0x50>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <MX_I2C1_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000644:	4804      	ldr	r0, [pc, #16]	; (8000658 <MX_I2C1_Init+0x50>)
 8000646:	f002 fba5 	bl	8002d94 <HAL_I2C_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000650:	f000 f96c 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200000c0 	.word	0x200000c0
 800065c:	40005400 	.word	0x40005400
 8000660:	000186a0 	.word	0x000186a0

08000664 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000668:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <MX_I2S3_Init+0x54>)
 800066a:	4a14      	ldr	r2, [pc, #80]	; (80006bc <MX_I2S3_Init+0x58>)
 800066c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_I2S3_Init+0x54>)
 8000670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000674:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <MX_I2S3_Init+0x54>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800067c:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_I2S3_Init+0x54>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <MX_I2S3_Init+0x54>)
 8000684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000688:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_I2S3_Init+0x54>)
 800068c:	4a0c      	ldr	r2, [pc, #48]	; (80006c0 <MX_I2S3_Init+0x5c>)
 800068e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_I2S3_Init+0x54>)
 8000692:	2200      	movs	r2, #0
 8000694:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <MX_I2S3_Init+0x54>)
 8000698:	2200      	movs	r2, #0
 800069a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_I2S3_Init+0x54>)
 800069e:	2200      	movs	r2, #0
 80006a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_I2S3_Init+0x54>)
 80006a4:	f002 fcae 	bl	8003004 <HAL_I2S_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006ae:	f000 f93d 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	2000016c 	.word	0x2000016c
 80006bc:	40003c00 	.word	0x40003c00
 80006c0:	00017700 	.word	0x00017700

080006c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c8:	4b17      	ldr	r3, [pc, #92]	; (8000728 <MX_SPI1_Init+0x64>)
 80006ca:	4a18      	ldr	r2, [pc, #96]	; (800072c <MX_SPI1_Init+0x68>)
 80006cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ce:	4b16      	ldr	r3, [pc, #88]	; (8000728 <MX_SPI1_Init+0x64>)
 80006d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_SPI1_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_SPI1_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_SPI1_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_SPI1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_SPI1_Init+0x64>)
 80006f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_SPI1_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <MX_SPI1_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_SPI1_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <MX_SPI1_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_SPI1_Init+0x64>)
 8000710:	220a      	movs	r2, #10
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_SPI1_Init+0x64>)
 8000716:	f003 fea1 	bl	800445c <HAL_SPI_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000720:	f000 f904 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000114 	.word	0x20000114
 800072c:	40013000 	.word	0x40013000

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08c      	sub	sp, #48	; 0x30
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
 800074a:	4b71      	ldr	r3, [pc, #452]	; (8000910 <MX_GPIO_Init+0x1e0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a70      	ldr	r2, [pc, #448]	; (8000910 <MX_GPIO_Init+0x1e0>)
 8000750:	f043 0310 	orr.w	r3, r3, #16
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b6e      	ldr	r3, [pc, #440]	; (8000910 <MX_GPIO_Init+0x1e0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0310 	and.w	r3, r3, #16
 800075e:	61bb      	str	r3, [r7, #24]
 8000760:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
 8000766:	4b6a      	ldr	r3, [pc, #424]	; (8000910 <MX_GPIO_Init+0x1e0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a69      	ldr	r2, [pc, #420]	; (8000910 <MX_GPIO_Init+0x1e0>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b67      	ldr	r3, [pc, #412]	; (8000910 <MX_GPIO_Init+0x1e0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	4b63      	ldr	r3, [pc, #396]	; (8000910 <MX_GPIO_Init+0x1e0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a62      	ldr	r2, [pc, #392]	; (8000910 <MX_GPIO_Init+0x1e0>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b60      	ldr	r3, [pc, #384]	; (8000910 <MX_GPIO_Init+0x1e0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	4b5c      	ldr	r3, [pc, #368]	; (8000910 <MX_GPIO_Init+0x1e0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a5b      	ldr	r2, [pc, #364]	; (8000910 <MX_GPIO_Init+0x1e0>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b59      	ldr	r3, [pc, #356]	; (8000910 <MX_GPIO_Init+0x1e0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	4b55      	ldr	r3, [pc, #340]	; (8000910 <MX_GPIO_Init+0x1e0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a54      	ldr	r2, [pc, #336]	; (8000910 <MX_GPIO_Init+0x1e0>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b52      	ldr	r3, [pc, #328]	; (8000910 <MX_GPIO_Init+0x1e0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b4e      	ldr	r3, [pc, #312]	; (8000910 <MX_GPIO_Init+0x1e0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a4d      	ldr	r2, [pc, #308]	; (8000910 <MX_GPIO_Init+0x1e0>)
 80007dc:	f043 0308 	orr.w	r3, r3, #8
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b4b      	ldr	r3, [pc, #300]	; (8000910 <MX_GPIO_Init+0x1e0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2108      	movs	r1, #8
 80007f2:	4848      	ldr	r0, [pc, #288]	; (8000914 <MX_GPIO_Init+0x1e4>)
 80007f4:	f000 fda8 	bl	8001348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2101      	movs	r1, #1
 80007fc:	4846      	ldr	r0, [pc, #280]	; (8000918 <MX_GPIO_Init+0x1e8>)
 80007fe:	f000 fda3 	bl	8001348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|GPIO_PIN_15
 8000802:	2200      	movs	r2, #0
 8000804:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000808:	4844      	ldr	r0, [pc, #272]	; (800091c <MX_GPIO_Init+0x1ec>)
 800080a:	f000 fd9d 	bl	8001348 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800080e:	2308      	movs	r3, #8
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	483b      	ldr	r0, [pc, #236]	; (8000914 <MX_GPIO_Init+0x1e4>)
 8000826:	f000 fbf5 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800082a:	2301      	movs	r3, #1
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	4835      	ldr	r0, [pc, #212]	; (8000918 <MX_GPIO_Init+0x1e8>)
 8000842:	f000 fbe7 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000846:	2308      	movs	r3, #8
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000856:	2305      	movs	r3, #5
 8000858:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	482d      	ldr	r0, [pc, #180]	; (8000918 <MX_GPIO_Init+0x1e8>)
 8000862:	f000 fbd7 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000866:	2301      	movs	r3, #1
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800086a:	4b2d      	ldr	r3, [pc, #180]	; (8000920 <MX_GPIO_Init+0x1f0>)
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	482a      	ldr	r0, [pc, #168]	; (8000924 <MX_GPIO_Init+0x1f4>)
 800087a:	f000 fbcb 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800087e:	2304      	movs	r3, #4
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	4825      	ldr	r0, [pc, #148]	; (8000928 <MX_GPIO_Init+0x1f8>)
 8000892:	f000 fbbf 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800089a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	2302      	movs	r3, #2
 800089e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008a8:	2305      	movs	r3, #5
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	481d      	ldr	r0, [pc, #116]	; (8000928 <MX_GPIO_Init+0x1f8>)
 80008b4:	f000 fbae 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin PD15
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|GPIO_PIN_15
 80008b8:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008bc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4812      	ldr	r0, [pc, #72]	; (800091c <MX_GPIO_Init+0x1ec>)
 80008d2:	f000 fb9f 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008d6:	2320      	movs	r3, #32
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	480c      	ldr	r0, [pc, #48]	; (800091c <MX_GPIO_Init+0x1ec>)
 80008ea:	f000 fb93 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008ee:	2302      	movs	r3, #2
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_GPIO_Init+0x1f0>)
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_GPIO_Init+0x1e4>)
 8000902:	f000 fb87 	bl	8001014 <HAL_GPIO_Init>

}
 8000906:	bf00      	nop
 8000908:	3730      	adds	r7, #48	; 0x30
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800
 8000914:	40021000 	.word	0x40021000
 8000918:	40020800 	.word	0x40020800
 800091c:	40020c00 	.word	0x40020c00
 8000920:	10120000 	.word	0x10120000
 8000924:	40020000 	.word	0x40020000
 8000928:	40020400 	.word	0x40020400

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000932:	e7fe      	b.n	8000932 <Error_Handler+0x6>

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	4a0f      	ldr	r2, [pc, #60]	; (8000980 <HAL_MspInit+0x4c>)
 8000944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000948:	6453      	str	r3, [r2, #68]	; 0x44
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <HAL_MspInit+0x4c>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	4a08      	ldr	r2, [pc, #32]	; (8000980 <HAL_MspInit+0x4c>)
 8000960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000964:	6413      	str	r3, [r2, #64]	; 0x40
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_MspInit+0x4c>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000972:	2007      	movs	r0, #7
 8000974:	f000 fb0c 	bl	8000f90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40023800 	.word	0x40023800

08000984 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a19      	ldr	r2, [pc, #100]	; (8000a08 <HAL_I2C_MspInit+0x84>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d12c      	bne.n	8000a00 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <HAL_I2C_MspInit+0x88>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a17      	ldr	r2, [pc, #92]	; (8000a0c <HAL_I2C_MspInit+0x88>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <HAL_I2C_MspInit+0x88>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009c2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c8:	2312      	movs	r3, #18
 80009ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009d4:	2304      	movs	r3, #4
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	480c      	ldr	r0, [pc, #48]	; (8000a10 <HAL_I2C_MspInit+0x8c>)
 80009e0:	f000 fb18 	bl	8001014 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <HAL_I2C_MspInit+0x88>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <HAL_I2C_MspInit+0x88>)
 80009ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009f2:	6413      	str	r3, [r2, #64]	; 0x40
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <HAL_I2C_MspInit+0x88>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a00:	bf00      	nop
 8000a02:	3728      	adds	r7, #40	; 0x28
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40005400 	.word	0x40005400
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020400 	.word	0x40020400

08000a14 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a28      	ldr	r2, [pc, #160]	; (8000ad4 <HAL_I2S_MspInit+0xc0>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d14a      	bne.n	8000acc <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	4b27      	ldr	r3, [pc, #156]	; (8000ad8 <HAL_I2S_MspInit+0xc4>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	4a26      	ldr	r2, [pc, #152]	; (8000ad8 <HAL_I2S_MspInit+0xc4>)
 8000a40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a44:	6413      	str	r3, [r2, #64]	; 0x40
 8000a46:	4b24      	ldr	r3, [pc, #144]	; (8000ad8 <HAL_I2S_MspInit+0xc4>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	4b20      	ldr	r3, [pc, #128]	; (8000ad8 <HAL_I2S_MspInit+0xc4>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a1f      	ldr	r2, [pc, #124]	; (8000ad8 <HAL_I2S_MspInit+0xc4>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <HAL_I2S_MspInit+0xc4>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <HAL_I2S_MspInit+0xc4>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a18      	ldr	r2, [pc, #96]	; (8000ad8 <HAL_I2S_MspInit+0xc4>)
 8000a78:	f043 0304 	orr.w	r3, r3, #4
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <HAL_I2S_MspInit+0xc4>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0304 	and.w	r3, r3, #4
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a8a:	2310      	movs	r3, #16
 8000a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a9a:	2306      	movs	r3, #6
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480d      	ldr	r0, [pc, #52]	; (8000adc <HAL_I2S_MspInit+0xc8>)
 8000aa6:	f000 fab5 	bl	8001014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000aaa:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000abc:	2306      	movs	r3, #6
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <HAL_I2S_MspInit+0xcc>)
 8000ac8:	f000 faa4 	bl	8001014 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000acc:	bf00      	nop
 8000ace:	3728      	adds	r7, #40	; 0x28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40003c00 	.word	0x40003c00
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020000 	.word	0x40020000
 8000ae0:	40020800 	.word	0x40020800

08000ae4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a19      	ldr	r2, [pc, #100]	; (8000b68 <HAL_SPI_MspInit+0x84>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d12b      	bne.n	8000b5e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <HAL_SPI_MspInit+0x88>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	4a17      	ldr	r2, [pc, #92]	; (8000b6c <HAL_SPI_MspInit+0x88>)
 8000b10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b14:	6453      	str	r3, [r2, #68]	; 0x44
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <HAL_SPI_MspInit+0x88>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <HAL_SPI_MspInit+0x88>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a10      	ldr	r2, [pc, #64]	; (8000b6c <HAL_SPI_MspInit+0x88>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <HAL_SPI_MspInit+0x88>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b3e:	23e0      	movs	r3, #224	; 0xe0
 8000b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b4e:	2305      	movs	r3, #5
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	; (8000b70 <HAL_SPI_MspInit+0x8c>)
 8000b5a:	f000 fa5b 	bl	8001014 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b5e:	bf00      	nop
 8000b60:	3728      	adds	r7, #40	; 0x28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40013000 	.word	0x40013000
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020000 	.word	0x40020000

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <NMI_Handler+0x4>

08000b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <MemManage_Handler+0x4>

08000b86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc0:	f000 f8d4 	bl	8000d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <OTG_FS_IRQHandler+0x10>)
 8000bce:	f000 fe7f 	bl	80018d0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000590 	.word	0x20000590

08000bdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be4:	4a14      	ldr	r2, [pc, #80]	; (8000c38 <_sbrk+0x5c>)
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <_sbrk+0x60>)
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d102      	bne.n	8000bfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <_sbrk+0x64>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <_sbrk+0x68>)
 8000bfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <_sbrk+0x64>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d207      	bcs.n	8000c1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c0c:	f006 fdd8 	bl	80077c0 <__errno>
 8000c10:	4602      	mov	r2, r0
 8000c12:	230c      	movs	r3, #12
 8000c14:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1a:	e009      	b.n	8000c30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c22:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <_sbrk+0x64>)
 8000c2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20020000 	.word	0x20020000
 8000c3c:	00000400 	.word	0x00000400
 8000c40:	200000ac 	.word	0x200000ac
 8000c44:	20000858 	.word	0x20000858

08000c48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <SystemInit+0x28>)
 8000c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c52:	4a07      	ldr	r2, [pc, #28]	; (8000c70 <SystemInit+0x28>)
 8000c54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <SystemInit+0x28>)
 8000c5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c62:	609a      	str	r2, [r3, #8]
#endif
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c7a:	e003      	b.n	8000c84 <LoopCopyDataInit>

08000c7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c82:	3104      	adds	r1, #4

08000c84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c84:	480b      	ldr	r0, [pc, #44]	; (8000cb4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c8c:	d3f6      	bcc.n	8000c7c <CopyDataInit>
  ldr  r2, =_sbss
 8000c8e:	4a0b      	ldr	r2, [pc, #44]	; (8000cbc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c90:	e002      	b.n	8000c98 <LoopFillZerobss>

08000c92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c94:	f842 3b04 	str.w	r3, [r2], #4

08000c98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c9c:	d3f9      	bcc.n	8000c92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c9e:	f7ff ffd3 	bl	8000c48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ca2:	f006 fd93 	bl	80077cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca6:	f7ff fc0f 	bl	80004c8 <main>
  bx  lr    
 8000caa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000cb0:	080079fc 	.word	0x080079fc
  ldr  r0, =_sdata
 8000cb4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cb8:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000cbc:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000cc0:	20000858 	.word	0x20000858

08000cc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC_IRQHandler>
	...

08000cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	; (8000d08 <HAL_Init+0x40>)
 8000cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <HAL_Init+0x40>)
 8000cde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a07      	ldr	r2, [pc, #28]	; (8000d08 <HAL_Init+0x40>)
 8000cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf0:	2003      	movs	r0, #3
 8000cf2:	f000 f94d 	bl	8000f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f000 f808 	bl	8000d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cfc:	f7ff fe1a 	bl	8000934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40023c00 	.word	0x40023c00

08000d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <HAL_InitTick+0x54>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_InitTick+0x58>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f965 	bl	8000ffa <HAL_SYSTICK_Config>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e00e      	b.n	8000d58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b0f      	cmp	r3, #15
 8000d3e:	d80a      	bhi.n	8000d56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d40:	2200      	movs	r2, #0
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295
 8000d48:	f000 f92d 	bl	8000fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d4c:	4a06      	ldr	r2, [pc, #24]	; (8000d68 <HAL_InitTick+0x5c>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e000      	b.n	8000d58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000000 	.word	0x20000000
 8000d64:	20000008 	.word	0x20000008
 8000d68:	20000004 	.word	0x20000004

08000d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_IncTick+0x20>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_IncTick+0x24>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <HAL_IncTick+0x24>)
 8000d7e:	6013      	str	r3, [r2, #0]
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	200001b4 	.word	0x200001b4

08000d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return uwTick;
 8000d98:	4b03      	ldr	r3, [pc, #12]	; (8000da8 <HAL_GetTick+0x14>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	200001b4 	.word	0x200001b4

08000dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db4:	f7ff ffee 	bl	8000d94 <HAL_GetTick>
 8000db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc4:	d005      	beq.n	8000dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <HAL_Delay+0x40>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4413      	add	r3, r2
 8000dd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dd2:	bf00      	nop
 8000dd4:	f7ff ffde 	bl	8000d94 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d8f7      	bhi.n	8000dd4 <HAL_Delay+0x28>
  {
  }
}
 8000de4:	bf00      	nop
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000008 	.word	0x20000008

08000df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e22:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	60d3      	str	r3, [r2, #12]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <__NVIC_GetPriorityGrouping+0x18>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	0a1b      	lsrs	r3, r3, #8
 8000e42:	f003 0307 	and.w	r3, r3, #7
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	db0b      	blt.n	8000e7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	f003 021f 	and.w	r2, r3, #31
 8000e6c:	4907      	ldr	r1, [pc, #28]	; (8000e8c <__NVIC_EnableIRQ+0x38>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	095b      	lsrs	r3, r3, #5
 8000e74:	2001      	movs	r0, #1
 8000e76:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000e100 	.word	0xe000e100

08000e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	6039      	str	r1, [r7, #0]
 8000e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	db0a      	blt.n	8000eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	490c      	ldr	r1, [pc, #48]	; (8000edc <__NVIC_SetPriority+0x4c>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	0112      	lsls	r2, r2, #4
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb8:	e00a      	b.n	8000ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4908      	ldr	r1, [pc, #32]	; (8000ee0 <__NVIC_SetPriority+0x50>)
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f003 030f 	and.w	r3, r3, #15
 8000ec6:	3b04      	subs	r3, #4
 8000ec8:	0112      	lsls	r2, r2, #4
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	440b      	add	r3, r1
 8000ece:	761a      	strb	r2, [r3, #24]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000e100 	.word	0xe000e100
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	; 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f1c3 0307 	rsb	r3, r3, #7
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	bf28      	it	cs
 8000f02:	2304      	movcs	r3, #4
 8000f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	2b06      	cmp	r3, #6
 8000f0c:	d902      	bls.n	8000f14 <NVIC_EncodePriority+0x30>
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3b03      	subs	r3, #3
 8000f12:	e000      	b.n	8000f16 <NVIC_EncodePriority+0x32>
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	f04f 32ff 	mov.w	r2, #4294967295
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43da      	mvns	r2, r3
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	401a      	ands	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	43d9      	mvns	r1, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	4313      	orrs	r3, r2
         );
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3724      	adds	r7, #36	; 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f5c:	d301      	bcc.n	8000f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00f      	b.n	8000f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <SysTick_Config+0x40>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6a:	210f      	movs	r1, #15
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f7ff ff8e 	bl	8000e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <SysTick_Config+0x40>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <SysTick_Config+0x40>)
 8000f7c:	2207      	movs	r2, #7
 8000f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	e000e010 	.word	0xe000e010

08000f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff ff29 	bl	8000df0 <__NVIC_SetPriorityGrouping>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b086      	sub	sp, #24
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb8:	f7ff ff3e 	bl	8000e38 <__NVIC_GetPriorityGrouping>
 8000fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	68b9      	ldr	r1, [r7, #8]
 8000fc2:	6978      	ldr	r0, [r7, #20]
 8000fc4:	f7ff ff8e 	bl	8000ee4 <NVIC_EncodePriority>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff5d 	bl	8000e90 <__NVIC_SetPriority>
}
 8000fd6:	bf00      	nop
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff31 	bl	8000e54 <__NVIC_EnableIRQ>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ffa2 	bl	8000f4c <SysTick_Config>
 8001008:	4603      	mov	r3, r0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	; 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
 800102e:	e16b      	b.n	8001308 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001030:	2201      	movs	r2, #1
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	429a      	cmp	r2, r3
 800104a:	f040 815a 	bne.w	8001302 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d00b      	beq.n	800106e <HAL_GPIO_Init+0x5a>
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b02      	cmp	r3, #2
 800105c:	d007      	beq.n	800106e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001062:	2b11      	cmp	r3, #17
 8001064:	d003      	beq.n	800106e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b12      	cmp	r3, #18
 800106c:	d130      	bne.n	80010d0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	2203      	movs	r2, #3
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	68da      	ldr	r2, [r3, #12]
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010a4:	2201      	movs	r2, #1
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	091b      	lsrs	r3, r3, #4
 80010ba:	f003 0201 	and.w	r2, r3, #1
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2203      	movs	r2, #3
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0xfc>
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	2b12      	cmp	r3, #18
 800110e:	d123      	bne.n	8001158 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	08da      	lsrs	r2, r3, #3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3208      	adds	r2, #8
 8001118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	f003 0307 	and.w	r3, r3, #7
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	220f      	movs	r2, #15
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	691a      	ldr	r2, [r3, #16]
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	08da      	lsrs	r2, r3, #3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3208      	adds	r2, #8
 8001152:	69b9      	ldr	r1, [r7, #24]
 8001154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	2203      	movs	r2, #3
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0203 	and.w	r2, r3, #3
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 80b4 	beq.w	8001302 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b5f      	ldr	r3, [pc, #380]	; (800131c <HAL_GPIO_Init+0x308>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	4a5e      	ldr	r2, [pc, #376]	; (800131c <HAL_GPIO_Init+0x308>)
 80011a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a8:	6453      	str	r3, [r2, #68]	; 0x44
 80011aa:	4b5c      	ldr	r3, [pc, #368]	; (800131c <HAL_GPIO_Init+0x308>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011b6:	4a5a      	ldr	r2, [pc, #360]	; (8001320 <HAL_GPIO_Init+0x30c>)
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	3302      	adds	r3, #2
 80011be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	220f      	movs	r2, #15
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a51      	ldr	r2, [pc, #324]	; (8001324 <HAL_GPIO_Init+0x310>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d02b      	beq.n	800123a <HAL_GPIO_Init+0x226>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a50      	ldr	r2, [pc, #320]	; (8001328 <HAL_GPIO_Init+0x314>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d025      	beq.n	8001236 <HAL_GPIO_Init+0x222>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4f      	ldr	r2, [pc, #316]	; (800132c <HAL_GPIO_Init+0x318>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d01f      	beq.n	8001232 <HAL_GPIO_Init+0x21e>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4e      	ldr	r2, [pc, #312]	; (8001330 <HAL_GPIO_Init+0x31c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d019      	beq.n	800122e <HAL_GPIO_Init+0x21a>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4d      	ldr	r2, [pc, #308]	; (8001334 <HAL_GPIO_Init+0x320>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d013      	beq.n	800122a <HAL_GPIO_Init+0x216>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4c      	ldr	r2, [pc, #304]	; (8001338 <HAL_GPIO_Init+0x324>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d00d      	beq.n	8001226 <HAL_GPIO_Init+0x212>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4b      	ldr	r2, [pc, #300]	; (800133c <HAL_GPIO_Init+0x328>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d007      	beq.n	8001222 <HAL_GPIO_Init+0x20e>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4a      	ldr	r2, [pc, #296]	; (8001340 <HAL_GPIO_Init+0x32c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d101      	bne.n	800121e <HAL_GPIO_Init+0x20a>
 800121a:	2307      	movs	r3, #7
 800121c:	e00e      	b.n	800123c <HAL_GPIO_Init+0x228>
 800121e:	2308      	movs	r3, #8
 8001220:	e00c      	b.n	800123c <HAL_GPIO_Init+0x228>
 8001222:	2306      	movs	r3, #6
 8001224:	e00a      	b.n	800123c <HAL_GPIO_Init+0x228>
 8001226:	2305      	movs	r3, #5
 8001228:	e008      	b.n	800123c <HAL_GPIO_Init+0x228>
 800122a:	2304      	movs	r3, #4
 800122c:	e006      	b.n	800123c <HAL_GPIO_Init+0x228>
 800122e:	2303      	movs	r3, #3
 8001230:	e004      	b.n	800123c <HAL_GPIO_Init+0x228>
 8001232:	2302      	movs	r3, #2
 8001234:	e002      	b.n	800123c <HAL_GPIO_Init+0x228>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <HAL_GPIO_Init+0x228>
 800123a:	2300      	movs	r3, #0
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	f002 0203 	and.w	r2, r2, #3
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	4093      	lsls	r3, r2
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800124c:	4934      	ldr	r1, [pc, #208]	; (8001320 <HAL_GPIO_Init+0x30c>)
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	089b      	lsrs	r3, r3, #2
 8001252:	3302      	adds	r3, #2
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800125a:	4b3a      	ldr	r3, [pc, #232]	; (8001344 <HAL_GPIO_Init+0x330>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800127e:	4a31      	ldr	r2, [pc, #196]	; (8001344 <HAL_GPIO_Init+0x330>)
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001284:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <HAL_GPIO_Init+0x330>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012a8:	4a26      	ldr	r2, [pc, #152]	; (8001344 <HAL_GPIO_Init+0x330>)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ae:	4b25      	ldr	r3, [pc, #148]	; (8001344 <HAL_GPIO_Init+0x330>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012d2:	4a1c      	ldr	r2, [pc, #112]	; (8001344 <HAL_GPIO_Init+0x330>)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d8:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <HAL_GPIO_Init+0x330>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012fc:	4a11      	ldr	r2, [pc, #68]	; (8001344 <HAL_GPIO_Init+0x330>)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3301      	adds	r3, #1
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	2b0f      	cmp	r3, #15
 800130c:	f67f ae90 	bls.w	8001030 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001310:	bf00      	nop
 8001312:	3724      	adds	r7, #36	; 0x24
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	40023800 	.word	0x40023800
 8001320:	40013800 	.word	0x40013800
 8001324:	40020000 	.word	0x40020000
 8001328:	40020400 	.word	0x40020400
 800132c:	40020800 	.word	0x40020800
 8001330:	40020c00 	.word	0x40020c00
 8001334:	40021000 	.word	0x40021000
 8001338:	40021400 	.word	0x40021400
 800133c:	40021800 	.word	0x40021800
 8001340:	40021c00 	.word	0x40021c00
 8001344:	40013c00 	.word	0x40013c00

08001348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	807b      	strh	r3, [r7, #2]
 8001354:	4613      	mov	r3, r2
 8001356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001358:	787b      	ldrb	r3, [r7, #1]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800135e:	887a      	ldrh	r2, [r7, #2]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001364:	e003      	b.n	800136e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001366:	887b      	ldrh	r3, [r7, #2]
 8001368:	041a      	lsls	r2, r3, #16
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	619a      	str	r2, [r3, #24]
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
 8001382:	460b      	mov	r3, r1
 8001384:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695a      	ldr	r2, [r3, #20]
 800138a:	887b      	ldrh	r3, [r7, #2]
 800138c:	401a      	ands	r2, r3
 800138e:	887b      	ldrh	r3, [r7, #2]
 8001390:	429a      	cmp	r2, r3
 8001392:	d104      	bne.n	800139e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001394:	887b      	ldrh	r3, [r7, #2]
 8001396:	041a      	lsls	r2, r3, #16
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800139c:	e002      	b.n	80013a4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800139e:	887a      	ldrh	r2, [r7, #2]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	619a      	str	r2, [r3, #24]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80013b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013b2:	b08f      	sub	sp, #60	; 0x3c
 80013b4:	af0a      	add	r7, sp, #40	; 0x28
 80013b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e054      	b.n	800146c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d106      	bne.n	80013e2 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f005 ff45 	bl	800726c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2203      	movs	r2, #3
 80013e6:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d102      	bne.n	80013fc <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f003 f901 	bl	8004608 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	687e      	ldr	r6, [r7, #4]
 800140e:	466d      	mov	r5, sp
 8001410:	f106 0410 	add.w	r4, r6, #16
 8001414:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001416:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001418:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800141a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800141c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001420:	e885 0003 	stmia.w	r5, {r0, r1}
 8001424:	1d33      	adds	r3, r6, #4
 8001426:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001428:	6838      	ldr	r0, [r7, #0]
 800142a:	f003 f87b 	bl	8004524 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2101      	movs	r1, #1
 8001434:	4618      	mov	r0, r3
 8001436:	f003 f8f8 	bl	800462a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	687e      	ldr	r6, [r7, #4]
 8001442:	466d      	mov	r5, sp
 8001444:	f106 0410 	add.w	r4, r6, #16
 8001448:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800144a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800144c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800144e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001450:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001454:	e885 0003 	stmia.w	r5, {r0, r1}
 8001458:	1d33      	adds	r3, r6, #4
 800145a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800145c:	6838      	ldr	r0, [r7, #0]
 800145e:	f003 fa0b 	bl	8004878 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2201      	movs	r2, #1
 8001466:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001474 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b089      	sub	sp, #36	; 0x24
 8001478:	af04      	add	r7, sp, #16
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	4608      	mov	r0, r1
 800147e:	4611      	mov	r1, r2
 8001480:	461a      	mov	r2, r3
 8001482:	4603      	mov	r3, r0
 8001484:	70fb      	strb	r3, [r7, #3]
 8001486:	460b      	mov	r3, r1
 8001488:	70bb      	strb	r3, [r7, #2]
 800148a:	4613      	mov	r3, r2
 800148c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001494:	2b01      	cmp	r3, #1
 8001496:	d101      	bne.n	800149c <HAL_HCD_HC_Init+0x28>
 8001498:	2302      	movs	r3, #2
 800149a:	e07f      	b.n	800159c <HAL_HCD_HC_Init+0x128>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80014a4:	78fa      	ldrb	r2, [r7, #3]
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	4613      	mov	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	440b      	add	r3, r1
 80014b2:	333d      	adds	r3, #61	; 0x3d
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80014b8:	78fa      	ldrb	r2, [r7, #3]
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	4613      	mov	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	440b      	add	r3, r1
 80014c6:	3338      	adds	r3, #56	; 0x38
 80014c8:	787a      	ldrb	r2, [r7, #1]
 80014ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80014cc:	78fa      	ldrb	r2, [r7, #3]
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	440b      	add	r3, r1
 80014da:	3340      	adds	r3, #64	; 0x40
 80014dc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80014de:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80014e0:	78fa      	ldrb	r2, [r7, #3]
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	440b      	add	r3, r1
 80014ee:	3339      	adds	r3, #57	; 0x39
 80014f0:	78fa      	ldrb	r2, [r7, #3]
 80014f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80014f4:	78fa      	ldrb	r2, [r7, #3]
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	440b      	add	r3, r1
 8001502:	333f      	adds	r3, #63	; 0x3f
 8001504:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001508:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800150a:	78fa      	ldrb	r2, [r7, #3]
 800150c:	78bb      	ldrb	r3, [r7, #2]
 800150e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001512:	b2d8      	uxtb	r0, r3
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	440b      	add	r3, r1
 8001520:	333a      	adds	r3, #58	; 0x3a
 8001522:	4602      	mov	r2, r0
 8001524:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001526:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800152a:	2b00      	cmp	r3, #0
 800152c:	da0a      	bge.n	8001544 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800152e:	78fa      	ldrb	r2, [r7, #3]
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	4613      	mov	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4413      	add	r3, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	440b      	add	r3, r1
 800153c:	333b      	adds	r3, #59	; 0x3b
 800153e:	2201      	movs	r2, #1
 8001540:	701a      	strb	r2, [r3, #0]
 8001542:	e009      	b.n	8001558 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001544:	78fa      	ldrb	r2, [r7, #3]
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	4613      	mov	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	440b      	add	r3, r1
 8001552:	333b      	adds	r3, #59	; 0x3b
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001558:	78fa      	ldrb	r2, [r7, #3]
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	440b      	add	r3, r1
 8001566:	333c      	adds	r3, #60	; 0x3c
 8001568:	f897 2020 	ldrb.w	r2, [r7, #32]
 800156c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6818      	ldr	r0, [r3, #0]
 8001572:	787c      	ldrb	r4, [r7, #1]
 8001574:	78ba      	ldrb	r2, [r7, #2]
 8001576:	78f9      	ldrb	r1, [r7, #3]
 8001578:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800157a:	9302      	str	r3, [sp, #8]
 800157c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	4623      	mov	r3, r4
 800158a:	f003 faf7 	bl	8004b7c <USB_HC_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800159a:	7bfb      	ldrb	r3, [r7, #15]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd90      	pop	{r4, r7, pc}

080015a4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80015b0:	2300      	movs	r3, #0
 80015b2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d101      	bne.n	80015c2 <HAL_HCD_HC_Halt+0x1e>
 80015be:	2302      	movs	r3, #2
 80015c0:	e00f      	b.n	80015e2 <HAL_HCD_HC_Halt+0x3e>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	78fa      	ldrb	r2, [r7, #3]
 80015d0:	4611      	mov	r1, r2
 80015d2:	4618      	mov	r0, r3
 80015d4:	f003 fd33 	bl	800503e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	4608      	mov	r0, r1
 80015f6:	4611      	mov	r1, r2
 80015f8:	461a      	mov	r2, r3
 80015fa:	4603      	mov	r3, r0
 80015fc:	70fb      	strb	r3, [r7, #3]
 80015fe:	460b      	mov	r3, r1
 8001600:	70bb      	strb	r3, [r7, #2]
 8001602:	4613      	mov	r3, r2
 8001604:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001606:	78fa      	ldrb	r2, [r7, #3]
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	440b      	add	r3, r1
 8001614:	333b      	adds	r3, #59	; 0x3b
 8001616:	78ba      	ldrb	r2, [r7, #2]
 8001618:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800161a:	78fa      	ldrb	r2, [r7, #3]
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	440b      	add	r3, r1
 8001628:	333f      	adds	r3, #63	; 0x3f
 800162a:	787a      	ldrb	r2, [r7, #1]
 800162c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800162e:	7c3b      	ldrb	r3, [r7, #16]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d114      	bne.n	800165e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001634:	78fa      	ldrb	r2, [r7, #3]
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	440b      	add	r3, r1
 8001642:	3342      	adds	r3, #66	; 0x42
 8001644:	2203      	movs	r2, #3
 8001646:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001648:	78fa      	ldrb	r2, [r7, #3]
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	4613      	mov	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	440b      	add	r3, r1
 8001656:	333d      	adds	r3, #61	; 0x3d
 8001658:	7f3a      	ldrb	r2, [r7, #28]
 800165a:	701a      	strb	r2, [r3, #0]
 800165c:	e009      	b.n	8001672 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800165e:	78fa      	ldrb	r2, [r7, #3]
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	4613      	mov	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4413      	add	r3, r2
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	440b      	add	r3, r1
 800166c:	3342      	adds	r3, #66	; 0x42
 800166e:	2202      	movs	r2, #2
 8001670:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001672:	787b      	ldrb	r3, [r7, #1]
 8001674:	2b03      	cmp	r3, #3
 8001676:	f200 80d6 	bhi.w	8001826 <HAL_HCD_HC_SubmitRequest+0x23a>
 800167a:	a201      	add	r2, pc, #4	; (adr r2, 8001680 <HAL_HCD_HC_SubmitRequest+0x94>)
 800167c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001680:	08001691 	.word	0x08001691
 8001684:	08001811 	.word	0x08001811
 8001688:	080016fd 	.word	0x080016fd
 800168c:	08001787 	.word	0x08001787
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001690:	7c3b      	ldrb	r3, [r7, #16]
 8001692:	2b01      	cmp	r3, #1
 8001694:	f040 80c9 	bne.w	800182a <HAL_HCD_HC_SubmitRequest+0x23e>
 8001698:	78bb      	ldrb	r3, [r7, #2]
 800169a:	2b00      	cmp	r3, #0
 800169c:	f040 80c5 	bne.w	800182a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80016a0:	8b3b      	ldrh	r3, [r7, #24]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d109      	bne.n	80016ba <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80016a6:	78fa      	ldrb	r2, [r7, #3]
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	440b      	add	r3, r1
 80016b4:	3351      	adds	r3, #81	; 0x51
 80016b6:	2201      	movs	r2, #1
 80016b8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016ba:	78fa      	ldrb	r2, [r7, #3]
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	440b      	add	r3, r1
 80016c8:	3351      	adds	r3, #81	; 0x51
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d10a      	bne.n	80016e6 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016d0:	78fa      	ldrb	r2, [r7, #3]
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	440b      	add	r3, r1
 80016de:	3342      	adds	r3, #66	; 0x42
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80016e4:	e0a1      	b.n	800182a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016e6:	78fa      	ldrb	r2, [r7, #3]
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	440b      	add	r3, r1
 80016f4:	3342      	adds	r3, #66	; 0x42
 80016f6:	2202      	movs	r2, #2
 80016f8:	701a      	strb	r2, [r3, #0]
      break;
 80016fa:	e096      	b.n	800182a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80016fc:	78bb      	ldrb	r3, [r7, #2]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d120      	bne.n	8001744 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001702:	78fa      	ldrb	r2, [r7, #3]
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	4613      	mov	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	440b      	add	r3, r1
 8001710:	3351      	adds	r3, #81	; 0x51
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d10a      	bne.n	800172e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001718:	78fa      	ldrb	r2, [r7, #3]
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	440b      	add	r3, r1
 8001726:	3342      	adds	r3, #66	; 0x42
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800172c:	e07e      	b.n	800182c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800172e:	78fa      	ldrb	r2, [r7, #3]
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	440b      	add	r3, r1
 800173c:	3342      	adds	r3, #66	; 0x42
 800173e:	2202      	movs	r2, #2
 8001740:	701a      	strb	r2, [r3, #0]
      break;
 8001742:	e073      	b.n	800182c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001744:	78fa      	ldrb	r2, [r7, #3]
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	440b      	add	r3, r1
 8001752:	3350      	adds	r3, #80	; 0x50
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d10a      	bne.n	8001770 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800175a:	78fa      	ldrb	r2, [r7, #3]
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	440b      	add	r3, r1
 8001768:	3342      	adds	r3, #66	; 0x42
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
      break;
 800176e:	e05d      	b.n	800182c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001770:	78fa      	ldrb	r2, [r7, #3]
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	440b      	add	r3, r1
 800177e:	3342      	adds	r3, #66	; 0x42
 8001780:	2202      	movs	r2, #2
 8001782:	701a      	strb	r2, [r3, #0]
      break;
 8001784:	e052      	b.n	800182c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001786:	78bb      	ldrb	r3, [r7, #2]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d120      	bne.n	80017ce <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800178c:	78fa      	ldrb	r2, [r7, #3]
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	440b      	add	r3, r1
 800179a:	3351      	adds	r3, #81	; 0x51
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d10a      	bne.n	80017b8 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017a2:	78fa      	ldrb	r2, [r7, #3]
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	440b      	add	r3, r1
 80017b0:	3342      	adds	r3, #66	; 0x42
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017b6:	e039      	b.n	800182c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017b8:	78fa      	ldrb	r2, [r7, #3]
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	4613      	mov	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	440b      	add	r3, r1
 80017c6:	3342      	adds	r3, #66	; 0x42
 80017c8:	2202      	movs	r2, #2
 80017ca:	701a      	strb	r2, [r3, #0]
      break;
 80017cc:	e02e      	b.n	800182c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017ce:	78fa      	ldrb	r2, [r7, #3]
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	440b      	add	r3, r1
 80017dc:	3350      	adds	r3, #80	; 0x50
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d10a      	bne.n	80017fa <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017e4:	78fa      	ldrb	r2, [r7, #3]
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	440b      	add	r3, r1
 80017f2:	3342      	adds	r3, #66	; 0x42
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
      break;
 80017f8:	e018      	b.n	800182c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017fa:	78fa      	ldrb	r2, [r7, #3]
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	440b      	add	r3, r1
 8001808:	3342      	adds	r3, #66	; 0x42
 800180a:	2202      	movs	r2, #2
 800180c:	701a      	strb	r2, [r3, #0]
      break;
 800180e:	e00d      	b.n	800182c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001810:	78fa      	ldrb	r2, [r7, #3]
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	440b      	add	r3, r1
 800181e:	3342      	adds	r3, #66	; 0x42
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]
      break;
 8001824:	e002      	b.n	800182c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001826:	bf00      	nop
 8001828:	e000      	b.n	800182c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800182a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800182c:	78fa      	ldrb	r2, [r7, #3]
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	440b      	add	r3, r1
 800183a:	3344      	adds	r3, #68	; 0x44
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001840:	78fa      	ldrb	r2, [r7, #3]
 8001842:	8b39      	ldrh	r1, [r7, #24]
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	4613      	mov	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	4403      	add	r3, r0
 8001850:	3348      	adds	r3, #72	; 0x48
 8001852:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001854:	78fa      	ldrb	r2, [r7, #3]
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	440b      	add	r3, r1
 8001862:	335c      	adds	r3, #92	; 0x5c
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001868:	78fa      	ldrb	r2, [r7, #3]
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	440b      	add	r3, r1
 8001876:	334c      	adds	r3, #76	; 0x4c
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800187c:	78fa      	ldrb	r2, [r7, #3]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	440b      	add	r3, r1
 800188a:	3339      	adds	r3, #57	; 0x39
 800188c:	78fa      	ldrb	r2, [r7, #3]
 800188e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001890:	78fa      	ldrb	r2, [r7, #3]
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	440b      	add	r3, r1
 800189e:	335d      	adds	r3, #93	; 0x5d
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6818      	ldr	r0, [r3, #0]
 80018a8:	78fa      	ldrb	r2, [r7, #3]
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	3338      	adds	r3, #56	; 0x38
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	18d1      	adds	r1, r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	461a      	mov	r2, r3
 80018c0:	f003 fa66 	bl	8004d90 <USB_HC_StartXfer>
 80018c4:	4603      	mov	r3, r0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop

080018d0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f002 ff83 	bl	80047f2 <USB_GetMode>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	f040 80ef 	bne.w	8001ad2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f002 ff67 	bl	80047cc <USB_ReadInterrupts>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 80e5 	beq.w	8001ad0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f002 ff5e 	bl	80047cc <USB_ReadInterrupts>
 8001910:	4603      	mov	r3, r0
 8001912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001916:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800191a:	d104      	bne.n	8001926 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001924:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f002 ff4e 	bl	80047cc <USB_ReadInterrupts>
 8001930:	4603      	mov	r3, r0
 8001932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800193a:	d104      	bne.n	8001946 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001944:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f002 ff3e 	bl	80047cc <USB_ReadInterrupts>
 8001950:	4603      	mov	r3, r0
 8001952:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001956:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800195a:	d104      	bne.n	8001966 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001964:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f002 ff2e 	bl	80047cc <USB_ReadInterrupts>
 8001970:	4603      	mov	r3, r0
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b02      	cmp	r3, #2
 8001978:	d103      	bne.n	8001982 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2202      	movs	r2, #2
 8001980:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f002 ff20 	bl	80047cc <USB_ReadInterrupts>
 800198c:	4603      	mov	r3, r0
 800198e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001992:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001996:	d115      	bne.n	80019c4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80019a0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d108      	bne.n	80019c4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f005 fcd8 	bl	8007368 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2101      	movs	r1, #1
 80019be:	4618      	mov	r0, r3
 80019c0:	f003 f816 	bl	80049f0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f002 feff 	bl	80047cc <USB_ReadInterrupts>
 80019ce:	4603      	mov	r3, r0
 80019d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d8:	d102      	bne.n	80019e0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f001 f966 	bl	8002cac <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f002 fef1 	bl	80047cc <USB_ReadInterrupts>
 80019ea:	4603      	mov	r3, r0
 80019ec:	f003 0308 	and.w	r3, r3, #8
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	d106      	bne.n	8001a02 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f005 fc9b 	bl	8007330 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2208      	movs	r2, #8
 8001a00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f002 fee0 	bl	80047cc <USB_ReadInterrupts>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a16:	d138      	bne.n	8001a8a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f003 fafd 	bl	800501c <USB_HC_ReadInterrupt>
 8001a22:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	e025      	b.n	8001a76 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f003 030f 	and.w	r3, r3, #15
 8001a30:	68ba      	ldr	r2, [r7, #8]
 8001a32:	fa22 f303 	lsr.w	r3, r2, r3
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d018      	beq.n	8001a70 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	015a      	lsls	r2, r3, #5
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4413      	add	r3, r2
 8001a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a54:	d106      	bne.n	8001a64 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f8cf 	bl	8001c00 <HCD_HC_IN_IRQHandler>
 8001a62:	e005      	b.n	8001a70 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	4619      	mov	r1, r3
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 fcfd 	bl	800246a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	3301      	adds	r3, #1
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d3d4      	bcc.n	8001a2a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f002 fe9c 	bl	80047cc <USB_ReadInterrupts>
 8001a94:	4603      	mov	r3, r0
 8001a96:	f003 0310 	and.w	r3, r3, #16
 8001a9a:	2b10      	cmp	r3, #16
 8001a9c:	d101      	bne.n	8001aa2 <HAL_HCD_IRQHandler+0x1d2>
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e000      	b.n	8001aa4 <HAL_HCD_IRQHandler+0x1d4>
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d014      	beq.n	8001ad2 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	699a      	ldr	r2, [r3, #24]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0210 	bic.w	r2, r2, #16
 8001ab6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f001 f84b 	bl	8002b54 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	699a      	ldr	r2, [r3, #24]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f042 0210 	orr.w	r2, r2, #16
 8001acc:	619a      	str	r2, [r3, #24]
 8001ace:	e000      	b.n	8001ad2 <HAL_HCD_IRQHandler+0x202>
      return;
 8001ad0:	bf00      	nop
    }
  }
}
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d101      	bne.n	8001aee <HAL_HCD_Start+0x16>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e013      	b.n	8001b16 <HAL_HCD_Start+0x3e>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f002 fd73 	bl	80045e6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2101      	movs	r1, #1
 8001b06:	4618      	mov	r0, r3
 8001b08:	f002 ffd6 	bl	8004ab8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d101      	bne.n	8001b34 <HAL_HCD_Stop+0x16>
 8001b30:	2302      	movs	r3, #2
 8001b32:	e00d      	b.n	8001b50 <HAL_HCD_Stop+0x32>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f003 fbb7 	bl	80052b4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f002 ff7d 	bl	8004a64 <USB_ResetPort>
 8001b6a:	4603      	mov	r3, r0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b80:	78fa      	ldrb	r2, [r7, #3]
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	440b      	add	r3, r1
 8001b8e:	335c      	adds	r3, #92	; 0x5c
 8001b90:	781b      	ldrb	r3, [r3, #0]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001baa:	78fa      	ldrb	r2, [r7, #3]
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	440b      	add	r3, r1
 8001bb8:	334c      	adds	r3, #76	; 0x4c
 8001bba:	681b      	ldr	r3, [r3, #0]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f002 ffbf 	bl	8004b58 <USB_GetCurrentFrame>
 8001bda:	4603      	mov	r3, r0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f002 ff9a 	bl	8004b2a <USB_GetHostSpeed>
 8001bf6:	4603      	mov	r3, r0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c16:	78fb      	ldrb	r3, [r7, #3]
 8001c18:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	015a      	lsls	r2, r3, #5
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4413      	add	r3, r2
 8001c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	d119      	bne.n	8001c64 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	015a      	lsls	r2, r3, #5
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4413      	add	r3, r2
 8001c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	2304      	movs	r3, #4
 8001c40:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	015a      	lsls	r2, r3, #5
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4413      	add	r3, r2
 8001c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	0151      	lsls	r1, r2, #5
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	440a      	add	r2, r1
 8001c58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c5c:	f043 0302 	orr.w	r3, r3, #2
 8001c60:	60d3      	str	r3, [r2, #12]
 8001c62:	e0ce      	b.n	8001e02 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	015a      	lsls	r2, r3, #5
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c7a:	d12c      	bne.n	8001cd6 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	015a      	lsls	r2, r3, #5
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	4413      	add	r3, r2
 8001c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c88:	461a      	mov	r2, r3
 8001c8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	440b      	add	r3, r1
 8001c9e:	335d      	adds	r3, #93	; 0x5d
 8001ca0:	2207      	movs	r2, #7
 8001ca2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	015a      	lsls	r2, r3, #5
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	4413      	add	r3, r2
 8001cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	0151      	lsls	r1, r2, #5
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	440a      	add	r2, r1
 8001cba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cbe:	f043 0302 	orr.w	r3, r3, #2
 8001cc2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	4611      	mov	r1, r2
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f003 f9b5 	bl	800503e <USB_HC_Halt>
 8001cd4:	e095      	b.n	8001e02 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	015a      	lsls	r2, r3, #5
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4413      	add	r3, r2
 8001cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 0320 	and.w	r3, r3, #32
 8001ce8:	2b20      	cmp	r3, #32
 8001cea:	d109      	bne.n	8001d00 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	015a      	lsls	r2, r3, #5
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	2320      	movs	r3, #32
 8001cfc:	6093      	str	r3, [r2, #8]
 8001cfe:	e080      	b.n	8001e02 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	015a      	lsls	r2, r3, #5
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4413      	add	r3, r2
 8001d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b08      	cmp	r3, #8
 8001d14:	d134      	bne.n	8001d80 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	015a      	lsls	r2, r3, #5
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	0151      	lsls	r1, r2, #5
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	440a      	add	r2, r1
 8001d2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	440b      	add	r3, r1
 8001d44:	335d      	adds	r3, #93	; 0x5d
 8001d46:	2205      	movs	r2, #5
 8001d48:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	015a      	lsls	r2, r3, #5
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4413      	add	r3, r2
 8001d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d56:	461a      	mov	r2, r3
 8001d58:	2310      	movs	r3, #16
 8001d5a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	015a      	lsls	r2, r3, #5
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	4413      	add	r3, r2
 8001d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d68:	461a      	mov	r2, r3
 8001d6a:	2308      	movs	r3, #8
 8001d6c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	4611      	mov	r1, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f003 f960 	bl	800503e <USB_HC_Halt>
 8001d7e:	e040      	b.n	8001e02 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	015a      	lsls	r2, r3, #5
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4413      	add	r3, r2
 8001d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d96:	d134      	bne.n	8001e02 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	015a      	lsls	r2, r3, #5
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	0151      	lsls	r1, r2, #5
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	440a      	add	r2, r1
 8001dae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001db2:	f043 0302 	orr.w	r3, r3, #2
 8001db6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f003 f93b 	bl	800503e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	015a      	lsls	r2, r3, #5
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4413      	add	r3, r2
 8001dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	2310      	movs	r3, #16
 8001dd8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4613      	mov	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	440b      	add	r3, r1
 8001de8:	335d      	adds	r3, #93	; 0x5d
 8001dea:	2208      	movs	r2, #8
 8001dec:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	015a      	lsls	r2, r3, #5
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4413      	add	r3, r2
 8001df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e00:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	015a      	lsls	r2, r3, #5
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4413      	add	r3, r2
 8001e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e18:	d122      	bne.n	8001e60 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	015a      	lsls	r2, r3, #5
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4413      	add	r3, r2
 8001e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	0151      	lsls	r1, r2, #5
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	440a      	add	r2, r1
 8001e30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f003 f8fa 	bl	800503e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	015a      	lsls	r2, r3, #5
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	4413      	add	r3, r2
 8001e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e56:	461a      	mov	r2, r3
 8001e58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e5c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001e5e:	e300      	b.n	8002462 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	015a      	lsls	r2, r3, #5
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4413      	add	r3, r2
 8001e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	f040 80fd 	bne.w	8002072 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d01b      	beq.n	8001eb8 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	440b      	add	r3, r1
 8001e8e:	3348      	adds	r3, #72	; 0x48
 8001e90:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	0159      	lsls	r1, r3, #5
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	440b      	add	r3, r1
 8001e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001ea4:	1ad1      	subs	r1, r2, r3
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4403      	add	r3, r0
 8001eb4:	334c      	adds	r3, #76	; 0x4c
 8001eb6:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	440b      	add	r3, r1
 8001ec6:	335d      	adds	r3, #93	; 0x5d
 8001ec8:	2201      	movs	r2, #1
 8001eca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	440b      	add	r3, r1
 8001eda:	3358      	adds	r3, #88	; 0x58
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	015a      	lsls	r2, r3, #5
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eec:	461a      	mov	r2, r3
 8001eee:	2301      	movs	r3, #1
 8001ef0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	440b      	add	r3, r1
 8001f00:	333f      	adds	r3, #63	; 0x3f
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00a      	beq.n	8001f1e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	440b      	add	r3, r1
 8001f16:	333f      	adds	r3, #63	; 0x3f
 8001f18:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d121      	bne.n	8001f62 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	015a      	lsls	r2, r3, #5
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4413      	add	r3, r2
 8001f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	0151      	lsls	r1, r2, #5
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	440a      	add	r2, r1
 8001f34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f38:	f043 0302 	orr.w	r3, r3, #2
 8001f3c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	4611      	mov	r1, r2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f003 f878 	bl	800503e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	015a      	lsls	r2, r3, #5
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	2310      	movs	r3, #16
 8001f5e:	6093      	str	r3, [r2, #8]
 8001f60:	e070      	b.n	8002044 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	440b      	add	r3, r1
 8001f70:	333f      	adds	r3, #63	; 0x3f
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	d12a      	bne.n	8001fce <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	015a      	lsls	r2, r3, #5
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4413      	add	r3, r2
 8001f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	0151      	lsls	r1, r2, #5
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	440a      	add	r2, r1
 8001f8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f96:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	440b      	add	r3, r1
 8001fa6:	335c      	adds	r3, #92	; 0x5c
 8001fa8:	2201      	movs	r2, #1
 8001faa:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	b2d8      	uxtb	r0, r3
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	440b      	add	r3, r1
 8001fbe:	335c      	adds	r3, #92	; 0x5c
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4601      	mov	r1, r0
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f005 f9dc 	bl	8007384 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001fcc:	e03a      	b.n	8002044 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	440b      	add	r3, r1
 8001fdc:	333f      	adds	r3, #63	; 0x3f
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d12f      	bne.n	8002044 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	440b      	add	r3, r1
 8001ff2:	335c      	adds	r3, #92	; 0x5c
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	440b      	add	r3, r1
 8002006:	3350      	adds	r3, #80	; 0x50
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	f083 0301 	eor.w	r3, r3, #1
 800200e:	b2d8      	uxtb	r0, r3
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	440b      	add	r3, r1
 800201e:	3350      	adds	r3, #80	; 0x50
 8002020:	4602      	mov	r2, r0
 8002022:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	b2d8      	uxtb	r0, r3
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	440b      	add	r3, r1
 8002036:	335c      	adds	r3, #92	; 0x5c
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	461a      	mov	r2, r3
 800203c:	4601      	mov	r1, r0
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f005 f9a0 	bl	8007384 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	4613      	mov	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	440b      	add	r3, r1
 8002052:	3350      	adds	r3, #80	; 0x50
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	f083 0301 	eor.w	r3, r3, #1
 800205a:	b2d8      	uxtb	r0, r3
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	4613      	mov	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	440b      	add	r3, r1
 800206a:	3350      	adds	r3, #80	; 0x50
 800206c:	4602      	mov	r2, r0
 800206e:	701a      	strb	r2, [r3, #0]
}
 8002070:	e1f7      	b.n	8002462 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	015a      	lsls	r2, r3, #5
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4413      	add	r3, r2
 800207a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b02      	cmp	r3, #2
 8002086:	f040 811a 	bne.w	80022be <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	015a      	lsls	r2, r3, #5
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4413      	add	r3, r2
 8002092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	0151      	lsls	r1, r2, #5
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	440a      	add	r2, r1
 80020a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020a4:	f023 0302 	bic.w	r3, r3, #2
 80020a8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	440b      	add	r3, r1
 80020b8:	335d      	adds	r3, #93	; 0x5d
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d10a      	bne.n	80020d6 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	440b      	add	r3, r1
 80020ce:	335c      	adds	r3, #92	; 0x5c
 80020d0:	2201      	movs	r2, #1
 80020d2:	701a      	strb	r2, [r3, #0]
 80020d4:	e0d9      	b.n	800228a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	440b      	add	r3, r1
 80020e4:	335d      	adds	r3, #93	; 0x5d
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b05      	cmp	r3, #5
 80020ea:	d10a      	bne.n	8002102 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	440b      	add	r3, r1
 80020fa:	335c      	adds	r3, #92	; 0x5c
 80020fc:	2205      	movs	r2, #5
 80020fe:	701a      	strb	r2, [r3, #0]
 8002100:	e0c3      	b.n	800228a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	440b      	add	r3, r1
 8002110:	335d      	adds	r3, #93	; 0x5d
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b06      	cmp	r3, #6
 8002116:	d00a      	beq.n	800212e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	440b      	add	r3, r1
 8002126:	335d      	adds	r3, #93	; 0x5d
 8002128:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800212a:	2b08      	cmp	r3, #8
 800212c:	d156      	bne.n	80021dc <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	440b      	add	r3, r1
 800213c:	3358      	adds	r3, #88	; 0x58
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	1c59      	adds	r1, r3, #1
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4403      	add	r3, r0
 8002150:	3358      	adds	r3, #88	; 0x58
 8002152:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	440b      	add	r3, r1
 8002162:	3358      	adds	r3, #88	; 0x58
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2b03      	cmp	r3, #3
 8002168:	d914      	bls.n	8002194 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	440b      	add	r3, r1
 8002178:	3358      	adds	r3, #88	; 0x58
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	4613      	mov	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	440b      	add	r3, r1
 800218c:	335c      	adds	r3, #92	; 0x5c
 800218e:	2204      	movs	r2, #4
 8002190:	701a      	strb	r2, [r3, #0]
 8002192:	e009      	b.n	80021a8 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	440b      	add	r3, r1
 80021a2:	335c      	adds	r3, #92	; 0x5c
 80021a4:	2202      	movs	r2, #2
 80021a6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021be:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021c6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	015a      	lsls	r2, r3, #5
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	4413      	add	r3, r2
 80021d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d4:	461a      	mov	r2, r3
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	e056      	b.n	800228a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	440b      	add	r3, r1
 80021ea:	335d      	adds	r3, #93	; 0x5d
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	d123      	bne.n	800223a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	440b      	add	r3, r1
 8002200:	335c      	adds	r3, #92	; 0x5c
 8002202:	2202      	movs	r2, #2
 8002204:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4413      	add	r3, r2
 800220e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800221c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002224:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	015a      	lsls	r2, r3, #5
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4413      	add	r3, r2
 800222e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002232:	461a      	mov	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	e027      	b.n	800228a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	440b      	add	r3, r1
 8002248:	335d      	adds	r3, #93	; 0x5d
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b07      	cmp	r3, #7
 800224e:	d11c      	bne.n	800228a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	440b      	add	r3, r1
 800225e:	3358      	adds	r3, #88	; 0x58
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	1c59      	adds	r1, r3, #1
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4403      	add	r3, r0
 8002272:	3358      	adds	r3, #88	; 0x58
 8002274:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	440b      	add	r3, r1
 8002284:	335c      	adds	r3, #92	; 0x5c
 8002286:	2204      	movs	r2, #4
 8002288:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	015a      	lsls	r2, r3, #5
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4413      	add	r3, r2
 8002292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002296:	461a      	mov	r2, r3
 8002298:	2302      	movs	r3, #2
 800229a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	b2d8      	uxtb	r0, r3
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	4613      	mov	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	440b      	add	r3, r1
 80022ae:	335c      	adds	r3, #92	; 0x5c
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	4601      	mov	r1, r0
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f005 f864 	bl	8007384 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80022bc:	e0d1      	b.n	8002462 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d0:	2b80      	cmp	r3, #128	; 0x80
 80022d2:	d13e      	bne.n	8002352 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	015a      	lsls	r2, r3, #5
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4413      	add	r3, r2
 80022dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	0151      	lsls	r1, r2, #5
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	440a      	add	r2, r1
 80022ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022ee:	f043 0302 	orr.w	r3, r3, #2
 80022f2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	440b      	add	r3, r1
 8002302:	3358      	adds	r3, #88	; 0x58
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	1c59      	adds	r1, r3, #1
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	4403      	add	r3, r0
 8002316:	3358      	adds	r3, #88	; 0x58
 8002318:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	440b      	add	r3, r1
 8002328:	335d      	adds	r3, #93	; 0x5d
 800232a:	2206      	movs	r2, #6
 800232c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f002 fe80 	bl	800503e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4413      	add	r3, r2
 8002346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234a:	461a      	mov	r2, r3
 800234c:	2380      	movs	r3, #128	; 0x80
 800234e:	6093      	str	r3, [r2, #8]
}
 8002350:	e087      	b.n	8002462 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	015a      	lsls	r2, r3, #5
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4413      	add	r3, r2
 800235a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 0310 	and.w	r3, r3, #16
 8002364:	2b10      	cmp	r3, #16
 8002366:	d17c      	bne.n	8002462 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	4613      	mov	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	440b      	add	r3, r1
 8002376:	333f      	adds	r3, #63	; 0x3f
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b03      	cmp	r3, #3
 800237c:	d122      	bne.n	80023c4 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	440b      	add	r3, r1
 800238c:	3358      	adds	r3, #88	; 0x58
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	015a      	lsls	r2, r3, #5
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4413      	add	r3, r2
 800239a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	0151      	lsls	r1, r2, #5
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	440a      	add	r2, r1
 80023a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023ac:	f043 0302 	orr.w	r3, r3, #2
 80023b0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	4611      	mov	r1, r2
 80023bc:	4618      	mov	r0, r3
 80023be:	f002 fe3e 	bl	800503e <USB_HC_Halt>
 80023c2:	e045      	b.n	8002450 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	440b      	add	r3, r1
 80023d2:	333f      	adds	r3, #63	; 0x3f
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00a      	beq.n	80023f0 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	4613      	mov	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	440b      	add	r3, r1
 80023e8:	333f      	adds	r3, #63	; 0x3f
 80023ea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d12f      	bne.n	8002450 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	440b      	add	r3, r1
 80023fe:	3358      	adds	r3, #88	; 0x58
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d121      	bne.n	8002450 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	440b      	add	r3, r1
 800241a:	335d      	adds	r3, #93	; 0x5d
 800241c:	2203      	movs	r2, #3
 800241e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	015a      	lsls	r2, r3, #5
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4413      	add	r3, r2
 8002428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	0151      	lsls	r1, r2, #5
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	440a      	add	r2, r1
 8002436:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800243a:	f043 0302 	orr.w	r3, r3, #2
 800243e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	4611      	mov	r1, r2
 800244a:	4618      	mov	r0, r3
 800244c:	f002 fdf7 	bl	800503e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	015a      	lsls	r2, r3, #5
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4413      	add	r3, r2
 8002458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245c:	461a      	mov	r2, r3
 800245e:	2310      	movs	r3, #16
 8002460:	6093      	str	r3, [r2, #8]
}
 8002462:	bf00      	nop
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b086      	sub	sp, #24
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	460b      	mov	r3, r1
 8002474:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002480:	78fb      	ldrb	r3, [r7, #3]
 8002482:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4413      	add	r3, r2
 800248c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 0304 	and.w	r3, r3, #4
 8002496:	2b04      	cmp	r3, #4
 8002498:	d119      	bne.n	80024ce <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	015a      	lsls	r2, r3, #5
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a6:	461a      	mov	r2, r3
 80024a8:	2304      	movs	r3, #4
 80024aa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	0151      	lsls	r1, r2, #5
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	440a      	add	r2, r1
 80024c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024c6:	f043 0302 	orr.w	r3, r3, #2
 80024ca:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80024cc:	e33e      	b.n	8002b4c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	015a      	lsls	r2, r3, #5
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 0320 	and.w	r3, r3, #32
 80024e0:	2b20      	cmp	r3, #32
 80024e2:	d141      	bne.n	8002568 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	015a      	lsls	r2, r3, #5
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f0:	461a      	mov	r2, r3
 80024f2:	2320      	movs	r3, #32
 80024f4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	440b      	add	r3, r1
 8002504:	333d      	adds	r3, #61	; 0x3d
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b01      	cmp	r3, #1
 800250a:	f040 831f 	bne.w	8002b4c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	440b      	add	r3, r1
 800251c:	333d      	adds	r3, #61	; 0x3d
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	4613      	mov	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	440b      	add	r3, r1
 8002530:	335c      	adds	r3, #92	; 0x5c
 8002532:	2202      	movs	r2, #2
 8002534:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	015a      	lsls	r2, r3, #5
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4413      	add	r3, r2
 800253e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	0151      	lsls	r1, r2, #5
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	440a      	add	r2, r1
 800254c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002550:	f043 0302 	orr.w	r3, r3, #2
 8002554:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	4611      	mov	r1, r2
 8002560:	4618      	mov	r0, r3
 8002562:	f002 fd6c 	bl	800503e <USB_HC_Halt>
}
 8002566:	e2f1      	b.n	8002b4c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	015a      	lsls	r2, r3, #5
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	4413      	add	r3, r2
 8002570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257a:	2b40      	cmp	r3, #64	; 0x40
 800257c:	d13f      	bne.n	80025fe <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	440b      	add	r3, r1
 800258c:	335d      	adds	r3, #93	; 0x5d
 800258e:	2204      	movs	r2, #4
 8002590:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	440b      	add	r3, r1
 80025a0:	333d      	adds	r3, #61	; 0x3d
 80025a2:	2201      	movs	r2, #1
 80025a4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	4613      	mov	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	440b      	add	r3, r1
 80025b4:	3358      	adds	r3, #88	; 0x58
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	015a      	lsls	r2, r3, #5
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	4413      	add	r3, r2
 80025c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	0151      	lsls	r1, r2, #5
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	440a      	add	r2, r1
 80025d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025d4:	f043 0302 	orr.w	r3, r3, #2
 80025d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	4611      	mov	r1, r2
 80025e4:	4618      	mov	r0, r3
 80025e6:	f002 fd2a 	bl	800503e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	015a      	lsls	r2, r3, #5
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f6:	461a      	mov	r2, r3
 80025f8:	2340      	movs	r3, #64	; 0x40
 80025fa:	6093      	str	r3, [r2, #8]
}
 80025fc:	e2a6      	b.n	8002b4c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	015a      	lsls	r2, r3, #5
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4413      	add	r3, r2
 8002606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002614:	d122      	bne.n	800265c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	015a      	lsls	r2, r3, #5
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	4413      	add	r3, r2
 800261e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	0151      	lsls	r1, r2, #5
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	440a      	add	r2, r1
 800262c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002630:	f043 0302 	orr.w	r3, r3, #2
 8002634:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f002 fcfc 	bl	800503e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	015a      	lsls	r2, r3, #5
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	4413      	add	r3, r2
 800264e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002652:	461a      	mov	r2, r3
 8002654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002658:	6093      	str	r3, [r2, #8]
}
 800265a:	e277      	b.n	8002b4c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4413      	add	r3, r2
 8002664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b01      	cmp	r3, #1
 8002670:	d135      	bne.n	80026de <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	440b      	add	r3, r1
 8002680:	3358      	adds	r3, #88	; 0x58
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4413      	add	r3, r2
 800268e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	0151      	lsls	r1, r2, #5
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	440a      	add	r2, r1
 800269c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026a0:	f043 0302 	orr.w	r3, r3, #2
 80026a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	4611      	mov	r1, r2
 80026b0:	4618      	mov	r0, r3
 80026b2:	f002 fcc4 	bl	800503e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	015a      	lsls	r2, r3, #5
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4413      	add	r3, r2
 80026be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c2:	461a      	mov	r2, r3
 80026c4:	2301      	movs	r3, #1
 80026c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	4613      	mov	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	440b      	add	r3, r1
 80026d6:	335d      	adds	r3, #93	; 0x5d
 80026d8:	2201      	movs	r2, #1
 80026da:	701a      	strb	r2, [r3, #0]
}
 80026dc:	e236      	b.n	8002b4c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	015a      	lsls	r2, r3, #5
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d12b      	bne.n	800274c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	015a      	lsls	r2, r3, #5
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4413      	add	r3, r2
 80026fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002700:	461a      	mov	r2, r3
 8002702:	2308      	movs	r3, #8
 8002704:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	015a      	lsls	r2, r3, #5
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4413      	add	r3, r2
 800270e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	0151      	lsls	r1, r2, #5
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	440a      	add	r2, r1
 800271c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002720:	f043 0302 	orr.w	r3, r3, #2
 8002724:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f002 fc84 	bl	800503e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	440b      	add	r3, r1
 8002744:	335d      	adds	r3, #93	; 0x5d
 8002746:	2205      	movs	r2, #5
 8002748:	701a      	strb	r2, [r3, #0]
}
 800274a:	e1ff      	b.n	8002b4c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	015a      	lsls	r2, r3, #5
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4413      	add	r3, r2
 8002754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	2b10      	cmp	r3, #16
 8002760:	d155      	bne.n	800280e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	440b      	add	r3, r1
 8002770:	3358      	adds	r3, #88	; 0x58
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	4613      	mov	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	440b      	add	r3, r1
 8002784:	335d      	adds	r3, #93	; 0x5d
 8002786:	2203      	movs	r2, #3
 8002788:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	4613      	mov	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	440b      	add	r3, r1
 8002798:	333d      	adds	r3, #61	; 0x3d
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d114      	bne.n	80027ca <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	440b      	add	r3, r1
 80027ae:	333c      	adds	r3, #60	; 0x3c
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d109      	bne.n	80027ca <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	440b      	add	r3, r1
 80027c4:	333d      	adds	r3, #61	; 0x3d
 80027c6:	2201      	movs	r2, #1
 80027c8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	015a      	lsls	r2, r3, #5
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4413      	add	r3, r2
 80027d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	0151      	lsls	r1, r2, #5
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	440a      	add	r2, r1
 80027e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027e4:	f043 0302 	orr.w	r3, r3, #2
 80027e8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	4611      	mov	r1, r2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f002 fc22 	bl	800503e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	015a      	lsls	r2, r3, #5
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4413      	add	r3, r2
 8002802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002806:	461a      	mov	r2, r3
 8002808:	2310      	movs	r3, #16
 800280a:	6093      	str	r3, [r2, #8]
}
 800280c:	e19e      	b.n	8002b4c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	015a      	lsls	r2, r3, #5
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	4413      	add	r3, r2
 8002816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002820:	2b80      	cmp	r3, #128	; 0x80
 8002822:	d12b      	bne.n	800287c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4413      	add	r3, r2
 800282c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	0151      	lsls	r1, r2, #5
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	440a      	add	r2, r1
 800283a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800283e:	f043 0302 	orr.w	r3, r3, #2
 8002842:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	4611      	mov	r1, r2
 800284e:	4618      	mov	r0, r3
 8002850:	f002 fbf5 	bl	800503e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	440b      	add	r3, r1
 8002862:	335d      	adds	r3, #93	; 0x5d
 8002864:	2206      	movs	r2, #6
 8002866:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4413      	add	r3, r2
 8002870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002874:	461a      	mov	r2, r3
 8002876:	2380      	movs	r3, #128	; 0x80
 8002878:	6093      	str	r3, [r2, #8]
}
 800287a:	e167      	b.n	8002b4c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	4413      	add	r3, r2
 8002884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800288e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002892:	d135      	bne.n	8002900 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	015a      	lsls	r2, r3, #5
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4413      	add	r3, r2
 800289c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	0151      	lsls	r1, r2, #5
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	440a      	add	r2, r1
 80028aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028ae:	f043 0302 	orr.w	r3, r3, #2
 80028b2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	4611      	mov	r1, r2
 80028be:	4618      	mov	r0, r3
 80028c0:	f002 fbbd 	bl	800503e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d0:	461a      	mov	r2, r3
 80028d2:	2310      	movs	r3, #16
 80028d4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	015a      	lsls	r2, r3, #5
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e2:	461a      	mov	r2, r3
 80028e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	440b      	add	r3, r1
 80028f8:	335d      	adds	r3, #93	; 0x5d
 80028fa:	2208      	movs	r2, #8
 80028fc:	701a      	strb	r2, [r3, #0]
}
 80028fe:	e125      	b.n	8002b4c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	015a      	lsls	r2, r3, #5
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	4413      	add	r3, r2
 8002908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b02      	cmp	r3, #2
 8002914:	f040 811a 	bne.w	8002b4c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4413      	add	r3, r2
 8002920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	0151      	lsls	r1, r2, #5
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	440a      	add	r2, r1
 800292e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002932:	f023 0302 	bic.w	r3, r3, #2
 8002936:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	440b      	add	r3, r1
 8002946:	335d      	adds	r3, #93	; 0x5d
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d137      	bne.n	80029be <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	440b      	add	r3, r1
 800295c:	335c      	adds	r3, #92	; 0x5c
 800295e:	2201      	movs	r2, #1
 8002960:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	440b      	add	r3, r1
 8002970:	333f      	adds	r3, #63	; 0x3f
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b02      	cmp	r3, #2
 8002976:	d00b      	beq.n	8002990 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	440b      	add	r3, r1
 8002986:	333f      	adds	r3, #63	; 0x3f
 8002988:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800298a:	2b03      	cmp	r3, #3
 800298c:	f040 80c5 	bne.w	8002b1a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	440b      	add	r3, r1
 800299e:	3351      	adds	r3, #81	; 0x51
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	f083 0301 	eor.w	r3, r3, #1
 80029a6:	b2d8      	uxtb	r0, r3
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	440b      	add	r3, r1
 80029b6:	3351      	adds	r3, #81	; 0x51
 80029b8:	4602      	mov	r2, r0
 80029ba:	701a      	strb	r2, [r3, #0]
 80029bc:	e0ad      	b.n	8002b1a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	4613      	mov	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	440b      	add	r3, r1
 80029cc:	335d      	adds	r3, #93	; 0x5d
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d10a      	bne.n	80029ea <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4613      	mov	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	440b      	add	r3, r1
 80029e2:	335c      	adds	r3, #92	; 0x5c
 80029e4:	2202      	movs	r2, #2
 80029e6:	701a      	strb	r2, [r3, #0]
 80029e8:	e097      	b.n	8002b1a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	440b      	add	r3, r1
 80029f8:	335d      	adds	r3, #93	; 0x5d
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d10a      	bne.n	8002a16 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	440b      	add	r3, r1
 8002a0e:	335c      	adds	r3, #92	; 0x5c
 8002a10:	2202      	movs	r2, #2
 8002a12:	701a      	strb	r2, [r3, #0]
 8002a14:	e081      	b.n	8002b1a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	440b      	add	r3, r1
 8002a24:	335d      	adds	r3, #93	; 0x5d
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b05      	cmp	r3, #5
 8002a2a:	d10a      	bne.n	8002a42 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	440b      	add	r3, r1
 8002a3a:	335c      	adds	r3, #92	; 0x5c
 8002a3c:	2205      	movs	r2, #5
 8002a3e:	701a      	strb	r2, [r3, #0]
 8002a40:	e06b      	b.n	8002b1a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	440b      	add	r3, r1
 8002a50:	335d      	adds	r3, #93	; 0x5d
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b06      	cmp	r3, #6
 8002a56:	d00a      	beq.n	8002a6e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	440b      	add	r3, r1
 8002a66:	335d      	adds	r3, #93	; 0x5d
 8002a68:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d155      	bne.n	8002b1a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	4613      	mov	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	440b      	add	r3, r1
 8002a7c:	3358      	adds	r3, #88	; 0x58
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	1c59      	adds	r1, r3, #1
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	4613      	mov	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4403      	add	r3, r0
 8002a90:	3358      	adds	r3, #88	; 0x58
 8002a92:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	440b      	add	r3, r1
 8002aa2:	3358      	adds	r3, #88	; 0x58
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d914      	bls.n	8002ad4 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	440b      	add	r3, r1
 8002ab8:	3358      	adds	r3, #88	; 0x58
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	440b      	add	r3, r1
 8002acc:	335c      	adds	r3, #92	; 0x5c
 8002ace:	2204      	movs	r2, #4
 8002ad0:	701a      	strb	r2, [r3, #0]
 8002ad2:	e009      	b.n	8002ae8 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	440b      	add	r3, r1
 8002ae2:	335c      	adds	r3, #92	; 0x5c
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	015a      	lsls	r2, r3, #5
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4413      	add	r3, r2
 8002af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002afe:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b06:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b14:	461a      	mov	r2, r3
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	015a      	lsls	r2, r3, #5
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4413      	add	r3, r2
 8002b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b26:	461a      	mov	r2, r3
 8002b28:	2302      	movs	r3, #2
 8002b2a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	b2d8      	uxtb	r0, r3
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	440b      	add	r3, r1
 8002b3e:	335c      	adds	r3, #92	; 0x5c
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	4601      	mov	r1, r0
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f004 fc1c 	bl	8007384 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b4c:	bf00      	nop
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08a      	sub	sp, #40	; 0x28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	f003 030f 	and.w	r3, r3, #15
 8002b74:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	0c5b      	lsrs	r3, r3, #17
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	091b      	lsrs	r3, r3, #4
 8002b84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b88:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d003      	beq.n	8002b98 <HCD_RXQLVL_IRQHandler+0x44>
 8002b90:	2b05      	cmp	r3, #5
 8002b92:	f000 8082 	beq.w	8002c9a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002b96:	e083      	b.n	8002ca0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d07f      	beq.n	8002c9e <HCD_RXQLVL_IRQHandler+0x14a>
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	440b      	add	r3, r1
 8002bac:	3344      	adds	r3, #68	; 0x44
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d074      	beq.n	8002c9e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6818      	ldr	r0, [r3, #0]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	440b      	add	r3, r1
 8002bc6:	3344      	adds	r3, #68	; 0x44
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	b292      	uxth	r2, r2
 8002bce:	4619      	mov	r1, r3
 8002bd0:	f001 fdd3 	bl	800477a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	440b      	add	r3, r1
 8002be2:	3344      	adds	r3, #68	; 0x44
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	18d1      	adds	r1, r2, r3
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4403      	add	r3, r0
 8002bf8:	3344      	adds	r3, #68	; 0x44
 8002bfa:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	440b      	add	r3, r1
 8002c0a:	334c      	adds	r3, #76	; 0x4c
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	18d1      	adds	r1, r2, r3
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4613      	mov	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	4403      	add	r3, r0
 8002c20:	334c      	adds	r3, #76	; 0x4c
 8002c22:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	015a      	lsls	r2, r3, #5
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c30:	691a      	ldr	r2, [r3, #16]
 8002c32:	4b1d      	ldr	r3, [pc, #116]	; (8002ca8 <HCD_RXQLVL_IRQHandler+0x154>)
 8002c34:	4013      	ands	r3, r2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d031      	beq.n	8002c9e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	015a      	lsls	r2, r3, #5
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	4413      	add	r3, r2
 8002c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c50:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c58:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c66:	461a      	mov	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	440b      	add	r3, r1
 8002c7a:	3350      	adds	r3, #80	; 0x50
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	f083 0301 	eor.w	r3, r3, #1
 8002c82:	b2d8      	uxtb	r0, r3
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	440b      	add	r3, r1
 8002c92:	3350      	adds	r3, #80	; 0x50
 8002c94:	4602      	mov	r2, r0
 8002c96:	701a      	strb	r2, [r3, #0]
      break;
 8002c98:	e001      	b.n	8002c9e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002c9a:	bf00      	nop
 8002c9c:	e000      	b.n	8002ca0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002c9e:	bf00      	nop
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	3728      	adds	r7, #40	; 0x28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	1ff80000 	.word	0x1ff80000

08002cac <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002cd8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d10b      	bne.n	8002cfc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d102      	bne.n	8002cf4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f004 fb2c 	bl	800734c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f043 0302 	orr.w	r3, r3, #2
 8002cfa:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d132      	bne.n	8002d6c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	f043 0308 	orr.w	r3, r3, #8
 8002d0c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d126      	bne.n	8002d66 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d113      	bne.n	8002d48 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002d26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d2a:	d106      	bne.n	8002d3a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2102      	movs	r1, #2
 8002d32:	4618      	mov	r0, r3
 8002d34:	f001 fe5c 	bl	80049f0 <USB_InitFSLSPClkSel>
 8002d38:	e011      	b.n	8002d5e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2101      	movs	r1, #1
 8002d40:	4618      	mov	r0, r3
 8002d42:	f001 fe55 	bl	80049f0 <USB_InitFSLSPClkSel>
 8002d46:	e00a      	b.n	8002d5e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d106      	bne.n	8002d5e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d56:	461a      	mov	r2, r3
 8002d58:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002d5c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f004 fb1e 	bl	80073a0 <HAL_HCD_PortEnabled_Callback>
 8002d64:	e002      	b.n	8002d6c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f004 fb28 	bl	80073bc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b20      	cmp	r3, #32
 8002d74:	d103      	bne.n	8002d7e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	f043 0320 	orr.w	r3, r3, #32
 8002d7c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d84:	461a      	mov	r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	6013      	str	r3, [r2, #0]
}
 8002d8a:	bf00      	nop
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
	...

08002d94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e11f      	b.n	8002fe6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7fd fde2 	bl	8000984 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2224      	movs	r2, #36	; 0x24
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0201 	bic.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002de6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002df6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002df8:	f001 f9de 	bl	80041b8 <HAL_RCC_GetPCLK1Freq>
 8002dfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	4a7b      	ldr	r2, [pc, #492]	; (8002ff0 <HAL_I2C_Init+0x25c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d807      	bhi.n	8002e18 <HAL_I2C_Init+0x84>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4a7a      	ldr	r2, [pc, #488]	; (8002ff4 <HAL_I2C_Init+0x260>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	bf94      	ite	ls
 8002e10:	2301      	movls	r3, #1
 8002e12:	2300      	movhi	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	e006      	b.n	8002e26 <HAL_I2C_Init+0x92>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4a77      	ldr	r2, [pc, #476]	; (8002ff8 <HAL_I2C_Init+0x264>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	bf94      	ite	ls
 8002e20:	2301      	movls	r3, #1
 8002e22:	2300      	movhi	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e0db      	b.n	8002fe6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4a72      	ldr	r2, [pc, #456]	; (8002ffc <HAL_I2C_Init+0x268>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	0c9b      	lsrs	r3, r3, #18
 8002e38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	4a64      	ldr	r2, [pc, #400]	; (8002ff0 <HAL_I2C_Init+0x25c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d802      	bhi.n	8002e68 <HAL_I2C_Init+0xd4>
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	3301      	adds	r3, #1
 8002e66:	e009      	b.n	8002e7c <HAL_I2C_Init+0xe8>
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e6e:	fb02 f303 	mul.w	r3, r2, r3
 8002e72:	4a63      	ldr	r2, [pc, #396]	; (8003000 <HAL_I2C_Init+0x26c>)
 8002e74:	fba2 2303 	umull	r2, r3, r2, r3
 8002e78:	099b      	lsrs	r3, r3, #6
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	430b      	orrs	r3, r1
 8002e82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	4956      	ldr	r1, [pc, #344]	; (8002ff0 <HAL_I2C_Init+0x25c>)
 8002e98:	428b      	cmp	r3, r1
 8002e9a:	d80d      	bhi.n	8002eb8 <HAL_I2C_Init+0x124>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	1e59      	subs	r1, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eaa:	3301      	adds	r3, #1
 8002eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	bf38      	it	cc
 8002eb4:	2304      	movcc	r3, #4
 8002eb6:	e04f      	b.n	8002f58 <HAL_I2C_Init+0x1c4>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d111      	bne.n	8002ee4 <HAL_I2C_Init+0x150>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	1e58      	subs	r0, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6859      	ldr	r1, [r3, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	440b      	add	r3, r1
 8002ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	bf0c      	ite	eq
 8002edc:	2301      	moveq	r3, #1
 8002ede:	2300      	movne	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	e012      	b.n	8002f0a <HAL_I2C_Init+0x176>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	1e58      	subs	r0, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6859      	ldr	r1, [r3, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	0099      	lsls	r1, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002efa:	3301      	adds	r3, #1
 8002efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	bf0c      	ite	eq
 8002f04:	2301      	moveq	r3, #1
 8002f06:	2300      	movne	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_I2C_Init+0x17e>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e022      	b.n	8002f58 <HAL_I2C_Init+0x1c4>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10e      	bne.n	8002f38 <HAL_I2C_Init+0x1a4>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	1e58      	subs	r0, r3, #1
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6859      	ldr	r1, [r3, #4]
 8002f22:	460b      	mov	r3, r1
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	440b      	add	r3, r1
 8002f28:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f36:	e00f      	b.n	8002f58 <HAL_I2C_Init+0x1c4>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	1e58      	subs	r0, r3, #1
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6859      	ldr	r1, [r3, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	0099      	lsls	r1, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f4e:	3301      	adds	r3, #1
 8002f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	6809      	ldr	r1, [r1, #0]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69da      	ldr	r2, [r3, #28]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6911      	ldr	r1, [r2, #16]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	68d2      	ldr	r2, [r2, #12]
 8002f92:	4311      	orrs	r1, r2
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0201 	orr.w	r2, r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	000186a0 	.word	0x000186a0
 8002ff4:	001e847f 	.word	0x001e847f
 8002ff8:	003d08ff 	.word	0x003d08ff
 8002ffc:	431bde83 	.word	0x431bde83
 8003000:	10624dd3 	.word	0x10624dd3

08003004 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b088      	sub	sp, #32
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e128      	b.n	8003268 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d109      	bne.n	8003036 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a90      	ldr	r2, [pc, #576]	; (8003270 <HAL_I2S_Init+0x26c>)
 800302e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7fd fcef 	bl	8000a14 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2202      	movs	r2, #2
 800303a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	6812      	ldr	r2, [r2, #0]
 8003048:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800304c:	f023 030f 	bic.w	r3, r3, #15
 8003050:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2202      	movs	r2, #2
 8003058:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	2b02      	cmp	r3, #2
 8003060:	d060      	beq.n	8003124 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d102      	bne.n	8003070 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800306a:	2310      	movs	r3, #16
 800306c:	617b      	str	r3, [r7, #20]
 800306e:	e001      	b.n	8003074 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003070:	2320      	movs	r3, #32
 8003072:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2b20      	cmp	r3, #32
 800307a:	d802      	bhi.n	8003082 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003082:	2001      	movs	r0, #1
 8003084:	f001 f98e 	bl	80043a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003088:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003092:	d125      	bne.n	80030e0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d010      	beq.n	80030be <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80030a6:	4613      	mov	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	461a      	mov	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b8:	3305      	adds	r3, #5
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	e01f      	b.n	80030fe <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80030c8:	4613      	mov	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	461a      	mov	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030da:	3305      	adds	r3, #5
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	e00e      	b.n	80030fe <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	461a      	mov	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fa:	3305      	adds	r3, #5
 80030fc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	4a5c      	ldr	r2, [pc, #368]	; (8003274 <HAL_I2S_Init+0x270>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	08db      	lsrs	r3, r3, #3
 8003108:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	085b      	lsrs	r3, r3, #1
 800311a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	021b      	lsls	r3, r3, #8
 8003120:	61bb      	str	r3, [r7, #24]
 8003122:	e003      	b.n	800312c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003124:	2302      	movs	r3, #2
 8003126:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d902      	bls.n	8003138 <HAL_I2S_Init+0x134>
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	2bff      	cmp	r3, #255	; 0xff
 8003136:	d907      	bls.n	8003148 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313c:	f043 0210 	orr.w	r2, r3, #16
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e08f      	b.n	8003268 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	ea42 0103 	orr.w	r1, r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69fa      	ldr	r2, [r7, #28]
 8003158:	430a      	orrs	r2, r1
 800315a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003166:	f023 030f 	bic.w	r3, r3, #15
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6851      	ldr	r1, [r2, #4]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6892      	ldr	r2, [r2, #8]
 8003172:	4311      	orrs	r1, r2
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	68d2      	ldr	r2, [r2, #12]
 8003178:	4311      	orrs	r1, r2
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6992      	ldr	r2, [r2, #24]
 800317e:	430a      	orrs	r2, r1
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800318a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d161      	bne.n	8003258 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a38      	ldr	r2, [pc, #224]	; (8003278 <HAL_I2S_Init+0x274>)
 8003198:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a37      	ldr	r2, [pc, #220]	; (800327c <HAL_I2S_Init+0x278>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d101      	bne.n	80031a8 <HAL_I2S_Init+0x1a4>
 80031a4:	4b36      	ldr	r3, [pc, #216]	; (8003280 <HAL_I2S_Init+0x27c>)
 80031a6:	e001      	b.n	80031ac <HAL_I2S_Init+0x1a8>
 80031a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6812      	ldr	r2, [r2, #0]
 80031b2:	4932      	ldr	r1, [pc, #200]	; (800327c <HAL_I2S_Init+0x278>)
 80031b4:	428a      	cmp	r2, r1
 80031b6:	d101      	bne.n	80031bc <HAL_I2S_Init+0x1b8>
 80031b8:	4a31      	ldr	r2, [pc, #196]	; (8003280 <HAL_I2S_Init+0x27c>)
 80031ba:	e001      	b.n	80031c0 <HAL_I2S_Init+0x1bc>
 80031bc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80031c0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031c4:	f023 030f 	bic.w	r3, r3, #15
 80031c8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a2b      	ldr	r2, [pc, #172]	; (800327c <HAL_I2S_Init+0x278>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d101      	bne.n	80031d8 <HAL_I2S_Init+0x1d4>
 80031d4:	4b2a      	ldr	r3, [pc, #168]	; (8003280 <HAL_I2S_Init+0x27c>)
 80031d6:	e001      	b.n	80031dc <HAL_I2S_Init+0x1d8>
 80031d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031dc:	2202      	movs	r2, #2
 80031de:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a25      	ldr	r2, [pc, #148]	; (800327c <HAL_I2S_Init+0x278>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d101      	bne.n	80031ee <HAL_I2S_Init+0x1ea>
 80031ea:	4b25      	ldr	r3, [pc, #148]	; (8003280 <HAL_I2S_Init+0x27c>)
 80031ec:	e001      	b.n	80031f2 <HAL_I2S_Init+0x1ee>
 80031ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031fe:	d003      	beq.n	8003208 <HAL_I2S_Init+0x204>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d103      	bne.n	8003210 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003208:	f44f 7380 	mov.w	r3, #256	; 0x100
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	e001      	b.n	8003214 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003210:	2300      	movs	r3, #0
 8003212:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	b299      	uxth	r1, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800322a:	4303      	orrs	r3, r0
 800322c:	b29b      	uxth	r3, r3
 800322e:	430b      	orrs	r3, r1
 8003230:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003232:	4313      	orrs	r3, r2
 8003234:	b29a      	uxth	r2, r3
 8003236:	897b      	ldrh	r3, [r7, #10]
 8003238:	4313      	orrs	r3, r2
 800323a:	b29b      	uxth	r3, r3
 800323c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003240:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a0d      	ldr	r2, [pc, #52]	; (800327c <HAL_I2S_Init+0x278>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d101      	bne.n	8003250 <HAL_I2S_Init+0x24c>
 800324c:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <HAL_I2S_Init+0x27c>)
 800324e:	e001      	b.n	8003254 <HAL_I2S_Init+0x250>
 8003250:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003254:	897a      	ldrh	r2, [r7, #10]
 8003256:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3720      	adds	r7, #32
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	0800337b 	.word	0x0800337b
 8003274:	cccccccd 	.word	0xcccccccd
 8003278:	08003491 	.word	0x08003491
 800327c:	40003800 	.word	0x40003800
 8003280:	40003400 	.word	0x40003400

08003284 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	881a      	ldrh	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	1c9a      	adds	r2, r3, #2
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10e      	bne.n	8003314 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003304:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff ffb8 	bl	8003284 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003314:	bf00      	nop
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332e:	b292      	uxth	r2, r2
 8003330:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003336:	1c9a      	adds	r2, r3, #2
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003340:	b29b      	uxth	r3, r3
 8003342:	3b01      	subs	r3, #1
 8003344:	b29a      	uxth	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800334e:	b29b      	uxth	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10e      	bne.n	8003372 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003362:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7ff ff93 	bl	8003298 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003372:	bf00      	nop
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b086      	sub	sp, #24
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b04      	cmp	r3, #4
 8003394:	d13a      	bne.n	800340c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b01      	cmp	r3, #1
 800339e:	d109      	bne.n	80033b4 <I2S_IRQHandler+0x3a>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033aa:	2b40      	cmp	r3, #64	; 0x40
 80033ac:	d102      	bne.n	80033b4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7ff ffb4 	bl	800331c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ba:	2b40      	cmp	r3, #64	; 0x40
 80033bc:	d126      	bne.n	800340c <I2S_IRQHandler+0x92>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 0320 	and.w	r3, r3, #32
 80033c8:	2b20      	cmp	r3, #32
 80033ca:	d11f      	bne.n	800340c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033da:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80033dc:	2300      	movs	r3, #0
 80033de:	613b      	str	r3, [r7, #16]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	613b      	str	r3, [r7, #16]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fe:	f043 0202 	orr.w	r2, r3, #2
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7ff ff50 	bl	80032ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b03      	cmp	r3, #3
 8003416:	d136      	bne.n	8003486 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b02      	cmp	r3, #2
 8003420:	d109      	bne.n	8003436 <I2S_IRQHandler+0xbc>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342c:	2b80      	cmp	r3, #128	; 0x80
 800342e:	d102      	bne.n	8003436 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7ff ff45 	bl	80032c0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	2b08      	cmp	r3, #8
 800343e:	d122      	bne.n	8003486 <I2S_IRQHandler+0x10c>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b20      	cmp	r3, #32
 800344c:	d11b      	bne.n	8003486 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800345c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003478:	f043 0204 	orr.w	r2, r3, #4
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff ff13 	bl	80032ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003486:	bf00      	nop
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
	...

08003490 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4aa2      	ldr	r2, [pc, #648]	; (8003730 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d101      	bne.n	80034ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80034aa:	4ba2      	ldr	r3, [pc, #648]	; (8003734 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034ac:	e001      	b.n	80034b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80034ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a9b      	ldr	r2, [pc, #620]	; (8003730 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d101      	bne.n	80034cc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80034c8:	4b9a      	ldr	r3, [pc, #616]	; (8003734 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034ca:	e001      	b.n	80034d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80034cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034dc:	d004      	beq.n	80034e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f040 8099 	bne.w	800361a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d107      	bne.n	8003502 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f925 	bl	800374c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b01      	cmp	r3, #1
 800350a:	d107      	bne.n	800351c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003512:	2b00      	cmp	r3, #0
 8003514:	d002      	beq.n	800351c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f9c8 	bl	80038ac <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003522:	2b40      	cmp	r3, #64	; 0x40
 8003524:	d13a      	bne.n	800359c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f003 0320 	and.w	r3, r3, #32
 800352c:	2b00      	cmp	r3, #0
 800352e:	d035      	beq.n	800359c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a7e      	ldr	r2, [pc, #504]	; (8003730 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d101      	bne.n	800353e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800353a:	4b7e      	ldr	r3, [pc, #504]	; (8003734 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800353c:	e001      	b.n	8003542 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800353e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4979      	ldr	r1, [pc, #484]	; (8003730 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800354a:	428b      	cmp	r3, r1
 800354c:	d101      	bne.n	8003552 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800354e:	4b79      	ldr	r3, [pc, #484]	; (8003734 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003550:	e001      	b.n	8003556 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003552:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003556:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800355a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800356a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800356c:	2300      	movs	r3, #0
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358e:	f043 0202 	orr.w	r2, r3, #2
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7ff fe88 	bl	80032ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	f040 80be 	bne.w	8003724 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f003 0320 	and.w	r3, r3, #32
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 80b8 	beq.w	8003724 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035c2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a59      	ldr	r2, [pc, #356]	; (8003730 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d101      	bne.n	80035d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80035ce:	4b59      	ldr	r3, [pc, #356]	; (8003734 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035d0:	e001      	b.n	80035d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80035d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4954      	ldr	r1, [pc, #336]	; (8003730 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035de:	428b      	cmp	r3, r1
 80035e0:	d101      	bne.n	80035e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80035e2:	4b54      	ldr	r3, [pc, #336]	; (8003734 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035e4:	e001      	b.n	80035ea <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80035e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035ee:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80035f0:	2300      	movs	r3, #0
 80035f2:	60bb      	str	r3, [r7, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	60bb      	str	r3, [r7, #8]
 80035fc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360a:	f043 0204 	orr.w	r2, r3, #4
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff fe4a 	bl	80032ac <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003618:	e084      	b.n	8003724 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b02      	cmp	r3, #2
 8003622:	d107      	bne.n	8003634 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f8be 	bl	80037b0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b01      	cmp	r3, #1
 800363c:	d107      	bne.n	800364e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f8fd 	bl	8003848 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003654:	2b40      	cmp	r3, #64	; 0x40
 8003656:	d12f      	bne.n	80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f003 0320 	and.w	r3, r3, #32
 800365e:	2b00      	cmp	r3, #0
 8003660:	d02a      	beq.n	80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003670:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a2e      	ldr	r2, [pc, #184]	; (8003730 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d101      	bne.n	8003680 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800367c:	4b2d      	ldr	r3, [pc, #180]	; (8003734 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800367e:	e001      	b.n	8003684 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003680:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4929      	ldr	r1, [pc, #164]	; (8003730 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800368c:	428b      	cmp	r3, r1
 800368e:	d101      	bne.n	8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003690:	4b28      	ldr	r3, [pc, #160]	; (8003734 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003692:	e001      	b.n	8003698 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003694:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003698:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800369c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036aa:	f043 0202 	orr.w	r2, r3, #2
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7ff fdfa 	bl	80032ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d131      	bne.n	8003726 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f003 0320 	and.w	r3, r3, #32
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d02c      	beq.n	8003726 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a17      	ldr	r2, [pc, #92]	; (8003730 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d101      	bne.n	80036da <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80036d6:	4b17      	ldr	r3, [pc, #92]	; (8003734 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036d8:	e001      	b.n	80036de <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80036da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4912      	ldr	r1, [pc, #72]	; (8003730 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036e6:	428b      	cmp	r3, r1
 80036e8:	d101      	bne.n	80036ee <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80036ea:	4b12      	ldr	r3, [pc, #72]	; (8003734 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036ec:	e001      	b.n	80036f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80036ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036f6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003706:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003714:	f043 0204 	orr.w	r2, r3, #4
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7ff fdc5 	bl	80032ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003722:	e000      	b.n	8003726 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003724:	bf00      	nop
}
 8003726:	bf00      	nop
 8003728:	3720      	adds	r7, #32
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40003800 	.word	0x40003800
 8003734:	40003400 	.word	0x40003400

08003738 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	1c99      	adds	r1, r3, #2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6251      	str	r1, [r2, #36]	; 0x24
 800375e:	881a      	ldrh	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376a:	b29b      	uxth	r3, r3
 800376c:	3b01      	subs	r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003778:	b29b      	uxth	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d113      	bne.n	80037a6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800378c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003792:	b29b      	uxth	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d106      	bne.n	80037a6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff ffc9 	bl	8003738 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	1c99      	adds	r1, r3, #2
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6251      	str	r1, [r2, #36]	; 0x24
 80037c2:	8819      	ldrh	r1, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a1d      	ldr	r2, [pc, #116]	; (8003840 <I2SEx_TxISR_I2SExt+0x90>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d101      	bne.n	80037d2 <I2SEx_TxISR_I2SExt+0x22>
 80037ce:	4b1d      	ldr	r3, [pc, #116]	; (8003844 <I2SEx_TxISR_I2SExt+0x94>)
 80037d0:	e001      	b.n	80037d6 <I2SEx_TxISR_I2SExt+0x26>
 80037d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037d6:	460a      	mov	r2, r1
 80037d8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d121      	bne.n	8003836 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a12      	ldr	r2, [pc, #72]	; (8003840 <I2SEx_TxISR_I2SExt+0x90>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d101      	bne.n	8003800 <I2SEx_TxISR_I2SExt+0x50>
 80037fc:	4b11      	ldr	r3, [pc, #68]	; (8003844 <I2SEx_TxISR_I2SExt+0x94>)
 80037fe:	e001      	b.n	8003804 <I2SEx_TxISR_I2SExt+0x54>
 8003800:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	490d      	ldr	r1, [pc, #52]	; (8003840 <I2SEx_TxISR_I2SExt+0x90>)
 800380c:	428b      	cmp	r3, r1
 800380e:	d101      	bne.n	8003814 <I2SEx_TxISR_I2SExt+0x64>
 8003810:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <I2SEx_TxISR_I2SExt+0x94>)
 8003812:	e001      	b.n	8003818 <I2SEx_TxISR_I2SExt+0x68>
 8003814:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003818:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800381c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003822:	b29b      	uxth	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d106      	bne.n	8003836 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f7ff ff81 	bl	8003738 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003836:	bf00      	nop
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40003800 	.word	0x40003800
 8003844:	40003400 	.word	0x40003400

08003848 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68d8      	ldr	r0, [r3, #12]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385a:	1c99      	adds	r1, r3, #2
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003860:	b282      	uxth	r2, r0
 8003862:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003868:	b29b      	uxth	r3, r3
 800386a:	3b01      	subs	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003876:	b29b      	uxth	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d113      	bne.n	80038a4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800388a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003890:	b29b      	uxth	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7ff ff4a 	bl	8003738 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038a4:	bf00      	nop
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a20      	ldr	r2, [pc, #128]	; (800393c <I2SEx_RxISR_I2SExt+0x90>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d101      	bne.n	80038c2 <I2SEx_RxISR_I2SExt+0x16>
 80038be:	4b20      	ldr	r3, [pc, #128]	; (8003940 <I2SEx_RxISR_I2SExt+0x94>)
 80038c0:	e001      	b.n	80038c6 <I2SEx_RxISR_I2SExt+0x1a>
 80038c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038c6:	68d8      	ldr	r0, [r3, #12]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038cc:	1c99      	adds	r1, r3, #2
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80038d2:	b282      	uxth	r2, r0
 80038d4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d121      	bne.n	8003932 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a12      	ldr	r2, [pc, #72]	; (800393c <I2SEx_RxISR_I2SExt+0x90>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d101      	bne.n	80038fc <I2SEx_RxISR_I2SExt+0x50>
 80038f8:	4b11      	ldr	r3, [pc, #68]	; (8003940 <I2SEx_RxISR_I2SExt+0x94>)
 80038fa:	e001      	b.n	8003900 <I2SEx_RxISR_I2SExt+0x54>
 80038fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	490d      	ldr	r1, [pc, #52]	; (800393c <I2SEx_RxISR_I2SExt+0x90>)
 8003908:	428b      	cmp	r3, r1
 800390a:	d101      	bne.n	8003910 <I2SEx_RxISR_I2SExt+0x64>
 800390c:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <I2SEx_RxISR_I2SExt+0x94>)
 800390e:	e001      	b.n	8003914 <I2SEx_RxISR_I2SExt+0x68>
 8003910:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003914:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003918:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391e:	b29b      	uxth	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d106      	bne.n	8003932 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7ff ff03 	bl	8003738 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003932:	bf00      	nop
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40003800 	.word	0x40003800
 8003940:	40003400 	.word	0x40003400

08003944 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e25b      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d075      	beq.n	8003a4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003962:	4ba3      	ldr	r3, [pc, #652]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 030c 	and.w	r3, r3, #12
 800396a:	2b04      	cmp	r3, #4
 800396c:	d00c      	beq.n	8003988 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800396e:	4ba0      	ldr	r3, [pc, #640]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003976:	2b08      	cmp	r3, #8
 8003978:	d112      	bne.n	80039a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800397a:	4b9d      	ldr	r3, [pc, #628]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003982:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003986:	d10b      	bne.n	80039a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003988:	4b99      	ldr	r3, [pc, #612]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d05b      	beq.n	8003a4c <HAL_RCC_OscConfig+0x108>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d157      	bne.n	8003a4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e236      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a8:	d106      	bne.n	80039b8 <HAL_RCC_OscConfig+0x74>
 80039aa:	4b91      	ldr	r3, [pc, #580]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a90      	ldr	r2, [pc, #576]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 80039b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	e01d      	b.n	80039f4 <HAL_RCC_OscConfig+0xb0>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039c0:	d10c      	bne.n	80039dc <HAL_RCC_OscConfig+0x98>
 80039c2:	4b8b      	ldr	r3, [pc, #556]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a8a      	ldr	r2, [pc, #552]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 80039c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	4b88      	ldr	r3, [pc, #544]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a87      	ldr	r2, [pc, #540]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 80039d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	e00b      	b.n	80039f4 <HAL_RCC_OscConfig+0xb0>
 80039dc:	4b84      	ldr	r3, [pc, #528]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a83      	ldr	r2, [pc, #524]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 80039e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	4b81      	ldr	r3, [pc, #516]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a80      	ldr	r2, [pc, #512]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 80039ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d013      	beq.n	8003a24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fc:	f7fd f9ca 	bl	8000d94 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a04:	f7fd f9c6 	bl	8000d94 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b64      	cmp	r3, #100	; 0x64
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e1fb      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a16:	4b76      	ldr	r3, [pc, #472]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0f0      	beq.n	8003a04 <HAL_RCC_OscConfig+0xc0>
 8003a22:	e014      	b.n	8003a4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a24:	f7fd f9b6 	bl	8000d94 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a2c:	f7fd f9b2 	bl	8000d94 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b64      	cmp	r3, #100	; 0x64
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e1e7      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a3e:	4b6c      	ldr	r3, [pc, #432]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1f0      	bne.n	8003a2c <HAL_RCC_OscConfig+0xe8>
 8003a4a:	e000      	b.n	8003a4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d063      	beq.n	8003b22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a5a:	4b65      	ldr	r3, [pc, #404]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 030c 	and.w	r3, r3, #12
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00b      	beq.n	8003a7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a66:	4b62      	ldr	r3, [pc, #392]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d11c      	bne.n	8003aac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a72:	4b5f      	ldr	r3, [pc, #380]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d116      	bne.n	8003aac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a7e:	4b5c      	ldr	r3, [pc, #368]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d005      	beq.n	8003a96 <HAL_RCC_OscConfig+0x152>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d001      	beq.n	8003a96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e1bb      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a96:	4b56      	ldr	r3, [pc, #344]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	4952      	ldr	r1, [pc, #328]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aaa:	e03a      	b.n	8003b22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d020      	beq.n	8003af6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ab4:	4b4f      	ldr	r3, [pc, #316]	; (8003bf4 <HAL_RCC_OscConfig+0x2b0>)
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aba:	f7fd f96b 	bl	8000d94 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ac2:	f7fd f967 	bl	8000d94 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e19c      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad4:	4b46      	ldr	r3, [pc, #280]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0f0      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae0:	4b43      	ldr	r3, [pc, #268]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	4940      	ldr	r1, [pc, #256]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	600b      	str	r3, [r1, #0]
 8003af4:	e015      	b.n	8003b22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003af6:	4b3f      	ldr	r3, [pc, #252]	; (8003bf4 <HAL_RCC_OscConfig+0x2b0>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afc:	f7fd f94a 	bl	8000d94 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b04:	f7fd f946 	bl	8000d94 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e17b      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b16:	4b36      	ldr	r3, [pc, #216]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f0      	bne.n	8003b04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d030      	beq.n	8003b90 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d016      	beq.n	8003b64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b36:	4b30      	ldr	r3, [pc, #192]	; (8003bf8 <HAL_RCC_OscConfig+0x2b4>)
 8003b38:	2201      	movs	r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3c:	f7fd f92a 	bl	8000d94 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b44:	f7fd f926 	bl	8000d94 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e15b      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b56:	4b26      	ldr	r3, [pc, #152]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0f0      	beq.n	8003b44 <HAL_RCC_OscConfig+0x200>
 8003b62:	e015      	b.n	8003b90 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b64:	4b24      	ldr	r3, [pc, #144]	; (8003bf8 <HAL_RCC_OscConfig+0x2b4>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b6a:	f7fd f913 	bl	8000d94 <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b72:	f7fd f90f 	bl	8000d94 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e144      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b84:	4b1a      	ldr	r3, [pc, #104]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003b86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1f0      	bne.n	8003b72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 80a0 	beq.w	8003cde <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ba2:	4b13      	ldr	r3, [pc, #76]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10f      	bne.n	8003bce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60bb      	str	r3, [r7, #8]
 8003bb2:	4b0f      	ldr	r3, [pc, #60]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	4a0e      	ldr	r2, [pc, #56]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8003bbe:	4b0c      	ldr	r3, [pc, #48]	; (8003bf0 <HAL_RCC_OscConfig+0x2ac>)
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc6:	60bb      	str	r3, [r7, #8]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bce:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <HAL_RCC_OscConfig+0x2b8>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d121      	bne.n	8003c1e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bda:	4b08      	ldr	r3, [pc, #32]	; (8003bfc <HAL_RCC_OscConfig+0x2b8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a07      	ldr	r2, [pc, #28]	; (8003bfc <HAL_RCC_OscConfig+0x2b8>)
 8003be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003be6:	f7fd f8d5 	bl	8000d94 <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bec:	e011      	b.n	8003c12 <HAL_RCC_OscConfig+0x2ce>
 8003bee:	bf00      	nop
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	42470000 	.word	0x42470000
 8003bf8:	42470e80 	.word	0x42470e80
 8003bfc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c00:	f7fd f8c8 	bl	8000d94 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e0fd      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c12:	4b81      	ldr	r3, [pc, #516]	; (8003e18 <HAL_RCC_OscConfig+0x4d4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0f0      	beq.n	8003c00 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d106      	bne.n	8003c34 <HAL_RCC_OscConfig+0x2f0>
 8003c26:	4b7d      	ldr	r3, [pc, #500]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2a:	4a7c      	ldr	r2, [pc, #496]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003c2c:	f043 0301 	orr.w	r3, r3, #1
 8003c30:	6713      	str	r3, [r2, #112]	; 0x70
 8003c32:	e01c      	b.n	8003c6e <HAL_RCC_OscConfig+0x32a>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2b05      	cmp	r3, #5
 8003c3a:	d10c      	bne.n	8003c56 <HAL_RCC_OscConfig+0x312>
 8003c3c:	4b77      	ldr	r3, [pc, #476]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c40:	4a76      	ldr	r2, [pc, #472]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003c42:	f043 0304 	orr.w	r3, r3, #4
 8003c46:	6713      	str	r3, [r2, #112]	; 0x70
 8003c48:	4b74      	ldr	r3, [pc, #464]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4c:	4a73      	ldr	r2, [pc, #460]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003c4e:	f043 0301 	orr.w	r3, r3, #1
 8003c52:	6713      	str	r3, [r2, #112]	; 0x70
 8003c54:	e00b      	b.n	8003c6e <HAL_RCC_OscConfig+0x32a>
 8003c56:	4b71      	ldr	r3, [pc, #452]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5a:	4a70      	ldr	r2, [pc, #448]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003c5c:	f023 0301 	bic.w	r3, r3, #1
 8003c60:	6713      	str	r3, [r2, #112]	; 0x70
 8003c62:	4b6e      	ldr	r3, [pc, #440]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c66:	4a6d      	ldr	r2, [pc, #436]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003c68:	f023 0304 	bic.w	r3, r3, #4
 8003c6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d015      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c76:	f7fd f88d 	bl	8000d94 <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7c:	e00a      	b.n	8003c94 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c7e:	f7fd f889 	bl	8000d94 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e0bc      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c94:	4b61      	ldr	r3, [pc, #388]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0ee      	beq.n	8003c7e <HAL_RCC_OscConfig+0x33a>
 8003ca0:	e014      	b.n	8003ccc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca2:	f7fd f877 	bl	8000d94 <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ca8:	e00a      	b.n	8003cc0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003caa:	f7fd f873 	bl	8000d94 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e0a6      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cc0:	4b56      	ldr	r3, [pc, #344]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1ee      	bne.n	8003caa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ccc:	7dfb      	ldrb	r3, [r7, #23]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d105      	bne.n	8003cde <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cd2:	4b52      	ldr	r3, [pc, #328]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	4a51      	ldr	r2, [pc, #324]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003cd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cdc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 8092 	beq.w	8003e0c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ce8:	4b4c      	ldr	r3, [pc, #304]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 030c 	and.w	r3, r3, #12
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d05c      	beq.n	8003dae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d141      	bne.n	8003d80 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cfc:	4b48      	ldr	r3, [pc, #288]	; (8003e20 <HAL_RCC_OscConfig+0x4dc>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d02:	f7fd f847 	bl	8000d94 <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d0a:	f7fd f843 	bl	8000d94 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e078      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1c:	4b3f      	ldr	r3, [pc, #252]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1f0      	bne.n	8003d0a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69da      	ldr	r2, [r3, #28]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	431a      	orrs	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	019b      	lsls	r3, r3, #6
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3e:	085b      	lsrs	r3, r3, #1
 8003d40:	3b01      	subs	r3, #1
 8003d42:	041b      	lsls	r3, r3, #16
 8003d44:	431a      	orrs	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	061b      	lsls	r3, r3, #24
 8003d4c:	4933      	ldr	r1, [pc, #204]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d52:	4b33      	ldr	r3, [pc, #204]	; (8003e20 <HAL_RCC_OscConfig+0x4dc>)
 8003d54:	2201      	movs	r2, #1
 8003d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d58:	f7fd f81c 	bl	8000d94 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d60:	f7fd f818 	bl	8000d94 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e04d      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d72:	4b2a      	ldr	r3, [pc, #168]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0f0      	beq.n	8003d60 <HAL_RCC_OscConfig+0x41c>
 8003d7e:	e045      	b.n	8003e0c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d80:	4b27      	ldr	r3, [pc, #156]	; (8003e20 <HAL_RCC_OscConfig+0x4dc>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d86:	f7fd f805 	bl	8000d94 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d8e:	f7fd f801 	bl	8000d94 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e036      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da0:	4b1e      	ldr	r3, [pc, #120]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1f0      	bne.n	8003d8e <HAL_RCC_OscConfig+0x44a>
 8003dac:	e02e      	b.n	8003e0c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d101      	bne.n	8003dba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e029      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dba:	4b18      	ldr	r3, [pc, #96]	; (8003e1c <HAL_RCC_OscConfig+0x4d8>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d11c      	bne.n	8003e08 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d115      	bne.n	8003e08 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003de2:	4013      	ands	r3, r2
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d10d      	bne.n	8003e08 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d106      	bne.n	8003e08 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d001      	beq.n	8003e0c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	40007000 	.word	0x40007000
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	42470060 	.word	0x42470060

08003e24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e0cc      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e38:	4b68      	ldr	r3, [pc, #416]	; (8003fdc <HAL_RCC_ClockConfig+0x1b8>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 030f 	and.w	r3, r3, #15
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d90c      	bls.n	8003e60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e46:	4b65      	ldr	r3, [pc, #404]	; (8003fdc <HAL_RCC_ClockConfig+0x1b8>)
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4e:	4b63      	ldr	r3, [pc, #396]	; (8003fdc <HAL_RCC_ClockConfig+0x1b8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e0b8      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d020      	beq.n	8003eae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d005      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e78:	4b59      	ldr	r3, [pc, #356]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	4a58      	ldr	r2, [pc, #352]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d005      	beq.n	8003e9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e90:	4b53      	ldr	r3, [pc, #332]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	4a52      	ldr	r2, [pc, #328]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e9c:	4b50      	ldr	r3, [pc, #320]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	494d      	ldr	r1, [pc, #308]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d044      	beq.n	8003f44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d107      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ec2:	4b47      	ldr	r3, [pc, #284]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d119      	bne.n	8003f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e07f      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d003      	beq.n	8003ee2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ede:	2b03      	cmp	r3, #3
 8003ee0:	d107      	bne.n	8003ef2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ee2:	4b3f      	ldr	r3, [pc, #252]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d109      	bne.n	8003f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e06f      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef2:	4b3b      	ldr	r3, [pc, #236]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e067      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f02:	4b37      	ldr	r3, [pc, #220]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f023 0203 	bic.w	r2, r3, #3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	4934      	ldr	r1, [pc, #208]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f14:	f7fc ff3e 	bl	8000d94 <HAL_GetTick>
 8003f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f1a:	e00a      	b.n	8003f32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f1c:	f7fc ff3a 	bl	8000d94 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e04f      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f32:	4b2b      	ldr	r3, [pc, #172]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 020c 	and.w	r2, r3, #12
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d1eb      	bne.n	8003f1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f44:	4b25      	ldr	r3, [pc, #148]	; (8003fdc <HAL_RCC_ClockConfig+0x1b8>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 030f 	and.w	r3, r3, #15
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d20c      	bcs.n	8003f6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f52:	4b22      	ldr	r3, [pc, #136]	; (8003fdc <HAL_RCC_ClockConfig+0x1b8>)
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f5a:	4b20      	ldr	r3, [pc, #128]	; (8003fdc <HAL_RCC_ClockConfig+0x1b8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d001      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e032      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d008      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f78:	4b19      	ldr	r3, [pc, #100]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	4916      	ldr	r1, [pc, #88]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0308 	and.w	r3, r3, #8
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d009      	beq.n	8003faa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f96:	4b12      	ldr	r3, [pc, #72]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	490e      	ldr	r1, [pc, #56]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003faa:	f000 f821 	bl	8003ff0 <HAL_RCC_GetSysClockFreq>
 8003fae:	4601      	mov	r1, r0
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	; (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	091b      	lsrs	r3, r3, #4
 8003fb6:	f003 030f 	and.w	r3, r3, #15
 8003fba:	4a0a      	ldr	r2, [pc, #40]	; (8003fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8003fbc:	5cd3      	ldrb	r3, [r2, r3]
 8003fbe:	fa21 f303 	lsr.w	r3, r1, r3
 8003fc2:	4a09      	ldr	r2, [pc, #36]	; (8003fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fc6:	4b09      	ldr	r3, [pc, #36]	; (8003fec <HAL_RCC_ClockConfig+0x1c8>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fc fe9e 	bl	8000d0c <HAL_InitTick>

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	40023c00 	.word	0x40023c00
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	080079d4 	.word	0x080079d4
 8003fe8:	20000000 	.word	0x20000000
 8003fec:	20000004 	.word	0x20000004

08003ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	607b      	str	r3, [r7, #4]
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	2300      	movs	r3, #0
 8004000:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004002:	2300      	movs	r3, #0
 8004004:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004006:	4b63      	ldr	r3, [pc, #396]	; (8004194 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f003 030c 	and.w	r3, r3, #12
 800400e:	2b04      	cmp	r3, #4
 8004010:	d007      	beq.n	8004022 <HAL_RCC_GetSysClockFreq+0x32>
 8004012:	2b08      	cmp	r3, #8
 8004014:	d008      	beq.n	8004028 <HAL_RCC_GetSysClockFreq+0x38>
 8004016:	2b00      	cmp	r3, #0
 8004018:	f040 80b4 	bne.w	8004184 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800401c:	4b5e      	ldr	r3, [pc, #376]	; (8004198 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800401e:	60bb      	str	r3, [r7, #8]
       break;
 8004020:	e0b3      	b.n	800418a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004022:	4b5e      	ldr	r3, [pc, #376]	; (800419c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004024:	60bb      	str	r3, [r7, #8]
      break;
 8004026:	e0b0      	b.n	800418a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004028:	4b5a      	ldr	r3, [pc, #360]	; (8004194 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004030:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004032:	4b58      	ldr	r3, [pc, #352]	; (8004194 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d04a      	beq.n	80040d4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800403e:	4b55      	ldr	r3, [pc, #340]	; (8004194 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	099b      	lsrs	r3, r3, #6
 8004044:	f04f 0400 	mov.w	r4, #0
 8004048:	f240 11ff 	movw	r1, #511	; 0x1ff
 800404c:	f04f 0200 	mov.w	r2, #0
 8004050:	ea03 0501 	and.w	r5, r3, r1
 8004054:	ea04 0602 	and.w	r6, r4, r2
 8004058:	4629      	mov	r1, r5
 800405a:	4632      	mov	r2, r6
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	f04f 0400 	mov.w	r4, #0
 8004064:	0154      	lsls	r4, r2, #5
 8004066:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800406a:	014b      	lsls	r3, r1, #5
 800406c:	4619      	mov	r1, r3
 800406e:	4622      	mov	r2, r4
 8004070:	1b49      	subs	r1, r1, r5
 8004072:	eb62 0206 	sbc.w	r2, r2, r6
 8004076:	f04f 0300 	mov.w	r3, #0
 800407a:	f04f 0400 	mov.w	r4, #0
 800407e:	0194      	lsls	r4, r2, #6
 8004080:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004084:	018b      	lsls	r3, r1, #6
 8004086:	1a5b      	subs	r3, r3, r1
 8004088:	eb64 0402 	sbc.w	r4, r4, r2
 800408c:	f04f 0100 	mov.w	r1, #0
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	00e2      	lsls	r2, r4, #3
 8004096:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800409a:	00d9      	lsls	r1, r3, #3
 800409c:	460b      	mov	r3, r1
 800409e:	4614      	mov	r4, r2
 80040a0:	195b      	adds	r3, r3, r5
 80040a2:	eb44 0406 	adc.w	r4, r4, r6
 80040a6:	f04f 0100 	mov.w	r1, #0
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	0262      	lsls	r2, r4, #9
 80040b0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80040b4:	0259      	lsls	r1, r3, #9
 80040b6:	460b      	mov	r3, r1
 80040b8:	4614      	mov	r4, r2
 80040ba:	4618      	mov	r0, r3
 80040bc:	4621      	mov	r1, r4
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f04f 0400 	mov.w	r4, #0
 80040c4:	461a      	mov	r2, r3
 80040c6:	4623      	mov	r3, r4
 80040c8:	f7fc f87e 	bl	80001c8 <__aeabi_uldivmod>
 80040cc:	4603      	mov	r3, r0
 80040ce:	460c      	mov	r4, r1
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	e049      	b.n	8004168 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040d4:	4b2f      	ldr	r3, [pc, #188]	; (8004194 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	099b      	lsrs	r3, r3, #6
 80040da:	f04f 0400 	mov.w	r4, #0
 80040de:	f240 11ff 	movw	r1, #511	; 0x1ff
 80040e2:	f04f 0200 	mov.w	r2, #0
 80040e6:	ea03 0501 	and.w	r5, r3, r1
 80040ea:	ea04 0602 	and.w	r6, r4, r2
 80040ee:	4629      	mov	r1, r5
 80040f0:	4632      	mov	r2, r6
 80040f2:	f04f 0300 	mov.w	r3, #0
 80040f6:	f04f 0400 	mov.w	r4, #0
 80040fa:	0154      	lsls	r4, r2, #5
 80040fc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004100:	014b      	lsls	r3, r1, #5
 8004102:	4619      	mov	r1, r3
 8004104:	4622      	mov	r2, r4
 8004106:	1b49      	subs	r1, r1, r5
 8004108:	eb62 0206 	sbc.w	r2, r2, r6
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	f04f 0400 	mov.w	r4, #0
 8004114:	0194      	lsls	r4, r2, #6
 8004116:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800411a:	018b      	lsls	r3, r1, #6
 800411c:	1a5b      	subs	r3, r3, r1
 800411e:	eb64 0402 	sbc.w	r4, r4, r2
 8004122:	f04f 0100 	mov.w	r1, #0
 8004126:	f04f 0200 	mov.w	r2, #0
 800412a:	00e2      	lsls	r2, r4, #3
 800412c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004130:	00d9      	lsls	r1, r3, #3
 8004132:	460b      	mov	r3, r1
 8004134:	4614      	mov	r4, r2
 8004136:	195b      	adds	r3, r3, r5
 8004138:	eb44 0406 	adc.w	r4, r4, r6
 800413c:	f04f 0100 	mov.w	r1, #0
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	02a2      	lsls	r2, r4, #10
 8004146:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800414a:	0299      	lsls	r1, r3, #10
 800414c:	460b      	mov	r3, r1
 800414e:	4614      	mov	r4, r2
 8004150:	4618      	mov	r0, r3
 8004152:	4621      	mov	r1, r4
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f04f 0400 	mov.w	r4, #0
 800415a:	461a      	mov	r2, r3
 800415c:	4623      	mov	r3, r4
 800415e:	f7fc f833 	bl	80001c8 <__aeabi_uldivmod>
 8004162:	4603      	mov	r3, r0
 8004164:	460c      	mov	r4, r1
 8004166:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004168:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	0c1b      	lsrs	r3, r3, #16
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	3301      	adds	r3, #1
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004180:	60bb      	str	r3, [r7, #8]
      break;
 8004182:	e002      	b.n	800418a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004184:	4b04      	ldr	r3, [pc, #16]	; (8004198 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004186:	60bb      	str	r3, [r7, #8]
      break;
 8004188:	bf00      	nop
    }
  }
  return sysclockfreq;
 800418a:	68bb      	ldr	r3, [r7, #8]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004194:	40023800 	.word	0x40023800
 8004198:	00f42400 	.word	0x00f42400
 800419c:	007a1200 	.word	0x007a1200

080041a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041a4:	4b03      	ldr	r3, [pc, #12]	; (80041b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80041a6:	681b      	ldr	r3, [r3, #0]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	20000000 	.word	0x20000000

080041b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041bc:	f7ff fff0 	bl	80041a0 <HAL_RCC_GetHCLKFreq>
 80041c0:	4601      	mov	r1, r0
 80041c2:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	0a9b      	lsrs	r3, r3, #10
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	4a03      	ldr	r2, [pc, #12]	; (80041dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80041ce:	5cd3      	ldrb	r3, [r2, r3]
 80041d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	40023800 	.word	0x40023800
 80041dc:	080079e4 	.word	0x080079e4

080041e0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d105      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004204:	2b00      	cmp	r3, #0
 8004206:	d035      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004208:	4b62      	ldr	r3, [pc, #392]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800420a:	2200      	movs	r2, #0
 800420c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800420e:	f7fc fdc1 	bl	8000d94 <HAL_GetTick>
 8004212:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004214:	e008      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004216:	f7fc fdbd 	bl	8000d94 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d901      	bls.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e0b0      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004228:	4b5b      	ldr	r3, [pc, #364]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1f0      	bne.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	019a      	lsls	r2, r3, #6
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	071b      	lsls	r3, r3, #28
 8004240:	4955      	ldr	r1, [pc, #340]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004242:	4313      	orrs	r3, r2
 8004244:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004248:	4b52      	ldr	r3, [pc, #328]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800424a:	2201      	movs	r2, #1
 800424c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800424e:	f7fc fda1 	bl	8000d94 <HAL_GetTick>
 8004252:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004254:	e008      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004256:	f7fc fd9d 	bl	8000d94 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d901      	bls.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e090      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004268:	4b4b      	ldr	r3, [pc, #300]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0f0      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 8083 	beq.w	8004388 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004282:	2300      	movs	r3, #0
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	4b44      	ldr	r3, [pc, #272]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	4a43      	ldr	r2, [pc, #268]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800428c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004290:	6413      	str	r3, [r2, #64]	; 0x40
 8004292:	4b41      	ldr	r3, [pc, #260]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800429e:	4b3f      	ldr	r3, [pc, #252]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a3e      	ldr	r2, [pc, #248]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80042aa:	f7fc fd73 	bl	8000d94 <HAL_GetTick>
 80042ae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042b0:	e008      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80042b2:	f7fc fd6f 	bl	8000d94 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e062      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042c4:	4b35      	ldr	r3, [pc, #212]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0f0      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042d0:	4b31      	ldr	r3, [pc, #196]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042d8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d02f      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d028      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042ee:	4b2a      	ldr	r3, [pc, #168]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042f8:	4b29      	ldr	r3, [pc, #164]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042fa:	2201      	movs	r2, #1
 80042fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042fe:	4b28      	ldr	r3, [pc, #160]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004300:	2200      	movs	r2, #0
 8004302:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004304:	4a24      	ldr	r2, [pc, #144]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800430a:	4b23      	ldr	r3, [pc, #140]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800430c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b01      	cmp	r3, #1
 8004314:	d114      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004316:	f7fc fd3d 	bl	8000d94 <HAL_GetTick>
 800431a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800431c:	e00a      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800431e:	f7fc fd39 	bl	8000d94 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	f241 3288 	movw	r2, #5000	; 0x1388
 800432c:	4293      	cmp	r3, r2
 800432e:	d901      	bls.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e02a      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004334:	4b18      	ldr	r3, [pc, #96]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0ee      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004348:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800434c:	d10d      	bne.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800434e:	4b12      	ldr	r3, [pc, #72]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800435e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004362:	490d      	ldr	r1, [pc, #52]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004364:	4313      	orrs	r3, r2
 8004366:	608b      	str	r3, [r1, #8]
 8004368:	e005      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800436a:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	4a0a      	ldr	r2, [pc, #40]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004370:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004374:	6093      	str	r3, [r2, #8]
 8004376:	4b08      	ldr	r3, [pc, #32]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004378:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004382:	4905      	ldr	r1, [pc, #20]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004384:	4313      	orrs	r3, r2
 8004386:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	42470068 	.word	0x42470068
 8004398:	40023800 	.word	0x40023800
 800439c:	40007000 	.word	0x40007000
 80043a0:	42470e40 	.word	0x42470e40

080043a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80043b4:	2300      	movs	r3, #0
 80043b6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d13d      	bne.n	800443e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80043c2:	4b22      	ldr	r3, [pc, #136]	; (800444c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043ca:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d004      	beq.n	80043dc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d12f      	bne.n	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80043d6:	4b1e      	ldr	r3, [pc, #120]	; (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043d8:	617b      	str	r3, [r7, #20]
          break;
 80043da:	e02f      	b.n	800443c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80043dc:	4b1b      	ldr	r3, [pc, #108]	; (800444c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043e8:	d108      	bne.n	80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043ea:	4b18      	ldr	r3, [pc, #96]	; (800444c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043f2:	4a18      	ldr	r2, [pc, #96]	; (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80043f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f8:	613b      	str	r3, [r7, #16]
 80043fa:	e007      	b.n	800440c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043fc:	4b13      	ldr	r3, [pc, #76]	; (800444c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004404:	4a14      	ldr	r2, [pc, #80]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004406:	fbb2 f3f3 	udiv	r3, r2, r3
 800440a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800440c:	4b0f      	ldr	r3, [pc, #60]	; (800444c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800440e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004412:	099b      	lsrs	r3, r3, #6
 8004414:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	fb02 f303 	mul.w	r3, r2, r3
 800441e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004420:	4b0a      	ldr	r3, [pc, #40]	; (800444c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004426:	0f1b      	lsrs	r3, r3, #28
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004432:	617b      	str	r3, [r7, #20]
          break;
 8004434:	e002      	b.n	800443c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004436:	2300      	movs	r3, #0
 8004438:	617b      	str	r3, [r7, #20]
          break;
 800443a:	bf00      	nop
        }
      }
      break;
 800443c:	bf00      	nop
    }
  }
  return frequency;
 800443e:	697b      	ldr	r3, [r7, #20]
}
 8004440:	4618      	mov	r0, r3
 8004442:	371c      	adds	r7, #28
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	40023800 	.word	0x40023800
 8004450:	00bb8000 	.word	0x00bb8000
 8004454:	007a1200 	.word	0x007a1200
 8004458:	00f42400 	.word	0x00f42400

0800445c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e056      	b.n	800451c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d106      	bne.n	800448e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7fc fb2b 	bl	8000ae4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2202      	movs	r2, #2
 8004492:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044a4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	431a      	orrs	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	431a      	orrs	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	ea42 0103 	orr.w	r1, r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	0c1b      	lsrs	r3, r3, #16
 80044ec:	f003 0104 	and.w	r1, r3, #4
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	69da      	ldr	r2, [r3, #28]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800450a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004524:	b084      	sub	sp, #16
 8004526:	b580      	push	{r7, lr}
 8004528:	b084      	sub	sp, #16
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	f107 001c 	add.w	r0, r7, #28
 8004532:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004538:	2b01      	cmp	r3, #1
 800453a:	d122      	bne.n	8004582 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004540:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004566:	2b01      	cmp	r3, #1
 8004568:	d105      	bne.n	8004576 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f94a 	bl	8004810 <USB_CoreReset>
 800457c:	4603      	mov	r3, r0
 800457e:	73fb      	strb	r3, [r7, #15]
 8004580:	e01a      	b.n	80045b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f93e 	bl	8004810 <USB_CoreReset>
 8004594:	4603      	mov	r3, r0
 8004596:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800459a:	2b00      	cmp	r3, #0
 800459c:	d106      	bne.n	80045ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	639a      	str	r2, [r3, #56]	; 0x38
 80045aa:	e005      	b.n	80045b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80045b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d10b      	bne.n	80045d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f043 0206 	orr.w	r2, r3, #6
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f043 0220 	orr.w	r2, r3, #32
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80045d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045e2:	b004      	add	sp, #16
 80045e4:	4770      	bx	lr

080045e6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b083      	sub	sp, #12
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f043 0201 	orr.w	r2, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f023 0201 	bic.w	r2, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b082      	sub	sp, #8
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	460b      	mov	r3, r1
 8004634:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004642:	78fb      	ldrb	r3, [r7, #3]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d106      	bne.n	8004656 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	60da      	str	r2, [r3, #12]
 8004654:	e00b      	b.n	800466e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004656:	78fb      	ldrb	r3, [r7, #3]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d106      	bne.n	800466a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	60da      	str	r2, [r3, #12]
 8004668:	e001      	b.n	800466e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e003      	b.n	8004676 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800466e:	2032      	movs	r0, #50	; 0x32
 8004670:	f7fc fb9c 	bl	8000dac <HAL_Delay>

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800468a:	2300      	movs	r3, #0
 800468c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	019b      	lsls	r3, r3, #6
 8004692:	f043 0220 	orr.w	r2, r3, #32
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	3301      	adds	r3, #1
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4a09      	ldr	r2, [pc, #36]	; (80046c8 <USB_FlushTxFifo+0x48>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d901      	bls.n	80046ac <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e006      	b.n	80046ba <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	f003 0320 	and.w	r3, r3, #32
 80046b4:	2b20      	cmp	r3, #32
 80046b6:	d0f0      	beq.n	800469a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	00030d40 	.word	0x00030d40

080046cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80046d4:	2300      	movs	r3, #0
 80046d6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2210      	movs	r2, #16
 80046dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	3301      	adds	r3, #1
 80046e2:	60fb      	str	r3, [r7, #12]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4a09      	ldr	r2, [pc, #36]	; (800470c <USB_FlushRxFifo+0x40>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d901      	bls.n	80046f0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e006      	b.n	80046fe <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	f003 0310 	and.w	r3, r3, #16
 80046f8:	2b10      	cmp	r3, #16
 80046fa:	d0f0      	beq.n	80046de <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	00030d40 	.word	0x00030d40

08004710 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004710:	b480      	push	{r7}
 8004712:	b089      	sub	sp, #36	; 0x24
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	4611      	mov	r1, r2
 800471c:	461a      	mov	r2, r3
 800471e:	460b      	mov	r3, r1
 8004720:	71fb      	strb	r3, [r7, #7]
 8004722:	4613      	mov	r3, r2
 8004724:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800472e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004732:	2b00      	cmp	r3, #0
 8004734:	d11a      	bne.n	800476c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004736:	88bb      	ldrh	r3, [r7, #4]
 8004738:	3303      	adds	r3, #3
 800473a:	089b      	lsrs	r3, r3, #2
 800473c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800473e:	2300      	movs	r3, #0
 8004740:	61bb      	str	r3, [r7, #24]
 8004742:	e00f      	b.n	8004764 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004744:	79fb      	ldrb	r3, [r7, #7]
 8004746:	031a      	lsls	r2, r3, #12
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	4413      	add	r3, r2
 800474c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004750:	461a      	mov	r2, r3
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	3304      	adds	r3, #4
 800475c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	3301      	adds	r3, #1
 8004762:	61bb      	str	r3, [r7, #24]
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	429a      	cmp	r2, r3
 800476a:	d3eb      	bcc.n	8004744 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3724      	adds	r7, #36	; 0x24
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800477a:	b480      	push	{r7}
 800477c:	b089      	sub	sp, #36	; 0x24
 800477e:	af00      	add	r7, sp, #0
 8004780:	60f8      	str	r0, [r7, #12]
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	4613      	mov	r3, r2
 8004786:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004790:	88fb      	ldrh	r3, [r7, #6]
 8004792:	3303      	adds	r3, #3
 8004794:	089b      	lsrs	r3, r3, #2
 8004796:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004798:	2300      	movs	r3, #0
 800479a:	61bb      	str	r3, [r7, #24]
 800479c:	e00b      	b.n	80047b6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	601a      	str	r2, [r3, #0]
    pDest++;
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	3304      	adds	r3, #4
 80047ae:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	3301      	adds	r3, #1
 80047b4:	61bb      	str	r3, [r7, #24]
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d3ef      	bcc.n	800479e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80047be:	69fb      	ldr	r3, [r7, #28]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3724      	adds	r7, #36	; 0x24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	4013      	ands	r3, r2
 80047e2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80047e4:	68fb      	ldr	r3, [r7, #12]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	f003 0301 	and.w	r3, r3, #1
}
 8004802:	4618      	mov	r0, r3
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
	...

08004810 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004818:	2300      	movs	r3, #0
 800481a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3301      	adds	r3, #1
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	4a13      	ldr	r2, [pc, #76]	; (8004874 <USB_CoreReset+0x64>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d901      	bls.n	800482e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e01b      	b.n	8004866 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	2b00      	cmp	r3, #0
 8004834:	daf2      	bge.n	800481c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	f043 0201 	orr.w	r2, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	3301      	adds	r3, #1
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4a09      	ldr	r2, [pc, #36]	; (8004874 <USB_CoreReset+0x64>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d901      	bls.n	8004858 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e006      	b.n	8004866 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b01      	cmp	r3, #1
 8004862:	d0f0      	beq.n	8004846 <USB_CoreReset+0x36>

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	00030d40 	.word	0x00030d40

08004878 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004878:	b084      	sub	sp, #16
 800487a:	b580      	push	{r7, lr}
 800487c:	b084      	sub	sp, #16
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	f107 001c 	add.w	r0, r7, #28
 8004886:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004894:	461a      	mov	r2, r3
 8004896:	2300      	movs	r3, #0
 8004898:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048aa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d018      	beq.n	80048fc <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d10a      	bne.n	80048e6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048de:	f043 0304 	orr.w	r3, r3, #4
 80048e2:	6013      	str	r3, [r2, #0]
 80048e4:	e014      	b.n	8004910 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048f4:	f023 0304 	bic.w	r3, r3, #4
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	e009      	b.n	8004910 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800490a:	f023 0304 	bic.w	r3, r3, #4
 800490e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004910:	2110      	movs	r1, #16
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7ff feb4 	bl	8004680 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f7ff fed7 	bl	80046cc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800491e:	2300      	movs	r3, #0
 8004920:	60fb      	str	r3, [r7, #12]
 8004922:	e015      	b.n	8004950 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	4413      	add	r3, r2
 800492c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004930:	461a      	mov	r2, r3
 8004932:	f04f 33ff 	mov.w	r3, #4294967295
 8004936:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	015a      	lsls	r2, r3, #5
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	4413      	add	r3, r2
 8004940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004944:	461a      	mov	r2, r3
 8004946:	2300      	movs	r3, #0
 8004948:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	3301      	adds	r3, #1
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	429a      	cmp	r2, r3
 8004956:	d3e5      	bcc.n	8004924 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004958:	2101      	movs	r1, #1
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f8ac 	bl	8004ab8 <USB_DriveVbus>

  HAL_Delay(200U);
 8004960:	20c8      	movs	r0, #200	; 0xc8
 8004962:	f7fc fa23 	bl	8000dac <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f04f 32ff 	mov.w	r2, #4294967295
 8004972:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00b      	beq.n	8004998 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004986:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a14      	ldr	r2, [pc, #80]	; (80049dc <USB_HostInit+0x164>)
 800498c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a13      	ldr	r2, [pc, #76]	; (80049e0 <USB_HostInit+0x168>)
 8004992:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004996:	e009      	b.n	80049ac <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2280      	movs	r2, #128	; 0x80
 800499c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a10      	ldr	r2, [pc, #64]	; (80049e4 <USB_HostInit+0x16c>)
 80049a2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a10      	ldr	r2, [pc, #64]	; (80049e8 <USB_HostInit+0x170>)
 80049a8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80049ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d105      	bne.n	80049be <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	f043 0210 	orr.w	r2, r3, #16
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699a      	ldr	r2, [r3, #24]
 80049c2:	4b0a      	ldr	r3, [pc, #40]	; (80049ec <USB_HostInit+0x174>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049d6:	b004      	add	sp, #16
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	01000200 	.word	0x01000200
 80049e0:	00e00300 	.word	0x00e00300
 80049e4:	00600080 	.word	0x00600080
 80049e8:	004000e0 	.word	0x004000e0
 80049ec:	a3200008 	.word	0xa3200008

080049f0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	460b      	mov	r3, r1
 80049fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a0e:	f023 0303 	bic.w	r3, r3, #3
 8004a12:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	78fb      	ldrb	r3, [r7, #3]
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	68f9      	ldr	r1, [r7, #12]
 8004a24:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004a2c:	78fb      	ldrb	r3, [r7, #3]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d107      	bne.n	8004a42 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a38:	461a      	mov	r2, r3
 8004a3a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004a3e:	6053      	str	r3, [r2, #4]
 8004a40:	e009      	b.n	8004a56 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004a42:	78fb      	ldrb	r3, [r7, #3]
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d106      	bne.n	8004a56 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a4e:	461a      	mov	r2, r3
 8004a50:	f241 7370 	movw	r3, #6000	; 0x1770
 8004a54:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004a70:	2300      	movs	r3, #0
 8004a72:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004a84:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a92:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004a94:	2064      	movs	r0, #100	; 0x64
 8004a96:	f7fc f989 	bl	8000dac <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004aa2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aa6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004aa8:	200a      	movs	r0, #10
 8004aaa:	f7fc f97f 	bl	8000dac <HAL_Delay>

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004adc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d109      	bne.n	8004afc <USB_DriveVbus+0x44>
 8004ae8:	78fb      	ldrb	r3, [r7, #3]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d106      	bne.n	8004afc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004af6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004afa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b06:	d109      	bne.n	8004b1c <USB_DriveVbus+0x64>
 8004b08:	78fb      	ldrb	r3, [r7, #3]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d106      	bne.n	8004b1c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b1a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b085      	sub	sp, #20
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	0c5b      	lsrs	r3, r3, #17
 8004b48:	f003 0303 	and.w	r3, r3, #3
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	b29b      	uxth	r3, r3
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
	...

08004b7c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b087      	sub	sp, #28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	4608      	mov	r0, r1
 8004b86:	4611      	mov	r1, r2
 8004b88:	461a      	mov	r2, r3
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	70fb      	strb	r3, [r7, #3]
 8004b8e:	460b      	mov	r3, r1
 8004b90:	70bb      	strb	r3, [r7, #2]
 8004b92:	4613      	mov	r3, r2
 8004b94:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004b9e:	78fb      	ldrb	r3, [r7, #3]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004baa:	461a      	mov	r2, r3
 8004bac:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004bb2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d87e      	bhi.n	8004cb8 <USB_HC_Init+0x13c>
 8004bba:	a201      	add	r2, pc, #4	; (adr r2, 8004bc0 <USB_HC_Init+0x44>)
 8004bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc0:	08004bd1 	.word	0x08004bd1
 8004bc4:	08004c7b 	.word	0x08004c7b
 8004bc8:	08004bd1 	.word	0x08004bd1
 8004bcc:	08004c3d 	.word	0x08004c3d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004bd0:	78fb      	ldrb	r3, [r7, #3]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bdc:	461a      	mov	r2, r3
 8004bde:	f240 439d 	movw	r3, #1181	; 0x49d
 8004be2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004be4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	da10      	bge.n	8004c0e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004bec:	78fb      	ldrb	r3, [r7, #3]
 8004bee:	015a      	lsls	r2, r3, #5
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	78fa      	ldrb	r2, [r7, #3]
 8004bfc:	0151      	lsls	r1, r2, #5
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	440a      	add	r2, r1
 8004c02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c0a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004c0c:	e057      	b.n	8004cbe <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d051      	beq.n	8004cbe <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004c1a:	78fb      	ldrb	r3, [r7, #3]
 8004c1c:	015a      	lsls	r2, r3, #5
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	4413      	add	r3, r2
 8004c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	78fa      	ldrb	r2, [r7, #3]
 8004c2a:	0151      	lsls	r1, r2, #5
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	440a      	add	r2, r1
 8004c30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c34:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004c38:	60d3      	str	r3, [r2, #12]
      break;
 8004c3a:	e040      	b.n	8004cbe <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004c3c:	78fb      	ldrb	r3, [r7, #3]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c48:	461a      	mov	r2, r3
 8004c4a:	f240 639d 	movw	r3, #1693	; 0x69d
 8004c4e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004c50:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	da34      	bge.n	8004cc2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004c58:	78fb      	ldrb	r3, [r7, #3]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	78fa      	ldrb	r2, [r7, #3]
 8004c68:	0151      	lsls	r1, r2, #5
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	440a      	add	r2, r1
 8004c6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c76:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004c78:	e023      	b.n	8004cc2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004c7a:	78fb      	ldrb	r3, [r7, #3]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c86:	461a      	mov	r2, r3
 8004c88:	f240 2325 	movw	r3, #549	; 0x225
 8004c8c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004c8e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	da17      	bge.n	8004cc6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004c96:	78fb      	ldrb	r3, [r7, #3]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	78fa      	ldrb	r2, [r7, #3]
 8004ca6:	0151      	lsls	r1, r2, #5
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	440a      	add	r2, r1
 8004cac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cb0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004cb4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004cb6:	e006      	b.n	8004cc6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	75fb      	strb	r3, [r7, #23]
      break;
 8004cbc:	e004      	b.n	8004cc8 <USB_HC_Init+0x14c>
      break;
 8004cbe:	bf00      	nop
 8004cc0:	e002      	b.n	8004cc8 <USB_HC_Init+0x14c>
      break;
 8004cc2:	bf00      	nop
 8004cc4:	e000      	b.n	8004cc8 <USB_HC_Init+0x14c>
      break;
 8004cc6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cce:	699a      	ldr	r2, [r3, #24]
 8004cd0:	78fb      	ldrb	r3, [r7, #3]
 8004cd2:	f003 030f 	and.w	r3, r3, #15
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cdc:	68b9      	ldr	r1, [r7, #8]
 8004cde:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004cf2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	da03      	bge.n	8004d02 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cfe:	613b      	str	r3, [r7, #16]
 8004d00:	e001      	b.n	8004d06 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004d06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d103      	bne.n	8004d16 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004d0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	e001      	b.n	8004d1a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004d1a:	787b      	ldrb	r3, [r7, #1]
 8004d1c:	059b      	lsls	r3, r3, #22
 8004d1e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004d22:	78bb      	ldrb	r3, [r7, #2]
 8004d24:	02db      	lsls	r3, r3, #11
 8004d26:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004d2a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004d2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004d30:	049b      	lsls	r3, r3, #18
 8004d32:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004d36:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004d38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004d3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004d3e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004d44:	78fb      	ldrb	r3, [r7, #3]
 8004d46:	0159      	lsls	r1, r3, #5
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	440b      	add	r3, r1
 8004d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d50:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004d56:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004d58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004d5c:	2b03      	cmp	r3, #3
 8004d5e:	d10f      	bne.n	8004d80 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004d60:	78fb      	ldrb	r3, [r7, #3]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	78fa      	ldrb	r2, [r7, #3]
 8004d70:	0151      	lsls	r1, r2, #5
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	440a      	add	r2, r1
 8004d76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d7e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	371c      	adds	r7, #28
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop

08004d90 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b08c      	sub	sp, #48	; 0x30
 8004d94:	af02      	add	r7, sp, #8
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	785b      	ldrb	r3, [r3, #1]
 8004da6:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004da8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dac:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d028      	beq.n	8004e0c <USB_HC_StartXfer+0x7c>
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	791b      	ldrb	r3, [r3, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d124      	bne.n	8004e0c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004dc2:	79fb      	ldrb	r3, [r7, #7]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10b      	bne.n	8004de0 <USB_HC_StartXfer+0x50>
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	795b      	ldrb	r3, [r3, #5]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d107      	bne.n	8004de0 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	785b      	ldrb	r3, [r3, #1]
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 fa30 	bl	800523c <USB_DoPing>
      return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	e114      	b.n	800500a <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8004de0:	79fb      	ldrb	r3, [r7, #7]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d112      	bne.n	8004e0c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	69fa      	ldr	r2, [r7, #28]
 8004df6:	0151      	lsls	r1, r2, #5
 8004df8:	6a3a      	ldr	r2, [r7, #32]
 8004dfa:	440a      	add	r2, r1
 8004dfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e00:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004e04:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d018      	beq.n	8004e46 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	8912      	ldrh	r2, [r2, #8]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	8912      	ldrh	r2, [r2, #8]
 8004e24:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e28:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004e2a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004e2c:	8b7b      	ldrh	r3, [r7, #26]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d90b      	bls.n	8004e4a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004e32:	8b7b      	ldrh	r3, [r7, #26]
 8004e34:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004e36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	8912      	ldrh	r2, [r2, #8]
 8004e3c:	fb02 f203 	mul.w	r2, r2, r3
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	611a      	str	r2, [r3, #16]
 8004e44:	e001      	b.n	8004e4a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004e46:	2301      	movs	r3, #1
 8004e48:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	78db      	ldrb	r3, [r3, #3]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d006      	beq.n	8004e60 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004e52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	8912      	ldrh	r2, [r2, #8]
 8004e58:	fb02 f203 	mul.w	r2, r2, r3
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004e68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e6a:	04d9      	lsls	r1, r3, #19
 8004e6c:	4b69      	ldr	r3, [pc, #420]	; (8005014 <USB_HC_StartXfer+0x284>)
 8004e6e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004e70:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	7a9b      	ldrb	r3, [r3, #10]
 8004e76:	075b      	lsls	r3, r3, #29
 8004e78:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004e7c:	69f9      	ldr	r1, [r7, #28]
 8004e7e:	0148      	lsls	r0, r1, #5
 8004e80:	6a39      	ldr	r1, [r7, #32]
 8004e82:	4401      	add	r1, r0
 8004e84:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004e88:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004e8a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004e8c:	79fb      	ldrb	r3, [r7, #7]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d009      	beq.n	8004ea6 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	68d9      	ldr	r1, [r3, #12]
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea2:	460a      	mov	r2, r1
 8004ea4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	bf0c      	ite	eq
 8004eb6:	2301      	moveq	r3, #1
 8004eb8:	2300      	movne	r3, #0
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	69fa      	ldr	r2, [r7, #28]
 8004ece:	0151      	lsls	r1, r2, #5
 8004ed0:	6a3a      	ldr	r2, [r7, #32]
 8004ed2:	440a      	add	r2, r1
 8004ed4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ed8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004edc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	7e7b      	ldrb	r3, [r7, #25]
 8004eee:	075b      	lsls	r3, r3, #29
 8004ef0:	69f9      	ldr	r1, [r7, #28]
 8004ef2:	0148      	lsls	r0, r1, #5
 8004ef4:	6a39      	ldr	r1, [r7, #32]
 8004ef6:	4401      	add	r1, r0
 8004ef8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004efc:	4313      	orrs	r3, r2
 8004efe:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	015a      	lsls	r2, r3, #5
 8004f04:	6a3b      	ldr	r3, [r7, #32]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a42      	ldr	r2, [pc, #264]	; (8005018 <USB_HC_StartXfer+0x288>)
 8004f10:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f12:	4b41      	ldr	r3, [pc, #260]	; (8005018 <USB_HC_StartXfer+0x288>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f1a:	4a3f      	ldr	r2, [pc, #252]	; (8005018 <USB_HC_StartXfer+0x288>)
 8004f1c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	78db      	ldrb	r3, [r3, #3]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d006      	beq.n	8004f34 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004f26:	4b3c      	ldr	r3, [pc, #240]	; (8005018 <USB_HC_StartXfer+0x288>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f2e:	4a3a      	ldr	r2, [pc, #232]	; (8005018 <USB_HC_StartXfer+0x288>)
 8004f30:	6013      	str	r3, [r2, #0]
 8004f32:	e005      	b.n	8004f40 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004f34:	4b38      	ldr	r3, [pc, #224]	; (8005018 <USB_HC_StartXfer+0x288>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f3c:	4a36      	ldr	r2, [pc, #216]	; (8005018 <USB_HC_StartXfer+0x288>)
 8004f3e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f40:	4b35      	ldr	r3, [pc, #212]	; (8005018 <USB_HC_StartXfer+0x288>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f48:	4a33      	ldr	r2, [pc, #204]	; (8005018 <USB_HC_StartXfer+0x288>)
 8004f4a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	6a3b      	ldr	r3, [r7, #32]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f58:	461a      	mov	r2, r3
 8004f5a:	4b2f      	ldr	r3, [pc, #188]	; (8005018 <USB_HC_StartXfer+0x288>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004f60:	79fb      	ldrb	r3, [r7, #7]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8004f66:	2300      	movs	r3, #0
 8004f68:	e04f      	b.n	800500a <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	78db      	ldrb	r3, [r3, #3]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d14a      	bne.n	8005008 <USB_HC_StartXfer+0x278>
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d046      	beq.n	8005008 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	79db      	ldrb	r3, [r3, #7]
 8004f7e:	2b03      	cmp	r3, #3
 8004f80:	d830      	bhi.n	8004fe4 <USB_HC_StartXfer+0x254>
 8004f82:	a201      	add	r2, pc, #4	; (adr r2, 8004f88 <USB_HC_StartXfer+0x1f8>)
 8004f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f88:	08004f99 	.word	0x08004f99
 8004f8c:	08004fbd 	.word	0x08004fbd
 8004f90:	08004f99 	.word	0x08004f99
 8004f94:	08004fbd 	.word	0x08004fbd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	3303      	adds	r3, #3
 8004f9e:	089b      	lsrs	r3, r3, #2
 8004fa0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004fa2:	8afa      	ldrh	r2, [r7, #22]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d91c      	bls.n	8004fe8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	f043 0220 	orr.w	r2, r3, #32
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	619a      	str	r2, [r3, #24]
        }
        break;
 8004fba:	e015      	b.n	8004fe8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	3303      	adds	r3, #3
 8004fc2:	089b      	lsrs	r3, r3, #2
 8004fc4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004fc6:	8afa      	ldrh	r2, [r7, #22]
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d90a      	bls.n	8004fec <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	619a      	str	r2, [r3, #24]
        }
        break;
 8004fe2:	e003      	b.n	8004fec <USB_HC_StartXfer+0x25c>

      default:
        break;
 8004fe4:	bf00      	nop
 8004fe6:	e002      	b.n	8004fee <USB_HC_StartXfer+0x25e>
        break;
 8004fe8:	bf00      	nop
 8004fea:	e000      	b.n	8004fee <USB_HC_StartXfer+0x25e>
        break;
 8004fec:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	68d9      	ldr	r1, [r3, #12]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	785a      	ldrb	r2, [r3, #1]
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	b298      	uxth	r0, r3
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	4603      	mov	r3, r0
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f7ff fb84 	bl	8004710 <USB_WritePacket>
  }

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3728      	adds	r7, #40	; 0x28
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	1ff80000 	.word	0x1ff80000
 8005018:	200000b0 	.word	0x200000b0

0800501c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	b29b      	uxth	r3, r3
}
 8005032:	4618      	mov	r0, r3
 8005034:	3714      	adds	r7, #20
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800503e:	b480      	push	{r7}
 8005040:	b087      	sub	sp, #28
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	460b      	mov	r3, r1
 8005048:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800504e:	78fb      	ldrb	r3, [r7, #3]
 8005050:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005052:	2300      	movs	r3, #0
 8005054:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	015a      	lsls	r2, r3, #5
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	4413      	add	r3, r2
 800505e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	0c9b      	lsrs	r3, r3, #18
 8005066:	f003 0303 	and.w	r3, r3, #3
 800506a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <USB_HC_Halt+0x3a>
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	2b02      	cmp	r3, #2
 8005076:	d16c      	bne.n	8005152 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	4413      	add	r3, r2
 8005080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	0151      	lsls	r1, r2, #5
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	440a      	add	r2, r1
 800508e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005092:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005096:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d143      	bne.n	800512c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	015a      	lsls	r2, r3, #5
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	4413      	add	r3, r2
 80050ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	0151      	lsls	r1, r2, #5
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	440a      	add	r2, r1
 80050ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050c2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	0151      	lsls	r1, r2, #5
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	440a      	add	r2, r1
 80050da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050e2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	0151      	lsls	r1, r2, #5
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	440a      	add	r2, r1
 80050fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005102:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	3301      	adds	r3, #1
 8005108:	617b      	str	r3, [r7, #20]
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005110:	d81d      	bhi.n	800514e <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	4413      	add	r3, r2
 800511a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005124:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005128:	d0ec      	beq.n	8005104 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800512a:	e080      	b.n	800522e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	4413      	add	r3, r2
 8005134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	0151      	lsls	r1, r2, #5
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	440a      	add	r2, r1
 8005142:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005146:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800514a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800514c:	e06f      	b.n	800522e <USB_HC_Halt+0x1f0>
          break;
 800514e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005150:	e06d      	b.n	800522e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	4413      	add	r3, r2
 800515a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	0151      	lsls	r1, r2, #5
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	440a      	add	r2, r1
 8005168:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800516c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005170:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d143      	bne.n	800520a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	4413      	add	r3, r2
 800518a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	0151      	lsls	r1, r2, #5
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	440a      	add	r2, r1
 8005198:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800519c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051a0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	0151      	lsls	r1, r2, #5
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	440a      	add	r2, r1
 80051b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051c0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	0151      	lsls	r1, r2, #5
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	440a      	add	r2, r1
 80051d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051e0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	3301      	adds	r3, #1
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051ee:	d81d      	bhi.n	800522c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005202:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005206:	d0ec      	beq.n	80051e2 <USB_HC_Halt+0x1a4>
 8005208:	e011      	b.n	800522e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	4413      	add	r3, r2
 8005212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	0151      	lsls	r1, r2, #5
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	440a      	add	r2, r1
 8005220:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005224:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005228:	6013      	str	r3, [r2, #0]
 800522a:	e000      	b.n	800522e <USB_HC_Halt+0x1f0>
          break;
 800522c:	bf00      	nop
    }
  }

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	371c      	adds	r7, #28
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800523c:	b480      	push	{r7}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	460b      	mov	r3, r1
 8005246:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800524c:	78fb      	ldrb	r3, [r7, #3]
 800524e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005250:	2301      	movs	r3, #1
 8005252:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	04da      	lsls	r2, r3, #19
 8005258:	4b15      	ldr	r3, [pc, #84]	; (80052b0 <USB_DoPing+0x74>)
 800525a:	4013      	ands	r3, r2
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	0151      	lsls	r1, r2, #5
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	440a      	add	r2, r1
 8005264:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005268:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800526c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	4413      	add	r3, r2
 8005276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005284:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800528c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	4413      	add	r3, r2
 8005296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800529a:	461a      	mov	r2, r3
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	371c      	adds	r7, #28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	1ff80000 	.word	0x1ff80000

080052b4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80052c0:	2300      	movs	r3, #0
 80052c2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f7ff f99f 	bl	8004608 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80052ca:	2110      	movs	r1, #16
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f7ff f9d7 	bl	8004680 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7ff f9fa 	bl	80046cc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80052d8:	2300      	movs	r3, #0
 80052da:	613b      	str	r3, [r7, #16]
 80052dc:	e01f      	b.n	800531e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052f4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052fc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005304:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	015a      	lsls	r2, r3, #5
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4413      	add	r3, r2
 800530e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005312:	461a      	mov	r2, r3
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	3301      	adds	r3, #1
 800531c:	613b      	str	r3, [r7, #16]
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	2b0f      	cmp	r3, #15
 8005322:	d9dc      	bls.n	80052de <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005324:	2300      	movs	r3, #0
 8005326:	613b      	str	r3, [r7, #16]
 8005328:	e034      	b.n	8005394 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4413      	add	r3, r2
 8005332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005340:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005348:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005350:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	4413      	add	r3, r2
 800535a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800535e:	461a      	mov	r2, r3
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	3301      	adds	r3, #1
 8005368:	617b      	str	r3, [r7, #20]
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005370:	d80c      	bhi.n	800538c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	015a      	lsls	r2, r3, #5
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	4413      	add	r3, r2
 800537a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005384:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005388:	d0ec      	beq.n	8005364 <USB_StopHost+0xb0>
 800538a:	e000      	b.n	800538e <USB_StopHost+0xda>
        break;
 800538c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	3301      	adds	r3, #1
 8005392:	613b      	str	r3, [r7, #16]
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	2b0f      	cmp	r3, #15
 8005398:	d9c7      	bls.n	800532a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053a0:	461a      	mov	r2, r3
 80053a2:	f04f 33ff 	mov.w	r3, #4294967295
 80053a6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f04f 32ff 	mov.w	r2, #4294967295
 80053ae:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f7ff f918 	bl	80045e6 <USB_EnableGlobalInt>

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80053c0:	b590      	push	{r4, r7, lr}
 80053c2:	b089      	sub	sp, #36	; 0x24
 80053c4:	af04      	add	r7, sp, #16
 80053c6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80053c8:	2301      	movs	r3, #1
 80053ca:	2202      	movs	r2, #2
 80053cc:	2102      	movs	r1, #2
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fc68 	bl	8005ca4 <USBH_FindInterface>
 80053d4:	4603      	mov	r3, r0
 80053d6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80053d8:	7bfb      	ldrb	r3, [r7, #15]
 80053da:	2bff      	cmp	r3, #255	; 0xff
 80053dc:	d002      	beq.n	80053e4 <USBH_CDC_InterfaceInit+0x24>
 80053de:	7bfb      	ldrb	r3, [r7, #15]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d901      	bls.n	80053e8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80053e4:	2302      	movs	r3, #2
 80053e6:	e13d      	b.n	8005664 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80053e8:	7bfb      	ldrb	r3, [r7, #15]
 80053ea:	4619      	mov	r1, r3
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 fc3d 	bl	8005c6c <USBH_SelectInterface>
 80053f2:	4603      	mov	r3, r0
 80053f4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80053f6:	7bbb      	ldrb	r3, [r7, #14]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80053fc:	2302      	movs	r3, #2
 80053fe:	e131      	b.n	8005664 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005406:	2050      	movs	r0, #80	; 0x50
 8005408:	f002 fa04 	bl	8007814 <malloc>
 800540c:	4603      	mov	r3, r0
 800540e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005420:	2302      	movs	r3, #2
 8005422:	e11f      	b.n	8005664 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005424:	2250      	movs	r2, #80	; 0x50
 8005426:	2100      	movs	r1, #0
 8005428:	68b8      	ldr	r0, [r7, #8]
 800542a:	f002 fa03 	bl	8007834 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800542e:	7bfb      	ldrb	r3, [r7, #15]
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	211a      	movs	r1, #26
 8005434:	fb01 f303 	mul.w	r3, r1, r3
 8005438:	4413      	add	r3, r2
 800543a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	b25b      	sxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	da15      	bge.n	8005472 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005446:	7bfb      	ldrb	r3, [r7, #15]
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	211a      	movs	r1, #26
 800544c:	fb01 f303 	mul.w	r3, r1, r3
 8005450:	4413      	add	r3, r2
 8005452:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005456:	781a      	ldrb	r2, [r3, #0]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800545c:	7bfb      	ldrb	r3, [r7, #15]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	211a      	movs	r1, #26
 8005462:	fb01 f303 	mul.w	r3, r1, r3
 8005466:	4413      	add	r3, r2
 8005468:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800546c:	881a      	ldrh	r2, [r3, #0]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	785b      	ldrb	r3, [r3, #1]
 8005476:	4619      	mov	r1, r3
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f001 fe36 	bl	80070ea <USBH_AllocPipe>
 800547e:	4603      	mov	r3, r0
 8005480:	461a      	mov	r2, r3
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	7819      	ldrb	r1, [r3, #0]
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	7858      	ldrb	r0, [r3, #1]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	8952      	ldrh	r2, [r2, #10]
 800549e:	9202      	str	r2, [sp, #8]
 80054a0:	2203      	movs	r2, #3
 80054a2:	9201      	str	r2, [sp, #4]
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	4623      	mov	r3, r4
 80054a8:	4602      	mov	r2, r0
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f001 fdee 	bl	800708c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	2200      	movs	r2, #0
 80054b6:	4619      	mov	r1, r3
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f002 f8fb 	bl	80076b4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80054be:	2300      	movs	r3, #0
 80054c0:	2200      	movs	r2, #0
 80054c2:	210a      	movs	r1, #10
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 fbed 	bl	8005ca4 <USBH_FindInterface>
 80054ca:	4603      	mov	r3, r0
 80054cc:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80054ce:	7bfb      	ldrb	r3, [r7, #15]
 80054d0:	2bff      	cmp	r3, #255	; 0xff
 80054d2:	d002      	beq.n	80054da <USBH_CDC_InterfaceInit+0x11a>
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d901      	bls.n	80054de <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80054da:	2302      	movs	r3, #2
 80054dc:	e0c2      	b.n	8005664 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80054de:	7bfb      	ldrb	r3, [r7, #15]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	211a      	movs	r1, #26
 80054e4:	fb01 f303 	mul.w	r3, r1, r3
 80054e8:	4413      	add	r3, r2
 80054ea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	b25b      	sxtb	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	da16      	bge.n	8005524 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80054f6:	7bfb      	ldrb	r3, [r7, #15]
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	211a      	movs	r1, #26
 80054fc:	fb01 f303 	mul.w	r3, r1, r3
 8005500:	4413      	add	r3, r2
 8005502:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005506:	781a      	ldrb	r2, [r3, #0]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800550c:	7bfb      	ldrb	r3, [r7, #15]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	211a      	movs	r1, #26
 8005512:	fb01 f303 	mul.w	r3, r1, r3
 8005516:	4413      	add	r3, r2
 8005518:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800551c:	881a      	ldrh	r2, [r3, #0]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	835a      	strh	r2, [r3, #26]
 8005522:	e015      	b.n	8005550 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005524:	7bfb      	ldrb	r3, [r7, #15]
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	211a      	movs	r1, #26
 800552a:	fb01 f303 	mul.w	r3, r1, r3
 800552e:	4413      	add	r3, r2
 8005530:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005534:	781a      	ldrb	r2, [r3, #0]
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800553a:	7bfb      	ldrb	r3, [r7, #15]
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	211a      	movs	r1, #26
 8005540:	fb01 f303 	mul.w	r3, r1, r3
 8005544:	4413      	add	r3, r2
 8005546:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800554a:	881a      	ldrh	r2, [r3, #0]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005550:	7bfb      	ldrb	r3, [r7, #15]
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	211a      	movs	r1, #26
 8005556:	fb01 f303 	mul.w	r3, r1, r3
 800555a:	4413      	add	r3, r2
 800555c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	b25b      	sxtb	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	da16      	bge.n	8005596 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005568:	7bfb      	ldrb	r3, [r7, #15]
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	211a      	movs	r1, #26
 800556e:	fb01 f303 	mul.w	r3, r1, r3
 8005572:	4413      	add	r3, r2
 8005574:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005578:	781a      	ldrb	r2, [r3, #0]
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800557e:	7bfb      	ldrb	r3, [r7, #15]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	211a      	movs	r1, #26
 8005584:	fb01 f303 	mul.w	r3, r1, r3
 8005588:	4413      	add	r3, r2
 800558a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800558e:	881a      	ldrh	r2, [r3, #0]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	835a      	strh	r2, [r3, #26]
 8005594:	e015      	b.n	80055c2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005596:	7bfb      	ldrb	r3, [r7, #15]
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	211a      	movs	r1, #26
 800559c:	fb01 f303 	mul.w	r3, r1, r3
 80055a0:	4413      	add	r3, r2
 80055a2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80055a6:	781a      	ldrb	r2, [r3, #0]
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	211a      	movs	r1, #26
 80055b2:	fb01 f303 	mul.w	r3, r1, r3
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80055bc:	881a      	ldrh	r2, [r3, #0]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	7b9b      	ldrb	r3, [r3, #14]
 80055c6:	4619      	mov	r1, r3
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f001 fd8e 	bl	80070ea <USBH_AllocPipe>
 80055ce:	4603      	mov	r3, r0
 80055d0:	461a      	mov	r2, r3
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	7bdb      	ldrb	r3, [r3, #15]
 80055da:	4619      	mov	r1, r3
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f001 fd84 	bl	80070ea <USBH_AllocPipe>
 80055e2:	4603      	mov	r3, r0
 80055e4:	461a      	mov	r2, r3
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	7b59      	ldrb	r1, [r3, #13]
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	7b98      	ldrb	r0, [r3, #14]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	8b12      	ldrh	r2, [r2, #24]
 8005602:	9202      	str	r2, [sp, #8]
 8005604:	2202      	movs	r2, #2
 8005606:	9201      	str	r2, [sp, #4]
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	4623      	mov	r3, r4
 800560c:	4602      	mov	r2, r0
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f001 fd3c 	bl	800708c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	7b19      	ldrb	r1, [r3, #12]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	7bd8      	ldrb	r0, [r3, #15]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	8b52      	ldrh	r2, [r2, #26]
 800562c:	9202      	str	r2, [sp, #8]
 800562e:	2202      	movs	r2, #2
 8005630:	9201      	str	r2, [sp, #4]
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	4623      	mov	r3, r4
 8005636:	4602      	mov	r2, r0
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f001 fd27 	bl	800708c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	7b5b      	ldrb	r3, [r3, #13]
 800564a:	2200      	movs	r2, #0
 800564c:	4619      	mov	r1, r3
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f002 f830 	bl	80076b4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	7b1b      	ldrb	r3, [r3, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	4619      	mov	r1, r3
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f002 f829 	bl	80076b4 <USBH_LL_SetToggle>

  return USBH_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	bd90      	pop	{r4, r7, pc}

0800566c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00e      	beq.n	80056a4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	4619      	mov	r1, r3
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f001 fd1c 	bl	80070ca <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	4619      	mov	r1, r3
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f001 fd47 	bl	800712c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	7b1b      	ldrb	r3, [r3, #12]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00e      	beq.n	80056ca <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	7b1b      	ldrb	r3, [r3, #12]
 80056b0:	4619      	mov	r1, r3
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f001 fd09 	bl	80070ca <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	7b1b      	ldrb	r3, [r3, #12]
 80056bc:	4619      	mov	r1, r3
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f001 fd34 	bl	800712c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	7b5b      	ldrb	r3, [r3, #13]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00e      	beq.n	80056f0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	7b5b      	ldrb	r3, [r3, #13]
 80056d6:	4619      	mov	r1, r3
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f001 fcf6 	bl	80070ca <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	7b5b      	ldrb	r3, [r3, #13]
 80056e2:	4619      	mov	r1, r3
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f001 fd21 	bl	800712c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80056f6:	69db      	ldr	r3, [r3, #28]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00b      	beq.n	8005714 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005702:	69db      	ldr	r3, [r3, #28]
 8005704:	4618      	mov	r0, r3
 8005706:	f002 f88d 	bl	8007824 <free>
    phost->pActiveClass->pData = 0U;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005710:	2200      	movs	r2, #0
 8005712:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b084      	sub	sp, #16
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	3340      	adds	r3, #64	; 0x40
 8005734:	4619      	mov	r1, r3
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f8b1 	bl	800589e <GetLineCoding>
 800573c:	4603      	mov	r3, r0
 800573e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005740:	7afb      	ldrb	r3, [r7, #11]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d105      	bne.n	8005752 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800574c:	2102      	movs	r1, #2
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005752:	7afb      	ldrb	r3, [r7, #11]
}
 8005754:	4618      	mov	r0, r3
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005764:	2301      	movs	r3, #1
 8005766:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005768:	2300      	movs	r3, #0
 800576a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800577c:	2b04      	cmp	r3, #4
 800577e:	d877      	bhi.n	8005870 <USBH_CDC_Process+0x114>
 8005780:	a201      	add	r2, pc, #4	; (adr r2, 8005788 <USBH_CDC_Process+0x2c>)
 8005782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005786:	bf00      	nop
 8005788:	0800579d 	.word	0x0800579d
 800578c:	080057a3 	.word	0x080057a3
 8005790:	080057d3 	.word	0x080057d3
 8005794:	08005847 	.word	0x08005847
 8005798:	08005855 	.word	0x08005855
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800579c:	2300      	movs	r3, #0
 800579e:	73fb      	strb	r3, [r7, #15]
      break;
 80057a0:	e06d      	b.n	800587e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057a6:	4619      	mov	r1, r3
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f897 	bl	80058dc <SetLineCoding>
 80057ae:	4603      	mov	r3, r0
 80057b0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80057b2:	7bbb      	ldrb	r3, [r7, #14]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d104      	bne.n	80057c2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80057c0:	e058      	b.n	8005874 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80057c2:	7bbb      	ldrb	r3, [r7, #14]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d055      	beq.n	8005874 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2204      	movs	r2, #4
 80057cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80057d0:	e050      	b.n	8005874 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	3340      	adds	r3, #64	; 0x40
 80057d6:	4619      	mov	r1, r3
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 f860 	bl	800589e <GetLineCoding>
 80057de:	4603      	mov	r3, r0
 80057e0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80057e2:	7bbb      	ldrb	r3, [r7, #14]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d126      	bne.n	8005836 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057fa:	791b      	ldrb	r3, [r3, #4]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d13b      	bne.n	8005878 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800580a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800580c:	429a      	cmp	r2, r3
 800580e:	d133      	bne.n	8005878 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800581a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800581c:	429a      	cmp	r2, r3
 800581e:	d12b      	bne.n	8005878 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005828:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800582a:	429a      	cmp	r2, r3
 800582c:	d124      	bne.n	8005878 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f95a 	bl	8005ae8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005834:	e020      	b.n	8005878 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005836:	7bbb      	ldrb	r3, [r7, #14]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d01d      	beq.n	8005878 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	2204      	movs	r2, #4
 8005840:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005844:	e018      	b.n	8005878 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f867 	bl	800591a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f8dc 	bl	8005a0a <CDC_ProcessReception>
      break;
 8005852:	e014      	b.n	800587e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005854:	2100      	movs	r1, #0
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 ffe5 	bl	8006826 <USBH_ClrFeature>
 800585c:	4603      	mov	r3, r0
 800585e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005860:	7bbb      	ldrb	r3, [r7, #14]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10a      	bne.n	800587c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800586e:	e005      	b.n	800587c <USBH_CDC_Process+0x120>

    default:
      break;
 8005870:	bf00      	nop
 8005872:	e004      	b.n	800587e <USBH_CDC_Process+0x122>
      break;
 8005874:	bf00      	nop
 8005876:	e002      	b.n	800587e <USBH_CDC_Process+0x122>
      break;
 8005878:	bf00      	nop
 800587a:	e000      	b.n	800587e <USBH_CDC_Process+0x122>
      break;
 800587c:	bf00      	nop

  }

  return status;
 800587e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005880:	4618      	mov	r0, r3
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b082      	sub	sp, #8
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	22a1      	movs	r2, #161	; 0xa1
 80058ac:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2221      	movs	r2, #33	; 0x21
 80058b2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2207      	movs	r2, #7
 80058c4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2207      	movs	r2, #7
 80058ca:	4619      	mov	r1, r3
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f001 f98a 	bl	8006be6 <USBH_CtlReq>
 80058d2:	4603      	mov	r3, r0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2221      	movs	r2, #33	; 0x21
 80058ea:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2220      	movs	r2, #32
 80058f0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2207      	movs	r2, #7
 8005902:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	2207      	movs	r2, #7
 8005908:	4619      	mov	r1, r3
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f001 f96b 	bl	8006be6 <USBH_CtlReq>
 8005910:	4603      	mov	r3, r0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3708      	adds	r7, #8
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b086      	sub	sp, #24
 800591e:	af02      	add	r7, sp, #8
 8005920:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005928:	69db      	ldr	r3, [r3, #28]
 800592a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800592c:	2300      	movs	r3, #0
 800592e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005936:	2b01      	cmp	r3, #1
 8005938:	d002      	beq.n	8005940 <CDC_ProcessTransmission+0x26>
 800593a:	2b02      	cmp	r3, #2
 800593c:	d025      	beq.n	800598a <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800593e:	e060      	b.n	8005a02 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	8b12      	ldrh	r2, [r2, #24]
 8005948:	4293      	cmp	r3, r2
 800594a:	d90c      	bls.n	8005966 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	69d9      	ldr	r1, [r3, #28]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	8b1a      	ldrh	r2, [r3, #24]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	7b58      	ldrb	r0, [r3, #13]
 8005958:	2301      	movs	r3, #1
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	4603      	mov	r3, r0
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f001 fb51 	bl	8007006 <USBH_BulkSendData>
 8005964:	e00c      	b.n	8005980 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800596e:	b29a      	uxth	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	7b58      	ldrb	r0, [r3, #13]
 8005974:	2301      	movs	r3, #1
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	4603      	mov	r3, r0
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f001 fb43 	bl	8007006 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005988:	e03b      	b.n	8005a02 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	7b5b      	ldrb	r3, [r3, #13]
 800598e:	4619      	mov	r1, r3
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f001 fe65 	bl	8007660 <USBH_LL_GetURBState>
 8005996:	4603      	mov	r3, r0
 8005998:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800599a:	7afb      	ldrb	r3, [r7, #11]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d128      	bne.n	80059f2 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	8b12      	ldrh	r2, [r2, #24]
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d90e      	bls.n	80059ca <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	8b12      	ldrh	r2, [r2, #24]
 80059b4:	1a9a      	subs	r2, r3, r2
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	8b12      	ldrh	r2, [r2, #24]
 80059c2:	441a      	add	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	61da      	str	r2, [r3, #28]
 80059c8:	e002      	b.n	80059d0 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d004      	beq.n	80059e2 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80059e0:	e00e      	b.n	8005a00 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f868 	bl	8005ac0 <USBH_CDC_TransmitCallback>
      break;
 80059f0:	e006      	b.n	8005a00 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 80059f2:	7afb      	ldrb	r3, [r7, #11]
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d103      	bne.n	8005a00 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005a00:	bf00      	nop
  }
}
 8005a02:	bf00      	nop
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b086      	sub	sp, #24
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005a26:	2b03      	cmp	r3, #3
 8005a28:	d002      	beq.n	8005a30 <CDC_ProcessReception+0x26>
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	d00e      	beq.n	8005a4c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005a2e:	e043      	b.n	8005ab8 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	6a19      	ldr	r1, [r3, #32]
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	8b5a      	ldrh	r2, [r3, #26]
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	7b1b      	ldrb	r3, [r3, #12]
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f001 fb07 	bl	8007050 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2204      	movs	r2, #4
 8005a46:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005a4a:	e035      	b.n	8005ab8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	7b1b      	ldrb	r3, [r3, #12]
 8005a50:	4619      	mov	r1, r3
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f001 fe04 	bl	8007660 <USBH_LL_GetURBState>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005a5c:	7cfb      	ldrb	r3, [r7, #19]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d129      	bne.n	8005ab6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	7b1b      	ldrb	r3, [r3, #12]
 8005a66:	4619      	mov	r1, r3
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f001 fd67 	bl	800753c <USBH_LL_GetLastXferSize>
 8005a6e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d016      	beq.n	8005aa8 <CDC_ProcessReception+0x9e>
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	8b5b      	ldrh	r3, [r3, #26]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d910      	bls.n	8005aa8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	1ad2      	subs	r2, r2, r3
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	6a1a      	ldr	r2, [r3, #32]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	441a      	add	r2, r3
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2203      	movs	r2, #3
 8005aa2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005aa6:	e006      	b.n	8005ab6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 f80f 	bl	8005ad4 <USBH_CDC_ReceiveCallback>
      break;
 8005ab6:	bf00      	nop
  }
}
 8005ab8:	bf00      	nop
 8005aba:	3718      	adds	r7, #24
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	4613      	mov	r3, r2
 8005b08:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005b10:	2302      	movs	r3, #2
 8005b12:	e029      	b.n	8005b68 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	79fa      	ldrb	r2, [r7, #7]
 8005b18:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 f81f 	bl	8005b70 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d003      	beq.n	8005b60 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f001 fc39 	bl	80073d8 <USBH_LL_Init>

  return USBH_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	e009      	b.n	8005b96 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	33e0      	adds	r3, #224	; 0xe0
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	3301      	adds	r3, #1
 8005b94:	60fb      	str	r3, [r7, #12]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2b0e      	cmp	r3, #14
 8005b9a:	d9f2      	bls.n	8005b82 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	e009      	b.n	8005bb6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005bac:	2200      	movs	r2, #0
 8005bae:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	60fb      	str	r3, [r7, #12]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bbc:	d3f1      	bcc.n	8005ba2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2240      	movs	r2, #64	; 0x40
 8005be2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3714      	adds	r7, #20
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005c22:	2300      	movs	r3, #0
 8005c24:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d016      	beq.n	8005c5a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10e      	bne.n	8005c54 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005c3c:	1c59      	adds	r1, r3, #1
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	33de      	adds	r3, #222	; 0xde
 8005c48:	6839      	ldr	r1, [r7, #0]
 8005c4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	73fb      	strb	r3, [r7, #15]
 8005c52:	e004      	b.n	8005c5e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005c54:	2302      	movs	r3, #2
 8005c56:	73fb      	strb	r3, [r7, #15]
 8005c58:	e001      	b.n	8005c5e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	460b      	mov	r3, r1
 8005c76:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005c82:	78fa      	ldrb	r2, [r7, #3]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d204      	bcs.n	8005c92 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	78fa      	ldrb	r2, [r7, #3]
 8005c8c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005c90:	e001      	b.n	8005c96 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005c92:	2302      	movs	r3, #2
 8005c94:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	4608      	mov	r0, r1
 8005cae:	4611      	mov	r1, r2
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	70fb      	strb	r3, [r7, #3]
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	70bb      	strb	r3, [r7, #2]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005ccc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005cce:	e025      	b.n	8005d1c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005cd0:	7dfb      	ldrb	r3, [r7, #23]
 8005cd2:	221a      	movs	r2, #26
 8005cd4:	fb02 f303 	mul.w	r3, r2, r3
 8005cd8:	3308      	adds	r3, #8
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	4413      	add	r3, r2
 8005cde:	3302      	adds	r3, #2
 8005ce0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	795b      	ldrb	r3, [r3, #5]
 8005ce6:	78fa      	ldrb	r2, [r7, #3]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d002      	beq.n	8005cf2 <USBH_FindInterface+0x4e>
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	2bff      	cmp	r3, #255	; 0xff
 8005cf0:	d111      	bne.n	8005d16 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005cf6:	78ba      	ldrb	r2, [r7, #2]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d002      	beq.n	8005d02 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005cfc:	78bb      	ldrb	r3, [r7, #2]
 8005cfe:	2bff      	cmp	r3, #255	; 0xff
 8005d00:	d109      	bne.n	8005d16 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005d06:	787a      	ldrb	r2, [r7, #1]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d002      	beq.n	8005d12 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005d0c:	787b      	ldrb	r3, [r7, #1]
 8005d0e:	2bff      	cmp	r3, #255	; 0xff
 8005d10:	d101      	bne.n	8005d16 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005d12:	7dfb      	ldrb	r3, [r7, #23]
 8005d14:	e006      	b.n	8005d24 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005d16:	7dfb      	ldrb	r3, [r7, #23]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005d1c:	7dfb      	ldrb	r3, [r7, #23]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d9d6      	bls.n	8005cd0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005d22:	23ff      	movs	r3, #255	; 0xff
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	371c      	adds	r7, #28
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f001 fb89 	bl	8007450 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8005d3e:	2101      	movs	r1, #1
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f001 fca0 	bl	8007686 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3708      	adds	r7, #8
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b088      	sub	sp, #32
 8005d54:	af04      	add	r7, sp, #16
 8005d56:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005d58:	2302      	movs	r3, #2
 8005d5a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d102      	bne.n	8005d72 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2203      	movs	r2, #3
 8005d70:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b0b      	cmp	r3, #11
 8005d7a:	f200 81b3 	bhi.w	80060e4 <USBH_Process+0x394>
 8005d7e:	a201      	add	r2, pc, #4	; (adr r2, 8005d84 <USBH_Process+0x34>)
 8005d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d84:	08005db5 	.word	0x08005db5
 8005d88:	08005de7 	.word	0x08005de7
 8005d8c:	08005e4f 	.word	0x08005e4f
 8005d90:	0800607f 	.word	0x0800607f
 8005d94:	080060e5 	.word	0x080060e5
 8005d98:	08005ef3 	.word	0x08005ef3
 8005d9c:	08006025 	.word	0x08006025
 8005da0:	08005f29 	.word	0x08005f29
 8005da4:	08005f49 	.word	0x08005f49
 8005da8:	08005f69 	.word	0x08005f69
 8005dac:	08005f97 	.word	0x08005f97
 8005db0:	08006067 	.word	0x08006067
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f000 8193 	beq.w	80060e8 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005dc8:	20c8      	movs	r0, #200	; 0xc8
 8005dca:	f001 fca6 	bl	800771a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f001 fb99 	bl	8007506 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005de4:	e180      	b.n	80060e8 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d107      	bne.n	8005e00 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005dfe:	e182      	b.n	8006106 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005e06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e0a:	d914      	bls.n	8005e36 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005e12:	3301      	adds	r3, #1
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005e22:	2b03      	cmp	r3, #3
 8005e24:	d903      	bls.n	8005e2e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	220d      	movs	r2, #13
 8005e2a:	701a      	strb	r2, [r3, #0]
      break;
 8005e2c:	e16b      	b.n	8006106 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	701a      	strb	r2, [r3, #0]
      break;
 8005e34:	e167      	b.n	8006106 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005e3c:	f103 020a 	add.w	r2, r3, #10
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005e46:	200a      	movs	r0, #10
 8005e48:	f001 fc67 	bl	800771a <USBH_Delay>
      break;
 8005e4c:	e15b      	b.n	8006106 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d005      	beq.n	8005e64 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005e5e:	2104      	movs	r1, #4
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005e64:	2064      	movs	r0, #100	; 0x64
 8005e66:	f001 fc58 	bl	800771a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f001 fb26 	bl	80074bc <USBH_LL_GetSpeed>
 8005e70:	4603      	mov	r3, r0
 8005e72:	461a      	mov	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2205      	movs	r2, #5
 8005e7e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005e80:	2100      	movs	r1, #0
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f001 f931 	bl	80070ea <USBH_AllocPipe>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005e90:	2180      	movs	r1, #128	; 0x80
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f001 f929 	bl	80070ea <USBH_AllocPipe>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	7919      	ldrb	r1, [r3, #4]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005eb4:	b292      	uxth	r2, r2
 8005eb6:	9202      	str	r2, [sp, #8]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	9201      	str	r2, [sp, #4]
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2280      	movs	r2, #128	; 0x80
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f001 f8e2 	bl	800708c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	7959      	ldrb	r1, [r3, #5]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005edc:	b292      	uxth	r2, r2
 8005ede:	9202      	str	r2, [sp, #8]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	9201      	str	r2, [sp, #4]
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2200      	movs	r2, #0
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f001 f8ce 	bl	800708c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005ef0:	e109      	b.n	8006106 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f90c 	bl	8006110 <USBH_HandleEnum>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005efc:	7bbb      	ldrb	r3, [r7, #14]
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f040 80f3 	bne.w	80060ec <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d103      	bne.n	8005f20 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2208      	movs	r2, #8
 8005f1c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005f1e:	e0e5      	b.n	80060ec <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2207      	movs	r2, #7
 8005f24:	701a      	strb	r2, [r3, #0]
      break;
 8005f26:	e0e1      	b.n	80060ec <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f000 80de 	beq.w	80060f0 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2208      	movs	r2, #8
 8005f44:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005f46:	e0d3      	b.n	80060f0 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	4619      	mov	r1, r3
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fc20 	bl	8006798 <USBH_SetCfg>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f040 80ca 	bne.w	80060f4 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2209      	movs	r2, #9
 8005f64:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005f66:	e0c5      	b.n	80060f4 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8005f6e:	f003 0320 	and.w	r3, r3, #32
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00b      	beq.n	8005f8e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8005f76:	2101      	movs	r1, #1
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 fc30 	bl	80067de <USBH_SetFeature>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f040 80b9 	bne.w	80060f8 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	220a      	movs	r2, #10
 8005f8a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005f8c:	e0b4      	b.n	80060f8 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	220a      	movs	r2, #10
 8005f92:	701a      	strb	r2, [r3, #0]
      break;
 8005f94:	e0b0      	b.n	80060f8 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 80ad 	beq.w	80060fc <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005faa:	2300      	movs	r3, #0
 8005fac:	73fb      	strb	r3, [r7, #15]
 8005fae:	e016      	b.n	8005fde <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005fb0:	7bfa      	ldrb	r2, [r7, #15]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	32de      	adds	r2, #222	; 0xde
 8005fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fba:	791a      	ldrb	r2, [r3, #4]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d108      	bne.n	8005fd8 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8005fc6:	7bfa      	ldrb	r2, [r7, #15]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	32de      	adds	r2, #222	; 0xde
 8005fcc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8005fd6:	e005      	b.n	8005fe4 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	73fb      	strb	r3, [r7, #15]
 8005fde:	7bfb      	ldrb	r3, [r7, #15]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d0e5      	beq.n	8005fb0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d016      	beq.n	800601c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	4798      	blx	r3
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d109      	bne.n	8006014 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2206      	movs	r2, #6
 8006004:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800600c:	2103      	movs	r1, #3
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006012:	e073      	b.n	80060fc <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	220d      	movs	r2, #13
 8006018:	701a      	strb	r2, [r3, #0]
      break;
 800601a:	e06f      	b.n	80060fc <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	220d      	movs	r2, #13
 8006020:	701a      	strb	r2, [r3, #0]
      break;
 8006022:	e06b      	b.n	80060fc <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800602a:	2b00      	cmp	r3, #0
 800602c:	d017      	beq.n	800605e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	4798      	blx	r3
 800603a:	4603      	mov	r3, r0
 800603c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800603e:	7bbb      	ldrb	r3, [r7, #14]
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d103      	bne.n	800604e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	220b      	movs	r2, #11
 800604a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800604c:	e058      	b.n	8006100 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800604e:	7bbb      	ldrb	r3, [r7, #14]
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b02      	cmp	r3, #2
 8006054:	d154      	bne.n	8006100 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	220d      	movs	r2, #13
 800605a:	701a      	strb	r2, [r3, #0]
      break;
 800605c:	e050      	b.n	8006100 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	220d      	movs	r2, #13
 8006062:	701a      	strb	r2, [r3, #0]
      break;
 8006064:	e04c      	b.n	8006100 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800606c:	2b00      	cmp	r3, #0
 800606e:	d049      	beq.n	8006104 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	4798      	blx	r3
      }
      break;
 800607c:	e042      	b.n	8006104 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7ff fd72 	bl	8005b70 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006092:	2b00      	cmp	r3, #0
 8006094:	d009      	beq.n	80060aa <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d005      	beq.n	80060c0 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80060ba:	2105      	movs	r1, #5
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d107      	bne.n	80060dc <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f7ff fe2b 	bl	8005d30 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80060da:	e014      	b.n	8006106 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f001 f9b7 	bl	8007450 <USBH_LL_Start>
      break;
 80060e2:	e010      	b.n	8006106 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80060e4:	bf00      	nop
 80060e6:	e00e      	b.n	8006106 <USBH_Process+0x3b6>
      break;
 80060e8:	bf00      	nop
 80060ea:	e00c      	b.n	8006106 <USBH_Process+0x3b6>
      break;
 80060ec:	bf00      	nop
 80060ee:	e00a      	b.n	8006106 <USBH_Process+0x3b6>
    break;
 80060f0:	bf00      	nop
 80060f2:	e008      	b.n	8006106 <USBH_Process+0x3b6>
      break;
 80060f4:	bf00      	nop
 80060f6:	e006      	b.n	8006106 <USBH_Process+0x3b6>
      break;
 80060f8:	bf00      	nop
 80060fa:	e004      	b.n	8006106 <USBH_Process+0x3b6>
      break;
 80060fc:	bf00      	nop
 80060fe:	e002      	b.n	8006106 <USBH_Process+0x3b6>
      break;
 8006100:	bf00      	nop
 8006102:	e000      	b.n	8006106 <USBH_Process+0x3b6>
      break;
 8006104:	bf00      	nop
  }
  return USBH_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b088      	sub	sp, #32
 8006114:	af04      	add	r7, sp, #16
 8006116:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006118:	2301      	movs	r3, #1
 800611a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800611c:	2301      	movs	r3, #1
 800611e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	785b      	ldrb	r3, [r3, #1]
 8006124:	2b07      	cmp	r3, #7
 8006126:	f200 81c1 	bhi.w	80064ac <USBH_HandleEnum+0x39c>
 800612a:	a201      	add	r2, pc, #4	; (adr r2, 8006130 <USBH_HandleEnum+0x20>)
 800612c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006130:	08006151 	.word	0x08006151
 8006134:	0800620f 	.word	0x0800620f
 8006138:	08006279 	.word	0x08006279
 800613c:	08006307 	.word	0x08006307
 8006140:	08006371 	.word	0x08006371
 8006144:	080063e1 	.word	0x080063e1
 8006148:	08006427 	.word	0x08006427
 800614c:	0800646d 	.word	0x0800646d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006150:	2108      	movs	r1, #8
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 fa50 	bl	80065f8 <USBH_Get_DevDesc>
 8006158:	4603      	mov	r3, r0
 800615a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800615c:	7bbb      	ldrb	r3, [r7, #14]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d130      	bne.n	80061c4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	7919      	ldrb	r1, [r3, #4]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006186:	b292      	uxth	r2, r2
 8006188:	9202      	str	r2, [sp, #8]
 800618a:	2200      	movs	r2, #0
 800618c:	9201      	str	r2, [sp, #4]
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	4603      	mov	r3, r0
 8006192:	2280      	movs	r2, #128	; 0x80
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 ff79 	bl	800708c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	7959      	ldrb	r1, [r3, #5]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80061ae:	b292      	uxth	r2, r2
 80061b0:	9202      	str	r2, [sp, #8]
 80061b2:	2200      	movs	r2, #0
 80061b4:	9201      	str	r2, [sp, #4]
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	4603      	mov	r3, r0
 80061ba:	2200      	movs	r2, #0
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 ff65 	bl	800708c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80061c2:	e175      	b.n	80064b0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80061c4:	7bbb      	ldrb	r3, [r7, #14]
 80061c6:	2b03      	cmp	r3, #3
 80061c8:	f040 8172 	bne.w	80064b0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80061d2:	3301      	adds	r3, #1
 80061d4:	b2da      	uxtb	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80061e2:	2b03      	cmp	r3, #3
 80061e4:	d903      	bls.n	80061ee <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	220d      	movs	r2, #13
 80061ea:	701a      	strb	r2, [r3, #0]
      break;
 80061ec:	e160      	b.n	80064b0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	795b      	ldrb	r3, [r3, #5]
 80061f2:	4619      	mov	r1, r3
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 ff99 	bl	800712c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	791b      	ldrb	r3, [r3, #4]
 80061fe:	4619      	mov	r1, r3
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 ff93 	bl	800712c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	701a      	strb	r2, [r3, #0]
      break;
 800620c:	e150      	b.n	80064b0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800620e:	2112      	movs	r1, #18
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 f9f1 	bl	80065f8 <USBH_Get_DevDesc>
 8006216:	4603      	mov	r3, r0
 8006218:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800621a:	7bbb      	ldrb	r3, [r7, #14]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d103      	bne.n	8006228 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2202      	movs	r2, #2
 8006224:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006226:	e145      	b.n	80064b4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006228:	7bbb      	ldrb	r3, [r7, #14]
 800622a:	2b03      	cmp	r3, #3
 800622c:	f040 8142 	bne.w	80064b4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006236:	3301      	adds	r3, #1
 8006238:	b2da      	uxtb	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006246:	2b03      	cmp	r3, #3
 8006248:	d903      	bls.n	8006252 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	220d      	movs	r2, #13
 800624e:	701a      	strb	r2, [r3, #0]
      break;
 8006250:	e130      	b.n	80064b4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	795b      	ldrb	r3, [r3, #5]
 8006256:	4619      	mov	r1, r3
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 ff67 	bl	800712c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	791b      	ldrb	r3, [r3, #4]
 8006262:	4619      	mov	r1, r3
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 ff61 	bl	800712c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	701a      	strb	r2, [r3, #0]
      break;
 8006276:	e11d      	b.n	80064b4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006278:	2101      	movs	r1, #1
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fa68 	bl	8006750 <USBH_SetAddress>
 8006280:	4603      	mov	r3, r0
 8006282:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006284:	7bbb      	ldrb	r3, [r7, #14]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d132      	bne.n	80062f0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800628a:	2002      	movs	r0, #2
 800628c:	f001 fa45 	bl	800771a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2203      	movs	r2, #3
 800629c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	7919      	ldrb	r1, [r3, #4]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80062b2:	b292      	uxth	r2, r2
 80062b4:	9202      	str	r2, [sp, #8]
 80062b6:	2200      	movs	r2, #0
 80062b8:	9201      	str	r2, [sp, #4]
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	4603      	mov	r3, r0
 80062be:	2280      	movs	r2, #128	; 0x80
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fee3 	bl	800708c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	7959      	ldrb	r1, [r3, #5]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80062da:	b292      	uxth	r2, r2
 80062dc:	9202      	str	r2, [sp, #8]
 80062de:	2200      	movs	r2, #0
 80062e0:	9201      	str	r2, [sp, #4]
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	4603      	mov	r3, r0
 80062e6:	2200      	movs	r2, #0
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 fecf 	bl	800708c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80062ee:	e0e3      	b.n	80064b8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80062f0:	7bbb      	ldrb	r3, [r7, #14]
 80062f2:	2b03      	cmp	r3, #3
 80062f4:	f040 80e0 	bne.w	80064b8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	220d      	movs	r2, #13
 80062fc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	705a      	strb	r2, [r3, #1]
      break;
 8006304:	e0d8      	b.n	80064b8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006306:	2109      	movs	r1, #9
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f99d 	bl	8006648 <USBH_Get_CfgDesc>
 800630e:	4603      	mov	r3, r0
 8006310:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006312:	7bbb      	ldrb	r3, [r7, #14]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d103      	bne.n	8006320 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2204      	movs	r2, #4
 800631c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800631e:	e0cd      	b.n	80064bc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006320:	7bbb      	ldrb	r3, [r7, #14]
 8006322:	2b03      	cmp	r3, #3
 8006324:	f040 80ca 	bne.w	80064bc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800632e:	3301      	adds	r3, #1
 8006330:	b2da      	uxtb	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800633e:	2b03      	cmp	r3, #3
 8006340:	d903      	bls.n	800634a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	220d      	movs	r2, #13
 8006346:	701a      	strb	r2, [r3, #0]
      break;
 8006348:	e0b8      	b.n	80064bc <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	795b      	ldrb	r3, [r3, #5]
 800634e:	4619      	mov	r1, r3
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 feeb 	bl	800712c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	791b      	ldrb	r3, [r3, #4]
 800635a:	4619      	mov	r1, r3
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 fee5 	bl	800712c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	701a      	strb	r2, [r3, #0]
      break;
 800636e:	e0a5      	b.n	80064bc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006376:	4619      	mov	r1, r3
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f965 	bl	8006648 <USBH_Get_CfgDesc>
 800637e:	4603      	mov	r3, r0
 8006380:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006382:	7bbb      	ldrb	r3, [r7, #14]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d103      	bne.n	8006390 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2205      	movs	r2, #5
 800638c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800638e:	e097      	b.n	80064c0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006390:	7bbb      	ldrb	r3, [r7, #14]
 8006392:	2b03      	cmp	r3, #3
 8006394:	f040 8094 	bne.w	80064c0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800639e:	3301      	adds	r3, #1
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80063ae:	2b03      	cmp	r3, #3
 80063b0:	d903      	bls.n	80063ba <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	220d      	movs	r2, #13
 80063b6:	701a      	strb	r2, [r3, #0]
      break;
 80063b8:	e082      	b.n	80064c0 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	795b      	ldrb	r3, [r3, #5]
 80063be:	4619      	mov	r1, r3
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 feb3 	bl	800712c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	791b      	ldrb	r3, [r3, #4]
 80063ca:	4619      	mov	r1, r3
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fead 	bl	800712c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	701a      	strb	r2, [r3, #0]
      break;
 80063de:	e06f      	b.n	80064c0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d019      	beq.n	800641e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80063f6:	23ff      	movs	r3, #255	; 0xff
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 f949 	bl	8006690 <USBH_Get_StringDesc>
 80063fe:	4603      	mov	r3, r0
 8006400:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006402:	7bbb      	ldrb	r3, [r7, #14]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d103      	bne.n	8006410 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2206      	movs	r2, #6
 800640c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800640e:	e059      	b.n	80064c4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006410:	7bbb      	ldrb	r3, [r7, #14]
 8006412:	2b03      	cmp	r3, #3
 8006414:	d156      	bne.n	80064c4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2206      	movs	r2, #6
 800641a:	705a      	strb	r2, [r3, #1]
      break;
 800641c:	e052      	b.n	80064c4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2206      	movs	r2, #6
 8006422:	705a      	strb	r2, [r3, #1]
      break;
 8006424:	e04e      	b.n	80064c4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800642c:	2b00      	cmp	r3, #0
 800642e:	d019      	beq.n	8006464 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800643c:	23ff      	movs	r3, #255	; 0xff
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f926 	bl	8006690 <USBH_Get_StringDesc>
 8006444:	4603      	mov	r3, r0
 8006446:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006448:	7bbb      	ldrb	r3, [r7, #14]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d103      	bne.n	8006456 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2207      	movs	r2, #7
 8006452:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006454:	e038      	b.n	80064c8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006456:	7bbb      	ldrb	r3, [r7, #14]
 8006458:	2b03      	cmp	r3, #3
 800645a:	d135      	bne.n	80064c8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2207      	movs	r2, #7
 8006460:	705a      	strb	r2, [r3, #1]
      break;
 8006462:	e031      	b.n	80064c8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2207      	movs	r2, #7
 8006468:	705a      	strb	r2, [r3, #1]
      break;
 800646a:	e02d      	b.n	80064c8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006472:	2b00      	cmp	r3, #0
 8006474:	d017      	beq.n	80064a6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006482:	23ff      	movs	r3, #255	; 0xff
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 f903 	bl	8006690 <USBH_Get_StringDesc>
 800648a:	4603      	mov	r3, r0
 800648c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800648e:	7bbb      	ldrb	r3, [r7, #14]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d102      	bne.n	800649a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006494:	2300      	movs	r3, #0
 8006496:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006498:	e018      	b.n	80064cc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800649a:	7bbb      	ldrb	r3, [r7, #14]
 800649c:	2b03      	cmp	r3, #3
 800649e:	d115      	bne.n	80064cc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80064a0:	2300      	movs	r3, #0
 80064a2:	73fb      	strb	r3, [r7, #15]
      break;
 80064a4:	e012      	b.n	80064cc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80064a6:	2300      	movs	r3, #0
 80064a8:	73fb      	strb	r3, [r7, #15]
      break;
 80064aa:	e00f      	b.n	80064cc <USBH_HandleEnum+0x3bc>

    default:
      break;
 80064ac:	bf00      	nop
 80064ae:	e00e      	b.n	80064ce <USBH_HandleEnum+0x3be>
      break;
 80064b0:	bf00      	nop
 80064b2:	e00c      	b.n	80064ce <USBH_HandleEnum+0x3be>
      break;
 80064b4:	bf00      	nop
 80064b6:	e00a      	b.n	80064ce <USBH_HandleEnum+0x3be>
      break;
 80064b8:	bf00      	nop
 80064ba:	e008      	b.n	80064ce <USBH_HandleEnum+0x3be>
      break;
 80064bc:	bf00      	nop
 80064be:	e006      	b.n	80064ce <USBH_HandleEnum+0x3be>
      break;
 80064c0:	bf00      	nop
 80064c2:	e004      	b.n	80064ce <USBH_HandleEnum+0x3be>
      break;
 80064c4:	bf00      	nop
 80064c6:	e002      	b.n	80064ce <USBH_HandleEnum+0x3be>
      break;
 80064c8:	bf00      	nop
 80064ca:	e000      	b.n	80064ce <USBH_HandleEnum+0x3be>
      break;
 80064cc:	bf00      	nop
  }
  return Status;
 80064ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80064ea:	bf00      	nop
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b082      	sub	sp, #8
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006504:	1c5a      	adds	r2, r3, #1
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 f804 	bl	800651a <USBH_HandleSof>
}
 8006512:	bf00      	nop
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b082      	sub	sp, #8
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	b2db      	uxtb	r3, r3
 8006528:	2b0b      	cmp	r3, #11
 800652a:	d10a      	bne.n	8006542 <USBH_HandleSof+0x28>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006532:	2b00      	cmp	r3, #0
 8006534:	d005      	beq.n	8006542 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	4798      	blx	r3
  }
}
 8006542:	bf00      	nop
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800654a:	b480      	push	{r7}
 800654c:	b083      	sub	sp, #12
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800655a:	bf00      	nop
}
 800655c:	370c      	adds	r7, #12
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006566:	b480      	push	{r7}
 8006568:	b083      	sub	sp, #12
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006576:	bf00      	nop
}
 8006578:	370c      	adds	r7, #12
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006582:	b480      	push	{r7}
 8006584:	b083      	sub	sp, #12
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 ff58 	bl	8007486 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	791b      	ldrb	r3, [r3, #4]
 80065da:	4619      	mov	r1, r3
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fda5 	bl	800712c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	795b      	ldrb	r3, [r3, #5]
 80065e6:	4619      	mov	r1, r3
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fd9f 	bl	800712c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b086      	sub	sp, #24
 80065fc:	af02      	add	r7, sp, #8
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	460b      	mov	r3, r1
 8006602:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800660a:	78fb      	ldrb	r3, [r7, #3]
 800660c:	b29b      	uxth	r3, r3
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	4613      	mov	r3, r2
 8006612:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006616:	2100      	movs	r1, #0
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f864 	bl	80066e6 <USBH_GetDescriptor>
 800661e:	4603      	mov	r3, r0
 8006620:	73fb      	strb	r3, [r7, #15]
 8006622:	7bfb      	ldrb	r3, [r7, #15]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10a      	bne.n	800663e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006634:	78fa      	ldrb	r2, [r7, #3]
 8006636:	b292      	uxth	r2, r2
 8006638:	4619      	mov	r1, r3
 800663a:	f000 f918 	bl	800686e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800663e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af02      	add	r7, sp, #8
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	460b      	mov	r3, r1
 8006652:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	331c      	adds	r3, #28
 8006658:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800665a:	887b      	ldrh	r3, [r7, #2]
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006664:	2100      	movs	r1, #0
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f83d 	bl	80066e6 <USBH_GetDescriptor>
 800666c:	4603      	mov	r3, r0
 800666e:	72fb      	strb	r3, [r7, #11]
 8006670:	7afb      	ldrb	r3, [r7, #11]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d107      	bne.n	8006686 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800667c:	887a      	ldrh	r2, [r7, #2]
 800667e:	68f9      	ldr	r1, [r7, #12]
 8006680:	4618      	mov	r0, r3
 8006682:	f000 f964 	bl	800694e <USBH_ParseCfgDesc>
  }

  return status;
 8006686:	7afb      	ldrb	r3, [r7, #11]
}
 8006688:	4618      	mov	r0, r3
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b088      	sub	sp, #32
 8006694:	af02      	add	r7, sp, #8
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	607a      	str	r2, [r7, #4]
 800669a:	461a      	mov	r2, r3
 800669c:	460b      	mov	r3, r1
 800669e:	72fb      	strb	r3, [r7, #11]
 80066a0:	4613      	mov	r3, r2
 80066a2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80066a4:	7afb      	ldrb	r3, [r7, #11]
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80066ac:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80066b4:	893b      	ldrh	r3, [r7, #8]
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	460b      	mov	r3, r1
 80066ba:	2100      	movs	r1, #0
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f000 f812 	bl	80066e6 <USBH_GetDescriptor>
 80066c2:	4603      	mov	r3, r0
 80066c4:	75fb      	strb	r3, [r7, #23]
 80066c6:	7dfb      	ldrb	r3, [r7, #23]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d107      	bne.n	80066dc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80066d2:	893a      	ldrh	r2, [r7, #8]
 80066d4:	6879      	ldr	r1, [r7, #4]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 fa37 	bl	8006b4a <USBH_ParseStringDesc>
  }

  return status;
 80066dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3718      	adds	r7, #24
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b084      	sub	sp, #16
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	60f8      	str	r0, [r7, #12]
 80066ee:	607b      	str	r3, [r7, #4]
 80066f0:	460b      	mov	r3, r1
 80066f2:	72fb      	strb	r3, [r7, #11]
 80066f4:	4613      	mov	r3, r2
 80066f6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	789b      	ldrb	r3, [r3, #2]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d11c      	bne.n	800673a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006700:	7afb      	ldrb	r3, [r7, #11]
 8006702:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006706:	b2da      	uxtb	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2206      	movs	r2, #6
 8006710:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	893a      	ldrh	r2, [r7, #8]
 8006716:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006718:	893b      	ldrh	r3, [r7, #8]
 800671a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800671e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006722:	d104      	bne.n	800672e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f240 4209 	movw	r2, #1033	; 0x409
 800672a:	829a      	strh	r2, [r3, #20]
 800672c:	e002      	b.n	8006734 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	8b3a      	ldrh	r2, [r7, #24]
 8006738:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800673a:	8b3b      	ldrh	r3, [r7, #24]
 800673c:	461a      	mov	r2, r3
 800673e:	6879      	ldr	r1, [r7, #4]
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f000 fa50 	bl	8006be6 <USBH_CtlReq>
 8006746:	4603      	mov	r3, r0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3710      	adds	r7, #16
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	460b      	mov	r3, r1
 800675a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	789b      	ldrb	r3, [r3, #2]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d10f      	bne.n	8006784 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2205      	movs	r2, #5
 800676e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006770:	78fb      	ldrb	r3, [r7, #3]
 8006772:	b29a      	uxth	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006784:	2200      	movs	r2, #0
 8006786:	2100      	movs	r1, #0
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 fa2c 	bl	8006be6 <USBH_CtlReq>
 800678e:	4603      	mov	r3, r0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3708      	adds	r7, #8
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	460b      	mov	r3, r1
 80067a2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	789b      	ldrb	r3, [r3, #2]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d10e      	bne.n	80067ca <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2209      	movs	r2, #9
 80067b6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	887a      	ldrh	r2, [r7, #2]
 80067bc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80067ca:	2200      	movs	r2, #0
 80067cc:	2100      	movs	r1, #0
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 fa09 	bl	8006be6 <USBH_CtlReq>
 80067d4:	4603      	mov	r3, r0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b082      	sub	sp, #8
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	460b      	mov	r3, r1
 80067e8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	789b      	ldrb	r3, [r3, #2]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d10f      	bne.n	8006812 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2203      	movs	r2, #3
 80067fc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80067fe:	78fb      	ldrb	r3, [r7, #3]
 8006800:	b29a      	uxth	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006812:	2200      	movs	r2, #0
 8006814:	2100      	movs	r1, #0
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f9e5 	bl	8006be6 <USBH_CtlReq>
 800681c:	4603      	mov	r3, r0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b082      	sub	sp, #8
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	460b      	mov	r3, r1
 8006830:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	789b      	ldrb	r3, [r3, #2]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d10f      	bne.n	800685a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2202      	movs	r2, #2
 800683e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800684c:	78fb      	ldrb	r3, [r7, #3]
 800684e:	b29a      	uxth	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800685a:	2200      	movs	r2, #0
 800685c:	2100      	movs	r1, #0
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f9c1 	bl	8006be6 <USBH_CtlReq>
 8006864:	4603      	mov	r3, r0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800686e:	b480      	push	{r7}
 8006870:	b085      	sub	sp, #20
 8006872:	af00      	add	r7, sp, #0
 8006874:	60f8      	str	r0, [r7, #12]
 8006876:	60b9      	str	r1, [r7, #8]
 8006878:	4613      	mov	r3, r2
 800687a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	781a      	ldrb	r2, [r3, #0]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	785a      	ldrb	r2, [r3, #1]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	3302      	adds	r3, #2
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	b29a      	uxth	r2, r3
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	3303      	adds	r3, #3
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	b29b      	uxth	r3, r3
 800689c:	021b      	lsls	r3, r3, #8
 800689e:	b29b      	uxth	r3, r3
 80068a0:	4313      	orrs	r3, r2
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	791a      	ldrb	r2, [r3, #4]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	795a      	ldrb	r2, [r3, #5]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	799a      	ldrb	r2, [r3, #6]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	79da      	ldrb	r2, [r3, #7]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80068c8:	88fb      	ldrh	r3, [r7, #6]
 80068ca:	2b08      	cmp	r3, #8
 80068cc:	d939      	bls.n	8006942 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	3308      	adds	r3, #8
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	3309      	adds	r3, #9
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	b29b      	uxth	r3, r3
 80068de:	021b      	lsls	r3, r3, #8
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	4313      	orrs	r3, r2
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	330a      	adds	r3, #10
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	330b      	adds	r3, #11
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	021b      	lsls	r3, r3, #8
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	4313      	orrs	r3, r2
 8006900:	b29a      	uxth	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	330c      	adds	r3, #12
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	b29a      	uxth	r2, r3
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	330d      	adds	r3, #13
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	b29b      	uxth	r3, r3
 8006916:	021b      	lsls	r3, r3, #8
 8006918:	b29b      	uxth	r3, r3
 800691a:	4313      	orrs	r3, r2
 800691c:	b29a      	uxth	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	7b9a      	ldrb	r2, [r3, #14]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	7bda      	ldrb	r2, [r3, #15]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	7c1a      	ldrb	r2, [r3, #16]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	7c5a      	ldrb	r2, [r3, #17]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	745a      	strb	r2, [r3, #17]
  }
}
 8006942:	bf00      	nop
 8006944:	3714      	adds	r7, #20
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b08a      	sub	sp, #40	; 0x28
 8006952:	af00      	add	r7, sp, #0
 8006954:	60f8      	str	r0, [r7, #12]
 8006956:	60b9      	str	r1, [r7, #8]
 8006958:	4613      	mov	r3, r2
 800695a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006960:	2300      	movs	r3, #0
 8006962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006966:	2300      	movs	r3, #0
 8006968:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	781a      	ldrb	r2, [r3, #0]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	785a      	ldrb	r2, [r3, #1]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	3302      	adds	r3, #2
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	b29a      	uxth	r2, r3
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	3303      	adds	r3, #3
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	b29b      	uxth	r3, r3
 8006990:	021b      	lsls	r3, r3, #8
 8006992:	b29b      	uxth	r3, r3
 8006994:	4313      	orrs	r3, r2
 8006996:	b29a      	uxth	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	791a      	ldrb	r2, [r3, #4]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	795a      	ldrb	r2, [r3, #5]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	799a      	ldrb	r2, [r3, #6]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	79da      	ldrb	r2, [r3, #7]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	7a1a      	ldrb	r2, [r3, #8]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80069c4:	88fb      	ldrh	r3, [r7, #6]
 80069c6:	2b09      	cmp	r3, #9
 80069c8:	d95f      	bls.n	8006a8a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80069ca:	2309      	movs	r3, #9
 80069cc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80069ce:	2300      	movs	r3, #0
 80069d0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80069d2:	e051      	b.n	8006a78 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80069d4:	f107 0316 	add.w	r3, r7, #22
 80069d8:	4619      	mov	r1, r3
 80069da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069dc:	f000 f8e8 	bl	8006bb0 <USBH_GetNextDesc>
 80069e0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80069e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e4:	785b      	ldrb	r3, [r3, #1]
 80069e6:	2b04      	cmp	r3, #4
 80069e8:	d146      	bne.n	8006a78 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80069ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069ee:	221a      	movs	r2, #26
 80069f0:	fb02 f303 	mul.w	r3, r2, r3
 80069f4:	3308      	adds	r3, #8
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	4413      	add	r3, r2
 80069fa:	3302      	adds	r3, #2
 80069fc:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80069fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a00:	69f8      	ldr	r0, [r7, #28]
 8006a02:	f000 f846 	bl	8006a92 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006a06:	2300      	movs	r3, #0
 8006a08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006a10:	e022      	b.n	8006a58 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006a12:	f107 0316 	add.w	r3, r7, #22
 8006a16:	4619      	mov	r1, r3
 8006a18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a1a:	f000 f8c9 	bl	8006bb0 <USBH_GetNextDesc>
 8006a1e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	785b      	ldrb	r3, [r3, #1]
 8006a24:	2b05      	cmp	r3, #5
 8006a26:	d117      	bne.n	8006a58 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006a28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a2c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006a30:	3201      	adds	r2, #1
 8006a32:	00d2      	lsls	r2, r2, #3
 8006a34:	211a      	movs	r1, #26
 8006a36:	fb01 f303 	mul.w	r3, r1, r3
 8006a3a:	4413      	add	r3, r2
 8006a3c:	3308      	adds	r3, #8
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	4413      	add	r3, r2
 8006a42:	3304      	adds	r3, #4
 8006a44:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006a46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a48:	69b8      	ldr	r0, [r7, #24]
 8006a4a:	f000 f851 	bl	8006af0 <USBH_ParseEPDesc>
            ep_ix++;
 8006a4e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006a52:	3301      	adds	r3, #1
 8006a54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	791b      	ldrb	r3, [r3, #4]
 8006a5c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d204      	bcs.n	8006a6e <USBH_ParseCfgDesc+0x120>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	885a      	ldrh	r2, [r3, #2]
 8006a68:	8afb      	ldrh	r3, [r7, #22]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d8d1      	bhi.n	8006a12 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006a6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a72:	3301      	adds	r3, #1
 8006a74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006a78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d804      	bhi.n	8006a8a <USBH_ParseCfgDesc+0x13c>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	885a      	ldrh	r2, [r3, #2]
 8006a84:	8afb      	ldrh	r3, [r7, #22]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d8a4      	bhi.n	80069d4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006a8a:	bf00      	nop
 8006a8c:	3728      	adds	r7, #40	; 0x28
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b083      	sub	sp, #12
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
 8006a9a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	781a      	ldrb	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	785a      	ldrb	r2, [r3, #1]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	789a      	ldrb	r2, [r3, #2]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	78da      	ldrb	r2, [r3, #3]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	791a      	ldrb	r2, [r3, #4]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	795a      	ldrb	r2, [r3, #5]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	799a      	ldrb	r2, [r3, #6]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	79da      	ldrb	r2, [r3, #7]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	7a1a      	ldrb	r2, [r3, #8]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	721a      	strb	r2, [r3, #8]
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	781a      	ldrb	r2, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	785a      	ldrb	r2, [r3, #1]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	789a      	ldrb	r2, [r3, #2]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	78da      	ldrb	r2, [r3, #3]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	3304      	adds	r3, #4
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	3305      	adds	r3, #5
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	021b      	lsls	r3, r3, #8
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	799a      	ldrb	r2, [r3, #6]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	719a      	strb	r2, [r3, #6]
}
 8006b3e:	bf00      	nop
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b087      	sub	sp, #28
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	60f8      	str	r0, [r7, #12]
 8006b52:	60b9      	str	r1, [r7, #8]
 8006b54:	4613      	mov	r3, r2
 8006b56:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	2b03      	cmp	r3, #3
 8006b60:	d120      	bne.n	8006ba4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	1e9a      	subs	r2, r3, #2
 8006b68:	88fb      	ldrh	r3, [r7, #6]
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	bf28      	it	cs
 8006b6e:	4613      	movcs	r3, r2
 8006b70:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	3302      	adds	r3, #2
 8006b76:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006b78:	2300      	movs	r3, #0
 8006b7a:	82fb      	strh	r3, [r7, #22]
 8006b7c:	e00b      	b.n	8006b96 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006b7e:	8afb      	ldrh	r3, [r7, #22]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	4413      	add	r3, r2
 8006b84:	781a      	ldrb	r2, [r3, #0]
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006b90:	8afb      	ldrh	r3, [r7, #22]
 8006b92:	3302      	adds	r3, #2
 8006b94:	82fb      	strh	r3, [r7, #22]
 8006b96:	8afa      	ldrh	r2, [r7, #22]
 8006b98:	8abb      	ldrh	r3, [r7, #20]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d3ef      	bcc.n	8006b7e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	701a      	strb	r2, [r3, #0]
  }
}
 8006ba4:	bf00      	nop
 8006ba6:	371c      	adds	r7, #28
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	881a      	ldrh	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	4413      	add	r3, r2
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b086      	sub	sp, #24
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	60f8      	str	r0, [r7, #12]
 8006bee:	60b9      	str	r1, [r7, #8]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	789b      	ldrb	r3, [r3, #2]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d002      	beq.n	8006c06 <USBH_CtlReq+0x20>
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d00f      	beq.n	8006c24 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006c04:	e027      	b.n	8006c56 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	88fa      	ldrh	r2, [r7, #6]
 8006c10:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2201      	movs	r2, #1
 8006c16:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	75fb      	strb	r3, [r7, #23]
      break;
 8006c22:	e018      	b.n	8006c56 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 f81b 	bl	8006c60 <USBH_HandleControl>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006c2e:	7dfb      	ldrb	r3, [r7, #23]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d002      	beq.n	8006c3a <USBH_CtlReq+0x54>
 8006c34:	7dfb      	ldrb	r3, [r7, #23]
 8006c36:	2b03      	cmp	r3, #3
 8006c38:	d106      	bne.n	8006c48 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	761a      	strb	r2, [r3, #24]
      break;
 8006c46:	e005      	b.n	8006c54 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d102      	bne.n	8006c54 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2201      	movs	r2, #1
 8006c52:	709a      	strb	r2, [r3, #2]
      break;
 8006c54:	bf00      	nop
  }
  return status;
 8006c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3718      	adds	r7, #24
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af02      	add	r7, sp, #8
 8006c66:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	7e1b      	ldrb	r3, [r3, #24]
 8006c74:	3b01      	subs	r3, #1
 8006c76:	2b0a      	cmp	r3, #10
 8006c78:	f200 8158 	bhi.w	8006f2c <USBH_HandleControl+0x2cc>
 8006c7c:	a201      	add	r2, pc, #4	; (adr r2, 8006c84 <USBH_HandleControl+0x24>)
 8006c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c82:	bf00      	nop
 8006c84:	08006cb1 	.word	0x08006cb1
 8006c88:	08006ccb 	.word	0x08006ccb
 8006c8c:	08006d35 	.word	0x08006d35
 8006c90:	08006d5b 	.word	0x08006d5b
 8006c94:	08006d93 	.word	0x08006d93
 8006c98:	08006dbf 	.word	0x08006dbf
 8006c9c:	08006e11 	.word	0x08006e11
 8006ca0:	08006e33 	.word	0x08006e33
 8006ca4:	08006e6f 	.word	0x08006e6f
 8006ca8:	08006e97 	.word	0x08006e97
 8006cac:	08006ed5 	.word	0x08006ed5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f103 0110 	add.w	r1, r3, #16
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	795b      	ldrb	r3, [r3, #5]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 f945 	bl	8006f4c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	761a      	strb	r2, [r3, #24]
      break;
 8006cc8:	e13b      	b.n	8006f42 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	795b      	ldrb	r3, [r3, #5]
 8006cce:	4619      	mov	r1, r3
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 fcc5 	bl	8007660 <USBH_LL_GetURBState>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006cda:	7bbb      	ldrb	r3, [r7, #14]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d11e      	bne.n	8006d1e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	7c1b      	ldrb	r3, [r3, #16]
 8006ce4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ce8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	8adb      	ldrh	r3, [r3, #22]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00a      	beq.n	8006d08 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006cf2:	7b7b      	ldrb	r3, [r7, #13]
 8006cf4:	2b80      	cmp	r3, #128	; 0x80
 8006cf6:	d103      	bne.n	8006d00 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2203      	movs	r2, #3
 8006cfc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006cfe:	e117      	b.n	8006f30 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2205      	movs	r2, #5
 8006d04:	761a      	strb	r2, [r3, #24]
      break;
 8006d06:	e113      	b.n	8006f30 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8006d08:	7b7b      	ldrb	r3, [r7, #13]
 8006d0a:	2b80      	cmp	r3, #128	; 0x80
 8006d0c:	d103      	bne.n	8006d16 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2209      	movs	r2, #9
 8006d12:	761a      	strb	r2, [r3, #24]
      break;
 8006d14:	e10c      	b.n	8006f30 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2207      	movs	r2, #7
 8006d1a:	761a      	strb	r2, [r3, #24]
      break;
 8006d1c:	e108      	b.n	8006f30 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006d1e:	7bbb      	ldrb	r3, [r7, #14]
 8006d20:	2b04      	cmp	r3, #4
 8006d22:	d003      	beq.n	8006d2c <USBH_HandleControl+0xcc>
 8006d24:	7bbb      	ldrb	r3, [r7, #14]
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	f040 8102 	bne.w	8006f30 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	220b      	movs	r2, #11
 8006d30:	761a      	strb	r2, [r3, #24]
      break;
 8006d32:	e0fd      	b.n	8006f30 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6899      	ldr	r1, [r3, #8]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	899a      	ldrh	r2, [r3, #12]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	791b      	ldrb	r3, [r3, #4]
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f93c 	bl	8006fca <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2204      	movs	r2, #4
 8006d56:	761a      	strb	r2, [r3, #24]
      break;
 8006d58:	e0f3      	b.n	8006f42 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	791b      	ldrb	r3, [r3, #4]
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fc7d 	bl	8007660 <USBH_LL_GetURBState>
 8006d66:	4603      	mov	r3, r0
 8006d68:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006d6a:	7bbb      	ldrb	r3, [r7, #14]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d102      	bne.n	8006d76 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2209      	movs	r2, #9
 8006d74:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006d76:	7bbb      	ldrb	r3, [r7, #14]
 8006d78:	2b05      	cmp	r3, #5
 8006d7a:	d102      	bne.n	8006d82 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006d80:	e0d8      	b.n	8006f34 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006d82:	7bbb      	ldrb	r3, [r7, #14]
 8006d84:	2b04      	cmp	r3, #4
 8006d86:	f040 80d5 	bne.w	8006f34 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	220b      	movs	r2, #11
 8006d8e:	761a      	strb	r2, [r3, #24]
      break;
 8006d90:	e0d0      	b.n	8006f34 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6899      	ldr	r1, [r3, #8]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	899a      	ldrh	r2, [r3, #12]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	7958      	ldrb	r0, [r3, #5]
 8006d9e:	2301      	movs	r3, #1
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	4603      	mov	r3, r0
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 f8eb 	bl	8006f80 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2206      	movs	r2, #6
 8006dba:	761a      	strb	r2, [r3, #24]
      break;
 8006dbc:	e0c1      	b.n	8006f42 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	795b      	ldrb	r3, [r3, #5]
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 fc4b 	bl	8007660 <USBH_LL_GetURBState>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006dce:	7bbb      	ldrb	r3, [r7, #14]
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d103      	bne.n	8006ddc <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2207      	movs	r2, #7
 8006dd8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006dda:	e0ad      	b.n	8006f38 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8006ddc:	7bbb      	ldrb	r3, [r7, #14]
 8006dde:	2b05      	cmp	r3, #5
 8006de0:	d105      	bne.n	8006dee <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	220c      	movs	r2, #12
 8006de6:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006de8:	2303      	movs	r3, #3
 8006dea:	73fb      	strb	r3, [r7, #15]
      break;
 8006dec:	e0a4      	b.n	8006f38 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006dee:	7bbb      	ldrb	r3, [r7, #14]
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d103      	bne.n	8006dfc <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2205      	movs	r2, #5
 8006df8:	761a      	strb	r2, [r3, #24]
      break;
 8006dfa:	e09d      	b.n	8006f38 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8006dfc:	7bbb      	ldrb	r3, [r7, #14]
 8006dfe:	2b04      	cmp	r3, #4
 8006e00:	f040 809a 	bne.w	8006f38 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	220b      	movs	r2, #11
 8006e08:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	73fb      	strb	r3, [r7, #15]
      break;
 8006e0e:	e093      	b.n	8006f38 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	791b      	ldrb	r3, [r3, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	2100      	movs	r1, #0
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f8d6 	bl	8006fca <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2208      	movs	r2, #8
 8006e2e:	761a      	strb	r2, [r3, #24]

      break;
 8006e30:	e087      	b.n	8006f42 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	791b      	ldrb	r3, [r3, #4]
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 fc11 	bl	8007660 <USBH_LL_GetURBState>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006e42:	7bbb      	ldrb	r3, [r7, #14]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d105      	bne.n	8006e54 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	220d      	movs	r2, #13
 8006e4c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006e52:	e073      	b.n	8006f3c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8006e54:	7bbb      	ldrb	r3, [r7, #14]
 8006e56:	2b04      	cmp	r3, #4
 8006e58:	d103      	bne.n	8006e62 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	220b      	movs	r2, #11
 8006e5e:	761a      	strb	r2, [r3, #24]
      break;
 8006e60:	e06c      	b.n	8006f3c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8006e62:	7bbb      	ldrb	r3, [r7, #14]
 8006e64:	2b05      	cmp	r3, #5
 8006e66:	d169      	bne.n	8006f3c <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e6c:	e066      	b.n	8006f3c <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	795a      	ldrb	r2, [r3, #5]
 8006e72:	2301      	movs	r3, #1
 8006e74:	9300      	str	r3, [sp, #0]
 8006e76:	4613      	mov	r3, r2
 8006e78:	2200      	movs	r2, #0
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f87f 	bl	8006f80 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	220a      	movs	r2, #10
 8006e92:	761a      	strb	r2, [r3, #24]
      break;
 8006e94:	e055      	b.n	8006f42 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	795b      	ldrb	r3, [r3, #5]
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fbdf 	bl	8007660 <USBH_LL_GetURBState>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006ea6:	7bbb      	ldrb	r3, [r7, #14]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d105      	bne.n	8006eb8 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8006eac:	2300      	movs	r3, #0
 8006eae:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	220d      	movs	r2, #13
 8006eb4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006eb6:	e043      	b.n	8006f40 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006eb8:	7bbb      	ldrb	r3, [r7, #14]
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d103      	bne.n	8006ec6 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2209      	movs	r2, #9
 8006ec2:	761a      	strb	r2, [r3, #24]
      break;
 8006ec4:	e03c      	b.n	8006f40 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8006ec6:	7bbb      	ldrb	r3, [r7, #14]
 8006ec8:	2b04      	cmp	r3, #4
 8006eca:	d139      	bne.n	8006f40 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	220b      	movs	r2, #11
 8006ed0:	761a      	strb	r2, [r3, #24]
      break;
 8006ed2:	e035      	b.n	8006f40 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	7e5b      	ldrb	r3, [r3, #25]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	765a      	strb	r2, [r3, #25]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	7e5b      	ldrb	r3, [r3, #25]
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d806      	bhi.n	8006ef6 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006ef4:	e025      	b.n	8006f42 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006efc:	2106      	movs	r1, #6
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	795b      	ldrb	r3, [r3, #5]
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f90c 	bl	800712c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	791b      	ldrb	r3, [r3, #4]
 8006f18:	4619      	mov	r1, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 f906 	bl	800712c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006f26:	2302      	movs	r3, #2
 8006f28:	73fb      	strb	r3, [r7, #15]
      break;
 8006f2a:	e00a      	b.n	8006f42 <USBH_HandleControl+0x2e2>

    default:
      break;
 8006f2c:	bf00      	nop
 8006f2e:	e008      	b.n	8006f42 <USBH_HandleControl+0x2e2>
      break;
 8006f30:	bf00      	nop
 8006f32:	e006      	b.n	8006f42 <USBH_HandleControl+0x2e2>
      break;
 8006f34:	bf00      	nop
 8006f36:	e004      	b.n	8006f42 <USBH_HandleControl+0x2e2>
      break;
 8006f38:	bf00      	nop
 8006f3a:	e002      	b.n	8006f42 <USBH_HandleControl+0x2e2>
      break;
 8006f3c:	bf00      	nop
 8006f3e:	e000      	b.n	8006f42 <USBH_HandleControl+0x2e2>
      break;
 8006f40:	bf00      	nop
  }

  return status;
 8006f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b088      	sub	sp, #32
 8006f50:	af04      	add	r7, sp, #16
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	4613      	mov	r3, r2
 8006f58:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006f5a:	79f9      	ldrb	r1, [r7, #7]
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	9303      	str	r3, [sp, #12]
 8006f60:	2308      	movs	r3, #8
 8006f62:	9302      	str	r3, [sp, #8]
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	9301      	str	r3, [sp, #4]
 8006f68:	2300      	movs	r3, #0
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	2200      	movs	r2, #0
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f000 fb44 	bl	80075fe <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b088      	sub	sp, #32
 8006f84:	af04      	add	r7, sp, #16
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	4611      	mov	r1, r2
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	460b      	mov	r3, r1
 8006f90:	80fb      	strh	r3, [r7, #6]
 8006f92:	4613      	mov	r3, r2
 8006f94:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d001      	beq.n	8006fa4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006fa4:	7979      	ldrb	r1, [r7, #5]
 8006fa6:	7e3b      	ldrb	r3, [r7, #24]
 8006fa8:	9303      	str	r3, [sp, #12]
 8006faa:	88fb      	ldrh	r3, [r7, #6]
 8006fac:	9302      	str	r3, [sp, #8]
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	9301      	str	r3, [sp, #4]
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	2200      	movs	r2, #0
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f000 fb1f 	bl	80075fe <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b088      	sub	sp, #32
 8006fce:	af04      	add	r7, sp, #16
 8006fd0:	60f8      	str	r0, [r7, #12]
 8006fd2:	60b9      	str	r1, [r7, #8]
 8006fd4:	4611      	mov	r1, r2
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	460b      	mov	r3, r1
 8006fda:	80fb      	strh	r3, [r7, #6]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006fe0:	7979      	ldrb	r1, [r7, #5]
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	9303      	str	r3, [sp, #12]
 8006fe6:	88fb      	ldrh	r3, [r7, #6]
 8006fe8:	9302      	str	r3, [sp, #8]
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	9301      	str	r3, [sp, #4]
 8006fee:	2301      	movs	r3, #1
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f000 fb01 	bl	80075fe <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8006ffc:	2300      	movs	r3, #0

}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b088      	sub	sp, #32
 800700a:	af04      	add	r7, sp, #16
 800700c:	60f8      	str	r0, [r7, #12]
 800700e:	60b9      	str	r1, [r7, #8]
 8007010:	4611      	mov	r1, r2
 8007012:	461a      	mov	r2, r3
 8007014:	460b      	mov	r3, r1
 8007016:	80fb      	strh	r3, [r7, #6]
 8007018:	4613      	mov	r3, r2
 800701a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007022:	2b00      	cmp	r3, #0
 8007024:	d001      	beq.n	800702a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007026:	2300      	movs	r3, #0
 8007028:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800702a:	7979      	ldrb	r1, [r7, #5]
 800702c:	7e3b      	ldrb	r3, [r7, #24]
 800702e:	9303      	str	r3, [sp, #12]
 8007030:	88fb      	ldrh	r3, [r7, #6]
 8007032:	9302      	str	r3, [sp, #8]
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	9301      	str	r3, [sp, #4]
 8007038:	2301      	movs	r3, #1
 800703a:	9300      	str	r3, [sp, #0]
 800703c:	2302      	movs	r3, #2
 800703e:	2200      	movs	r2, #0
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f000 fadc 	bl	80075fe <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	3710      	adds	r7, #16
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b088      	sub	sp, #32
 8007054:	af04      	add	r7, sp, #16
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	4611      	mov	r1, r2
 800705c:	461a      	mov	r2, r3
 800705e:	460b      	mov	r3, r1
 8007060:	80fb      	strh	r3, [r7, #6]
 8007062:	4613      	mov	r3, r2
 8007064:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007066:	7979      	ldrb	r1, [r7, #5]
 8007068:	2300      	movs	r3, #0
 800706a:	9303      	str	r3, [sp, #12]
 800706c:	88fb      	ldrh	r3, [r7, #6]
 800706e:	9302      	str	r3, [sp, #8]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	9301      	str	r3, [sp, #4]
 8007074:	2301      	movs	r3, #1
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	2302      	movs	r3, #2
 800707a:	2201      	movs	r2, #1
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f000 fabe 	bl	80075fe <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b086      	sub	sp, #24
 8007090:	af04      	add	r7, sp, #16
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	4608      	mov	r0, r1
 8007096:	4611      	mov	r1, r2
 8007098:	461a      	mov	r2, r3
 800709a:	4603      	mov	r3, r0
 800709c:	70fb      	strb	r3, [r7, #3]
 800709e:	460b      	mov	r3, r1
 80070a0:	70bb      	strb	r3, [r7, #2]
 80070a2:	4613      	mov	r3, r2
 80070a4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80070a6:	7878      	ldrb	r0, [r7, #1]
 80070a8:	78ba      	ldrb	r2, [r7, #2]
 80070aa:	78f9      	ldrb	r1, [r7, #3]
 80070ac:	8b3b      	ldrh	r3, [r7, #24]
 80070ae:	9302      	str	r3, [sp, #8]
 80070b0:	7d3b      	ldrb	r3, [r7, #20]
 80070b2:	9301      	str	r3, [sp, #4]
 80070b4:	7c3b      	ldrb	r3, [r7, #16]
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	4603      	mov	r3, r0
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fa51 	bl	8007562 <USBH_LL_OpenPipe>

  return USBH_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3708      	adds	r7, #8
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b082      	sub	sp, #8
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
 80070d2:	460b      	mov	r3, r1
 80070d4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80070d6:	78fb      	ldrb	r3, [r7, #3]
 80070d8:	4619      	mov	r1, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fa70 	bl	80075c0 <USBH_LL_ClosePipe>

  return USBH_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b084      	sub	sp, #16
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
 80070f2:	460b      	mov	r3, r1
 80070f4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f836 	bl	8007168 <USBH_GetFreePipe>
 80070fc:	4603      	mov	r3, r0
 80070fe:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007100:	89fb      	ldrh	r3, [r7, #14]
 8007102:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007106:	4293      	cmp	r3, r2
 8007108:	d00a      	beq.n	8007120 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800710a:	78fa      	ldrb	r2, [r7, #3]
 800710c:	89fb      	ldrh	r3, [r7, #14]
 800710e:	f003 030f 	and.w	r3, r3, #15
 8007112:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007116:	6879      	ldr	r1, [r7, #4]
 8007118:	33e0      	adds	r3, #224	; 0xe0
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	440b      	add	r3, r1
 800711e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007120:	89fb      	ldrh	r3, [r7, #14]
 8007122:	b2db      	uxtb	r3, r3
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	460b      	mov	r3, r1
 8007136:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007138:	78fb      	ldrb	r3, [r7, #3]
 800713a:	2b0a      	cmp	r3, #10
 800713c:	d80d      	bhi.n	800715a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800713e:	78fb      	ldrb	r3, [r7, #3]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	33e0      	adds	r3, #224	; 0xe0
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	685a      	ldr	r2, [r3, #4]
 800714a:	78fb      	ldrb	r3, [r7, #3]
 800714c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007150:	6879      	ldr	r1, [r7, #4]
 8007152:	33e0      	adds	r3, #224	; 0xe0
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	440b      	add	r3, r1
 8007158:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007170:	2300      	movs	r3, #0
 8007172:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007174:	2300      	movs	r3, #0
 8007176:	73fb      	strb	r3, [r7, #15]
 8007178:	e00f      	b.n	800719a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800717a:	7bfb      	ldrb	r3, [r7, #15]
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	33e0      	adds	r3, #224	; 0xe0
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4413      	add	r3, r2
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d102      	bne.n	8007194 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800718e:	7bfb      	ldrb	r3, [r7, #15]
 8007190:	b29b      	uxth	r3, r3
 8007192:	e007      	b.n	80071a4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007194:	7bfb      	ldrb	r3, [r7, #15]
 8007196:	3301      	adds	r3, #1
 8007198:	73fb      	strb	r3, [r7, #15]
 800719a:	7bfb      	ldrb	r3, [r7, #15]
 800719c:	2b0a      	cmp	r3, #10
 800719e:	d9ec      	bls.n	800717a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80071a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3714      	adds	r7, #20
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80071b4:	2201      	movs	r2, #1
 80071b6:	490e      	ldr	r1, [pc, #56]	; (80071f0 <MX_USB_HOST_Init+0x40>)
 80071b8:	480e      	ldr	r0, [pc, #56]	; (80071f4 <MX_USB_HOST_Init+0x44>)
 80071ba:	f7fe fc9f 	bl	8005afc <USBH_Init>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d001      	beq.n	80071c8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80071c4:	f7f9 fbb2 	bl	800092c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80071c8:	490b      	ldr	r1, [pc, #44]	; (80071f8 <MX_USB_HOST_Init+0x48>)
 80071ca:	480a      	ldr	r0, [pc, #40]	; (80071f4 <MX_USB_HOST_Init+0x44>)
 80071cc:	f7fe fd24 	bl	8005c18 <USBH_RegisterClass>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80071d6:	f7f9 fba9 	bl	800092c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80071da:	4806      	ldr	r0, [pc, #24]	; (80071f4 <MX_USB_HOST_Init+0x44>)
 80071dc:	f7fe fda8 	bl	8005d30 <USBH_Start>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d001      	beq.n	80071ea <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80071e6:	f7f9 fba1 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80071ea:	bf00      	nop
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	08007211 	.word	0x08007211
 80071f4:	200001b8 	.word	0x200001b8
 80071f8:	2000000c 	.word	0x2000000c

080071fc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007200:	4802      	ldr	r0, [pc, #8]	; (800720c <MX_USB_HOST_Process+0x10>)
 8007202:	f7fe fda5 	bl	8005d50 <USBH_Process>
}
 8007206:	bf00      	nop
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	200001b8 	.word	0x200001b8

08007210 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	460b      	mov	r3, r1
 800721a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800721c:	78fb      	ldrb	r3, [r7, #3]
 800721e:	3b01      	subs	r3, #1
 8007220:	2b04      	cmp	r3, #4
 8007222:	d819      	bhi.n	8007258 <USBH_UserProcess+0x48>
 8007224:	a201      	add	r2, pc, #4	; (adr r2, 800722c <USBH_UserProcess+0x1c>)
 8007226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722a:	bf00      	nop
 800722c:	08007259 	.word	0x08007259
 8007230:	08007249 	.word	0x08007249
 8007234:	08007259 	.word	0x08007259
 8007238:	08007251 	.word	0x08007251
 800723c:	08007241 	.word	0x08007241
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007240:	4b09      	ldr	r3, [pc, #36]	; (8007268 <USBH_UserProcess+0x58>)
 8007242:	2203      	movs	r2, #3
 8007244:	701a      	strb	r2, [r3, #0]
  break;
 8007246:	e008      	b.n	800725a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007248:	4b07      	ldr	r3, [pc, #28]	; (8007268 <USBH_UserProcess+0x58>)
 800724a:	2202      	movs	r2, #2
 800724c:	701a      	strb	r2, [r3, #0]
  break;
 800724e:	e004      	b.n	800725a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007250:	4b05      	ldr	r3, [pc, #20]	; (8007268 <USBH_UserProcess+0x58>)
 8007252:	2201      	movs	r2, #1
 8007254:	701a      	strb	r2, [r3, #0]
  break;
 8007256:	e000      	b.n	800725a <USBH_UserProcess+0x4a>

  default:
  break;
 8007258:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800725a:	bf00      	nop
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	200000b4 	.word	0x200000b4

0800726c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b08a      	sub	sp, #40	; 0x28
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007274:	f107 0314 	add.w	r3, r7, #20
 8007278:	2200      	movs	r2, #0
 800727a:	601a      	str	r2, [r3, #0]
 800727c:	605a      	str	r2, [r3, #4]
 800727e:	609a      	str	r2, [r3, #8]
 8007280:	60da      	str	r2, [r3, #12]
 8007282:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800728c:	d147      	bne.n	800731e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800728e:	2300      	movs	r3, #0
 8007290:	613b      	str	r3, [r7, #16]
 8007292:	4b25      	ldr	r3, [pc, #148]	; (8007328 <HAL_HCD_MspInit+0xbc>)
 8007294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007296:	4a24      	ldr	r2, [pc, #144]	; (8007328 <HAL_HCD_MspInit+0xbc>)
 8007298:	f043 0301 	orr.w	r3, r3, #1
 800729c:	6313      	str	r3, [r2, #48]	; 0x30
 800729e:	4b22      	ldr	r3, [pc, #136]	; (8007328 <HAL_HCD_MspInit+0xbc>)
 80072a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a2:	f003 0301 	and.w	r3, r3, #1
 80072a6:	613b      	str	r3, [r7, #16]
 80072a8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80072aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80072b0:	2300      	movs	r3, #0
 80072b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072b4:	2300      	movs	r3, #0
 80072b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80072b8:	f107 0314 	add.w	r3, r7, #20
 80072bc:	4619      	mov	r1, r3
 80072be:	481b      	ldr	r0, [pc, #108]	; (800732c <HAL_HCD_MspInit+0xc0>)
 80072c0:	f7f9 fea8 	bl	8001014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80072c4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80072c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072ca:	2302      	movs	r3, #2
 80072cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072ce:	2300      	movs	r3, #0
 80072d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072d2:	2300      	movs	r3, #0
 80072d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80072d6:	230a      	movs	r3, #10
 80072d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072da:	f107 0314 	add.w	r3, r7, #20
 80072de:	4619      	mov	r1, r3
 80072e0:	4812      	ldr	r0, [pc, #72]	; (800732c <HAL_HCD_MspInit+0xc0>)
 80072e2:	f7f9 fe97 	bl	8001014 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80072e6:	4b10      	ldr	r3, [pc, #64]	; (8007328 <HAL_HCD_MspInit+0xbc>)
 80072e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ea:	4a0f      	ldr	r2, [pc, #60]	; (8007328 <HAL_HCD_MspInit+0xbc>)
 80072ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072f0:	6353      	str	r3, [r2, #52]	; 0x34
 80072f2:	2300      	movs	r3, #0
 80072f4:	60fb      	str	r3, [r7, #12]
 80072f6:	4b0c      	ldr	r3, [pc, #48]	; (8007328 <HAL_HCD_MspInit+0xbc>)
 80072f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072fa:	4a0b      	ldr	r2, [pc, #44]	; (8007328 <HAL_HCD_MspInit+0xbc>)
 80072fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007300:	6453      	str	r3, [r2, #68]	; 0x44
 8007302:	4b09      	ldr	r3, [pc, #36]	; (8007328 <HAL_HCD_MspInit+0xbc>)
 8007304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800730a:	60fb      	str	r3, [r7, #12]
 800730c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800730e:	2200      	movs	r2, #0
 8007310:	2100      	movs	r1, #0
 8007312:	2043      	movs	r0, #67	; 0x43
 8007314:	f7f9 fe47 	bl	8000fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007318:	2043      	movs	r0, #67	; 0x43
 800731a:	f7f9 fe60 	bl	8000fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800731e:	bf00      	nop
 8007320:	3728      	adds	r7, #40	; 0x28
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	40023800 	.word	0x40023800
 800732c:	40020000 	.word	0x40020000

08007330 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800733e:	4618      	mov	r0, r3
 8007340:	f7ff f8d9 	bl	80064f6 <USBH_LL_IncTimer>
}
 8007344:	bf00      	nop
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800735a:	4618      	mov	r0, r3
 800735c:	f7ff f911 	bl	8006582 <USBH_LL_Connect>
}
 8007360:	bf00      	nop
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007376:	4618      	mov	r0, r3
 8007378:	f7ff f91a 	bl	80065b0 <USBH_LL_Disconnect>
}
 800737c:	bf00      	nop
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	460b      	mov	r3, r1
 800738e:	70fb      	strb	r3, [r7, #3]
 8007390:	4613      	mov	r3, r2
 8007392:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7ff f8cb 	bl	800654a <USBH_LL_PortEnabled>
}
 80073b4:	bf00      	nop
 80073b6:	3708      	adds	r7, #8
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7ff f8cb 	bl	8006566 <USBH_LL_PortDisabled>
}
 80073d0:	bf00      	nop
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d12a      	bne.n	8007440 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80073ea:	4a18      	ldr	r2, [pc, #96]	; (800744c <USBH_LL_Init+0x74>)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a15      	ldr	r2, [pc, #84]	; (800744c <USBH_LL_Init+0x74>)
 80073f6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80073fa:	4b14      	ldr	r3, [pc, #80]	; (800744c <USBH_LL_Init+0x74>)
 80073fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007400:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007402:	4b12      	ldr	r3, [pc, #72]	; (800744c <USBH_LL_Init+0x74>)
 8007404:	2208      	movs	r2, #8
 8007406:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007408:	4b10      	ldr	r3, [pc, #64]	; (800744c <USBH_LL_Init+0x74>)
 800740a:	2201      	movs	r2, #1
 800740c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800740e:	4b0f      	ldr	r3, [pc, #60]	; (800744c <USBH_LL_Init+0x74>)
 8007410:	2200      	movs	r2, #0
 8007412:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007414:	4b0d      	ldr	r3, [pc, #52]	; (800744c <USBH_LL_Init+0x74>)
 8007416:	2202      	movs	r2, #2
 8007418:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800741a:	4b0c      	ldr	r3, [pc, #48]	; (800744c <USBH_LL_Init+0x74>)
 800741c:	2200      	movs	r2, #0
 800741e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007420:	480a      	ldr	r0, [pc, #40]	; (800744c <USBH_LL_Init+0x74>)
 8007422:	f7f9 ffc5 	bl	80013b0 <HAL_HCD_Init>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d001      	beq.n	8007430 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800742c:	f7f9 fa7e 	bl	800092c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007430:	4806      	ldr	r0, [pc, #24]	; (800744c <USBH_LL_Init+0x74>)
 8007432:	f7fa fbc9 	bl	8001bc8 <HAL_HCD_GetCurrentFrame>
 8007436:	4603      	mov	r3, r0
 8007438:	4619      	mov	r1, r3
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f7ff f84c 	bl	80064d8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	20000590 	.word	0x20000590

08007450 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007458:	2300      	movs	r3, #0
 800745a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800745c:	2300      	movs	r3, #0
 800745e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007466:	4618      	mov	r0, r3
 8007468:	f7fa fb36 	bl	8001ad8 <HAL_HCD_Start>
 800746c:	4603      	mov	r3, r0
 800746e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007470:	7bfb      	ldrb	r3, [r7, #15]
 8007472:	4618      	mov	r0, r3
 8007474:	f000 f95c 	bl	8007730 <USBH_Get_USB_Status>
 8007478:	4603      	mov	r3, r0
 800747a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800747c:	7bbb      	ldrb	r3, [r7, #14]
}
 800747e:	4618      	mov	r0, r3
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b084      	sub	sp, #16
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800748e:	2300      	movs	r3, #0
 8007490:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007492:	2300      	movs	r3, #0
 8007494:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800749c:	4618      	mov	r0, r3
 800749e:	f7fa fb3e 	bl	8001b1e <HAL_HCD_Stop>
 80074a2:	4603      	mov	r3, r0
 80074a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80074a6:	7bfb      	ldrb	r3, [r7, #15]
 80074a8:	4618      	mov	r0, r3
 80074aa:	f000 f941 	bl	8007730 <USBH_Get_USB_Status>
 80074ae:	4603      	mov	r3, r0
 80074b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80074c4:	2301      	movs	r3, #1
 80074c6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7fa fb88 	bl	8001be4 <HAL_HCD_GetCurrentSpeed>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d007      	beq.n	80074ea <USBH_LL_GetSpeed+0x2e>
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d302      	bcc.n	80074e4 <USBH_LL_GetSpeed+0x28>
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d006      	beq.n	80074f0 <USBH_LL_GetSpeed+0x34>
 80074e2:	e008      	b.n	80074f6 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80074e4:	2300      	movs	r3, #0
 80074e6:	73fb      	strb	r3, [r7, #15]
    break;
 80074e8:	e008      	b.n	80074fc <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80074ea:	2301      	movs	r3, #1
 80074ec:	73fb      	strb	r3, [r7, #15]
    break;
 80074ee:	e005      	b.n	80074fc <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80074f0:	2302      	movs	r3, #2
 80074f2:	73fb      	strb	r3, [r7, #15]
    break;
 80074f4:	e002      	b.n	80074fc <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80074f6:	2301      	movs	r3, #1
 80074f8:	73fb      	strb	r3, [r7, #15]
    break;
 80074fa:	bf00      	nop
  }
  return  speed;
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b084      	sub	sp, #16
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800750e:	2300      	movs	r3, #0
 8007510:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800751c:	4618      	mov	r0, r3
 800751e:	f7fa fb1b 	bl	8001b58 <HAL_HCD_ResetPort>
 8007522:	4603      	mov	r3, r0
 8007524:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007526:	7bfb      	ldrb	r3, [r7, #15]
 8007528:	4618      	mov	r0, r3
 800752a:	f000 f901 	bl	8007730 <USBH_Get_USB_Status>
 800752e:	4603      	mov	r3, r0
 8007530:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007532:	7bbb      	ldrb	r3, [r7, #14]
}
 8007534:	4618      	mov	r0, r3
 8007536:	3710      	adds	r7, #16
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	460b      	mov	r3, r1
 8007546:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800754e:	78fa      	ldrb	r2, [r7, #3]
 8007550:	4611      	mov	r1, r2
 8007552:	4618      	mov	r0, r3
 8007554:	f7fa fb23 	bl	8001b9e <HAL_HCD_HC_GetXferCount>
 8007558:	4603      	mov	r3, r0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3708      	adds	r7, #8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007562:	b590      	push	{r4, r7, lr}
 8007564:	b089      	sub	sp, #36	; 0x24
 8007566:	af04      	add	r7, sp, #16
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	4608      	mov	r0, r1
 800756c:	4611      	mov	r1, r2
 800756e:	461a      	mov	r2, r3
 8007570:	4603      	mov	r3, r0
 8007572:	70fb      	strb	r3, [r7, #3]
 8007574:	460b      	mov	r3, r1
 8007576:	70bb      	strb	r3, [r7, #2]
 8007578:	4613      	mov	r3, r2
 800757a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800757c:	2300      	movs	r3, #0
 800757e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007580:	2300      	movs	r3, #0
 8007582:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800758a:	787c      	ldrb	r4, [r7, #1]
 800758c:	78ba      	ldrb	r2, [r7, #2]
 800758e:	78f9      	ldrb	r1, [r7, #3]
 8007590:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007592:	9302      	str	r3, [sp, #8]
 8007594:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007598:	9301      	str	r3, [sp, #4]
 800759a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	4623      	mov	r3, r4
 80075a2:	f7f9 ff67 	bl	8001474 <HAL_HCD_HC_Init>
 80075a6:	4603      	mov	r3, r0
 80075a8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80075aa:	7bfb      	ldrb	r3, [r7, #15]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f000 f8bf 	bl	8007730 <USBH_Get_USB_Status>
 80075b2:	4603      	mov	r3, r0
 80075b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3714      	adds	r7, #20
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd90      	pop	{r4, r7, pc}

080075c0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	460b      	mov	r3, r1
 80075ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075cc:	2300      	movs	r3, #0
 80075ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80075d0:	2300      	movs	r3, #0
 80075d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80075da:	78fa      	ldrb	r2, [r7, #3]
 80075dc:	4611      	mov	r1, r2
 80075de:	4618      	mov	r0, r3
 80075e0:	f7f9 ffe0 	bl	80015a4 <HAL_HCD_HC_Halt>
 80075e4:	4603      	mov	r3, r0
 80075e6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 f8a0 	bl	8007730 <USBH_Get_USB_Status>
 80075f0:	4603      	mov	r3, r0
 80075f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80075fe:	b590      	push	{r4, r7, lr}
 8007600:	b089      	sub	sp, #36	; 0x24
 8007602:	af04      	add	r7, sp, #16
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	4608      	mov	r0, r1
 8007608:	4611      	mov	r1, r2
 800760a:	461a      	mov	r2, r3
 800760c:	4603      	mov	r3, r0
 800760e:	70fb      	strb	r3, [r7, #3]
 8007610:	460b      	mov	r3, r1
 8007612:	70bb      	strb	r3, [r7, #2]
 8007614:	4613      	mov	r3, r2
 8007616:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007618:	2300      	movs	r3, #0
 800761a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800761c:	2300      	movs	r3, #0
 800761e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007626:	787c      	ldrb	r4, [r7, #1]
 8007628:	78ba      	ldrb	r2, [r7, #2]
 800762a:	78f9      	ldrb	r1, [r7, #3]
 800762c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007630:	9303      	str	r3, [sp, #12]
 8007632:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007634:	9302      	str	r3, [sp, #8]
 8007636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007638:	9301      	str	r3, [sp, #4]
 800763a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800763e:	9300      	str	r3, [sp, #0]
 8007640:	4623      	mov	r3, r4
 8007642:	f7f9 ffd3 	bl	80015ec <HAL_HCD_HC_SubmitRequest>
 8007646:	4603      	mov	r3, r0
 8007648:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800764a:	7bfb      	ldrb	r3, [r7, #15]
 800764c:	4618      	mov	r0, r3
 800764e:	f000 f86f 	bl	8007730 <USBH_Get_USB_Status>
 8007652:	4603      	mov	r3, r0
 8007654:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007656:	7bbb      	ldrb	r3, [r7, #14]
}
 8007658:	4618      	mov	r0, r3
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	bd90      	pop	{r4, r7, pc}

08007660 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	460b      	mov	r3, r1
 800766a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007672:	78fa      	ldrb	r2, [r7, #3]
 8007674:	4611      	mov	r1, r2
 8007676:	4618      	mov	r0, r3
 8007678:	f7fa fa7c 	bl	8001b74 <HAL_HCD_HC_GetURBState>
 800767c:	4603      	mov	r3, r0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b082      	sub	sp, #8
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	460b      	mov	r3, r1
 8007690:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007698:	2b01      	cmp	r3, #1
 800769a:	d103      	bne.n	80076a4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800769c:	78fb      	ldrb	r3, [r7, #3]
 800769e:	4618      	mov	r0, r3
 80076a0:	f000 f872 	bl	8007788 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80076a4:	20c8      	movs	r0, #200	; 0xc8
 80076a6:	f7f9 fb81 	bl	8000dac <HAL_Delay>
  return USBH_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3708      	adds	r7, #8
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	460b      	mov	r3, r1
 80076be:	70fb      	strb	r3, [r7, #3]
 80076c0:	4613      	mov	r3, r2
 80076c2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80076ca:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80076cc:	78fa      	ldrb	r2, [r7, #3]
 80076ce:	68f9      	ldr	r1, [r7, #12]
 80076d0:	4613      	mov	r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4413      	add	r3, r2
 80076d6:	00db      	lsls	r3, r3, #3
 80076d8:	440b      	add	r3, r1
 80076da:	333b      	adds	r3, #59	; 0x3b
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00a      	beq.n	80076f8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80076e2:	78fa      	ldrb	r2, [r7, #3]
 80076e4:	68f9      	ldr	r1, [r7, #12]
 80076e6:	4613      	mov	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	4413      	add	r3, r2
 80076ec:	00db      	lsls	r3, r3, #3
 80076ee:	440b      	add	r3, r1
 80076f0:	3350      	adds	r3, #80	; 0x50
 80076f2:	78ba      	ldrb	r2, [r7, #2]
 80076f4:	701a      	strb	r2, [r3, #0]
 80076f6:	e009      	b.n	800770c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80076f8:	78fa      	ldrb	r2, [r7, #3]
 80076fa:	68f9      	ldr	r1, [r7, #12]
 80076fc:	4613      	mov	r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	4413      	add	r3, r2
 8007702:	00db      	lsls	r3, r3, #3
 8007704:	440b      	add	r3, r1
 8007706:	3351      	adds	r3, #81	; 0x51
 8007708:	78ba      	ldrb	r2, [r7, #2]
 800770a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3714      	adds	r7, #20
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b082      	sub	sp, #8
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f7f9 fb42 	bl	8000dac <HAL_Delay>
}
 8007728:	bf00      	nop
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	4603      	mov	r3, r0
 8007738:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800773e:	79fb      	ldrb	r3, [r7, #7]
 8007740:	2b03      	cmp	r3, #3
 8007742:	d817      	bhi.n	8007774 <USBH_Get_USB_Status+0x44>
 8007744:	a201      	add	r2, pc, #4	; (adr r2, 800774c <USBH_Get_USB_Status+0x1c>)
 8007746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800774a:	bf00      	nop
 800774c:	0800775d 	.word	0x0800775d
 8007750:	08007763 	.word	0x08007763
 8007754:	08007769 	.word	0x08007769
 8007758:	0800776f 	.word	0x0800776f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800775c:	2300      	movs	r3, #0
 800775e:	73fb      	strb	r3, [r7, #15]
    break;
 8007760:	e00b      	b.n	800777a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007762:	2302      	movs	r3, #2
 8007764:	73fb      	strb	r3, [r7, #15]
    break;
 8007766:	e008      	b.n	800777a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007768:	2301      	movs	r3, #1
 800776a:	73fb      	strb	r3, [r7, #15]
    break;
 800776c:	e005      	b.n	800777a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800776e:	2302      	movs	r3, #2
 8007770:	73fb      	strb	r3, [r7, #15]
    break;
 8007772:	e002      	b.n	800777a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007774:	2302      	movs	r3, #2
 8007776:	73fb      	strb	r3, [r7, #15]
    break;
 8007778:	bf00      	nop
  }
  return usb_status;
 800777a:	7bfb      	ldrb	r3, [r7, #15]
}
 800777c:	4618      	mov	r0, r3
 800777e:	3714      	adds	r7, #20
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	4603      	mov	r3, r0
 8007790:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007792:	79fb      	ldrb	r3, [r7, #7]
 8007794:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007796:	79fb      	ldrb	r3, [r7, #7]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d102      	bne.n	80077a2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800779c:	2301      	movs	r3, #1
 800779e:	73fb      	strb	r3, [r7, #15]
 80077a0:	e001      	b.n	80077a6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80077a2:	2300      	movs	r3, #0
 80077a4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80077a6:	7bfb      	ldrb	r3, [r7, #15]
 80077a8:	461a      	mov	r2, r3
 80077aa:	2101      	movs	r1, #1
 80077ac:	4803      	ldr	r0, [pc, #12]	; (80077bc <MX_DriverVbusFS+0x34>)
 80077ae:	f7f9 fdcb 	bl	8001348 <HAL_GPIO_WritePin>
}
 80077b2:	bf00      	nop
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	40020800 	.word	0x40020800

080077c0 <__errno>:
 80077c0:	4b01      	ldr	r3, [pc, #4]	; (80077c8 <__errno+0x8>)
 80077c2:	6818      	ldr	r0, [r3, #0]
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	2000002c 	.word	0x2000002c

080077cc <__libc_init_array>:
 80077cc:	b570      	push	{r4, r5, r6, lr}
 80077ce:	4e0d      	ldr	r6, [pc, #52]	; (8007804 <__libc_init_array+0x38>)
 80077d0:	4c0d      	ldr	r4, [pc, #52]	; (8007808 <__libc_init_array+0x3c>)
 80077d2:	1ba4      	subs	r4, r4, r6
 80077d4:	10a4      	asrs	r4, r4, #2
 80077d6:	2500      	movs	r5, #0
 80077d8:	42a5      	cmp	r5, r4
 80077da:	d109      	bne.n	80077f0 <__libc_init_array+0x24>
 80077dc:	4e0b      	ldr	r6, [pc, #44]	; (800780c <__libc_init_array+0x40>)
 80077de:	4c0c      	ldr	r4, [pc, #48]	; (8007810 <__libc_init_array+0x44>)
 80077e0:	f000 f8ea 	bl	80079b8 <_init>
 80077e4:	1ba4      	subs	r4, r4, r6
 80077e6:	10a4      	asrs	r4, r4, #2
 80077e8:	2500      	movs	r5, #0
 80077ea:	42a5      	cmp	r5, r4
 80077ec:	d105      	bne.n	80077fa <__libc_init_array+0x2e>
 80077ee:	bd70      	pop	{r4, r5, r6, pc}
 80077f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077f4:	4798      	blx	r3
 80077f6:	3501      	adds	r5, #1
 80077f8:	e7ee      	b.n	80077d8 <__libc_init_array+0xc>
 80077fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077fe:	4798      	blx	r3
 8007800:	3501      	adds	r5, #1
 8007802:	e7f2      	b.n	80077ea <__libc_init_array+0x1e>
 8007804:	080079f4 	.word	0x080079f4
 8007808:	080079f4 	.word	0x080079f4
 800780c:	080079f4 	.word	0x080079f4
 8007810:	080079f8 	.word	0x080079f8

08007814 <malloc>:
 8007814:	4b02      	ldr	r3, [pc, #8]	; (8007820 <malloc+0xc>)
 8007816:	4601      	mov	r1, r0
 8007818:	6818      	ldr	r0, [r3, #0]
 800781a:	f000 b861 	b.w	80078e0 <_malloc_r>
 800781e:	bf00      	nop
 8007820:	2000002c 	.word	0x2000002c

08007824 <free>:
 8007824:	4b02      	ldr	r3, [pc, #8]	; (8007830 <free+0xc>)
 8007826:	4601      	mov	r1, r0
 8007828:	6818      	ldr	r0, [r3, #0]
 800782a:	f000 b80b 	b.w	8007844 <_free_r>
 800782e:	bf00      	nop
 8007830:	2000002c 	.word	0x2000002c

08007834 <memset>:
 8007834:	4402      	add	r2, r0
 8007836:	4603      	mov	r3, r0
 8007838:	4293      	cmp	r3, r2
 800783a:	d100      	bne.n	800783e <memset+0xa>
 800783c:	4770      	bx	lr
 800783e:	f803 1b01 	strb.w	r1, [r3], #1
 8007842:	e7f9      	b.n	8007838 <memset+0x4>

08007844 <_free_r>:
 8007844:	b538      	push	{r3, r4, r5, lr}
 8007846:	4605      	mov	r5, r0
 8007848:	2900      	cmp	r1, #0
 800784a:	d045      	beq.n	80078d8 <_free_r+0x94>
 800784c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007850:	1f0c      	subs	r4, r1, #4
 8007852:	2b00      	cmp	r3, #0
 8007854:	bfb8      	it	lt
 8007856:	18e4      	addlt	r4, r4, r3
 8007858:	f000 f8ac 	bl	80079b4 <__malloc_lock>
 800785c:	4a1f      	ldr	r2, [pc, #124]	; (80078dc <_free_r+0x98>)
 800785e:	6813      	ldr	r3, [r2, #0]
 8007860:	4610      	mov	r0, r2
 8007862:	b933      	cbnz	r3, 8007872 <_free_r+0x2e>
 8007864:	6063      	str	r3, [r4, #4]
 8007866:	6014      	str	r4, [r2, #0]
 8007868:	4628      	mov	r0, r5
 800786a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800786e:	f000 b8a2 	b.w	80079b6 <__malloc_unlock>
 8007872:	42a3      	cmp	r3, r4
 8007874:	d90c      	bls.n	8007890 <_free_r+0x4c>
 8007876:	6821      	ldr	r1, [r4, #0]
 8007878:	1862      	adds	r2, r4, r1
 800787a:	4293      	cmp	r3, r2
 800787c:	bf04      	itt	eq
 800787e:	681a      	ldreq	r2, [r3, #0]
 8007880:	685b      	ldreq	r3, [r3, #4]
 8007882:	6063      	str	r3, [r4, #4]
 8007884:	bf04      	itt	eq
 8007886:	1852      	addeq	r2, r2, r1
 8007888:	6022      	streq	r2, [r4, #0]
 800788a:	6004      	str	r4, [r0, #0]
 800788c:	e7ec      	b.n	8007868 <_free_r+0x24>
 800788e:	4613      	mov	r3, r2
 8007890:	685a      	ldr	r2, [r3, #4]
 8007892:	b10a      	cbz	r2, 8007898 <_free_r+0x54>
 8007894:	42a2      	cmp	r2, r4
 8007896:	d9fa      	bls.n	800788e <_free_r+0x4a>
 8007898:	6819      	ldr	r1, [r3, #0]
 800789a:	1858      	adds	r0, r3, r1
 800789c:	42a0      	cmp	r0, r4
 800789e:	d10b      	bne.n	80078b8 <_free_r+0x74>
 80078a0:	6820      	ldr	r0, [r4, #0]
 80078a2:	4401      	add	r1, r0
 80078a4:	1858      	adds	r0, r3, r1
 80078a6:	4282      	cmp	r2, r0
 80078a8:	6019      	str	r1, [r3, #0]
 80078aa:	d1dd      	bne.n	8007868 <_free_r+0x24>
 80078ac:	6810      	ldr	r0, [r2, #0]
 80078ae:	6852      	ldr	r2, [r2, #4]
 80078b0:	605a      	str	r2, [r3, #4]
 80078b2:	4401      	add	r1, r0
 80078b4:	6019      	str	r1, [r3, #0]
 80078b6:	e7d7      	b.n	8007868 <_free_r+0x24>
 80078b8:	d902      	bls.n	80078c0 <_free_r+0x7c>
 80078ba:	230c      	movs	r3, #12
 80078bc:	602b      	str	r3, [r5, #0]
 80078be:	e7d3      	b.n	8007868 <_free_r+0x24>
 80078c0:	6820      	ldr	r0, [r4, #0]
 80078c2:	1821      	adds	r1, r4, r0
 80078c4:	428a      	cmp	r2, r1
 80078c6:	bf04      	itt	eq
 80078c8:	6811      	ldreq	r1, [r2, #0]
 80078ca:	6852      	ldreq	r2, [r2, #4]
 80078cc:	6062      	str	r2, [r4, #4]
 80078ce:	bf04      	itt	eq
 80078d0:	1809      	addeq	r1, r1, r0
 80078d2:	6021      	streq	r1, [r4, #0]
 80078d4:	605c      	str	r4, [r3, #4]
 80078d6:	e7c7      	b.n	8007868 <_free_r+0x24>
 80078d8:	bd38      	pop	{r3, r4, r5, pc}
 80078da:	bf00      	nop
 80078dc:	200000b8 	.word	0x200000b8

080078e0 <_malloc_r>:
 80078e0:	b570      	push	{r4, r5, r6, lr}
 80078e2:	1ccd      	adds	r5, r1, #3
 80078e4:	f025 0503 	bic.w	r5, r5, #3
 80078e8:	3508      	adds	r5, #8
 80078ea:	2d0c      	cmp	r5, #12
 80078ec:	bf38      	it	cc
 80078ee:	250c      	movcc	r5, #12
 80078f0:	2d00      	cmp	r5, #0
 80078f2:	4606      	mov	r6, r0
 80078f4:	db01      	blt.n	80078fa <_malloc_r+0x1a>
 80078f6:	42a9      	cmp	r1, r5
 80078f8:	d903      	bls.n	8007902 <_malloc_r+0x22>
 80078fa:	230c      	movs	r3, #12
 80078fc:	6033      	str	r3, [r6, #0]
 80078fe:	2000      	movs	r0, #0
 8007900:	bd70      	pop	{r4, r5, r6, pc}
 8007902:	f000 f857 	bl	80079b4 <__malloc_lock>
 8007906:	4a21      	ldr	r2, [pc, #132]	; (800798c <_malloc_r+0xac>)
 8007908:	6814      	ldr	r4, [r2, #0]
 800790a:	4621      	mov	r1, r4
 800790c:	b991      	cbnz	r1, 8007934 <_malloc_r+0x54>
 800790e:	4c20      	ldr	r4, [pc, #128]	; (8007990 <_malloc_r+0xb0>)
 8007910:	6823      	ldr	r3, [r4, #0]
 8007912:	b91b      	cbnz	r3, 800791c <_malloc_r+0x3c>
 8007914:	4630      	mov	r0, r6
 8007916:	f000 f83d 	bl	8007994 <_sbrk_r>
 800791a:	6020      	str	r0, [r4, #0]
 800791c:	4629      	mov	r1, r5
 800791e:	4630      	mov	r0, r6
 8007920:	f000 f838 	bl	8007994 <_sbrk_r>
 8007924:	1c43      	adds	r3, r0, #1
 8007926:	d124      	bne.n	8007972 <_malloc_r+0x92>
 8007928:	230c      	movs	r3, #12
 800792a:	6033      	str	r3, [r6, #0]
 800792c:	4630      	mov	r0, r6
 800792e:	f000 f842 	bl	80079b6 <__malloc_unlock>
 8007932:	e7e4      	b.n	80078fe <_malloc_r+0x1e>
 8007934:	680b      	ldr	r3, [r1, #0]
 8007936:	1b5b      	subs	r3, r3, r5
 8007938:	d418      	bmi.n	800796c <_malloc_r+0x8c>
 800793a:	2b0b      	cmp	r3, #11
 800793c:	d90f      	bls.n	800795e <_malloc_r+0x7e>
 800793e:	600b      	str	r3, [r1, #0]
 8007940:	50cd      	str	r5, [r1, r3]
 8007942:	18cc      	adds	r4, r1, r3
 8007944:	4630      	mov	r0, r6
 8007946:	f000 f836 	bl	80079b6 <__malloc_unlock>
 800794a:	f104 000b 	add.w	r0, r4, #11
 800794e:	1d23      	adds	r3, r4, #4
 8007950:	f020 0007 	bic.w	r0, r0, #7
 8007954:	1ac3      	subs	r3, r0, r3
 8007956:	d0d3      	beq.n	8007900 <_malloc_r+0x20>
 8007958:	425a      	negs	r2, r3
 800795a:	50e2      	str	r2, [r4, r3]
 800795c:	e7d0      	b.n	8007900 <_malloc_r+0x20>
 800795e:	428c      	cmp	r4, r1
 8007960:	684b      	ldr	r3, [r1, #4]
 8007962:	bf16      	itet	ne
 8007964:	6063      	strne	r3, [r4, #4]
 8007966:	6013      	streq	r3, [r2, #0]
 8007968:	460c      	movne	r4, r1
 800796a:	e7eb      	b.n	8007944 <_malloc_r+0x64>
 800796c:	460c      	mov	r4, r1
 800796e:	6849      	ldr	r1, [r1, #4]
 8007970:	e7cc      	b.n	800790c <_malloc_r+0x2c>
 8007972:	1cc4      	adds	r4, r0, #3
 8007974:	f024 0403 	bic.w	r4, r4, #3
 8007978:	42a0      	cmp	r0, r4
 800797a:	d005      	beq.n	8007988 <_malloc_r+0xa8>
 800797c:	1a21      	subs	r1, r4, r0
 800797e:	4630      	mov	r0, r6
 8007980:	f000 f808 	bl	8007994 <_sbrk_r>
 8007984:	3001      	adds	r0, #1
 8007986:	d0cf      	beq.n	8007928 <_malloc_r+0x48>
 8007988:	6025      	str	r5, [r4, #0]
 800798a:	e7db      	b.n	8007944 <_malloc_r+0x64>
 800798c:	200000b8 	.word	0x200000b8
 8007990:	200000bc 	.word	0x200000bc

08007994 <_sbrk_r>:
 8007994:	b538      	push	{r3, r4, r5, lr}
 8007996:	4c06      	ldr	r4, [pc, #24]	; (80079b0 <_sbrk_r+0x1c>)
 8007998:	2300      	movs	r3, #0
 800799a:	4605      	mov	r5, r0
 800799c:	4608      	mov	r0, r1
 800799e:	6023      	str	r3, [r4, #0]
 80079a0:	f7f9 f91c 	bl	8000bdc <_sbrk>
 80079a4:	1c43      	adds	r3, r0, #1
 80079a6:	d102      	bne.n	80079ae <_sbrk_r+0x1a>
 80079a8:	6823      	ldr	r3, [r4, #0]
 80079aa:	b103      	cbz	r3, 80079ae <_sbrk_r+0x1a>
 80079ac:	602b      	str	r3, [r5, #0]
 80079ae:	bd38      	pop	{r3, r4, r5, pc}
 80079b0:	20000854 	.word	0x20000854

080079b4 <__malloc_lock>:
 80079b4:	4770      	bx	lr

080079b6 <__malloc_unlock>:
 80079b6:	4770      	bx	lr

080079b8 <_init>:
 80079b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ba:	bf00      	nop
 80079bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079be:	bc08      	pop	{r3}
 80079c0:	469e      	mov	lr, r3
 80079c2:	4770      	bx	lr

080079c4 <_fini>:
 80079c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c6:	bf00      	nop
 80079c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ca:	bc08      	pop	{r3}
 80079cc:	469e      	mov	lr, r3
 80079ce:	4770      	bx	lr
