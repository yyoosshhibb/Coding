   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_sdmmc.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_SDMMC_GetPowerStatus,"ax",%progbits
  20              	 .align 2
  21              	 .global XMC_SDMMC_GetPowerStatus
  22              	 .thumb
  23              	 .thumb_func
  25              	XMC_SDMMC_GetPowerStatus:
  26              	.LFB217:
  27              	 .file 1 "../Libraries/XMCLib/src/xmc_sdmmc.c"
   1:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
   2:../Libraries/XMCLib/src/xmc_sdmmc.c **** /**
   3:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @file xmc_sdmmc.c
   4:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @date 2019-05-07
   5:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
   6:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @cond
   7:../Libraries/XMCLib/src/xmc_sdmmc.c ****  **************************************************************************************************
   8:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * XMClib v2.1.24 - XMC Peripheral Driver Library 
   9:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  10:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  11:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * All rights reserved.                        
  12:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *                                             
  13:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  14:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * following conditions are met:   
  15:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *                                                                              
  16:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  17:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * disclaimer.                        
  18:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 
  19:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  20:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  21:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 
  22:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  23:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * products derived from this software without specific prior written permission.                  
  24:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *                                                                              
  25:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  26:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  27:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  28:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  29:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  30:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  31:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  32:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *                                                                              
  33:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  34:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  35:../Libraries/XMCLib/src/xmc_sdmmc.c ****  **************************************************************************************************
  36:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  37:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Change History
  38:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * --------------
  39:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  40:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2015-02-20:
  41:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Initial <br>
  42:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Removed GetDriverVersion API <br>
  43:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  44:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2015-06-20:
  45:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Removed definition of GetDriverVersion API <br>
  46:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  47:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2016-03-14:
  48:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Values are directly assigned to the int status registers <br>
  49:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  50:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2016-07-11:
  51:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - XMC_SDMMC_SetDataTransferMode() shall not invoke SetDateLineTimeout() <br>
  52:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  53:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2019-05-07:
  54:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Fixed compilation warnings
  55:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  56:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @endcond
  57:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  58:../Libraries/XMCLib/src/xmc_sdmmc.c ****  
  59:../Libraries/XMCLib/src/xmc_sdmmc.c **** /**
  60:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @addtogroup XMClib
  61:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @{
  62:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  63:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  64:../Libraries/XMCLib/src/xmc_sdmmc.c **** /**
  65:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @addtogroup SDMMC
  66:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @brief SDMMC driver
  67:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @{
  68:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  69:../Libraries/XMCLib/src/xmc_sdmmc.c ****  
  70:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*******************************************************************************
  71:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * HEADER FILES
  72:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *******************************************************************************/
  73:../Libraries/XMCLib/src/xmc_sdmmc.c ****  
  74:../Libraries/XMCLib/src/xmc_sdmmc.c **** #include "xmc_sdmmc.h"
  75:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  76:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
  77:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * The SDMMC peripheral is only available on the
  78:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * XMC4500. The SDMMC definition can be found in
  79:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * the XMC4500.h (device header file).
  80:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  81:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined (SDMMC)
  82:../Libraries/XMCLib/src/xmc_sdmmc.c **** #include "xmc_scu.h"
  83:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  84:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*******************************************************************************
  85:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * MACROS
  86:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *******************************************************************************/
  87:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  88:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
  89:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC error events <br>
  90:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  91:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
  92:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  93:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_ERROR_EVENT(e)\
  94:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((e == XMC_SDMMC_CMD_TIMEOUT_ERR)     ||\
  95:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CMD_CRC_ERR)         ||\
  96:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CMD_END_BIT_ERR)     ||\
  97:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CMD_IND_ERR)         ||\
  98:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_DATA_TIMEOUT_ERR)    ||\
  99:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_DATA_CRC_ERR)        ||\
 100:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_DATA_END_BIT_ERR)    ||\
 101:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CURRENT_LIMIT_ERR)   ||\
 102:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_ACMD_ERR)            ||\
 103:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_TARGET_RESP_ERR))
 104:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 105:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 106:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC normal events <br>
 107:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 108:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 109:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 110:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_NORMAL_EVENT(e)\
 111:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((e == XMC_SDMMC_CMD_COMPLETE)        ||\
 112:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_TX_COMPLETE)         ||\
 113:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_BLOCK_GAP_EVENT)     ||\
 114:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_BUFFER_WRITE_READY)  ||\
 115:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_BUFFER_READ_READY)   ||\
 116:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CARD_INS)            ||\
 117:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CARD_REMOVAL)        ||\
 118:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CARD_INT))
 119:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 120:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 121:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for both normal and error events <br>
 122:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 123:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 124:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 125:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_EVENT(e)\
 126:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((XMC_SDMMC_CHECK_NORMAL_EVENT(e))    ||\
 127:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (XMC_SDMMC_CHECK_ERROR_EVENT(e)))
 128:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 129:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 130:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC wakeup events <br>
 131:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 132:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 133:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 134:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_WAKEUP_EVENT(w)\
 135:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((w == XMC_SDMMC_WAKEUP_EN_CARD_INT)  ||\
 136:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (w == XMC_SDMMC_WAKEUP_EN_CARD_INS)  ||\
 137:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (w == XMC_SDMMC_WAKEUP_EN_CARD_REM))
 138:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 139:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 140:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC software reset modes <br>
 141:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 142:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 143:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 144:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_SW_RESET_MODE(m)\
 145:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((m == XMC_SDMMC_SW_RESET_ALL)        ||\
 146:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_SW_RST_CMD_LINE)     ||\
 147:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_SW_RST_DAT_LINE))
 148:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 149:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 150:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC transfer modes <br>
 151:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 152:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 153:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 154:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_TRANSFER_MODE(m)\
 155:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((m == XMC_SDMMC_TRANSFER_MODE_TYPE_SINGLE)    ||\
 156:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_TRANSFER_MODE_TYPE_INFINITE)  ||\
 157:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_TRANSFER_MODE_TYPE_MULTIPLE)  ||\
 158:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_TRANSFER_MODE_TYPE_STOP_MULTIPLE))
 159:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 160:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 161:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*******************************************************************************
 162:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * API IMPLEMENTATION
 163:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *******************************************************************************/
 164:../Libraries/XMCLib/src/xmc_sdmmc.c ****  
 165:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Get power status of the SDMMC peripheral */
 166:../Libraries/XMCLib/src/xmc_sdmmc.c **** bool XMC_SDMMC_GetPowerStatus(XMC_SDMMC_t *const sdmmc)
 167:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
  28              	 .loc 1 167 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	 .cfi_def_cfa_offset 16
  38 0004 00AF     	 add r7,sp,#0
  39              	 .cfi_def_cfa_register 7
  40 0006 7860     	 str r0,[r7,#4]
 168:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_GetPowerStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc))
 169:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 170:../Libraries/XMCLib/src/xmc_sdmmc.c ****   return (bool)(sdmmc->POWER_CTRL & SDMMC_POWER_CTRL_SD_BUS_POWER_Msk);
  41              	 .loc 1 170 0
  42 0008 7B68     	 ldr r3,[r7,#4]
  43 000a 93F82930 	 ldrb r3,[r3,#41]
  44 000e DBB2     	 uxtb r3,r3
  45 0010 03F00103 	 and r3,r3,#1
  46 0014 002B     	 cmp r3,#0
  47 0016 14BF     	 ite ne
  48 0018 0123     	 movne r3,#1
  49 001a 0023     	 moveq r3,#0
  50 001c DBB2     	 uxtb r3,r3
 171:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
  51              	 .loc 1 171 0
  52 001e 1846     	 mov r0,r3
  53 0020 0C37     	 adds r7,r7,#12
  54              	 .cfi_def_cfa_offset 4
  55 0022 BD46     	 mov sp,r7
  56              	 .cfi_def_cfa_register 13
  57              	 
  58 0024 5DF8047B 	 ldr r7,[sp],#4
  59              	 .cfi_restore 7
  60              	 .cfi_def_cfa_offset 0
  61 0028 7047     	 bx lr
  62              	 .cfi_endproc
  63              	.LFE217:
  65 002a 00BF     	 .section .text.XMC_SDMMC_Enable,"ax",%progbits
  66              	 .align 2
  67              	 .global XMC_SDMMC_Enable
  68              	 .thumb
  69              	 .thumb_func
  71              	XMC_SDMMC_Enable:
  72              	.LFB218:
 172:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 173:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 174:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * De-assert the peripheral reset. The SDMMC peripheral
 175:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * needs to be initialized
 176:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 177:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_Enable(XMC_SDMMC_t *const sdmmc)
 178:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
  73              	 .loc 1 178 0
  74              	 .cfi_startproc
  75              	 
  76              	 
  77 0000 80B5     	 push {r7,lr}
  78              	 .cfi_def_cfa_offset 8
  79              	 .cfi_offset 7,-8
  80              	 .cfi_offset 14,-4
  81 0002 82B0     	 sub sp,sp,#8
  82              	 .cfi_def_cfa_offset 16
  83 0004 00AF     	 add r7,sp,#0
  84              	 .cfi_def_cfa_register 7
  85 0006 7860     	 str r0,[r7,#4]
 179:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Enable: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 180:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_UNUSED_ARG(sdmmc);
 181:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 182:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 183:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_SDMMC);
 184:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif
 185:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 186:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_SDMMC);
  86              	 .loc 1 186 0
  87 0008 0248     	 ldr r0,.L4
  88 000a FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 187:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif  
 188:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
  89              	 .loc 1 188 0
  90 000e 0837     	 adds r7,r7,#8
  91              	 .cfi_def_cfa_offset 8
  92 0010 BD46     	 mov sp,r7
  93              	 .cfi_def_cfa_register 13
  94              	 
  95 0012 80BD     	 pop {r7,pc}
  96              	.L5:
  97              	 .align 2
  98              	.L4:
  99 0014 40000010 	 .word 268435520
 100              	 .cfi_endproc
 101              	.LFE218:
 103              	 .section .text.XMC_SDMMC_Disable,"ax",%progbits
 104              	 .align 2
 105              	 .global XMC_SDMMC_Disable
 106              	 .thumb
 107              	 .thumb_func
 109              	XMC_SDMMC_Disable:
 110              	.LFB219:
 189:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 190:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Assert the peripheral reset */
 191:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_Disable(XMC_SDMMC_t *const sdmmc)
 192:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 111              	 .loc 1 192 0
 112              	 .cfi_startproc
 113              	 
 114              	 
 115 0000 80B5     	 push {r7,lr}
 116              	 .cfi_def_cfa_offset 8
 117              	 .cfi_offset 7,-8
 118              	 .cfi_offset 14,-4
 119 0002 82B0     	 sub sp,sp,#8
 120              	 .cfi_def_cfa_offset 16
 121 0004 00AF     	 add r7,sp,#0
 122              	 .cfi_def_cfa_register 7
 123 0006 7860     	 str r0,[r7,#4]
 193:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Disable: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 194:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_UNUSED_ARG(sdmmc);
 195:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 196:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 197:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_SDMMC);
 124              	 .loc 1 197 0
 125 0008 0248     	 ldr r0,.L7
 126 000a FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 198:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif  
 199:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 200:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_SDMMC);
 201:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif
 202:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 127              	 .loc 1 202 0
 128 000e 0837     	 adds r7,r7,#8
 129              	 .cfi_def_cfa_offset 8
 130 0010 BD46     	 mov sp,r7
 131              	 .cfi_def_cfa_register 13
 132              	 
 133 0012 80BD     	 pop {r7,pc}
 134              	.L8:
 135              	 .align 2
 136              	.L7:
 137 0014 40000010 	 .word 268435520
 138              	 .cfi_endproc
 139              	.LFE219:
 141              	 .section .text.XMC_SDMMC_Init,"ax",%progbits
 142              	 .align 2
 143              	 .global XMC_SDMMC_Init
 144              	 .thumb
 145              	 .thumb_func
 147              	XMC_SDMMC_Init:
 148              	.LFB220:
 203:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 204:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Initialize SDMMC peripheral */
 205:../Libraries/XMCLib/src/xmc_sdmmc.c **** XMC_SDMMC_STATUS_t XMC_SDMMC_Init(XMC_SDMMC_t *const sdmmc, const XMC_SDMMC_CONFIG_t *config)
 206:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 149              	 .loc 1 206 0
 150              	 .cfi_startproc
 151              	 
 152              	 
 153 0000 80B5     	 push {r7,lr}
 154              	 .cfi_def_cfa_offset 8
 155              	 .cfi_offset 7,-8
 156              	 .cfi_offset 14,-4
 157 0002 82B0     	 sub sp,sp,#8
 158              	 .cfi_def_cfa_offset 16
 159 0004 00AF     	 add r7,sp,#0
 160              	 .cfi_def_cfa_register 7
 161 0006 7860     	 str r0,[r7,#4]
 162 0008 3960     	 str r1,[r7]
 207:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Init: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 208:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Init: Invalid clock divider value", XMC_SDMMC_CHECK_SDCLK_FREQ(config->cloc
 209:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Init: Invalid bus width", XMC_SDMMC_CHECK_DATA_LINES(config->bus_width));
 210:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 211:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Enable SDMMC peripheral */
 212:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SDMMC_Enable(sdmmc);
 163              	 .loc 1 212 0
 164 000a 7868     	 ldr r0,[r7,#4]
 165 000c FFF7FEFF 	 bl XMC_SDMMC_Enable
 213:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 214:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Write internal clock divider register */
 215:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->CLOCK_CTRL |= (uint16_t)((uint32_t)config->clock_divider << SDMMC_CLOCK_CTRL_SDCLK_FREQ_SE
 166              	 .loc 1 215 0
 167 0010 7B68     	 ldr r3,[r7,#4]
 168 0012 9B8D     	 ldrh r3,[r3,#44]
 169 0014 9AB2     	 uxth r2,r3
 170 0016 3B68     	 ldr r3,[r7]
 171 0018 5B78     	 ldrb r3,[r3,#1]
 172 001a 9BB2     	 uxth r3,r3
 173 001c 1B02     	 lsls r3,r3,#8
 174 001e 9BB2     	 uxth r3,r3
 175 0020 1343     	 orrs r3,r3,r2
 176 0022 9AB2     	 uxth r2,r3
 177 0024 7B68     	 ldr r3,[r7,#4]
 178 0026 9A85     	 strh r2,[r3,#44]
 216:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 217:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Set bus width */
 218:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->HOST_CTRL = (uint8_t)((sdmmc->HOST_CTRL & (uint8_t)~SDMMC_HOST_CTRL_DATA_TX_WIDTH_Msk) |
 179              	 .loc 1 218 0
 180 0028 7B68     	 ldr r3,[r7,#4]
 181 002a 93F82830 	 ldrb r3,[r3,#40]
 182 002e DBB2     	 uxtb r3,r3
 183 0030 DBB2     	 uxtb r3,r3
 184 0032 23F00203 	 bic r3,r3,#2
 185 0036 DAB2     	 uxtb r2,r3
 219:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                ((uint8_t)config->bus_width << SDMMC_HOST_CTRL_DATA_TX_WIDTH_Pos));
 186              	 .loc 1 219 0
 187 0038 3B68     	 ldr r3,[r7]
 188 003a 1B78     	 ldrb r3,[r3]
 189 003c 5B00     	 lsls r3,r3,#1
 218:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                ((uint8_t)config->bus_width << SDMMC_HOST_CTRL_DATA_TX_WIDTH_Pos));
 190              	 .loc 1 218 0
 191 003e DBB2     	 uxtb r3,r3
 192 0040 1343     	 orrs r3,r3,r2
 193 0042 DBB2     	 uxtb r3,r3
 194 0044 DAB2     	 uxtb r2,r3
 195 0046 7B68     	 ldr r3,[r7,#4]
 196 0048 83F82820 	 strb r2,[r3,#40]
 220:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 221:../Libraries/XMCLib/src/xmc_sdmmc.c ****   return XMC_SDMMC_STATUS_SUCCESS;
 197              	 .loc 1 221 0
 198 004c 0023     	 movs r3,#0
 222:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 199              	 .loc 1 222 0
 200 004e 1846     	 mov r0,r3
 201 0050 0837     	 adds r7,r7,#8
 202              	 .cfi_def_cfa_offset 8
 203 0052 BD46     	 mov sp,r7
 204              	 .cfi_def_cfa_register 13
 205              	 
 206 0054 80BD     	 pop {r7,pc}
 207              	 .cfi_endproc
 208              	.LFE220:
 210 0056 00BF     	 .section .text.XMC_SDMMC_EnableEventStatus,"ax",%progbits
 211              	 .align 2
 212              	 .global XMC_SDMMC_EnableEventStatus
 213              	 .thumb
 214              	 .thumb_func
 216              	XMC_SDMMC_EnableEventStatus:
 217              	.LFB221:
 223:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 224:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Enable event status */
 225:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_EnableEventStatus(XMC_SDMMC_t *const sdmmc, uint32_t event)
 226:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 218              	 .loc 1 226 0
 219              	 .cfi_startproc
 220              	 
 221              	 
 222              	 
 223 0000 80B4     	 push {r7}
 224              	 .cfi_def_cfa_offset 4
 225              	 .cfi_offset 7,-4
 226 0002 83B0     	 sub sp,sp,#12
 227              	 .cfi_def_cfa_offset 16
 228 0004 00AF     	 add r7,sp,#0
 229              	 .cfi_def_cfa_register 7
 230 0006 7860     	 str r0,[r7,#4]
 231 0008 3960     	 str r1,[r7]
 227:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_EnableEventStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmm
 228:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 229:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Set INT status enable register */
 230:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_STATUS_NORM |= (uint16_t)event;
 232              	 .loc 1 230 0
 233 000a 7B68     	 ldr r3,[r7,#4]
 234 000c 9B8E     	 ldrh r3,[r3,#52]
 235 000e 9AB2     	 uxth r2,r3
 236 0010 3B68     	 ldr r3,[r7]
 237 0012 9BB2     	 uxth r3,r3
 238 0014 1343     	 orrs r3,r3,r2
 239 0016 9AB2     	 uxth r2,r3
 240 0018 7B68     	 ldr r3,[r7,#4]
 241 001a 9A86     	 strh r2,[r3,#52]
 231:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_STATUS_ERR |= (uint16_t)(event >> 16U);
 242              	 .loc 1 231 0
 243 001c 7B68     	 ldr r3,[r7,#4]
 244 001e DB8E     	 ldrh r3,[r3,#54]
 245 0020 9AB2     	 uxth r2,r3
 246 0022 3B68     	 ldr r3,[r7]
 247 0024 1B0C     	 lsrs r3,r3,#16
 248 0026 9BB2     	 uxth r3,r3
 249 0028 1343     	 orrs r3,r3,r2
 250 002a 9AB2     	 uxth r2,r3
 251 002c 7B68     	 ldr r3,[r7,#4]
 252 002e DA86     	 strh r2,[r3,#54]
 232:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 253              	 .loc 1 232 0
 254 0030 0C37     	 adds r7,r7,#12
 255              	 .cfi_def_cfa_offset 4
 256 0032 BD46     	 mov sp,r7
 257              	 .cfi_def_cfa_register 13
 258              	 
 259 0034 5DF8047B 	 ldr r7,[sp],#4
 260              	 .cfi_restore 7
 261              	 .cfi_def_cfa_offset 0
 262 0038 7047     	 bx lr
 263              	 .cfi_endproc
 264              	.LFE221:
 266 003a 00BF     	 .section .text.XMC_SDMMC_DisableEventStatus,"ax",%progbits
 267              	 .align 2
 268              	 .global XMC_SDMMC_DisableEventStatus
 269              	 .thumb
 270              	 .thumb_func
 272              	XMC_SDMMC_DisableEventStatus:
 273              	.LFB222:
 233:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 234:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Disable event status */
 235:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_DisableEventStatus(XMC_SDMMC_t *const sdmmc, uint32_t event)
 236:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 274              	 .loc 1 236 0
 275              	 .cfi_startproc
 276              	 
 277              	 
 278              	 
 279 0000 80B4     	 push {r7}
 280              	 .cfi_def_cfa_offset 4
 281              	 .cfi_offset 7,-4
 282 0002 83B0     	 sub sp,sp,#12
 283              	 .cfi_def_cfa_offset 16
 284 0004 00AF     	 add r7,sp,#0
 285              	 .cfi_def_cfa_register 7
 286 0006 7860     	 str r0,[r7,#4]
 287 0008 3960     	 str r1,[r7]
 237:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_DisableEventStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdm
 238:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 239:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Clear INT status enable register */
 240:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_STATUS_NORM &= (uint16_t)~event;
 288              	 .loc 1 240 0
 289 000a 7B68     	 ldr r3,[r7,#4]
 290 000c 9B8E     	 ldrh r3,[r3,#52]
 291 000e 9AB2     	 uxth r2,r3
 292 0010 3B68     	 ldr r3,[r7]
 293 0012 9BB2     	 uxth r3,r3
 294 0014 DB43     	 mvns r3,r3
 295 0016 9BB2     	 uxth r3,r3
 296 0018 1340     	 ands r3,r3,r2
 297 001a 9AB2     	 uxth r2,r3
 298 001c 7B68     	 ldr r3,[r7,#4]
 299 001e 9A86     	 strh r2,[r3,#52]
 241:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_STATUS_ERR &= (uint16_t)~(event >> 16U);
 300              	 .loc 1 241 0
 301 0020 7B68     	 ldr r3,[r7,#4]
 302 0022 DB8E     	 ldrh r3,[r3,#54]
 303 0024 9AB2     	 uxth r2,r3
 304 0026 3B68     	 ldr r3,[r7]
 305 0028 1B0C     	 lsrs r3,r3,#16
 306 002a 9BB2     	 uxth r3,r3
 307 002c DB43     	 mvns r3,r3
 308 002e 9BB2     	 uxth r3,r3
 309 0030 1340     	 ands r3,r3,r2
 310 0032 9AB2     	 uxth r2,r3
 311 0034 7B68     	 ldr r3,[r7,#4]
 312 0036 DA86     	 strh r2,[r3,#54]
 242:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 313              	 .loc 1 242 0
 314 0038 0C37     	 adds r7,r7,#12
 315              	 .cfi_def_cfa_offset 4
 316 003a BD46     	 mov sp,r7
 317              	 .cfi_def_cfa_register 13
 318              	 
 319 003c 5DF8047B 	 ldr r7,[sp],#4
 320              	 .cfi_restore 7
 321              	 .cfi_def_cfa_offset 0
 322 0040 7047     	 bx lr
 323              	 .cfi_endproc
 324              	.LFE222:
 326 0042 00BF     	 .section .text.XMC_SDMMC_EnableEvent,"ax",%progbits
 327              	 .align 2
 328              	 .global XMC_SDMMC_EnableEvent
 329              	 .thumb
 330              	 .thumb_func
 332              	XMC_SDMMC_EnableEvent:
 333              	.LFB223:
 243:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 244:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Enable SDMMC event */
 245:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_EnableEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
 246:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 334              	 .loc 1 246 0
 335              	 .cfi_startproc
 336              	 
 337              	 
 338 0000 80B5     	 push {r7,lr}
 339              	 .cfi_def_cfa_offset 8
 340              	 .cfi_offset 7,-8
 341              	 .cfi_offset 14,-4
 342 0002 82B0     	 sub sp,sp,#8
 343              	 .cfi_def_cfa_offset 16
 344 0004 00AF     	 add r7,sp,#0
 345              	 .cfi_def_cfa_register 7
 346 0006 7860     	 str r0,[r7,#4]
 347 0008 3960     	 str r1,[r7]
 247:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_EnableEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 248:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 249:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SDMMC_EnableEventStatus(sdmmc, event);
 348              	 .loc 1 249 0
 349 000a 7868     	 ldr r0,[r7,#4]
 350 000c 3968     	 ldr r1,[r7]
 351 000e FFF7FEFF 	 bl XMC_SDMMC_EnableEventStatus
 250:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 251:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_SIGNAL_NORM |= (uint16_t)event;
 352              	 .loc 1 251 0
 353 0012 7B68     	 ldr r3,[r7,#4]
 354 0014 1B8F     	 ldrh r3,[r3,#56]
 355 0016 9AB2     	 uxth r2,r3
 356 0018 3B68     	 ldr r3,[r7]
 357 001a 9BB2     	 uxth r3,r3
 358 001c 1343     	 orrs r3,r3,r2
 359 001e 9AB2     	 uxth r2,r3
 360 0020 7B68     	 ldr r3,[r7,#4]
 361 0022 1A87     	 strh r2,[r3,#56]
 252:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_SIGNAL_ERR |= (uint16_t)(event >> 16U);
 362              	 .loc 1 252 0
 363 0024 7B68     	 ldr r3,[r7,#4]
 364 0026 5B8F     	 ldrh r3,[r3,#58]
 365 0028 9AB2     	 uxth r2,r3
 366 002a 3B68     	 ldr r3,[r7]
 367 002c 1B0C     	 lsrs r3,r3,#16
 368 002e 9BB2     	 uxth r3,r3
 369 0030 1343     	 orrs r3,r3,r2
 370 0032 9AB2     	 uxth r2,r3
 371 0034 7B68     	 ldr r3,[r7,#4]
 372 0036 5A87     	 strh r2,[r3,#58]
 253:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 373              	 .loc 1 253 0
 374 0038 0837     	 adds r7,r7,#8
 375              	 .cfi_def_cfa_offset 8
 376 003a BD46     	 mov sp,r7
 377              	 .cfi_def_cfa_register 13
 378              	 
 379 003c 80BD     	 pop {r7,pc}
 380              	 .cfi_endproc
 381              	.LFE223:
 383 003e 00BF     	 .section .text.XMC_SDMMC_DisableEvent,"ax",%progbits
 384              	 .align 2
 385              	 .global XMC_SDMMC_DisableEvent
 386              	 .thumb
 387              	 .thumb_func
 389              	XMC_SDMMC_DisableEvent:
 390              	.LFB224:
 254:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 255:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Disable SDMMC event without disabling event status */
 256:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_DisableEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
 257:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 391              	 .loc 1 257 0
 392              	 .cfi_startproc
 393              	 
 394              	 
 395              	 
 396 0000 80B4     	 push {r7}
 397              	 .cfi_def_cfa_offset 4
 398              	 .cfi_offset 7,-4
 399 0002 83B0     	 sub sp,sp,#12
 400              	 .cfi_def_cfa_offset 16
 401 0004 00AF     	 add r7,sp,#0
 402              	 .cfi_def_cfa_register 7
 403 0006 7860     	 str r0,[r7,#4]
 404 0008 3960     	 str r1,[r7]
 258:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_DisableEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 259:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 260:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Clear INT signal enable register */
 261:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_SIGNAL_NORM &= (uint16_t)~event;
 405              	 .loc 1 261 0
 406 000a 7B68     	 ldr r3,[r7,#4]
 407 000c 1B8F     	 ldrh r3,[r3,#56]
 408 000e 9AB2     	 uxth r2,r3
 409 0010 3B68     	 ldr r3,[r7]
 410 0012 9BB2     	 uxth r3,r3
 411 0014 DB43     	 mvns r3,r3
 412 0016 9BB2     	 uxth r3,r3
 413 0018 1340     	 ands r3,r3,r2
 414 001a 9AB2     	 uxth r2,r3
 415 001c 7B68     	 ldr r3,[r7,#4]
 416 001e 1A87     	 strh r2,[r3,#56]
 262:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_SIGNAL_ERR &= (uint16_t)~(event >> 16U);
 417              	 .loc 1 262 0
 418 0020 7B68     	 ldr r3,[r7,#4]
 419 0022 5B8F     	 ldrh r3,[r3,#58]
 420 0024 9AB2     	 uxth r2,r3
 421 0026 3B68     	 ldr r3,[r7]
 422 0028 1B0C     	 lsrs r3,r3,#16
 423 002a 9BB2     	 uxth r3,r3
 424 002c DB43     	 mvns r3,r3
 425 002e 9BB2     	 uxth r3,r3
 426 0030 1340     	 ands r3,r3,r2
 427 0032 9AB2     	 uxth r2,r3
 428 0034 7B68     	 ldr r3,[r7,#4]
 429 0036 5A87     	 strh r2,[r3,#58]
 263:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 430              	 .loc 1 263 0
 431 0038 0C37     	 adds r7,r7,#12
 432              	 .cfi_def_cfa_offset 4
 433 003a BD46     	 mov sp,r7
 434              	 .cfi_def_cfa_register 13
 435              	 
 436 003c 5DF8047B 	 ldr r7,[sp],#4
 437              	 .cfi_restore 7
 438              	 .cfi_def_cfa_offset 0
 439 0040 7047     	 bx lr
 440              	 .cfi_endproc
 441              	.LFE224:
 443 0042 00BF     	 .section .text.XMC_SDMMC_ClearEvent,"ax",%progbits
 444              	 .align 2
 445              	 .global XMC_SDMMC_ClearEvent
 446              	 .thumb
 447              	 .thumb_func
 449              	XMC_SDMMC_ClearEvent:
 450              	.LFB225:
 264:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 265:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Clear SDMMC event(s) */
 266:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_ClearEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
 267:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 451              	 .loc 1 267 0
 452              	 .cfi_startproc
 453              	 
 454              	 
 455              	 
 456 0000 80B4     	 push {r7}
 457              	 .cfi_def_cfa_offset 4
 458              	 .cfi_offset 7,-4
 459 0002 83B0     	 sub sp,sp,#12
 460              	 .cfi_def_cfa_offset 16
 461 0004 00AF     	 add r7,sp,#0
 462              	 .cfi_def_cfa_register 7
 463 0006 7860     	 str r0,[r7,#4]
 464 0008 3960     	 str r1,[r7]
 268:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_ClearEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 269:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_ClearEvent: Invalid bit-field", !(event & XMC_SDMMC_TARGET_RESP_ERR));
 270:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 271:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->INT_STATUS_NORM = (uint16_t)event;
 465              	 .loc 1 271 0
 466 000a 3B68     	 ldr r3,[r7]
 467 000c 9AB2     	 uxth r2,r3
 468 000e 7B68     	 ldr r3,[r7,#4]
 469 0010 1A86     	 strh r2,[r3,#48]
 272:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->INT_STATUS_ERR = (uint16_t)(event >> 16U);
 470              	 .loc 1 272 0
 471 0012 3B68     	 ldr r3,[r7]
 472 0014 1B0C     	 lsrs r3,r3,#16
 473 0016 9AB2     	 uxth r2,r3
 474 0018 7B68     	 ldr r3,[r7,#4]
 475 001a 5A86     	 strh r2,[r3,#50]
 273:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 476              	 .loc 1 273 0
 477 001c 0C37     	 adds r7,r7,#12
 478              	 .cfi_def_cfa_offset 4
 479 001e BD46     	 mov sp,r7
 480              	 .cfi_def_cfa_register 13
 481              	 
 482 0020 5DF8047B 	 ldr r7,[sp],#4
 483              	 .cfi_restore 7
 484              	 .cfi_def_cfa_offset 0
 485 0024 7047     	 bx lr
 486              	 .cfi_endproc
 487              	.LFE225:
 489 0026 00BF     	 .section .text.XMC_SDMMC_GetEvent,"ax",%progbits
 490              	 .align 2
 491              	 .global XMC_SDMMC_GetEvent
 492              	 .thumb
 493              	 .thumb_func
 495              	XMC_SDMMC_GetEvent:
 496              	.LFB226:
 274:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 275:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Get the status of an SDMMC event */
 276:../Libraries/XMCLib/src/xmc_sdmmc.c **** bool XMC_SDMMC_GetEvent(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_EVENT_t event)
 277:../Libraries/XMCLib/src/xmc_sdmmc.c **** {  
 497              	 .loc 1 277 0
 498              	 .cfi_startproc
 499              	 
 500              	 
 501              	 
 502 0000 80B4     	 push {r7}
 503              	 .cfi_def_cfa_offset 4
 504              	 .cfi_offset 7,-4
 505 0002 85B0     	 sub sp,sp,#20
 506              	 .cfi_def_cfa_offset 24
 507 0004 00AF     	 add r7,sp,#0
 508              	 .cfi_def_cfa_register 7
 509 0006 7860     	 str r0,[r7,#4]
 510 0008 3960     	 str r1,[r7]
 278:../Libraries/XMCLib/src/xmc_sdmmc.c ****   bool status;
 279:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 280:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_GetEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 281:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_GetEvent: Invalid SDMMC event", XMC_SDMMC_CHECK_EVENT(event));
 282:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 283:../Libraries/XMCLib/src/xmc_sdmmc.c ****   if (event < XMC_SDMMC_CMD_TIMEOUT_ERR)
 511              	 .loc 1 283 0
 512 000a 3B68     	 ldr r3,[r7]
 513 000c B3F5803F 	 cmp r3,#65536
 514 0010 0CD2     	 bcs .L17
 284:../Libraries/XMCLib/src/xmc_sdmmc.c ****   {
 285:../Libraries/XMCLib/src/xmc_sdmmc.c ****     status = (bool)(sdmmc->INT_STATUS_NORM & (uint16_t)event);
 515              	 .loc 1 285 0
 516 0012 7B68     	 ldr r3,[r7,#4]
 517 0014 1B8E     	 ldrh r3,[r3,#48]
 518 0016 9AB2     	 uxth r2,r3
 519 0018 3B68     	 ldr r3,[r7]
 520 001a 9BB2     	 uxth r3,r3
 521 001c 1340     	 ands r3,r3,r2
 522 001e 9BB2     	 uxth r3,r3
 523 0020 002B     	 cmp r3,#0
 524 0022 14BF     	 ite ne
 525 0024 0123     	 movne r3,#1
 526 0026 0023     	 moveq r3,#0
 527 0028 FB73     	 strb r3,[r7,#15]
 528 002a 0CE0     	 b .L18
 529              	.L17:
 286:../Libraries/XMCLib/src/xmc_sdmmc.c ****   }
 287:../Libraries/XMCLib/src/xmc_sdmmc.c ****   else
 288:../Libraries/XMCLib/src/xmc_sdmmc.c ****   {
 289:../Libraries/XMCLib/src/xmc_sdmmc.c ****     status = (bool)(sdmmc->INT_STATUS_ERR & (uint16_t)((uint32_t)event >> 16U));
 530              	 .loc 1 289 0
 531 002c 7B68     	 ldr r3,[r7,#4]
 532 002e 5B8E     	 ldrh r3,[r3,#50]
 533 0030 9AB2     	 uxth r2,r3
 534 0032 3B68     	 ldr r3,[r7]
 535 0034 1B0C     	 lsrs r3,r3,#16
 536 0036 9BB2     	 uxth r3,r3
 537 0038 1340     	 ands r3,r3,r2
 538 003a 9BB2     	 uxth r3,r3
 539 003c 002B     	 cmp r3,#0
 540 003e 14BF     	 ite ne
 541 0040 0123     	 movne r3,#1
 542 0042 0023     	 moveq r3,#0
 543 0044 FB73     	 strb r3,[r7,#15]
 544              	.L18:
 290:../Libraries/XMCLib/src/xmc_sdmmc.c ****   }
 291:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 292:../Libraries/XMCLib/src/xmc_sdmmc.c ****   return status;
 545              	 .loc 1 292 0
 546 0046 FB7B     	 ldrb r3,[r7,#15]
 293:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 547              	 .loc 1 293 0
 548 0048 1846     	 mov r0,r3
 549 004a 1437     	 adds r7,r7,#20
 550              	 .cfi_def_cfa_offset 4
 551 004c BD46     	 mov sp,r7
 552              	 .cfi_def_cfa_register 13
 553              	 
 554 004e 5DF8047B 	 ldr r7,[sp],#4
 555              	 .cfi_restore 7
 556              	 .cfi_def_cfa_offset 0
 557 0052 7047     	 bx lr
 558              	 .cfi_endproc
 559              	.LFE226:
 561              	 .section .text.XMC_SDMMC_GetR2Response,"ax",%progbits
 562              	 .align 2
 563              	 .global XMC_SDMMC_GetR2Response
 564              	 .thumb
 565              	 .thumb_func
 567              	XMC_SDMMC_GetR2Response:
 568              	.LFB227:
 294:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 295:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Read R2 response (CID, CSD register) */
 296:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_GetR2Response(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_RESPONSE_t *const response)
 297:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 569              	 .loc 1 297 0
 570              	 .cfi_startproc
 571              	 
 572              	 
 573              	 
 574 0000 80B4     	 push {r7}
 575              	 .cfi_def_cfa_offset 4
 576              	 .cfi_offset 7,-4
 577 0002 83B0     	 sub sp,sp,#12
 578              	 .cfi_def_cfa_offset 16
 579 0004 00AF     	 add r7,sp,#0
 580              	 .cfi_def_cfa_register 7
 581 0006 7860     	 str r0,[r7,#4]
 582 0008 3960     	 str r1,[r7]
 298:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_GetR2Response: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 299:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 300:../Libraries/XMCLib/src/xmc_sdmmc.c ****   response->response_0 = sdmmc->RESPONSE[0];
 583              	 .loc 1 300 0
 584 000a 7B68     	 ldr r3,[r7,#4]
 585 000c 1A69     	 ldr r2,[r3,#16]
 586 000e 3B68     	 ldr r3,[r7]
 587 0010 1A60     	 str r2,[r3]
 301:../Libraries/XMCLib/src/xmc_sdmmc.c ****   response->response_2 = sdmmc->RESPONSE[1];
 588              	 .loc 1 301 0
 589 0012 7B68     	 ldr r3,[r7,#4]
 590 0014 5A69     	 ldr r2,[r3,#20]
 591 0016 3B68     	 ldr r3,[r7]
 592 0018 5A60     	 str r2,[r3,#4]
 302:../Libraries/XMCLib/src/xmc_sdmmc.c ****   response->response_4 = sdmmc->RESPONSE[2];
 593              	 .loc 1 302 0
 594 001a 7B68     	 ldr r3,[r7,#4]
 595 001c 9A69     	 ldr r2,[r3,#24]
 596 001e 3B68     	 ldr r3,[r7]
 597 0020 9A60     	 str r2,[r3,#8]
 303:../Libraries/XMCLib/src/xmc_sdmmc.c ****   response->response_6 = sdmmc->RESPONSE[3];
 598              	 .loc 1 303 0
 599 0022 7B68     	 ldr r3,[r7,#4]
 600 0024 DA69     	 ldr r2,[r3,#28]
 601 0026 3B68     	 ldr r3,[r7]
 602 0028 DA60     	 str r2,[r3,#12]
 304:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 603              	 .loc 1 304 0
 604 002a 0C37     	 adds r7,r7,#12
 605              	 .cfi_def_cfa_offset 4
 606 002c BD46     	 mov sp,r7
 607              	 .cfi_def_cfa_register 13
 608              	 
 609 002e 5DF8047B 	 ldr r7,[sp],#4
 610              	 .cfi_restore 7
 611              	 .cfi_def_cfa_offset 0
 612 0032 7047     	 bx lr
 613              	 .cfi_endproc
 614              	.LFE227:
 616              	 .section .text.XMC_SDMMC_SendCommand,"ax",%progbits
 617              	 .align 2
 618              	 .global XMC_SDMMC_SendCommand
 619              	 .thumb
 620              	 .thumb_func
 622              	XMC_SDMMC_SendCommand:
 623              	.LFB228:
 305:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 306:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Send SDMMC command */
 307:../Libraries/XMCLib/src/xmc_sdmmc.c **** XMC_SDMMC_STATUS_t XMC_SDMMC_SendCommand(XMC_SDMMC_t *const sdmmc, const XMC_SDMMC_COMMAND_t *cmd, 
 308:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 624              	 .loc 1 308 0
 625              	 .cfi_startproc
 626              	 
 627              	 
 628              	 
 629 0000 80B4     	 push {r7}
 630              	 .cfi_def_cfa_offset 4
 631              	 .cfi_offset 7,-4
 632 0002 85B0     	 sub sp,sp,#20
 633              	 .cfi_def_cfa_offset 24
 634 0004 00AF     	 add r7,sp,#0
 635              	 .cfi_def_cfa_register 7
 636 0006 F860     	 str r0,[r7,#12]
 637 0008 B960     	 str r1,[r7,#8]
 638 000a 7A60     	 str r2,[r7,#4]
 309:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_SendCommand: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 310:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 311:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->ARGUMENT1 = arg;
 639              	 .loc 1 311 0
 640 000c FB68     	 ldr r3,[r7,#12]
 641 000e 7A68     	 ldr r2,[r7,#4]
 642 0010 9A60     	 str r2,[r3,#8]
 312:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->COMMAND = (uint16_t)(*(uint16_t *)cmd);
 643              	 .loc 1 312 0
 644 0012 BB68     	 ldr r3,[r7,#8]
 645 0014 1A88     	 ldrh r2,[r3]
 646 0016 FB68     	 ldr r3,[r7,#12]
 647 0018 DA81     	 strh r2,[r3,#14]
 313:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 314:../Libraries/XMCLib/src/xmc_sdmmc.c ****   return XMC_SDMMC_STATUS_SUCCESS;
 648              	 .loc 1 314 0
 649 001a 0023     	 movs r3,#0
 315:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 650              	 .loc 1 315 0
 651 001c 1846     	 mov r0,r3
 652 001e 1437     	 adds r7,r7,#20
 653              	 .cfi_def_cfa_offset 4
 654 0020 BD46     	 mov sp,r7
 655              	 .cfi_def_cfa_register 13
 656              	 
 657 0022 5DF8047B 	 ldr r7,[sp],#4
 658              	 .cfi_restore 7
 659              	 .cfi_def_cfa_offset 0
 660 0026 7047     	 bx lr
 661              	 .cfi_endproc
 662              	.LFE228:
 664              	 .section .text.XMC_SDMMC_SetDataTransferMode,"ax",%progbits
 665              	 .align 2
 666              	 .global XMC_SDMMC_SetDataTransferMode
 667              	 .thumb
 668              	 .thumb_func
 670              	XMC_SDMMC_SetDataTransferMode:
 671              	.LFB229:
 316:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 317:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Set data transfer mode */
 318:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_SetDataTransferMode(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_TRANSFER_MODE_t *const respo
 319:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 672              	 .loc 1 319 0
 673              	 .cfi_startproc
 674              	 
 675              	 
 676              	 
 677 0000 80B4     	 push {r7}
 678              	 .cfi_def_cfa_offset 4
 679              	 .cfi_offset 7,-4
 680 0002 83B0     	 sub sp,sp,#12
 681              	 .cfi_def_cfa_offset 16
 682 0004 00AF     	 add r7,sp,#0
 683              	 .cfi_def_cfa_register 7
 684 0006 7860     	 str r0,[r7,#4]
 685 0008 3960     	 str r1,[r7]
 320:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_SetDataTransferMode: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sd
 321:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_SetDataTransferMode: Invalid transfer type", XMC_SDMMC_CHECK_TRANSFER_MODE(
 322:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 323:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Block size */
 324:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->BLOCK_SIZE = (uint16_t)(response->block_size);
 686              	 .loc 1 324 0
 687 000a 3B68     	 ldr r3,[r7]
 688 000c 1B68     	 ldr r3,[r3]
 689 000e 9AB2     	 uxth r2,r3
 690 0010 7B68     	 ldr r3,[r7,#4]
 691 0012 9A80     	 strh r2,[r3,#4]
 325:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 326:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Number of blocks */
 327:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->BLOCK_COUNT = (uint16_t)(response->num_blocks);
 692              	 .loc 1 327 0
 693 0014 3B68     	 ldr r3,[r7]
 694 0016 5B68     	 ldr r3,[r3,#4]
 695 0018 9AB2     	 uxth r2,r3
 696 001a 7B68     	 ldr r3,[r7,#4]
 697 001c DA80     	 strh r2,[r3,#6]
 328:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 329:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Type of data transfer: single, infinite, multiple or stop multiple */
 330:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->TRANSFER_MODE = (uint16_t)((sdmmc->TRANSFER_MODE & (uint16_t)~SDMMC_TRANSFER_MODE_MULTI_BL
 698              	 .loc 1 330 0
 699 001e 7B68     	 ldr r3,[r7,#4]
 700 0020 9B89     	 ldrh r3,[r3,#12]
 701 0022 9BB2     	 uxth r3,r3
 702 0024 9BB2     	 uxth r3,r3
 703 0026 23F02003 	 bic r3,r3,#32
 704 002a 9AB2     	 uxth r2,r3
 331:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->type));
 705              	 .loc 1 331 0
 706 002c 3B68     	 ldr r3,[r7]
 707 002e 1B7A     	 ldrb r3,[r3,#8]
 330:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->type));
 708              	 .loc 1 330 0
 709 0030 9BB2     	 uxth r3,r3
 710 0032 1343     	 orrs r3,r3,r2
 711 0034 9BB2     	 uxth r3,r3
 712 0036 9AB2     	 uxth r2,r3
 713 0038 7B68     	 ldr r3,[r7,#4]
 714 003a 9A81     	 strh r2,[r3,#12]
 332:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 333:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /*
 334:../Libraries/XMCLib/src/xmc_sdmmc.c ****    * Clear block count enable bit; that's only valid for
 335:../Libraries/XMCLib/src/xmc_sdmmc.c ****    * a multi-block transfer
 336:../Libraries/XMCLib/src/xmc_sdmmc.c ****    */
 337:../Libraries/XMCLib/src/xmc_sdmmc.c ****   if (response->type == XMC_SDMMC_TRANSFER_MODE_TYPE_SINGLE)
 715              	 .loc 1 337 0
 716 003c 3B68     	 ldr r3,[r7]
 717 003e 1B7A     	 ldrb r3,[r3,#8]
 718 0040 002B     	 cmp r3,#0
 719 0042 07D1     	 bne .L24
 338:../Libraries/XMCLib/src/xmc_sdmmc.c ****   {
 339:../Libraries/XMCLib/src/xmc_sdmmc.c ****     sdmmc->TRANSFER_MODE &= (uint16_t)~SDMMC_TRANSFER_MODE_BLOCK_COUNT_EN_Msk;
 720              	 .loc 1 339 0
 721 0044 7B68     	 ldr r3,[r7,#4]
 722 0046 9B89     	 ldrh r3,[r3,#12]
 723 0048 9BB2     	 uxth r3,r3
 724 004a 23F00203 	 bic r3,r3,#2
 725 004e 9AB2     	 uxth r2,r3
 726 0050 7B68     	 ldr r3,[r7,#4]
 727 0052 9A81     	 strh r2,[r3,#12]
 728              	.L24:
 340:../Libraries/XMCLib/src/xmc_sdmmc.c ****   }
 341:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 342:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Auto CMD configuration */
 343:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->TRANSFER_MODE = (uint16_t)((sdmmc->TRANSFER_MODE & (uint16_t)~SDMMC_TRANSFER_MODE_ACMD_EN_
 729              	 .loc 1 343 0
 730 0054 7B68     	 ldr r3,[r7,#4]
 731 0056 9B89     	 ldrh r3,[r3,#12]
 732 0058 9BB2     	 uxth r3,r3
 733 005a 9BB2     	 uxth r3,r3
 734 005c 23F00C03 	 bic r3,r3,#12
 735 0060 9AB2     	 uxth r2,r3
 344:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->auto_cmd << SDMMC_TRANSFER_MODE_ACMD_EN_Po
 736              	 .loc 1 344 0
 737 0062 3B68     	 ldr r3,[r7]
 738 0064 5B7A     	 ldrb r3,[r3,#9]
 739 0066 9B00     	 lsls r3,r3,#2
 343:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->auto_cmd << SDMMC_TRANSFER_MODE_ACMD_EN_Po
 740              	 .loc 1 343 0
 741 0068 9BB2     	 uxth r3,r3
 742 006a 1343     	 orrs r3,r3,r2
 743 006c 9BB2     	 uxth r3,r3
 744 006e 9AB2     	 uxth r2,r3
 745 0070 7B68     	 ldr r3,[r7,#4]
 746 0072 9A81     	 strh r2,[r3,#12]
 345:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 747              	 .loc 1 345 0
 748 0074 0C37     	 adds r7,r7,#12
 749              	 .cfi_def_cfa_offset 4
 750 0076 BD46     	 mov sp,r7
 751              	 .cfi_def_cfa_register 13
 752              	 
 753 0078 5DF8047B 	 ldr r7,[sp],#4
 754              	 .cfi_restore 7
 755              	 .cfi_def_cfa_offset 0
 756 007c 7047     	 bx lr
 757              	 .cfi_endproc
 758              	.LFE229:
 760 007e 00BF     	 .text
 761              	.Letext0:
 762              	 .file 2 "c:\\dave\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 763              	 .file 3 "c:\\dave\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 764              	 .file 4 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc/xmc_sdmmc.h"
 765              	 .file 5 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc/xmc4_scu.h"
 766              	 .file 6 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/CMSIS/Include/cmsis_gcc.h"
 767              	 .file 7 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/CMSIS/Include/core_cm4.h"
 768              	 .file 8 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_sdmmc.c
    {standard input}:20     .text.XMC_SDMMC_GetPowerStatus:00000000 $t
    {standard input}:25     .text.XMC_SDMMC_GetPowerStatus:00000000 XMC_SDMMC_GetPowerStatus
    {standard input}:66     .text.XMC_SDMMC_Enable:00000000 $t
    {standard input}:71     .text.XMC_SDMMC_Enable:00000000 XMC_SDMMC_Enable
    {standard input}:99     .text.XMC_SDMMC_Enable:00000014 $d
    {standard input}:104    .text.XMC_SDMMC_Disable:00000000 $t
    {standard input}:109    .text.XMC_SDMMC_Disable:00000000 XMC_SDMMC_Disable
    {standard input}:137    .text.XMC_SDMMC_Disable:00000014 $d
    {standard input}:142    .text.XMC_SDMMC_Init:00000000 $t
    {standard input}:147    .text.XMC_SDMMC_Init:00000000 XMC_SDMMC_Init
    {standard input}:211    .text.XMC_SDMMC_EnableEventStatus:00000000 $t
    {standard input}:216    .text.XMC_SDMMC_EnableEventStatus:00000000 XMC_SDMMC_EnableEventStatus
    {standard input}:267    .text.XMC_SDMMC_DisableEventStatus:00000000 $t
    {standard input}:272    .text.XMC_SDMMC_DisableEventStatus:00000000 XMC_SDMMC_DisableEventStatus
    {standard input}:327    .text.XMC_SDMMC_EnableEvent:00000000 $t
    {standard input}:332    .text.XMC_SDMMC_EnableEvent:00000000 XMC_SDMMC_EnableEvent
    {standard input}:384    .text.XMC_SDMMC_DisableEvent:00000000 $t
    {standard input}:389    .text.XMC_SDMMC_DisableEvent:00000000 XMC_SDMMC_DisableEvent
    {standard input}:444    .text.XMC_SDMMC_ClearEvent:00000000 $t
    {standard input}:449    .text.XMC_SDMMC_ClearEvent:00000000 XMC_SDMMC_ClearEvent
    {standard input}:490    .text.XMC_SDMMC_GetEvent:00000000 $t
    {standard input}:495    .text.XMC_SDMMC_GetEvent:00000000 XMC_SDMMC_GetEvent
    {standard input}:562    .text.XMC_SDMMC_GetR2Response:00000000 $t
    {standard input}:567    .text.XMC_SDMMC_GetR2Response:00000000 XMC_SDMMC_GetR2Response
    {standard input}:617    .text.XMC_SDMMC_SendCommand:00000000 $t
    {standard input}:622    .text.XMC_SDMMC_SendCommand:00000000 XMC_SDMMC_SendCommand
    {standard input}:665    .text.XMC_SDMMC_SetDataTransferMode:00000000 $t
    {standard input}:670    .text.XMC_SDMMC_SetDataTransferMode:00000000 XMC_SDMMC_SetDataTransferMode
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_RESET_AssertPeripheralReset
