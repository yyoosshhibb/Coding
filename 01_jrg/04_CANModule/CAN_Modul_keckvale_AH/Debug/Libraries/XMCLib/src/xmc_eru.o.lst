   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_eru.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_ERU_ETL_Init,"ax",%progbits
  20              	 .align 2
  21              	 .global XMC_ERU_ETL_Init
  22              	 .thumb
  23              	 .thumb_func
  25              	XMC_ERU_ETL_Init:
  26              	.LFB141:
  27              	 .file 1 "../Libraries/XMCLib/src/xmc_eru.c"
   1:../Libraries/XMCLib/src/xmc_eru.c **** /**
   2:../Libraries/XMCLib/src/xmc_eru.c ****  * @file xmc_eru.c
   3:../Libraries/XMCLib/src/xmc_eru.c ****  * @date 2016-03-10
   4:../Libraries/XMCLib/src/xmc_eru.c ****  *
   5:../Libraries/XMCLib/src/xmc_eru.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_eru.c ****  * XMClib v2.1.24 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_eru.c ****  *
   9:../Libraries/XMCLib/src/xmc_eru.c ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_eru.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_eru.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_eru.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_eru.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_eru.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_eru.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_eru.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_eru.c ****  * 
  18:../Libraries/XMCLib/src/xmc_eru.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_eru.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_eru.c ****  * 
  21:../Libraries/XMCLib/src/xmc_eru.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_eru.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_eru.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_eru.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_eru.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_eru.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_eru.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_eru.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_eru.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_eru.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_eru.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_eru.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_eru.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_eru.c ****  *
  36:../Libraries/XMCLib/src/xmc_eru.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_eru.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_eru.c ****  *
  39:../Libraries/XMCLib/src/xmc_eru.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_eru.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_eru.c ****  *
  42:../Libraries/XMCLib/src/xmc_eru.c ****  * 2015-06-20:
  43:../Libraries/XMCLib/src/xmc_eru.c ****  *     - Removed definition of GetDriverVersion API <br>
  44:../Libraries/XMCLib/src/xmc_eru.c ****  *
  45:../Libraries/XMCLib/src/xmc_eru.c ****  * 2016-03-10:
  46:../Libraries/XMCLib/src/xmc_eru.c ****  *     - XMC_ERU_ETL_GetEdgeDetection() API is added to get the configured edge for event generatio
  47:../Libraries/XMCLib/src/xmc_eru.c ****  *
  48:../Libraries/XMCLib/src/xmc_eru.c ****  * @endcond
  49:../Libraries/XMCLib/src/xmc_eru.c ****  */
  50:../Libraries/XMCLib/src/xmc_eru.c **** 
  51:../Libraries/XMCLib/src/xmc_eru.c **** /**************************************************************************************************
  52:../Libraries/XMCLib/src/xmc_eru.c ****  * HEADER FILES
  53:../Libraries/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
  54:../Libraries/XMCLib/src/xmc_eru.c **** 
  55:../Libraries/XMCLib/src/xmc_eru.c **** #include "xmc_eru.h"
  56:../Libraries/XMCLib/src/xmc_eru.c **** 
  57:../Libraries/XMCLib/src/xmc_eru.c **** /**************************************************************************************************
  58:../Libraries/XMCLib/src/xmc_eru.c ****  * MACROS
  59:../Libraries/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
  60:../Libraries/XMCLib/src/xmc_eru.c **** 
  61:../Libraries/XMCLib/src/xmc_eru.c **** #define ERU_EXISEL_BITSIZE (4UL) /* Used to set the input for path A and path B based on the channe
  62:../Libraries/XMCLib/src/xmc_eru.c **** #define ERU_EXISEL_INPUT_BITSIZE (2UL)
  63:../Libraries/XMCLib/src/xmc_eru.c **** 
  64:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_INPUT_A(input) \
  65:../Libraries/XMCLib/src/xmc_eru.c ****     ((input == XMC_ERU_ETL_INPUT_A0) || \
  66:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_A1) || \
  67:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_A2) || \
  68:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_A3))
  69:../Libraries/XMCLib/src/xmc_eru.c **** 
  70:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_INPUT_B(input) \
  71:../Libraries/XMCLib/src/xmc_eru.c ****     ((input == XMC_ERU_ETL_INPUT_B0) || \
  72:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_B1) || \
  73:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_B2) || \
  74:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_B3))
  75:../Libraries/XMCLib/src/xmc_eru.c **** 
  76:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_STATUS_FLAG_MODE(mode) \
  77:../Libraries/XMCLib/src/xmc_eru.c ****     ((mode == XMC_ERU_ETL_STATUS_FLAG_MODE_SWCTRL) || \
  78:../Libraries/XMCLib/src/xmc_eru.c ****      (mode == XMC_ERU_ETL_STATUS_FLAG_MODE_HWCTRL))
  79:../Libraries/XMCLib/src/xmc_eru.c **** 
  80:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_EVENT_SOURCE(source) \
  81:../Libraries/XMCLib/src/xmc_eru.c ****     ((source == XMC_ERU_ETL_SOURCE_A)              || \
  82:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_B)              || \
  83:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_A_OR_B)         || \
  84:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_A_AND_B)        || \
  85:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A)          || \
  86:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A_OR_B)     || \
  87:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A_AND_B)    || \
  88:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_B)          || \
  89:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_A_OR_NOT_B)     || \
  90:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_A_AND_NOT_B)    || \
  91:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A_OR_NOT_B) || \
  92:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A_AND_NOT_B))
  93:../Libraries/XMCLib/src/xmc_eru.c **** 
  94:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_TRIGGER_EDGE(edge) \
  95:../Libraries/XMCLib/src/xmc_eru.c ****     ((edge == XMC_ERU_ETL_EDGE_DETECTION_DISABLED) || \
  96:../Libraries/XMCLib/src/xmc_eru.c ****      (edge == XMC_ERU_ETL_EDGE_DETECTION_RISING) || \
  97:../Libraries/XMCLib/src/xmc_eru.c ****      (edge == XMC_ERU_ETL_EDGE_DETECTION_FALLING) || \
  98:../Libraries/XMCLib/src/xmc_eru.c ****      (edge == XMC_ERU_ETL_EDGE_DETECTION_BOTH))
  99:../Libraries/XMCLib/src/xmc_eru.c **** 
 100:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_TRIGGER_CHANNEL(channel) \
 101:../Libraries/XMCLib/src/xmc_eru.c ****     ((channel == XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL0) || \
 102:../Libraries/XMCLib/src/xmc_eru.c ****      (channel == XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL1) || \
 103:../Libraries/XMCLib/src/xmc_eru.c ****      (channel == XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL2) || \
 104:../Libraries/XMCLib/src/xmc_eru.c ****      (channel == XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL3))
 105:../Libraries/XMCLib/src/xmc_eru.c **** 
 106:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_OGU_CHECK_PATTERN_INPUT(input) \
 107:../Libraries/XMCLib/src/xmc_eru.c ****     ((input == XMC_ERU_OGU_PATTERN_DETECTION_INPUT0) || \
 108:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_OGU_PATTERN_DETECTION_INPUT1) || \
 109:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_OGU_PATTERN_DETECTION_INPUT2) || \
 110:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_OGU_PATTERN_DETECTION_INPUT3))
 111:../Libraries/XMCLib/src/xmc_eru.c **** 
 112:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_OGU_CHECK_PERIPHERAL_TRIGGER(trigger) \
 113:../Libraries/XMCLib/src/xmc_eru.c ****     ((trigger == XMC_ERU_OGU_PERIPHERAL_TRIGGER1) || \
 114:../Libraries/XMCLib/src/xmc_eru.c ****      (trigger == XMC_ERU_OGU_PERIPHERAL_TRIGGER2) || \
 115:../Libraries/XMCLib/src/xmc_eru.c ****      (trigger == XMC_ERU_OGU_PERIPHERAL_TRIGGER3))
 116:../Libraries/XMCLib/src/xmc_eru.c **** 
 117:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_OGU_CHECK_SERIVCE_REQUEST(service) \
 118:../Libraries/XMCLib/src/xmc_eru.c ****     ((service == XMC_ERU_OGU_SERVICE_REQUEST_DISABLED) || \
 119:../Libraries/XMCLib/src/xmc_eru.c ****      (service == XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER) || \
 120:../Libraries/XMCLib/src/xmc_eru.c ****      (service == XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER_AND_PATTERN_MATCH) || \
 121:../Libraries/XMCLib/src/xmc_eru.c ****      (service == XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER_AND_PATTERN_MISMATCH))
 122:../Libraries/XMCLib/src/xmc_eru.c ****  
 123:../Libraries/XMCLib/src/xmc_eru.c **** /**************************************************************************************************
 124:../Libraries/XMCLib/src/xmc_eru.c ****  * API IMPLEMENTATION
 125:../Libraries/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
 126:../Libraries/XMCLib/src/xmc_eru.c **** /* Initializes the selected ERU_ETLx channel with the config structure.  */
 127:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
 128:../Libraries/XMCLib/src/xmc_eru.c ****                       const uint8_t channel,
 129:../Libraries/XMCLib/src/xmc_eru.c ****                       const XMC_ERU_ETL_CONFIG_t *const config)
 130:../Libraries/XMCLib/src/xmc_eru.c **** { 
  28              	 .loc 1 130 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32 0000 80B5     	 push {r7,lr}
  33              	 .cfi_def_cfa_offset 8
  34              	 .cfi_offset 7,-8
  35              	 .cfi_offset 14,-4
  36 0002 84B0     	 sub sp,sp,#16
  37              	 .cfi_def_cfa_offset 24
  38 0004 00AF     	 add r7,sp,#0
  39              	 .cfi_def_cfa_register 7
  40 0006 F860     	 str r0,[r7,#12]
  41 0008 0B46     	 mov r3,r1
  42 000a 7A60     	 str r2,[r7,#4]
  43 000c FB72     	 strb r3,[r7,#11]
 131:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 132:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));
 133:../Libraries/XMCLib/src/xmc_eru.c **** 
 134:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ERU_Enable(eru);
  44              	 .loc 1 134 0
  45 000e F868     	 ldr r0,[r7,#12]
  46 0010 FFF7FEFF 	 bl XMC_ERU_Enable
 135:../Libraries/XMCLib/src/xmc_eru.c **** 
 136:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXISEL = (eru->EXISEL & 
  47              	 .loc 1 136 0
  48 0014 FB68     	 ldr r3,[r7,#12]
  49 0016 1A68     	 ldr r2,[r3]
 137:../Libraries/XMCLib/src/xmc_eru.c ****                  ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL
  50              	 .loc 1 137 0
  51 0018 FB7A     	 ldrb r3,[r7,#11]
  52 001a 9B00     	 lsls r3,r3,#2
  53 001c 1946     	 mov r1,r3
  54 001e 0F23     	 movs r3,#15
  55 0020 8B40     	 lsls r3,r3,r1
  56 0022 DB43     	 mvns r3,r3
 136:../Libraries/XMCLib/src/xmc_eru.c ****                  ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL
  57              	 .loc 1 136 0
  58 0024 1A40     	 ands r2,r2,r3
 138:../Libraries/XMCLib/src/xmc_eru.c ****                 (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
  59              	 .loc 1 138 0
  60 0026 7B68     	 ldr r3,[r7,#4]
  61 0028 1B68     	 ldr r3,[r3]
  62 002a F97A     	 ldrb r1,[r7,#11]
  63 002c 8900     	 lsls r1,r1,#2
  64 002e 8B40     	 lsls r3,r3,r1
 137:../Libraries/XMCLib/src/xmc_eru.c ****                  ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL
  65              	 .loc 1 137 0
  66 0030 1A43     	 orrs r2,r2,r3
 136:../Libraries/XMCLib/src/xmc_eru.c ****                  ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL
  67              	 .loc 1 136 0
  68 0032 FB68     	 ldr r3,[r7,#12]
  69 0034 1A60     	 str r2,[r3]
 139:../Libraries/XMCLib/src/xmc_eru.c ****   
 140:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON[channel] = config->raw;
  70              	 .loc 1 140 0
  71 0036 FA7A     	 ldrb r2,[r7,#11]
  72 0038 7B68     	 ldr r3,[r7,#4]
  73 003a 5968     	 ldr r1,[r3,#4]
  74 003c FB68     	 ldr r3,[r7,#12]
  75 003e 0432     	 adds r2,r2,#4
  76 0040 43F82210 	 str r1,[r3,r2,lsl#2]
 141:../Libraries/XMCLib/src/xmc_eru.c **** }
  77              	 .loc 1 141 0
  78 0044 1037     	 adds r7,r7,#16
  79              	 .cfi_def_cfa_offset 8
  80 0046 BD46     	 mov sp,r7
  81              	 .cfi_def_cfa_register 13
  82              	 
  83 0048 80BD     	 pop {r7,pc}
  84              	 .cfi_endproc
  85              	.LFE141:
  87 004a 00BF     	 .section .text.XMC_ERU_OGU_Init,"ax",%progbits
  88              	 .align 2
  89              	 .global XMC_ERU_OGU_Init
  90              	 .thumb
  91              	 .thumb_func
  93              	XMC_ERU_OGU_Init:
  94              	.LFB142:
 142:../Libraries/XMCLib/src/xmc_eru.c **** 
 143:../Libraries/XMCLib/src/xmc_eru.c **** /* Initializes the selected ERU_OGUy channel with the config structure.  */
 144:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_Init(XMC_ERU_t *const eru,
 145:../Libraries/XMCLib/src/xmc_eru.c ****                       const uint8_t channel,
 146:../Libraries/XMCLib/src/xmc_eru.c ****                       const XMC_ERU_OGU_CONFIG_t *const config)
 147:../Libraries/XMCLib/src/xmc_eru.c **** {
  95              	 .loc 1 147 0
  96              	 .cfi_startproc
  97              	 
  98              	 
  99 0000 80B5     	 push {r7,lr}
 100              	 .cfi_def_cfa_offset 8
 101              	 .cfi_offset 7,-8
 102              	 .cfi_offset 14,-4
 103 0002 84B0     	 sub sp,sp,#16
 104              	 .cfi_def_cfa_offset 24
 105 0004 00AF     	 add r7,sp,#0
 106              	 .cfi_def_cfa_register 7
 107 0006 F860     	 str r0,[r7,#12]
 108 0008 0B46     	 mov r3,r1
 109 000a 7A60     	 str r2,[r7,#4]
 110 000c FB72     	 strb r3,[r7,#11]
 148:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 149:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Channel Number", (channel < 4U));
 150:../Libraries/XMCLib/src/xmc_eru.c **** 
 151:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ERU_Enable(eru);
 111              	 .loc 1 151 0
 112 000e F868     	 ldr r0,[r7,#12]
 113 0010 FFF7FEFF 	 bl XMC_ERU_Enable
 152:../Libraries/XMCLib/src/xmc_eru.c **** 
 153:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON[channel] = config->raw;
 114              	 .loc 1 153 0
 115 0014 FA7A     	 ldrb r2,[r7,#11]
 116 0016 7B68     	 ldr r3,[r7,#4]
 117 0018 1968     	 ldr r1,[r3]
 118 001a FB68     	 ldr r3,[r7,#12]
 119 001c 0832     	 adds r2,r2,#8
 120 001e 43F82210 	 str r1,[r3,r2,lsl#2]
 154:../Libraries/XMCLib/src/xmc_eru.c **** }
 121              	 .loc 1 154 0
 122 0022 1037     	 adds r7,r7,#16
 123              	 .cfi_def_cfa_offset 8
 124 0024 BD46     	 mov sp,r7
 125              	 .cfi_def_cfa_register 13
 126              	 
 127 0026 80BD     	 pop {r7,pc}
 128              	 .cfi_endproc
 129              	.LFE142:
 131              	 .section .text.XMC_ERU_ETL_SetInput,"ax",%progbits
 132              	 .align 2
 133              	 .global XMC_ERU_ETL_SetInput
 134              	 .thumb
 135              	 .thumb_func
 137              	XMC_ERU_ETL_SetInput:
 138              	.LFB143:
 155:../Libraries/XMCLib/src/xmc_eru.c **** 
 156:../Libraries/XMCLib/src/xmc_eru.c **** /* Configures the event source for path A and path B, with selected input_a and input_b respectivel
 157:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_SetInput(XMC_ERU_t *const eru,
 158:../Libraries/XMCLib/src/xmc_eru.c ****                           const uint8_t channel,
 159:../Libraries/XMCLib/src/xmc_eru.c ****                           const XMC_ERU_ETL_INPUT_A_t input_a,
 160:../Libraries/XMCLib/src/xmc_eru.c ****                           const XMC_ERU_ETL_INPUT_B_t input_b)
 161:../Libraries/XMCLib/src/xmc_eru.c **** {
 139              	 .loc 1 161 0
 140              	 .cfi_startproc
 141              	 
 142              	 
 143              	 
 144 0000 80B4     	 push {r7}
 145              	 .cfi_def_cfa_offset 4
 146              	 .cfi_offset 7,-4
 147 0002 83B0     	 sub sp,sp,#12
 148              	 .cfi_def_cfa_offset 16
 149 0004 00AF     	 add r7,sp,#0
 150              	 .cfi_def_cfa_register 7
 151 0006 7860     	 str r0,[r7,#4]
 152 0008 0846     	 mov r0,r1
 153 000a 1146     	 mov r1,r2
 154 000c 1A46     	 mov r2,r3
 155 000e 0346     	 mov r3,r0
 156 0010 FB70     	 strb r3,[r7,#3]
 157 0012 0B46     	 mov r3,r1
 158 0014 BB70     	 strb r3,[r7,#2]
 159 0016 1346     	 mov r3,r2
 160 0018 7B70     	 strb r3,[r7,#1]
 162:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 163:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid Channel Number", (channel < 4U));
 164:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid A", XMC_ERU_ETL_CHECK_INPUT_A(input_a));
 165:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid B", XMC_ERU_ETL_CHECK_INPUT_B(input_b));
 166:../Libraries/XMCLib/src/xmc_eru.c **** 
 167:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXISEL = (eru->EXISEL & ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channe
 161              	 .loc 1 167 0
 162 001a 7B68     	 ldr r3,[r7,#4]
 163 001c 1A68     	 ldr r2,[r3]
 164 001e FB78     	 ldrb r3,[r7,#3]
 165 0020 9B00     	 lsls r3,r3,#2
 166 0022 1946     	 mov r1,r3
 167 0024 0F23     	 movs r3,#15
 168 0026 8B40     	 lsls r3,r3,r1
 169 0028 DB43     	 mvns r3,r3
 170 002a 1A40     	 ands r2,r2,r3
 168:../Libraries/XMCLib/src/xmc_eru.c ****                 (((uint32_t)input_a | (uint32_t)(input_b << ERU_EXISEL_INPUT_BITSIZE))  << (channel
 171              	 .loc 1 168 0
 172 002c BB78     	 ldrb r3,[r7,#2]
 173 002e 7978     	 ldrb r1,[r7,#1]
 174 0030 8900     	 lsls r1,r1,#2
 175 0032 0B43     	 orrs r3,r3,r1
 176 0034 F978     	 ldrb r1,[r7,#3]
 177 0036 8900     	 lsls r1,r1,#2
 178 0038 8B40     	 lsls r3,r3,r1
 167:../Libraries/XMCLib/src/xmc_eru.c ****                 (((uint32_t)input_a | (uint32_t)(input_b << ERU_EXISEL_INPUT_BITSIZE))  << (channel
 179              	 .loc 1 167 0
 180 003a 1A43     	 orrs r2,r2,r3
 181 003c 7B68     	 ldr r3,[r7,#4]
 182 003e 1A60     	 str r2,[r3]
 169:../Libraries/XMCLib/src/xmc_eru.c **** }
 183              	 .loc 1 169 0
 184 0040 0C37     	 adds r7,r7,#12
 185              	 .cfi_def_cfa_offset 4
 186 0042 BD46     	 mov sp,r7
 187              	 .cfi_def_cfa_register 13
 188              	 
 189 0044 5DF8047B 	 ldr r7,[sp],#4
 190              	 .cfi_restore 7
 191              	 .cfi_def_cfa_offset 0
 192 0048 7047     	 bx lr
 193              	 .cfi_endproc
 194              	.LFE143:
 196 004a 00BF     	 .section .text.XMC_ERU_ETL_SetSource,"ax",%progbits
 197              	 .align 2
 198              	 .global XMC_ERU_ETL_SetSource
 199              	 .thumb
 200              	 .thumb_func
 202              	XMC_ERU_ETL_SetSource:
 203              	.LFB144:
 170:../Libraries/XMCLib/src/xmc_eru.c **** 
 171:../Libraries/XMCLib/src/xmc_eru.c **** /* Select input path combination along with polarity for event generation by setting (SS, NA, NB) b
 172:../Libraries/XMCLib/src/xmc_eru.c ****    EXICONx(x = [0 to 3]) register */
 173:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_SetSource(XMC_ERU_t *const eru,
 174:../Libraries/XMCLib/src/xmc_eru.c ****                           const uint8_t channel,
 175:../Libraries/XMCLib/src/xmc_eru.c ****                           const XMC_ERU_ETL_SOURCE_t source)
 176:../Libraries/XMCLib/src/xmc_eru.c **** {
 204              	 .loc 1 176 0
 205              	 .cfi_startproc
 206              	 
 207              	 
 208              	 
 209 0000 80B4     	 push {r7}
 210              	 .cfi_def_cfa_offset 4
 211              	 .cfi_offset 7,-4
 212 0002 83B0     	 sub sp,sp,#12
 213              	 .cfi_def_cfa_offset 16
 214 0004 00AF     	 add r7,sp,#0
 215              	 .cfi_def_cfa_register 7
 216 0006 7860     	 str r0,[r7,#4]
 217 0008 0B46     	 mov r3,r1
 218 000a FB70     	 strb r3,[r7,#3]
 219 000c 1346     	 mov r3,r2
 220 000e BB70     	 strb r3,[r7,#2]
 177:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetSource:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 178:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetSource:Invalid Channel Number", (channel < 4U));
 179:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetSource:Invalid Source", XMC_ERU_ETL_CHECK_EVENT_SOURCE(source));
 180:../Libraries/XMCLib/src/xmc_eru.c **** 
 181:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].SS = (uint8_t)source;
 221              	 .loc 1 181 0
 222 0010 FA78     	 ldrb r2,[r7,#3]
 223 0012 BB78     	 ldrb r3,[r7,#2]
 224 0014 03F00F03 	 and r3,r3,#15
 225 0018 D9B2     	 uxtb r1,r3
 226 001a 7B68     	 ldr r3,[r7,#4]
 227 001c 0432     	 adds r2,r2,#4
 228 001e 01F00F01 	 and r1,r1,#15
 229 0022 0902     	 lsls r1,r1,#8
 230 0024 53F82200 	 ldr r0,[r3,r2,lsl#2]
 231 0028 20F47060 	 bic r0,r0,#3840
 232 002c 0143     	 orrs r1,r1,r0
 233 002e 43F82210 	 str r1,[r3,r2,lsl#2]
 182:../Libraries/XMCLib/src/xmc_eru.c **** }
 234              	 .loc 1 182 0
 235 0032 0C37     	 adds r7,r7,#12
 236              	 .cfi_def_cfa_offset 4
 237 0034 BD46     	 mov sp,r7
 238              	 .cfi_def_cfa_register 13
 239              	 
 240 0036 5DF8047B 	 ldr r7,[sp],#4
 241              	 .cfi_restore 7
 242              	 .cfi_def_cfa_offset 0
 243 003a 7047     	 bx lr
 244              	 .cfi_endproc
 245              	.LFE144:
 247              	 .section .text.XMC_ERU_ETL_SetEdgeDetection,"ax",%progbits
 248              	 .align 2
 249              	 .global XMC_ERU_ETL_SetEdgeDetection
 250              	 .thumb
 251              	 .thumb_func
 253              	XMC_ERU_ETL_SetEdgeDetection:
 254              	.LFB145:
 183:../Libraries/XMCLib/src/xmc_eru.c **** 
 184:../Libraries/XMCLib/src/xmc_eru.c **** /* Configure event trigger edge/s by setting (RE, FE) bits of EXICONx(x = [0 to 3]) register.*/
 185:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_SetEdgeDetection(XMC_ERU_t *const eru,
 186:../Libraries/XMCLib/src/xmc_eru.c ****                                   const uint8_t channel,
 187:../Libraries/XMCLib/src/xmc_eru.c ****                                   const XMC_ERU_ETL_EDGE_DETECTION_t edge_detection)
 188:../Libraries/XMCLib/src/xmc_eru.c **** {
 255              	 .loc 1 188 0
 256              	 .cfi_startproc
 257              	 
 258              	 
 259              	 
 260 0000 80B4     	 push {r7}
 261              	 .cfi_def_cfa_offset 4
 262              	 .cfi_offset 7,-4
 263 0002 83B0     	 sub sp,sp,#12
 264              	 .cfi_def_cfa_offset 16
 265 0004 00AF     	 add r7,sp,#0
 266              	 .cfi_def_cfa_register 7
 267 0006 7860     	 str r0,[r7,#4]
 268 0008 0B46     	 mov r3,r1
 269 000a FB70     	 strb r3,[r7,#3]
 270 000c 1346     	 mov r3,r2
 271 000e BB70     	 strb r3,[r7,#2]
 189:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetEdgeDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 190:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetEdgeDetection:Invalid Channel Number", (channel < 4U));
 191:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetEdgeDetection:Invalid Trigger Edge", XMC_ERU_ETL_CHECK_TRIGGER_EDGE(ed
 192:../Libraries/XMCLib/src/xmc_eru.c **** 
 193:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].ED = (uint8_t)edge_detection;
 272              	 .loc 1 193 0
 273 0010 FA78     	 ldrb r2,[r7,#3]
 274 0012 BB78     	 ldrb r3,[r7,#2]
 275 0014 03F00303 	 and r3,r3,#3
 276 0018 D9B2     	 uxtb r1,r3
 277 001a 7B68     	 ldr r3,[r7,#4]
 278 001c 0432     	 adds r2,r2,#4
 279 001e 01F00301 	 and r1,r1,#3
 280 0022 8900     	 lsls r1,r1,#2
 281 0024 53F82200 	 ldr r0,[r3,r2,lsl#2]
 282 0028 20F00C00 	 bic r0,r0,#12
 283 002c 0143     	 orrs r1,r1,r0
 284 002e 43F82210 	 str r1,[r3,r2,lsl#2]
 194:../Libraries/XMCLib/src/xmc_eru.c **** }
 285              	 .loc 1 194 0
 286 0032 0C37     	 adds r7,r7,#12
 287              	 .cfi_def_cfa_offset 4
 288 0034 BD46     	 mov sp,r7
 289              	 .cfi_def_cfa_register 13
 290              	 
 291 0036 5DF8047B 	 ldr r7,[sp],#4
 292              	 .cfi_restore 7
 293              	 .cfi_def_cfa_offset 0
 294 003a 7047     	 bx lr
 295              	 .cfi_endproc
 296              	.LFE145:
 298              	 .section .text.XMC_ERU_ETL_GetEdgeDetection,"ax",%progbits
 299              	 .align 2
 300              	 .global XMC_ERU_ETL_GetEdgeDetection
 301              	 .thumb
 302              	 .thumb_func
 304              	XMC_ERU_ETL_GetEdgeDetection:
 305              	.LFB146:
 195:../Libraries/XMCLib/src/xmc_eru.c **** 
 196:../Libraries/XMCLib/src/xmc_eru.c **** /* Returns the configured event trigger edge/s by reading (RE, FE) bits of EXICONx(x = [0 to 3]) re
 197:../Libraries/XMCLib/src/xmc_eru.c **** XMC_ERU_ETL_EDGE_DETECTION_t XMC_ERU_ETL_GetEdgeDetection(XMC_ERU_t *const eru, const uint8_t chann
 198:../Libraries/XMCLib/src/xmc_eru.c **** {
 306              	 .loc 1 198 0
 307              	 .cfi_startproc
 308              	 
 309              	 
 310              	 
 311 0000 80B4     	 push {r7}
 312              	 .cfi_def_cfa_offset 4
 313              	 .cfi_offset 7,-4
 314 0002 83B0     	 sub sp,sp,#12
 315              	 .cfi_def_cfa_offset 16
 316 0004 00AF     	 add r7,sp,#0
 317              	 .cfi_def_cfa_register 7
 318 0006 7860     	 str r0,[r7,#4]
 319 0008 0B46     	 mov r3,r1
 320 000a FB70     	 strb r3,[r7,#3]
 199:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_GetEdgeDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 200:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_GetEdgeDetection:Invalid Channel Number", (channel < 4U));
 201:../Libraries/XMCLib/src/xmc_eru.c ****   return ((XMC_ERU_ETL_EDGE_DETECTION_t)(eru->EXICON_b[channel].ED));
 321              	 .loc 1 201 0
 322 000c FA78     	 ldrb r2,[r7,#3]
 323 000e 7B68     	 ldr r3,[r7,#4]
 324 0010 0432     	 adds r2,r2,#4
 325 0012 53F82230 	 ldr r3,[r3,r2,lsl#2]
 326 0016 9B08     	 lsrs r3,r3,#2
 327 0018 03F00303 	 and r3,r3,#3
 328 001c DBB2     	 uxtb r3,r3
 202:../Libraries/XMCLib/src/xmc_eru.c **** }
 329              	 .loc 1 202 0
 330 001e 1846     	 mov r0,r3
 331 0020 0C37     	 adds r7,r7,#12
 332              	 .cfi_def_cfa_offset 4
 333 0022 BD46     	 mov sp,r7
 334              	 .cfi_def_cfa_register 13
 335              	 
 336 0024 5DF8047B 	 ldr r7,[sp],#4
 337              	 .cfi_restore 7
 338              	 .cfi_def_cfa_offset 0
 339 0028 7047     	 bx lr
 340              	 .cfi_endproc
 341              	.LFE146:
 343 002a 00BF     	 .section .text.XMC_ERU_ETL_SetStatusFlagMode,"ax",%progbits
 344              	 .align 2
 345              	 .global XMC_ERU_ETL_SetStatusFlagMode
 346              	 .thumb
 347              	 .thumb_func
 349              	XMC_ERU_ETL_SetStatusFlagMode:
 350              	.LFB147:
 203:../Libraries/XMCLib/src/xmc_eru.c **** 
 204:../Libraries/XMCLib/src/xmc_eru.c **** /* Set the status flag bit(FL) in EXICONx(x = [0 to 3]). */
 205:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_SetStatusFlagMode(XMC_ERU_t *const eru,
 206:../Libraries/XMCLib/src/xmc_eru.c ****                                    const uint8_t channel,
 207:../Libraries/XMCLib/src/xmc_eru.c ****                                    const XMC_ERU_ETL_STATUS_FLAG_MODE_t mode)
 208:../Libraries/XMCLib/src/xmc_eru.c **** {
 351              	 .loc 1 208 0
 352              	 .cfi_startproc
 353              	 
 354              	 
 355              	 
 356 0000 80B4     	 push {r7}
 357              	 .cfi_def_cfa_offset 4
 358              	 .cfi_offset 7,-4
 359 0002 83B0     	 sub sp,sp,#12
 360              	 .cfi_def_cfa_offset 16
 361 0004 00AF     	 add r7,sp,#0
 362              	 .cfi_def_cfa_register 7
 363 0006 7860     	 str r0,[r7,#4]
 364 0008 0B46     	 mov r3,r1
 365 000a FB70     	 strb r3,[r7,#3]
 366 000c 1346     	 mov r3,r2
 367 000e BB70     	 strb r3,[r7,#2]
 209:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetStatusFlagMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru))
 210:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetStatusFlagMode:Invalid Channel Number", (channel < 4U));
 211:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetStatusFlagMode:Invalid Status Flag Mode", XMC_ERU_ETL_CHECK_STATUS_FLA
 212:../Libraries/XMCLib/src/xmc_eru.c **** 
 213:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].LD = (uint8_t)mode;
 368              	 .loc 1 213 0
 369 0010 FA78     	 ldrb r2,[r7,#3]
 370 0012 BB78     	 ldrb r3,[r7,#2]
 371 0014 03F00103 	 and r3,r3,#1
 372 0018 D9B2     	 uxtb r1,r3
 373 001a 7B68     	 ldr r3,[r7,#4]
 374 001c 0432     	 adds r2,r2,#4
 375 001e 01F00101 	 and r1,r1,#1
 376 0022 4900     	 lsls r1,r1,#1
 377 0024 53F82200 	 ldr r0,[r3,r2,lsl#2]
 378 0028 20F00200 	 bic r0,r0,#2
 379 002c 0143     	 orrs r1,r1,r0
 380 002e 43F82210 	 str r1,[r3,r2,lsl#2]
 214:../Libraries/XMCLib/src/xmc_eru.c **** }
 381              	 .loc 1 214 0
 382 0032 0C37     	 adds r7,r7,#12
 383              	 .cfi_def_cfa_offset 4
 384 0034 BD46     	 mov sp,r7
 385              	 .cfi_def_cfa_register 13
 386              	 
 387 0036 5DF8047B 	 ldr r7,[sp],#4
 388              	 .cfi_restore 7
 389              	 .cfi_def_cfa_offset 0
 390 003a 7047     	 bx lr
 391              	 .cfi_endproc
 392              	.LFE147:
 394              	 .section .text.XMC_ERU_ETL_EnableOutputTrigger,"ax",%progbits
 395              	 .align 2
 396              	 .global XMC_ERU_ETL_EnableOutputTrigger
 397              	 .thumb
 398              	 .thumb_func
 400              	XMC_ERU_ETL_EnableOutputTrigger:
 401              	.LFB148:
 215:../Libraries/XMCLib/src/xmc_eru.c **** 
 216:../Libraries/XMCLib/src/xmc_eru.c **** /* Configure which Channel of OGUy(Output gating unit y = [0 to 3]) to be mapped by the trigger pul
 217:../Libraries/XMCLib/src/xmc_eru.c ****  * ETLx(Event Trigger Logic, x = [0 to 3]) by setting (OCS and PE) bit fields. */
 218:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_EnableOutputTrigger(XMC_ERU_t *const eru,
 219:../Libraries/XMCLib/src/xmc_eru.c ****                                      const uint8_t channel,
 220:../Libraries/XMCLib/src/xmc_eru.c ****                                      const XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL_t trigger)
 221:../Libraries/XMCLib/src/xmc_eru.c **** {
 402              	 .loc 1 221 0
 403              	 .cfi_startproc
 404              	 
 405              	 
 406              	 
 407 0000 80B4     	 push {r7}
 408              	 .cfi_def_cfa_offset 4
 409              	 .cfi_offset 7,-4
 410 0002 83B0     	 sub sp,sp,#12
 411              	 .cfi_def_cfa_offset 16
 412 0004 00AF     	 add r7,sp,#0
 413              	 .cfi_def_cfa_register 7
 414 0006 7860     	 str r0,[r7,#4]
 415 0008 0B46     	 mov r3,r1
 416 000a FB70     	 strb r3,[r7,#3]
 417 000c 1346     	 mov r3,r2
 418 000e BB70     	 strb r3,[r7,#2]
 222:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_EnableOutputTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru
 223:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_EnableOutputTrigger:Invalid Channel Number", (channel < 4U));
 224:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_EnableOutputTrigger:Invalid Output Channel", XMC_ERU_ETL_CHECK_TRIGGER_CH
 225:../Libraries/XMCLib/src/xmc_eru.c **** 
 226:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].OCS = (uint8_t)trigger;
 419              	 .loc 1 226 0
 420 0010 FA78     	 ldrb r2,[r7,#3]
 421 0012 BB78     	 ldrb r3,[r7,#2]
 422 0014 03F00703 	 and r3,r3,#7
 423 0018 D9B2     	 uxtb r1,r3
 424 001a 7B68     	 ldr r3,[r7,#4]
 425 001c 0432     	 adds r2,r2,#4
 426 001e 01F00701 	 and r1,r1,#7
 427 0022 0901     	 lsls r1,r1,#4
 428 0024 53F82200 	 ldr r0,[r3,r2,lsl#2]
 429 0028 20F07000 	 bic r0,r0,#112
 430 002c 0143     	 orrs r1,r1,r0
 431 002e 43F82210 	 str r1,[r3,r2,lsl#2]
 227:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].PE = (uint8_t)true;
 432              	 .loc 1 227 0
 433 0032 FA78     	 ldrb r2,[r7,#3]
 434 0034 7B68     	 ldr r3,[r7,#4]
 435 0036 0432     	 adds r2,r2,#4
 436 0038 53F82210 	 ldr r1,[r3,r2,lsl#2]
 437 003c 41F00101 	 orr r1,r1,#1
 438 0040 43F82210 	 str r1,[r3,r2,lsl#2]
 228:../Libraries/XMCLib/src/xmc_eru.c **** }
 439              	 .loc 1 228 0
 440 0044 0C37     	 adds r7,r7,#12
 441              	 .cfi_def_cfa_offset 4
 442 0046 BD46     	 mov sp,r7
 443              	 .cfi_def_cfa_register 13
 444              	 
 445 0048 5DF8047B 	 ldr r7,[sp],#4
 446              	 .cfi_restore 7
 447              	 .cfi_def_cfa_offset 0
 448 004c 7047     	 bx lr
 449              	 .cfi_endproc
 450              	.LFE148:
 452 004e 00BF     	 .section .text.XMC_ERU_ETL_DisableOutputTrigger,"ax",%progbits
 453              	 .align 2
 454              	 .global XMC_ERU_ETL_DisableOutputTrigger
 455              	 .thumb
 456              	 .thumb_func
 458              	XMC_ERU_ETL_DisableOutputTrigger:
 459              	.LFB149:
 229:../Libraries/XMCLib/src/xmc_eru.c **** 
 230:../Libraries/XMCLib/src/xmc_eru.c **** /* Disables the trigger pulse generation by clearing the (PE) of the EXICONx(x = [0 to 3]). */
 231:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_DisableOutputTrigger(XMC_ERU_t *const eru, const uint8_t channel)
 232:../Libraries/XMCLib/src/xmc_eru.c **** {
 460              	 .loc 1 232 0
 461              	 .cfi_startproc
 462              	 
 463              	 
 464              	 
 465 0000 80B4     	 push {r7}
 466              	 .cfi_def_cfa_offset 4
 467              	 .cfi_offset 7,-4
 468 0002 83B0     	 sub sp,sp,#12
 469              	 .cfi_def_cfa_offset 16
 470 0004 00AF     	 add r7,sp,#0
 471              	 .cfi_def_cfa_register 7
 472 0006 7860     	 str r0,[r7,#4]
 473 0008 0B46     	 mov r3,r1
 474 000a FB70     	 strb r3,[r7,#3]
 233:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_DisableOutputTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(er
 234:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_DisableOutputTrigger:Invalid Channel Number", (channel < 4U));
 235:../Libraries/XMCLib/src/xmc_eru.c **** 
 236:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].PE = false;
 475              	 .loc 1 236 0
 476 000c FA78     	 ldrb r2,[r7,#3]
 477 000e 7B68     	 ldr r3,[r7,#4]
 478 0010 0432     	 adds r2,r2,#4
 479 0012 53F82210 	 ldr r1,[r3,r2,lsl#2]
 480 0016 21F00101 	 bic r1,r1,#1
 481 001a 43F82210 	 str r1,[r3,r2,lsl#2]
 237:../Libraries/XMCLib/src/xmc_eru.c **** }
 482              	 .loc 1 237 0
 483 001e 0C37     	 adds r7,r7,#12
 484              	 .cfi_def_cfa_offset 4
 485 0020 BD46     	 mov sp,r7
 486              	 .cfi_def_cfa_register 13
 487              	 
 488 0022 5DF8047B 	 ldr r7,[sp],#4
 489              	 .cfi_restore 7
 490              	 .cfi_def_cfa_offset 0
 491 0026 7047     	 bx lr
 492              	 .cfi_endproc
 493              	.LFE149:
 495              	 .section .text.XMC_ERU_OGU_EnablePatternDetection,"ax",%progbits
 496              	 .align 2
 497              	 .global XMC_ERU_OGU_EnablePatternDetection
 498              	 .thumb
 499              	 .thumb_func
 501              	XMC_ERU_OGU_EnablePatternDetection:
 502              	.LFB150:
 238:../Libraries/XMCLib/src/xmc_eru.c **** 
 239:../Libraries/XMCLib/src/xmc_eru.c **** /* Configures ERU_ETLx(x = [0 to 3]) for pattern match detection by setting IPENx(x = [0 to 3) and 
 240:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_EnablePatternDetection(XMC_ERU_t *const eru,
 241:../Libraries/XMCLib/src/xmc_eru.c ****                                         const uint8_t channel,
 242:../Libraries/XMCLib/src/xmc_eru.c ****                                         const XMC_ERU_OGU_PATTERN_DETECTION_INPUT_t input)
 243:../Libraries/XMCLib/src/xmc_eru.c **** {
 503              	 .loc 1 243 0
 504              	 .cfi_startproc
 505              	 
 506              	 
 507              	 
 508 0000 80B4     	 push {r7}
 509              	 .cfi_def_cfa_offset 4
 510              	 .cfi_offset 7,-4
 511 0002 83B0     	 sub sp,sp,#12
 512              	 .cfi_def_cfa_offset 16
 513 0004 00AF     	 add r7,sp,#0
 514              	 .cfi_def_cfa_register 7
 515 0006 7860     	 str r0,[r7,#4]
 516 0008 0B46     	 mov r3,r1
 517 000a FB70     	 strb r3,[r7,#3]
 518 000c 1346     	 mov r3,r2
 519 000e BB70     	 strb r3,[r7,#2]
 244:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePatternDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(
 245:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePatternDetection:Invalid Channel Number", (channel < 4U));
 246:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePatternDetection:Invalid Pattern input", XMC_ERU_OGU_CHECK_PATTERN_
 247:../Libraries/XMCLib/src/xmc_eru.c **** 
 248:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].IPEN = (uint8_t)input;
 520              	 .loc 1 248 0
 521 0010 FA78     	 ldrb r2,[r7,#3]
 522 0012 BB78     	 ldrb r3,[r7,#2]
 523 0014 03F00F03 	 and r3,r3,#15
 524 0018 D9B2     	 uxtb r1,r3
 525 001a 7B68     	 ldr r3,[r7,#4]
 526 001c 0832     	 adds r2,r2,#8
 527 001e 01F00F01 	 and r1,r1,#15
 528 0022 0903     	 lsls r1,r1,#12
 529 0024 53F82200 	 ldr r0,[r3,r2,lsl#2]
 530 0028 20F47040 	 bic r0,r0,#61440
 531 002c 0143     	 orrs r1,r1,r0
 532 002e 43F82210 	 str r1,[r3,r2,lsl#2]
 249:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].GEEN = true;
 533              	 .loc 1 249 0
 534 0032 FA78     	 ldrb r2,[r7,#3]
 535 0034 7B68     	 ldr r3,[r7,#4]
 536 0036 0832     	 adds r2,r2,#8
 537 0038 53F82210 	 ldr r1,[r3,r2,lsl#2]
 538 003c 41F00401 	 orr r1,r1,#4
 539 0040 43F82210 	 str r1,[r3,r2,lsl#2]
 250:../Libraries/XMCLib/src/xmc_eru.c **** }
 540              	 .loc 1 250 0
 541 0044 0C37     	 adds r7,r7,#12
 542              	 .cfi_def_cfa_offset 4
 543 0046 BD46     	 mov sp,r7
 544              	 .cfi_def_cfa_register 13
 545              	 
 546 0048 5DF8047B 	 ldr r7,[sp],#4
 547              	 .cfi_restore 7
 548              	 .cfi_def_cfa_offset 0
 549 004c 7047     	 bx lr
 550              	 .cfi_endproc
 551              	.LFE150:
 553 004e 00BF     	 .section .text.XMC_ERU_OGU_DisablePatternDetection,"ax",%progbits
 554              	 .align 2
 555              	 .global XMC_ERU_OGU_DisablePatternDetection
 556              	 .thumb
 557              	 .thumb_func
 559              	XMC_ERU_OGU_DisablePatternDetection:
 560              	.LFB151:
 251:../Libraries/XMCLib/src/xmc_eru.c **** 
 252:../Libraries/XMCLib/src/xmc_eru.c **** /* Disable the pattern detection by clearing (GEEN) bit. */
 253:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_DisablePatternDetection(XMC_ERU_t *const eru, const uint8_t channel)
 254:../Libraries/XMCLib/src/xmc_eru.c **** {
 561              	 .loc 1 254 0
 562              	 .cfi_startproc
 563              	 
 564              	 
 565              	 
 566 0000 80B4     	 push {r7}
 567              	 .cfi_def_cfa_offset 4
 568              	 .cfi_offset 7,-4
 569 0002 83B0     	 sub sp,sp,#12
 570              	 .cfi_def_cfa_offset 16
 571 0004 00AF     	 add r7,sp,#0
 572              	 .cfi_def_cfa_register 7
 573 0006 7860     	 str r0,[r7,#4]
 574 0008 0B46     	 mov r3,r1
 575 000a FB70     	 strb r3,[r7,#3]
 255:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_DisablePatternDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR
 256:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_DisablePatternDetection:Invalid Channel Number", (channel < 4U));
 257:../Libraries/XMCLib/src/xmc_eru.c **** 
 258:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].GEEN = false;
 576              	 .loc 1 258 0
 577 000c FA78     	 ldrb r2,[r7,#3]
 578 000e 7B68     	 ldr r3,[r7,#4]
 579 0010 0832     	 adds r2,r2,#8
 580 0012 53F82210 	 ldr r1,[r3,r2,lsl#2]
 581 0016 21F00401 	 bic r1,r1,#4
 582 001a 43F82210 	 str r1,[r3,r2,lsl#2]
 259:../Libraries/XMCLib/src/xmc_eru.c **** }
 583              	 .loc 1 259 0
 584 001e 0C37     	 adds r7,r7,#12
 585              	 .cfi_def_cfa_offset 4
 586 0020 BD46     	 mov sp,r7
 587              	 .cfi_def_cfa_register 13
 588              	 
 589 0022 5DF8047B 	 ldr r7,[sp],#4
 590              	 .cfi_restore 7
 591              	 .cfi_def_cfa_offset 0
 592 0026 7047     	 bx lr
 593              	 .cfi_endproc
 594              	.LFE151:
 596              	 .section .text.XMC_ERU_OGU_EnablePeripheralTrigger,"ax",%progbits
 597              	 .align 2
 598              	 .global XMC_ERU_OGU_EnablePeripheralTrigger
 599              	 .thumb
 600              	 .thumb_func
 602              	XMC_ERU_OGU_EnablePeripheralTrigger:
 603              	.LFB152:
 260:../Libraries/XMCLib/src/xmc_eru.c **** 
 261:../Libraries/XMCLib/src/xmc_eru.c **** /* Configures peripheral trigger input, by setting (ISS) bit. */
 262:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_EnablePeripheralTrigger(XMC_ERU_t *const eru,
 263:../Libraries/XMCLib/src/xmc_eru.c ****                                          const uint8_t channel,
 264:../Libraries/XMCLib/src/xmc_eru.c ****                                          const XMC_ERU_OGU_PERIPHERAL_TRIGGER_t peripheral_trigger)
 265:../Libraries/XMCLib/src/xmc_eru.c **** {
 604              	 .loc 1 265 0
 605              	 .cfi_startproc
 606              	 
 607              	 
 608              	 
 609 0000 80B4     	 push {r7}
 610              	 .cfi_def_cfa_offset 4
 611              	 .cfi_offset 7,-4
 612 0002 83B0     	 sub sp,sp,#12
 613              	 .cfi_def_cfa_offset 16
 614 0004 00AF     	 add r7,sp,#0
 615              	 .cfi_def_cfa_register 7
 616 0006 7860     	 str r0,[r7,#4]
 617 0008 0B46     	 mov r3,r1
 618 000a FB70     	 strb r3,[r7,#3]
 619 000c 1346     	 mov r3,r2
 620 000e BB70     	 strb r3,[r7,#2]
 266:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePeripheralTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR
 267:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePeripheralTrigger:Invalid Channel Number", (channel < 4U));
 268:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePeripheralTrigger:Invalid Peripheral Trigger Input", 
 269:../Libraries/XMCLib/src/xmc_eru.c ****               XMC_ERU_OGU_CHECK_PERIPHERAL_TRIGGER(peripheral_trigger));
 270:../Libraries/XMCLib/src/xmc_eru.c **** 
 271:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].ISS = (uint8_t)peripheral_trigger;
 621              	 .loc 1 271 0
 622 0010 FA78     	 ldrb r2,[r7,#3]
 623 0012 BB78     	 ldrb r3,[r7,#2]
 624 0014 03F00303 	 and r3,r3,#3
 625 0018 D9B2     	 uxtb r1,r3
 626 001a 7B68     	 ldr r3,[r7,#4]
 627 001c 0832     	 adds r2,r2,#8
 628 001e 01F00301 	 and r1,r1,#3
 629 0022 53F82200 	 ldr r0,[r3,r2,lsl#2]
 630 0026 20F00300 	 bic r0,r0,#3
 631 002a 0143     	 orrs r1,r1,r0
 632 002c 43F82210 	 str r1,[r3,r2,lsl#2]
 272:../Libraries/XMCLib/src/xmc_eru.c **** }
 633              	 .loc 1 272 0
 634 0030 0C37     	 adds r7,r7,#12
 635              	 .cfi_def_cfa_offset 4
 636 0032 BD46     	 mov sp,r7
 637              	 .cfi_def_cfa_register 13
 638              	 
 639 0034 5DF8047B 	 ldr r7,[sp],#4
 640              	 .cfi_restore 7
 641              	 .cfi_def_cfa_offset 0
 642 0038 7047     	 bx lr
 643              	 .cfi_endproc
 644              	.LFE152:
 646 003a 00BF     	 .section .text.XMC_ERU_OGU_DisablePeripheralTrigger,"ax",%progbits
 647              	 .align 2
 648              	 .global XMC_ERU_OGU_DisablePeripheralTrigger
 649              	 .thumb
 650              	 .thumb_func
 652              	XMC_ERU_OGU_DisablePeripheralTrigger:
 653              	.LFB153:
 273:../Libraries/XMCLib/src/xmc_eru.c **** 
 274:../Libraries/XMCLib/src/xmc_eru.c **** /* Disables event generation based on peripheral trigger by clearing (ISS) bit. */
 275:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_DisablePeripheralTrigger(XMC_ERU_t *const eru,
 276:../Libraries/XMCLib/src/xmc_eru.c ****                                           const uint8_t channel)
 277:../Libraries/XMCLib/src/xmc_eru.c **** {
 654              	 .loc 1 277 0
 655              	 .cfi_startproc
 656              	 
 657              	 
 658              	 
 659 0000 80B4     	 push {r7}
 660              	 .cfi_def_cfa_offset 4
 661              	 .cfi_offset 7,-4
 662 0002 83B0     	 sub sp,sp,#12
 663              	 .cfi_def_cfa_offset 16
 664 0004 00AF     	 add r7,sp,#0
 665              	 .cfi_def_cfa_register 7
 666 0006 7860     	 str r0,[r7,#4]
 667 0008 0B46     	 mov r3,r1
 668 000a FB70     	 strb r3,[r7,#3]
 278:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_DisablePeripheralTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PT
 279:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_DisablePeripheralTrigger:Invalid Channel Number", (channel < 4U));
 280:../Libraries/XMCLib/src/xmc_eru.c **** 
 281:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].ISS = (uint8_t)0;
 669              	 .loc 1 281 0
 670 000c FA78     	 ldrb r2,[r7,#3]
 671 000e 7B68     	 ldr r3,[r7,#4]
 672 0010 0832     	 adds r2,r2,#8
 673 0012 53F82210 	 ldr r1,[r3,r2,lsl#2]
 674 0016 21F00301 	 bic r1,r1,#3
 675 001a 43F82210 	 str r1,[r3,r2,lsl#2]
 282:../Libraries/XMCLib/src/xmc_eru.c **** }
 676              	 .loc 1 282 0
 677 001e 0C37     	 adds r7,r7,#12
 678              	 .cfi_def_cfa_offset 4
 679 0020 BD46     	 mov sp,r7
 680              	 .cfi_def_cfa_register 13
 681              	 
 682 0022 5DF8047B 	 ldr r7,[sp],#4
 683              	 .cfi_restore 7
 684              	 .cfi_def_cfa_offset 0
 685 0026 7047     	 bx lr
 686              	 .cfi_endproc
 687              	.LFE153:
 689              	 .section .text.XMC_ERU_OGU_SetServiceRequestMode,"ax",%progbits
 690              	 .align 2
 691              	 .global XMC_ERU_OGU_SetServiceRequestMode
 692              	 .thumb
 693              	 .thumb_func
 695              	XMC_ERU_OGU_SetServiceRequestMode:
 696              	.LFB154:
 283:../Libraries/XMCLib/src/xmc_eru.c **** 
 284:../Libraries/XMCLib/src/xmc_eru.c **** /* Configures the gating scheme for service request generation by setting (GP) bit. */
 285:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_SetServiceRequestMode(XMC_ERU_t *const eru,
 286:../Libraries/XMCLib/src/xmc_eru.c ****                                        const uint8_t channel,
 287:../Libraries/XMCLib/src/xmc_eru.c ****                                        const XMC_ERU_OGU_SERVICE_REQUEST_t mode)
 288:../Libraries/XMCLib/src/xmc_eru.c **** {
 697              	 .loc 1 288 0
 698              	 .cfi_startproc
 699              	 
 700              	 
 701              	 
 702 0000 80B4     	 push {r7}
 703              	 .cfi_def_cfa_offset 4
 704              	 .cfi_offset 7,-4
 705 0002 83B0     	 sub sp,sp,#12
 706              	 .cfi_def_cfa_offset 16
 707 0004 00AF     	 add r7,sp,#0
 708              	 .cfi_def_cfa_register 7
 709 0006 7860     	 str r0,[r7,#4]
 710 0008 0B46     	 mov r3,r1
 711 000a FB70     	 strb r3,[r7,#3]
 712 000c 1346     	 mov r3,r2
 713 000e BB70     	 strb r3,[r7,#2]
 289:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(e
 290:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Channel Number", (channel < 4U));
 291:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Service Request Mode", XMC_ERU_OGU_CHECK_SE
 292:../Libraries/XMCLib/src/xmc_eru.c **** 
 293:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].GP = (uint8_t)mode;
 714              	 .loc 1 293 0
 715 0010 FA78     	 ldrb r2,[r7,#3]
 716 0012 BB78     	 ldrb r3,[r7,#2]
 717 0014 03F00303 	 and r3,r3,#3
 718 0018 D9B2     	 uxtb r1,r3
 719 001a 7B68     	 ldr r3,[r7,#4]
 720 001c 0832     	 adds r2,r2,#8
 721 001e 01F00301 	 and r1,r1,#3
 722 0022 0901     	 lsls r1,r1,#4
 723 0024 53F82200 	 ldr r0,[r3,r2,lsl#2]
 724 0028 20F03000 	 bic r0,r0,#48
 725 002c 0143     	 orrs r1,r1,r0
 726 002e 43F82210 	 str r1,[r3,r2,lsl#2]
 294:../Libraries/XMCLib/src/xmc_eru.c **** 
 295:../Libraries/XMCLib/src/xmc_eru.c **** }
 727              	 .loc 1 295 0
 728 0032 0C37     	 adds r7,r7,#12
 729              	 .cfi_def_cfa_offset 4
 730 0034 BD46     	 mov sp,r7
 731              	 .cfi_def_cfa_register 13
 732              	 
 733 0036 5DF8047B 	 ldr r7,[sp],#4
 734              	 .cfi_restore 7
 735              	 .cfi_def_cfa_offset 0
 736 003a 7047     	 bx lr
 737              	 .cfi_endproc
 738              	.LFE154:
 740              	 .text
 741              	.Letext0:
 742              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 743              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 744              	 .file 4 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc/xmc_eru.h"
 745              	 .file 5 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/CMSIS/Include/cmsis_gcc.h"
 746              	 .file 6 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_eru.c
    {standard input}:20     .text.XMC_ERU_ETL_Init:00000000 $t
    {standard input}:25     .text.XMC_ERU_ETL_Init:00000000 XMC_ERU_ETL_Init
    {standard input}:88     .text.XMC_ERU_OGU_Init:00000000 $t
    {standard input}:93     .text.XMC_ERU_OGU_Init:00000000 XMC_ERU_OGU_Init
    {standard input}:132    .text.XMC_ERU_ETL_SetInput:00000000 $t
    {standard input}:137    .text.XMC_ERU_ETL_SetInput:00000000 XMC_ERU_ETL_SetInput
    {standard input}:197    .text.XMC_ERU_ETL_SetSource:00000000 $t
    {standard input}:202    .text.XMC_ERU_ETL_SetSource:00000000 XMC_ERU_ETL_SetSource
    {standard input}:248    .text.XMC_ERU_ETL_SetEdgeDetection:00000000 $t
    {standard input}:253    .text.XMC_ERU_ETL_SetEdgeDetection:00000000 XMC_ERU_ETL_SetEdgeDetection
    {standard input}:299    .text.XMC_ERU_ETL_GetEdgeDetection:00000000 $t
    {standard input}:304    .text.XMC_ERU_ETL_GetEdgeDetection:00000000 XMC_ERU_ETL_GetEdgeDetection
    {standard input}:344    .text.XMC_ERU_ETL_SetStatusFlagMode:00000000 $t
    {standard input}:349    .text.XMC_ERU_ETL_SetStatusFlagMode:00000000 XMC_ERU_ETL_SetStatusFlagMode
    {standard input}:395    .text.XMC_ERU_ETL_EnableOutputTrigger:00000000 $t
    {standard input}:400    .text.XMC_ERU_ETL_EnableOutputTrigger:00000000 XMC_ERU_ETL_EnableOutputTrigger
    {standard input}:453    .text.XMC_ERU_ETL_DisableOutputTrigger:00000000 $t
    {standard input}:458    .text.XMC_ERU_ETL_DisableOutputTrigger:00000000 XMC_ERU_ETL_DisableOutputTrigger
    {standard input}:496    .text.XMC_ERU_OGU_EnablePatternDetection:00000000 $t
    {standard input}:501    .text.XMC_ERU_OGU_EnablePatternDetection:00000000 XMC_ERU_OGU_EnablePatternDetection
    {standard input}:554    .text.XMC_ERU_OGU_DisablePatternDetection:00000000 $t
    {standard input}:559    .text.XMC_ERU_OGU_DisablePatternDetection:00000000 XMC_ERU_OGU_DisablePatternDetection
    {standard input}:597    .text.XMC_ERU_OGU_EnablePeripheralTrigger:00000000 $t
    {standard input}:602    .text.XMC_ERU_OGU_EnablePeripheralTrigger:00000000 XMC_ERU_OGU_EnablePeripheralTrigger
    {standard input}:647    .text.XMC_ERU_OGU_DisablePeripheralTrigger:00000000 $t
    {standard input}:652    .text.XMC_ERU_OGU_DisablePeripheralTrigger:00000000 XMC_ERU_OGU_DisablePeripheralTrigger
    {standard input}:690    .text.XMC_ERU_OGU_SetServiceRequestMode:00000000 $t
    {standard input}:695    .text.XMC_ERU_OGU_SetServiceRequestMode:00000000 XMC_ERU_OGU_SetServiceRequestMode
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_ERU_Enable
