   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_dma.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_DMA_GetEventStatus,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_DMA_GetEventStatus:
  25              	.LFB137:
  26              	 .file 1 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc/xmc_dma.h"
   1:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /**
   2:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * @file xmc_dma.h
   3:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * @date 2018-09-18
   4:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
   5:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * @cond
   6:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  **************************************************************************************************
   7:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * XMClib v2.1.24 - XMC Peripheral Driver Library
   8:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
   9:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * All rights reserved.                        
  11:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *                                             
  12:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * following conditions are met:   
  14:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *                                                                              
  15:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * disclaimer.                        
  17:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * 
  18:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * 
  21:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *                                                                              
  24:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *                                                                              
  32:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  **************************************************************************************************
  35:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
  36:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * Change History
  37:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * --------------
  38:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
  39:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * 2015-02-20:
  40:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Initial <br>
  41:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
  42:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * 2015-06-20:
  43:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Add the declarations for the following APIs: <br>
  44:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *       XMC_DMA_DisableRequestLine, XMC_DMA_ClearRequestLine, <br>
  45:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *       XMC_DMA_CH_ClearSourcePeripheralRequest, <br>
  46:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *       XMC_DMA_CH_ClearDestinationPeripheralRequest <br>
  47:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Documentation updates <br>
  48:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  49:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
  50:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * 2016-10-28:
  51:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Fix documentation on maximum block size
  52:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
  53:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * 2017-09-28:
  54:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Improved documentation and added XMC_DMA_CH_EnableFifo() and XMC_DMA_CH_DisableFifo()
  55:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
  56:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * 2018-09-18:
  57:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Added XMC_DMA_CH_GetTransferredData()
  58:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
  59:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * @endcond
  60:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  */
  61:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
  62:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** #ifndef XMC_DMA_H
  63:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA_H
  64:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
  65:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
  66:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * HEADER FILES
  67:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
  68:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
  69:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** #include "xmc_common.h"
  70:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
  71:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (GPDMA0)
  72:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
  73:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** #include "xmc_dma_map.h"
  74:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
  75:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /**
  76:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * @addtogroup XMClib XMC Peripheral Library
  77:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * @{
  78:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  */
  79:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
  80:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /**
  81:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * @addtogroup DMA
  82:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * @brief General purpose DMA (GPDMA) driver for the XMC4000 microcontroller family
  83:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
  84:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * The GPDMA is a highly configurable DMA controller that allows high-speed data transfers
  85:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * between peripherals and memories. Complex data transfers can be done with minimal
  86:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * intervention of the processor, making CPU available for other operations.
  87:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
  88:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * GPDMA provides extensive support for XMC microcontroller peripherals like A/D, D/A
  89:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * converters and timers. Data transfers through communication interfaces (USIC) using the
  90:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * GPDMA increase efficiency and parallelism for real-time applications.
  91:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
  92:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * The DMA low level driver provides functions to configure and initialize the GPDMA
  93:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * hardware peripheral.
  94:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * @{
  95:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  */
  96:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
  97:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
  98:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * MACROS
  99:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 100:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 101:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (GPDMA0)
 102:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA0 ((XMC_DMA_t *)GPDMA0_CH0_BASE) /**< DMA module 0 */
 103:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA0_NUM_CHANNELS 8
 104:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 105:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 106:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (GPDMA1)
 107:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA1 ((XMC_DMA_t *)GPDMA1_CH0_BASE) /**< DMA module 1, only available in XMC45xx series
 108:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA1_NUM_CHANNELS 4
 109:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 110:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 111:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 112:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * ENUMS
 113:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 114:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 115:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /**
 116:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA transfer types
 117:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  */
 118:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_TYPE
 119:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** {
 120:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK,                                /**< Single block */
 121:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD, /**< Multi-block: src addre
 122:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS, /**< Multi-block: src addre
 123:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD,     /**< Multi-block: src addre
 124:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED, /**< Multi-block: src addre
 125:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED,     /**< Multi-block: src addre
 126:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS, /**< Multi-block: src addre
 127:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD,     /**< Multi-block: src addre
 128:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED      /**< Multi-block: src addre
 129:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_TYPE_t;
 130:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 131:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /**
 132:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA transfer flow modes
 133:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  */
 134:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_FLOW
 135:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** {
 136:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2M_DMA    = 0x0UL, /**< Memory to memory (DMA flow controller) */
 137:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA    = 0x1UL, /**< Memory to peripheral (DMA flow controller) */
 138:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA    = 0x2UL, /**< Peripheral to memory (DMA flow controller) */
 139:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA    = 0x3UL, /**< Peripheral to peripheral (DMA flow controller) 
 140:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2M_PER    = 0x4UL, /**< Peripheral to memory (Peripheral flow controlle
 141:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_SRCPER = 0x5UL, /**< Peripheral to peripheral (Source peripheral flo
 142:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2P_PER    = 0x6UL, /**< Memory to peripheral (Peripheral flow controlle
 143:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_DSTPER = 0x7UL  /**< Peripheral to peripheral (Destination periphera
 144:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_FLOW_t;
 145:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 146:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /**
 147:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * Valid burst length values
 148:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  */
 149:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_BURST_LENGTH
 150:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** {
 151:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_1 = 0x0UL, /**< Burst length: 1 word */
 152:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_4 = 0x1UL, /**< Burst length: 4 words */
 153:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_8 = 0x2UL  /**< Burst length: 8 words */
 154:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_BURST_LENGTH_t;
 155:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 156:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /**
 157:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * Valid transfer width values
 158:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  */
 159:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_WIDTH
 160:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** {
 161:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_8  = 0x0UL, /**< 8-bit transfer width */
 162:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_16 = 0x1UL, /**< 16-bit transfer width */
 163:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_32 = 0x2UL  /**< 32-bit transfer width */
 164:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_WIDTH_t;
 165:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 166:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /**
 167:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA address count mode
 168:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  */
 169:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_ADDRESS_COUNT_MODE
 170:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** {
 171:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_INCREMENT = 0x0UL, /**< Address count mode: increment */
 172:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_DECREMENT = 0x1UL, /**< Address count mode: decrement */
 173:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_NO_CHANGE = 0x2UL  /**< Address count mode: no change */
 174:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_ADDRESS_COUNT_MODE_t;
 175:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 176:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /**
 177:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel priorities
 178:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  */
 179:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_PRIORITY
 180:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** {
 181:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_0 = 0x0UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 0 (low) *
 182:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_1 = 0x1UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 1 */
 183:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_2 = 0x2UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 2 */
 184:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_3 = 0x3UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 3 */
 185:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_4 = 0x4UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 4 */
 186:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_5 = 0x5UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 5 */
 187:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_6 = 0x6UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 6 */
 188:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_7 = 0x7UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos  /**< DMA channel priority 7 (high) 
 189:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_PRIORITY_t;
 190:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 191:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /**
 192:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * Source handshake interface
 193:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  */
 194:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_SRC_HANDSHAKING
 195:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** {
 196:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE = 0x0UL << GPDMA0_CH_CFGL_HS_SEL_SRC_Pos, /**< Source: hardwa
 197:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_SOFTWARE = 0x1UL << GPDMA0_CH_CFGL_HS_SEL_SRC_Pos  /**< Source: softwa
 198:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_SRC_HANDSHAKING_t;
 199:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 200:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /**
 201:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * Destination handshake interface
 202:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  */
 203:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_DST_HANDSHAKING
 204:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** {
 205:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_HARDWARE = 0x0UL << GPDMA0_CH_CFGL_HS_SEL_DST_Pos, /**< Destination: h
 206:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_SOFTWARE = 0x1UL << GPDMA0_CH_CFGL_HS_SEL_DST_Pos  /**< Destination: s
 207:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_DST_HANDSHAKING_t;
 208:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 209:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /**
 210:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA hardware handshaking interface
 211:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * Hardware handshaking available only if DMA is flow controller
 212:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  */
 213:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_HARDWARE_HANDSHAKING_IF
 214:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** {
 215:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_0 = 0x0UL, /**< Hardware handshaking interface 0 */
 216:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_1 = 0x1UL, /**< Hardware handshaking interface 1 */
 217:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_2 = 0x2UL, /**< Hardware handshaking interface 2 */
 218:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_3 = 0x3UL, /**< Hardware handshaking interface 3 */
 219:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_4 = 0x4UL, /**< Hardware handshaking interface 4 */
 220:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_5 = 0x5UL, /**< Hardware handshaking interface 5 */
 221:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_6 = 0x6UL, /**< Hardware handshaking interface 6 */
 222:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_7 = 0x7UL  /**< Hardware handshaking interface 7 */
 223:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_t;
 224:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 225:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /**
 226:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA events
 227:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  */
 228:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_EVENT
 229:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** {
 230:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_TRANSFER_COMPLETE        = 0x1UL, /**< Transfer complete event */
 231:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE  = 0x2UL, /**< Block transfer complete event */
 232:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE = 0x4UL, /**< Source transaction complete event */
 233:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE = 0x8UL, /**< Destination transaction complete event */
 234:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_ERROR                    = 0x10UL /**< DMA error event */
 235:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_EVENT_t;
 236:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 237:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /**
 238:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * Transaction types
 239:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  */
 240:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSACTION_TYPE
 241:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** {
 242:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSACTION_TYPE_SINGLE, /**< Single DMA transaction */
 243:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSACTION_TYPE_BURST   /**< Burst transaction */
 244:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSACTION_TYPE_t;
 245:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 246:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /**
 247:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel status values
 248:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  */
 249:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_STATUS
 250:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** {
 251:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_OK,    /**< DMA status OK */
 252:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_ERROR, /**< DMA status error */
 253:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_BUSY   /**< DMA is busy */
 254:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_STATUS_t;
 255:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 256:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 257:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * DATA STRUCTURES
 258:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 259:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 260:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /**
 261:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel configuration structure <br>
 262:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
 263:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * The structure represents a collection of all hardware registers used
 264:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * to configure the DMA channel. It is contained within the ::XMC_DMA_t
 265:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * structure. It's registers can be used to configure DMA transfer details
 266:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * like source address, destination address, block size, incrementation
 267:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * modes and the like.
 268:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  */
 269:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  
 270:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** typedef struct {
 271:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SAR;
 272:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED0;
 273:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DAR;
 274:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED1;
 275:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  LLP;
 276:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED2;
 277:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CTLL;
 278:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CTLH;
 279:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SSTAT;
 280:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED3;
 281:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DSTAT;
 282:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED4;
 283:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SSTATAR;
 284:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED5;
 285:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DSTATAR;
 286:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED6;
 287:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CFGL;
 288:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CFGH;
 289:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SGR;
 290:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED7;
 291:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DSR;
 292:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED8;
 293:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** } GPDMA_CH_t;
 294:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 295:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /**
 296:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA device structure <br>
 297:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
 298:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * The structure represents a collection of all hardware registers used
 299:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * to configure the GPDMA peripheral on the XMC4000 series of microcontrollers.
 300:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * The registers can be accessed with ::XMC_DMA0 and ::XMC_DMA1.
 301:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  */
 302:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** typedef struct {
 303:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   GPDMA_CH_t CH[8];
 304:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 305:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  RAWCHEV[10];
 306:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  STATUSCHEV[10];
 307:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  MASKCHEV[10];
 308:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __O  uint32_t  CLEARCHEV[10];
 309:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  STATUSGLEV;
 310:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED20;
 311:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  REQSRCREG;
 312:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED21;
 313:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  REQDSTREG;
 314:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED22;
 315:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SGLREQSRCREG;
 316:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED23;
 317:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SGLREQDSTREG;
 318:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED24;
 319:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  LSTSRCREG;
 320:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED25;
 321:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  LSTDSTREG;
 322:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED26;
 323:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DMACFGREG;
 324:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED27;
 325:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CHENREG;
 326:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED28;
 327:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  ID;
 328:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED29[19];
 329:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  TYPE;
 330:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  VERSION;
 331:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_t;
 332:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 333:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /* Anonymous structure/union guard start */
 334:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (__CC_ARM)
 335:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   #pragma push
 336:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   #pragma anon_unions
 337:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** #elif defined (__TASKING__)
 338:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   #pragma warning 586
 339:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 340:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 341:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /**
 342:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel linked list item.
 343:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * Note: Needs to be word aligned
 344:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  */
 345:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** typedef struct XMC_DMA_LLI
 346:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** {
 347:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t src_addr;                            /**< Source address */
 348:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t dst_addr;                            /**< Destination address */
 349:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   struct XMC_DMA_LLI *llp;                      /**< Linked list pointer of type XMC_DMA_LLI_t */
 350:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   union
 351:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   {
 352:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****     struct
 353:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****     {
 354:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_interrupt: 1;             /**< Enable interrupts? */
 355:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_transfer_width: 3;           /**< Destination transfer width (:: XMC_DMA_CH_TRAN
 356:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_transfer_width: 3;           /**< Source transfer width (:: XMC_DMA_CH_TRANSFER_
 357:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_address_count_mode: 2;       /**< Destination address count mode (:: XMC_DMA_CH_
 358:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_address_count_mode: 2;       /**< Source address count mode (:: XMC_DMA_CH_ADDRE
 359:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_burst_length: 3;             /**< Destination burst length (:: XMC_DMA_CH_BURST_
 360:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_burst_length: 3;             /**< Source burst length (:: XMC_DMA_CH_BURST_LENGT
 361:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_src_gather: 1;            /**< Enable source gather? */
 362:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_dst_scatter: 1;           /**< Enable destination scatter? */
 363:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 1;                             /**< Reserved bits */
 364:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t transfer_flow: 3;                /**< DMA transfer flow (:: XMC_DMA_CH_TRANSFER_FLOW
 365:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 4;                             /**< Reserved bits */
 366:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_dst_linked_list: 1;       /**< Enable destination linked list? */
 367:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_src_linked_list: 1;       /**< Enable source linked list? */
 368:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 3;                             /**< Reserved bits */
 369:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****     };
 370:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****     uint32_t control;
 371:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   };
 372:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t block_size;                          /**< Transfer block size */
 373:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t src_status;                          /**< Source status */
 374:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t dst_status;                          /**< Destination status */
 375:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_LLI_t;
 376:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 377:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** typedef XMC_DMA_LLI_t **XMC_DMA_LIST_t;         /**< Type definition for a linked list pointer */
 378:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 379:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /**
 380:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel configuration structure
 381:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  */
 382:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** typedef struct XMC_DMA_CH_CONFIG
 383:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** {
 384:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   union
 385:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   {
 386:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****     uint32_t control;
 387:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****     struct
 388:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****     {
 389:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_interrupt: 1;             /**< Enable interrupts? */
 390:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_transfer_width: 3;           /**< Destination transfer width (:: XMC_DMA_CH_TRAN
 391:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_transfer_width: 3;           /**< Source transfer width (:: XMC_DMA_CH_TRANSFER_
 392:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_address_count_mode: 2;       /**< Destination address count mode (:: XMC_DMA_CH_
 393:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_address_count_mode: 2;       /**< Source address count mode (:: XMC_DMA_CH_ADDRE
 394:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_burst_length: 3;             /**< Destination burst length (:: XMC_DMA_CH_BURST_
 395:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_burst_length: 3;             /**< Source burst length (:: XMC_DMA_CH_BURST_LENGT
 396:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_src_gather: 1;            /**< Enable source gather? */
 397:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_dst_scatter: 1;           /**< Enable destination scatter? */
 398:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 1;                             
 399:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t transfer_flow: 3;                /**< DMA transfer flow (:: XMC_DMA_CH_TRANSFER_FLOW
 400:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 9;                             
 401:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****     };
 402:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   };
 403:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 404:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t src_addr;                            /**< Source address */
 405:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t dst_addr;                            /**< Destination address */
 406:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_LLI_t *linked_list_pointer;           /**< Linked list pointer */
 407:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   
 408:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   union
 409:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   {
 410:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****     uint32_t src_gather_control;
 411:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****     struct
 412:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****     {
 413:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_gather_interval: 20;         /**< Source gather interval */
 414:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_gather_count: 12;            /**< Source gather count */
 415:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****     };
 416:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   };
 417:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 418:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   union
 419:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   {
 420:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****     uint32_t dst_scatter_control;
 421:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****     struct
 422:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****     {
 423:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_scatter_interval: 20;        /**< Destination scatter interval */
 424:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_scatter_count: 12;           /**< Destination scatter count */
 425:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****     };
 426:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   };
 427:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   
 428:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   uint16_t block_size;                          /**< Block size for DMA controlled transfers [max. 
 429:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_t transfer_type;     /**< DMA transfer type (:: XMC_DMA_CH_TRANSFER_TYPE
 430:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_t priority;               /**< DMA channel priority (::XMC_DMA_CH_PRIORITY_t)
 431:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_t src_handshaking; /**< DMA source handshaking interface (:: XMC_DMA_C
 432:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   uint8_t src_peripheral_request;               /**< Source peripheral request. See xmc_dma_map.h *
 433:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_t dst_handshaking; /**< DMA destination handshaking interface (:: XMC_
 434:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   uint8_t dst_peripheral_request;               /**< Destination peripheral request. See xmc_dma_ma
 435:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_CONFIG_t;
 436:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 437:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /* Anonymous structure/union guard end */
 438:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (__CC_ARM)
 439:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   #pragma pop
 440:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** #elif defined (__TASKING__)
 441:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   #pragma warning restore
 442:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 443:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 444:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /**
 445:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel event handler
 446:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  */
 447:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** typedef void (*XMC_DMA_CH_EVENT_HANDLER_t)(XMC_DMA_CH_EVENT_t event);
 448:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 449:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 450:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * API PROTOTYPES
 451:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 452:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 453:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** #ifdef __cplusplus
 454:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** extern "C" {
 455:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 456:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 457:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /**
 458:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 459:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * @return None
 460:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
 461:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 462:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * Initialize the GPDMA peripheral <br>
 463:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
 464:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 465:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * The function initializes a prioritized list of DMA channels and enables the GPDMA
 466:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * peripheral.
 467:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  */
 468:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** void XMC_DMA_Init(XMC_DMA_t *const dma);
 469:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 470:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /**
 471:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 472:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * @return None
 473:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
 474:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 475:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * Enable the GPDMA peripheral <br>
 476:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
 477:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 478:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * The function de-asserts the GPDMA peripheral reset. In addition, it un-gates the
 479:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * GPDMA0 peripheral clock for all XMC4000 series of microcontrollers with an exception
 480:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * of the XMC4500 microcontroller. The XMC4500 doesn't support gating.
 481:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  */
 482:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** void XMC_DMA_Enable(XMC_DMA_t *const dma);
 483:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 484:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /**
 485:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 486:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * @return None
 487:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
 488:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 489:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * Disable the GPDMA peripheral <br>
 490:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
 491:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 492:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * The function asserts the GPDMA peripheral reset. In addition, it gates the GPDMA0
 493:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * peripheral clock for all XMC4000 series of microcontrollers with an exception of
 494:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * the XMC4500 microcontroller. The XMC4500 doesn't support gating.
 495:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  */
 496:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** void XMC_DMA_Disable(XMC_DMA_t *const dma);
 497:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 498:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /**
 499:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 500:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * @return bool
 501:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
 502:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 503:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * Check if the GPDMA peripheral is enabled <br>
 504:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
 505:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 506:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * For the XMC4500 microcontroller, the function checks if the GPDMA module is asserted
 507:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * and returns "false" if it is. In addition, it also checks if the clock is gated
 508:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * for the other XMC4000 series of microcontrollers. It returns "true" if the peripheral
 509:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * is enabled.
 510:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  */
 511:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma);
 512:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 513:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /**
 514:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 515:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA event status
 516:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
 517:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 518:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * Get DMA event status <br>
 519:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
 520:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 521:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns the collective (global) status of GPDMA events. The following
 522:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * lists the various DMA events and their corresponding enumeration. The return value
 523:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * of this function may then be masked with any one of the following enumerations to
 524:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * obtain the status of individual DMA events. <br>
 525:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
 526:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 527:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * Transfer complete -> ::XMC_DMA_CH_EVENT_TRANSFER_COMPLETE                       <br>
 528:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * Block transfer complete -> ::XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE           <br>
 529:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * Source transaction complete -> ::XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE      <br>
 530:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * Destination transaction complete -> ::XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE <br>
 531:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA error event -> ::XMC_DMA_CH_EVENT_ERROR                                     <br>
 532:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  */
 533:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetEventStatus(XMC_DMA_t *const dma)
 534:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** {
  27              	 .loc 1 534 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	 .cfi_def_cfa_offset 4
  34              	 .cfi_offset 7,-4
  35 0002 83B0     	 sub sp,sp,#12
  36              	 .cfi_def_cfa_offset 16
  37 0004 00AF     	 add r7,sp,#0
  38              	 .cfi_def_cfa_register 7
  39 0006 7860     	 str r0,[r7,#4]
 535:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSGLEV);
  40              	 .loc 1 535 0
  41 0008 7B68     	 ldr r3,[r7,#4]
  42 000a D3F86033 	 ldr r3,[r3,#864]
 536:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** }
  43              	 .loc 1 536 0
  44 000e 1846     	 mov r0,r3
  45 0010 0C37     	 adds r7,r7,#12
  46              	 .cfi_def_cfa_offset 4
  47 0012 BD46     	 mov sp,r7
  48              	 .cfi_def_cfa_register 13
  49              	 
  50 0014 5DF8047B 	 ldr r7,[sp],#4
  51              	 .cfi_restore 7
  52              	 .cfi_def_cfa_offset 0
  53 0018 7047     	 bx lr
  54              	 .cfi_endproc
  55              	.LFE137:
  57 001a 00BF     	 .section .text.XMC_DMA_GetChannelsTransferCompleteStatus,"ax",%progbits
  58              	 .align 2
  59              	 .thumb
  60              	 .thumb_func
  62              	XMC_DMA_GetChannelsTransferCompleteStatus:
  63              	.LFB138:
 537:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 538:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /**
 539:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 540:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA transfer complete status
 541:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
 542:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 543:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * Get transfer complete status <br>
 544:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
 545:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 546:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns GPDMA transfer complete interrupt status. <br>
 547:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  */
 548:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsTransferCompleteStatus(XMC_DMA_t *const dma)
 549:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** {
  64              	 .loc 1 549 0
  65              	 .cfi_startproc
  66              	 
  67              	 
  68              	 
  69 0000 80B4     	 push {r7}
  70              	 .cfi_def_cfa_offset 4
  71              	 .cfi_offset 7,-4
  72 0002 83B0     	 sub sp,sp,#12
  73              	 .cfi_def_cfa_offset 16
  74 0004 00AF     	 add r7,sp,#0
  75              	 .cfi_def_cfa_register 7
  76 0006 7860     	 str r0,[r7,#4]
 550:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[0]);
  77              	 .loc 1 550 0
  78 0008 7B68     	 ldr r3,[r7,#4]
  79 000a D3F8E832 	 ldr r3,[r3,#744]
 551:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** }
  80              	 .loc 1 551 0
  81 000e 1846     	 mov r0,r3
  82 0010 0C37     	 adds r7,r7,#12
  83              	 .cfi_def_cfa_offset 4
  84 0012 BD46     	 mov sp,r7
  85              	 .cfi_def_cfa_register 13
  86              	 
  87 0014 5DF8047B 	 ldr r7,[sp],#4
  88              	 .cfi_restore 7
  89              	 .cfi_def_cfa_offset 0
  90 0018 7047     	 bx lr
  91              	 .cfi_endproc
  92              	.LFE138:
  94 001a 00BF     	 .section .text.XMC_DMA_GetChannelsBlockCompleteStatus,"ax",%progbits
  95              	 .align 2
  96              	 .thumb
  97              	 .thumb_func
  99              	XMC_DMA_GetChannelsBlockCompleteStatus:
 100              	.LFB139:
 552:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 553:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /**
 554:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 555:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA block complete status
 556:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
 557:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 558:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * Get block transfer complete status <br>
 559:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
 560:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 561:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns GPDMA block transfer complete interrupt status. <br>
 562:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  */
 563:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsBlockCompleteStatus(XMC_DMA_t *const dma)
 564:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** {
 101              	 .loc 1 564 0
 102              	 .cfi_startproc
 103              	 
 104              	 
 105              	 
 106 0000 80B4     	 push {r7}
 107              	 .cfi_def_cfa_offset 4
 108              	 .cfi_offset 7,-4
 109 0002 83B0     	 sub sp,sp,#12
 110              	 .cfi_def_cfa_offset 16
 111 0004 00AF     	 add r7,sp,#0
 112              	 .cfi_def_cfa_register 7
 113 0006 7860     	 str r0,[r7,#4]
 565:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[2]);
 114              	 .loc 1 565 0
 115 0008 7B68     	 ldr r3,[r7,#4]
 116 000a D3F8F032 	 ldr r3,[r3,#752]
 566:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** }
 117              	 .loc 1 566 0
 118 000e 1846     	 mov r0,r3
 119 0010 0C37     	 adds r7,r7,#12
 120              	 .cfi_def_cfa_offset 4
 121 0012 BD46     	 mov sp,r7
 122              	 .cfi_def_cfa_register 13
 123              	 
 124 0014 5DF8047B 	 ldr r7,[sp],#4
 125              	 .cfi_restore 7
 126              	 .cfi_def_cfa_offset 0
 127 0018 7047     	 bx lr
 128              	 .cfi_endproc
 129              	.LFE139:
 131 001a 00BF     	 .section .text.XMC_DMA_GetChannelsSourceTransactionCompleteStatus,"ax",%progbits
 132              	 .align 2
 133              	 .thumb
 134              	 .thumb_func
 136              	XMC_DMA_GetChannelsSourceTransactionCompleteStatus:
 137              	.LFB140:
 567:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 568:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /**
 569:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 570:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA event status
 571:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
 572:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 573:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * Get source transaction complete status <br>
 574:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
 575:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 576:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns the source transaction complete interrupt status. <br>
 577:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
 578:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Note: </b><br>
 579:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * If the source peripheral is memory, the source transaction complete interrupt is
 580:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * ignored.
 581:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  */
 582:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsSourceTransactionCompleteStatus(XMC_DMA_t *const dma)
 583:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** {
 138              	 .loc 1 583 0
 139              	 .cfi_startproc
 140              	 
 141              	 
 142              	 
 143 0000 80B4     	 push {r7}
 144              	 .cfi_def_cfa_offset 4
 145              	 .cfi_offset 7,-4
 146 0002 83B0     	 sub sp,sp,#12
 147              	 .cfi_def_cfa_offset 16
 148 0004 00AF     	 add r7,sp,#0
 149              	 .cfi_def_cfa_register 7
 150 0006 7860     	 str r0,[r7,#4]
 584:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[4]);
 151              	 .loc 1 584 0
 152 0008 7B68     	 ldr r3,[r7,#4]
 153 000a D3F8F832 	 ldr r3,[r3,#760]
 585:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** }
 154              	 .loc 1 585 0
 155 000e 1846     	 mov r0,r3
 156 0010 0C37     	 adds r7,r7,#12
 157              	 .cfi_def_cfa_offset 4
 158 0012 BD46     	 mov sp,r7
 159              	 .cfi_def_cfa_register 13
 160              	 
 161 0014 5DF8047B 	 ldr r7,[sp],#4
 162              	 .cfi_restore 7
 163              	 .cfi_def_cfa_offset 0
 164 0018 7047     	 bx lr
 165              	 .cfi_endproc
 166              	.LFE140:
 168 001a 00BF     	 .section .text.XMC_DMA_GetChannelsDestinationTransactionCompleteStatus,"ax",%progbits
 169              	 .align 2
 170              	 .thumb
 171              	 .thumb_func
 173              	XMC_DMA_GetChannelsDestinationTransactionCompleteStatus:
 174              	.LFB141:
 586:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 587:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /**
 588:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 589:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA event status
 590:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
 591:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 592:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * Get destination transaction complete status <br>
 593:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
 594:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 595:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns the destination transaction complete interrupt status <br>
 596:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
 597:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Note: </b><br>
 598:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * If the destination peripheral is memory, the destination transaction complete
 599:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * interrupt is ignored.
 600:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  */
 601:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(XMC_DMA_t *const d
 602:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** {
 175              	 .loc 1 602 0
 176              	 .cfi_startproc
 177              	 
 178              	 
 179              	 
 180 0000 80B4     	 push {r7}
 181              	 .cfi_def_cfa_offset 4
 182              	 .cfi_offset 7,-4
 183 0002 83B0     	 sub sp,sp,#12
 184              	 .cfi_def_cfa_offset 16
 185 0004 00AF     	 add r7,sp,#0
 186              	 .cfi_def_cfa_register 7
 187 0006 7860     	 str r0,[r7,#4]
 603:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[6]);
 188              	 .loc 1 603 0
 189 0008 7B68     	 ldr r3,[r7,#4]
 190 000a D3F80033 	 ldr r3,[r3,#768]
 604:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** }
 191              	 .loc 1 604 0
 192 000e 1846     	 mov r0,r3
 193 0010 0C37     	 adds r7,r7,#12
 194              	 .cfi_def_cfa_offset 4
 195 0012 BD46     	 mov sp,r7
 196              	 .cfi_def_cfa_register 13
 197              	 
 198 0014 5DF8047B 	 ldr r7,[sp],#4
 199              	 .cfi_restore 7
 200              	 .cfi_def_cfa_offset 0
 201 0018 7047     	 bx lr
 202              	 .cfi_endproc
 203              	.LFE141:
 205 001a 00BF     	 .section .text.XMC_DMA_GetChannelsErrorStatus,"ax",%progbits
 206              	 .align 2
 207              	 .thumb
 208              	 .thumb_func
 210              	XMC_DMA_GetChannelsErrorStatus:
 211              	.LFB142:
 605:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** 
 606:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** /**
 607:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 608:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA error event status
 609:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
 610:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 611:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * Get DMA error event status <br>
 612:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  *
 613:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 614:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns error interrupt status. <br>
 615:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****  */
 616:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsErrorStatus(XMC_DMA_t *const dma)
 617:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** {
 212              	 .loc 1 617 0
 213              	 .cfi_startproc
 214              	 
 215              	 
 216              	 
 217 0000 80B4     	 push {r7}
 218              	 .cfi_def_cfa_offset 4
 219              	 .cfi_offset 7,-4
 220 0002 83B0     	 sub sp,sp,#12
 221              	 .cfi_def_cfa_offset 16
 222 0004 00AF     	 add r7,sp,#0
 223              	 .cfi_def_cfa_register 7
 224 0006 7860     	 str r0,[r7,#4]
 618:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[8]);
 225              	 .loc 1 618 0
 226 0008 7B68     	 ldr r3,[r7,#4]
 227 000a D3F80833 	 ldr r3,[r3,#776]
 619:C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc\xmc_dma.h **** }
 228              	 .loc 1 619 0
 229 000e 1846     	 mov r0,r3
 230 0010 0C37     	 adds r7,r7,#12
 231              	 .cfi_def_cfa_offset 4
 232 0012 BD46     	 mov sp,r7
 233              	 .cfi_def_cfa_register 13
 234              	 
 235 0014 5DF8047B 	 ldr r7,[sp],#4
 236              	 .cfi_restore 7
 237              	 .cfi_def_cfa_offset 0
 238 0018 7047     	 bx lr
 239              	 .cfi_endproc
 240              	.LFE142:
 242              	 .comm dma0_event_handlers,32,4
 243              	 .comm dma1_event_handlers,16,4
 244 001a 00BF     	 .section .text.XMC_DMA_Init,"ax",%progbits
 245              	 .align 2
 246              	 .global XMC_DMA_Init
 247              	 .thumb
 248              	 .thumb_func
 250              	XMC_DMA_Init:
 251              	.LFB189:
 252              	 .file 2 "../Libraries/XMCLib/src/xmc_dma.c"
   1:../Libraries/XMCLib/src/xmc_dma.c **** 
   2:../Libraries/XMCLib/src/xmc_dma.c **** /**
   3:../Libraries/XMCLib/src/xmc_dma.c ****  * @file xmc_dma.c
   4:../Libraries/XMCLib/src/xmc_dma.c ****  * @date 2019-05-07
   5:../Libraries/XMCLib/src/xmc_dma.c ****  *
   6:../Libraries/XMCLib/src/xmc_dma.c ****  * @cond
   7:../Libraries/XMCLib/src/xmc_dma.c ****  **************************************************************************************************
   8:../Libraries/XMCLib/src/xmc_dma.c ****  * XMClib v2.1.24 - XMC Peripheral Driver Library 
   9:../Libraries/XMCLib/src/xmc_dma.c ****  *
  10:../Libraries/XMCLib/src/xmc_dma.c ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  11:../Libraries/XMCLib/src/xmc_dma.c ****  * All rights reserved.                        
  12:../Libraries/XMCLib/src/xmc_dma.c ****  *                                             
  13:../Libraries/XMCLib/src/xmc_dma.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  14:../Libraries/XMCLib/src/xmc_dma.c ****  * following conditions are met:   
  15:../Libraries/XMCLib/src/xmc_dma.c ****  *                                                                              
  16:../Libraries/XMCLib/src/xmc_dma.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  17:../Libraries/XMCLib/src/xmc_dma.c ****  * disclaimer.                        
  18:../Libraries/XMCLib/src/xmc_dma.c ****  * 
  19:../Libraries/XMCLib/src/xmc_dma.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  20:../Libraries/XMCLib/src/xmc_dma.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  21:../Libraries/XMCLib/src/xmc_dma.c ****  * 
  22:../Libraries/XMCLib/src/xmc_dma.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  23:../Libraries/XMCLib/src/xmc_dma.c ****  * products derived from this software without specific prior written permission.                  
  24:../Libraries/XMCLib/src/xmc_dma.c ****  *                                                                              
  25:../Libraries/XMCLib/src/xmc_dma.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  26:../Libraries/XMCLib/src/xmc_dma.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  27:../Libraries/XMCLib/src/xmc_dma.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  28:../Libraries/XMCLib/src/xmc_dma.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  29:../Libraries/XMCLib/src/xmc_dma.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  30:../Libraries/XMCLib/src/xmc_dma.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  31:../Libraries/XMCLib/src/xmc_dma.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  32:../Libraries/XMCLib/src/xmc_dma.c ****  *                                                                              
  33:../Libraries/XMCLib/src/xmc_dma.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  34:../Libraries/XMCLib/src/xmc_dma.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  35:../Libraries/XMCLib/src/xmc_dma.c ****  **************************************************************************************************
  36:../Libraries/XMCLib/src/xmc_dma.c ****  *
  37:../Libraries/XMCLib/src/xmc_dma.c ****  * Change History
  38:../Libraries/XMCLib/src/xmc_dma.c ****  * --------------
  39:../Libraries/XMCLib/src/xmc_dma.c ****  *
  40:../Libraries/XMCLib/src/xmc_dma.c ****  * 2015-02-20:
  41:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Initial <br>
  42:../Libraries/XMCLib/src/xmc_dma.c ****  *
  43:../Libraries/XMCLib/src/xmc_dma.c ****  * 2015-05-20:
  44:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Add the declarations for the following APIs: <br>
  45:../Libraries/XMCLib/src/xmc_dma.c ****  *       XMC_DMA_DisableRequestLine, XMC_DMA_ClearRequestLine, <br>
  46:../Libraries/XMCLib/src/xmc_dma.c ****  *       XMC_DMA_CH_ClearSourcePeripheralRequest, <br>
  47:../Libraries/XMCLib/src/xmc_dma.c ****  *       XMC_DMA_CH_ClearDestinationPeripheralRequest <br>
  48:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Remove PRIOARRAY <br>
  49:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Documentation updates <br>
  50:../Libraries/XMCLib/src/xmc_dma.c ****  *
  51:../Libraries/XMCLib/src/xmc_dma.c ****  * 2015-06-20:
  52:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Removed GetDriverVersion API <br>
  53:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Updated XMC_DMA_CH_Init() to support scatter/gather functionality (only
  54:../Libraries/XMCLib/src/xmc_dma.c ****  *       on advanced DMA channels) <br>
  55:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Updated XMC_DMA_CH_Disable() <br>
  56:../Libraries/XMCLib/src/xmc_dma.c ****  *
  57:../Libraries/XMCLib/src/xmc_dma.c ****  * 2016-03-09:
  58:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Optimize write only registers
  59:../Libraries/XMCLib/src/xmc_dma.c ****  *
  60:../Libraries/XMCLib/src/xmc_dma.c ****  * 2016-04-08:
  61:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Update XMC_DMA_CH_EnableEvent and XMC_DMA_CH_DisableEvent.
  62:../Libraries/XMCLib/src/xmc_dma.c ****  *       Write optimization of MASKCHEV 
  63:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Fix XMC_DMA_IRQHandler, clear channel event status before processing the event handler.
  64:../Libraries/XMCLib/src/xmc_dma.c ****  *       It corrects event losses if the DMA triggered in the event handler finished before returni
  65:../Libraries/XMCLib/src/xmc_dma.c ****  *
  66:../Libraries/XMCLib/src/xmc_dma.c ****  * 2018-02-08:
  67:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Fix XMC_DMA_CH_RequestLastMultiblockTransfer() clearing CTLL_LLP_SRC_EN and CTLL_LLP_DST_E
  68:../Libraries/XMCLib/src/xmc_dma.c ****  *
  69:../Libraries/XMCLib/src/xmc_dma.c ****  * 2019-05-07:
  70:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Fixed compilation warnings
  71:../Libraries/XMCLib/src/xmc_dma.c ****  *
  72:../Libraries/XMCLib/src/xmc_dma.c ****  * @endcond
  73:../Libraries/XMCLib/src/xmc_dma.c ****  */
  74:../Libraries/XMCLib/src/xmc_dma.c **** 
  75:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
  76:../Libraries/XMCLib/src/xmc_dma.c ****  * HEADER FILES
  77:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
  78:../Libraries/XMCLib/src/xmc_dma.c **** 
  79:../Libraries/XMCLib/src/xmc_dma.c **** #include "xmc_dma.h"
  80:../Libraries/XMCLib/src/xmc_dma.c **** 
  81:../Libraries/XMCLib/src/xmc_dma.c **** #if defined (GPDMA0)
  82:../Libraries/XMCLib/src/xmc_dma.c **** 
  83:../Libraries/XMCLib/src/xmc_dma.c **** #include "xmc_scu.h"
  84:../Libraries/XMCLib/src/xmc_dma.c **** 
  85:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
  86:../Libraries/XMCLib/src/xmc_dma.c ****  * MACROS
  87:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
  88:../Libraries/XMCLib/src/xmc_dma.c **** 
  89:../Libraries/XMCLib/src/xmc_dma.c **** #define DLR_SRSEL_RS_MSK (0xfUL)
  90:../Libraries/XMCLib/src/xmc_dma.c **** #define DLR_SRSEL_RS_BITSIZE (4UL)
  91:../Libraries/XMCLib/src/xmc_dma.c **** #define DMA_EVENT_MAX (5UL)
  92:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CFGH_DEST_PER_Pos GPDMA0_CH_CFGH_DEST_PER_Pos
  93:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CFGH_SRC_PER_Pos GPDMA0_CH_CFGH_SRC_PER_Pos
  94:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA0_CH_CFGH_PER_Msk (0x7U)
  95:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA1_CH_CFGH_PER_Msk (0x3U)
  96:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CFGH_PER_BITSIZE (4U)
  97:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CTLL_INT_EN_Msk GPDMA0_CH_CTLL_INT_EN_Msk
  98:../Libraries/XMCLib/src/xmc_dma.c **** 
  99:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
 100:../Libraries/XMCLib/src/xmc_dma.c ****  * LOCAL DATA
 101:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
 102:../Libraries/XMCLib/src/xmc_dma.c **** 
 103:../Libraries/XMCLib/src/xmc_dma.c **** #if defined (GPDMA0)
 104:../Libraries/XMCLib/src/xmc_dma.c **** XMC_DMA_CH_EVENT_HANDLER_t dma0_event_handlers[XMC_DMA0_NUM_CHANNELS];
 105:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 106:../Libraries/XMCLib/src/xmc_dma.c **** 
 107:../Libraries/XMCLib/src/xmc_dma.c **** #if defined (GPDMA1)
 108:../Libraries/XMCLib/src/xmc_dma.c **** XMC_DMA_CH_EVENT_HANDLER_t dma1_event_handlers[XMC_DMA1_NUM_CHANNELS];
 109:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 110:../Libraries/XMCLib/src/xmc_dma.c ****  
 111:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
 112:../Libraries/XMCLib/src/xmc_dma.c ****  * API IMPLEMENTATION
 113:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
 114:../Libraries/XMCLib/src/xmc_dma.c **** 
 115:../Libraries/XMCLib/src/xmc_dma.c **** /* Initialize GPDMA */
 116:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_Init(XMC_DMA_t *const dma)
 117:../Libraries/XMCLib/src/xmc_dma.c **** {
 253              	 .loc 2 117 0
 254              	 .cfi_startproc
 255              	 
 256              	 
 257 0000 80B5     	 push {r7,lr}
 258              	 .cfi_def_cfa_offset 8
 259              	 .cfi_offset 7,-8
 260              	 .cfi_offset 14,-4
 261 0002 82B0     	 sub sp,sp,#8
 262              	 .cfi_def_cfa_offset 16
 263 0004 00AF     	 add r7,sp,#0
 264              	 .cfi_def_cfa_register 7
 265 0006 7860     	 str r0,[r7,#4]
 118:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_Enable(dma);
 266              	 .loc 2 118 0
 267 0008 7868     	 ldr r0,[r7,#4]
 268 000a FFF7FEFF 	 bl XMC_DMA_Enable
 119:../Libraries/XMCLib/src/xmc_dma.c **** }
 269              	 .loc 2 119 0
 270 000e 0837     	 adds r7,r7,#8
 271              	 .cfi_def_cfa_offset 8
 272 0010 BD46     	 mov sp,r7
 273              	 .cfi_def_cfa_register 13
 274              	 
 275 0012 80BD     	 pop {r7,pc}
 276              	 .cfi_endproc
 277              	.LFE189:
 279              	 .section .text.XMC_DMA_Enable,"ax",%progbits
 280              	 .align 2
 281              	 .global XMC_DMA_Enable
 282              	 .thumb
 283              	 .thumb_func
 285              	XMC_DMA_Enable:
 286              	.LFB190:
 120:../Libraries/XMCLib/src/xmc_dma.c **** 
 121:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable GPDMA module */
 122:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_Enable(XMC_DMA_t *const dma)
 123:../Libraries/XMCLib/src/xmc_dma.c **** {
 287              	 .loc 2 123 0
 288              	 .cfi_startproc
 289              	 
 290              	 
 291 0000 80B5     	 push {r7,lr}
 292              	 .cfi_def_cfa_offset 8
 293              	 .cfi_offset 7,-8
 294              	 .cfi_offset 14,-4
 295 0002 82B0     	 sub sp,sp,#8
 296              	 .cfi_def_cfa_offset 16
 297 0004 00AF     	 add r7,sp,#0
 298              	 .cfi_def_cfa_register 7
 299 0006 7860     	 str r0,[r7,#4]
 124:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 125:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 300              	 .loc 2 125 0
 301 0008 7B68     	 ldr r3,[r7,#4]
 302 000a 084A     	 ldr r2,.L17
 303 000c 9342     	 cmp r3,r2
 304 000e 03D1     	 bne .L15
 126:../Libraries/XMCLib/src/xmc_dma.c ****   {
 127:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 128:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 129:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 130:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 131:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 305              	 .loc 2 131 0
 306 0010 0748     	 ldr r0,.L17+4
 307 0012 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 308 0016 02E0     	 b .L16
 309              	.L15:
 132:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 133:../Libraries/XMCLib/src/xmc_dma.c ****   }
 134:../Libraries/XMCLib/src/xmc_dma.c ****   else
 135:../Libraries/XMCLib/src/xmc_dma.c ****   {
 136:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 137:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 138:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 139:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 310              	 .loc 2 139 0
 311 0018 0648     	 ldr r0,.L17+8
 312 001a FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 313              	.L16:
 140:../Libraries/XMCLib/src/xmc_dma.c ****   }
 141:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 142:../Libraries/XMCLib/src/xmc_dma.c **** 
 143:../Libraries/XMCLib/src/xmc_dma.c ****   dma->DMACFGREG = 0x1U;
 314              	 .loc 2 143 0
 315 001e 7B68     	 ldr r3,[r7,#4]
 316 0020 0122     	 movs r2,#1
 317 0022 C3F89823 	 str r2,[r3,#920]
 144:../Libraries/XMCLib/src/xmc_dma.c **** }
 318              	 .loc 2 144 0
 319 0026 0837     	 adds r7,r7,#8
 320              	 .cfi_def_cfa_offset 8
 321 0028 BD46     	 mov sp,r7
 322              	 .cfi_def_cfa_register 13
 323              	 
 324 002a 80BD     	 pop {r7,pc}
 325              	.L18:
 326              	 .align 2
 327              	.L17:
 328 002c 00400150 	 .word 1342259200
 329 0030 10000020 	 .word 536870928
 330 0034 20000020 	 .word 536870944
 331              	 .cfi_endproc
 332              	.LFE190:
 334              	 .section .text.XMC_DMA_Disable,"ax",%progbits
 335              	 .align 2
 336              	 .global XMC_DMA_Disable
 337              	 .thumb
 338              	 .thumb_func
 340              	XMC_DMA_Disable:
 341              	.LFB191:
 145:../Libraries/XMCLib/src/xmc_dma.c **** 
 146:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable GPDMA module */
 147:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_Disable(XMC_DMA_t *const dma)
 148:../Libraries/XMCLib/src/xmc_dma.c **** {
 342              	 .loc 2 148 0
 343              	 .cfi_startproc
 344              	 
 345              	 
 346 0000 80B5     	 push {r7,lr}
 347              	 .cfi_def_cfa_offset 8
 348              	 .cfi_offset 7,-8
 349              	 .cfi_offset 14,-4
 350 0002 82B0     	 sub sp,sp,#8
 351              	 .cfi_def_cfa_offset 16
 352 0004 00AF     	 add r7,sp,#0
 353              	 .cfi_def_cfa_register 7
 354 0006 7860     	 str r0,[r7,#4]
 149:../Libraries/XMCLib/src/xmc_dma.c ****   dma->DMACFGREG = 0x0U;
 355              	 .loc 2 149 0
 356 0008 7B68     	 ldr r3,[r7,#4]
 357 000a 0022     	 movs r2,#0
 358 000c C3F89823 	 str r2,[r3,#920]
 150:../Libraries/XMCLib/src/xmc_dma.c **** 
 151:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 152:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 359              	 .loc 2 152 0
 360 0010 7B68     	 ldr r3,[r7,#4]
 361 0012 064A     	 ldr r2,.L22
 362 0014 9342     	 cmp r3,r2
 363 0016 03D1     	 bne .L20
 153:../Libraries/XMCLib/src/xmc_dma.c ****   {
 154:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 155:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 364              	 .loc 2 155 0
 365 0018 0548     	 ldr r0,.L22+4
 366 001a FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 367 001e 02E0     	 b .L19
 368              	.L20:
 156:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 157:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 158:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 159:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 160:../Libraries/XMCLib/src/xmc_dma.c ****   }
 161:../Libraries/XMCLib/src/xmc_dma.c ****   else
 162:../Libraries/XMCLib/src/xmc_dma.c ****   {
 163:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 369              	 .loc 2 163 0
 370 0020 0448     	 ldr r0,.L22+8
 371 0022 FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 372              	.L19:
 164:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 165:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 166:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 167:../Libraries/XMCLib/src/xmc_dma.c ****   }
 168:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 169:../Libraries/XMCLib/src/xmc_dma.c **** }
 373              	 .loc 2 169 0
 374 0026 0837     	 adds r7,r7,#8
 375              	 .cfi_def_cfa_offset 8
 376 0028 BD46     	 mov sp,r7
 377              	 .cfi_def_cfa_register 13
 378              	 
 379 002a 80BD     	 pop {r7,pc}
 380              	.L23:
 381              	 .align 2
 382              	.L22:
 383 002c 00400150 	 .word 1342259200
 384 0030 10000020 	 .word 536870928
 385 0034 20000020 	 .word 536870944
 386              	 .cfi_endproc
 387              	.LFE191:
 389              	 .section .text.XMC_DMA_IsEnabled,"ax",%progbits
 390              	 .align 2
 391              	 .global XMC_DMA_IsEnabled
 392              	 .thumb
 393              	 .thumb_func
 395              	XMC_DMA_IsEnabled:
 396              	.LFB192:
 170:../Libraries/XMCLib/src/xmc_dma.c **** 
 171:../Libraries/XMCLib/src/xmc_dma.c **** /* Check is the GPDMA peripheral is enabled */
 172:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma)
 173:../Libraries/XMCLib/src/xmc_dma.c **** {
 397              	 .loc 2 173 0
 398              	 .cfi_startproc
 399              	 
 400              	 
 401 0000 80B5     	 push {r7,lr}
 402              	 .cfi_def_cfa_offset 8
 403              	 .cfi_offset 7,-8
 404              	 .cfi_offset 14,-4
 405 0002 84B0     	 sub sp,sp,#16
 406              	 .cfi_def_cfa_offset 24
 407 0004 00AF     	 add r7,sp,#0
 408              	 .cfi_def_cfa_register 7
 409 0006 7860     	 str r0,[r7,#4]
 174:../Libraries/XMCLib/src/xmc_dma.c ****   bool status;
 175:../Libraries/XMCLib/src/xmc_dma.c **** 
 176:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 177:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 410              	 .loc 2 177 0
 411 0008 7B68     	 ldr r3,[r7,#4]
 412 000a 1F4A     	 ldr r2,.L31
 413 000c 9342     	 cmp r3,r2
 414 000e 11D1     	 bne .L25
 178:../Libraries/XMCLib/src/xmc_dma.c ****   {
 179:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 180:../Libraries/XMCLib/src/xmc_dma.c ****     status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 415              	 .loc 2 180 0
 416 0010 1E48     	 ldr r0,.L31+4
 417 0012 FFF7FEFF 	 bl XMC_SCU_RESET_IsPeripheralResetAsserted
 418 0016 0346     	 mov r3,r0
 419 0018 002B     	 cmp r3,#0
 420 001a 14BF     	 ite ne
 421 001c 0123     	 movne r3,#1
 422 001e 0023     	 moveq r3,#0
 423 0020 DBB2     	 uxtb r3,r3
 424 0022 83F00103 	 eor r3,r3,#1
 425 0026 DBB2     	 uxtb r3,r3
 426 0028 FB73     	 strb r3,[r7,#15]
 427 002a FB7B     	 ldrb r3,[r7,#15]
 428 002c 03F00103 	 and r3,r3,#1
 429 0030 FB73     	 strb r3,[r7,#15]
 430 0032 10E0     	 b .L26
 431              	.L25:
 181:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 182:../Libraries/XMCLib/src/xmc_dma.c ****     status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 183:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 184:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 185:../Libraries/XMCLib/src/xmc_dma.c ****   }
 186:../Libraries/XMCLib/src/xmc_dma.c ****   else
 187:../Libraries/XMCLib/src/xmc_dma.c ****   {
 188:../Libraries/XMCLib/src/xmc_dma.c ****     status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 432              	 .loc 2 188 0
 433 0034 1648     	 ldr r0,.L31+8
 434 0036 FFF7FEFF 	 bl XMC_SCU_RESET_IsPeripheralResetAsserted
 435 003a 0346     	 mov r3,r0
 436 003c 002B     	 cmp r3,#0
 437 003e 14BF     	 ite ne
 438 0040 0123     	 movne r3,#1
 439 0042 0023     	 moveq r3,#0
 440 0044 DBB2     	 uxtb r3,r3
 441 0046 83F00103 	 eor r3,r3,#1
 442 004a DBB2     	 uxtb r3,r3
 443 004c FB73     	 strb r3,[r7,#15]
 444 004e FB7B     	 ldrb r3,[r7,#15]
 445 0050 03F00103 	 and r3,r3,#1
 446 0054 FB73     	 strb r3,[r7,#15]
 447              	.L26:
 189:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 190:../Libraries/XMCLib/src/xmc_dma.c ****     status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 191:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 192:../Libraries/XMCLib/src/xmc_dma.c ****   }
 193:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 194:../Libraries/XMCLib/src/xmc_dma.c **** 
 195:../Libraries/XMCLib/src/xmc_dma.c ****   /* DMA reset is not asserted and peripheral clock is not gated */
 196:../Libraries/XMCLib/src/xmc_dma.c ****   if (status == true)
 448              	 .loc 2 196 0
 449 0056 FB7B     	 ldrb r3,[r7,#15]
 450 0058 002B     	 cmp r3,#0
 451 005a 0FD0     	 beq .L27
 197:../Libraries/XMCLib/src/xmc_dma.c ****   {
 198:../Libraries/XMCLib/src/xmc_dma.c ****     status = status && (dma->DMACFGREG != 0U);
 452              	 .loc 2 198 0
 453 005c FB7B     	 ldrb r3,[r7,#15]
 454 005e 002B     	 cmp r3,#0
 455 0060 06D0     	 beq .L28
 456              	 .loc 2 198 0 is_stmt 0 discriminator 1
 457 0062 7B68     	 ldr r3,[r7,#4]
 458 0064 D3F89833 	 ldr r3,[r3,#920]
 459 0068 002B     	 cmp r3,#0
 460 006a 01D0     	 beq .L28
 461              	 .loc 2 198 0 discriminator 3
 462 006c 0123     	 movs r3,#1
 463 006e 00E0     	 b .L29
 464              	.L28:
 465              	 .loc 2 198 0 discriminator 4
 466 0070 0023     	 movs r3,#0
 467              	.L29:
 468              	 .loc 2 198 0 discriminator 6
 469 0072 FB73     	 strb r3,[r7,#15]
 470 0074 FB7B     	 ldrb r3,[r7,#15]
 471 0076 03F00103 	 and r3,r3,#1
 472 007a FB73     	 strb r3,[r7,#15]
 473              	.L27:
 199:../Libraries/XMCLib/src/xmc_dma.c ****   }
 200:../Libraries/XMCLib/src/xmc_dma.c **** 
 201:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 474              	 .loc 2 201 0 is_stmt 1
 475 007c FB7B     	 ldrb r3,[r7,#15]
 202:../Libraries/XMCLib/src/xmc_dma.c **** }
 476              	 .loc 2 202 0
 477 007e 1846     	 mov r0,r3
 478 0080 1037     	 adds r7,r7,#16
 479              	 .cfi_def_cfa_offset 8
 480 0082 BD46     	 mov sp,r7
 481              	 .cfi_def_cfa_register 13
 482              	 
 483 0084 80BD     	 pop {r7,pc}
 484              	.L32:
 485 0086 00BF     	 .align 2
 486              	.L31:
 487 0088 00400150 	 .word 1342259200
 488 008c 10000020 	 .word 536870928
 489 0090 20000020 	 .word 536870944
 490              	 .cfi_endproc
 491              	.LFE192:
 493              	 .section .text.XMC_DMA_EnableRequestLine,"ax",%progbits
 494              	 .align 2
 495              	 .global XMC_DMA_EnableRequestLine
 496              	 .thumb
 497              	 .thumb_func
 499              	XMC_DMA_EnableRequestLine:
 500              	.LFB193:
 203:../Libraries/XMCLib/src/xmc_dma.c **** 
 204:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable request line */
 205:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_EnableRequestLine(XMC_DMA_t *const dma, uint8_t line, uint8_t peripheral)
 206:../Libraries/XMCLib/src/xmc_dma.c **** {
 501              	 .loc 2 206 0
 502              	 .cfi_startproc
 503              	 
 504              	 
 505              	 
 506 0000 80B4     	 push {r7}
 507              	 .cfi_def_cfa_offset 4
 508              	 .cfi_offset 7,-4
 509 0002 83B0     	 sub sp,sp,#12
 510              	 .cfi_def_cfa_offset 16
 511 0004 00AF     	 add r7,sp,#0
 512              	 .cfi_def_cfa_register 7
 513 0006 7860     	 str r0,[r7,#4]
 514 0008 0B46     	 mov r3,r1
 515 000a FB70     	 strb r3,[r7,#3]
 516 000c 1346     	 mov r3,r2
 517 000e BB70     	 strb r3,[r7,#2]
 207:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 208:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 518              	 .loc 2 208 0
 519 0010 7B68     	 ldr r3,[r7,#4]
 520 0012 1F4A     	 ldr r2,.L36
 521 0014 9342     	 cmp r3,r2
 522 0016 1BD1     	 bne .L34
 209:../Libraries/XMCLib/src/xmc_dma.c ****   {
 210:../Libraries/XMCLib/src/xmc_dma.c **** #else
 211:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 212:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 213:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->SRSEL0 = ((DLR->SRSEL0 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 523              	 .loc 2 213 0
 524 0018 1E48     	 ldr r0,.L36+4
 525 001a 1E4B     	 ldr r3,.L36+4
 526 001c 9A68     	 ldr r2,[r3,#8]
 527 001e FB78     	 ldrb r3,[r7,#3]
 528 0020 9B00     	 lsls r3,r3,#2
 529 0022 1946     	 mov r1,r3
 530 0024 0F23     	 movs r3,#15
 531 0026 8B40     	 lsls r3,r3,r1
 532 0028 DB43     	 mvns r3,r3
 533 002a 1A40     	 ands r2,r2,r3
 214:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 534              	 .loc 2 214 0
 535 002c BB78     	 ldrb r3,[r7,#2]
 536 002e F978     	 ldrb r1,[r7,#3]
 537 0030 8900     	 lsls r1,r1,#2
 538 0032 8B40     	 lsls r3,r3,r1
 213:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 539              	 .loc 2 213 0
 540 0034 1343     	 orrs r3,r3,r2
 541 0036 8360     	 str r3,[r0,#8]
 215:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= (0x1UL << (line & GPDMA0_CH_CFGH_PER_Msk));
 542              	 .loc 2 215 0
 543 0038 1649     	 ldr r1,.L36+4
 544 003a 164B     	 ldr r3,.L36+4
 545 003c 1A69     	 ldr r2,[r3,#16]
 546 003e FB78     	 ldrb r3,[r7,#3]
 547 0040 03F00703 	 and r3,r3,#7
 548 0044 0120     	 movs r0,#1
 549 0046 00FA03F3 	 lsl r3,r0,r3
 550 004a 1343     	 orrs r3,r3,r2
 551 004c 0B61     	 str r3,[r1,#16]
 552 004e 19E0     	 b .L33
 553              	.L34:
 216:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 217:../Libraries/XMCLib/src/xmc_dma.c ****   }
 218:../Libraries/XMCLib/src/xmc_dma.c ****   else
 219:../Libraries/XMCLib/src/xmc_dma.c ****   {
 220:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->SRSEL1 = ((DLR->SRSEL1 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 554              	 .loc 2 220 0
 555 0050 1048     	 ldr r0,.L36+4
 556 0052 104B     	 ldr r3,.L36+4
 557 0054 DA68     	 ldr r2,[r3,#12]
 558 0056 FB78     	 ldrb r3,[r7,#3]
 559 0058 9B00     	 lsls r3,r3,#2
 560 005a 1946     	 mov r1,r3
 561 005c 0F23     	 movs r3,#15
 562 005e 8B40     	 lsls r3,r3,r1
 563 0060 DB43     	 mvns r3,r3
 564 0062 1A40     	 ands r2,r2,r3
 221:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 565              	 .loc 2 221 0
 566 0064 BB78     	 ldrb r3,[r7,#2]
 567 0066 F978     	 ldrb r1,[r7,#3]
 568 0068 8900     	 lsls r1,r1,#2
 569 006a 8B40     	 lsls r3,r3,r1
 220:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 570              	 .loc 2 220 0
 571 006c 1343     	 orrs r3,r3,r2
 572 006e C360     	 str r3,[r0,#12]
 222:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= (0x100UL << line);
 573              	 .loc 2 222 0
 574 0070 0849     	 ldr r1,.L36+4
 575 0072 084B     	 ldr r3,.L36+4
 576 0074 1A69     	 ldr r2,[r3,#16]
 577 0076 FB78     	 ldrb r3,[r7,#3]
 578 0078 4FF48070 	 mov r0,#256
 579 007c 00FA03F3 	 lsl r3,r0,r3
 580 0080 1343     	 orrs r3,r3,r2
 581 0082 0B61     	 str r3,[r1,#16]
 582              	.L33:
 223:../Libraries/XMCLib/src/xmc_dma.c ****   }
 224:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 225:../Libraries/XMCLib/src/xmc_dma.c **** }
 583              	 .loc 2 225 0
 584 0084 0C37     	 adds r7,r7,#12
 585              	 .cfi_def_cfa_offset 4
 586 0086 BD46     	 mov sp,r7
 587              	 .cfi_def_cfa_register 13
 588              	 
 589 0088 5DF8047B 	 ldr r7,[sp],#4
 590              	 .cfi_restore 7
 591              	 .cfi_def_cfa_offset 0
 592 008c 7047     	 bx lr
 593              	.L37:
 594 008e 00BF     	 .align 2
 595              	.L36:
 596 0090 00400150 	 .word 1342259200
 597 0094 00490050 	 .word 1342195968
 598              	 .cfi_endproc
 599              	.LFE193:
 601              	 .section .text.XMC_DMA_DisableRequestLine,"ax",%progbits
 602              	 .align 2
 603              	 .global XMC_DMA_DisableRequestLine
 604              	 .thumb
 605              	 .thumb_func
 607              	XMC_DMA_DisableRequestLine:
 608              	.LFB194:
 226:../Libraries/XMCLib/src/xmc_dma.c **** 
 227:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_DisableRequestLine(XMC_DMA_t *const dma, uint8_t line)
 228:../Libraries/XMCLib/src/xmc_dma.c **** {
 609              	 .loc 2 228 0
 610              	 .cfi_startproc
 611              	 
 612              	 
 613              	 
 614 0000 80B4     	 push {r7}
 615              	 .cfi_def_cfa_offset 4
 616              	 .cfi_offset 7,-4
 617 0002 83B0     	 sub sp,sp,#12
 618              	 .cfi_def_cfa_offset 16
 619 0004 00AF     	 add r7,sp,#0
 620              	 .cfi_def_cfa_register 7
 621 0006 7860     	 str r0,[r7,#4]
 622 0008 0B46     	 mov r3,r1
 623 000a FB70     	 strb r3,[r7,#3]
 229:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 230:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 624              	 .loc 2 230 0
 625 000c 7B68     	 ldr r3,[r7,#4]
 626 000e 0F4A     	 ldr r2,.L41
 627 0010 9342     	 cmp r3,r2
 628 0012 0AD1     	 bne .L39
 231:../Libraries/XMCLib/src/xmc_dma.c ****   {
 232:../Libraries/XMCLib/src/xmc_dma.c **** #else
 233:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 234:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 235:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x1UL << line);
 629              	 .loc 2 235 0
 630 0014 0E49     	 ldr r1,.L41+4
 631 0016 0E4B     	 ldr r3,.L41+4
 632 0018 1A69     	 ldr r2,[r3,#16]
 633 001a FB78     	 ldrb r3,[r7,#3]
 634 001c 0120     	 movs r0,#1
 635 001e 00FA03F3 	 lsl r3,r0,r3
 636 0022 DB43     	 mvns r3,r3
 637 0024 1340     	 ands r3,r3,r2
 638 0026 0B61     	 str r3,[r1,#16]
 639 0028 0AE0     	 b .L38
 640              	.L39:
 236:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 237:../Libraries/XMCLib/src/xmc_dma.c ****   }
 238:../Libraries/XMCLib/src/xmc_dma.c ****   else
 239:../Libraries/XMCLib/src/xmc_dma.c ****   {
 240:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x100UL << line);
 641              	 .loc 2 240 0
 642 002a 0949     	 ldr r1,.L41+4
 643 002c 084B     	 ldr r3,.L41+4
 644 002e 1A69     	 ldr r2,[r3,#16]
 645 0030 FB78     	 ldrb r3,[r7,#3]
 646 0032 4FF48070 	 mov r0,#256
 647 0036 00FA03F3 	 lsl r3,r0,r3
 648 003a DB43     	 mvns r3,r3
 649 003c 1340     	 ands r3,r3,r2
 650 003e 0B61     	 str r3,[r1,#16]
 651              	.L38:
 241:../Libraries/XMCLib/src/xmc_dma.c ****   }
 242:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 243:../Libraries/XMCLib/src/xmc_dma.c **** }
 652              	 .loc 2 243 0
 653 0040 0C37     	 adds r7,r7,#12
 654              	 .cfi_def_cfa_offset 4
 655 0042 BD46     	 mov sp,r7
 656              	 .cfi_def_cfa_register 13
 657              	 
 658 0044 5DF8047B 	 ldr r7,[sp],#4
 659              	 .cfi_restore 7
 660              	 .cfi_def_cfa_offset 0
 661 0048 7047     	 bx lr
 662              	.L42:
 663 004a 00BF     	 .align 2
 664              	.L41:
 665 004c 00400150 	 .word 1342259200
 666 0050 00490050 	 .word 1342195968
 667              	 .cfi_endproc
 668              	.LFE194:
 670              	 .section .text.XMC_DMA_ClearRequestLine,"ax",%progbits
 671              	 .align 2
 672              	 .global XMC_DMA_ClearRequestLine
 673              	 .thumb
 674              	 .thumb_func
 676              	XMC_DMA_ClearRequestLine:
 677              	.LFB195:
 244:../Libraries/XMCLib/src/xmc_dma.c **** 
 245:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_ClearRequestLine(XMC_DMA_t *const dma, uint8_t line)
 246:../Libraries/XMCLib/src/xmc_dma.c **** {
 678              	 .loc 2 246 0
 679              	 .cfi_startproc
 680              	 
 681              	 
 682              	 
 683 0000 80B4     	 push {r7}
 684              	 .cfi_def_cfa_offset 4
 685              	 .cfi_offset 7,-4
 686 0002 83B0     	 sub sp,sp,#12
 687              	 .cfi_def_cfa_offset 16
 688 0004 00AF     	 add r7,sp,#0
 689              	 .cfi_def_cfa_register 7
 690 0006 7860     	 str r0,[r7,#4]
 691 0008 0B46     	 mov r3,r1
 692 000a FB70     	 strb r3,[r7,#3]
 247:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 248:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 693              	 .loc 2 248 0
 694 000c 7B68     	 ldr r3,[r7,#4]
 695 000e 184A     	 ldr r2,.L46
 696 0010 9342     	 cmp r3,r2
 697 0012 13D1     	 bne .L44
 249:../Libraries/XMCLib/src/xmc_dma.c ****   {
 250:../Libraries/XMCLib/src/xmc_dma.c **** #else
 251:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 252:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 253:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x1UL << line);
 698              	 .loc 2 253 0
 699 0014 1749     	 ldr r1,.L46+4
 700 0016 174B     	 ldr r3,.L46+4
 701 0018 1A69     	 ldr r2,[r3,#16]
 702 001a FB78     	 ldrb r3,[r7,#3]
 703 001c 0120     	 movs r0,#1
 704 001e 00FA03F3 	 lsl r3,r0,r3
 705 0022 DB43     	 mvns r3,r3
 706 0024 1340     	 ands r3,r3,r2
 707 0026 0B61     	 str r3,[r1,#16]
 254:../Libraries/XMCLib/src/xmc_dma.c **** 	DLR->LNEN |= 0x1UL << line;
 708              	 .loc 2 254 0
 709 0028 1249     	 ldr r1,.L46+4
 710 002a 124B     	 ldr r3,.L46+4
 711 002c 1A69     	 ldr r2,[r3,#16]
 712 002e FB78     	 ldrb r3,[r7,#3]
 713 0030 0120     	 movs r0,#1
 714 0032 00FA03F3 	 lsl r3,r0,r3
 715 0036 1343     	 orrs r3,r3,r2
 716 0038 0B61     	 str r3,[r1,#16]
 717 003a 14E0     	 b .L43
 718              	.L44:
 255:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 256:../Libraries/XMCLib/src/xmc_dma.c ****   }
 257:../Libraries/XMCLib/src/xmc_dma.c ****   else
 258:../Libraries/XMCLib/src/xmc_dma.c ****   {
 259:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x100UL << line);
 719              	 .loc 2 259 0
 720 003c 0D49     	 ldr r1,.L46+4
 721 003e 0D4B     	 ldr r3,.L46+4
 722 0040 1A69     	 ldr r2,[r3,#16]
 723 0042 FB78     	 ldrb r3,[r7,#3]
 724 0044 4FF48070 	 mov r0,#256
 725 0048 00FA03F3 	 lsl r3,r0,r3
 726 004c DB43     	 mvns r3,r3
 727 004e 1340     	 ands r3,r3,r2
 728 0050 0B61     	 str r3,[r1,#16]
 260:../Libraries/XMCLib/src/xmc_dma.c **** 	DLR->LNEN |= 0x100UL << line;
 729              	 .loc 2 260 0
 730 0052 0849     	 ldr r1,.L46+4
 731 0054 074B     	 ldr r3,.L46+4
 732 0056 1A69     	 ldr r2,[r3,#16]
 733 0058 FB78     	 ldrb r3,[r7,#3]
 734 005a 4FF48070 	 mov r0,#256
 735 005e 00FA03F3 	 lsl r3,r0,r3
 736 0062 1343     	 orrs r3,r3,r2
 737 0064 0B61     	 str r3,[r1,#16]
 738              	.L43:
 261:../Libraries/XMCLib/src/xmc_dma.c ****   }
 262:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 263:../Libraries/XMCLib/src/xmc_dma.c **** }
 739              	 .loc 2 263 0
 740 0066 0C37     	 adds r7,r7,#12
 741              	 .cfi_def_cfa_offset 4
 742 0068 BD46     	 mov sp,r7
 743              	 .cfi_def_cfa_register 13
 744              	 
 745 006a 5DF8047B 	 ldr r7,[sp],#4
 746              	 .cfi_restore 7
 747              	 .cfi_def_cfa_offset 0
 748 006e 7047     	 bx lr
 749              	.L47:
 750              	 .align 2
 751              	.L46:
 752 0070 00400150 	 .word 1342259200
 753 0074 00490050 	 .word 1342195968
 754              	 .cfi_endproc
 755              	.LFE195:
 757              	 .section .text.XMC_DMA_GetOverrunStatus,"ax",%progbits
 758              	 .align 2
 759              	 .global XMC_DMA_GetOverrunStatus
 760              	 .thumb
 761              	 .thumb_func
 763              	XMC_DMA_GetOverrunStatus:
 764              	.LFB196:
 264:../Libraries/XMCLib/src/xmc_dma.c **** 
 265:../Libraries/XMCLib/src/xmc_dma.c **** /* Get DMA DLR overrun status */
 266:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_GetOverrunStatus(XMC_DMA_t *const dma, uint8_t line)
 267:../Libraries/XMCLib/src/xmc_dma.c **** {
 765              	 .loc 2 267 0
 766              	 .cfi_startproc
 767              	 
 768              	 
 769              	 
 770 0000 80B4     	 push {r7}
 771              	 .cfi_def_cfa_offset 4
 772              	 .cfi_offset 7,-4
 773 0002 85B0     	 sub sp,sp,#20
 774              	 .cfi_def_cfa_offset 24
 775 0004 00AF     	 add r7,sp,#0
 776              	 .cfi_def_cfa_register 7
 777 0006 7860     	 str r0,[r7,#4]
 778 0008 0B46     	 mov r3,r1
 779 000a FB70     	 strb r3,[r7,#3]
 268:../Libraries/XMCLib/src/xmc_dma.c ****   bool status;
 269:../Libraries/XMCLib/src/xmc_dma.c **** 
 270:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 271:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 780              	 .loc 2 271 0
 781 000c 7B68     	 ldr r3,[r7,#4]
 782 000e 124A     	 ldr r2,.L52
 783 0010 9342     	 cmp r3,r2
 784 0012 0CD1     	 bne .L49
 272:../Libraries/XMCLib/src/xmc_dma.c ****   {
 273:../Libraries/XMCLib/src/xmc_dma.c **** #else
 274:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 275:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 276:../Libraries/XMCLib/src/xmc_dma.c ****     status = (bool)(DLR->OVRSTAT & (0x1UL << line));
 785              	 .loc 2 276 0
 786 0014 114B     	 ldr r3,.L52+4
 787 0016 1A68     	 ldr r2,[r3]
 788 0018 FB78     	 ldrb r3,[r7,#3]
 789 001a 22FA03F3 	 lsr r3,r2,r3
 790 001e 03F00103 	 and r3,r3,#1
 791 0022 002B     	 cmp r3,#0
 792 0024 14BF     	 ite ne
 793 0026 0123     	 movne r3,#1
 794 0028 0023     	 moveq r3,#0
 795 002a FB73     	 strb r3,[r7,#15]
 796 002c 0CE0     	 b .L50
 797              	.L49:
 277:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 278:../Libraries/XMCLib/src/xmc_dma.c ****   }
 279:../Libraries/XMCLib/src/xmc_dma.c ****   else
 280:../Libraries/XMCLib/src/xmc_dma.c ****   {
 281:../Libraries/XMCLib/src/xmc_dma.c ****     status = (bool)(DLR->OVRSTAT & (0x100UL << line));
 798              	 .loc 2 281 0
 799 002e 0B4B     	 ldr r3,.L52+4
 800 0030 1A68     	 ldr r2,[r3]
 801 0032 FB78     	 ldrb r3,[r7,#3]
 802 0034 4FF48071 	 mov r1,#256
 803 0038 01FA03F3 	 lsl r3,r1,r3
 804 003c 1340     	 ands r3,r3,r2
 805 003e 002B     	 cmp r3,#0
 806 0040 14BF     	 ite ne
 807 0042 0123     	 movne r3,#1
 808 0044 0023     	 moveq r3,#0
 809 0046 FB73     	 strb r3,[r7,#15]
 810              	.L50:
 282:../Libraries/XMCLib/src/xmc_dma.c ****   }
 283:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 284:../Libraries/XMCLib/src/xmc_dma.c **** 
 285:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 811              	 .loc 2 285 0
 812 0048 FB7B     	 ldrb r3,[r7,#15]
 286:../Libraries/XMCLib/src/xmc_dma.c **** }
 813              	 .loc 2 286 0
 814 004a 1846     	 mov r0,r3
 815 004c 1437     	 adds r7,r7,#20
 816              	 .cfi_def_cfa_offset 4
 817 004e BD46     	 mov sp,r7
 818              	 .cfi_def_cfa_register 13
 819              	 
 820 0050 5DF8047B 	 ldr r7,[sp],#4
 821              	 .cfi_restore 7
 822              	 .cfi_def_cfa_offset 0
 823 0054 7047     	 bx lr
 824              	.L53:
 825 0056 00BF     	 .align 2
 826              	.L52:
 827 0058 00400150 	 .word 1342259200
 828 005c 00490050 	 .word 1342195968
 829              	 .cfi_endproc
 830              	.LFE196:
 832              	 .section .text.XMC_DMA_ClearOverrunStatus,"ax",%progbits
 833              	 .align 2
 834              	 .global XMC_DMA_ClearOverrunStatus
 835              	 .thumb
 836              	 .thumb_func
 838              	XMC_DMA_ClearOverrunStatus:
 839              	.LFB197:
 287:../Libraries/XMCLib/src/xmc_dma.c **** 
 288:../Libraries/XMCLib/src/xmc_dma.c **** /* Clear DMA DLR overrun status */
 289:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_ClearOverrunStatus(XMC_DMA_t *const dma, const uint8_t line)
 290:../Libraries/XMCLib/src/xmc_dma.c **** {
 840              	 .loc 2 290 0
 841              	 .cfi_startproc
 842              	 
 843              	 
 844              	 
 845 0000 80B4     	 push {r7}
 846              	 .cfi_def_cfa_offset 4
 847              	 .cfi_offset 7,-4
 848 0002 83B0     	 sub sp,sp,#12
 849              	 .cfi_def_cfa_offset 16
 850 0004 00AF     	 add r7,sp,#0
 851              	 .cfi_def_cfa_register 7
 852 0006 7860     	 str r0,[r7,#4]
 853 0008 0B46     	 mov r3,r1
 854 000a FB70     	 strb r3,[r7,#3]
 291:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 292:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 855              	 .loc 2 292 0
 856 000c 7B68     	 ldr r3,[r7,#4]
 857 000e 0B4A     	 ldr r2,.L57
 858 0010 9342     	 cmp r3,r2
 859 0012 06D1     	 bne .L55
 293:../Libraries/XMCLib/src/xmc_dma.c ****   {
 294:../Libraries/XMCLib/src/xmc_dma.c **** #else
 295:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 296:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 297:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->OVRCLR = (uint32_t)(0x1UL << line);
 860              	 .loc 2 297 0
 861 0014 0A4A     	 ldr r2,.L57+4
 862 0016 FB78     	 ldrb r3,[r7,#3]
 863 0018 0121     	 movs r1,#1
 864 001a 01FA03F3 	 lsl r3,r1,r3
 865 001e 5360     	 str r3,[r2,#4]
 866 0020 06E0     	 b .L54
 867              	.L55:
 298:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 299:../Libraries/XMCLib/src/xmc_dma.c ****   }
 300:../Libraries/XMCLib/src/xmc_dma.c ****   else
 301:../Libraries/XMCLib/src/xmc_dma.c ****   {
 302:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->OVRCLR = (uint32_t)(0x100UL << line);
 868              	 .loc 2 302 0
 869 0022 074A     	 ldr r2,.L57+4
 870 0024 FB78     	 ldrb r3,[r7,#3]
 871 0026 4FF48071 	 mov r1,#256
 872 002a 01FA03F3 	 lsl r3,r1,r3
 873 002e 5360     	 str r3,[r2,#4]
 874              	.L54:
 303:../Libraries/XMCLib/src/xmc_dma.c ****   }
 304:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 305:../Libraries/XMCLib/src/xmc_dma.c **** }
 875              	 .loc 2 305 0
 876 0030 0C37     	 adds r7,r7,#12
 877              	 .cfi_def_cfa_offset 4
 878 0032 BD46     	 mov sp,r7
 879              	 .cfi_def_cfa_register 13
 880              	 
 881 0034 5DF8047B 	 ldr r7,[sp],#4
 882              	 .cfi_restore 7
 883              	 .cfi_def_cfa_offset 0
 884 0038 7047     	 bx lr
 885              	.L58:
 886 003a 00BF     	 .align 2
 887              	.L57:
 888 003c 00400150 	 .word 1342259200
 889 0040 00490050 	 .word 1342195968
 890              	 .cfi_endproc
 891              	.LFE197:
 893              	 .section .text.XMC_DMA_CH_Disable,"ax",%progbits
 894              	 .align 2
 895              	 .global XMC_DMA_CH_Disable
 896              	 .thumb
 897              	 .thumb_func
 899              	XMC_DMA_CH_Disable:
 900              	.LFB198:
 306:../Libraries/XMCLib/src/xmc_dma.c **** 
 307:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable DMA channel */
 308:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_Disable(XMC_DMA_t *const dma, const uint8_t channel)
 309:../Libraries/XMCLib/src/xmc_dma.c **** {
 901              	 .loc 2 309 0
 902              	 .cfi_startproc
 903              	 
 904              	 
 905              	 
 906 0000 80B4     	 push {r7}
 907              	 .cfi_def_cfa_offset 4
 908              	 .cfi_offset 7,-4
 909 0002 83B0     	 sub sp,sp,#12
 910              	 .cfi_def_cfa_offset 16
 911 0004 00AF     	 add r7,sp,#0
 912              	 .cfi_def_cfa_register 7
 913 0006 7860     	 str r0,[r7,#4]
 914 0008 0B46     	 mov r3,r1
 915 000a FB70     	 strb r3,[r7,#3]
 310:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CHENREG = (uint32_t)(0x100UL << channel);
 916              	 .loc 2 310 0
 917 000c FB78     	 ldrb r3,[r7,#3]
 918 000e 4FF48072 	 mov r2,#256
 919 0012 9A40     	 lsls r2,r2,r3
 920 0014 7B68     	 ldr r3,[r7,#4]
 921 0016 C3F8A023 	 str r2,[r3,#928]
 311:../Libraries/XMCLib/src/xmc_dma.c ****   while((dma->CHENREG & (uint32_t)(0x1UL << channel)) != 0U)
 922              	 .loc 2 311 0
 923 001a 00BF     	 nop
 924              	.L60:
 925              	 .loc 2 311 0 is_stmt 0 discriminator 1
 926 001c 7B68     	 ldr r3,[r7,#4]
 927 001e D3F8A023 	 ldr r2,[r3,#928]
 928 0022 FB78     	 ldrb r3,[r7,#3]
 929 0024 22FA03F3 	 lsr r3,r2,r3
 930 0028 03F00103 	 and r3,r3,#1
 931 002c 002B     	 cmp r3,#0
 932 002e F5D1     	 bne .L60
 312:../Libraries/XMCLib/src/xmc_dma.c ****   {
 313:../Libraries/XMCLib/src/xmc_dma.c ****     /* wait until channel is disabled */
 314:../Libraries/XMCLib/src/xmc_dma.c ****   }
 315:../Libraries/XMCLib/src/xmc_dma.c **** }
 933              	 .loc 2 315 0 is_stmt 1
 934 0030 0C37     	 adds r7,r7,#12
 935              	 .cfi_def_cfa_offset 4
 936 0032 BD46     	 mov sp,r7
 937              	 .cfi_def_cfa_register 13
 938              	 
 939 0034 5DF8047B 	 ldr r7,[sp],#4
 940              	 .cfi_restore 7
 941              	 .cfi_def_cfa_offset 0
 942 0038 7047     	 bx lr
 943              	 .cfi_endproc
 944              	.LFE198:
 946 003a 00BF     	 .section .text.XMC_DMA_CH_IsEnabled,"ax",%progbits
 947              	 .align 2
 948              	 .global XMC_DMA_CH_IsEnabled
 949              	 .thumb
 950              	 .thumb_func
 952              	XMC_DMA_CH_IsEnabled:
 953              	.LFB199:
 316:../Libraries/XMCLib/src/xmc_dma.c **** 
 317:../Libraries/XMCLib/src/xmc_dma.c **** /* Check if a DMA channel is enabled */
 318:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_CH_IsEnabled(XMC_DMA_t *const dma, const uint8_t channel)
 319:../Libraries/XMCLib/src/xmc_dma.c **** {
 954              	 .loc 2 319 0
 955              	 .cfi_startproc
 956              	 
 957              	 
 958              	 
 959 0000 80B4     	 push {r7}
 960              	 .cfi_def_cfa_offset 4
 961              	 .cfi_offset 7,-4
 962 0002 83B0     	 sub sp,sp,#12
 963              	 .cfi_def_cfa_offset 16
 964 0004 00AF     	 add r7,sp,#0
 965              	 .cfi_def_cfa_register 7
 966 0006 7860     	 str r0,[r7,#4]
 967 0008 0B46     	 mov r3,r1
 968 000a FB70     	 strb r3,[r7,#3]
 320:../Libraries/XMCLib/src/xmc_dma.c ****   return (bool)(dma->CHENREG & ((uint32_t)1U << channel));
 969              	 .loc 2 320 0
 970 000c 7B68     	 ldr r3,[r7,#4]
 971 000e D3F8A023 	 ldr r2,[r3,#928]
 972 0012 FB78     	 ldrb r3,[r7,#3]
 973 0014 22FA03F3 	 lsr r3,r2,r3
 974 0018 03F00103 	 and r3,r3,#1
 975 001c 002B     	 cmp r3,#0
 976 001e 14BF     	 ite ne
 977 0020 0123     	 movne r3,#1
 978 0022 0023     	 moveq r3,#0
 979 0024 DBB2     	 uxtb r3,r3
 321:../Libraries/XMCLib/src/xmc_dma.c **** }
 980              	 .loc 2 321 0
 981 0026 1846     	 mov r0,r3
 982 0028 0C37     	 adds r7,r7,#12
 983              	 .cfi_def_cfa_offset 4
 984 002a BD46     	 mov sp,r7
 985              	 .cfi_def_cfa_register 13
 986              	 
 987 002c 5DF8047B 	 ldr r7,[sp],#4
 988              	 .cfi_restore 7
 989              	 .cfi_def_cfa_offset 0
 990 0030 7047     	 bx lr
 991              	 .cfi_endproc
 992              	.LFE199:
 994 0032 00BF     	 .section .text.XMC_DMA_CH_Init,"ax",%progbits
 995              	 .align 2
 996              	 .global XMC_DMA_CH_Init
 997              	 .thumb
 998              	 .thumb_func
 1000              	XMC_DMA_CH_Init:
 1001              	.LFB200:
 322:../Libraries/XMCLib/src/xmc_dma.c **** 
 323:../Libraries/XMCLib/src/xmc_dma.c **** /* Initialize DMA channel */
 324:../Libraries/XMCLib/src/xmc_dma.c **** XMC_DMA_CH_STATUS_t XMC_DMA_CH_Init(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_C
 325:../Libraries/XMCLib/src/xmc_dma.c **** {
 1002              	 .loc 2 325 0
 1003              	 .cfi_startproc
 1004              	 
 1005              	 
 1006 0000 80B5     	 push {r7,lr}
 1007              	 .cfi_def_cfa_offset 8
 1008              	 .cfi_offset 7,-8
 1009              	 .cfi_offset 14,-4
 1010 0002 86B0     	 sub sp,sp,#24
 1011              	 .cfi_def_cfa_offset 32
 1012 0004 00AF     	 add r7,sp,#0
 1013              	 .cfi_def_cfa_register 7
 1014 0006 F860     	 str r0,[r7,#12]
 1015 0008 0B46     	 mov r3,r1
 1016 000a 7A60     	 str r2,[r7,#4]
 1017 000c FB72     	 strb r3,[r7,#11]
 326:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_STATUS_t status;
 327:../Libraries/XMCLib/src/xmc_dma.c ****   uint8_t line;
 328:../Libraries/XMCLib/src/xmc_dma.c ****   uint8_t peripheral;
 329:../Libraries/XMCLib/src/xmc_dma.c **** 
 330:../Libraries/XMCLib/src/xmc_dma.c ****   if (XMC_DMA_IsEnabled(dma) == true)
 1018              	 .loc 2 330 0
 1019 000e F868     	 ldr r0,[r7,#12]
 1020 0010 FFF7FEFF 	 bl XMC_DMA_IsEnabled
 1021 0014 0346     	 mov r3,r0
 1022 0016 002B     	 cmp r3,#0
 1023 0018 00F0F181 	 beq .L64
 331:../Libraries/XMCLib/src/xmc_dma.c ****   {
 332:../Libraries/XMCLib/src/xmc_dma.c ****     if (XMC_DMA_CH_IsEnabled(dma, channel) == false)
 1024              	 .loc 2 332 0
 1025 001c FB7A     	 ldrb r3,[r7,#11]
 1026 001e F868     	 ldr r0,[r7,#12]
 1027 0020 1946     	 mov r1,r3
 1028 0022 FFF7FEFF 	 bl XMC_DMA_CH_IsEnabled
 1029 0026 0346     	 mov r3,r0
 1030 0028 83F00103 	 eor r3,r3,#1
 1031 002c DBB2     	 uxtb r3,r3
 1032 002e 002B     	 cmp r3,#0
 1033 0030 00F0E281 	 beq .L65
 333:../Libraries/XMCLib/src/xmc_dma.c ****     {
 334:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].SAR = config->src_addr;
 1034              	 .loc 2 334 0
 1035 0034 FB7A     	 ldrb r3,[r7,#11]
 1036 0036 7A68     	 ldr r2,[r7,#4]
 1037 0038 5268     	 ldr r2,[r2,#4]
 1038 003a F968     	 ldr r1,[r7,#12]
 1039 003c 5820     	 movs r0,#88
 1040 003e 00FB03F3 	 mul r3,r0,r3
 1041 0042 0B44     	 add r3,r3,r1
 1042 0044 1A60     	 str r2,[r3]
 335:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].DAR = config->dst_addr;
 1043              	 .loc 2 335 0
 1044 0046 FB7A     	 ldrb r3,[r7,#11]
 1045 0048 7A68     	 ldr r2,[r7,#4]
 1046 004a 9268     	 ldr r2,[r2,#8]
 1047 004c F968     	 ldr r1,[r7,#12]
 1048 004e 5820     	 movs r0,#88
 1049 0050 00FB03F3 	 mul r3,r0,r3
 1050 0054 0B44     	 add r3,r3,r1
 1051 0056 0833     	 adds r3,r3,#8
 1052 0058 1A60     	 str r2,[r3]
 336:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].LLP = (uint32_t)config->linked_list_pointer;
 1053              	 .loc 2 336 0
 1054 005a FB7A     	 ldrb r3,[r7,#11]
 1055 005c 7A68     	 ldr r2,[r7,#4]
 1056 005e D268     	 ldr r2,[r2,#12]
 1057 0060 1046     	 mov r0,r2
 1058 0062 FA68     	 ldr r2,[r7,#12]
 1059 0064 5821     	 movs r1,#88
 1060 0066 01FB03F3 	 mul r3,r1,r3
 1061 006a 1344     	 add r3,r3,r2
 1062 006c 1033     	 adds r3,r3,#16
 1063 006e 1860     	 str r0,[r3]
 337:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CTLH = (uint32_t)config->block_size;
 1064              	 .loc 2 337 0
 1065 0070 FB7A     	 ldrb r3,[r7,#11]
 1066 0072 7A68     	 ldr r2,[r7,#4]
 1067 0074 128B     	 ldrh r2,[r2,#24]
 1068 0076 1046     	 mov r0,r2
 1069 0078 FA68     	 ldr r2,[r7,#12]
 1070 007a 5821     	 movs r1,#88
 1071 007c 01FB03F3 	 mul r3,r1,r3
 1072 0080 1344     	 add r3,r3,r2
 1073 0082 1833     	 adds r3,r3,#24
 1074 0084 5860     	 str r0,[r3,#4]
 338:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CTLL = config->control;
 1075              	 .loc 2 338 0
 1076 0086 FB7A     	 ldrb r3,[r7,#11]
 1077 0088 7A68     	 ldr r2,[r7,#4]
 1078 008a 1268     	 ldr r2,[r2]
 1079 008c F968     	 ldr r1,[r7,#12]
 1080 008e 5820     	 movs r0,#88
 1081 0090 00FB03F3 	 mul r3,r0,r3
 1082 0094 0B44     	 add r3,r3,r1
 1083 0096 1833     	 adds r3,r3,#24
 1084 0098 1A60     	 str r2,[r3]
 339:../Libraries/XMCLib/src/xmc_dma.c **** 
 340:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CFGL = (uint32_t)((uint32_t)config->priority |
 1085              	 .loc 2 340 0
 1086 009a FB7A     	 ldrb r3,[r7,#11]
 1087 009c 7A68     	 ldr r2,[r7,#4]
 1088 009e D27E     	 ldrb r2,[r2,#27]
 1089 00a0 42F44062 	 orr r2,r2,#3072
 1090 00a4 F968     	 ldr r1,[r7,#12]
 1091 00a6 5820     	 movs r0,#88
 1092 00a8 00FB03F3 	 mul r3,r0,r3
 1093 00ac 0B44     	 add r3,r3,r1
 1094 00ae 4033     	 adds r3,r3,#64
 1095 00b0 1A60     	 str r2,[r3]
 341:../Libraries/XMCLib/src/xmc_dma.c ****                                          (uint32_t)GPDMA0_CH_CFGL_HS_SEL_SRC_Msk |
 342:../Libraries/XMCLib/src/xmc_dma.c ****                                          (uint32_t)GPDMA0_CH_CFGL_HS_SEL_DST_Msk);
 343:../Libraries/XMCLib/src/xmc_dma.c **** 
 344:../Libraries/XMCLib/src/xmc_dma.c ****       if ((dma == XMC_DMA0) && (channel < (uint8_t)2))
 1096              	 .loc 2 344 0
 1097 00b2 FB68     	 ldr r3,[r7,#12]
 1098 00b4 B14A     	 ldr r2,.L91
 1099 00b6 9342     	 cmp r3,r2
 1100 00b8 16D1     	 bne .L66
 1101              	 .loc 2 344 0 is_stmt 0 discriminator 1
 1102 00ba FB7A     	 ldrb r3,[r7,#11]
 1103 00bc 012B     	 cmp r3,#1
 1104 00be 13D8     	 bhi .L66
 345:../Libraries/XMCLib/src/xmc_dma.c ****       {
 346:../Libraries/XMCLib/src/xmc_dma.c ****         /* Configure scatter and gather */
 347:../Libraries/XMCLib/src/xmc_dma.c ****         dma->CH[channel].SGR = config->src_gather_control;
 1105              	 .loc 2 347 0 is_stmt 1
 1106 00c0 FB7A     	 ldrb r3,[r7,#11]
 1107 00c2 7A68     	 ldr r2,[r7,#4]
 1108 00c4 1269     	 ldr r2,[r2,#16]
 1109 00c6 F968     	 ldr r1,[r7,#12]
 1110 00c8 5820     	 movs r0,#88
 1111 00ca 00FB03F3 	 mul r3,r0,r3
 1112 00ce 0B44     	 add r3,r3,r1
 1113 00d0 4833     	 adds r3,r3,#72
 1114 00d2 1A60     	 str r2,[r3]
 348:../Libraries/XMCLib/src/xmc_dma.c ****         dma->CH[channel].DSR = config->dst_scatter_control;
 1115              	 .loc 2 348 0
 1116 00d4 FB7A     	 ldrb r3,[r7,#11]
 1117 00d6 7A68     	 ldr r2,[r7,#4]
 1118 00d8 5269     	 ldr r2,[r2,#20]
 1119 00da F968     	 ldr r1,[r7,#12]
 1120 00dc 5820     	 movs r0,#88
 1121 00de 00FB03F3 	 mul r3,r0,r3
 1122 00e2 0B44     	 add r3,r3,r1
 1123 00e4 5033     	 adds r3,r3,#80
 1124 00e6 1A60     	 str r2,[r3]
 1125              	.L66:
 349:../Libraries/XMCLib/src/xmc_dma.c ****       }
 350:../Libraries/XMCLib/src/xmc_dma.c **** 
 351:../Libraries/XMCLib/src/xmc_dma.c ****       if (config->dst_handshaking == XMC_DMA_CH_DST_HANDSHAKING_HARDWARE)
 1126              	 .loc 2 351 0
 1127 00e8 7B68     	 ldr r3,[r7,#4]
 1128 00ea 1B8C     	 ldrh r3,[r3,#32]
 1129 00ec 002B     	 cmp r3,#0
 1130 00ee 4FD1     	 bne .L67
 352:../Libraries/XMCLib/src/xmc_dma.c ****       {
 353:../Libraries/XMCLib/src/xmc_dma.c ****         /* Hardware handshaking interface configuration */
 354:../Libraries/XMCLib/src/xmc_dma.c ****         if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA) ||
 1131              	 .loc 2 354 0
 1132 00f0 7B68     	 ldr r3,[r7,#4]
 1133 00f2 9B78     	 ldrb r3,[r3,#2]
 1134 00f4 03F07003 	 and r3,r3,#112
 1135 00f8 DBB2     	 uxtb r3,r3
 1136 00fa 102B     	 cmp r3,#16
 1137 00fc 06D0     	 beq .L68
 355:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 1138              	 .loc 2 355 0 discriminator 1
 1139 00fe 7B68     	 ldr r3,[r7,#4]
 1140 0100 9B78     	 ldrb r3,[r3,#2]
 1141 0102 03F07003 	 and r3,r3,#112
 1142 0106 DBB2     	 uxtb r3,r3
 354:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 1143              	 .loc 2 354 0 discriminator 1
 1144 0108 302B     	 cmp r3,#48
 1145 010a 41D1     	 bne .L67
 1146              	.L68:
 356:../Libraries/XMCLib/src/xmc_dma.c ****         {
 357:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 358:../Libraries/XMCLib/src/xmc_dma.c ****           if (dma == XMC_DMA0)
 1147              	 .loc 2 358 0
 1148 010c FB68     	 ldr r3,[r7,#12]
 1149 010e 9B4A     	 ldr r2,.L91
 1150 0110 9342     	 cmp r3,r2
 1151 0112 06D1     	 bne .L69
 359:../Libraries/XMCLib/src/xmc_dma.c ****           {
 360:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 361:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->dst_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 1152              	 .loc 2 361 0
 1153 0114 7B68     	 ldr r3,[r7,#4]
 1154 0116 93F82230 	 ldrb r3,[r3,#34]
 1155 011a 03F00703 	 and r3,r3,#7
 1156 011e BB75     	 strb r3,[r7,#22]
 1157 0120 05E0     	 b .L70
 1158              	.L69:
 362:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 363:../Libraries/XMCLib/src/xmc_dma.c ****           }
 364:../Libraries/XMCLib/src/xmc_dma.c ****           else
 365:../Libraries/XMCLib/src/xmc_dma.c ****           {
 366:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->dst_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 1159              	 .loc 2 366 0
 1160 0122 7B68     	 ldr r3,[r7,#4]
 1161 0124 93F82230 	 ldrb r3,[r3,#34]
 1162 0128 03F00303 	 and r3,r3,#3
 1163 012c BB75     	 strb r3,[r7,#22]
 1164              	.L70:
 367:../Libraries/XMCLib/src/xmc_dma.c ****           }
 368:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 369:../Libraries/XMCLib/src/xmc_dma.c ****           peripheral = config->dst_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 1165              	 .loc 2 369 0
 1166 012e 7B68     	 ldr r3,[r7,#4]
 1167 0130 93F82230 	 ldrb r3,[r3,#34]
 1168 0134 1B09     	 lsrs r3,r3,#4
 1169 0136 7B75     	 strb r3,[r7,#21]
 370:../Libraries/XMCLib/src/xmc_dma.c **** 
 371:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_DEST_PER_Pos);
 1170              	 .loc 2 371 0
 1171 0138 FB7A     	 ldrb r3,[r7,#11]
 1172 013a FA7A     	 ldrb r2,[r7,#11]
 1173 013c F968     	 ldr r1,[r7,#12]
 1174 013e 5820     	 movs r0,#88
 1175 0140 00FB02F2 	 mul r2,r0,r2
 1176 0144 0A44     	 add r2,r2,r1
 1177 0146 4032     	 adds r2,r2,#64
 1178 0148 5168     	 ldr r1,[r2,#4]
 1179 014a BA7D     	 ldrb r2,[r7,#22]
 1180 014c D202     	 lsls r2,r2,#11
 1181 014e 0A43     	 orrs r2,r2,r1
 1182 0150 F968     	 ldr r1,[r7,#12]
 1183 0152 5820     	 movs r0,#88
 1184 0154 00FB03F3 	 mul r3,r0,r3
 1185 0158 0B44     	 add r3,r3,r1
 1186 015a 4033     	 adds r3,r3,#64
 1187 015c 5A60     	 str r2,[r3,#4]
 372:../Libraries/XMCLib/src/xmc_dma.c ****           XMC_DMA_EnableRequestLine(dma, line, peripheral);
 1188              	 .loc 2 372 0
 1189 015e BA7D     	 ldrb r2,[r7,#22]
 1190 0160 7B7D     	 ldrb r3,[r7,#21]
 1191 0162 F868     	 ldr r0,[r7,#12]
 1192 0164 1146     	 mov r1,r2
 1193 0166 1A46     	 mov r2,r3
 1194 0168 FFF7FEFF 	 bl XMC_DMA_EnableRequestLine
 373:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_DST_Msk;
 1195              	 .loc 2 373 0
 1196 016c FB7A     	 ldrb r3,[r7,#11]
 1197 016e FA7A     	 ldrb r2,[r7,#11]
 1198 0170 F968     	 ldr r1,[r7,#12]
 1199 0172 5820     	 movs r0,#88
 1200 0174 00FB02F2 	 mul r2,r0,r2
 1201 0178 0A44     	 add r2,r2,r1
 1202 017a 4032     	 adds r2,r2,#64
 1203 017c 1268     	 ldr r2,[r2]
 1204 017e 22F48062 	 bic r2,r2,#1024
 1205 0182 F968     	 ldr r1,[r7,#12]
 1206 0184 5820     	 movs r0,#88
 1207 0186 00FB03F3 	 mul r3,r0,r3
 1208 018a 0B44     	 add r3,r3,r1
 1209 018c 4033     	 adds r3,r3,#64
 1210 018e 1A60     	 str r2,[r3]
 1211              	.L67:
 374:../Libraries/XMCLib/src/xmc_dma.c ****         }
 375:../Libraries/XMCLib/src/xmc_dma.c ****       }
 376:../Libraries/XMCLib/src/xmc_dma.c **** 
 377:../Libraries/XMCLib/src/xmc_dma.c **** 
 378:../Libraries/XMCLib/src/xmc_dma.c ****       if (config->src_handshaking == XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE)
 1212              	 .loc 2 378 0
 1213 0190 7B68     	 ldr r3,[r7,#4]
 1214 0192 9B8B     	 ldrh r3,[r3,#28]
 1215 0194 002B     	 cmp r3,#0
 1216 0196 4CD1     	 bne .L71
 379:../Libraries/XMCLib/src/xmc_dma.c ****       {
 380:../Libraries/XMCLib/src/xmc_dma.c ****         if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA) ||
 1217              	 .loc 2 380 0
 1218 0198 7B68     	 ldr r3,[r7,#4]
 1219 019a 9B78     	 ldrb r3,[r3,#2]
 1220 019c 03F07003 	 and r3,r3,#112
 1221 01a0 DBB2     	 uxtb r3,r3
 1222 01a2 202B     	 cmp r3,#32
 1223 01a4 06D0     	 beq .L72
 381:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 1224              	 .loc 2 381 0 discriminator 1
 1225 01a6 7B68     	 ldr r3,[r7,#4]
 1226 01a8 9B78     	 ldrb r3,[r3,#2]
 1227 01aa 03F07003 	 and r3,r3,#112
 1228 01ae DBB2     	 uxtb r3,r3
 380:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 1229              	 .loc 2 380 0 discriminator 1
 1230 01b0 302B     	 cmp r3,#48
 1231 01b2 3ED1     	 bne .L71
 1232              	.L72:
 382:../Libraries/XMCLib/src/xmc_dma.c ****         {
 383:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 384:../Libraries/XMCLib/src/xmc_dma.c ****           if (dma == XMC_DMA0)
 1233              	 .loc 2 384 0
 1234 01b4 FB68     	 ldr r3,[r7,#12]
 1235 01b6 714A     	 ldr r2,.L91
 1236 01b8 9342     	 cmp r3,r2
 1237 01ba 05D1     	 bne .L73
 385:../Libraries/XMCLib/src/xmc_dma.c ****           {
 386:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 387:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->src_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 1238              	 .loc 2 387 0
 1239 01bc 7B68     	 ldr r3,[r7,#4]
 1240 01be 9B7F     	 ldrb r3,[r3,#30]
 1241 01c0 03F00703 	 and r3,r3,#7
 1242 01c4 BB75     	 strb r3,[r7,#22]
 1243 01c6 04E0     	 b .L74
 1244              	.L73:
 388:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 389:../Libraries/XMCLib/src/xmc_dma.c ****           }
 390:../Libraries/XMCLib/src/xmc_dma.c ****           else
 391:../Libraries/XMCLib/src/xmc_dma.c ****           {
 392:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->src_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 1245              	 .loc 2 392 0
 1246 01c8 7B68     	 ldr r3,[r7,#4]
 1247 01ca 9B7F     	 ldrb r3,[r3,#30]
 1248 01cc 03F00303 	 and r3,r3,#3
 1249 01d0 BB75     	 strb r3,[r7,#22]
 1250              	.L74:
 393:../Libraries/XMCLib/src/xmc_dma.c ****           }
 394:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 395:../Libraries/XMCLib/src/xmc_dma.c ****           peripheral = config->src_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 1251              	 .loc 2 395 0
 1252 01d2 7B68     	 ldr r3,[r7,#4]
 1253 01d4 9B7F     	 ldrb r3,[r3,#30]
 1254 01d6 1B09     	 lsrs r3,r3,#4
 1255 01d8 7B75     	 strb r3,[r7,#21]
 396:../Libraries/XMCLib/src/xmc_dma.c **** 
 397:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_SRC_PER_Pos);
 1256              	 .loc 2 397 0
 1257 01da FB7A     	 ldrb r3,[r7,#11]
 1258 01dc FA7A     	 ldrb r2,[r7,#11]
 1259 01de F968     	 ldr r1,[r7,#12]
 1260 01e0 5820     	 movs r0,#88
 1261 01e2 00FB02F2 	 mul r2,r0,r2
 1262 01e6 0A44     	 add r2,r2,r1
 1263 01e8 4032     	 adds r2,r2,#64
 1264 01ea 5168     	 ldr r1,[r2,#4]
 1265 01ec BA7D     	 ldrb r2,[r7,#22]
 1266 01ee D201     	 lsls r2,r2,#7
 1267 01f0 0A43     	 orrs r2,r2,r1
 1268 01f2 F968     	 ldr r1,[r7,#12]
 1269 01f4 5820     	 movs r0,#88
 1270 01f6 00FB03F3 	 mul r3,r0,r3
 1271 01fa 0B44     	 add r3,r3,r1
 1272 01fc 4033     	 adds r3,r3,#64
 1273 01fe 5A60     	 str r2,[r3,#4]
 398:../Libraries/XMCLib/src/xmc_dma.c ****           XMC_DMA_EnableRequestLine(dma, line, peripheral);
 1274              	 .loc 2 398 0
 1275 0200 BA7D     	 ldrb r2,[r7,#22]
 1276 0202 7B7D     	 ldrb r3,[r7,#21]
 1277 0204 F868     	 ldr r0,[r7,#12]
 1278 0206 1146     	 mov r1,r2
 1279 0208 1A46     	 mov r2,r3
 1280 020a FFF7FEFF 	 bl XMC_DMA_EnableRequestLine
 399:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_SRC_Msk;
 1281              	 .loc 2 399 0
 1282 020e FB7A     	 ldrb r3,[r7,#11]
 1283 0210 FA7A     	 ldrb r2,[r7,#11]
 1284 0212 F968     	 ldr r1,[r7,#12]
 1285 0214 5820     	 movs r0,#88
 1286 0216 00FB02F2 	 mul r2,r0,r2
 1287 021a 0A44     	 add r2,r2,r1
 1288 021c 4032     	 adds r2,r2,#64
 1289 021e 1268     	 ldr r2,[r2]
 1290 0220 22F40062 	 bic r2,r2,#2048
 1291 0224 F968     	 ldr r1,[r7,#12]
 1292 0226 5820     	 movs r0,#88
 1293 0228 00FB03F3 	 mul r3,r0,r3
 1294 022c 0B44     	 add r3,r3,r1
 1295 022e 4033     	 adds r3,r3,#64
 1296 0230 1A60     	 str r2,[r3]
 1297              	.L71:
 400:../Libraries/XMCLib/src/xmc_dma.c ****         }
 401:../Libraries/XMCLib/src/xmc_dma.c ****       }
 402:../Libraries/XMCLib/src/xmc_dma.c ****       
 403:../Libraries/XMCLib/src/xmc_dma.c ****       XMC_DMA_CH_ClearEventStatus(dma, channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMP
 1298              	 .loc 2 403 0
 1299 0232 FB7A     	 ldrb r3,[r7,#11]
 1300 0234 F868     	 ldr r0,[r7,#12]
 1301 0236 1946     	 mov r1,r3
 1302 0238 1F22     	 movs r2,#31
 1303 023a FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 404:../Libraries/XMCLib/src/xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFE
 405:../Libraries/XMCLib/src/xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTI
 406:../Libraries/XMCLib/src/xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTI
 407:../Libraries/XMCLib/src/xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_ERROR));
 408:../Libraries/XMCLib/src/xmc_dma.c **** 
 409:../Libraries/XMCLib/src/xmc_dma.c ****       switch (config->transfer_type)
 1304              	 .loc 2 409 0
 1305 023e 7B68     	 ldr r3,[r7,#4]
 1306 0240 9B7E     	 ldrb r3,[r3,#26]
 1307 0242 082B     	 cmp r3,#8
 1308 0244 00F2D480 	 bhi .L90
 1309 0248 01A2     	 adr r2,.L77
 1310 024a 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1311 024e 00BF     	 .p2align 2
 1312              	.L77:
 1313 0250 F1030000 	 .word .L90+1
 1314 0254 75020000 	 .word .L78+1
 1315 0258 9B020000 	 .word .L79+1
 1316 025c C1020000 	 .word .L80+1
 1317 0260 E7020000 	 .word .L81+1
 1318 0264 0D030000 	 .word .L82+1
 1319 0268 57030000 	 .word .L83+1
 1320 026c 81030000 	 .word .L84+1
 1321 0270 CB030000 	 .word .L85+1
 1322              	 .p2align 1
 1323              	.L78:
 410:../Libraries/XMCLib/src/xmc_dma.c ****       {
 411:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK:
 412:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 413:../Libraries/XMCLib/src/xmc_dma.c **** 
 414:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD:
 415:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 1324              	 .loc 2 415 0
 1325 0274 FB7A     	 ldrb r3,[r7,#11]
 1326 0276 FA7A     	 ldrb r2,[r7,#11]
 1327 0278 F968     	 ldr r1,[r7,#12]
 1328 027a 5820     	 movs r0,#88
 1329 027c 00FB02F2 	 mul r2,r0,r2
 1330 0280 0A44     	 add r2,r2,r1
 1331 0282 4032     	 adds r2,r2,#64
 1332 0284 1268     	 ldr r2,[r2]
 1333 0286 42F00042 	 orr r2,r2,#-2147483648
 1334 028a F968     	 ldr r1,[r7,#12]
 1335 028c 5820     	 movs r0,#88
 1336 028e 00FB03F3 	 mul r3,r0,r3
 1337 0292 0B44     	 add r3,r3,r1
 1338 0294 4033     	 adds r3,r3,#64
 1339 0296 1A60     	 str r2,[r3]
 416:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1340              	 .loc 2 416 0
 1341 0298 ABE0     	 b .L86
 1342              	.L79:
 417:../Libraries/XMCLib/src/xmc_dma.c **** 
 418:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS:
 419:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 1343              	 .loc 2 419 0
 1344 029a FB7A     	 ldrb r3,[r7,#11]
 1345 029c FA7A     	 ldrb r2,[r7,#11]
 1346 029e F968     	 ldr r1,[r7,#12]
 1347 02a0 5820     	 movs r0,#88
 1348 02a2 00FB02F2 	 mul r2,r0,r2
 1349 02a6 0A44     	 add r2,r2,r1
 1350 02a8 4032     	 adds r2,r2,#64
 1351 02aa 1268     	 ldr r2,[r2]
 1352 02ac 42F08042 	 orr r2,r2,#1073741824
 1353 02b0 F968     	 ldr r1,[r7,#12]
 1354 02b2 5820     	 movs r0,#88
 1355 02b4 00FB03F3 	 mul r3,r0,r3
 1356 02b8 0B44     	 add r3,r3,r1
 1357 02ba 4033     	 adds r3,r3,#64
 1358 02bc 1A60     	 str r2,[r3]
 420:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1359              	 .loc 2 420 0
 1360 02be 98E0     	 b .L86
 1361              	.L80:
 421:../Libraries/XMCLib/src/xmc_dma.c **** 
 422:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD:
 423:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)((uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk |
 1362              	 .loc 2 423 0
 1363 02c0 FB7A     	 ldrb r3,[r7,#11]
 1364 02c2 FA7A     	 ldrb r2,[r7,#11]
 1365 02c4 F968     	 ldr r1,[r7,#12]
 1366 02c6 5820     	 movs r0,#88
 1367 02c8 00FB02F2 	 mul r2,r0,r2
 1368 02cc 0A44     	 add r2,r2,r1
 1369 02ce 4032     	 adds r2,r2,#64
 1370 02d0 1268     	 ldr r2,[r2]
 1371 02d2 42F04042 	 orr r2,r2,#-1073741824
 1372 02d6 F968     	 ldr r1,[r7,#12]
 1373 02d8 5820     	 movs r0,#88
 1374 02da 00FB03F3 	 mul r3,r0,r3
 1375 02de 0B44     	 add r3,r3,r1
 1376 02e0 4033     	 adds r3,r3,#64
 1377 02e2 1A60     	 str r2,[r3]
 424:../Libraries/XMCLib/src/xmc_dma.c ****                                               (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk);
 425:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1378              	 .loc 2 425 0
 1379 02e4 85E0     	 b .L86
 1380              	.L81:
 426:../Libraries/XMCLib/src/xmc_dma.c **** 
 427:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED:
 428:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 1381              	 .loc 2 428 0
 1382 02e6 FB7A     	 ldrb r3,[r7,#11]
 1383 02e8 FA7A     	 ldrb r2,[r7,#11]
 1384 02ea F968     	 ldr r1,[r7,#12]
 1385 02ec 5820     	 movs r0,#88
 1386 02ee 00FB02F2 	 mul r2,r0,r2
 1387 02f2 0A44     	 add r2,r2,r1
 1388 02f4 1832     	 adds r2,r2,#24
 1389 02f6 1268     	 ldr r2,[r2]
 1390 02f8 42F00062 	 orr r2,r2,#134217728
 1391 02fc F968     	 ldr r1,[r7,#12]
 1392 02fe 5820     	 movs r0,#88
 1393 0300 00FB03F3 	 mul r3,r0,r3
 1394 0304 0B44     	 add r3,r3,r1
 1395 0306 1833     	 adds r3,r3,#24
 1396 0308 1A60     	 str r2,[r3]
 429:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1397              	 .loc 2 429 0
 1398 030a 72E0     	 b .L86
 1399              	.L82:
 430:../Libraries/XMCLib/src/xmc_dma.c **** 
 431:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED:
 432:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 1400              	 .loc 2 432 0
 1401 030c FB7A     	 ldrb r3,[r7,#11]
 1402 030e FA7A     	 ldrb r2,[r7,#11]
 1403 0310 F968     	 ldr r1,[r7,#12]
 1404 0312 5820     	 movs r0,#88
 1405 0314 00FB02F2 	 mul r2,r0,r2
 1406 0318 0A44     	 add r2,r2,r1
 1407 031a 4032     	 adds r2,r2,#64
 1408 031c 1268     	 ldr r2,[r2]
 1409 031e 42F08042 	 orr r2,r2,#1073741824
 1410 0322 F968     	 ldr r1,[r7,#12]
 1411 0324 5820     	 movs r0,#88
 1412 0326 00FB03F3 	 mul r3,r0,r3
 1413 032a 0B44     	 add r3,r3,r1
 1414 032c 4033     	 adds r3,r3,#64
 1415 032e 1A60     	 str r2,[r3]
 433:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 1416              	 .loc 2 433 0
 1417 0330 FB7A     	 ldrb r3,[r7,#11]
 1418 0332 FA7A     	 ldrb r2,[r7,#11]
 1419 0334 F968     	 ldr r1,[r7,#12]
 1420 0336 5820     	 movs r0,#88
 1421 0338 00FB02F2 	 mul r2,r0,r2
 1422 033c 0A44     	 add r2,r2,r1
 1423 033e 1832     	 adds r2,r2,#24
 1424 0340 1268     	 ldr r2,[r2]
 1425 0342 42F00062 	 orr r2,r2,#134217728
 1426 0346 F968     	 ldr r1,[r7,#12]
 1427 0348 5820     	 movs r0,#88
 1428 034a 00FB03F3 	 mul r3,r0,r3
 1429 034e 0B44     	 add r3,r3,r1
 1430 0350 1833     	 adds r3,r3,#24
 1431 0352 1A60     	 str r2,[r3]
 434:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1432              	 .loc 2 434 0
 1433 0354 4DE0     	 b .L86
 1434              	.L83:
 435:../Libraries/XMCLib/src/xmc_dma.c **** 
 436:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS:
 437:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 1435              	 .loc 2 437 0
 1436 0356 FB7A     	 ldrb r3,[r7,#11]
 1437 0358 FA7A     	 ldrb r2,[r7,#11]
 1438 035a F968     	 ldr r1,[r7,#12]
 1439 035c 5820     	 movs r0,#88
 1440 035e 00FB02F2 	 mul r2,r0,r2
 1441 0362 0A44     	 add r2,r2,r1
 1442 0364 1832     	 adds r2,r2,#24
 1443 0366 1268     	 ldr r2,[r2]
 1444 0368 42F08052 	 orr r2,r2,#268435456
 1445 036c F968     	 ldr r1,[r7,#12]
 1446 036e 5820     	 movs r0,#88
 1447 0370 00FB03F3 	 mul r3,r0,r3
 1448 0374 0B44     	 add r3,r3,r1
 1449 0376 1833     	 adds r3,r3,#24
 1450 0378 1A60     	 str r2,[r3]
 438:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1451              	 .loc 2 438 0
 1452 037a 3AE0     	 b .L86
 1453              	.L92:
 1454              	 .align 2
 1455              	.L91:
 1456 037c 00400150 	 .word 1342259200
 1457              	.L84:
 439:../Libraries/XMCLib/src/xmc_dma.c **** 
 440:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD:
 441:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 1458              	 .loc 2 441 0
 1459 0380 FB7A     	 ldrb r3,[r7,#11]
 1460 0382 FA7A     	 ldrb r2,[r7,#11]
 1461 0384 F968     	 ldr r1,[r7,#12]
 1462 0386 5820     	 movs r0,#88
 1463 0388 00FB02F2 	 mul r2,r0,r2
 1464 038c 0A44     	 add r2,r2,r1
 1465 038e 4032     	 adds r2,r2,#64
 1466 0390 1268     	 ldr r2,[r2]
 1467 0392 42F00042 	 orr r2,r2,#-2147483648
 1468 0396 F968     	 ldr r1,[r7,#12]
 1469 0398 5820     	 movs r0,#88
 1470 039a 00FB03F3 	 mul r3,r0,r3
 1471 039e 0B44     	 add r3,r3,r1
 1472 03a0 4033     	 adds r3,r3,#64
 1473 03a2 1A60     	 str r2,[r3]
 442:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 1474              	 .loc 2 442 0
 1475 03a4 FB7A     	 ldrb r3,[r7,#11]
 1476 03a6 FA7A     	 ldrb r2,[r7,#11]
 1477 03a8 F968     	 ldr r1,[r7,#12]
 1478 03aa 5820     	 movs r0,#88
 1479 03ac 00FB02F2 	 mul r2,r0,r2
 1480 03b0 0A44     	 add r2,r2,r1
 1481 03b2 1832     	 adds r2,r2,#24
 1482 03b4 1268     	 ldr r2,[r2]
 1483 03b6 42F08052 	 orr r2,r2,#268435456
 1484 03ba F968     	 ldr r1,[r7,#12]
 1485 03bc 5820     	 movs r0,#88
 1486 03be 00FB03F3 	 mul r3,r0,r3
 1487 03c2 0B44     	 add r3,r3,r1
 1488 03c4 1833     	 adds r3,r3,#24
 1489 03c6 1A60     	 str r2,[r3]
 443:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1490              	 .loc 2 443 0
 1491 03c8 13E0     	 b .L86
 1492              	.L85:
 444:../Libraries/XMCLib/src/xmc_dma.c **** 
 445:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED:
 446:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)((uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk |
 1493              	 .loc 2 446 0
 1494 03ca FB7A     	 ldrb r3,[r7,#11]
 1495 03cc FA7A     	 ldrb r2,[r7,#11]
 1496 03ce F968     	 ldr r1,[r7,#12]
 1497 03d0 5820     	 movs r0,#88
 1498 03d2 00FB02F2 	 mul r2,r0,r2
 1499 03d6 0A44     	 add r2,r2,r1
 1500 03d8 1832     	 adds r2,r2,#24
 1501 03da 1268     	 ldr r2,[r2]
 1502 03dc 42F0C052 	 orr r2,r2,#402653184
 1503 03e0 F968     	 ldr r1,[r7,#12]
 1504 03e2 5820     	 movs r0,#88
 1505 03e4 00FB03F3 	 mul r3,r0,r3
 1506 03e8 0B44     	 add r3,r3,r1
 1507 03ea 1833     	 adds r3,r3,#24
 1508 03ec 1A60     	 str r2,[r3]
 447:../Libraries/XMCLib/src/xmc_dma.c ****                                               (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk);
 448:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1509              	 .loc 2 448 0
 1510 03ee 00E0     	 b .L86
 1511              	.L90:
 449:../Libraries/XMCLib/src/xmc_dma.c **** 
 450:../Libraries/XMCLib/src/xmc_dma.c ****         default:
 451:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1512              	 .loc 2 451 0
 1513 03f0 00BF     	 nop
 1514              	.L86:
 452:../Libraries/XMCLib/src/xmc_dma.c ****       }
 453:../Libraries/XMCLib/src/xmc_dma.c **** 
 454:../Libraries/XMCLib/src/xmc_dma.c ****       status = XMC_DMA_CH_STATUS_OK;
 1515              	 .loc 2 454 0
 1516 03f2 0023     	 movs r3,#0
 1517 03f4 FB75     	 strb r3,[r7,#23]
 1518 03f6 04E0     	 b .L88
 1519              	.L65:
 455:../Libraries/XMCLib/src/xmc_dma.c **** 
 456:../Libraries/XMCLib/src/xmc_dma.c ****     }
 457:../Libraries/XMCLib/src/xmc_dma.c ****     else
 458:../Libraries/XMCLib/src/xmc_dma.c ****     {
 459:../Libraries/XMCLib/src/xmc_dma.c ****       status = XMC_DMA_CH_STATUS_BUSY;
 1520              	 .loc 2 459 0
 1521 03f8 0223     	 movs r3,#2
 1522 03fa FB75     	 strb r3,[r7,#23]
 1523 03fc 01E0     	 b .L88
 1524              	.L64:
 460:../Libraries/XMCLib/src/xmc_dma.c ****     }
 461:../Libraries/XMCLib/src/xmc_dma.c ****   }
 462:../Libraries/XMCLib/src/xmc_dma.c ****   else 
 463:../Libraries/XMCLib/src/xmc_dma.c ****   {
 464:../Libraries/XMCLib/src/xmc_dma.c ****     status = XMC_DMA_CH_STATUS_ERROR;
 1525              	 .loc 2 464 0
 1526 03fe 0123     	 movs r3,#1
 1527 0400 FB75     	 strb r3,[r7,#23]
 1528              	.L88:
 465:../Libraries/XMCLib/src/xmc_dma.c ****   }
 466:../Libraries/XMCLib/src/xmc_dma.c ****   
 467:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 1529              	 .loc 2 467 0
 1530 0402 FB7D     	 ldrb r3,[r7,#23]
 468:../Libraries/XMCLib/src/xmc_dma.c **** }
 1531              	 .loc 2 468 0
 1532 0404 1846     	 mov r0,r3
 1533 0406 1837     	 adds r7,r7,#24
 1534              	 .cfi_def_cfa_offset 8
 1535 0408 BD46     	 mov sp,r7
 1536              	 .cfi_def_cfa_register 13
 1537              	 
 1538 040a 80BD     	 pop {r7,pc}
 1539              	 .cfi_endproc
 1540              	.LFE200:
 1542              	 .section .text.XMC_DMA_CH_Suspend,"ax",%progbits
 1543              	 .align 2
 1544              	 .global XMC_DMA_CH_Suspend
 1545              	 .thumb
 1546              	 .thumb_func
 1548              	XMC_DMA_CH_Suspend:
 1549              	.LFB201:
 469:../Libraries/XMCLib/src/xmc_dma.c **** 
 470:../Libraries/XMCLib/src/xmc_dma.c **** /* Suspend DMA channel transfer */
 471:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_Suspend(XMC_DMA_t *const dma, const uint8_t channel)
 472:../Libraries/XMCLib/src/xmc_dma.c **** {
 1550              	 .loc 2 472 0
 1551              	 .cfi_startproc
 1552              	 
 1553              	 
 1554              	 
 1555 0000 80B4     	 push {r7}
 1556              	 .cfi_def_cfa_offset 4
 1557              	 .cfi_offset 7,-4
 1558 0002 83B0     	 sub sp,sp,#12
 1559              	 .cfi_def_cfa_offset 16
 1560 0004 00AF     	 add r7,sp,#0
 1561              	 .cfi_def_cfa_register 7
 1562 0006 7860     	 str r0,[r7,#4]
 1563 0008 0B46     	 mov r3,r1
 1564 000a FB70     	 strb r3,[r7,#3]
 473:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk;
 1565              	 .loc 2 473 0
 1566 000c FB78     	 ldrb r3,[r7,#3]
 1567 000e FA78     	 ldrb r2,[r7,#3]
 1568 0010 7968     	 ldr r1,[r7,#4]
 1569 0012 5820     	 movs r0,#88
 1570 0014 00FB02F2 	 mul r2,r0,r2
 1571 0018 0A44     	 add r2,r2,r1
 1572 001a 4032     	 adds r2,r2,#64
 1573 001c 1268     	 ldr r2,[r2]
 1574 001e 42F48072 	 orr r2,r2,#256
 1575 0022 7968     	 ldr r1,[r7,#4]
 1576 0024 5820     	 movs r0,#88
 1577 0026 00FB03F3 	 mul r3,r0,r3
 1578 002a 0B44     	 add r3,r3,r1
 1579 002c 4033     	 adds r3,r3,#64
 1580 002e 1A60     	 str r2,[r3]
 474:../Libraries/XMCLib/src/xmc_dma.c **** }
 1581              	 .loc 2 474 0
 1582 0030 0C37     	 adds r7,r7,#12
 1583              	 .cfi_def_cfa_offset 4
 1584 0032 BD46     	 mov sp,r7
 1585              	 .cfi_def_cfa_register 13
 1586              	 
 1587 0034 5DF8047B 	 ldr r7,[sp],#4
 1588              	 .cfi_restore 7
 1589              	 .cfi_def_cfa_offset 0
 1590 0038 7047     	 bx lr
 1591              	 .cfi_endproc
 1592              	.LFE201:
 1594 003a 00BF     	 .section .text.XMC_DMA_CH_Resume,"ax",%progbits
 1595              	 .align 2
 1596              	 .global XMC_DMA_CH_Resume
 1597              	 .thumb
 1598              	 .thumb_func
 1600              	XMC_DMA_CH_Resume:
 1601              	.LFB202:
 475:../Libraries/XMCLib/src/xmc_dma.c **** 
 476:../Libraries/XMCLib/src/xmc_dma.c **** /* Resume DMA channel transfer */
 477:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_Resume(XMC_DMA_t *const dma, const uint8_t channel)
 478:../Libraries/XMCLib/src/xmc_dma.c **** {
 1602              	 .loc 2 478 0
 1603              	 .cfi_startproc
 1604              	 
 1605              	 
 1606              	 
 1607 0000 80B4     	 push {r7}
 1608              	 .cfi_def_cfa_offset 4
 1609              	 .cfi_offset 7,-4
 1610 0002 83B0     	 sub sp,sp,#12
 1611              	 .cfi_def_cfa_offset 16
 1612 0004 00AF     	 add r7,sp,#0
 1613              	 .cfi_def_cfa_register 7
 1614 0006 7860     	 str r0,[r7,#4]
 1615 0008 0B46     	 mov r3,r1
 1616 000a FB70     	 strb r3,[r7,#3]
 479:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_CH_SUSP_Msk;
 1617              	 .loc 2 479 0
 1618 000c FB78     	 ldrb r3,[r7,#3]
 1619 000e FA78     	 ldrb r2,[r7,#3]
 1620 0010 7968     	 ldr r1,[r7,#4]
 1621 0012 5820     	 movs r0,#88
 1622 0014 00FB02F2 	 mul r2,r0,r2
 1623 0018 0A44     	 add r2,r2,r1
 1624 001a 4032     	 adds r2,r2,#64
 1625 001c 1268     	 ldr r2,[r2]
 1626 001e 22F48072 	 bic r2,r2,#256
 1627 0022 7968     	 ldr r1,[r7,#4]
 1628 0024 5820     	 movs r0,#88
 1629 0026 00FB03F3 	 mul r3,r0,r3
 1630 002a 0B44     	 add r3,r3,r1
 1631 002c 4033     	 adds r3,r3,#64
 1632 002e 1A60     	 str r2,[r3]
 480:../Libraries/XMCLib/src/xmc_dma.c **** }
 1633              	 .loc 2 480 0
 1634 0030 0C37     	 adds r7,r7,#12
 1635              	 .cfi_def_cfa_offset 4
 1636 0032 BD46     	 mov sp,r7
 1637              	 .cfi_def_cfa_register 13
 1638              	 
 1639 0034 5DF8047B 	 ldr r7,[sp],#4
 1640              	 .cfi_restore 7
 1641              	 .cfi_def_cfa_offset 0
 1642 0038 7047     	 bx lr
 1643              	 .cfi_endproc
 1644              	.LFE202:
 1646 003a 00BF     	 .section .text.XMC_DMA_CH_IsSuspended,"ax",%progbits
 1647              	 .align 2
 1648              	 .global XMC_DMA_CH_IsSuspended
 1649              	 .thumb
 1650              	 .thumb_func
 1652              	XMC_DMA_CH_IsSuspended:
 1653              	.LFB203:
 481:../Libraries/XMCLib/src/xmc_dma.c **** 
 482:../Libraries/XMCLib/src/xmc_dma.c **** /* Check if a DMA channel is suspended */
 483:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_CH_IsSuspended(XMC_DMA_t *const dma, const uint8_t channel)
 484:../Libraries/XMCLib/src/xmc_dma.c **** {
 1654              	 .loc 2 484 0
 1655              	 .cfi_startproc
 1656              	 
 1657              	 
 1658              	 
 1659 0000 80B4     	 push {r7}
 1660              	 .cfi_def_cfa_offset 4
 1661              	 .cfi_offset 7,-4
 1662 0002 83B0     	 sub sp,sp,#12
 1663              	 .cfi_def_cfa_offset 16
 1664 0004 00AF     	 add r7,sp,#0
 1665              	 .cfi_def_cfa_register 7
 1666 0006 7860     	 str r0,[r7,#4]
 1667 0008 0B46     	 mov r3,r1
 1668 000a FB70     	 strb r3,[r7,#3]
 485:../Libraries/XMCLib/src/xmc_dma.c ****   return (bool)(dma->CH[channel].CFGL & (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk);
 1669              	 .loc 2 485 0
 1670 000c FB78     	 ldrb r3,[r7,#3]
 1671 000e 7A68     	 ldr r2,[r7,#4]
 1672 0010 5821     	 movs r1,#88
 1673 0012 01FB03F3 	 mul r3,r1,r3
 1674 0016 1344     	 add r3,r3,r2
 1675 0018 4033     	 adds r3,r3,#64
 1676 001a 1B68     	 ldr r3,[r3]
 1677 001c 03F48073 	 and r3,r3,#256
 1678 0020 002B     	 cmp r3,#0
 1679 0022 14BF     	 ite ne
 1680 0024 0123     	 movne r3,#1
 1681 0026 0023     	 moveq r3,#0
 1682 0028 DBB2     	 uxtb r3,r3
 486:../Libraries/XMCLib/src/xmc_dma.c **** }
 1683              	 .loc 2 486 0
 1684 002a 1846     	 mov r0,r3
 1685 002c 0C37     	 adds r7,r7,#12
 1686              	 .cfi_def_cfa_offset 4
 1687 002e BD46     	 mov sp,r7
 1688              	 .cfi_def_cfa_register 13
 1689              	 
 1690 0030 5DF8047B 	 ldr r7,[sp],#4
 1691              	 .cfi_restore 7
 1692              	 .cfi_def_cfa_offset 0
 1693 0034 7047     	 bx lr
 1694              	 .cfi_endproc
 1695              	.LFE203:
 1697 0036 00BF     	 .section .text.XMC_DMA_CH_EnableEvent,"ax",%progbits
 1698              	 .align 2
 1699              	 .global XMC_DMA_CH_EnableEvent
 1700              	 .thumb
 1701              	 .thumb_func
 1703              	XMC_DMA_CH_EnableEvent:
 1704              	.LFB204:
 487:../Libraries/XMCLib/src/xmc_dma.c **** 
 488:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable GPDMA event */
 489:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 490:../Libraries/XMCLib/src/xmc_dma.c **** {
 1705              	 .loc 2 490 0
 1706              	 .cfi_startproc
 1707              	 
 1708              	 
 1709              	 
 1710 0000 80B4     	 push {r7}
 1711              	 .cfi_def_cfa_offset 4
 1712              	 .cfi_offset 7,-4
 1713 0002 87B0     	 sub sp,sp,#28
 1714              	 .cfi_def_cfa_offset 32
 1715 0004 00AF     	 add r7,sp,#0
 1716              	 .cfi_def_cfa_register 7
 1717 0006 F860     	 str r0,[r7,#12]
 1718 0008 0B46     	 mov r3,r1
 1719 000a 7A60     	 str r2,[r7,#4]
 1720 000c FB72     	 strb r3,[r7,#11]
 491:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 492:../Libraries/XMCLib/src/xmc_dma.c **** 
 493:../Libraries/XMCLib/src/xmc_dma.c ****   for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 1721              	 .loc 2 493 0
 1722 000e 0023     	 movs r3,#0
 1723 0010 7B61     	 str r3,[r7,#20]
 1724 0012 14E0     	 b .L98
 1725              	.L100:
 494:../Libraries/XMCLib/src/xmc_dma.c ****   {
 495:../Libraries/XMCLib/src/xmc_dma.c ****     if (event & ((uint32_t)0x1UL << event_idx))
 1726              	 .loc 2 495 0
 1727 0014 7B69     	 ldr r3,[r7,#20]
 1728 0016 7A68     	 ldr r2,[r7,#4]
 1729 0018 22FA03F3 	 lsr r3,r2,r3
 1730 001c 03F00103 	 and r3,r3,#1
 1731 0020 002B     	 cmp r3,#0
 1732 0022 09D0     	 beq .L99
 496:../Libraries/XMCLib/src/xmc_dma.c ****     {
 497:../Libraries/XMCLib/src/xmc_dma.c ****       dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x101UL << channel);
 1733              	 .loc 2 497 0
 1734 0024 7B69     	 ldr r3,[r7,#20]
 1735 0026 5A00     	 lsls r2,r3,#1
 1736 0028 FB7A     	 ldrb r3,[r7,#11]
 1737 002a 40F20111 	 movw r1,#257
 1738 002e 9940     	 lsls r1,r1,r3
 1739 0030 FB68     	 ldr r3,[r7,#12]
 1740 0032 C432     	 adds r2,r2,#196
 1741 0034 43F82210 	 str r1,[r3,r2,lsl#2]
 1742              	.L99:
 493:../Libraries/XMCLib/src/xmc_dma.c ****   {
 1743              	 .loc 2 493 0 discriminator 2
 1744 0038 7B69     	 ldr r3,[r7,#20]
 1745 003a 0133     	 adds r3,r3,#1
 1746 003c 7B61     	 str r3,[r7,#20]
 1747              	.L98:
 493:../Libraries/XMCLib/src/xmc_dma.c ****   {
 1748              	 .loc 2 493 0 is_stmt 0 discriminator 1
 1749 003e 7B69     	 ldr r3,[r7,#20]
 1750 0040 042B     	 cmp r3,#4
 1751 0042 E7D9     	 bls .L100
 498:../Libraries/XMCLib/src/xmc_dma.c ****     }
 499:../Libraries/XMCLib/src/xmc_dma.c ****   }
 500:../Libraries/XMCLib/src/xmc_dma.c **** }
 1752              	 .loc 2 500 0 is_stmt 1
 1753 0044 1C37     	 adds r7,r7,#28
 1754              	 .cfi_def_cfa_offset 4
 1755 0046 BD46     	 mov sp,r7
 1756              	 .cfi_def_cfa_register 13
 1757              	 
 1758 0048 5DF8047B 	 ldr r7,[sp],#4
 1759              	 .cfi_restore 7
 1760              	 .cfi_def_cfa_offset 0
 1761 004c 7047     	 bx lr
 1762              	 .cfi_endproc
 1763              	.LFE204:
 1765              	 .section .text.XMC_DMA_CH_DisableEvent,"ax",%progbits
 1766              	 .align 2
 1767              	 .global XMC_DMA_CH_DisableEvent
 1768              	 .thumb
 1769              	 .thumb_func
 1771              	XMC_DMA_CH_DisableEvent:
 1772              	.LFB205:
 501:../Libraries/XMCLib/src/xmc_dma.c **** 
 502:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable GPDMA event */
 503:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 504:../Libraries/XMCLib/src/xmc_dma.c **** {
 1773              	 .loc 2 504 0
 1774              	 .cfi_startproc
 1775              	 
 1776              	 
 1777              	 
 1778 0000 80B4     	 push {r7}
 1779              	 .cfi_def_cfa_offset 4
 1780              	 .cfi_offset 7,-4
 1781 0002 87B0     	 sub sp,sp,#28
 1782              	 .cfi_def_cfa_offset 32
 1783 0004 00AF     	 add r7,sp,#0
 1784              	 .cfi_def_cfa_register 7
 1785 0006 F860     	 str r0,[r7,#12]
 1786 0008 0B46     	 mov r3,r1
 1787 000a 7A60     	 str r2,[r7,#4]
 1788 000c FB72     	 strb r3,[r7,#11]
 505:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 506:../Libraries/XMCLib/src/xmc_dma.c **** 
 507:../Libraries/XMCLib/src/xmc_dma.c ****   for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 1789              	 .loc 2 507 0
 1790 000e 0023     	 movs r3,#0
 1791 0010 7B61     	 str r3,[r7,#20]
 1792 0012 14E0     	 b .L102
 1793              	.L104:
 508:../Libraries/XMCLib/src/xmc_dma.c ****   {
 509:../Libraries/XMCLib/src/xmc_dma.c ****     if (event & ((uint32_t)0x1UL << event_idx))
 1794              	 .loc 2 509 0
 1795 0014 7B69     	 ldr r3,[r7,#20]
 1796 0016 7A68     	 ldr r2,[r7,#4]
 1797 0018 22FA03F3 	 lsr r3,r2,r3
 1798 001c 03F00103 	 and r3,r3,#1
 1799 0020 002B     	 cmp r3,#0
 1800 0022 09D0     	 beq .L103
 510:../Libraries/XMCLib/src/xmc_dma.c ****     {
 511:../Libraries/XMCLib/src/xmc_dma.c ****       dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x100UL << channel);
 1801              	 .loc 2 511 0
 1802 0024 7B69     	 ldr r3,[r7,#20]
 1803 0026 5A00     	 lsls r2,r3,#1
 1804 0028 FB7A     	 ldrb r3,[r7,#11]
 1805 002a 4FF48071 	 mov r1,#256
 1806 002e 9940     	 lsls r1,r1,r3
 1807 0030 FB68     	 ldr r3,[r7,#12]
 1808 0032 C432     	 adds r2,r2,#196
 1809 0034 43F82210 	 str r1,[r3,r2,lsl#2]
 1810              	.L103:
 507:../Libraries/XMCLib/src/xmc_dma.c ****   {
 1811              	 .loc 2 507 0 discriminator 2
 1812 0038 7B69     	 ldr r3,[r7,#20]
 1813 003a 0133     	 adds r3,r3,#1
 1814 003c 7B61     	 str r3,[r7,#20]
 1815              	.L102:
 507:../Libraries/XMCLib/src/xmc_dma.c ****   {
 1816              	 .loc 2 507 0 is_stmt 0 discriminator 1
 1817 003e 7B69     	 ldr r3,[r7,#20]
 1818 0040 042B     	 cmp r3,#4
 1819 0042 E7D9     	 bls .L104
 512:../Libraries/XMCLib/src/xmc_dma.c ****     }
 513:../Libraries/XMCLib/src/xmc_dma.c ****   }
 514:../Libraries/XMCLib/src/xmc_dma.c **** }
 1820              	 .loc 2 514 0 is_stmt 1
 1821 0044 1C37     	 adds r7,r7,#28
 1822              	 .cfi_def_cfa_offset 4
 1823 0046 BD46     	 mov sp,r7
 1824              	 .cfi_def_cfa_register 13
 1825              	 
 1826 0048 5DF8047B 	 ldr r7,[sp],#4
 1827              	 .cfi_restore 7
 1828              	 .cfi_def_cfa_offset 0
 1829 004c 7047     	 bx lr
 1830              	 .cfi_endproc
 1831              	.LFE205:
 1833              	 .section .text.XMC_DMA_CH_ClearEventStatus,"ax",%progbits
 1834              	 .align 2
 1835              	 .global XMC_DMA_CH_ClearEventStatus
 1836              	 .thumb
 1837              	 .thumb_func
 1839              	XMC_DMA_CH_ClearEventStatus:
 1840              	.LFB206:
 515:../Libraries/XMCLib/src/xmc_dma.c **** 
 516:../Libraries/XMCLib/src/xmc_dma.c **** /* Clear GPDMA event */
 517:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_ClearEventStatus(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 518:../Libraries/XMCLib/src/xmc_dma.c **** {
 1841              	 .loc 2 518 0
 1842              	 .cfi_startproc
 1843              	 
 1844              	 
 1845              	 
 1846 0000 80B4     	 push {r7}
 1847              	 .cfi_def_cfa_offset 4
 1848              	 .cfi_offset 7,-4
 1849 0002 87B0     	 sub sp,sp,#28
 1850              	 .cfi_def_cfa_offset 32
 1851 0004 00AF     	 add r7,sp,#0
 1852              	 .cfi_def_cfa_register 7
 1853 0006 F860     	 str r0,[r7,#12]
 1854 0008 0B46     	 mov r3,r1
 1855 000a 7A60     	 str r2,[r7,#4]
 1856 000c FB72     	 strb r3,[r7,#11]
 519:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 520:../Libraries/XMCLib/src/xmc_dma.c **** 
 521:../Libraries/XMCLib/src/xmc_dma.c ****   for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 1857              	 .loc 2 521 0
 1858 000e 0023     	 movs r3,#0
 1859 0010 7B61     	 str r3,[r7,#20]
 1860 0012 13E0     	 b .L106
 1861              	.L108:
 522:../Libraries/XMCLib/src/xmc_dma.c ****   {
 523:../Libraries/XMCLib/src/xmc_dma.c ****     if (event & (uint32_t)((uint32_t)0x1UL << event_idx))
 1862              	 .loc 2 523 0
 1863 0014 7B69     	 ldr r3,[r7,#20]
 1864 0016 7A68     	 ldr r2,[r7,#4]
 1865 0018 22FA03F3 	 lsr r3,r2,r3
 1866 001c 03F00103 	 and r3,r3,#1
 1867 0020 002B     	 cmp r3,#0
 1868 0022 08D0     	 beq .L107
 524:../Libraries/XMCLib/src/xmc_dma.c ****     {
 525:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CLEARCHEV[event_idx * 2UL] = ((uint32_t)0x1UL << channel);
 1869              	 .loc 2 525 0
 1870 0024 7B69     	 ldr r3,[r7,#20]
 1871 0026 5A00     	 lsls r2,r3,#1
 1872 0028 FB7A     	 ldrb r3,[r7,#11]
 1873 002a 0121     	 movs r1,#1
 1874 002c 9940     	 lsls r1,r1,r3
 1875 002e FB68     	 ldr r3,[r7,#12]
 1876 0030 CE32     	 adds r2,r2,#206
 1877 0032 43F82210 	 str r1,[r3,r2,lsl#2]
 1878              	.L107:
 521:../Libraries/XMCLib/src/xmc_dma.c ****   {
 1879              	 .loc 2 521 0 discriminator 2
 1880 0036 7B69     	 ldr r3,[r7,#20]
 1881 0038 0133     	 adds r3,r3,#1
 1882 003a 7B61     	 str r3,[r7,#20]
 1883              	.L106:
 521:../Libraries/XMCLib/src/xmc_dma.c ****   {
 1884              	 .loc 2 521 0 is_stmt 0 discriminator 1
 1885 003c 7B69     	 ldr r3,[r7,#20]
 1886 003e 042B     	 cmp r3,#4
 1887 0040 E8D9     	 bls .L108
 526:../Libraries/XMCLib/src/xmc_dma.c ****     }
 527:../Libraries/XMCLib/src/xmc_dma.c ****   }
 528:../Libraries/XMCLib/src/xmc_dma.c **** 
 529:../Libraries/XMCLib/src/xmc_dma.c **** }
 1888              	 .loc 2 529 0 is_stmt 1
 1889 0042 1C37     	 adds r7,r7,#28
 1890              	 .cfi_def_cfa_offset 4
 1891 0044 BD46     	 mov sp,r7
 1892              	 .cfi_def_cfa_register 13
 1893              	 
 1894 0046 5DF8047B 	 ldr r7,[sp],#4
 1895              	 .cfi_restore 7
 1896              	 .cfi_def_cfa_offset 0
 1897 004a 7047     	 bx lr
 1898              	 .cfi_endproc
 1899              	.LFE206:
 1901              	 .section .text.XMC_DMA_CH_GetEventStatus,"ax",%progbits
 1902              	 .align 2
 1903              	 .global XMC_DMA_CH_GetEventStatus
 1904              	 .thumb
 1905              	 .thumb_func
 1907              	XMC_DMA_CH_GetEventStatus:
 1908              	.LFB207:
 530:../Libraries/XMCLib/src/xmc_dma.c **** 
 531:../Libraries/XMCLib/src/xmc_dma.c **** /* Get GPDMA event status */
 532:../Libraries/XMCLib/src/xmc_dma.c **** uint32_t XMC_DMA_CH_GetEventStatus(XMC_DMA_t *const dma, const uint8_t channel)
 533:../Libraries/XMCLib/src/xmc_dma.c **** {
 1909              	 .loc 2 533 0
 1910              	 .cfi_startproc
 1911              	 
 1912              	 
 1913              	 
 1914 0000 80B4     	 push {r7}
 1915              	 .cfi_def_cfa_offset 4
 1916              	 .cfi_offset 7,-4
 1917 0002 85B0     	 sub sp,sp,#20
 1918              	 .cfi_def_cfa_offset 24
 1919 0004 00AF     	 add r7,sp,#0
 1920              	 .cfi_def_cfa_register 7
 1921 0006 7860     	 str r0,[r7,#4]
 1922 0008 0B46     	 mov r3,r1
 1923 000a FB70     	 strb r3,[r7,#3]
 534:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 535:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t status = 0UL;
 1924              	 .loc 2 535 0
 1925 000c 0023     	 movs r3,#0
 1926 000e BB60     	 str r3,[r7,#8]
 536:../Libraries/XMCLib/src/xmc_dma.c **** 
 537:../Libraries/XMCLib/src/xmc_dma.c ****   for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 1927              	 .loc 2 537 0
 1928 0010 0023     	 movs r3,#0
 1929 0012 FB60     	 str r3,[r7,#12]
 1930 0014 18E0     	 b .L110
 1931              	.L113:
 538:../Libraries/XMCLib/src/xmc_dma.c ****   {
 539:../Libraries/XMCLib/src/xmc_dma.c ****     status |= (uint32_t)((dma->STATUSCHEV[event_idx * 2UL] & (uint32_t)((uint32_t)0x1UL << (uint32_
 1932              	 .loc 2 539 0
 1933 0016 FB68     	 ldr r3,[r7,#12]
 1934 0018 5A00     	 lsls r2,r3,#1
 1935 001a 7B68     	 ldr r3,[r7,#4]
 1936 001c BA32     	 adds r2,r2,#186
 1937 001e 53F82220 	 ldr r2,[r3,r2,lsl#2]
 1938 0022 FB78     	 ldrb r3,[r7,#3]
 1939 0024 22FA03F3 	 lsr r3,r2,r3
 1940 0028 03F00103 	 and r3,r3,#1
 1941 002c 002B     	 cmp r3,#0
 1942 002e 04D0     	 beq .L111
 1943              	 .loc 2 539 0 is_stmt 0 discriminator 1
 1944 0030 FB68     	 ldr r3,[r7,#12]
 1945 0032 0122     	 movs r2,#1
 1946 0034 02FA03F3 	 lsl r3,r2,r3
 1947 0038 00E0     	 b .L112
 1948              	.L111:
 1949              	 .loc 2 539 0 discriminator 2
 1950 003a 0023     	 movs r3,#0
 1951              	.L112:
 1952              	 .loc 2 539 0 discriminator 4
 1953 003c BA68     	 ldr r2,[r7,#8]
 1954 003e 1343     	 orrs r3,r3,r2
 1955 0040 BB60     	 str r3,[r7,#8]
 537:../Libraries/XMCLib/src/xmc_dma.c ****   {
 1956              	 .loc 2 537 0 is_stmt 1 discriminator 4
 1957 0042 FB68     	 ldr r3,[r7,#12]
 1958 0044 0133     	 adds r3,r3,#1
 1959 0046 FB60     	 str r3,[r7,#12]
 1960              	.L110:
 537:../Libraries/XMCLib/src/xmc_dma.c ****   {
 1961              	 .loc 2 537 0 is_stmt 0 discriminator 2
 1962 0048 FB68     	 ldr r3,[r7,#12]
 1963 004a 042B     	 cmp r3,#4
 1964 004c E3D9     	 bls .L113
 540:../Libraries/XMCLib/src/xmc_dma.c ****                          ((uint32_t)0x1UL << event_idx) : (uint32_t)0UL);
 541:../Libraries/XMCLib/src/xmc_dma.c ****   }
 542:../Libraries/XMCLib/src/xmc_dma.c **** 
 543:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 1965              	 .loc 2 543 0 is_stmt 1
 1966 004e BB68     	 ldr r3,[r7,#8]
 544:../Libraries/XMCLib/src/xmc_dma.c **** }
 1967              	 .loc 2 544 0
 1968 0050 1846     	 mov r0,r3
 1969 0052 1437     	 adds r7,r7,#20
 1970              	 .cfi_def_cfa_offset 4
 1971 0054 BD46     	 mov sp,r7
 1972              	 .cfi_def_cfa_register 13
 1973              	 
 1974 0056 5DF8047B 	 ldr r7,[sp],#4
 1975              	 .cfi_restore 7
 1976              	 .cfi_def_cfa_offset 0
 1977 005a 7047     	 bx lr
 1978              	 .cfi_endproc
 1979              	.LFE207:
 1981              	 .section .text.XMC_DMA_CH_EnableSourceGather,"ax",%progbits
 1982              	 .align 2
 1983              	 .global XMC_DMA_CH_EnableSourceGather
 1984              	 .thumb
 1985              	 .thumb_func
 1987              	XMC_DMA_CH_EnableSourceGather:
 1988              	.LFB208:
 545:../Libraries/XMCLib/src/xmc_dma.c **** 
 546:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable source gather */
 547:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableSourceGather(XMC_DMA_t *const dma, const uint8_t channel, uint32_t interval, 
 548:../Libraries/XMCLib/src/xmc_dma.c **** {
 1989              	 .loc 2 548 0
 1990              	 .cfi_startproc
 1991              	 
 1992              	 
 1993              	 
 1994 0000 80B4     	 push {r7}
 1995              	 .cfi_def_cfa_offset 4
 1996              	 .cfi_offset 7,-4
 1997 0002 85B0     	 sub sp,sp,#20
 1998              	 .cfi_def_cfa_offset 24
 1999 0004 00AF     	 add r7,sp,#0
 2000              	 .cfi_def_cfa_register 7
 2001 0006 F860     	 str r0,[r7,#12]
 2002 0008 7A60     	 str r2,[r7,#4]
 2003 000a 1A46     	 mov r2,r3
 2004 000c 0B46     	 mov r3,r1
 2005 000e FB72     	 strb r3,[r7,#11]
 2006 0010 1346     	 mov r3,r2
 2007 0012 3B81     	 strh r3,[r7,#8]
 549:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_SRC_GATHER_EN_Msk;
 2008              	 .loc 2 549 0
 2009 0014 FB7A     	 ldrb r3,[r7,#11]
 2010 0016 FA7A     	 ldrb r2,[r7,#11]
 2011 0018 F968     	 ldr r1,[r7,#12]
 2012 001a 5820     	 movs r0,#88
 2013 001c 00FB02F2 	 mul r2,r0,r2
 2014 0020 0A44     	 add r2,r2,r1
 2015 0022 1832     	 adds r2,r2,#24
 2016 0024 1268     	 ldr r2,[r2]
 2017 0026 42F40032 	 orr r2,r2,#131072
 2018 002a F968     	 ldr r1,[r7,#12]
 2019 002c 5820     	 movs r0,#88
 2020 002e 00FB03F3 	 mul r3,r0,r3
 2021 0032 0B44     	 add r3,r3,r1
 2022 0034 1833     	 adds r3,r3,#24
 2023 0036 1A60     	 str r2,[r3]
 550:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].SGR = ((uint32_t)interval << GPDMA0_CH_SGR_SGI_Pos) | ((uint32_t)count << GPDMA0
 2024              	 .loc 2 550 0
 2025 0038 FB7A     	 ldrb r3,[r7,#11]
 2026 003a 3A89     	 ldrh r2,[r7,#8]
 2027 003c 1105     	 lsls r1,r2,#20
 2028 003e 7A68     	 ldr r2,[r7,#4]
 2029 0040 0A43     	 orrs r2,r2,r1
 2030 0042 F968     	 ldr r1,[r7,#12]
 2031 0044 5820     	 movs r0,#88
 2032 0046 00FB03F3 	 mul r3,r0,r3
 2033 004a 0B44     	 add r3,r3,r1
 2034 004c 4833     	 adds r3,r3,#72
 2035 004e 1A60     	 str r2,[r3]
 551:../Libraries/XMCLib/src/xmc_dma.c **** }
 2036              	 .loc 2 551 0
 2037 0050 1437     	 adds r7,r7,#20
 2038              	 .cfi_def_cfa_offset 4
 2039 0052 BD46     	 mov sp,r7
 2040              	 .cfi_def_cfa_register 13
 2041              	 
 2042 0054 5DF8047B 	 ldr r7,[sp],#4
 2043              	 .cfi_restore 7
 2044              	 .cfi_def_cfa_offset 0
 2045 0058 7047     	 bx lr
 2046              	 .cfi_endproc
 2047              	.LFE208:
 2049 005a 00BF     	 .section .text.XMC_DMA_CH_DisableSourceGather,"ax",%progbits
 2050              	 .align 2
 2051              	 .global XMC_DMA_CH_DisableSourceGather
 2052              	 .thumb
 2053              	 .thumb_func
 2055              	XMC_DMA_CH_DisableSourceGather:
 2056              	.LFB209:
 552:../Libraries/XMCLib/src/xmc_dma.c **** 
 553:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable source gather */
 554:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableSourceGather(XMC_DMA_t *const dma, const uint8_t channel)
 555:../Libraries/XMCLib/src/xmc_dma.c **** {
 2057              	 .loc 2 555 0
 2058              	 .cfi_startproc
 2059              	 
 2060              	 
 2061              	 
 2062 0000 80B4     	 push {r7}
 2063              	 .cfi_def_cfa_offset 4
 2064              	 .cfi_offset 7,-4
 2065 0002 83B0     	 sub sp,sp,#12
 2066              	 .cfi_def_cfa_offset 16
 2067 0004 00AF     	 add r7,sp,#0
 2068              	 .cfi_def_cfa_register 7
 2069 0006 7860     	 str r0,[r7,#4]
 2070 0008 0B46     	 mov r3,r1
 2071 000a FB70     	 strb r3,[r7,#3]
 556:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL &= (uint32_t)~GPDMA0_CH_CTLL_SRC_GATHER_EN_Msk;
 2072              	 .loc 2 556 0
 2073 000c FB78     	 ldrb r3,[r7,#3]
 2074 000e FA78     	 ldrb r2,[r7,#3]
 2075 0010 7968     	 ldr r1,[r7,#4]
 2076 0012 5820     	 movs r0,#88
 2077 0014 00FB02F2 	 mul r2,r0,r2
 2078 0018 0A44     	 add r2,r2,r1
 2079 001a 1832     	 adds r2,r2,#24
 2080 001c 1268     	 ldr r2,[r2]
 2081 001e 22F40032 	 bic r2,r2,#131072
 2082 0022 7968     	 ldr r1,[r7,#4]
 2083 0024 5820     	 movs r0,#88
 2084 0026 00FB03F3 	 mul r3,r0,r3
 2085 002a 0B44     	 add r3,r3,r1
 2086 002c 1833     	 adds r3,r3,#24
 2087 002e 1A60     	 str r2,[r3]
 557:../Libraries/XMCLib/src/xmc_dma.c **** }
 2088              	 .loc 2 557 0
 2089 0030 0C37     	 adds r7,r7,#12
 2090              	 .cfi_def_cfa_offset 4
 2091 0032 BD46     	 mov sp,r7
 2092              	 .cfi_def_cfa_register 13
 2093              	 
 2094 0034 5DF8047B 	 ldr r7,[sp],#4
 2095              	 .cfi_restore 7
 2096              	 .cfi_def_cfa_offset 0
 2097 0038 7047     	 bx lr
 2098              	 .cfi_endproc
 2099              	.LFE209:
 2101 003a 00BF     	 .section .text.XMC_DMA_CH_EnableDestinationScatter,"ax",%progbits
 2102              	 .align 2
 2103              	 .global XMC_DMA_CH_EnableDestinationScatter
 2104              	 .thumb
 2105              	 .thumb_func
 2107              	XMC_DMA_CH_EnableDestinationScatter:
 2108              	.LFB210:
 558:../Libraries/XMCLib/src/xmc_dma.c **** 
 559:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable destination scatter */
 560:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableDestinationScatter(XMC_DMA_t *const dma, const uint8_t channel, uint32_t inte
 561:../Libraries/XMCLib/src/xmc_dma.c **** {
 2109              	 .loc 2 561 0
 2110              	 .cfi_startproc
 2111              	 
 2112              	 
 2113              	 
 2114 0000 80B4     	 push {r7}
 2115              	 .cfi_def_cfa_offset 4
 2116              	 .cfi_offset 7,-4
 2117 0002 85B0     	 sub sp,sp,#20
 2118              	 .cfi_def_cfa_offset 24
 2119 0004 00AF     	 add r7,sp,#0
 2120              	 .cfi_def_cfa_register 7
 2121 0006 F860     	 str r0,[r7,#12]
 2122 0008 7A60     	 str r2,[r7,#4]
 2123 000a 1A46     	 mov r2,r3
 2124 000c 0B46     	 mov r3,r1
 2125 000e FB72     	 strb r3,[r7,#11]
 2126 0010 1346     	 mov r3,r2
 2127 0012 3B81     	 strh r3,[r7,#8]
 562:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_DST_SCATTER_EN_Msk;
 2128              	 .loc 2 562 0
 2129 0014 FB7A     	 ldrb r3,[r7,#11]
 2130 0016 FA7A     	 ldrb r2,[r7,#11]
 2131 0018 F968     	 ldr r1,[r7,#12]
 2132 001a 5820     	 movs r0,#88
 2133 001c 00FB02F2 	 mul r2,r0,r2
 2134 0020 0A44     	 add r2,r2,r1
 2135 0022 1832     	 adds r2,r2,#24
 2136 0024 1268     	 ldr r2,[r2]
 2137 0026 42F48022 	 orr r2,r2,#262144
 2138 002a F968     	 ldr r1,[r7,#12]
 2139 002c 5820     	 movs r0,#88
 2140 002e 00FB03F3 	 mul r3,r0,r3
 2141 0032 0B44     	 add r3,r3,r1
 2142 0034 1833     	 adds r3,r3,#24
 2143 0036 1A60     	 str r2,[r3]
 563:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].DSR = ((uint32_t)interval << GPDMA0_CH_DSR_DSI_Pos) | ((uint32_t)count << GPDMA0
 2144              	 .loc 2 563 0
 2145 0038 FB7A     	 ldrb r3,[r7,#11]
 2146 003a 3A89     	 ldrh r2,[r7,#8]
 2147 003c 1105     	 lsls r1,r2,#20
 2148 003e 7A68     	 ldr r2,[r7,#4]
 2149 0040 0A43     	 orrs r2,r2,r1
 2150 0042 F968     	 ldr r1,[r7,#12]
 2151 0044 5820     	 movs r0,#88
 2152 0046 00FB03F3 	 mul r3,r0,r3
 2153 004a 0B44     	 add r3,r3,r1
 2154 004c 5033     	 adds r3,r3,#80
 2155 004e 1A60     	 str r2,[r3]
 564:../Libraries/XMCLib/src/xmc_dma.c **** }
 2156              	 .loc 2 564 0
 2157 0050 1437     	 adds r7,r7,#20
 2158              	 .cfi_def_cfa_offset 4
 2159 0052 BD46     	 mov sp,r7
 2160              	 .cfi_def_cfa_register 13
 2161              	 
 2162 0054 5DF8047B 	 ldr r7,[sp],#4
 2163              	 .cfi_restore 7
 2164              	 .cfi_def_cfa_offset 0
 2165 0058 7047     	 bx lr
 2166              	 .cfi_endproc
 2167              	.LFE210:
 2169 005a 00BF     	 .section .text.XMC_DMA_CH_DisableDestinationScatter,"ax",%progbits
 2170              	 .align 2
 2171              	 .global XMC_DMA_CH_DisableDestinationScatter
 2172              	 .thumb
 2173              	 .thumb_func
 2175              	XMC_DMA_CH_DisableDestinationScatter:
 2176              	.LFB211:
 565:../Libraries/XMCLib/src/xmc_dma.c **** 
 566:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable destination scatter */
 567:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableDestinationScatter(XMC_DMA_t *const dma, const uint8_t channel)
 568:../Libraries/XMCLib/src/xmc_dma.c **** {
 2177              	 .loc 2 568 0
 2178              	 .cfi_startproc
 2179              	 
 2180              	 
 2181              	 
 2182 0000 80B4     	 push {r7}
 2183              	 .cfi_def_cfa_offset 4
 2184              	 .cfi_offset 7,-4
 2185 0002 83B0     	 sub sp,sp,#12
 2186              	 .cfi_def_cfa_offset 16
 2187 0004 00AF     	 add r7,sp,#0
 2188              	 .cfi_def_cfa_register 7
 2189 0006 7860     	 str r0,[r7,#4]
 2190 0008 0B46     	 mov r3,r1
 2191 000a FB70     	 strb r3,[r7,#3]
 569:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL &= (uint32_t)~GPDMA0_CH_CTLL_DST_SCATTER_EN_Msk;
 2192              	 .loc 2 569 0
 2193 000c FB78     	 ldrb r3,[r7,#3]
 2194 000e FA78     	 ldrb r2,[r7,#3]
 2195 0010 7968     	 ldr r1,[r7,#4]
 2196 0012 5820     	 movs r0,#88
 2197 0014 00FB02F2 	 mul r2,r0,r2
 2198 0018 0A44     	 add r2,r2,r1
 2199 001a 1832     	 adds r2,r2,#24
 2200 001c 1268     	 ldr r2,[r2]
 2201 001e 22F48022 	 bic r2,r2,#262144
 2202 0022 7968     	 ldr r1,[r7,#4]
 2203 0024 5820     	 movs r0,#88
 2204 0026 00FB03F3 	 mul r3,r0,r3
 2205 002a 0B44     	 add r3,r3,r1
 2206 002c 1833     	 adds r3,r3,#24
 2207 002e 1A60     	 str r2,[r3]
 570:../Libraries/XMCLib/src/xmc_dma.c **** }
 2208              	 .loc 2 570 0
 2209 0030 0C37     	 adds r7,r7,#12
 2210              	 .cfi_def_cfa_offset 4
 2211 0032 BD46     	 mov sp,r7
 2212              	 .cfi_def_cfa_register 13
 2213              	 
 2214 0034 5DF8047B 	 ldr r7,[sp],#4
 2215              	 .cfi_restore 7
 2216              	 .cfi_def_cfa_offset 0
 2217 0038 7047     	 bx lr
 2218              	 .cfi_endproc
 2219              	.LFE211:
 2221 003a 00BF     	 .section .text.XMC_DMA_CH_TriggerSourceRequest,"ax",%progbits
 2222              	 .align 2
 2223              	 .global XMC_DMA_CH_TriggerSourceRequest
 2224              	 .thumb
 2225              	 .thumb_func
 2227              	XMC_DMA_CH_TriggerSourceRequest:
 2228              	.LFB212:
 571:../Libraries/XMCLib/src/xmc_dma.c **** 
 572:../Libraries/XMCLib/src/xmc_dma.c **** /* Trigger source request */
 573:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_TriggerSourceRequest(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_
 574:../Libraries/XMCLib/src/xmc_dma.c **** {
 2229              	 .loc 2 574 0
 2230              	 .cfi_startproc
 2231              	 
 2232              	 
 2233              	 
 2234 0000 80B4     	 push {r7}
 2235              	 .cfi_def_cfa_offset 4
 2236              	 .cfi_offset 7,-4
 2237 0002 83B0     	 sub sp,sp,#12
 2238              	 .cfi_def_cfa_offset 16
 2239 0004 00AF     	 add r7,sp,#0
 2240              	 .cfi_def_cfa_register 7
 2241 0006 7860     	 str r0,[r7,#4]
 2242 0008 0846     	 mov r0,r1
 2243 000a 1146     	 mov r1,r2
 2244 000c 1A46     	 mov r2,r3
 2245 000e 0346     	 mov r3,r0
 2246 0010 FB70     	 strb r3,[r7,#3]
 2247 0012 0B46     	 mov r3,r1
 2248 0014 BB70     	 strb r3,[r7,#2]
 2249 0016 1346     	 mov r3,r2
 2250 0018 7B70     	 strb r3,[r7,#1]
 575:../Libraries/XMCLib/src/xmc_dma.c ****   if ((uint32_t)type == (uint32_t)XMC_DMA_CH_TRANSACTION_TYPE_SINGLE)
 2251              	 .loc 2 575 0
 2252 001a BB78     	 ldrb r3,[r7,#2]
 2253 001c 002B     	 cmp r3,#0
 2254 001e 06D1     	 bne .L120
 576:../Libraries/XMCLib/src/xmc_dma.c ****   {  
 577:../Libraries/XMCLib/src/xmc_dma.c ****     dma->SGLREQSRCREG = ((uint32_t)0x101UL << channel);
 2255              	 .loc 2 577 0
 2256 0020 FB78     	 ldrb r3,[r7,#3]
 2257 0022 40F20112 	 movw r2,#257
 2258 0026 9A40     	 lsls r2,r2,r3
 2259 0028 7B68     	 ldr r3,[r7,#4]
 2260 002a C3F87823 	 str r2,[r3,#888]
 2261              	.L120:
 578:../Libraries/XMCLib/src/xmc_dma.c ****   }
 579:../Libraries/XMCLib/src/xmc_dma.c **** 
 580:../Libraries/XMCLib/src/xmc_dma.c ****   if (last == true)
 2262              	 .loc 2 580 0
 2263 002e 7B78     	 ldrb r3,[r7,#1]
 2264 0030 002B     	 cmp r3,#0
 2265 0032 06D0     	 beq .L121
 581:../Libraries/XMCLib/src/xmc_dma.c ****   {
 582:../Libraries/XMCLib/src/xmc_dma.c ****   dma->LSTSRCREG = (uint32_t)0x101UL << channel;
 2266              	 .loc 2 582 0
 2267 0034 FB78     	 ldrb r3,[r7,#3]
 2268 0036 40F20112 	 movw r2,#257
 2269 003a 9A40     	 lsls r2,r2,r3
 2270 003c 7B68     	 ldr r3,[r7,#4]
 2271 003e C3F88823 	 str r2,[r3,#904]
 2272              	.L121:
 583:../Libraries/XMCLib/src/xmc_dma.c ****   }
 584:../Libraries/XMCLib/src/xmc_dma.c ****   
 585:../Libraries/XMCLib/src/xmc_dma.c ****   dma->REQSRCREG = (uint32_t)0x101UL << channel;
 2273              	 .loc 2 585 0
 2274 0042 FB78     	 ldrb r3,[r7,#3]
 2275 0044 40F20112 	 movw r2,#257
 2276 0048 9A40     	 lsls r2,r2,r3
 2277 004a 7B68     	 ldr r3,[r7,#4]
 2278 004c C3F86823 	 str r2,[r3,#872]
 586:../Libraries/XMCLib/src/xmc_dma.c **** }
 2279              	 .loc 2 586 0
 2280 0050 0C37     	 adds r7,r7,#12
 2281              	 .cfi_def_cfa_offset 4
 2282 0052 BD46     	 mov sp,r7
 2283              	 .cfi_def_cfa_register 13
 2284              	 
 2285 0054 5DF8047B 	 ldr r7,[sp],#4
 2286              	 .cfi_restore 7
 2287              	 .cfi_def_cfa_offset 0
 2288 0058 7047     	 bx lr
 2289              	 .cfi_endproc
 2290              	.LFE212:
 2292 005a 00BF     	 .section .text.XMC_DMA_CH_TriggerDestinationRequest,"ax",%progbits
 2293              	 .align 2
 2294              	 .global XMC_DMA_CH_TriggerDestinationRequest
 2295              	 .thumb
 2296              	 .thumb_func
 2298              	XMC_DMA_CH_TriggerDestinationRequest:
 2299              	.LFB213:
 587:../Libraries/XMCLib/src/xmc_dma.c **** 
 588:../Libraries/XMCLib/src/xmc_dma.c **** /* Trigger destination request */
 589:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_TriggerDestinationRequest(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DM
 590:../Libraries/XMCLib/src/xmc_dma.c **** {
 2300              	 .loc 2 590 0
 2301              	 .cfi_startproc
 2302              	 
 2303              	 
 2304              	 
 2305 0000 80B4     	 push {r7}
 2306              	 .cfi_def_cfa_offset 4
 2307              	 .cfi_offset 7,-4
 2308 0002 83B0     	 sub sp,sp,#12
 2309              	 .cfi_def_cfa_offset 16
 2310 0004 00AF     	 add r7,sp,#0
 2311              	 .cfi_def_cfa_register 7
 2312 0006 7860     	 str r0,[r7,#4]
 2313 0008 0846     	 mov r0,r1
 2314 000a 1146     	 mov r1,r2
 2315 000c 1A46     	 mov r2,r3
 2316 000e 0346     	 mov r3,r0
 2317 0010 FB70     	 strb r3,[r7,#3]
 2318 0012 0B46     	 mov r3,r1
 2319 0014 BB70     	 strb r3,[r7,#2]
 2320 0016 1346     	 mov r3,r2
 2321 0018 7B70     	 strb r3,[r7,#1]
 591:../Libraries/XMCLib/src/xmc_dma.c ****   if(type == XMC_DMA_CH_TRANSACTION_TYPE_SINGLE)
 2322              	 .loc 2 591 0
 2323 001a BB78     	 ldrb r3,[r7,#2]
 2324 001c 002B     	 cmp r3,#0
 2325 001e 06D1     	 bne .L123
 592:../Libraries/XMCLib/src/xmc_dma.c ****   {  
 593:../Libraries/XMCLib/src/xmc_dma.c ****     dma->SGLREQDSTREG = (uint32_t)0x101UL << channel;
 2326              	 .loc 2 593 0
 2327 0020 FB78     	 ldrb r3,[r7,#3]
 2328 0022 40F20112 	 movw r2,#257
 2329 0026 9A40     	 lsls r2,r2,r3
 2330 0028 7B68     	 ldr r3,[r7,#4]
 2331 002a C3F88023 	 str r2,[r3,#896]
 2332              	.L123:
 594:../Libraries/XMCLib/src/xmc_dma.c ****   }
 595:../Libraries/XMCLib/src/xmc_dma.c **** 
 596:../Libraries/XMCLib/src/xmc_dma.c ****   if (last == true)
 2333              	 .loc 2 596 0
 2334 002e 7B78     	 ldrb r3,[r7,#1]
 2335 0030 002B     	 cmp r3,#0
 2336 0032 06D0     	 beq .L124
 597:../Libraries/XMCLib/src/xmc_dma.c ****   {
 598:../Libraries/XMCLib/src/xmc_dma.c ****     dma->LSTDSTREG = (uint32_t)0x101UL << channel;
 2337              	 .loc 2 598 0
 2338 0034 FB78     	 ldrb r3,[r7,#3]
 2339 0036 40F20112 	 movw r2,#257
 2340 003a 9A40     	 lsls r2,r2,r3
 2341 003c 7B68     	 ldr r3,[r7,#4]
 2342 003e C3F89023 	 str r2,[r3,#912]
 2343              	.L124:
 599:../Libraries/XMCLib/src/xmc_dma.c ****   }
 600:../Libraries/XMCLib/src/xmc_dma.c **** 
 601:../Libraries/XMCLib/src/xmc_dma.c ****   dma->REQDSTREG = (uint32_t)0x101UL << channel;
 2344              	 .loc 2 601 0
 2345 0042 FB78     	 ldrb r3,[r7,#3]
 2346 0044 40F20112 	 movw r2,#257
 2347 0048 9A40     	 lsls r2,r2,r3
 2348 004a 7B68     	 ldr r3,[r7,#4]
 2349 004c C3F87023 	 str r2,[r3,#880]
 602:../Libraries/XMCLib/src/xmc_dma.c **** }
 2350              	 .loc 2 602 0
 2351 0050 0C37     	 adds r7,r7,#12
 2352              	 .cfi_def_cfa_offset 4
 2353 0052 BD46     	 mov sp,r7
 2354              	 .cfi_def_cfa_register 13
 2355              	 
 2356 0054 5DF8047B 	 ldr r7,[sp],#4
 2357              	 .cfi_restore 7
 2358              	 .cfi_def_cfa_offset 0
 2359 0058 7047     	 bx lr
 2360              	 .cfi_endproc
 2361              	.LFE213:
 2363 005a 00BF     	 .section .text.XMC_DMA_CH_EnableSourceAddressReload,"ax",%progbits
 2364              	 .align 2
 2365              	 .global XMC_DMA_CH_EnableSourceAddressReload
 2366              	 .thumb
 2367              	 .thumb_func
 2369              	XMC_DMA_CH_EnableSourceAddressReload:
 2370              	.LFB214:
 603:../Libraries/XMCLib/src/xmc_dma.c **** 
 604:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable source address reload */
 605:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableSourceAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 606:../Libraries/XMCLib/src/xmc_dma.c **** {
 2371              	 .loc 2 606 0
 2372              	 .cfi_startproc
 2373              	 
 2374              	 
 2375              	 
 2376 0000 80B4     	 push {r7}
 2377              	 .cfi_def_cfa_offset 4
 2378              	 .cfi_offset 7,-4
 2379 0002 83B0     	 sub sp,sp,#12
 2380              	 .cfi_def_cfa_offset 16
 2381 0004 00AF     	 add r7,sp,#0
 2382              	 .cfi_def_cfa_register 7
 2383 0006 7860     	 str r0,[r7,#4]
 2384 0008 0B46     	 mov r3,r1
 2385 000a FB70     	 strb r3,[r7,#3]
 607:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 2386              	 .loc 2 607 0
 2387 000c FB78     	 ldrb r3,[r7,#3]
 2388 000e FA78     	 ldrb r2,[r7,#3]
 2389 0010 7968     	 ldr r1,[r7,#4]
 2390 0012 5820     	 movs r0,#88
 2391 0014 00FB02F2 	 mul r2,r0,r2
 2392 0018 0A44     	 add r2,r2,r1
 2393 001a 4032     	 adds r2,r2,#64
 2394 001c 1268     	 ldr r2,[r2]
 2395 001e 42F08042 	 orr r2,r2,#1073741824
 2396 0022 7968     	 ldr r1,[r7,#4]
 2397 0024 5820     	 movs r0,#88
 2398 0026 00FB03F3 	 mul r3,r0,r3
 2399 002a 0B44     	 add r3,r3,r1
 2400 002c 4033     	 adds r3,r3,#64
 2401 002e 1A60     	 str r2,[r3]
 608:../Libraries/XMCLib/src/xmc_dma.c **** }
 2402              	 .loc 2 608 0
 2403 0030 0C37     	 adds r7,r7,#12
 2404              	 .cfi_def_cfa_offset 4
 2405 0032 BD46     	 mov sp,r7
 2406              	 .cfi_def_cfa_register 13
 2407              	 
 2408 0034 5DF8047B 	 ldr r7,[sp],#4
 2409              	 .cfi_restore 7
 2410              	 .cfi_def_cfa_offset 0
 2411 0038 7047     	 bx lr
 2412              	 .cfi_endproc
 2413              	.LFE214:
 2415 003a 00BF     	 .section .text.XMC_DMA_CH_DisableSourceAddressReload,"ax",%progbits
 2416              	 .align 2
 2417              	 .global XMC_DMA_CH_DisableSourceAddressReload
 2418              	 .thumb
 2419              	 .thumb_func
 2421              	XMC_DMA_CH_DisableSourceAddressReload:
 2422              	.LFB215:
 609:../Libraries/XMCLib/src/xmc_dma.c **** 
 610:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable source address reload */
 611:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableSourceAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 612:../Libraries/XMCLib/src/xmc_dma.c **** {
 2423              	 .loc 2 612 0
 2424              	 .cfi_startproc
 2425              	 
 2426              	 
 2427              	 
 2428 0000 80B4     	 push {r7}
 2429              	 .cfi_def_cfa_offset 4
 2430              	 .cfi_offset 7,-4
 2431 0002 83B0     	 sub sp,sp,#12
 2432              	 .cfi_def_cfa_offset 16
 2433 0004 00AF     	 add r7,sp,#0
 2434              	 .cfi_def_cfa_register 7
 2435 0006 7860     	 str r0,[r7,#4]
 2436 0008 0B46     	 mov r3,r1
 2437 000a FB70     	 strb r3,[r7,#3]
 613:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 2438              	 .loc 2 613 0
 2439 000c FB78     	 ldrb r3,[r7,#3]
 2440 000e FA78     	 ldrb r2,[r7,#3]
 2441 0010 7968     	 ldr r1,[r7,#4]
 2442 0012 5820     	 movs r0,#88
 2443 0014 00FB02F2 	 mul r2,r0,r2
 2444 0018 0A44     	 add r2,r2,r1
 2445 001a 4032     	 adds r2,r2,#64
 2446 001c 1268     	 ldr r2,[r2]
 2447 001e 22F08042 	 bic r2,r2,#1073741824
 2448 0022 7968     	 ldr r1,[r7,#4]
 2449 0024 5820     	 movs r0,#88
 2450 0026 00FB03F3 	 mul r3,r0,r3
 2451 002a 0B44     	 add r3,r3,r1
 2452 002c 4033     	 adds r3,r3,#64
 2453 002e 1A60     	 str r2,[r3]
 614:../Libraries/XMCLib/src/xmc_dma.c **** }
 2454              	 .loc 2 614 0
 2455 0030 0C37     	 adds r7,r7,#12
 2456              	 .cfi_def_cfa_offset 4
 2457 0032 BD46     	 mov sp,r7
 2458              	 .cfi_def_cfa_register 13
 2459              	 
 2460 0034 5DF8047B 	 ldr r7,[sp],#4
 2461              	 .cfi_restore 7
 2462              	 .cfi_def_cfa_offset 0
 2463 0038 7047     	 bx lr
 2464              	 .cfi_endproc
 2465              	.LFE215:
 2467 003a 00BF     	 .section .text.XMC_DMA_CH_EnableDestinationAddressReload,"ax",%progbits
 2468              	 .align 2
 2469              	 .global XMC_DMA_CH_EnableDestinationAddressReload
 2470              	 .thumb
 2471              	 .thumb_func
 2473              	XMC_DMA_CH_EnableDestinationAddressReload:
 2474              	.LFB216:
 615:../Libraries/XMCLib/src/xmc_dma.c **** 
 616:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable destination address reload */
 617:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableDestinationAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 618:../Libraries/XMCLib/src/xmc_dma.c **** {
 2475              	 .loc 2 618 0
 2476              	 .cfi_startproc
 2477              	 
 2478              	 
 2479              	 
 2480 0000 80B4     	 push {r7}
 2481              	 .cfi_def_cfa_offset 4
 2482              	 .cfi_offset 7,-4
 2483 0002 83B0     	 sub sp,sp,#12
 2484              	 .cfi_def_cfa_offset 16
 2485 0004 00AF     	 add r7,sp,#0
 2486              	 .cfi_def_cfa_register 7
 2487 0006 7860     	 str r0,[r7,#4]
 2488 0008 0B46     	 mov r3,r1
 2489 000a FB70     	 strb r3,[r7,#3]
 619:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 2490              	 .loc 2 619 0
 2491 000c FB78     	 ldrb r3,[r7,#3]
 2492 000e FA78     	 ldrb r2,[r7,#3]
 2493 0010 7968     	 ldr r1,[r7,#4]
 2494 0012 5820     	 movs r0,#88
 2495 0014 00FB02F2 	 mul r2,r0,r2
 2496 0018 0A44     	 add r2,r2,r1
 2497 001a 4032     	 adds r2,r2,#64
 2498 001c 1268     	 ldr r2,[r2]
 2499 001e 42F00042 	 orr r2,r2,#-2147483648
 2500 0022 7968     	 ldr r1,[r7,#4]
 2501 0024 5820     	 movs r0,#88
 2502 0026 00FB03F3 	 mul r3,r0,r3
 2503 002a 0B44     	 add r3,r3,r1
 2504 002c 4033     	 adds r3,r3,#64
 2505 002e 1A60     	 str r2,[r3]
 620:../Libraries/XMCLib/src/xmc_dma.c **** }
 2506              	 .loc 2 620 0
 2507 0030 0C37     	 adds r7,r7,#12
 2508              	 .cfi_def_cfa_offset 4
 2509 0032 BD46     	 mov sp,r7
 2510              	 .cfi_def_cfa_register 13
 2511              	 
 2512 0034 5DF8047B 	 ldr r7,[sp],#4
 2513              	 .cfi_restore 7
 2514              	 .cfi_def_cfa_offset 0
 2515 0038 7047     	 bx lr
 2516              	 .cfi_endproc
 2517              	.LFE216:
 2519 003a 00BF     	 .section .text.XMC_DMA_CH_DisableDestinationAddressReload,"ax",%progbits
 2520              	 .align 2
 2521              	 .global XMC_DMA_CH_DisableDestinationAddressReload
 2522              	 .thumb
 2523              	 .thumb_func
 2525              	XMC_DMA_CH_DisableDestinationAddressReload:
 2526              	.LFB217:
 621:../Libraries/XMCLib/src/xmc_dma.c **** 
 622:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable destination address reload */
 623:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableDestinationAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 624:../Libraries/XMCLib/src/xmc_dma.c **** {
 2527              	 .loc 2 624 0
 2528              	 .cfi_startproc
 2529              	 
 2530              	 
 2531              	 
 2532 0000 80B4     	 push {r7}
 2533              	 .cfi_def_cfa_offset 4
 2534              	 .cfi_offset 7,-4
 2535 0002 83B0     	 sub sp,sp,#12
 2536              	 .cfi_def_cfa_offset 16
 2537 0004 00AF     	 add r7,sp,#0
 2538              	 .cfi_def_cfa_register 7
 2539 0006 7860     	 str r0,[r7,#4]
 2540 0008 0B46     	 mov r3,r1
 2541 000a FB70     	 strb r3,[r7,#3]
 625:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 2542              	 .loc 2 625 0
 2543 000c FB78     	 ldrb r3,[r7,#3]
 2544 000e FA78     	 ldrb r2,[r7,#3]
 2545 0010 7968     	 ldr r1,[r7,#4]
 2546 0012 5820     	 movs r0,#88
 2547 0014 00FB02F2 	 mul r2,r0,r2
 2548 0018 0A44     	 add r2,r2,r1
 2549 001a 4032     	 adds r2,r2,#64
 2550 001c 1268     	 ldr r2,[r2]
 2551 001e 22F00042 	 bic r2,r2,#-2147483648
 2552 0022 7968     	 ldr r1,[r7,#4]
 2553 0024 5820     	 movs r0,#88
 2554 0026 00FB03F3 	 mul r3,r0,r3
 2555 002a 0B44     	 add r3,r3,r1
 2556 002c 4033     	 adds r3,r3,#64
 2557 002e 1A60     	 str r2,[r3]
 626:../Libraries/XMCLib/src/xmc_dma.c **** }
 2558              	 .loc 2 626 0
 2559 0030 0C37     	 adds r7,r7,#12
 2560              	 .cfi_def_cfa_offset 4
 2561 0032 BD46     	 mov sp,r7
 2562              	 .cfi_def_cfa_register 13
 2563              	 
 2564 0034 5DF8047B 	 ldr r7,[sp],#4
 2565              	 .cfi_restore 7
 2566              	 .cfi_def_cfa_offset 0
 2567 0038 7047     	 bx lr
 2568              	 .cfi_endproc
 2569              	.LFE217:
 2571 003a 00BF     	 .section .text.XMC_DMA_CH_RequestLastMultiblockTransfer,"ax",%progbits
 2572              	 .align 2
 2573              	 .global XMC_DMA_CH_RequestLastMultiblockTransfer
 2574              	 .thumb
 2575              	 .thumb_func
 2577              	XMC_DMA_CH_RequestLastMultiblockTransfer:
 2578              	.LFB218:
 627:../Libraries/XMCLib/src/xmc_dma.c **** 
 628:../Libraries/XMCLib/src/xmc_dma.c **** /* Request last multi-block transfer */
 629:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_RequestLastMultiblockTransfer(XMC_DMA_t *const dma, const uint8_t channel)
 630:../Libraries/XMCLib/src/xmc_dma.c **** {
 2579              	 .loc 2 630 0
 2580              	 .cfi_startproc
 2581              	 
 2582              	 
 2583              	 
 2584 0000 80B4     	 push {r7}
 2585              	 .cfi_def_cfa_offset 4
 2586              	 .cfi_offset 7,-4
 2587 0002 83B0     	 sub sp,sp,#12
 2588              	 .cfi_def_cfa_offset 16
 2589 0004 00AF     	 add r7,sp,#0
 2590              	 .cfi_def_cfa_register 7
 2591 0006 7860     	 str r0,[r7,#4]
 2592 0008 0B46     	 mov r3,r1
 2593 000a FB70     	 strb r3,[r7,#3]
 631:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~(GPDMA0_CH_CFGL_RELOAD_SRC_Msk | GPDMA0_CH_CFGL_RELOAD_DST_Ms
 2594              	 .loc 2 631 0
 2595 000c FB78     	 ldrb r3,[r7,#3]
 2596 000e FA78     	 ldrb r2,[r7,#3]
 2597 0010 7968     	 ldr r1,[r7,#4]
 2598 0012 5820     	 movs r0,#88
 2599 0014 00FB02F2 	 mul r2,r0,r2
 2600 0018 0A44     	 add r2,r2,r1
 2601 001a 4032     	 adds r2,r2,#64
 2602 001c 1268     	 ldr r2,[r2]
 2603 001e 22F04042 	 bic r2,r2,#-1073741824
 2604 0022 7968     	 ldr r1,[r7,#4]
 2605 0024 5820     	 movs r0,#88
 2606 0026 00FB03F3 	 mul r3,r0,r3
 2607 002a 0B44     	 add r3,r3,r1
 2608 002c 4033     	 adds r3,r3,#64
 2609 002e 1A60     	 str r2,[r3]
 632:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL &= (uint32_t)~(GPDMA0_CH_CTLL_LLP_SRC_EN_Msk | GPDMA0_CH_CTLL_LLP_DST_EN_Ms
 2610              	 .loc 2 632 0
 2611 0030 FB78     	 ldrb r3,[r7,#3]
 2612 0032 FA78     	 ldrb r2,[r7,#3]
 2613 0034 7968     	 ldr r1,[r7,#4]
 2614 0036 5820     	 movs r0,#88
 2615 0038 00FB02F2 	 mul r2,r0,r2
 2616 003c 0A44     	 add r2,r2,r1
 2617 003e 1832     	 adds r2,r2,#24
 2618 0040 1268     	 ldr r2,[r2]
 2619 0042 22F0C052 	 bic r2,r2,#402653184
 2620 0046 7968     	 ldr r1,[r7,#4]
 2621 0048 5820     	 movs r0,#88
 2622 004a 00FB03F3 	 mul r3,r0,r3
 2623 004e 0B44     	 add r3,r3,r1
 2624 0050 1833     	 adds r3,r3,#24
 2625 0052 1A60     	 str r2,[r3]
 633:../Libraries/XMCLib/src/xmc_dma.c **** }
 2626              	 .loc 2 633 0
 2627 0054 0C37     	 adds r7,r7,#12
 2628              	 .cfi_def_cfa_offset 4
 2629 0056 BD46     	 mov sp,r7
 2630              	 .cfi_def_cfa_register 13
 2631              	 
 2632 0058 5DF8047B 	 ldr r7,[sp],#4
 2633              	 .cfi_restore 7
 2634              	 .cfi_def_cfa_offset 0
 2635 005c 7047     	 bx lr
 2636              	 .cfi_endproc
 2637              	.LFE218:
 2639 005e 00BF     	 .section .text.XMC_DMA_CH_SetEventHandler,"ax",%progbits
 2640              	 .align 2
 2641              	 .global XMC_DMA_CH_SetEventHandler
 2642              	 .thumb
 2643              	 .thumb_func
 2645              	XMC_DMA_CH_SetEventHandler:
 2646              	.LFB219:
 634:../Libraries/XMCLib/src/xmc_dma.c **** 
 635:../Libraries/XMCLib/src/xmc_dma.c **** /* Set event handler */
 636:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_SetEventHandler(XMC_DMA_t *const dma, const uint8_t channel, XMC_DMA_CH_EVENT_HANDL
 637:../Libraries/XMCLib/src/xmc_dma.c **** {
 2647              	 .loc 2 637 0
 2648              	 .cfi_startproc
 2649              	 
 2650              	 
 2651              	 
 2652 0000 80B4     	 push {r7}
 2653              	 .cfi_def_cfa_offset 4
 2654              	 .cfi_offset 7,-4
 2655 0002 85B0     	 sub sp,sp,#20
 2656              	 .cfi_def_cfa_offset 24
 2657 0004 00AF     	 add r7,sp,#0
 2658              	 .cfi_def_cfa_register 7
 2659 0006 F860     	 str r0,[r7,#12]
 2660 0008 0B46     	 mov r3,r1
 2661 000a 7A60     	 str r2,[r7,#4]
 2662 000c FB72     	 strb r3,[r7,#11]
 638:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 639:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 2663              	 .loc 2 639 0
 2664 000e FB68     	 ldr r3,[r7,#12]
 2665 0010 094A     	 ldr r2,.L133
 2666 0012 9342     	 cmp r3,r2
 2667 0014 05D1     	 bne .L131
 640:../Libraries/XMCLib/src/xmc_dma.c ****   {
 641:../Libraries/XMCLib/src/xmc_dma.c **** #else
 642:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 643:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 644:../Libraries/XMCLib/src/xmc_dma.c ****     dma0_event_handlers[channel] = event_handler;
 2668              	 .loc 2 644 0
 2669 0016 FB7A     	 ldrb r3,[r7,#11]
 2670 0018 0849     	 ldr r1,.L133+4
 2671 001a 7A68     	 ldr r2,[r7,#4]
 2672 001c 41F82320 	 str r2,[r1,r3,lsl#2]
 2673 0020 04E0     	 b .L130
 2674              	.L131:
 645:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 646:../Libraries/XMCLib/src/xmc_dma.c ****   }
 647:../Libraries/XMCLib/src/xmc_dma.c ****   else
 648:../Libraries/XMCLib/src/xmc_dma.c ****   {
 649:../Libraries/XMCLib/src/xmc_dma.c ****     dma1_event_handlers[channel] = event_handler;
 2675              	 .loc 2 649 0
 2676 0022 FB7A     	 ldrb r3,[r7,#11]
 2677 0024 0649     	 ldr r1,.L133+8
 2678 0026 7A68     	 ldr r2,[r7,#4]
 2679 0028 41F82320 	 str r2,[r1,r3,lsl#2]
 2680              	.L130:
 650:../Libraries/XMCLib/src/xmc_dma.c ****   }
 651:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 652:../Libraries/XMCLib/src/xmc_dma.c **** }
 2681              	 .loc 2 652 0
 2682 002c 1437     	 adds r7,r7,#20
 2683              	 .cfi_def_cfa_offset 4
 2684 002e BD46     	 mov sp,r7
 2685              	 .cfi_def_cfa_register 13
 2686              	 
 2687 0030 5DF8047B 	 ldr r7,[sp],#4
 2688              	 .cfi_restore 7
 2689              	 .cfi_def_cfa_offset 0
 2690 0034 7047     	 bx lr
 2691              	.L134:
 2692 0036 00BF     	 .align 2
 2693              	.L133:
 2694 0038 00400150 	 .word 1342259200
 2695 003c 00000000 	 .word dma0_event_handlers
 2696 0040 00000000 	 .word dma1_event_handlers
 2697              	 .cfi_endproc
 2698              	.LFE219:
 2700              	 .section .text.XMC_DMA_CH_ClearSourcePeripheralRequest,"ax",%progbits
 2701              	 .align 2
 2702              	 .global XMC_DMA_CH_ClearSourcePeripheralRequest
 2703              	 .thumb
 2704              	 .thumb_func
 2706              	XMC_DMA_CH_ClearSourcePeripheralRequest:
 2707              	.LFB220:
 653:../Libraries/XMCLib/src/xmc_dma.c **** 
 654:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_ClearSourcePeripheralRequest(XMC_DMA_t *const dma, uint8_t channel)
 655:../Libraries/XMCLib/src/xmc_dma.c **** {
 2708              	 .loc 2 655 0
 2709              	 .cfi_startproc
 2710              	 
 2711              	 
 2712 0000 80B5     	 push {r7,lr}
 2713              	 .cfi_def_cfa_offset 8
 2714              	 .cfi_offset 7,-8
 2715              	 .cfi_offset 14,-4
 2716 0002 84B0     	 sub sp,sp,#16
 2717              	 .cfi_def_cfa_offset 24
 2718 0004 00AF     	 add r7,sp,#0
 2719              	 .cfi_def_cfa_register 7
 2720 0006 7860     	 str r0,[r7,#4]
 2721 0008 0B46     	 mov r3,r1
 2722 000a FB70     	 strb r3,[r7,#3]
 656:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t line;
 657:../Libraries/XMCLib/src/xmc_dma.c ****   line = (dma->CH[channel].CFGH & GPDMA0_CH_CFGH_SRC_PER_Msk) >> GPDMA0_CH_CFGH_SRC_PER_Pos;
 2723              	 .loc 2 657 0
 2724 000c FB78     	 ldrb r3,[r7,#3]
 2725 000e 7A68     	 ldr r2,[r7,#4]
 2726 0010 5821     	 movs r1,#88
 2727 0012 01FB03F3 	 mul r3,r1,r3
 2728 0016 1344     	 add r3,r3,r2
 2729 0018 4033     	 adds r3,r3,#64
 2730 001a 5B68     	 ldr r3,[r3,#4]
 2731 001c 03F4F063 	 and r3,r3,#1920
 2732 0020 DB09     	 lsrs r3,r3,#7
 2733 0022 FB60     	 str r3,[r7,#12]
 658:../Libraries/XMCLib/src/xmc_dma.c **** 
 659:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_ClearRequestLine(dma, (uint8_t)line);
 2734              	 .loc 2 659 0
 2735 0024 FB68     	 ldr r3,[r7,#12]
 2736 0026 DBB2     	 uxtb r3,r3
 2737 0028 7868     	 ldr r0,[r7,#4]
 2738 002a 1946     	 mov r1,r3
 2739 002c FFF7FEFF 	 bl XMC_DMA_ClearRequestLine
 660:../Libraries/XMCLib/src/xmc_dma.c **** }
 2740              	 .loc 2 660 0
 2741 0030 1037     	 adds r7,r7,#16
 2742              	 .cfi_def_cfa_offset 8
 2743 0032 BD46     	 mov sp,r7
 2744              	 .cfi_def_cfa_register 13
 2745              	 
 2746 0034 80BD     	 pop {r7,pc}
 2747              	 .cfi_endproc
 2748              	.LFE220:
 2750 0036 00BF     	 .section .text.XMC_DMA_CH_ClearDestinationPeripheralRequest,"ax",%progbits
 2751              	 .align 2
 2752              	 .global XMC_DMA_CH_ClearDestinationPeripheralRequest
 2753              	 .thumb
 2754              	 .thumb_func
 2756              	XMC_DMA_CH_ClearDestinationPeripheralRequest:
 2757              	.LFB221:
 661:../Libraries/XMCLib/src/xmc_dma.c **** 
 662:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_ClearDestinationPeripheralRequest(XMC_DMA_t *const dma, uint8_t channel)
 663:../Libraries/XMCLib/src/xmc_dma.c **** {
 2758              	 .loc 2 663 0
 2759              	 .cfi_startproc
 2760              	 
 2761              	 
 2762 0000 80B5     	 push {r7,lr}
 2763              	 .cfi_def_cfa_offset 8
 2764              	 .cfi_offset 7,-8
 2765              	 .cfi_offset 14,-4
 2766 0002 84B0     	 sub sp,sp,#16
 2767              	 .cfi_def_cfa_offset 24
 2768 0004 00AF     	 add r7,sp,#0
 2769              	 .cfi_def_cfa_register 7
 2770 0006 7860     	 str r0,[r7,#4]
 2771 0008 0B46     	 mov r3,r1
 2772 000a FB70     	 strb r3,[r7,#3]
 664:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t line;
 665:../Libraries/XMCLib/src/xmc_dma.c ****   line = (dma->CH[channel].CFGH & GPDMA0_CH_CFGH_DEST_PER_Msk) >> GPDMA0_CH_CFGH_DEST_PER_Pos;
 2773              	 .loc 2 665 0
 2774 000c FB78     	 ldrb r3,[r7,#3]
 2775 000e 7A68     	 ldr r2,[r7,#4]
 2776 0010 5821     	 movs r1,#88
 2777 0012 01FB03F3 	 mul r3,r1,r3
 2778 0016 1344     	 add r3,r3,r2
 2779 0018 4033     	 adds r3,r3,#64
 2780 001a 5B68     	 ldr r3,[r3,#4]
 2781 001c 03F4F043 	 and r3,r3,#30720
 2782 0020 DB0A     	 lsrs r3,r3,#11
 2783 0022 FB60     	 str r3,[r7,#12]
 666:../Libraries/XMCLib/src/xmc_dma.c **** 
 667:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_ClearRequestLine(dma, (uint8_t)line);
 2784              	 .loc 2 667 0
 2785 0024 FB68     	 ldr r3,[r7,#12]
 2786 0026 DBB2     	 uxtb r3,r3
 2787 0028 7868     	 ldr r0,[r7,#4]
 2788 002a 1946     	 mov r1,r3
 2789 002c FFF7FEFF 	 bl XMC_DMA_ClearRequestLine
 668:../Libraries/XMCLib/src/xmc_dma.c **** }
 2790              	 .loc 2 668 0
 2791 0030 1037     	 adds r7,r7,#16
 2792              	 .cfi_def_cfa_offset 8
 2793 0032 BD46     	 mov sp,r7
 2794              	 .cfi_def_cfa_register 13
 2795              	 
 2796 0034 80BD     	 pop {r7,pc}
 2797              	 .cfi_endproc
 2798              	.LFE221:
 2800 0036 00BF     	 .section .text.XMC_DMA_IRQHandler,"ax",%progbits
 2801              	 .align 2
 2802              	 .global XMC_DMA_IRQHandler
 2803              	 .thumb
 2804              	 .thumb_func
 2806              	XMC_DMA_IRQHandler:
 2807              	.LFB222:
 669:../Libraries/XMCLib/src/xmc_dma.c **** 
 670:../Libraries/XMCLib/src/xmc_dma.c **** /* Default DMA IRQ handler */
 671:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_IRQHandler(XMC_DMA_t *const dma)
 672:../Libraries/XMCLib/src/xmc_dma.c **** {
 2808              	 .loc 2 672 0
 2809              	 .cfi_startproc
 2810              	 
 2811              	 
 2812 0000 80B5     	 push {r7,lr}
 2813              	 .cfi_def_cfa_offset 8
 2814              	 .cfi_offset 7,-8
 2815              	 .cfi_offset 14,-4
 2816 0002 88B0     	 sub sp,sp,#32
 2817              	 .cfi_def_cfa_offset 40
 2818 0004 00AF     	 add r7,sp,#0
 2819              	 .cfi_def_cfa_register 7
 2820 0006 7860     	 str r0,[r7,#4]
 673:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event;
 674:../Libraries/XMCLib/src/xmc_dma.c ****   int32_t channel;
 675:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t mask;
 676:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_EVENT_HANDLER_t *dma_event_handlers;
 677:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_EVENT_HANDLER_t event_handler;
 678:../Libraries/XMCLib/src/xmc_dma.c **** 
 679:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 680:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 2821              	 .loc 2 680 0
 2822 0008 7B68     	 ldr r3,[r7,#4]
 2823 000a 824A     	 ldr r2,.L170
 2824 000c 9342     	 cmp r3,r2
 2825 000e 02D1     	 bne .L138
 681:../Libraries/XMCLib/src/xmc_dma.c ****   {
 682:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 683:../Libraries/XMCLib/src/xmc_dma.c ****     dma_event_handlers = dma0_event_handlers;
 2826              	 .loc 2 683 0
 2827 0010 814B     	 ldr r3,.L170+4
 2828 0012 BB61     	 str r3,[r7,#24]
 2829 0014 01E0     	 b .L139
 2830              	.L138:
 684:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 685:../Libraries/XMCLib/src/xmc_dma.c ****   }
 686:../Libraries/XMCLib/src/xmc_dma.c ****   else
 687:../Libraries/XMCLib/src/xmc_dma.c ****   {
 688:../Libraries/XMCLib/src/xmc_dma.c ****     dma_event_handlers = dma1_event_handlers;
 2831              	 .loc 2 688 0
 2832 0016 814B     	 ldr r3,.L170+8
 2833 0018 BB61     	 str r3,[r7,#24]
 2834              	.L139:
 689:../Libraries/XMCLib/src/xmc_dma.c ****   }
 690:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 691:../Libraries/XMCLib/src/xmc_dma.c ****   
 692:../Libraries/XMCLib/src/xmc_dma.c ****   event = XMC_DMA_GetEventStatus(dma);
 2835              	 .loc 2 692 0
 2836 001a 7868     	 ldr r0,[r7,#4]
 2837 001c FFF7FEFF 	 bl XMC_DMA_GetEventStatus
 2838 0020 7861     	 str r0,[r7,#20]
 693:../Libraries/XMCLib/src/xmc_dma.c ****   channel = 0;
 2839              	 .loc 2 693 0
 2840 0022 0023     	 movs r3,#0
 2841 0024 FB61     	 str r3,[r7,#28]
 694:../Libraries/XMCLib/src/xmc_dma.c **** 
 695:../Libraries/XMCLib/src/xmc_dma.c ****   if ((event & (uint32_t)XMC_DMA_CH_EVENT_ERROR) != (uint32_t)0UL)
 2842              	 .loc 2 695 0
 2843 0026 7B69     	 ldr r3,[r7,#20]
 2844 0028 03F01003 	 and r3,r3,#16
 2845 002c 002B     	 cmp r3,#0
 2846 002e 2BD0     	 beq .L140
 696:../Libraries/XMCLib/src/xmc_dma.c ****   {
 697:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsErrorStatus(dma);
 2847              	 .loc 2 697 0
 2848 0030 7868     	 ldr r0,[r7,#4]
 2849 0032 FFF7FEFF 	 bl XMC_DMA_GetChannelsErrorStatus
 2850 0036 7861     	 str r0,[r7,#20]
 698:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 2851              	 .loc 2 698 0
 2852 0038 21E0     	 b .L141
 2853              	.L145:
 699:../Libraries/XMCLib/src/xmc_dma.c ****     {
 700:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 2854              	 .loc 2 700 0
 2855 003a 0122     	 movs r2,#1
 2856 003c FB69     	 ldr r3,[r7,#28]
 2857 003e 02FA03F3 	 lsl r3,r2,r3
 2858 0042 3B61     	 str r3,[r7,#16]
 701:../Libraries/XMCLib/src/xmc_dma.c ****       if ((event & mask) != 0)
 2859              	 .loc 2 701 0
 2860 0044 7A69     	 ldr r2,[r7,#20]
 2861 0046 3B69     	 ldr r3,[r7,#16]
 2862 0048 1340     	 ands r3,r3,r2
 2863 004a 002B     	 cmp r3,#0
 2864 004c 14D0     	 beq .L142
 702:../Libraries/XMCLib/src/xmc_dma.c ****       {
 703:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_ERROR);
 2865              	 .loc 2 703 0
 2866 004e FB69     	 ldr r3,[r7,#28]
 2867 0050 DBB2     	 uxtb r3,r3
 2868 0052 7868     	 ldr r0,[r7,#4]
 2869 0054 1946     	 mov r1,r3
 2870 0056 1022     	 movs r2,#16
 2871 0058 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 704:../Libraries/XMCLib/src/xmc_dma.c **** 
 705:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 706:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 2872              	 .loc 2 706 0
 2873 005c FB69     	 ldr r3,[r7,#28]
 2874 005e 9B00     	 lsls r3,r3,#2
 2875 0060 BA69     	 ldr r2,[r7,#24]
 2876 0062 1344     	 add r3,r3,r2
 2877 0064 1B68     	 ldr r3,[r3]
 2878 0066 FB60     	 str r3,[r7,#12]
 707:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 2879              	 .loc 2 707 0
 2880 0068 FB68     	 ldr r3,[r7,#12]
 2881 006a 002B     	 cmp r3,#0
 2882 006c 03D0     	 beq .L143
 708:../Libraries/XMCLib/src/xmc_dma.c ****         {
 709:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_ERROR);
 2883              	 .loc 2 709 0
 2884 006e FB68     	 ldr r3,[r7,#12]
 2885 0070 1020     	 movs r0,#16
 2886 0072 9847     	 blx r3
 710:../Libraries/XMCLib/src/xmc_dma.c ****         }
 711:../Libraries/XMCLib/src/xmc_dma.c ****        
 712:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 2887              	 .loc 2 712 0
 2888 0074 07E0     	 b .L144
 2889              	.L143:
 2890 0076 06E0     	 b .L144
 2891              	.L142:
 713:../Libraries/XMCLib/src/xmc_dma.c ****       }
 714:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 2892              	 .loc 2 714 0
 2893 0078 FB69     	 ldr r3,[r7,#28]
 2894 007a 0133     	 adds r3,r3,#1
 2895 007c FB61     	 str r3,[r7,#28]
 2896              	.L141:
 698:../Libraries/XMCLib/src/xmc_dma.c ****     {
 2897              	 .loc 2 698 0
 2898 007e 7B69     	 ldr r3,[r7,#20]
 2899 0080 002B     	 cmp r3,#0
 2900 0082 DAD1     	 bne .L145
 2901 0084 C3E0     	 b .L137
 2902              	.L144:
 2903 0086 C2E0     	 b .L137
 2904              	.L140:
 715:../Libraries/XMCLib/src/xmc_dma.c ****     }
 716:../Libraries/XMCLib/src/xmc_dma.c ****   }
 717:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE) != (uint32_t)0UL)
 2905              	 .loc 2 717 0
 2906 0088 7B69     	 ldr r3,[r7,#20]
 2907 008a 03F00103 	 and r3,r3,#1
 2908 008e 002B     	 cmp r3,#0
 2909 0090 2BD0     	 beq .L147
 718:../Libraries/XMCLib/src/xmc_dma.c ****   {
 719:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsTransferCompleteStatus(dma);
 2910              	 .loc 2 719 0
 2911 0092 7868     	 ldr r0,[r7,#4]
 2912 0094 FFF7FEFF 	 bl XMC_DMA_GetChannelsTransferCompleteStatus
 2913 0098 7861     	 str r0,[r7,#20]
 720:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 2914              	 .loc 2 720 0
 2915 009a 21E0     	 b .L148
 2916              	.L152:
 721:../Libraries/XMCLib/src/xmc_dma.c ****     {
 722:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 2917              	 .loc 2 722 0
 2918 009c 0122     	 movs r2,#1
 2919 009e FB69     	 ldr r3,[r7,#28]
 2920 00a0 02FA03F3 	 lsl r3,r2,r3
 2921 00a4 3B61     	 str r3,[r7,#16]
 723:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 2922              	 .loc 2 723 0
 2923 00a6 7A69     	 ldr r2,[r7,#20]
 2924 00a8 3B69     	 ldr r3,[r7,#16]
 2925 00aa 1340     	 ands r3,r3,r2
 2926 00ac 002B     	 cmp r3,#0
 2927 00ae 14D0     	 beq .L149
 724:../Libraries/XMCLib/src/xmc_dma.c ****       {
 725:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TR
 2928              	 .loc 2 725 0
 2929 00b0 FB69     	 ldr r3,[r7,#28]
 2930 00b2 DBB2     	 uxtb r3,r3
 2931 00b4 7868     	 ldr r0,[r7,#4]
 2932 00b6 1946     	 mov r1,r3
 2933 00b8 0F22     	 movs r2,#15
 2934 00ba FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 726:../Libraries/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_BL
 727:../Libraries/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_SR
 728:../Libraries/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_DS
 729:../Libraries/XMCLib/src/xmc_dma.c **** 
 730:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 731:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 2935              	 .loc 2 731 0
 2936 00be FB69     	 ldr r3,[r7,#28]
 2937 00c0 9B00     	 lsls r3,r3,#2
 2938 00c2 BA69     	 ldr r2,[r7,#24]
 2939 00c4 1344     	 add r3,r3,r2
 2940 00c6 1B68     	 ldr r3,[r3]
 2941 00c8 FB60     	 str r3,[r7,#12]
 732:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 2942              	 .loc 2 732 0
 2943 00ca FB68     	 ldr r3,[r7,#12]
 2944 00cc 002B     	 cmp r3,#0
 2945 00ce 03D0     	 beq .L150
 733:../Libraries/XMCLib/src/xmc_dma.c ****         {
 734:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 2946              	 .loc 2 734 0
 2947 00d0 FB68     	 ldr r3,[r7,#12]
 2948 00d2 0120     	 movs r0,#1
 2949 00d4 9847     	 blx r3
 735:../Libraries/XMCLib/src/xmc_dma.c ****         }
 736:../Libraries/XMCLib/src/xmc_dma.c **** 																	  
 737:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 2950              	 .loc 2 737 0
 2951 00d6 07E0     	 b .L151
 2952              	.L150:
 2953 00d8 06E0     	 b .L151
 2954              	.L149:
 738:../Libraries/XMCLib/src/xmc_dma.c ****       }
 739:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 2955              	 .loc 2 739 0
 2956 00da FB69     	 ldr r3,[r7,#28]
 2957 00dc 0133     	 adds r3,r3,#1
 2958 00de FB61     	 str r3,[r7,#28]
 2959              	.L148:
 720:../Libraries/XMCLib/src/xmc_dma.c ****     {
 2960              	 .loc 2 720 0
 2961 00e0 7B69     	 ldr r3,[r7,#20]
 2962 00e2 002B     	 cmp r3,#0
 2963 00e4 DAD1     	 bne .L152
 2964 00e6 92E0     	 b .L137
 2965              	.L151:
 2966 00e8 91E0     	 b .L137
 2967              	.L147:
 740:../Libraries/XMCLib/src/xmc_dma.c ****     }
 741:../Libraries/XMCLib/src/xmc_dma.c ****   }
 742:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE) != (uint32_t)0UL)
 2968              	 .loc 2 742 0
 2969 00ea 7B69     	 ldr r3,[r7,#20]
 2970 00ec 03F00203 	 and r3,r3,#2
 2971 00f0 002B     	 cmp r3,#0
 2972 00f2 2BD0     	 beq .L153
 743:../Libraries/XMCLib/src/xmc_dma.c ****   {
 744:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsBlockCompleteStatus(dma);
 2973              	 .loc 2 744 0
 2974 00f4 7868     	 ldr r0,[r7,#4]
 2975 00f6 FFF7FEFF 	 bl XMC_DMA_GetChannelsBlockCompleteStatus
 2976 00fa 7861     	 str r0,[r7,#20]
 745:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 2977              	 .loc 2 745 0
 2978 00fc 21E0     	 b .L154
 2979              	.L158:
 746:../Libraries/XMCLib/src/xmc_dma.c ****     {
 747:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 2980              	 .loc 2 747 0
 2981 00fe 0122     	 movs r2,#1
 2982 0100 FB69     	 ldr r3,[r7,#28]
 2983 0102 02FA03F3 	 lsl r3,r2,r3
 2984 0106 3B61     	 str r3,[r7,#16]
 748:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 2985              	 .loc 2 748 0
 2986 0108 7A69     	 ldr r2,[r7,#20]
 2987 010a 3B69     	 ldr r3,[r7,#16]
 2988 010c 1340     	 ands r3,r3,r2
 2989 010e 002B     	 cmp r3,#0
 2990 0110 14D0     	 beq .L155
 749:../Libraries/XMCLib/src/xmc_dma.c ****       {
 750:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_BL
 2991              	 .loc 2 750 0
 2992 0112 FB69     	 ldr r3,[r7,#28]
 2993 0114 DBB2     	 uxtb r3,r3
 2994 0116 7868     	 ldr r0,[r7,#4]
 2995 0118 1946     	 mov r1,r3
 2996 011a 0E22     	 movs r2,#14
 2997 011c FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 751:../Libraries/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_SR
 752:../Libraries/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_DS
 753:../Libraries/XMCLib/src/xmc_dma.c **** 
 754:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 755:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 2998              	 .loc 2 755 0
 2999 0120 FB69     	 ldr r3,[r7,#28]
 3000 0122 9B00     	 lsls r3,r3,#2
 3001 0124 BA69     	 ldr r2,[r7,#24]
 3002 0126 1344     	 add r3,r3,r2
 3003 0128 1B68     	 ldr r3,[r3]
 3004 012a FB60     	 str r3,[r7,#12]
 756:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3005              	 .loc 2 756 0
 3006 012c FB68     	 ldr r3,[r7,#12]
 3007 012e 002B     	 cmp r3,#0
 3008 0130 03D0     	 beq .L156
 757:../Libraries/XMCLib/src/xmc_dma.c ****         {
 758:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE);
 3009              	 .loc 2 758 0
 3010 0132 FB68     	 ldr r3,[r7,#12]
 3011 0134 0220     	 movs r0,#2
 3012 0136 9847     	 blx r3
 759:../Libraries/XMCLib/src/xmc_dma.c ****         }
 760:../Libraries/XMCLib/src/xmc_dma.c **** 
 761:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 3013              	 .loc 2 761 0
 3014 0138 07E0     	 b .L157
 3015              	.L156:
 3016 013a 06E0     	 b .L157
 3017              	.L155:
 762:../Libraries/XMCLib/src/xmc_dma.c ****       }
 763:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 3018              	 .loc 2 763 0
 3019 013c FB69     	 ldr r3,[r7,#28]
 3020 013e 0133     	 adds r3,r3,#1
 3021 0140 FB61     	 str r3,[r7,#28]
 3022              	.L154:
 745:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3023              	 .loc 2 745 0
 3024 0142 7B69     	 ldr r3,[r7,#20]
 3025 0144 002B     	 cmp r3,#0
 3026 0146 DAD1     	 bne .L158
 3027 0148 61E0     	 b .L137
 3028              	.L157:
 3029 014a 60E0     	 b .L137
 3030              	.L153:
 764:../Libraries/XMCLib/src/xmc_dma.c ****     }
 765:../Libraries/XMCLib/src/xmc_dma.c ****   }
 766:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 3031              	 .loc 2 766 0
 3032 014c 7B69     	 ldr r3,[r7,#20]
 3033 014e 03F00403 	 and r3,r3,#4
 3034 0152 002B     	 cmp r3,#0
 3035 0154 2BD0     	 beq .L159
 767:../Libraries/XMCLib/src/xmc_dma.c ****   {
 768:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsSourceTransactionCompleteStatus(dma);
 3036              	 .loc 2 768 0
 3037 0156 7868     	 ldr r0,[r7,#4]
 3038 0158 FFF7FEFF 	 bl XMC_DMA_GetChannelsSourceTransactionCompleteStatus
 3039 015c 7861     	 str r0,[r7,#20]
 769:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3040              	 .loc 2 769 0
 3041 015e 21E0     	 b .L160
 3042              	.L164:
 770:../Libraries/XMCLib/src/xmc_dma.c ****     {
 771:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 3043              	 .loc 2 771 0
 3044 0160 0122     	 movs r2,#1
 3045 0162 FB69     	 ldr r3,[r7,#28]
 3046 0164 02FA03F3 	 lsl r3,r2,r3
 3047 0168 3B61     	 str r3,[r7,#16]
 772:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 3048              	 .loc 2 772 0
 3049 016a 7A69     	 ldr r2,[r7,#20]
 3050 016c 3B69     	 ldr r3,[r7,#16]
 3051 016e 1340     	 ands r3,r3,r2
 3052 0170 002B     	 cmp r3,#0
 3053 0172 14D0     	 beq .L161
 773:../Libraries/XMCLib/src/xmc_dma.c ****       {
 774:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTI
 3054              	 .loc 2 774 0
 3055 0174 FB69     	 ldr r3,[r7,#28]
 3056 0176 DBB2     	 uxtb r3,r3
 3057 0178 7868     	 ldr r0,[r7,#4]
 3058 017a 1946     	 mov r1,r3
 3059 017c 0422     	 movs r2,#4
 3060 017e FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 775:../Libraries/XMCLib/src/xmc_dma.c **** 
 776:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 777:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 3061              	 .loc 2 777 0
 3062 0182 FB69     	 ldr r3,[r7,#28]
 3063 0184 9B00     	 lsls r3,r3,#2
 3064 0186 BA69     	 ldr r2,[r7,#24]
 3065 0188 1344     	 add r3,r3,r2
 3066 018a 1B68     	 ldr r3,[r3]
 3067 018c FB60     	 str r3,[r7,#12]
 778:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3068              	 .loc 2 778 0
 3069 018e FB68     	 ldr r3,[r7,#12]
 3070 0190 002B     	 cmp r3,#0
 3071 0192 03D0     	 beq .L162
 779:../Libraries/XMCLib/src/xmc_dma.c ****         {
 780:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE);
 3072              	 .loc 2 780 0
 3073 0194 FB68     	 ldr r3,[r7,#12]
 3074 0196 0420     	 movs r0,#4
 3075 0198 9847     	 blx r3
 781:../Libraries/XMCLib/src/xmc_dma.c ****         }
 782:../Libraries/XMCLib/src/xmc_dma.c ****         
 783:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 3076              	 .loc 2 783 0
 3077 019a 07E0     	 b .L163
 3078              	.L162:
 3079 019c 06E0     	 b .L163
 3080              	.L161:
 784:../Libraries/XMCLib/src/xmc_dma.c ****       }
 785:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 3081              	 .loc 2 785 0
 3082 019e FB69     	 ldr r3,[r7,#28]
 3083 01a0 0133     	 adds r3,r3,#1
 3084 01a2 FB61     	 str r3,[r7,#28]
 3085              	.L160:
 769:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3086              	 .loc 2 769 0
 3087 01a4 7B69     	 ldr r3,[r7,#20]
 3088 01a6 002B     	 cmp r3,#0
 3089 01a8 DAD1     	 bne .L164
 3090 01aa 30E0     	 b .L137
 3091              	.L163:
 3092 01ac 2FE0     	 b .L137
 3093              	.L159:
 786:../Libraries/XMCLib/src/xmc_dma.c ****     }
 787:../Libraries/XMCLib/src/xmc_dma.c ****   }
 788:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 3094              	 .loc 2 788 0
 3095 01ae 7B69     	 ldr r3,[r7,#20]
 3096 01b0 03F00803 	 and r3,r3,#8
 3097 01b4 002B     	 cmp r3,#0
 3098 01b6 2AD0     	 beq .L137
 789:../Libraries/XMCLib/src/xmc_dma.c ****   {
 790:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(dma);
 3099              	 .loc 2 790 0
 3100 01b8 7868     	 ldr r0,[r7,#4]
 3101 01ba FFF7FEFF 	 bl XMC_DMA_GetChannelsDestinationTransactionCompleteStatus
 3102 01be 7861     	 str r0,[r7,#20]
 791:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3103              	 .loc 2 791 0
 3104 01c0 21E0     	 b .L165
 3105              	.L169:
 792:../Libraries/XMCLib/src/xmc_dma.c ****     {
 793:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 3106              	 .loc 2 793 0
 3107 01c2 0122     	 movs r2,#1
 3108 01c4 FB69     	 ldr r3,[r7,#28]
 3109 01c6 02FA03F3 	 lsl r3,r2,r3
 3110 01ca 3B61     	 str r3,[r7,#16]
 794:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 3111              	 .loc 2 794 0
 3112 01cc 7A69     	 ldr r2,[r7,#20]
 3113 01ce 3B69     	 ldr r3,[r7,#16]
 3114 01d0 1340     	 ands r3,r3,r2
 3115 01d2 002B     	 cmp r3,#0
 3116 01d4 14D0     	 beq .L166
 795:../Libraries/XMCLib/src/xmc_dma.c ****       {
 796:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTI
 3117              	 .loc 2 796 0
 3118 01d6 FB69     	 ldr r3,[r7,#28]
 3119 01d8 DBB2     	 uxtb r3,r3
 3120 01da 7868     	 ldr r0,[r7,#4]
 3121 01dc 1946     	 mov r1,r3
 3122 01de 0822     	 movs r2,#8
 3123 01e0 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 797:../Libraries/XMCLib/src/xmc_dma.c **** 
 798:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 799:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 3124              	 .loc 2 799 0
 3125 01e4 FB69     	 ldr r3,[r7,#28]
 3126 01e6 9B00     	 lsls r3,r3,#2
 3127 01e8 BA69     	 ldr r2,[r7,#24]
 3128 01ea 1344     	 add r3,r3,r2
 3129 01ec 1B68     	 ldr r3,[r3]
 3130 01ee FB60     	 str r3,[r7,#12]
 800:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3131              	 .loc 2 800 0
 3132 01f0 FB68     	 ldr r3,[r7,#12]
 3133 01f2 002B     	 cmp r3,#0
 3134 01f4 03D0     	 beq .L167
 801:../Libraries/XMCLib/src/xmc_dma.c ****         {
 802:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE);
 3135              	 .loc 2 802 0
 3136 01f6 FB68     	 ldr r3,[r7,#12]
 3137 01f8 0820     	 movs r0,#8
 3138 01fa 9847     	 blx r3
 803:../Libraries/XMCLib/src/xmc_dma.c ****         }      
 804:../Libraries/XMCLib/src/xmc_dma.c **** 
 805:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 3139              	 .loc 2 805 0
 3140 01fc 07E0     	 b .L168
 3141              	.L167:
 3142 01fe 06E0     	 b .L168
 3143              	.L166:
 806:../Libraries/XMCLib/src/xmc_dma.c ****       }
 807:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 3144              	 .loc 2 807 0
 3145 0200 FB69     	 ldr r3,[r7,#28]
 3146 0202 0133     	 adds r3,r3,#1
 3147 0204 FB61     	 str r3,[r7,#28]
 3148              	.L165:
 791:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3149              	 .loc 2 791 0
 3150 0206 7B69     	 ldr r3,[r7,#20]
 3151 0208 002B     	 cmp r3,#0
 3152 020a DAD1     	 bne .L169
 3153 020c FFE7     	 b .L137
 3154              	.L168:
 3155              	.L137:
 808:../Libraries/XMCLib/src/xmc_dma.c ****     }
 809:../Libraries/XMCLib/src/xmc_dma.c ****   }
 810:../Libraries/XMCLib/src/xmc_dma.c ****   else
 811:../Libraries/XMCLib/src/xmc_dma.c ****   {
 812:../Libraries/XMCLib/src/xmc_dma.c ****     /* no active interrupt was found? */
 813:../Libraries/XMCLib/src/xmc_dma.c ****   }
 814:../Libraries/XMCLib/src/xmc_dma.c **** 
 815:../Libraries/XMCLib/src/xmc_dma.c **** }
 3156              	 .loc 2 815 0
 3157 020e 2037     	 adds r7,r7,#32
 3158              	 .cfi_def_cfa_offset 8
 3159 0210 BD46     	 mov sp,r7
 3160              	 .cfi_def_cfa_register 13
 3161              	 
 3162 0212 80BD     	 pop {r7,pc}
 3163              	.L171:
 3164              	 .align 2
 3165              	.L170:
 3166 0214 00400150 	 .word 1342259200
 3167 0218 00000000 	 .word dma0_event_handlers
 3168 021c 00000000 	 .word dma1_event_handlers
 3169              	 .cfi_endproc
 3170              	.LFE222:
 3172              	 .text
 3173              	.Letext0:
 3174              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3175              	 .file 4 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3176              	 .file 5 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 3177              	 .file 6 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/XMCLib/inc/xmc4_scu.h"
 3178              	 .file 7 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/CMSIS/Include/cmsis_gcc.h"
 3179              	 .file 8 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/CMSIS/Include/core_cm4.h"
 3180              	 .file 9 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_dma.c
    {standard input}:20     .text.XMC_DMA_GetEventStatus:00000000 $t
    {standard input}:24     .text.XMC_DMA_GetEventStatus:00000000 XMC_DMA_GetEventStatus
    {standard input}:58     .text.XMC_DMA_GetChannelsTransferCompleteStatus:00000000 $t
    {standard input}:62     .text.XMC_DMA_GetChannelsTransferCompleteStatus:00000000 XMC_DMA_GetChannelsTransferCompleteStatus
    {standard input}:95     .text.XMC_DMA_GetChannelsBlockCompleteStatus:00000000 $t
    {standard input}:99     .text.XMC_DMA_GetChannelsBlockCompleteStatus:00000000 XMC_DMA_GetChannelsBlockCompleteStatus
    {standard input}:132    .text.XMC_DMA_GetChannelsSourceTransactionCompleteStatus:00000000 $t
    {standard input}:136    .text.XMC_DMA_GetChannelsSourceTransactionCompleteStatus:00000000 XMC_DMA_GetChannelsSourceTransactionCompleteStatus
    {standard input}:169    .text.XMC_DMA_GetChannelsDestinationTransactionCompleteStatus:00000000 $t
    {standard input}:173    .text.XMC_DMA_GetChannelsDestinationTransactionCompleteStatus:00000000 XMC_DMA_GetChannelsDestinationTransactionCompleteStatus
    {standard input}:206    .text.XMC_DMA_GetChannelsErrorStatus:00000000 $t
    {standard input}:210    .text.XMC_DMA_GetChannelsErrorStatus:00000000 XMC_DMA_GetChannelsErrorStatus
                            *COM*:00000020 dma0_event_handlers
                            *COM*:00000010 dma1_event_handlers
    {standard input}:245    .text.XMC_DMA_Init:00000000 $t
    {standard input}:250    .text.XMC_DMA_Init:00000000 XMC_DMA_Init
    {standard input}:285    .text.XMC_DMA_Enable:00000000 XMC_DMA_Enable
    {standard input}:280    .text.XMC_DMA_Enable:00000000 $t
    {standard input}:328    .text.XMC_DMA_Enable:0000002c $d
    {standard input}:335    .text.XMC_DMA_Disable:00000000 $t
    {standard input}:340    .text.XMC_DMA_Disable:00000000 XMC_DMA_Disable
    {standard input}:383    .text.XMC_DMA_Disable:0000002c $d
    {standard input}:390    .text.XMC_DMA_IsEnabled:00000000 $t
    {standard input}:395    .text.XMC_DMA_IsEnabled:00000000 XMC_DMA_IsEnabled
    {standard input}:487    .text.XMC_DMA_IsEnabled:00000088 $d
    {standard input}:494    .text.XMC_DMA_EnableRequestLine:00000000 $t
    {standard input}:499    .text.XMC_DMA_EnableRequestLine:00000000 XMC_DMA_EnableRequestLine
    {standard input}:596    .text.XMC_DMA_EnableRequestLine:00000090 $d
    {standard input}:602    .text.XMC_DMA_DisableRequestLine:00000000 $t
    {standard input}:607    .text.XMC_DMA_DisableRequestLine:00000000 XMC_DMA_DisableRequestLine
    {standard input}:665    .text.XMC_DMA_DisableRequestLine:0000004c $d
    {standard input}:671    .text.XMC_DMA_ClearRequestLine:00000000 $t
    {standard input}:676    .text.XMC_DMA_ClearRequestLine:00000000 XMC_DMA_ClearRequestLine
    {standard input}:752    .text.XMC_DMA_ClearRequestLine:00000070 $d
    {standard input}:758    .text.XMC_DMA_GetOverrunStatus:00000000 $t
    {standard input}:763    .text.XMC_DMA_GetOverrunStatus:00000000 XMC_DMA_GetOverrunStatus
    {standard input}:827    .text.XMC_DMA_GetOverrunStatus:00000058 $d
    {standard input}:833    .text.XMC_DMA_ClearOverrunStatus:00000000 $t
    {standard input}:838    .text.XMC_DMA_ClearOverrunStatus:00000000 XMC_DMA_ClearOverrunStatus
    {standard input}:888    .text.XMC_DMA_ClearOverrunStatus:0000003c $d
    {standard input}:894    .text.XMC_DMA_CH_Disable:00000000 $t
    {standard input}:899    .text.XMC_DMA_CH_Disable:00000000 XMC_DMA_CH_Disable
    {standard input}:947    .text.XMC_DMA_CH_IsEnabled:00000000 $t
    {standard input}:952    .text.XMC_DMA_CH_IsEnabled:00000000 XMC_DMA_CH_IsEnabled
    {standard input}:995    .text.XMC_DMA_CH_Init:00000000 $t
    {standard input}:1000   .text.XMC_DMA_CH_Init:00000000 XMC_DMA_CH_Init
    {standard input}:1839   .text.XMC_DMA_CH_ClearEventStatus:00000000 XMC_DMA_CH_ClearEventStatus
    {standard input}:1313   .text.XMC_DMA_CH_Init:00000250 $d
    {standard input}:1322   .text.XMC_DMA_CH_Init:00000274 $t
    {standard input}:1456   .text.XMC_DMA_CH_Init:0000037c $d
    {standard input}:1459   .text.XMC_DMA_CH_Init:00000380 $t
    {standard input}:1543   .text.XMC_DMA_CH_Suspend:00000000 $t
    {standard input}:1548   .text.XMC_DMA_CH_Suspend:00000000 XMC_DMA_CH_Suspend
    {standard input}:1595   .text.XMC_DMA_CH_Resume:00000000 $t
    {standard input}:1600   .text.XMC_DMA_CH_Resume:00000000 XMC_DMA_CH_Resume
    {standard input}:1647   .text.XMC_DMA_CH_IsSuspended:00000000 $t
    {standard input}:1652   .text.XMC_DMA_CH_IsSuspended:00000000 XMC_DMA_CH_IsSuspended
    {standard input}:1698   .text.XMC_DMA_CH_EnableEvent:00000000 $t
    {standard input}:1703   .text.XMC_DMA_CH_EnableEvent:00000000 XMC_DMA_CH_EnableEvent
    {standard input}:1766   .text.XMC_DMA_CH_DisableEvent:00000000 $t
    {standard input}:1771   .text.XMC_DMA_CH_DisableEvent:00000000 XMC_DMA_CH_DisableEvent
    {standard input}:1834   .text.XMC_DMA_CH_ClearEventStatus:00000000 $t
    {standard input}:1902   .text.XMC_DMA_CH_GetEventStatus:00000000 $t
    {standard input}:1907   .text.XMC_DMA_CH_GetEventStatus:00000000 XMC_DMA_CH_GetEventStatus
    {standard input}:1982   .text.XMC_DMA_CH_EnableSourceGather:00000000 $t
    {standard input}:1987   .text.XMC_DMA_CH_EnableSourceGather:00000000 XMC_DMA_CH_EnableSourceGather
    {standard input}:2050   .text.XMC_DMA_CH_DisableSourceGather:00000000 $t
    {standard input}:2055   .text.XMC_DMA_CH_DisableSourceGather:00000000 XMC_DMA_CH_DisableSourceGather
    {standard input}:2102   .text.XMC_DMA_CH_EnableDestinationScatter:00000000 $t
    {standard input}:2107   .text.XMC_DMA_CH_EnableDestinationScatter:00000000 XMC_DMA_CH_EnableDestinationScatter
    {standard input}:2170   .text.XMC_DMA_CH_DisableDestinationScatter:00000000 $t
    {standard input}:2175   .text.XMC_DMA_CH_DisableDestinationScatter:00000000 XMC_DMA_CH_DisableDestinationScatter
    {standard input}:2222   .text.XMC_DMA_CH_TriggerSourceRequest:00000000 $t
    {standard input}:2227   .text.XMC_DMA_CH_TriggerSourceRequest:00000000 XMC_DMA_CH_TriggerSourceRequest
    {standard input}:2293   .text.XMC_DMA_CH_TriggerDestinationRequest:00000000 $t
    {standard input}:2298   .text.XMC_DMA_CH_TriggerDestinationRequest:00000000 XMC_DMA_CH_TriggerDestinationRequest
    {standard input}:2364   .text.XMC_DMA_CH_EnableSourceAddressReload:00000000 $t
    {standard input}:2369   .text.XMC_DMA_CH_EnableSourceAddressReload:00000000 XMC_DMA_CH_EnableSourceAddressReload
    {standard input}:2416   .text.XMC_DMA_CH_DisableSourceAddressReload:00000000 $t
    {standard input}:2421   .text.XMC_DMA_CH_DisableSourceAddressReload:00000000 XMC_DMA_CH_DisableSourceAddressReload
    {standard input}:2468   .text.XMC_DMA_CH_EnableDestinationAddressReload:00000000 $t
    {standard input}:2473   .text.XMC_DMA_CH_EnableDestinationAddressReload:00000000 XMC_DMA_CH_EnableDestinationAddressReload
    {standard input}:2520   .text.XMC_DMA_CH_DisableDestinationAddressReload:00000000 $t
    {standard input}:2525   .text.XMC_DMA_CH_DisableDestinationAddressReload:00000000 XMC_DMA_CH_DisableDestinationAddressReload
    {standard input}:2572   .text.XMC_DMA_CH_RequestLastMultiblockTransfer:00000000 $t
    {standard input}:2577   .text.XMC_DMA_CH_RequestLastMultiblockTransfer:00000000 XMC_DMA_CH_RequestLastMultiblockTransfer
    {standard input}:2640   .text.XMC_DMA_CH_SetEventHandler:00000000 $t
    {standard input}:2645   .text.XMC_DMA_CH_SetEventHandler:00000000 XMC_DMA_CH_SetEventHandler
    {standard input}:2694   .text.XMC_DMA_CH_SetEventHandler:00000038 $d
    {standard input}:2701   .text.XMC_DMA_CH_ClearSourcePeripheralRequest:00000000 $t
    {standard input}:2706   .text.XMC_DMA_CH_ClearSourcePeripheralRequest:00000000 XMC_DMA_CH_ClearSourcePeripheralRequest
    {standard input}:2751   .text.XMC_DMA_CH_ClearDestinationPeripheralRequest:00000000 $t
    {standard input}:2756   .text.XMC_DMA_CH_ClearDestinationPeripheralRequest:00000000 XMC_DMA_CH_ClearDestinationPeripheralRequest
    {standard input}:2801   .text.XMC_DMA_IRQHandler:00000000 $t
    {standard input}:2806   .text.XMC_DMA_IRQHandler:00000000 XMC_DMA_IRQHandler
    {standard input}:3166   .text.XMC_DMA_IRQHandler:00000214 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_RESET_IsPeripheralResetAsserted
