   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "tasks.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .global pxCurrentTCB
  20              	 .section .bss.pxCurrentTCB,"aw",%nobits
  21              	 .align 2
  24              	pxCurrentTCB:
  25 0000 00000000 	 .space 4
  26              	 .section .bss.pxReadyTasksLists,"aw",%nobits
  27              	 .align 2
  30              	pxReadyTasksLists:
  31 0000 00000000 	 .space 100
  31      00000000 
  31      00000000 
  31      00000000 
  31      00000000 
  32              	 .section .bss.xDelayedTaskList1,"aw",%nobits
  33              	 .align 2
  36              	xDelayedTaskList1:
  37 0000 00000000 	 .space 20
  37      00000000 
  37      00000000 
  37      00000000 
  37      00000000 
  38              	 .section .bss.xDelayedTaskList2,"aw",%nobits
  39              	 .align 2
  42              	xDelayedTaskList2:
  43 0000 00000000 	 .space 20
  43      00000000 
  43      00000000 
  43      00000000 
  43      00000000 
  44              	 .section .bss.pxDelayedTaskList,"aw",%nobits
  45              	 .align 2
  48              	pxDelayedTaskList:
  49 0000 00000000 	 .space 4
  50              	 .section .bss.pxOverflowDelayedTaskList,"aw",%nobits
  51              	 .align 2
  54              	pxOverflowDelayedTaskList:
  55 0000 00000000 	 .space 4
  56              	 .section .bss.xPendingReadyList,"aw",%nobits
  57              	 .align 2
  60              	xPendingReadyList:
  61 0000 00000000 	 .space 20
  61      00000000 
  61      00000000 
  61      00000000 
  61      00000000 
  62              	 .section .bss.xTasksWaitingTermination,"aw",%nobits
  63              	 .align 2
  66              	xTasksWaitingTermination:
  67 0000 00000000 	 .space 20
  67      00000000 
  67      00000000 
  67      00000000 
  67      00000000 
  68              	 .section .bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  69              	 .align 2
  72              	uxDeletedTasksWaitingCleanUp:
  73 0000 00000000 	 .space 4
  74              	 .section .bss.xSuspendedTaskList,"aw",%nobits
  75              	 .align 2
  78              	xSuspendedTaskList:
  79 0000 00000000 	 .space 20
  79      00000000 
  79      00000000 
  79      00000000 
  79      00000000 
  80              	 .section .bss.uxCurrentNumberOfTasks,"aw",%nobits
  81              	 .align 2
  84              	uxCurrentNumberOfTasks:
  85 0000 00000000 	 .space 4
  86              	 .section .bss.xTickCount,"aw",%nobits
  87              	 .align 2
  90              	xTickCount:
  91 0000 00000000 	 .space 4
  92              	 .section .bss.uxTopReadyPriority,"aw",%nobits
  93              	 .align 2
  96              	uxTopReadyPriority:
  97 0000 00000000 	 .space 4
  98              	 .section .bss.xSchedulerRunning,"aw",%nobits
  99              	 .align 2
 102              	xSchedulerRunning:
 103 0000 00000000 	 .space 4
 104              	 .section .bss.uxPendedTicks,"aw",%nobits
 105              	 .align 2
 108              	uxPendedTicks:
 109 0000 00000000 	 .space 4
 110              	 .section .bss.xYieldPending,"aw",%nobits
 111              	 .align 2
 114              	xYieldPending:
 115 0000 00000000 	 .space 4
 116              	 .section .bss.xNumOfOverflows,"aw",%nobits
 117              	 .align 2
 120              	xNumOfOverflows:
 121 0000 00000000 	 .space 4
 122              	 .section .bss.uxTaskNumber,"aw",%nobits
 123              	 .align 2
 126              	uxTaskNumber:
 127 0000 00000000 	 .space 4
 128              	 .section .bss.xNextTaskUnblockTime,"aw",%nobits
 129              	 .align 2
 132              	xNextTaskUnblockTime:
 133 0000 00000000 	 .space 4
 134              	 .section .bss.xIdleTaskHandle,"aw",%nobits
 135              	 .align 2
 138              	xIdleTaskHandle:
 139 0000 00000000 	 .space 4
 140              	 .section .bss.uxSchedulerSuspended,"aw",%nobits
 141              	 .align 2
 144              	uxSchedulerSuspended:
 145 0000 00000000 	 .space 4
 146              	 .section .text.xTaskCreate,"ax",%progbits
 147              	 .align 2
 148              	 .global xTaskCreate
 149              	 .thumb
 150              	 .thumb_func
 152              	xTaskCreate:
 153              	.LFB137:
 154              	 .file 1 "../Dave/Generated/FREERTOS/tasks.c"
   1:../Dave/Generated/FREERTOS/tasks.c **** /*
   2:../Dave/Generated/FREERTOS/tasks.c ****  * FreeRTOS Kernel V10.0.1
   3:../Dave/Generated/FREERTOS/tasks.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../Dave/Generated/FREERTOS/tasks.c ****  *
   5:../Dave/Generated/FREERTOS/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../Dave/Generated/FREERTOS/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../Dave/Generated/FREERTOS/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:../Dave/Generated/FREERTOS/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../Dave/Generated/FREERTOS/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../Dave/Generated/FREERTOS/tasks.c ****  * subject to the following conditions:
  11:../Dave/Generated/FREERTOS/tasks.c ****  *
  12:../Dave/Generated/FREERTOS/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../Dave/Generated/FREERTOS/tasks.c ****  * copies or substantial portions of the Software.
  14:../Dave/Generated/FREERTOS/tasks.c ****  *
  15:../Dave/Generated/FREERTOS/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../Dave/Generated/FREERTOS/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../Dave/Generated/FREERTOS/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../Dave/Generated/FREERTOS/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../Dave/Generated/FREERTOS/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../Dave/Generated/FREERTOS/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../Dave/Generated/FREERTOS/tasks.c ****  *
  22:../Dave/Generated/FREERTOS/tasks.c ****  * http://www.FreeRTOS.org
  23:../Dave/Generated/FREERTOS/tasks.c ****  * http://aws.amazon.com/freertos
  24:../Dave/Generated/FREERTOS/tasks.c ****  *
  25:../Dave/Generated/FREERTOS/tasks.c ****  * 1 tab == 4 spaces!
  26:../Dave/Generated/FREERTOS/tasks.c ****  */
  27:../Dave/Generated/FREERTOS/tasks.c **** 
  28:../Dave/Generated/FREERTOS/tasks.c **** /* Standard includes. */
  29:../Dave/Generated/FREERTOS/tasks.c **** #include <stdlib.h>
  30:../Dave/Generated/FREERTOS/tasks.c **** #include <string.h>
  31:../Dave/Generated/FREERTOS/tasks.c **** 
  32:../Dave/Generated/FREERTOS/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:../Dave/Generated/FREERTOS/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:../Dave/Generated/FREERTOS/tasks.c **** task.h is included from an application file. */
  35:../Dave/Generated/FREERTOS/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:../Dave/Generated/FREERTOS/tasks.c **** 
  37:../Dave/Generated/FREERTOS/tasks.c **** /* FreeRTOS includes. */
  38:../Dave/Generated/FREERTOS/tasks.c **** #include "FreeRTOS.h"
  39:../Dave/Generated/FREERTOS/tasks.c **** #include "task.h"
  40:../Dave/Generated/FREERTOS/tasks.c **** #include "timers.h"
  41:../Dave/Generated/FREERTOS/tasks.c **** #include "stack_macros.h"
  42:../Dave/Generated/FREERTOS/tasks.c **** 
  43:../Dave/Generated/FREERTOS/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  44:../Dave/Generated/FREERTOS/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  45:../Dave/Generated/FREERTOS/tasks.c **** header files above, but not in this file, in order to generate the correct
  46:../Dave/Generated/FREERTOS/tasks.c **** privileged Vs unprivileged linkage and placement. */
  47:../Dave/Generated/FREERTOS/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  48:../Dave/Generated/FREERTOS/tasks.c **** 
  49:../Dave/Generated/FREERTOS/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:../Dave/Generated/FREERTOS/tasks.c **** functions but without including stdio.h here. */
  51:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:../Dave/Generated/FREERTOS/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:../Dave/Generated/FREERTOS/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:../Dave/Generated/FREERTOS/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:../Dave/Generated/FREERTOS/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:../Dave/Generated/FREERTOS/tasks.c **** 	#include <stdio.h>
  57:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:../Dave/Generated/FREERTOS/tasks.c **** 
  59:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:../Dave/Generated/FREERTOS/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:../Dave/Generated/FREERTOS/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:../Dave/Generated/FREERTOS/tasks.c **** #else
  64:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:../Dave/Generated/FREERTOS/tasks.c **** #endif
  66:../Dave/Generated/FREERTOS/tasks.c **** 
  67:../Dave/Generated/FREERTOS/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:../Dave/Generated/FREERTOS/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:../Dave/Generated/FREERTOS/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:../Dave/Generated/FREERTOS/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:../Dave/Generated/FREERTOS/tasks.c **** 
  72:../Dave/Generated/FREERTOS/tasks.c **** /*
  73:../Dave/Generated/FREERTOS/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:../Dave/Generated/FREERTOS/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:../Dave/Generated/FREERTOS/tasks.c ****  */
  76:../Dave/Generated/FREERTOS/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:../Dave/Generated/FREERTOS/tasks.c **** 
  78:../Dave/Generated/FREERTOS/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
  79:../Dave/Generated/FREERTOS/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
  80:../Dave/Generated/FREERTOS/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
  81:../Dave/Generated/FREERTOS/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
  82:../Dave/Generated/FREERTOS/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
  83:../Dave/Generated/FREERTOS/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
  84:../Dave/Generated/FREERTOS/tasks.c **** settings allow a task to be created using either statically or dynamically
  85:../Dave/Generated/FREERTOS/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
  86:../Dave/Generated/FREERTOS/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
  87:../Dave/Generated/FREERTOS/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
  88:../Dave/Generated/FREERTOS/tasks.c **** made to free the RAM that was allocated statically.
  89:../Dave/Generated/FREERTOS/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
  90:../Dave/Generated/FREERTOS/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
  91:../Dave/Generated/FREERTOS/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
  92:../Dave/Generated/FREERTOS/tasks.c **** a statically allocated stack and a dynamically allocated TCB.
  93:../Dave/Generated/FREERTOS/tasks.c **** !!!NOTE!!! If the definition of tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is
  94:../Dave/Generated/FREERTOS/tasks.c **** changed then the definition of StaticTask_t must also be updated. */
  95:../Dave/Generated/FREERTOS/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE	( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( c
  96:../Dave/Generated/FREERTOS/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  97:../Dave/Generated/FREERTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  98:../Dave/Generated/FREERTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  99:../Dave/Generated/FREERTOS/tasks.c **** 
 100:../Dave/Generated/FREERTOS/tasks.c **** /* If any of the following are set then task stacks are filled with a known
 101:../Dave/Generated/FREERTOS/tasks.c **** value so the high water mark can be determined.  If none of the following are
 102:../Dave/Generated/FREERTOS/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
 103:../Dave/Generated/FREERTOS/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
 104:../Dave/Generated/FREERTOS/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
 105:../Dave/Generated/FREERTOS/tasks.c **** #else
 106:../Dave/Generated/FREERTOS/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
 107:../Dave/Generated/FREERTOS/tasks.c **** #endif
 108:../Dave/Generated/FREERTOS/tasks.c **** 
 109:../Dave/Generated/FREERTOS/tasks.c **** /*
 110:../Dave/Generated/FREERTOS/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 111:../Dave/Generated/FREERTOS/tasks.c ****  */
 112:../Dave/Generated/FREERTOS/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
 113:../Dave/Generated/FREERTOS/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 114:../Dave/Generated/FREERTOS/tasks.c **** #define tskREADY_CHAR		( 'R' )
 115:../Dave/Generated/FREERTOS/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 116:../Dave/Generated/FREERTOS/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 117:../Dave/Generated/FREERTOS/tasks.c **** 
 118:../Dave/Generated/FREERTOS/tasks.c **** /*
 119:../Dave/Generated/FREERTOS/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 120:../Dave/Generated/FREERTOS/tasks.c ****  * global, rather than file scope.
 121:../Dave/Generated/FREERTOS/tasks.c ****  */
 122:../Dave/Generated/FREERTOS/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 123:../Dave/Generated/FREERTOS/tasks.c **** 	#define static
 124:../Dave/Generated/FREERTOS/tasks.c **** #endif
 125:../Dave/Generated/FREERTOS/tasks.c **** 
 126:../Dave/Generated/FREERTOS/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 127:../Dave/Generated/FREERTOS/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 128:../Dave/Generated/FREERTOS/tasks.c **** #ifndef configIDLE_TASK_NAME
 129:../Dave/Generated/FREERTOS/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 130:../Dave/Generated/FREERTOS/tasks.c **** #endif
 131:../Dave/Generated/FREERTOS/tasks.c **** 
 132:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 133:../Dave/Generated/FREERTOS/tasks.c **** 
 134:../Dave/Generated/FREERTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 135:../Dave/Generated/FREERTOS/tasks.c **** 	performed in a generic way that is not optimised to any particular
 136:../Dave/Generated/FREERTOS/tasks.c **** 	microcontroller architecture. */
 137:../Dave/Generated/FREERTOS/tasks.c **** 
 138:../Dave/Generated/FREERTOS/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 139:../Dave/Generated/FREERTOS/tasks.c **** 	state task. */
 140:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 141:../Dave/Generated/FREERTOS/tasks.c **** 	{																									\
 142:../Dave/Generated/FREERTOS/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 143:../Dave/Generated/FREERTOS/tasks.c **** 		{																								\
 144:../Dave/Generated/FREERTOS/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 145:../Dave/Generated/FREERTOS/tasks.c **** 		}																								\
 146:../Dave/Generated/FREERTOS/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 147:../Dave/Generated/FREERTOS/tasks.c **** 
 148:../Dave/Generated/FREERTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 149:../Dave/Generated/FREERTOS/tasks.c **** 
 150:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 151:../Dave/Generated/FREERTOS/tasks.c **** 	{																									\
 152:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 153:../Dave/Generated/FREERTOS/tasks.c **** 																										\
 154:../Dave/Generated/FREERTOS/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 155:../Dave/Generated/FREERTOS/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 156:../Dave/Generated/FREERTOS/tasks.c **** 		{																								\
 157:../Dave/Generated/FREERTOS/tasks.c **** 			configASSERT( uxTopPriority );																\
 158:../Dave/Generated/FREERTOS/tasks.c **** 			--uxTopPriority;																			\
 159:../Dave/Generated/FREERTOS/tasks.c **** 		}																								\
 160:../Dave/Generated/FREERTOS/tasks.c **** 																										\
 161:../Dave/Generated/FREERTOS/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 162:../Dave/Generated/FREERTOS/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 163:../Dave/Generated/FREERTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 164:../Dave/Generated/FREERTOS/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 165:../Dave/Generated/FREERTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 166:../Dave/Generated/FREERTOS/tasks.c **** 
 167:../Dave/Generated/FREERTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 168:../Dave/Generated/FREERTOS/tasks.c **** 
 169:../Dave/Generated/FREERTOS/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 170:../Dave/Generated/FREERTOS/tasks.c **** 	they are only required when a port optimised method of task selection is
 171:../Dave/Generated/FREERTOS/tasks.c **** 	being used. */
 172:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 173:../Dave/Generated/FREERTOS/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 174:../Dave/Generated/FREERTOS/tasks.c **** 
 175:../Dave/Generated/FREERTOS/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 176:../Dave/Generated/FREERTOS/tasks.c **** 
 177:../Dave/Generated/FREERTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 178:../Dave/Generated/FREERTOS/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 179:../Dave/Generated/FREERTOS/tasks.c **** 	architecture being used. */
 180:../Dave/Generated/FREERTOS/tasks.c **** 
 181:../Dave/Generated/FREERTOS/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 182:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 183:../Dave/Generated/FREERTOS/tasks.c **** 
 184:../Dave/Generated/FREERTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 185:../Dave/Generated/FREERTOS/tasks.c **** 
 186:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 187:../Dave/Generated/FREERTOS/tasks.c **** 	{																								\
 188:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 189:../Dave/Generated/FREERTOS/tasks.c **** 																									\
 190:../Dave/Generated/FREERTOS/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 191:../Dave/Generated/FREERTOS/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 192:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 193:../Dave/Generated/FREERTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 194:../Dave/Generated/FREERTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 195:../Dave/Generated/FREERTOS/tasks.c **** 
 196:../Dave/Generated/FREERTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 197:../Dave/Generated/FREERTOS/tasks.c **** 
 198:../Dave/Generated/FREERTOS/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 199:../Dave/Generated/FREERTOS/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 200:../Dave/Generated/FREERTOS/tasks.c **** 	or suspended list then it won't be in a ready list. */
 201:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 202:../Dave/Generated/FREERTOS/tasks.c **** 	{																									\
 203:../Dave/Generated/FREERTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 204:../Dave/Generated/FREERTOS/tasks.c **** 		{																								\
 205:../Dave/Generated/FREERTOS/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 206:../Dave/Generated/FREERTOS/tasks.c **** 		}																								\
 207:../Dave/Generated/FREERTOS/tasks.c **** 	}
 208:../Dave/Generated/FREERTOS/tasks.c **** 
 209:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 210:../Dave/Generated/FREERTOS/tasks.c **** 
 211:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 212:../Dave/Generated/FREERTOS/tasks.c **** 
 213:../Dave/Generated/FREERTOS/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 214:../Dave/Generated/FREERTOS/tasks.c **** count overflows. */
 215:../Dave/Generated/FREERTOS/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 216:../Dave/Generated/FREERTOS/tasks.c **** {																									\
 217:../Dave/Generated/FREERTOS/tasks.c **** 	List_t *pxTemp;																					\
 218:../Dave/Generated/FREERTOS/tasks.c **** 																									\
 219:../Dave/Generated/FREERTOS/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 220:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 221:../Dave/Generated/FREERTOS/tasks.c **** 																									\
 222:../Dave/Generated/FREERTOS/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 223:../Dave/Generated/FREERTOS/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 224:../Dave/Generated/FREERTOS/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 225:../Dave/Generated/FREERTOS/tasks.c **** 	xNumOfOverflows++;																				\
 226:../Dave/Generated/FREERTOS/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 227:../Dave/Generated/FREERTOS/tasks.c **** }
 228:../Dave/Generated/FREERTOS/tasks.c **** 
 229:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 230:../Dave/Generated/FREERTOS/tasks.c **** 
 231:../Dave/Generated/FREERTOS/tasks.c **** /*
 232:../Dave/Generated/FREERTOS/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 233:../Dave/Generated/FREERTOS/tasks.c ****  * the task.  It is inserted at the end of the list.
 234:../Dave/Generated/FREERTOS/tasks.c ****  */
 235:../Dave/Generated/FREERTOS/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 236:../Dave/Generated/FREERTOS/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 237:../Dave/Generated/FREERTOS/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 238:../Dave/Generated/FREERTOS/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 239:../Dave/Generated/FREERTOS/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 240:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 241:../Dave/Generated/FREERTOS/tasks.c **** 
 242:../Dave/Generated/FREERTOS/tasks.c **** /*
 243:../Dave/Generated/FREERTOS/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 244:../Dave/Generated/FREERTOS/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 245:../Dave/Generated/FREERTOS/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 246:../Dave/Generated/FREERTOS/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 247:../Dave/Generated/FREERTOS/tasks.c ****  */
 248:../Dave/Generated/FREERTOS/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 249:../Dave/Generated/FREERTOS/tasks.c **** 
 250:../Dave/Generated/FREERTOS/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 251:../Dave/Generated/FREERTOS/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 252:../Dave/Generated/FREERTOS/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 253:../Dave/Generated/FREERTOS/tasks.c **** is important its value is not updated due to a task priority change while it is
 254:../Dave/Generated/FREERTOS/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 255:../Dave/Generated/FREERTOS/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 256:../Dave/Generated/FREERTOS/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 257:../Dave/Generated/FREERTOS/tasks.c **** to its original value when it is released. */
 258:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 259:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 260:../Dave/Generated/FREERTOS/tasks.c **** #else
 261:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 262:../Dave/Generated/FREERTOS/tasks.c **** #endif
 263:../Dave/Generated/FREERTOS/tasks.c **** 
 264:../Dave/Generated/FREERTOS/tasks.c **** /*
 265:../Dave/Generated/FREERTOS/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 266:../Dave/Generated/FREERTOS/tasks.c ****  * and stores task state information, including a pointer to the task's context
 267:../Dave/Generated/FREERTOS/tasks.c ****  * (the task's run time environment, including register values)
 268:../Dave/Generated/FREERTOS/tasks.c ****  */
 269:../Dave/Generated/FREERTOS/tasks.c **** typedef struct tskTaskControlBlock
 270:../Dave/Generated/FREERTOS/tasks.c **** {
 271:../Dave/Generated/FREERTOS/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 272:../Dave/Generated/FREERTOS/tasks.c **** 
 273:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 274:../Dave/Generated/FREERTOS/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 275:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 276:../Dave/Generated/FREERTOS/tasks.c **** 
 277:../Dave/Generated/FREERTOS/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 278:../Dave/Generated/FREERTOS/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 279:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 280:../Dave/Generated/FREERTOS/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 281:../Dave/Generated/FREERTOS/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 282:../Dave/Generated/FREERTOS/tasks.c **** 
 283:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 284:../Dave/Generated/FREERTOS/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 285:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 286:../Dave/Generated/FREERTOS/tasks.c **** 
 287:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 288:../Dave/Generated/FREERTOS/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 289:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 290:../Dave/Generated/FREERTOS/tasks.c **** 
 291:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 292:../Dave/Generated/FREERTOS/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 293:../Dave/Generated/FREERTOS/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 294:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 295:../Dave/Generated/FREERTOS/tasks.c **** 
 296:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 297:../Dave/Generated/FREERTOS/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 298:../Dave/Generated/FREERTOS/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 299:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 300:../Dave/Generated/FREERTOS/tasks.c **** 
 301:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 302:../Dave/Generated/FREERTOS/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 303:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 304:../Dave/Generated/FREERTOS/tasks.c **** 
 305:../Dave/Generated/FREERTOS/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 306:../Dave/Generated/FREERTOS/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 307:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 308:../Dave/Generated/FREERTOS/tasks.c **** 
 309:../Dave/Generated/FREERTOS/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 310:../Dave/Generated/FREERTOS/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 311:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 312:../Dave/Generated/FREERTOS/tasks.c **** 
 313:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 314:../Dave/Generated/FREERTOS/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 315:../Dave/Generated/FREERTOS/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 316:../Dave/Generated/FREERTOS/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 317:../Dave/Generated/FREERTOS/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 318:../Dave/Generated/FREERTOS/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 319:../Dave/Generated/FREERTOS/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 320:../Dave/Generated/FREERTOS/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 321:../Dave/Generated/FREERTOS/tasks.c **** 		struct	_reent xNewLib_reent;
 322:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 323:../Dave/Generated/FREERTOS/tasks.c **** 
 324:../Dave/Generated/FREERTOS/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 325:../Dave/Generated/FREERTOS/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 326:../Dave/Generated/FREERTOS/tasks.c **** 		volatile uint8_t ucNotifyState;
 327:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 328:../Dave/Generated/FREERTOS/tasks.c **** 
 329:../Dave/Generated/FREERTOS/tasks.c **** 	/* See the comments above the definition of
 330:../Dave/Generated/FREERTOS/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 331:../Dave/Generated/FREERTOS/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for
 332:../Dave/Generated/FREERTOS/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 333:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 334:../Dave/Generated/FREERTOS/tasks.c **** 
 335:../Dave/Generated/FREERTOS/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 336:../Dave/Generated/FREERTOS/tasks.c **** 		uint8_t ucDelayAborted;
 337:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 338:../Dave/Generated/FREERTOS/tasks.c **** 
 339:../Dave/Generated/FREERTOS/tasks.c **** } tskTCB;
 340:../Dave/Generated/FREERTOS/tasks.c **** 
 341:../Dave/Generated/FREERTOS/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 342:../Dave/Generated/FREERTOS/tasks.c **** below to enable the use of older kernel aware debuggers. */
 343:../Dave/Generated/FREERTOS/tasks.c **** typedef tskTCB TCB_t;
 344:../Dave/Generated/FREERTOS/tasks.c **** 
 345:../Dave/Generated/FREERTOS/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 346:../Dave/Generated/FREERTOS/tasks.c **** which static variables must be declared volatile. */
 347:../Dave/Generated/FREERTOS/tasks.c **** 
 348:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 349:../Dave/Generated/FREERTOS/tasks.c **** 
 350:../Dave/Generated/FREERTOS/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 351:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 352:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 353:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 354:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 355:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 356:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 357:../Dave/Generated/FREERTOS/tasks.c **** 
 358:../Dave/Generated/FREERTOS/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 359:../Dave/Generated/FREERTOS/tasks.c **** 
 360:../Dave/Generated/FREERTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 361:../Dave/Generated/FREERTOS/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 362:../Dave/Generated/FREERTOS/tasks.c **** 
 363:../Dave/Generated/FREERTOS/tasks.c **** #endif
 364:../Dave/Generated/FREERTOS/tasks.c **** 
 365:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 366:../Dave/Generated/FREERTOS/tasks.c **** 
 367:../Dave/Generated/FREERTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 368:../Dave/Generated/FREERTOS/tasks.c **** 
 369:../Dave/Generated/FREERTOS/tasks.c **** #endif
 370:../Dave/Generated/FREERTOS/tasks.c **** 
 371:../Dave/Generated/FREERTOS/tasks.c **** /* Other file private variables. --------------------------------*/
 372:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 373:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 374:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 375:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 376:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 377:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 378:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 379:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 380:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 381:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 382:../Dave/Generated/FREERTOS/tasks.c **** 
 383:../Dave/Generated/FREERTOS/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 384:../Dave/Generated/FREERTOS/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 385:../Dave/Generated/FREERTOS/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 386:../Dave/Generated/FREERTOS/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 387:../Dave/Generated/FREERTOS/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 388:../Dave/Generated/FREERTOS/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 389:../Dave/Generated/FREERTOS/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 390:../Dave/Generated/FREERTOS/tasks.c **** accessed from a critical section. */
 391:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 392:../Dave/Generated/FREERTOS/tasks.c **** 
 393:../Dave/Generated/FREERTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 394:../Dave/Generated/FREERTOS/tasks.c **** 
 395:../Dave/Generated/FREERTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:../Dave/Generated/FREERTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:../Dave/Generated/FREERTOS/tasks.c **** 
 398:../Dave/Generated/FREERTOS/tasks.c **** #endif
 399:../Dave/Generated/FREERTOS/tasks.c **** 
 400:../Dave/Generated/FREERTOS/tasks.c **** /*lint -restore */
 401:../Dave/Generated/FREERTOS/tasks.c **** 
 402:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 403:../Dave/Generated/FREERTOS/tasks.c **** 
 404:../Dave/Generated/FREERTOS/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:../Dave/Generated/FREERTOS/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:../Dave/Generated/FREERTOS/tasks.c **** 
 407:../Dave/Generated/FREERTOS/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:../Dave/Generated/FREERTOS/tasks.c **** 
 409:../Dave/Generated/FREERTOS/tasks.c **** #endif
 410:../Dave/Generated/FREERTOS/tasks.c **** 
 411:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:../Dave/Generated/FREERTOS/tasks.c **** 
 413:../Dave/Generated/FREERTOS/tasks.c **** 	extern void vApplicationTickHook( void );
 414:../Dave/Generated/FREERTOS/tasks.c **** 
 415:../Dave/Generated/FREERTOS/tasks.c **** #endif
 416:../Dave/Generated/FREERTOS/tasks.c **** 
 417:../Dave/Generated/FREERTOS/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:../Dave/Generated/FREERTOS/tasks.c **** 
 419:../Dave/Generated/FREERTOS/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:../Dave/Generated/FREERTOS/tasks.c **** 
 421:../Dave/Generated/FREERTOS/tasks.c **** #endif
 422:../Dave/Generated/FREERTOS/tasks.c **** 
 423:../Dave/Generated/FREERTOS/tasks.c **** /* File private functions. --------------------------------*/
 424:../Dave/Generated/FREERTOS/tasks.c **** 
 425:../Dave/Generated/FREERTOS/tasks.c **** /**
 426:../Dave/Generated/FREERTOS/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:../Dave/Generated/FREERTOS/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:../Dave/Generated/FREERTOS/tasks.c ****  * is in any other state.
 429:../Dave/Generated/FREERTOS/tasks.c ****  */
 430:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 431:../Dave/Generated/FREERTOS/tasks.c **** 
 432:../Dave/Generated/FREERTOS/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:../Dave/Generated/FREERTOS/tasks.c **** 
 434:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 435:../Dave/Generated/FREERTOS/tasks.c **** 
 436:../Dave/Generated/FREERTOS/tasks.c **** /*
 437:../Dave/Generated/FREERTOS/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:../Dave/Generated/FREERTOS/tasks.c ****  * automatically upon the creation of the first task.
 439:../Dave/Generated/FREERTOS/tasks.c ****  */
 440:../Dave/Generated/FREERTOS/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:../Dave/Generated/FREERTOS/tasks.c **** 
 442:../Dave/Generated/FREERTOS/tasks.c **** /*
 443:../Dave/Generated/FREERTOS/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:../Dave/Generated/FREERTOS/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:../Dave/Generated/FREERTOS/tasks.c ****  * creation of the first user task.
 446:../Dave/Generated/FREERTOS/tasks.c ****  *
 447:../Dave/Generated/FREERTOS/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:../Dave/Generated/FREERTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:../Dave/Generated/FREERTOS/tasks.c ****  *
 450:../Dave/Generated/FREERTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:../Dave/Generated/FREERTOS/tasks.c ****  *
 452:../Dave/Generated/FREERTOS/tasks.c ****  */
 453:../Dave/Generated/FREERTOS/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:../Dave/Generated/FREERTOS/tasks.c **** 
 455:../Dave/Generated/FREERTOS/tasks.c **** /*
 456:../Dave/Generated/FREERTOS/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:../Dave/Generated/FREERTOS/tasks.c ****  * including the stack pointed to by the TCB.
 458:../Dave/Generated/FREERTOS/tasks.c ****  *
 459:../Dave/Generated/FREERTOS/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:../Dave/Generated/FREERTOS/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:../Dave/Generated/FREERTOS/tasks.c ****  */
 462:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:../Dave/Generated/FREERTOS/tasks.c **** 
 464:../Dave/Generated/FREERTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:../Dave/Generated/FREERTOS/tasks.c **** 
 466:../Dave/Generated/FREERTOS/tasks.c **** #endif
 467:../Dave/Generated/FREERTOS/tasks.c **** 
 468:../Dave/Generated/FREERTOS/tasks.c **** /*
 469:../Dave/Generated/FREERTOS/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:../Dave/Generated/FREERTOS/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:../Dave/Generated/FREERTOS/tasks.c ****  * and its TCB deleted.
 472:../Dave/Generated/FREERTOS/tasks.c ****  */
 473:../Dave/Generated/FREERTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:../Dave/Generated/FREERTOS/tasks.c **** 
 475:../Dave/Generated/FREERTOS/tasks.c **** /*
 476:../Dave/Generated/FREERTOS/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:../Dave/Generated/FREERTOS/tasks.c ****  * either the current or the overflow delayed task list.
 478:../Dave/Generated/FREERTOS/tasks.c ****  */
 479:../Dave/Generated/FREERTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:../Dave/Generated/FREERTOS/tasks.c **** 
 481:../Dave/Generated/FREERTOS/tasks.c **** /*
 482:../Dave/Generated/FREERTOS/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:../Dave/Generated/FREERTOS/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:../Dave/Generated/FREERTOS/tasks.c ****  * a suspended list, etc.).
 485:../Dave/Generated/FREERTOS/tasks.c ****  *
 486:../Dave/Generated/FREERTOS/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 487:../Dave/Generated/FREERTOS/tasks.c ****  * NORMAL APPLICATION CODE.
 488:../Dave/Generated/FREERTOS/tasks.c ****  */
 489:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:../Dave/Generated/FREERTOS/tasks.c **** 
 491:../Dave/Generated/FREERTOS/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 492:../Dave/Generated/FREERTOS/tasks.c **** 
 493:../Dave/Generated/FREERTOS/tasks.c **** #endif
 494:../Dave/Generated/FREERTOS/tasks.c **** 
 495:../Dave/Generated/FREERTOS/tasks.c **** /*
 496:../Dave/Generated/FREERTOS/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:../Dave/Generated/FREERTOS/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:../Dave/Generated/FREERTOS/tasks.c ****  */
 499:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:../Dave/Generated/FREERTOS/tasks.c **** 
 501:../Dave/Generated/FREERTOS/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:../Dave/Generated/FREERTOS/tasks.c **** 
 503:../Dave/Generated/FREERTOS/tasks.c **** #endif
 504:../Dave/Generated/FREERTOS/tasks.c **** 
 505:../Dave/Generated/FREERTOS/tasks.c **** /*
 506:../Dave/Generated/FREERTOS/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:../Dave/Generated/FREERTOS/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:../Dave/Generated/FREERTOS/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:../Dave/Generated/FREERTOS/tasks.c ****  */
 510:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 511:../Dave/Generated/FREERTOS/tasks.c **** 
 512:../Dave/Generated/FREERTOS/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 513:../Dave/Generated/FREERTOS/tasks.c **** 
 514:../Dave/Generated/FREERTOS/tasks.c **** #endif
 515:../Dave/Generated/FREERTOS/tasks.c **** 
 516:../Dave/Generated/FREERTOS/tasks.c **** /*
 517:../Dave/Generated/FREERTOS/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:../Dave/Generated/FREERTOS/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:../Dave/Generated/FREERTOS/tasks.c ****  *
 520:../Dave/Generated/FREERTOS/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:../Dave/Generated/FREERTOS/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:../Dave/Generated/FREERTOS/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:../Dave/Generated/FREERTOS/tasks.c ****  * set to a value other than 1.
 524:../Dave/Generated/FREERTOS/tasks.c ****  */
 525:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:../Dave/Generated/FREERTOS/tasks.c **** 
 527:../Dave/Generated/FREERTOS/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:../Dave/Generated/FREERTOS/tasks.c **** 
 529:../Dave/Generated/FREERTOS/tasks.c **** #endif
 530:../Dave/Generated/FREERTOS/tasks.c **** 
 531:../Dave/Generated/FREERTOS/tasks.c **** /*
 532:../Dave/Generated/FREERTOS/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:../Dave/Generated/FREERTOS/tasks.c ****  * will exit the Blocked state.
 534:../Dave/Generated/FREERTOS/tasks.c ****  */
 535:../Dave/Generated/FREERTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:../Dave/Generated/FREERTOS/tasks.c **** 
 537:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:../Dave/Generated/FREERTOS/tasks.c **** 
 539:../Dave/Generated/FREERTOS/tasks.c **** 	/*
 540:../Dave/Generated/FREERTOS/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:../Dave/Generated/FREERTOS/tasks.c **** 	 * human readable tables of task information.
 542:../Dave/Generated/FREERTOS/tasks.c **** 	 */
 543:../Dave/Generated/FREERTOS/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 544:../Dave/Generated/FREERTOS/tasks.c **** 
 545:../Dave/Generated/FREERTOS/tasks.c **** #endif
 546:../Dave/Generated/FREERTOS/tasks.c **** 
 547:../Dave/Generated/FREERTOS/tasks.c **** /*
 548:../Dave/Generated/FREERTOS/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 549:../Dave/Generated/FREERTOS/tasks.c ****  * dynamically to fill in the structure's members.
 550:../Dave/Generated/FREERTOS/tasks.c ****  */
 551:../Dave/Generated/FREERTOS/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:../Dave/Generated/FREERTOS/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:../Dave/Generated/FREERTOS/tasks.c **** 									const uint32_t ulStackDepth,
 554:../Dave/Generated/FREERTOS/tasks.c **** 									void * const pvParameters,
 555:../Dave/Generated/FREERTOS/tasks.c **** 									UBaseType_t uxPriority,
 556:../Dave/Generated/FREERTOS/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:../Dave/Generated/FREERTOS/tasks.c **** 									TCB_t *pxNewTCB,
 558:../Dave/Generated/FREERTOS/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:../Dave/Generated/FREERTOS/tasks.c **** 
 560:../Dave/Generated/FREERTOS/tasks.c **** /*
 561:../Dave/Generated/FREERTOS/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:../Dave/Generated/FREERTOS/tasks.c ****  * under the control of the scheduler.
 563:../Dave/Generated/FREERTOS/tasks.c ****  */
 564:../Dave/Generated/FREERTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:../Dave/Generated/FREERTOS/tasks.c **** 
 566:../Dave/Generated/FREERTOS/tasks.c **** /*
 567:../Dave/Generated/FREERTOS/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:../Dave/Generated/FREERTOS/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:../Dave/Generated/FREERTOS/tasks.c ****  * called by the function.
 570:../Dave/Generated/FREERTOS/tasks.c ****  */
 571:../Dave/Generated/FREERTOS/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:../Dave/Generated/FREERTOS/tasks.c **** 
 573:../Dave/Generated/FREERTOS/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:../Dave/Generated/FREERTOS/tasks.c **** 
 575:../Dave/Generated/FREERTOS/tasks.c **** #endif
 576:../Dave/Generated/FREERTOS/tasks.c **** 
 577:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 578:../Dave/Generated/FREERTOS/tasks.c **** 
 579:../Dave/Generated/FREERTOS/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:../Dave/Generated/FREERTOS/tasks.c **** 
 581:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:../Dave/Generated/FREERTOS/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:../Dave/Generated/FREERTOS/tasks.c **** 									const uint32_t ulStackDepth,
 584:../Dave/Generated/FREERTOS/tasks.c **** 									void * const pvParameters,
 585:../Dave/Generated/FREERTOS/tasks.c **** 									UBaseType_t uxPriority,
 586:../Dave/Generated/FREERTOS/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:../Dave/Generated/FREERTOS/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:../Dave/Generated/FREERTOS/tasks.c **** 	{
 589:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxNewTCB;
 590:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHandle_t xReturn;
 591:../Dave/Generated/FREERTOS/tasks.c **** 
 592:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 593:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 594:../Dave/Generated/FREERTOS/tasks.c **** 
 595:../Dave/Generated/FREERTOS/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:../Dave/Generated/FREERTOS/tasks.c **** 		{
 597:../Dave/Generated/FREERTOS/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:../Dave/Generated/FREERTOS/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:../Dave/Generated/FREERTOS/tasks.c **** 			structure. */
 600:../Dave/Generated/FREERTOS/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 601:../Dave/Generated/FREERTOS/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 602:../Dave/Generated/FREERTOS/tasks.c **** 		}
 603:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configASSERT_DEFINED */
 604:../Dave/Generated/FREERTOS/tasks.c **** 
 605:../Dave/Generated/FREERTOS/tasks.c **** 
 606:../Dave/Generated/FREERTOS/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 607:../Dave/Generated/FREERTOS/tasks.c **** 		{
 608:../Dave/Generated/FREERTOS/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 609:../Dave/Generated/FREERTOS/tasks.c **** 			function - use them. */
 610:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 611:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 612:../Dave/Generated/FREERTOS/tasks.c **** 
 613:../Dave/Generated/FREERTOS/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 614:../Dave/Generated/FREERTOS/tasks.c **** 			{
 615:../Dave/Generated/FREERTOS/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 616:../Dave/Generated/FREERTOS/tasks.c **** 				task was created statically in case the task is later deleted. */
 617:../Dave/Generated/FREERTOS/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 618:../Dave/Generated/FREERTOS/tasks.c **** 			}
 619:../Dave/Generated/FREERTOS/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 620:../Dave/Generated/FREERTOS/tasks.c **** 
 621:../Dave/Generated/FREERTOS/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 622:../Dave/Generated/FREERTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 623:../Dave/Generated/FREERTOS/tasks.c **** 		}
 624:../Dave/Generated/FREERTOS/tasks.c **** 		else
 625:../Dave/Generated/FREERTOS/tasks.c **** 		{
 626:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = NULL;
 627:../Dave/Generated/FREERTOS/tasks.c **** 		}
 628:../Dave/Generated/FREERTOS/tasks.c **** 
 629:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 630:../Dave/Generated/FREERTOS/tasks.c **** 	}
 631:../Dave/Generated/FREERTOS/tasks.c **** 
 632:../Dave/Generated/FREERTOS/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 633:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 634:../Dave/Generated/FREERTOS/tasks.c **** 
 635:../Dave/Generated/FREERTOS/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 636:../Dave/Generated/FREERTOS/tasks.c **** 
 637:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 638:../Dave/Generated/FREERTOS/tasks.c **** 	{
 639:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxNewTCB;
 640:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 641:../Dave/Generated/FREERTOS/tasks.c **** 
 642:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 643:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 644:../Dave/Generated/FREERTOS/tasks.c **** 
 645:../Dave/Generated/FREERTOS/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 646:../Dave/Generated/FREERTOS/tasks.c **** 		{
 647:../Dave/Generated/FREERTOS/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 648:../Dave/Generated/FREERTOS/tasks.c **** 			on the implementation of the port malloc function and whether or
 649:../Dave/Generated/FREERTOS/tasks.c **** 			not static allocation is being used. */
 650:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 651:../Dave/Generated/FREERTOS/tasks.c **** 
 652:../Dave/Generated/FREERTOS/tasks.c **** 			/* Store the stack location in the TCB. */
 653:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 654:../Dave/Generated/FREERTOS/tasks.c **** 
 655:../Dave/Generated/FREERTOS/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 656:../Dave/Generated/FREERTOS/tasks.c **** 			{
 657:../Dave/Generated/FREERTOS/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 658:../Dave/Generated/FREERTOS/tasks.c **** 				task was created statically in case the task is later deleted. */
 659:../Dave/Generated/FREERTOS/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 660:../Dave/Generated/FREERTOS/tasks.c **** 			}
 661:../Dave/Generated/FREERTOS/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 662:../Dave/Generated/FREERTOS/tasks.c **** 
 663:../Dave/Generated/FREERTOS/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 664:../Dave/Generated/FREERTOS/tasks.c **** 									pxTaskDefinition->pcName,
 665:../Dave/Generated/FREERTOS/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 666:../Dave/Generated/FREERTOS/tasks.c **** 									pxTaskDefinition->pvParameters,
 667:../Dave/Generated/FREERTOS/tasks.c **** 									pxTaskDefinition->uxPriority,
 668:../Dave/Generated/FREERTOS/tasks.c **** 									pxCreatedTask, pxNewTCB,
 669:../Dave/Generated/FREERTOS/tasks.c **** 									pxTaskDefinition->xRegions );
 670:../Dave/Generated/FREERTOS/tasks.c **** 
 671:../Dave/Generated/FREERTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 672:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pdPASS;
 673:../Dave/Generated/FREERTOS/tasks.c **** 		}
 674:../Dave/Generated/FREERTOS/tasks.c **** 
 675:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 676:../Dave/Generated/FREERTOS/tasks.c **** 	}
 677:../Dave/Generated/FREERTOS/tasks.c **** 
 678:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 679:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 680:../Dave/Generated/FREERTOS/tasks.c **** 
 681:../Dave/Generated/FREERTOS/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 682:../Dave/Generated/FREERTOS/tasks.c **** 
 683:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 684:../Dave/Generated/FREERTOS/tasks.c **** 	{
 685:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxNewTCB;
 686:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 687:../Dave/Generated/FREERTOS/tasks.c **** 
 688:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 689:../Dave/Generated/FREERTOS/tasks.c **** 
 690:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 691:../Dave/Generated/FREERTOS/tasks.c **** 		{
 692:../Dave/Generated/FREERTOS/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 693:../Dave/Generated/FREERTOS/tasks.c **** 			on the implementation of the port malloc function and whether or
 694:../Dave/Generated/FREERTOS/tasks.c **** 			not static allocation is being used. */
 695:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 696:../Dave/Generated/FREERTOS/tasks.c **** 
 697:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxNewTCB != NULL )
 698:../Dave/Generated/FREERTOS/tasks.c **** 			{
 699:../Dave/Generated/FREERTOS/tasks.c **** 				/* Store the stack location in the TCB. */
 700:../Dave/Generated/FREERTOS/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 701:../Dave/Generated/FREERTOS/tasks.c **** 
 702:../Dave/Generated/FREERTOS/tasks.c **** 				#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 703:../Dave/Generated/FREERTOS/tasks.c **** 				{
 704:../Dave/Generated/FREERTOS/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 705:../Dave/Generated/FREERTOS/tasks.c **** 					this task had a statically allocated stack in case it is
 706:../Dave/Generated/FREERTOS/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 707:../Dave/Generated/FREERTOS/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 708:../Dave/Generated/FREERTOS/tasks.c **** 				}
 709:../Dave/Generated/FREERTOS/tasks.c **** 				#endif
 710:../Dave/Generated/FREERTOS/tasks.c **** 
 711:../Dave/Generated/FREERTOS/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 712:../Dave/Generated/FREERTOS/tasks.c **** 										pxTaskDefinition->pcName,
 713:../Dave/Generated/FREERTOS/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 714:../Dave/Generated/FREERTOS/tasks.c **** 										pxTaskDefinition->pvParameters,
 715:../Dave/Generated/FREERTOS/tasks.c **** 										pxTaskDefinition->uxPriority,
 716:../Dave/Generated/FREERTOS/tasks.c **** 										pxCreatedTask, pxNewTCB,
 717:../Dave/Generated/FREERTOS/tasks.c **** 										pxTaskDefinition->xRegions );
 718:../Dave/Generated/FREERTOS/tasks.c **** 
 719:../Dave/Generated/FREERTOS/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 720:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdPASS;
 721:../Dave/Generated/FREERTOS/tasks.c **** 			}
 722:../Dave/Generated/FREERTOS/tasks.c **** 		}
 723:../Dave/Generated/FREERTOS/tasks.c **** 
 724:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 725:../Dave/Generated/FREERTOS/tasks.c **** 	}
 726:../Dave/Generated/FREERTOS/tasks.c **** 
 727:../Dave/Generated/FREERTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 728:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 729:../Dave/Generated/FREERTOS/tasks.c **** 
 730:../Dave/Generated/FREERTOS/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 731:../Dave/Generated/FREERTOS/tasks.c **** 
 732:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 733:../Dave/Generated/FREERTOS/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 734:../Dave/Generated/FREERTOS/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 735:../Dave/Generated/FREERTOS/tasks.c **** 							void * const pvParameters,
 736:../Dave/Generated/FREERTOS/tasks.c **** 							UBaseType_t uxPriority,
 737:../Dave/Generated/FREERTOS/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 738:../Dave/Generated/FREERTOS/tasks.c **** 	{
 155              	 .loc 1 738 0
 156              	 .cfi_startproc
 157              	 
 158              	 
 159 0000 80B5     	 push {r7,lr}
 160              	 .cfi_def_cfa_offset 8
 161              	 .cfi_offset 7,-8
 162              	 .cfi_offset 14,-4
 163 0002 8CB0     	 sub sp,sp,#48
 164              	 .cfi_def_cfa_offset 56
 165 0004 04AF     	 add r7,sp,#16
 166              	 .cfi_def_cfa 7,40
 167 0006 F860     	 str r0,[r7,#12]
 168 0008 B960     	 str r1,[r7,#8]
 169 000a 3B60     	 str r3,[r7]
 170 000c 1346     	 mov r3,r2
 171 000e FB80     	 strh r3,[r7,#6]
 172              	.LBB111:
 739:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxNewTCB;
 740:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn;
 741:../Dave/Generated/FREERTOS/tasks.c **** 
 742:../Dave/Generated/FREERTOS/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 743:../Dave/Generated/FREERTOS/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 744:../Dave/Generated/FREERTOS/tasks.c **** 		the TCB then the stack. */
 745:../Dave/Generated/FREERTOS/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 746:../Dave/Generated/FREERTOS/tasks.c **** 		{
 747:../Dave/Generated/FREERTOS/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 748:../Dave/Generated/FREERTOS/tasks.c **** 			the implementation of the port malloc function and whether or not static
 749:../Dave/Generated/FREERTOS/tasks.c **** 			allocation is being used. */
 750:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 751:../Dave/Generated/FREERTOS/tasks.c **** 
 752:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxNewTCB != NULL )
 753:../Dave/Generated/FREERTOS/tasks.c **** 			{
 754:../Dave/Generated/FREERTOS/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 755:../Dave/Generated/FREERTOS/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 756:../Dave/Generated/FREERTOS/tasks.c **** 				be deleted later if required. */
 757:../Dave/Generated/FREERTOS/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 758:../Dave/Generated/FREERTOS/tasks.c **** 
 759:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 760:../Dave/Generated/FREERTOS/tasks.c **** 				{
 761:../Dave/Generated/FREERTOS/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 762:../Dave/Generated/FREERTOS/tasks.c **** 					vPortFree( pxNewTCB );
 763:../Dave/Generated/FREERTOS/tasks.c **** 					pxNewTCB = NULL;
 764:../Dave/Generated/FREERTOS/tasks.c **** 				}
 765:../Dave/Generated/FREERTOS/tasks.c **** 			}
 766:../Dave/Generated/FREERTOS/tasks.c **** 		}
 767:../Dave/Generated/FREERTOS/tasks.c **** 		#else /* portSTACK_GROWTH */
 768:../Dave/Generated/FREERTOS/tasks.c **** 		{
 769:../Dave/Generated/FREERTOS/tasks.c **** 		StackType_t *pxStack;
 770:../Dave/Generated/FREERTOS/tasks.c **** 
 771:../Dave/Generated/FREERTOS/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 772:../Dave/Generated/FREERTOS/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 173              	 .loc 1 772 0
 174 0010 FB88     	 ldrh r3,[r7,#6]
 175 0012 9B00     	 lsls r3,r3,#2
 176 0014 1846     	 mov r0,r3
 177 0016 FFF7FEFF 	 bl pvPortMalloc
 178 001a 7861     	 str r0,[r7,#20]
 773:../Dave/Generated/FREERTOS/tasks.c **** 
 774:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxStack != NULL )
 179              	 .loc 1 774 0
 180 001c 7B69     	 ldr r3,[r7,#20]
 181 001e 002B     	 cmp r3,#0
 182 0020 0ED0     	 beq .L2
 775:../Dave/Generated/FREERTOS/tasks.c **** 			{
 776:../Dave/Generated/FREERTOS/tasks.c **** 				/* Allocate space for the TCB. */
 777:../Dave/Generated/FREERTOS/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 183              	 .loc 1 777 0
 184 0022 7020     	 movs r0,#112
 185 0024 FFF7FEFF 	 bl pvPortMalloc
 186 0028 F861     	 str r0,[r7,#28]
 778:../Dave/Generated/FREERTOS/tasks.c **** 
 779:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxNewTCB != NULL )
 187              	 .loc 1 779 0
 188 002a FB69     	 ldr r3,[r7,#28]
 189 002c 002B     	 cmp r3,#0
 190 002e 03D0     	 beq .L3
 780:../Dave/Generated/FREERTOS/tasks.c **** 				{
 781:../Dave/Generated/FREERTOS/tasks.c **** 					/* Store the stack location in the TCB. */
 782:../Dave/Generated/FREERTOS/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 191              	 .loc 1 782 0
 192 0030 FB69     	 ldr r3,[r7,#28]
 193 0032 7A69     	 ldr r2,[r7,#20]
 194 0034 1A63     	 str r2,[r3,#48]
 195 0036 05E0     	 b .L5
 196              	.L3:
 783:../Dave/Generated/FREERTOS/tasks.c **** 				}
 784:../Dave/Generated/FREERTOS/tasks.c **** 				else
 785:../Dave/Generated/FREERTOS/tasks.c **** 				{
 786:../Dave/Generated/FREERTOS/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 787:../Dave/Generated/FREERTOS/tasks.c **** 					it again. */
 788:../Dave/Generated/FREERTOS/tasks.c **** 					vPortFree( pxStack );
 197              	 .loc 1 788 0
 198 0038 7869     	 ldr r0,[r7,#20]
 199 003a FFF7FEFF 	 bl vPortFree
 200 003e 01E0     	 b .L5
 201              	.L2:
 789:../Dave/Generated/FREERTOS/tasks.c **** 				}
 790:../Dave/Generated/FREERTOS/tasks.c **** 			}
 791:../Dave/Generated/FREERTOS/tasks.c **** 			else
 792:../Dave/Generated/FREERTOS/tasks.c **** 			{
 793:../Dave/Generated/FREERTOS/tasks.c **** 				pxNewTCB = NULL;
 202              	 .loc 1 793 0
 203 0040 0023     	 movs r3,#0
 204 0042 FB61     	 str r3,[r7,#28]
 205              	.L5:
 206              	.LBE111:
 794:../Dave/Generated/FREERTOS/tasks.c **** 			}
 795:../Dave/Generated/FREERTOS/tasks.c **** 		}
 796:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* portSTACK_GROWTH */
 797:../Dave/Generated/FREERTOS/tasks.c **** 
 798:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxNewTCB != NULL )
 207              	 .loc 1 798 0
 208 0044 FB69     	 ldr r3,[r7,#28]
 209 0046 002B     	 cmp r3,#0
 210 0048 13D0     	 beq .L6
 799:../Dave/Generated/FREERTOS/tasks.c **** 		{
 800:../Dave/Generated/FREERTOS/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 801:../Dave/Generated/FREERTOS/tasks.c **** 			{
 802:../Dave/Generated/FREERTOS/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 803:../Dave/Generated/FREERTOS/tasks.c **** 				task was created dynamically in case it is later deleted. */
 804:../Dave/Generated/FREERTOS/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 805:../Dave/Generated/FREERTOS/tasks.c **** 			}
 806:../Dave/Generated/FREERTOS/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 807:../Dave/Generated/FREERTOS/tasks.c **** 
 808:../Dave/Generated/FREERTOS/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 211              	 .loc 1 808 0
 212 004a FA88     	 ldrh r2,[r7,#6]
 213 004c BB6A     	 ldr r3,[r7,#40]
 214 004e 0093     	 str r3,[sp]
 215 0050 FB6A     	 ldr r3,[r7,#44]
 216 0052 0193     	 str r3,[sp,#4]
 217 0054 FB69     	 ldr r3,[r7,#28]
 218 0056 0293     	 str r3,[sp,#8]
 219 0058 0023     	 movs r3,#0
 220 005a 0393     	 str r3,[sp,#12]
 221 005c F868     	 ldr r0,[r7,#12]
 222 005e B968     	 ldr r1,[r7,#8]
 223 0060 3B68     	 ldr r3,[r7]
 224 0062 FFF7FEFF 	 bl prvInitialiseNewTask
 809:../Dave/Generated/FREERTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 225              	 .loc 1 809 0
 226 0066 F869     	 ldr r0,[r7,#28]
 227 0068 FFF7FEFF 	 bl prvAddNewTaskToReadyList
 810:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pdPASS;
 228              	 .loc 1 810 0
 229 006c 0123     	 movs r3,#1
 230 006e BB61     	 str r3,[r7,#24]
 231 0070 02E0     	 b .L7
 232              	.L6:
 811:../Dave/Generated/FREERTOS/tasks.c **** 		}
 812:../Dave/Generated/FREERTOS/tasks.c **** 		else
 813:../Dave/Generated/FREERTOS/tasks.c **** 		{
 814:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 233              	 .loc 1 814 0
 234 0072 4FF0FF33 	 mov r3,#-1
 235 0076 BB61     	 str r3,[r7,#24]
 236              	.L7:
 815:../Dave/Generated/FREERTOS/tasks.c **** 		}
 816:../Dave/Generated/FREERTOS/tasks.c **** 
 817:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 237              	 .loc 1 817 0
 238 0078 BB69     	 ldr r3,[r7,#24]
 818:../Dave/Generated/FREERTOS/tasks.c **** 	}
 239              	 .loc 1 818 0
 240 007a 1846     	 mov r0,r3
 241 007c 2037     	 adds r7,r7,#32
 242              	 .cfi_def_cfa_offset 8
 243 007e BD46     	 mov sp,r7
 244              	 .cfi_def_cfa_register 13
 245              	 
 246 0080 80BD     	 pop {r7,pc}
 247              	 .cfi_endproc
 248              	.LFE137:
 250 0082 00BF     	 .section .text.prvInitialiseNewTask,"ax",%progbits
 251              	 .align 2
 252              	 .thumb
 253              	 .thumb_func
 255              	prvInitialiseNewTask:
 256              	.LFB138:
 819:../Dave/Generated/FREERTOS/tasks.c **** 
 820:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 821:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 822:../Dave/Generated/FREERTOS/tasks.c **** 
 823:../Dave/Generated/FREERTOS/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 824:../Dave/Generated/FREERTOS/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 825:../Dave/Generated/FREERTOS/tasks.c **** 									const uint32_t ulStackDepth,
 826:../Dave/Generated/FREERTOS/tasks.c **** 									void * const pvParameters,
 827:../Dave/Generated/FREERTOS/tasks.c **** 									UBaseType_t uxPriority,
 828:../Dave/Generated/FREERTOS/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 829:../Dave/Generated/FREERTOS/tasks.c **** 									TCB_t *pxNewTCB,
 830:../Dave/Generated/FREERTOS/tasks.c **** 									const MemoryRegion_t * const xRegions )
 831:../Dave/Generated/FREERTOS/tasks.c **** {
 257              	 .loc 1 831 0
 258              	 .cfi_startproc
 259              	 
 260              	 
 261 0000 80B5     	 push {r7,lr}
 262              	 .cfi_def_cfa_offset 8
 263              	 .cfi_offset 7,-8
 264              	 .cfi_offset 14,-4
 265 0002 88B0     	 sub sp,sp,#32
 266              	 .cfi_def_cfa_offset 40
 267 0004 00AF     	 add r7,sp,#0
 268              	 .cfi_def_cfa_register 7
 269 0006 F860     	 str r0,[r7,#12]
 270 0008 B960     	 str r1,[r7,#8]
 271 000a 7A60     	 str r2,[r7,#4]
 272 000c 3B60     	 str r3,[r7]
 832:../Dave/Generated/FREERTOS/tasks.c **** StackType_t *pxTopOfStack;
 833:../Dave/Generated/FREERTOS/tasks.c **** UBaseType_t x;
 834:../Dave/Generated/FREERTOS/tasks.c **** 
 835:../Dave/Generated/FREERTOS/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 836:../Dave/Generated/FREERTOS/tasks.c **** 		/* Should the task be created in privileged mode? */
 837:../Dave/Generated/FREERTOS/tasks.c **** 		BaseType_t xRunPrivileged;
 838:../Dave/Generated/FREERTOS/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 839:../Dave/Generated/FREERTOS/tasks.c **** 		{
 840:../Dave/Generated/FREERTOS/tasks.c **** 			xRunPrivileged = pdTRUE;
 841:../Dave/Generated/FREERTOS/tasks.c **** 		}
 842:../Dave/Generated/FREERTOS/tasks.c **** 		else
 843:../Dave/Generated/FREERTOS/tasks.c **** 		{
 844:../Dave/Generated/FREERTOS/tasks.c **** 			xRunPrivileged = pdFALSE;
 845:../Dave/Generated/FREERTOS/tasks.c **** 		}
 846:../Dave/Generated/FREERTOS/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 847:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 848:../Dave/Generated/FREERTOS/tasks.c **** 
 849:../Dave/Generated/FREERTOS/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 850:../Dave/Generated/FREERTOS/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 851:../Dave/Generated/FREERTOS/tasks.c **** 	{
 852:../Dave/Generated/FREERTOS/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 853:../Dave/Generated/FREERTOS/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 273              	 .loc 1 853 0
 274 000e 3B6B     	 ldr r3,[r7,#48]
 275 0010 1A6B     	 ldr r2,[r3,#48]
 276 0012 7B68     	 ldr r3,[r7,#4]
 277 0014 9B00     	 lsls r3,r3,#2
 278 0016 1046     	 mov r0,r2
 279 0018 A521     	 movs r1,#165
 280 001a 1A46     	 mov r2,r3
 281 001c FFF7FEFF 	 bl memset
 854:../Dave/Generated/FREERTOS/tasks.c **** 	}
 855:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 856:../Dave/Generated/FREERTOS/tasks.c **** 
 857:../Dave/Generated/FREERTOS/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 858:../Dave/Generated/FREERTOS/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 859:../Dave/Generated/FREERTOS/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 860:../Dave/Generated/FREERTOS/tasks.c **** 	by the port. */
 861:../Dave/Generated/FREERTOS/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 862:../Dave/Generated/FREERTOS/tasks.c **** 	{
 863:../Dave/Generated/FREERTOS/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 282              	 .loc 1 863 0
 283 0020 3B6B     	 ldr r3,[r7,#48]
 284 0022 1A6B     	 ldr r2,[r3,#48]
 285 0024 7B68     	 ldr r3,[r7,#4]
 286 0026 03F18043 	 add r3,r3,#1073741824
 287 002a 013B     	 subs r3,r3,#1
 288 002c 9B00     	 lsls r3,r3,#2
 289 002e 1344     	 add r3,r3,r2
 290 0030 BB61     	 str r3,[r7,#24]
 864:../Dave/Generated/FREERTOS/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 291              	 .loc 1 864 0
 292 0032 BB69     	 ldr r3,[r7,#24]
 293 0034 23F00703 	 bic r3,r3,#7
 294 0038 BB61     	 str r3,[r7,#24]
 865:../Dave/Generated/FREERTOS/tasks.c **** 
 866:../Dave/Generated/FREERTOS/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 867:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 295              	 .loc 1 867 0
 296 003a BB69     	 ldr r3,[r7,#24]
 297 003c 03F00703 	 and r3,r3,#7
 298 0040 002B     	 cmp r3,#0
 299 0042 09D0     	 beq .L10
 300              	.LBB112:
 301              	.LBB113:
 302              	 .file 2 "../Dave/Generated/FREERTOS/portable/GCC/portmacro.h"
   1:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*
   2:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
   5:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * subject to the following conditions:
  11:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
  12:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * copies or substantial portions of the Software.
  14:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
  15:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
  22:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * http://www.FreeRTOS.org
  23:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * http://aws.amazon.com/freertos
  24:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
  25:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * 1 tab == 4 spaces!
  26:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  */
  27:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  28:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  29:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #ifndef PORTMACRO_H
  30:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define PORTMACRO_H
  31:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  32:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #ifdef __cplusplus
  33:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** extern "C" {
  34:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif
  35:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  36:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------
  37:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * Port specific definitions.
  38:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
  39:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * given hardware and compiler.
  41:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *
  42:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  * These settings should not be altered.
  43:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  *-----------------------------------------------------------
  44:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h ****  */
  45:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  46:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Type definitions. */
  47:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portCHAR		char
  48:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portFLOAT		float
  49:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portDOUBLE		double
  50:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portLONG		long
  51:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portSHORT		short
  52:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portBASE_TYPE	long
  54:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  55:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** typedef long BaseType_t;
  57:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** typedef unsigned long UBaseType_t;
  58:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  59:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	typedef uint16_t TickType_t;
  61:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #else
  63:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	typedef uint32_t TickType_t;
  64:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  66:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	not need to be guarded with a critical section. */
  68:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif
  70:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
  71:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  72:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Architecture specifics. */
  73:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
  77:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  78:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Scheduler utilities. */
  79:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portYIELD() 															\
  80:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** {																				\
  81:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 																				\
  84:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	__asm volatile( "isb" );													\
  88:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** }
  89:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  90:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
  95:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
  96:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Critical section management. */
  97:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** extern void vPortEnterCritical( void );
  98:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** extern void vPortExitCritical( void );
  99:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 106:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 107:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 108:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** (which build with all the ports) will build. */
 111:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 114:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 115:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Tickless idle/low power functionality. */
 116:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif
 120:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 121:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 122:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* Architecture specific optimisations. */
 123:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif
 126:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 127:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 129:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* Generic helper function. */
 130:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	{
 132:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	uint8_t ucReturn;
 133:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 134:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		return ucReturn;
 136:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	}
 137:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 138:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* Check the configuration. */
 139:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#endif
 142:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 143:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 147:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 149:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 151:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 153:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 154:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 155:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #ifdef configASSERT
 156:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif
 159:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 160:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /* portNOP() is not required by this port. */
 161:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portNOP()
 162:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 163:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #define portINLINE	__inline
 164:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 165:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #ifndef portFORCE_INLINE
 166:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** #endif
 168:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 169:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** {
 171:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** BaseType_t xReturn;
 173:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 174:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 177:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	{
 179:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		xReturn = pdFALSE;
 180:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	}
 181:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	else
 182:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	{
 183:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		xReturn = pdTRUE;
 184:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	}
 185:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 186:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	return xReturn;
 187:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** }
 188:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 189:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 190:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 191:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** {
 193:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** uint32_t ulNewBASEPRI;
 194:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	__asm volatile
 303              	 .loc 2 195 0 discriminator 1
 304              	
 305 0044 4FF0FC03 	 mov r3,#252
 306 0048 83F31188 	 msr basepri,r3
 307 004c BFF36F8F 	 isb 
 308 0050 BFF34F8F 	 dsb 
 309              	
 310              	
 311              	 .thumb
 312 0054 7B61     	 str r3,[r7,#20]
 313              	.L11:
 314              	.LBE113:
 315              	.LBE112:
 316              	 .loc 1 867 0 discriminator 1
 317 0056 FEE7     	 b .L11
 318              	.L10:
 868:../Dave/Generated/FREERTOS/tasks.c **** 
 869:../Dave/Generated/FREERTOS/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 870:../Dave/Generated/FREERTOS/tasks.c **** 		{
 871:../Dave/Generated/FREERTOS/tasks.c **** 			/* Also record the stack's high address, which may assist
 872:../Dave/Generated/FREERTOS/tasks.c **** 			debugging. */
 873:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 874:../Dave/Generated/FREERTOS/tasks.c **** 		}
 875:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 876:../Dave/Generated/FREERTOS/tasks.c **** 	}
 877:../Dave/Generated/FREERTOS/tasks.c **** 	#else /* portSTACK_GROWTH */
 878:../Dave/Generated/FREERTOS/tasks.c **** 	{
 879:../Dave/Generated/FREERTOS/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 880:../Dave/Generated/FREERTOS/tasks.c **** 
 881:../Dave/Generated/FREERTOS/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 882:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 883:../Dave/Generated/FREERTOS/tasks.c **** 
 884:../Dave/Generated/FREERTOS/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 885:../Dave/Generated/FREERTOS/tasks.c **** 		performed. */
 886:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 887:../Dave/Generated/FREERTOS/tasks.c **** 	}
 888:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* portSTACK_GROWTH */
 889:../Dave/Generated/FREERTOS/tasks.c **** 
 890:../Dave/Generated/FREERTOS/tasks.c **** 	/* Store the task name in the TCB. */
 891:../Dave/Generated/FREERTOS/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 319              	 .loc 1 891 0
 320 0058 0023     	 movs r3,#0
 321 005a FB61     	 str r3,[r7,#28]
 322 005c 13E0     	 b .L12
 323              	.L15:
 892:../Dave/Generated/FREERTOS/tasks.c **** 	{
 893:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 324              	 .loc 1 893 0
 325 005e BA68     	 ldr r2,[r7,#8]
 326 0060 FB69     	 ldr r3,[r7,#28]
 327 0062 1344     	 add r3,r3,r2
 328 0064 1978     	 ldrb r1,[r3]
 329 0066 3A6B     	 ldr r2,[r7,#48]
 330 0068 FB69     	 ldr r3,[r7,#28]
 331 006a 1344     	 add r3,r3,r2
 332 006c 3033     	 adds r3,r3,#48
 333 006e 0A46     	 mov r2,r1
 334 0070 1A71     	 strb r2,[r3,#4]
 894:../Dave/Generated/FREERTOS/tasks.c **** 
 895:../Dave/Generated/FREERTOS/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 896:../Dave/Generated/FREERTOS/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 897:../Dave/Generated/FREERTOS/tasks.c **** 		string is not accessible (extremely unlikely). */
 898:../Dave/Generated/FREERTOS/tasks.c **** 		if( pcName[ x ] == 0x00 )
 335              	 .loc 1 898 0
 336 0072 BA68     	 ldr r2,[r7,#8]
 337 0074 FB69     	 ldr r3,[r7,#28]
 338 0076 1344     	 add r3,r3,r2
 339 0078 1B78     	 ldrb r3,[r3]
 340 007a 002B     	 cmp r3,#0
 341 007c 00D1     	 bne .L13
 899:../Dave/Generated/FREERTOS/tasks.c **** 		{
 900:../Dave/Generated/FREERTOS/tasks.c **** 			break;
 342              	 .loc 1 900 0
 343 007e 05E0     	 b .L14
 344              	.L13:
 891:../Dave/Generated/FREERTOS/tasks.c **** 	{
 345              	 .loc 1 891 0 discriminator 2
 346 0080 FB69     	 ldr r3,[r7,#28]
 347 0082 0133     	 adds r3,r3,#1
 348 0084 FB61     	 str r3,[r7,#28]
 349              	.L12:
 891:../Dave/Generated/FREERTOS/tasks.c **** 	{
 350              	 .loc 1 891 0 is_stmt 0 discriminator 1
 351 0086 FB69     	 ldr r3,[r7,#28]
 352 0088 0F2B     	 cmp r3,#15
 353 008a E8D9     	 bls .L15
 354              	.L14:
 901:../Dave/Generated/FREERTOS/tasks.c **** 		}
 902:../Dave/Generated/FREERTOS/tasks.c **** 		else
 903:../Dave/Generated/FREERTOS/tasks.c **** 		{
 904:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 905:../Dave/Generated/FREERTOS/tasks.c **** 		}
 906:../Dave/Generated/FREERTOS/tasks.c **** 	}
 907:../Dave/Generated/FREERTOS/tasks.c **** 
 908:../Dave/Generated/FREERTOS/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 909:../Dave/Generated/FREERTOS/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 910:../Dave/Generated/FREERTOS/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 355              	 .loc 1 910 0 is_stmt 1
 356 008c 3B6B     	 ldr r3,[r7,#48]
 357 008e 0022     	 movs r2,#0
 358 0090 83F84320 	 strb r2,[r3,#67]
 911:../Dave/Generated/FREERTOS/tasks.c **** 
 912:../Dave/Generated/FREERTOS/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 913:../Dave/Generated/FREERTOS/tasks.c **** 	remove the privilege bit if one is present. */
 914:../Dave/Generated/FREERTOS/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 359              	 .loc 1 914 0
 360 0094 BB6A     	 ldr r3,[r7,#40]
 361 0096 042B     	 cmp r3,#4
 362 0098 01D9     	 bls .L16
 915:../Dave/Generated/FREERTOS/tasks.c **** 	{
 916:../Dave/Generated/FREERTOS/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 363              	 .loc 1 916 0
 364 009a 0423     	 movs r3,#4
 365 009c BB62     	 str r3,[r7,#40]
 366              	.L16:
 917:../Dave/Generated/FREERTOS/tasks.c **** 	}
 918:../Dave/Generated/FREERTOS/tasks.c **** 	else
 919:../Dave/Generated/FREERTOS/tasks.c **** 	{
 920:../Dave/Generated/FREERTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 921:../Dave/Generated/FREERTOS/tasks.c **** 	}
 922:../Dave/Generated/FREERTOS/tasks.c **** 
 923:../Dave/Generated/FREERTOS/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 367              	 .loc 1 923 0
 368 009e 3B6B     	 ldr r3,[r7,#48]
 369 00a0 BA6A     	 ldr r2,[r7,#40]
 370 00a2 DA62     	 str r2,[r3,#44]
 924:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 925:../Dave/Generated/FREERTOS/tasks.c **** 	{
 926:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 371              	 .loc 1 926 0
 372 00a4 3B6B     	 ldr r3,[r7,#48]
 373 00a6 BA6A     	 ldr r2,[r7,#40]
 374 00a8 DA64     	 str r2,[r3,#76]
 927:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 375              	 .loc 1 927 0
 376 00aa 3B6B     	 ldr r3,[r7,#48]
 377 00ac 0022     	 movs r2,#0
 378 00ae 1A65     	 str r2,[r3,#80]
 928:../Dave/Generated/FREERTOS/tasks.c **** 	}
 929:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* configUSE_MUTEXES */
 930:../Dave/Generated/FREERTOS/tasks.c **** 
 931:../Dave/Generated/FREERTOS/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 379              	 .loc 1 931 0
 380 00b0 3B6B     	 ldr r3,[r7,#48]
 381 00b2 0433     	 adds r3,r3,#4
 382 00b4 1846     	 mov r0,r3
 383 00b6 FFF7FEFF 	 bl vListInitialiseItem
 932:../Dave/Generated/FREERTOS/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 384              	 .loc 1 932 0
 385 00ba 3B6B     	 ldr r3,[r7,#48]
 386 00bc 1833     	 adds r3,r3,#24
 387 00be 1846     	 mov r0,r3
 388 00c0 FFF7FEFF 	 bl vListInitialiseItem
 933:../Dave/Generated/FREERTOS/tasks.c **** 
 934:../Dave/Generated/FREERTOS/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 935:../Dave/Generated/FREERTOS/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 936:../Dave/Generated/FREERTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 389              	 .loc 1 936 0
 390 00c4 3B6B     	 ldr r3,[r7,#48]
 391 00c6 3A6B     	 ldr r2,[r7,#48]
 392 00c8 1A61     	 str r2,[r3,#16]
 937:../Dave/Generated/FREERTOS/tasks.c **** 
 938:../Dave/Generated/FREERTOS/tasks.c **** 	/* Event lists are always in priority order. */
 939:../Dave/Generated/FREERTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 393              	 .loc 1 939 0
 394 00ca BB6A     	 ldr r3,[r7,#40]
 395 00cc C3F10502 	 rsb r2,r3,#5
 396 00d0 3B6B     	 ldr r3,[r7,#48]
 397 00d2 9A61     	 str r2,[r3,#24]
 940:../Dave/Generated/FREERTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 398              	 .loc 1 940 0
 399 00d4 3B6B     	 ldr r3,[r7,#48]
 400 00d6 3A6B     	 ldr r2,[r7,#48]
 401 00d8 5A62     	 str r2,[r3,#36]
 941:../Dave/Generated/FREERTOS/tasks.c **** 
 942:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 943:../Dave/Generated/FREERTOS/tasks.c **** 	{
 944:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 945:../Dave/Generated/FREERTOS/tasks.c **** 	}
 946:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 947:../Dave/Generated/FREERTOS/tasks.c **** 
 948:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 949:../Dave/Generated/FREERTOS/tasks.c **** 	{
 950:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 951:../Dave/Generated/FREERTOS/tasks.c **** 	}
 952:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 953:../Dave/Generated/FREERTOS/tasks.c **** 
 954:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 955:../Dave/Generated/FREERTOS/tasks.c **** 	{
 956:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 957:../Dave/Generated/FREERTOS/tasks.c **** 	}
 958:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 959:../Dave/Generated/FREERTOS/tasks.c **** 
 960:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 961:../Dave/Generated/FREERTOS/tasks.c **** 	{
 962:../Dave/Generated/FREERTOS/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 963:../Dave/Generated/FREERTOS/tasks.c **** 	}
 964:../Dave/Generated/FREERTOS/tasks.c **** 	#else
 965:../Dave/Generated/FREERTOS/tasks.c **** 	{
 966:../Dave/Generated/FREERTOS/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 967:../Dave/Generated/FREERTOS/tasks.c **** 		( void ) xRegions;
 968:../Dave/Generated/FREERTOS/tasks.c **** 	}
 969:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 970:../Dave/Generated/FREERTOS/tasks.c **** 
 971:../Dave/Generated/FREERTOS/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 972:../Dave/Generated/FREERTOS/tasks.c **** 	{
 973:../Dave/Generated/FREERTOS/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 402              	 .loc 1 973 0
 403 00da 0023     	 movs r3,#0
 404 00dc FB61     	 str r3,[r7,#28]
 405 00de 09E0     	 b .L17
 406              	.L18:
 974:../Dave/Generated/FREERTOS/tasks.c **** 		{
 975:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 407              	 .loc 1 975 0 discriminator 3
 408 00e0 3A6B     	 ldr r2,[r7,#48]
 409 00e2 FB69     	 ldr r3,[r7,#28]
 410 00e4 1433     	 adds r3,r3,#20
 411 00e6 9B00     	 lsls r3,r3,#2
 412 00e8 1344     	 add r3,r3,r2
 413 00ea 0022     	 movs r2,#0
 414 00ec 5A60     	 str r2,[r3,#4]
 973:../Dave/Generated/FREERTOS/tasks.c **** 		{
 415              	 .loc 1 973 0 discriminator 3
 416 00ee FB69     	 ldr r3,[r7,#28]
 417 00f0 0133     	 adds r3,r3,#1
 418 00f2 FB61     	 str r3,[r7,#28]
 419              	.L17:
 973:../Dave/Generated/FREERTOS/tasks.c **** 		{
 420              	 .loc 1 973 0 is_stmt 0 discriminator 1
 421 00f4 FB69     	 ldr r3,[r7,#28]
 422 00f6 042B     	 cmp r3,#4
 423 00f8 F2D9     	 bls .L18
 976:../Dave/Generated/FREERTOS/tasks.c **** 		}
 977:../Dave/Generated/FREERTOS/tasks.c **** 	}
 978:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 979:../Dave/Generated/FREERTOS/tasks.c **** 
 980:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 981:../Dave/Generated/FREERTOS/tasks.c **** 	{
 982:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 424              	 .loc 1 982 0 is_stmt 1
 425 00fa 3B6B     	 ldr r3,[r7,#48]
 426 00fc 0022     	 movs r2,#0
 427 00fe 9A66     	 str r2,[r3,#104]
 983:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 428              	 .loc 1 983 0
 429 0100 3B6B     	 ldr r3,[r7,#48]
 430 0102 0022     	 movs r2,#0
 431 0104 83F86C20 	 strb r2,[r3,#108]
 984:../Dave/Generated/FREERTOS/tasks.c **** 	}
 985:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 986:../Dave/Generated/FREERTOS/tasks.c **** 
 987:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 988:../Dave/Generated/FREERTOS/tasks.c **** 	{
 989:../Dave/Generated/FREERTOS/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 990:../Dave/Generated/FREERTOS/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 991:../Dave/Generated/FREERTOS/tasks.c **** 	}
 992:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 993:../Dave/Generated/FREERTOS/tasks.c **** 
 994:../Dave/Generated/FREERTOS/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 995:../Dave/Generated/FREERTOS/tasks.c **** 	{
 996:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 432              	 .loc 1 996 0
 433 0108 3B6B     	 ldr r3,[r7,#48]
 434 010a 0022     	 movs r2,#0
 435 010c 83F86D20 	 strb r2,[r3,#109]
 997:../Dave/Generated/FREERTOS/tasks.c **** 	}
 998:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 999:../Dave/Generated/FREERTOS/tasks.c **** 
1000:../Dave/Generated/FREERTOS/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1001:../Dave/Generated/FREERTOS/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1002:../Dave/Generated/FREERTOS/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1003:../Dave/Generated/FREERTOS/tasks.c **** 	the top of stack variable is updated. */
1004:../Dave/Generated/FREERTOS/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1005:../Dave/Generated/FREERTOS/tasks.c **** 	{
1006:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
1007:../Dave/Generated/FREERTOS/tasks.c **** 	}
1008:../Dave/Generated/FREERTOS/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1009:../Dave/Generated/FREERTOS/tasks.c **** 	{
1010:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 436              	 .loc 1 1010 0
 437 0110 B869     	 ldr r0,[r7,#24]
 438 0112 F968     	 ldr r1,[r7,#12]
 439 0114 3A68     	 ldr r2,[r7]
 440 0116 FFF7FEFF 	 bl pxPortInitialiseStack
 441 011a 0246     	 mov r2,r0
 442 011c 3B6B     	 ldr r3,[r7,#48]
 443 011e 1A60     	 str r2,[r3]
1011:../Dave/Generated/FREERTOS/tasks.c **** 	}
1012:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1013:../Dave/Generated/FREERTOS/tasks.c **** 
1014:../Dave/Generated/FREERTOS/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
 444              	 .loc 1 1014 0
 445 0120 FB6A     	 ldr r3,[r7,#44]
 446 0122 002B     	 cmp r3,#0
 447 0124 02D0     	 beq .L9
1015:../Dave/Generated/FREERTOS/tasks.c **** 	{
1016:../Dave/Generated/FREERTOS/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1017:../Dave/Generated/FREERTOS/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1018:../Dave/Generated/FREERTOS/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 448              	 .loc 1 1018 0
 449 0126 FB6A     	 ldr r3,[r7,#44]
 450 0128 3A6B     	 ldr r2,[r7,#48]
 451 012a 1A60     	 str r2,[r3]
 452              	.L9:
1019:../Dave/Generated/FREERTOS/tasks.c **** 	}
1020:../Dave/Generated/FREERTOS/tasks.c **** 	else
1021:../Dave/Generated/FREERTOS/tasks.c **** 	{
1022:../Dave/Generated/FREERTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1023:../Dave/Generated/FREERTOS/tasks.c **** 	}
1024:../Dave/Generated/FREERTOS/tasks.c **** }
 453              	 .loc 1 1024 0
 454 012c 2037     	 adds r7,r7,#32
 455              	 .cfi_def_cfa_offset 8
 456 012e BD46     	 mov sp,r7
 457              	 .cfi_def_cfa_register 13
 458              	 
 459 0130 80BD     	 pop {r7,pc}
 460              	 .cfi_endproc
 461              	.LFE138:
 463 0132 00BF     	 .section .text.prvAddNewTaskToReadyList,"ax",%progbits
 464              	 .align 2
 465              	 .thumb
 466              	 .thumb_func
 468              	prvAddNewTaskToReadyList:
 469              	.LFB139:
1025:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1026:../Dave/Generated/FREERTOS/tasks.c **** 
1027:../Dave/Generated/FREERTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1028:../Dave/Generated/FREERTOS/tasks.c **** {
 470              	 .loc 1 1028 0
 471              	 .cfi_startproc
 472              	 
 473              	 
 474 0000 80B5     	 push {r7,lr}
 475              	 .cfi_def_cfa_offset 8
 476              	 .cfi_offset 7,-8
 477              	 .cfi_offset 14,-4
 478 0002 82B0     	 sub sp,sp,#8
 479              	 .cfi_def_cfa_offset 16
 480 0004 00AF     	 add r7,sp,#0
 481              	 .cfi_def_cfa_register 7
 482 0006 7860     	 str r0,[r7,#4]
1029:../Dave/Generated/FREERTOS/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1030:../Dave/Generated/FREERTOS/tasks.c **** 	updated. */
1031:../Dave/Generated/FREERTOS/tasks.c **** 	taskENTER_CRITICAL();
 483              	 .loc 1 1031 0
 484 0008 FFF7FEFF 	 bl vPortEnterCritical
1032:../Dave/Generated/FREERTOS/tasks.c **** 	{
1033:../Dave/Generated/FREERTOS/tasks.c **** 		uxCurrentNumberOfTasks++;
 485              	 .loc 1 1033 0
 486 000c 2D4B     	 ldr r3,.L24
 487 000e 1B68     	 ldr r3,[r3]
 488 0010 0133     	 adds r3,r3,#1
 489 0012 2C4A     	 ldr r2,.L24
 490 0014 1360     	 str r3,[r2]
1034:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxCurrentTCB == NULL )
 491              	 .loc 1 1034 0
 492 0016 2C4B     	 ldr r3,.L24+4
 493 0018 1B68     	 ldr r3,[r3]
 494 001a 002B     	 cmp r3,#0
 495 001c 09D1     	 bne .L21
1035:../Dave/Generated/FREERTOS/tasks.c **** 		{
1036:../Dave/Generated/FREERTOS/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1037:../Dave/Generated/FREERTOS/tasks.c **** 			the suspended state - make this the current task. */
1038:../Dave/Generated/FREERTOS/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 496              	 .loc 1 1038 0
 497 001e 2A4A     	 ldr r2,.L24+4
 498 0020 7B68     	 ldr r3,[r7,#4]
 499 0022 1360     	 str r3,[r2]
1039:../Dave/Generated/FREERTOS/tasks.c **** 
1040:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 500              	 .loc 1 1040 0
 501 0024 274B     	 ldr r3,.L24
 502 0026 1B68     	 ldr r3,[r3]
 503 0028 012B     	 cmp r3,#1
 504 002a 10D1     	 bne .L22
1041:../Dave/Generated/FREERTOS/tasks.c **** 			{
1042:../Dave/Generated/FREERTOS/tasks.c **** 				/* This is the first task to be created so do the preliminary
1043:../Dave/Generated/FREERTOS/tasks.c **** 				initialisation required.  We will not recover if this call
1044:../Dave/Generated/FREERTOS/tasks.c **** 				fails, but we will report the failure. */
1045:../Dave/Generated/FREERTOS/tasks.c **** 				prvInitialiseTaskLists();
 505              	 .loc 1 1045 0
 506 002c FFF7FEFF 	 bl prvInitialiseTaskLists
 507 0030 0DE0     	 b .L22
 508              	.L21:
1046:../Dave/Generated/FREERTOS/tasks.c **** 			}
1047:../Dave/Generated/FREERTOS/tasks.c **** 			else
1048:../Dave/Generated/FREERTOS/tasks.c **** 			{
1049:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1050:../Dave/Generated/FREERTOS/tasks.c **** 			}
1051:../Dave/Generated/FREERTOS/tasks.c **** 		}
1052:../Dave/Generated/FREERTOS/tasks.c **** 		else
1053:../Dave/Generated/FREERTOS/tasks.c **** 		{
1054:../Dave/Generated/FREERTOS/tasks.c **** 			/* If the scheduler is not already running, make this task the
1055:../Dave/Generated/FREERTOS/tasks.c **** 			current task if it is the highest priority task to be created
1056:../Dave/Generated/FREERTOS/tasks.c **** 			so far. */
1057:../Dave/Generated/FREERTOS/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 509              	 .loc 1 1057 0
 510 0032 264B     	 ldr r3,.L24+8
 511 0034 1B68     	 ldr r3,[r3]
 512 0036 002B     	 cmp r3,#0
 513 0038 09D1     	 bne .L22
1058:../Dave/Generated/FREERTOS/tasks.c **** 			{
1059:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 514              	 .loc 1 1059 0
 515 003a 234B     	 ldr r3,.L24+4
 516 003c 1B68     	 ldr r3,[r3]
 517 003e DA6A     	 ldr r2,[r3,#44]
 518 0040 7B68     	 ldr r3,[r7,#4]
 519 0042 DB6A     	 ldr r3,[r3,#44]
 520 0044 9A42     	 cmp r2,r3
 521 0046 02D8     	 bhi .L22
1060:../Dave/Generated/FREERTOS/tasks.c **** 				{
1061:../Dave/Generated/FREERTOS/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 522              	 .loc 1 1061 0
 523 0048 1F4A     	 ldr r2,.L24+4
 524 004a 7B68     	 ldr r3,[r7,#4]
 525 004c 1360     	 str r3,[r2]
 526              	.L22:
1062:../Dave/Generated/FREERTOS/tasks.c **** 				}
1063:../Dave/Generated/FREERTOS/tasks.c **** 				else
1064:../Dave/Generated/FREERTOS/tasks.c **** 				{
1065:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1066:../Dave/Generated/FREERTOS/tasks.c **** 				}
1067:../Dave/Generated/FREERTOS/tasks.c **** 			}
1068:../Dave/Generated/FREERTOS/tasks.c **** 			else
1069:../Dave/Generated/FREERTOS/tasks.c **** 			{
1070:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1071:../Dave/Generated/FREERTOS/tasks.c **** 			}
1072:../Dave/Generated/FREERTOS/tasks.c **** 		}
1073:../Dave/Generated/FREERTOS/tasks.c **** 
1074:../Dave/Generated/FREERTOS/tasks.c **** 		uxTaskNumber++;
 527              	 .loc 1 1074 0
 528 004e 204B     	 ldr r3,.L24+12
 529 0050 1B68     	 ldr r3,[r3]
 530 0052 0133     	 adds r3,r3,#1
 531 0054 1E4A     	 ldr r2,.L24+12
 532 0056 1360     	 str r3,[r2]
1075:../Dave/Generated/FREERTOS/tasks.c **** 
1076:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1077:../Dave/Generated/FREERTOS/tasks.c **** 		{
1078:../Dave/Generated/FREERTOS/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1079:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
 533              	 .loc 1 1079 0
 534 0058 1D4B     	 ldr r3,.L24+12
 535 005a 1A68     	 ldr r2,[r3]
 536 005c 7B68     	 ldr r3,[r7,#4]
 537 005e 5A64     	 str r2,[r3,#68]
1080:../Dave/Generated/FREERTOS/tasks.c **** 		}
1081:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1082:../Dave/Generated/FREERTOS/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1083:../Dave/Generated/FREERTOS/tasks.c **** 
1084:../Dave/Generated/FREERTOS/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 538              	 .loc 1 1084 0
 539 0060 7B68     	 ldr r3,[r7,#4]
 540 0062 DB6A     	 ldr r3,[r3,#44]
 541 0064 1A46     	 mov r2,r3
 542 0066 0123     	 movs r3,#1
 543 0068 03FA02F2 	 lsl r2,r3,r2
 544 006c 194B     	 ldr r3,.L24+16
 545 006e 1B68     	 ldr r3,[r3]
 546 0070 1343     	 orrs r3,r3,r2
 547 0072 184A     	 ldr r2,.L24+16
 548 0074 1360     	 str r3,[r2]
 549 0076 7B68     	 ldr r3,[r7,#4]
 550 0078 DA6A     	 ldr r2,[r3,#44]
 551 007a 1346     	 mov r3,r2
 552 007c 9B00     	 lsls r3,r3,#2
 553 007e 1344     	 add r3,r3,r2
 554 0080 9B00     	 lsls r3,r3,#2
 555 0082 154A     	 ldr r2,.L24+20
 556 0084 1A44     	 add r2,r2,r3
 557 0086 7B68     	 ldr r3,[r7,#4]
 558 0088 0433     	 adds r3,r3,#4
 559 008a 1046     	 mov r0,r2
 560 008c 1946     	 mov r1,r3
 561 008e FFF7FEFF 	 bl vListInsertEnd
1085:../Dave/Generated/FREERTOS/tasks.c **** 
1086:../Dave/Generated/FREERTOS/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1087:../Dave/Generated/FREERTOS/tasks.c **** 	}
1088:../Dave/Generated/FREERTOS/tasks.c **** 	taskEXIT_CRITICAL();
 562              	 .loc 1 1088 0
 563 0092 FFF7FEFF 	 bl vPortExitCritical
1089:../Dave/Generated/FREERTOS/tasks.c **** 
1090:../Dave/Generated/FREERTOS/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 564              	 .loc 1 1090 0
 565 0096 0D4B     	 ldr r3,.L24+8
 566 0098 1B68     	 ldr r3,[r3]
 567 009a 002B     	 cmp r3,#0
 568 009c 0ED0     	 beq .L20
1091:../Dave/Generated/FREERTOS/tasks.c **** 	{
1092:../Dave/Generated/FREERTOS/tasks.c **** 		/* If the created task is of a higher priority than the current task
1093:../Dave/Generated/FREERTOS/tasks.c **** 		then it should run now. */
1094:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 569              	 .loc 1 1094 0
 570 009e 0A4B     	 ldr r3,.L24+4
 571 00a0 1B68     	 ldr r3,[r3]
 572 00a2 DA6A     	 ldr r2,[r3,#44]
 573 00a4 7B68     	 ldr r3,[r7,#4]
 574 00a6 DB6A     	 ldr r3,[r3,#44]
 575 00a8 9A42     	 cmp r2,r3
 576 00aa 07D2     	 bcs .L20
1095:../Dave/Generated/FREERTOS/tasks.c **** 		{
1096:../Dave/Generated/FREERTOS/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 577              	 .loc 1 1096 0
 578 00ac 0B4B     	 ldr r3,.L24+24
 579 00ae 4FF08052 	 mov r2,#268435456
 580 00b2 1A60     	 str r2,[r3]
 581              	
 582 00b4 BFF34F8F 	 dsb
 583              	
 584              	
 585 00b8 BFF36F8F 	 isb
 586              	
 587              	 .thumb
 588              	.L20:
1097:../Dave/Generated/FREERTOS/tasks.c **** 		}
1098:../Dave/Generated/FREERTOS/tasks.c **** 		else
1099:../Dave/Generated/FREERTOS/tasks.c **** 		{
1100:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1101:../Dave/Generated/FREERTOS/tasks.c **** 		}
1102:../Dave/Generated/FREERTOS/tasks.c **** 	}
1103:../Dave/Generated/FREERTOS/tasks.c **** 	else
1104:../Dave/Generated/FREERTOS/tasks.c **** 	{
1105:../Dave/Generated/FREERTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1106:../Dave/Generated/FREERTOS/tasks.c **** 	}
1107:../Dave/Generated/FREERTOS/tasks.c **** }
 589              	 .loc 1 1107 0
 590 00bc 0837     	 adds r7,r7,#8
 591              	 .cfi_def_cfa_offset 8
 592 00be BD46     	 mov sp,r7
 593              	 .cfi_def_cfa_register 13
 594              	 
 595 00c0 80BD     	 pop {r7,pc}
 596              	.L25:
 597 00c2 00BF     	 .align 2
 598              	.L24:
 599 00c4 00000000 	 .word uxCurrentNumberOfTasks
 600 00c8 00000000 	 .word pxCurrentTCB
 601 00cc 00000000 	 .word xSchedulerRunning
 602 00d0 00000000 	 .word uxTaskNumber
 603 00d4 00000000 	 .word uxTopReadyPriority
 604 00d8 00000000 	 .word pxReadyTasksLists
 605 00dc 04ED00E0 	 .word -536810236
 606              	 .cfi_endproc
 607              	.LFE139:
 609              	 .section .text.vTaskDelete,"ax",%progbits
 610              	 .align 2
 611              	 .global vTaskDelete
 612              	 .thumb
 613              	 .thumb_func
 615              	vTaskDelete:
 616              	.LFB140:
1108:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1109:../Dave/Generated/FREERTOS/tasks.c **** 
1110:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1111:../Dave/Generated/FREERTOS/tasks.c **** 
1112:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1113:../Dave/Generated/FREERTOS/tasks.c **** 	{
 617              	 .loc 1 1113 0
 618              	 .cfi_startproc
 619              	 
 620              	 
 621 0000 80B5     	 push {r7,lr}
 622              	 .cfi_def_cfa_offset 8
 623              	 .cfi_offset 7,-8
 624              	 .cfi_offset 14,-4
 625 0002 84B0     	 sub sp,sp,#16
 626              	 .cfi_def_cfa_offset 24
 627 0004 00AF     	 add r7,sp,#0
 628              	 .cfi_def_cfa_register 7
 629 0006 7860     	 str r0,[r7,#4]
1114:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
1115:../Dave/Generated/FREERTOS/tasks.c **** 
1116:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
 630              	 .loc 1 1116 0
 631 0008 FFF7FEFF 	 bl vPortEnterCritical
1117:../Dave/Generated/FREERTOS/tasks.c **** 		{
1118:../Dave/Generated/FREERTOS/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1119:../Dave/Generated/FREERTOS/tasks.c **** 			being deleted. */
1120:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 632              	 .loc 1 1120 0
 633 000c 7B68     	 ldr r3,[r7,#4]
 634 000e 002B     	 cmp r3,#0
 635 0010 02D1     	 bne .L27
 636              	 .loc 1 1120 0 is_stmt 0 discriminator 1
 637 0012 384B     	 ldr r3,.L37
 638 0014 1B68     	 ldr r3,[r3]
 639 0016 00E0     	 b .L28
 640              	.L27:
 641              	 .loc 1 1120 0 discriminator 2
 642 0018 7B68     	 ldr r3,[r7,#4]
 643              	.L28:
 644              	 .loc 1 1120 0 discriminator 4
 645 001a FB60     	 str r3,[r7,#12]
1121:../Dave/Generated/FREERTOS/tasks.c **** 
1122:../Dave/Generated/FREERTOS/tasks.c **** 			/* Remove task from the ready list. */
1123:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 646              	 .loc 1 1123 0 is_stmt 1 discriminator 4
 647 001c FB68     	 ldr r3,[r7,#12]
 648 001e 0433     	 adds r3,r3,#4
 649 0020 1846     	 mov r0,r3
 650 0022 FFF7FEFF 	 bl uxListRemove
 651 0026 0346     	 mov r3,r0
 652 0028 002B     	 cmp r3,#0
 653 002a 15D1     	 bne .L29
1124:../Dave/Generated/FREERTOS/tasks.c **** 			{
1125:../Dave/Generated/FREERTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 654              	 .loc 1 1125 0
 655 002c FB68     	 ldr r3,[r7,#12]
 656 002e DA6A     	 ldr r2,[r3,#44]
 657 0030 3149     	 ldr r1,.L37+4
 658 0032 1346     	 mov r3,r2
 659 0034 9B00     	 lsls r3,r3,#2
 660 0036 1344     	 add r3,r3,r2
 661 0038 9B00     	 lsls r3,r3,#2
 662 003a 0B44     	 add r3,r3,r1
 663 003c 1B68     	 ldr r3,[r3]
 664 003e 002B     	 cmp r3,#0
 665 0040 0AD1     	 bne .L29
 666              	 .loc 1 1125 0 is_stmt 0 discriminator 1
 667 0042 FB68     	 ldr r3,[r7,#12]
 668 0044 DB6A     	 ldr r3,[r3,#44]
 669 0046 1A46     	 mov r2,r3
 670 0048 0123     	 movs r3,#1
 671 004a 9340     	 lsls r3,r3,r2
 672 004c DA43     	 mvns r2,r3
 673 004e 2B4B     	 ldr r3,.L37+8
 674 0050 1B68     	 ldr r3,[r3]
 675 0052 1340     	 ands r3,r3,r2
 676 0054 294A     	 ldr r2,.L37+8
 677 0056 1360     	 str r3,[r2]
 678              	.L29:
1126:../Dave/Generated/FREERTOS/tasks.c **** 			}
1127:../Dave/Generated/FREERTOS/tasks.c **** 			else
1128:../Dave/Generated/FREERTOS/tasks.c **** 			{
1129:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1130:../Dave/Generated/FREERTOS/tasks.c **** 			}
1131:../Dave/Generated/FREERTOS/tasks.c **** 
1132:../Dave/Generated/FREERTOS/tasks.c **** 			/* Is the task waiting on an event also? */
1133:../Dave/Generated/FREERTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 679              	 .loc 1 1133 0 is_stmt 1
 680 0058 FB68     	 ldr r3,[r7,#12]
 681 005a 9B6A     	 ldr r3,[r3,#40]
 682 005c 002B     	 cmp r3,#0
 683 005e 04D0     	 beq .L31
1134:../Dave/Generated/FREERTOS/tasks.c **** 			{
1135:../Dave/Generated/FREERTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 684              	 .loc 1 1135 0
 685 0060 FB68     	 ldr r3,[r7,#12]
 686 0062 1833     	 adds r3,r3,#24
 687 0064 1846     	 mov r0,r3
 688 0066 FFF7FEFF 	 bl uxListRemove
 689              	.L31:
1136:../Dave/Generated/FREERTOS/tasks.c **** 			}
1137:../Dave/Generated/FREERTOS/tasks.c **** 			else
1138:../Dave/Generated/FREERTOS/tasks.c **** 			{
1139:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1140:../Dave/Generated/FREERTOS/tasks.c **** 			}
1141:../Dave/Generated/FREERTOS/tasks.c **** 
1142:../Dave/Generated/FREERTOS/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1143:../Dave/Generated/FREERTOS/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1144:../Dave/Generated/FREERTOS/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1145:../Dave/Generated/FREERTOS/tasks.c **** 			not return. */
1146:../Dave/Generated/FREERTOS/tasks.c **** 			uxTaskNumber++;
 690              	 .loc 1 1146 0
 691 006a 254B     	 ldr r3,.L37+12
 692 006c 1B68     	 ldr r3,[r3]
 693 006e 0133     	 adds r3,r3,#1
 694 0070 234A     	 ldr r2,.L37+12
 695 0072 1360     	 str r3,[r2]
1147:../Dave/Generated/FREERTOS/tasks.c **** 
1148:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 696              	 .loc 1 1148 0
 697 0074 1F4B     	 ldr r3,.L37
 698 0076 1B68     	 ldr r3,[r3]
 699 0078 FA68     	 ldr r2,[r7,#12]
 700 007a 9A42     	 cmp r2,r3
 701 007c 0BD1     	 bne .L32
1149:../Dave/Generated/FREERTOS/tasks.c **** 			{
1150:../Dave/Generated/FREERTOS/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1151:../Dave/Generated/FREERTOS/tasks.c **** 				task itself, as a context switch to another task is required.
1152:../Dave/Generated/FREERTOS/tasks.c **** 				Place the task in the termination list.  The idle task will
1153:../Dave/Generated/FREERTOS/tasks.c **** 				check the termination list and free up any memory allocated by
1154:../Dave/Generated/FREERTOS/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1155:../Dave/Generated/FREERTOS/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 702              	 .loc 1 1155 0
 703 007e FB68     	 ldr r3,[r7,#12]
 704 0080 0433     	 adds r3,r3,#4
 705 0082 2048     	 ldr r0,.L37+16
 706 0084 1946     	 mov r1,r3
 707 0086 FFF7FEFF 	 bl vListInsertEnd
1156:../Dave/Generated/FREERTOS/tasks.c **** 
1157:../Dave/Generated/FREERTOS/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1158:../Dave/Generated/FREERTOS/tasks.c **** 				there is a task that has been deleted and that it should therefore
1159:../Dave/Generated/FREERTOS/tasks.c **** 				check the xTasksWaitingTermination list. */
1160:../Dave/Generated/FREERTOS/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 708              	 .loc 1 1160 0
 709 008a 1F4B     	 ldr r3,.L37+20
 710 008c 1B68     	 ldr r3,[r3]
 711 008e 0133     	 adds r3,r3,#1
 712 0090 1D4A     	 ldr r2,.L37+20
 713 0092 1360     	 str r3,[r2]
 714 0094 09E0     	 b .L33
 715              	.L32:
1161:../Dave/Generated/FREERTOS/tasks.c **** 
1162:../Dave/Generated/FREERTOS/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1163:../Dave/Generated/FREERTOS/tasks.c **** 				in which Windows specific clean up operations are performed,
1164:../Dave/Generated/FREERTOS/tasks.c **** 				after which it is not possible to yield away from this task -
1165:../Dave/Generated/FREERTOS/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1166:../Dave/Generated/FREERTOS/tasks.c **** 				required. */
1167:../Dave/Generated/FREERTOS/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1168:../Dave/Generated/FREERTOS/tasks.c **** 			}
1169:../Dave/Generated/FREERTOS/tasks.c **** 			else
1170:../Dave/Generated/FREERTOS/tasks.c **** 			{
1171:../Dave/Generated/FREERTOS/tasks.c **** 				--uxCurrentNumberOfTasks;
 716              	 .loc 1 1171 0
 717 0096 1D4B     	 ldr r3,.L37+24
 718 0098 1B68     	 ldr r3,[r3]
 719 009a 013B     	 subs r3,r3,#1
 720 009c 1B4A     	 ldr r2,.L37+24
 721 009e 1360     	 str r3,[r2]
1172:../Dave/Generated/FREERTOS/tasks.c **** 				prvDeleteTCB( pxTCB );
 722              	 .loc 1 1172 0
 723 00a0 F868     	 ldr r0,[r7,#12]
 724 00a2 FFF7FEFF 	 bl prvDeleteTCB
1173:../Dave/Generated/FREERTOS/tasks.c **** 
1174:../Dave/Generated/FREERTOS/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1175:../Dave/Generated/FREERTOS/tasks.c **** 				the task that has just been deleted. */
1176:../Dave/Generated/FREERTOS/tasks.c **** 				prvResetNextTaskUnblockTime();
 725              	 .loc 1 1176 0
 726 00a6 FFF7FEFF 	 bl prvResetNextTaskUnblockTime
 727              	.L33:
1177:../Dave/Generated/FREERTOS/tasks.c **** 			}
1178:../Dave/Generated/FREERTOS/tasks.c **** 
1179:../Dave/Generated/FREERTOS/tasks.c **** 			traceTASK_DELETE( pxTCB );
1180:../Dave/Generated/FREERTOS/tasks.c **** 		}
1181:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
 728              	 .loc 1 1181 0
 729 00aa FFF7FEFF 	 bl vPortExitCritical
1182:../Dave/Generated/FREERTOS/tasks.c **** 
1183:../Dave/Generated/FREERTOS/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1184:../Dave/Generated/FREERTOS/tasks.c **** 		been deleted. */
1185:../Dave/Generated/FREERTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 730              	 .loc 1 1185 0
 731 00ae 184B     	 ldr r3,.L37+28
 732 00b0 1B68     	 ldr r3,[r3]
 733 00b2 002B     	 cmp r3,#0
 734 00b4 1AD0     	 beq .L26
1186:../Dave/Generated/FREERTOS/tasks.c **** 		{
1187:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 735              	 .loc 1 1187 0
 736 00b6 0F4B     	 ldr r3,.L37
 737 00b8 1B68     	 ldr r3,[r3]
 738 00ba FA68     	 ldr r2,[r7,#12]
 739 00bc 9A42     	 cmp r2,r3
 740 00be 15D1     	 bne .L26
1188:../Dave/Generated/FREERTOS/tasks.c **** 			{
1189:../Dave/Generated/FREERTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 741              	 .loc 1 1189 0
 742 00c0 144B     	 ldr r3,.L37+32
 743 00c2 1B68     	 ldr r3,[r3]
 744 00c4 002B     	 cmp r3,#0
 745 00c6 09D0     	 beq .L35
 746              	.LBB114:
 747              	.LBB115:
 748              	 .loc 2 195 0 discriminator 1
 749              	
 750 00c8 4FF0FC03 	 mov r3,#252
 751 00cc 83F31188 	 msr basepri,r3
 752 00d0 BFF36F8F 	 isb 
 753 00d4 BFF34F8F 	 dsb 
 754              	
 755              	
 756              	 .thumb
 757 00d8 BB60     	 str r3,[r7,#8]
 758              	.L36:
 759              	.LBE115:
 760              	.LBE114:
 761              	 .loc 1 1189 0 discriminator 1
 762 00da FEE7     	 b .L36
 763              	.L35:
1190:../Dave/Generated/FREERTOS/tasks.c **** 				portYIELD_WITHIN_API();
 764              	 .loc 1 1190 0
 765 00dc 0E4B     	 ldr r3,.L37+36
 766 00de 4FF08052 	 mov r2,#268435456
 767 00e2 1A60     	 str r2,[r3]
 768              	
 769 00e4 BFF34F8F 	 dsb
 770              	
 771              	
 772 00e8 BFF36F8F 	 isb
 773              	
 774              	 .thumb
 775              	.L26:
1191:../Dave/Generated/FREERTOS/tasks.c **** 			}
1192:../Dave/Generated/FREERTOS/tasks.c **** 			else
1193:../Dave/Generated/FREERTOS/tasks.c **** 			{
1194:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1195:../Dave/Generated/FREERTOS/tasks.c **** 			}
1196:../Dave/Generated/FREERTOS/tasks.c **** 		}
1197:../Dave/Generated/FREERTOS/tasks.c **** 	}
 776              	 .loc 1 1197 0
 777 00ec 1037     	 adds r7,r7,#16
 778              	 .cfi_def_cfa_offset 8
 779 00ee BD46     	 mov sp,r7
 780              	 .cfi_def_cfa_register 13
 781              	 
 782 00f0 80BD     	 pop {r7,pc}
 783              	.L38:
 784 00f2 00BF     	 .align 2
 785              	.L37:
 786 00f4 00000000 	 .word pxCurrentTCB
 787 00f8 00000000 	 .word pxReadyTasksLists
 788 00fc 00000000 	 .word uxTopReadyPriority
 789 0100 00000000 	 .word uxTaskNumber
 790 0104 00000000 	 .word xTasksWaitingTermination
 791 0108 00000000 	 .word uxDeletedTasksWaitingCleanUp
 792 010c 00000000 	 .word uxCurrentNumberOfTasks
 793 0110 00000000 	 .word xSchedulerRunning
 794 0114 00000000 	 .word uxSchedulerSuspended
 795 0118 04ED00E0 	 .word -536810236
 796              	 .cfi_endproc
 797              	.LFE140:
 799              	 .section .text.vTaskDelayUntil,"ax",%progbits
 800              	 .align 2
 801              	 .global vTaskDelayUntil
 802              	 .thumb
 803              	 .thumb_func
 805              	vTaskDelayUntil:
 806              	.LFB141:
1198:../Dave/Generated/FREERTOS/tasks.c **** 
1199:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1200:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1201:../Dave/Generated/FREERTOS/tasks.c **** 
1202:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1203:../Dave/Generated/FREERTOS/tasks.c **** 
1204:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1205:../Dave/Generated/FREERTOS/tasks.c **** 	{
 807              	 .loc 1 1205 0
 808              	 .cfi_startproc
 809              	 
 810              	 
 811 0000 80B5     	 push {r7,lr}
 812              	 .cfi_def_cfa_offset 8
 813              	 .cfi_offset 7,-8
 814              	 .cfi_offset 14,-4
 815 0002 8AB0     	 sub sp,sp,#40
 816              	 .cfi_def_cfa_offset 48
 817 0004 00AF     	 add r7,sp,#0
 818              	 .cfi_def_cfa_register 7
 819 0006 7860     	 str r0,[r7,#4]
 820 0008 3960     	 str r1,[r7]
1206:../Dave/Generated/FREERTOS/tasks.c **** 	TickType_t xTimeToWake;
1207:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 821              	 .loc 1 1207 0
 822 000a 0023     	 movs r3,#0
 823 000c 7B62     	 str r3,[r7,#36]
1208:../Dave/Generated/FREERTOS/tasks.c **** 
1209:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 824              	 .loc 1 1209 0
 825 000e 7B68     	 ldr r3,[r7,#4]
 826 0010 002B     	 cmp r3,#0
 827 0012 09D1     	 bne .L40
 828              	.LBB116:
 829              	.LBB117:
 830              	 .loc 2 195 0 discriminator 1
 831              	
 832 0014 4FF0FC03 	 mov r3,#252
 833 0018 83F31188 	 msr basepri,r3
 834 001c BFF36F8F 	 isb 
 835 0020 BFF34F8F 	 dsb 
 836              	
 837              	
 838              	 .thumb
 839 0024 7B61     	 str r3,[r7,#20]
 840              	.L41:
 841              	.LBE117:
 842              	.LBE116:
 843              	 .loc 1 1209 0 discriminator 1
 844 0026 FEE7     	 b .L41
 845              	.L40:
1210:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 846              	 .loc 1 1210 0
 847 0028 3B68     	 ldr r3,[r7]
 848 002a 002B     	 cmp r3,#0
 849 002c 09D1     	 bne .L42
 850              	.LBB118:
 851              	.LBB119:
 852              	 .loc 2 195 0 discriminator 1
 853              	
 854 002e 4FF0FC03 	 mov r3,#252
 855 0032 83F31188 	 msr basepri,r3
 856 0036 BFF36F8F 	 isb 
 857 003a BFF34F8F 	 dsb 
 858              	
 859              	
 860              	 .thumb
 861 003e 3B61     	 str r3,[r7,#16]
 862              	.L43:
 863              	.LBE119:
 864              	.LBE118:
 865              	 .loc 1 1210 0 discriminator 2
 866 0040 FEE7     	 b .L43
 867              	.L42:
1211:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 868              	 .loc 1 1211 0
 869 0042 294B     	 ldr r3,.L51
 870 0044 1B68     	 ldr r3,[r3]
 871 0046 002B     	 cmp r3,#0
 872 0048 09D0     	 beq .L44
 873              	.LBB120:
 874              	.LBB121:
 875              	 .loc 2 195 0 discriminator 1
 876              	
 877 004a 4FF0FC03 	 mov r3,#252
 878 004e 83F31188 	 msr basepri,r3
 879 0052 BFF36F8F 	 isb 
 880 0056 BFF34F8F 	 dsb 
 881              	
 882              	
 883              	 .thumb
 884 005a FB60     	 str r3,[r7,#12]
 885              	.L45:
 886              	.LBE121:
 887              	.LBE120:
 888              	 .loc 1 1211 0 discriminator 3
 889 005c FEE7     	 b .L45
 890              	.L44:
1212:../Dave/Generated/FREERTOS/tasks.c **** 
1213:../Dave/Generated/FREERTOS/tasks.c **** 		vTaskSuspendAll();
 891              	 .loc 1 1213 0
 892 005e FFF7FEFF 	 bl vTaskSuspendAll
 893              	.LBB122:
1214:../Dave/Generated/FREERTOS/tasks.c **** 		{
1215:../Dave/Generated/FREERTOS/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1216:../Dave/Generated/FREERTOS/tasks.c **** 			block. */
1217:../Dave/Generated/FREERTOS/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 894              	 .loc 1 1217 0
 895 0062 224B     	 ldr r3,.L51+4
 896 0064 1B68     	 ldr r3,[r3]
 897 0066 3B62     	 str r3,[r7,#32]
1218:../Dave/Generated/FREERTOS/tasks.c **** 
1219:../Dave/Generated/FREERTOS/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1220:../Dave/Generated/FREERTOS/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 898              	 .loc 1 1220 0
 899 0068 7B68     	 ldr r3,[r7,#4]
 900 006a 1A68     	 ldr r2,[r3]
 901 006c 3B68     	 ldr r3,[r7]
 902 006e 1344     	 add r3,r3,r2
 903 0070 FB61     	 str r3,[r7,#28]
1221:../Dave/Generated/FREERTOS/tasks.c **** 
1222:../Dave/Generated/FREERTOS/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 904              	 .loc 1 1222 0
 905 0072 7B68     	 ldr r3,[r7,#4]
 906 0074 1A68     	 ldr r2,[r3]
 907 0076 3B6A     	 ldr r3,[r7,#32]
 908 0078 9A42     	 cmp r2,r3
 909 007a 0BD9     	 bls .L46
1223:../Dave/Generated/FREERTOS/tasks.c **** 			{
1224:../Dave/Generated/FREERTOS/tasks.c **** 				/* The tick count has overflowed since this function was
1225:../Dave/Generated/FREERTOS/tasks.c **** 				lasted called.  In this case the only time we should ever
1226:../Dave/Generated/FREERTOS/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1227:../Dave/Generated/FREERTOS/tasks.c **** 				and the wake time is greater than the tick time.  When this
1228:../Dave/Generated/FREERTOS/tasks.c **** 				is the case it is as if neither time had overflowed. */
1229:../Dave/Generated/FREERTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 910              	 .loc 1 1229 0
 911 007c 7B68     	 ldr r3,[r7,#4]
 912 007e 1A68     	 ldr r2,[r3]
 913 0080 FB69     	 ldr r3,[r7,#28]
 914 0082 9A42     	 cmp r2,r3
 915 0084 11D9     	 bls .L47
 916              	 .loc 1 1229 0 is_stmt 0 discriminator 1
 917 0086 FA69     	 ldr r2,[r7,#28]
 918 0088 3B6A     	 ldr r3,[r7,#32]
 919 008a 9A42     	 cmp r2,r3
 920 008c 0DD9     	 bls .L47
1230:../Dave/Generated/FREERTOS/tasks.c **** 				{
1231:../Dave/Generated/FREERTOS/tasks.c **** 					xShouldDelay = pdTRUE;
 921              	 .loc 1 1231 0 is_stmt 1
 922 008e 0123     	 movs r3,#1
 923 0090 7B62     	 str r3,[r7,#36]
 924 0092 0AE0     	 b .L47
 925              	.L46:
1232:../Dave/Generated/FREERTOS/tasks.c **** 				}
1233:../Dave/Generated/FREERTOS/tasks.c **** 				else
1234:../Dave/Generated/FREERTOS/tasks.c **** 				{
1235:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1236:../Dave/Generated/FREERTOS/tasks.c **** 				}
1237:../Dave/Generated/FREERTOS/tasks.c **** 			}
1238:../Dave/Generated/FREERTOS/tasks.c **** 			else
1239:../Dave/Generated/FREERTOS/tasks.c **** 			{
1240:../Dave/Generated/FREERTOS/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1241:../Dave/Generated/FREERTOS/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1242:../Dave/Generated/FREERTOS/tasks.c **** 				tick time is less than the wake time. */
1243:../Dave/Generated/FREERTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 926              	 .loc 1 1243 0
 927 0094 7B68     	 ldr r3,[r7,#4]
 928 0096 1A68     	 ldr r2,[r3]
 929 0098 FB69     	 ldr r3,[r7,#28]
 930 009a 9A42     	 cmp r2,r3
 931 009c 03D8     	 bhi .L48
 932              	 .loc 1 1243 0 is_stmt 0 discriminator 1
 933 009e FA69     	 ldr r2,[r7,#28]
 934 00a0 3B6A     	 ldr r3,[r7,#32]
 935 00a2 9A42     	 cmp r2,r3
 936 00a4 01D9     	 bls .L47
 937              	.L48:
1244:../Dave/Generated/FREERTOS/tasks.c **** 				{
1245:../Dave/Generated/FREERTOS/tasks.c **** 					xShouldDelay = pdTRUE;
 938              	 .loc 1 1245 0 is_stmt 1
 939 00a6 0123     	 movs r3,#1
 940 00a8 7B62     	 str r3,[r7,#36]
 941              	.L47:
1246:../Dave/Generated/FREERTOS/tasks.c **** 				}
1247:../Dave/Generated/FREERTOS/tasks.c **** 				else
1248:../Dave/Generated/FREERTOS/tasks.c **** 				{
1249:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1250:../Dave/Generated/FREERTOS/tasks.c **** 				}
1251:../Dave/Generated/FREERTOS/tasks.c **** 			}
1252:../Dave/Generated/FREERTOS/tasks.c **** 
1253:../Dave/Generated/FREERTOS/tasks.c **** 			/* Update the wake time ready for the next call. */
1254:../Dave/Generated/FREERTOS/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 942              	 .loc 1 1254 0
 943 00aa 7B68     	 ldr r3,[r7,#4]
 944 00ac FA69     	 ldr r2,[r7,#28]
 945 00ae 1A60     	 str r2,[r3]
1255:../Dave/Generated/FREERTOS/tasks.c **** 
1256:../Dave/Generated/FREERTOS/tasks.c **** 			if( xShouldDelay != pdFALSE )
 946              	 .loc 1 1256 0
 947 00b0 7B6A     	 ldr r3,[r7,#36]
 948 00b2 002B     	 cmp r3,#0
 949 00b4 06D0     	 beq .L49
1257:../Dave/Generated/FREERTOS/tasks.c **** 			{
1258:../Dave/Generated/FREERTOS/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1259:../Dave/Generated/FREERTOS/tasks.c **** 
1260:../Dave/Generated/FREERTOS/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1261:../Dave/Generated/FREERTOS/tasks.c **** 				the time to wake, so subtract the current tick count. */
1262:../Dave/Generated/FREERTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 950              	 .loc 1 1262 0
 951 00b6 FA69     	 ldr r2,[r7,#28]
 952 00b8 3B6A     	 ldr r3,[r7,#32]
 953 00ba D31A     	 subs r3,r2,r3
 954 00bc 1846     	 mov r0,r3
 955 00be 0021     	 movs r1,#0
 956 00c0 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
 957              	.L49:
 958              	.LBE122:
1263:../Dave/Generated/FREERTOS/tasks.c **** 			}
1264:../Dave/Generated/FREERTOS/tasks.c **** 			else
1265:../Dave/Generated/FREERTOS/tasks.c **** 			{
1266:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1267:../Dave/Generated/FREERTOS/tasks.c **** 			}
1268:../Dave/Generated/FREERTOS/tasks.c **** 		}
1269:../Dave/Generated/FREERTOS/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 959              	 .loc 1 1269 0
 960 00c4 FFF7FEFF 	 bl xTaskResumeAll
 961 00c8 B861     	 str r0,[r7,#24]
1270:../Dave/Generated/FREERTOS/tasks.c **** 
1271:../Dave/Generated/FREERTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1272:../Dave/Generated/FREERTOS/tasks.c **** 		have put ourselves to sleep. */
1273:../Dave/Generated/FREERTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 962              	 .loc 1 1273 0
 963 00ca BB69     	 ldr r3,[r7,#24]
 964 00cc 002B     	 cmp r3,#0
 965 00ce 07D1     	 bne .L39
1274:../Dave/Generated/FREERTOS/tasks.c **** 		{
1275:../Dave/Generated/FREERTOS/tasks.c **** 			portYIELD_WITHIN_API();
 966              	 .loc 1 1275 0
 967 00d0 074B     	 ldr r3,.L51+8
 968 00d2 4FF08052 	 mov r2,#268435456
 969 00d6 1A60     	 str r2,[r3]
 970              	
 971 00d8 BFF34F8F 	 dsb
 972              	
 973              	
 974 00dc BFF36F8F 	 isb
 975              	
 976              	 .thumb
 977              	.L39:
1276:../Dave/Generated/FREERTOS/tasks.c **** 		}
1277:../Dave/Generated/FREERTOS/tasks.c **** 		else
1278:../Dave/Generated/FREERTOS/tasks.c **** 		{
1279:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1280:../Dave/Generated/FREERTOS/tasks.c **** 		}
1281:../Dave/Generated/FREERTOS/tasks.c **** 	}
 978              	 .loc 1 1281 0
 979 00e0 2837     	 adds r7,r7,#40
 980              	 .cfi_def_cfa_offset 8
 981 00e2 BD46     	 mov sp,r7
 982              	 .cfi_def_cfa_register 13
 983              	 
 984 00e4 80BD     	 pop {r7,pc}
 985              	.L52:
 986 00e6 00BF     	 .align 2
 987              	.L51:
 988 00e8 00000000 	 .word uxSchedulerSuspended
 989 00ec 00000000 	 .word xTickCount
 990 00f0 04ED00E0 	 .word -536810236
 991              	 .cfi_endproc
 992              	.LFE141:
 994              	 .section .text.vTaskDelay,"ax",%progbits
 995              	 .align 2
 996              	 .global vTaskDelay
 997              	 .thumb
 998              	 .thumb_func
 1000              	vTaskDelay:
 1001              	.LFB142:
1282:../Dave/Generated/FREERTOS/tasks.c **** 
1283:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1284:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1285:../Dave/Generated/FREERTOS/tasks.c **** 
1286:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1287:../Dave/Generated/FREERTOS/tasks.c **** 
1288:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1289:../Dave/Generated/FREERTOS/tasks.c **** 	{
 1002              	 .loc 1 1289 0
 1003              	 .cfi_startproc
 1004              	 
 1005              	 
 1006 0000 80B5     	 push {r7,lr}
 1007              	 .cfi_def_cfa_offset 8
 1008              	 .cfi_offset 7,-8
 1009              	 .cfi_offset 14,-4
 1010 0002 84B0     	 sub sp,sp,#16
 1011              	 .cfi_def_cfa_offset 24
 1012 0004 00AF     	 add r7,sp,#0
 1013              	 .cfi_def_cfa_register 7
 1014 0006 7860     	 str r0,[r7,#4]
1290:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 1015              	 .loc 1 1290 0
 1016 0008 0023     	 movs r3,#0
 1017 000a FB60     	 str r3,[r7,#12]
1291:../Dave/Generated/FREERTOS/tasks.c **** 
1292:../Dave/Generated/FREERTOS/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1293:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 1018              	 .loc 1 1293 0
 1019 000c 7B68     	 ldr r3,[r7,#4]
 1020 000e 002B     	 cmp r3,#0
 1021 0010 16D0     	 beq .L54
1294:../Dave/Generated/FREERTOS/tasks.c **** 		{
1295:../Dave/Generated/FREERTOS/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 1022              	 .loc 1 1295 0
 1023 0012 124B     	 ldr r3,.L58
 1024 0014 1B68     	 ldr r3,[r3]
 1025 0016 002B     	 cmp r3,#0
 1026 0018 09D0     	 beq .L55
 1027              	.LBB123:
 1028              	.LBB124:
 1029              	 .loc 2 195 0 discriminator 1
 1030              	
 1031 001a 4FF0FC03 	 mov r3,#252
 1032 001e 83F31188 	 msr basepri,r3
 1033 0022 BFF36F8F 	 isb 
 1034 0026 BFF34F8F 	 dsb 
 1035              	
 1036              	
 1037              	 .thumb
 1038 002a BB60     	 str r3,[r7,#8]
 1039              	.L56:
 1040              	.LBE124:
 1041              	.LBE123:
 1042              	 .loc 1 1295 0 discriminator 1
 1043 002c FEE7     	 b .L56
 1044              	.L55:
1296:../Dave/Generated/FREERTOS/tasks.c **** 			vTaskSuspendAll();
 1045              	 .loc 1 1296 0
 1046 002e FFF7FEFF 	 bl vTaskSuspendAll
1297:../Dave/Generated/FREERTOS/tasks.c **** 			{
1298:../Dave/Generated/FREERTOS/tasks.c **** 				traceTASK_DELAY();
1299:../Dave/Generated/FREERTOS/tasks.c **** 
1300:../Dave/Generated/FREERTOS/tasks.c **** 				/* A task that is removed from the event list while the
1301:../Dave/Generated/FREERTOS/tasks.c **** 				scheduler is suspended will not get placed in the ready
1302:../Dave/Generated/FREERTOS/tasks.c **** 				list or removed from the blocked list until the scheduler
1303:../Dave/Generated/FREERTOS/tasks.c **** 				is resumed.
1304:../Dave/Generated/FREERTOS/tasks.c **** 
1305:../Dave/Generated/FREERTOS/tasks.c **** 				This task cannot be in an event list as it is the currently
1306:../Dave/Generated/FREERTOS/tasks.c **** 				executing task. */
1307:../Dave/Generated/FREERTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 1047              	 .loc 1 1307 0
 1048 0032 7868     	 ldr r0,[r7,#4]
 1049 0034 0021     	 movs r1,#0
 1050 0036 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
1308:../Dave/Generated/FREERTOS/tasks.c **** 			}
1309:../Dave/Generated/FREERTOS/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 1051              	 .loc 1 1309 0
 1052 003a FFF7FEFF 	 bl xTaskResumeAll
 1053 003e F860     	 str r0,[r7,#12]
 1054              	.L54:
1310:../Dave/Generated/FREERTOS/tasks.c **** 		}
1311:../Dave/Generated/FREERTOS/tasks.c **** 		else
1312:../Dave/Generated/FREERTOS/tasks.c **** 		{
1313:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1314:../Dave/Generated/FREERTOS/tasks.c **** 		}
1315:../Dave/Generated/FREERTOS/tasks.c **** 
1316:../Dave/Generated/FREERTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1317:../Dave/Generated/FREERTOS/tasks.c **** 		have put ourselves to sleep. */
1318:../Dave/Generated/FREERTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1055              	 .loc 1 1318 0
 1056 0040 FB68     	 ldr r3,[r7,#12]
 1057 0042 002B     	 cmp r3,#0
 1058 0044 07D1     	 bne .L53
1319:../Dave/Generated/FREERTOS/tasks.c **** 		{
1320:../Dave/Generated/FREERTOS/tasks.c **** 			portYIELD_WITHIN_API();
 1059              	 .loc 1 1320 0
 1060 0046 064B     	 ldr r3,.L58+4
 1061 0048 4FF08052 	 mov r2,#268435456
 1062 004c 1A60     	 str r2,[r3]
 1063              	
 1064 004e BFF34F8F 	 dsb
 1065              	
 1066              	
 1067 0052 BFF36F8F 	 isb
 1068              	
 1069              	 .thumb
 1070              	.L53:
1321:../Dave/Generated/FREERTOS/tasks.c **** 		}
1322:../Dave/Generated/FREERTOS/tasks.c **** 		else
1323:../Dave/Generated/FREERTOS/tasks.c **** 		{
1324:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1325:../Dave/Generated/FREERTOS/tasks.c **** 		}
1326:../Dave/Generated/FREERTOS/tasks.c **** 	}
 1071              	 .loc 1 1326 0
 1072 0056 1037     	 adds r7,r7,#16
 1073              	 .cfi_def_cfa_offset 8
 1074 0058 BD46     	 mov sp,r7
 1075              	 .cfi_def_cfa_register 13
 1076              	 
 1077 005a 80BD     	 pop {r7,pc}
 1078              	.L59:
 1079              	 .align 2
 1080              	.L58:
 1081 005c 00000000 	 .word uxSchedulerSuspended
 1082 0060 04ED00E0 	 .word -536810236
 1083              	 .cfi_endproc
 1084              	.LFE142:
 1086              	 .section .text.eTaskGetState,"ax",%progbits
 1087              	 .align 2
 1088              	 .global eTaskGetState
 1089              	 .thumb
 1090              	 .thumb_func
 1092              	eTaskGetState:
 1093              	.LFB143:
1327:../Dave/Generated/FREERTOS/tasks.c **** 
1328:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1329:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1330:../Dave/Generated/FREERTOS/tasks.c **** 
1331:../Dave/Generated/FREERTOS/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1332:../Dave/Generated/FREERTOS/tasks.c **** 
1333:../Dave/Generated/FREERTOS/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1334:../Dave/Generated/FREERTOS/tasks.c **** 	{
 1094              	 .loc 1 1334 0
 1095              	 .cfi_startproc
 1096              	 
 1097              	 
 1098 0000 80B5     	 push {r7,lr}
 1099              	 .cfi_def_cfa_offset 8
 1100              	 .cfi_offset 7,-8
 1101              	 .cfi_offset 14,-4
 1102 0002 86B0     	 sub sp,sp,#24
 1103              	 .cfi_def_cfa_offset 32
 1104 0004 00AF     	 add r7,sp,#0
 1105              	 .cfi_def_cfa_register 7
 1106 0006 7860     	 str r0,[r7,#4]
1335:../Dave/Generated/FREERTOS/tasks.c **** 	eTaskState eReturn;
1336:../Dave/Generated/FREERTOS/tasks.c **** 	List_t *pxStateList;
1337:../Dave/Generated/FREERTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 1107              	 .loc 1 1337 0
 1108 0008 7B68     	 ldr r3,[r7,#4]
 1109 000a 3B61     	 str r3,[r7,#16]
1338:../Dave/Generated/FREERTOS/tasks.c **** 
1339:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( pxTCB );
 1110              	 .loc 1 1339 0
 1111 000c 3B69     	 ldr r3,[r7,#16]
 1112 000e 002B     	 cmp r3,#0
 1113 0010 09D1     	 bne .L61
 1114              	.LBB125:
 1115              	.LBB126:
 1116              	 .loc 2 195 0 discriminator 1
 1117              	
 1118 0012 4FF0FC03 	 mov r3,#252
 1119 0016 83F31188 	 msr basepri,r3
 1120 001a BFF36F8F 	 isb 
 1121 001e BFF34F8F 	 dsb 
 1122              	
 1123              	
 1124              	 .thumb
 1125 0022 BB60     	 str r3,[r7,#8]
 1126              	.L62:
 1127              	.LBE126:
 1128              	.LBE125:
 1129              	 .loc 1 1339 0 discriminator 1
 1130 0024 FEE7     	 b .L62
 1131              	.L61:
1340:../Dave/Generated/FREERTOS/tasks.c **** 
1341:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1132              	 .loc 1 1341 0
 1133 0026 1D4B     	 ldr r3,.L73
 1134 0028 1B68     	 ldr r3,[r3]
 1135 002a 3A69     	 ldr r2,[r7,#16]
 1136 002c 9A42     	 cmp r2,r3
 1137 002e 02D1     	 bne .L63
1342:../Dave/Generated/FREERTOS/tasks.c **** 		{
1343:../Dave/Generated/FREERTOS/tasks.c **** 			/* The task calling this function is querying its own state. */
1344:../Dave/Generated/FREERTOS/tasks.c **** 			eReturn = eRunning;
 1138              	 .loc 1 1344 0
 1139 0030 0023     	 movs r3,#0
 1140 0032 FB75     	 strb r3,[r7,#23]
 1141 0034 2DE0     	 b .L64
 1142              	.L63:
1345:../Dave/Generated/FREERTOS/tasks.c **** 		}
1346:../Dave/Generated/FREERTOS/tasks.c **** 		else
1347:../Dave/Generated/FREERTOS/tasks.c **** 		{
1348:../Dave/Generated/FREERTOS/tasks.c **** 			taskENTER_CRITICAL();
 1143              	 .loc 1 1348 0
 1144 0036 FFF7FEFF 	 bl vPortEnterCritical
1349:../Dave/Generated/FREERTOS/tasks.c **** 			{
1350:../Dave/Generated/FREERTOS/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 1145              	 .loc 1 1350 0
 1146 003a 3B69     	 ldr r3,[r7,#16]
 1147 003c 5B69     	 ldr r3,[r3,#20]
 1148 003e FB60     	 str r3,[r7,#12]
1351:../Dave/Generated/FREERTOS/tasks.c **** 			}
1352:../Dave/Generated/FREERTOS/tasks.c **** 			taskEXIT_CRITICAL();
 1149              	 .loc 1 1352 0
 1150 0040 FFF7FEFF 	 bl vPortExitCritical
1353:../Dave/Generated/FREERTOS/tasks.c **** 
1354:../Dave/Generated/FREERTOS/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 1151              	 .loc 1 1354 0
 1152 0044 164B     	 ldr r3,.L73+4
 1153 0046 1B68     	 ldr r3,[r3]
 1154 0048 FA68     	 ldr r2,[r7,#12]
 1155 004a 9A42     	 cmp r2,r3
 1156 004c 04D0     	 beq .L65
 1157              	 .loc 1 1354 0 is_stmt 0 discriminator 1
 1158 004e 154B     	 ldr r3,.L73+8
 1159 0050 1B68     	 ldr r3,[r3]
 1160 0052 FA68     	 ldr r2,[r7,#12]
 1161 0054 9A42     	 cmp r2,r3
 1162 0056 02D1     	 bne .L66
 1163              	.L65:
1355:../Dave/Generated/FREERTOS/tasks.c **** 			{
1356:../Dave/Generated/FREERTOS/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1357:../Dave/Generated/FREERTOS/tasks.c **** 				lists. */
1358:../Dave/Generated/FREERTOS/tasks.c **** 				eReturn = eBlocked;
 1164              	 .loc 1 1358 0 is_stmt 1
 1165 0058 0223     	 movs r3,#2
 1166 005a FB75     	 strb r3,[r7,#23]
 1167 005c 19E0     	 b .L64
 1168              	.L66:
1359:../Dave/Generated/FREERTOS/tasks.c **** 			}
1360:../Dave/Generated/FREERTOS/tasks.c **** 
1361:../Dave/Generated/FREERTOS/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1362:../Dave/Generated/FREERTOS/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 1169              	 .loc 1 1362 0
 1170 005e FB68     	 ldr r3,[r7,#12]
 1171 0060 114A     	 ldr r2,.L73+12
 1172 0062 9342     	 cmp r3,r2
 1173 0064 09D1     	 bne .L67
1363:../Dave/Generated/FREERTOS/tasks.c **** 				{
1364:../Dave/Generated/FREERTOS/tasks.c **** 					/* The task being queried is referenced from the suspended
1365:../Dave/Generated/FREERTOS/tasks.c **** 					list.  Is it genuinely suspended or is it block
1366:../Dave/Generated/FREERTOS/tasks.c **** 					indefinitely? */
1367:../Dave/Generated/FREERTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 1174              	 .loc 1 1367 0
 1175 0066 3B69     	 ldr r3,[r7,#16]
 1176 0068 9B6A     	 ldr r3,[r3,#40]
 1177 006a 002B     	 cmp r3,#0
 1178 006c 02D1     	 bne .L68
1368:../Dave/Generated/FREERTOS/tasks.c **** 					{
1369:../Dave/Generated/FREERTOS/tasks.c **** 						eReturn = eSuspended;
 1179              	 .loc 1 1369 0
 1180 006e 0323     	 movs r3,#3
 1181 0070 FB75     	 strb r3,[r7,#23]
 1182 0072 0EE0     	 b .L64
 1183              	.L68:
1370:../Dave/Generated/FREERTOS/tasks.c **** 					}
1371:../Dave/Generated/FREERTOS/tasks.c **** 					else
1372:../Dave/Generated/FREERTOS/tasks.c **** 					{
1373:../Dave/Generated/FREERTOS/tasks.c **** 						eReturn = eBlocked;
 1184              	 .loc 1 1373 0
 1185 0074 0223     	 movs r3,#2
 1186 0076 FB75     	 strb r3,[r7,#23]
 1187 0078 0BE0     	 b .L64
 1188              	.L67:
1374:../Dave/Generated/FREERTOS/tasks.c **** 					}
1375:../Dave/Generated/FREERTOS/tasks.c **** 				}
1376:../Dave/Generated/FREERTOS/tasks.c **** 			#endif
1377:../Dave/Generated/FREERTOS/tasks.c **** 
1378:../Dave/Generated/FREERTOS/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1379:../Dave/Generated/FREERTOS/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 1189              	 .loc 1 1379 0
 1190 007a FB68     	 ldr r3,[r7,#12]
 1191 007c 0B4A     	 ldr r2,.L73+16
 1192 007e 9342     	 cmp r3,r2
 1193 0080 02D0     	 beq .L70
 1194              	 .loc 1 1379 0 is_stmt 0 discriminator 1
 1195 0082 FB68     	 ldr r3,[r7,#12]
 1196 0084 002B     	 cmp r3,#0
 1197 0086 02D1     	 bne .L71
 1198              	.L70:
1380:../Dave/Generated/FREERTOS/tasks.c **** 				{
1381:../Dave/Generated/FREERTOS/tasks.c **** 					/* The task being queried is referenced from the deleted
1382:../Dave/Generated/FREERTOS/tasks.c **** 					tasks list, or it is not referenced from any lists at
1383:../Dave/Generated/FREERTOS/tasks.c **** 					all. */
1384:../Dave/Generated/FREERTOS/tasks.c **** 					eReturn = eDeleted;
 1199              	 .loc 1 1384 0 is_stmt 1
 1200 0088 0423     	 movs r3,#4
 1201 008a FB75     	 strb r3,[r7,#23]
 1202 008c 01E0     	 b .L64
 1203              	.L71:
1385:../Dave/Generated/FREERTOS/tasks.c **** 				}
1386:../Dave/Generated/FREERTOS/tasks.c **** 			#endif
1387:../Dave/Generated/FREERTOS/tasks.c **** 
1388:../Dave/Generated/FREERTOS/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1389:../Dave/Generated/FREERTOS/tasks.c **** 			{
1390:../Dave/Generated/FREERTOS/tasks.c **** 				/* If the task is not in any other state, it must be in the
1391:../Dave/Generated/FREERTOS/tasks.c **** 				Ready (including pending ready) state. */
1392:../Dave/Generated/FREERTOS/tasks.c **** 				eReturn = eReady;
 1204              	 .loc 1 1392 0
 1205 008e 0123     	 movs r3,#1
 1206 0090 FB75     	 strb r3,[r7,#23]
 1207              	.L64:
1393:../Dave/Generated/FREERTOS/tasks.c **** 			}
1394:../Dave/Generated/FREERTOS/tasks.c **** 		}
1395:../Dave/Generated/FREERTOS/tasks.c **** 
1396:../Dave/Generated/FREERTOS/tasks.c **** 		return eReturn;
 1208              	 .loc 1 1396 0
 1209 0092 FB7D     	 ldrb r3,[r7,#23]
1397:../Dave/Generated/FREERTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1210              	 .loc 1 1397 0
 1211 0094 1846     	 mov r0,r3
 1212 0096 1837     	 adds r7,r7,#24
 1213              	 .cfi_def_cfa_offset 8
 1214 0098 BD46     	 mov sp,r7
 1215              	 .cfi_def_cfa_register 13
 1216              	 
 1217 009a 80BD     	 pop {r7,pc}
 1218              	.L74:
 1219              	 .align 2
 1220              	.L73:
 1221 009c 00000000 	 .word pxCurrentTCB
 1222 00a0 00000000 	 .word pxDelayedTaskList
 1223 00a4 00000000 	 .word pxOverflowDelayedTaskList
 1224 00a8 00000000 	 .word xSuspendedTaskList
 1225 00ac 00000000 	 .word xTasksWaitingTermination
 1226              	 .cfi_endproc
 1227              	.LFE143:
 1229              	 .section .text.uxTaskPriorityGet,"ax",%progbits
 1230              	 .align 2
 1231              	 .global uxTaskPriorityGet
 1232              	 .thumb
 1233              	 .thumb_func
 1235              	uxTaskPriorityGet:
 1236              	.LFB144:
1398:../Dave/Generated/FREERTOS/tasks.c **** 
1399:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1400:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1401:../Dave/Generated/FREERTOS/tasks.c **** 
1402:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1403:../Dave/Generated/FREERTOS/tasks.c **** 
1404:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1405:../Dave/Generated/FREERTOS/tasks.c **** 	{
 1237              	 .loc 1 1405 0
 1238              	 .cfi_startproc
 1239              	 
 1240              	 
 1241 0000 80B5     	 push {r7,lr}
 1242              	 .cfi_def_cfa_offset 8
 1243              	 .cfi_offset 7,-8
 1244              	 .cfi_offset 14,-4
 1245 0002 84B0     	 sub sp,sp,#16
 1246              	 .cfi_def_cfa_offset 24
 1247 0004 00AF     	 add r7,sp,#0
 1248              	 .cfi_def_cfa_register 7
 1249 0006 7860     	 str r0,[r7,#4]
1406:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
1407:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxReturn;
1408:../Dave/Generated/FREERTOS/tasks.c **** 
1409:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
 1250              	 .loc 1 1409 0
 1251 0008 FFF7FEFF 	 bl vPortEnterCritical
1410:../Dave/Generated/FREERTOS/tasks.c **** 		{
1411:../Dave/Generated/FREERTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1412:../Dave/Generated/FREERTOS/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1413:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1252              	 .loc 1 1413 0
 1253 000c 7B68     	 ldr r3,[r7,#4]
 1254 000e 002B     	 cmp r3,#0
 1255 0010 02D1     	 bne .L76
 1256              	 .loc 1 1413 0 is_stmt 0 discriminator 1
 1257 0012 074B     	 ldr r3,.L79
 1258 0014 1B68     	 ldr r3,[r3]
 1259 0016 00E0     	 b .L77
 1260              	.L76:
 1261              	 .loc 1 1413 0 discriminator 2
 1262 0018 7B68     	 ldr r3,[r7,#4]
 1263              	.L77:
 1264              	 .loc 1 1413 0 discriminator 4
 1265 001a FB60     	 str r3,[r7,#12]
1414:../Dave/Generated/FREERTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1266              	 .loc 1 1414 0 is_stmt 1 discriminator 4
 1267 001c FB68     	 ldr r3,[r7,#12]
 1268 001e DB6A     	 ldr r3,[r3,#44]
 1269 0020 BB60     	 str r3,[r7,#8]
1415:../Dave/Generated/FREERTOS/tasks.c **** 		}
1416:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
 1270              	 .loc 1 1416 0 discriminator 4
 1271 0022 FFF7FEFF 	 bl vPortExitCritical
1417:../Dave/Generated/FREERTOS/tasks.c **** 
1418:../Dave/Generated/FREERTOS/tasks.c **** 		return uxReturn;
 1272              	 .loc 1 1418 0 discriminator 4
 1273 0026 BB68     	 ldr r3,[r7,#8]
1419:../Dave/Generated/FREERTOS/tasks.c **** 	}
 1274              	 .loc 1 1419 0 discriminator 4
 1275 0028 1846     	 mov r0,r3
 1276 002a 1037     	 adds r7,r7,#16
 1277              	 .cfi_def_cfa_offset 8
 1278 002c BD46     	 mov sp,r7
 1279              	 .cfi_def_cfa_register 13
 1280              	 
 1281 002e 80BD     	 pop {r7,pc}
 1282              	.L80:
 1283              	 .align 2
 1284              	.L79:
 1285 0030 00000000 	 .word pxCurrentTCB
 1286              	 .cfi_endproc
 1287              	.LFE144:
 1289              	 .section .text.uxTaskPriorityGetFromISR,"ax",%progbits
 1290              	 .align 2
 1291              	 .global uxTaskPriorityGetFromISR
 1292              	 .thumb
 1293              	 .thumb_func
 1295              	uxTaskPriorityGetFromISR:
 1296              	.LFB145:
1420:../Dave/Generated/FREERTOS/tasks.c **** 
1421:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1422:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1423:../Dave/Generated/FREERTOS/tasks.c **** 
1424:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1425:../Dave/Generated/FREERTOS/tasks.c **** 
1426:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1427:../Dave/Generated/FREERTOS/tasks.c **** 	{
 1297              	 .loc 1 1427 0
 1298              	 .cfi_startproc
 1299              	 
 1300              	 
 1301 0000 80B5     	 push {r7,lr}
 1302              	 .cfi_def_cfa_offset 8
 1303              	 .cfi_offset 7,-8
 1304              	 .cfi_offset 14,-4
 1305 0002 88B0     	 sub sp,sp,#32
 1306              	 .cfi_def_cfa_offset 40
 1307 0004 00AF     	 add r7,sp,#0
 1308              	 .cfi_def_cfa_register 7
 1309 0006 7860     	 str r0,[r7,#4]
1428:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
1429:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1430:../Dave/Generated/FREERTOS/tasks.c **** 
1431:../Dave/Generated/FREERTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1432:../Dave/Generated/FREERTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1433:../Dave/Generated/FREERTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1434:../Dave/Generated/FREERTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1435:../Dave/Generated/FREERTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1436:../Dave/Generated/FREERTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
1437:../Dave/Generated/FREERTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1438:../Dave/Generated/FREERTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1439:../Dave/Generated/FREERTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
1440:../Dave/Generated/FREERTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1441:../Dave/Generated/FREERTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1442:../Dave/Generated/FREERTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1443:../Dave/Generated/FREERTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1444:../Dave/Generated/FREERTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1445:../Dave/Generated/FREERTOS/tasks.c **** 		provided on the following link:
1446:../Dave/Generated/FREERTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1447:../Dave/Generated/FREERTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1310              	 .loc 1 1447 0
 1311 0008 FFF7FEFF 	 bl vPortValidateInterruptPriority
 1312              	.LBB127:
 1313              	.LBB128:
 196:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 197:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		"	isb														\n" \
 200:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		"	dsb														\n" \
 201:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	);
 203:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** }
 204:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 205:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 206:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 207:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** {
 209:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 211:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	__asm volatile
 1314              	 .loc 2 211 0
 1315              	
 1316 000c EFF31182 	 mrs r2,basepri
 1317 0010 4FF0FC03 	 mov r3,#252
 1318 0014 83F31188 	 msr basepri,r3
 1319 0018 BFF36F8F 	 isb 
 1320 001c BFF34F8F 	 dsb 
 1321              	
 1322              	
 1323              	 .thumb
 1324 0020 3A61     	 str r2,[r7,#16]
 1325 0022 FB60     	 str r3,[r7,#12]
 212:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 213:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		"	isb														\n" \
 217:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		"	dsb														\n" \
 218:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	);
 220:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 221:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	warnings. */
 223:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	return ulOriginalBASEPRI;
 1326              	 .loc 2 223 0
 1327 0024 3B69     	 ldr r3,[r7,#16]
 1328              	.LBE128:
 1329              	.LBE127:
1448:../Dave/Generated/FREERTOS/tasks.c **** 
1449:../Dave/Generated/FREERTOS/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1330              	 .loc 1 1449 0
 1331 0026 FB61     	 str r3,[r7,#28]
1450:../Dave/Generated/FREERTOS/tasks.c **** 		{
1451:../Dave/Generated/FREERTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1452:../Dave/Generated/FREERTOS/tasks.c **** 			task that is being queried. */
1453:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1332              	 .loc 1 1453 0
 1333 0028 7B68     	 ldr r3,[r7,#4]
 1334 002a 002B     	 cmp r3,#0
 1335 002c 02D1     	 bne .L83
 1336              	 .loc 1 1453 0 is_stmt 0 discriminator 1
 1337 002e 094B     	 ldr r3,.L86
 1338 0030 1B68     	 ldr r3,[r3]
 1339 0032 00E0     	 b .L84
 1340              	.L83:
 1341              	 .loc 1 1453 0 discriminator 2
 1342 0034 7B68     	 ldr r3,[r7,#4]
 1343              	.L84:
 1344              	 .loc 1 1453 0 discriminator 4
 1345 0036 BB61     	 str r3,[r7,#24]
1454:../Dave/Generated/FREERTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1346              	 .loc 1 1454 0 is_stmt 1 discriminator 4
 1347 0038 BB69     	 ldr r3,[r7,#24]
 1348 003a DB6A     	 ldr r3,[r3,#44]
 1349 003c 7B61     	 str r3,[r7,#20]
 1350 003e FB69     	 ldr r3,[r7,#28]
 1351 0040 BB60     	 str r3,[r7,#8]
 1352              	.LBB129:
 1353              	.LBB130:
 224:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** }
 225:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** /*-----------------------------------------------------------*/
 226:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 
 227:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** {
 229:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	__asm volatile
 1354              	 .loc 2 229 0 discriminator 4
 1355 0042 BB68     	 ldr r3,[r7,#8]
 1356              	
 1357 0044 83F31188 	 msr basepri,r3
 1358              	
 1359              	 .thumb
 1360              	.LBE130:
 1361              	.LBE129:
1455:../Dave/Generated/FREERTOS/tasks.c **** 		}
1456:../Dave/Generated/FREERTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1457:../Dave/Generated/FREERTOS/tasks.c **** 
1458:../Dave/Generated/FREERTOS/tasks.c **** 		return uxReturn;
 1362              	 .loc 1 1458 0 discriminator 4
 1363 0048 7B69     	 ldr r3,[r7,#20]
1459:../Dave/Generated/FREERTOS/tasks.c **** 	}
 1364              	 .loc 1 1459 0 discriminator 4
 1365 004a 1846     	 mov r0,r3
 1366 004c 2037     	 adds r7,r7,#32
 1367              	 .cfi_def_cfa_offset 8
 1368 004e BD46     	 mov sp,r7
 1369              	 .cfi_def_cfa_register 13
 1370              	 
 1371 0050 80BD     	 pop {r7,pc}
 1372              	.L87:
 1373 0052 00BF     	 .align 2
 1374              	.L86:
 1375 0054 00000000 	 .word pxCurrentTCB
 1376              	 .cfi_endproc
 1377              	.LFE145:
 1379              	 .section .text.vTaskPrioritySet,"ax",%progbits
 1380              	 .align 2
 1381              	 .global vTaskPrioritySet
 1382              	 .thumb
 1383              	 .thumb_func
 1385              	vTaskPrioritySet:
 1386              	.LFB146:
1460:../Dave/Generated/FREERTOS/tasks.c **** 
1461:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1462:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1463:../Dave/Generated/FREERTOS/tasks.c **** 
1464:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1465:../Dave/Generated/FREERTOS/tasks.c **** 
1466:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1467:../Dave/Generated/FREERTOS/tasks.c **** 	{
 1387              	 .loc 1 1467 0
 1388              	 .cfi_startproc
 1389              	 
 1390              	 
 1391 0000 80B5     	 push {r7,lr}
 1392              	 .cfi_def_cfa_offset 8
 1393              	 .cfi_offset 7,-8
 1394              	 .cfi_offset 14,-4
 1395 0002 88B0     	 sub sp,sp,#32
 1396              	 .cfi_def_cfa_offset 40
 1397 0004 00AF     	 add r7,sp,#0
 1398              	 .cfi_def_cfa_register 7
 1399 0006 7860     	 str r0,[r7,#4]
 1400 0008 3960     	 str r1,[r7]
1468:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
1469:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1470:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1401              	 .loc 1 1470 0
 1402 000a 0023     	 movs r3,#0
 1403 000c FB61     	 str r3,[r7,#28]
1471:../Dave/Generated/FREERTOS/tasks.c **** 
1472:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1404              	 .loc 1 1472 0
 1405 000e 3B68     	 ldr r3,[r7]
 1406 0010 042B     	 cmp r3,#4
 1407 0012 09D9     	 bls .L89
 1408              	.LBB131:
 1409              	.LBB132:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 1410              	 .loc 2 195 0 discriminator 1
 1411              	
 1412 0014 4FF0FC03 	 mov r3,#252
 1413 0018 83F31188 	 msr basepri,r3
 1414 001c BFF36F8F 	 isb 
 1415 0020 BFF34F8F 	 dsb 
 1416              	
 1417              	
 1418              	 .thumb
 1419 0024 FB60     	 str r3,[r7,#12]
 1420              	.L90:
 1421              	.LBE132:
 1422              	.LBE131:
 1423              	 .loc 1 1472 0 discriminator 1
 1424 0026 FEE7     	 b .L90
 1425              	.L89:
1473:../Dave/Generated/FREERTOS/tasks.c **** 
1474:../Dave/Generated/FREERTOS/tasks.c **** 		/* Ensure the new priority is valid. */
1475:../Dave/Generated/FREERTOS/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1426              	 .loc 1 1475 0
 1427 0028 3B68     	 ldr r3,[r7]
 1428 002a 042B     	 cmp r3,#4
 1429 002c 01D9     	 bls .L91
1476:../Dave/Generated/FREERTOS/tasks.c **** 		{
1477:../Dave/Generated/FREERTOS/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1430              	 .loc 1 1477 0
 1431 002e 0423     	 movs r3,#4
 1432 0030 3B60     	 str r3,[r7]
 1433              	.L91:
1478:../Dave/Generated/FREERTOS/tasks.c **** 		}
1479:../Dave/Generated/FREERTOS/tasks.c **** 		else
1480:../Dave/Generated/FREERTOS/tasks.c **** 		{
1481:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1482:../Dave/Generated/FREERTOS/tasks.c **** 		}
1483:../Dave/Generated/FREERTOS/tasks.c **** 
1484:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
 1434              	 .loc 1 1484 0
 1435 0032 FFF7FEFF 	 bl vPortEnterCritical
1485:../Dave/Generated/FREERTOS/tasks.c **** 		{
1486:../Dave/Generated/FREERTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1487:../Dave/Generated/FREERTOS/tasks.c **** 			task that is being changed. */
1488:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1436              	 .loc 1 1488 0
 1437 0036 7B68     	 ldr r3,[r7,#4]
 1438 0038 002B     	 cmp r3,#0
 1439 003a 02D1     	 bne .L92
 1440              	 .loc 1 1488 0 is_stmt 0 discriminator 1
 1441 003c 434B     	 ldr r3,.L103
 1442 003e 1B68     	 ldr r3,[r3]
 1443 0040 00E0     	 b .L93
 1444              	.L92:
 1445              	 .loc 1 1488 0 discriminator 2
 1446 0042 7B68     	 ldr r3,[r7,#4]
 1447              	.L93:
 1448              	 .loc 1 1488 0 discriminator 4
 1449 0044 BB61     	 str r3,[r7,#24]
1489:../Dave/Generated/FREERTOS/tasks.c **** 
1490:../Dave/Generated/FREERTOS/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1491:../Dave/Generated/FREERTOS/tasks.c **** 
1492:../Dave/Generated/FREERTOS/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1493:../Dave/Generated/FREERTOS/tasks.c **** 			{
1494:../Dave/Generated/FREERTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1450              	 .loc 1 1494 0 is_stmt 1 discriminator 4
 1451 0046 BB69     	 ldr r3,[r7,#24]
 1452 0048 DB6C     	 ldr r3,[r3,#76]
 1453 004a 7B61     	 str r3,[r7,#20]
1495:../Dave/Generated/FREERTOS/tasks.c **** 			}
1496:../Dave/Generated/FREERTOS/tasks.c **** 			#else
1497:../Dave/Generated/FREERTOS/tasks.c **** 			{
1498:../Dave/Generated/FREERTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1499:../Dave/Generated/FREERTOS/tasks.c **** 			}
1500:../Dave/Generated/FREERTOS/tasks.c **** 			#endif
1501:../Dave/Generated/FREERTOS/tasks.c **** 
1502:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1454              	 .loc 1 1502 0 discriminator 4
 1455 004c 7A69     	 ldr r2,[r7,#20]
 1456 004e 3B68     	 ldr r3,[r7]
 1457 0050 9A42     	 cmp r2,r3
 1458 0052 76D0     	 beq .L94
1503:../Dave/Generated/FREERTOS/tasks.c **** 			{
1504:../Dave/Generated/FREERTOS/tasks.c **** 				/* The priority change may have readied a task of higher
1505:../Dave/Generated/FREERTOS/tasks.c **** 				priority than the calling task. */
1506:../Dave/Generated/FREERTOS/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1459              	 .loc 1 1506 0
 1460 0054 3A68     	 ldr r2,[r7]
 1461 0056 7B69     	 ldr r3,[r7,#20]
 1462 0058 9A42     	 cmp r2,r3
 1463 005a 0DD9     	 bls .L95
1507:../Dave/Generated/FREERTOS/tasks.c **** 				{
1508:../Dave/Generated/FREERTOS/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1464              	 .loc 1 1508 0
 1465 005c 3B4B     	 ldr r3,.L103
 1466 005e 1B68     	 ldr r3,[r3]
 1467 0060 BA69     	 ldr r2,[r7,#24]
 1468 0062 9A42     	 cmp r2,r3
 1469 0064 0FD0     	 beq .L96
1509:../Dave/Generated/FREERTOS/tasks.c **** 					{
1510:../Dave/Generated/FREERTOS/tasks.c **** 						/* The priority of a task other than the currently
1511:../Dave/Generated/FREERTOS/tasks.c **** 						running task is being raised.  Is the priority being
1512:../Dave/Generated/FREERTOS/tasks.c **** 						raised above that of the running task? */
1513:../Dave/Generated/FREERTOS/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1470              	 .loc 1 1513 0
 1471 0066 394B     	 ldr r3,.L103
 1472 0068 1B68     	 ldr r3,[r3]
 1473 006a DA6A     	 ldr r2,[r3,#44]
 1474 006c 3B68     	 ldr r3,[r7]
 1475 006e 9A42     	 cmp r2,r3
 1476 0070 09D8     	 bhi .L96
1514:../Dave/Generated/FREERTOS/tasks.c **** 						{
1515:../Dave/Generated/FREERTOS/tasks.c **** 							xYieldRequired = pdTRUE;
 1477              	 .loc 1 1515 0
 1478 0072 0123     	 movs r3,#1
 1479 0074 FB61     	 str r3,[r7,#28]
 1480 0076 06E0     	 b .L96
 1481              	.L95:
1516:../Dave/Generated/FREERTOS/tasks.c **** 						}
1517:../Dave/Generated/FREERTOS/tasks.c **** 						else
1518:../Dave/Generated/FREERTOS/tasks.c **** 						{
1519:../Dave/Generated/FREERTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1520:../Dave/Generated/FREERTOS/tasks.c **** 						}
1521:../Dave/Generated/FREERTOS/tasks.c **** 					}
1522:../Dave/Generated/FREERTOS/tasks.c **** 					else
1523:../Dave/Generated/FREERTOS/tasks.c **** 					{
1524:../Dave/Generated/FREERTOS/tasks.c **** 						/* The priority of the running task is being raised,
1525:../Dave/Generated/FREERTOS/tasks.c **** 						but the running task must already be the highest
1526:../Dave/Generated/FREERTOS/tasks.c **** 						priority task able to run so no yield is required. */
1527:../Dave/Generated/FREERTOS/tasks.c **** 					}
1528:../Dave/Generated/FREERTOS/tasks.c **** 				}
1529:../Dave/Generated/FREERTOS/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1482              	 .loc 1 1529 0
 1483 0078 344B     	 ldr r3,.L103
 1484 007a 1B68     	 ldr r3,[r3]
 1485 007c BA69     	 ldr r2,[r7,#24]
 1486 007e 9A42     	 cmp r2,r3
 1487 0080 01D1     	 bne .L96
1530:../Dave/Generated/FREERTOS/tasks.c **** 				{
1531:../Dave/Generated/FREERTOS/tasks.c **** 					/* Setting the priority of the running task down means
1532:../Dave/Generated/FREERTOS/tasks.c **** 					there may now be another task of higher priority that
1533:../Dave/Generated/FREERTOS/tasks.c **** 					is ready to execute. */
1534:../Dave/Generated/FREERTOS/tasks.c **** 					xYieldRequired = pdTRUE;
 1488              	 .loc 1 1534 0
 1489 0082 0123     	 movs r3,#1
 1490 0084 FB61     	 str r3,[r7,#28]
 1491              	.L96:
1535:../Dave/Generated/FREERTOS/tasks.c **** 				}
1536:../Dave/Generated/FREERTOS/tasks.c **** 				else
1537:../Dave/Generated/FREERTOS/tasks.c **** 				{
1538:../Dave/Generated/FREERTOS/tasks.c **** 					/* Setting the priority of any other task down does not
1539:../Dave/Generated/FREERTOS/tasks.c **** 					require a yield as the running task must be above the
1540:../Dave/Generated/FREERTOS/tasks.c **** 					new priority of the task being modified. */
1541:../Dave/Generated/FREERTOS/tasks.c **** 				}
1542:../Dave/Generated/FREERTOS/tasks.c **** 
1543:../Dave/Generated/FREERTOS/tasks.c **** 				/* Remember the ready list the task might be referenced from
1544:../Dave/Generated/FREERTOS/tasks.c **** 				before its uxPriority member is changed so the
1545:../Dave/Generated/FREERTOS/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1546:../Dave/Generated/FREERTOS/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1492              	 .loc 1 1546 0
 1493 0086 BB69     	 ldr r3,[r7,#24]
 1494 0088 DB6A     	 ldr r3,[r3,#44]
 1495 008a 3B61     	 str r3,[r7,#16]
1547:../Dave/Generated/FREERTOS/tasks.c **** 
1548:../Dave/Generated/FREERTOS/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1549:../Dave/Generated/FREERTOS/tasks.c **** 				{
1550:../Dave/Generated/FREERTOS/tasks.c **** 					/* Only change the priority being used if the task is not
1551:../Dave/Generated/FREERTOS/tasks.c **** 					currently using an inherited priority. */
1552:../Dave/Generated/FREERTOS/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1496              	 .loc 1 1552 0
 1497 008c BB69     	 ldr r3,[r7,#24]
 1498 008e DA6C     	 ldr r2,[r3,#76]
 1499 0090 BB69     	 ldr r3,[r7,#24]
 1500 0092 DB6A     	 ldr r3,[r3,#44]
 1501 0094 9A42     	 cmp r2,r3
 1502 0096 02D1     	 bne .L97
1553:../Dave/Generated/FREERTOS/tasks.c **** 					{
1554:../Dave/Generated/FREERTOS/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1503              	 .loc 1 1554 0
 1504 0098 BB69     	 ldr r3,[r7,#24]
 1505 009a 3A68     	 ldr r2,[r7]
 1506 009c DA62     	 str r2,[r3,#44]
 1507              	.L97:
1555:../Dave/Generated/FREERTOS/tasks.c **** 					}
1556:../Dave/Generated/FREERTOS/tasks.c **** 					else
1557:../Dave/Generated/FREERTOS/tasks.c **** 					{
1558:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1559:../Dave/Generated/FREERTOS/tasks.c **** 					}
1560:../Dave/Generated/FREERTOS/tasks.c **** 
1561:../Dave/Generated/FREERTOS/tasks.c **** 					/* The base priority gets set whatever. */
1562:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1508              	 .loc 1 1562 0
 1509 009e BB69     	 ldr r3,[r7,#24]
 1510 00a0 3A68     	 ldr r2,[r7]
 1511 00a2 DA64     	 str r2,[r3,#76]
1563:../Dave/Generated/FREERTOS/tasks.c **** 				}
1564:../Dave/Generated/FREERTOS/tasks.c **** 				#else
1565:../Dave/Generated/FREERTOS/tasks.c **** 				{
1566:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1567:../Dave/Generated/FREERTOS/tasks.c **** 				}
1568:../Dave/Generated/FREERTOS/tasks.c **** 				#endif
1569:../Dave/Generated/FREERTOS/tasks.c **** 
1570:../Dave/Generated/FREERTOS/tasks.c **** 				/* Only reset the event list item value if the value is not
1571:../Dave/Generated/FREERTOS/tasks.c **** 				being used for anything else. */
1572:../Dave/Generated/FREERTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1512              	 .loc 1 1572 0
 1513 00a4 BB69     	 ldr r3,[r7,#24]
 1514 00a6 9B69     	 ldr r3,[r3,#24]
 1515 00a8 002B     	 cmp r3,#0
 1516 00aa 04DB     	 blt .L98
1573:../Dave/Generated/FREERTOS/tasks.c **** 				{
1574:../Dave/Generated/FREERTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1517              	 .loc 1 1574 0
 1518 00ac 3B68     	 ldr r3,[r7]
 1519 00ae C3F10502 	 rsb r2,r3,#5
 1520 00b2 BB69     	 ldr r3,[r7,#24]
 1521 00b4 9A61     	 str r2,[r3,#24]
 1522              	.L98:
1575:../Dave/Generated/FREERTOS/tasks.c **** 				}
1576:../Dave/Generated/FREERTOS/tasks.c **** 				else
1577:../Dave/Generated/FREERTOS/tasks.c **** 				{
1578:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1579:../Dave/Generated/FREERTOS/tasks.c **** 				}
1580:../Dave/Generated/FREERTOS/tasks.c **** 
1581:../Dave/Generated/FREERTOS/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1582:../Dave/Generated/FREERTOS/tasks.c **** 				nothing more than change its priority variable. However, if
1583:../Dave/Generated/FREERTOS/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1584:../Dave/Generated/FREERTOS/tasks.c **** 				in the list appropriate to its new priority. */
1585:../Dave/Generated/FREERTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1523              	 .loc 1 1585 0
 1524 00b6 BB69     	 ldr r3,[r7,#24]
 1525 00b8 5969     	 ldr r1,[r3,#20]
 1526 00ba 3A69     	 ldr r2,[r7,#16]
 1527 00bc 1346     	 mov r3,r2
 1528 00be 9B00     	 lsls r3,r3,#2
 1529 00c0 1344     	 add r3,r3,r2
 1530 00c2 9B00     	 lsls r3,r3,#2
 1531 00c4 224A     	 ldr r2,.L103+4
 1532 00c6 1344     	 add r3,r3,r2
 1533 00c8 9942     	 cmp r1,r3
 1534 00ca 01D1     	 bne .L99
 1535              	 .loc 1 1585 0 is_stmt 0 discriminator 1
 1536 00cc 0123     	 movs r3,#1
 1537 00ce 00E0     	 b .L100
 1538              	.L99:
 1539              	 .loc 1 1585 0 discriminator 2
 1540 00d0 0023     	 movs r3,#0
 1541              	.L100:
 1542              	 .loc 1 1585 0 discriminator 4
 1543 00d2 002B     	 cmp r3,#0
 1544 00d4 2AD0     	 beq .L101
1586:../Dave/Generated/FREERTOS/tasks.c **** 				{
1587:../Dave/Generated/FREERTOS/tasks.c **** 					/* The task is currently in its ready list - remove before
1588:../Dave/Generated/FREERTOS/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1589:../Dave/Generated/FREERTOS/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1590:../Dave/Generated/FREERTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1545              	 .loc 1 1590 0 is_stmt 1
 1546 00d6 BB69     	 ldr r3,[r7,#24]
 1547 00d8 0433     	 adds r3,r3,#4
 1548 00da 1846     	 mov r0,r3
 1549 00dc FFF7FEFF 	 bl uxListRemove
 1550 00e0 0346     	 mov r3,r0
 1551 00e2 002B     	 cmp r3,#0
 1552 00e4 09D1     	 bne .L102
1591:../Dave/Generated/FREERTOS/tasks.c **** 					{
1592:../Dave/Generated/FREERTOS/tasks.c **** 						/* It is known that the task is in its ready list so
1593:../Dave/Generated/FREERTOS/tasks.c **** 						there is no need to check again and the port level
1594:../Dave/Generated/FREERTOS/tasks.c **** 						reset macro can be called directly. */
1595:../Dave/Generated/FREERTOS/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 1553              	 .loc 1 1595 0
 1554 00e6 3B69     	 ldr r3,[r7,#16]
 1555 00e8 0122     	 movs r2,#1
 1556 00ea 02FA03F3 	 lsl r3,r2,r3
 1557 00ee DA43     	 mvns r2,r3
 1558 00f0 184B     	 ldr r3,.L103+8
 1559 00f2 1B68     	 ldr r3,[r3]
 1560 00f4 1340     	 ands r3,r3,r2
 1561 00f6 174A     	 ldr r2,.L103+8
 1562 00f8 1360     	 str r3,[r2]
 1563              	.L102:
1596:../Dave/Generated/FREERTOS/tasks.c **** 					}
1597:../Dave/Generated/FREERTOS/tasks.c **** 					else
1598:../Dave/Generated/FREERTOS/tasks.c **** 					{
1599:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1600:../Dave/Generated/FREERTOS/tasks.c **** 					}
1601:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1564              	 .loc 1 1601 0
 1565 00fa BB69     	 ldr r3,[r7,#24]
 1566 00fc DB6A     	 ldr r3,[r3,#44]
 1567 00fe 1A46     	 mov r2,r3
 1568 0100 0123     	 movs r3,#1
 1569 0102 03FA02F2 	 lsl r2,r3,r2
 1570 0106 134B     	 ldr r3,.L103+8
 1571 0108 1B68     	 ldr r3,[r3]
 1572 010a 1343     	 orrs r3,r3,r2
 1573 010c 114A     	 ldr r2,.L103+8
 1574 010e 1360     	 str r3,[r2]
 1575 0110 BB69     	 ldr r3,[r7,#24]
 1576 0112 DA6A     	 ldr r2,[r3,#44]
 1577 0114 1346     	 mov r3,r2
 1578 0116 9B00     	 lsls r3,r3,#2
 1579 0118 1344     	 add r3,r3,r2
 1580 011a 9B00     	 lsls r3,r3,#2
 1581 011c 0C4A     	 ldr r2,.L103+4
 1582 011e 1A44     	 add r2,r2,r3
 1583 0120 BB69     	 ldr r3,[r7,#24]
 1584 0122 0433     	 adds r3,r3,#4
 1585 0124 1046     	 mov r0,r2
 1586 0126 1946     	 mov r1,r3
 1587 0128 FFF7FEFF 	 bl vListInsertEnd
 1588              	.L101:
1602:../Dave/Generated/FREERTOS/tasks.c **** 				}
1603:../Dave/Generated/FREERTOS/tasks.c **** 				else
1604:../Dave/Generated/FREERTOS/tasks.c **** 				{
1605:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1606:../Dave/Generated/FREERTOS/tasks.c **** 				}
1607:../Dave/Generated/FREERTOS/tasks.c **** 
1608:../Dave/Generated/FREERTOS/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1589              	 .loc 1 1608 0
 1590 012c FB69     	 ldr r3,[r7,#28]
 1591 012e 002B     	 cmp r3,#0
 1592 0130 07D0     	 beq .L94
1609:../Dave/Generated/FREERTOS/tasks.c **** 				{
1610:../Dave/Generated/FREERTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1593              	 .loc 1 1610 0
 1594 0132 094B     	 ldr r3,.L103+12
 1595 0134 4FF08052 	 mov r2,#268435456
 1596 0138 1A60     	 str r2,[r3]
 1597              	
 1598 013a BFF34F8F 	 dsb
 1599              	
 1600              	
 1601 013e BFF36F8F 	 isb
 1602              	
 1603              	 .thumb
 1604              	.L94:
1611:../Dave/Generated/FREERTOS/tasks.c **** 				}
1612:../Dave/Generated/FREERTOS/tasks.c **** 				else
1613:../Dave/Generated/FREERTOS/tasks.c **** 				{
1614:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1615:../Dave/Generated/FREERTOS/tasks.c **** 				}
1616:../Dave/Generated/FREERTOS/tasks.c **** 
1617:../Dave/Generated/FREERTOS/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1618:../Dave/Generated/FREERTOS/tasks.c **** 				optimised task selection is not being used. */
1619:../Dave/Generated/FREERTOS/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1620:../Dave/Generated/FREERTOS/tasks.c **** 			}
1621:../Dave/Generated/FREERTOS/tasks.c **** 		}
1622:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
 1605              	 .loc 1 1622 0
 1606 0142 FFF7FEFF 	 bl vPortExitCritical
1623:../Dave/Generated/FREERTOS/tasks.c **** 	}
 1607              	 .loc 1 1623 0
 1608 0146 2037     	 adds r7,r7,#32
 1609              	 .cfi_def_cfa_offset 8
 1610 0148 BD46     	 mov sp,r7
 1611              	 .cfi_def_cfa_register 13
 1612              	 
 1613 014a 80BD     	 pop {r7,pc}
 1614              	.L104:
 1615              	 .align 2
 1616              	.L103:
 1617 014c 00000000 	 .word pxCurrentTCB
 1618 0150 00000000 	 .word pxReadyTasksLists
 1619 0154 00000000 	 .word uxTopReadyPriority
 1620 0158 04ED00E0 	 .word -536810236
 1621              	 .cfi_endproc
 1622              	.LFE146:
 1624              	 .section .text.vTaskSuspend,"ax",%progbits
 1625              	 .align 2
 1626              	 .global vTaskSuspend
 1627              	 .thumb
 1628              	 .thumb_func
 1630              	vTaskSuspend:
 1631              	.LFB147:
1624:../Dave/Generated/FREERTOS/tasks.c **** 
1625:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1626:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1627:../Dave/Generated/FREERTOS/tasks.c **** 
1628:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1629:../Dave/Generated/FREERTOS/tasks.c **** 
1630:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1631:../Dave/Generated/FREERTOS/tasks.c **** 	{
 1632              	 .loc 1 1631 0
 1633              	 .cfi_startproc
 1634              	 
 1635              	 
 1636 0000 80B5     	 push {r7,lr}
 1637              	 .cfi_def_cfa_offset 8
 1638              	 .cfi_offset 7,-8
 1639              	 .cfi_offset 14,-4
 1640 0002 84B0     	 sub sp,sp,#16
 1641              	 .cfi_def_cfa_offset 24
 1642 0004 00AF     	 add r7,sp,#0
 1643              	 .cfi_def_cfa_register 7
 1644 0006 7860     	 str r0,[r7,#4]
1632:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
1633:../Dave/Generated/FREERTOS/tasks.c **** 
1634:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
 1645              	 .loc 1 1634 0
 1646 0008 FFF7FEFF 	 bl vPortEnterCritical
1635:../Dave/Generated/FREERTOS/tasks.c **** 		{
1636:../Dave/Generated/FREERTOS/tasks.c **** 			/* If null is passed in here then it is the running task that is
1637:../Dave/Generated/FREERTOS/tasks.c **** 			being suspended. */
1638:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1647              	 .loc 1 1638 0
 1648 000c 7B68     	 ldr r3,[r7,#4]
 1649 000e 002B     	 cmp r3,#0
 1650 0010 02D1     	 bne .L106
 1651              	 .loc 1 1638 0 is_stmt 0 discriminator 1
 1652 0012 3B4B     	 ldr r3,.L119
 1653 0014 1B68     	 ldr r3,[r3]
 1654 0016 00E0     	 b .L107
 1655              	.L106:
 1656              	 .loc 1 1638 0 discriminator 2
 1657 0018 7B68     	 ldr r3,[r7,#4]
 1658              	.L107:
 1659              	 .loc 1 1638 0 discriminator 4
 1660 001a FB60     	 str r3,[r7,#12]
1639:../Dave/Generated/FREERTOS/tasks.c **** 
1640:../Dave/Generated/FREERTOS/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1641:../Dave/Generated/FREERTOS/tasks.c **** 
1642:../Dave/Generated/FREERTOS/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1643:../Dave/Generated/FREERTOS/tasks.c **** 			suspended list. */
1644:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1661              	 .loc 1 1644 0 is_stmt 1 discriminator 4
 1662 001c FB68     	 ldr r3,[r7,#12]
 1663 001e 0433     	 adds r3,r3,#4
 1664 0020 1846     	 mov r0,r3
 1665 0022 FFF7FEFF 	 bl uxListRemove
 1666 0026 0346     	 mov r3,r0
 1667 0028 002B     	 cmp r3,#0
 1668 002a 15D1     	 bne .L108
1645:../Dave/Generated/FREERTOS/tasks.c **** 			{
1646:../Dave/Generated/FREERTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 1669              	 .loc 1 1646 0
 1670 002c FB68     	 ldr r3,[r7,#12]
 1671 002e DA6A     	 ldr r2,[r3,#44]
 1672 0030 3449     	 ldr r1,.L119+4
 1673 0032 1346     	 mov r3,r2
 1674 0034 9B00     	 lsls r3,r3,#2
 1675 0036 1344     	 add r3,r3,r2
 1676 0038 9B00     	 lsls r3,r3,#2
 1677 003a 0B44     	 add r3,r3,r1
 1678 003c 1B68     	 ldr r3,[r3]
 1679 003e 002B     	 cmp r3,#0
 1680 0040 0AD1     	 bne .L108
 1681              	 .loc 1 1646 0 is_stmt 0 discriminator 1
 1682 0042 FB68     	 ldr r3,[r7,#12]
 1683 0044 DB6A     	 ldr r3,[r3,#44]
 1684 0046 1A46     	 mov r2,r3
 1685 0048 0123     	 movs r3,#1
 1686 004a 9340     	 lsls r3,r3,r2
 1687 004c DA43     	 mvns r2,r3
 1688 004e 2E4B     	 ldr r3,.L119+8
 1689 0050 1B68     	 ldr r3,[r3]
 1690 0052 1340     	 ands r3,r3,r2
 1691 0054 2C4A     	 ldr r2,.L119+8
 1692 0056 1360     	 str r3,[r2]
 1693              	.L108:
1647:../Dave/Generated/FREERTOS/tasks.c **** 			}
1648:../Dave/Generated/FREERTOS/tasks.c **** 			else
1649:../Dave/Generated/FREERTOS/tasks.c **** 			{
1650:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1651:../Dave/Generated/FREERTOS/tasks.c **** 			}
1652:../Dave/Generated/FREERTOS/tasks.c **** 
1653:../Dave/Generated/FREERTOS/tasks.c **** 			/* Is the task waiting on an event also? */
1654:../Dave/Generated/FREERTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1694              	 .loc 1 1654 0 is_stmt 1
 1695 0058 FB68     	 ldr r3,[r7,#12]
 1696 005a 9B6A     	 ldr r3,[r3,#40]
 1697 005c 002B     	 cmp r3,#0
 1698 005e 04D0     	 beq .L110
1655:../Dave/Generated/FREERTOS/tasks.c **** 			{
1656:../Dave/Generated/FREERTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1699              	 .loc 1 1656 0
 1700 0060 FB68     	 ldr r3,[r7,#12]
 1701 0062 1833     	 adds r3,r3,#24
 1702 0064 1846     	 mov r0,r3
 1703 0066 FFF7FEFF 	 bl uxListRemove
 1704              	.L110:
1657:../Dave/Generated/FREERTOS/tasks.c **** 			}
1658:../Dave/Generated/FREERTOS/tasks.c **** 			else
1659:../Dave/Generated/FREERTOS/tasks.c **** 			{
1660:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1661:../Dave/Generated/FREERTOS/tasks.c **** 			}
1662:../Dave/Generated/FREERTOS/tasks.c **** 
1663:../Dave/Generated/FREERTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1705              	 .loc 1 1663 0
 1706 006a FB68     	 ldr r3,[r7,#12]
 1707 006c 0433     	 adds r3,r3,#4
 1708 006e 2748     	 ldr r0,.L119+12
 1709 0070 1946     	 mov r1,r3
 1710 0072 FFF7FEFF 	 bl vListInsertEnd
1664:../Dave/Generated/FREERTOS/tasks.c **** 
1665:../Dave/Generated/FREERTOS/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1666:../Dave/Generated/FREERTOS/tasks.c **** 			{
1667:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1711              	 .loc 1 1667 0
 1712 0076 FB68     	 ldr r3,[r7,#12]
 1713 0078 93F86C30 	 ldrb r3,[r3,#108]
 1714 007c DBB2     	 uxtb r3,r3
 1715 007e 012B     	 cmp r3,#1
 1716 0080 03D1     	 bne .L111
1668:../Dave/Generated/FREERTOS/tasks.c **** 				{
1669:../Dave/Generated/FREERTOS/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1670:../Dave/Generated/FREERTOS/tasks.c **** 					now suspended, so no notification was received. */
1671:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1717              	 .loc 1 1671 0
 1718 0082 FB68     	 ldr r3,[r7,#12]
 1719 0084 0022     	 movs r2,#0
 1720 0086 83F86C20 	 strb r2,[r3,#108]
 1721              	.L111:
1672:../Dave/Generated/FREERTOS/tasks.c **** 				}
1673:../Dave/Generated/FREERTOS/tasks.c **** 			}
1674:../Dave/Generated/FREERTOS/tasks.c **** 			#endif
1675:../Dave/Generated/FREERTOS/tasks.c **** 		}
1676:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
 1722              	 .loc 1 1676 0
 1723 008a FFF7FEFF 	 bl vPortExitCritical
1677:../Dave/Generated/FREERTOS/tasks.c **** 
1678:../Dave/Generated/FREERTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 1724              	 .loc 1 1678 0
 1725 008e 204B     	 ldr r3,.L119+16
 1726 0090 1B68     	 ldr r3,[r3]
 1727 0092 002B     	 cmp r3,#0
 1728 0094 05D0     	 beq .L112
1679:../Dave/Generated/FREERTOS/tasks.c **** 		{
1680:../Dave/Generated/FREERTOS/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1681:../Dave/Generated/FREERTOS/tasks.c **** 			task that is now in the Suspended state. */
1682:../Dave/Generated/FREERTOS/tasks.c **** 			taskENTER_CRITICAL();
 1729              	 .loc 1 1682 0
 1730 0096 FFF7FEFF 	 bl vPortEnterCritical
1683:../Dave/Generated/FREERTOS/tasks.c **** 			{
1684:../Dave/Generated/FREERTOS/tasks.c **** 				prvResetNextTaskUnblockTime();
 1731              	 .loc 1 1684 0
 1732 009a FFF7FEFF 	 bl prvResetNextTaskUnblockTime
1685:../Dave/Generated/FREERTOS/tasks.c **** 			}
1686:../Dave/Generated/FREERTOS/tasks.c **** 			taskEXIT_CRITICAL();
 1733              	 .loc 1 1686 0
 1734 009e FFF7FEFF 	 bl vPortExitCritical
 1735              	.L112:
1687:../Dave/Generated/FREERTOS/tasks.c **** 		}
1688:../Dave/Generated/FREERTOS/tasks.c **** 		else
1689:../Dave/Generated/FREERTOS/tasks.c **** 		{
1690:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1691:../Dave/Generated/FREERTOS/tasks.c **** 		}
1692:../Dave/Generated/FREERTOS/tasks.c **** 
1693:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1736              	 .loc 1 1693 0
 1737 00a2 174B     	 ldr r3,.L119
 1738 00a4 1B68     	 ldr r3,[r3]
 1739 00a6 FA68     	 ldr r2,[r7,#12]
 1740 00a8 9A42     	 cmp r2,r3
 1741 00aa 26D1     	 bne .L105
1694:../Dave/Generated/FREERTOS/tasks.c **** 		{
1695:../Dave/Generated/FREERTOS/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1742              	 .loc 1 1695 0
 1743 00ac 184B     	 ldr r3,.L119+16
 1744 00ae 1B68     	 ldr r3,[r3]
 1745 00b0 002B     	 cmp r3,#0
 1746 00b2 16D0     	 beq .L114
1696:../Dave/Generated/FREERTOS/tasks.c **** 			{
1697:../Dave/Generated/FREERTOS/tasks.c **** 				/* The current task has just been suspended. */
1698:../Dave/Generated/FREERTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 1747              	 .loc 1 1698 0
 1748 00b4 174B     	 ldr r3,.L119+20
 1749 00b6 1B68     	 ldr r3,[r3]
 1750 00b8 002B     	 cmp r3,#0
 1751 00ba 09D0     	 beq .L115
 1752              	.LBB133:
 1753              	.LBB134:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 1754              	 .loc 2 195 0 discriminator 1
 1755              	
 1756 00bc 4FF0FC03 	 mov r3,#252
 1757 00c0 83F31188 	 msr basepri,r3
 1758 00c4 BFF36F8F 	 isb 
 1759 00c8 BFF34F8F 	 dsb 
 1760              	
 1761              	
 1762              	 .thumb
 1763 00cc BB60     	 str r3,[r7,#8]
 1764              	.L116:
 1765              	.LBE134:
 1766              	.LBE133:
 1767              	 .loc 1 1698 0 discriminator 1
 1768 00ce FEE7     	 b .L116
 1769              	.L115:
1699:../Dave/Generated/FREERTOS/tasks.c **** 				portYIELD_WITHIN_API();
 1770              	 .loc 1 1699 0
 1771 00d0 114B     	 ldr r3,.L119+24
 1772 00d2 4FF08052 	 mov r2,#268435456
 1773 00d6 1A60     	 str r2,[r3]
 1774              	
 1775 00d8 BFF34F8F 	 dsb
 1776              	
 1777              	
 1778 00dc BFF36F8F 	 isb
 1779              	
 1780              	 .thumb
 1781 00e0 0BE0     	 b .L105
 1782              	.L114:
1700:../Dave/Generated/FREERTOS/tasks.c **** 			}
1701:../Dave/Generated/FREERTOS/tasks.c **** 			else
1702:../Dave/Generated/FREERTOS/tasks.c **** 			{
1703:../Dave/Generated/FREERTOS/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1704:../Dave/Generated/FREERTOS/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1705:../Dave/Generated/FREERTOS/tasks.c **** 				must be adjusted to point to a different task. */
1706:../Dave/Generated/FREERTOS/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 1783              	 .loc 1 1706 0
 1784 00e2 0A4B     	 ldr r3,.L119+12
 1785 00e4 1A68     	 ldr r2,[r3]
 1786 00e6 0D4B     	 ldr r3,.L119+28
 1787 00e8 1B68     	 ldr r3,[r3]
 1788 00ea 9A42     	 cmp r2,r3
 1789 00ec 03D1     	 bne .L118
1707:../Dave/Generated/FREERTOS/tasks.c **** 				{
1708:../Dave/Generated/FREERTOS/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1709:../Dave/Generated/FREERTOS/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1710:../Dave/Generated/FREERTOS/tasks.c **** 					be set to point to it no matter what its relative priority
1711:../Dave/Generated/FREERTOS/tasks.c **** 					is. */
1712:../Dave/Generated/FREERTOS/tasks.c **** 					pxCurrentTCB = NULL;
 1790              	 .loc 1 1712 0
 1791 00ee 044B     	 ldr r3,.L119
 1792 00f0 0022     	 movs r2,#0
 1793 00f2 1A60     	 str r2,[r3]
 1794 00f4 01E0     	 b .L105
 1795              	.L118:
1713:../Dave/Generated/FREERTOS/tasks.c **** 				}
1714:../Dave/Generated/FREERTOS/tasks.c **** 				else
1715:../Dave/Generated/FREERTOS/tasks.c **** 				{
1716:../Dave/Generated/FREERTOS/tasks.c **** 					vTaskSwitchContext();
 1796              	 .loc 1 1716 0
 1797 00f6 FFF7FEFF 	 bl vTaskSwitchContext
 1798              	.L105:
1717:../Dave/Generated/FREERTOS/tasks.c **** 				}
1718:../Dave/Generated/FREERTOS/tasks.c **** 			}
1719:../Dave/Generated/FREERTOS/tasks.c **** 		}
1720:../Dave/Generated/FREERTOS/tasks.c **** 		else
1721:../Dave/Generated/FREERTOS/tasks.c **** 		{
1722:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1723:../Dave/Generated/FREERTOS/tasks.c **** 		}
1724:../Dave/Generated/FREERTOS/tasks.c **** 	}
 1799              	 .loc 1 1724 0
 1800 00fa 1037     	 adds r7,r7,#16
 1801              	 .cfi_def_cfa_offset 8
 1802 00fc BD46     	 mov sp,r7
 1803              	 .cfi_def_cfa_register 13
 1804              	 
 1805 00fe 80BD     	 pop {r7,pc}
 1806              	.L120:
 1807              	 .align 2
 1808              	.L119:
 1809 0100 00000000 	 .word pxCurrentTCB
 1810 0104 00000000 	 .word pxReadyTasksLists
 1811 0108 00000000 	 .word uxTopReadyPriority
 1812 010c 00000000 	 .word xSuspendedTaskList
 1813 0110 00000000 	 .word xSchedulerRunning
 1814 0114 00000000 	 .word uxSchedulerSuspended
 1815 0118 04ED00E0 	 .word -536810236
 1816 011c 00000000 	 .word uxCurrentNumberOfTasks
 1817              	 .cfi_endproc
 1818              	.LFE147:
 1820              	 .section .text.prvTaskIsTaskSuspended,"ax",%progbits
 1821              	 .align 2
 1822              	 .thumb
 1823              	 .thumb_func
 1825              	prvTaskIsTaskSuspended:
 1826              	.LFB148:
1725:../Dave/Generated/FREERTOS/tasks.c **** 
1726:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1727:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1728:../Dave/Generated/FREERTOS/tasks.c **** 
1729:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1730:../Dave/Generated/FREERTOS/tasks.c **** 
1731:../Dave/Generated/FREERTOS/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1732:../Dave/Generated/FREERTOS/tasks.c **** 	{
 1827              	 .loc 1 1732 0
 1828              	 .cfi_startproc
 1829              	 
 1830              	 
 1831              	 
 1832 0000 80B4     	 push {r7}
 1833              	 .cfi_def_cfa_offset 4
 1834              	 .cfi_offset 7,-4
 1835 0002 87B0     	 sub sp,sp,#28
 1836              	 .cfi_def_cfa_offset 32
 1837 0004 00AF     	 add r7,sp,#0
 1838              	 .cfi_def_cfa_register 7
 1839 0006 7860     	 str r0,[r7,#4]
1733:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 1840              	 .loc 1 1733 0
 1841 0008 0023     	 movs r3,#0
 1842 000a 7B61     	 str r3,[r7,#20]
1734:../Dave/Generated/FREERTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 1843              	 .loc 1 1734 0
 1844 000c 7B68     	 ldr r3,[r7,#4]
 1845 000e 3B61     	 str r3,[r7,#16]
1735:../Dave/Generated/FREERTOS/tasks.c **** 
1736:../Dave/Generated/FREERTOS/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1737:../Dave/Generated/FREERTOS/tasks.c **** 		section. */
1738:../Dave/Generated/FREERTOS/tasks.c **** 
1739:../Dave/Generated/FREERTOS/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1740:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( xTask );
 1846              	 .loc 1 1740 0
 1847 0010 7B68     	 ldr r3,[r7,#4]
 1848 0012 002B     	 cmp r3,#0
 1849 0014 09D1     	 bne .L122
 1850              	.LBB135:
 1851              	.LBB136:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 1852              	 .loc 2 195 0 discriminator 1
 1853              	
 1854 0016 4FF0FC03 	 mov r3,#252
 1855 001a 83F31188 	 msr basepri,r3
 1856 001e BFF36F8F 	 isb 
 1857 0022 BFF34F8F 	 dsb 
 1858              	
 1859              	
 1860              	 .thumb
 1861 0026 FB60     	 str r3,[r7,#12]
 1862              	.L123:
 1863              	.LBE136:
 1864              	.LBE135:
 1865              	 .loc 1 1740 0 discriminator 1
 1866 0028 FEE7     	 b .L123
 1867              	.L122:
1741:../Dave/Generated/FREERTOS/tasks.c **** 
1742:../Dave/Generated/FREERTOS/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1743:../Dave/Generated/FREERTOS/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 1868              	 .loc 1 1743 0
 1869 002a 3B69     	 ldr r3,[r7,#16]
 1870 002c 5B69     	 ldr r3,[r3,#20]
 1871 002e 0F4A     	 ldr r2,.L130
 1872 0030 9342     	 cmp r3,r2
 1873 0032 01D1     	 bne .L124
 1874              	 .loc 1 1743 0 is_stmt 0 discriminator 1
 1875 0034 0123     	 movs r3,#1
 1876 0036 00E0     	 b .L125
 1877              	.L124:
 1878              	 .loc 1 1743 0 discriminator 2
 1879 0038 0023     	 movs r3,#0
 1880              	.L125:
 1881              	 .loc 1 1743 0 discriminator 4
 1882 003a 002B     	 cmp r3,#0
 1883 003c 0FD0     	 beq .L126
1744:../Dave/Generated/FREERTOS/tasks.c **** 		{
1745:../Dave/Generated/FREERTOS/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1746:../Dave/Generated/FREERTOS/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 1884              	 .loc 1 1746 0 is_stmt 1
 1885 003e 3B69     	 ldr r3,[r7,#16]
 1886 0040 9B6A     	 ldr r3,[r3,#40]
 1887 0042 0B4A     	 ldr r2,.L130+4
 1888 0044 9342     	 cmp r3,r2
 1889 0046 0AD0     	 beq .L126
1747:../Dave/Generated/FREERTOS/tasks.c **** 			{
1748:../Dave/Generated/FREERTOS/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1749:../Dave/Generated/FREERTOS/tasks.c **** 				state, or because is is blocked with no timeout? */
1750:../Dave/Generated/FREERTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
 1890              	 .loc 1 1750 0
 1891 0048 3B69     	 ldr r3,[r7,#16]
 1892 004a 9B6A     	 ldr r3,[r3,#40]
 1893 004c 002B     	 cmp r3,#0
 1894 004e 01D1     	 bne .L127
 1895              	 .loc 1 1750 0 is_stmt 0 discriminator 1
 1896 0050 0123     	 movs r3,#1
 1897 0052 00E0     	 b .L128
 1898              	.L127:
 1899              	 .loc 1 1750 0 discriminator 2
 1900 0054 0023     	 movs r3,#0
 1901              	.L128:
 1902              	 .loc 1 1750 0 discriminator 4
 1903 0056 002B     	 cmp r3,#0
 1904 0058 01D0     	 beq .L126
1751:../Dave/Generated/FREERTOS/tasks.c **** 				{
1752:../Dave/Generated/FREERTOS/tasks.c **** 					xReturn = pdTRUE;
 1905              	 .loc 1 1752 0 is_stmt 1
 1906 005a 0123     	 movs r3,#1
 1907 005c 7B61     	 str r3,[r7,#20]
 1908              	.L126:
1753:../Dave/Generated/FREERTOS/tasks.c **** 				}
1754:../Dave/Generated/FREERTOS/tasks.c **** 				else
1755:../Dave/Generated/FREERTOS/tasks.c **** 				{
1756:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1757:../Dave/Generated/FREERTOS/tasks.c **** 				}
1758:../Dave/Generated/FREERTOS/tasks.c **** 			}
1759:../Dave/Generated/FREERTOS/tasks.c **** 			else
1760:../Dave/Generated/FREERTOS/tasks.c **** 			{
1761:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1762:../Dave/Generated/FREERTOS/tasks.c **** 			}
1763:../Dave/Generated/FREERTOS/tasks.c **** 		}
1764:../Dave/Generated/FREERTOS/tasks.c **** 		else
1765:../Dave/Generated/FREERTOS/tasks.c **** 		{
1766:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1767:../Dave/Generated/FREERTOS/tasks.c **** 		}
1768:../Dave/Generated/FREERTOS/tasks.c **** 
1769:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 1909              	 .loc 1 1769 0
 1910 005e 7B69     	 ldr r3,[r7,#20]
1770:../Dave/Generated/FREERTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1911              	 .loc 1 1770 0
 1912 0060 1846     	 mov r0,r3
 1913 0062 1C37     	 adds r7,r7,#28
 1914              	 .cfi_def_cfa_offset 4
 1915 0064 BD46     	 mov sp,r7
 1916              	 .cfi_def_cfa_register 13
 1917              	 
 1918 0066 5DF8047B 	 ldr r7,[sp],#4
 1919              	 .cfi_restore 7
 1920              	 .cfi_def_cfa_offset 0
 1921 006a 7047     	 bx lr
 1922              	.L131:
 1923              	 .align 2
 1924              	.L130:
 1925 006c 00000000 	 .word xSuspendedTaskList
 1926 0070 00000000 	 .word xPendingReadyList
 1927              	 .cfi_endproc
 1928              	.LFE148:
 1930              	 .section .text.vTaskResume,"ax",%progbits
 1931              	 .align 2
 1932              	 .global vTaskResume
 1933              	 .thumb
 1934              	 .thumb_func
 1936              	vTaskResume:
 1937              	.LFB149:
1771:../Dave/Generated/FREERTOS/tasks.c **** 
1772:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1773:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1774:../Dave/Generated/FREERTOS/tasks.c **** 
1775:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1776:../Dave/Generated/FREERTOS/tasks.c **** 
1777:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1778:../Dave/Generated/FREERTOS/tasks.c **** 	{
 1938              	 .loc 1 1778 0
 1939              	 .cfi_startproc
 1940              	 
 1941              	 
 1942 0000 80B5     	 push {r7,lr}
 1943              	 .cfi_def_cfa_offset 8
 1944              	 .cfi_offset 7,-8
 1945              	 .cfi_offset 14,-4
 1946 0002 84B0     	 sub sp,sp,#16
 1947              	 .cfi_def_cfa_offset 24
 1948 0004 00AF     	 add r7,sp,#0
 1949              	 .cfi_def_cfa_register 7
 1950 0006 7860     	 str r0,[r7,#4]
1779:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1951              	 .loc 1 1779 0
 1952 0008 7B68     	 ldr r3,[r7,#4]
 1953 000a FB60     	 str r3,[r7,#12]
1780:../Dave/Generated/FREERTOS/tasks.c **** 
1781:../Dave/Generated/FREERTOS/tasks.c **** 		/* It does not make sense to resume the calling task. */
1782:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( xTaskToResume );
 1954              	 .loc 1 1782 0
 1955 000c 7B68     	 ldr r3,[r7,#4]
 1956 000e 002B     	 cmp r3,#0
 1957 0010 09D1     	 bne .L133
 1958              	.LBB137:
 1959              	.LBB138:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 1960              	 .loc 2 195 0 discriminator 1
 1961              	
 1962 0012 4FF0FC03 	 mov r3,#252
 1963 0016 83F31188 	 msr basepri,r3
 1964 001a BFF36F8F 	 isb 
 1965 001e BFF34F8F 	 dsb 
 1966              	
 1967              	
 1968              	 .thumb
 1969 0022 BB60     	 str r3,[r7,#8]
 1970              	.L134:
 1971              	.LBE138:
 1972              	.LBE137:
 1973              	 .loc 1 1782 0 discriminator 1
 1974 0024 FEE7     	 b .L134
 1975              	.L133:
1783:../Dave/Generated/FREERTOS/tasks.c **** 
1784:../Dave/Generated/FREERTOS/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1785:../Dave/Generated/FREERTOS/tasks.c **** 		currently executing task. */
1786:../Dave/Generated/FREERTOS/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 1976              	 .loc 1 1786 0
 1977 0026 FB68     	 ldr r3,[r7,#12]
 1978 0028 002B     	 cmp r3,#0
 1979 002a 3BD0     	 beq .L132
 1980              	 .loc 1 1786 0 is_stmt 0 discriminator 1
 1981 002c 1F4B     	 ldr r3,.L137
 1982 002e 1B68     	 ldr r3,[r3]
 1983 0030 FA68     	 ldr r2,[r7,#12]
 1984 0032 9A42     	 cmp r2,r3
 1985 0034 36D0     	 beq .L132
1787:../Dave/Generated/FREERTOS/tasks.c **** 		{
1788:../Dave/Generated/FREERTOS/tasks.c **** 			taskENTER_CRITICAL();
 1986              	 .loc 1 1788 0 is_stmt 1
 1987 0036 FFF7FEFF 	 bl vPortEnterCritical
1789:../Dave/Generated/FREERTOS/tasks.c **** 			{
1790:../Dave/Generated/FREERTOS/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1988              	 .loc 1 1790 0
 1989 003a F868     	 ldr r0,[r7,#12]
 1990 003c FFF7FEFF 	 bl prvTaskIsTaskSuspended
 1991 0040 0346     	 mov r3,r0
 1992 0042 002B     	 cmp r3,#0
 1993 0044 2CD0     	 beq .L136
1791:../Dave/Generated/FREERTOS/tasks.c **** 				{
1792:../Dave/Generated/FREERTOS/tasks.c **** 					traceTASK_RESUME( pxTCB );
1793:../Dave/Generated/FREERTOS/tasks.c **** 
1794:../Dave/Generated/FREERTOS/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1795:../Dave/Generated/FREERTOS/tasks.c **** 					suspended because this is inside a critical section. */
1796:../Dave/Generated/FREERTOS/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 1994              	 .loc 1 1796 0
 1995 0046 FB68     	 ldr r3,[r7,#12]
 1996 0048 0433     	 adds r3,r3,#4
 1997 004a 1846     	 mov r0,r3
 1998 004c FFF7FEFF 	 bl uxListRemove
1797:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1999              	 .loc 1 1797 0
 2000 0050 FB68     	 ldr r3,[r7,#12]
 2001 0052 DB6A     	 ldr r3,[r3,#44]
 2002 0054 1A46     	 mov r2,r3
 2003 0056 0123     	 movs r3,#1
 2004 0058 03FA02F2 	 lsl r2,r3,r2
 2005 005c 144B     	 ldr r3,.L137+4
 2006 005e 1B68     	 ldr r3,[r3]
 2007 0060 1343     	 orrs r3,r3,r2
 2008 0062 134A     	 ldr r2,.L137+4
 2009 0064 1360     	 str r3,[r2]
 2010 0066 FB68     	 ldr r3,[r7,#12]
 2011 0068 DA6A     	 ldr r2,[r3,#44]
 2012 006a 1346     	 mov r3,r2
 2013 006c 9B00     	 lsls r3,r3,#2
 2014 006e 1344     	 add r3,r3,r2
 2015 0070 9B00     	 lsls r3,r3,#2
 2016 0072 104A     	 ldr r2,.L137+8
 2017 0074 1A44     	 add r2,r2,r3
 2018 0076 FB68     	 ldr r3,[r7,#12]
 2019 0078 0433     	 adds r3,r3,#4
 2020 007a 1046     	 mov r0,r2
 2021 007c 1946     	 mov r1,r3
 2022 007e FFF7FEFF 	 bl vListInsertEnd
1798:../Dave/Generated/FREERTOS/tasks.c **** 
1799:../Dave/Generated/FREERTOS/tasks.c **** 					/* A higher priority task may have just been resumed. */
1800:../Dave/Generated/FREERTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2023              	 .loc 1 1800 0
 2024 0082 FB68     	 ldr r3,[r7,#12]
 2025 0084 DA6A     	 ldr r2,[r3,#44]
 2026 0086 094B     	 ldr r3,.L137
 2027 0088 1B68     	 ldr r3,[r3]
 2028 008a DB6A     	 ldr r3,[r3,#44]
 2029 008c 9A42     	 cmp r2,r3
 2030 008e 07D3     	 bcc .L136
1801:../Dave/Generated/FREERTOS/tasks.c **** 					{
1802:../Dave/Generated/FREERTOS/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1803:../Dave/Generated/FREERTOS/tasks.c **** 						but will leave the lists in the correct state for the
1804:../Dave/Generated/FREERTOS/tasks.c **** 						next yield. */
1805:../Dave/Generated/FREERTOS/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 2031              	 .loc 1 1805 0
 2032 0090 094B     	 ldr r3,.L137+12
 2033 0092 4FF08052 	 mov r2,#268435456
 2034 0096 1A60     	 str r2,[r3]
 2035              	
 2036 0098 BFF34F8F 	 dsb
 2037              	
 2038              	
 2039 009c BFF36F8F 	 isb
 2040              	
 2041              	 .thumb
 2042              	.L136:
1806:../Dave/Generated/FREERTOS/tasks.c **** 					}
1807:../Dave/Generated/FREERTOS/tasks.c **** 					else
1808:../Dave/Generated/FREERTOS/tasks.c **** 					{
1809:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1810:../Dave/Generated/FREERTOS/tasks.c **** 					}
1811:../Dave/Generated/FREERTOS/tasks.c **** 				}
1812:../Dave/Generated/FREERTOS/tasks.c **** 				else
1813:../Dave/Generated/FREERTOS/tasks.c **** 				{
1814:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1815:../Dave/Generated/FREERTOS/tasks.c **** 				}
1816:../Dave/Generated/FREERTOS/tasks.c **** 			}
1817:../Dave/Generated/FREERTOS/tasks.c **** 			taskEXIT_CRITICAL();
 2043              	 .loc 1 1817 0
 2044 00a0 FFF7FEFF 	 bl vPortExitCritical
 2045              	.L132:
1818:../Dave/Generated/FREERTOS/tasks.c **** 		}
1819:../Dave/Generated/FREERTOS/tasks.c **** 		else
1820:../Dave/Generated/FREERTOS/tasks.c **** 		{
1821:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1822:../Dave/Generated/FREERTOS/tasks.c **** 		}
1823:../Dave/Generated/FREERTOS/tasks.c **** 	}
 2046              	 .loc 1 1823 0
 2047 00a4 1037     	 adds r7,r7,#16
 2048              	 .cfi_def_cfa_offset 8
 2049 00a6 BD46     	 mov sp,r7
 2050              	 .cfi_def_cfa_register 13
 2051              	 
 2052 00a8 80BD     	 pop {r7,pc}
 2053              	.L138:
 2054 00aa 00BF     	 .align 2
 2055              	.L137:
 2056 00ac 00000000 	 .word pxCurrentTCB
 2057 00b0 00000000 	 .word uxTopReadyPriority
 2058 00b4 00000000 	 .word pxReadyTasksLists
 2059 00b8 04ED00E0 	 .word -536810236
 2060              	 .cfi_endproc
 2061              	.LFE149:
 2063              	 .section .text.xTaskResumeFromISR,"ax",%progbits
 2064              	 .align 2
 2065              	 .global xTaskResumeFromISR
 2066              	 .thumb
 2067              	 .thumb_func
 2069              	xTaskResumeFromISR:
 2070              	.LFB150:
1824:../Dave/Generated/FREERTOS/tasks.c **** 
1825:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1826:../Dave/Generated/FREERTOS/tasks.c **** 
1827:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1828:../Dave/Generated/FREERTOS/tasks.c **** 
1829:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1830:../Dave/Generated/FREERTOS/tasks.c **** 
1831:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1832:../Dave/Generated/FREERTOS/tasks.c **** 	{
 2071              	 .loc 1 1832 0
 2072              	 .cfi_startproc
 2073              	 
 2074              	 
 2075 0000 80B5     	 push {r7,lr}
 2076              	 .cfi_def_cfa_offset 8
 2077              	 .cfi_offset 7,-8
 2078              	 .cfi_offset 14,-4
 2079 0002 8AB0     	 sub sp,sp,#40
 2080              	 .cfi_def_cfa_offset 48
 2081 0004 00AF     	 add r7,sp,#0
 2082              	 .cfi_def_cfa_register 7
 2083 0006 7860     	 str r0,[r7,#4]
1833:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 2084              	 .loc 1 1833 0
 2085 0008 0023     	 movs r3,#0
 2086 000a 7B62     	 str r3,[r7,#36]
1834:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 2087              	 .loc 1 1834 0
 2088 000c 7B68     	 ldr r3,[r7,#4]
 2089 000e 3B62     	 str r3,[r7,#32]
1835:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1836:../Dave/Generated/FREERTOS/tasks.c **** 
1837:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( xTaskToResume );
 2090              	 .loc 1 1837 0
 2091 0010 7B68     	 ldr r3,[r7,#4]
 2092 0012 002B     	 cmp r3,#0
 2093 0014 09D1     	 bne .L140
 2094              	.LBB139:
 2095              	.LBB140:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 2096              	 .loc 2 195 0 discriminator 1
 2097              	
 2098 0016 4FF0FC03 	 mov r3,#252
 2099 001a 83F31188 	 msr basepri,r3
 2100 001e BFF36F8F 	 isb 
 2101 0022 BFF34F8F 	 dsb 
 2102              	
 2103              	
 2104              	 .thumb
 2105 0026 BB61     	 str r3,[r7,#24]
 2106              	.L141:
 2107              	.LBE140:
 2108              	.LBE139:
 2109              	 .loc 1 1837 0 discriminator 1
 2110 0028 FEE7     	 b .L141
 2111              	.L140:
1838:../Dave/Generated/FREERTOS/tasks.c **** 
1839:../Dave/Generated/FREERTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1840:../Dave/Generated/FREERTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1841:../Dave/Generated/FREERTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1842:../Dave/Generated/FREERTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1843:../Dave/Generated/FREERTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1844:../Dave/Generated/FREERTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
1845:../Dave/Generated/FREERTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1846:../Dave/Generated/FREERTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1847:../Dave/Generated/FREERTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
1848:../Dave/Generated/FREERTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1849:../Dave/Generated/FREERTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1850:../Dave/Generated/FREERTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1851:../Dave/Generated/FREERTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1852:../Dave/Generated/FREERTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1853:../Dave/Generated/FREERTOS/tasks.c **** 		provided on the following link:
1854:../Dave/Generated/FREERTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1855:../Dave/Generated/FREERTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2112              	 .loc 1 1855 0
 2113 002a FFF7FEFF 	 bl vPortValidateInterruptPriority
 2114              	.LBB141:
 2115              	.LBB142:
 211:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 2116              	 .loc 2 211 0
 2117              	
 2118 002e EFF31182 	 mrs r2,basepri
 2119 0032 4FF0FC03 	 mov r3,#252
 2120 0036 83F31188 	 msr basepri,r3
 2121 003a BFF36F8F 	 isb 
 2122 003e BFF34F8F 	 dsb 
 2123              	
 2124              	
 2125              	 .thumb
 2126 0042 7A61     	 str r2,[r7,#20]
 2127 0044 3B61     	 str r3,[r7,#16]
 223:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** }
 2128              	 .loc 2 223 0
 2129 0046 7B69     	 ldr r3,[r7,#20]
 2130              	.LBE142:
 2131              	.LBE141:
1856:../Dave/Generated/FREERTOS/tasks.c **** 
1857:../Dave/Generated/FREERTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2132              	 .loc 1 1857 0
 2133 0048 FB61     	 str r3,[r7,#28]
1858:../Dave/Generated/FREERTOS/tasks.c **** 		{
1859:../Dave/Generated/FREERTOS/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2134              	 .loc 1 1859 0
 2135 004a 386A     	 ldr r0,[r7,#32]
 2136 004c FFF7FEFF 	 bl prvTaskIsTaskSuspended
 2137 0050 0346     	 mov r3,r0
 2138 0052 002B     	 cmp r3,#0
 2139 0054 31D0     	 beq .L143
1860:../Dave/Generated/FREERTOS/tasks.c **** 			{
1861:../Dave/Generated/FREERTOS/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1862:../Dave/Generated/FREERTOS/tasks.c **** 
1863:../Dave/Generated/FREERTOS/tasks.c **** 				/* Check the ready lists can be accessed. */
1864:../Dave/Generated/FREERTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2140              	 .loc 1 1864 0
 2141 0056 1E4B     	 ldr r3,.L148
 2142 0058 1B68     	 ldr r3,[r3]
 2143 005a 002B     	 cmp r3,#0
 2144 005c 27D1     	 bne .L144
1865:../Dave/Generated/FREERTOS/tasks.c **** 				{
1866:../Dave/Generated/FREERTOS/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1867:../Dave/Generated/FREERTOS/tasks.c **** 					suspended list to the ready list directly. */
1868:../Dave/Generated/FREERTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2145              	 .loc 1 1868 0
 2146 005e 3B6A     	 ldr r3,[r7,#32]
 2147 0060 DA6A     	 ldr r2,[r3,#44]
 2148 0062 1C4B     	 ldr r3,.L148+4
 2149 0064 1B68     	 ldr r3,[r3]
 2150 0066 DB6A     	 ldr r3,[r3,#44]
 2151 0068 9A42     	 cmp r2,r3
 2152 006a 01D3     	 bcc .L145
1869:../Dave/Generated/FREERTOS/tasks.c **** 					{
1870:../Dave/Generated/FREERTOS/tasks.c **** 						xYieldRequired = pdTRUE;
 2153              	 .loc 1 1870 0
 2154 006c 0123     	 movs r3,#1
 2155 006e 7B62     	 str r3,[r7,#36]
 2156              	.L145:
1871:../Dave/Generated/FREERTOS/tasks.c **** 					}
1872:../Dave/Generated/FREERTOS/tasks.c **** 					else
1873:../Dave/Generated/FREERTOS/tasks.c **** 					{
1874:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1875:../Dave/Generated/FREERTOS/tasks.c **** 					}
1876:../Dave/Generated/FREERTOS/tasks.c **** 
1877:../Dave/Generated/FREERTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2157              	 .loc 1 1877 0
 2158 0070 3B6A     	 ldr r3,[r7,#32]
 2159 0072 0433     	 adds r3,r3,#4
 2160 0074 1846     	 mov r0,r3
 2161 0076 FFF7FEFF 	 bl uxListRemove
1878:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2162              	 .loc 1 1878 0
 2163 007a 3B6A     	 ldr r3,[r7,#32]
 2164 007c DB6A     	 ldr r3,[r3,#44]
 2165 007e 1A46     	 mov r2,r3
 2166 0080 0123     	 movs r3,#1
 2167 0082 03FA02F2 	 lsl r2,r3,r2
 2168 0086 144B     	 ldr r3,.L148+8
 2169 0088 1B68     	 ldr r3,[r3]
 2170 008a 1343     	 orrs r3,r3,r2
 2171 008c 124A     	 ldr r2,.L148+8
 2172 008e 1360     	 str r3,[r2]
 2173 0090 3B6A     	 ldr r3,[r7,#32]
 2174 0092 DA6A     	 ldr r2,[r3,#44]
 2175 0094 1346     	 mov r3,r2
 2176 0096 9B00     	 lsls r3,r3,#2
 2177 0098 1344     	 add r3,r3,r2
 2178 009a 9B00     	 lsls r3,r3,#2
 2179 009c 0F4A     	 ldr r2,.L148+12
 2180 009e 1A44     	 add r2,r2,r3
 2181 00a0 3B6A     	 ldr r3,[r7,#32]
 2182 00a2 0433     	 adds r3,r3,#4
 2183 00a4 1046     	 mov r0,r2
 2184 00a6 1946     	 mov r1,r3
 2185 00a8 FFF7FEFF 	 bl vListInsertEnd
 2186 00ac 05E0     	 b .L143
 2187              	.L144:
1879:../Dave/Generated/FREERTOS/tasks.c **** 				}
1880:../Dave/Generated/FREERTOS/tasks.c **** 				else
1881:../Dave/Generated/FREERTOS/tasks.c **** 				{
1882:../Dave/Generated/FREERTOS/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1883:../Dave/Generated/FREERTOS/tasks.c **** 					is held in the pending ready list until the scheduler is
1884:../Dave/Generated/FREERTOS/tasks.c **** 					unsuspended. */
1885:../Dave/Generated/FREERTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 2188              	 .loc 1 1885 0
 2189 00ae 3B6A     	 ldr r3,[r7,#32]
 2190 00b0 1833     	 adds r3,r3,#24
 2191 00b2 0B48     	 ldr r0,.L148+16
 2192 00b4 1946     	 mov r1,r3
 2193 00b6 FFF7FEFF 	 bl vListInsertEnd
 2194              	.L143:
 2195 00ba FB69     	 ldr r3,[r7,#28]
 2196 00bc FB60     	 str r3,[r7,#12]
 2197              	.LBB143:
 2198              	.LBB144:
 2199              	 .loc 2 229 0
 2200 00be FB68     	 ldr r3,[r7,#12]
 2201              	
 2202 00c0 83F31188 	 msr basepri,r3
 2203              	
 2204              	 .thumb
 2205              	.LBE144:
 2206              	.LBE143:
1886:../Dave/Generated/FREERTOS/tasks.c **** 				}
1887:../Dave/Generated/FREERTOS/tasks.c **** 			}
1888:../Dave/Generated/FREERTOS/tasks.c **** 			else
1889:../Dave/Generated/FREERTOS/tasks.c **** 			{
1890:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1891:../Dave/Generated/FREERTOS/tasks.c **** 			}
1892:../Dave/Generated/FREERTOS/tasks.c **** 		}
1893:../Dave/Generated/FREERTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1894:../Dave/Generated/FREERTOS/tasks.c **** 
1895:../Dave/Generated/FREERTOS/tasks.c **** 		return xYieldRequired;
 2207              	 .loc 1 1895 0
 2208 00c4 7B6A     	 ldr r3,[r7,#36]
1896:../Dave/Generated/FREERTOS/tasks.c **** 	}
 2209              	 .loc 1 1896 0
 2210 00c6 1846     	 mov r0,r3
 2211 00c8 2837     	 adds r7,r7,#40
 2212              	 .cfi_def_cfa_offset 8
 2213 00ca BD46     	 mov sp,r7
 2214              	 .cfi_def_cfa_register 13
 2215              	 
 2216 00cc 80BD     	 pop {r7,pc}
 2217              	.L149:
 2218 00ce 00BF     	 .align 2
 2219              	.L148:
 2220 00d0 00000000 	 .word uxSchedulerSuspended
 2221 00d4 00000000 	 .word pxCurrentTCB
 2222 00d8 00000000 	 .word uxTopReadyPriority
 2223 00dc 00000000 	 .word pxReadyTasksLists
 2224 00e0 00000000 	 .word xPendingReadyList
 2225              	 .cfi_endproc
 2226              	.LFE150:
 2228              	 .section .rodata
 2229              	 .align 2
 2230              	.LC0:
 2231 0000 49444C45 	 .ascii "IDLE\000"
 2231      00
 2232              	 .section .text.vTaskStartScheduler,"ax",%progbits
 2233              	 .align 2
 2234              	 .global vTaskStartScheduler
 2235              	 .thumb
 2236              	 .thumb_func
 2238              	vTaskStartScheduler:
 2239              	.LFB151:
1897:../Dave/Generated/FREERTOS/tasks.c **** 
1898:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1899:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1900:../Dave/Generated/FREERTOS/tasks.c **** 
1901:../Dave/Generated/FREERTOS/tasks.c **** void vTaskStartScheduler( void )
1902:../Dave/Generated/FREERTOS/tasks.c **** {
 2240              	 .loc 1 1902 0
 2241              	 .cfi_startproc
 2242              	 
 2243              	 
 2244 0000 80B5     	 push {r7,lr}
 2245              	 .cfi_def_cfa_offset 8
 2246              	 .cfi_offset 7,-8
 2247              	 .cfi_offset 14,-4
 2248 0002 86B0     	 sub sp,sp,#24
 2249              	 .cfi_def_cfa_offset 32
 2250 0004 02AF     	 add r7,sp,#8
 2251              	 .cfi_def_cfa 7,24
1903:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xReturn;
1904:../Dave/Generated/FREERTOS/tasks.c **** 
1905:../Dave/Generated/FREERTOS/tasks.c **** 	/* Add the idle task at the lowest priority. */
1906:../Dave/Generated/FREERTOS/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1907:../Dave/Generated/FREERTOS/tasks.c **** 	{
1908:../Dave/Generated/FREERTOS/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1909:../Dave/Generated/FREERTOS/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1910:../Dave/Generated/FREERTOS/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1911:../Dave/Generated/FREERTOS/tasks.c **** 
1912:../Dave/Generated/FREERTOS/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1913:../Dave/Generated/FREERTOS/tasks.c **** 		address of the RAM then create the idle task. */
1914:../Dave/Generated/FREERTOS/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1915:../Dave/Generated/FREERTOS/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1916:../Dave/Generated/FREERTOS/tasks.c **** 												configIDLE_TASK_NAME,
1917:../Dave/Generated/FREERTOS/tasks.c **** 												ulIdleTaskStackSize,
1918:../Dave/Generated/FREERTOS/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1919:../Dave/Generated/FREERTOS/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1920:../Dave/Generated/FREERTOS/tasks.c **** 												pxIdleTaskStackBuffer,
1921:../Dave/Generated/FREERTOS/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1922:../Dave/Generated/FREERTOS/tasks.c **** 
1923:../Dave/Generated/FREERTOS/tasks.c **** 		if( xIdleTaskHandle != NULL )
1924:../Dave/Generated/FREERTOS/tasks.c **** 		{
1925:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pdPASS;
1926:../Dave/Generated/FREERTOS/tasks.c **** 		}
1927:../Dave/Generated/FREERTOS/tasks.c **** 		else
1928:../Dave/Generated/FREERTOS/tasks.c **** 		{
1929:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pdFAIL;
1930:../Dave/Generated/FREERTOS/tasks.c **** 		}
1931:../Dave/Generated/FREERTOS/tasks.c **** 	}
1932:../Dave/Generated/FREERTOS/tasks.c **** 	#else
1933:../Dave/Generated/FREERTOS/tasks.c **** 	{
1934:../Dave/Generated/FREERTOS/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1935:../Dave/Generated/FREERTOS/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
 2252              	 .loc 1 1935 0
 2253 0006 0023     	 movs r3,#0
 2254 0008 0093     	 str r3,[sp]
 2255 000a 1C4B     	 ldr r3,.L155
 2256 000c 0193     	 str r3,[sp,#4]
 2257 000e 1C48     	 ldr r0,.L155+4
 2258 0010 1C49     	 ldr r1,.L155+8
 2259 0012 8222     	 movs r2,#130
 2260 0014 0023     	 movs r3,#0
 2261 0016 FFF7FEFF 	 bl xTaskCreate
 2262 001a F860     	 str r0,[r7,#12]
1936:../Dave/Generated/FREERTOS/tasks.c **** 								configIDLE_TASK_NAME,
1937:../Dave/Generated/FREERTOS/tasks.c **** 								configMINIMAL_STACK_SIZE,
1938:../Dave/Generated/FREERTOS/tasks.c **** 								( void * ) NULL,
1939:../Dave/Generated/FREERTOS/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1940:../Dave/Generated/FREERTOS/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1941:../Dave/Generated/FREERTOS/tasks.c **** 	}
1942:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1943:../Dave/Generated/FREERTOS/tasks.c **** 
1944:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1945:../Dave/Generated/FREERTOS/tasks.c **** 	{
1946:../Dave/Generated/FREERTOS/tasks.c **** 		if( xReturn == pdPASS )
 2263              	 .loc 1 1946 0
 2264 001c FB68     	 ldr r3,[r7,#12]
 2265 001e 012B     	 cmp r3,#1
 2266 0020 02D1     	 bne .L151
1947:../Dave/Generated/FREERTOS/tasks.c **** 		{
1948:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = xTimerCreateTimerTask();
 2267              	 .loc 1 1948 0
 2268 0022 FFF7FEFF 	 bl xTimerCreateTimerTask
 2269 0026 F860     	 str r0,[r7,#12]
 2270              	.L151:
1949:../Dave/Generated/FREERTOS/tasks.c **** 		}
1950:../Dave/Generated/FREERTOS/tasks.c **** 		else
1951:../Dave/Generated/FREERTOS/tasks.c **** 		{
1952:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1953:../Dave/Generated/FREERTOS/tasks.c **** 		}
1954:../Dave/Generated/FREERTOS/tasks.c **** 	}
1955:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* configUSE_TIMERS */
1956:../Dave/Generated/FREERTOS/tasks.c **** 
1957:../Dave/Generated/FREERTOS/tasks.c **** 	if( xReturn == pdPASS )
 2271              	 .loc 1 1957 0
 2272 0028 FB68     	 ldr r3,[r7,#12]
 2273 002a 012B     	 cmp r3,#1
 2274 002c 15D1     	 bne .L152
 2275              	.LBB145:
 2276              	.LBB146:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 2277              	 .loc 2 195 0
 2278              	
 2279 002e 4FF0FC03 	 mov r3,#252
 2280 0032 83F31188 	 msr basepri,r3
 2281 0036 BFF36F8F 	 isb 
 2282 003a BFF34F8F 	 dsb 
 2283              	
 2284              	
 2285              	 .thumb
 2286 003e BB60     	 str r3,[r7,#8]
 2287              	.LBE146:
 2288              	.LBE145:
1958:../Dave/Generated/FREERTOS/tasks.c **** 	{
1959:../Dave/Generated/FREERTOS/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
1960:../Dave/Generated/FREERTOS/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
1961:../Dave/Generated/FREERTOS/tasks.c **** 		the only macro called by the function. */
1962:../Dave/Generated/FREERTOS/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
1963:../Dave/Generated/FREERTOS/tasks.c **** 		{
1964:../Dave/Generated/FREERTOS/tasks.c **** 			freertos_tasks_c_additions_init();
1965:../Dave/Generated/FREERTOS/tasks.c **** 		}
1966:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
1967:../Dave/Generated/FREERTOS/tasks.c **** 
1968:../Dave/Generated/FREERTOS/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1969:../Dave/Generated/FREERTOS/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1970:../Dave/Generated/FREERTOS/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1971:../Dave/Generated/FREERTOS/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1972:../Dave/Generated/FREERTOS/tasks.c **** 		starts to run. */
1973:../Dave/Generated/FREERTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
1974:../Dave/Generated/FREERTOS/tasks.c **** 
1975:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1976:../Dave/Generated/FREERTOS/tasks.c **** 		{
1977:../Dave/Generated/FREERTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1978:../Dave/Generated/FREERTOS/tasks.c **** 			structure specific to the task that will run first. */
1979:../Dave/Generated/FREERTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1980:../Dave/Generated/FREERTOS/tasks.c **** 		}
1981:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1982:../Dave/Generated/FREERTOS/tasks.c **** 
1983:../Dave/Generated/FREERTOS/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 2289              	 .loc 1 1983 0
 2290 0040 114B     	 ldr r3,.L155+12
 2291 0042 4FF0FF32 	 mov r2,#-1
 2292 0046 1A60     	 str r2,[r3]
1984:../Dave/Generated/FREERTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2293              	 .loc 1 1984 0
 2294 0048 104B     	 ldr r3,.L155+16
 2295 004a 0122     	 movs r2,#1
 2296 004c 1A60     	 str r2,[r3]
1985:../Dave/Generated/FREERTOS/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 2297              	 .loc 1 1985 0
 2298 004e 104B     	 ldr r3,.L155+20
 2299 0050 0022     	 movs r2,#0
 2300 0052 1A60     	 str r2,[r3]
1986:../Dave/Generated/FREERTOS/tasks.c **** 
1987:../Dave/Generated/FREERTOS/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1988:../Dave/Generated/FREERTOS/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1989:../Dave/Generated/FREERTOS/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
1990:../Dave/Generated/FREERTOS/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
1991:../Dave/Generated/FREERTOS/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
1992:../Dave/Generated/FREERTOS/tasks.c **** 		FreeRTOSConfig.h file. */
1993:../Dave/Generated/FREERTOS/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1994:../Dave/Generated/FREERTOS/tasks.c **** 
1995:../Dave/Generated/FREERTOS/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1996:../Dave/Generated/FREERTOS/tasks.c **** 		portable interface. */
1997:../Dave/Generated/FREERTOS/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 2301              	 .loc 1 1997 0
 2302 0054 FFF7FEFF 	 bl xPortStartScheduler
 2303 0058 0DE0     	 b .L150
 2304              	.L152:
1998:../Dave/Generated/FREERTOS/tasks.c **** 		{
1999:../Dave/Generated/FREERTOS/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2000:../Dave/Generated/FREERTOS/tasks.c **** 			function will not return. */
2001:../Dave/Generated/FREERTOS/tasks.c **** 		}
2002:../Dave/Generated/FREERTOS/tasks.c **** 		else
2003:../Dave/Generated/FREERTOS/tasks.c **** 		{
2004:../Dave/Generated/FREERTOS/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2005:../Dave/Generated/FREERTOS/tasks.c **** 		}
2006:../Dave/Generated/FREERTOS/tasks.c **** 	}
2007:../Dave/Generated/FREERTOS/tasks.c **** 	else
2008:../Dave/Generated/FREERTOS/tasks.c **** 	{
2009:../Dave/Generated/FREERTOS/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2010:../Dave/Generated/FREERTOS/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2011:../Dave/Generated/FREERTOS/tasks.c **** 		or the timer task. */
2012:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 2305              	 .loc 1 2012 0
 2306 005a FB68     	 ldr r3,[r7,#12]
 2307 005c B3F1FF3F 	 cmp r3,#-1
 2308 0060 09D1     	 bne .L150
 2309              	.LBB147:
 2310              	.LBB148:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 2311              	 .loc 2 195 0 discriminator 1
 2312              	
 2313 0062 4FF0FC03 	 mov r3,#252
 2314 0066 83F31188 	 msr basepri,r3
 2315 006a BFF36F8F 	 isb 
 2316 006e BFF34F8F 	 dsb 
 2317              	
 2318              	
 2319              	 .thumb
 2320 0072 7B60     	 str r3,[r7,#4]
 2321              	.L154:
 2322              	.LBE148:
 2323              	.LBE147:
 2324              	 .loc 1 2012 0 discriminator 2
 2325 0074 FEE7     	 b .L154
 2326              	.L150:
2013:../Dave/Generated/FREERTOS/tasks.c **** 	}
2014:../Dave/Generated/FREERTOS/tasks.c **** 
2015:../Dave/Generated/FREERTOS/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2016:../Dave/Generated/FREERTOS/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2017:../Dave/Generated/FREERTOS/tasks.c **** 	( void ) xIdleTaskHandle;
2018:../Dave/Generated/FREERTOS/tasks.c **** }
 2327              	 .loc 1 2018 0
 2328 0076 1037     	 adds r7,r7,#16
 2329              	 .cfi_def_cfa_offset 8
 2330 0078 BD46     	 mov sp,r7
 2331              	 .cfi_def_cfa_register 13
 2332              	 
 2333 007a 80BD     	 pop {r7,pc}
 2334              	.L156:
 2335              	 .align 2
 2336              	.L155:
 2337 007c 00000000 	 .word xIdleTaskHandle
 2338 0080 00000000 	 .word prvIdleTask
 2339 0084 00000000 	 .word .LC0
 2340 0088 00000000 	 .word xNextTaskUnblockTime
 2341 008c 00000000 	 .word xSchedulerRunning
 2342 0090 00000000 	 .word xTickCount
 2343              	 .cfi_endproc
 2344              	.LFE151:
 2346              	 .section .text.vTaskEndScheduler,"ax",%progbits
 2347              	 .align 2
 2348              	 .global vTaskEndScheduler
 2349              	 .thumb
 2350              	 .thumb_func
 2352              	vTaskEndScheduler:
 2353              	.LFB152:
2019:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2020:../Dave/Generated/FREERTOS/tasks.c **** 
2021:../Dave/Generated/FREERTOS/tasks.c **** void vTaskEndScheduler( void )
2022:../Dave/Generated/FREERTOS/tasks.c **** {
 2354              	 .loc 1 2022 0
 2355              	 .cfi_startproc
 2356              	 
 2357              	 
 2358 0000 80B5     	 push {r7,lr}
 2359              	 .cfi_def_cfa_offset 8
 2360              	 .cfi_offset 7,-8
 2361              	 .cfi_offset 14,-4
 2362 0002 82B0     	 sub sp,sp,#8
 2363              	 .cfi_def_cfa_offset 16
 2364 0004 00AF     	 add r7,sp,#0
 2365              	 .cfi_def_cfa_register 7
 2366              	.LBB149:
 2367              	.LBB150:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 2368              	 .loc 2 195 0
 2369              	
 2370 0006 4FF0FC03 	 mov r3,#252
 2371 000a 83F31188 	 msr basepri,r3
 2372 000e BFF36F8F 	 isb 
 2373 0012 BFF34F8F 	 dsb 
 2374              	
 2375              	
 2376              	 .thumb
 2377 0016 7B60     	 str r3,[r7,#4]
 2378              	.LBE150:
 2379              	.LBE149:
2023:../Dave/Generated/FREERTOS/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2024:../Dave/Generated/FREERTOS/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2025:../Dave/Generated/FREERTOS/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2026:../Dave/Generated/FREERTOS/tasks.c **** 	portDISABLE_INTERRUPTS();
2027:../Dave/Generated/FREERTOS/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2380              	 .loc 1 2027 0
 2381 0018 034B     	 ldr r3,.L158
 2382 001a 0022     	 movs r2,#0
 2383 001c 1A60     	 str r2,[r3]
2028:../Dave/Generated/FREERTOS/tasks.c **** 	vPortEndScheduler();
 2384              	 .loc 1 2028 0
 2385 001e FFF7FEFF 	 bl vPortEndScheduler
2029:../Dave/Generated/FREERTOS/tasks.c **** }
 2386              	 .loc 1 2029 0
 2387 0022 0837     	 adds r7,r7,#8
 2388              	 .cfi_def_cfa_offset 8
 2389 0024 BD46     	 mov sp,r7
 2390              	 .cfi_def_cfa_register 13
 2391              	 
 2392 0026 80BD     	 pop {r7,pc}
 2393              	.L159:
 2394              	 .align 2
 2395              	.L158:
 2396 0028 00000000 	 .word xSchedulerRunning
 2397              	 .cfi_endproc
 2398              	.LFE152:
 2400              	 .section .text.vTaskSuspendAll,"ax",%progbits
 2401              	 .align 2
 2402              	 .global vTaskSuspendAll
 2403              	 .thumb
 2404              	 .thumb_func
 2406              	vTaskSuspendAll:
 2407              	.LFB153:
2030:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2031:../Dave/Generated/FREERTOS/tasks.c **** 
2032:../Dave/Generated/FREERTOS/tasks.c **** void vTaskSuspendAll( void )
2033:../Dave/Generated/FREERTOS/tasks.c **** {
 2408              	 .loc 1 2033 0
 2409              	 .cfi_startproc
 2410              	 
 2411              	 
 2412              	 
 2413 0000 80B4     	 push {r7}
 2414              	 .cfi_def_cfa_offset 4
 2415              	 .cfi_offset 7,-4
 2416 0002 00AF     	 add r7,sp,#0
 2417              	 .cfi_def_cfa_register 7
2034:../Dave/Generated/FREERTOS/tasks.c **** 	/* A critical section is not required as the variable is of type
2035:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2036:../Dave/Generated/FREERTOS/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2037:../Dave/Generated/FREERTOS/tasks.c **** 	http://goo.gl/wu4acr */
2038:../Dave/Generated/FREERTOS/tasks.c **** 	++uxSchedulerSuspended;
 2418              	 .loc 1 2038 0
 2419 0004 044B     	 ldr r3,.L161
 2420 0006 1B68     	 ldr r3,[r3]
 2421 0008 0133     	 adds r3,r3,#1
 2422 000a 034A     	 ldr r2,.L161
 2423 000c 1360     	 str r3,[r2]
2039:../Dave/Generated/FREERTOS/tasks.c **** }
 2424              	 .loc 1 2039 0
 2425 000e BD46     	 mov sp,r7
 2426              	 .cfi_def_cfa_register 13
 2427              	 
 2428 0010 5DF8047B 	 ldr r7,[sp],#4
 2429              	 .cfi_restore 7
 2430              	 .cfi_def_cfa_offset 0
 2431 0014 7047     	 bx lr
 2432              	.L162:
 2433 0016 00BF     	 .align 2
 2434              	.L161:
 2435 0018 00000000 	 .word uxSchedulerSuspended
 2436              	 .cfi_endproc
 2437              	.LFE153:
 2439              	 .section .text.xTaskResumeAll,"ax",%progbits
 2440              	 .align 2
 2441              	 .global xTaskResumeAll
 2442              	 .thumb
 2443              	 .thumb_func
 2445              	xTaskResumeAll:
 2446              	.LFB154:
2040:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2041:../Dave/Generated/FREERTOS/tasks.c **** 
2042:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2043:../Dave/Generated/FREERTOS/tasks.c **** 
2044:../Dave/Generated/FREERTOS/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2045:../Dave/Generated/FREERTOS/tasks.c **** 	{
2046:../Dave/Generated/FREERTOS/tasks.c **** 	TickType_t xReturn;
2047:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2048:../Dave/Generated/FREERTOS/tasks.c **** 
2049:../Dave/Generated/FREERTOS/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2050:../Dave/Generated/FREERTOS/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2051:../Dave/Generated/FREERTOS/tasks.c **** 		task that are in the Ready state, even though the idle task is
2052:../Dave/Generated/FREERTOS/tasks.c **** 		running. */
2053:../Dave/Generated/FREERTOS/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2054:../Dave/Generated/FREERTOS/tasks.c **** 		{
2055:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2056:../Dave/Generated/FREERTOS/tasks.c **** 			{
2057:../Dave/Generated/FREERTOS/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2058:../Dave/Generated/FREERTOS/tasks.c **** 			}
2059:../Dave/Generated/FREERTOS/tasks.c **** 		}
2060:../Dave/Generated/FREERTOS/tasks.c **** 		#else
2061:../Dave/Generated/FREERTOS/tasks.c **** 		{
2062:../Dave/Generated/FREERTOS/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2063:../Dave/Generated/FREERTOS/tasks.c **** 
2064:../Dave/Generated/FREERTOS/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2065:../Dave/Generated/FREERTOS/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2066:../Dave/Generated/FREERTOS/tasks.c **** 			significant bit are set then there are tasks that have a priority
2067:../Dave/Generated/FREERTOS/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2068:../Dave/Generated/FREERTOS/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2069:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2070:../Dave/Generated/FREERTOS/tasks.c **** 			{
2071:../Dave/Generated/FREERTOS/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2072:../Dave/Generated/FREERTOS/tasks.c **** 			}
2073:../Dave/Generated/FREERTOS/tasks.c **** 		}
2074:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
2075:../Dave/Generated/FREERTOS/tasks.c **** 
2076:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2077:../Dave/Generated/FREERTOS/tasks.c **** 		{
2078:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = 0;
2079:../Dave/Generated/FREERTOS/tasks.c **** 		}
2080:../Dave/Generated/FREERTOS/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2081:../Dave/Generated/FREERTOS/tasks.c **** 		{
2082:../Dave/Generated/FREERTOS/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2083:../Dave/Generated/FREERTOS/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2084:../Dave/Generated/FREERTOS/tasks.c **** 			processed. */
2085:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = 0;
2086:../Dave/Generated/FREERTOS/tasks.c **** 		}
2087:../Dave/Generated/FREERTOS/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2088:../Dave/Generated/FREERTOS/tasks.c **** 		{
2089:../Dave/Generated/FREERTOS/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2090:../Dave/Generated/FREERTOS/tasks.c **** 			idle priority.  This path can only be reached if
2091:../Dave/Generated/FREERTOS/tasks.c **** 			configUSE_PREEMPTION is 0. */
2092:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = 0;
2093:../Dave/Generated/FREERTOS/tasks.c **** 		}
2094:../Dave/Generated/FREERTOS/tasks.c **** 		else
2095:../Dave/Generated/FREERTOS/tasks.c **** 		{
2096:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2097:../Dave/Generated/FREERTOS/tasks.c **** 		}
2098:../Dave/Generated/FREERTOS/tasks.c **** 
2099:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
2100:../Dave/Generated/FREERTOS/tasks.c **** 	}
2101:../Dave/Generated/FREERTOS/tasks.c **** 
2102:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2103:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2104:../Dave/Generated/FREERTOS/tasks.c **** 
2105:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xTaskResumeAll( void )
2106:../Dave/Generated/FREERTOS/tasks.c **** {
 2447              	 .loc 1 2106 0
 2448              	 .cfi_startproc
 2449              	 
 2450              	 
 2451 0000 80B5     	 push {r7,lr}
 2452              	 .cfi_def_cfa_offset 8
 2453              	 .cfi_offset 7,-8
 2454              	 .cfi_offset 14,-4
 2455 0002 84B0     	 sub sp,sp,#16
 2456              	 .cfi_def_cfa_offset 24
 2457 0004 00AF     	 add r7,sp,#0
 2458              	 .cfi_def_cfa_register 7
2107:../Dave/Generated/FREERTOS/tasks.c **** TCB_t *pxTCB = NULL;
 2459              	 .loc 1 2107 0
 2460 0006 0023     	 movs r3,#0
 2461 0008 FB60     	 str r3,[r7,#12]
2108:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2462              	 .loc 1 2108 0
 2463 000a 0023     	 movs r3,#0
 2464 000c BB60     	 str r3,[r7,#8]
2109:../Dave/Generated/FREERTOS/tasks.c **** 
2110:../Dave/Generated/FREERTOS/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2111:../Dave/Generated/FREERTOS/tasks.c **** 	previous call to vTaskSuspendAll(). */
2112:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2465              	 .loc 1 2112 0
 2466 000e 424B     	 ldr r3,.L174
 2467 0010 1B68     	 ldr r3,[r3]
 2468 0012 002B     	 cmp r3,#0
 2469 0014 09D1     	 bne .L164
 2470              	.LBB151:
 2471              	.LBB152:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 2472              	 .loc 2 195 0 discriminator 1
 2473              	
 2474 0016 4FF0FC03 	 mov r3,#252
 2475 001a 83F31188 	 msr basepri,r3
 2476 001e BFF36F8F 	 isb 
 2477 0022 BFF34F8F 	 dsb 
 2478              	
 2479              	
 2480              	 .thumb
 2481 0026 3B60     	 str r3,[r7]
 2482              	.L165:
 2483              	.LBE152:
 2484              	.LBE151:
 2485              	 .loc 1 2112 0 discriminator 1
 2486 0028 FEE7     	 b .L165
 2487              	.L164:
2113:../Dave/Generated/FREERTOS/tasks.c **** 
2114:../Dave/Generated/FREERTOS/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2115:../Dave/Generated/FREERTOS/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2116:../Dave/Generated/FREERTOS/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2117:../Dave/Generated/FREERTOS/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2118:../Dave/Generated/FREERTOS/tasks.c **** 	tasks from this list into their appropriate ready list. */
2119:../Dave/Generated/FREERTOS/tasks.c **** 	taskENTER_CRITICAL();
 2488              	 .loc 1 2119 0
 2489 002a FFF7FEFF 	 bl vPortEnterCritical
2120:../Dave/Generated/FREERTOS/tasks.c **** 	{
2121:../Dave/Generated/FREERTOS/tasks.c **** 		--uxSchedulerSuspended;
 2490              	 .loc 1 2121 0
 2491 002e 3A4B     	 ldr r3,.L174
 2492 0030 1B68     	 ldr r3,[r3]
 2493 0032 013B     	 subs r3,r3,#1
 2494 0034 384A     	 ldr r2,.L174
 2495 0036 1360     	 str r3,[r2]
2122:../Dave/Generated/FREERTOS/tasks.c **** 
2123:../Dave/Generated/FREERTOS/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2496              	 .loc 1 2123 0
 2497 0038 374B     	 ldr r3,.L174
 2498 003a 1B68     	 ldr r3,[r3]
 2499 003c 002B     	 cmp r3,#0
 2500 003e 63D1     	 bne .L166
2124:../Dave/Generated/FREERTOS/tasks.c **** 		{
2125:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2501              	 .loc 1 2125 0
 2502 0040 364B     	 ldr r3,.L174+4
 2503 0042 1B68     	 ldr r3,[r3]
 2504 0044 002B     	 cmp r3,#0
 2505 0046 5FD0     	 beq .L166
2126:../Dave/Generated/FREERTOS/tasks.c **** 			{
2127:../Dave/Generated/FREERTOS/tasks.c **** 				/* Move any readied tasks from the pending list into the
2128:../Dave/Generated/FREERTOS/tasks.c **** 				appropriate ready list. */
2129:../Dave/Generated/FREERTOS/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2506              	 .loc 1 2129 0
 2507 0048 30E0     	 b .L167
 2508              	.L168:
2130:../Dave/Generated/FREERTOS/tasks.c **** 				{
2131:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 2509              	 .loc 1 2131 0
 2510 004a 354B     	 ldr r3,.L174+8
 2511 004c DB68     	 ldr r3,[r3,#12]
 2512 004e DB68     	 ldr r3,[r3,#12]
 2513 0050 FB60     	 str r3,[r7,#12]
2132:../Dave/Generated/FREERTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2514              	 .loc 1 2132 0
 2515 0052 FB68     	 ldr r3,[r7,#12]
 2516 0054 1833     	 adds r3,r3,#24
 2517 0056 1846     	 mov r0,r3
 2518 0058 FFF7FEFF 	 bl uxListRemove
2133:../Dave/Generated/FREERTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2519              	 .loc 1 2133 0
 2520 005c FB68     	 ldr r3,[r7,#12]
 2521 005e 0433     	 adds r3,r3,#4
 2522 0060 1846     	 mov r0,r3
 2523 0062 FFF7FEFF 	 bl uxListRemove
2134:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2524              	 .loc 1 2134 0
 2525 0066 FB68     	 ldr r3,[r7,#12]
 2526 0068 DB6A     	 ldr r3,[r3,#44]
 2527 006a 1A46     	 mov r2,r3
 2528 006c 0123     	 movs r3,#1
 2529 006e 03FA02F2 	 lsl r2,r3,r2
 2530 0072 2C4B     	 ldr r3,.L174+12
 2531 0074 1B68     	 ldr r3,[r3]
 2532 0076 1343     	 orrs r3,r3,r2
 2533 0078 2A4A     	 ldr r2,.L174+12
 2534 007a 1360     	 str r3,[r2]
 2535 007c FB68     	 ldr r3,[r7,#12]
 2536 007e DA6A     	 ldr r2,[r3,#44]
 2537 0080 1346     	 mov r3,r2
 2538 0082 9B00     	 lsls r3,r3,#2
 2539 0084 1344     	 add r3,r3,r2
 2540 0086 9B00     	 lsls r3,r3,#2
 2541 0088 274A     	 ldr r2,.L174+16
 2542 008a 1A44     	 add r2,r2,r3
 2543 008c FB68     	 ldr r3,[r7,#12]
 2544 008e 0433     	 adds r3,r3,#4
 2545 0090 1046     	 mov r0,r2
 2546 0092 1946     	 mov r1,r3
 2547 0094 FFF7FEFF 	 bl vListInsertEnd
2135:../Dave/Generated/FREERTOS/tasks.c **** 
2136:../Dave/Generated/FREERTOS/tasks.c **** 					/* If the moved task has a priority higher than the current
2137:../Dave/Generated/FREERTOS/tasks.c **** 					task then a yield must be performed. */
2138:../Dave/Generated/FREERTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2548              	 .loc 1 2138 0
 2549 0098 FB68     	 ldr r3,[r7,#12]
 2550 009a DA6A     	 ldr r2,[r3,#44]
 2551 009c 234B     	 ldr r3,.L174+20
 2552 009e 1B68     	 ldr r3,[r3]
 2553 00a0 DB6A     	 ldr r3,[r3,#44]
 2554 00a2 9A42     	 cmp r2,r3
 2555 00a4 02D3     	 bcc .L167
2139:../Dave/Generated/FREERTOS/tasks.c **** 					{
2140:../Dave/Generated/FREERTOS/tasks.c **** 						xYieldPending = pdTRUE;
 2556              	 .loc 1 2140 0
 2557 00a6 224B     	 ldr r3,.L174+24
 2558 00a8 0122     	 movs r2,#1
 2559 00aa 1A60     	 str r2,[r3]
 2560              	.L167:
2129:../Dave/Generated/FREERTOS/tasks.c **** 				{
 2561              	 .loc 1 2129 0
 2562 00ac 1C4B     	 ldr r3,.L174+8
 2563 00ae 1B68     	 ldr r3,[r3]
 2564 00b0 002B     	 cmp r3,#0
 2565 00b2 CAD1     	 bne .L168
2141:../Dave/Generated/FREERTOS/tasks.c **** 					}
2142:../Dave/Generated/FREERTOS/tasks.c **** 					else
2143:../Dave/Generated/FREERTOS/tasks.c **** 					{
2144:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2145:../Dave/Generated/FREERTOS/tasks.c **** 					}
2146:../Dave/Generated/FREERTOS/tasks.c **** 				}
2147:../Dave/Generated/FREERTOS/tasks.c **** 
2148:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB != NULL )
 2566              	 .loc 1 2148 0
 2567 00b4 FB68     	 ldr r3,[r7,#12]
 2568 00b6 002B     	 cmp r3,#0
 2569 00b8 01D0     	 beq .L169
2149:../Dave/Generated/FREERTOS/tasks.c **** 				{
2150:../Dave/Generated/FREERTOS/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2151:../Dave/Generated/FREERTOS/tasks.c **** 					which may have prevented the next unblock time from being
2152:../Dave/Generated/FREERTOS/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2153:../Dave/Generated/FREERTOS/tasks.c **** 					important for low power tickless implementations, where
2154:../Dave/Generated/FREERTOS/tasks.c **** 					this can prevent an unnecessary exit from low power
2155:../Dave/Generated/FREERTOS/tasks.c **** 					state. */
2156:../Dave/Generated/FREERTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
 2570              	 .loc 1 2156 0
 2571 00ba FFF7FEFF 	 bl prvResetNextTaskUnblockTime
 2572              	.L169:
 2573              	.LBB153:
2157:../Dave/Generated/FREERTOS/tasks.c **** 				}
2158:../Dave/Generated/FREERTOS/tasks.c **** 
2159:../Dave/Generated/FREERTOS/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2160:../Dave/Generated/FREERTOS/tasks.c **** 				they should be processed now.  This ensures the tick count does
2161:../Dave/Generated/FREERTOS/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2162:../Dave/Generated/FREERTOS/tasks.c **** 				time. */
2163:../Dave/Generated/FREERTOS/tasks.c **** 				{
2164:../Dave/Generated/FREERTOS/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 2574              	 .loc 1 2164 0
 2575 00be 1D4B     	 ldr r3,.L174+28
 2576 00c0 1B68     	 ldr r3,[r3]
 2577 00c2 7B60     	 str r3,[r7,#4]
2165:../Dave/Generated/FREERTOS/tasks.c **** 
2166:../Dave/Generated/FREERTOS/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
 2578              	 .loc 1 2166 0
 2579 00c4 7B68     	 ldr r3,[r7,#4]
 2580 00c6 002B     	 cmp r3,#0
 2581 00c8 10D0     	 beq .L170
 2582              	.L172:
2167:../Dave/Generated/FREERTOS/tasks.c **** 					{
2168:../Dave/Generated/FREERTOS/tasks.c **** 						do
2169:../Dave/Generated/FREERTOS/tasks.c **** 						{
2170:../Dave/Generated/FREERTOS/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 2583              	 .loc 1 2170 0
 2584 00ca FFF7FEFF 	 bl xTaskIncrementTick
 2585 00ce 0346     	 mov r3,r0
 2586 00d0 002B     	 cmp r3,#0
 2587 00d2 02D0     	 beq .L171
2171:../Dave/Generated/FREERTOS/tasks.c **** 							{
2172:../Dave/Generated/FREERTOS/tasks.c **** 								xYieldPending = pdTRUE;
 2588              	 .loc 1 2172 0
 2589 00d4 164B     	 ldr r3,.L174+24
 2590 00d6 0122     	 movs r2,#1
 2591 00d8 1A60     	 str r2,[r3]
 2592              	.L171:
2173:../Dave/Generated/FREERTOS/tasks.c **** 							}
2174:../Dave/Generated/FREERTOS/tasks.c **** 							else
2175:../Dave/Generated/FREERTOS/tasks.c **** 							{
2176:../Dave/Generated/FREERTOS/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2177:../Dave/Generated/FREERTOS/tasks.c **** 							}
2178:../Dave/Generated/FREERTOS/tasks.c **** 							--uxPendedCounts;
 2593              	 .loc 1 2178 0
 2594 00da 7B68     	 ldr r3,[r7,#4]
 2595 00dc 013B     	 subs r3,r3,#1
 2596 00de 7B60     	 str r3,[r7,#4]
2179:../Dave/Generated/FREERTOS/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2597              	 .loc 1 2179 0
 2598 00e0 7B68     	 ldr r3,[r7,#4]
 2599 00e2 002B     	 cmp r3,#0
 2600 00e4 F1D1     	 bne .L172
2180:../Dave/Generated/FREERTOS/tasks.c **** 
2181:../Dave/Generated/FREERTOS/tasks.c **** 						uxPendedTicks = 0;
 2601              	 .loc 1 2181 0
 2602 00e6 134B     	 ldr r3,.L174+28
 2603 00e8 0022     	 movs r2,#0
 2604 00ea 1A60     	 str r2,[r3]
 2605              	.L170:
 2606              	.LBE153:
2182:../Dave/Generated/FREERTOS/tasks.c **** 					}
2183:../Dave/Generated/FREERTOS/tasks.c **** 					else
2184:../Dave/Generated/FREERTOS/tasks.c **** 					{
2185:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2186:../Dave/Generated/FREERTOS/tasks.c **** 					}
2187:../Dave/Generated/FREERTOS/tasks.c **** 				}
2188:../Dave/Generated/FREERTOS/tasks.c **** 
2189:../Dave/Generated/FREERTOS/tasks.c **** 				if( xYieldPending != pdFALSE )
 2607              	 .loc 1 2189 0
 2608 00ec 104B     	 ldr r3,.L174+24
 2609 00ee 1B68     	 ldr r3,[r3]
 2610 00f0 002B     	 cmp r3,#0
 2611 00f2 09D0     	 beq .L166
2190:../Dave/Generated/FREERTOS/tasks.c **** 				{
2191:../Dave/Generated/FREERTOS/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2192:../Dave/Generated/FREERTOS/tasks.c **** 					{
2193:../Dave/Generated/FREERTOS/tasks.c **** 						xAlreadyYielded = pdTRUE;
 2612              	 .loc 1 2193 0
 2613 00f4 0123     	 movs r3,#1
 2614 00f6 BB60     	 str r3,[r7,#8]
2194:../Dave/Generated/FREERTOS/tasks.c **** 					}
2195:../Dave/Generated/FREERTOS/tasks.c **** 					#endif
2196:../Dave/Generated/FREERTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 2615              	 .loc 1 2196 0
 2616 00f8 0F4B     	 ldr r3,.L174+32
 2617 00fa 4FF08052 	 mov r2,#268435456
 2618 00fe 1A60     	 str r2,[r3]
 2619              	
 2620 0100 BFF34F8F 	 dsb
 2621              	
 2622              	
 2623 0104 BFF36F8F 	 isb
 2624              	
 2625              	 .thumb
 2626              	.L166:
2197:../Dave/Generated/FREERTOS/tasks.c **** 				}
2198:../Dave/Generated/FREERTOS/tasks.c **** 				else
2199:../Dave/Generated/FREERTOS/tasks.c **** 				{
2200:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2201:../Dave/Generated/FREERTOS/tasks.c **** 				}
2202:../Dave/Generated/FREERTOS/tasks.c **** 			}
2203:../Dave/Generated/FREERTOS/tasks.c **** 		}
2204:../Dave/Generated/FREERTOS/tasks.c **** 		else
2205:../Dave/Generated/FREERTOS/tasks.c **** 		{
2206:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2207:../Dave/Generated/FREERTOS/tasks.c **** 		}
2208:../Dave/Generated/FREERTOS/tasks.c **** 	}
2209:../Dave/Generated/FREERTOS/tasks.c **** 	taskEXIT_CRITICAL();
 2627              	 .loc 1 2209 0
 2628 0108 FFF7FEFF 	 bl vPortExitCritical
2210:../Dave/Generated/FREERTOS/tasks.c **** 
2211:../Dave/Generated/FREERTOS/tasks.c **** 	return xAlreadyYielded;
 2629              	 .loc 1 2211 0
 2630 010c BB68     	 ldr r3,[r7,#8]
2212:../Dave/Generated/FREERTOS/tasks.c **** }
 2631              	 .loc 1 2212 0
 2632 010e 1846     	 mov r0,r3
 2633 0110 1037     	 adds r7,r7,#16
 2634              	 .cfi_def_cfa_offset 8
 2635 0112 BD46     	 mov sp,r7
 2636              	 .cfi_def_cfa_register 13
 2637              	 
 2638 0114 80BD     	 pop {r7,pc}
 2639              	.L175:
 2640 0116 00BF     	 .align 2
 2641              	.L174:
 2642 0118 00000000 	 .word uxSchedulerSuspended
 2643 011c 00000000 	 .word uxCurrentNumberOfTasks
 2644 0120 00000000 	 .word xPendingReadyList
 2645 0124 00000000 	 .word uxTopReadyPriority
 2646 0128 00000000 	 .word pxReadyTasksLists
 2647 012c 00000000 	 .word pxCurrentTCB
 2648 0130 00000000 	 .word xYieldPending
 2649 0134 00000000 	 .word uxPendedTicks
 2650 0138 04ED00E0 	 .word -536810236
 2651              	 .cfi_endproc
 2652              	.LFE154:
 2654              	 .section .text.xTaskGetTickCount,"ax",%progbits
 2655              	 .align 2
 2656              	 .global xTaskGetTickCount
 2657              	 .thumb
 2658              	 .thumb_func
 2660              	xTaskGetTickCount:
 2661              	.LFB155:
2213:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2214:../Dave/Generated/FREERTOS/tasks.c **** 
2215:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xTaskGetTickCount( void )
2216:../Dave/Generated/FREERTOS/tasks.c **** {
 2662              	 .loc 1 2216 0
 2663              	 .cfi_startproc
 2664              	 
 2665              	 
 2666              	 
 2667 0000 80B4     	 push {r7}
 2668              	 .cfi_def_cfa_offset 4
 2669              	 .cfi_offset 7,-4
 2670 0002 83B0     	 sub sp,sp,#12
 2671              	 .cfi_def_cfa_offset 16
 2672 0004 00AF     	 add r7,sp,#0
 2673              	 .cfi_def_cfa_register 7
2217:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xTicks;
2218:../Dave/Generated/FREERTOS/tasks.c **** 
2219:../Dave/Generated/FREERTOS/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2220:../Dave/Generated/FREERTOS/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2221:../Dave/Generated/FREERTOS/tasks.c **** 	{
2222:../Dave/Generated/FREERTOS/tasks.c **** 		xTicks = xTickCount;
 2674              	 .loc 1 2222 0
 2675 0006 054B     	 ldr r3,.L178
 2676 0008 1B68     	 ldr r3,[r3]
 2677 000a 7B60     	 str r3,[r7,#4]
2223:../Dave/Generated/FREERTOS/tasks.c **** 	}
2224:../Dave/Generated/FREERTOS/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2225:../Dave/Generated/FREERTOS/tasks.c **** 
2226:../Dave/Generated/FREERTOS/tasks.c **** 	return xTicks;
 2678              	 .loc 1 2226 0
 2679 000c 7B68     	 ldr r3,[r7,#4]
2227:../Dave/Generated/FREERTOS/tasks.c **** }
 2680              	 .loc 1 2227 0
 2681 000e 1846     	 mov r0,r3
 2682 0010 0C37     	 adds r7,r7,#12
 2683              	 .cfi_def_cfa_offset 4
 2684 0012 BD46     	 mov sp,r7
 2685              	 .cfi_def_cfa_register 13
 2686              	 
 2687 0014 5DF8047B 	 ldr r7,[sp],#4
 2688              	 .cfi_restore 7
 2689              	 .cfi_def_cfa_offset 0
 2690 0018 7047     	 bx lr
 2691              	.L179:
 2692 001a 00BF     	 .align 2
 2693              	.L178:
 2694 001c 00000000 	 .word xTickCount
 2695              	 .cfi_endproc
 2696              	.LFE155:
 2698              	 .section .text.xTaskGetTickCountFromISR,"ax",%progbits
 2699              	 .align 2
 2700              	 .global xTaskGetTickCountFromISR
 2701              	 .thumb
 2702              	 .thumb_func
 2704              	xTaskGetTickCountFromISR:
 2705              	.LFB156:
2228:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2229:../Dave/Generated/FREERTOS/tasks.c **** 
2230:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2231:../Dave/Generated/FREERTOS/tasks.c **** {
 2706              	 .loc 1 2231 0
 2707              	 .cfi_startproc
 2708              	 
 2709              	 
 2710 0000 80B5     	 push {r7,lr}
 2711              	 .cfi_def_cfa_offset 8
 2712              	 .cfi_offset 7,-8
 2713              	 .cfi_offset 14,-4
 2714 0002 82B0     	 sub sp,sp,#8
 2715              	 .cfi_def_cfa_offset 16
 2716 0004 00AF     	 add r7,sp,#0
 2717              	 .cfi_def_cfa_register 7
2232:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xReturn;
2233:../Dave/Generated/FREERTOS/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2234:../Dave/Generated/FREERTOS/tasks.c **** 
2235:../Dave/Generated/FREERTOS/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2236:../Dave/Generated/FREERTOS/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2237:../Dave/Generated/FREERTOS/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2238:../Dave/Generated/FREERTOS/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2239:../Dave/Generated/FREERTOS/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2240:../Dave/Generated/FREERTOS/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2241:../Dave/Generated/FREERTOS/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2242:../Dave/Generated/FREERTOS/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2243:../Dave/Generated/FREERTOS/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2244:../Dave/Generated/FREERTOS/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2245:../Dave/Generated/FREERTOS/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2246:../Dave/Generated/FREERTOS/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2247:../Dave/Generated/FREERTOS/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2248:../Dave/Generated/FREERTOS/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2249:../Dave/Generated/FREERTOS/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2718              	 .loc 1 2249 0
 2719 0006 FFF7FEFF 	 bl vPortValidateInterruptPriority
2250:../Dave/Generated/FREERTOS/tasks.c **** 
2251:../Dave/Generated/FREERTOS/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 2720              	 .loc 1 2251 0
 2721 000a 0023     	 movs r3,#0
 2722 000c 7B60     	 str r3,[r7,#4]
2252:../Dave/Generated/FREERTOS/tasks.c **** 	{
2253:../Dave/Generated/FREERTOS/tasks.c **** 		xReturn = xTickCount;
 2723              	 .loc 1 2253 0
 2724 000e 044B     	 ldr r3,.L182
 2725 0010 1B68     	 ldr r3,[r3]
 2726 0012 3B60     	 str r3,[r7]
2254:../Dave/Generated/FREERTOS/tasks.c **** 	}
2255:../Dave/Generated/FREERTOS/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2256:../Dave/Generated/FREERTOS/tasks.c **** 
2257:../Dave/Generated/FREERTOS/tasks.c **** 	return xReturn;
 2727              	 .loc 1 2257 0
 2728 0014 3B68     	 ldr r3,[r7]
2258:../Dave/Generated/FREERTOS/tasks.c **** }
 2729              	 .loc 1 2258 0
 2730 0016 1846     	 mov r0,r3
 2731 0018 0837     	 adds r7,r7,#8
 2732              	 .cfi_def_cfa_offset 8
 2733 001a BD46     	 mov sp,r7
 2734              	 .cfi_def_cfa_register 13
 2735              	 
 2736 001c 80BD     	 pop {r7,pc}
 2737              	.L183:
 2738 001e 00BF     	 .align 2
 2739              	.L182:
 2740 0020 00000000 	 .word xTickCount
 2741              	 .cfi_endproc
 2742              	.LFE156:
 2744              	 .section .text.uxTaskGetNumberOfTasks,"ax",%progbits
 2745              	 .align 2
 2746              	 .global uxTaskGetNumberOfTasks
 2747              	 .thumb
 2748              	 .thumb_func
 2750              	uxTaskGetNumberOfTasks:
 2751              	.LFB157:
2259:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2260:../Dave/Generated/FREERTOS/tasks.c **** 
2261:../Dave/Generated/FREERTOS/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2262:../Dave/Generated/FREERTOS/tasks.c **** {
 2752              	 .loc 1 2262 0
 2753              	 .cfi_startproc
 2754              	 
 2755              	 
 2756              	 
 2757 0000 80B4     	 push {r7}
 2758              	 .cfi_def_cfa_offset 4
 2759              	 .cfi_offset 7,-4
 2760 0002 00AF     	 add r7,sp,#0
 2761              	 .cfi_def_cfa_register 7
2263:../Dave/Generated/FREERTOS/tasks.c **** 	/* A critical section is not required because the variables are of type
2264:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t. */
2265:../Dave/Generated/FREERTOS/tasks.c **** 	return uxCurrentNumberOfTasks;
 2762              	 .loc 1 2265 0
 2763 0004 034B     	 ldr r3,.L186
 2764 0006 1B68     	 ldr r3,[r3]
2266:../Dave/Generated/FREERTOS/tasks.c **** }
 2765              	 .loc 1 2266 0
 2766 0008 1846     	 mov r0,r3
 2767 000a BD46     	 mov sp,r7
 2768              	 .cfi_def_cfa_register 13
 2769              	 
 2770 000c 5DF8047B 	 ldr r7,[sp],#4
 2771              	 .cfi_restore 7
 2772              	 .cfi_def_cfa_offset 0
 2773 0010 7047     	 bx lr
 2774              	.L187:
 2775 0012 00BF     	 .align 2
 2776              	.L186:
 2777 0014 00000000 	 .word uxCurrentNumberOfTasks
 2778              	 .cfi_endproc
 2779              	.LFE157:
 2781              	 .section .text.pcTaskGetName,"ax",%progbits
 2782              	 .align 2
 2783              	 .global pcTaskGetName
 2784              	 .thumb
 2785              	 .thumb_func
 2787              	pcTaskGetName:
 2788              	.LFB158:
2267:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2268:../Dave/Generated/FREERTOS/tasks.c **** 
2269:../Dave/Generated/FREERTOS/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2270:../Dave/Generated/FREERTOS/tasks.c **** {
 2789              	 .loc 1 2270 0
 2790              	 .cfi_startproc
 2791              	 
 2792              	 
 2793              	 
 2794 0000 80B4     	 push {r7}
 2795              	 .cfi_def_cfa_offset 4
 2796              	 .cfi_offset 7,-4
 2797 0002 85B0     	 sub sp,sp,#20
 2798              	 .cfi_def_cfa_offset 24
 2799 0004 00AF     	 add r7,sp,#0
 2800              	 .cfi_def_cfa_register 7
 2801 0006 7860     	 str r0,[r7,#4]
2271:../Dave/Generated/FREERTOS/tasks.c **** TCB_t *pxTCB;
2272:../Dave/Generated/FREERTOS/tasks.c **** 
2273:../Dave/Generated/FREERTOS/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2274:../Dave/Generated/FREERTOS/tasks.c **** 	queried. */
2275:../Dave/Generated/FREERTOS/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 2802              	 .loc 1 2275 0
 2803 0008 7B68     	 ldr r3,[r7,#4]
 2804 000a 002B     	 cmp r3,#0
 2805 000c 02D1     	 bne .L189
 2806              	 .loc 1 2275 0 is_stmt 0 discriminator 1
 2807 000e 0D4B     	 ldr r3,.L194
 2808 0010 1B68     	 ldr r3,[r3]
 2809 0012 00E0     	 b .L190
 2810              	.L189:
 2811              	 .loc 1 2275 0 discriminator 2
 2812 0014 7B68     	 ldr r3,[r7,#4]
 2813              	.L190:
 2814              	 .loc 1 2275 0 discriminator 4
 2815 0016 FB60     	 str r3,[r7,#12]
2276:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxTCB );
 2816              	 .loc 1 2276 0 is_stmt 1 discriminator 4
 2817 0018 FB68     	 ldr r3,[r7,#12]
 2818 001a 002B     	 cmp r3,#0
 2819 001c 09D1     	 bne .L191
 2820              	.LBB154:
 2821              	.LBB155:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 2822              	 .loc 2 195 0 discriminator 1
 2823              	
 2824 001e 4FF0FC03 	 mov r3,#252
 2825 0022 83F31188 	 msr basepri,r3
 2826 0026 BFF36F8F 	 isb 
 2827 002a BFF34F8F 	 dsb 
 2828              	
 2829              	
 2830              	 .thumb
 2831 002e BB60     	 str r3,[r7,#8]
 2832              	.L192:
 2833              	.LBE155:
 2834              	.LBE154:
 2835              	 .loc 1 2276 0 discriminator 1
 2836 0030 FEE7     	 b .L192
 2837              	.L191:
2277:../Dave/Generated/FREERTOS/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2838              	 .loc 1 2277 0
 2839 0032 FB68     	 ldr r3,[r7,#12]
 2840 0034 3433     	 adds r3,r3,#52
2278:../Dave/Generated/FREERTOS/tasks.c **** }
 2841              	 .loc 1 2278 0
 2842 0036 1846     	 mov r0,r3
 2843 0038 1437     	 adds r7,r7,#20
 2844              	 .cfi_def_cfa_offset 4
 2845 003a BD46     	 mov sp,r7
 2846              	 .cfi_def_cfa_register 13
 2847              	 
 2848 003c 5DF8047B 	 ldr r7,[sp],#4
 2849              	 .cfi_restore 7
 2850              	 .cfi_def_cfa_offset 0
 2851 0040 7047     	 bx lr
 2852              	.L195:
 2853 0042 00BF     	 .align 2
 2854              	.L194:
 2855 0044 00000000 	 .word pxCurrentTCB
 2856              	 .cfi_endproc
 2857              	.LFE158:
 2859              	 .section .text.prvSearchForNameWithinSingleList,"ax",%progbits
 2860              	 .align 2
 2861              	 .thumb
 2862              	 .thumb_func
 2864              	prvSearchForNameWithinSingleList:
 2865              	.LFB159:
2279:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2280:../Dave/Generated/FREERTOS/tasks.c **** 
2281:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2282:../Dave/Generated/FREERTOS/tasks.c **** 
2283:../Dave/Generated/FREERTOS/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2284:../Dave/Generated/FREERTOS/tasks.c **** 	{
 2866              	 .loc 1 2284 0
 2867              	 .cfi_startproc
 2868              	 
 2869              	 
 2870              	 
 2871 0000 80B4     	 push {r7}
 2872              	 .cfi_def_cfa_offset 4
 2873              	 .cfi_offset 7,-4
 2874 0002 8BB0     	 sub sp,sp,#44
 2875              	 .cfi_def_cfa_offset 48
 2876 0004 00AF     	 add r7,sp,#0
 2877              	 .cfi_def_cfa_register 7
 2878 0006 7860     	 str r0,[r7,#4]
 2879 0008 3960     	 str r1,[r7]
2285:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 2880              	 .loc 1 2285 0
 2881 000a 0023     	 movs r3,#0
 2882 000c 7B62     	 str r3,[r7,#36]
2286:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t x;
2287:../Dave/Generated/FREERTOS/tasks.c **** 	char cNextChar;
2288:../Dave/Generated/FREERTOS/tasks.c **** 
2289:../Dave/Generated/FREERTOS/tasks.c **** 		/* This function is called with the scheduler suspended. */
2290:../Dave/Generated/FREERTOS/tasks.c **** 
2291:../Dave/Generated/FREERTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 2883              	 .loc 1 2291 0
 2884 000e 7B68     	 ldr r3,[r7,#4]
 2885 0010 1B68     	 ldr r3,[r3]
 2886 0012 002B     	 cmp r3,#0
 2887 0014 51D0     	 beq .L197
 2888              	.LBB156:
2292:../Dave/Generated/FREERTOS/tasks.c **** 		{
2293:../Dave/Generated/FREERTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 2889              	 .loc 1 2293 0
 2890 0016 7B68     	 ldr r3,[r7,#4]
 2891 0018 FB61     	 str r3,[r7,#28]
 2892 001a FB69     	 ldr r3,[r7,#28]
 2893 001c 5B68     	 ldr r3,[r3,#4]
 2894 001e 5A68     	 ldr r2,[r3,#4]
 2895 0020 FB69     	 ldr r3,[r7,#28]
 2896 0022 5A60     	 str r2,[r3,#4]
 2897 0024 FB69     	 ldr r3,[r7,#28]
 2898 0026 5A68     	 ldr r2,[r3,#4]
 2899 0028 FB69     	 ldr r3,[r7,#28]
 2900 002a 0833     	 adds r3,r3,#8
 2901 002c 9A42     	 cmp r2,r3
 2902 002e 04D1     	 bne .L198
 2903              	 .loc 1 2293 0 is_stmt 0 discriminator 1
 2904 0030 FB69     	 ldr r3,[r7,#28]
 2905 0032 5B68     	 ldr r3,[r3,#4]
 2906 0034 5A68     	 ldr r2,[r3,#4]
 2907 0036 FB69     	 ldr r3,[r7,#28]
 2908 0038 5A60     	 str r2,[r3,#4]
 2909              	.L198:
 2910              	 .loc 1 2293 0 discriminator 3
 2911 003a FB69     	 ldr r3,[r7,#28]
 2912 003c 5B68     	 ldr r3,[r3,#4]
 2913 003e DB68     	 ldr r3,[r3,#12]
 2914 0040 BB61     	 str r3,[r7,#24]
 2915              	.L207:
 2916              	.LBE156:
 2917              	.LBB157:
2294:../Dave/Generated/FREERTOS/tasks.c **** 
2295:../Dave/Generated/FREERTOS/tasks.c **** 			do
2296:../Dave/Generated/FREERTOS/tasks.c **** 			{
2297:../Dave/Generated/FREERTOS/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 2918              	 .loc 1 2297 0 is_stmt 1
 2919 0042 7B68     	 ldr r3,[r7,#4]
 2920 0044 7B61     	 str r3,[r7,#20]
 2921 0046 7B69     	 ldr r3,[r7,#20]
 2922 0048 5B68     	 ldr r3,[r3,#4]
 2923 004a 5A68     	 ldr r2,[r3,#4]
 2924 004c 7B69     	 ldr r3,[r7,#20]
 2925 004e 5A60     	 str r2,[r3,#4]
 2926 0050 7B69     	 ldr r3,[r7,#20]
 2927 0052 5A68     	 ldr r2,[r3,#4]
 2928 0054 7B69     	 ldr r3,[r7,#20]
 2929 0056 0833     	 adds r3,r3,#8
 2930 0058 9A42     	 cmp r2,r3
 2931 005a 04D1     	 bne .L199
 2932              	 .loc 1 2297 0 is_stmt 0 discriminator 1
 2933 005c 7B69     	 ldr r3,[r7,#20]
 2934 005e 5B68     	 ldr r3,[r3,#4]
 2935 0060 5A68     	 ldr r2,[r3,#4]
 2936 0062 7B69     	 ldr r3,[r7,#20]
 2937 0064 5A60     	 str r2,[r3,#4]
 2938              	.L199:
 2939              	 .loc 1 2297 0 discriminator 3
 2940 0066 7B69     	 ldr r3,[r7,#20]
 2941 0068 5B68     	 ldr r3,[r3,#4]
 2942 006a DB68     	 ldr r3,[r3,#12]
 2943 006c 3B61     	 str r3,[r7,#16]
 2944              	.LBE157:
2298:../Dave/Generated/FREERTOS/tasks.c **** 
2299:../Dave/Generated/FREERTOS/tasks.c **** 				/* Check each character in the name looking for a match or
2300:../Dave/Generated/FREERTOS/tasks.c **** 				mismatch. */
2301:../Dave/Generated/FREERTOS/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 2945              	 .loc 1 2301 0 is_stmt 1 discriminator 3
 2946 006e 0023     	 movs r3,#0
 2947 0070 3B62     	 str r3,[r7,#32]
 2948 0072 16E0     	 b .L200
 2949              	.L204:
2302:../Dave/Generated/FREERTOS/tasks.c **** 				{
2303:../Dave/Generated/FREERTOS/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
 2950              	 .loc 1 2303 0
 2951 0074 3A69     	 ldr r2,[r7,#16]
 2952 0076 3B6A     	 ldr r3,[r7,#32]
 2953 0078 1344     	 add r3,r3,r2
 2954 007a 3033     	 adds r3,r3,#48
 2955 007c 1B79     	 ldrb r3,[r3,#4]
 2956 007e FB73     	 strb r3,[r7,#15]
2304:../Dave/Generated/FREERTOS/tasks.c **** 
2305:../Dave/Generated/FREERTOS/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
 2957              	 .loc 1 2305 0
 2958 0080 3A68     	 ldr r2,[r7]
 2959 0082 3B6A     	 ldr r3,[r7,#32]
 2960 0084 1344     	 add r3,r3,r2
 2961 0086 1B78     	 ldrb r3,[r3]
 2962 0088 FA7B     	 ldrb r2,[r7,#15]
 2963 008a 9A42     	 cmp r2,r3
 2964 008c 00D0     	 beq .L201
2306:../Dave/Generated/FREERTOS/tasks.c **** 					{
2307:../Dave/Generated/FREERTOS/tasks.c **** 						/* Characters didn't match. */
2308:../Dave/Generated/FREERTOS/tasks.c **** 						break;
 2965              	 .loc 1 2308 0
 2966 008e 0BE0     	 b .L202
 2967              	.L201:
2309:../Dave/Generated/FREERTOS/tasks.c **** 					}
2310:../Dave/Generated/FREERTOS/tasks.c **** 					else if( cNextChar == 0x00 )
 2968              	 .loc 1 2310 0
 2969 0090 FB7B     	 ldrb r3,[r7,#15]
 2970 0092 002B     	 cmp r3,#0
 2971 0094 02D1     	 bne .L203
2311:../Dave/Generated/FREERTOS/tasks.c **** 					{
2312:../Dave/Generated/FREERTOS/tasks.c **** 						/* Both strings terminated, a match must have been
2313:../Dave/Generated/FREERTOS/tasks.c **** 						found. */
2314:../Dave/Generated/FREERTOS/tasks.c **** 						pxReturn = pxNextTCB;
 2972              	 .loc 1 2314 0
 2973 0096 3B69     	 ldr r3,[r7,#16]
 2974 0098 7B62     	 str r3,[r7,#36]
2315:../Dave/Generated/FREERTOS/tasks.c **** 						break;
 2975              	 .loc 1 2315 0
 2976 009a 05E0     	 b .L202
 2977              	.L203:
2301:../Dave/Generated/FREERTOS/tasks.c **** 				{
 2978              	 .loc 1 2301 0 discriminator 2
 2979 009c 3B6A     	 ldr r3,[r7,#32]
 2980 009e 0133     	 adds r3,r3,#1
 2981 00a0 3B62     	 str r3,[r7,#32]
 2982              	.L200:
2301:../Dave/Generated/FREERTOS/tasks.c **** 				{
 2983              	 .loc 1 2301 0 is_stmt 0 discriminator 1
 2984 00a2 3B6A     	 ldr r3,[r7,#32]
 2985 00a4 0F2B     	 cmp r3,#15
 2986 00a6 E5D9     	 bls .L204
 2987              	.L202:
2316:../Dave/Generated/FREERTOS/tasks.c **** 					}
2317:../Dave/Generated/FREERTOS/tasks.c **** 					else
2318:../Dave/Generated/FREERTOS/tasks.c **** 					{
2319:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2320:../Dave/Generated/FREERTOS/tasks.c **** 					}
2321:../Dave/Generated/FREERTOS/tasks.c **** 				}
2322:../Dave/Generated/FREERTOS/tasks.c **** 
2323:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxReturn != NULL )
 2988              	 .loc 1 2323 0 is_stmt 1
 2989 00a8 7B6A     	 ldr r3,[r7,#36]
 2990 00aa 002B     	 cmp r3,#0
 2991 00ac 01D0     	 beq .L205
2324:../Dave/Generated/FREERTOS/tasks.c **** 				{
2325:../Dave/Generated/FREERTOS/tasks.c **** 					/* The handle has been found. */
2326:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 2992              	 .loc 1 2326 0
 2993 00ae 00BF     	 nop
 2994 00b0 03E0     	 b .L197
 2995              	.L205:
2327:../Dave/Generated/FREERTOS/tasks.c **** 				}
2328:../Dave/Generated/FREERTOS/tasks.c **** 
2329:../Dave/Generated/FREERTOS/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 2996              	 .loc 1 2329 0
 2997 00b2 3A69     	 ldr r2,[r7,#16]
 2998 00b4 BB69     	 ldr r3,[r7,#24]
 2999 00b6 9A42     	 cmp r2,r3
 3000 00b8 C3D1     	 bne .L207
 3001              	.L197:
2330:../Dave/Generated/FREERTOS/tasks.c **** 		}
2331:../Dave/Generated/FREERTOS/tasks.c **** 		else
2332:../Dave/Generated/FREERTOS/tasks.c **** 		{
2333:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2334:../Dave/Generated/FREERTOS/tasks.c **** 		}
2335:../Dave/Generated/FREERTOS/tasks.c **** 
2336:../Dave/Generated/FREERTOS/tasks.c **** 		return pxReturn;
 3002              	 .loc 1 2336 0
 3003 00ba 7B6A     	 ldr r3,[r7,#36]
2337:../Dave/Generated/FREERTOS/tasks.c **** 	}
 3004              	 .loc 1 2337 0
 3005 00bc 1846     	 mov r0,r3
 3006 00be 2C37     	 adds r7,r7,#44
 3007              	 .cfi_def_cfa_offset 4
 3008 00c0 BD46     	 mov sp,r7
 3009              	 .cfi_def_cfa_register 13
 3010              	 
 3011 00c2 5DF8047B 	 ldr r7,[sp],#4
 3012              	 .cfi_restore 7
 3013              	 .cfi_def_cfa_offset 0
 3014 00c6 7047     	 bx lr
 3015              	 .cfi_endproc
 3016              	.LFE159:
 3018              	 .section .text.xTaskGetHandle,"ax",%progbits
 3019              	 .align 2
 3020              	 .global xTaskGetHandle
 3021              	 .thumb
 3022              	 .thumb_func
 3024              	xTaskGetHandle:
 3025              	.LFB160:
2338:../Dave/Generated/FREERTOS/tasks.c **** 
2339:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2340:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2341:../Dave/Generated/FREERTOS/tasks.c **** 
2342:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2343:../Dave/Generated/FREERTOS/tasks.c **** 
2344:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2345:../Dave/Generated/FREERTOS/tasks.c **** 	{
 3026              	 .loc 1 2345 0
 3027              	 .cfi_startproc
 3028              	 
 3029              	 
 3030 0000 80B5     	 push {r7,lr}
 3031              	 .cfi_def_cfa_offset 8
 3032              	 .cfi_offset 7,-8
 3033              	 .cfi_offset 14,-4
 3034 0002 86B0     	 sub sp,sp,#24
 3035              	 .cfi_def_cfa_offset 32
 3036 0004 00AF     	 add r7,sp,#0
 3037              	 .cfi_def_cfa_register 7
 3038 0006 7860     	 str r0,[r7,#4]
2346:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
 3039              	 .loc 1 2346 0
 3040 0008 0523     	 movs r3,#5
 3041 000a 7B61     	 str r3,[r7,#20]
2347:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t* pxTCB;
2348:../Dave/Generated/FREERTOS/tasks.c **** 
2349:../Dave/Generated/FREERTOS/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2350:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 3042              	 .loc 1 2350 0
 3043 000c 7868     	 ldr r0,[r7,#4]
 3044 000e FFF7FEFF 	 bl strlen
 3045 0012 0346     	 mov r3,r0
 3046 0014 0F2B     	 cmp r3,#15
 3047 0016 09D9     	 bls .L210
 3048              	.LBB158:
 3049              	.LBB159:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 3050              	 .loc 2 195 0 discriminator 1
 3051              	
 3052 0018 4FF0FC03 	 mov r3,#252
 3053 001c 83F31188 	 msr basepri,r3
 3054 0020 BFF36F8F 	 isb 
 3055 0024 BFF34F8F 	 dsb 
 3056              	
 3057              	
 3058              	 .thumb
 3059 0028 FB60     	 str r3,[r7,#12]
 3060              	.L211:
 3061              	.LBE159:
 3062              	.LBE158:
 3063              	 .loc 1 2350 0 discriminator 1
 3064 002a FEE7     	 b .L211
 3065              	.L210:
2351:../Dave/Generated/FREERTOS/tasks.c **** 
2352:../Dave/Generated/FREERTOS/tasks.c **** 		vTaskSuspendAll();
 3066              	 .loc 1 2352 0
 3067 002c FFF7FEFF 	 bl vTaskSuspendAll
 3068              	.L214:
2353:../Dave/Generated/FREERTOS/tasks.c **** 		{
2354:../Dave/Generated/FREERTOS/tasks.c **** 			/* Search the ready lists. */
2355:../Dave/Generated/FREERTOS/tasks.c **** 			do
2356:../Dave/Generated/FREERTOS/tasks.c **** 			{
2357:../Dave/Generated/FREERTOS/tasks.c **** 				uxQueue--;
 3069              	 .loc 1 2357 0
 3070 0030 7B69     	 ldr r3,[r7,#20]
 3071 0032 013B     	 subs r3,r3,#1
 3072 0034 7B61     	 str r3,[r7,#20]
2358:../Dave/Generated/FREERTOS/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
 3073              	 .loc 1 2358 0
 3074 0036 7A69     	 ldr r2,[r7,#20]
 3075 0038 1346     	 mov r3,r2
 3076 003a 9B00     	 lsls r3,r3,#2
 3077 003c 1344     	 add r3,r3,r2
 3078 003e 9B00     	 lsls r3,r3,#2
 3079 0040 1C4A     	 ldr r2,.L220
 3080 0042 1344     	 add r3,r3,r2
 3081 0044 1846     	 mov r0,r3
 3082 0046 7968     	 ldr r1,[r7,#4]
 3083 0048 FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 3084 004c 3861     	 str r0,[r7,#16]
2359:../Dave/Generated/FREERTOS/tasks.c **** 
2360:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB != NULL )
 3085              	 .loc 1 2360 0
 3086 004e 3B69     	 ldr r3,[r7,#16]
 3087 0050 002B     	 cmp r3,#0
 3088 0052 00D0     	 beq .L212
2361:../Dave/Generated/FREERTOS/tasks.c **** 				{
2362:../Dave/Generated/FREERTOS/tasks.c **** 					/* Found the handle. */
2363:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 3089              	 .loc 1 2363 0
 3090 0054 02E0     	 b .L213
 3091              	.L212:
2364:../Dave/Generated/FREERTOS/tasks.c **** 				}
2365:../Dave/Generated/FREERTOS/tasks.c **** 
2366:../Dave/Generated/FREERTOS/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
 3092              	 .loc 1 2366 0
 3093 0056 7B69     	 ldr r3,[r7,#20]
 3094 0058 002B     	 cmp r3,#0
 3095 005a E9D1     	 bne .L214
 3096              	.L213:
2367:../Dave/Generated/FREERTOS/tasks.c **** 
2368:../Dave/Generated/FREERTOS/tasks.c **** 			/* Search the delayed lists. */
2369:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB == NULL )
 3097              	 .loc 1 2369 0
 3098 005c 3B69     	 ldr r3,[r7,#16]
 3099 005e 002B     	 cmp r3,#0
 3100 0060 06D1     	 bne .L215
2370:../Dave/Generated/FREERTOS/tasks.c **** 			{
2371:../Dave/Generated/FREERTOS/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 3101              	 .loc 1 2371 0
 3102 0062 154B     	 ldr r3,.L220+4
 3103 0064 1B68     	 ldr r3,[r3]
 3104 0066 1846     	 mov r0,r3
 3105 0068 7968     	 ldr r1,[r7,#4]
 3106 006a FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 3107 006e 3861     	 str r0,[r7,#16]
 3108              	.L215:
2372:../Dave/Generated/FREERTOS/tasks.c **** 			}
2373:../Dave/Generated/FREERTOS/tasks.c **** 
2374:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB == NULL )
 3109              	 .loc 1 2374 0
 3110 0070 3B69     	 ldr r3,[r7,#16]
 3111 0072 002B     	 cmp r3,#0
 3112 0074 06D1     	 bne .L216
2375:../Dave/Generated/FREERTOS/tasks.c **** 			{
2376:../Dave/Generated/FREERTOS/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
 3113              	 .loc 1 2376 0
 3114 0076 114B     	 ldr r3,.L220+8
 3115 0078 1B68     	 ldr r3,[r3]
 3116 007a 1846     	 mov r0,r3
 3117 007c 7968     	 ldr r1,[r7,#4]
 3118 007e FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 3119 0082 3861     	 str r0,[r7,#16]
 3120              	.L216:
2377:../Dave/Generated/FREERTOS/tasks.c **** 			}
2378:../Dave/Generated/FREERTOS/tasks.c **** 
2379:../Dave/Generated/FREERTOS/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2380:../Dave/Generated/FREERTOS/tasks.c **** 			{
2381:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB == NULL )
 3121              	 .loc 1 2381 0
 3122 0084 3B69     	 ldr r3,[r7,#16]
 3123 0086 002B     	 cmp r3,#0
 3124 0088 04D1     	 bne .L217
2382:../Dave/Generated/FREERTOS/tasks.c **** 				{
2383:../Dave/Generated/FREERTOS/tasks.c **** 					/* Search the suspended list. */
2384:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 3125              	 .loc 1 2384 0
 3126 008a 0D48     	 ldr r0,.L220+12
 3127 008c 7968     	 ldr r1,[r7,#4]
 3128 008e FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 3129 0092 3861     	 str r0,[r7,#16]
 3130              	.L217:
2385:../Dave/Generated/FREERTOS/tasks.c **** 				}
2386:../Dave/Generated/FREERTOS/tasks.c **** 			}
2387:../Dave/Generated/FREERTOS/tasks.c **** 			#endif
2388:../Dave/Generated/FREERTOS/tasks.c **** 
2389:../Dave/Generated/FREERTOS/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2390:../Dave/Generated/FREERTOS/tasks.c **** 			{
2391:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB == NULL )
 3131              	 .loc 1 2391 0
 3132 0094 3B69     	 ldr r3,[r7,#16]
 3133 0096 002B     	 cmp r3,#0
 3134 0098 04D1     	 bne .L218
2392:../Dave/Generated/FREERTOS/tasks.c **** 				{
2393:../Dave/Generated/FREERTOS/tasks.c **** 					/* Search the deleted list. */
2394:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 3135              	 .loc 1 2394 0
 3136 009a 0A48     	 ldr r0,.L220+16
 3137 009c 7968     	 ldr r1,[r7,#4]
 3138 009e FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 3139 00a2 3861     	 str r0,[r7,#16]
 3140              	.L218:
2395:../Dave/Generated/FREERTOS/tasks.c **** 				}
2396:../Dave/Generated/FREERTOS/tasks.c **** 			}
2397:../Dave/Generated/FREERTOS/tasks.c **** 			#endif
2398:../Dave/Generated/FREERTOS/tasks.c **** 		}
2399:../Dave/Generated/FREERTOS/tasks.c **** 		( void ) xTaskResumeAll();
 3141              	 .loc 1 2399 0
 3142 00a4 FFF7FEFF 	 bl xTaskResumeAll
2400:../Dave/Generated/FREERTOS/tasks.c **** 
2401:../Dave/Generated/FREERTOS/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
 3143              	 .loc 1 2401 0
 3144 00a8 3B69     	 ldr r3,[r7,#16]
2402:../Dave/Generated/FREERTOS/tasks.c **** 	}
 3145              	 .loc 1 2402 0
 3146 00aa 1846     	 mov r0,r3
 3147 00ac 1837     	 adds r7,r7,#24
 3148              	 .cfi_def_cfa_offset 8
 3149 00ae BD46     	 mov sp,r7
 3150              	 .cfi_def_cfa_register 13
 3151              	 
 3152 00b0 80BD     	 pop {r7,pc}
 3153              	.L221:
 3154 00b2 00BF     	 .align 2
 3155              	.L220:
 3156 00b4 00000000 	 .word pxReadyTasksLists
 3157 00b8 00000000 	 .word pxDelayedTaskList
 3158 00bc 00000000 	 .word pxOverflowDelayedTaskList
 3159 00c0 00000000 	 .word xSuspendedTaskList
 3160 00c4 00000000 	 .word xTasksWaitingTermination
 3161              	 .cfi_endproc
 3162              	.LFE160:
 3164              	 .section .text.uxTaskGetSystemState,"ax",%progbits
 3165              	 .align 2
 3166              	 .global uxTaskGetSystemState
 3167              	 .thumb
 3168              	 .thumb_func
 3170              	uxTaskGetSystemState:
 3171              	.LFB161:
2403:../Dave/Generated/FREERTOS/tasks.c **** 
2404:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2405:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2406:../Dave/Generated/FREERTOS/tasks.c **** 
2407:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2408:../Dave/Generated/FREERTOS/tasks.c **** 
2409:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2410:../Dave/Generated/FREERTOS/tasks.c **** 	{
 3172              	 .loc 1 2410 0
 3173              	 .cfi_startproc
 3174              	 
 3175              	 
 3176 0000 80B5     	 push {r7,lr}
 3177              	 .cfi_def_cfa_offset 8
 3178              	 .cfi_offset 7,-8
 3179              	 .cfi_offset 14,-4
 3180 0002 86B0     	 sub sp,sp,#24
 3181              	 .cfi_def_cfa_offset 32
 3182 0004 00AF     	 add r7,sp,#0
 3183              	 .cfi_def_cfa_register 7
 3184 0006 F860     	 str r0,[r7,#12]
 3185 0008 B960     	 str r1,[r7,#8]
 3186 000a 7A60     	 str r2,[r7,#4]
2411:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 3187              	 .loc 1 2411 0
 3188 000c 0023     	 movs r3,#0
 3189 000e 7B61     	 str r3,[r7,#20]
 3190 0010 0523     	 movs r3,#5
 3191 0012 3B61     	 str r3,[r7,#16]
2412:../Dave/Generated/FREERTOS/tasks.c **** 
2413:../Dave/Generated/FREERTOS/tasks.c **** 		vTaskSuspendAll();
 3192              	 .loc 1 2413 0
 3193 0014 FFF7FEFF 	 bl vTaskSuspendAll
2414:../Dave/Generated/FREERTOS/tasks.c **** 		{
2415:../Dave/Generated/FREERTOS/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2416:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
 3194              	 .loc 1 2416 0
 3195 0018 3B4B     	 ldr r3,.L227
 3196 001a 1B68     	 ldr r3,[r3]
 3197 001c BA68     	 ldr r2,[r7,#8]
 3198 001e 9A42     	 cmp r2,r3
 3199 0020 6BD3     	 bcc .L223
 3200              	.L224:
2417:../Dave/Generated/FREERTOS/tasks.c **** 			{
2418:../Dave/Generated/FREERTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2419:../Dave/Generated/FREERTOS/tasks.c **** 				task in the Ready state. */
2420:../Dave/Generated/FREERTOS/tasks.c **** 				do
2421:../Dave/Generated/FREERTOS/tasks.c **** 				{
2422:../Dave/Generated/FREERTOS/tasks.c **** 					uxQueue--;
 3201              	 .loc 1 2422 0 discriminator 1
 3202 0022 3B69     	 ldr r3,[r7,#16]
 3203 0024 013B     	 subs r3,r3,#1
 3204 0026 3B61     	 str r3,[r7,#16]
2423:../Dave/Generated/FREERTOS/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 3205              	 .loc 1 2423 0 discriminator 1
 3206 0028 7A69     	 ldr r2,[r7,#20]
 3207 002a 1346     	 mov r3,r2
 3208 002c DB00     	 lsls r3,r3,#3
 3209 002e 1344     	 add r3,r3,r2
 3210 0030 9B00     	 lsls r3,r3,#2
 3211 0032 1A46     	 mov r2,r3
 3212 0034 FB68     	 ldr r3,[r7,#12]
 3213 0036 9918     	 adds r1,r3,r2
 3214 0038 3A69     	 ldr r2,[r7,#16]
 3215 003a 1346     	 mov r3,r2
 3216 003c 9B00     	 lsls r3,r3,#2
 3217 003e 1344     	 add r3,r3,r2
 3218 0040 9B00     	 lsls r3,r3,#2
 3219 0042 324A     	 ldr r2,.L227+4
 3220 0044 1344     	 add r3,r3,r2
 3221 0046 0846     	 mov r0,r1
 3222 0048 1946     	 mov r1,r3
 3223 004a 0122     	 movs r2,#1
 3224 004c FFF7FEFF 	 bl prvListTasksWithinSingleList
 3225 0050 0246     	 mov r2,r0
 3226 0052 7B69     	 ldr r3,[r7,#20]
 3227 0054 1344     	 add r3,r3,r2
 3228 0056 7B61     	 str r3,[r7,#20]
2424:../Dave/Generated/FREERTOS/tasks.c **** 
2425:../Dave/Generated/FREERTOS/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
 3229              	 .loc 1 2425 0 discriminator 1
 3230 0058 3B69     	 ldr r3,[r7,#16]
 3231 005a 002B     	 cmp r3,#0
 3232 005c E1D1     	 bne .L224
2426:../Dave/Generated/FREERTOS/tasks.c **** 
2427:../Dave/Generated/FREERTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2428:../Dave/Generated/FREERTOS/tasks.c **** 				task in the Blocked state. */
2429:../Dave/Generated/FREERTOS/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
 3233              	 .loc 1 2429 0
 3234 005e 7A69     	 ldr r2,[r7,#20]
 3235 0060 1346     	 mov r3,r2
 3236 0062 DB00     	 lsls r3,r3,#3
 3237 0064 1344     	 add r3,r3,r2
 3238 0066 9B00     	 lsls r3,r3,#2
 3239 0068 1A46     	 mov r2,r3
 3240 006a FB68     	 ldr r3,[r7,#12]
 3241 006c 1A44     	 add r2,r2,r3
 3242 006e 284B     	 ldr r3,.L227+8
 3243 0070 1B68     	 ldr r3,[r3]
 3244 0072 1046     	 mov r0,r2
 3245 0074 1946     	 mov r1,r3
 3246 0076 0222     	 movs r2,#2
 3247 0078 FFF7FEFF 	 bl prvListTasksWithinSingleList
 3248 007c 0246     	 mov r2,r0
 3249 007e 7B69     	 ldr r3,[r7,#20]
 3250 0080 1344     	 add r3,r3,r2
 3251 0082 7B61     	 str r3,[r7,#20]
2430:../Dave/Generated/FREERTOS/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 3252              	 .loc 1 2430 0
 3253 0084 7A69     	 ldr r2,[r7,#20]
 3254 0086 1346     	 mov r3,r2
 3255 0088 DB00     	 lsls r3,r3,#3
 3256 008a 1344     	 add r3,r3,r2
 3257 008c 9B00     	 lsls r3,r3,#2
 3258 008e 1A46     	 mov r2,r3
 3259 0090 FB68     	 ldr r3,[r7,#12]
 3260 0092 1A44     	 add r2,r2,r3
 3261 0094 1F4B     	 ldr r3,.L227+12
 3262 0096 1B68     	 ldr r3,[r3]
 3263 0098 1046     	 mov r0,r2
 3264 009a 1946     	 mov r1,r3
 3265 009c 0222     	 movs r2,#2
 3266 009e FFF7FEFF 	 bl prvListTasksWithinSingleList
 3267 00a2 0246     	 mov r2,r0
 3268 00a4 7B69     	 ldr r3,[r7,#20]
 3269 00a6 1344     	 add r3,r3,r2
 3270 00a8 7B61     	 str r3,[r7,#20]
2431:../Dave/Generated/FREERTOS/tasks.c **** 
2432:../Dave/Generated/FREERTOS/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2433:../Dave/Generated/FREERTOS/tasks.c **** 				{
2434:../Dave/Generated/FREERTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2435:../Dave/Generated/FREERTOS/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2436:../Dave/Generated/FREERTOS/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
 3271              	 .loc 1 2436 0
 3272 00aa 7A69     	 ldr r2,[r7,#20]
 3273 00ac 1346     	 mov r3,r2
 3274 00ae DB00     	 lsls r3,r3,#3
 3275 00b0 1344     	 add r3,r3,r2
 3276 00b2 9B00     	 lsls r3,r3,#2
 3277 00b4 1A46     	 mov r2,r3
 3278 00b6 FB68     	 ldr r3,[r7,#12]
 3279 00b8 1344     	 add r3,r3,r2
 3280 00ba 1846     	 mov r0,r3
 3281 00bc 1649     	 ldr r1,.L227+16
 3282 00be 0422     	 movs r2,#4
 3283 00c0 FFF7FEFF 	 bl prvListTasksWithinSingleList
 3284 00c4 0246     	 mov r2,r0
 3285 00c6 7B69     	 ldr r3,[r7,#20]
 3286 00c8 1344     	 add r3,r3,r2
 3287 00ca 7B61     	 str r3,[r7,#20]
2437:../Dave/Generated/FREERTOS/tasks.c **** 				}
2438:../Dave/Generated/FREERTOS/tasks.c **** 				#endif
2439:../Dave/Generated/FREERTOS/tasks.c **** 
2440:../Dave/Generated/FREERTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2441:../Dave/Generated/FREERTOS/tasks.c **** 				{
2442:../Dave/Generated/FREERTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2443:../Dave/Generated/FREERTOS/tasks.c **** 					each task in the Suspended state. */
2444:../Dave/Generated/FREERTOS/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
 3288              	 .loc 1 2444 0
 3289 00cc 7A69     	 ldr r2,[r7,#20]
 3290 00ce 1346     	 mov r3,r2
 3291 00d0 DB00     	 lsls r3,r3,#3
 3292 00d2 1344     	 add r3,r3,r2
 3293 00d4 9B00     	 lsls r3,r3,#2
 3294 00d6 1A46     	 mov r2,r3
 3295 00d8 FB68     	 ldr r3,[r7,#12]
 3296 00da 1344     	 add r3,r3,r2
 3297 00dc 1846     	 mov r0,r3
 3298 00de 0F49     	 ldr r1,.L227+20
 3299 00e0 0322     	 movs r2,#3
 3300 00e2 FFF7FEFF 	 bl prvListTasksWithinSingleList
 3301 00e6 0246     	 mov r2,r0
 3302 00e8 7B69     	 ldr r3,[r7,#20]
 3303 00ea 1344     	 add r3,r3,r2
 3304 00ec 7B61     	 str r3,[r7,#20]
2445:../Dave/Generated/FREERTOS/tasks.c **** 				}
2446:../Dave/Generated/FREERTOS/tasks.c **** 				#endif
2447:../Dave/Generated/FREERTOS/tasks.c **** 
2448:../Dave/Generated/FREERTOS/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2449:../Dave/Generated/FREERTOS/tasks.c **** 				{
2450:../Dave/Generated/FREERTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
2451:../Dave/Generated/FREERTOS/tasks.c **** 					{
2452:../Dave/Generated/FREERTOS/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2453:../Dave/Generated/FREERTOS/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2454:../Dave/Generated/FREERTOS/tasks.c **** 						#else
2455:../Dave/Generated/FREERTOS/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2456:../Dave/Generated/FREERTOS/tasks.c **** 						#endif
2457:../Dave/Generated/FREERTOS/tasks.c **** 					}
2458:../Dave/Generated/FREERTOS/tasks.c **** 				}
2459:../Dave/Generated/FREERTOS/tasks.c **** 				#else
2460:../Dave/Generated/FREERTOS/tasks.c **** 				{
2461:../Dave/Generated/FREERTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
 3305              	 .loc 1 2461 0
 3306 00ee 7B68     	 ldr r3,[r7,#4]
 3307 00f0 002B     	 cmp r3,#0
 3308 00f2 02D0     	 beq .L223
2462:../Dave/Generated/FREERTOS/tasks.c **** 					{
2463:../Dave/Generated/FREERTOS/tasks.c **** 						*pulTotalRunTime = 0;
 3309              	 .loc 1 2463 0
 3310 00f4 7B68     	 ldr r3,[r7,#4]
 3311 00f6 0022     	 movs r2,#0
 3312 00f8 1A60     	 str r2,[r3]
 3313              	.L223:
2464:../Dave/Generated/FREERTOS/tasks.c **** 					}
2465:../Dave/Generated/FREERTOS/tasks.c **** 				}
2466:../Dave/Generated/FREERTOS/tasks.c **** 				#endif
2467:../Dave/Generated/FREERTOS/tasks.c **** 			}
2468:../Dave/Generated/FREERTOS/tasks.c **** 			else
2469:../Dave/Generated/FREERTOS/tasks.c **** 			{
2470:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2471:../Dave/Generated/FREERTOS/tasks.c **** 			}
2472:../Dave/Generated/FREERTOS/tasks.c **** 		}
2473:../Dave/Generated/FREERTOS/tasks.c **** 		( void ) xTaskResumeAll();
 3314              	 .loc 1 2473 0
 3315 00fa FFF7FEFF 	 bl xTaskResumeAll
2474:../Dave/Generated/FREERTOS/tasks.c **** 
2475:../Dave/Generated/FREERTOS/tasks.c **** 		return uxTask;
 3316              	 .loc 1 2475 0
 3317 00fe 7B69     	 ldr r3,[r7,#20]
2476:../Dave/Generated/FREERTOS/tasks.c **** 	}
 3318              	 .loc 1 2476 0
 3319 0100 1846     	 mov r0,r3
 3320 0102 1837     	 adds r7,r7,#24
 3321              	 .cfi_def_cfa_offset 8
 3322 0104 BD46     	 mov sp,r7
 3323              	 .cfi_def_cfa_register 13
 3324              	 
 3325 0106 80BD     	 pop {r7,pc}
 3326              	.L228:
 3327              	 .align 2
 3328              	.L227:
 3329 0108 00000000 	 .word uxCurrentNumberOfTasks
 3330 010c 00000000 	 .word pxReadyTasksLists
 3331 0110 00000000 	 .word pxDelayedTaskList
 3332 0114 00000000 	 .word pxOverflowDelayedTaskList
 3333 0118 00000000 	 .word xTasksWaitingTermination
 3334 011c 00000000 	 .word xSuspendedTaskList
 3335              	 .cfi_endproc
 3336              	.LFE161:
 3338              	 .section .text.xTaskGetIdleTaskHandle,"ax",%progbits
 3339              	 .align 2
 3340              	 .global xTaskGetIdleTaskHandle
 3341              	 .thumb
 3342              	 .thumb_func
 3344              	xTaskGetIdleTaskHandle:
 3345              	.LFB162:
2477:../Dave/Generated/FREERTOS/tasks.c **** 
2478:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2479:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2480:../Dave/Generated/FREERTOS/tasks.c **** 
2481:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2482:../Dave/Generated/FREERTOS/tasks.c **** 
2483:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2484:../Dave/Generated/FREERTOS/tasks.c **** 	{
 3346              	 .loc 1 2484 0
 3347              	 .cfi_startproc
 3348              	 
 3349              	 
 3350              	 
 3351 0000 80B4     	 push {r7}
 3352              	 .cfi_def_cfa_offset 4
 3353              	 .cfi_offset 7,-4
 3354 0002 83B0     	 sub sp,sp,#12
 3355              	 .cfi_def_cfa_offset 16
 3356 0004 00AF     	 add r7,sp,#0
 3357              	 .cfi_def_cfa_register 7
2485:../Dave/Generated/FREERTOS/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2486:../Dave/Generated/FREERTOS/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2487:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
 3358              	 .loc 1 2487 0
 3359 0006 0B4B     	 ldr r3,.L233
 3360 0008 1B68     	 ldr r3,[r3]
 3361 000a 002B     	 cmp r3,#0
 3362 000c 09D1     	 bne .L230
 3363              	.LBB160:
 3364              	.LBB161:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 3365              	 .loc 2 195 0 discriminator 1
 3366              	
 3367 000e 4FF0FC03 	 mov r3,#252
 3368 0012 83F31188 	 msr basepri,r3
 3369 0016 BFF36F8F 	 isb 
 3370 001a BFF34F8F 	 dsb 
 3371              	
 3372              	
 3373              	 .thumb
 3374 001e 7B60     	 str r3,[r7,#4]
 3375              	.L231:
 3376              	.LBE161:
 3377              	.LBE160:
 3378              	 .loc 1 2487 0 discriminator 1
 3379 0020 FEE7     	 b .L231
 3380              	.L230:
2488:../Dave/Generated/FREERTOS/tasks.c **** 		return xIdleTaskHandle;
 3381              	 .loc 1 2488 0
 3382 0022 044B     	 ldr r3,.L233
 3383 0024 1B68     	 ldr r3,[r3]
2489:../Dave/Generated/FREERTOS/tasks.c **** 	}
 3384              	 .loc 1 2489 0
 3385 0026 1846     	 mov r0,r3
 3386 0028 0C37     	 adds r7,r7,#12
 3387              	 .cfi_def_cfa_offset 4
 3388 002a BD46     	 mov sp,r7
 3389              	 .cfi_def_cfa_register 13
 3390              	 
 3391 002c 5DF8047B 	 ldr r7,[sp],#4
 3392              	 .cfi_restore 7
 3393              	 .cfi_def_cfa_offset 0
 3394 0030 7047     	 bx lr
 3395              	.L234:
 3396 0032 00BF     	 .align 2
 3397              	.L233:
 3398 0034 00000000 	 .word xIdleTaskHandle
 3399              	 .cfi_endproc
 3400              	.LFE162:
 3402              	 .section .text.xTaskAbortDelay,"ax",%progbits
 3403              	 .align 2
 3404              	 .global xTaskAbortDelay
 3405              	 .thumb
 3406              	 .thumb_func
 3408              	xTaskAbortDelay:
 3409              	.LFB163:
2490:../Dave/Generated/FREERTOS/tasks.c **** 
2491:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2492:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2493:../Dave/Generated/FREERTOS/tasks.c **** 
2494:../Dave/Generated/FREERTOS/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2495:../Dave/Generated/FREERTOS/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2496:../Dave/Generated/FREERTOS/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2497:../Dave/Generated/FREERTOS/tasks.c **** 1. */
2498:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2499:../Dave/Generated/FREERTOS/tasks.c **** 
2500:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2501:../Dave/Generated/FREERTOS/tasks.c **** 	{
2502:../Dave/Generated/FREERTOS/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2503:../Dave/Generated/FREERTOS/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2504:../Dave/Generated/FREERTOS/tasks.c **** 		each stepped tick. */
2505:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2506:../Dave/Generated/FREERTOS/tasks.c **** 		xTickCount += xTicksToJump;
2507:../Dave/Generated/FREERTOS/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2508:../Dave/Generated/FREERTOS/tasks.c **** 	}
2509:../Dave/Generated/FREERTOS/tasks.c **** 
2510:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2511:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2512:../Dave/Generated/FREERTOS/tasks.c **** 
2513:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2514:../Dave/Generated/FREERTOS/tasks.c **** 
2515:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2516:../Dave/Generated/FREERTOS/tasks.c **** 	{
 3410              	 .loc 1 2516 0
 3411              	 .cfi_startproc
 3412              	 
 3413              	 
 3414 0000 80B5     	 push {r7,lr}
 3415              	 .cfi_def_cfa_offset 8
 3416              	 .cfi_offset 7,-8
 3417              	 .cfi_offset 14,-4
 3418 0002 86B0     	 sub sp,sp,#24
 3419              	 .cfi_def_cfa_offset 32
 3420 0004 00AF     	 add r7,sp,#0
 3421              	 .cfi_def_cfa_register 7
 3422 0006 7860     	 str r0,[r7,#4]
2517:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
 3423              	 .loc 1 2517 0
 3424 0008 7B68     	 ldr r3,[r7,#4]
 3425 000a 3B61     	 str r3,[r7,#16]
2518:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn;
2519:../Dave/Generated/FREERTOS/tasks.c **** 
2520:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( pxTCB );
 3426              	 .loc 1 2520 0
 3427 000c 3B69     	 ldr r3,[r7,#16]
 3428 000e 002B     	 cmp r3,#0
 3429 0010 09D1     	 bne .L236
 3430              	.LBB162:
 3431              	.LBB163:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 3432              	 .loc 2 195 0 discriminator 1
 3433              	
 3434 0012 4FF0FC03 	 mov r3,#252
 3435 0016 83F31188 	 msr basepri,r3
 3436 001a BFF36F8F 	 isb 
 3437 001e BFF34F8F 	 dsb 
 3438              	
 3439              	
 3440              	 .thumb
 3441 0022 FB60     	 str r3,[r7,#12]
 3442              	.L237:
 3443              	.LBE163:
 3444              	.LBE162:
 3445              	 .loc 1 2520 0 discriminator 1
 3446 0024 FEE7     	 b .L237
 3447              	.L236:
2521:../Dave/Generated/FREERTOS/tasks.c **** 
2522:../Dave/Generated/FREERTOS/tasks.c **** 		vTaskSuspendAll();
 3448              	 .loc 1 2522 0
 3449 0026 FFF7FEFF 	 bl vTaskSuspendAll
2523:../Dave/Generated/FREERTOS/tasks.c **** 		{
2524:../Dave/Generated/FREERTOS/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2525:../Dave/Generated/FREERTOS/tasks.c **** 			it is actually in the Blocked state. */
2526:../Dave/Generated/FREERTOS/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
 3450              	 .loc 1 2526 0
 3451 002a 7868     	 ldr r0,[r7,#4]
 3452 002c FFF7FEFF 	 bl eTaskGetState
 3453 0030 0346     	 mov r3,r0
 3454 0032 022B     	 cmp r3,#2
 3455 0034 3BD1     	 bne .L238
2527:../Dave/Generated/FREERTOS/tasks.c **** 			{
2528:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdPASS;
 3456              	 .loc 1 2528 0
 3457 0036 0123     	 movs r3,#1
 3458 0038 7B61     	 str r3,[r7,#20]
2529:../Dave/Generated/FREERTOS/tasks.c **** 
2530:../Dave/Generated/FREERTOS/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2531:../Dave/Generated/FREERTOS/tasks.c **** 				interrupt won't touch the xStateListItem because the
2532:../Dave/Generated/FREERTOS/tasks.c **** 				scheduler is suspended. */
2533:../Dave/Generated/FREERTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3459              	 .loc 1 2533 0
 3460 003a 3B69     	 ldr r3,[r7,#16]
 3461 003c 0433     	 adds r3,r3,#4
 3462 003e 1846     	 mov r0,r3
 3463 0040 FFF7FEFF 	 bl uxListRemove
2534:../Dave/Generated/FREERTOS/tasks.c **** 
2535:../Dave/Generated/FREERTOS/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2536:../Dave/Generated/FREERTOS/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2537:../Dave/Generated/FREERTOS/tasks.c **** 				even though the scheduler is suspended, so a critical section
2538:../Dave/Generated/FREERTOS/tasks.c **** 				is used. */
2539:../Dave/Generated/FREERTOS/tasks.c **** 				taskENTER_CRITICAL();
 3464              	 .loc 1 2539 0
 3465 0044 FFF7FEFF 	 bl vPortEnterCritical
2540:../Dave/Generated/FREERTOS/tasks.c **** 				{
2541:../Dave/Generated/FREERTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3466              	 .loc 1 2541 0
 3467 0048 3B69     	 ldr r3,[r7,#16]
 3468 004a 9B6A     	 ldr r3,[r3,#40]
 3469 004c 002B     	 cmp r3,#0
 3470 004e 08D0     	 beq .L239
2542:../Dave/Generated/FREERTOS/tasks.c **** 					{
2543:../Dave/Generated/FREERTOS/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3471              	 .loc 1 2543 0
 3472 0050 3B69     	 ldr r3,[r7,#16]
 3473 0052 1833     	 adds r3,r3,#24
 3474 0054 1846     	 mov r0,r3
 3475 0056 FFF7FEFF 	 bl uxListRemove
2544:../Dave/Generated/FREERTOS/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
 3476              	 .loc 1 2544 0
 3477 005a 3B69     	 ldr r3,[r7,#16]
 3478 005c 0122     	 movs r2,#1
 3479 005e 83F86D20 	 strb r2,[r3,#109]
 3480              	.L239:
2545:../Dave/Generated/FREERTOS/tasks.c **** 					}
2546:../Dave/Generated/FREERTOS/tasks.c **** 					else
2547:../Dave/Generated/FREERTOS/tasks.c **** 					{
2548:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2549:../Dave/Generated/FREERTOS/tasks.c **** 					}
2550:../Dave/Generated/FREERTOS/tasks.c **** 				}
2551:../Dave/Generated/FREERTOS/tasks.c **** 				taskEXIT_CRITICAL();
 3481              	 .loc 1 2551 0
 3482 0062 FFF7FEFF 	 bl vPortExitCritical
2552:../Dave/Generated/FREERTOS/tasks.c **** 
2553:../Dave/Generated/FREERTOS/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2554:../Dave/Generated/FREERTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 3483              	 .loc 1 2554 0
 3484 0066 3B69     	 ldr r3,[r7,#16]
 3485 0068 DB6A     	 ldr r3,[r3,#44]
 3486 006a 1A46     	 mov r2,r3
 3487 006c 0123     	 movs r3,#1
 3488 006e 03FA02F2 	 lsl r2,r3,r2
 3489 0072 134B     	 ldr r3,.L242
 3490 0074 1B68     	 ldr r3,[r3]
 3491 0076 1343     	 orrs r3,r3,r2
 3492 0078 114A     	 ldr r2,.L242
 3493 007a 1360     	 str r3,[r2]
 3494 007c 3B69     	 ldr r3,[r7,#16]
 3495 007e DA6A     	 ldr r2,[r3,#44]
 3496 0080 1346     	 mov r3,r2
 3497 0082 9B00     	 lsls r3,r3,#2
 3498 0084 1344     	 add r3,r3,r2
 3499 0086 9B00     	 lsls r3,r3,#2
 3500 0088 0E4A     	 ldr r2,.L242+4
 3501 008a 1A44     	 add r2,r2,r3
 3502 008c 3B69     	 ldr r3,[r7,#16]
 3503 008e 0433     	 adds r3,r3,#4
 3504 0090 1046     	 mov r0,r2
 3505 0092 1946     	 mov r1,r3
 3506 0094 FFF7FEFF 	 bl vListInsertEnd
2555:../Dave/Generated/FREERTOS/tasks.c **** 
2556:../Dave/Generated/FREERTOS/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2557:../Dave/Generated/FREERTOS/tasks.c **** 				switch if preemption is turned off. */
2558:../Dave/Generated/FREERTOS/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2559:../Dave/Generated/FREERTOS/tasks.c **** 				{
2560:../Dave/Generated/FREERTOS/tasks.c **** 					/* Preemption is on, but a context switch should only be
2561:../Dave/Generated/FREERTOS/tasks.c **** 					performed if the unblocked task has a priority that is
2562:../Dave/Generated/FREERTOS/tasks.c **** 					equal to or higher than the currently executing task. */
2563:../Dave/Generated/FREERTOS/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 3507              	 .loc 1 2563 0
 3508 0098 3B69     	 ldr r3,[r7,#16]
 3509 009a DA6A     	 ldr r2,[r3,#44]
 3510 009c 0A4B     	 ldr r3,.L242+8
 3511 009e 1B68     	 ldr r3,[r3]
 3512 00a0 DB6A     	 ldr r3,[r3,#44]
 3513 00a2 9A42     	 cmp r2,r3
 3514 00a4 05D9     	 bls .L240
2564:../Dave/Generated/FREERTOS/tasks.c **** 					{
2565:../Dave/Generated/FREERTOS/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2566:../Dave/Generated/FREERTOS/tasks.c **** 						is unsuspended. */
2567:../Dave/Generated/FREERTOS/tasks.c **** 						xYieldPending = pdTRUE;
 3515              	 .loc 1 2567 0
 3516 00a6 094B     	 ldr r3,.L242+12
 3517 00a8 0122     	 movs r2,#1
 3518 00aa 1A60     	 str r2,[r3]
 3519 00ac 01E0     	 b .L240
 3520              	.L238:
2568:../Dave/Generated/FREERTOS/tasks.c **** 					}
2569:../Dave/Generated/FREERTOS/tasks.c **** 					else
2570:../Dave/Generated/FREERTOS/tasks.c **** 					{
2571:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2572:../Dave/Generated/FREERTOS/tasks.c **** 					}
2573:../Dave/Generated/FREERTOS/tasks.c **** 				}
2574:../Dave/Generated/FREERTOS/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2575:../Dave/Generated/FREERTOS/tasks.c **** 			}
2576:../Dave/Generated/FREERTOS/tasks.c **** 			else
2577:../Dave/Generated/FREERTOS/tasks.c **** 			{
2578:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdFAIL;
 3521              	 .loc 1 2578 0
 3522 00ae 0023     	 movs r3,#0
 3523 00b0 7B61     	 str r3,[r7,#20]
 3524              	.L240:
2579:../Dave/Generated/FREERTOS/tasks.c **** 			}
2580:../Dave/Generated/FREERTOS/tasks.c **** 		}
2581:../Dave/Generated/FREERTOS/tasks.c **** 		( void ) xTaskResumeAll();
 3525              	 .loc 1 2581 0
 3526 00b2 FFF7FEFF 	 bl xTaskResumeAll
2582:../Dave/Generated/FREERTOS/tasks.c **** 
2583:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 3527              	 .loc 1 2583 0
 3528 00b6 7B69     	 ldr r3,[r7,#20]
2584:../Dave/Generated/FREERTOS/tasks.c **** 	}
 3529              	 .loc 1 2584 0
 3530 00b8 1846     	 mov r0,r3
 3531 00ba 1837     	 adds r7,r7,#24
 3532              	 .cfi_def_cfa_offset 8
 3533 00bc BD46     	 mov sp,r7
 3534              	 .cfi_def_cfa_register 13
 3535              	 
 3536 00be 80BD     	 pop {r7,pc}
 3537              	.L243:
 3538              	 .align 2
 3539              	.L242:
 3540 00c0 00000000 	 .word uxTopReadyPriority
 3541 00c4 00000000 	 .word pxReadyTasksLists
 3542 00c8 00000000 	 .word pxCurrentTCB
 3543 00cc 00000000 	 .word xYieldPending
 3544              	 .cfi_endproc
 3545              	.LFE163:
 3547              	 .section .text.xTaskIncrementTick,"ax",%progbits
 3548              	 .align 2
 3549              	 .global xTaskIncrementTick
 3550              	 .thumb
 3551              	 .thumb_func
 3553              	xTaskIncrementTick:
 3554              	.LFB164:
2585:../Dave/Generated/FREERTOS/tasks.c **** 
2586:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2587:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2588:../Dave/Generated/FREERTOS/tasks.c **** 
2589:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xTaskIncrementTick( void )
2590:../Dave/Generated/FREERTOS/tasks.c **** {
 3555              	 .loc 1 2590 0
 3556              	 .cfi_startproc
 3557              	 
 3558              	 
 3559 0000 80B5     	 push {r7,lr}
 3560              	 .cfi_def_cfa_offset 8
 3561              	 .cfi_offset 7,-8
 3562              	 .cfi_offset 14,-4
 3563 0002 86B0     	 sub sp,sp,#24
 3564              	 .cfi_def_cfa_offset 32
 3565 0004 00AF     	 add r7,sp,#0
 3566              	 .cfi_def_cfa_register 7
2591:../Dave/Generated/FREERTOS/tasks.c **** TCB_t * pxTCB;
2592:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xItemValue;
2593:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 3567              	 .loc 1 2593 0
 3568 0006 0023     	 movs r3,#0
 3569 0008 7B61     	 str r3,[r7,#20]
2594:../Dave/Generated/FREERTOS/tasks.c **** 
2595:../Dave/Generated/FREERTOS/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2596:../Dave/Generated/FREERTOS/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2597:../Dave/Generated/FREERTOS/tasks.c **** 	tasks to be unblocked. */
2598:../Dave/Generated/FREERTOS/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2599:../Dave/Generated/FREERTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3570              	 .loc 1 2599 0
 3571 000a 514B     	 ldr r3,.L261
 3572 000c 1B68     	 ldr r3,[r3]
 3573 000e 002B     	 cmp r3,#0
 3574 0010 40F08E80 	 bne .L245
 3575              	.LBB164:
2600:../Dave/Generated/FREERTOS/tasks.c **** 	{
2601:../Dave/Generated/FREERTOS/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2602:../Dave/Generated/FREERTOS/tasks.c **** 		block. */
2603:../Dave/Generated/FREERTOS/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 3576              	 .loc 1 2603 0
 3577 0014 4F4B     	 ldr r3,.L261+4
 3578 0016 1B68     	 ldr r3,[r3]
 3579 0018 0133     	 adds r3,r3,#1
 3580 001a 3B61     	 str r3,[r7,#16]
2604:../Dave/Generated/FREERTOS/tasks.c **** 
2605:../Dave/Generated/FREERTOS/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2606:../Dave/Generated/FREERTOS/tasks.c **** 		delayed lists if it wraps to 0. */
2607:../Dave/Generated/FREERTOS/tasks.c **** 		xTickCount = xConstTickCount;
 3581              	 .loc 1 2607 0
 3582 001c 4D4A     	 ldr r2,.L261+4
 3583 001e 3B69     	 ldr r3,[r7,#16]
 3584 0020 1360     	 str r3,[r2]
2608:../Dave/Generated/FREERTOS/tasks.c **** 
2609:../Dave/Generated/FREERTOS/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
 3585              	 .loc 1 2609 0
 3586 0022 3B69     	 ldr r3,[r7,#16]
 3587 0024 002B     	 cmp r3,#0
 3588 0026 1FD1     	 bne .L246
 3589              	.LBB165:
2610:../Dave/Generated/FREERTOS/tasks.c **** 		{
2611:../Dave/Generated/FREERTOS/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
 3590              	 .loc 1 2611 0
 3591 0028 4B4B     	 ldr r3,.L261+8
 3592 002a 1B68     	 ldr r3,[r3]
 3593 002c 1B68     	 ldr r3,[r3]
 3594 002e 002B     	 cmp r3,#0
 3595 0030 09D0     	 beq .L247
 3596              	.LBB166:
 3597              	.LBB167:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 3598              	 .loc 2 195 0 discriminator 1
 3599              	
 3600 0032 4FF0FC03 	 mov r3,#252
 3601 0036 83F31188 	 msr basepri,r3
 3602 003a BFF36F8F 	 isb 
 3603 003e BFF34F8F 	 dsb 
 3604              	
 3605              	
 3606              	 .thumb
 3607 0042 3B60     	 str r3,[r7]
 3608              	.L248:
 3609              	.LBE167:
 3610              	.LBE166:
 3611              	 .loc 1 2611 0 discriminator 1
 3612 0044 FEE7     	 b .L248
 3613              	.L247:
 3614              	 .loc 1 2611 0 is_stmt 0 discriminator 2
 3615 0046 444B     	 ldr r3,.L261+8
 3616 0048 1B68     	 ldr r3,[r3]
 3617 004a FB60     	 str r3,[r7,#12]
 3618 004c 434B     	 ldr r3,.L261+12
 3619 004e 1B68     	 ldr r3,[r3]
 3620 0050 414A     	 ldr r2,.L261+8
 3621 0052 1360     	 str r3,[r2]
 3622 0054 414A     	 ldr r2,.L261+12
 3623 0056 FB68     	 ldr r3,[r7,#12]
 3624 0058 1360     	 str r3,[r2]
 3625 005a 414B     	 ldr r3,.L261+16
 3626 005c 1B68     	 ldr r3,[r3]
 3627 005e 0133     	 adds r3,r3,#1
 3628 0060 3F4A     	 ldr r2,.L261+16
 3629 0062 1360     	 str r3,[r2]
 3630 0064 FFF7FEFF 	 bl prvResetNextTaskUnblockTime
 3631              	.L246:
 3632              	.LBE165:
2612:../Dave/Generated/FREERTOS/tasks.c **** 		}
2613:../Dave/Generated/FREERTOS/tasks.c **** 		else
2614:../Dave/Generated/FREERTOS/tasks.c **** 		{
2615:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2616:../Dave/Generated/FREERTOS/tasks.c **** 		}
2617:../Dave/Generated/FREERTOS/tasks.c **** 
2618:../Dave/Generated/FREERTOS/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2619:../Dave/Generated/FREERTOS/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2620:../Dave/Generated/FREERTOS/tasks.c **** 		has been found whose block time has not expired there is no need to
2621:../Dave/Generated/FREERTOS/tasks.c **** 		look any further down the list. */
2622:../Dave/Generated/FREERTOS/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
 3633              	 .loc 1 2622 0 is_stmt 1
 3634 0068 3E4B     	 ldr r3,.L261+20
 3635 006a 1B68     	 ldr r3,[r3]
 3636 006c 3A69     	 ldr r2,[r7,#16]
 3637 006e 9A42     	 cmp r2,r3
 3638 0070 4FD3     	 bcc .L249
 3639              	.L256:
2623:../Dave/Generated/FREERTOS/tasks.c **** 		{
2624:../Dave/Generated/FREERTOS/tasks.c **** 			for( ;; )
2625:../Dave/Generated/FREERTOS/tasks.c **** 			{
2626:../Dave/Generated/FREERTOS/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 3640              	 .loc 1 2626 0
 3641 0072 394B     	 ldr r3,.L261+8
 3642 0074 1B68     	 ldr r3,[r3]
 3643 0076 1B68     	 ldr r3,[r3]
 3644 0078 002B     	 cmp r3,#0
 3645 007a 01D1     	 bne .L250
 3646              	 .loc 1 2626 0 is_stmt 0 discriminator 1
 3647 007c 0123     	 movs r3,#1
 3648 007e 00E0     	 b .L251
 3649              	.L250:
 3650              	 .loc 1 2626 0 discriminator 2
 3651 0080 0023     	 movs r3,#0
 3652              	.L251:
 3653              	 .loc 1 2626 0 discriminator 4
 3654 0082 002B     	 cmp r3,#0
 3655 0084 04D0     	 beq .L252
2627:../Dave/Generated/FREERTOS/tasks.c **** 				{
2628:../Dave/Generated/FREERTOS/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2629:../Dave/Generated/FREERTOS/tasks.c **** 					to the maximum possible value so it is extremely
2630:../Dave/Generated/FREERTOS/tasks.c **** 					unlikely that the
2631:../Dave/Generated/FREERTOS/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2632:../Dave/Generated/FREERTOS/tasks.c **** 					next time through. */
2633:../Dave/Generated/FREERTOS/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 3656              	 .loc 1 2633 0 is_stmt 1
 3657 0086 374B     	 ldr r3,.L261+20
 3658 0088 4FF0FF32 	 mov r2,#-1
 3659 008c 1A60     	 str r2,[r3]
2634:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 3660              	 .loc 1 2634 0
 3661 008e 40E0     	 b .L249
 3662              	.L252:
2635:../Dave/Generated/FREERTOS/tasks.c **** 				}
2636:../Dave/Generated/FREERTOS/tasks.c **** 				else
2637:../Dave/Generated/FREERTOS/tasks.c **** 				{
2638:../Dave/Generated/FREERTOS/tasks.c **** 					/* The delayed list is not empty, get the value of the
2639:../Dave/Generated/FREERTOS/tasks.c **** 					item at the head of the delayed list.  This is the time
2640:../Dave/Generated/FREERTOS/tasks.c **** 					at which the task at the head of the delayed list must
2641:../Dave/Generated/FREERTOS/tasks.c **** 					be removed from the Blocked state. */
2642:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 3663              	 .loc 1 2642 0
 3664 0090 314B     	 ldr r3,.L261+8
 3665 0092 1B68     	 ldr r3,[r3]
 3666 0094 DB68     	 ldr r3,[r3,#12]
 3667 0096 DB68     	 ldr r3,[r3,#12]
 3668 0098 BB60     	 str r3,[r7,#8]
2643:../Dave/Generated/FREERTOS/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3669              	 .loc 1 2643 0
 3670 009a BB68     	 ldr r3,[r7,#8]
 3671 009c 5B68     	 ldr r3,[r3,#4]
 3672 009e 7B60     	 str r3,[r7,#4]
2644:../Dave/Generated/FREERTOS/tasks.c **** 
2645:../Dave/Generated/FREERTOS/tasks.c **** 					if( xConstTickCount < xItemValue )
 3673              	 .loc 1 2645 0
 3674 00a0 3A69     	 ldr r2,[r7,#16]
 3675 00a2 7B68     	 ldr r3,[r7,#4]
 3676 00a4 9A42     	 cmp r2,r3
 3677 00a6 03D2     	 bcs .L253
2646:../Dave/Generated/FREERTOS/tasks.c **** 					{
2647:../Dave/Generated/FREERTOS/tasks.c **** 						/* It is not time to unblock this item yet, but the
2648:../Dave/Generated/FREERTOS/tasks.c **** 						item value is the time at which the task at the head
2649:../Dave/Generated/FREERTOS/tasks.c **** 						of the blocked list must be removed from the Blocked
2650:../Dave/Generated/FREERTOS/tasks.c **** 						state -	so record the item value in
2651:../Dave/Generated/FREERTOS/tasks.c **** 						xNextTaskUnblockTime. */
2652:../Dave/Generated/FREERTOS/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 3678              	 .loc 1 2652 0
 3679 00a8 2E4A     	 ldr r2,.L261+20
 3680 00aa 7B68     	 ldr r3,[r7,#4]
 3681 00ac 1360     	 str r3,[r2]
2653:../Dave/Generated/FREERTOS/tasks.c **** 						break;
 3682              	 .loc 1 2653 0
 3683 00ae 30E0     	 b .L249
 3684              	.L253:
2654:../Dave/Generated/FREERTOS/tasks.c **** 					}
2655:../Dave/Generated/FREERTOS/tasks.c **** 					else
2656:../Dave/Generated/FREERTOS/tasks.c **** 					{
2657:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2658:../Dave/Generated/FREERTOS/tasks.c **** 					}
2659:../Dave/Generated/FREERTOS/tasks.c **** 
2660:../Dave/Generated/FREERTOS/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2661:../Dave/Generated/FREERTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3685              	 .loc 1 2661 0
 3686 00b0 BB68     	 ldr r3,[r7,#8]
 3687 00b2 0433     	 adds r3,r3,#4
 3688 00b4 1846     	 mov r0,r3
 3689 00b6 FFF7FEFF 	 bl uxListRemove
2662:../Dave/Generated/FREERTOS/tasks.c **** 
2663:../Dave/Generated/FREERTOS/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2664:../Dave/Generated/FREERTOS/tasks.c **** 					it from the event list. */
2665:../Dave/Generated/FREERTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3690              	 .loc 1 2665 0
 3691 00ba BB68     	 ldr r3,[r7,#8]
 3692 00bc 9B6A     	 ldr r3,[r3,#40]
 3693 00be 002B     	 cmp r3,#0
 3694 00c0 04D0     	 beq .L254
2666:../Dave/Generated/FREERTOS/tasks.c **** 					{
2667:../Dave/Generated/FREERTOS/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3695              	 .loc 1 2667 0
 3696 00c2 BB68     	 ldr r3,[r7,#8]
 3697 00c4 1833     	 adds r3,r3,#24
 3698 00c6 1846     	 mov r0,r3
 3699 00c8 FFF7FEFF 	 bl uxListRemove
 3700              	.L254:
2668:../Dave/Generated/FREERTOS/tasks.c **** 					}
2669:../Dave/Generated/FREERTOS/tasks.c **** 					else
2670:../Dave/Generated/FREERTOS/tasks.c **** 					{
2671:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2672:../Dave/Generated/FREERTOS/tasks.c **** 					}
2673:../Dave/Generated/FREERTOS/tasks.c **** 
2674:../Dave/Generated/FREERTOS/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2675:../Dave/Generated/FREERTOS/tasks.c **** 					list. */
2676:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3701              	 .loc 1 2676 0
 3702 00cc BB68     	 ldr r3,[r7,#8]
 3703 00ce DB6A     	 ldr r3,[r3,#44]
 3704 00d0 1A46     	 mov r2,r3
 3705 00d2 0123     	 movs r3,#1
 3706 00d4 03FA02F2 	 lsl r2,r3,r2
 3707 00d8 234B     	 ldr r3,.L261+24
 3708 00da 1B68     	 ldr r3,[r3]
 3709 00dc 1343     	 orrs r3,r3,r2
 3710 00de 224A     	 ldr r2,.L261+24
 3711 00e0 1360     	 str r3,[r2]
 3712 00e2 BB68     	 ldr r3,[r7,#8]
 3713 00e4 DA6A     	 ldr r2,[r3,#44]
 3714 00e6 1346     	 mov r3,r2
 3715 00e8 9B00     	 lsls r3,r3,#2
 3716 00ea 1344     	 add r3,r3,r2
 3717 00ec 9B00     	 lsls r3,r3,#2
 3718 00ee 1F4A     	 ldr r2,.L261+28
 3719 00f0 1A44     	 add r2,r2,r3
 3720 00f2 BB68     	 ldr r3,[r7,#8]
 3721 00f4 0433     	 adds r3,r3,#4
 3722 00f6 1046     	 mov r0,r2
 3723 00f8 1946     	 mov r1,r3
 3724 00fa FFF7FEFF 	 bl vListInsertEnd
2677:../Dave/Generated/FREERTOS/tasks.c **** 
2678:../Dave/Generated/FREERTOS/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2679:../Dave/Generated/FREERTOS/tasks.c **** 					context switch if preemption is turned off. */
2680:../Dave/Generated/FREERTOS/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2681:../Dave/Generated/FREERTOS/tasks.c **** 					{
2682:../Dave/Generated/FREERTOS/tasks.c **** 						/* Preemption is on, but a context switch should
2683:../Dave/Generated/FREERTOS/tasks.c **** 						only be performed if the unblocked task has a
2684:../Dave/Generated/FREERTOS/tasks.c **** 						priority that is equal to or higher than the
2685:../Dave/Generated/FREERTOS/tasks.c **** 						currently executing task. */
2686:../Dave/Generated/FREERTOS/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 3725              	 .loc 1 2686 0
 3726 00fe BB68     	 ldr r3,[r7,#8]
 3727 0100 DA6A     	 ldr r2,[r3,#44]
 3728 0102 1B4B     	 ldr r3,.L261+32
 3729 0104 1B68     	 ldr r3,[r3]
 3730 0106 DB6A     	 ldr r3,[r3,#44]
 3731 0108 9A42     	 cmp r2,r3
 3732 010a 01D3     	 bcc .L255
2687:../Dave/Generated/FREERTOS/tasks.c **** 						{
2688:../Dave/Generated/FREERTOS/tasks.c **** 							xSwitchRequired = pdTRUE;
 3733              	 .loc 1 2688 0
 3734 010c 0123     	 movs r3,#1
 3735 010e 7B61     	 str r3,[r7,#20]
 3736              	.L255:
2689:../Dave/Generated/FREERTOS/tasks.c **** 						}
2690:../Dave/Generated/FREERTOS/tasks.c **** 						else
2691:../Dave/Generated/FREERTOS/tasks.c **** 						{
2692:../Dave/Generated/FREERTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2693:../Dave/Generated/FREERTOS/tasks.c **** 						}
2694:../Dave/Generated/FREERTOS/tasks.c **** 					}
2695:../Dave/Generated/FREERTOS/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2696:../Dave/Generated/FREERTOS/tasks.c **** 				}
2697:../Dave/Generated/FREERTOS/tasks.c **** 			}
 3737              	 .loc 1 2697 0
 3738 0110 AFE7     	 b .L256
 3739              	.L249:
2698:../Dave/Generated/FREERTOS/tasks.c **** 		}
2699:../Dave/Generated/FREERTOS/tasks.c **** 
2700:../Dave/Generated/FREERTOS/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2701:../Dave/Generated/FREERTOS/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2702:../Dave/Generated/FREERTOS/tasks.c **** 		writer has not explicitly turned time slicing off. */
2703:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2704:../Dave/Generated/FREERTOS/tasks.c **** 		{
2705:../Dave/Generated/FREERTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 3740              	 .loc 1 2705 0
 3741 0112 174B     	 ldr r3,.L261+32
 3742 0114 1B68     	 ldr r3,[r3]
 3743 0116 DA6A     	 ldr r2,[r3,#44]
 3744 0118 1449     	 ldr r1,.L261+28
 3745 011a 1346     	 mov r3,r2
 3746 011c 9B00     	 lsls r3,r3,#2
 3747 011e 1344     	 add r3,r3,r2
 3748 0120 9B00     	 lsls r3,r3,#2
 3749 0122 0B44     	 add r3,r3,r1
 3750 0124 1B68     	 ldr r3,[r3]
 3751 0126 012B     	 cmp r3,#1
 3752 0128 01D9     	 bls .L257
2706:../Dave/Generated/FREERTOS/tasks.c **** 			{
2707:../Dave/Generated/FREERTOS/tasks.c **** 				xSwitchRequired = pdTRUE;
 3753              	 .loc 1 2707 0
 3754 012a 0123     	 movs r3,#1
 3755 012c 7B61     	 str r3,[r7,#20]
 3756              	.L257:
 3757              	.LBE164:
 3758 012e 04E0     	 b .L258
 3759              	.L245:
2708:../Dave/Generated/FREERTOS/tasks.c **** 			}
2709:../Dave/Generated/FREERTOS/tasks.c **** 			else
2710:../Dave/Generated/FREERTOS/tasks.c **** 			{
2711:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2712:../Dave/Generated/FREERTOS/tasks.c **** 			}
2713:../Dave/Generated/FREERTOS/tasks.c **** 		}
2714:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2715:../Dave/Generated/FREERTOS/tasks.c **** 
2716:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2717:../Dave/Generated/FREERTOS/tasks.c **** 		{
2718:../Dave/Generated/FREERTOS/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2719:../Dave/Generated/FREERTOS/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2720:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2721:../Dave/Generated/FREERTOS/tasks.c **** 			{
2722:../Dave/Generated/FREERTOS/tasks.c **** 				vApplicationTickHook();
2723:../Dave/Generated/FREERTOS/tasks.c **** 			}
2724:../Dave/Generated/FREERTOS/tasks.c **** 			else
2725:../Dave/Generated/FREERTOS/tasks.c **** 			{
2726:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2727:../Dave/Generated/FREERTOS/tasks.c **** 			}
2728:../Dave/Generated/FREERTOS/tasks.c **** 		}
2729:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2730:../Dave/Generated/FREERTOS/tasks.c **** 	}
2731:../Dave/Generated/FREERTOS/tasks.c **** 	else
2732:../Dave/Generated/FREERTOS/tasks.c **** 	{
2733:../Dave/Generated/FREERTOS/tasks.c **** 		++uxPendedTicks;
 3760              	 .loc 1 2733 0
 3761 0130 104B     	 ldr r3,.L261+36
 3762 0132 1B68     	 ldr r3,[r3]
 3763 0134 0133     	 adds r3,r3,#1
 3764 0136 0F4A     	 ldr r2,.L261+36
 3765 0138 1360     	 str r3,[r2]
 3766              	.L258:
2734:../Dave/Generated/FREERTOS/tasks.c **** 
2735:../Dave/Generated/FREERTOS/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2736:../Dave/Generated/FREERTOS/tasks.c **** 		scheduler is locked. */
2737:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2738:../Dave/Generated/FREERTOS/tasks.c **** 		{
2739:../Dave/Generated/FREERTOS/tasks.c **** 			vApplicationTickHook();
2740:../Dave/Generated/FREERTOS/tasks.c **** 		}
2741:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
2742:../Dave/Generated/FREERTOS/tasks.c **** 	}
2743:../Dave/Generated/FREERTOS/tasks.c **** 
2744:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2745:../Dave/Generated/FREERTOS/tasks.c **** 	{
2746:../Dave/Generated/FREERTOS/tasks.c **** 		if( xYieldPending != pdFALSE )
 3767              	 .loc 1 2746 0
 3768 013a 0F4B     	 ldr r3,.L261+40
 3769 013c 1B68     	 ldr r3,[r3]
 3770 013e 002B     	 cmp r3,#0
 3771 0140 01D0     	 beq .L259
2747:../Dave/Generated/FREERTOS/tasks.c **** 		{
2748:../Dave/Generated/FREERTOS/tasks.c **** 			xSwitchRequired = pdTRUE;
 3772              	 .loc 1 2748 0
 3773 0142 0123     	 movs r3,#1
 3774 0144 7B61     	 str r3,[r7,#20]
 3775              	.L259:
2749:../Dave/Generated/FREERTOS/tasks.c **** 		}
2750:../Dave/Generated/FREERTOS/tasks.c **** 		else
2751:../Dave/Generated/FREERTOS/tasks.c **** 		{
2752:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2753:../Dave/Generated/FREERTOS/tasks.c **** 		}
2754:../Dave/Generated/FREERTOS/tasks.c **** 	}
2755:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2756:../Dave/Generated/FREERTOS/tasks.c **** 
2757:../Dave/Generated/FREERTOS/tasks.c **** 	return xSwitchRequired;
 3776              	 .loc 1 2757 0
 3777 0146 7B69     	 ldr r3,[r7,#20]
2758:../Dave/Generated/FREERTOS/tasks.c **** }
 3778              	 .loc 1 2758 0
 3779 0148 1846     	 mov r0,r3
 3780 014a 1837     	 adds r7,r7,#24
 3781              	 .cfi_def_cfa_offset 8
 3782 014c BD46     	 mov sp,r7
 3783              	 .cfi_def_cfa_register 13
 3784              	 
 3785 014e 80BD     	 pop {r7,pc}
 3786              	.L262:
 3787              	 .align 2
 3788              	.L261:
 3789 0150 00000000 	 .word uxSchedulerSuspended
 3790 0154 00000000 	 .word xTickCount
 3791 0158 00000000 	 .word pxDelayedTaskList
 3792 015c 00000000 	 .word pxOverflowDelayedTaskList
 3793 0160 00000000 	 .word xNumOfOverflows
 3794 0164 00000000 	 .word xNextTaskUnblockTime
 3795 0168 00000000 	 .word uxTopReadyPriority
 3796 016c 00000000 	 .word pxReadyTasksLists
 3797 0170 00000000 	 .word pxCurrentTCB
 3798 0174 00000000 	 .word uxPendedTicks
 3799 0178 00000000 	 .word xYieldPending
 3800              	 .cfi_endproc
 3801              	.LFE164:
 3803              	 .section .text.vTaskSwitchContext,"ax",%progbits
 3804              	 .align 2
 3805              	 .global vTaskSwitchContext
 3806              	 .thumb
 3807              	 .thumb_func
 3809              	vTaskSwitchContext:
 3810              	.LFB165:
2759:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2760:../Dave/Generated/FREERTOS/tasks.c **** 
2761:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2762:../Dave/Generated/FREERTOS/tasks.c **** 
2763:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2764:../Dave/Generated/FREERTOS/tasks.c **** 	{
2765:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *xTCB;
2766:../Dave/Generated/FREERTOS/tasks.c **** 
2767:../Dave/Generated/FREERTOS/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2768:../Dave/Generated/FREERTOS/tasks.c **** 		getting set. */
2769:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTask == NULL )
2770:../Dave/Generated/FREERTOS/tasks.c **** 		{
2771:../Dave/Generated/FREERTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2772:../Dave/Generated/FREERTOS/tasks.c **** 		}
2773:../Dave/Generated/FREERTOS/tasks.c **** 		else
2774:../Dave/Generated/FREERTOS/tasks.c **** 		{
2775:../Dave/Generated/FREERTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2776:../Dave/Generated/FREERTOS/tasks.c **** 		}
2777:../Dave/Generated/FREERTOS/tasks.c **** 
2778:../Dave/Generated/FREERTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2779:../Dave/Generated/FREERTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2780:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
2781:../Dave/Generated/FREERTOS/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2782:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
2783:../Dave/Generated/FREERTOS/tasks.c **** 	}
2784:../Dave/Generated/FREERTOS/tasks.c **** 
2785:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2786:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2787:../Dave/Generated/FREERTOS/tasks.c **** 
2788:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2789:../Dave/Generated/FREERTOS/tasks.c **** 
2790:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2791:../Dave/Generated/FREERTOS/tasks.c **** 	{
2792:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *xTCB;
2793:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHookFunction_t xReturn;
2794:../Dave/Generated/FREERTOS/tasks.c **** 
2795:../Dave/Generated/FREERTOS/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2796:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTask == NULL )
2797:../Dave/Generated/FREERTOS/tasks.c **** 		{
2798:../Dave/Generated/FREERTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2799:../Dave/Generated/FREERTOS/tasks.c **** 		}
2800:../Dave/Generated/FREERTOS/tasks.c **** 		else
2801:../Dave/Generated/FREERTOS/tasks.c **** 		{
2802:../Dave/Generated/FREERTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2803:../Dave/Generated/FREERTOS/tasks.c **** 		}
2804:../Dave/Generated/FREERTOS/tasks.c **** 
2805:../Dave/Generated/FREERTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2806:../Dave/Generated/FREERTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2807:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
2808:../Dave/Generated/FREERTOS/tasks.c **** 		{
2809:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2810:../Dave/Generated/FREERTOS/tasks.c **** 		}
2811:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
2812:../Dave/Generated/FREERTOS/tasks.c **** 
2813:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
2814:../Dave/Generated/FREERTOS/tasks.c **** 	}
2815:../Dave/Generated/FREERTOS/tasks.c **** 
2816:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2817:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2818:../Dave/Generated/FREERTOS/tasks.c **** 
2819:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2820:../Dave/Generated/FREERTOS/tasks.c **** 
2821:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2822:../Dave/Generated/FREERTOS/tasks.c **** 	{
2823:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *xTCB;
2824:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn;
2825:../Dave/Generated/FREERTOS/tasks.c **** 
2826:../Dave/Generated/FREERTOS/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2827:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTask == NULL )
2828:../Dave/Generated/FREERTOS/tasks.c **** 		{
2829:../Dave/Generated/FREERTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2830:../Dave/Generated/FREERTOS/tasks.c **** 		}
2831:../Dave/Generated/FREERTOS/tasks.c **** 		else
2832:../Dave/Generated/FREERTOS/tasks.c **** 		{
2833:../Dave/Generated/FREERTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2834:../Dave/Generated/FREERTOS/tasks.c **** 		}
2835:../Dave/Generated/FREERTOS/tasks.c **** 
2836:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2837:../Dave/Generated/FREERTOS/tasks.c **** 		{
2838:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2839:../Dave/Generated/FREERTOS/tasks.c **** 		}
2840:../Dave/Generated/FREERTOS/tasks.c **** 		else
2841:../Dave/Generated/FREERTOS/tasks.c **** 		{
2842:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pdFAIL;
2843:../Dave/Generated/FREERTOS/tasks.c **** 		}
2844:../Dave/Generated/FREERTOS/tasks.c **** 
2845:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
2846:../Dave/Generated/FREERTOS/tasks.c **** 	}
2847:../Dave/Generated/FREERTOS/tasks.c **** 
2848:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2849:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2850:../Dave/Generated/FREERTOS/tasks.c **** 
2851:../Dave/Generated/FREERTOS/tasks.c **** void vTaskSwitchContext( void )
2852:../Dave/Generated/FREERTOS/tasks.c **** {
 3811              	 .loc 1 2852 0
 3812              	 .cfi_startproc
 3813              	 
 3814              	 
 3815              	 
 3816 0000 80B4     	 push {r7}
 3817              	 .cfi_def_cfa_offset 4
 3818              	 .cfi_offset 7,-4
 3819 0002 87B0     	 sub sp,sp,#28
 3820              	 .cfi_def_cfa_offset 32
 3821 0004 00AF     	 add r7,sp,#0
 3822              	 .cfi_def_cfa_register 7
2853:../Dave/Generated/FREERTOS/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3823              	 .loc 1 2853 0
 3824 0006 264B     	 ldr r3,.L270
 3825 0008 1B68     	 ldr r3,[r3]
 3826 000a 002B     	 cmp r3,#0
 3827 000c 03D0     	 beq .L264
2854:../Dave/Generated/FREERTOS/tasks.c **** 	{
2855:../Dave/Generated/FREERTOS/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2856:../Dave/Generated/FREERTOS/tasks.c **** 		switch. */
2857:../Dave/Generated/FREERTOS/tasks.c **** 		xYieldPending = pdTRUE;
 3828              	 .loc 1 2857 0
 3829 000e 254B     	 ldr r3,.L270+4
 3830 0010 0122     	 movs r2,#1
 3831 0012 1A60     	 str r2,[r3]
 3832 0014 3EE0     	 b .L263
 3833              	.L264:
2858:../Dave/Generated/FREERTOS/tasks.c **** 	}
2859:../Dave/Generated/FREERTOS/tasks.c **** 	else
2860:../Dave/Generated/FREERTOS/tasks.c **** 	{
2861:../Dave/Generated/FREERTOS/tasks.c **** 		xYieldPending = pdFALSE;
 3834              	 .loc 1 2861 0
 3835 0016 234B     	 ldr r3,.L270+4
 3836 0018 0022     	 movs r2,#0
 3837 001a 1A60     	 str r2,[r3]
 3838              	.LBB168:
2862:../Dave/Generated/FREERTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
2863:../Dave/Generated/FREERTOS/tasks.c **** 
2864:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2865:../Dave/Generated/FREERTOS/tasks.c **** 		{
2866:../Dave/Generated/FREERTOS/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2867:../Dave/Generated/FREERTOS/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2868:../Dave/Generated/FREERTOS/tasks.c **** 				#else
2869:../Dave/Generated/FREERTOS/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2870:../Dave/Generated/FREERTOS/tasks.c **** 				#endif
2871:../Dave/Generated/FREERTOS/tasks.c **** 
2872:../Dave/Generated/FREERTOS/tasks.c **** 				/* Add the amount of time the task has been running to the
2873:../Dave/Generated/FREERTOS/tasks.c **** 				accumulated time so far.  The time the task started running was
2874:../Dave/Generated/FREERTOS/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2875:../Dave/Generated/FREERTOS/tasks.c **** 				protection here so count values are only valid until the timer
2876:../Dave/Generated/FREERTOS/tasks.c **** 				overflows.  The guard against negative values is to protect
2877:../Dave/Generated/FREERTOS/tasks.c **** 				against suspect run time stat counter implementations - which
2878:../Dave/Generated/FREERTOS/tasks.c **** 				are provided by the application, not the kernel. */
2879:../Dave/Generated/FREERTOS/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2880:../Dave/Generated/FREERTOS/tasks.c **** 				{
2881:../Dave/Generated/FREERTOS/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2882:../Dave/Generated/FREERTOS/tasks.c **** 				}
2883:../Dave/Generated/FREERTOS/tasks.c **** 				else
2884:../Dave/Generated/FREERTOS/tasks.c **** 				{
2885:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2886:../Dave/Generated/FREERTOS/tasks.c **** 				}
2887:../Dave/Generated/FREERTOS/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2888:../Dave/Generated/FREERTOS/tasks.c **** 		}
2889:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2890:../Dave/Generated/FREERTOS/tasks.c **** 
2891:../Dave/Generated/FREERTOS/tasks.c **** 		/* Check for stack overflow, if configured. */
2892:../Dave/Generated/FREERTOS/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2893:../Dave/Generated/FREERTOS/tasks.c **** 
2894:../Dave/Generated/FREERTOS/tasks.c **** 		/* Select a new task to run using either the generic C or port
2895:../Dave/Generated/FREERTOS/tasks.c **** 		optimised asm code. */
2896:../Dave/Generated/FREERTOS/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
 3839              	 .loc 1 2896 0
 3840 001c 224B     	 ldr r3,.L270+8
 3841 001e 1B68     	 ldr r3,[r3]
 3842 0020 FB60     	 str r3,[r7,#12]
 3843              	.LBB169:
 3844              	.LBB170:
 134:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 		return ucReturn;
 3845              	 .loc 2 134 0
 3846 0022 FB68     	 ldr r3,[r7,#12]
 3847              	
 3848 0024 B3FA83F3 	 clz r3,r3
 3849              	
 3850              	 .thumb
 3851 0028 FB72     	 strb r3,[r7,#11]
 135:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	}
 3852              	 .loc 2 135 0
 3853 002a FB7A     	 ldrb r3,[r7,#11]
 3854              	.LBE170:
 3855              	.LBE169:
 3856              	 .loc 1 2896 0
 3857 002c C3F11F03 	 rsb r3,r3,#31
 3858 0030 7B61     	 str r3,[r7,#20]
 3859 0032 1E49     	 ldr r1,.L270+12
 3860 0034 7A69     	 ldr r2,[r7,#20]
 3861 0036 1346     	 mov r3,r2
 3862 0038 9B00     	 lsls r3,r3,#2
 3863 003a 1344     	 add r3,r3,r2
 3864 003c 9B00     	 lsls r3,r3,#2
 3865 003e 0B44     	 add r3,r3,r1
 3866 0040 1B68     	 ldr r3,[r3]
 3867 0042 002B     	 cmp r3,#0
 3868 0044 09D1     	 bne .L267
 3869              	.LBB171:
 3870              	.LBB172:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 3871              	 .loc 2 195 0 discriminator 1
 3872              	
 3873 0046 4FF0FC03 	 mov r3,#252
 3874 004a 83F31188 	 msr basepri,r3
 3875 004e BFF36F8F 	 isb 
 3876 0052 BFF34F8F 	 dsb 
 3877              	
 3878              	
 3879              	 .thumb
 3880 0056 7B60     	 str r3,[r7,#4]
 3881              	.L268:
 3882              	.LBE172:
 3883              	.LBE171:
 3884              	 .loc 1 2896 0 discriminator 1
 3885 0058 FEE7     	 b .L268
 3886              	.L267:
 3887              	.LBB173:
 3888              	 .loc 1 2896 0 is_stmt 0 discriminator 2
 3889 005a 7A69     	 ldr r2,[r7,#20]
 3890 005c 1346     	 mov r3,r2
 3891 005e 9B00     	 lsls r3,r3,#2
 3892 0060 1344     	 add r3,r3,r2
 3893 0062 9B00     	 lsls r3,r3,#2
 3894 0064 114A     	 ldr r2,.L270+12
 3895 0066 1344     	 add r3,r3,r2
 3896 0068 3B61     	 str r3,[r7,#16]
 3897 006a 3B69     	 ldr r3,[r7,#16]
 3898 006c 5B68     	 ldr r3,[r3,#4]
 3899 006e 5A68     	 ldr r2,[r3,#4]
 3900 0070 3B69     	 ldr r3,[r7,#16]
 3901 0072 5A60     	 str r2,[r3,#4]
 3902 0074 3B69     	 ldr r3,[r7,#16]
 3903 0076 5A68     	 ldr r2,[r3,#4]
 3904 0078 3B69     	 ldr r3,[r7,#16]
 3905 007a 0833     	 adds r3,r3,#8
 3906 007c 9A42     	 cmp r2,r3
 3907 007e 04D1     	 bne .L269
 3908              	 .loc 1 2896 0 discriminator 3
 3909 0080 3B69     	 ldr r3,[r7,#16]
 3910 0082 5B68     	 ldr r3,[r3,#4]
 3911 0084 5A68     	 ldr r2,[r3,#4]
 3912 0086 3B69     	 ldr r3,[r7,#16]
 3913 0088 5A60     	 str r2,[r3,#4]
 3914              	.L269:
 3915              	 .loc 1 2896 0 discriminator 5
 3916 008a 3B69     	 ldr r3,[r7,#16]
 3917 008c 5B68     	 ldr r3,[r3,#4]
 3918 008e DB68     	 ldr r3,[r3,#12]
 3919 0090 074A     	 ldr r2,.L270+16
 3920 0092 1360     	 str r3,[r2]
 3921              	.L263:
 3922              	.LBE173:
 3923              	.LBE168:
2897:../Dave/Generated/FREERTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
2898:../Dave/Generated/FREERTOS/tasks.c **** 
2899:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2900:../Dave/Generated/FREERTOS/tasks.c **** 		{
2901:../Dave/Generated/FREERTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2902:../Dave/Generated/FREERTOS/tasks.c **** 			structure specific to this task. */
2903:../Dave/Generated/FREERTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2904:../Dave/Generated/FREERTOS/tasks.c **** 		}
2905:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2906:../Dave/Generated/FREERTOS/tasks.c **** 	}
2907:../Dave/Generated/FREERTOS/tasks.c **** }
 3924              	 .loc 1 2907 0 is_stmt 1
 3925 0094 1C37     	 adds r7,r7,#28
 3926              	 .cfi_def_cfa_offset 4
 3927 0096 BD46     	 mov sp,r7
 3928              	 .cfi_def_cfa_register 13
 3929              	 
 3930 0098 5DF8047B 	 ldr r7,[sp],#4
 3931              	 .cfi_restore 7
 3932              	 .cfi_def_cfa_offset 0
 3933 009c 7047     	 bx lr
 3934              	.L271:
 3935 009e 00BF     	 .align 2
 3936              	.L270:
 3937 00a0 00000000 	 .word uxSchedulerSuspended
 3938 00a4 00000000 	 .word xYieldPending
 3939 00a8 00000000 	 .word uxTopReadyPriority
 3940 00ac 00000000 	 .word pxReadyTasksLists
 3941 00b0 00000000 	 .word pxCurrentTCB
 3942              	 .cfi_endproc
 3943              	.LFE165:
 3945              	 .section .text.vTaskPlaceOnEventList,"ax",%progbits
 3946              	 .align 2
 3947              	 .global vTaskPlaceOnEventList
 3948              	 .thumb
 3949              	 .thumb_func
 3951              	vTaskPlaceOnEventList:
 3952              	.LFB166:
2908:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2909:../Dave/Generated/FREERTOS/tasks.c **** 
2910:../Dave/Generated/FREERTOS/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2911:../Dave/Generated/FREERTOS/tasks.c **** {
 3953              	 .loc 1 2911 0
 3954              	 .cfi_startproc
 3955              	 
 3956              	 
 3957 0000 80B5     	 push {r7,lr}
 3958              	 .cfi_def_cfa_offset 8
 3959              	 .cfi_offset 7,-8
 3960              	 .cfi_offset 14,-4
 3961 0002 84B0     	 sub sp,sp,#16
 3962              	 .cfi_def_cfa_offset 24
 3963 0004 00AF     	 add r7,sp,#0
 3964              	 .cfi_def_cfa_register 7
 3965 0006 7860     	 str r0,[r7,#4]
 3966 0008 3960     	 str r1,[r7]
2912:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxEventList );
 3967              	 .loc 1 2912 0
 3968 000a 7B68     	 ldr r3,[r7,#4]
 3969 000c 002B     	 cmp r3,#0
 3970 000e 09D1     	 bne .L273
 3971              	.LBB174:
 3972              	.LBB175:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 3973              	 .loc 2 195 0 discriminator 1
 3974              	
 3975 0010 4FF0FC03 	 mov r3,#252
 3976 0014 83F31188 	 msr basepri,r3
 3977 0018 BFF36F8F 	 isb 
 3978 001c BFF34F8F 	 dsb 
 3979              	
 3980              	
 3981              	 .thumb
 3982 0020 FB60     	 str r3,[r7,#12]
 3983              	.L274:
 3984              	.LBE175:
 3985              	.LBE174:
 3986              	 .loc 1 2912 0 discriminator 1
 3987 0022 FEE7     	 b .L274
 3988              	.L273:
2913:../Dave/Generated/FREERTOS/tasks.c **** 
2914:../Dave/Generated/FREERTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2915:../Dave/Generated/FREERTOS/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2916:../Dave/Generated/FREERTOS/tasks.c **** 
2917:../Dave/Generated/FREERTOS/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2918:../Dave/Generated/FREERTOS/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2919:../Dave/Generated/FREERTOS/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2920:../Dave/Generated/FREERTOS/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2921:../Dave/Generated/FREERTOS/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3989              	 .loc 1 2921 0
 3990 0024 064B     	 ldr r3,.L275
 3991 0026 1B68     	 ldr r3,[r3]
 3992 0028 1833     	 adds r3,r3,#24
 3993 002a 7868     	 ldr r0,[r7,#4]
 3994 002c 1946     	 mov r1,r3
 3995 002e FFF7FEFF 	 bl vListInsert
2922:../Dave/Generated/FREERTOS/tasks.c **** 
2923:../Dave/Generated/FREERTOS/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3996              	 .loc 1 2923 0
 3997 0032 3868     	 ldr r0,[r7]
 3998 0034 0121     	 movs r1,#1
 3999 0036 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
2924:../Dave/Generated/FREERTOS/tasks.c **** }
 4000              	 .loc 1 2924 0
 4001 003a 1037     	 adds r7,r7,#16
 4002              	 .cfi_def_cfa_offset 8
 4003 003c BD46     	 mov sp,r7
 4004              	 .cfi_def_cfa_register 13
 4005              	 
 4006 003e 80BD     	 pop {r7,pc}
 4007              	.L276:
 4008              	 .align 2
 4009              	.L275:
 4010 0040 00000000 	 .word pxCurrentTCB
 4011              	 .cfi_endproc
 4012              	.LFE166:
 4014              	 .section .text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 4015              	 .align 2
 4016              	 .global vTaskPlaceOnUnorderedEventList
 4017              	 .thumb
 4018              	 .thumb_func
 4020              	vTaskPlaceOnUnorderedEventList:
 4021              	.LFB167:
2925:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2926:../Dave/Generated/FREERTOS/tasks.c **** 
2927:../Dave/Generated/FREERTOS/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2928:../Dave/Generated/FREERTOS/tasks.c **** {
 4022              	 .loc 1 2928 0
 4023              	 .cfi_startproc
 4024              	 
 4025              	 
 4026 0000 80B5     	 push {r7,lr}
 4027              	 .cfi_def_cfa_offset 8
 4028              	 .cfi_offset 7,-8
 4029              	 .cfi_offset 14,-4
 4030 0002 86B0     	 sub sp,sp,#24
 4031              	 .cfi_def_cfa_offset 32
 4032 0004 00AF     	 add r7,sp,#0
 4033              	 .cfi_def_cfa_register 7
 4034 0006 F860     	 str r0,[r7,#12]
 4035 0008 B960     	 str r1,[r7,#8]
 4036 000a 7A60     	 str r2,[r7,#4]
2929:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxEventList );
 4037              	 .loc 1 2929 0
 4038 000c FB68     	 ldr r3,[r7,#12]
 4039 000e 002B     	 cmp r3,#0
 4040 0010 09D1     	 bne .L278
 4041              	.LBB176:
 4042              	.LBB177:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 4043              	 .loc 2 195 0 discriminator 1
 4044              	
 4045 0012 4FF0FC03 	 mov r3,#252
 4046 0016 83F31188 	 msr basepri,r3
 4047 001a BFF36F8F 	 isb 
 4048 001e BFF34F8F 	 dsb 
 4049              	
 4050              	
 4051              	 .thumb
 4052 0022 7B61     	 str r3,[r7,#20]
 4053              	.L279:
 4054              	.LBE177:
 4055              	.LBE176:
 4056              	 .loc 1 2929 0 discriminator 1
 4057 0024 FEE7     	 b .L279
 4058              	.L278:
2930:../Dave/Generated/FREERTOS/tasks.c **** 
2931:../Dave/Generated/FREERTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2932:../Dave/Generated/FREERTOS/tasks.c **** 	the event groups implementation. */
2933:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 4059              	 .loc 1 2933 0
 4060 0026 114B     	 ldr r3,.L282
 4061 0028 1B68     	 ldr r3,[r3]
 4062 002a 002B     	 cmp r3,#0
 4063 002c 09D1     	 bne .L280
 4064              	.LBB178:
 4065              	.LBB179:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 4066              	 .loc 2 195 0 discriminator 1
 4067              	
 4068 002e 4FF0FC03 	 mov r3,#252
 4069 0032 83F31188 	 msr basepri,r3
 4070 0036 BFF36F8F 	 isb 
 4071 003a BFF34F8F 	 dsb 
 4072              	
 4073              	
 4074              	 .thumb
 4075 003e 3B61     	 str r3,[r7,#16]
 4076              	.L281:
 4077              	.LBE179:
 4078              	.LBE178:
 4079              	 .loc 1 2933 0 discriminator 2
 4080 0040 FEE7     	 b .L281
 4081              	.L280:
2934:../Dave/Generated/FREERTOS/tasks.c **** 
2935:../Dave/Generated/FREERTOS/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2936:../Dave/Generated/FREERTOS/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2937:../Dave/Generated/FREERTOS/tasks.c **** 	task that is not in the Blocked state. */
2938:../Dave/Generated/FREERTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 4082              	 .loc 1 2938 0
 4083 0042 0B4B     	 ldr r3,.L282+4
 4084 0044 1B68     	 ldr r3,[r3]
 4085 0046 BA68     	 ldr r2,[r7,#8]
 4086 0048 42F00042 	 orr r2,r2,#-2147483648
 4087 004c 9A61     	 str r2,[r3,#24]
2939:../Dave/Generated/FREERTOS/tasks.c **** 
2940:../Dave/Generated/FREERTOS/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2941:../Dave/Generated/FREERTOS/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2942:../Dave/Generated/FREERTOS/tasks.c **** 	event group implementation - and interrupts don't access event groups
2943:../Dave/Generated/FREERTOS/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2944:../Dave/Generated/FREERTOS/tasks.c **** 	the task level). */
2945:../Dave/Generated/FREERTOS/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4088              	 .loc 1 2945 0
 4089 004e 084B     	 ldr r3,.L282+4
 4090 0050 1B68     	 ldr r3,[r3]
 4091 0052 1833     	 adds r3,r3,#24
 4092 0054 F868     	 ldr r0,[r7,#12]
 4093 0056 1946     	 mov r1,r3
 4094 0058 FFF7FEFF 	 bl vListInsertEnd
2946:../Dave/Generated/FREERTOS/tasks.c **** 
2947:../Dave/Generated/FREERTOS/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4095              	 .loc 1 2947 0
 4096 005c 7868     	 ldr r0,[r7,#4]
 4097 005e 0121     	 movs r1,#1
 4098 0060 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
2948:../Dave/Generated/FREERTOS/tasks.c **** }
 4099              	 .loc 1 2948 0
 4100 0064 1837     	 adds r7,r7,#24
 4101              	 .cfi_def_cfa_offset 8
 4102 0066 BD46     	 mov sp,r7
 4103              	 .cfi_def_cfa_register 13
 4104              	 
 4105 0068 80BD     	 pop {r7,pc}
 4106              	.L283:
 4107 006a 00BF     	 .align 2
 4108              	.L282:
 4109 006c 00000000 	 .word uxSchedulerSuspended
 4110 0070 00000000 	 .word pxCurrentTCB
 4111              	 .cfi_endproc
 4112              	.LFE167:
 4114              	 .section .text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 4115              	 .align 2
 4116              	 .global vTaskPlaceOnEventListRestricted
 4117              	 .thumb
 4118              	 .thumb_func
 4120              	vTaskPlaceOnEventListRestricted:
 4121              	.LFB168:
2949:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2950:../Dave/Generated/FREERTOS/tasks.c **** 
2951:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TIMERS == 1 )
2952:../Dave/Generated/FREERTOS/tasks.c **** 
2953:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2954:../Dave/Generated/FREERTOS/tasks.c **** 	{
 4122              	 .loc 1 2954 0
 4123              	 .cfi_startproc
 4124              	 
 4125              	 
 4126 0000 80B5     	 push {r7,lr}
 4127              	 .cfi_def_cfa_offset 8
 4128              	 .cfi_offset 7,-8
 4129              	 .cfi_offset 14,-4
 4130 0002 86B0     	 sub sp,sp,#24
 4131              	 .cfi_def_cfa_offset 32
 4132 0004 00AF     	 add r7,sp,#0
 4133              	 .cfi_def_cfa_register 7
 4134 0006 F860     	 str r0,[r7,#12]
 4135 0008 B960     	 str r1,[r7,#8]
 4136 000a 7A60     	 str r2,[r7,#4]
2955:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( pxEventList );
 4137              	 .loc 1 2955 0
 4138 000c FB68     	 ldr r3,[r7,#12]
 4139 000e 002B     	 cmp r3,#0
 4140 0010 09D1     	 bne .L285
 4141              	.LBB180:
 4142              	.LBB181:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 4143              	 .loc 2 195 0 discriminator 1
 4144              	
 4145 0012 4FF0FC03 	 mov r3,#252
 4146 0016 83F31188 	 msr basepri,r3
 4147 001a BFF36F8F 	 isb 
 4148 001e BFF34F8F 	 dsb 
 4149              	
 4150              	
 4151              	 .thumb
 4152 0022 7B61     	 str r3,[r7,#20]
 4153              	.L286:
 4154              	.LBE181:
 4155              	.LBE180:
 4156              	 .loc 1 2955 0 discriminator 1
 4157 0024 FEE7     	 b .L286
 4158              	.L285:
2956:../Dave/Generated/FREERTOS/tasks.c **** 
2957:../Dave/Generated/FREERTOS/tasks.c **** 		/* This function should not be called by application code hence the
2958:../Dave/Generated/FREERTOS/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2959:../Dave/Generated/FREERTOS/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2960:../Dave/Generated/FREERTOS/tasks.c **** 		it should be called with the scheduler suspended. */
2961:../Dave/Generated/FREERTOS/tasks.c **** 
2962:../Dave/Generated/FREERTOS/tasks.c **** 
2963:../Dave/Generated/FREERTOS/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2964:../Dave/Generated/FREERTOS/tasks.c **** 		In this case it is assume that this is the only task that is going to
2965:../Dave/Generated/FREERTOS/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2966:../Dave/Generated/FREERTOS/tasks.c **** 		can be used in place of vListInsert. */
2967:../Dave/Generated/FREERTOS/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4159              	 .loc 1 2967 0
 4160 0026 0A4B     	 ldr r3,.L288
 4161 0028 1B68     	 ldr r3,[r3]
 4162 002a 1833     	 adds r3,r3,#24
 4163 002c F868     	 ldr r0,[r7,#12]
 4164 002e 1946     	 mov r1,r3
 4165 0030 FFF7FEFF 	 bl vListInsertEnd
2968:../Dave/Generated/FREERTOS/tasks.c **** 
2969:../Dave/Generated/FREERTOS/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2970:../Dave/Generated/FREERTOS/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2971:../Dave/Generated/FREERTOS/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2972:../Dave/Generated/FREERTOS/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
 4166              	 .loc 1 2972 0
 4167 0034 7B68     	 ldr r3,[r7,#4]
 4168 0036 002B     	 cmp r3,#0
 4169 0038 02D0     	 beq .L287
2973:../Dave/Generated/FREERTOS/tasks.c **** 		{
2974:../Dave/Generated/FREERTOS/tasks.c **** 			xTicksToWait = portMAX_DELAY;
 4170              	 .loc 1 2974 0
 4171 003a 4FF0FF33 	 mov r3,#-1
 4172 003e BB60     	 str r3,[r7,#8]
 4173              	.L287:
2975:../Dave/Generated/FREERTOS/tasks.c **** 		}
2976:../Dave/Generated/FREERTOS/tasks.c **** 
2977:../Dave/Generated/FREERTOS/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2978:../Dave/Generated/FREERTOS/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 4174              	 .loc 1 2978 0
 4175 0040 B868     	 ldr r0,[r7,#8]
 4176 0042 7968     	 ldr r1,[r7,#4]
 4177 0044 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
2979:../Dave/Generated/FREERTOS/tasks.c **** 	}
 4178              	 .loc 1 2979 0
 4179 0048 1837     	 adds r7,r7,#24
 4180              	 .cfi_def_cfa_offset 8
 4181 004a BD46     	 mov sp,r7
 4182              	 .cfi_def_cfa_register 13
 4183              	 
 4184 004c 80BD     	 pop {r7,pc}
 4185              	.L289:
 4186 004e 00BF     	 .align 2
 4187              	.L288:
 4188 0050 00000000 	 .word pxCurrentTCB
 4189              	 .cfi_endproc
 4190              	.LFE168:
 4192              	 .section .text.xTaskRemoveFromEventList,"ax",%progbits
 4193              	 .align 2
 4194              	 .global xTaskRemoveFromEventList
 4195              	 .thumb
 4196              	 .thumb_func
 4198              	xTaskRemoveFromEventList:
 4199              	.LFB169:
2980:../Dave/Generated/FREERTOS/tasks.c **** 
2981:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TIMERS */
2982:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2983:../Dave/Generated/FREERTOS/tasks.c **** 
2984:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2985:../Dave/Generated/FREERTOS/tasks.c **** {
 4200              	 .loc 1 2985 0
 4201              	 .cfi_startproc
 4202              	 
 4203              	 
 4204 0000 80B5     	 push {r7,lr}
 4205              	 .cfi_def_cfa_offset 8
 4206              	 .cfi_offset 7,-8
 4207              	 .cfi_offset 14,-4
 4208 0002 86B0     	 sub sp,sp,#24
 4209              	 .cfi_def_cfa_offset 32
 4210 0004 00AF     	 add r7,sp,#0
 4211              	 .cfi_def_cfa_register 7
 4212 0006 7860     	 str r0,[r7,#4]
2986:../Dave/Generated/FREERTOS/tasks.c **** TCB_t *pxUnblockedTCB;
2987:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xReturn;
2988:../Dave/Generated/FREERTOS/tasks.c **** 
2989:../Dave/Generated/FREERTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2990:../Dave/Generated/FREERTOS/tasks.c **** 	called from a critical section within an ISR. */
2991:../Dave/Generated/FREERTOS/tasks.c **** 
2992:../Dave/Generated/FREERTOS/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2993:../Dave/Generated/FREERTOS/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2994:../Dave/Generated/FREERTOS/tasks.c **** 	the delayed list, and add it to the ready list.
2995:../Dave/Generated/FREERTOS/tasks.c **** 
2996:../Dave/Generated/FREERTOS/tasks.c **** 	If an event is for a queue that is locked then this function will never
2997:../Dave/Generated/FREERTOS/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2998:../Dave/Generated/FREERTOS/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2999:../Dave/Generated/FREERTOS/tasks.c **** 
3000:../Dave/Generated/FREERTOS/tasks.c **** 	This function assumes that a check has already been made to ensure that
3001:../Dave/Generated/FREERTOS/tasks.c **** 	pxEventList is not empty. */
3002:../Dave/Generated/FREERTOS/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 4213              	 .loc 1 3002 0
 4214 0008 7B68     	 ldr r3,[r7,#4]
 4215 000a DB68     	 ldr r3,[r3,#12]
 4216 000c DB68     	 ldr r3,[r3,#12]
 4217 000e 3B61     	 str r3,[r7,#16]
3003:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4218              	 .loc 1 3003 0
 4219 0010 3B69     	 ldr r3,[r7,#16]
 4220 0012 002B     	 cmp r3,#0
 4221 0014 09D1     	 bne .L291
 4222              	.LBB182:
 4223              	.LBB183:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 4224              	 .loc 2 195 0 discriminator 1
 4225              	
 4226 0016 4FF0FC03 	 mov r3,#252
 4227 001a 83F31188 	 msr basepri,r3
 4228 001e BFF36F8F 	 isb 
 4229 0022 BFF34F8F 	 dsb 
 4230              	
 4231              	
 4232              	 .thumb
 4233 0026 FB60     	 str r3,[r7,#12]
 4234              	.L292:
 4235              	.LBE183:
 4236              	.LBE182:
 4237              	 .loc 1 3003 0 discriminator 1
 4238 0028 FEE7     	 b .L292
 4239              	.L291:
3004:../Dave/Generated/FREERTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4240              	 .loc 1 3004 0
 4241 002a 3B69     	 ldr r3,[r7,#16]
 4242 002c 1833     	 adds r3,r3,#24
 4243 002e 1846     	 mov r0,r3
 4244 0030 FFF7FEFF 	 bl uxListRemove
3005:../Dave/Generated/FREERTOS/tasks.c **** 
3006:../Dave/Generated/FREERTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4245              	 .loc 1 3006 0
 4246 0034 1E4B     	 ldr r3,.L298
 4247 0036 1B68     	 ldr r3,[r3]
 4248 0038 002B     	 cmp r3,#0
 4249 003a 1ED1     	 bne .L293
3007:../Dave/Generated/FREERTOS/tasks.c **** 	{
3008:../Dave/Generated/FREERTOS/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4250              	 .loc 1 3008 0
 4251 003c 3B69     	 ldr r3,[r7,#16]
 4252 003e 0433     	 adds r3,r3,#4
 4253 0040 1846     	 mov r0,r3
 4254 0042 FFF7FEFF 	 bl uxListRemove
3009:../Dave/Generated/FREERTOS/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 4255              	 .loc 1 3009 0
 4256 0046 3B69     	 ldr r3,[r7,#16]
 4257 0048 DB6A     	 ldr r3,[r3,#44]
 4258 004a 1A46     	 mov r2,r3
 4259 004c 0123     	 movs r3,#1
 4260 004e 03FA02F2 	 lsl r2,r3,r2
 4261 0052 184B     	 ldr r3,.L298+4
 4262 0054 1B68     	 ldr r3,[r3]
 4263 0056 1343     	 orrs r3,r3,r2
 4264 0058 164A     	 ldr r2,.L298+4
 4265 005a 1360     	 str r3,[r2]
 4266 005c 3B69     	 ldr r3,[r7,#16]
 4267 005e DA6A     	 ldr r2,[r3,#44]
 4268 0060 1346     	 mov r3,r2
 4269 0062 9B00     	 lsls r3,r3,#2
 4270 0064 1344     	 add r3,r3,r2
 4271 0066 9B00     	 lsls r3,r3,#2
 4272 0068 134A     	 ldr r2,.L298+8
 4273 006a 1A44     	 add r2,r2,r3
 4274 006c 3B69     	 ldr r3,[r7,#16]
 4275 006e 0433     	 adds r3,r3,#4
 4276 0070 1046     	 mov r0,r2
 4277 0072 1946     	 mov r1,r3
 4278 0074 FFF7FEFF 	 bl vListInsertEnd
 4279 0078 05E0     	 b .L294
 4280              	.L293:
3010:../Dave/Generated/FREERTOS/tasks.c **** 	}
3011:../Dave/Generated/FREERTOS/tasks.c **** 	else
3012:../Dave/Generated/FREERTOS/tasks.c **** 	{
3013:../Dave/Generated/FREERTOS/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3014:../Dave/Generated/FREERTOS/tasks.c **** 		pending until the scheduler is resumed. */
3015:../Dave/Generated/FREERTOS/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 4281              	 .loc 1 3015 0
 4282 007a 3B69     	 ldr r3,[r7,#16]
 4283 007c 1833     	 adds r3,r3,#24
 4284 007e 0F48     	 ldr r0,.L298+12
 4285 0080 1946     	 mov r1,r3
 4286 0082 FFF7FEFF 	 bl vListInsertEnd
 4287              	.L294:
3016:../Dave/Generated/FREERTOS/tasks.c **** 	}
3017:../Dave/Generated/FREERTOS/tasks.c **** 
3018:../Dave/Generated/FREERTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4288              	 .loc 1 3018 0
 4289 0086 3B69     	 ldr r3,[r7,#16]
 4290 0088 DA6A     	 ldr r2,[r3,#44]
 4291 008a 0D4B     	 ldr r3,.L298+16
 4292 008c 1B68     	 ldr r3,[r3]
 4293 008e DB6A     	 ldr r3,[r3,#44]
 4294 0090 9A42     	 cmp r2,r3
 4295 0092 05D9     	 bls .L295
3019:../Dave/Generated/FREERTOS/tasks.c **** 	{
3020:../Dave/Generated/FREERTOS/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3021:../Dave/Generated/FREERTOS/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3022:../Dave/Generated/FREERTOS/tasks.c **** 		it should force a context switch now. */
3023:../Dave/Generated/FREERTOS/tasks.c **** 		xReturn = pdTRUE;
 4296              	 .loc 1 3023 0
 4297 0094 0123     	 movs r3,#1
 4298 0096 7B61     	 str r3,[r7,#20]
3024:../Dave/Generated/FREERTOS/tasks.c **** 
3025:../Dave/Generated/FREERTOS/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3026:../Dave/Generated/FREERTOS/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3027:../Dave/Generated/FREERTOS/tasks.c **** 		xYieldPending = pdTRUE;
 4299              	 .loc 1 3027 0
 4300 0098 0A4B     	 ldr r3,.L298+20
 4301 009a 0122     	 movs r2,#1
 4302 009c 1A60     	 str r2,[r3]
 4303 009e 01E0     	 b .L296
 4304              	.L295:
3028:../Dave/Generated/FREERTOS/tasks.c **** 	}
3029:../Dave/Generated/FREERTOS/tasks.c **** 	else
3030:../Dave/Generated/FREERTOS/tasks.c **** 	{
3031:../Dave/Generated/FREERTOS/tasks.c **** 		xReturn = pdFALSE;
 4305              	 .loc 1 3031 0
 4306 00a0 0023     	 movs r3,#0
 4307 00a2 7B61     	 str r3,[r7,#20]
 4308              	.L296:
3032:../Dave/Generated/FREERTOS/tasks.c **** 	}
3033:../Dave/Generated/FREERTOS/tasks.c **** 
3034:../Dave/Generated/FREERTOS/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3035:../Dave/Generated/FREERTOS/tasks.c **** 	{
3036:../Dave/Generated/FREERTOS/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3037:../Dave/Generated/FREERTOS/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3038:../Dave/Generated/FREERTOS/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3039:../Dave/Generated/FREERTOS/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3040:../Dave/Generated/FREERTOS/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3041:../Dave/Generated/FREERTOS/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3042:../Dave/Generated/FREERTOS/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3043:../Dave/Generated/FREERTOS/tasks.c **** 		ensure it is updated at the earliest possible time. */
3044:../Dave/Generated/FREERTOS/tasks.c **** 		prvResetNextTaskUnblockTime();
3045:../Dave/Generated/FREERTOS/tasks.c **** 	}
3046:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
3047:../Dave/Generated/FREERTOS/tasks.c **** 
3048:../Dave/Generated/FREERTOS/tasks.c **** 	return xReturn;
 4309              	 .loc 1 3048 0
 4310 00a4 7B69     	 ldr r3,[r7,#20]
3049:../Dave/Generated/FREERTOS/tasks.c **** }
 4311              	 .loc 1 3049 0
 4312 00a6 1846     	 mov r0,r3
 4313 00a8 1837     	 adds r7,r7,#24
 4314              	 .cfi_def_cfa_offset 8
 4315 00aa BD46     	 mov sp,r7
 4316              	 .cfi_def_cfa_register 13
 4317              	 
 4318 00ac 80BD     	 pop {r7,pc}
 4319              	.L299:
 4320 00ae 00BF     	 .align 2
 4321              	.L298:
 4322 00b0 00000000 	 .word uxSchedulerSuspended
 4323 00b4 00000000 	 .word uxTopReadyPriority
 4324 00b8 00000000 	 .word pxReadyTasksLists
 4325 00bc 00000000 	 .word xPendingReadyList
 4326 00c0 00000000 	 .word pxCurrentTCB
 4327 00c4 00000000 	 .word xYieldPending
 4328              	 .cfi_endproc
 4329              	.LFE169:
 4331              	 .section .text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 4332              	 .align 2
 4333              	 .global vTaskRemoveFromUnorderedEventList
 4334              	 .thumb
 4335              	 .thumb_func
 4337              	vTaskRemoveFromUnorderedEventList:
 4338              	.LFB170:
3050:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3051:../Dave/Generated/FREERTOS/tasks.c **** 
3052:../Dave/Generated/FREERTOS/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3053:../Dave/Generated/FREERTOS/tasks.c **** {
 4339              	 .loc 1 3053 0
 4340              	 .cfi_startproc
 4341              	 
 4342              	 
 4343 0000 80B5     	 push {r7,lr}
 4344              	 .cfi_def_cfa_offset 8
 4345              	 .cfi_offset 7,-8
 4346              	 .cfi_offset 14,-4
 4347 0002 86B0     	 sub sp,sp,#24
 4348              	 .cfi_def_cfa_offset 32
 4349 0004 00AF     	 add r7,sp,#0
 4350              	 .cfi_def_cfa_register 7
 4351 0006 7860     	 str r0,[r7,#4]
 4352 0008 3960     	 str r1,[r7]
3054:../Dave/Generated/FREERTOS/tasks.c **** TCB_t *pxUnblockedTCB;
3055:../Dave/Generated/FREERTOS/tasks.c **** 
3056:../Dave/Generated/FREERTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3057:../Dave/Generated/FREERTOS/tasks.c **** 	the event flags implementation. */
3058:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 4353              	 .loc 1 3058 0
 4354 000a 284B     	 ldr r3,.L306
 4355 000c 1B68     	 ldr r3,[r3]
 4356 000e 002B     	 cmp r3,#0
 4357 0010 09D1     	 bne .L301
 4358              	.LBB184:
 4359              	.LBB185:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 4360              	 .loc 2 195 0 discriminator 1
 4361              	
 4362 0012 4FF0FC03 	 mov r3,#252
 4363 0016 83F31188 	 msr basepri,r3
 4364 001a BFF36F8F 	 isb 
 4365 001e BFF34F8F 	 dsb 
 4366              	
 4367              	
 4368              	 .thumb
 4369 0022 3B61     	 str r3,[r7,#16]
 4370              	.L302:
 4371              	.LBE185:
 4372              	.LBE184:
 4373              	 .loc 1 3058 0 discriminator 1
 4374 0024 FEE7     	 b .L302
 4375              	.L301:
3059:../Dave/Generated/FREERTOS/tasks.c **** 
3060:../Dave/Generated/FREERTOS/tasks.c **** 	/* Store the new item value in the event list. */
3061:../Dave/Generated/FREERTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 4376              	 .loc 1 3061 0
 4377 0026 3B68     	 ldr r3,[r7]
 4378 0028 43F00042 	 orr r2,r3,#-2147483648
 4379 002c 7B68     	 ldr r3,[r7,#4]
 4380 002e 1A60     	 str r2,[r3]
3062:../Dave/Generated/FREERTOS/tasks.c **** 
3063:../Dave/Generated/FREERTOS/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3064:../Dave/Generated/FREERTOS/tasks.c **** 	event flags. */
3065:../Dave/Generated/FREERTOS/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 4381              	 .loc 1 3065 0
 4382 0030 7B68     	 ldr r3,[r7,#4]
 4383 0032 DB68     	 ldr r3,[r3,#12]
 4384 0034 7B61     	 str r3,[r7,#20]
3066:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4385              	 .loc 1 3066 0
 4386 0036 7B69     	 ldr r3,[r7,#20]
 4387 0038 002B     	 cmp r3,#0
 4388 003a 09D1     	 bne .L303
 4389              	.LBB186:
 4390              	.LBB187:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 4391              	 .loc 2 195 0 discriminator 1
 4392              	
 4393 003c 4FF0FC03 	 mov r3,#252
 4394 0040 83F31188 	 msr basepri,r3
 4395 0044 BFF36F8F 	 isb 
 4396 0048 BFF34F8F 	 dsb 
 4397              	
 4398              	
 4399              	 .thumb
 4400 004c FB60     	 str r3,[r7,#12]
 4401              	.L304:
 4402              	.LBE187:
 4403              	.LBE186:
 4404              	 .loc 1 3066 0 discriminator 2
 4405 004e FEE7     	 b .L304
 4406              	.L303:
3067:../Dave/Generated/FREERTOS/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4407              	 .loc 1 3067 0
 4408 0050 7868     	 ldr r0,[r7,#4]
 4409 0052 FFF7FEFF 	 bl uxListRemove
3068:../Dave/Generated/FREERTOS/tasks.c **** 
3069:../Dave/Generated/FREERTOS/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3070:../Dave/Generated/FREERTOS/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3071:../Dave/Generated/FREERTOS/tasks.c **** 	lists. */
3072:../Dave/Generated/FREERTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4410              	 .loc 1 3072 0
 4411 0056 7B69     	 ldr r3,[r7,#20]
 4412 0058 0433     	 adds r3,r3,#4
 4413 005a 1846     	 mov r0,r3
 4414 005c FFF7FEFF 	 bl uxListRemove
3073:../Dave/Generated/FREERTOS/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 4415              	 .loc 1 3073 0
 4416 0060 7B69     	 ldr r3,[r7,#20]
 4417 0062 DB6A     	 ldr r3,[r3,#44]
 4418 0064 1A46     	 mov r2,r3
 4419 0066 0123     	 movs r3,#1
 4420 0068 03FA02F2 	 lsl r2,r3,r2
 4421 006c 104B     	 ldr r3,.L306+4
 4422 006e 1B68     	 ldr r3,[r3]
 4423 0070 1343     	 orrs r3,r3,r2
 4424 0072 0F4A     	 ldr r2,.L306+4
 4425 0074 1360     	 str r3,[r2]
 4426 0076 7B69     	 ldr r3,[r7,#20]
 4427 0078 DA6A     	 ldr r2,[r3,#44]
 4428 007a 1346     	 mov r3,r2
 4429 007c 9B00     	 lsls r3,r3,#2
 4430 007e 1344     	 add r3,r3,r2
 4431 0080 9B00     	 lsls r3,r3,#2
 4432 0082 0C4A     	 ldr r2,.L306+8
 4433 0084 1A44     	 add r2,r2,r3
 4434 0086 7B69     	 ldr r3,[r7,#20]
 4435 0088 0433     	 adds r3,r3,#4
 4436 008a 1046     	 mov r0,r2
 4437 008c 1946     	 mov r1,r3
 4438 008e FFF7FEFF 	 bl vListInsertEnd
3074:../Dave/Generated/FREERTOS/tasks.c **** 
3075:../Dave/Generated/FREERTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4439              	 .loc 1 3075 0
 4440 0092 7B69     	 ldr r3,[r7,#20]
 4441 0094 DA6A     	 ldr r2,[r3,#44]
 4442 0096 084B     	 ldr r3,.L306+12
 4443 0098 1B68     	 ldr r3,[r3]
 4444 009a DB6A     	 ldr r3,[r3,#44]
 4445 009c 9A42     	 cmp r2,r3
 4446 009e 02D9     	 bls .L300
3076:../Dave/Generated/FREERTOS/tasks.c **** 	{
3077:../Dave/Generated/FREERTOS/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3078:../Dave/Generated/FREERTOS/tasks.c **** 		a context switch is required.  This function is called with the
3079:../Dave/Generated/FREERTOS/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3080:../Dave/Generated/FREERTOS/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3081:../Dave/Generated/FREERTOS/tasks.c **** 		xYieldPending = pdTRUE;
 4447              	 .loc 1 3081 0
 4448 00a0 064B     	 ldr r3,.L306+16
 4449 00a2 0122     	 movs r2,#1
 4450 00a4 1A60     	 str r2,[r3]
 4451              	.L300:
3082:../Dave/Generated/FREERTOS/tasks.c **** 	}
3083:../Dave/Generated/FREERTOS/tasks.c **** }
 4452              	 .loc 1 3083 0
 4453 00a6 1837     	 adds r7,r7,#24
 4454              	 .cfi_def_cfa_offset 8
 4455 00a8 BD46     	 mov sp,r7
 4456              	 .cfi_def_cfa_register 13
 4457              	 
 4458 00aa 80BD     	 pop {r7,pc}
 4459              	.L307:
 4460              	 .align 2
 4461              	.L306:
 4462 00ac 00000000 	 .word uxSchedulerSuspended
 4463 00b0 00000000 	 .word uxTopReadyPriority
 4464 00b4 00000000 	 .word pxReadyTasksLists
 4465 00b8 00000000 	 .word pxCurrentTCB
 4466 00bc 00000000 	 .word xYieldPending
 4467              	 .cfi_endproc
 4468              	.LFE170:
 4470              	 .section .text.vTaskSetTimeOutState,"ax",%progbits
 4471              	 .align 2
 4472              	 .global vTaskSetTimeOutState
 4473              	 .thumb
 4474              	 .thumb_func
 4476              	vTaskSetTimeOutState:
 4477              	.LFB171:
3084:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3085:../Dave/Generated/FREERTOS/tasks.c **** 
3086:../Dave/Generated/FREERTOS/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3087:../Dave/Generated/FREERTOS/tasks.c **** {
 4478              	 .loc 1 3087 0
 4479              	 .cfi_startproc
 4480              	 
 4481              	 
 4482 0000 80B5     	 push {r7,lr}
 4483              	 .cfi_def_cfa_offset 8
 4484              	 .cfi_offset 7,-8
 4485              	 .cfi_offset 14,-4
 4486 0002 84B0     	 sub sp,sp,#16
 4487              	 .cfi_def_cfa_offset 24
 4488 0004 00AF     	 add r7,sp,#0
 4489              	 .cfi_def_cfa_register 7
 4490 0006 7860     	 str r0,[r7,#4]
3088:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxTimeOut );
 4491              	 .loc 1 3088 0
 4492 0008 7B68     	 ldr r3,[r7,#4]
 4493 000a 002B     	 cmp r3,#0
 4494 000c 09D1     	 bne .L309
 4495              	.LBB188:
 4496              	.LBB189:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 4497              	 .loc 2 195 0 discriminator 1
 4498              	
 4499 000e 4FF0FC03 	 mov r3,#252
 4500 0012 83F31188 	 msr basepri,r3
 4501 0016 BFF36F8F 	 isb 
 4502 001a BFF34F8F 	 dsb 
 4503              	
 4504              	
 4505              	 .thumb
 4506 001e FB60     	 str r3,[r7,#12]
 4507              	.L310:
 4508              	.LBE189:
 4509              	.LBE188:
 4510              	 .loc 1 3088 0 discriminator 1
 4511 0020 FEE7     	 b .L310
 4512              	.L309:
3089:../Dave/Generated/FREERTOS/tasks.c **** 	taskENTER_CRITICAL();
 4513              	 .loc 1 3089 0
 4514 0022 FFF7FEFF 	 bl vPortEnterCritical
3090:../Dave/Generated/FREERTOS/tasks.c **** 	{
3091:../Dave/Generated/FREERTOS/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
 4515              	 .loc 1 3091 0
 4516 0026 064B     	 ldr r3,.L311
 4517 0028 1A68     	 ldr r2,[r3]
 4518 002a 7B68     	 ldr r3,[r7,#4]
 4519 002c 1A60     	 str r2,[r3]
3092:../Dave/Generated/FREERTOS/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 4520              	 .loc 1 3092 0
 4521 002e 054B     	 ldr r3,.L311+4
 4522 0030 1A68     	 ldr r2,[r3]
 4523 0032 7B68     	 ldr r3,[r7,#4]
 4524 0034 5A60     	 str r2,[r3,#4]
3093:../Dave/Generated/FREERTOS/tasks.c **** 	}
3094:../Dave/Generated/FREERTOS/tasks.c **** 	taskEXIT_CRITICAL();
 4525              	 .loc 1 3094 0
 4526 0036 FFF7FEFF 	 bl vPortExitCritical
3095:../Dave/Generated/FREERTOS/tasks.c **** }
 4527              	 .loc 1 3095 0
 4528 003a 1037     	 adds r7,r7,#16
 4529              	 .cfi_def_cfa_offset 8
 4530 003c BD46     	 mov sp,r7
 4531              	 .cfi_def_cfa_register 13
 4532              	 
 4533 003e 80BD     	 pop {r7,pc}
 4534              	.L312:
 4535              	 .align 2
 4536              	.L311:
 4537 0040 00000000 	 .word xNumOfOverflows
 4538 0044 00000000 	 .word xTickCount
 4539              	 .cfi_endproc
 4540              	.LFE171:
 4542              	 .section .text.vTaskInternalSetTimeOutState,"ax",%progbits
 4543              	 .align 2
 4544              	 .global vTaskInternalSetTimeOutState
 4545              	 .thumb
 4546              	 .thumb_func
 4548              	vTaskInternalSetTimeOutState:
 4549              	.LFB172:
3096:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3097:../Dave/Generated/FREERTOS/tasks.c **** 
3098:../Dave/Generated/FREERTOS/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3099:../Dave/Generated/FREERTOS/tasks.c **** {
 4550              	 .loc 1 3099 0
 4551              	 .cfi_startproc
 4552              	 
 4553              	 
 4554              	 
 4555 0000 80B4     	 push {r7}
 4556              	 .cfi_def_cfa_offset 4
 4557              	 .cfi_offset 7,-4
 4558 0002 83B0     	 sub sp,sp,#12
 4559              	 .cfi_def_cfa_offset 16
 4560 0004 00AF     	 add r7,sp,#0
 4561              	 .cfi_def_cfa_register 7
 4562 0006 7860     	 str r0,[r7,#4]
3100:../Dave/Generated/FREERTOS/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3101:../Dave/Generated/FREERTOS/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 4563              	 .loc 1 3101 0
 4564 0008 064B     	 ldr r3,.L314
 4565 000a 1A68     	 ldr r2,[r3]
 4566 000c 7B68     	 ldr r3,[r7,#4]
 4567 000e 1A60     	 str r2,[r3]
3102:../Dave/Generated/FREERTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 4568              	 .loc 1 3102 0
 4569 0010 054B     	 ldr r3,.L314+4
 4570 0012 1A68     	 ldr r2,[r3]
 4571 0014 7B68     	 ldr r3,[r7,#4]
 4572 0016 5A60     	 str r2,[r3,#4]
3103:../Dave/Generated/FREERTOS/tasks.c **** }
 4573              	 .loc 1 3103 0
 4574 0018 0C37     	 adds r7,r7,#12
 4575              	 .cfi_def_cfa_offset 4
 4576 001a BD46     	 mov sp,r7
 4577              	 .cfi_def_cfa_register 13
 4578              	 
 4579 001c 5DF8047B 	 ldr r7,[sp],#4
 4580              	 .cfi_restore 7
 4581              	 .cfi_def_cfa_offset 0
 4582 0020 7047     	 bx lr
 4583              	.L315:
 4584 0022 00BF     	 .align 2
 4585              	.L314:
 4586 0024 00000000 	 .word xNumOfOverflows
 4587 0028 00000000 	 .word xTickCount
 4588              	 .cfi_endproc
 4589              	.LFE172:
 4591              	 .section .text.xTaskCheckForTimeOut,"ax",%progbits
 4592              	 .align 2
 4593              	 .global xTaskCheckForTimeOut
 4594              	 .thumb
 4595              	 .thumb_func
 4597              	xTaskCheckForTimeOut:
 4598              	.LFB173:
3104:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3105:../Dave/Generated/FREERTOS/tasks.c **** 
3106:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3107:../Dave/Generated/FREERTOS/tasks.c **** {
 4599              	 .loc 1 3107 0
 4600              	 .cfi_startproc
 4601              	 
 4602              	 
 4603 0000 80B5     	 push {r7,lr}
 4604              	 .cfi_def_cfa_offset 8
 4605              	 .cfi_offset 7,-8
 4606              	 .cfi_offset 14,-4
 4607 0002 88B0     	 sub sp,sp,#32
 4608              	 .cfi_def_cfa_offset 40
 4609 0004 00AF     	 add r7,sp,#0
 4610              	 .cfi_def_cfa_register 7
 4611 0006 7860     	 str r0,[r7,#4]
 4612 0008 3960     	 str r1,[r7]
3108:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xReturn;
3109:../Dave/Generated/FREERTOS/tasks.c **** 
3110:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxTimeOut );
 4613              	 .loc 1 3110 0
 4614 000a 7B68     	 ldr r3,[r7,#4]
 4615 000c 002B     	 cmp r3,#0
 4616 000e 09D1     	 bne .L317
 4617              	.LBB190:
 4618              	.LBB191:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 4619              	 .loc 2 195 0 discriminator 1
 4620              	
 4621 0010 4FF0FC03 	 mov r3,#252
 4622 0014 83F31188 	 msr basepri,r3
 4623 0018 BFF36F8F 	 isb 
 4624 001c BFF34F8F 	 dsb 
 4625              	
 4626              	
 4627              	 .thumb
 4628 0020 3B61     	 str r3,[r7,#16]
 4629              	.L318:
 4630              	.LBE191:
 4631              	.LBE190:
 4632              	 .loc 1 3110 0 discriminator 1
 4633 0022 FEE7     	 b .L318
 4634              	.L317:
3111:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxTicksToWait );
 4635              	 .loc 1 3111 0
 4636 0024 3B68     	 ldr r3,[r7]
 4637 0026 002B     	 cmp r3,#0
 4638 0028 09D1     	 bne .L319
 4639              	.LBB192:
 4640              	.LBB193:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 4641              	 .loc 2 195 0 discriminator 1
 4642              	
 4643 002a 4FF0FC03 	 mov r3,#252
 4644 002e 83F31188 	 msr basepri,r3
 4645 0032 BFF36F8F 	 isb 
 4646 0036 BFF34F8F 	 dsb 
 4647              	
 4648              	
 4649              	 .thumb
 4650 003a FB60     	 str r3,[r7,#12]
 4651              	.L320:
 4652              	.LBE193:
 4653              	.LBE192:
 4654              	 .loc 1 3111 0 discriminator 2
 4655 003c FEE7     	 b .L320
 4656              	.L319:
3112:../Dave/Generated/FREERTOS/tasks.c **** 
3113:../Dave/Generated/FREERTOS/tasks.c **** 	taskENTER_CRITICAL();
 4657              	 .loc 1 3113 0
 4658 003e FFF7FEFF 	 bl vPortEnterCritical
 4659              	.LBB194:
3114:../Dave/Generated/FREERTOS/tasks.c **** 	{
3115:../Dave/Generated/FREERTOS/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3116:../Dave/Generated/FREERTOS/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 4660              	 .loc 1 3116 0
 4661 0042 244B     	 ldr r3,.L327
 4662 0044 1B68     	 ldr r3,[r3]
 4663 0046 BB61     	 str r3,[r7,#24]
3117:../Dave/Generated/FREERTOS/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4664              	 .loc 1 3117 0
 4665 0048 7B68     	 ldr r3,[r7,#4]
 4666 004a 5B68     	 ldr r3,[r3,#4]
 4667 004c BA69     	 ldr r2,[r7,#24]
 4668 004e D31A     	 subs r3,r2,r3
 4669 0050 7B61     	 str r3,[r7,#20]
3118:../Dave/Generated/FREERTOS/tasks.c **** 
3119:../Dave/Generated/FREERTOS/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3120:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
 4670              	 .loc 1 3120 0
 4671 0052 214B     	 ldr r3,.L327+4
 4672 0054 1B68     	 ldr r3,[r3]
 4673 0056 93F86D30 	 ldrb r3,[r3,#109]
 4674 005a 002B     	 cmp r3,#0
 4675 005c 07D0     	 beq .L321
3121:../Dave/Generated/FREERTOS/tasks.c **** 			{
3122:../Dave/Generated/FREERTOS/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3123:../Dave/Generated/FREERTOS/tasks.c **** 				but has the same result. */
3124:../Dave/Generated/FREERTOS/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
 4676              	 .loc 1 3124 0
 4677 005e 1E4B     	 ldr r3,.L327+4
 4678 0060 1B68     	 ldr r3,[r3]
 4679 0062 0022     	 movs r2,#0
 4680 0064 83F86D20 	 strb r2,[r3,#109]
3125:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdTRUE;
 4681              	 .loc 1 3125 0
 4682 0068 0123     	 movs r3,#1
 4683 006a FB61     	 str r3,[r7,#28]
 4684 006c 2BE0     	 b .L322
 4685              	.L321:
3126:../Dave/Generated/FREERTOS/tasks.c **** 			}
3127:../Dave/Generated/FREERTOS/tasks.c **** 			else
3128:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
3129:../Dave/Generated/FREERTOS/tasks.c **** 
3130:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3131:../Dave/Generated/FREERTOS/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 4686              	 .loc 1 3131 0
 4687 006e 3B68     	 ldr r3,[r7]
 4688 0070 1B68     	 ldr r3,[r3]
 4689 0072 B3F1FF3F 	 cmp r3,#-1
 4690 0076 02D1     	 bne .L323
3132:../Dave/Generated/FREERTOS/tasks.c **** 			{
3133:../Dave/Generated/FREERTOS/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3134:../Dave/Generated/FREERTOS/tasks.c **** 				specified is the maximum block time then the task should block
3135:../Dave/Generated/FREERTOS/tasks.c **** 				indefinitely, and therefore never time out. */
3136:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdFALSE;
 4691              	 .loc 1 3136 0
 4692 0078 0023     	 movs r3,#0
 4693 007a FB61     	 str r3,[r7,#28]
 4694 007c 23E0     	 b .L322
 4695              	.L323:
3137:../Dave/Generated/FREERTOS/tasks.c **** 			}
3138:../Dave/Generated/FREERTOS/tasks.c **** 			else
3139:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
3140:../Dave/Generated/FREERTOS/tasks.c **** 
3141:../Dave/Generated/FREERTOS/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 4696              	 .loc 1 3141 0
 4697 007e 7B68     	 ldr r3,[r7,#4]
 4698 0080 1A68     	 ldr r2,[r3]
 4699 0082 164B     	 ldr r3,.L327+8
 4700 0084 1B68     	 ldr r3,[r3]
 4701 0086 9A42     	 cmp r2,r3
 4702 0088 07D0     	 beq .L324
 4703              	 .loc 1 3141 0 is_stmt 0 discriminator 1
 4704 008a 7B68     	 ldr r3,[r7,#4]
 4705 008c 5A68     	 ldr r2,[r3,#4]
 4706 008e BB69     	 ldr r3,[r7,#24]
 4707 0090 9A42     	 cmp r2,r3
 4708 0092 02D8     	 bhi .L324
3142:../Dave/Generated/FREERTOS/tasks.c **** 		{
3143:../Dave/Generated/FREERTOS/tasks.c **** 			/* The tick count is greater than the time at which
3144:../Dave/Generated/FREERTOS/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3145:../Dave/Generated/FREERTOS/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3146:../Dave/Generated/FREERTOS/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3147:../Dave/Generated/FREERTOS/tasks.c **** 			was called. */
3148:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pdTRUE;
 4709              	 .loc 1 3148 0 is_stmt 1
 4710 0094 0123     	 movs r3,#1
 4711 0096 FB61     	 str r3,[r7,#28]
 4712 0098 15E0     	 b .L322
 4713              	.L324:
3149:../Dave/Generated/FREERTOS/tasks.c **** 		}
3150:../Dave/Generated/FREERTOS/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
 4714              	 .loc 1 3150 0
 4715 009a 3B68     	 ldr r3,[r7]
 4716 009c 1A68     	 ldr r2,[r3]
 4717 009e 7B69     	 ldr r3,[r7,#20]
 4718 00a0 9A42     	 cmp r2,r3
 4719 00a2 0BD9     	 bls .L325
3151:../Dave/Generated/FREERTOS/tasks.c **** 		{
3152:../Dave/Generated/FREERTOS/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3153:../Dave/Generated/FREERTOS/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
 4720              	 .loc 1 3153 0
 4721 00a4 3B68     	 ldr r3,[r7]
 4722 00a6 1A68     	 ldr r2,[r3]
 4723 00a8 7B69     	 ldr r3,[r7,#20]
 4724 00aa D21A     	 subs r2,r2,r3
 4725 00ac 3B68     	 ldr r3,[r7]
 4726 00ae 1A60     	 str r2,[r3]
3154:../Dave/Generated/FREERTOS/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 4727              	 .loc 1 3154 0
 4728 00b0 7868     	 ldr r0,[r7,#4]
 4729 00b2 FFF7FEFF 	 bl vTaskInternalSetTimeOutState
3155:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pdFALSE;
 4730              	 .loc 1 3155 0
 4731 00b6 0023     	 movs r3,#0
 4732 00b8 FB61     	 str r3,[r7,#28]
 4733 00ba 04E0     	 b .L322
 4734              	.L325:
3156:../Dave/Generated/FREERTOS/tasks.c **** 		}
3157:../Dave/Generated/FREERTOS/tasks.c **** 		else
3158:../Dave/Generated/FREERTOS/tasks.c **** 		{
3159:../Dave/Generated/FREERTOS/tasks.c **** 			*pxTicksToWait = 0;
 4735              	 .loc 1 3159 0
 4736 00bc 3B68     	 ldr r3,[r7]
 4737 00be 0022     	 movs r2,#0
 4738 00c0 1A60     	 str r2,[r3]
3160:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pdTRUE;
 4739              	 .loc 1 3160 0
 4740 00c2 0123     	 movs r3,#1
 4741 00c4 FB61     	 str r3,[r7,#28]
 4742              	.L322:
 4743              	.LBE194:
3161:../Dave/Generated/FREERTOS/tasks.c **** 		}
3162:../Dave/Generated/FREERTOS/tasks.c **** 	}
3163:../Dave/Generated/FREERTOS/tasks.c **** 	taskEXIT_CRITICAL();
 4744              	 .loc 1 3163 0
 4745 00c6 FFF7FEFF 	 bl vPortExitCritical
3164:../Dave/Generated/FREERTOS/tasks.c **** 
3165:../Dave/Generated/FREERTOS/tasks.c **** 	return xReturn;
 4746              	 .loc 1 3165 0
 4747 00ca FB69     	 ldr r3,[r7,#28]
3166:../Dave/Generated/FREERTOS/tasks.c **** }
 4748              	 .loc 1 3166 0
 4749 00cc 1846     	 mov r0,r3
 4750 00ce 2037     	 adds r7,r7,#32
 4751              	 .cfi_def_cfa_offset 8
 4752 00d0 BD46     	 mov sp,r7
 4753              	 .cfi_def_cfa_register 13
 4754              	 
 4755 00d2 80BD     	 pop {r7,pc}
 4756              	.L328:
 4757              	 .align 2
 4758              	.L327:
 4759 00d4 00000000 	 .word xTickCount
 4760 00d8 00000000 	 .word pxCurrentTCB
 4761 00dc 00000000 	 .word xNumOfOverflows
 4762              	 .cfi_endproc
 4763              	.LFE173:
 4765              	 .section .text.vTaskMissedYield,"ax",%progbits
 4766              	 .align 2
 4767              	 .global vTaskMissedYield
 4768              	 .thumb
 4769              	 .thumb_func
 4771              	vTaskMissedYield:
 4772              	.LFB174:
3167:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3168:../Dave/Generated/FREERTOS/tasks.c **** 
3169:../Dave/Generated/FREERTOS/tasks.c **** void vTaskMissedYield( void )
3170:../Dave/Generated/FREERTOS/tasks.c **** {
 4773              	 .loc 1 3170 0
 4774              	 .cfi_startproc
 4775              	 
 4776              	 
 4777              	 
 4778 0000 80B4     	 push {r7}
 4779              	 .cfi_def_cfa_offset 4
 4780              	 .cfi_offset 7,-4
 4781 0002 00AF     	 add r7,sp,#0
 4782              	 .cfi_def_cfa_register 7
3171:../Dave/Generated/FREERTOS/tasks.c **** 	xYieldPending = pdTRUE;
 4783              	 .loc 1 3171 0
 4784 0004 034B     	 ldr r3,.L330
 4785 0006 0122     	 movs r2,#1
 4786 0008 1A60     	 str r2,[r3]
3172:../Dave/Generated/FREERTOS/tasks.c **** }
 4787              	 .loc 1 3172 0
 4788 000a BD46     	 mov sp,r7
 4789              	 .cfi_def_cfa_register 13
 4790              	 
 4791 000c 5DF8047B 	 ldr r7,[sp],#4
 4792              	 .cfi_restore 7
 4793              	 .cfi_def_cfa_offset 0
 4794 0010 7047     	 bx lr
 4795              	.L331:
 4796 0012 00BF     	 .align 2
 4797              	.L330:
 4798 0014 00000000 	 .word xYieldPending
 4799              	 .cfi_endproc
 4800              	.LFE174:
 4802              	 .section .text.uxTaskGetTaskNumber,"ax",%progbits
 4803              	 .align 2
 4804              	 .global uxTaskGetTaskNumber
 4805              	 .thumb
 4806              	 .thumb_func
 4808              	uxTaskGetTaskNumber:
 4809              	.LFB175:
3173:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3174:../Dave/Generated/FREERTOS/tasks.c **** 
3175:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3176:../Dave/Generated/FREERTOS/tasks.c **** 
3177:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3178:../Dave/Generated/FREERTOS/tasks.c **** 	{
 4810              	 .loc 1 3178 0
 4811              	 .cfi_startproc
 4812              	 
 4813              	 
 4814              	 
 4815 0000 80B4     	 push {r7}
 4816              	 .cfi_def_cfa_offset 4
 4817              	 .cfi_offset 7,-4
 4818 0002 85B0     	 sub sp,sp,#20
 4819              	 .cfi_def_cfa_offset 24
 4820 0004 00AF     	 add r7,sp,#0
 4821              	 .cfi_def_cfa_register 7
 4822 0006 7860     	 str r0,[r7,#4]
3179:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxReturn;
3180:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
3181:../Dave/Generated/FREERTOS/tasks.c **** 
3182:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTask != NULL )
 4823              	 .loc 1 3182 0
 4824 0008 7B68     	 ldr r3,[r7,#4]
 4825 000a 002B     	 cmp r3,#0
 4826 000c 05D0     	 beq .L333
3183:../Dave/Generated/FREERTOS/tasks.c **** 		{
3184:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
 4827              	 .loc 1 3184 0
 4828 000e 7B68     	 ldr r3,[r7,#4]
 4829 0010 BB60     	 str r3,[r7,#8]
3185:../Dave/Generated/FREERTOS/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 4830              	 .loc 1 3185 0
 4831 0012 BB68     	 ldr r3,[r7,#8]
 4832 0014 9B6C     	 ldr r3,[r3,#72]
 4833 0016 FB60     	 str r3,[r7,#12]
 4834 0018 01E0     	 b .L334
 4835              	.L333:
3186:../Dave/Generated/FREERTOS/tasks.c **** 		}
3187:../Dave/Generated/FREERTOS/tasks.c **** 		else
3188:../Dave/Generated/FREERTOS/tasks.c **** 		{
3189:../Dave/Generated/FREERTOS/tasks.c **** 			uxReturn = 0U;
 4836              	 .loc 1 3189 0
 4837 001a 0023     	 movs r3,#0
 4838 001c FB60     	 str r3,[r7,#12]
 4839              	.L334:
3190:../Dave/Generated/FREERTOS/tasks.c **** 		}
3191:../Dave/Generated/FREERTOS/tasks.c **** 
3192:../Dave/Generated/FREERTOS/tasks.c **** 		return uxReturn;
 4840              	 .loc 1 3192 0
 4841 001e FB68     	 ldr r3,[r7,#12]
3193:../Dave/Generated/FREERTOS/tasks.c **** 	}
 4842              	 .loc 1 3193 0
 4843 0020 1846     	 mov r0,r3
 4844 0022 1437     	 adds r7,r7,#20
 4845              	 .cfi_def_cfa_offset 4
 4846 0024 BD46     	 mov sp,r7
 4847              	 .cfi_def_cfa_register 13
 4848              	 
 4849 0026 5DF8047B 	 ldr r7,[sp],#4
 4850              	 .cfi_restore 7
 4851              	 .cfi_def_cfa_offset 0
 4852 002a 7047     	 bx lr
 4853              	 .cfi_endproc
 4854              	.LFE175:
 4856              	 .section .text.vTaskSetTaskNumber,"ax",%progbits
 4857              	 .align 2
 4858              	 .global vTaskSetTaskNumber
 4859              	 .thumb
 4860              	 .thumb_func
 4862              	vTaskSetTaskNumber:
 4863              	.LFB176:
3194:../Dave/Generated/FREERTOS/tasks.c **** 
3195:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3196:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3197:../Dave/Generated/FREERTOS/tasks.c **** 
3198:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3199:../Dave/Generated/FREERTOS/tasks.c **** 
3200:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3201:../Dave/Generated/FREERTOS/tasks.c **** 	{
 4864              	 .loc 1 3201 0
 4865              	 .cfi_startproc
 4866              	 
 4867              	 
 4868              	 
 4869 0000 80B4     	 push {r7}
 4870              	 .cfi_def_cfa_offset 4
 4871              	 .cfi_offset 7,-4
 4872 0002 85B0     	 sub sp,sp,#20
 4873              	 .cfi_def_cfa_offset 24
 4874 0004 00AF     	 add r7,sp,#0
 4875              	 .cfi_def_cfa_register 7
 4876 0006 7860     	 str r0,[r7,#4]
 4877 0008 3960     	 str r1,[r7]
3202:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
3203:../Dave/Generated/FREERTOS/tasks.c **** 
3204:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTask != NULL )
 4878              	 .loc 1 3204 0
 4879 000a 7B68     	 ldr r3,[r7,#4]
 4880 000c 002B     	 cmp r3,#0
 4881 000e 04D0     	 beq .L336
3205:../Dave/Generated/FREERTOS/tasks.c **** 		{
3206:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
 4882              	 .loc 1 3206 0
 4883 0010 7B68     	 ldr r3,[r7,#4]
 4884 0012 FB60     	 str r3,[r7,#12]
3207:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 4885              	 .loc 1 3207 0
 4886 0014 FB68     	 ldr r3,[r7,#12]
 4887 0016 3A68     	 ldr r2,[r7]
 4888 0018 9A64     	 str r2,[r3,#72]
 4889              	.L336:
3208:../Dave/Generated/FREERTOS/tasks.c **** 		}
3209:../Dave/Generated/FREERTOS/tasks.c **** 	}
 4890              	 .loc 1 3209 0
 4891 001a 1437     	 adds r7,r7,#20
 4892              	 .cfi_def_cfa_offset 4
 4893 001c BD46     	 mov sp,r7
 4894              	 .cfi_def_cfa_register 13
 4895              	 
 4896 001e 5DF8047B 	 ldr r7,[sp],#4
 4897              	 .cfi_restore 7
 4898              	 .cfi_def_cfa_offset 0
 4899 0022 7047     	 bx lr
 4900              	 .cfi_endproc
 4901              	.LFE176:
 4903              	 .section .text.prvIdleTask,"ax",%progbits
 4904              	 .align 2
 4905              	 .thumb
 4906              	 .thumb_func
 4908              	prvIdleTask:
 4909              	.LFB177:
3210:../Dave/Generated/FREERTOS/tasks.c **** 
3211:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3212:../Dave/Generated/FREERTOS/tasks.c **** 
3213:../Dave/Generated/FREERTOS/tasks.c **** /*
3214:../Dave/Generated/FREERTOS/tasks.c ****  * -----------------------------------------------------------
3215:../Dave/Generated/FREERTOS/tasks.c ****  * The Idle task.
3216:../Dave/Generated/FREERTOS/tasks.c ****  * ----------------------------------------------------------
3217:../Dave/Generated/FREERTOS/tasks.c ****  *
3218:../Dave/Generated/FREERTOS/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3219:../Dave/Generated/FREERTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3220:../Dave/Generated/FREERTOS/tasks.c ****  *
3221:../Dave/Generated/FREERTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
3222:../Dave/Generated/FREERTOS/tasks.c ****  *
3223:../Dave/Generated/FREERTOS/tasks.c ****  */
3224:../Dave/Generated/FREERTOS/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3225:../Dave/Generated/FREERTOS/tasks.c **** {
 4910              	 .loc 1 3225 0
 4911              	 .cfi_startproc
 4912              	 
 4913              	 
 4914 0000 80B5     	 push {r7,lr}
 4915              	 .cfi_def_cfa_offset 8
 4916              	 .cfi_offset 7,-8
 4917              	 .cfi_offset 14,-4
 4918 0002 82B0     	 sub sp,sp,#8
 4919              	 .cfi_def_cfa_offset 16
 4920 0004 00AF     	 add r7,sp,#0
 4921              	 .cfi_def_cfa_register 7
 4922 0006 7860     	 str r0,[r7,#4]
 4923              	.L340:
3226:../Dave/Generated/FREERTOS/tasks.c **** 	/* Stop warnings. */
3227:../Dave/Generated/FREERTOS/tasks.c **** 	( void ) pvParameters;
3228:../Dave/Generated/FREERTOS/tasks.c **** 
3229:../Dave/Generated/FREERTOS/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3230:../Dave/Generated/FREERTOS/tasks.c **** 	SCHEDULER IS STARTED. **/
3231:../Dave/Generated/FREERTOS/tasks.c **** 
3232:../Dave/Generated/FREERTOS/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3233:../Dave/Generated/FREERTOS/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3234:../Dave/Generated/FREERTOS/tasks.c **** 	any. */
3235:../Dave/Generated/FREERTOS/tasks.c **** 	portTASK_CALLS_SECURE_FUNCTIONS();
3236:../Dave/Generated/FREERTOS/tasks.c **** 
3237:../Dave/Generated/FREERTOS/tasks.c **** 	for( ;; )
3238:../Dave/Generated/FREERTOS/tasks.c **** 	{
3239:../Dave/Generated/FREERTOS/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3240:../Dave/Generated/FREERTOS/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3241:../Dave/Generated/FREERTOS/tasks.c **** 		prvCheckTasksWaitingTermination();
 4924              	 .loc 1 3241 0
 4925 0008 FFF7FEFF 	 bl prvCheckTasksWaitingTermination
3242:../Dave/Generated/FREERTOS/tasks.c **** 
3243:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3244:../Dave/Generated/FREERTOS/tasks.c **** 		{
3245:../Dave/Generated/FREERTOS/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3246:../Dave/Generated/FREERTOS/tasks.c **** 			see if any other task has become available.  If we are using
3247:../Dave/Generated/FREERTOS/tasks.c **** 			preemption we don't need to do this as any task becoming available
3248:../Dave/Generated/FREERTOS/tasks.c **** 			will automatically get the processor anyway. */
3249:../Dave/Generated/FREERTOS/tasks.c **** 			taskYIELD();
3250:../Dave/Generated/FREERTOS/tasks.c **** 		}
3251:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3252:../Dave/Generated/FREERTOS/tasks.c **** 
3253:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3254:../Dave/Generated/FREERTOS/tasks.c **** 		{
3255:../Dave/Generated/FREERTOS/tasks.c **** 			/* When using preemption tasks of equal priority will be
3256:../Dave/Generated/FREERTOS/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3257:../Dave/Generated/FREERTOS/tasks.c **** 			to run then the idle task should yield before the end of the
3258:../Dave/Generated/FREERTOS/tasks.c **** 			timeslice.
3259:../Dave/Generated/FREERTOS/tasks.c **** 
3260:../Dave/Generated/FREERTOS/tasks.c **** 			A critical region is not required here as we are just reading from
3261:../Dave/Generated/FREERTOS/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3262:../Dave/Generated/FREERTOS/tasks.c **** 			the ready list at the idle priority contains more than one task
3263:../Dave/Generated/FREERTOS/tasks.c **** 			then a task other than the idle task is ready to execute. */
3264:../Dave/Generated/FREERTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 4926              	 .loc 1 3264 0
 4927 000c 064B     	 ldr r3,.L341
 4928 000e 1B68     	 ldr r3,[r3]
 4929 0010 012B     	 cmp r3,#1
 4930 0012 07D9     	 bls .L339
3265:../Dave/Generated/FREERTOS/tasks.c **** 			{
3266:../Dave/Generated/FREERTOS/tasks.c **** 				taskYIELD();
 4931              	 .loc 1 3266 0
 4932 0014 054B     	 ldr r3,.L341+4
 4933 0016 4FF08052 	 mov r2,#268435456
 4934 001a 1A60     	 str r2,[r3]
 4935              	
 4936 001c BFF34F8F 	 dsb
 4937              	
 4938              	
 4939 0020 BFF36F8F 	 isb
 4940              	
 4941              	 .thumb
 4942              	.L339:
3267:../Dave/Generated/FREERTOS/tasks.c **** 			}
3268:../Dave/Generated/FREERTOS/tasks.c **** 			else
3269:../Dave/Generated/FREERTOS/tasks.c **** 			{
3270:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3271:../Dave/Generated/FREERTOS/tasks.c **** 			}
3272:../Dave/Generated/FREERTOS/tasks.c **** 		}
3273:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3274:../Dave/Generated/FREERTOS/tasks.c **** 
3275:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3276:../Dave/Generated/FREERTOS/tasks.c **** 		{
3277:../Dave/Generated/FREERTOS/tasks.c **** 			extern void vApplicationIdleHook( void );
3278:../Dave/Generated/FREERTOS/tasks.c **** 
3279:../Dave/Generated/FREERTOS/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3280:../Dave/Generated/FREERTOS/tasks.c **** 			allows the application designer to add background functionality
3281:../Dave/Generated/FREERTOS/tasks.c **** 			without the overhead of a separate task.
3282:../Dave/Generated/FREERTOS/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3283:../Dave/Generated/FREERTOS/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3284:../Dave/Generated/FREERTOS/tasks.c **** 			vApplicationIdleHook();
3285:../Dave/Generated/FREERTOS/tasks.c **** 		}
3286:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3287:../Dave/Generated/FREERTOS/tasks.c **** 
3288:../Dave/Generated/FREERTOS/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3289:../Dave/Generated/FREERTOS/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3290:../Dave/Generated/FREERTOS/tasks.c **** 		user defined low power mode	implementations require
3291:../Dave/Generated/FREERTOS/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3292:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3293:../Dave/Generated/FREERTOS/tasks.c **** 		{
3294:../Dave/Generated/FREERTOS/tasks.c **** 		TickType_t xExpectedIdleTime;
3295:../Dave/Generated/FREERTOS/tasks.c **** 
3296:../Dave/Generated/FREERTOS/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3297:../Dave/Generated/FREERTOS/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3298:../Dave/Generated/FREERTOS/tasks.c **** 			test of the expected idle time is performed without the
3299:../Dave/Generated/FREERTOS/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3300:../Dave/Generated/FREERTOS/tasks.c **** 			valid. */
3301:../Dave/Generated/FREERTOS/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3302:../Dave/Generated/FREERTOS/tasks.c **** 
3303:../Dave/Generated/FREERTOS/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3304:../Dave/Generated/FREERTOS/tasks.c **** 			{
3305:../Dave/Generated/FREERTOS/tasks.c **** 				vTaskSuspendAll();
3306:../Dave/Generated/FREERTOS/tasks.c **** 				{
3307:../Dave/Generated/FREERTOS/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3308:../Dave/Generated/FREERTOS/tasks.c **** 					time can be sampled again, and this time its value can
3309:../Dave/Generated/FREERTOS/tasks.c **** 					be used. */
3310:../Dave/Generated/FREERTOS/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3311:../Dave/Generated/FREERTOS/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3312:../Dave/Generated/FREERTOS/tasks.c **** 
3313:../Dave/Generated/FREERTOS/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3314:../Dave/Generated/FREERTOS/tasks.c **** 					if the application does not want
3315:../Dave/Generated/FREERTOS/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3316:../Dave/Generated/FREERTOS/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3317:../Dave/Generated/FREERTOS/tasks.c **** 
3318:../Dave/Generated/FREERTOS/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3319:../Dave/Generated/FREERTOS/tasks.c **** 					{
3320:../Dave/Generated/FREERTOS/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3321:../Dave/Generated/FREERTOS/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3322:../Dave/Generated/FREERTOS/tasks.c **** 						traceLOW_POWER_IDLE_END();
3323:../Dave/Generated/FREERTOS/tasks.c **** 					}
3324:../Dave/Generated/FREERTOS/tasks.c **** 					else
3325:../Dave/Generated/FREERTOS/tasks.c **** 					{
3326:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3327:../Dave/Generated/FREERTOS/tasks.c **** 					}
3328:../Dave/Generated/FREERTOS/tasks.c **** 				}
3329:../Dave/Generated/FREERTOS/tasks.c **** 				( void ) xTaskResumeAll();
3330:../Dave/Generated/FREERTOS/tasks.c **** 			}
3331:../Dave/Generated/FREERTOS/tasks.c **** 			else
3332:../Dave/Generated/FREERTOS/tasks.c **** 			{
3333:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3334:../Dave/Generated/FREERTOS/tasks.c **** 			}
3335:../Dave/Generated/FREERTOS/tasks.c **** 		}
3336:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3337:../Dave/Generated/FREERTOS/tasks.c **** 	}
 4943              	 .loc 1 3337 0
 4944 0024 F0E7     	 b .L340
 4945              	.L342:
 4946 0026 00BF     	 .align 2
 4947              	.L341:
 4948 0028 00000000 	 .word pxReadyTasksLists
 4949 002c 04ED00E0 	 .word -536810236
 4950              	 .cfi_endproc
 4951              	.LFE177:
 4953              	 .section .text.vTaskSetThreadLocalStoragePointer,"ax",%progbits
 4954              	 .align 2
 4955              	 .global vTaskSetThreadLocalStoragePointer
 4956              	 .thumb
 4957              	 .thumb_func
 4959              	vTaskSetThreadLocalStoragePointer:
 4960              	.LFB178:
3338:../Dave/Generated/FREERTOS/tasks.c **** }
3339:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3340:../Dave/Generated/FREERTOS/tasks.c **** 
3341:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3342:../Dave/Generated/FREERTOS/tasks.c **** 
3343:../Dave/Generated/FREERTOS/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3344:../Dave/Generated/FREERTOS/tasks.c **** 	{
3345:../Dave/Generated/FREERTOS/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3346:../Dave/Generated/FREERTOS/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3347:../Dave/Generated/FREERTOS/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3348:../Dave/Generated/FREERTOS/tasks.c **** 
3349:../Dave/Generated/FREERTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3350:../Dave/Generated/FREERTOS/tasks.c **** 		{
3351:../Dave/Generated/FREERTOS/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3352:../Dave/Generated/FREERTOS/tasks.c **** 			eReturn = eAbortSleep;
3353:../Dave/Generated/FREERTOS/tasks.c **** 		}
3354:../Dave/Generated/FREERTOS/tasks.c **** 		else if( xYieldPending != pdFALSE )
3355:../Dave/Generated/FREERTOS/tasks.c **** 		{
3356:../Dave/Generated/FREERTOS/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3357:../Dave/Generated/FREERTOS/tasks.c **** 			eReturn = eAbortSleep;
3358:../Dave/Generated/FREERTOS/tasks.c **** 		}
3359:../Dave/Generated/FREERTOS/tasks.c **** 		else
3360:../Dave/Generated/FREERTOS/tasks.c **** 		{
3361:../Dave/Generated/FREERTOS/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3362:../Dave/Generated/FREERTOS/tasks.c **** 			have an infinite block time rather than actually being suspended)
3363:../Dave/Generated/FREERTOS/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3364:../Dave/Generated/FREERTOS/tasks.c **** 			interrupts. */
3365:../Dave/Generated/FREERTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3366:../Dave/Generated/FREERTOS/tasks.c **** 			{
3367:../Dave/Generated/FREERTOS/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3368:../Dave/Generated/FREERTOS/tasks.c **** 			}
3369:../Dave/Generated/FREERTOS/tasks.c **** 			else
3370:../Dave/Generated/FREERTOS/tasks.c **** 			{
3371:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3372:../Dave/Generated/FREERTOS/tasks.c **** 			}
3373:../Dave/Generated/FREERTOS/tasks.c **** 		}
3374:../Dave/Generated/FREERTOS/tasks.c **** 
3375:../Dave/Generated/FREERTOS/tasks.c **** 		return eReturn;
3376:../Dave/Generated/FREERTOS/tasks.c **** 	}
3377:../Dave/Generated/FREERTOS/tasks.c **** 
3378:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3379:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3380:../Dave/Generated/FREERTOS/tasks.c **** 
3381:../Dave/Generated/FREERTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3382:../Dave/Generated/FREERTOS/tasks.c **** 
3383:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3384:../Dave/Generated/FREERTOS/tasks.c **** 	{
 4961              	 .loc 1 3384 0
 4962              	 .cfi_startproc
 4963              	 
 4964              	 
 4965              	 
 4966 0000 80B4     	 push {r7}
 4967              	 .cfi_def_cfa_offset 4
 4968              	 .cfi_offset 7,-4
 4969 0002 87B0     	 sub sp,sp,#28
 4970              	 .cfi_def_cfa_offset 32
 4971 0004 00AF     	 add r7,sp,#0
 4972              	 .cfi_def_cfa_register 7
 4973 0006 F860     	 str r0,[r7,#12]
 4974 0008 B960     	 str r1,[r7,#8]
 4975 000a 7A60     	 str r2,[r7,#4]
3385:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
3386:../Dave/Generated/FREERTOS/tasks.c **** 
3387:../Dave/Generated/FREERTOS/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 4976              	 .loc 1 3387 0
 4977 000c BB68     	 ldr r3,[r7,#8]
 4978 000e 042B     	 cmp r3,#4
 4979 0010 0EDC     	 bgt .L343
3388:../Dave/Generated/FREERTOS/tasks.c **** 		{
3389:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
 4980              	 .loc 1 3389 0
 4981 0012 FB68     	 ldr r3,[r7,#12]
 4982 0014 002B     	 cmp r3,#0
 4983 0016 02D1     	 bne .L345
 4984              	 .loc 1 3389 0 is_stmt 0 discriminator 1
 4985 0018 084B     	 ldr r3,.L347
 4986 001a 1B68     	 ldr r3,[r3]
 4987 001c 00E0     	 b .L346
 4988              	.L345:
 4989              	 .loc 1 3389 0 discriminator 2
 4990 001e FB68     	 ldr r3,[r7,#12]
 4991              	.L346:
 4992              	 .loc 1 3389 0 discriminator 4
 4993 0020 7B61     	 str r3,[r7,#20]
3390:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 4994              	 .loc 1 3390 0 is_stmt 1 discriminator 4
 4995 0022 7A69     	 ldr r2,[r7,#20]
 4996 0024 BB68     	 ldr r3,[r7,#8]
 4997 0026 1433     	 adds r3,r3,#20
 4998 0028 9B00     	 lsls r3,r3,#2
 4999 002a 1344     	 add r3,r3,r2
 5000 002c 7A68     	 ldr r2,[r7,#4]
 5001 002e 5A60     	 str r2,[r3,#4]
 5002              	.L343:
3391:../Dave/Generated/FREERTOS/tasks.c **** 		}
3392:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5003              	 .loc 1 3392 0
 5004 0030 1C37     	 adds r7,r7,#28
 5005              	 .cfi_def_cfa_offset 4
 5006 0032 BD46     	 mov sp,r7
 5007              	 .cfi_def_cfa_register 13
 5008              	 
 5009 0034 5DF8047B 	 ldr r7,[sp],#4
 5010              	 .cfi_restore 7
 5011              	 .cfi_def_cfa_offset 0
 5012 0038 7047     	 bx lr
 5013              	.L348:
 5014 003a 00BF     	 .align 2
 5015              	.L347:
 5016 003c 00000000 	 .word pxCurrentTCB
 5017              	 .cfi_endproc
 5018              	.LFE178:
 5020              	 .section .text.pvTaskGetThreadLocalStoragePointer,"ax",%progbits
 5021              	 .align 2
 5022              	 .global pvTaskGetThreadLocalStoragePointer
 5023              	 .thumb
 5024              	 .thumb_func
 5026              	pvTaskGetThreadLocalStoragePointer:
 5027              	.LFB179:
3393:../Dave/Generated/FREERTOS/tasks.c **** 
3394:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3395:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3396:../Dave/Generated/FREERTOS/tasks.c **** 
3397:../Dave/Generated/FREERTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3398:../Dave/Generated/FREERTOS/tasks.c **** 
3399:../Dave/Generated/FREERTOS/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3400:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5028              	 .loc 1 3400 0
 5029              	 .cfi_startproc
 5030              	 
 5031              	 
 5032              	 
 5033 0000 80B4     	 push {r7}
 5034              	 .cfi_def_cfa_offset 4
 5035              	 .cfi_offset 7,-4
 5036 0002 85B0     	 sub sp,sp,#20
 5037              	 .cfi_def_cfa_offset 24
 5038 0004 00AF     	 add r7,sp,#0
 5039              	 .cfi_def_cfa_register 7
 5040 0006 7860     	 str r0,[r7,#4]
 5041 0008 3960     	 str r1,[r7]
3401:../Dave/Generated/FREERTOS/tasks.c **** 	void *pvReturn = NULL;
 5042              	 .loc 1 3401 0
 5043 000a 0023     	 movs r3,#0
 5044 000c FB60     	 str r3,[r7,#12]
3402:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
3403:../Dave/Generated/FREERTOS/tasks.c **** 
3404:../Dave/Generated/FREERTOS/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 5045              	 .loc 1 3404 0
 5046 000e 3B68     	 ldr r3,[r7]
 5047 0010 042B     	 cmp r3,#4
 5048 0012 0FDC     	 bgt .L350
3405:../Dave/Generated/FREERTOS/tasks.c **** 		{
3406:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 5049              	 .loc 1 3406 0
 5050 0014 7B68     	 ldr r3,[r7,#4]
 5051 0016 002B     	 cmp r3,#0
 5052 0018 02D1     	 bne .L351
 5053              	 .loc 1 3406 0 is_stmt 0 discriminator 1
 5054 001a 0B4B     	 ldr r3,.L355
 5055 001c 1B68     	 ldr r3,[r3]
 5056 001e 00E0     	 b .L352
 5057              	.L351:
 5058              	 .loc 1 3406 0 discriminator 2
 5059 0020 7B68     	 ldr r3,[r7,#4]
 5060              	.L352:
 5061              	 .loc 1 3406 0 discriminator 4
 5062 0022 BB60     	 str r3,[r7,#8]
3407:../Dave/Generated/FREERTOS/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 5063              	 .loc 1 3407 0 is_stmt 1 discriminator 4
 5064 0024 BA68     	 ldr r2,[r7,#8]
 5065 0026 3B68     	 ldr r3,[r7]
 5066 0028 1433     	 adds r3,r3,#20
 5067 002a 9B00     	 lsls r3,r3,#2
 5068 002c 1344     	 add r3,r3,r2
 5069 002e 5B68     	 ldr r3,[r3,#4]
 5070 0030 FB60     	 str r3,[r7,#12]
 5071 0032 01E0     	 b .L353
 5072              	.L350:
3408:../Dave/Generated/FREERTOS/tasks.c **** 		}
3409:../Dave/Generated/FREERTOS/tasks.c **** 		else
3410:../Dave/Generated/FREERTOS/tasks.c **** 		{
3411:../Dave/Generated/FREERTOS/tasks.c **** 			pvReturn = NULL;
 5073              	 .loc 1 3411 0
 5074 0034 0023     	 movs r3,#0
 5075 0036 FB60     	 str r3,[r7,#12]
 5076              	.L353:
3412:../Dave/Generated/FREERTOS/tasks.c **** 		}
3413:../Dave/Generated/FREERTOS/tasks.c **** 
3414:../Dave/Generated/FREERTOS/tasks.c **** 		return pvReturn;
 5077              	 .loc 1 3414 0
 5078 0038 FB68     	 ldr r3,[r7,#12]
3415:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5079              	 .loc 1 3415 0
 5080 003a 1846     	 mov r0,r3
 5081 003c 1437     	 adds r7,r7,#20
 5082              	 .cfi_def_cfa_offset 4
 5083 003e BD46     	 mov sp,r7
 5084              	 .cfi_def_cfa_register 13
 5085              	 
 5086 0040 5DF8047B 	 ldr r7,[sp],#4
 5087              	 .cfi_restore 7
 5088              	 .cfi_def_cfa_offset 0
 5089 0044 7047     	 bx lr
 5090              	.L356:
 5091 0046 00BF     	 .align 2
 5092              	.L355:
 5093 0048 00000000 	 .word pxCurrentTCB
 5094              	 .cfi_endproc
 5095              	.LFE179:
 5097              	 .section .text.prvInitialiseTaskLists,"ax",%progbits
 5098              	 .align 2
 5099              	 .thumb
 5100              	 .thumb_func
 5102              	prvInitialiseTaskLists:
 5103              	.LFB180:
3416:../Dave/Generated/FREERTOS/tasks.c **** 
3417:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3418:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3419:../Dave/Generated/FREERTOS/tasks.c **** 
3420:../Dave/Generated/FREERTOS/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3421:../Dave/Generated/FREERTOS/tasks.c **** 
3422:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3423:../Dave/Generated/FREERTOS/tasks.c **** 	{
3424:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
3425:../Dave/Generated/FREERTOS/tasks.c **** 
3426:../Dave/Generated/FREERTOS/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3427:../Dave/Generated/FREERTOS/tasks.c **** 		the calling task. */
3428:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3429:../Dave/Generated/FREERTOS/tasks.c **** 
3430:../Dave/Generated/FREERTOS/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3431:../Dave/Generated/FREERTOS/tasks.c **** 	}
3432:../Dave/Generated/FREERTOS/tasks.c **** 
3433:../Dave/Generated/FREERTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3434:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3435:../Dave/Generated/FREERTOS/tasks.c **** 
3436:../Dave/Generated/FREERTOS/tasks.c **** static void prvInitialiseTaskLists( void )
3437:../Dave/Generated/FREERTOS/tasks.c **** {
 5104              	 .loc 1 3437 0
 5105              	 .cfi_startproc
 5106              	 
 5107              	 
 5108 0000 80B5     	 push {r7,lr}
 5109              	 .cfi_def_cfa_offset 8
 5110              	 .cfi_offset 7,-8
 5111              	 .cfi_offset 14,-4
 5112 0002 82B0     	 sub sp,sp,#8
 5113              	 .cfi_def_cfa_offset 16
 5114 0004 00AF     	 add r7,sp,#0
 5115              	 .cfi_def_cfa_register 7
3438:../Dave/Generated/FREERTOS/tasks.c **** UBaseType_t uxPriority;
3439:../Dave/Generated/FREERTOS/tasks.c **** 
3440:../Dave/Generated/FREERTOS/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 5116              	 .loc 1 3440 0
 5117 0006 0023     	 movs r3,#0
 5118 0008 7B60     	 str r3,[r7,#4]
 5119 000a 0CE0     	 b .L358
 5120              	.L359:
3441:../Dave/Generated/FREERTOS/tasks.c **** 	{
3442:../Dave/Generated/FREERTOS/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 5121              	 .loc 1 3442 0 discriminator 3
 5122 000c 7A68     	 ldr r2,[r7,#4]
 5123 000e 1346     	 mov r3,r2
 5124 0010 9B00     	 lsls r3,r3,#2
 5125 0012 1344     	 add r3,r3,r2
 5126 0014 9B00     	 lsls r3,r3,#2
 5127 0016 114A     	 ldr r2,.L360
 5128 0018 1344     	 add r3,r3,r2
 5129 001a 1846     	 mov r0,r3
 5130 001c FFF7FEFF 	 bl vListInitialise
3440:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5131              	 .loc 1 3440 0 discriminator 3
 5132 0020 7B68     	 ldr r3,[r7,#4]
 5133 0022 0133     	 adds r3,r3,#1
 5134 0024 7B60     	 str r3,[r7,#4]
 5135              	.L358:
3440:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5136              	 .loc 1 3440 0 is_stmt 0 discriminator 1
 5137 0026 7B68     	 ldr r3,[r7,#4]
 5138 0028 042B     	 cmp r3,#4
 5139 002a EFD9     	 bls .L359
3443:../Dave/Generated/FREERTOS/tasks.c **** 	}
3444:../Dave/Generated/FREERTOS/tasks.c **** 
3445:../Dave/Generated/FREERTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 5140              	 .loc 1 3445 0 is_stmt 1
 5141 002c 0C48     	 ldr r0,.L360+4
 5142 002e FFF7FEFF 	 bl vListInitialise
3446:../Dave/Generated/FREERTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 5143              	 .loc 1 3446 0
 5144 0032 0C48     	 ldr r0,.L360+8
 5145 0034 FFF7FEFF 	 bl vListInitialise
3447:../Dave/Generated/FREERTOS/tasks.c **** 	vListInitialise( &xPendingReadyList );
 5146              	 .loc 1 3447 0
 5147 0038 0B48     	 ldr r0,.L360+12
 5148 003a FFF7FEFF 	 bl vListInitialise
3448:../Dave/Generated/FREERTOS/tasks.c **** 
3449:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3450:../Dave/Generated/FREERTOS/tasks.c **** 	{
3451:../Dave/Generated/FREERTOS/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 5149              	 .loc 1 3451 0
 5150 003e 0B48     	 ldr r0,.L360+16
 5151 0040 FFF7FEFF 	 bl vListInitialise
3452:../Dave/Generated/FREERTOS/tasks.c **** 	}
3453:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3454:../Dave/Generated/FREERTOS/tasks.c **** 
3455:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3456:../Dave/Generated/FREERTOS/tasks.c **** 	{
3457:../Dave/Generated/FREERTOS/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 5152              	 .loc 1 3457 0
 5153 0044 0A48     	 ldr r0,.L360+20
 5154 0046 FFF7FEFF 	 bl vListInitialise
3458:../Dave/Generated/FREERTOS/tasks.c **** 	}
3459:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3460:../Dave/Generated/FREERTOS/tasks.c **** 
3461:../Dave/Generated/FREERTOS/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3462:../Dave/Generated/FREERTOS/tasks.c **** 	using list2. */
3463:../Dave/Generated/FREERTOS/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 5155              	 .loc 1 3463 0
 5156 004a 0A4B     	 ldr r3,.L360+24
 5157 004c 044A     	 ldr r2,.L360+4
 5158 004e 1A60     	 str r2,[r3]
3464:../Dave/Generated/FREERTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 5159              	 .loc 1 3464 0
 5160 0050 094B     	 ldr r3,.L360+28
 5161 0052 044A     	 ldr r2,.L360+8
 5162 0054 1A60     	 str r2,[r3]
3465:../Dave/Generated/FREERTOS/tasks.c **** }
 5163              	 .loc 1 3465 0
 5164 0056 0837     	 adds r7,r7,#8
 5165              	 .cfi_def_cfa_offset 8
 5166 0058 BD46     	 mov sp,r7
 5167              	 .cfi_def_cfa_register 13
 5168              	 
 5169 005a 80BD     	 pop {r7,pc}
 5170              	.L361:
 5171              	 .align 2
 5172              	.L360:
 5173 005c 00000000 	 .word pxReadyTasksLists
 5174 0060 00000000 	 .word xDelayedTaskList1
 5175 0064 00000000 	 .word xDelayedTaskList2
 5176 0068 00000000 	 .word xPendingReadyList
 5177 006c 00000000 	 .word xTasksWaitingTermination
 5178 0070 00000000 	 .word xSuspendedTaskList
 5179 0074 00000000 	 .word pxDelayedTaskList
 5180 0078 00000000 	 .word pxOverflowDelayedTaskList
 5181              	 .cfi_endproc
 5182              	.LFE180:
 5184              	 .section .text.prvCheckTasksWaitingTermination,"ax",%progbits
 5185              	 .align 2
 5186              	 .thumb
 5187              	 .thumb_func
 5189              	prvCheckTasksWaitingTermination:
 5190              	.LFB181:
3466:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3467:../Dave/Generated/FREERTOS/tasks.c **** 
3468:../Dave/Generated/FREERTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3469:../Dave/Generated/FREERTOS/tasks.c **** {
 5191              	 .loc 1 3469 0
 5192              	 .cfi_startproc
 5193              	 
 5194              	 
 5195 0000 80B5     	 push {r7,lr}
 5196              	 .cfi_def_cfa_offset 8
 5197              	 .cfi_offset 7,-8
 5198              	 .cfi_offset 14,-4
 5199 0002 82B0     	 sub sp,sp,#8
 5200              	 .cfi_def_cfa_offset 16
 5201 0004 00AF     	 add r7,sp,#0
 5202              	 .cfi_def_cfa_register 7
 5203              	.LBB195:
3470:../Dave/Generated/FREERTOS/tasks.c **** 
3471:../Dave/Generated/FREERTOS/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3472:../Dave/Generated/FREERTOS/tasks.c **** 
3473:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3474:../Dave/Generated/FREERTOS/tasks.c **** 	{
3475:../Dave/Generated/FREERTOS/tasks.c **** 		TCB_t *pxTCB;
3476:../Dave/Generated/FREERTOS/tasks.c **** 
3477:../Dave/Generated/FREERTOS/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
3478:../Dave/Generated/FREERTOS/tasks.c **** 		being called too often in the idle task. */
3479:../Dave/Generated/FREERTOS/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 5204              	 .loc 1 3479 0
 5205 0006 19E0     	 b .L363
 5206              	.L364:
3480:../Dave/Generated/FREERTOS/tasks.c **** 		{
3481:../Dave/Generated/FREERTOS/tasks.c **** 			taskENTER_CRITICAL();
 5207              	 .loc 1 3481 0
 5208 0008 FFF7FEFF 	 bl vPortEnterCritical
3482:../Dave/Generated/FREERTOS/tasks.c **** 			{
3483:../Dave/Generated/FREERTOS/tasks.c **** 				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 5209              	 .loc 1 3483 0
 5210 000c 0F4B     	 ldr r3,.L365
 5211 000e DB68     	 ldr r3,[r3,#12]
 5212 0010 DB68     	 ldr r3,[r3,#12]
 5213 0012 7B60     	 str r3,[r7,#4]
3484:../Dave/Generated/FREERTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5214              	 .loc 1 3484 0
 5215 0014 7B68     	 ldr r3,[r7,#4]
 5216 0016 0433     	 adds r3,r3,#4
 5217 0018 1846     	 mov r0,r3
 5218 001a FFF7FEFF 	 bl uxListRemove
3485:../Dave/Generated/FREERTOS/tasks.c **** 				--uxCurrentNumberOfTasks;
 5219              	 .loc 1 3485 0
 5220 001e 0C4B     	 ldr r3,.L365+4
 5221 0020 1B68     	 ldr r3,[r3]
 5222 0022 013B     	 subs r3,r3,#1
 5223 0024 0A4A     	 ldr r2,.L365+4
 5224 0026 1360     	 str r3,[r2]
3486:../Dave/Generated/FREERTOS/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 5225              	 .loc 1 3486 0
 5226 0028 0A4B     	 ldr r3,.L365+8
 5227 002a 1B68     	 ldr r3,[r3]
 5228 002c 013B     	 subs r3,r3,#1
 5229 002e 094A     	 ldr r2,.L365+8
 5230 0030 1360     	 str r3,[r2]
3487:../Dave/Generated/FREERTOS/tasks.c **** 			}
3488:../Dave/Generated/FREERTOS/tasks.c **** 			taskEXIT_CRITICAL();
 5231              	 .loc 1 3488 0
 5232 0032 FFF7FEFF 	 bl vPortExitCritical
3489:../Dave/Generated/FREERTOS/tasks.c **** 
3490:../Dave/Generated/FREERTOS/tasks.c **** 			prvDeleteTCB( pxTCB );
 5233              	 .loc 1 3490 0
 5234 0036 7868     	 ldr r0,[r7,#4]
 5235 0038 FFF7FEFF 	 bl prvDeleteTCB
 5236              	.L363:
3479:../Dave/Generated/FREERTOS/tasks.c **** 		{
 5237              	 .loc 1 3479 0
 5238 003c 054B     	 ldr r3,.L365+8
 5239 003e 1B68     	 ldr r3,[r3]
 5240 0040 002B     	 cmp r3,#0
 5241 0042 E1D1     	 bne .L364
 5242              	.LBE195:
3491:../Dave/Generated/FREERTOS/tasks.c **** 		}
3492:../Dave/Generated/FREERTOS/tasks.c **** 	}
3493:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3494:../Dave/Generated/FREERTOS/tasks.c **** }
 5243              	 .loc 1 3494 0
 5244 0044 0837     	 adds r7,r7,#8
 5245              	 .cfi_def_cfa_offset 8
 5246 0046 BD46     	 mov sp,r7
 5247              	 .cfi_def_cfa_register 13
 5248              	 
 5249 0048 80BD     	 pop {r7,pc}
 5250              	.L366:
 5251 004a 00BF     	 .align 2
 5252              	.L365:
 5253 004c 00000000 	 .word xTasksWaitingTermination
 5254 0050 00000000 	 .word uxCurrentNumberOfTasks
 5255 0054 00000000 	 .word uxDeletedTasksWaitingCleanUp
 5256              	 .cfi_endproc
 5257              	.LFE181:
 5259              	 .section .text.vTaskGetInfo,"ax",%progbits
 5260              	 .align 2
 5261              	 .global vTaskGetInfo
 5262              	 .thumb
 5263              	 .thumb_func
 5265              	vTaskGetInfo:
 5266              	.LFB182:
3495:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3496:../Dave/Generated/FREERTOS/tasks.c **** 
3497:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3498:../Dave/Generated/FREERTOS/tasks.c **** 
3499:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3500:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5267              	 .loc 1 3500 0
 5268              	 .cfi_startproc
 5269              	 
 5270              	 
 5271 0000 80B5     	 push {r7,lr}
 5272              	 .cfi_def_cfa_offset 8
 5273              	 .cfi_offset 7,-8
 5274              	 .cfi_offset 14,-4
 5275 0002 86B0     	 sub sp,sp,#24
 5276              	 .cfi_def_cfa_offset 32
 5277 0004 00AF     	 add r7,sp,#0
 5278              	 .cfi_def_cfa_register 7
 5279 0006 F860     	 str r0,[r7,#12]
 5280 0008 B960     	 str r1,[r7,#8]
 5281 000a 7A60     	 str r2,[r7,#4]
 5282 000c FB70     	 strb r3,[r7,#3]
3501:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
3502:../Dave/Generated/FREERTOS/tasks.c **** 
3503:../Dave/Generated/FREERTOS/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3504:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5283              	 .loc 1 3504 0
 5284 000e FB68     	 ldr r3,[r7,#12]
 5285 0010 002B     	 cmp r3,#0
 5286 0012 02D1     	 bne .L368
 5287              	 .loc 1 3504 0 is_stmt 0 discriminator 1
 5288 0014 2B4B     	 ldr r3,.L377
 5289 0016 1B68     	 ldr r3,[r3]
 5290 0018 00E0     	 b .L369
 5291              	.L368:
 5292              	 .loc 1 3504 0 discriminator 2
 5293 001a FB68     	 ldr r3,[r7,#12]
 5294              	.L369:
 5295              	 .loc 1 3504 0 discriminator 4
 5296 001c 7B61     	 str r3,[r7,#20]
3505:../Dave/Generated/FREERTOS/tasks.c **** 
3506:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 5297              	 .loc 1 3506 0 is_stmt 1 discriminator 4
 5298 001e BB68     	 ldr r3,[r7,#8]
 5299 0020 7A69     	 ldr r2,[r7,#20]
 5300 0022 1A60     	 str r2,[r3]
3507:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 5301              	 .loc 1 3507 0 discriminator 4
 5302 0024 7B69     	 ldr r3,[r7,#20]
 5303 0026 03F13402 	 add r2,r3,#52
 5304 002a BB68     	 ldr r3,[r7,#8]
 5305 002c 5A60     	 str r2,[r3,#4]
3508:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5306              	 .loc 1 3508 0 discriminator 4
 5307 002e 7B69     	 ldr r3,[r7,#20]
 5308 0030 DA6A     	 ldr r2,[r3,#44]
 5309 0032 BB68     	 ldr r3,[r7,#8]
 5310 0034 1A61     	 str r2,[r3,#16]
3509:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5311              	 .loc 1 3509 0 discriminator 4
 5312 0036 7B69     	 ldr r3,[r7,#20]
 5313 0038 1A6B     	 ldr r2,[r3,#48]
 5314 003a BB68     	 ldr r3,[r7,#8]
 5315 003c DA61     	 str r2,[r3,#28]
3510:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5316              	 .loc 1 3510 0 discriminator 4
 5317 003e 7B69     	 ldr r3,[r7,#20]
 5318 0040 5A6C     	 ldr r2,[r3,#68]
 5319 0042 BB68     	 ldr r3,[r7,#8]
 5320 0044 9A60     	 str r2,[r3,#8]
3511:../Dave/Generated/FREERTOS/tasks.c **** 
3512:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3513:../Dave/Generated/FREERTOS/tasks.c **** 		{
3514:../Dave/Generated/FREERTOS/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 5321              	 .loc 1 3514 0 discriminator 4
 5322 0046 7B69     	 ldr r3,[r7,#20]
 5323 0048 DA6C     	 ldr r2,[r3,#76]
 5324 004a BB68     	 ldr r3,[r7,#8]
 5325 004c 5A61     	 str r2,[r3,#20]
3515:../Dave/Generated/FREERTOS/tasks.c **** 		}
3516:../Dave/Generated/FREERTOS/tasks.c **** 		#else
3517:../Dave/Generated/FREERTOS/tasks.c **** 		{
3518:../Dave/Generated/FREERTOS/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3519:../Dave/Generated/FREERTOS/tasks.c **** 		}
3520:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
3521:../Dave/Generated/FREERTOS/tasks.c **** 
3522:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3523:../Dave/Generated/FREERTOS/tasks.c **** 		{
3524:../Dave/Generated/FREERTOS/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3525:../Dave/Generated/FREERTOS/tasks.c **** 		}
3526:../Dave/Generated/FREERTOS/tasks.c **** 		#else
3527:../Dave/Generated/FREERTOS/tasks.c **** 		{
3528:../Dave/Generated/FREERTOS/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
 5326              	 .loc 1 3528 0 discriminator 4
 5327 004e BB68     	 ldr r3,[r7,#8]
 5328 0050 0022     	 movs r2,#0
 5329 0052 9A61     	 str r2,[r3,#24]
3529:../Dave/Generated/FREERTOS/tasks.c **** 		}
3530:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
3531:../Dave/Generated/FREERTOS/tasks.c **** 
3532:../Dave/Generated/FREERTOS/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3533:../Dave/Generated/FREERTOS/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3534:../Dave/Generated/FREERTOS/tasks.c **** 		state is just set to whatever is passed in. */
3535:../Dave/Generated/FREERTOS/tasks.c **** 		if( eState != eInvalid )
 5330              	 .loc 1 3535 0 discriminator 4
 5331 0054 FB78     	 ldrb r3,[r7,#3]
 5332 0056 052B     	 cmp r3,#5
 5333 0058 1AD0     	 beq .L370
3536:../Dave/Generated/FREERTOS/tasks.c **** 		{
3537:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 5334              	 .loc 1 3537 0
 5335 005a 1A4B     	 ldr r3,.L377
 5336 005c 1B68     	 ldr r3,[r3]
 5337 005e 7A69     	 ldr r2,[r7,#20]
 5338 0060 9A42     	 cmp r2,r3
 5339 0062 03D1     	 bne .L371
3538:../Dave/Generated/FREERTOS/tasks.c **** 			{
3539:../Dave/Generated/FREERTOS/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
 5340              	 .loc 1 3539 0
 5341 0064 BB68     	 ldr r3,[r7,#8]
 5342 0066 0022     	 movs r2,#0
 5343 0068 1A73     	 strb r2,[r3,#12]
 5344 006a 18E0     	 b .L374
 5345              	.L371:
3540:../Dave/Generated/FREERTOS/tasks.c **** 			}
3541:../Dave/Generated/FREERTOS/tasks.c **** 			else
3542:../Dave/Generated/FREERTOS/tasks.c **** 			{
3543:../Dave/Generated/FREERTOS/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
 5346              	 .loc 1 3543 0
 5347 006c BB68     	 ldr r3,[r7,#8]
 5348 006e FA78     	 ldrb r2,[r7,#3]
 5349 0070 1A73     	 strb r2,[r3,#12]
3544:../Dave/Generated/FREERTOS/tasks.c **** 
3545:../Dave/Generated/FREERTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3546:../Dave/Generated/FREERTOS/tasks.c **** 				{
3547:../Dave/Generated/FREERTOS/tasks.c **** 					/* If the task is in the suspended list then there is a
3548:../Dave/Generated/FREERTOS/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3549:../Dave/Generated/FREERTOS/tasks.c **** 					it should be reported as being in the Blocked state. */
3550:../Dave/Generated/FREERTOS/tasks.c **** 					if( eState == eSuspended )
 5350              	 .loc 1 3550 0
 5351 0072 FB78     	 ldrb r3,[r7,#3]
 5352 0074 032B     	 cmp r3,#3
 5353 0076 12D1     	 bne .L374
3551:../Dave/Generated/FREERTOS/tasks.c **** 					{
3552:../Dave/Generated/FREERTOS/tasks.c **** 						vTaskSuspendAll();
 5354              	 .loc 1 3552 0
 5355 0078 FFF7FEFF 	 bl vTaskSuspendAll
3553:../Dave/Generated/FREERTOS/tasks.c **** 						{
3554:../Dave/Generated/FREERTOS/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 5356              	 .loc 1 3554 0
 5357 007c 7B69     	 ldr r3,[r7,#20]
 5358 007e 9B6A     	 ldr r3,[r3,#40]
 5359 0080 002B     	 cmp r3,#0
 5360 0082 02D0     	 beq .L373
3555:../Dave/Generated/FREERTOS/tasks.c **** 							{
3556:../Dave/Generated/FREERTOS/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
 5361              	 .loc 1 3556 0
 5362 0084 BB68     	 ldr r3,[r7,#8]
 5363 0086 0222     	 movs r2,#2
 5364 0088 1A73     	 strb r2,[r3,#12]
 5365              	.L373:
3557:../Dave/Generated/FREERTOS/tasks.c **** 							}
3558:../Dave/Generated/FREERTOS/tasks.c **** 						}
3559:../Dave/Generated/FREERTOS/tasks.c **** 						( void ) xTaskResumeAll();
 5366              	 .loc 1 3559 0
 5367 008a FFF7FEFF 	 bl xTaskResumeAll
 5368 008e 06E0     	 b .L374
 5369              	.L370:
3560:../Dave/Generated/FREERTOS/tasks.c **** 					}
3561:../Dave/Generated/FREERTOS/tasks.c **** 				}
3562:../Dave/Generated/FREERTOS/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3563:../Dave/Generated/FREERTOS/tasks.c **** 			}
3564:../Dave/Generated/FREERTOS/tasks.c **** 		}
3565:../Dave/Generated/FREERTOS/tasks.c **** 		else
3566:../Dave/Generated/FREERTOS/tasks.c **** 		{
3567:../Dave/Generated/FREERTOS/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 5370              	 .loc 1 3567 0
 5371 0090 7869     	 ldr r0,[r7,#20]
 5372 0092 FFF7FEFF 	 bl eTaskGetState
 5373 0096 0346     	 mov r3,r0
 5374 0098 1A46     	 mov r2,r3
 5375 009a BB68     	 ldr r3,[r7,#8]
 5376 009c 1A73     	 strb r2,[r3,#12]
 5377              	.L374:
3568:../Dave/Generated/FREERTOS/tasks.c **** 		}
3569:../Dave/Generated/FREERTOS/tasks.c **** 
3570:../Dave/Generated/FREERTOS/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3571:../Dave/Generated/FREERTOS/tasks.c **** 		parameter is provided to allow it to be skipped. */
3572:../Dave/Generated/FREERTOS/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
 5378              	 .loc 1 3572 0
 5379 009e 7B68     	 ldr r3,[r7,#4]
 5380 00a0 002B     	 cmp r3,#0
 5381 00a2 09D0     	 beq .L375
3573:../Dave/Generated/FREERTOS/tasks.c **** 		{
3574:../Dave/Generated/FREERTOS/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3575:../Dave/Generated/FREERTOS/tasks.c **** 			{
3576:../Dave/Generated/FREERTOS/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3577:../Dave/Generated/FREERTOS/tasks.c **** 			}
3578:../Dave/Generated/FREERTOS/tasks.c **** 			#else
3579:../Dave/Generated/FREERTOS/tasks.c **** 			{
3580:../Dave/Generated/FREERTOS/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
 5382              	 .loc 1 3580 0
 5383 00a4 7B69     	 ldr r3,[r7,#20]
 5384 00a6 1B6B     	 ldr r3,[r3,#48]
 5385 00a8 1846     	 mov r0,r3
 5386 00aa FFF7FEFF 	 bl prvTaskCheckFreeStackSpace
 5387 00ae 0346     	 mov r3,r0
 5388 00b0 1A46     	 mov r2,r3
 5389 00b2 BB68     	 ldr r3,[r7,#8]
 5390 00b4 1A84     	 strh r2,[r3,#32]
 5391 00b6 02E0     	 b .L367
 5392              	.L375:
3581:../Dave/Generated/FREERTOS/tasks.c **** 			}
3582:../Dave/Generated/FREERTOS/tasks.c **** 			#endif
3583:../Dave/Generated/FREERTOS/tasks.c **** 		}
3584:../Dave/Generated/FREERTOS/tasks.c **** 		else
3585:../Dave/Generated/FREERTOS/tasks.c **** 		{
3586:../Dave/Generated/FREERTOS/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
 5393              	 .loc 1 3586 0
 5394 00b8 BB68     	 ldr r3,[r7,#8]
 5395 00ba 0022     	 movs r2,#0
 5396 00bc 1A84     	 strh r2,[r3,#32]
 5397              	.L367:
3587:../Dave/Generated/FREERTOS/tasks.c **** 		}
3588:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5398              	 .loc 1 3588 0
 5399 00be 1837     	 adds r7,r7,#24
 5400              	 .cfi_def_cfa_offset 8
 5401 00c0 BD46     	 mov sp,r7
 5402              	 .cfi_def_cfa_register 13
 5403              	 
 5404 00c2 80BD     	 pop {r7,pc}
 5405              	.L378:
 5406              	 .align 2
 5407              	.L377:
 5408 00c4 00000000 	 .word pxCurrentTCB
 5409              	 .cfi_endproc
 5410              	.LFE182:
 5412              	 .section .text.prvListTasksWithinSingleList,"ax",%progbits
 5413              	 .align 2
 5414              	 .thumb
 5415              	 .thumb_func
 5417              	prvListTasksWithinSingleList:
 5418              	.LFB183:
3589:../Dave/Generated/FREERTOS/tasks.c **** 
3590:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3591:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3592:../Dave/Generated/FREERTOS/tasks.c **** 
3593:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3594:../Dave/Generated/FREERTOS/tasks.c **** 
3595:../Dave/Generated/FREERTOS/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3596:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5419              	 .loc 1 3596 0
 5420              	 .cfi_startproc
 5421              	 
 5422              	 
 5423 0000 80B5     	 push {r7,lr}
 5424              	 .cfi_def_cfa_offset 8
 5425              	 .cfi_offset 7,-8
 5426              	 .cfi_offset 14,-4
 5427 0002 8AB0     	 sub sp,sp,#40
 5428              	 .cfi_def_cfa_offset 48
 5429 0004 00AF     	 add r7,sp,#0
 5430              	 .cfi_def_cfa_register 7
 5431 0006 F860     	 str r0,[r7,#12]
 5432 0008 B960     	 str r1,[r7,#8]
 5433 000a 1346     	 mov r3,r2
 5434 000c FB71     	 strb r3,[r7,#7]
3597:../Dave/Generated/FREERTOS/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3598:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTask = 0;
 5435              	 .loc 1 3598 0
 5436 000e 0023     	 movs r3,#0
 5437 0010 7B62     	 str r3,[r7,#36]
3599:../Dave/Generated/FREERTOS/tasks.c **** 
3600:../Dave/Generated/FREERTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 5438              	 .loc 1 3600 0
 5439 0012 BB68     	 ldr r3,[r7,#8]
 5440 0014 1B68     	 ldr r3,[r3]
 5441 0016 002B     	 cmp r3,#0
 5442 0018 40D0     	 beq .L380
 5443              	.LBB196:
3601:../Dave/Generated/FREERTOS/tasks.c **** 		{
3602:../Dave/Generated/FREERTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 5444              	 .loc 1 3602 0
 5445 001a BB68     	 ldr r3,[r7,#8]
 5446 001c 3B62     	 str r3,[r7,#32]
 5447 001e 3B6A     	 ldr r3,[r7,#32]
 5448 0020 5B68     	 ldr r3,[r3,#4]
 5449 0022 5A68     	 ldr r2,[r3,#4]
 5450 0024 3B6A     	 ldr r3,[r7,#32]
 5451 0026 5A60     	 str r2,[r3,#4]
 5452 0028 3B6A     	 ldr r3,[r7,#32]
 5453 002a 5A68     	 ldr r2,[r3,#4]
 5454 002c 3B6A     	 ldr r3,[r7,#32]
 5455 002e 0833     	 adds r3,r3,#8
 5456 0030 9A42     	 cmp r2,r3
 5457 0032 04D1     	 bne .L381
 5458              	 .loc 1 3602 0 is_stmt 0 discriminator 1
 5459 0034 3B6A     	 ldr r3,[r7,#32]
 5460 0036 5B68     	 ldr r3,[r3,#4]
 5461 0038 5A68     	 ldr r2,[r3,#4]
 5462 003a 3B6A     	 ldr r3,[r7,#32]
 5463 003c 5A60     	 str r2,[r3,#4]
 5464              	.L381:
 5465              	 .loc 1 3602 0 discriminator 3
 5466 003e 3B6A     	 ldr r3,[r7,#32]
 5467 0040 5B68     	 ldr r3,[r3,#4]
 5468 0042 DB68     	 ldr r3,[r3,#12]
 5469 0044 FB61     	 str r3,[r7,#28]
 5470              	.L383:
 5471              	.LBE196:
 5472              	.LBB197:
3603:../Dave/Generated/FREERTOS/tasks.c **** 
3604:../Dave/Generated/FREERTOS/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3605:../Dave/Generated/FREERTOS/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3606:../Dave/Generated/FREERTOS/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3607:../Dave/Generated/FREERTOS/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3608:../Dave/Generated/FREERTOS/tasks.c **** 			do
3609:../Dave/Generated/FREERTOS/tasks.c **** 			{
3610:../Dave/Generated/FREERTOS/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 5473              	 .loc 1 3610 0 is_stmt 1
 5474 0046 BB68     	 ldr r3,[r7,#8]
 5475 0048 BB61     	 str r3,[r7,#24]
 5476 004a BB69     	 ldr r3,[r7,#24]
 5477 004c 5B68     	 ldr r3,[r3,#4]
 5478 004e 5A68     	 ldr r2,[r3,#4]
 5479 0050 BB69     	 ldr r3,[r7,#24]
 5480 0052 5A60     	 str r2,[r3,#4]
 5481 0054 BB69     	 ldr r3,[r7,#24]
 5482 0056 5A68     	 ldr r2,[r3,#4]
 5483 0058 BB69     	 ldr r3,[r7,#24]
 5484 005a 0833     	 adds r3,r3,#8
 5485 005c 9A42     	 cmp r2,r3
 5486 005e 04D1     	 bne .L382
 5487              	 .loc 1 3610 0 is_stmt 0 discriminator 1
 5488 0060 BB69     	 ldr r3,[r7,#24]
 5489 0062 5B68     	 ldr r3,[r3,#4]
 5490 0064 5A68     	 ldr r2,[r3,#4]
 5491 0066 BB69     	 ldr r3,[r7,#24]
 5492 0068 5A60     	 str r2,[r3,#4]
 5493              	.L382:
 5494              	 .loc 1 3610 0 discriminator 3
 5495 006a BB69     	 ldr r3,[r7,#24]
 5496 006c 5B68     	 ldr r3,[r3,#4]
 5497 006e DB68     	 ldr r3,[r3,#12]
 5498 0070 7B61     	 str r3,[r7,#20]
 5499              	.LBE197:
3611:../Dave/Generated/FREERTOS/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5500              	 .loc 1 3611 0 is_stmt 1 discriminator 3
 5501 0072 7A6A     	 ldr r2,[r7,#36]
 5502 0074 1346     	 mov r3,r2
 5503 0076 DB00     	 lsls r3,r3,#3
 5504 0078 1344     	 add r3,r3,r2
 5505 007a 9B00     	 lsls r3,r3,#2
 5506 007c 1A46     	 mov r2,r3
 5507 007e FB68     	 ldr r3,[r7,#12]
 5508 0080 1A44     	 add r2,r2,r3
 5509 0082 FB79     	 ldrb r3,[r7,#7]
 5510 0084 7869     	 ldr r0,[r7,#20]
 5511 0086 1146     	 mov r1,r2
 5512 0088 0122     	 movs r2,#1
 5513 008a FFF7FEFF 	 bl vTaskGetInfo
3612:../Dave/Generated/FREERTOS/tasks.c **** 				uxTask++;
 5514              	 .loc 1 3612 0 discriminator 3
 5515 008e 7B6A     	 ldr r3,[r7,#36]
 5516 0090 0133     	 adds r3,r3,#1
 5517 0092 7B62     	 str r3,[r7,#36]
3613:../Dave/Generated/FREERTOS/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 5518              	 .loc 1 3613 0 discriminator 3
 5519 0094 7A69     	 ldr r2,[r7,#20]
 5520 0096 FB69     	 ldr r3,[r7,#28]
 5521 0098 9A42     	 cmp r2,r3
 5522 009a D4D1     	 bne .L383
 5523              	.L380:
3614:../Dave/Generated/FREERTOS/tasks.c **** 		}
3615:../Dave/Generated/FREERTOS/tasks.c **** 		else
3616:../Dave/Generated/FREERTOS/tasks.c **** 		{
3617:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3618:../Dave/Generated/FREERTOS/tasks.c **** 		}
3619:../Dave/Generated/FREERTOS/tasks.c **** 
3620:../Dave/Generated/FREERTOS/tasks.c **** 		return uxTask;
 5524              	 .loc 1 3620 0
 5525 009c 7B6A     	 ldr r3,[r7,#36]
3621:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5526              	 .loc 1 3621 0
 5527 009e 1846     	 mov r0,r3
 5528 00a0 2837     	 adds r7,r7,#40
 5529              	 .cfi_def_cfa_offset 8
 5530 00a2 BD46     	 mov sp,r7
 5531              	 .cfi_def_cfa_register 13
 5532              	 
 5533 00a4 80BD     	 pop {r7,pc}
 5534              	 .cfi_endproc
 5535              	.LFE183:
 5537 00a6 00BF     	 .section .text.prvTaskCheckFreeStackSpace,"ax",%progbits
 5538              	 .align 2
 5539              	 .thumb
 5540              	 .thumb_func
 5542              	prvTaskCheckFreeStackSpace:
 5543              	.LFB184:
3622:../Dave/Generated/FREERTOS/tasks.c **** 
3623:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3624:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3625:../Dave/Generated/FREERTOS/tasks.c **** 
3626:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3627:../Dave/Generated/FREERTOS/tasks.c **** 
3628:../Dave/Generated/FREERTOS/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3629:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5544              	 .loc 1 3629 0
 5545              	 .cfi_startproc
 5546              	 
 5547              	 
 5548              	 
 5549 0000 80B4     	 push {r7}
 5550              	 .cfi_def_cfa_offset 4
 5551              	 .cfi_offset 7,-4
 5552 0002 85B0     	 sub sp,sp,#20
 5553              	 .cfi_def_cfa_offset 24
 5554 0004 00AF     	 add r7,sp,#0
 5555              	 .cfi_def_cfa_register 7
 5556 0006 7860     	 str r0,[r7,#4]
3630:../Dave/Generated/FREERTOS/tasks.c **** 	uint32_t ulCount = 0U;
 5557              	 .loc 1 3630 0
 5558 0008 0023     	 movs r3,#0
 5559 000a FB60     	 str r3,[r7,#12]
3631:../Dave/Generated/FREERTOS/tasks.c **** 
3632:../Dave/Generated/FREERTOS/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 5560              	 .loc 1 3632 0
 5561 000c 05E0     	 b .L386
 5562              	.L387:
3633:../Dave/Generated/FREERTOS/tasks.c **** 		{
3634:../Dave/Generated/FREERTOS/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 5563              	 .loc 1 3634 0
 5564 000e 7B68     	 ldr r3,[r7,#4]
 5565 0010 0133     	 adds r3,r3,#1
 5566 0012 7B60     	 str r3,[r7,#4]
3635:../Dave/Generated/FREERTOS/tasks.c **** 			ulCount++;
 5567              	 .loc 1 3635 0
 5568 0014 FB68     	 ldr r3,[r7,#12]
 5569 0016 0133     	 adds r3,r3,#1
 5570 0018 FB60     	 str r3,[r7,#12]
 5571              	.L386:
3632:../Dave/Generated/FREERTOS/tasks.c **** 		{
 5572              	 .loc 1 3632 0
 5573 001a 7B68     	 ldr r3,[r7,#4]
 5574 001c 1B78     	 ldrb r3,[r3]
 5575 001e A52B     	 cmp r3,#165
 5576 0020 F5D0     	 beq .L387
3636:../Dave/Generated/FREERTOS/tasks.c **** 		}
3637:../Dave/Generated/FREERTOS/tasks.c **** 
3638:../Dave/Generated/FREERTOS/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 5577              	 .loc 1 3638 0
 5578 0022 FB68     	 ldr r3,[r7,#12]
 5579 0024 9B08     	 lsrs r3,r3,#2
 5580 0026 FB60     	 str r3,[r7,#12]
3639:../Dave/Generated/FREERTOS/tasks.c **** 
3640:../Dave/Generated/FREERTOS/tasks.c **** 		return ( uint16_t ) ulCount;
 5581              	 .loc 1 3640 0
 5582 0028 FB68     	 ldr r3,[r7,#12]
 5583 002a 9BB2     	 uxth r3,r3
3641:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5584              	 .loc 1 3641 0
 5585 002c 1846     	 mov r0,r3
 5586 002e 1437     	 adds r7,r7,#20
 5587              	 .cfi_def_cfa_offset 4
 5588 0030 BD46     	 mov sp,r7
 5589              	 .cfi_def_cfa_register 13
 5590              	 
 5591 0032 5DF8047B 	 ldr r7,[sp],#4
 5592              	 .cfi_restore 7
 5593              	 .cfi_def_cfa_offset 0
 5594 0036 7047     	 bx lr
 5595              	 .cfi_endproc
 5596              	.LFE184:
 5598              	 .section .text.uxTaskGetStackHighWaterMark,"ax",%progbits
 5599              	 .align 2
 5600              	 .global uxTaskGetStackHighWaterMark
 5601              	 .thumb
 5602              	 .thumb_func
 5604              	uxTaskGetStackHighWaterMark:
 5605              	.LFB185:
3642:../Dave/Generated/FREERTOS/tasks.c **** 
3643:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3644:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3645:../Dave/Generated/FREERTOS/tasks.c **** 
3646:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3647:../Dave/Generated/FREERTOS/tasks.c **** 
3648:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3649:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5606              	 .loc 1 3649 0
 5607              	 .cfi_startproc
 5608              	 
 5609              	 
 5610 0000 80B5     	 push {r7,lr}
 5611              	 .cfi_def_cfa_offset 8
 5612              	 .cfi_offset 7,-8
 5613              	 .cfi_offset 14,-4
 5614 0002 86B0     	 sub sp,sp,#24
 5615              	 .cfi_def_cfa_offset 32
 5616 0004 00AF     	 add r7,sp,#0
 5617              	 .cfi_def_cfa_register 7
 5618 0006 7860     	 str r0,[r7,#4]
3650:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
3651:../Dave/Generated/FREERTOS/tasks.c **** 	uint8_t *pucEndOfStack;
3652:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxReturn;
3653:../Dave/Generated/FREERTOS/tasks.c **** 
3654:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5619              	 .loc 1 3654 0
 5620 0008 7B68     	 ldr r3,[r7,#4]
 5621 000a 002B     	 cmp r3,#0
 5622 000c 02D1     	 bne .L390
 5623              	 .loc 1 3654 0 is_stmt 0 discriminator 1
 5624 000e 094B     	 ldr r3,.L393
 5625 0010 1B68     	 ldr r3,[r3]
 5626 0012 00E0     	 b .L391
 5627              	.L390:
 5628              	 .loc 1 3654 0 discriminator 2
 5629 0014 7B68     	 ldr r3,[r7,#4]
 5630              	.L391:
 5631              	 .loc 1 3654 0 discriminator 4
 5632 0016 7B61     	 str r3,[r7,#20]
3655:../Dave/Generated/FREERTOS/tasks.c **** 
3656:../Dave/Generated/FREERTOS/tasks.c **** 		#if portSTACK_GROWTH < 0
3657:../Dave/Generated/FREERTOS/tasks.c **** 		{
3658:../Dave/Generated/FREERTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 5633              	 .loc 1 3658 0 is_stmt 1 discriminator 4
 5634 0018 7B69     	 ldr r3,[r7,#20]
 5635 001a 1B6B     	 ldr r3,[r3,#48]
 5636 001c 3B61     	 str r3,[r7,#16]
3659:../Dave/Generated/FREERTOS/tasks.c **** 		}
3660:../Dave/Generated/FREERTOS/tasks.c **** 		#else
3661:../Dave/Generated/FREERTOS/tasks.c **** 		{
3662:../Dave/Generated/FREERTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3663:../Dave/Generated/FREERTOS/tasks.c **** 		}
3664:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
3665:../Dave/Generated/FREERTOS/tasks.c **** 
3666:../Dave/Generated/FREERTOS/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 5637              	 .loc 1 3666 0 discriminator 4
 5638 001e 3869     	 ldr r0,[r7,#16]
 5639 0020 FFF7FEFF 	 bl prvTaskCheckFreeStackSpace
 5640 0024 0346     	 mov r3,r0
 5641 0026 FB60     	 str r3,[r7,#12]
3667:../Dave/Generated/FREERTOS/tasks.c **** 
3668:../Dave/Generated/FREERTOS/tasks.c **** 		return uxReturn;
 5642              	 .loc 1 3668 0 discriminator 4
 5643 0028 FB68     	 ldr r3,[r7,#12]
3669:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5644              	 .loc 1 3669 0 discriminator 4
 5645 002a 1846     	 mov r0,r3
 5646 002c 1837     	 adds r7,r7,#24
 5647              	 .cfi_def_cfa_offset 8
 5648 002e BD46     	 mov sp,r7
 5649              	 .cfi_def_cfa_register 13
 5650              	 
 5651 0030 80BD     	 pop {r7,pc}
 5652              	.L394:
 5653 0032 00BF     	 .align 2
 5654              	.L393:
 5655 0034 00000000 	 .word pxCurrentTCB
 5656              	 .cfi_endproc
 5657              	.LFE185:
 5659              	 .section .text.prvDeleteTCB,"ax",%progbits
 5660              	 .align 2
 5661              	 .thumb
 5662              	 .thumb_func
 5664              	prvDeleteTCB:
 5665              	.LFB186:
3670:../Dave/Generated/FREERTOS/tasks.c **** 
3671:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3672:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3673:../Dave/Generated/FREERTOS/tasks.c **** 
3674:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3675:../Dave/Generated/FREERTOS/tasks.c **** 
3676:../Dave/Generated/FREERTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3677:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5666              	 .loc 1 3677 0
 5667              	 .cfi_startproc
 5668              	 
 5669              	 
 5670 0000 80B5     	 push {r7,lr}
 5671              	 .cfi_def_cfa_offset 8
 5672              	 .cfi_offset 7,-8
 5673              	 .cfi_offset 14,-4
 5674 0002 82B0     	 sub sp,sp,#8
 5675              	 .cfi_def_cfa_offset 16
 5676 0004 00AF     	 add r7,sp,#0
 5677              	 .cfi_def_cfa_register 7
 5678 0006 7860     	 str r0,[r7,#4]
3678:../Dave/Generated/FREERTOS/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3679:../Dave/Generated/FREERTOS/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3680:../Dave/Generated/FREERTOS/tasks.c **** 		want to allocate and clean RAM statically. */
3681:../Dave/Generated/FREERTOS/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3682:../Dave/Generated/FREERTOS/tasks.c **** 
3683:../Dave/Generated/FREERTOS/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3684:../Dave/Generated/FREERTOS/tasks.c **** 		to the task to free any memory allocated at the application level. */
3685:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3686:../Dave/Generated/FREERTOS/tasks.c **** 		{
3687:../Dave/Generated/FREERTOS/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3688:../Dave/Generated/FREERTOS/tasks.c **** 		}
3689:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3690:../Dave/Generated/FREERTOS/tasks.c **** 
3691:../Dave/Generated/FREERTOS/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3692:../Dave/Generated/FREERTOS/tasks.c **** 		{
3693:../Dave/Generated/FREERTOS/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3694:../Dave/Generated/FREERTOS/tasks.c **** 			the stack and TCB. */
3695:../Dave/Generated/FREERTOS/tasks.c **** 			vPortFree( pxTCB->pxStack );
 5679              	 .loc 1 3695 0
 5680 0008 7B68     	 ldr r3,[r7,#4]
 5681 000a 1B6B     	 ldr r3,[r3,#48]
 5682 000c 1846     	 mov r0,r3
 5683 000e FFF7FEFF 	 bl vPortFree
3696:../Dave/Generated/FREERTOS/tasks.c **** 			vPortFree( pxTCB );
 5684              	 .loc 1 3696 0
 5685 0012 7868     	 ldr r0,[r7,#4]
 5686 0014 FFF7FEFF 	 bl vPortFree
3697:../Dave/Generated/FREERTOS/tasks.c **** 		}
3698:../Dave/Generated/FREERTOS/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated 
3699:../Dave/Generated/FREERTOS/tasks.c **** 		{
3700:../Dave/Generated/FREERTOS/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3701:../Dave/Generated/FREERTOS/tasks.c **** 			check what was statically allocated before trying to free the
3702:../Dave/Generated/FREERTOS/tasks.c **** 			memory. */
3703:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3704:../Dave/Generated/FREERTOS/tasks.c **** 			{
3705:../Dave/Generated/FREERTOS/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3706:../Dave/Generated/FREERTOS/tasks.c **** 				must be freed. */
3707:../Dave/Generated/FREERTOS/tasks.c **** 				vPortFree( pxTCB->pxStack );
3708:../Dave/Generated/FREERTOS/tasks.c **** 				vPortFree( pxTCB );
3709:../Dave/Generated/FREERTOS/tasks.c **** 			}
3710:../Dave/Generated/FREERTOS/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3711:../Dave/Generated/FREERTOS/tasks.c **** 			{
3712:../Dave/Generated/FREERTOS/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3713:../Dave/Generated/FREERTOS/tasks.c **** 				only memory that must be freed. */
3714:../Dave/Generated/FREERTOS/tasks.c **** 				vPortFree( pxTCB );
3715:../Dave/Generated/FREERTOS/tasks.c **** 			}
3716:../Dave/Generated/FREERTOS/tasks.c **** 			else
3717:../Dave/Generated/FREERTOS/tasks.c **** 			{
3718:../Dave/Generated/FREERTOS/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3719:../Dave/Generated/FREERTOS/tasks.c **** 				nothing needs to be freed. */
3720:../Dave/Generated/FREERTOS/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3721:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3722:../Dave/Generated/FREERTOS/tasks.c **** 			}
3723:../Dave/Generated/FREERTOS/tasks.c **** 		}
3724:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3725:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5687              	 .loc 1 3725 0
 5688 0018 0837     	 adds r7,r7,#8
 5689              	 .cfi_def_cfa_offset 8
 5690 001a BD46     	 mov sp,r7
 5691              	 .cfi_def_cfa_register 13
 5692              	 
 5693 001c 80BD     	 pop {r7,pc}
 5694              	 .cfi_endproc
 5695              	.LFE186:
 5697 001e 00BF     	 .section .text.prvResetNextTaskUnblockTime,"ax",%progbits
 5698              	 .align 2
 5699              	 .thumb
 5700              	 .thumb_func
 5702              	prvResetNextTaskUnblockTime:
 5703              	.LFB187:
3726:../Dave/Generated/FREERTOS/tasks.c **** 
3727:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3728:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3729:../Dave/Generated/FREERTOS/tasks.c **** 
3730:../Dave/Generated/FREERTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3731:../Dave/Generated/FREERTOS/tasks.c **** {
 5704              	 .loc 1 3731 0
 5705              	 .cfi_startproc
 5706              	 
 5707              	 
 5708              	 
 5709 0000 80B4     	 push {r7}
 5710              	 .cfi_def_cfa_offset 4
 5711              	 .cfi_offset 7,-4
 5712 0002 83B0     	 sub sp,sp,#12
 5713              	 .cfi_def_cfa_offset 16
 5714 0004 00AF     	 add r7,sp,#0
 5715              	 .cfi_def_cfa_register 7
3732:../Dave/Generated/FREERTOS/tasks.c **** TCB_t *pxTCB;
3733:../Dave/Generated/FREERTOS/tasks.c **** 
3734:../Dave/Generated/FREERTOS/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 5716              	 .loc 1 3734 0
 5717 0006 0E4B     	 ldr r3,.L401
 5718 0008 1B68     	 ldr r3,[r3]
 5719 000a 1B68     	 ldr r3,[r3]
 5720 000c 002B     	 cmp r3,#0
 5721 000e 01D1     	 bne .L397
 5722              	 .loc 1 3734 0 is_stmt 0 discriminator 1
 5723 0010 0123     	 movs r3,#1
 5724 0012 00E0     	 b .L398
 5725              	.L397:
 5726              	 .loc 1 3734 0 discriminator 2
 5727 0014 0023     	 movs r3,#0
 5728              	.L398:
 5729              	 .loc 1 3734 0 discriminator 4
 5730 0016 002B     	 cmp r3,#0
 5731 0018 04D0     	 beq .L399
3735:../Dave/Generated/FREERTOS/tasks.c **** 	{
3736:../Dave/Generated/FREERTOS/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3737:../Dave/Generated/FREERTOS/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3738:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3739:../Dave/Generated/FREERTOS/tasks.c **** 		there is an item in the delayed list. */
3740:../Dave/Generated/FREERTOS/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 5732              	 .loc 1 3740 0 is_stmt 1
 5733 001a 0A4B     	 ldr r3,.L401+4
 5734 001c 4FF0FF32 	 mov r2,#-1
 5735 0020 1A60     	 str r2,[r3]
 5736 0022 08E0     	 b .L396
 5737              	.L399:
3741:../Dave/Generated/FREERTOS/tasks.c **** 	}
3742:../Dave/Generated/FREERTOS/tasks.c **** 	else
3743:../Dave/Generated/FREERTOS/tasks.c **** 	{
3744:../Dave/Generated/FREERTOS/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3745:../Dave/Generated/FREERTOS/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3746:../Dave/Generated/FREERTOS/tasks.c **** 		which the task at the head of the delayed list should be removed
3747:../Dave/Generated/FREERTOS/tasks.c **** 		from the Blocked state. */
3748:../Dave/Generated/FREERTOS/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 5738              	 .loc 1 3748 0
 5739 0024 064B     	 ldr r3,.L401
 5740 0026 1B68     	 ldr r3,[r3]
 5741 0028 DB68     	 ldr r3,[r3,#12]
 5742 002a DB68     	 ldr r3,[r3,#12]
 5743 002c 7B60     	 str r3,[r7,#4]
3749:../Dave/Generated/FREERTOS/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 5744              	 .loc 1 3749 0
 5745 002e 7B68     	 ldr r3,[r7,#4]
 5746 0030 5B68     	 ldr r3,[r3,#4]
 5747 0032 044A     	 ldr r2,.L401+4
 5748 0034 1360     	 str r3,[r2]
 5749              	.L396:
3750:../Dave/Generated/FREERTOS/tasks.c **** 	}
3751:../Dave/Generated/FREERTOS/tasks.c **** }
 5750              	 .loc 1 3751 0
 5751 0036 0C37     	 adds r7,r7,#12
 5752              	 .cfi_def_cfa_offset 4
 5753 0038 BD46     	 mov sp,r7
 5754              	 .cfi_def_cfa_register 13
 5755              	 
 5756 003a 5DF8047B 	 ldr r7,[sp],#4
 5757              	 .cfi_restore 7
 5758              	 .cfi_def_cfa_offset 0
 5759 003e 7047     	 bx lr
 5760              	.L402:
 5761              	 .align 2
 5762              	.L401:
 5763 0040 00000000 	 .word pxDelayedTaskList
 5764 0044 00000000 	 .word xNextTaskUnblockTime
 5765              	 .cfi_endproc
 5766              	.LFE187:
 5768              	 .section .text.xTaskGetCurrentTaskHandle,"ax",%progbits
 5769              	 .align 2
 5770              	 .global xTaskGetCurrentTaskHandle
 5771              	 .thumb
 5772              	 .thumb_func
 5774              	xTaskGetCurrentTaskHandle:
 5775              	.LFB188:
3752:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3753:../Dave/Generated/FREERTOS/tasks.c **** 
3754:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3755:../Dave/Generated/FREERTOS/tasks.c **** 
3756:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3757:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5776              	 .loc 1 3757 0
 5777              	 .cfi_startproc
 5778              	 
 5779              	 
 5780              	 
 5781 0000 80B4     	 push {r7}
 5782              	 .cfi_def_cfa_offset 4
 5783              	 .cfi_offset 7,-4
 5784 0002 83B0     	 sub sp,sp,#12
 5785              	 .cfi_def_cfa_offset 16
 5786 0004 00AF     	 add r7,sp,#0
 5787              	 .cfi_def_cfa_register 7
3758:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHandle_t xReturn;
3759:../Dave/Generated/FREERTOS/tasks.c **** 
3760:../Dave/Generated/FREERTOS/tasks.c **** 		/* A critical section is not required as this is not called from
3761:../Dave/Generated/FREERTOS/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3762:../Dave/Generated/FREERTOS/tasks.c **** 		individual execution thread. */
3763:../Dave/Generated/FREERTOS/tasks.c **** 		xReturn = pxCurrentTCB;
 5788              	 .loc 1 3763 0
 5789 0006 054B     	 ldr r3,.L405
 5790 0008 1B68     	 ldr r3,[r3]
 5791 000a 7B60     	 str r3,[r7,#4]
3764:../Dave/Generated/FREERTOS/tasks.c **** 
3765:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 5792              	 .loc 1 3765 0
 5793 000c 7B68     	 ldr r3,[r7,#4]
3766:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5794              	 .loc 1 3766 0
 5795 000e 1846     	 mov r0,r3
 5796 0010 0C37     	 adds r7,r7,#12
 5797              	 .cfi_def_cfa_offset 4
 5798 0012 BD46     	 mov sp,r7
 5799              	 .cfi_def_cfa_register 13
 5800              	 
 5801 0014 5DF8047B 	 ldr r7,[sp],#4
 5802              	 .cfi_restore 7
 5803              	 .cfi_def_cfa_offset 0
 5804 0018 7047     	 bx lr
 5805              	.L406:
 5806 001a 00BF     	 .align 2
 5807              	.L405:
 5808 001c 00000000 	 .word pxCurrentTCB
 5809              	 .cfi_endproc
 5810              	.LFE188:
 5812              	 .section .text.xTaskGetSchedulerState,"ax",%progbits
 5813              	 .align 2
 5814              	 .global xTaskGetSchedulerState
 5815              	 .thumb
 5816              	 .thumb_func
 5818              	xTaskGetSchedulerState:
 5819              	.LFB189:
3767:../Dave/Generated/FREERTOS/tasks.c **** 
3768:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3769:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3770:../Dave/Generated/FREERTOS/tasks.c **** 
3771:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3772:../Dave/Generated/FREERTOS/tasks.c **** 
3773:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3774:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5820              	 .loc 1 3774 0
 5821              	 .cfi_startproc
 5822              	 
 5823              	 
 5824              	 
 5825 0000 80B4     	 push {r7}
 5826              	 .cfi_def_cfa_offset 4
 5827              	 .cfi_offset 7,-4
 5828 0002 83B0     	 sub sp,sp,#12
 5829              	 .cfi_def_cfa_offset 16
 5830 0004 00AF     	 add r7,sp,#0
 5831              	 .cfi_def_cfa_register 7
3775:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn;
3776:../Dave/Generated/FREERTOS/tasks.c **** 
3777:../Dave/Generated/FREERTOS/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 5832              	 .loc 1 3777 0
 5833 0006 0B4B     	 ldr r3,.L412
 5834 0008 1B68     	 ldr r3,[r3]
 5835 000a 002B     	 cmp r3,#0
 5836 000c 02D1     	 bne .L408
3778:../Dave/Generated/FREERTOS/tasks.c **** 		{
3779:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 5837              	 .loc 1 3779 0
 5838 000e 0123     	 movs r3,#1
 5839 0010 7B60     	 str r3,[r7,#4]
 5840 0012 08E0     	 b .L409
 5841              	.L408:
3780:../Dave/Generated/FREERTOS/tasks.c **** 		}
3781:../Dave/Generated/FREERTOS/tasks.c **** 		else
3782:../Dave/Generated/FREERTOS/tasks.c **** 		{
3783:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5842              	 .loc 1 3783 0
 5843 0014 084B     	 ldr r3,.L412+4
 5844 0016 1B68     	 ldr r3,[r3]
 5845 0018 002B     	 cmp r3,#0
 5846 001a 02D1     	 bne .L410
3784:../Dave/Generated/FREERTOS/tasks.c **** 			{
3785:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 5847              	 .loc 1 3785 0
 5848 001c 0223     	 movs r3,#2
 5849 001e 7B60     	 str r3,[r7,#4]
 5850 0020 01E0     	 b .L409
 5851              	.L410:
3786:../Dave/Generated/FREERTOS/tasks.c **** 			}
3787:../Dave/Generated/FREERTOS/tasks.c **** 			else
3788:../Dave/Generated/FREERTOS/tasks.c **** 			{
3789:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 5852              	 .loc 1 3789 0
 5853 0022 0023     	 movs r3,#0
 5854 0024 7B60     	 str r3,[r7,#4]
 5855              	.L409:
3790:../Dave/Generated/FREERTOS/tasks.c **** 			}
3791:../Dave/Generated/FREERTOS/tasks.c **** 		}
3792:../Dave/Generated/FREERTOS/tasks.c **** 
3793:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 5856              	 .loc 1 3793 0
 5857 0026 7B68     	 ldr r3,[r7,#4]
3794:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5858              	 .loc 1 3794 0
 5859 0028 1846     	 mov r0,r3
 5860 002a 0C37     	 adds r7,r7,#12
 5861              	 .cfi_def_cfa_offset 4
 5862 002c BD46     	 mov sp,r7
 5863              	 .cfi_def_cfa_register 13
 5864              	 
 5865 002e 5DF8047B 	 ldr r7,[sp],#4
 5866              	 .cfi_restore 7
 5867              	 .cfi_def_cfa_offset 0
 5868 0032 7047     	 bx lr
 5869              	.L413:
 5870              	 .align 2
 5871              	.L412:
 5872 0034 00000000 	 .word xSchedulerRunning
 5873 0038 00000000 	 .word uxSchedulerSuspended
 5874              	 .cfi_endproc
 5875              	.LFE189:
 5877              	 .section .text.xTaskPriorityInherit,"ax",%progbits
 5878              	 .align 2
 5879              	 .global xTaskPriorityInherit
 5880              	 .thumb
 5881              	 .thumb_func
 5883              	xTaskPriorityInherit:
 5884              	.LFB190:
3795:../Dave/Generated/FREERTOS/tasks.c **** 
3796:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3797:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3798:../Dave/Generated/FREERTOS/tasks.c **** 
3799:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3800:../Dave/Generated/FREERTOS/tasks.c **** 
3801:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3802:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5885              	 .loc 1 3802 0
 5886              	 .cfi_startproc
 5887              	 
 5888              	 
 5889 0000 80B5     	 push {r7,lr}
 5890              	 .cfi_def_cfa_offset 8
 5891              	 .cfi_offset 7,-8
 5892              	 .cfi_offset 14,-4
 5893 0002 84B0     	 sub sp,sp,#16
 5894              	 .cfi_def_cfa_offset 24
 5895 0004 00AF     	 add r7,sp,#0
 5896              	 .cfi_def_cfa_register 7
 5897 0006 7860     	 str r0,[r7,#4]
3803:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 5898              	 .loc 1 3803 0
 5899 0008 7B68     	 ldr r3,[r7,#4]
 5900 000a BB60     	 str r3,[r7,#8]
3804:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 5901              	 .loc 1 3804 0
 5902 000c 0023     	 movs r3,#0
 5903 000e FB60     	 str r3,[r7,#12]
3805:../Dave/Generated/FREERTOS/tasks.c **** 
3806:../Dave/Generated/FREERTOS/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3807:../Dave/Generated/FREERTOS/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3808:../Dave/Generated/FREERTOS/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3809:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxMutexHolder != NULL )
 5904              	 .loc 1 3809 0
 5905 0010 7B68     	 ldr r3,[r7,#4]
 5906 0012 002B     	 cmp r3,#0
 5907 0014 70D0     	 beq .L415
3810:../Dave/Generated/FREERTOS/tasks.c **** 		{
3811:../Dave/Generated/FREERTOS/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3812:../Dave/Generated/FREERTOS/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3813:../Dave/Generated/FREERTOS/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3814:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 5908              	 .loc 1 3814 0
 5909 0016 BB68     	 ldr r3,[r7,#8]
 5910 0018 DA6A     	 ldr r2,[r3,#44]
 5911 001a 3A4B     	 ldr r3,.L425
 5912 001c 1B68     	 ldr r3,[r3]
 5913 001e DB6A     	 ldr r3,[r3,#44]
 5914 0020 9A42     	 cmp r2,r3
 5915 0022 60D2     	 bcs .L416
3815:../Dave/Generated/FREERTOS/tasks.c **** 			{
3816:../Dave/Generated/FREERTOS/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3817:../Dave/Generated/FREERTOS/tasks.c **** 				priority.  Only reset the event list item value if the value is
3818:../Dave/Generated/FREERTOS/tasks.c **** 				not being used for anything else. */
3819:../Dave/Generated/FREERTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
 5916              	 .loc 1 3819 0
 5917 0024 BB68     	 ldr r3,[r7,#8]
 5918 0026 9B69     	 ldr r3,[r3,#24]
 5919 0028 002B     	 cmp r3,#0
 5920 002a 06DB     	 blt .L417
3820:../Dave/Generated/FREERTOS/tasks.c **** 				{
3821:../Dave/Generated/FREERTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
 5921              	 .loc 1 3821 0
 5922 002c 354B     	 ldr r3,.L425
 5923 002e 1B68     	 ldr r3,[r3]
 5924 0030 DB6A     	 ldr r3,[r3,#44]
 5925 0032 C3F10502 	 rsb r2,r3,#5
 5926 0036 BB68     	 ldr r3,[r7,#8]
 5927 0038 9A61     	 str r2,[r3,#24]
 5928              	.L417:
3822:../Dave/Generated/FREERTOS/tasks.c **** 				}
3823:../Dave/Generated/FREERTOS/tasks.c **** 				else
3824:../Dave/Generated/FREERTOS/tasks.c **** 				{
3825:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3826:../Dave/Generated/FREERTOS/tasks.c **** 				}
3827:../Dave/Generated/FREERTOS/tasks.c **** 
3828:../Dave/Generated/FREERTOS/tasks.c **** 				/* If the task being modified is in the ready state it will need
3829:../Dave/Generated/FREERTOS/tasks.c **** 				to be moved into a new list. */
3830:../Dave/Generated/FREERTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
 5929              	 .loc 1 3830 0
 5930 003a BB68     	 ldr r3,[r7,#8]
 5931 003c 5969     	 ldr r1,[r3,#20]
 5932 003e BB68     	 ldr r3,[r7,#8]
 5933 0040 DA6A     	 ldr r2,[r3,#44]
 5934 0042 1346     	 mov r3,r2
 5935 0044 9B00     	 lsls r3,r3,#2
 5936 0046 1344     	 add r3,r3,r2
 5937 0048 9B00     	 lsls r3,r3,#2
 5938 004a 2F4A     	 ldr r2,.L425+4
 5939 004c 1344     	 add r3,r3,r2
 5940 004e 9942     	 cmp r1,r3
 5941 0050 01D1     	 bne .L418
 5942              	 .loc 1 3830 0 is_stmt 0 discriminator 1
 5943 0052 0123     	 movs r3,#1
 5944 0054 00E0     	 b .L419
 5945              	.L418:
 5946              	 .loc 1 3830 0 discriminator 2
 5947 0056 0023     	 movs r3,#0
 5948              	.L419:
 5949              	 .loc 1 3830 0 discriminator 4
 5950 0058 002B     	 cmp r3,#0
 5951 005a 3CD0     	 beq .L420
3831:../Dave/Generated/FREERTOS/tasks.c **** 				{
3832:../Dave/Generated/FREERTOS/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 5952              	 .loc 1 3832 0 is_stmt 1
 5953 005c BB68     	 ldr r3,[r7,#8]
 5954 005e 0433     	 adds r3,r3,#4
 5955 0060 1846     	 mov r0,r3
 5956 0062 FFF7FEFF 	 bl uxListRemove
 5957 0066 0346     	 mov r3,r0
 5958 0068 002B     	 cmp r3,#0
 5959 006a 15D1     	 bne .L421
3833:../Dave/Generated/FREERTOS/tasks.c **** 					{
3834:../Dave/Generated/FREERTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 5960              	 .loc 1 3834 0
 5961 006c BB68     	 ldr r3,[r7,#8]
 5962 006e DA6A     	 ldr r2,[r3,#44]
 5963 0070 2549     	 ldr r1,.L425+4
 5964 0072 1346     	 mov r3,r2
 5965 0074 9B00     	 lsls r3,r3,#2
 5966 0076 1344     	 add r3,r3,r2
 5967 0078 9B00     	 lsls r3,r3,#2
 5968 007a 0B44     	 add r3,r3,r1
 5969 007c 1B68     	 ldr r3,[r3]
 5970 007e 002B     	 cmp r3,#0
 5971 0080 0AD1     	 bne .L421
 5972              	 .loc 1 3834 0 is_stmt 0 discriminator 1
 5973 0082 BB68     	 ldr r3,[r7,#8]
 5974 0084 DB6A     	 ldr r3,[r3,#44]
 5975 0086 1A46     	 mov r2,r3
 5976 0088 0123     	 movs r3,#1
 5977 008a 9340     	 lsls r3,r3,r2
 5978 008c DA43     	 mvns r2,r3
 5979 008e 1F4B     	 ldr r3,.L425+8
 5980 0090 1B68     	 ldr r3,[r3]
 5981 0092 1340     	 ands r3,r3,r2
 5982 0094 1D4A     	 ldr r2,.L425+8
 5983 0096 1360     	 str r3,[r2]
 5984              	.L421:
3835:../Dave/Generated/FREERTOS/tasks.c **** 					}
3836:../Dave/Generated/FREERTOS/tasks.c **** 					else
3837:../Dave/Generated/FREERTOS/tasks.c **** 					{
3838:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3839:../Dave/Generated/FREERTOS/tasks.c **** 					}
3840:../Dave/Generated/FREERTOS/tasks.c **** 
3841:../Dave/Generated/FREERTOS/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3842:../Dave/Generated/FREERTOS/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 5985              	 .loc 1 3842 0 is_stmt 1
 5986 0098 1A4B     	 ldr r3,.L425
 5987 009a 1B68     	 ldr r3,[r3]
 5988 009c DA6A     	 ldr r2,[r3,#44]
 5989 009e BB68     	 ldr r3,[r7,#8]
 5990 00a0 DA62     	 str r2,[r3,#44]
3843:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 5991              	 .loc 1 3843 0
 5992 00a2 BB68     	 ldr r3,[r7,#8]
 5993 00a4 DB6A     	 ldr r3,[r3,#44]
 5994 00a6 1A46     	 mov r2,r3
 5995 00a8 0123     	 movs r3,#1
 5996 00aa 03FA02F2 	 lsl r2,r3,r2
 5997 00ae 174B     	 ldr r3,.L425+8
 5998 00b0 1B68     	 ldr r3,[r3]
 5999 00b2 1343     	 orrs r3,r3,r2
 6000 00b4 154A     	 ldr r2,.L425+8
 6001 00b6 1360     	 str r3,[r2]
 6002 00b8 BB68     	 ldr r3,[r7,#8]
 6003 00ba DA6A     	 ldr r2,[r3,#44]
 6004 00bc 1346     	 mov r3,r2
 6005 00be 9B00     	 lsls r3,r3,#2
 6006 00c0 1344     	 add r3,r3,r2
 6007 00c2 9B00     	 lsls r3,r3,#2
 6008 00c4 104A     	 ldr r2,.L425+4
 6009 00c6 1A44     	 add r2,r2,r3
 6010 00c8 BB68     	 ldr r3,[r7,#8]
 6011 00ca 0433     	 adds r3,r3,#4
 6012 00cc 1046     	 mov r0,r2
 6013 00ce 1946     	 mov r1,r3
 6014 00d0 FFF7FEFF 	 bl vListInsertEnd
 6015 00d4 04E0     	 b .L423
 6016              	.L420:
3844:../Dave/Generated/FREERTOS/tasks.c **** 				}
3845:../Dave/Generated/FREERTOS/tasks.c **** 				else
3846:../Dave/Generated/FREERTOS/tasks.c **** 				{
3847:../Dave/Generated/FREERTOS/tasks.c **** 					/* Just inherit the priority. */
3848:../Dave/Generated/FREERTOS/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6017              	 .loc 1 3848 0
 6018 00d6 0B4B     	 ldr r3,.L425
 6019 00d8 1B68     	 ldr r3,[r3]
 6020 00da DA6A     	 ldr r2,[r3,#44]
 6021 00dc BB68     	 ldr r3,[r7,#8]
 6022 00de DA62     	 str r2,[r3,#44]
 6023              	.L423:
3849:../Dave/Generated/FREERTOS/tasks.c **** 				}
3850:../Dave/Generated/FREERTOS/tasks.c **** 
3851:../Dave/Generated/FREERTOS/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
3852:../Dave/Generated/FREERTOS/tasks.c **** 
3853:../Dave/Generated/FREERTOS/tasks.c **** 				/* Inheritance occurred. */
3854:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdTRUE;
 6024              	 .loc 1 3854 0
 6025 00e0 0123     	 movs r3,#1
 6026 00e2 FB60     	 str r3,[r7,#12]
 6027 00e4 08E0     	 b .L415
 6028              	.L416:
3855:../Dave/Generated/FREERTOS/tasks.c **** 			}
3856:../Dave/Generated/FREERTOS/tasks.c **** 			else
3857:../Dave/Generated/FREERTOS/tasks.c **** 			{
3858:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 6029              	 .loc 1 3858 0
 6030 00e6 BB68     	 ldr r3,[r7,#8]
 6031 00e8 DA6C     	 ldr r2,[r3,#76]
 6032 00ea 064B     	 ldr r3,.L425
 6033 00ec 1B68     	 ldr r3,[r3]
 6034 00ee DB6A     	 ldr r3,[r3,#44]
 6035 00f0 9A42     	 cmp r2,r3
 6036 00f2 01D2     	 bcs .L415
3859:../Dave/Generated/FREERTOS/tasks.c **** 				{
3860:../Dave/Generated/FREERTOS/tasks.c **** 					/* The base priority of the mutex holder is lower than the
3861:../Dave/Generated/FREERTOS/tasks.c **** 					priority of the task attempting to take the mutex, but the
3862:../Dave/Generated/FREERTOS/tasks.c **** 					current priority of the mutex holder is not lower than the
3863:../Dave/Generated/FREERTOS/tasks.c **** 					priority of the task attempting to take the mutex.
3864:../Dave/Generated/FREERTOS/tasks.c **** 					Therefore the mutex holder must have already inherited a
3865:../Dave/Generated/FREERTOS/tasks.c **** 					priority, but inheritance would have occurred if that had
3866:../Dave/Generated/FREERTOS/tasks.c **** 					not been the case. */
3867:../Dave/Generated/FREERTOS/tasks.c **** 					xReturn = pdTRUE;
 6037              	 .loc 1 3867 0
 6038 00f4 0123     	 movs r3,#1
 6039 00f6 FB60     	 str r3,[r7,#12]
 6040              	.L415:
3868:../Dave/Generated/FREERTOS/tasks.c **** 				}
3869:../Dave/Generated/FREERTOS/tasks.c **** 				else
3870:../Dave/Generated/FREERTOS/tasks.c **** 				{
3871:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3872:../Dave/Generated/FREERTOS/tasks.c **** 				}
3873:../Dave/Generated/FREERTOS/tasks.c **** 			}
3874:../Dave/Generated/FREERTOS/tasks.c **** 		}
3875:../Dave/Generated/FREERTOS/tasks.c **** 		else
3876:../Dave/Generated/FREERTOS/tasks.c **** 		{
3877:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3878:../Dave/Generated/FREERTOS/tasks.c **** 		}
3879:../Dave/Generated/FREERTOS/tasks.c **** 
3880:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 6041              	 .loc 1 3880 0
 6042 00f8 FB68     	 ldr r3,[r7,#12]
3881:../Dave/Generated/FREERTOS/tasks.c **** 	}
 6043              	 .loc 1 3881 0
 6044 00fa 1846     	 mov r0,r3
 6045 00fc 1037     	 adds r7,r7,#16
 6046              	 .cfi_def_cfa_offset 8
 6047 00fe BD46     	 mov sp,r7
 6048              	 .cfi_def_cfa_register 13
 6049              	 
 6050 0100 80BD     	 pop {r7,pc}
 6051              	.L426:
 6052 0102 00BF     	 .align 2
 6053              	.L425:
 6054 0104 00000000 	 .word pxCurrentTCB
 6055 0108 00000000 	 .word pxReadyTasksLists
 6056 010c 00000000 	 .word uxTopReadyPriority
 6057              	 .cfi_endproc
 6058              	.LFE190:
 6060              	 .section .text.xTaskPriorityDisinherit,"ax",%progbits
 6061              	 .align 2
 6062              	 .global xTaskPriorityDisinherit
 6063              	 .thumb
 6064              	 .thumb_func
 6066              	xTaskPriorityDisinherit:
 6067              	.LFB191:
3882:../Dave/Generated/FREERTOS/tasks.c **** 
3883:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_MUTEXES */
3884:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3885:../Dave/Generated/FREERTOS/tasks.c **** 
3886:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3887:../Dave/Generated/FREERTOS/tasks.c **** 
3888:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3889:../Dave/Generated/FREERTOS/tasks.c **** 	{
 6068              	 .loc 1 3889 0
 6069              	 .cfi_startproc
 6070              	 
 6071              	 
 6072 0000 80B5     	 push {r7,lr}
 6073              	 .cfi_def_cfa_offset 8
 6074              	 .cfi_offset 7,-8
 6075              	 .cfi_offset 14,-4
 6076 0002 86B0     	 sub sp,sp,#24
 6077              	 .cfi_def_cfa_offset 32
 6078 0004 00AF     	 add r7,sp,#0
 6079              	 .cfi_def_cfa_register 7
 6080 0006 7860     	 str r0,[r7,#4]
3890:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 6081              	 .loc 1 3890 0
 6082 0008 7B68     	 ldr r3,[r7,#4]
 6083 000a 3B61     	 str r3,[r7,#16]
3891:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 6084              	 .loc 1 3891 0
 6085 000c 0023     	 movs r3,#0
 6086 000e 7B61     	 str r3,[r7,#20]
3892:../Dave/Generated/FREERTOS/tasks.c **** 
3893:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxMutexHolder != NULL )
 6087              	 .loc 1 3893 0
 6088 0010 7B68     	 ldr r3,[r7,#4]
 6089 0012 002B     	 cmp r3,#0
 6090 0014 6ED0     	 beq .L428
3894:../Dave/Generated/FREERTOS/tasks.c **** 		{
3895:../Dave/Generated/FREERTOS/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3896:../Dave/Generated/FREERTOS/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3897:../Dave/Generated/FREERTOS/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3898:../Dave/Generated/FREERTOS/tasks.c **** 			be the running state task. */
3899:../Dave/Generated/FREERTOS/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
 6091              	 .loc 1 3899 0
 6092 0016 3A4B     	 ldr r3,.L436
 6093 0018 1B68     	 ldr r3,[r3]
 6094 001a 3A69     	 ldr r2,[r7,#16]
 6095 001c 9A42     	 cmp r2,r3
 6096 001e 09D0     	 beq .L429
 6097              	.LBB198:
 6098              	.LBB199:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 6099              	 .loc 2 195 0 discriminator 1
 6100              	
 6101 0020 4FF0FC03 	 mov r3,#252
 6102 0024 83F31188 	 msr basepri,r3
 6103 0028 BFF36F8F 	 isb 
 6104 002c BFF34F8F 	 dsb 
 6105              	
 6106              	
 6107              	 .thumb
 6108 0030 FB60     	 str r3,[r7,#12]
 6109              	.L430:
 6110              	.LBE199:
 6111              	.LBE198:
 6112              	 .loc 1 3899 0 discriminator 1
 6113 0032 FEE7     	 b .L430
 6114              	.L429:
3900:../Dave/Generated/FREERTOS/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6115              	 .loc 1 3900 0
 6116 0034 3B69     	 ldr r3,[r7,#16]
 6117 0036 1B6D     	 ldr r3,[r3,#80]
 6118 0038 002B     	 cmp r3,#0
 6119 003a 09D1     	 bne .L431
 6120              	.LBB200:
 6121              	.LBB201:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 6122              	 .loc 2 195 0 discriminator 1
 6123              	
 6124 003c 4FF0FC03 	 mov r3,#252
 6125 0040 83F31188 	 msr basepri,r3
 6126 0044 BFF36F8F 	 isb 
 6127 0048 BFF34F8F 	 dsb 
 6128              	
 6129              	
 6130              	 .thumb
 6131 004c BB60     	 str r3,[r7,#8]
 6132              	.L432:
 6133              	.LBE201:
 6134              	.LBE200:
 6135              	 .loc 1 3900 0 discriminator 2
 6136 004e FEE7     	 b .L432
 6137              	.L431:
3901:../Dave/Generated/FREERTOS/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 6138              	 .loc 1 3901 0
 6139 0050 3B69     	 ldr r3,[r7,#16]
 6140 0052 1B6D     	 ldr r3,[r3,#80]
 6141 0054 5A1E     	 subs r2,r3,#1
 6142 0056 3B69     	 ldr r3,[r7,#16]
 6143 0058 1A65     	 str r2,[r3,#80]
3902:../Dave/Generated/FREERTOS/tasks.c **** 
3903:../Dave/Generated/FREERTOS/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3904:../Dave/Generated/FREERTOS/tasks.c **** 			task? */
3905:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 6144              	 .loc 1 3905 0
 6145 005a 3B69     	 ldr r3,[r7,#16]
 6146 005c DA6A     	 ldr r2,[r3,#44]
 6147 005e 3B69     	 ldr r3,[r7,#16]
 6148 0060 DB6C     	 ldr r3,[r3,#76]
 6149 0062 9A42     	 cmp r2,r3
 6150 0064 46D0     	 beq .L428
3906:../Dave/Generated/FREERTOS/tasks.c **** 			{
3907:../Dave/Generated/FREERTOS/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3908:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 6151              	 .loc 1 3908 0
 6152 0066 3B69     	 ldr r3,[r7,#16]
 6153 0068 1B6D     	 ldr r3,[r3,#80]
 6154 006a 002B     	 cmp r3,#0
 6155 006c 42D1     	 bne .L428
3909:../Dave/Generated/FREERTOS/tasks.c **** 				{
3910:../Dave/Generated/FREERTOS/tasks.c **** 					/* A task can only have an inherited priority if it holds
3911:../Dave/Generated/FREERTOS/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3912:../Dave/Generated/FREERTOS/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3913:../Dave/Generated/FREERTOS/tasks.c **** 					holding task then it must be the running state task.  Remove
3914:../Dave/Generated/FREERTOS/tasks.c **** 					the holding task from the ready list. */
3915:../Dave/Generated/FREERTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6156              	 .loc 1 3915 0
 6157 006e 3B69     	 ldr r3,[r7,#16]
 6158 0070 0433     	 adds r3,r3,#4
 6159 0072 1846     	 mov r0,r3
 6160 0074 FFF7FEFF 	 bl uxListRemove
 6161 0078 0346     	 mov r3,r0
 6162 007a 002B     	 cmp r3,#0
 6163 007c 15D1     	 bne .L433
3916:../Dave/Generated/FREERTOS/tasks.c **** 					{
3917:../Dave/Generated/FREERTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 6164              	 .loc 1 3917 0
 6165 007e 3B69     	 ldr r3,[r7,#16]
 6166 0080 DA6A     	 ldr r2,[r3,#44]
 6167 0082 2049     	 ldr r1,.L436+4
 6168 0084 1346     	 mov r3,r2
 6169 0086 9B00     	 lsls r3,r3,#2
 6170 0088 1344     	 add r3,r3,r2
 6171 008a 9B00     	 lsls r3,r3,#2
 6172 008c 0B44     	 add r3,r3,r1
 6173 008e 1B68     	 ldr r3,[r3]
 6174 0090 002B     	 cmp r3,#0
 6175 0092 0AD1     	 bne .L433
 6176              	 .loc 1 3917 0 is_stmt 0 discriminator 1
 6177 0094 3B69     	 ldr r3,[r7,#16]
 6178 0096 DB6A     	 ldr r3,[r3,#44]
 6179 0098 1A46     	 mov r2,r3
 6180 009a 0123     	 movs r3,#1
 6181 009c 9340     	 lsls r3,r3,r2
 6182 009e DA43     	 mvns r2,r3
 6183 00a0 194B     	 ldr r3,.L436+8
 6184 00a2 1B68     	 ldr r3,[r3]
 6185 00a4 1340     	 ands r3,r3,r2
 6186 00a6 184A     	 ldr r2,.L436+8
 6187 00a8 1360     	 str r3,[r2]
 6188              	.L433:
3918:../Dave/Generated/FREERTOS/tasks.c **** 					}
3919:../Dave/Generated/FREERTOS/tasks.c **** 					else
3920:../Dave/Generated/FREERTOS/tasks.c **** 					{
3921:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3922:../Dave/Generated/FREERTOS/tasks.c **** 					}
3923:../Dave/Generated/FREERTOS/tasks.c **** 
3924:../Dave/Generated/FREERTOS/tasks.c **** 					/* Disinherit the priority before adding the task into the
3925:../Dave/Generated/FREERTOS/tasks.c **** 					new	ready list. */
3926:../Dave/Generated/FREERTOS/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3927:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 6189              	 .loc 1 3927 0 is_stmt 1
 6190 00aa 3B69     	 ldr r3,[r7,#16]
 6191 00ac DA6C     	 ldr r2,[r3,#76]
 6192 00ae 3B69     	 ldr r3,[r7,#16]
 6193 00b0 DA62     	 str r2,[r3,#44]
3928:../Dave/Generated/FREERTOS/tasks.c **** 
3929:../Dave/Generated/FREERTOS/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3930:../Dave/Generated/FREERTOS/tasks.c **** 					any other purpose if this task is running, and it must be
3931:../Dave/Generated/FREERTOS/tasks.c **** 					running to give back the mutex. */
3932:../Dave/Generated/FREERTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 6194              	 .loc 1 3932 0
 6195 00b2 3B69     	 ldr r3,[r7,#16]
 6196 00b4 DB6A     	 ldr r3,[r3,#44]
 6197 00b6 C3F10502 	 rsb r2,r3,#5
 6198 00ba 3B69     	 ldr r3,[r7,#16]
 6199 00bc 9A61     	 str r2,[r3,#24]
3933:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6200              	 .loc 1 3933 0
 6201 00be 3B69     	 ldr r3,[r7,#16]
 6202 00c0 DB6A     	 ldr r3,[r3,#44]
 6203 00c2 1A46     	 mov r2,r3
 6204 00c4 0123     	 movs r3,#1
 6205 00c6 03FA02F2 	 lsl r2,r3,r2
 6206 00ca 0F4B     	 ldr r3,.L436+8
 6207 00cc 1B68     	 ldr r3,[r3]
 6208 00ce 1343     	 orrs r3,r3,r2
 6209 00d0 0D4A     	 ldr r2,.L436+8
 6210 00d2 1360     	 str r3,[r2]
 6211 00d4 3B69     	 ldr r3,[r7,#16]
 6212 00d6 DA6A     	 ldr r2,[r3,#44]
 6213 00d8 1346     	 mov r3,r2
 6214 00da 9B00     	 lsls r3,r3,#2
 6215 00dc 1344     	 add r3,r3,r2
 6216 00de 9B00     	 lsls r3,r3,#2
 6217 00e0 084A     	 ldr r2,.L436+4
 6218 00e2 1A44     	 add r2,r2,r3
 6219 00e4 3B69     	 ldr r3,[r7,#16]
 6220 00e6 0433     	 adds r3,r3,#4
 6221 00e8 1046     	 mov r0,r2
 6222 00ea 1946     	 mov r1,r3
 6223 00ec FFF7FEFF 	 bl vListInsertEnd
3934:../Dave/Generated/FREERTOS/tasks.c **** 
3935:../Dave/Generated/FREERTOS/tasks.c **** 					/* Return true to indicate that a context switch is required.
3936:../Dave/Generated/FREERTOS/tasks.c **** 					This is only actually required in the corner case whereby
3937:../Dave/Generated/FREERTOS/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3938:../Dave/Generated/FREERTOS/tasks.c **** 					in an order different to that in which they were taken.
3939:../Dave/Generated/FREERTOS/tasks.c **** 					If a context switch did not occur when the first mutex was
3940:../Dave/Generated/FREERTOS/tasks.c **** 					returned, even if a task was waiting on it, then a context
3941:../Dave/Generated/FREERTOS/tasks.c **** 					switch should occur when the last mutex is returned whether
3942:../Dave/Generated/FREERTOS/tasks.c **** 					a task is waiting on it or not. */
3943:../Dave/Generated/FREERTOS/tasks.c **** 					xReturn = pdTRUE;
 6224              	 .loc 1 3943 0
 6225 00f0 0123     	 movs r3,#1
 6226 00f2 7B61     	 str r3,[r7,#20]
 6227              	.L428:
3944:../Dave/Generated/FREERTOS/tasks.c **** 				}
3945:../Dave/Generated/FREERTOS/tasks.c **** 				else
3946:../Dave/Generated/FREERTOS/tasks.c **** 				{
3947:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3948:../Dave/Generated/FREERTOS/tasks.c **** 				}
3949:../Dave/Generated/FREERTOS/tasks.c **** 			}
3950:../Dave/Generated/FREERTOS/tasks.c **** 			else
3951:../Dave/Generated/FREERTOS/tasks.c **** 			{
3952:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3953:../Dave/Generated/FREERTOS/tasks.c **** 			}
3954:../Dave/Generated/FREERTOS/tasks.c **** 		}
3955:../Dave/Generated/FREERTOS/tasks.c **** 		else
3956:../Dave/Generated/FREERTOS/tasks.c **** 		{
3957:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3958:../Dave/Generated/FREERTOS/tasks.c **** 		}
3959:../Dave/Generated/FREERTOS/tasks.c **** 
3960:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 6228              	 .loc 1 3960 0
 6229 00f4 7B69     	 ldr r3,[r7,#20]
3961:../Dave/Generated/FREERTOS/tasks.c **** 	}
 6230              	 .loc 1 3961 0
 6231 00f6 1846     	 mov r0,r3
 6232 00f8 1837     	 adds r7,r7,#24
 6233              	 .cfi_def_cfa_offset 8
 6234 00fa BD46     	 mov sp,r7
 6235              	 .cfi_def_cfa_register 13
 6236              	 
 6237 00fc 80BD     	 pop {r7,pc}
 6238              	.L437:
 6239 00fe 00BF     	 .align 2
 6240              	.L436:
 6241 0100 00000000 	 .word pxCurrentTCB
 6242 0104 00000000 	 .word pxReadyTasksLists
 6243 0108 00000000 	 .word uxTopReadyPriority
 6244              	 .cfi_endproc
 6245              	.LFE191:
 6247              	 .section .text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 6248              	 .align 2
 6249              	 .global vTaskPriorityDisinheritAfterTimeout
 6250              	 .thumb
 6251              	 .thumb_func
 6253              	vTaskPriorityDisinheritAfterTimeout:
 6254              	.LFB192:
3962:../Dave/Generated/FREERTOS/tasks.c **** 
3963:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_MUTEXES */
3964:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3965:../Dave/Generated/FREERTOS/tasks.c **** 
3966:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3967:../Dave/Generated/FREERTOS/tasks.c **** 
3968:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
3969:../Dave/Generated/FREERTOS/tasks.c **** 	{
 6255              	 .loc 1 3969 0
 6256              	 .cfi_startproc
 6257              	 
 6258              	 
 6259 0000 80B5     	 push {r7,lr}
 6260              	 .cfi_def_cfa_offset 8
 6261              	 .cfi_offset 7,-8
 6262              	 .cfi_offset 14,-4
 6263 0002 88B0     	 sub sp,sp,#32
 6264              	 .cfi_def_cfa_offset 40
 6265 0004 00AF     	 add r7,sp,#0
 6266              	 .cfi_def_cfa_register 7
 6267 0006 7860     	 str r0,[r7,#4]
 6268 0008 3960     	 str r1,[r7]
3970:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 6269              	 .loc 1 3970 0
 6270 000a 7B68     	 ldr r3,[r7,#4]
 6271 000c BB61     	 str r3,[r7,#24]
3971:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
3972:../Dave/Generated/FREERTOS/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 6272              	 .loc 1 3972 0
 6273 000e 0123     	 movs r3,#1
 6274 0010 7B61     	 str r3,[r7,#20]
3973:../Dave/Generated/FREERTOS/tasks.c **** 
3974:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxMutexHolder != NULL )
 6275              	 .loc 1 3974 0
 6276 0012 7B68     	 ldr r3,[r7,#4]
 6277 0014 002B     	 cmp r3,#0
 6278 0016 00F08880 	 beq .L438
3975:../Dave/Generated/FREERTOS/tasks.c **** 		{
3976:../Dave/Generated/FREERTOS/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
3977:../Dave/Generated/FREERTOS/tasks.c **** 			one mutex. */
3978:../Dave/Generated/FREERTOS/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6279              	 .loc 1 3978 0
 6280 001a BB69     	 ldr r3,[r7,#24]
 6281 001c 1B6D     	 ldr r3,[r3,#80]
 6282 001e 002B     	 cmp r3,#0
 6283 0020 09D1     	 bne .L440
 6284              	.LBB202:
 6285              	.LBB203:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 6286              	 .loc 2 195 0 discriminator 1
 6287              	
 6288 0022 4FF0FC03 	 mov r3,#252
 6289 0026 83F31188 	 msr basepri,r3
 6290 002a BFF36F8F 	 isb 
 6291 002e BFF34F8F 	 dsb 
 6292              	
 6293              	
 6294              	 .thumb
 6295 0032 FB60     	 str r3,[r7,#12]
 6296              	.L441:
 6297              	.LBE203:
 6298              	.LBE202:
 6299              	 .loc 1 3978 0 discriminator 1
 6300 0034 FEE7     	 b .L441
 6301              	.L440:
3979:../Dave/Generated/FREERTOS/tasks.c **** 
3980:../Dave/Generated/FREERTOS/tasks.c **** 			/* Determine the priority to which the priority of the task that
3981:../Dave/Generated/FREERTOS/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
3982:../Dave/Generated/FREERTOS/tasks.c **** 			holding task's base priority and the priority of the highest
3983:../Dave/Generated/FREERTOS/tasks.c **** 			priority task that is waiting to obtain the mutex. */
3984:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 6302              	 .loc 1 3984 0
 6303 0036 BB69     	 ldr r3,[r7,#24]
 6304 0038 DA6C     	 ldr r2,[r3,#76]
 6305 003a 3B68     	 ldr r3,[r7]
 6306 003c 9A42     	 cmp r2,r3
 6307 003e 02D2     	 bcs .L442
3985:../Dave/Generated/FREERTOS/tasks.c **** 			{
3986:../Dave/Generated/FREERTOS/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
 6308              	 .loc 1 3986 0
 6309 0040 3B68     	 ldr r3,[r7]
 6310 0042 FB61     	 str r3,[r7,#28]
 6311 0044 02E0     	 b .L443
 6312              	.L442:
3987:../Dave/Generated/FREERTOS/tasks.c **** 			}
3988:../Dave/Generated/FREERTOS/tasks.c **** 			else
3989:../Dave/Generated/FREERTOS/tasks.c **** 			{
3990:../Dave/Generated/FREERTOS/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
 6313              	 .loc 1 3990 0
 6314 0046 BB69     	 ldr r3,[r7,#24]
 6315 0048 DB6C     	 ldr r3,[r3,#76]
 6316 004a FB61     	 str r3,[r7,#28]
 6317              	.L443:
3991:../Dave/Generated/FREERTOS/tasks.c **** 			}
3992:../Dave/Generated/FREERTOS/tasks.c **** 
3993:../Dave/Generated/FREERTOS/tasks.c **** 			/* Does the priority need to change? */
3994:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
 6318              	 .loc 1 3994 0
 6319 004c BB69     	 ldr r3,[r7,#24]
 6320 004e DA6A     	 ldr r2,[r3,#44]
 6321 0050 FB69     	 ldr r3,[r7,#28]
 6322 0052 9A42     	 cmp r2,r3
 6323 0054 69D0     	 beq .L438
3995:../Dave/Generated/FREERTOS/tasks.c **** 			{
3996:../Dave/Generated/FREERTOS/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
3997:../Dave/Generated/FREERTOS/tasks.c **** 				simplification in the priority inheritance implementation.  If
3998:../Dave/Generated/FREERTOS/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
3999:../Dave/Generated/FREERTOS/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4000:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 6324              	 .loc 1 4000 0
 6325 0056 BB69     	 ldr r3,[r7,#24]
 6326 0058 1A6D     	 ldr r2,[r3,#80]
 6327 005a 7B69     	 ldr r3,[r7,#20]
 6328 005c 9A42     	 cmp r2,r3
 6329 005e 64D1     	 bne .L438
4001:../Dave/Generated/FREERTOS/tasks.c **** 				{
4002:../Dave/Generated/FREERTOS/tasks.c **** 					/* If a task has timed out because it already holds the
4003:../Dave/Generated/FREERTOS/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4004:../Dave/Generated/FREERTOS/tasks.c **** 					its own priority. */
4005:../Dave/Generated/FREERTOS/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
 6330              	 .loc 1 4005 0
 6331 0060 334B     	 ldr r3,.L451
 6332 0062 1B68     	 ldr r3,[r3]
 6333 0064 BA69     	 ldr r2,[r7,#24]
 6334 0066 9A42     	 cmp r2,r3
 6335 0068 09D1     	 bne .L444
 6336              	.LBB204:
 6337              	.LBB205:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 6338              	 .loc 2 195 0 discriminator 1
 6339              	
 6340 006a 4FF0FC03 	 mov r3,#252
 6341 006e 83F31188 	 msr basepri,r3
 6342 0072 BFF36F8F 	 isb 
 6343 0076 BFF34F8F 	 dsb 
 6344              	
 6345              	
 6346              	 .thumb
 6347 007a BB60     	 str r3,[r7,#8]
 6348              	.L445:
 6349              	.LBE205:
 6350              	.LBE204:
 6351              	 .loc 1 4005 0 discriminator 2
 6352 007c FEE7     	 b .L445
 6353              	.L444:
4006:../Dave/Generated/FREERTOS/tasks.c **** 
4007:../Dave/Generated/FREERTOS/tasks.c **** 					/* Disinherit the priority, remembering the previous
4008:../Dave/Generated/FREERTOS/tasks.c **** 					priority to facilitate determining the subject task's
4009:../Dave/Generated/FREERTOS/tasks.c **** 					state. */
4010:../Dave/Generated/FREERTOS/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4011:../Dave/Generated/FREERTOS/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 6354              	 .loc 1 4011 0
 6355 007e BB69     	 ldr r3,[r7,#24]
 6356 0080 DB6A     	 ldr r3,[r3,#44]
 6357 0082 3B61     	 str r3,[r7,#16]
4012:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
 6358              	 .loc 1 4012 0
 6359 0084 BB69     	 ldr r3,[r7,#24]
 6360 0086 FA69     	 ldr r2,[r7,#28]
 6361 0088 DA62     	 str r2,[r3,#44]
4013:../Dave/Generated/FREERTOS/tasks.c **** 
4014:../Dave/Generated/FREERTOS/tasks.c **** 					/* Only reset the event list item value if the value is not
4015:../Dave/Generated/FREERTOS/tasks.c **** 					being used for anything else. */
4016:../Dave/Generated/FREERTOS/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
 6362              	 .loc 1 4016 0
 6363 008a BB69     	 ldr r3,[r7,#24]
 6364 008c 9B69     	 ldr r3,[r3,#24]
 6365 008e 002B     	 cmp r3,#0
 6366 0090 04DB     	 blt .L446
4017:../Dave/Generated/FREERTOS/tasks.c **** 					{
4018:../Dave/Generated/FREERTOS/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
 6367              	 .loc 1 4018 0
 6368 0092 FB69     	 ldr r3,[r7,#28]
 6369 0094 C3F10502 	 rsb r2,r3,#5
 6370 0098 BB69     	 ldr r3,[r7,#24]
 6371 009a 9A61     	 str r2,[r3,#24]
 6372              	.L446:
4019:../Dave/Generated/FREERTOS/tasks.c **** 					}
4020:../Dave/Generated/FREERTOS/tasks.c **** 					else
4021:../Dave/Generated/FREERTOS/tasks.c **** 					{
4022:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4023:../Dave/Generated/FREERTOS/tasks.c **** 					}
4024:../Dave/Generated/FREERTOS/tasks.c **** 
4025:../Dave/Generated/FREERTOS/tasks.c **** 					/* If the running task is not the task that holds the mutex
4026:../Dave/Generated/FREERTOS/tasks.c **** 					then the task that holds the mutex could be in either the
4027:../Dave/Generated/FREERTOS/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4028:../Dave/Generated/FREERTOS/tasks.c **** 					from its current state list if it is in the Ready state as
4029:../Dave/Generated/FREERTOS/tasks.c **** 					the task's priority is going to change and there is one
4030:../Dave/Generated/FREERTOS/tasks.c **** 					Ready list per priority. */
4031:../Dave/Generated/FREERTOS/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
 6373              	 .loc 1 4031 0
 6374 009c BB69     	 ldr r3,[r7,#24]
 6375 009e 5969     	 ldr r1,[r3,#20]
 6376 00a0 3A69     	 ldr r2,[r7,#16]
 6377 00a2 1346     	 mov r3,r2
 6378 00a4 9B00     	 lsls r3,r3,#2
 6379 00a6 1344     	 add r3,r3,r2
 6380 00a8 9B00     	 lsls r3,r3,#2
 6381 00aa 224A     	 ldr r2,.L451+4
 6382 00ac 1344     	 add r3,r3,r2
 6383 00ae 9942     	 cmp r1,r3
 6384 00b0 01D1     	 bne .L447
 6385              	 .loc 1 4031 0 is_stmt 0 discriminator 1
 6386 00b2 0123     	 movs r3,#1
 6387 00b4 00E0     	 b .L448
 6388              	.L447:
 6389              	 .loc 1 4031 0 discriminator 2
 6390 00b6 0023     	 movs r3,#0
 6391              	.L448:
 6392              	 .loc 1 4031 0 discriminator 4
 6393 00b8 002B     	 cmp r3,#0
 6394 00ba 36D0     	 beq .L438
4032:../Dave/Generated/FREERTOS/tasks.c **** 					{
4033:../Dave/Generated/FREERTOS/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6395              	 .loc 1 4033 0 is_stmt 1
 6396 00bc BB69     	 ldr r3,[r7,#24]
 6397 00be 0433     	 adds r3,r3,#4
 6398 00c0 1846     	 mov r0,r3
 6399 00c2 FFF7FEFF 	 bl uxListRemove
 6400 00c6 0346     	 mov r3,r0
 6401 00c8 002B     	 cmp r3,#0
 6402 00ca 15D1     	 bne .L449
4034:../Dave/Generated/FREERTOS/tasks.c **** 						{
4035:../Dave/Generated/FREERTOS/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 6403              	 .loc 1 4035 0
 6404 00cc BB69     	 ldr r3,[r7,#24]
 6405 00ce DA6A     	 ldr r2,[r3,#44]
 6406 00d0 1849     	 ldr r1,.L451+4
 6407 00d2 1346     	 mov r3,r2
 6408 00d4 9B00     	 lsls r3,r3,#2
 6409 00d6 1344     	 add r3,r3,r2
 6410 00d8 9B00     	 lsls r3,r3,#2
 6411 00da 0B44     	 add r3,r3,r1
 6412 00dc 1B68     	 ldr r3,[r3]
 6413 00de 002B     	 cmp r3,#0
 6414 00e0 0AD1     	 bne .L449
 6415              	 .loc 1 4035 0 is_stmt 0 discriminator 1
 6416 00e2 BB69     	 ldr r3,[r7,#24]
 6417 00e4 DB6A     	 ldr r3,[r3,#44]
 6418 00e6 1A46     	 mov r2,r3
 6419 00e8 0123     	 movs r3,#1
 6420 00ea 9340     	 lsls r3,r3,r2
 6421 00ec DA43     	 mvns r2,r3
 6422 00ee 124B     	 ldr r3,.L451+8
 6423 00f0 1B68     	 ldr r3,[r3]
 6424 00f2 1340     	 ands r3,r3,r2
 6425 00f4 104A     	 ldr r2,.L451+8
 6426 00f6 1360     	 str r3,[r2]
 6427              	.L449:
4036:../Dave/Generated/FREERTOS/tasks.c **** 						}
4037:../Dave/Generated/FREERTOS/tasks.c **** 						else
4038:../Dave/Generated/FREERTOS/tasks.c **** 						{
4039:../Dave/Generated/FREERTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4040:../Dave/Generated/FREERTOS/tasks.c **** 						}
4041:../Dave/Generated/FREERTOS/tasks.c **** 
4042:../Dave/Generated/FREERTOS/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
 6428              	 .loc 1 4042 0 is_stmt 1
 6429 00f8 BB69     	 ldr r3,[r7,#24]
 6430 00fa DB6A     	 ldr r3,[r3,#44]
 6431 00fc 1A46     	 mov r2,r3
 6432 00fe 0123     	 movs r3,#1
 6433 0100 03FA02F2 	 lsl r2,r3,r2
 6434 0104 0C4B     	 ldr r3,.L451+8
 6435 0106 1B68     	 ldr r3,[r3]
 6436 0108 1343     	 orrs r3,r3,r2
 6437 010a 0B4A     	 ldr r2,.L451+8
 6438 010c 1360     	 str r3,[r2]
 6439 010e BB69     	 ldr r3,[r7,#24]
 6440 0110 DA6A     	 ldr r2,[r3,#44]
 6441 0112 1346     	 mov r3,r2
 6442 0114 9B00     	 lsls r3,r3,#2
 6443 0116 1344     	 add r3,r3,r2
 6444 0118 9B00     	 lsls r3,r3,#2
 6445 011a 064A     	 ldr r2,.L451+4
 6446 011c 1A44     	 add r2,r2,r3
 6447 011e BB69     	 ldr r3,[r7,#24]
 6448 0120 0433     	 adds r3,r3,#4
 6449 0122 1046     	 mov r0,r2
 6450 0124 1946     	 mov r1,r3
 6451 0126 FFF7FEFF 	 bl vListInsertEnd
 6452              	.L438:
4043:../Dave/Generated/FREERTOS/tasks.c **** 					}
4044:../Dave/Generated/FREERTOS/tasks.c **** 					else
4045:../Dave/Generated/FREERTOS/tasks.c **** 					{
4046:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4047:../Dave/Generated/FREERTOS/tasks.c **** 					}
4048:../Dave/Generated/FREERTOS/tasks.c **** 				}
4049:../Dave/Generated/FREERTOS/tasks.c **** 				else
4050:../Dave/Generated/FREERTOS/tasks.c **** 				{
4051:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4052:../Dave/Generated/FREERTOS/tasks.c **** 				}
4053:../Dave/Generated/FREERTOS/tasks.c **** 			}
4054:../Dave/Generated/FREERTOS/tasks.c **** 			else
4055:../Dave/Generated/FREERTOS/tasks.c **** 			{
4056:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4057:../Dave/Generated/FREERTOS/tasks.c **** 			}
4058:../Dave/Generated/FREERTOS/tasks.c **** 		}
4059:../Dave/Generated/FREERTOS/tasks.c **** 		else
4060:../Dave/Generated/FREERTOS/tasks.c **** 		{
4061:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4062:../Dave/Generated/FREERTOS/tasks.c **** 		}
4063:../Dave/Generated/FREERTOS/tasks.c **** 	}
 6453              	 .loc 1 4063 0
 6454 012a 2037     	 adds r7,r7,#32
 6455              	 .cfi_def_cfa_offset 8
 6456 012c BD46     	 mov sp,r7
 6457              	 .cfi_def_cfa_register 13
 6458              	 
 6459 012e 80BD     	 pop {r7,pc}
 6460              	.L452:
 6461              	 .align 2
 6462              	.L451:
 6463 0130 00000000 	 .word pxCurrentTCB
 6464 0134 00000000 	 .word pxReadyTasksLists
 6465 0138 00000000 	 .word uxTopReadyPriority
 6466              	 .cfi_endproc
 6467              	.LFE192:
 6469              	 .section .text.prvWriteNameToBuffer,"ax",%progbits
 6470              	 .align 2
 6471              	 .thumb
 6472              	 .thumb_func
 6474              	prvWriteNameToBuffer:
 6475              	.LFB193:
4064:../Dave/Generated/FREERTOS/tasks.c **** 
4065:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4066:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4067:../Dave/Generated/FREERTOS/tasks.c **** 
4068:../Dave/Generated/FREERTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4069:../Dave/Generated/FREERTOS/tasks.c **** 
4070:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskEnterCritical( void )
4071:../Dave/Generated/FREERTOS/tasks.c **** 	{
4072:../Dave/Generated/FREERTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
4073:../Dave/Generated/FREERTOS/tasks.c **** 
4074:../Dave/Generated/FREERTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4075:../Dave/Generated/FREERTOS/tasks.c **** 		{
4076:../Dave/Generated/FREERTOS/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4077:../Dave/Generated/FREERTOS/tasks.c **** 
4078:../Dave/Generated/FREERTOS/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4079:../Dave/Generated/FREERTOS/tasks.c **** 			function so	assert() if it is being called from an interrupt
4080:../Dave/Generated/FREERTOS/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4081:../Dave/Generated/FREERTOS/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4082:../Dave/Generated/FREERTOS/tasks.c **** 			protect against recursive calls if the assert function also uses a
4083:../Dave/Generated/FREERTOS/tasks.c **** 			critical section. */
4084:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4085:../Dave/Generated/FREERTOS/tasks.c **** 			{
4086:../Dave/Generated/FREERTOS/tasks.c **** 				portASSERT_IF_IN_ISR();
4087:../Dave/Generated/FREERTOS/tasks.c **** 			}
4088:../Dave/Generated/FREERTOS/tasks.c **** 		}
4089:../Dave/Generated/FREERTOS/tasks.c **** 		else
4090:../Dave/Generated/FREERTOS/tasks.c **** 		{
4091:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4092:../Dave/Generated/FREERTOS/tasks.c **** 		}
4093:../Dave/Generated/FREERTOS/tasks.c **** 	}
4094:../Dave/Generated/FREERTOS/tasks.c **** 
4095:../Dave/Generated/FREERTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4096:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4097:../Dave/Generated/FREERTOS/tasks.c **** 
4098:../Dave/Generated/FREERTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4099:../Dave/Generated/FREERTOS/tasks.c **** 
4100:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskExitCritical( void )
4101:../Dave/Generated/FREERTOS/tasks.c **** 	{
4102:../Dave/Generated/FREERTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4103:../Dave/Generated/FREERTOS/tasks.c **** 		{
4104:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4105:../Dave/Generated/FREERTOS/tasks.c **** 			{
4106:../Dave/Generated/FREERTOS/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4107:../Dave/Generated/FREERTOS/tasks.c **** 
4108:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4109:../Dave/Generated/FREERTOS/tasks.c **** 				{
4110:../Dave/Generated/FREERTOS/tasks.c **** 					portENABLE_INTERRUPTS();
4111:../Dave/Generated/FREERTOS/tasks.c **** 				}
4112:../Dave/Generated/FREERTOS/tasks.c **** 				else
4113:../Dave/Generated/FREERTOS/tasks.c **** 				{
4114:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4115:../Dave/Generated/FREERTOS/tasks.c **** 				}
4116:../Dave/Generated/FREERTOS/tasks.c **** 			}
4117:../Dave/Generated/FREERTOS/tasks.c **** 			else
4118:../Dave/Generated/FREERTOS/tasks.c **** 			{
4119:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4120:../Dave/Generated/FREERTOS/tasks.c **** 			}
4121:../Dave/Generated/FREERTOS/tasks.c **** 		}
4122:../Dave/Generated/FREERTOS/tasks.c **** 		else
4123:../Dave/Generated/FREERTOS/tasks.c **** 		{
4124:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4125:../Dave/Generated/FREERTOS/tasks.c **** 		}
4126:../Dave/Generated/FREERTOS/tasks.c **** 	}
4127:../Dave/Generated/FREERTOS/tasks.c **** 
4128:../Dave/Generated/FREERTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4129:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4130:../Dave/Generated/FREERTOS/tasks.c **** 
4131:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4132:../Dave/Generated/FREERTOS/tasks.c **** 
4133:../Dave/Generated/FREERTOS/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4134:../Dave/Generated/FREERTOS/tasks.c **** 	{
 6476              	 .loc 1 4134 0
 6477              	 .cfi_startproc
 6478              	 
 6479              	 
 6480 0000 80B5     	 push {r7,lr}
 6481              	 .cfi_def_cfa_offset 8
 6482              	 .cfi_offset 7,-8
 6483              	 .cfi_offset 14,-4
 6484 0002 84B0     	 sub sp,sp,#16
 6485              	 .cfi_def_cfa_offset 24
 6486 0004 00AF     	 add r7,sp,#0
 6487              	 .cfi_def_cfa_register 7
 6488 0006 7860     	 str r0,[r7,#4]
 6489 0008 3960     	 str r1,[r7]
4135:../Dave/Generated/FREERTOS/tasks.c **** 	size_t x;
4136:../Dave/Generated/FREERTOS/tasks.c **** 
4137:../Dave/Generated/FREERTOS/tasks.c **** 		/* Start by copying the entire string. */
4138:../Dave/Generated/FREERTOS/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
 6490              	 .loc 1 4138 0
 6491 000a 7868     	 ldr r0,[r7,#4]
 6492 000c 3968     	 ldr r1,[r7]
 6493 000e FFF7FEFF 	 bl strcpy
4139:../Dave/Generated/FREERTOS/tasks.c **** 
4140:../Dave/Generated/FREERTOS/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4141:../Dave/Generated/FREERTOS/tasks.c **** 		printed out. */
4142:../Dave/Generated/FREERTOS/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 6494              	 .loc 1 4142 0
 6495 0012 7868     	 ldr r0,[r7,#4]
 6496 0014 FFF7FEFF 	 bl strlen
 6497 0018 F860     	 str r0,[r7,#12]
 6498 001a 07E0     	 b .L454
 6499              	.L455:
4143:../Dave/Generated/FREERTOS/tasks.c **** 		{
4144:../Dave/Generated/FREERTOS/tasks.c **** 			pcBuffer[ x ] = ' ';
 6500              	 .loc 1 4144 0 discriminator 3
 6501 001c 7A68     	 ldr r2,[r7,#4]
 6502 001e FB68     	 ldr r3,[r7,#12]
 6503 0020 1344     	 add r3,r3,r2
 6504 0022 2022     	 movs r2,#32
 6505 0024 1A70     	 strb r2,[r3]
4142:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6506              	 .loc 1 4142 0 discriminator 3
 6507 0026 FB68     	 ldr r3,[r7,#12]
 6508 0028 0133     	 adds r3,r3,#1
 6509 002a FB60     	 str r3,[r7,#12]
 6510              	.L454:
4142:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6511              	 .loc 1 4142 0 is_stmt 0 discriminator 1
 6512 002c FB68     	 ldr r3,[r7,#12]
 6513 002e 0E2B     	 cmp r3,#14
 6514 0030 F4D9     	 bls .L455
4145:../Dave/Generated/FREERTOS/tasks.c **** 		}
4146:../Dave/Generated/FREERTOS/tasks.c **** 
4147:../Dave/Generated/FREERTOS/tasks.c **** 		/* Terminate. */
4148:../Dave/Generated/FREERTOS/tasks.c **** 		pcBuffer[ x ] = 0x00;
 6515              	 .loc 1 4148 0 is_stmt 1
 6516 0032 7A68     	 ldr r2,[r7,#4]
 6517 0034 FB68     	 ldr r3,[r7,#12]
 6518 0036 1344     	 add r3,r3,r2
 6519 0038 0022     	 movs r2,#0
 6520 003a 1A70     	 strb r2,[r3]
4149:../Dave/Generated/FREERTOS/tasks.c **** 
4150:../Dave/Generated/FREERTOS/tasks.c **** 		/* Return the new end of string. */
4151:../Dave/Generated/FREERTOS/tasks.c **** 		return &( pcBuffer[ x ] );
 6521              	 .loc 1 4151 0
 6522 003c 7A68     	 ldr r2,[r7,#4]
 6523 003e FB68     	 ldr r3,[r7,#12]
 6524 0040 1344     	 add r3,r3,r2
4152:../Dave/Generated/FREERTOS/tasks.c **** 	}
 6525              	 .loc 1 4152 0
 6526 0042 1846     	 mov r0,r3
 6527 0044 1037     	 adds r7,r7,#16
 6528              	 .cfi_def_cfa_offset 8
 6529 0046 BD46     	 mov sp,r7
 6530              	 .cfi_def_cfa_register 13
 6531              	 
 6532 0048 80BD     	 pop {r7,pc}
 6533              	 .cfi_endproc
 6534              	.LFE193:
 6536 004a 00BF     	 .section .rodata
 6537 0005 000000   	 .align 2
 6538              	.LC1:
 6539 0008 09256309 	 .ascii "\011%c\011%u\011%u\011%u\015\012\000"
 6539      25750925 
 6539      75092575 
 6539      0D0A00
 6540 0017 00       	 .section .text.vTaskList,"ax",%progbits
 6541              	 .align 2
 6542              	 .global vTaskList
 6543              	 .thumb
 6544              	 .thumb_func
 6546              	vTaskList:
 6547              	.LFB194:
4153:../Dave/Generated/FREERTOS/tasks.c **** 
4154:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4155:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4156:../Dave/Generated/FREERTOS/tasks.c **** 
4157:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4158:../Dave/Generated/FREERTOS/tasks.c **** 
4159:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4160:../Dave/Generated/FREERTOS/tasks.c **** 	{
 6548              	 .loc 1 4160 0
 6549              	 .cfi_startproc
 6550              	 
 6551              	 
 6552 0000 B0B5     	 push {r4,r5,r7,lr}
 6553              	 .cfi_def_cfa_offset 16
 6554              	 .cfi_offset 4,-16
 6555              	 .cfi_offset 5,-12
 6556              	 .cfi_offset 7,-8
 6557              	 .cfi_offset 14,-4
 6558 0002 88B0     	 sub sp,sp,#32
 6559              	 .cfi_def_cfa_offset 48
 6560 0004 02AF     	 add r7,sp,#8
 6561              	 .cfi_def_cfa 7,40
 6562 0006 7860     	 str r0,[r7,#4]
4161:../Dave/Generated/FREERTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4162:../Dave/Generated/FREERTOS/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4163:../Dave/Generated/FREERTOS/tasks.c **** 	char cStatus;
4164:../Dave/Generated/FREERTOS/tasks.c **** 
4165:../Dave/Generated/FREERTOS/tasks.c **** 		/*
4166:../Dave/Generated/FREERTOS/tasks.c **** 		 * PLEASE NOTE:
4167:../Dave/Generated/FREERTOS/tasks.c **** 		 *
4168:../Dave/Generated/FREERTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4169:../Dave/Generated/FREERTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4170:../Dave/Generated/FREERTOS/tasks.c **** 		 * scheduler.
4171:../Dave/Generated/FREERTOS/tasks.c **** 		 *
4172:../Dave/Generated/FREERTOS/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4173:../Dave/Generated/FREERTOS/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4174:../Dave/Generated/FREERTOS/tasks.c **** 		 * displays task names, states and stack usage.
4175:../Dave/Generated/FREERTOS/tasks.c **** 		 *
4176:../Dave/Generated/FREERTOS/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4177:../Dave/Generated/FREERTOS/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4178:../Dave/Generated/FREERTOS/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4179:../Dave/Generated/FREERTOS/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4180:../Dave/Generated/FREERTOS/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4181:../Dave/Generated/FREERTOS/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4182:../Dave/Generated/FREERTOS/tasks.c **** 		 * snprintf() implementation!).
4183:../Dave/Generated/FREERTOS/tasks.c **** 		 *
4184:../Dave/Generated/FREERTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4185:../Dave/Generated/FREERTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4186:../Dave/Generated/FREERTOS/tasks.c **** 		 * through a call to vTaskList().
4187:../Dave/Generated/FREERTOS/tasks.c **** 		 */
4188:../Dave/Generated/FREERTOS/tasks.c **** 
4189:../Dave/Generated/FREERTOS/tasks.c **** 
4190:../Dave/Generated/FREERTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4191:../Dave/Generated/FREERTOS/tasks.c **** 		*pcWriteBuffer = 0x00;
 6563              	 .loc 1 4191 0
 6564 0008 7B68     	 ldr r3,[r7,#4]
 6565 000a 0022     	 movs r2,#0
 6566 000c 1A70     	 strb r2,[r3]
4192:../Dave/Generated/FREERTOS/tasks.c **** 
4193:../Dave/Generated/FREERTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4194:../Dave/Generated/FREERTOS/tasks.c **** 		function is executing. */
4195:../Dave/Generated/FREERTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
 6567              	 .loc 1 4195 0
 6568 000e 464B     	 ldr r3,.L469
 6569 0010 1B68     	 ldr r3,[r3]
 6570 0012 FB60     	 str r3,[r7,#12]
4196:../Dave/Generated/FREERTOS/tasks.c **** 
4197:../Dave/Generated/FREERTOS/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4198:../Dave/Generated/FREERTOS/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4199:../Dave/Generated/FREERTOS/tasks.c **** 		equate to NULL. */
4200:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 6571              	 .loc 1 4200 0
 6572 0014 444B     	 ldr r3,.L469
 6573 0016 1A68     	 ldr r2,[r3]
 6574 0018 1346     	 mov r3,r2
 6575 001a DB00     	 lsls r3,r3,#3
 6576 001c 1344     	 add r3,r3,r2
 6577 001e 9B00     	 lsls r3,r3,#2
 6578 0020 1846     	 mov r0,r3
 6579 0022 FFF7FEFF 	 bl pvPortMalloc
 6580 0026 3861     	 str r0,[r7,#16]
4201:../Dave/Generated/FREERTOS/tasks.c **** 
4202:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
 6581              	 .loc 1 4202 0
 6582 0028 3B69     	 ldr r3,[r7,#16]
 6583 002a 002B     	 cmp r3,#0
 6584 002c 78D0     	 beq .L457
4203:../Dave/Generated/FREERTOS/tasks.c **** 		{
4204:../Dave/Generated/FREERTOS/tasks.c **** 			/* Generate the (binary) data. */
4205:../Dave/Generated/FREERTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 6585              	 .loc 1 4205 0
 6586 002e FB68     	 ldr r3,[r7,#12]
 6587 0030 3869     	 ldr r0,[r7,#16]
 6588 0032 1946     	 mov r1,r3
 6589 0034 0022     	 movs r2,#0
 6590 0036 FFF7FEFF 	 bl uxTaskGetSystemState
 6591 003a 0346     	 mov r3,r0
 6592 003c FB60     	 str r3,[r7,#12]
4206:../Dave/Generated/FREERTOS/tasks.c **** 
4207:../Dave/Generated/FREERTOS/tasks.c **** 			/* Create a human readable table from the binary data. */
4208:../Dave/Generated/FREERTOS/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
 6593              	 .loc 1 4208 0
 6594 003e 0023     	 movs r3,#0
 6595 0040 BB60     	 str r3,[r7,#8]
 6596 0042 66E0     	 b .L459
 6597              	.L468:
4209:../Dave/Generated/FREERTOS/tasks.c **** 			{
4210:../Dave/Generated/FREERTOS/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
 6598              	 .loc 1 4210 0
 6599 0044 BA68     	 ldr r2,[r7,#8]
 6600 0046 1346     	 mov r3,r2
 6601 0048 DB00     	 lsls r3,r3,#3
 6602 004a 1344     	 add r3,r3,r2
 6603 004c 9B00     	 lsls r3,r3,#2
 6604 004e 1A46     	 mov r2,r3
 6605 0050 3B69     	 ldr r3,[r7,#16]
 6606 0052 1344     	 add r3,r3,r2
 6607 0054 1B7B     	 ldrb r3,[r3,#12]
 6608 0056 042B     	 cmp r3,#4
 6609 0058 1BD8     	 bhi .L460
 6610 005a 01A2     	 adr r2,.L462
 6611 005c 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 6612              	 .p2align 2
 6613              	.L462:
 6614 0060 75000000 	 .word .L461+1
 6615 0064 7B000000 	 .word .L463+1
 6616 0068 81000000 	 .word .L464+1
 6617 006c 87000000 	 .word .L465+1
 6618 0070 8D000000 	 .word .L466+1
 6619              	 .p2align 1
 6620              	.L461:
4211:../Dave/Generated/FREERTOS/tasks.c **** 				{
4212:../Dave/Generated/FREERTOS/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
 6621              	 .loc 1 4212 0
 6622 0074 5823     	 movs r3,#88
 6623 0076 FB75     	 strb r3,[r7,#23]
4213:../Dave/Generated/FREERTOS/tasks.c **** 										break;
 6624              	 .loc 1 4213 0
 6625 0078 0EE0     	 b .L467
 6626              	.L463:
4214:../Dave/Generated/FREERTOS/tasks.c **** 
4215:../Dave/Generated/FREERTOS/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
 6627              	 .loc 1 4215 0
 6628 007a 5223     	 movs r3,#82
 6629 007c FB75     	 strb r3,[r7,#23]
4216:../Dave/Generated/FREERTOS/tasks.c **** 										break;
 6630              	 .loc 1 4216 0
 6631 007e 0BE0     	 b .L467
 6632              	.L464:
4217:../Dave/Generated/FREERTOS/tasks.c **** 
4218:../Dave/Generated/FREERTOS/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 6633              	 .loc 1 4218 0
 6634 0080 4223     	 movs r3,#66
 6635 0082 FB75     	 strb r3,[r7,#23]
4219:../Dave/Generated/FREERTOS/tasks.c **** 										break;
 6636              	 .loc 1 4219 0
 6637 0084 08E0     	 b .L467
 6638              	.L465:
4220:../Dave/Generated/FREERTOS/tasks.c **** 
4221:../Dave/Generated/FREERTOS/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 6639              	 .loc 1 4221 0
 6640 0086 5323     	 movs r3,#83
 6641 0088 FB75     	 strb r3,[r7,#23]
4222:../Dave/Generated/FREERTOS/tasks.c **** 										break;
 6642              	 .loc 1 4222 0
 6643 008a 05E0     	 b .L467
 6644              	.L466:
4223:../Dave/Generated/FREERTOS/tasks.c **** 
4224:../Dave/Generated/FREERTOS/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
 6645              	 .loc 1 4224 0
 6646 008c 4423     	 movs r3,#68
 6647 008e FB75     	 strb r3,[r7,#23]
4225:../Dave/Generated/FREERTOS/tasks.c **** 										break;
 6648              	 .loc 1 4225 0
 6649 0090 02E0     	 b .L467
 6650              	.L460:
4226:../Dave/Generated/FREERTOS/tasks.c **** 
4227:../Dave/Generated/FREERTOS/tasks.c **** 					default:			/* Should not get here, but it is included
4228:../Dave/Generated/FREERTOS/tasks.c **** 										to prevent static checking errors. */
4229:../Dave/Generated/FREERTOS/tasks.c **** 										cStatus = 0x00;
 6651              	 .loc 1 4229 0
 6652 0092 0023     	 movs r3,#0
 6653 0094 FB75     	 strb r3,[r7,#23]
4230:../Dave/Generated/FREERTOS/tasks.c **** 										break;
 6654              	 .loc 1 4230 0
 6655 0096 00BF     	 nop
 6656              	.L467:
4231:../Dave/Generated/FREERTOS/tasks.c **** 				}
4232:../Dave/Generated/FREERTOS/tasks.c **** 
4233:../Dave/Generated/FREERTOS/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4234:../Dave/Generated/FREERTOS/tasks.c **** 				can be printed in tabular form more easily. */
4235:../Dave/Generated/FREERTOS/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 6657              	 .loc 1 4235 0 discriminator 2
 6658 0098 BA68     	 ldr r2,[r7,#8]
 6659 009a 1346     	 mov r3,r2
 6660 009c DB00     	 lsls r3,r3,#3
 6661 009e 1344     	 add r3,r3,r2
 6662 00a0 9B00     	 lsls r3,r3,#2
 6663 00a2 1A46     	 mov r2,r3
 6664 00a4 3B69     	 ldr r3,[r7,#16]
 6665 00a6 1344     	 add r3,r3,r2
 6666 00a8 5B68     	 ldr r3,[r3,#4]
 6667 00aa 7868     	 ldr r0,[r7,#4]
 6668 00ac 1946     	 mov r1,r3
 6669 00ae FFF7FEFF 	 bl prvWriteNameToBuffer
 6670 00b2 7860     	 str r0,[r7,#4]
4236:../Dave/Generated/FREERTOS/tasks.c **** 
4237:../Dave/Generated/FREERTOS/tasks.c **** 				/* Write the rest of the string. */
4238:../Dave/Generated/FREERTOS/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
 6671              	 .loc 1 4238 0 discriminator 2
 6672 00b4 FD7D     	 ldrb r5,[r7,#23]
 6673 00b6 BA68     	 ldr r2,[r7,#8]
 6674 00b8 1346     	 mov r3,r2
 6675 00ba DB00     	 lsls r3,r3,#3
 6676 00bc 1344     	 add r3,r3,r2
 6677 00be 9B00     	 lsls r3,r3,#2
 6678 00c0 1A46     	 mov r2,r3
 6679 00c2 3B69     	 ldr r3,[r7,#16]
 6680 00c4 1344     	 add r3,r3,r2
 6681 00c6 1C69     	 ldr r4,[r3,#16]
 6682 00c8 BA68     	 ldr r2,[r7,#8]
 6683 00ca 1346     	 mov r3,r2
 6684 00cc DB00     	 lsls r3,r3,#3
 6685 00ce 1344     	 add r3,r3,r2
 6686 00d0 9B00     	 lsls r3,r3,#2
 6687 00d2 1A46     	 mov r2,r3
 6688 00d4 3B69     	 ldr r3,[r7,#16]
 6689 00d6 1344     	 add r3,r3,r2
 6690 00d8 1B8C     	 ldrh r3,[r3,#32]
 6691 00da 1946     	 mov r1,r3
 6692 00dc BA68     	 ldr r2,[r7,#8]
 6693 00de 1346     	 mov r3,r2
 6694 00e0 DB00     	 lsls r3,r3,#3
 6695 00e2 1344     	 add r3,r3,r2
 6696 00e4 9B00     	 lsls r3,r3,#2
 6697 00e6 1A46     	 mov r2,r3
 6698 00e8 3B69     	 ldr r3,[r7,#16]
 6699 00ea 1344     	 add r3,r3,r2
 6700 00ec 9B68     	 ldr r3,[r3,#8]
 6701 00ee 0091     	 str r1,[sp]
 6702 00f0 0193     	 str r3,[sp,#4]
 6703 00f2 7868     	 ldr r0,[r7,#4]
 6704 00f4 0D49     	 ldr r1,.L469+4
 6705 00f6 2A46     	 mov r2,r5
 6706 00f8 2346     	 mov r3,r4
 6707 00fa FFF7FEFF 	 bl sprintf
4239:../Dave/Generated/FREERTOS/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
 6708              	 .loc 1 4239 0 discriminator 2
 6709 00fe 7868     	 ldr r0,[r7,#4]
 6710 0100 FFF7FEFF 	 bl strlen
 6711 0104 0246     	 mov r2,r0
 6712 0106 7B68     	 ldr r3,[r7,#4]
 6713 0108 1344     	 add r3,r3,r2
 6714 010a 7B60     	 str r3,[r7,#4]
4208:../Dave/Generated/FREERTOS/tasks.c **** 			{
 6715              	 .loc 1 4208 0 discriminator 2
 6716 010c BB68     	 ldr r3,[r7,#8]
 6717 010e 0133     	 adds r3,r3,#1
 6718 0110 BB60     	 str r3,[r7,#8]
 6719              	.L459:
4208:../Dave/Generated/FREERTOS/tasks.c **** 			{
 6720              	 .loc 1 4208 0 is_stmt 0 discriminator 1
 6721 0112 BA68     	 ldr r2,[r7,#8]
 6722 0114 FB68     	 ldr r3,[r7,#12]
 6723 0116 9A42     	 cmp r2,r3
 6724 0118 94D3     	 bcc .L468
4240:../Dave/Generated/FREERTOS/tasks.c **** 			}
4241:../Dave/Generated/FREERTOS/tasks.c **** 
4242:../Dave/Generated/FREERTOS/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4243:../Dave/Generated/FREERTOS/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4244:../Dave/Generated/FREERTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
 6725              	 .loc 1 4244 0 is_stmt 1
 6726 011a 3869     	 ldr r0,[r7,#16]
 6727 011c FFF7FEFF 	 bl vPortFree
 6728              	.L457:
4245:../Dave/Generated/FREERTOS/tasks.c **** 		}
4246:../Dave/Generated/FREERTOS/tasks.c **** 		else
4247:../Dave/Generated/FREERTOS/tasks.c **** 		{
4248:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4249:../Dave/Generated/FREERTOS/tasks.c **** 		}
4250:../Dave/Generated/FREERTOS/tasks.c **** 	}
 6729              	 .loc 1 4250 0
 6730 0120 1837     	 adds r7,r7,#24
 6731              	 .cfi_def_cfa_offset 16
 6732 0122 BD46     	 mov sp,r7
 6733              	 .cfi_def_cfa_register 13
 6734              	 
 6735 0124 B0BD     	 pop {r4,r5,r7,pc}
 6736              	.L470:
 6737 0126 00BF     	 .align 2
 6738              	.L469:
 6739 0128 00000000 	 .word uxCurrentNumberOfTasks
 6740 012c 08000000 	 .word .LC1
 6741              	 .cfi_endproc
 6742              	.LFE194:
 6744              	 .section .text.uxTaskResetEventItemValue,"ax",%progbits
 6745              	 .align 2
 6746              	 .global uxTaskResetEventItemValue
 6747              	 .thumb
 6748              	 .thumb_func
 6750              	uxTaskResetEventItemValue:
 6751              	.LFB195:
4251:../Dave/Generated/FREERTOS/tasks.c **** 
4252:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4253:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
4254:../Dave/Generated/FREERTOS/tasks.c **** 
4255:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4256:../Dave/Generated/FREERTOS/tasks.c **** 
4257:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4258:../Dave/Generated/FREERTOS/tasks.c **** 	{
4259:../Dave/Generated/FREERTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4260:../Dave/Generated/FREERTOS/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4261:../Dave/Generated/FREERTOS/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4262:../Dave/Generated/FREERTOS/tasks.c **** 
4263:../Dave/Generated/FREERTOS/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4264:../Dave/Generated/FREERTOS/tasks.c **** 		{
4265:../Dave/Generated/FREERTOS/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4266:../Dave/Generated/FREERTOS/tasks.c **** 		}
4267:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
4268:../Dave/Generated/FREERTOS/tasks.c **** 
4269:../Dave/Generated/FREERTOS/tasks.c **** 		/*
4270:../Dave/Generated/FREERTOS/tasks.c **** 		 * PLEASE NOTE:
4271:../Dave/Generated/FREERTOS/tasks.c **** 		 *
4272:../Dave/Generated/FREERTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4273:../Dave/Generated/FREERTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4274:../Dave/Generated/FREERTOS/tasks.c **** 		 * scheduler.
4275:../Dave/Generated/FREERTOS/tasks.c **** 		 *
4276:../Dave/Generated/FREERTOS/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4277:../Dave/Generated/FREERTOS/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4278:../Dave/Generated/FREERTOS/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4279:../Dave/Generated/FREERTOS/tasks.c **** 		 * in both absolute and percentage terms.
4280:../Dave/Generated/FREERTOS/tasks.c **** 		 *
4281:../Dave/Generated/FREERTOS/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4282:../Dave/Generated/FREERTOS/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4283:../Dave/Generated/FREERTOS/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4284:../Dave/Generated/FREERTOS/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4285:../Dave/Generated/FREERTOS/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4286:../Dave/Generated/FREERTOS/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4287:../Dave/Generated/FREERTOS/tasks.c **** 		 * a full snprintf() implementation!).
4288:../Dave/Generated/FREERTOS/tasks.c **** 		 *
4289:../Dave/Generated/FREERTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4290:../Dave/Generated/FREERTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4291:../Dave/Generated/FREERTOS/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4292:../Dave/Generated/FREERTOS/tasks.c **** 		 */
4293:../Dave/Generated/FREERTOS/tasks.c **** 
4294:../Dave/Generated/FREERTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4295:../Dave/Generated/FREERTOS/tasks.c **** 		*pcWriteBuffer = 0x00;
4296:../Dave/Generated/FREERTOS/tasks.c **** 
4297:../Dave/Generated/FREERTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4298:../Dave/Generated/FREERTOS/tasks.c **** 		function is executing. */
4299:../Dave/Generated/FREERTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4300:../Dave/Generated/FREERTOS/tasks.c **** 
4301:../Dave/Generated/FREERTOS/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4302:../Dave/Generated/FREERTOS/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4303:../Dave/Generated/FREERTOS/tasks.c **** 		equate to NULL. */
4304:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4305:../Dave/Generated/FREERTOS/tasks.c **** 
4306:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
4307:../Dave/Generated/FREERTOS/tasks.c **** 		{
4308:../Dave/Generated/FREERTOS/tasks.c **** 			/* Generate the (binary) data. */
4309:../Dave/Generated/FREERTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4310:../Dave/Generated/FREERTOS/tasks.c **** 
4311:../Dave/Generated/FREERTOS/tasks.c **** 			/* For percentage calculations. */
4312:../Dave/Generated/FREERTOS/tasks.c **** 			ulTotalTime /= 100UL;
4313:../Dave/Generated/FREERTOS/tasks.c **** 
4314:../Dave/Generated/FREERTOS/tasks.c **** 			/* Avoid divide by zero errors. */
4315:../Dave/Generated/FREERTOS/tasks.c **** 			if( ulTotalTime > 0 )
4316:../Dave/Generated/FREERTOS/tasks.c **** 			{
4317:../Dave/Generated/FREERTOS/tasks.c **** 				/* Create a human readable table from the binary data. */
4318:../Dave/Generated/FREERTOS/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4319:../Dave/Generated/FREERTOS/tasks.c **** 				{
4320:../Dave/Generated/FREERTOS/tasks.c **** 					/* What percentage of the total run time has the task used?
4321:../Dave/Generated/FREERTOS/tasks.c **** 					This will always be rounded down to the nearest integer.
4322:../Dave/Generated/FREERTOS/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4323:../Dave/Generated/FREERTOS/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4324:../Dave/Generated/FREERTOS/tasks.c **** 
4325:../Dave/Generated/FREERTOS/tasks.c **** 					/* Write the task name to the string, padding with
4326:../Dave/Generated/FREERTOS/tasks.c **** 					spaces so it can be printed in tabular form more
4327:../Dave/Generated/FREERTOS/tasks.c **** 					easily. */
4328:../Dave/Generated/FREERTOS/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4329:../Dave/Generated/FREERTOS/tasks.c **** 
4330:../Dave/Generated/FREERTOS/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4331:../Dave/Generated/FREERTOS/tasks.c **** 					{
4332:../Dave/Generated/FREERTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4333:../Dave/Generated/FREERTOS/tasks.c **** 						{
4334:../Dave/Generated/FREERTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4335:../Dave/Generated/FREERTOS/tasks.c **** 						}
4336:../Dave/Generated/FREERTOS/tasks.c **** 						#else
4337:../Dave/Generated/FREERTOS/tasks.c **** 						{
4338:../Dave/Generated/FREERTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4339:../Dave/Generated/FREERTOS/tasks.c **** 							printf() library can be used. */
4340:../Dave/Generated/FREERTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4341:../Dave/Generated/FREERTOS/tasks.c **** 						}
4342:../Dave/Generated/FREERTOS/tasks.c **** 						#endif
4343:../Dave/Generated/FREERTOS/tasks.c **** 					}
4344:../Dave/Generated/FREERTOS/tasks.c **** 					else
4345:../Dave/Generated/FREERTOS/tasks.c **** 					{
4346:../Dave/Generated/FREERTOS/tasks.c **** 						/* If the percentage is zero here then the task has
4347:../Dave/Generated/FREERTOS/tasks.c **** 						consumed less than 1% of the total run time. */
4348:../Dave/Generated/FREERTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4349:../Dave/Generated/FREERTOS/tasks.c **** 						{
4350:../Dave/Generated/FREERTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4351:../Dave/Generated/FREERTOS/tasks.c **** 						}
4352:../Dave/Generated/FREERTOS/tasks.c **** 						#else
4353:../Dave/Generated/FREERTOS/tasks.c **** 						{
4354:../Dave/Generated/FREERTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4355:../Dave/Generated/FREERTOS/tasks.c **** 							printf() library can be used. */
4356:../Dave/Generated/FREERTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4357:../Dave/Generated/FREERTOS/tasks.c **** 						}
4358:../Dave/Generated/FREERTOS/tasks.c **** 						#endif
4359:../Dave/Generated/FREERTOS/tasks.c **** 					}
4360:../Dave/Generated/FREERTOS/tasks.c **** 
4361:../Dave/Generated/FREERTOS/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4362:../Dave/Generated/FREERTOS/tasks.c **** 				}
4363:../Dave/Generated/FREERTOS/tasks.c **** 			}
4364:../Dave/Generated/FREERTOS/tasks.c **** 			else
4365:../Dave/Generated/FREERTOS/tasks.c **** 			{
4366:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4367:../Dave/Generated/FREERTOS/tasks.c **** 			}
4368:../Dave/Generated/FREERTOS/tasks.c **** 
4369:../Dave/Generated/FREERTOS/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4370:../Dave/Generated/FREERTOS/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4371:../Dave/Generated/FREERTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
4372:../Dave/Generated/FREERTOS/tasks.c **** 		}
4373:../Dave/Generated/FREERTOS/tasks.c **** 		else
4374:../Dave/Generated/FREERTOS/tasks.c **** 		{
4375:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4376:../Dave/Generated/FREERTOS/tasks.c **** 		}
4377:../Dave/Generated/FREERTOS/tasks.c **** 	}
4378:../Dave/Generated/FREERTOS/tasks.c **** 
4379:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4380:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4381:../Dave/Generated/FREERTOS/tasks.c **** 
4382:../Dave/Generated/FREERTOS/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4383:../Dave/Generated/FREERTOS/tasks.c **** {
 6752              	 .loc 1 4383 0
 6753              	 .cfi_startproc
 6754              	 
 6755              	 
 6756              	 
 6757 0000 80B4     	 push {r7}
 6758              	 .cfi_def_cfa_offset 4
 6759              	 .cfi_offset 7,-4
 6760 0002 83B0     	 sub sp,sp,#12
 6761              	 .cfi_def_cfa_offset 16
 6762 0004 00AF     	 add r7,sp,#0
 6763              	 .cfi_def_cfa_register 7
4384:../Dave/Generated/FREERTOS/tasks.c **** TickType_t uxReturn;
4385:../Dave/Generated/FREERTOS/tasks.c **** 
4386:../Dave/Generated/FREERTOS/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 6764              	 .loc 1 4386 0
 6765 0006 094B     	 ldr r3,.L473
 6766 0008 1B68     	 ldr r3,[r3]
 6767 000a 9B69     	 ldr r3,[r3,#24]
 6768 000c 7B60     	 str r3,[r7,#4]
4387:../Dave/Generated/FREERTOS/tasks.c **** 
4388:../Dave/Generated/FREERTOS/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4389:../Dave/Generated/FREERTOS/tasks.c **** 	queues and semaphores. */
4390:../Dave/Generated/FREERTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 6769              	 .loc 1 4390 0
 6770 000e 074B     	 ldr r3,.L473
 6771 0010 1B68     	 ldr r3,[r3]
 6772 0012 064A     	 ldr r2,.L473
 6773 0014 1268     	 ldr r2,[r2]
 6774 0016 D26A     	 ldr r2,[r2,#44]
 6775 0018 C2F10502 	 rsb r2,r2,#5
 6776 001c 9A61     	 str r2,[r3,#24]
4391:../Dave/Generated/FREERTOS/tasks.c **** 
4392:../Dave/Generated/FREERTOS/tasks.c **** 	return uxReturn;
 6777              	 .loc 1 4392 0
 6778 001e 7B68     	 ldr r3,[r7,#4]
4393:../Dave/Generated/FREERTOS/tasks.c **** }
 6779              	 .loc 1 4393 0
 6780 0020 1846     	 mov r0,r3
 6781 0022 0C37     	 adds r7,r7,#12
 6782              	 .cfi_def_cfa_offset 4
 6783 0024 BD46     	 mov sp,r7
 6784              	 .cfi_def_cfa_register 13
 6785              	 
 6786 0026 5DF8047B 	 ldr r7,[sp],#4
 6787              	 .cfi_restore 7
 6788              	 .cfi_def_cfa_offset 0
 6789 002a 7047     	 bx lr
 6790              	.L474:
 6791              	 .align 2
 6792              	.L473:
 6793 002c 00000000 	 .word pxCurrentTCB
 6794              	 .cfi_endproc
 6795              	.LFE195:
 6797              	 .section .text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 6798              	 .align 2
 6799              	 .global pvTaskIncrementMutexHeldCount
 6800              	 .thumb
 6801              	 .thumb_func
 6803              	pvTaskIncrementMutexHeldCount:
 6804              	.LFB196:
4394:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4395:../Dave/Generated/FREERTOS/tasks.c **** 
4396:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4397:../Dave/Generated/FREERTOS/tasks.c **** 
4398:../Dave/Generated/FREERTOS/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4399:../Dave/Generated/FREERTOS/tasks.c **** 	{
 6805              	 .loc 1 4399 0
 6806              	 .cfi_startproc
 6807              	 
 6808              	 
 6809              	 
 6810 0000 80B4     	 push {r7}
 6811              	 .cfi_def_cfa_offset 4
 6812              	 .cfi_offset 7,-4
 6813 0002 00AF     	 add r7,sp,#0
 6814              	 .cfi_def_cfa_register 7
4400:../Dave/Generated/FREERTOS/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4401:../Dave/Generated/FREERTOS/tasks.c **** 		then pxCurrentTCB will be NULL. */
4402:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxCurrentTCB != NULL )
 6815              	 .loc 1 4402 0
 6816 0004 074B     	 ldr r3,.L478
 6817 0006 1B68     	 ldr r3,[r3]
 6818 0008 002B     	 cmp r3,#0
 6819 000a 04D0     	 beq .L476
4403:../Dave/Generated/FREERTOS/tasks.c **** 		{
4404:../Dave/Generated/FREERTOS/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 6820              	 .loc 1 4404 0
 6821 000c 054B     	 ldr r3,.L478
 6822 000e 1B68     	 ldr r3,[r3]
 6823 0010 1A6D     	 ldr r2,[r3,#80]
 6824 0012 0132     	 adds r2,r2,#1
 6825 0014 1A65     	 str r2,[r3,#80]
 6826              	.L476:
4405:../Dave/Generated/FREERTOS/tasks.c **** 		}
4406:../Dave/Generated/FREERTOS/tasks.c **** 
4407:../Dave/Generated/FREERTOS/tasks.c **** 		return pxCurrentTCB;
 6827              	 .loc 1 4407 0
 6828 0016 034B     	 ldr r3,.L478
 6829 0018 1B68     	 ldr r3,[r3]
4408:../Dave/Generated/FREERTOS/tasks.c **** 	}
 6830              	 .loc 1 4408 0
 6831 001a 1846     	 mov r0,r3
 6832 001c BD46     	 mov sp,r7
 6833              	 .cfi_def_cfa_register 13
 6834              	 
 6835 001e 5DF8047B 	 ldr r7,[sp],#4
 6836              	 .cfi_restore 7
 6837              	 .cfi_def_cfa_offset 0
 6838 0022 7047     	 bx lr
 6839              	.L479:
 6840              	 .align 2
 6841              	.L478:
 6842 0024 00000000 	 .word pxCurrentTCB
 6843              	 .cfi_endproc
 6844              	.LFE196:
 6846              	 .section .text.ulTaskNotifyTake,"ax",%progbits
 6847              	 .align 2
 6848              	 .global ulTaskNotifyTake
 6849              	 .thumb
 6850              	 .thumb_func
 6852              	ulTaskNotifyTake:
 6853              	.LFB197:
4409:../Dave/Generated/FREERTOS/tasks.c **** 
4410:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4411:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4412:../Dave/Generated/FREERTOS/tasks.c **** 
4413:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4414:../Dave/Generated/FREERTOS/tasks.c **** 
4415:../Dave/Generated/FREERTOS/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4416:../Dave/Generated/FREERTOS/tasks.c **** 	{
 6854              	 .loc 1 4416 0
 6855              	 .cfi_startproc
 6856              	 
 6857              	 
 6858 0000 80B5     	 push {r7,lr}
 6859              	 .cfi_def_cfa_offset 8
 6860              	 .cfi_offset 7,-8
 6861              	 .cfi_offset 14,-4
 6862 0002 84B0     	 sub sp,sp,#16
 6863              	 .cfi_def_cfa_offset 24
 6864 0004 00AF     	 add r7,sp,#0
 6865              	 .cfi_def_cfa_register 7
 6866 0006 7860     	 str r0,[r7,#4]
 6867 0008 3960     	 str r1,[r7]
4417:../Dave/Generated/FREERTOS/tasks.c **** 	uint32_t ulReturn;
4418:../Dave/Generated/FREERTOS/tasks.c **** 
4419:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
 6868              	 .loc 1 4419 0
 6869 000a FFF7FEFF 	 bl vPortEnterCritical
4420:../Dave/Generated/FREERTOS/tasks.c **** 		{
4421:../Dave/Generated/FREERTOS/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4422:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 6870              	 .loc 1 4422 0
 6871 000e 1E4B     	 ldr r3,.L486
 6872 0010 1B68     	 ldr r3,[r3]
 6873 0012 9B6E     	 ldr r3,[r3,#104]
 6874 0014 002B     	 cmp r3,#0
 6875 0016 13D1     	 bne .L481
4423:../Dave/Generated/FREERTOS/tasks.c **** 			{
4424:../Dave/Generated/FREERTOS/tasks.c **** 				/* Mark this task as waiting for a notification. */
4425:../Dave/Generated/FREERTOS/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 6876              	 .loc 1 4425 0
 6877 0018 1B4B     	 ldr r3,.L486
 6878 001a 1B68     	 ldr r3,[r3]
 6879 001c 0122     	 movs r2,#1
 6880 001e 83F86C20 	 strb r2,[r3,#108]
4426:../Dave/Generated/FREERTOS/tasks.c **** 
4427:../Dave/Generated/FREERTOS/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 6881              	 .loc 1 4427 0
 6882 0022 3B68     	 ldr r3,[r7]
 6883 0024 002B     	 cmp r3,#0
 6884 0026 0BD0     	 beq .L481
4428:../Dave/Generated/FREERTOS/tasks.c **** 				{
4429:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 6885              	 .loc 1 4429 0
 6886 0028 3868     	 ldr r0,[r7]
 6887 002a 0121     	 movs r1,#1
 6888 002c FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
4430:../Dave/Generated/FREERTOS/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4431:../Dave/Generated/FREERTOS/tasks.c **** 
4432:../Dave/Generated/FREERTOS/tasks.c **** 					/* All ports are written to allow a yield in a critical
4433:../Dave/Generated/FREERTOS/tasks.c **** 					section (some will yield immediately, others wait until the
4434:../Dave/Generated/FREERTOS/tasks.c **** 					critical section exits) - but it is not something that
4435:../Dave/Generated/FREERTOS/tasks.c **** 					application code should ever do. */
4436:../Dave/Generated/FREERTOS/tasks.c **** 					portYIELD_WITHIN_API();
 6889              	 .loc 1 4436 0
 6890 0030 164B     	 ldr r3,.L486+4
 6891 0032 4FF08052 	 mov r2,#268435456
 6892 0036 1A60     	 str r2,[r3]
 6893              	
 6894 0038 BFF34F8F 	 dsb
 6895              	
 6896              	
 6897 003c BFF36F8F 	 isb
 6898              	
 6899              	 .thumb
 6900              	.L481:
4437:../Dave/Generated/FREERTOS/tasks.c **** 				}
4438:../Dave/Generated/FREERTOS/tasks.c **** 				else
4439:../Dave/Generated/FREERTOS/tasks.c **** 				{
4440:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4441:../Dave/Generated/FREERTOS/tasks.c **** 				}
4442:../Dave/Generated/FREERTOS/tasks.c **** 			}
4443:../Dave/Generated/FREERTOS/tasks.c **** 			else
4444:../Dave/Generated/FREERTOS/tasks.c **** 			{
4445:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4446:../Dave/Generated/FREERTOS/tasks.c **** 			}
4447:../Dave/Generated/FREERTOS/tasks.c **** 		}
4448:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
 6901              	 .loc 1 4448 0
 6902 0040 FFF7FEFF 	 bl vPortExitCritical
4449:../Dave/Generated/FREERTOS/tasks.c **** 
4450:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
 6903              	 .loc 1 4450 0
 6904 0044 FFF7FEFF 	 bl vPortEnterCritical
4451:../Dave/Generated/FREERTOS/tasks.c **** 		{
4452:../Dave/Generated/FREERTOS/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4453:../Dave/Generated/FREERTOS/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 6905              	 .loc 1 4453 0
 6906 0048 0F4B     	 ldr r3,.L486
 6907 004a 1B68     	 ldr r3,[r3]
 6908 004c 9B6E     	 ldr r3,[r3,#104]
 6909 004e FB60     	 str r3,[r7,#12]
4454:../Dave/Generated/FREERTOS/tasks.c **** 
4455:../Dave/Generated/FREERTOS/tasks.c **** 			if( ulReturn != 0UL )
 6910              	 .loc 1 4455 0
 6911 0050 FB68     	 ldr r3,[r7,#12]
 6912 0052 002B     	 cmp r3,#0
 6913 0054 0CD0     	 beq .L482
4456:../Dave/Generated/FREERTOS/tasks.c **** 			{
4457:../Dave/Generated/FREERTOS/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 6914              	 .loc 1 4457 0
 6915 0056 7B68     	 ldr r3,[r7,#4]
 6916 0058 002B     	 cmp r3,#0
 6917 005a 04D0     	 beq .L483
4458:../Dave/Generated/FREERTOS/tasks.c **** 				{
4459:../Dave/Generated/FREERTOS/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 6918              	 .loc 1 4459 0
 6919 005c 0A4B     	 ldr r3,.L486
 6920 005e 1B68     	 ldr r3,[r3]
 6921 0060 0022     	 movs r2,#0
 6922 0062 9A66     	 str r2,[r3,#104]
 6923 0064 04E0     	 b .L482
 6924              	.L483:
4460:../Dave/Generated/FREERTOS/tasks.c **** 				}
4461:../Dave/Generated/FREERTOS/tasks.c **** 				else
4462:../Dave/Generated/FREERTOS/tasks.c **** 				{
4463:../Dave/Generated/FREERTOS/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 6925              	 .loc 1 4463 0
 6926 0066 084B     	 ldr r3,.L486
 6927 0068 1B68     	 ldr r3,[r3]
 6928 006a FA68     	 ldr r2,[r7,#12]
 6929 006c 013A     	 subs r2,r2,#1
 6930 006e 9A66     	 str r2,[r3,#104]
 6931              	.L482:
4464:../Dave/Generated/FREERTOS/tasks.c **** 				}
4465:../Dave/Generated/FREERTOS/tasks.c **** 			}
4466:../Dave/Generated/FREERTOS/tasks.c **** 			else
4467:../Dave/Generated/FREERTOS/tasks.c **** 			{
4468:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4469:../Dave/Generated/FREERTOS/tasks.c **** 			}
4470:../Dave/Generated/FREERTOS/tasks.c **** 
4471:../Dave/Generated/FREERTOS/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 6932              	 .loc 1 4471 0
 6933 0070 054B     	 ldr r3,.L486
 6934 0072 1B68     	 ldr r3,[r3]
 6935 0074 0022     	 movs r2,#0
 6936 0076 83F86C20 	 strb r2,[r3,#108]
4472:../Dave/Generated/FREERTOS/tasks.c **** 		}
4473:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
 6937              	 .loc 1 4473 0
 6938 007a FFF7FEFF 	 bl vPortExitCritical
4474:../Dave/Generated/FREERTOS/tasks.c **** 
4475:../Dave/Generated/FREERTOS/tasks.c **** 		return ulReturn;
 6939              	 .loc 1 4475 0
 6940 007e FB68     	 ldr r3,[r7,#12]
4476:../Dave/Generated/FREERTOS/tasks.c **** 	}
 6941              	 .loc 1 4476 0
 6942 0080 1846     	 mov r0,r3
 6943 0082 1037     	 adds r7,r7,#16
 6944              	 .cfi_def_cfa_offset 8
 6945 0084 BD46     	 mov sp,r7
 6946              	 .cfi_def_cfa_register 13
 6947              	 
 6948 0086 80BD     	 pop {r7,pc}
 6949              	.L487:
 6950              	 .align 2
 6951              	.L486:
 6952 0088 00000000 	 .word pxCurrentTCB
 6953 008c 04ED00E0 	 .word -536810236
 6954              	 .cfi_endproc
 6955              	.LFE197:
 6957              	 .section .text.xTaskNotifyWait,"ax",%progbits
 6958              	 .align 2
 6959              	 .global xTaskNotifyWait
 6960              	 .thumb
 6961              	 .thumb_func
 6963              	xTaskNotifyWait:
 6964              	.LFB198:
4477:../Dave/Generated/FREERTOS/tasks.c **** 
4478:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4479:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4480:../Dave/Generated/FREERTOS/tasks.c **** 
4481:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4482:../Dave/Generated/FREERTOS/tasks.c **** 
4483:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4484:../Dave/Generated/FREERTOS/tasks.c **** 	{
 6965              	 .loc 1 4484 0
 6966              	 .cfi_startproc
 6967              	 
 6968              	 
 6969 0000 80B5     	 push {r7,lr}
 6970              	 .cfi_def_cfa_offset 8
 6971              	 .cfi_offset 7,-8
 6972              	 .cfi_offset 14,-4
 6973 0002 86B0     	 sub sp,sp,#24
 6974              	 .cfi_def_cfa_offset 32
 6975 0004 00AF     	 add r7,sp,#0
 6976              	 .cfi_def_cfa_register 7
 6977 0006 F860     	 str r0,[r7,#12]
 6978 0008 B960     	 str r1,[r7,#8]
 6979 000a 7A60     	 str r2,[r7,#4]
 6980 000c 3B60     	 str r3,[r7]
4485:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn;
4486:../Dave/Generated/FREERTOS/tasks.c **** 
4487:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
 6981              	 .loc 1 4487 0
 6982 000e FFF7FEFF 	 bl vPortEnterCritical
4488:../Dave/Generated/FREERTOS/tasks.c **** 		{
4489:../Dave/Generated/FREERTOS/tasks.c **** 			/* Only block if a notification is not already pending. */
4490:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 6983              	 .loc 1 4490 0
 6984 0012 264B     	 ldr r3,.L494
 6985 0014 1B68     	 ldr r3,[r3]
 6986 0016 93F86C30 	 ldrb r3,[r3,#108]
 6987 001a DBB2     	 uxtb r3,r3
 6988 001c 022B     	 cmp r3,#2
 6989 001e 1AD0     	 beq .L489
4491:../Dave/Generated/FREERTOS/tasks.c **** 			{
4492:../Dave/Generated/FREERTOS/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4493:../Dave/Generated/FREERTOS/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4494:../Dave/Generated/FREERTOS/tasks.c **** 				clear the value to zero. */
4495:../Dave/Generated/FREERTOS/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 6990              	 .loc 1 4495 0
 6991 0020 224B     	 ldr r3,.L494
 6992 0022 1B68     	 ldr r3,[r3]
 6993 0024 996E     	 ldr r1,[r3,#104]
 6994 0026 FA68     	 ldr r2,[r7,#12]
 6995 0028 D243     	 mvns r2,r2
 6996 002a 0A40     	 ands r2,r2,r1
 6997 002c 9A66     	 str r2,[r3,#104]
4496:../Dave/Generated/FREERTOS/tasks.c **** 
4497:../Dave/Generated/FREERTOS/tasks.c **** 				/* Mark this task as waiting for a notification. */
4498:../Dave/Generated/FREERTOS/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 6998              	 .loc 1 4498 0
 6999 002e 1F4B     	 ldr r3,.L494
 7000 0030 1B68     	 ldr r3,[r3]
 7001 0032 0122     	 movs r2,#1
 7002 0034 83F86C20 	 strb r2,[r3,#108]
4499:../Dave/Generated/FREERTOS/tasks.c **** 
4500:../Dave/Generated/FREERTOS/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 7003              	 .loc 1 4500 0
 7004 0038 3B68     	 ldr r3,[r7]
 7005 003a 002B     	 cmp r3,#0
 7006 003c 0BD0     	 beq .L489
4501:../Dave/Generated/FREERTOS/tasks.c **** 				{
4502:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 7007              	 .loc 1 4502 0
 7008 003e 3868     	 ldr r0,[r7]
 7009 0040 0121     	 movs r1,#1
 7010 0042 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
4503:../Dave/Generated/FREERTOS/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4504:../Dave/Generated/FREERTOS/tasks.c **** 
4505:../Dave/Generated/FREERTOS/tasks.c **** 					/* All ports are written to allow a yield in a critical
4506:../Dave/Generated/FREERTOS/tasks.c **** 					section (some will yield immediately, others wait until the
4507:../Dave/Generated/FREERTOS/tasks.c **** 					critical section exits) - but it is not something that
4508:../Dave/Generated/FREERTOS/tasks.c **** 					application code should ever do. */
4509:../Dave/Generated/FREERTOS/tasks.c **** 					portYIELD_WITHIN_API();
 7011              	 .loc 1 4509 0
 7012 0046 1A4B     	 ldr r3,.L494+4
 7013 0048 4FF08052 	 mov r2,#268435456
 7014 004c 1A60     	 str r2,[r3]
 7015              	
 7016 004e BFF34F8F 	 dsb
 7017              	
 7018              	
 7019 0052 BFF36F8F 	 isb
 7020              	
 7021              	 .thumb
 7022              	.L489:
4510:../Dave/Generated/FREERTOS/tasks.c **** 				}
4511:../Dave/Generated/FREERTOS/tasks.c **** 				else
4512:../Dave/Generated/FREERTOS/tasks.c **** 				{
4513:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4514:../Dave/Generated/FREERTOS/tasks.c **** 				}
4515:../Dave/Generated/FREERTOS/tasks.c **** 			}
4516:../Dave/Generated/FREERTOS/tasks.c **** 			else
4517:../Dave/Generated/FREERTOS/tasks.c **** 			{
4518:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4519:../Dave/Generated/FREERTOS/tasks.c **** 			}
4520:../Dave/Generated/FREERTOS/tasks.c **** 		}
4521:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
 7023              	 .loc 1 4521 0
 7024 0056 FFF7FEFF 	 bl vPortExitCritical
4522:../Dave/Generated/FREERTOS/tasks.c **** 
4523:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
 7025              	 .loc 1 4523 0
 7026 005a FFF7FEFF 	 bl vPortEnterCritical
4524:../Dave/Generated/FREERTOS/tasks.c **** 		{
4525:../Dave/Generated/FREERTOS/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4526:../Dave/Generated/FREERTOS/tasks.c **** 
4527:../Dave/Generated/FREERTOS/tasks.c **** 			if( pulNotificationValue != NULL )
 7027              	 .loc 1 4527 0
 7028 005e 7B68     	 ldr r3,[r7,#4]
 7029 0060 002B     	 cmp r3,#0
 7030 0062 04D0     	 beq .L490
4528:../Dave/Generated/FREERTOS/tasks.c **** 			{
4529:../Dave/Generated/FREERTOS/tasks.c **** 				/* Output the current notification value, which may or may not
4530:../Dave/Generated/FREERTOS/tasks.c **** 				have changed. */
4531:../Dave/Generated/FREERTOS/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 7031              	 .loc 1 4531 0
 7032 0064 114B     	 ldr r3,.L494
 7033 0066 1B68     	 ldr r3,[r3]
 7034 0068 9A6E     	 ldr r2,[r3,#104]
 7035 006a 7B68     	 ldr r3,[r7,#4]
 7036 006c 1A60     	 str r2,[r3]
 7037              	.L490:
4532:../Dave/Generated/FREERTOS/tasks.c **** 			}
4533:../Dave/Generated/FREERTOS/tasks.c **** 
4534:../Dave/Generated/FREERTOS/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4535:../Dave/Generated/FREERTOS/tasks.c **** 			blocked state (because a notification was already pending) or the
4536:../Dave/Generated/FREERTOS/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4537:../Dave/Generated/FREERTOS/tasks.c **** 			unblocked because of a timeout. */
4538:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 7038              	 .loc 1 4538 0
 7039 006e 0F4B     	 ldr r3,.L494
 7040 0070 1B68     	 ldr r3,[r3]
 7041 0072 93F86C30 	 ldrb r3,[r3,#108]
 7042 0076 DBB2     	 uxtb r3,r3
 7043 0078 022B     	 cmp r3,#2
 7044 007a 02D0     	 beq .L491
4539:../Dave/Generated/FREERTOS/tasks.c **** 			{
4540:../Dave/Generated/FREERTOS/tasks.c **** 				/* A notification was not received. */
4541:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdFALSE;
 7045              	 .loc 1 4541 0
 7046 007c 0023     	 movs r3,#0
 7047 007e 7B61     	 str r3,[r7,#20]
 7048 0080 08E0     	 b .L492
 7049              	.L491:
4542:../Dave/Generated/FREERTOS/tasks.c **** 			}
4543:../Dave/Generated/FREERTOS/tasks.c **** 			else
4544:../Dave/Generated/FREERTOS/tasks.c **** 			{
4545:../Dave/Generated/FREERTOS/tasks.c **** 				/* A notification was already pending or a notification was
4546:../Dave/Generated/FREERTOS/tasks.c **** 				received while the task was waiting. */
4547:../Dave/Generated/FREERTOS/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 7050              	 .loc 1 4547 0
 7051 0082 0A4B     	 ldr r3,.L494
 7052 0084 1B68     	 ldr r3,[r3]
 7053 0086 996E     	 ldr r1,[r3,#104]
 7054 0088 BA68     	 ldr r2,[r7,#8]
 7055 008a D243     	 mvns r2,r2
 7056 008c 0A40     	 ands r2,r2,r1
 7057 008e 9A66     	 str r2,[r3,#104]
4548:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdTRUE;
 7058              	 .loc 1 4548 0
 7059 0090 0123     	 movs r3,#1
 7060 0092 7B61     	 str r3,[r7,#20]
 7061              	.L492:
4549:../Dave/Generated/FREERTOS/tasks.c **** 			}
4550:../Dave/Generated/FREERTOS/tasks.c **** 
4551:../Dave/Generated/FREERTOS/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 7062              	 .loc 1 4551 0
 7063 0094 054B     	 ldr r3,.L494
 7064 0096 1B68     	 ldr r3,[r3]
 7065 0098 0022     	 movs r2,#0
 7066 009a 83F86C20 	 strb r2,[r3,#108]
4552:../Dave/Generated/FREERTOS/tasks.c **** 		}
4553:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
 7067              	 .loc 1 4553 0
 7068 009e FFF7FEFF 	 bl vPortExitCritical
4554:../Dave/Generated/FREERTOS/tasks.c **** 
4555:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 7069              	 .loc 1 4555 0
 7070 00a2 7B69     	 ldr r3,[r7,#20]
4556:../Dave/Generated/FREERTOS/tasks.c **** 	}
 7071              	 .loc 1 4556 0
 7072 00a4 1846     	 mov r0,r3
 7073 00a6 1837     	 adds r7,r7,#24
 7074              	 .cfi_def_cfa_offset 8
 7075 00a8 BD46     	 mov sp,r7
 7076              	 .cfi_def_cfa_register 13
 7077              	 
 7078 00aa 80BD     	 pop {r7,pc}
 7079              	.L495:
 7080              	 .align 2
 7081              	.L494:
 7082 00ac 00000000 	 .word pxCurrentTCB
 7083 00b0 04ED00E0 	 .word -536810236
 7084              	 .cfi_endproc
 7085              	.LFE198:
 7087              	 .section .text.xTaskGenericNotify,"ax",%progbits
 7088              	 .align 2
 7089              	 .global xTaskGenericNotify
 7090              	 .thumb
 7091              	 .thumb_func
 7093              	xTaskGenericNotify:
 7094              	.LFB199:
4557:../Dave/Generated/FREERTOS/tasks.c **** 
4558:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4559:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4560:../Dave/Generated/FREERTOS/tasks.c **** 
4561:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4562:../Dave/Generated/FREERTOS/tasks.c **** 
4563:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4564:../Dave/Generated/FREERTOS/tasks.c **** 	{
 7095              	 .loc 1 4564 0
 7096              	 .cfi_startproc
 7097              	 
 7098              	 
 7099 0000 80B5     	 push {r7,lr}
 7100              	 .cfi_def_cfa_offset 8
 7101              	 .cfi_offset 7,-8
 7102              	 .cfi_offset 14,-4
 7103 0002 8AB0     	 sub sp,sp,#40
 7104              	 .cfi_def_cfa_offset 48
 7105 0004 00AF     	 add r7,sp,#0
 7106              	 .cfi_def_cfa_register 7
 7107 0006 F860     	 str r0,[r7,#12]
 7108 0008 B960     	 str r1,[r7,#8]
 7109 000a 3B60     	 str r3,[r7]
 7110 000c 1346     	 mov r3,r2
 7111 000e FB71     	 strb r3,[r7,#7]
4565:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * pxTCB;
4566:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn = pdPASS;
 7112              	 .loc 1 4566 0
 7113 0010 0123     	 movs r3,#1
 7114 0012 7B62     	 str r3,[r7,#36]
4567:../Dave/Generated/FREERTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
4568:../Dave/Generated/FREERTOS/tasks.c **** 
4569:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( xTaskToNotify );
 7115              	 .loc 1 4569 0
 7116 0014 FB68     	 ldr r3,[r7,#12]
 7117 0016 002B     	 cmp r3,#0
 7118 0018 09D1     	 bne .L497
 7119              	.LBB206:
 7120              	.LBB207:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 7121              	 .loc 2 195 0 discriminator 1
 7122              	
 7123 001a 4FF0FC03 	 mov r3,#252
 7124 001e 83F31188 	 msr basepri,r3
 7125 0022 BFF36F8F 	 isb 
 7126 0026 BFF34F8F 	 dsb 
 7127              	
 7128              	
 7129              	 .thumb
 7130 002a BB61     	 str r3,[r7,#24]
 7131              	.L498:
 7132              	.LBE207:
 7133              	.LBE206:
 7134              	 .loc 1 4569 0 discriminator 1
 7135 002c FEE7     	 b .L498
 7136              	.L497:
4570:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 7137              	 .loc 1 4570 0
 7138 002e FB68     	 ldr r3,[r7,#12]
 7139 0030 3B62     	 str r3,[r7,#32]
4571:../Dave/Generated/FREERTOS/tasks.c **** 
4572:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
 7140              	 .loc 1 4572 0
 7141 0032 FFF7FEFF 	 bl vPortEnterCritical
4573:../Dave/Generated/FREERTOS/tasks.c **** 		{
4574:../Dave/Generated/FREERTOS/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 7142              	 .loc 1 4574 0
 7143 0036 3B68     	 ldr r3,[r7]
 7144 0038 002B     	 cmp r3,#0
 7145 003a 03D0     	 beq .L499
4575:../Dave/Generated/FREERTOS/tasks.c **** 			{
4576:../Dave/Generated/FREERTOS/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 7146              	 .loc 1 4576 0
 7147 003c 3B6A     	 ldr r3,[r7,#32]
 7148 003e 9A6E     	 ldr r2,[r3,#104]
 7149 0040 3B68     	 ldr r3,[r7]
 7150 0042 1A60     	 str r2,[r3]
 7151              	.L499:
4577:../Dave/Generated/FREERTOS/tasks.c **** 			}
4578:../Dave/Generated/FREERTOS/tasks.c **** 
4579:../Dave/Generated/FREERTOS/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7152              	 .loc 1 4579 0
 7153 0044 3B6A     	 ldr r3,[r7,#32]
 7154 0046 93F86C30 	 ldrb r3,[r3,#108]
 7155 004a FB77     	 strb r3,[r7,#31]
4580:../Dave/Generated/FREERTOS/tasks.c **** 
4581:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7156              	 .loc 1 4581 0
 7157 004c 3B6A     	 ldr r3,[r7,#32]
 7158 004e 0222     	 movs r2,#2
 7159 0050 83F86C20 	 strb r2,[r3,#108]
4582:../Dave/Generated/FREERTOS/tasks.c **** 
4583:../Dave/Generated/FREERTOS/tasks.c **** 			switch( eAction )
 7160              	 .loc 1 4583 0
 7161 0054 FB79     	 ldrb r3,[r7,#7]
 7162 0056 042B     	 cmp r3,#4
 7163 0058 27D8     	 bhi .L500
 7164 005a 01A2     	 adr r2,.L502
 7165 005c 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 7166              	 .p2align 2
 7167              	.L502:
 7168 0060 AB000000 	 .word .L500+1
 7169 0064 75000000 	 .word .L503+1
 7170 0068 83000000 	 .word .L504+1
 7171 006c 8F000000 	 .word .L505+1
 7172 0070 97000000 	 .word .L506+1
 7173              	 .p2align 1
 7174              	.L503:
4584:../Dave/Generated/FREERTOS/tasks.c **** 			{
4585:../Dave/Generated/FREERTOS/tasks.c **** 				case eSetBits	:
4586:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 7175              	 .loc 1 4586 0
 7176 0074 3B6A     	 ldr r3,[r7,#32]
 7177 0076 9A6E     	 ldr r2,[r3,#104]
 7178 0078 BB68     	 ldr r3,[r7,#8]
 7179 007a 1A43     	 orrs r2,r2,r3
 7180 007c 3B6A     	 ldr r3,[r7,#32]
 7181 007e 9A66     	 str r2,[r3,#104]
4587:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 7182              	 .loc 1 4587 0
 7183 0080 13E0     	 b .L500
 7184              	.L504:
4588:../Dave/Generated/FREERTOS/tasks.c **** 
4589:../Dave/Generated/FREERTOS/tasks.c **** 				case eIncrement	:
4590:../Dave/Generated/FREERTOS/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 7185              	 .loc 1 4590 0
 7186 0082 3B6A     	 ldr r3,[r7,#32]
 7187 0084 9B6E     	 ldr r3,[r3,#104]
 7188 0086 5A1C     	 adds r2,r3,#1
 7189 0088 3B6A     	 ldr r3,[r7,#32]
 7190 008a 9A66     	 str r2,[r3,#104]
4591:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 7191              	 .loc 1 4591 0
 7192 008c 0DE0     	 b .L500
 7193              	.L505:
4592:../Dave/Generated/FREERTOS/tasks.c **** 
4593:../Dave/Generated/FREERTOS/tasks.c **** 				case eSetValueWithOverwrite	:
4594:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 7194              	 .loc 1 4594 0
 7195 008e 3B6A     	 ldr r3,[r7,#32]
 7196 0090 BA68     	 ldr r2,[r7,#8]
 7197 0092 9A66     	 str r2,[r3,#104]
4595:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 7198              	 .loc 1 4595 0
 7199 0094 09E0     	 b .L500
 7200              	.L506:
4596:../Dave/Generated/FREERTOS/tasks.c **** 
4597:../Dave/Generated/FREERTOS/tasks.c **** 				case eSetValueWithoutOverwrite :
4598:../Dave/Generated/FREERTOS/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7201              	 .loc 1 4598 0
 7202 0096 FB7F     	 ldrb r3,[r7,#31]
 7203 0098 022B     	 cmp r3,#2
 7204 009a 03D0     	 beq .L507
4599:../Dave/Generated/FREERTOS/tasks.c **** 					{
4600:../Dave/Generated/FREERTOS/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 7205              	 .loc 1 4600 0
 7206 009c 3B6A     	 ldr r3,[r7,#32]
 7207 009e BA68     	 ldr r2,[r7,#8]
 7208 00a0 9A66     	 str r2,[r3,#104]
4601:../Dave/Generated/FREERTOS/tasks.c **** 					}
4602:../Dave/Generated/FREERTOS/tasks.c **** 					else
4603:../Dave/Generated/FREERTOS/tasks.c **** 					{
4604:../Dave/Generated/FREERTOS/tasks.c **** 						/* The value could not be written to the task. */
4605:../Dave/Generated/FREERTOS/tasks.c **** 						xReturn = pdFAIL;
4606:../Dave/Generated/FREERTOS/tasks.c **** 					}
4607:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 7209              	 .loc 1 4607 0
 7210 00a2 01E0     	 b .L513
 7211              	.L507:
4605:../Dave/Generated/FREERTOS/tasks.c **** 					}
 7212              	 .loc 1 4605 0
 7213 00a4 0023     	 movs r3,#0
 7214 00a6 7B62     	 str r3,[r7,#36]
 7215              	.L513:
 7216              	 .loc 1 4607 0
 7217 00a8 00BF     	 nop
 7218              	.L500:
4608:../Dave/Generated/FREERTOS/tasks.c **** 
4609:../Dave/Generated/FREERTOS/tasks.c **** 				case eNoAction:
4610:../Dave/Generated/FREERTOS/tasks.c **** 					/* The task is being notified without its notify value being
4611:../Dave/Generated/FREERTOS/tasks.c **** 					updated. */
4612:../Dave/Generated/FREERTOS/tasks.c **** 					break;
4613:../Dave/Generated/FREERTOS/tasks.c **** 			}
4614:../Dave/Generated/FREERTOS/tasks.c **** 
4615:../Dave/Generated/FREERTOS/tasks.c **** 			traceTASK_NOTIFY();
4616:../Dave/Generated/FREERTOS/tasks.c **** 
4617:../Dave/Generated/FREERTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4618:../Dave/Generated/FREERTOS/tasks.c **** 			notification then unblock it now. */
4619:../Dave/Generated/FREERTOS/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7219              	 .loc 1 4619 0
 7220 00aa FB7F     	 ldrb r3,[r7,#31]
 7221 00ac 012B     	 cmp r3,#1
 7222 00ae 3AD1     	 bne .L509
4620:../Dave/Generated/FREERTOS/tasks.c **** 			{
4621:../Dave/Generated/FREERTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7223              	 .loc 1 4621 0
 7224 00b0 3B6A     	 ldr r3,[r7,#32]
 7225 00b2 0433     	 adds r3,r3,#4
 7226 00b4 1846     	 mov r0,r3
 7227 00b6 FFF7FEFF 	 bl uxListRemove
4622:../Dave/Generated/FREERTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 7228              	 .loc 1 4622 0
 7229 00ba 3B6A     	 ldr r3,[r7,#32]
 7230 00bc DB6A     	 ldr r3,[r3,#44]
 7231 00be 1A46     	 mov r2,r3
 7232 00c0 0123     	 movs r3,#1
 7233 00c2 03FA02F2 	 lsl r2,r3,r2
 7234 00c6 1B4B     	 ldr r3,.L514
 7235 00c8 1B68     	 ldr r3,[r3]
 7236 00ca 1343     	 orrs r3,r3,r2
 7237 00cc 194A     	 ldr r2,.L514
 7238 00ce 1360     	 str r3,[r2]
 7239 00d0 3B6A     	 ldr r3,[r7,#32]
 7240 00d2 DA6A     	 ldr r2,[r3,#44]
 7241 00d4 1346     	 mov r3,r2
 7242 00d6 9B00     	 lsls r3,r3,#2
 7243 00d8 1344     	 add r3,r3,r2
 7244 00da 9B00     	 lsls r3,r3,#2
 7245 00dc 164A     	 ldr r2,.L514+4
 7246 00de 1A44     	 add r2,r2,r3
 7247 00e0 3B6A     	 ldr r3,[r7,#32]
 7248 00e2 0433     	 adds r3,r3,#4
 7249 00e4 1046     	 mov r0,r2
 7250 00e6 1946     	 mov r1,r3
 7251 00e8 FFF7FEFF 	 bl vListInsertEnd
4623:../Dave/Generated/FREERTOS/tasks.c **** 
4624:../Dave/Generated/FREERTOS/tasks.c **** 				/* The task should not have been on an event list. */
4625:../Dave/Generated/FREERTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7252              	 .loc 1 4625 0
 7253 00ec 3B6A     	 ldr r3,[r7,#32]
 7254 00ee 9B6A     	 ldr r3,[r3,#40]
 7255 00f0 002B     	 cmp r3,#0
 7256 00f2 09D0     	 beq .L510
 7257              	.LBB208:
 7258              	.LBB209:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 7259              	 .loc 2 195 0 discriminator 1
 7260              	
 7261 00f4 4FF0FC03 	 mov r3,#252
 7262 00f8 83F31188 	 msr basepri,r3
 7263 00fc BFF36F8F 	 isb 
 7264 0100 BFF34F8F 	 dsb 
 7265              	
 7266              	
 7267              	 .thumb
 7268 0104 7B61     	 str r3,[r7,#20]
 7269              	.L511:
 7270              	.LBE209:
 7271              	.LBE208:
 7272              	 .loc 1 4625 0 discriminator 2
 7273 0106 FEE7     	 b .L511
 7274              	.L510:
4626:../Dave/Generated/FREERTOS/tasks.c **** 
4627:../Dave/Generated/FREERTOS/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4628:../Dave/Generated/FREERTOS/tasks.c **** 				{
4629:../Dave/Generated/FREERTOS/tasks.c **** 					/* If a task is blocked waiting for a notification then
4630:../Dave/Generated/FREERTOS/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4631:../Dave/Generated/FREERTOS/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4632:../Dave/Generated/FREERTOS/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4633:../Dave/Generated/FREERTOS/tasks.c **** 					because it will automatically get reset to a new value when
4634:../Dave/Generated/FREERTOS/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4635:../Dave/Generated/FREERTOS/tasks.c **** 					tickless idling is used it might be more important to enter
4636:../Dave/Generated/FREERTOS/tasks.c **** 					sleep mode at the earliest possible time - so reset
4637:../Dave/Generated/FREERTOS/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4638:../Dave/Generated/FREERTOS/tasks.c **** 					earliest possible time. */
4639:../Dave/Generated/FREERTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
4640:../Dave/Generated/FREERTOS/tasks.c **** 				}
4641:../Dave/Generated/FREERTOS/tasks.c **** 				#endif
4642:../Dave/Generated/FREERTOS/tasks.c **** 
4643:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7275              	 .loc 1 4643 0
 7276 0108 3B6A     	 ldr r3,[r7,#32]
 7277 010a DA6A     	 ldr r2,[r3,#44]
 7278 010c 0B4B     	 ldr r3,.L514+8
 7279 010e 1B68     	 ldr r3,[r3]
 7280 0110 DB6A     	 ldr r3,[r3,#44]
 7281 0112 9A42     	 cmp r2,r3
 7282 0114 07D9     	 bls .L509
4644:../Dave/Generated/FREERTOS/tasks.c **** 				{
4645:../Dave/Generated/FREERTOS/tasks.c **** 					/* The notified task has a priority above the currently
4646:../Dave/Generated/FREERTOS/tasks.c **** 					executing task so a yield is required. */
4647:../Dave/Generated/FREERTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 7283              	 .loc 1 4647 0
 7284 0116 0A4B     	 ldr r3,.L514+12
 7285 0118 4FF08052 	 mov r2,#268435456
 7286 011c 1A60     	 str r2,[r3]
 7287              	
 7288 011e BFF34F8F 	 dsb
 7289              	
 7290              	
 7291 0122 BFF36F8F 	 isb
 7292              	
 7293              	 .thumb
 7294              	.L509:
4648:../Dave/Generated/FREERTOS/tasks.c **** 				}
4649:../Dave/Generated/FREERTOS/tasks.c **** 				else
4650:../Dave/Generated/FREERTOS/tasks.c **** 				{
4651:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4652:../Dave/Generated/FREERTOS/tasks.c **** 				}
4653:../Dave/Generated/FREERTOS/tasks.c **** 			}
4654:../Dave/Generated/FREERTOS/tasks.c **** 			else
4655:../Dave/Generated/FREERTOS/tasks.c **** 			{
4656:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4657:../Dave/Generated/FREERTOS/tasks.c **** 			}
4658:../Dave/Generated/FREERTOS/tasks.c **** 		}
4659:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
 7295              	 .loc 1 4659 0
 7296 0126 FFF7FEFF 	 bl vPortExitCritical
4660:../Dave/Generated/FREERTOS/tasks.c **** 
4661:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 7297              	 .loc 1 4661 0
 7298 012a 7B6A     	 ldr r3,[r7,#36]
4662:../Dave/Generated/FREERTOS/tasks.c **** 	}
 7299              	 .loc 1 4662 0
 7300 012c 1846     	 mov r0,r3
 7301 012e 2837     	 adds r7,r7,#40
 7302              	 .cfi_def_cfa_offset 8
 7303 0130 BD46     	 mov sp,r7
 7304              	 .cfi_def_cfa_register 13
 7305              	 
 7306 0132 80BD     	 pop {r7,pc}
 7307              	.L515:
 7308              	 .align 2
 7309              	.L514:
 7310 0134 00000000 	 .word uxTopReadyPriority
 7311 0138 00000000 	 .word pxReadyTasksLists
 7312 013c 00000000 	 .word pxCurrentTCB
 7313 0140 04ED00E0 	 .word -536810236
 7314              	 .cfi_endproc
 7315              	.LFE199:
 7317              	 .section .text.xTaskGenericNotifyFromISR,"ax",%progbits
 7318              	 .align 2
 7319              	 .global xTaskGenericNotifyFromISR
 7320              	 .thumb
 7321              	 .thumb_func
 7323              	xTaskGenericNotifyFromISR:
 7324              	.LFB200:
4663:../Dave/Generated/FREERTOS/tasks.c **** 
4664:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4665:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4666:../Dave/Generated/FREERTOS/tasks.c **** 
4667:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4668:../Dave/Generated/FREERTOS/tasks.c **** 
4669:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4670:../Dave/Generated/FREERTOS/tasks.c **** 	{
 7325              	 .loc 1 4670 0
 7326              	 .cfi_startproc
 7327              	 
 7328              	 
 7329 0000 80B5     	 push {r7,lr}
 7330              	 .cfi_def_cfa_offset 8
 7331              	 .cfi_offset 7,-8
 7332              	 .cfi_offset 14,-4
 7333 0002 8EB0     	 sub sp,sp,#56
 7334              	 .cfi_def_cfa_offset 64
 7335 0004 00AF     	 add r7,sp,#0
 7336              	 .cfi_def_cfa_register 7
 7337 0006 F860     	 str r0,[r7,#12]
 7338 0008 B960     	 str r1,[r7,#8]
 7339 000a 3B60     	 str r3,[r7]
 7340 000c 1346     	 mov r3,r2
 7341 000e FB71     	 strb r3,[r7,#7]
4671:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * pxTCB;
4672:../Dave/Generated/FREERTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
4673:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn = pdPASS;
 7342              	 .loc 1 4673 0
 7343 0010 0123     	 movs r3,#1
 7344 0012 7B63     	 str r3,[r7,#52]
4674:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4675:../Dave/Generated/FREERTOS/tasks.c **** 
4676:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( xTaskToNotify );
 7345              	 .loc 1 4676 0
 7346 0014 FB68     	 ldr r3,[r7,#12]
 7347 0016 002B     	 cmp r3,#0
 7348 0018 09D1     	 bne .L517
 7349              	.LBB210:
 7350              	.LBB211:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 7351              	 .loc 2 195 0 discriminator 1
 7352              	
 7353 001a 4FF0FC03 	 mov r3,#252
 7354 001e 83F31188 	 msr basepri,r3
 7355 0022 BFF36F8F 	 isb 
 7356 0026 BFF34F8F 	 dsb 
 7357              	
 7358              	
 7359              	 .thumb
 7360 002a 7B62     	 str r3,[r7,#36]
 7361              	.L518:
 7362              	.LBE211:
 7363              	.LBE210:
 7364              	 .loc 1 4676 0 discriminator 1
 7365 002c FEE7     	 b .L518
 7366              	.L517:
4677:../Dave/Generated/FREERTOS/tasks.c **** 
4678:../Dave/Generated/FREERTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4679:../Dave/Generated/FREERTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4680:../Dave/Generated/FREERTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4681:../Dave/Generated/FREERTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4682:../Dave/Generated/FREERTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4683:../Dave/Generated/FREERTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
4684:../Dave/Generated/FREERTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4685:../Dave/Generated/FREERTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4686:../Dave/Generated/FREERTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
4687:../Dave/Generated/FREERTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4688:../Dave/Generated/FREERTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4689:../Dave/Generated/FREERTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4690:../Dave/Generated/FREERTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4691:../Dave/Generated/FREERTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4692:../Dave/Generated/FREERTOS/tasks.c **** 		provided on the following link:
4693:../Dave/Generated/FREERTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4694:../Dave/Generated/FREERTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 7367              	 .loc 1 4694 0
 7368 002e FFF7FEFF 	 bl vPortValidateInterruptPriority
4695:../Dave/Generated/FREERTOS/tasks.c **** 
4696:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 7369              	 .loc 1 4696 0
 7370 0032 FB68     	 ldr r3,[r7,#12]
 7371 0034 3B63     	 str r3,[r7,#48]
 7372              	.LBB212:
 7373              	.LBB213:
 211:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 7374              	 .loc 2 211 0
 7375              	
 7376 0036 EFF31182 	 mrs r2,basepri
 7377 003a 4FF0FC03 	 mov r3,#252
 7378 003e 83F31188 	 msr basepri,r3
 7379 0042 BFF36F8F 	 isb 
 7380 0046 BFF34F8F 	 dsb 
 7381              	
 7382              	
 7383              	 .thumb
 7384 004a 3A62     	 str r2,[r7,#32]
 7385 004c FB61     	 str r3,[r7,#28]
 223:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** }
 7386              	 .loc 2 223 0
 7387 004e 3B6A     	 ldr r3,[r7,#32]
 7388              	.LBE213:
 7389              	.LBE212:
4697:../Dave/Generated/FREERTOS/tasks.c **** 
4698:../Dave/Generated/FREERTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 7390              	 .loc 1 4698 0
 7391 0050 FB62     	 str r3,[r7,#44]
4699:../Dave/Generated/FREERTOS/tasks.c **** 		{
4700:../Dave/Generated/FREERTOS/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 7392              	 .loc 1 4700 0
 7393 0052 3B68     	 ldr r3,[r7]
 7394 0054 002B     	 cmp r3,#0
 7395 0056 03D0     	 beq .L520
4701:../Dave/Generated/FREERTOS/tasks.c **** 			{
4702:../Dave/Generated/FREERTOS/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 7396              	 .loc 1 4702 0
 7397 0058 3B6B     	 ldr r3,[r7,#48]
 7398 005a 9A6E     	 ldr r2,[r3,#104]
 7399 005c 3B68     	 ldr r3,[r7]
 7400 005e 1A60     	 str r2,[r3]
 7401              	.L520:
4703:../Dave/Generated/FREERTOS/tasks.c **** 			}
4704:../Dave/Generated/FREERTOS/tasks.c **** 
4705:../Dave/Generated/FREERTOS/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7402              	 .loc 1 4705 0
 7403 0060 3B6B     	 ldr r3,[r7,#48]
 7404 0062 93F86C30 	 ldrb r3,[r3,#108]
 7405 0066 87F82B30 	 strb r3,[r7,#43]
4706:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7406              	 .loc 1 4706 0
 7407 006a 3B6B     	 ldr r3,[r7,#48]
 7408 006c 0222     	 movs r2,#2
 7409 006e 83F86C20 	 strb r2,[r3,#108]
4707:../Dave/Generated/FREERTOS/tasks.c **** 
4708:../Dave/Generated/FREERTOS/tasks.c **** 			switch( eAction )
 7410              	 .loc 1 4708 0
 7411 0072 FB79     	 ldrb r3,[r7,#7]
 7412 0074 042B     	 cmp r3,#4
 7413 0076 29D8     	 bhi .L521
 7414 0078 01A2     	 adr r2,.L523
 7415 007a 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 7416 007e 00BF     	 .p2align 2
 7417              	.L523:
 7418 0080 CD000000 	 .word .L521+1
 7419 0084 95000000 	 .word .L524+1
 7420 0088 A3000000 	 .word .L525+1
 7421 008c AF000000 	 .word .L526+1
 7422 0090 B7000000 	 .word .L527+1
 7423              	 .p2align 1
 7424              	.L524:
4709:../Dave/Generated/FREERTOS/tasks.c **** 			{
4710:../Dave/Generated/FREERTOS/tasks.c **** 				case eSetBits	:
4711:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 7425              	 .loc 1 4711 0
 7426 0094 3B6B     	 ldr r3,[r7,#48]
 7427 0096 9A6E     	 ldr r2,[r3,#104]
 7428 0098 BB68     	 ldr r3,[r7,#8]
 7429 009a 1A43     	 orrs r2,r2,r3
 7430 009c 3B6B     	 ldr r3,[r7,#48]
 7431 009e 9A66     	 str r2,[r3,#104]
4712:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 7432              	 .loc 1 4712 0
 7433 00a0 14E0     	 b .L521
 7434              	.L525:
4713:../Dave/Generated/FREERTOS/tasks.c **** 
4714:../Dave/Generated/FREERTOS/tasks.c **** 				case eIncrement	:
4715:../Dave/Generated/FREERTOS/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 7435              	 .loc 1 4715 0
 7436 00a2 3B6B     	 ldr r3,[r7,#48]
 7437 00a4 9B6E     	 ldr r3,[r3,#104]
 7438 00a6 5A1C     	 adds r2,r3,#1
 7439 00a8 3B6B     	 ldr r3,[r7,#48]
 7440 00aa 9A66     	 str r2,[r3,#104]
4716:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 7441              	 .loc 1 4716 0
 7442 00ac 0EE0     	 b .L521
 7443              	.L526:
4717:../Dave/Generated/FREERTOS/tasks.c **** 
4718:../Dave/Generated/FREERTOS/tasks.c **** 				case eSetValueWithOverwrite	:
4719:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 7444              	 .loc 1 4719 0
 7445 00ae 3B6B     	 ldr r3,[r7,#48]
 7446 00b0 BA68     	 ldr r2,[r7,#8]
 7447 00b2 9A66     	 str r2,[r3,#104]
4720:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 7448              	 .loc 1 4720 0
 7449 00b4 0AE0     	 b .L521
 7450              	.L527:
4721:../Dave/Generated/FREERTOS/tasks.c **** 
4722:../Dave/Generated/FREERTOS/tasks.c **** 				case eSetValueWithoutOverwrite :
4723:../Dave/Generated/FREERTOS/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7451              	 .loc 1 4723 0
 7452 00b6 97F82B30 	 ldrb r3,[r7,#43]
 7453 00ba 022B     	 cmp r3,#2
 7454 00bc 03D0     	 beq .L528
4724:../Dave/Generated/FREERTOS/tasks.c **** 					{
4725:../Dave/Generated/FREERTOS/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 7455              	 .loc 1 4725 0
 7456 00be 3B6B     	 ldr r3,[r7,#48]
 7457 00c0 BA68     	 ldr r2,[r7,#8]
 7458 00c2 9A66     	 str r2,[r3,#104]
4726:../Dave/Generated/FREERTOS/tasks.c **** 					}
4727:../Dave/Generated/FREERTOS/tasks.c **** 					else
4728:../Dave/Generated/FREERTOS/tasks.c **** 					{
4729:../Dave/Generated/FREERTOS/tasks.c **** 						/* The value could not be written to the task. */
4730:../Dave/Generated/FREERTOS/tasks.c **** 						xReturn = pdFAIL;
4731:../Dave/Generated/FREERTOS/tasks.c **** 					}
4732:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 7459              	 .loc 1 4732 0
 7460 00c4 01E0     	 b .L538
 7461              	.L528:
4730:../Dave/Generated/FREERTOS/tasks.c **** 					}
 7462              	 .loc 1 4730 0
 7463 00c6 0023     	 movs r3,#0
 7464 00c8 7B63     	 str r3,[r7,#52]
 7465              	.L538:
 7466              	 .loc 1 4732 0
 7467 00ca 00BF     	 nop
 7468              	.L521:
4733:../Dave/Generated/FREERTOS/tasks.c **** 
4734:../Dave/Generated/FREERTOS/tasks.c **** 				case eNoAction :
4735:../Dave/Generated/FREERTOS/tasks.c **** 					/* The task is being notified without its notify value being
4736:../Dave/Generated/FREERTOS/tasks.c **** 					updated. */
4737:../Dave/Generated/FREERTOS/tasks.c **** 					break;
4738:../Dave/Generated/FREERTOS/tasks.c **** 			}
4739:../Dave/Generated/FREERTOS/tasks.c **** 
4740:../Dave/Generated/FREERTOS/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4741:../Dave/Generated/FREERTOS/tasks.c **** 
4742:../Dave/Generated/FREERTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4743:../Dave/Generated/FREERTOS/tasks.c **** 			notification then unblock it now. */
4744:../Dave/Generated/FREERTOS/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7469              	 .loc 1 4744 0
 7470 00cc 97F82B30 	 ldrb r3,[r7,#43]
 7471 00d0 012B     	 cmp r3,#1
 7472 00d2 47D1     	 bne .L530
4745:../Dave/Generated/FREERTOS/tasks.c **** 			{
4746:../Dave/Generated/FREERTOS/tasks.c **** 				/* The task should not have been on an event list. */
4747:../Dave/Generated/FREERTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7473              	 .loc 1 4747 0
 7474 00d4 3B6B     	 ldr r3,[r7,#48]
 7475 00d6 9B6A     	 ldr r3,[r3,#40]
 7476 00d8 002B     	 cmp r3,#0
 7477 00da 09D0     	 beq .L531
 7478              	.LBB214:
 7479              	.LBB215:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 7480              	 .loc 2 195 0 discriminator 1
 7481              	
 7482 00dc 4FF0FC03 	 mov r3,#252
 7483 00e0 83F31188 	 msr basepri,r3
 7484 00e4 BFF36F8F 	 isb 
 7485 00e8 BFF34F8F 	 dsb 
 7486              	
 7487              	
 7488              	 .thumb
 7489 00ec BB61     	 str r3,[r7,#24]
 7490              	.L532:
 7491              	.LBE215:
 7492              	.LBE214:
 7493              	 .loc 1 4747 0 discriminator 2
 7494 00ee FEE7     	 b .L532
 7495              	.L531:
4748:../Dave/Generated/FREERTOS/tasks.c **** 
4749:../Dave/Generated/FREERTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 7496              	 .loc 1 4749 0
 7497 00f0 214B     	 ldr r3,.L539
 7498 00f2 1B68     	 ldr r3,[r3]
 7499 00f4 002B     	 cmp r3,#0
 7500 00f6 1ED1     	 bne .L533
4750:../Dave/Generated/FREERTOS/tasks.c **** 				{
4751:../Dave/Generated/FREERTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7501              	 .loc 1 4751 0
 7502 00f8 3B6B     	 ldr r3,[r7,#48]
 7503 00fa 0433     	 adds r3,r3,#4
 7504 00fc 1846     	 mov r0,r3
 7505 00fe FFF7FEFF 	 bl uxListRemove
4752:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7506              	 .loc 1 4752 0
 7507 0102 3B6B     	 ldr r3,[r7,#48]
 7508 0104 DB6A     	 ldr r3,[r3,#44]
 7509 0106 1A46     	 mov r2,r3
 7510 0108 0123     	 movs r3,#1
 7511 010a 03FA02F2 	 lsl r2,r3,r2
 7512 010e 1B4B     	 ldr r3,.L539+4
 7513 0110 1B68     	 ldr r3,[r3]
 7514 0112 1343     	 orrs r3,r3,r2
 7515 0114 194A     	 ldr r2,.L539+4
 7516 0116 1360     	 str r3,[r2]
 7517 0118 3B6B     	 ldr r3,[r7,#48]
 7518 011a DA6A     	 ldr r2,[r3,#44]
 7519 011c 1346     	 mov r3,r2
 7520 011e 9B00     	 lsls r3,r3,#2
 7521 0120 1344     	 add r3,r3,r2
 7522 0122 9B00     	 lsls r3,r3,#2
 7523 0124 164A     	 ldr r2,.L539+8
 7524 0126 1A44     	 add r2,r2,r3
 7525 0128 3B6B     	 ldr r3,[r7,#48]
 7526 012a 0433     	 adds r3,r3,#4
 7527 012c 1046     	 mov r0,r2
 7528 012e 1946     	 mov r1,r3
 7529 0130 FFF7FEFF 	 bl vListInsertEnd
 7530 0134 05E0     	 b .L534
 7531              	.L533:
4753:../Dave/Generated/FREERTOS/tasks.c **** 				}
4754:../Dave/Generated/FREERTOS/tasks.c **** 				else
4755:../Dave/Generated/FREERTOS/tasks.c **** 				{
4756:../Dave/Generated/FREERTOS/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4757:../Dave/Generated/FREERTOS/tasks.c **** 					this task pending until the scheduler is resumed. */
4758:../Dave/Generated/FREERTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 7532              	 .loc 1 4758 0
 7533 0136 3B6B     	 ldr r3,[r7,#48]
 7534 0138 1833     	 adds r3,r3,#24
 7535 013a 1248     	 ldr r0,.L539+12
 7536 013c 1946     	 mov r1,r3
 7537 013e FFF7FEFF 	 bl vListInsertEnd
 7538              	.L534:
4759:../Dave/Generated/FREERTOS/tasks.c **** 				}
4760:../Dave/Generated/FREERTOS/tasks.c **** 
4761:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7539              	 .loc 1 4761 0
 7540 0142 3B6B     	 ldr r3,[r7,#48]
 7541 0144 DA6A     	 ldr r2,[r3,#44]
 7542 0146 104B     	 ldr r3,.L539+16
 7543 0148 1B68     	 ldr r3,[r3]
 7544 014a DB6A     	 ldr r3,[r3,#44]
 7545 014c 9A42     	 cmp r2,r3
 7546 014e 09D9     	 bls .L530
4762:../Dave/Generated/FREERTOS/tasks.c **** 				{
4763:../Dave/Generated/FREERTOS/tasks.c **** 					/* The notified task has a priority above the currently
4764:../Dave/Generated/FREERTOS/tasks.c **** 					executing task so a yield is required. */
4765:../Dave/Generated/FREERTOS/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 7547              	 .loc 1 4765 0
 7548 0150 3B6C     	 ldr r3,[r7,#64]
 7549 0152 002B     	 cmp r3,#0
 7550 0154 03D0     	 beq .L535
4766:../Dave/Generated/FREERTOS/tasks.c **** 					{
4767:../Dave/Generated/FREERTOS/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 7551              	 .loc 1 4767 0
 7552 0156 3B6C     	 ldr r3,[r7,#64]
 7553 0158 0122     	 movs r2,#1
 7554 015a 1A60     	 str r2,[r3]
 7555 015c 02E0     	 b .L530
 7556              	.L535:
4768:../Dave/Generated/FREERTOS/tasks.c **** 					}
4769:../Dave/Generated/FREERTOS/tasks.c **** 					else
4770:../Dave/Generated/FREERTOS/tasks.c **** 					{
4771:../Dave/Generated/FREERTOS/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4772:../Dave/Generated/FREERTOS/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4773:../Dave/Generated/FREERTOS/tasks.c **** 						safe FreeRTOS function. */
4774:../Dave/Generated/FREERTOS/tasks.c **** 						xYieldPending = pdTRUE;
 7557              	 .loc 1 4774 0
 7558 015e 0B4B     	 ldr r3,.L539+20
 7559 0160 0122     	 movs r2,#1
 7560 0162 1A60     	 str r2,[r3]
 7561              	.L530:
 7562 0164 FB6A     	 ldr r3,[r7,#44]
 7563 0166 7B61     	 str r3,[r7,#20]
 7564              	.LBB216:
 7565              	.LBB217:
 7566              	 .loc 2 229 0
 7567 0168 7B69     	 ldr r3,[r7,#20]
 7568              	
 7569 016a 83F31188 	 msr basepri,r3
 7570              	
 7571              	 .thumb
 7572              	.LBE217:
 7573              	.LBE216:
4775:../Dave/Generated/FREERTOS/tasks.c **** 					}
4776:../Dave/Generated/FREERTOS/tasks.c **** 				}
4777:../Dave/Generated/FREERTOS/tasks.c **** 				else
4778:../Dave/Generated/FREERTOS/tasks.c **** 				{
4779:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4780:../Dave/Generated/FREERTOS/tasks.c **** 				}
4781:../Dave/Generated/FREERTOS/tasks.c **** 			}
4782:../Dave/Generated/FREERTOS/tasks.c **** 		}
4783:../Dave/Generated/FREERTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4784:../Dave/Generated/FREERTOS/tasks.c **** 
4785:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 7574              	 .loc 1 4785 0
 7575 016e 7B6B     	 ldr r3,[r7,#52]
4786:../Dave/Generated/FREERTOS/tasks.c **** 	}
 7576              	 .loc 1 4786 0
 7577 0170 1846     	 mov r0,r3
 7578 0172 3837     	 adds r7,r7,#56
 7579              	 .cfi_def_cfa_offset 8
 7580 0174 BD46     	 mov sp,r7
 7581              	 .cfi_def_cfa_register 13
 7582              	 
 7583 0176 80BD     	 pop {r7,pc}
 7584              	.L540:
 7585              	 .align 2
 7586              	.L539:
 7587 0178 00000000 	 .word uxSchedulerSuspended
 7588 017c 00000000 	 .word uxTopReadyPriority
 7589 0180 00000000 	 .word pxReadyTasksLists
 7590 0184 00000000 	 .word xPendingReadyList
 7591 0188 00000000 	 .word pxCurrentTCB
 7592 018c 00000000 	 .word xYieldPending
 7593              	 .cfi_endproc
 7594              	.LFE200:
 7596              	 .section .text.vTaskNotifyGiveFromISR,"ax",%progbits
 7597              	 .align 2
 7598              	 .global vTaskNotifyGiveFromISR
 7599              	 .thumb
 7600              	 .thumb_func
 7602              	vTaskNotifyGiveFromISR:
 7603              	.LFB201:
4787:../Dave/Generated/FREERTOS/tasks.c **** 
4788:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4789:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4790:../Dave/Generated/FREERTOS/tasks.c **** 
4791:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4792:../Dave/Generated/FREERTOS/tasks.c **** 
4793:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4794:../Dave/Generated/FREERTOS/tasks.c **** 	{
 7604              	 .loc 1 4794 0
 7605              	 .cfi_startproc
 7606              	 
 7607              	 
 7608 0000 80B5     	 push {r7,lr}
 7609              	 .cfi_def_cfa_offset 8
 7610              	 .cfi_offset 7,-8
 7611              	 .cfi_offset 14,-4
 7612 0002 8AB0     	 sub sp,sp,#40
 7613              	 .cfi_def_cfa_offset 48
 7614 0004 00AF     	 add r7,sp,#0
 7615              	 .cfi_def_cfa_register 7
 7616 0006 7860     	 str r0,[r7,#4]
 7617 0008 3960     	 str r1,[r7]
4795:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * pxTCB;
4796:../Dave/Generated/FREERTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
4797:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4798:../Dave/Generated/FREERTOS/tasks.c **** 
4799:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( xTaskToNotify );
 7618              	 .loc 1 4799 0
 7619 000a 7B68     	 ldr r3,[r7,#4]
 7620 000c 002B     	 cmp r3,#0
 7621 000e 09D1     	 bne .L542
 7622              	.LBB218:
 7623              	.LBB219:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 7624              	 .loc 2 195 0 discriminator 1
 7625              	
 7626 0010 4FF0FC03 	 mov r3,#252
 7627 0014 83F31188 	 msr basepri,r3
 7628 0018 BFF36F8F 	 isb 
 7629 001c BFF34F8F 	 dsb 
 7630              	
 7631              	
 7632              	 .thumb
 7633 0020 BB61     	 str r3,[r7,#24]
 7634              	.L543:
 7635              	.LBE219:
 7636              	.LBE218:
 7637              	 .loc 1 4799 0 discriminator 1
 7638 0022 FEE7     	 b .L543
 7639              	.L542:
4800:../Dave/Generated/FREERTOS/tasks.c **** 
4801:../Dave/Generated/FREERTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4802:../Dave/Generated/FREERTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4803:../Dave/Generated/FREERTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4804:../Dave/Generated/FREERTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4805:../Dave/Generated/FREERTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4806:../Dave/Generated/FREERTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
4807:../Dave/Generated/FREERTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4808:../Dave/Generated/FREERTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4809:../Dave/Generated/FREERTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
4810:../Dave/Generated/FREERTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4811:../Dave/Generated/FREERTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4812:../Dave/Generated/FREERTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4813:../Dave/Generated/FREERTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4814:../Dave/Generated/FREERTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4815:../Dave/Generated/FREERTOS/tasks.c **** 		provided on the following link:
4816:../Dave/Generated/FREERTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4817:../Dave/Generated/FREERTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 7640              	 .loc 1 4817 0
 7641 0024 FFF7FEFF 	 bl vPortValidateInterruptPriority
4818:../Dave/Generated/FREERTOS/tasks.c **** 
4819:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 7642              	 .loc 1 4819 0
 7643 0028 7B68     	 ldr r3,[r7,#4]
 7644 002a 7B62     	 str r3,[r7,#36]
 7645              	.LBB220:
 7646              	.LBB221:
 211:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 7647              	 .loc 2 211 0
 7648              	
 7649 002c EFF31182 	 mrs r2,basepri
 7650 0030 4FF0FC03 	 mov r3,#252
 7651 0034 83F31188 	 msr basepri,r3
 7652 0038 BFF36F8F 	 isb 
 7653 003c BFF34F8F 	 dsb 
 7654              	
 7655              	
 7656              	 .thumb
 7657 0040 7A61     	 str r2,[r7,#20]
 7658 0042 3B61     	 str r3,[r7,#16]
 223:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** }
 7659              	 .loc 2 223 0
 7660 0044 7B69     	 ldr r3,[r7,#20]
 7661              	.LBE221:
 7662              	.LBE220:
4820:../Dave/Generated/FREERTOS/tasks.c **** 
4821:../Dave/Generated/FREERTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 7663              	 .loc 1 4821 0
 7664 0046 3B62     	 str r3,[r7,#32]
4822:../Dave/Generated/FREERTOS/tasks.c **** 		{
4823:../Dave/Generated/FREERTOS/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7665              	 .loc 1 4823 0
 7666 0048 7B6A     	 ldr r3,[r7,#36]
 7667 004a 93F86C30 	 ldrb r3,[r3,#108]
 7668 004e FB77     	 strb r3,[r7,#31]
4824:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7669              	 .loc 1 4824 0
 7670 0050 7B6A     	 ldr r3,[r7,#36]
 7671 0052 0222     	 movs r2,#2
 7672 0054 83F86C20 	 strb r2,[r3,#108]
4825:../Dave/Generated/FREERTOS/tasks.c **** 
4826:../Dave/Generated/FREERTOS/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4827:../Dave/Generated/FREERTOS/tasks.c **** 			semaphore. */
4828:../Dave/Generated/FREERTOS/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 7673              	 .loc 1 4828 0
 7674 0058 7B6A     	 ldr r3,[r7,#36]
 7675 005a 9B6E     	 ldr r3,[r3,#104]
 7676 005c 5A1C     	 adds r2,r3,#1
 7677 005e 7B6A     	 ldr r3,[r7,#36]
 7678 0060 9A66     	 str r2,[r3,#104]
4829:../Dave/Generated/FREERTOS/tasks.c **** 
4830:../Dave/Generated/FREERTOS/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4831:../Dave/Generated/FREERTOS/tasks.c **** 
4832:../Dave/Generated/FREERTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4833:../Dave/Generated/FREERTOS/tasks.c **** 			notification then unblock it now. */
4834:../Dave/Generated/FREERTOS/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7679              	 .loc 1 4834 0
 7680 0062 FB7F     	 ldrb r3,[r7,#31]
 7681 0064 012B     	 cmp r3,#1
 7682 0066 47D1     	 bne .L545
4835:../Dave/Generated/FREERTOS/tasks.c **** 			{
4836:../Dave/Generated/FREERTOS/tasks.c **** 				/* The task should not have been on an event list. */
4837:../Dave/Generated/FREERTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7683              	 .loc 1 4837 0
 7684 0068 7B6A     	 ldr r3,[r7,#36]
 7685 006a 9B6A     	 ldr r3,[r3,#40]
 7686 006c 002B     	 cmp r3,#0
 7687 006e 09D0     	 beq .L546
 7688              	.LBB222:
 7689              	.LBB223:
 195:../Dave/Generated/FREERTOS/portable/GCC/portmacro.h **** 	(
 7690              	 .loc 2 195 0 discriminator 1
 7691              	
 7692 0070 4FF0FC03 	 mov r3,#252
 7693 0074 83F31188 	 msr basepri,r3
 7694 0078 BFF36F8F 	 isb 
 7695 007c BFF34F8F 	 dsb 
 7696              	
 7697              	
 7698              	 .thumb
 7699 0080 FB60     	 str r3,[r7,#12]
 7700              	.L547:
 7701              	.LBE223:
 7702              	.LBE222:
 7703              	 .loc 1 4837 0 discriminator 2
 7704 0082 FEE7     	 b .L547
 7705              	.L546:
4838:../Dave/Generated/FREERTOS/tasks.c **** 
4839:../Dave/Generated/FREERTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 7706              	 .loc 1 4839 0
 7707 0084 204B     	 ldr r3,.L552
 7708 0086 1B68     	 ldr r3,[r3]
 7709 0088 002B     	 cmp r3,#0
 7710 008a 1ED1     	 bne .L548
4840:../Dave/Generated/FREERTOS/tasks.c **** 				{
4841:../Dave/Generated/FREERTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7711              	 .loc 1 4841 0
 7712 008c 7B6A     	 ldr r3,[r7,#36]
 7713 008e 0433     	 adds r3,r3,#4
 7714 0090 1846     	 mov r0,r3
 7715 0092 FFF7FEFF 	 bl uxListRemove
4842:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7716              	 .loc 1 4842 0
 7717 0096 7B6A     	 ldr r3,[r7,#36]
 7718 0098 DB6A     	 ldr r3,[r3,#44]
 7719 009a 1A46     	 mov r2,r3
 7720 009c 0123     	 movs r3,#1
 7721 009e 03FA02F2 	 lsl r2,r3,r2
 7722 00a2 1A4B     	 ldr r3,.L552+4
 7723 00a4 1B68     	 ldr r3,[r3]
 7724 00a6 1343     	 orrs r3,r3,r2
 7725 00a8 184A     	 ldr r2,.L552+4
 7726 00aa 1360     	 str r3,[r2]
 7727 00ac 7B6A     	 ldr r3,[r7,#36]
 7728 00ae DA6A     	 ldr r2,[r3,#44]
 7729 00b0 1346     	 mov r3,r2
 7730 00b2 9B00     	 lsls r3,r3,#2
 7731 00b4 1344     	 add r3,r3,r2
 7732 00b6 9B00     	 lsls r3,r3,#2
 7733 00b8 154A     	 ldr r2,.L552+8
 7734 00ba 1A44     	 add r2,r2,r3
 7735 00bc 7B6A     	 ldr r3,[r7,#36]
 7736 00be 0433     	 adds r3,r3,#4
 7737 00c0 1046     	 mov r0,r2
 7738 00c2 1946     	 mov r1,r3
 7739 00c4 FFF7FEFF 	 bl vListInsertEnd
 7740 00c8 05E0     	 b .L549
 7741              	.L548:
4843:../Dave/Generated/FREERTOS/tasks.c **** 				}
4844:../Dave/Generated/FREERTOS/tasks.c **** 				else
4845:../Dave/Generated/FREERTOS/tasks.c **** 				{
4846:../Dave/Generated/FREERTOS/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4847:../Dave/Generated/FREERTOS/tasks.c **** 					this task pending until the scheduler is resumed. */
4848:../Dave/Generated/FREERTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 7742              	 .loc 1 4848 0
 7743 00ca 7B6A     	 ldr r3,[r7,#36]
 7744 00cc 1833     	 adds r3,r3,#24
 7745 00ce 1148     	 ldr r0,.L552+12
 7746 00d0 1946     	 mov r1,r3
 7747 00d2 FFF7FEFF 	 bl vListInsertEnd
 7748              	.L549:
4849:../Dave/Generated/FREERTOS/tasks.c **** 				}
4850:../Dave/Generated/FREERTOS/tasks.c **** 
4851:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7749              	 .loc 1 4851 0
 7750 00d6 7B6A     	 ldr r3,[r7,#36]
 7751 00d8 DA6A     	 ldr r2,[r3,#44]
 7752 00da 0F4B     	 ldr r3,.L552+16
 7753 00dc 1B68     	 ldr r3,[r3]
 7754 00de DB6A     	 ldr r3,[r3,#44]
 7755 00e0 9A42     	 cmp r2,r3
 7756 00e2 09D9     	 bls .L545
4852:../Dave/Generated/FREERTOS/tasks.c **** 				{
4853:../Dave/Generated/FREERTOS/tasks.c **** 					/* The notified task has a priority above the currently
4854:../Dave/Generated/FREERTOS/tasks.c **** 					executing task so a yield is required. */
4855:../Dave/Generated/FREERTOS/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 7757              	 .loc 1 4855 0
 7758 00e4 3B68     	 ldr r3,[r7]
 7759 00e6 002B     	 cmp r3,#0
 7760 00e8 03D0     	 beq .L550
4856:../Dave/Generated/FREERTOS/tasks.c **** 					{
4857:../Dave/Generated/FREERTOS/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 7761              	 .loc 1 4857 0
 7762 00ea 3B68     	 ldr r3,[r7]
 7763 00ec 0122     	 movs r2,#1
 7764 00ee 1A60     	 str r2,[r3]
 7765 00f0 02E0     	 b .L545
 7766              	.L550:
4858:../Dave/Generated/FREERTOS/tasks.c **** 					}
4859:../Dave/Generated/FREERTOS/tasks.c **** 					else
4860:../Dave/Generated/FREERTOS/tasks.c **** 					{
4861:../Dave/Generated/FREERTOS/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4862:../Dave/Generated/FREERTOS/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4863:../Dave/Generated/FREERTOS/tasks.c **** 						safe FreeRTOS function. */
4864:../Dave/Generated/FREERTOS/tasks.c **** 						xYieldPending = pdTRUE;
 7767              	 .loc 1 4864 0
 7768 00f2 0A4B     	 ldr r3,.L552+20
 7769 00f4 0122     	 movs r2,#1
 7770 00f6 1A60     	 str r2,[r3]
 7771              	.L545:
 7772 00f8 3B6A     	 ldr r3,[r7,#32]
 7773 00fa BB60     	 str r3,[r7,#8]
 7774              	.LBB224:
 7775              	.LBB225:
 7776              	 .loc 2 229 0
 7777 00fc BB68     	 ldr r3,[r7,#8]
 7778              	
 7779 00fe 83F31188 	 msr basepri,r3
 7780              	
 7781              	 .thumb
 7782              	.LBE225:
 7783              	.LBE224:
4865:../Dave/Generated/FREERTOS/tasks.c **** 					}
4866:../Dave/Generated/FREERTOS/tasks.c **** 				}
4867:../Dave/Generated/FREERTOS/tasks.c **** 				else
4868:../Dave/Generated/FREERTOS/tasks.c **** 				{
4869:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4870:../Dave/Generated/FREERTOS/tasks.c **** 				}
4871:../Dave/Generated/FREERTOS/tasks.c **** 			}
4872:../Dave/Generated/FREERTOS/tasks.c **** 		}
4873:../Dave/Generated/FREERTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4874:../Dave/Generated/FREERTOS/tasks.c **** 	}
 7784              	 .loc 1 4874 0
 7785 0102 2837     	 adds r7,r7,#40
 7786              	 .cfi_def_cfa_offset 8
 7787 0104 BD46     	 mov sp,r7
 7788              	 .cfi_def_cfa_register 13
 7789              	 
 7790 0106 80BD     	 pop {r7,pc}
 7791              	.L553:
 7792              	 .align 2
 7793              	.L552:
 7794 0108 00000000 	 .word uxSchedulerSuspended
 7795 010c 00000000 	 .word uxTopReadyPriority
 7796 0110 00000000 	 .word pxReadyTasksLists
 7797 0114 00000000 	 .word xPendingReadyList
 7798 0118 00000000 	 .word pxCurrentTCB
 7799 011c 00000000 	 .word xYieldPending
 7800              	 .cfi_endproc
 7801              	.LFE201:
 7803              	 .section .text.xTaskNotifyStateClear,"ax",%progbits
 7804              	 .align 2
 7805              	 .global xTaskNotifyStateClear
 7806              	 .thumb
 7807              	 .thumb_func
 7809              	xTaskNotifyStateClear:
 7810              	.LFB202:
4875:../Dave/Generated/FREERTOS/tasks.c **** 
4876:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4877:../Dave/Generated/FREERTOS/tasks.c **** 
4878:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4879:../Dave/Generated/FREERTOS/tasks.c **** 
4880:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4881:../Dave/Generated/FREERTOS/tasks.c **** 
4882:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4883:../Dave/Generated/FREERTOS/tasks.c **** 	{
 7811              	 .loc 1 4883 0
 7812              	 .cfi_startproc
 7813              	 
 7814              	 
 7815 0000 80B5     	 push {r7,lr}
 7816              	 .cfi_def_cfa_offset 8
 7817              	 .cfi_offset 7,-8
 7818              	 .cfi_offset 14,-4
 7819 0002 84B0     	 sub sp,sp,#16
 7820              	 .cfi_def_cfa_offset 24
 7821 0004 00AF     	 add r7,sp,#0
 7822              	 .cfi_def_cfa_register 7
 7823 0006 7860     	 str r0,[r7,#4]
4884:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
4885:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn;
4886:../Dave/Generated/FREERTOS/tasks.c **** 
4887:../Dave/Generated/FREERTOS/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4888:../Dave/Generated/FREERTOS/tasks.c **** 		its notification state cleared. */
4889:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 7824              	 .loc 1 4889 0
 7825 0008 7B68     	 ldr r3,[r7,#4]
 7826 000a 002B     	 cmp r3,#0
 7827 000c 02D1     	 bne .L555
 7828              	 .loc 1 4889 0 is_stmt 0 discriminator 1
 7829 000e 0E4B     	 ldr r3,.L560
 7830 0010 1B68     	 ldr r3,[r3]
 7831 0012 00E0     	 b .L556
 7832              	.L555:
 7833              	 .loc 1 4889 0 discriminator 2
 7834 0014 7B68     	 ldr r3,[r7,#4]
 7835              	.L556:
 7836              	 .loc 1 4889 0 discriminator 4
 7837 0016 BB60     	 str r3,[r7,#8]
4890:../Dave/Generated/FREERTOS/tasks.c **** 
4891:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
 7838              	 .loc 1 4891 0 is_stmt 1 discriminator 4
 7839 0018 FFF7FEFF 	 bl vPortEnterCritical
4892:../Dave/Generated/FREERTOS/tasks.c **** 		{
4893:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 7840              	 .loc 1 4893 0 discriminator 4
 7841 001c BB68     	 ldr r3,[r7,#8]
 7842 001e 93F86C30 	 ldrb r3,[r3,#108]
 7843 0022 DBB2     	 uxtb r3,r3
 7844 0024 022B     	 cmp r3,#2
 7845 0026 06D1     	 bne .L557
4894:../Dave/Generated/FREERTOS/tasks.c **** 			{
4895:../Dave/Generated/FREERTOS/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 7846              	 .loc 1 4895 0
 7847 0028 BB68     	 ldr r3,[r7,#8]
 7848 002a 0022     	 movs r2,#0
 7849 002c 83F86C20 	 strb r2,[r3,#108]
4896:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdPASS;
 7850              	 .loc 1 4896 0
 7851 0030 0123     	 movs r3,#1
 7852 0032 FB60     	 str r3,[r7,#12]
 7853 0034 01E0     	 b .L558
 7854              	.L557:
4897:../Dave/Generated/FREERTOS/tasks.c **** 			}
4898:../Dave/Generated/FREERTOS/tasks.c **** 			else
4899:../Dave/Generated/FREERTOS/tasks.c **** 			{
4900:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdFAIL;
 7855              	 .loc 1 4900 0
 7856 0036 0023     	 movs r3,#0
 7857 0038 FB60     	 str r3,[r7,#12]
 7858              	.L558:
4901:../Dave/Generated/FREERTOS/tasks.c **** 			}
4902:../Dave/Generated/FREERTOS/tasks.c **** 		}
4903:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
 7859              	 .loc 1 4903 0
 7860 003a FFF7FEFF 	 bl vPortExitCritical
4904:../Dave/Generated/FREERTOS/tasks.c **** 
4905:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 7861              	 .loc 1 4905 0
 7862 003e FB68     	 ldr r3,[r7,#12]
4906:../Dave/Generated/FREERTOS/tasks.c **** 	}
 7863              	 .loc 1 4906 0
 7864 0040 1846     	 mov r0,r3
 7865 0042 1037     	 adds r7,r7,#16
 7866              	 .cfi_def_cfa_offset 8
 7867 0044 BD46     	 mov sp,r7
 7868              	 .cfi_def_cfa_register 13
 7869              	 
 7870 0046 80BD     	 pop {r7,pc}
 7871              	.L561:
 7872              	 .align 2
 7873              	.L560:
 7874 0048 00000000 	 .word pxCurrentTCB
 7875              	 .cfi_endproc
 7876              	.LFE202:
 7878              	 .section .text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 7879              	 .align 2
 7880              	 .thumb
 7881              	 .thumb_func
 7883              	prvAddCurrentTaskToDelayedList:
 7884              	.LFB203:
4907:../Dave/Generated/FREERTOS/tasks.c **** 
4908:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4909:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4910:../Dave/Generated/FREERTOS/tasks.c **** 
4911:../Dave/Generated/FREERTOS/tasks.c **** 
4912:../Dave/Generated/FREERTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4913:../Dave/Generated/FREERTOS/tasks.c **** {
 7885              	 .loc 1 4913 0
 7886              	 .cfi_startproc
 7887              	 
 7888              	 
 7889 0000 80B5     	 push {r7,lr}
 7890              	 .cfi_def_cfa_offset 8
 7891              	 .cfi_offset 7,-8
 7892              	 .cfi_offset 14,-4
 7893 0002 84B0     	 sub sp,sp,#16
 7894              	 .cfi_def_cfa_offset 24
 7895 0004 00AF     	 add r7,sp,#0
 7896              	 .cfi_def_cfa_register 7
 7897 0006 7860     	 str r0,[r7,#4]
 7898 0008 3960     	 str r1,[r7]
4914:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xTimeToWake;
4915:../Dave/Generated/FREERTOS/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 7899              	 .loc 1 4915 0
 7900 000a 2B4B     	 ldr r3,.L567
 7901 000c 1B68     	 ldr r3,[r3]
 7902 000e FB60     	 str r3,[r7,#12]
4916:../Dave/Generated/FREERTOS/tasks.c **** 
4917:../Dave/Generated/FREERTOS/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4918:../Dave/Generated/FREERTOS/tasks.c **** 	{
4919:../Dave/Generated/FREERTOS/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4920:../Dave/Generated/FREERTOS/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4921:../Dave/Generated/FREERTOS/tasks.c **** 		when the task leaves the Blocked state. */
4922:../Dave/Generated/FREERTOS/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
 7903              	 .loc 1 4922 0
 7904 0010 2A4B     	 ldr r3,.L567+4
 7905 0012 1B68     	 ldr r3,[r3]
 7906 0014 0022     	 movs r2,#0
 7907 0016 83F86D20 	 strb r2,[r3,#109]
4923:../Dave/Generated/FREERTOS/tasks.c **** 	}
4924:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
4925:../Dave/Generated/FREERTOS/tasks.c **** 
4926:../Dave/Generated/FREERTOS/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4927:../Dave/Generated/FREERTOS/tasks.c **** 	as the same list item is used for both lists. */
4928:../Dave/Generated/FREERTOS/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 7908              	 .loc 1 4928 0
 7909 001a 284B     	 ldr r3,.L567+4
 7910 001c 1B68     	 ldr r3,[r3]
 7911 001e 0433     	 adds r3,r3,#4
 7912 0020 1846     	 mov r0,r3
 7913 0022 FFF7FEFF 	 bl uxListRemove
 7914 0026 0346     	 mov r3,r0
 7915 0028 002B     	 cmp r3,#0
 7916 002a 0BD1     	 bne .L563
4929:../Dave/Generated/FREERTOS/tasks.c **** 	{
4930:../Dave/Generated/FREERTOS/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4931:../Dave/Generated/FREERTOS/tasks.c **** 		check, and the port reset macro can be called directly. */
4932:../Dave/Generated/FREERTOS/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 7917              	 .loc 1 4932 0
 7918 002c 234B     	 ldr r3,.L567+4
 7919 002e 1B68     	 ldr r3,[r3]
 7920 0030 DB6A     	 ldr r3,[r3,#44]
 7921 0032 1A46     	 mov r2,r3
 7922 0034 0123     	 movs r3,#1
 7923 0036 9340     	 lsls r3,r3,r2
 7924 0038 DA43     	 mvns r2,r3
 7925 003a 214B     	 ldr r3,.L567+8
 7926 003c 1B68     	 ldr r3,[r3]
 7927 003e 1340     	 ands r3,r3,r2
 7928 0040 1F4A     	 ldr r2,.L567+8
 7929 0042 1360     	 str r3,[r2]
 7930              	.L563:
4933:../Dave/Generated/FREERTOS/tasks.c **** 	}
4934:../Dave/Generated/FREERTOS/tasks.c **** 	else
4935:../Dave/Generated/FREERTOS/tasks.c **** 	{
4936:../Dave/Generated/FREERTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4937:../Dave/Generated/FREERTOS/tasks.c **** 	}
4938:../Dave/Generated/FREERTOS/tasks.c **** 
4939:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4940:../Dave/Generated/FREERTOS/tasks.c **** 	{
4941:../Dave/Generated/FREERTOS/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 7931              	 .loc 1 4941 0
 7932 0044 7B68     	 ldr r3,[r7,#4]
 7933 0046 B3F1FF3F 	 cmp r3,#-1
 7934 004a 0AD1     	 bne .L564
 7935              	 .loc 1 4941 0 is_stmt 0 discriminator 1
 7936 004c 3B68     	 ldr r3,[r7]
 7937 004e 002B     	 cmp r3,#0
 7938 0050 07D0     	 beq .L564
4942:../Dave/Generated/FREERTOS/tasks.c **** 		{
4943:../Dave/Generated/FREERTOS/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4944:../Dave/Generated/FREERTOS/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4945:../Dave/Generated/FREERTOS/tasks.c **** 			indefinitely. */
4946:../Dave/Generated/FREERTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 7939              	 .loc 1 4946 0 is_stmt 1
 7940 0052 1A4B     	 ldr r3,.L567+4
 7941 0054 1B68     	 ldr r3,[r3]
 7942 0056 0433     	 adds r3,r3,#4
 7943 0058 1A48     	 ldr r0,.L567+12
 7944 005a 1946     	 mov r1,r3
 7945 005c FFF7FEFF 	 bl vListInsertEnd
 7946 0060 26E0     	 b .L562
 7947              	.L564:
4947:../Dave/Generated/FREERTOS/tasks.c **** 		}
4948:../Dave/Generated/FREERTOS/tasks.c **** 		else
4949:../Dave/Generated/FREERTOS/tasks.c **** 		{
4950:../Dave/Generated/FREERTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4951:../Dave/Generated/FREERTOS/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4952:../Dave/Generated/FREERTOS/tasks.c **** 			kernel will manage it correctly. */
4953:../Dave/Generated/FREERTOS/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 7948              	 .loc 1 4953 0
 7949 0062 FA68     	 ldr r2,[r7,#12]
 7950 0064 7B68     	 ldr r3,[r7,#4]
 7951 0066 1344     	 add r3,r3,r2
 7952 0068 BB60     	 str r3,[r7,#8]
4954:../Dave/Generated/FREERTOS/tasks.c **** 
4955:../Dave/Generated/FREERTOS/tasks.c **** 			/* The list item will be inserted in wake time order. */
4956:../Dave/Generated/FREERTOS/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 7953              	 .loc 1 4956 0
 7954 006a 144B     	 ldr r3,.L567+4
 7955 006c 1B68     	 ldr r3,[r3]
 7956 006e BA68     	 ldr r2,[r7,#8]
 7957 0070 5A60     	 str r2,[r3,#4]
4957:../Dave/Generated/FREERTOS/tasks.c **** 
4958:../Dave/Generated/FREERTOS/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 7958              	 .loc 1 4958 0
 7959 0072 BA68     	 ldr r2,[r7,#8]
 7960 0074 FB68     	 ldr r3,[r7,#12]
 7961 0076 9A42     	 cmp r2,r3
 7962 0078 09D2     	 bcs .L566
4959:../Dave/Generated/FREERTOS/tasks.c **** 			{
4960:../Dave/Generated/FREERTOS/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4961:../Dave/Generated/FREERTOS/tasks.c **** 				list. */
4962:../Dave/Generated/FREERTOS/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 7963              	 .loc 1 4962 0
 7964 007a 134B     	 ldr r3,.L567+16
 7965 007c 1A68     	 ldr r2,[r3]
 7966 007e 0F4B     	 ldr r3,.L567+4
 7967 0080 1B68     	 ldr r3,[r3]
 7968 0082 0433     	 adds r3,r3,#4
 7969 0084 1046     	 mov r0,r2
 7970 0086 1946     	 mov r1,r3
 7971 0088 FFF7FEFF 	 bl vListInsert
 7972 008c 10E0     	 b .L562
 7973              	.L566:
4963:../Dave/Generated/FREERTOS/tasks.c **** 			}
4964:../Dave/Generated/FREERTOS/tasks.c **** 			else
4965:../Dave/Generated/FREERTOS/tasks.c **** 			{
4966:../Dave/Generated/FREERTOS/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4967:../Dave/Generated/FREERTOS/tasks.c **** 				is used. */
4968:../Dave/Generated/FREERTOS/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 7974              	 .loc 1 4968 0
 7975 008e 0F4B     	 ldr r3,.L567+20
 7976 0090 1A68     	 ldr r2,[r3]
 7977 0092 0A4B     	 ldr r3,.L567+4
 7978 0094 1B68     	 ldr r3,[r3]
 7979 0096 0433     	 adds r3,r3,#4
 7980 0098 1046     	 mov r0,r2
 7981 009a 1946     	 mov r1,r3
 7982 009c FFF7FEFF 	 bl vListInsert
4969:../Dave/Generated/FREERTOS/tasks.c **** 
4970:../Dave/Generated/FREERTOS/tasks.c **** 				/* If the task entering the blocked state was placed at the
4971:../Dave/Generated/FREERTOS/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4972:../Dave/Generated/FREERTOS/tasks.c **** 				needs to be updated too. */
4973:../Dave/Generated/FREERTOS/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 7983              	 .loc 1 4973 0
 7984 00a0 0B4B     	 ldr r3,.L567+24
 7985 00a2 1B68     	 ldr r3,[r3]
 7986 00a4 BA68     	 ldr r2,[r7,#8]
 7987 00a6 9A42     	 cmp r2,r3
 7988 00a8 02D2     	 bcs .L562
4974:../Dave/Generated/FREERTOS/tasks.c **** 				{
4975:../Dave/Generated/FREERTOS/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 7989              	 .loc 1 4975 0
 7990 00aa 094A     	 ldr r2,.L567+24
 7991 00ac BB68     	 ldr r3,[r7,#8]
 7992 00ae 1360     	 str r3,[r2]
 7993              	.L562:
4976:../Dave/Generated/FREERTOS/tasks.c **** 				}
4977:../Dave/Generated/FREERTOS/tasks.c **** 				else
4978:../Dave/Generated/FREERTOS/tasks.c **** 				{
4979:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4980:../Dave/Generated/FREERTOS/tasks.c **** 				}
4981:../Dave/Generated/FREERTOS/tasks.c **** 			}
4982:../Dave/Generated/FREERTOS/tasks.c **** 		}
4983:../Dave/Generated/FREERTOS/tasks.c **** 	}
4984:../Dave/Generated/FREERTOS/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4985:../Dave/Generated/FREERTOS/tasks.c **** 	{
4986:../Dave/Generated/FREERTOS/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4987:../Dave/Generated/FREERTOS/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4988:../Dave/Generated/FREERTOS/tasks.c **** 		will manage it correctly. */
4989:../Dave/Generated/FREERTOS/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4990:../Dave/Generated/FREERTOS/tasks.c **** 
4991:../Dave/Generated/FREERTOS/tasks.c **** 		/* The list item will be inserted in wake time order. */
4992:../Dave/Generated/FREERTOS/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4993:../Dave/Generated/FREERTOS/tasks.c **** 
4994:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4995:../Dave/Generated/FREERTOS/tasks.c **** 		{
4996:../Dave/Generated/FREERTOS/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4997:../Dave/Generated/FREERTOS/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4998:../Dave/Generated/FREERTOS/tasks.c **** 		}
4999:../Dave/Generated/FREERTOS/tasks.c **** 		else
5000:../Dave/Generated/FREERTOS/tasks.c **** 		{
5001:../Dave/Generated/FREERTOS/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5002:../Dave/Generated/FREERTOS/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5003:../Dave/Generated/FREERTOS/tasks.c **** 
5004:../Dave/Generated/FREERTOS/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5005:../Dave/Generated/FREERTOS/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5006:../Dave/Generated/FREERTOS/tasks.c **** 			too. */
5007:../Dave/Generated/FREERTOS/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5008:../Dave/Generated/FREERTOS/tasks.c **** 			{
5009:../Dave/Generated/FREERTOS/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5010:../Dave/Generated/FREERTOS/tasks.c **** 			}
5011:../Dave/Generated/FREERTOS/tasks.c **** 			else
5012:../Dave/Generated/FREERTOS/tasks.c **** 			{
5013:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5014:../Dave/Generated/FREERTOS/tasks.c **** 			}
5015:../Dave/Generated/FREERTOS/tasks.c **** 		}
5016:../Dave/Generated/FREERTOS/tasks.c **** 
5017:../Dave/Generated/FREERTOS/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5018:../Dave/Generated/FREERTOS/tasks.c **** 		( void ) xCanBlockIndefinitely;
5019:../Dave/Generated/FREERTOS/tasks.c **** 	}
5020:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5021:../Dave/Generated/FREERTOS/tasks.c **** }
 7994              	 .loc 1 5021 0
 7995 00b0 1037     	 adds r7,r7,#16
 7996              	 .cfi_def_cfa_offset 8
 7997 00b2 BD46     	 mov sp,r7
 7998              	 .cfi_def_cfa_register 13
 7999              	 
 8000 00b4 80BD     	 pop {r7,pc}
 8001              	.L568:
 8002 00b6 00BF     	 .align 2
 8003              	.L567:
 8004 00b8 00000000 	 .word xTickCount
 8005 00bc 00000000 	 .word pxCurrentTCB
 8006 00c0 00000000 	 .word uxTopReadyPriority
 8007 00c4 00000000 	 .word xSuspendedTaskList
 8008 00c8 00000000 	 .word pxOverflowDelayedTaskList
 8009 00cc 00000000 	 .word pxDelayedTaskList
 8010 00d0 00000000 	 .word xNextTaskUnblockTime
 8011              	 .cfi_endproc
 8012              	.LFE203:
 8014              	 .text
 8015              	.Letext0:
 8016              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h"
 8017              	 .file 4 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 8018              	 .file 5 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 8019              	 .file 6 "../Dave/Generated/FREERTOS/projdefs.h"
 8020              	 .file 7 "../Dave/Generated/FREERTOS/list.h"
 8021              	 .file 8 "../Dave/Generated/FREERTOS/task.h"
 8022              	 .file 9 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/CMSIS/Include/cmsis_gcc.h"
 8023              	 .file 10 "C:/Users/Yoshi/Documents/GitHub/Software/01_jrg/04_CANModule/CAN_Modul_keckvale_AH/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
    {standard input}:24     .bss.pxCurrentTCB:00000000 pxCurrentTCB
    {standard input}:21     .bss.pxCurrentTCB:00000000 $d
    {standard input}:27     .bss.pxReadyTasksLists:00000000 $d
    {standard input}:30     .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
    {standard input}:33     .bss.xDelayedTaskList1:00000000 $d
    {standard input}:36     .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
    {standard input}:39     .bss.xDelayedTaskList2:00000000 $d
    {standard input}:42     .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
    {standard input}:45     .bss.pxDelayedTaskList:00000000 $d
    {standard input}:48     .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
    {standard input}:51     .bss.pxOverflowDelayedTaskList:00000000 $d
    {standard input}:54     .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
    {standard input}:57     .bss.xPendingReadyList:00000000 $d
    {standard input}:60     .bss.xPendingReadyList:00000000 xPendingReadyList
    {standard input}:63     .bss.xTasksWaitingTermination:00000000 $d
    {standard input}:66     .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
    {standard input}:69     .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
    {standard input}:72     .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
    {standard input}:75     .bss.xSuspendedTaskList:00000000 $d
    {standard input}:78     .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
    {standard input}:81     .bss.uxCurrentNumberOfTasks:00000000 $d
    {standard input}:84     .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
    {standard input}:87     .bss.xTickCount:00000000 $d
    {standard input}:90     .bss.xTickCount:00000000 xTickCount
    {standard input}:93     .bss.uxTopReadyPriority:00000000 $d
    {standard input}:96     .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
    {standard input}:99     .bss.xSchedulerRunning:00000000 $d
    {standard input}:102    .bss.xSchedulerRunning:00000000 xSchedulerRunning
    {standard input}:105    .bss.uxPendedTicks:00000000 $d
    {standard input}:108    .bss.uxPendedTicks:00000000 uxPendedTicks
    {standard input}:111    .bss.xYieldPending:00000000 $d
    {standard input}:114    .bss.xYieldPending:00000000 xYieldPending
    {standard input}:117    .bss.xNumOfOverflows:00000000 $d
    {standard input}:120    .bss.xNumOfOverflows:00000000 xNumOfOverflows
    {standard input}:123    .bss.uxTaskNumber:00000000 $d
    {standard input}:126    .bss.uxTaskNumber:00000000 uxTaskNumber
    {standard input}:129    .bss.xNextTaskUnblockTime:00000000 $d
    {standard input}:132    .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
    {standard input}:135    .bss.xIdleTaskHandle:00000000 $d
    {standard input}:138    .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
    {standard input}:141    .bss.uxSchedulerSuspended:00000000 $d
    {standard input}:144    .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
    {standard input}:147    .text.xTaskCreate:00000000 $t
    {standard input}:152    .text.xTaskCreate:00000000 xTaskCreate
    {standard input}:255    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
    {standard input}:468    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
    {standard input}:251    .text.prvInitialiseNewTask:00000000 $t
    {standard input}:464    .text.prvAddNewTaskToReadyList:00000000 $t
    {standard input}:5102   .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
    {standard input}:599    .text.prvAddNewTaskToReadyList:000000c4 $d
    {standard input}:610    .text.vTaskDelete:00000000 $t
    {standard input}:615    .text.vTaskDelete:00000000 vTaskDelete
    {standard input}:5664   .text.prvDeleteTCB:00000000 prvDeleteTCB
    {standard input}:5702   .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
    {standard input}:786    .text.vTaskDelete:000000f4 $d
    {standard input}:800    .text.vTaskDelayUntil:00000000 $t
    {standard input}:805    .text.vTaskDelayUntil:00000000 vTaskDelayUntil
    {standard input}:2406   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
    {standard input}:7883   .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
    {standard input}:2445   .text.xTaskResumeAll:00000000 xTaskResumeAll
    {standard input}:988    .text.vTaskDelayUntil:000000e8 $d
    {standard input}:995    .text.vTaskDelay:00000000 $t
    {standard input}:1000   .text.vTaskDelay:00000000 vTaskDelay
    {standard input}:1081   .text.vTaskDelay:0000005c $d
    {standard input}:1087   .text.eTaskGetState:00000000 $t
    {standard input}:1092   .text.eTaskGetState:00000000 eTaskGetState
    {standard input}:1221   .text.eTaskGetState:0000009c $d
    {standard input}:1230   .text.uxTaskPriorityGet:00000000 $t
    {standard input}:1235   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
    {standard input}:1285   .text.uxTaskPriorityGet:00000030 $d
    {standard input}:1290   .text.uxTaskPriorityGetFromISR:00000000 $t
    {standard input}:1295   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
    {standard input}:1375   .text.uxTaskPriorityGetFromISR:00000054 $d
    {standard input}:1380   .text.vTaskPrioritySet:00000000 $t
    {standard input}:1385   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
    {standard input}:1617   .text.vTaskPrioritySet:0000014c $d
    {standard input}:1625   .text.vTaskSuspend:00000000 $t
    {standard input}:1630   .text.vTaskSuspend:00000000 vTaskSuspend
    {standard input}:3809   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
    {standard input}:1809   .text.vTaskSuspend:00000100 $d
    {standard input}:1821   .text.prvTaskIsTaskSuspended:00000000 $t
    {standard input}:1825   .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
    {standard input}:1925   .text.prvTaskIsTaskSuspended:0000006c $d
    {standard input}:1931   .text.vTaskResume:00000000 $t
    {standard input}:1936   .text.vTaskResume:00000000 vTaskResume
    {standard input}:2056   .text.vTaskResume:000000ac $d
    {standard input}:2064   .text.xTaskResumeFromISR:00000000 $t
    {standard input}:2069   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
    {standard input}:2220   .text.xTaskResumeFromISR:000000d0 $d
    {standard input}:2229   .rodata:00000000 $d
    {standard input}:2233   .text.vTaskStartScheduler:00000000 $t
    {standard input}:2238   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
    {standard input}:2337   .text.vTaskStartScheduler:0000007c $d
    {standard input}:4908   .text.prvIdleTask:00000000 prvIdleTask
    {standard input}:2347   .text.vTaskEndScheduler:00000000 $t
    {standard input}:2352   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
    {standard input}:2396   .text.vTaskEndScheduler:00000028 $d
    {standard input}:2401   .text.vTaskSuspendAll:00000000 $t
    {standard input}:2435   .text.vTaskSuspendAll:00000018 $d
    {standard input}:2440   .text.xTaskResumeAll:00000000 $t
    {standard input}:3553   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
    {standard input}:2642   .text.xTaskResumeAll:00000118 $d
    {standard input}:2655   .text.xTaskGetTickCount:00000000 $t
    {standard input}:2660   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
    {standard input}:2694   .text.xTaskGetTickCount:0000001c $d
    {standard input}:2699   .text.xTaskGetTickCountFromISR:00000000 $t
    {standard input}:2704   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
    {standard input}:2740   .text.xTaskGetTickCountFromISR:00000020 $d
    {standard input}:2745   .text.uxTaskGetNumberOfTasks:00000000 $t
    {standard input}:2750   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
    {standard input}:2777   .text.uxTaskGetNumberOfTasks:00000014 $d
    {standard input}:2782   .text.pcTaskGetName:00000000 $t
    {standard input}:2787   .text.pcTaskGetName:00000000 pcTaskGetName
    {standard input}:2855   .text.pcTaskGetName:00000044 $d
    {standard input}:2860   .text.prvSearchForNameWithinSingleList:00000000 $t
    {standard input}:2864   .text.prvSearchForNameWithinSingleList:00000000 prvSearchForNameWithinSingleList
    {standard input}:3019   .text.xTaskGetHandle:00000000 $t
    {standard input}:3024   .text.xTaskGetHandle:00000000 xTaskGetHandle
    {standard input}:3156   .text.xTaskGetHandle:000000b4 $d
    {standard input}:3165   .text.uxTaskGetSystemState:00000000 $t
    {standard input}:3170   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
    {standard input}:5417   .text.prvListTasksWithinSingleList:00000000 prvListTasksWithinSingleList
    {standard input}:3329   .text.uxTaskGetSystemState:00000108 $d
    {standard input}:3339   .text.xTaskGetIdleTaskHandle:00000000 $t
    {standard input}:3344   .text.xTaskGetIdleTaskHandle:00000000 xTaskGetIdleTaskHandle
    {standard input}:3398   .text.xTaskGetIdleTaskHandle:00000034 $d
    {standard input}:3403   .text.xTaskAbortDelay:00000000 $t
    {standard input}:3408   .text.xTaskAbortDelay:00000000 xTaskAbortDelay
    {standard input}:3540   .text.xTaskAbortDelay:000000c0 $d
    {standard input}:3548   .text.xTaskIncrementTick:00000000 $t
    {standard input}:3789   .text.xTaskIncrementTick:00000150 $d
    {standard input}:3804   .text.vTaskSwitchContext:00000000 $t
    {standard input}:3937   .text.vTaskSwitchContext:000000a0 $d
    {standard input}:3946   .text.vTaskPlaceOnEventList:00000000 $t
    {standard input}:3951   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
    {standard input}:4010   .text.vTaskPlaceOnEventList:00000040 $d
    {standard input}:4015   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
    {standard input}:4020   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
    {standard input}:4109   .text.vTaskPlaceOnUnorderedEventList:0000006c $d
    {standard input}:4115   .text.vTaskPlaceOnEventListRestricted:00000000 $t
    {standard input}:4120   .text.vTaskPlaceOnEventListRestricted:00000000 vTaskPlaceOnEventListRestricted
    {standard input}:4188   .text.vTaskPlaceOnEventListRestricted:00000050 $d
    {standard input}:4193   .text.xTaskRemoveFromEventList:00000000 $t
    {standard input}:4198   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
    {standard input}:4322   .text.xTaskRemoveFromEventList:000000b0 $d
    {standard input}:4332   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
    {standard input}:4337   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
    {standard input}:4462   .text.vTaskRemoveFromUnorderedEventList:000000ac $d
    {standard input}:4471   .text.vTaskSetTimeOutState:00000000 $t
    {standard input}:4476   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
    {standard input}:4537   .text.vTaskSetTimeOutState:00000040 $d
    {standard input}:4543   .text.vTaskInternalSetTimeOutState:00000000 $t
    {standard input}:4548   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
    {standard input}:4586   .text.vTaskInternalSetTimeOutState:00000024 $d
    {standard input}:4592   .text.xTaskCheckForTimeOut:00000000 $t
    {standard input}:4597   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
    {standard input}:4759   .text.xTaskCheckForTimeOut:000000d4 $d
    {standard input}:4766   .text.vTaskMissedYield:00000000 $t
    {standard input}:4771   .text.vTaskMissedYield:00000000 vTaskMissedYield
    {standard input}:4798   .text.vTaskMissedYield:00000014 $d
    {standard input}:4803   .text.uxTaskGetTaskNumber:00000000 $t
    {standard input}:4808   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
    {standard input}:4857   .text.vTaskSetTaskNumber:00000000 $t
    {standard input}:4862   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
    {standard input}:4904   .text.prvIdleTask:00000000 $t
    {standard input}:5189   .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
    {standard input}:4948   .text.prvIdleTask:00000028 $d
    {standard input}:4954   .text.vTaskSetThreadLocalStoragePointer:00000000 $t
    {standard input}:4959   .text.vTaskSetThreadLocalStoragePointer:00000000 vTaskSetThreadLocalStoragePointer
    {standard input}:5016   .text.vTaskSetThreadLocalStoragePointer:0000003c $d
    {standard input}:5021   .text.pvTaskGetThreadLocalStoragePointer:00000000 $t
    {standard input}:5026   .text.pvTaskGetThreadLocalStoragePointer:00000000 pvTaskGetThreadLocalStoragePointer
    {standard input}:5093   .text.pvTaskGetThreadLocalStoragePointer:00000048 $d
    {standard input}:5098   .text.prvInitialiseTaskLists:00000000 $t
    {standard input}:5173   .text.prvInitialiseTaskLists:0000005c $d
    {standard input}:5185   .text.prvCheckTasksWaitingTermination:00000000 $t
    {standard input}:5253   .text.prvCheckTasksWaitingTermination:0000004c $d
    {standard input}:5260   .text.vTaskGetInfo:00000000 $t
    {standard input}:5265   .text.vTaskGetInfo:00000000 vTaskGetInfo
    {standard input}:5542   .text.prvTaskCheckFreeStackSpace:00000000 prvTaskCheckFreeStackSpace
    {standard input}:5408   .text.vTaskGetInfo:000000c4 $d
    {standard input}:5413   .text.prvListTasksWithinSingleList:00000000 $t
    {standard input}:5538   .text.prvTaskCheckFreeStackSpace:00000000 $t
    {standard input}:5599   .text.uxTaskGetStackHighWaterMark:00000000 $t
    {standard input}:5604   .text.uxTaskGetStackHighWaterMark:00000000 uxTaskGetStackHighWaterMark
    {standard input}:5655   .text.uxTaskGetStackHighWaterMark:00000034 $d
    {standard input}:5660   .text.prvDeleteTCB:00000000 $t
    {standard input}:5698   .text.prvResetNextTaskUnblockTime:00000000 $t
    {standard input}:5763   .text.prvResetNextTaskUnblockTime:00000040 $d
    {standard input}:5769   .text.xTaskGetCurrentTaskHandle:00000000 $t
    {standard input}:5774   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
    {standard input}:5808   .text.xTaskGetCurrentTaskHandle:0000001c $d
    {standard input}:5813   .text.xTaskGetSchedulerState:00000000 $t
    {standard input}:5818   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
    {standard input}:5872   .text.xTaskGetSchedulerState:00000034 $d
    {standard input}:5878   .text.xTaskPriorityInherit:00000000 $t
    {standard input}:5883   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
    {standard input}:6054   .text.xTaskPriorityInherit:00000104 $d
    {standard input}:6061   .text.xTaskPriorityDisinherit:00000000 $t
    {standard input}:6066   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
    {standard input}:6241   .text.xTaskPriorityDisinherit:00000100 $d
    {standard input}:6248   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
    {standard input}:6253   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
    {standard input}:6463   .text.vTaskPriorityDisinheritAfterTimeout:00000130 $d
    {standard input}:6470   .text.prvWriteNameToBuffer:00000000 $t
    {standard input}:6474   .text.prvWriteNameToBuffer:00000000 prvWriteNameToBuffer
    {standard input}:6541   .text.vTaskList:00000000 $t
    {standard input}:6546   .text.vTaskList:00000000 vTaskList
    {standard input}:6614   .text.vTaskList:00000060 $d
    {standard input}:6619   .text.vTaskList:00000074 $t
    {standard input}:6739   .text.vTaskList:00000128 $d
    {standard input}:6745   .text.uxTaskResetEventItemValue:00000000 $t
    {standard input}:6750   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
    {standard input}:6793   .text.uxTaskResetEventItemValue:0000002c $d
    {standard input}:6798   .text.pvTaskIncrementMutexHeldCount:00000000 $t
    {standard input}:6803   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
    {standard input}:6842   .text.pvTaskIncrementMutexHeldCount:00000024 $d
    {standard input}:6847   .text.ulTaskNotifyTake:00000000 $t
    {standard input}:6852   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
    {standard input}:6952   .text.ulTaskNotifyTake:00000088 $d
    {standard input}:6958   .text.xTaskNotifyWait:00000000 $t
    {standard input}:6963   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
    {standard input}:7082   .text.xTaskNotifyWait:000000ac $d
    {standard input}:7088   .text.xTaskGenericNotify:00000000 $t
    {standard input}:7093   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
    {standard input}:7168   .text.xTaskGenericNotify:00000060 $d
    {standard input}:7173   .text.xTaskGenericNotify:00000074 $t
    {standard input}:7310   .text.xTaskGenericNotify:00000134 $d
    {standard input}:7318   .text.xTaskGenericNotifyFromISR:00000000 $t
    {standard input}:7323   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
    {standard input}:7418   .text.xTaskGenericNotifyFromISR:00000080 $d
    {standard input}:7423   .text.xTaskGenericNotifyFromISR:00000094 $t
    {standard input}:7587   .text.xTaskGenericNotifyFromISR:00000178 $d
    {standard input}:7597   .text.vTaskNotifyGiveFromISR:00000000 $t
    {standard input}:7602   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
    {standard input}:7794   .text.vTaskNotifyGiveFromISR:00000108 $d
    {standard input}:7804   .text.xTaskNotifyStateClear:00000000 $t
    {standard input}:7809   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
    {standard input}:7874   .text.xTaskNotifyStateClear:00000048 $d
    {standard input}:7879   .text.prvAddCurrentTaskToDelayedList:00000000 $t
    {standard input}:8004   .text.prvAddCurrentTaskToDelayedList:000000b8 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
pvPortMalloc
vPortFree
memset
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vPortValidateInterruptPriority
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
strlen
vListInsert
vListInitialise
strcpy
sprintf
