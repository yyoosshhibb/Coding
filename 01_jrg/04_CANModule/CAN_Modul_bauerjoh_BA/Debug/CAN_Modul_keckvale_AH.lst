
CAN_Modul_keckvale_AH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006c30  08000000  0c000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00018000  2**0
                  ALLOC
  2 .data         000003d4  20000000  0c006c30  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000004d4  200003d4  0c007004  000103d4  2**2
                  ALLOC
  4 .no_init      00000014  2000ffc0  2000ffc0  00017fc0  2**2
                  ALLOC
  5 .debug_aranges 000014f0  00000000  00000000  000103d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00023f5a  00000000  00000000  000118c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005118  00000000  00000000  00035822  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000cd17  00000000  00000000  0003a93a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000055fc  00000000  00000000  00047654  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000bf4a  00000000  00000000  0004cc50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000011e0  00000000  00000000  00058b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .build_attributes 00000bde  00000000  00000000  00059d7a  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	d1 20 00 08 b1 02 00 08 00 00 00 00 11 23 00 08     . ...........#..
 800003c:	81 23 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     .#..............
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c006c30 	.word	0x0c006c30
 800024c:	20000000 	.word	0x20000000
 8000250:	000003d4 	.word	0x000003d4
 8000254:	0c007004 	.word	0x0c007004
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c006c30 	.word	0x0c006c30
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c006c30 	.word	0x0c006c30
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	200003d4 	.word	0x200003d4
 800027c:	000004d4 	.word	0x000004d4
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000290:	10000800 	.word	0x10000800

	.align	1
    .thumb
 8000294:	080002b5 	.word	0x080002b5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	0800661d 	.word	0x0800661d
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	08005cf9 	.word	0x08005cf9

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002b4:	b598      	push	{r3, r4, r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <SystemInit+0x1c>)
 80002ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002be:	4614      	mov	r4, r2
 80002c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002c6:	f004 f8c7 	bl	8004458 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002ca:	f004 f92f 	bl	800452c <SystemCoreClockSetup>
}
 80002ce:	bd98      	pop	{r3, r4, r7, pc}
 80002d0:	2000ffc4 	.word	0x2000ffc4

080002d4 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002da:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d03e      	beq.n	8000364 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002e6:	4b2d      	ldr	r3, [pc, #180]	; (800039c <SystemCoreClockUpdate+0xc8>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d002      	beq.n	80002f8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e002      	b.n	80002fe <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002f8:	f004 f90e 	bl	8004518 <OSCHP_GetFrequency>
 80002fc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002fe:	4b27      	ldr	r3, [pc, #156]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	2b00      	cmp	r3, #0
 8000308:	d020      	beq.n	800034c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000312:	0e1b      	lsrs	r3, r3, #24
 8000314:	3301      	adds	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000320:	0a1b      	lsrs	r3, r3, #8
 8000322:	3301      	adds	r3, #1
 8000324:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	3301      	adds	r3, #1
 8000332:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	fb02 f303 	mul.w	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e00d      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000354:	3301      	adds	r3, #1
 8000356:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	e001      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 8000366:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	3301      	adds	r3, #1
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	fbb2 f3f3 	udiv	r3, r2, r3
 8000376:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	3301      	adds	r3, #1
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	fbb2 f3f3 	udiv	r3, r2, r3
 8000388:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <SystemCoreClockUpdate+0xd0>)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	50004600 	.word	0x50004600
 800039c:	50004710 	.word	0x50004710
 80003a0:	016e3600 	.word	0x016e3600
 80003a4:	2000ffc0 	.word	0x2000ffc0

080003a8 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	60f8      	str	r0, [r7, #12]
 80003b0:	460b      	mov	r3, r1
 80003b2:	607a      	str	r2, [r7, #4]
 80003b4:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80003b6:	7afb      	ldrb	r3, [r7, #11]
 80003b8:	089b      	lsrs	r3, r3, #2
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	4618      	mov	r0, r3
 80003be:	7afb      	ldrb	r3, [r7, #11]
 80003c0:	089b      	lsrs	r3, r3, #2
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	461a      	mov	r2, r3
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	3204      	adds	r2, #4
 80003ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003ce:	7afb      	ldrb	r3, [r7, #11]
 80003d0:	f003 0303 	and.w	r3, r3, #3
 80003d4:	00db      	lsls	r3, r3, #3
 80003d6:	4619      	mov	r1, r3
 80003d8:	23f8      	movs	r3, #248	; 0xf8
 80003da:	408b      	lsls	r3, r1
 80003dc:	43db      	mvns	r3, r3
 80003de:	ea02 0103 	and.w	r1, r2, r3
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	1d02      	adds	r2, r0, #4
 80003e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003ee:	7afb      	ldrb	r3, [r7, #11]
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	4619      	mov	r1, r3
 80003f4:	2303      	movs	r3, #3
 80003f6:	408b      	lsls	r3, r1
 80003f8:	43db      	mvns	r3, r3
 80003fa:	401a      	ands	r2, r3
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	4a3a      	ldr	r2, [pc, #232]	; (80004ec <XMC_GPIO_Init+0x144>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d003      	beq.n	8000410 <XMC_GPIO_Init+0x68>
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	4a39      	ldr	r2, [pc, #228]	; (80004f0 <XMC_GPIO_Init+0x148>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d10a      	bne.n	8000426 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000414:	7afb      	ldrb	r3, [r7, #11]
 8000416:	2101      	movs	r1, #1
 8000418:	fa01 f303 	lsl.w	r3, r1, r3
 800041c:	43db      	mvns	r3, r3
 800041e:	401a      	ands	r2, r3
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	661a      	str	r2, [r3, #96]	; 0x60
 8000424:	e042      	b.n	80004ac <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	b2db      	uxtb	r3, r3
 800042c:	b25b      	sxtb	r3, r3
 800042e:	2b00      	cmp	r3, #0
 8000430:	da3c      	bge.n	80004ac <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	685a      	ldr	r2, [r3, #4]
 8000436:	7afb      	ldrb	r3, [r7, #11]
 8000438:	409a      	lsls	r2, r3
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800043e:	7afb      	ldrb	r3, [r7, #11]
 8000440:	08db      	lsrs	r3, r3, #3
 8000442:	b2db      	uxtb	r3, r3
 8000444:	4618      	mov	r0, r3
 8000446:	7afb      	ldrb	r3, [r7, #11]
 8000448:	08db      	lsrs	r3, r3, #3
 800044a:	b2db      	uxtb	r3, r3
 800044c:	461a      	mov	r2, r3
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	3210      	adds	r2, #16
 8000452:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000456:	7afb      	ldrb	r3, [r7, #11]
 8000458:	f003 0307 	and.w	r3, r3, #7
 800045c:	009b      	lsls	r3, r3, #2
 800045e:	4619      	mov	r1, r3
 8000460:	2307      	movs	r3, #7
 8000462:	408b      	lsls	r3, r1
 8000464:	43db      	mvns	r3, r3
 8000466:	ea02 0103 	and.w	r1, r2, r3
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	f100 0210 	add.w	r2, r0, #16
 8000470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000474:	7afb      	ldrb	r3, [r7, #11]
 8000476:	08db      	lsrs	r3, r3, #3
 8000478:	b2db      	uxtb	r3, r3
 800047a:	4618      	mov	r0, r3
 800047c:	7afb      	ldrb	r3, [r7, #11]
 800047e:	08db      	lsrs	r3, r3, #3
 8000480:	b2db      	uxtb	r3, r3
 8000482:	461a      	mov	r2, r3
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	3210      	adds	r2, #16
 8000488:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	7a1b      	ldrb	r3, [r3, #8]
 8000490:	4619      	mov	r1, r3
 8000492:	7afb      	ldrb	r3, [r7, #11]
 8000494:	f003 0307 	and.w	r3, r3, #7
 8000498:	009b      	lsls	r3, r3, #2
 800049a:	fa01 f303 	lsl.w	r3, r1, r3
 800049e:	ea42 0103 	orr.w	r1, r2, r3
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	f100 0210 	add.w	r2, r0, #16
 80004a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80004ac:	7afb      	ldrb	r3, [r7, #11]
 80004ae:	089b      	lsrs	r3, r3, #2
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	4618      	mov	r0, r3
 80004b4:	7afb      	ldrb	r3, [r7, #11]
 80004b6:	089b      	lsrs	r3, r3, #2
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	461a      	mov	r2, r3
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	3204      	adds	r2, #4
 80004c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	4619      	mov	r1, r3
 80004ca:	7afb      	ldrb	r3, [r7, #11]
 80004cc:	f003 0303 	and.w	r3, r3, #3
 80004d0:	00db      	lsls	r3, r3, #3
 80004d2:	fa01 f303 	lsl.w	r3, r1, r3
 80004d6:	ea42 0103 	orr.w	r1, r2, r3
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	1d02      	adds	r2, r0, #4
 80004de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004e2:	3714      	adds	r7, #20
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	48028e00 	.word	0x48028e00
 80004f0:	48028f00 	.word	0x48028f00

080004f4 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80004f8:	4b03      	ldr	r3, [pc, #12]	; (8000508 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80004fa:	681b      	ldr	r3, [r3, #0]
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	2000ffc0 	.word	0x2000ffc0

0800050c <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 8000510:	4b03      	ldr	r3, [pc, #12]	; (8000520 <XMC_SCU_GetMirrorStatus+0x14>)
 8000512:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8000516:	4618      	mov	r0, r3
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	50004000 	.word	0x50004000

08000524 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 800052c:	f7ff fed2 	bl	80002d4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000530:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <XMC_SCU_lDelay+0x3c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <XMC_SCU_lDelay+0x40>)
 8000536:	fba2 2303 	umull	r2, r3, r2, r3
 800053a:	0c9a      	lsrs	r2, r3, #18
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	fb02 f303 	mul.w	r3, r2, r3
 8000542:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	e003      	b.n	8000552 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 800054a:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	3301      	adds	r3, #1
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	68fa      	ldr	r2, [r7, #12]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	429a      	cmp	r2, r3
 8000558:	d3f7      	bcc.n	800054a <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	2000ffc0 	.word	0x2000ffc0
 8000564:	431bde83 	.word	0x431bde83

08000568 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 800056c:	4b03      	ldr	r3, [pc, #12]	; (800057c <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 800056e:	685b      	ldr	r3, [r3, #4]
}
 8000570:	4618      	mov	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	50004074 	.word	0x50004074

08000580 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000588:	4a03      	ldr	r2, [pc, #12]	; (8000598 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	60d3      	str	r3, [r2, #12]
}
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	50004074 	.word	0x50004074

0800059c <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af02      	add	r7, sp, #8
 80005a2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 80005a4:	2000      	movs	r0, #0
 80005a6:	f000 f89b 	bl	80006e0 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 80005aa:	f000 fa2d 	bl	8000a08 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	79db      	ldrb	r3, [r3, #7]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d00a      	beq.n	80005cc <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 80005b6:	f000 fa65 	bl	8000a84 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80005ba:	bf00      	nop
 80005bc:	f000 fa50 	bl	8000a60 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80005c0:	4603      	mov	r3, r0
 80005c2:	f083 0301 	eor.w	r3, r3, #1
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d1f7      	bne.n	80005bc <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	7a5b      	ldrb	r3, [r3, #9]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 f8ff 	bl	80007d4 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80005d6:	bf00      	nop
 80005d8:	f7ff ff98 	bl	800050c <XMC_SCU_GetMirrorStatus>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d1fa      	bne.n	80005d8 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	7a1b      	ldrb	r3, [r3, #8]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 f9e8 	bl	80009bc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	7c1b      	ldrb	r3, [r3, #16]
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 f90d 	bl	8000810 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	7c5b      	ldrb	r3, [r3, #17]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 f930 	bl	8000860 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	7c9b      	ldrb	r3, [r3, #18]
 8000604:	4618      	mov	r0, r3
 8000606:	f000 f917 	bl	8000838 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	7cdb      	ldrb	r3, [r3, #19]
 800060e:	4618      	mov	r0, r3
 8000610:	f000 f93a 	bl	8000888 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	799b      	ldrb	r3, [r3, #6]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00a      	beq.n	8000632 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 800061c:	f000 fa6a 	bl	8000af4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000620:	bf00      	nop
 8000622:	f000 fa8f 	bl	8000b44 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 8000626:	4603      	mov	r3, r0
 8000628:	f083 0301 	eor.w	r3, r3, #1
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b00      	cmp	r3, #0
 8000630:	d1f7      	bne.n	8000622 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	78db      	ldrb	r3, [r3, #3]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d102      	bne.n	8000640 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 800063a:	f000 faa7 	bl	8000b8c <XMC_SCU_CLOCK_DisableSystemPll>
 800063e:	e014      	b.n	800066a <XMC_SCU_CLOCK_Init+0xce>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000640:	f000 fa94 	bl	8000b6c <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	8899      	ldrh	r1, [r3, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000650:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000656:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	4608      	mov	r0, r1
 8000660:	4611      	mov	r1, r2
 8000662:	462a      	mov	r2, r5
 8000664:	4623      	mov	r3, r4
 8000666:	f000 faa1 	bl	8000bac <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	68db      	ldr	r3, [r3, #12]
 800066e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000672:	d103      	bne.n	800067c <XMC_SCU_CLOCK_Init+0xe0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8000674:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000678:	f000 f832 	bl	80006e0 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 800067c:	f7ff fe2a 	bl	80002d4 <SystemCoreClockUpdate>
}
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bdb0      	pop	{r4, r5, r7, pc}
 8000686:	bf00      	nop

08000688 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	0f1b      	lsrs	r3, r3, #28
 8000694:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800069c:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	4613      	mov	r3, r2
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	4413      	add	r3, r2
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b04      	ldr	r3, [pc, #16]	; (80006bc <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 80006ac:	4413      	add	r3, r2
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	601a      	str	r2, [r3, #0]
}
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	50004414 	.word	0x50004414

080006c0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80006c4:	f7ff ff16 	bl	80004f4 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80006c8:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80006ca:	4b04      	ldr	r3, [pc, #16]	; (80006dc <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80006cc:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	50004600 	.word	0x50004600

080006e0 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80006e8:	4906      	ldr	r1, [pc, #24]	; (8000704 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006ec:	68db      	ldr	r3, [r3, #12]
 80006ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4313      	orrs	r3, r2
 80006f6:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	50004600 	.word	0x50004600

08000708 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8000710:	4906      	ldr	r1, [pc, #24]	; (800072c <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4313      	orrs	r3, r2
 800071e:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	50004600 	.word	0x50004600

08000730 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000738:	4906      	ldr	r1, [pc, #24]	; (8000754 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800073e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4313      	orrs	r3, r2
 8000746:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	50004600 	.word	0x50004600

08000758 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8000762:	88fb      	ldrh	r3, [r7, #6]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d108      	bne.n	800077a <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000768:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800076a:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800076c:	68db      	ldr	r3, [r3, #12]
 800076e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000772:	f023 0301 	bic.w	r3, r3, #1
 8000776:	60d3      	str	r3, [r2, #12]
 8000778:	e007      	b.n	800078a <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800077a:	4a06      	ldr	r2, [pc, #24]	; (8000794 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	60d3      	str	r3, [r2, #12]
  }
}
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	50004710 	.word	0x50004710

08000798 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007a2:	bf00      	nop
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 80007a6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007aa:	f003 0308 	and.w	r3, r3, #8
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d1f8      	bne.n	80007a4 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007b2:	4907      	ldr	r1, [pc, #28]	; (80007d0 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80007bc:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007be:	4313      	orrs	r3, r2
 80007c0:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	50004000 	.word	0x50004000
 80007d0:	50004300 	.word	0x50004300

080007d4 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007de:	bf00      	nop
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 80007e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d1f8      	bne.n	80007e0 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007ee:	4907      	ldr	r1, [pc, #28]	; (800080c <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80007f8:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007fa:	4313      	orrs	r3, r2
 80007fc:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	50004000 	.word	0x50004000
 800080c:	50004300 	.word	0x50004300

08000810 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000818:	4906      	ldr	r1, [pc, #24]	; (8000834 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 800081c:	68db      	ldr	r3, [r3, #12]
 800081e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000826:	4313      	orrs	r3, r2
 8000828:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	50004600 	.word	0x50004600

08000838 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000840:	4906      	ldr	r1, [pc, #24]	; (800085c <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000844:	6a1b      	ldr	r3, [r3, #32]
 8000846:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800084e:	4313      	orrs	r3, r2
 8000850:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	50004600 	.word	0x50004600

08000860 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000868:	4906      	ldr	r1, [pc, #24]	; (8000884 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 800086c:	691b      	ldr	r3, [r3, #16]
 800086e:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000876:	4313      	orrs	r3, r2
 8000878:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	50004600 	.word	0x50004600

08000888 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000890:	4906      	ldr	r1, [pc, #24]	; (80008ac <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800089e:	4313      	orrs	r3, r2
 80008a0:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	50004600 	.word	0x50004600

080008b0 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008b8:	4906      	ldr	r1, [pc, #24]	; (80008d4 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008c6:	4313      	orrs	r3, r2
 80008c8:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	50004600 	.word	0x50004600

080008d8 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008e0:	4906      	ldr	r1, [pc, #24]	; (80008fc <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008ee:	4313      	orrs	r3, r2
 80008f0:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	50004600 	.word	0x50004600

08000900 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000908:	4906      	ldr	r1, [pc, #24]	; (8000924 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 800090c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800090e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000916:	4313      	orrs	r3, r2
 8000918:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	50004600 	.word	0x50004600

08000928 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8000932:	4a04      	ldr	r2, [pc, #16]	; (8000944 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	6053      	str	r3, [r2, #4]
}
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	50004600 	.word	0x50004600

08000948 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000952:	4a19      	ldr	r2, [pc, #100]	; (80009b8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000954:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000956:	695b      	ldr	r3, [r3, #20]
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 800095e:	4a16      	ldr	r2, [pc, #88]	; (80009b8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000960:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000962:	695b      	ldr	r3, [r3, #20]
 8000964:	f043 0310 	orr.w	r3, r3, #16
 8000968:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 800096a:	4913      	ldr	r1, [pc, #76]	; (80009b8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	3b01      	subs	r3, #1
 8000970:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3b01      	subs	r3, #1
 8000976:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000978:	4313      	orrs	r3, r2
 800097a:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 800097c:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000986:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000988:	4a0b      	ldr	r2, [pc, #44]	; (80009b8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	f023 0310 	bic.w	r3, r3, #16
 8000992:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000994:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800099e:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80009a0:	bf00      	nop
 80009a2:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009a4:	691b      	ldr	r3, [r3, #16]
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d0f9      	beq.n	80009a2 <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	50004710 	.word	0x50004710

080009bc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80009c6:	4a0f      	ldr	r2, [pc, #60]	; (8000a04 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009c8:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009d0:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d10e      	bne.n	80009f6 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 80009d8:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80009e2:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 80009e4:	2064      	movs	r0, #100	; 0x64
 80009e6:	f7ff fd9d 	bl	8000524 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 80009ea:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009f4:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 80009f6:	2064      	movs	r0, #100	; 0x64
 80009f8:	f7ff fd94 	bl	8000524 <XMC_SCU_lDelay>
}
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	50004710 	.word	0x50004710

08000a08 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d109      	bne.n	8000a2c <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a1e:	bf00      	nop
 8000a20:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d0f9      	beq.n	8000a20 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d00a      	beq.n	8000a4e <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a3e:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000a40:	bf00      	nop
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d1f9      	bne.n	8000a42 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	50004200 	.word	0x50004200
 8000a5c:	50004400 	.word	0x50004400

08000a60 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f003 0308 	and.w	r3, r3, #8
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	bf0c      	ite	eq
 8000a70:	2301      	moveq	r3, #1
 8000a72:	2300      	movne	r3, #0
 8000a74:	b2db      	uxtb	r3, r3
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	50004300 	.word	0x50004300

08000a84 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000a88:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000a8c:	f7ff fd78 	bl	8000580 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000a90:	4a17      	ldr	r2, [pc, #92]	; (8000af0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000a92:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a9a:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000a9c:	bf00      	nop
 8000a9e:	f7ff fd63 	bl	8000568 <XMC_SCU_INTERUPT_GetEventStatus>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d0f8      	beq.n	8000a9e <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000aac:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000ab0:	f7ff fd66 	bl	8000580 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000ab6:	2208      	movs	r2, #8
 8000ab8:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000aba:	bf00      	nop
 8000abc:	f7ff fd54 	bl	8000568 <XMC_SCU_INTERUPT_GetEventStatus>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d0f8      	beq.n	8000abc <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000aca:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000ace:	f7ff fd57 	bl	8000580 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000ad2:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	f043 0308 	orr.w	r3, r3, #8
 8000adc:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000ade:	bf00      	nop
 8000ae0:	f7ff fd42 	bl	8000568 <XMC_SCU_INTERUPT_GetEventStatus>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d0f8      	beq.n	8000ae0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	50004300 	.word	0x50004300

08000af4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000af4:	b5b0      	push	{r4, r5, r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000af8:	4a0f      	ldr	r2, [pc, #60]	; (8000b38 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000afa:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b02:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000b04:	4d0d      	ldr	r5, [pc, #52]	; (8000b3c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000b0e:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000b12:	f003 fd01 	bl	8004518 <OSCHP_GetFrequency>
 8000b16:	4602      	mov	r2, r0
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000b1a:	fba3 2302 	umull	r2, r3, r3, r2
 8000b1e:	0d1b      	lsrs	r3, r3, #20
 8000b20:	3b01      	subs	r3, #1
 8000b22:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000b24:	4323      	orrs	r3, r4
 8000b26:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000b28:	4a03      	ldr	r2, [pc, #12]	; (8000b38 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b2a:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000b32:	6053      	str	r3, [r2, #4]
}
 8000b34:	bdb0      	pop	{r4, r5, r7, pc}
 8000b36:	bf00      	nop
 8000b38:	50004710 	.word	0x50004710
 8000b3c:	50004700 	.word	0x50004700
 8000b40:	6b5fca6b 	.word	0x6b5fca6b

08000b44 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000b48:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000b50:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000b54:	bf0c      	ite	eq
 8000b56:	2301      	moveq	r3, #1
 8000b58:	2300      	movne	r3, #0
 8000b5a:	b2db      	uxtb	r3, r3
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	50004710 	.word	0x50004710

08000b6c <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b70:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b72:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b7a:	f023 0302 	bic.w	r3, r3, #2
 8000b7e:	6053      	str	r3, [r2, #4]
}
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	50004710 	.word	0x50004710

08000b8c <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b90:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b92:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b9a:	f043 0302 	orr.w	r3, r3, #2
 8000b9e:	6053      	str	r3, [r2, #4]
}
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	50004710 	.word	0x50004710

08000bac <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60ba      	str	r2, [r7, #8]
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	81fb      	strh	r3, [r7, #14]
 8000bba:	460b      	mov	r3, r1
 8000bbc:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000bbe:	89fb      	ldrh	r3, [r7, #14]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fdc9 	bl	8000758 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000bc6:	7b7b      	ldrb	r3, [r7, #13]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	f040 8084 	bne.w	8000cd6 <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000bce:	89fb      	ldrh	r3, [r7, #14]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d109      	bne.n	8000be8 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000bd4:	f003 fca0 	bl	8004518 <OSCHP_GetFrequency>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	4b4b      	ldr	r3, [pc, #300]	; (8000d08 <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8000bdc:	fba3 2302 	umull	r2, r3, r3, r2
 8000be0:	0c9b      	lsrs	r3, r3, #18
 8000be2:	059b      	lsls	r3, r3, #22
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	e002      	b.n	8000bee <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000be8:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000bec:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	fb02 f203 	mul.w	r2, r2, r3
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfc:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	4a42      	ldr	r2, [pc, #264]	; (8000d0c <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8000c02:	fba2 2303 	umull	r2, r3, r2, r3
 8000c06:	091b      	lsrs	r3, r3, #4
 8000c08:	0d9b      	lsrs	r3, r3, #22
 8000c0a:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c0c:	4a40      	ldr	r2, [pc, #256]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c0e:	4b40      	ldr	r3, [pc, #256]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c18:	4a3d      	ldr	r2, [pc, #244]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c1a:	4b3d      	ldr	r3, [pc, #244]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f043 0310 	orr.w	r3, r3, #16
 8000c22:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c24:	493a      	ldr	r1, [pc, #232]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c26:	4b3a      	ldr	r3, [pc, #232]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c28:	689a      	ldr	r2, [r3, #8]
 8000c2a:	4b3a      	ldr	r3, [pc, #232]	; (8000d14 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8000c2c:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	3a01      	subs	r2, #1
 8000c32:	0212      	lsls	r2, r2, #8
 8000c34:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c3c:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	3b01      	subs	r3, #1
 8000c42:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c44:	4313      	orrs	r3, r2
 8000c46:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000c48:	4a31      	ldr	r2, [pc, #196]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c4a:	4b31      	ldr	r3, [pc, #196]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c52:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c54:	4a2e      	ldr	r2, [pc, #184]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c56:	4b2e      	ldr	r3, [pc, #184]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f023 0310 	bic.w	r3, r3, #16
 8000c5e:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000c60:	4a2b      	ldr	r2, [pc, #172]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c62:	4b2b      	ldr	r3, [pc, #172]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c6a:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000c6c:	bf00      	nop
 8000c6e:	4b28      	ldr	r3, [pc, #160]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f003 0304 	and.w	r3, r3, #4
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0f9      	beq.n	8000c6e <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c7a:	4a25      	ldr	r2, [pc, #148]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c7c:	4b24      	ldr	r3, [pc, #144]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f023 0301 	bic.w	r3, r3, #1
 8000c84:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000c86:	bf00      	nop
 8000c88:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1f9      	bne.n	8000c88 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	4a20      	ldr	r2, [pc, #128]	; (8000d18 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8000c98:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9c:	095b      	lsrs	r3, r3, #5
 8000c9e:	0d9b      	lsrs	r3, r3, #22
 8000ca0:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000ca2:	6a3a      	ldr	r2, [r7, #32]
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d202      	bcs.n	8000cb0 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000caa:	6938      	ldr	r0, [r7, #16]
 8000cac:	f000 f838 	bl	8000d20 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	085b      	lsrs	r3, r3, #1
 8000cb4:	4a19      	ldr	r2, [pc, #100]	; (8000d1c <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8000cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cba:	095b      	lsrs	r3, r3, #5
 8000cbc:	0d9b      	lsrs	r3, r3, #22
 8000cbe:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000cc0:	6a3a      	ldr	r2, [r7, #32]
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d202      	bcs.n	8000cce <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000cc8:	6938      	ldr	r0, [r7, #16]
 8000cca:	f000 f829 	bl	8000d20 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000cce:	6a38      	ldr	r0, [r7, #32]
 8000cd0:	f000 f826 	bl	8000d20 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000cd4:	e015      	b.n	8000d02 <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000cd6:	490e      	ldr	r1, [pc, #56]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cd8:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000ce0:	6a3b      	ldr	r3, [r7, #32]
 8000ce2:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000ce8:	4a09      	ldr	r2, [pc, #36]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000cf4:	bf00      	nop
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d0f9      	beq.n	8000cf6 <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	431bde83 	.word	0x431bde83
 8000d0c:	aaaaaaab 	.word	0xaaaaaaab
 8000d10:	50004710 	.word	0x50004710
 8000d14:	f08080ff 	.word	0xf08080ff
 8000d18:	88888889 	.word	0x88888889
 8000d1c:	b60b60b7 	.word	0xb60b60b7

08000d20 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d28:	4907      	ldr	r1, [pc, #28]	; (8000d48 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000d2a:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	3b01      	subs	r3, #1
 8000d36:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8000d3c:	2032      	movs	r0, #50	; 0x32
 8000d3e:	f7ff fbf1 	bl	8000524 <XMC_SCU_lDelay>
}
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	50004710 	.word	0x50004710

08000d4c <XMC_CAN_IsPanelControlReady>:
 * \par<b>Related APIs:</b><BR>
 *  XMC_CAN_PanelControl()
 *
 */
__STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8000d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	bf0c      	ite	eq
 8000d62:	2301      	moveq	r3, #1
 8000d64:	2300      	movne	r3, #0
 8000d66:	b2db      	uxtb	r3, r3
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <XMC_CAN_PanelControl>:

__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	4611      	mov	r1, r2
 8000d80:	461a      	mov	r2, r3
 8000d82:	4603      	mov	r3, r0
 8000d84:	70fb      	strb	r3, [r7, #3]
 8000d86:	460b      	mov	r3, r1
 8000d88:	70bb      	strb	r3, [r7, #2]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	707b      	strb	r3, [r7, #1]
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000d8e:	78fa      	ldrb	r2, [r7, #3]
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8000d90:	78bb      	ldrb	r3, [r7, #2]
 8000d92:	041b      	lsls	r3, r3, #16
 8000d94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000d98:	431a      	orrs	r2, r3
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
            (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 8000d9a:	787b      	ldrb	r3, [r7, #1]
 8000d9c:	061b      	lsls	r3, r3, #24
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8000d9e:	431a      	orrs	r2, r3
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
            (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
}
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	601a      	str	r2, [r3, #0]
}
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	601a      	str	r2, [r3, #0]
}
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <max>:

#if defined(CAN)
#include "xmc_scu.h"

__STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  return (a > b) ? a : b;
 8000dfa:	683a      	ldr	r2, [r7, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	bf38      	it	cc
 8000e02:	4613      	movcc	r3, r2
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <min>:

__STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
  return (a < b) ? a : b;
 8000e1a:	683a      	ldr	r2, [r7, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	bf28      	it	cs
 8000e22:	4613      	movcs	r3, r2
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <XMC_CAN_NODE_NominalBitTimeConfigure>:
}

/* Baudrate Configuration */
void XMC_CAN_NODE_NominalBitTimeConfigure (XMC_CAN_NODE_t *const can_node,
                                           const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_bit_time)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b090      	sub	sp, #64	; 0x40
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  uint32_t temp_brp = 12U ;
 8000e3a:	230c      	movs	r3, #12
 8000e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t temp_tseg1 = 12U;
 8000e3e:	230c      	movs	r3, #12
 8000e40:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t best_brp = 0U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t best_tseg1 = 1U;
 8000e46:	2301      	movs	r3, #1
 8000e48:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t best_tseg2 = 0U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  uint32_t best_tbaud = 0U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t best_error = 10000U;
 8000e52:	f242 7310 	movw	r3, #10000	; 0x2710
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
   * Tsjw = (SJW + 1)*Tq
   * TSeg1 >= Tsjw + Tprop
   * TSeg2 >= Tsjw
   */
  /* search for best baudrate */
  for (temp_brp = 1U; temp_brp <= 64U; temp_brp++)
 8000e58:	2301      	movs	r3, #1
 8000e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e5c:	e067      	b.n	8000f2e <XMC_CAN_NODE_NominalBitTimeConfigure+0xfe>
  {

    uint32_t f_quanta = (uint32_t)((can_bit_time->can_frequency * 10U) / temp_brp);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	4613      	mov	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	4413      	add	r3, r2
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e72:	613b      	str	r3, [r7, #16]
    uint32_t temp_tbaud = (uint32_t)(f_quanta / (can_bit_time->baudrate));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t temp_baudrate;
    uint32_t error;

  if((temp_tbaud % 10U) > 5U)
 8000e80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e82:	4b5b      	ldr	r3, [pc, #364]	; (8000ff0 <XMC_CAN_NODE_NominalBitTimeConfigure+0x1c0>)
 8000e84:	fba3 2301 	umull	r2, r3, r3, r1
 8000e88:	08da      	lsrs	r2, r3, #3
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	4413      	add	r3, r2
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	1aca      	subs	r2, r1, r3
 8000e94:	2a05      	cmp	r2, #5
 8000e96:	d909      	bls.n	8000eac <XMC_CAN_NODE_NominalBitTimeConfigure+0x7c>
  {
  temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 8000e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9a:	4a55      	ldr	r2, [pc, #340]	; (8000ff0 <XMC_CAN_NODE_NominalBitTimeConfigure+0x1c0>)
 8000e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea0:	08db      	lsrs	r3, r3, #3
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
  temp_tbaud++;
 8000ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eaa:	e005      	b.n	8000eb8 <XMC_CAN_NODE_NominalBitTimeConfigure+0x88>
  }
  else
  {
  temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 8000eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eae:	4a50      	ldr	r2, [pc, #320]	; (8000ff0 <XMC_CAN_NODE_NominalBitTimeConfigure+0x1c0>)
 8000eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb4:	08db      	lsrs	r3, r3, #3
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if(temp_tbaud > 0U)
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d00a      	beq.n	8000ed4 <XMC_CAN_NODE_NominalBitTimeConfigure+0xa4>
  {
    temp_baudrate = (uint32_t) (f_quanta / (temp_tbaud * 10U));
 8000ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	4413      	add	r3, r2
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	461a      	mov	r2, r3
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ed0:	623b      	str	r3, [r7, #32]
 8000ed2:	e007      	b.n	8000ee4 <XMC_CAN_NODE_NominalBitTimeConfigure+0xb4>
  }
  else
  {
    temp_baudrate = f_quanta / 10U;
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	4a46      	ldr	r2, [pc, #280]	; (8000ff0 <XMC_CAN_NODE_NominalBitTimeConfigure+0x1c0>)
 8000ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8000edc:	08db      	lsrs	r3, r3, #3
 8000ede:	623b      	str	r3, [r7, #32]
  temp_tbaud = 1;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if(temp_baudrate >= can_bit_time->baudrate)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685a      	ldr	r2, [r3, #4]
 8000ee8:	6a3b      	ldr	r3, [r7, #32]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d805      	bhi.n	8000efa <XMC_CAN_NODE_NominalBitTimeConfigure+0xca>
  {
  error = temp_baudrate - can_bit_time->baudrate;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	6a3a      	ldr	r2, [r7, #32]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	61fb      	str	r3, [r7, #28]
 8000ef8:	e004      	b.n	8000f04 <XMC_CAN_NODE_NominalBitTimeConfigure+0xd4>
  }
  else
  {
  error = can_bit_time->baudrate - temp_baudrate;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685a      	ldr	r2, [r3, #4]
 8000efe:	6a3b      	ldr	r3, [r7, #32]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	61fb      	str	r3, [r7, #28]
  }

  if ((temp_tbaud <= 20U) && (best_error > error))
 8000f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f06:	2b14      	cmp	r3, #20
 8000f08:	d80e      	bhi.n	8000f28 <XMC_CAN_NODE_NominalBitTimeConfigure+0xf8>
 8000f0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d90a      	bls.n	8000f28 <XMC_CAN_NODE_NominalBitTimeConfigure+0xf8>
  {
    best_brp = temp_brp;
 8000f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f14:	637b      	str	r3, [r7, #52]	; 0x34
    best_tbaud = temp_tbaud;
 8000f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
    best_error = (error);
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	62bb      	str	r3, [r7, #40]	; 0x28

    if (error < 1000U)
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f24:	d200      	bcs.n	8000f28 <XMC_CAN_NODE_NominalBitTimeConfigure+0xf8>
    {
      break;
 8000f26:	e005      	b.n	8000f34 <XMC_CAN_NODE_NominalBitTimeConfigure+0x104>
   * Tsjw = (SJW + 1)*Tq
   * TSeg1 >= Tsjw + Tprop
   * TSeg2 >= Tsjw
   */
  /* search for best baudrate */
  for (temp_brp = 1U; temp_brp <= 64U; temp_brp++)
 8000f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f30:	2b40      	cmp	r3, #64	; 0x40
 8000f32:	d994      	bls.n	8000e5e <XMC_CAN_NODE_NominalBitTimeConfigure+0x2e>
      break;
    }
   }
  }
  /* search for best sample point */
  best_error = 10000U;
 8000f34:	f242 7310 	movw	r3, #10000	; 0x2710
 8000f38:	62bb      	str	r3, [r7, #40]	; 0x28

  for (temp_tseg1 = 64U; temp_tseg1 >= 3U; temp_tseg1--)
 8000f3a:	2340      	movs	r3, #64	; 0x40
 8000f3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f3e:	e02e      	b.n	8000f9e <XMC_CAN_NODE_NominalBitTimeConfigure+0x16e>
  {
    uint32_t tempSamplePoint = ((temp_tseg1 + 1U) * 10000U) / best_tbaud;
 8000f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f42:	3301      	adds	r3, #1
 8000f44:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f48:	fb02 f203 	mul.w	r2, r2, r3
 8000f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f52:	60fb      	str	r3, [r7, #12]
  uint32_t error;
  if (tempSamplePoint >= can_bit_time->sample_point)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	891b      	ldrh	r3, [r3, #8]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d806      	bhi.n	8000f6e <XMC_CAN_NODE_NominalBitTimeConfigure+0x13e>
  {
      error = tempSamplePoint  - can_bit_time->sample_point;
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	891b      	ldrh	r3, [r3, #8]
 8000f64:	461a      	mov	r2, r3
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	1a9b      	subs	r3, r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
 8000f6c:	e005      	b.n	8000f7a <XMC_CAN_NODE_NominalBitTimeConfigure+0x14a>
  }
  else
  {
    error = can_bit_time->sample_point  - tempSamplePoint;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	891b      	ldrh	r3, [r3, #8]
 8000f72:	461a      	mov	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	61bb      	str	r3, [r7, #24]
  }
    if (best_error > error)
 8000f7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d903      	bls.n	8000f8a <XMC_CAN_NODE_NominalBitTimeConfigure+0x15a>
    {
      best_tseg1 = temp_tseg1;
 8000f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f84:	633b      	str	r3, [r7, #48]	; 0x30
      best_error = error;
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if (tempSamplePoint < (can_bit_time->sample_point))
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	891b      	ldrh	r3, [r3, #8]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d900      	bls.n	8000f98 <XMC_CAN_NODE_NominalBitTimeConfigure+0x168>
    {
      break;
 8000f96:	e005      	b.n	8000fa4 <XMC_CAN_NODE_NominalBitTimeConfigure+0x174>
   }
  }
  /* search for best sample point */
  best_error = 10000U;

  for (temp_tseg1 = 64U; temp_tseg1 >= 3U; temp_tseg1--)
 8000f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d8cd      	bhi.n	8000f40 <XMC_CAN_NODE_NominalBitTimeConfigure+0x110>
    {
      break;
    }
  }

  best_tseg2 = best_tbaud - best_tseg1 - 1U;
 8000fa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	3b01      	subs	r3, #1
 8000fac:	617b      	str	r3, [r7, #20]

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff fefe 	bl	8000db0 <XMC_CAN_NODE_EnableConfigurationChange>
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	031b      	lsls	r3, r3, #12
 8000fba:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	895b      	ldrh	r3, [r3, #10]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	019b      	lsls	r3, r3, #6
 8000fc6:	b2db      	uxtb	r3, r3

  best_tseg2 = best_tbaud - best_tseg1 - 1U;

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8000fc8:	431a      	orrs	r2, r3
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
                   (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk)|
 8000fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	021b      	lsls	r3, r3, #8
 8000fd0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
  best_tseg2 = best_tbaud - best_tseg1 - 1U;

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
 8000fd4:	431a      	orrs	r2, r3
                   (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk)|
                   (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk)|
 8000fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fde:	431a      	orrs	r2, r3

  best_tseg2 = best_tbaud - best_tseg1 - 1U;

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	611a      	str	r2, [r3, #16]
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
                   (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk)|
                   (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk)|
                   (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
  XMC_CAN_NODE_DisableConfigurationChange(can_node);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff fef3 	bl	8000dd0 <XMC_CAN_NODE_DisableConfigurationChange>
}
 8000fea:	3740      	adds	r7, #64	; 0x40
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	cccccccd 	.word	0xcccccccd

08000ff4 <XMC_CAN_AllocateMOtoNodeList>:
/* Function to allocate message object from free list to node list */
void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_num)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	70fb      	strb	r3, [r7, #3]
 8001000:	4613      	mov	r3, r2
 8001002:	70bb      	strb	r3, [r7, #2]
  /* wait while panel operation is in progress. */
  while (XMC_CAN_IsPanelControlReady(obj) == false)
 8001004:	bf00      	nop
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff fea0 	bl	8000d4c <XMC_CAN_IsPanelControlReady>
 800100c:	4603      	mov	r3, r0
 800100e:	f083 0301 	eor.w	r3, r3, #1
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1f6      	bne.n	8001006 <XMC_CAN_AllocateMOtoNodeList+0x12>
  {
    /*Do nothing*/
  };

  /* Panel Command for  allocation of MO to node list */
  XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE,mo_num,(node_num + 1U));
 8001018:	78fb      	ldrb	r3, [r7, #3]
 800101a:	3301      	adds	r3, #1
 800101c:	b2db      	uxtb	r3, r3
 800101e:	78ba      	ldrb	r2, [r7, #2]
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	2102      	movs	r1, #2
 8001024:	f7ff fea6 	bl	8000d74 <XMC_CAN_PanelControl>
}
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop

08001030 <XMC_CAN_Enable>:
#endif
}

/* Enable XMC_CAN Peripheral */
void XMC_CAN_Enable(XMC_CAN_t *const obj)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 8001038:	4809      	ldr	r0, [pc, #36]	; (8001060 <XMC_CAN_Enable+0x30>)
 800103a:	f7ff fb25 	bl	8000688 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  /* Enable CAN Module */
  obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f023 0201 	bic.w	r2, r3, #1
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	601a      	str	r2, [r3, #0]
  while (obj->CLC & CAN_CLC_DISS_Msk)
 800104a:	bf00      	nop
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1f9      	bne.n	800104c <XMC_CAN_Enable+0x1c>
  {
    /*Do nothing*/
  };
}
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	10000010 	.word	0x10000010

08001064 <XMC_CAN_Init>:
}

#else
/* Initialization of XMC_CAN GLOBAL Object */
void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08c      	sub	sp, #48	; 0x30
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  uint32_t step;
  uint32_t can_frequency_khz;
  uint32_t peripheral_frequency_khz;
  XMC_CAN_DM_t can_divider_mode;

  uint32_t peripheral_frequency = (XMC_SCU_CLOCK_GetPeripheralClockFrequency());
 800106e:	f7ff fb27 	bl	80006c0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001072:	62f8      	str	r0, [r7, #44]	; 0x2c

  XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);

  /*Enabling the module*/
  XMC_CAN_Enable(obj);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ffdb 	bl	8001030 <XMC_CAN_Enable>

  /* Normal divider mode */
  step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 800107a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001082:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001086:	2000      	movs	r0, #0
 8001088:	4619      	mov	r1, r3
 800108a:	f7ff feb1 	bl	8000df0 <max>
 800108e:	4603      	mov	r3, r0
 8001090:	4618      	mov	r0, r3
 8001092:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001096:	f7ff febb 	bl	8000e10 <min>
 800109a:	62b8      	str	r0, [r7, #40]	; 0x28
  freq_n = (uint32_t) (peripheral_frequency / (1024U - step_n));
 800109c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800109e:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80010a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Fractional divider mode */
  can_frequency_khz = (uint32_t) (can_frequency >> 6);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	099b      	lsrs	r3, r3, #6
 80010ae:	623b      	str	r3, [r7, #32]
  peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
 80010b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b2:	099b      	lsrs	r3, r3, #6
 80010b4:	61fb      	str	r3, [r7, #28]

  step_f = (uint32_t)(min( (((1024U * can_frequency_khz) / peripheral_frequency_khz) ), 1023U ));
 80010b6:	6a3b      	ldr	r3, [r7, #32]
 80010b8:	029a      	lsls	r2, r3, #10
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c0:	4618      	mov	r0, r3
 80010c2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80010c6:	f7ff fea3 	bl	8000e10 <min>
 80010ca:	61b8      	str	r0, [r7, #24]
  freq_f = (uint32_t)((peripheral_frequency_khz * step_f) / 1024U);
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	fb02 f303 	mul.w	r3, r2, r3
 80010d4:	0a9b      	lsrs	r3, r3, #10
 80010d6:	617b      	str	r3, [r7, #20]
  freq_f = freq_f << 6;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	019b      	lsls	r3, r3, #6
 80010dc:	617b      	str	r3, [r7, #20]

  normal_divider  = (uint32_t)(can_frequency - freq_n) <= (can_frequency - freq_f);
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	1ad2      	subs	r2, r2, r3
 80010e4:	6839      	ldr	r1, [r7, #0]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	1acb      	subs	r3, r1, r3
 80010ea:	429a      	cmp	r2, r3
 80010ec:	bf94      	ite	ls
 80010ee:	2301      	movls	r3, #1
 80010f0:	2300      	movhi	r3, #0
 80010f2:	74fb      	strb	r3, [r7, #19]

  step   = (normal_divider != 0U) ? step_n : step_f;
 80010f4:	7cfb      	ldrb	r3, [r7, #19]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <XMC_CAN_Init+0x9a>
 80010fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010fc:	e000      	b.n	8001100 <XMC_CAN_Init+0x9c>
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	60fb      	str	r3, [r7, #12]
  can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
 8001102:	7cfb      	ldrb	r3, [r7, #19]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <XMC_CAN_Init+0xa8>
 8001108:	2301      	movs	r3, #1
 800110a:	e000      	b.n	800110e <XMC_CAN_Init+0xaa>
 800110c:	2302      	movs	r3, #2
 800110e:	72fb      	strb	r3, [r7, #11]

  obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8001118:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	60d3      	str	r3, [r2, #12]
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	68da      	ldr	r2, [r3, #12]
 8001124:	7afb      	ldrb	r3, [r7, #11]
 8001126:	0399      	lsls	r1, r3, #14
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	430b      	orrs	r3, r1
 800112c:	431a      	orrs	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	60da      	str	r2, [r3, #12]
}
 8001132:	3730      	adds	r7, #48	; 0x30
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <XMC_CAN_MO_Config>:
  can_mo->can_id_mask = can_id_mask;
}

/* Initialization of XMC_CAN MO Object */
void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t reg;
  
  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f103 4338 	add.w	r3, r3, #3087007744	; 0xb8000000
 8001148:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 800114c:	095b      	lsrs	r3, r3, #5
 800114e:	617b      	str	r3, [r7, #20]
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	095b      	lsrs	r3, r3, #5
 8001154:	035a      	lsls	r2, r3, #13
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	f003 031f 	and.w	r3, r3, #31
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	4313      	orrs	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	6812      	ldr	r2, [r2, #0]
 800116a:	6892      	ldr	r2, [r2, #8]
 800116c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001170:	609a      	str	r2, [r3, #8]
  can_mo->can_mo_ptr->MOIPR |= set;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	6812      	ldr	r2, [r2, #0]
 800117a:	6891      	ldr	r1, [r2, #8]
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	430a      	orrs	r2, r1
 8001180:	609a      	str	r2, [r3, #8]
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	79db      	ldrb	r3, [r3, #7]
 8001186:	f003 0320 	and.w	r3, r3, #32
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b00      	cmp	r3, #0
 800118e:	d007      	beq.n	80011a0 <XMC_CAN_MO_Config+0x68>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	79db      	ldrb	r3, [r3, #7]
 8001194:	f003 0320 	and.w	r3, r3, #32
 8001198:	b2db      	uxtb	r3, r3
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 800119a:	2b00      	cmp	r3, #0
 800119c:	d100      	bne.n	80011a0 <XMC_CAN_MO_Config+0x68>
 800119e:	e060      	b.n	8001262 <XMC_CAN_MO_Config+0x12a>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	7e1b      	ldrb	r3, [r3, #24]
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d004      	beq.n	80011b2 <XMC_CAN_MO_Config+0x7a>
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
       (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	7e1b      	ldrb	r3, [r3, #24]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d000      	beq.n	80011b2 <XMC_CAN_MO_Config+0x7a>
 80011b0:	e057      	b.n	8001262 <XMC_CAN_MO_Config+0x12a>
  }
  else
  {

    /* Disable Message object */
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2220      	movs	r2, #32
 80011b8:	61da      	str	r2, [r3, #28]
    if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	79db      	ldrb	r3, [r3, #7]
 80011be:	f003 0320 	and.w	r3, r3, #32
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d128      	bne.n	800121a <XMC_CAN_MO_Config+0xe2>
    {
      reg = can_mo->mo_ar;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80011d4:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f3c3 031c 	ubfx	r3, r3, #0, #29
 80011de:	049b      	lsls	r3, r3, #18
 80011e0:	461a      	mov	r2, r3
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAR = reg;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	68fa      	ldr	r2, [r7, #12]
 80011ee:	619a      	str	r2, [r3, #24]

      reg = can_mo->mo_amr;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80011fc:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8001206:	049b      	lsls	r3, r3, #18
 8001208:	461a      	mov	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4313      	orrs	r3, r2
 800120e:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAMR = reg;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	e009      	b.n	800122e <XMC_CAN_MO_Config+0xf6>
    }
    else
    {
      can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	6852      	ldr	r2, [r2, #4]
 8001222:	619a      	str	r2, [r3, #24]
      can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	6892      	ldr	r2, [r2, #8]
 800122c:	60da      	str	r2, [r3, #12]
    }
    /* Check whether message object is transmit message object */
    if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	7e1b      	ldrb	r3, [r3, #24]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d10c      	bne.n	8001250 <XMC_CAN_MO_Config+0x118>
    {
      /* Set MO as Transmit message object  */
      XMC_CAN_MO_UpdateData(can_mo);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f000 f81a 	bl	8001270 <XMC_CAN_MO_UpdateData>
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001244:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a07      	ldr	r2, [pc, #28]	; (8001268 <XMC_CAN_MO_Config+0x130>)
 800124c:	61da      	str	r2, [r3, #28]
 800124e:	e008      	b.n	8001262 <XMC_CAN_MO_Config+0x12a>
                                   CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
    }
    else
    {
      /* Set MO as Receive message object and set RXEN bit */
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001258:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a03      	ldr	r2, [pc, #12]	; (800126c <XMC_CAN_MO_Config+0x134>)
 8001260:	61da      	str	r2, [r3, #28]
                                   CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
    }

  }
}
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	062000c0 	.word	0x062000c0
 800126c:	00a00640 	.word	0x00a00640

08001270 <XMC_CAN_MO_UpdateData>:

/* Update of XMC_CAN Object */
XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 8001278:	2303      	movs	r3, #3
 800127a:	73fb      	strb	r3, [r7, #15]
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	7e1b      	ldrb	r3, [r3, #24]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d122      	bne.n	80012ca <XMC_CAN_MO_UpdateData+0x5a>
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2220      	movs	r2, #32
 800128a:	61da      	str	r2, [r3, #28]
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	6812      	ldr	r2, [r2, #0]
 8001294:	6812      	ldr	r2, [r2, #0]
 8001296:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	7b12      	ldrb	r2, [r2, #12]
 800129e:	0612      	lsls	r2, r2, #24
 80012a0:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 80012a4:	430a      	orrs	r2, r1
 80012a6:	601a      	str	r2, [r3, #0]
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
    /* Configure Data registers*/
    can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	6912      	ldr	r2, [r2, #16]
 80012b0:	611a      	str	r2, [r3, #16]
    can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	6952      	ldr	r2, [r2, #20]
 80012ba:	615a      	str	r2, [r3, #20]
    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk| CAN_MO_MOCTR_SETMSGVAL_Msk |CAN_MO_MOCTR_RESRTSEL_Msk);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a06      	ldr	r2, [pc, #24]	; (80012dc <XMC_CAN_MO_UpdateData+0x6c>)
 80012c2:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 80012c4:	2300      	movs	r3, #0
 80012c6:	73fb      	strb	r3, [r7, #15]
 80012c8:	e001      	b.n	80012ce <XMC_CAN_MO_UpdateData+0x5e>
  }
  else
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 80012ca:	2303      	movs	r3, #3
 80012cc:	73fb      	strb	r3, [r7, #15]
  }
  return error;
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	00280040 	.word	0x00280040

080012e0 <XMC_CAN_MO_Transmit>:

/* This function is will put a transmit request to transmit message object */
XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b087      	sub	sp, #28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	75fb      	strb	r3, [r7, #23]
  uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO_MOSTAT_MSGVAL_Pos);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	f003 0320 	and.w	r3, r3, #32
 80012f6:	095b      	lsrs	r3, r3, #5
 80012f8:	613b      	str	r3, [r7, #16]
  uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_Msk) >> CAN_MO_MOSTAT_TXRQ_Pos;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	69db      	ldr	r3, [r3, #28]
 8001300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001304:	0a1b      	lsrs	r3, r3, #8
 8001306:	60fb      	str	r3, [r7, #12]
  /* check if message is disabled */
  if (mo_type == 0U)
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d102      	bne.n	8001314 <XMC_CAN_MO_Transmit+0x34>
  {
    error = XMC_CAN_STATUS_MO_DISABLED;
 800130e:	2304      	movs	r3, #4
 8001310:	75fb      	strb	r3, [r7, #23]
 8001312:	e00c      	b.n	800132e <XMC_CAN_MO_Transmit+0x4e>
  }
  /* check if transmission is ongoing on message object */
  else if (mo_transmission_ongoing == 1U)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d102      	bne.n	8001320 <XMC_CAN_MO_Transmit+0x40>
  {
    error = XMC_CAN_STATUS_BUSY;
 800131a:	2302      	movs	r3, #2
 800131c:	75fb      	strb	r3, [r7, #23]
 800131e:	e006      	b.n	800132e <XMC_CAN_MO_Transmit+0x4e>
  }
  else
  {
    /* set TXRQ bit */
    can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001328:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 800132a:	2300      	movs	r3, #0
 800132c:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 800132e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001330:	4618      	mov	r0, r3
 8001332:	371c      	adds	r7, #28
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <XMC_CAN_MO_Receive>:
}


/* This function is will read the message object data bytes */
XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
{
 800133c:	b480      	push	{r7}
 800133e:	b087      	sub	sp, #28
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	75fb      	strb	r3, [r7, #23]
  uint8_t rx_pnd = 0U;
 8001348:	2300      	movs	r3, #0
 800134a:	75bb      	strb	r3, [r7, #22]
  uint8_t new_data = 0U;
 800134c:	2300      	movs	r3, #0
 800134e:	757b      	strb	r3, [r7, #21]
  uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOSTAT_DIR_Pos;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800135a:	0adb      	lsrs	r3, r3, #11
 800135c:	613b      	str	r3, [r7, #16]
  uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	69db      	ldr	r3, [r3, #28]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	089b      	lsrs	r3, r3, #2
 800136a:	60fb      	str	r3, [r7, #12]
  /* check if message object is a receive message object */
  if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d002      	beq.n	8001378 <XMC_CAN_MO_Receive+0x3c>
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 8001372:	2303      	movs	r3, #3
 8001374:	75fb      	strb	r3, [r7, #23]
 8001376:	e0a7      	b.n	80014c8 <XMC_CAN_MO_Receive+0x18c>
  }
  /* check if reception is ongoing on message object */
  else if (mo_recepcion_ongoing == 1U)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d102      	bne.n	8001384 <XMC_CAN_MO_Receive+0x48>
  {
    error = XMC_CAN_STATUS_BUSY;
 800137e:	2302      	movs	r3, #2
 8001380:	75fb      	strb	r3, [r7, #23]
 8001382:	e0a1      	b.n	80014c8 <XMC_CAN_MO_Receive+0x18c>
  else
  {
    /* read message parameters */
    do
    {
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2208      	movs	r2, #8
 800138a:	61da      	str	r2, [r3, #28]
      if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001396:	0f5b      	lsrs	r3, r3, #29
 8001398:	2b00      	cmp	r3, #0
 800139a:	d140      	bne.n	800141e <XMC_CAN_MO_Receive+0xe2>
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	79d3      	ldrb	r3, [r2, #7]
 80013a0:	f36f 1345 	bfc	r3, #5, #1
 80013a4:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	699a      	ldr	r2, [r3, #24]
 80013ac:	4b4a      	ldr	r3, [pc, #296]	; (80014d8 <XMC_CAN_MO_Receive+0x19c>)
 80013ae:	4013      	ands	r3, r2
 80013b0:	0c9b      	lsrs	r3, r3, #18
 80013b2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6853      	ldr	r3, [r2, #4]
 80013ba:	f361 031c 	bfi	r3, r1, #0, #29
 80013be:	6053      	str	r3, [r2, #4]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013ca:	0f5b      	lsrs	r3, r3, #29
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	b2d9      	uxtb	r1, r3
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	7ad3      	ldrb	r3, [r2, #11]
 80013d8:	f361 1345 	bfi	r3, r1, #5, #1
 80013dc:	72d3      	strb	r3, [r2, #11]
        if(can_mo->can_ide_mask == 1U)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	7adb      	ldrb	r3, [r3, #11]
 80013e2:	f003 0320 	and.w	r3, r3, #32
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d00d      	beq.n	8001408 <XMC_CAN_MO_Receive+0xcc>
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	68da      	ldr	r2, [r3, #12]
 80013f2:	4b39      	ldr	r3, [pc, #228]	; (80014d8 <XMC_CAN_MO_Receive+0x19c>)
 80013f4:	4013      	ands	r3, r2
 80013f6:	0c9b      	lsrs	r3, r3, #18
 80013f8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	6893      	ldr	r3, [r2, #8]
 8001400:	f361 031c 	bfi	r3, r1, #0, #29
 8001404:	6093      	str	r3, [r2, #8]
 8001406:	e032      	b.n	800146e <XMC_CAN_MO_Receive+0x132>
        }
        else
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6893      	ldr	r3, [r2, #8]
 8001416:	f361 031c 	bfi	r3, r1, #0, #29
 800141a:	6093      	str	r3, [r2, #8]
 800141c:	e027      	b.n	800146e <XMC_CAN_MO_Receive+0x132>
        }
      }
      else
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	79d3      	ldrb	r3, [r2, #7]
 8001422:	f043 0320 	orr.w	r3, r3, #32
 8001426:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6853      	ldr	r3, [r2, #4]
 8001436:	f361 031c 	bfi	r3, r1, #0, #29
 800143a:	6053      	str	r3, [r2, #4]
        can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	6893      	ldr	r3, [r2, #8]
 800144a:	f361 031c 	bfi	r3, r1, #0, #29
 800144e:	6093      	str	r3, [r2, #8]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800145a:	0f5b      	lsrs	r3, r3, #29
 800145c:	b2db      	uxtb	r3, r3
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	b2d9      	uxtb	r1, r3
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	7ad3      	ldrb	r3, [r2, #11]
 8001468:	f361 1345 	bfi	r3, r1, #5, #1
 800146c:	72d3      	strb	r3, [r2, #11]
      }
      can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC_Msk) >> CAN_MO_MOFCR_DLC_Pos);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001478:	0e1b      	lsrs	r3, r3, #24
 800147a:	b2da      	uxtb	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	731a      	strb	r2, [r3, #12]

      can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	691a      	ldr	r2, [r3, #16]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	611a      	str	r2, [r3, #16]
      can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	695a      	ldr	r2, [r3, #20]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	615a      	str	r2, [r3, #20]

      rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	089b      	lsrs	r3, r3, #2
 80014a0:	75bb      	strb	r3, [r7, #22]
      new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> CAN_MO_MOSTAT_NEWDAT_Pos);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	f003 0308 	and.w	r3, r3, #8
 80014ac:	08db      	lsrs	r3, r3, #3
 80014ae:	757b      	strb	r3, [r7, #21]
    } while ((rx_pnd != 0U) && (new_data != 0U));
 80014b0:	7dbb      	ldrb	r3, [r7, #22]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <XMC_CAN_MO_Receive+0x182>
 80014b6:	7d7b      	ldrb	r3, [r7, #21]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f47f af63 	bne.w	8001384 <XMC_CAN_MO_Receive+0x48>

    can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	761a      	strb	r2, [r3, #24]
    error = XMC_CAN_STATUS_SUCCESS;
 80014c4:	2300      	movs	r3, #0
 80014c6:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 80014c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	371c      	adds	r7, #28
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	1ffc0000 	.word	0x1ffc0000

080014dc <XMC_CAN_NODE_EnableEvent>:

/* Function to enable node event */
void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  if(event != XMC_CAN_NODE_EVENT_CFCIE)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014ec:	d006      	beq.n	80014fc <XMC_CAN_NODE_EnableEvent+0x20>
  {
    can_node->NCR |= (uint32_t)event;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	431a      	orrs	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	e005      	b.n	8001508 <XMC_CAN_NODE_EnableEvent+0x2c>
  }
  else
  {
    can_node->NFCR |= (uint32_t)event;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	699a      	ldr	r2, [r3, #24]
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	431a      	orrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	619a      	str	r2, [r3, #24]
  }
}
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop

08001514 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001522:	60da      	str	r2, [r3, #12]
}
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop

08001530 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a10      	ldr	r2, [pc, #64]	; (800157c <XMC_CCU4_lDeassertReset+0x4c>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d103      	bne.n	8001548 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8001540:	2004      	movs	r0, #4
 8001542:	f7ff f8a1 	bl	8000688 <XMC_SCU_RESET_DeassertPeripheralReset>
 8001546:	e016      	b.n	8001576 <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a0d      	ldr	r2, [pc, #52]	; (8001580 <XMC_CCU4_lDeassertReset+0x50>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d103      	bne.n	8001558 <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8001550:	2008      	movs	r0, #8
 8001552:	f7ff f899 	bl	8000688 <XMC_SCU_RESET_DeassertPeripheralReset>
 8001556:	e00e      	b.n	8001576 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <XMC_CCU4_lDeassertReset+0x54>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d103      	bne.n	8001568 <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8001560:	2010      	movs	r0, #16
 8001562:	f7ff f891 	bl	8000688 <XMC_SCU_RESET_DeassertPeripheralReset>
 8001566:	e006      	b.n	8001576 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a07      	ldr	r2, [pc, #28]	; (8001588 <XMC_CCU4_lDeassertReset+0x58>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d102      	bne.n	8001576 <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8001570:	4806      	ldr	r0, [pc, #24]	; (800158c <XMC_CCU4_lDeassertReset+0x5c>)
 8001572:	f7ff f889 	bl	8000688 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	4000c000 	.word	0x4000c000
 8001580:	40010000 	.word	0x40010000
 8001584:	40014000 	.word	0x40014000
 8001588:	48004000 	.word	0x48004000
 800158c:	10000001 	.word	0x10000001

08001590 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8001598:	2010      	movs	r0, #16
 800159a:	f7ff f9c5 	bl	8000928 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff ffc6 	bl	8001530 <XMC_CCU4_lDeassertReset>
#endif
}
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop

080015ac <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff ffe9 	bl	8001590 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ffa8 	bl	8001514 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015d0:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 80015d2:	78fb      	ldrb	r3, [r7, #3]
 80015d4:	039b      	lsls	r3, r3, #14
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	4313      	orrs	r3, r2
 80015da:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	601a      	str	r2, [r3, #0]
}
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	795b      	ldrb	r3, [r3, #5]
 80015fe:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001602:	b2db      	uxtb	r3, r3
 8001604:	051a      	lsls	r2, r3, #20
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	791b      	ldrb	r3, [r3, #4]
 800160e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001612:	b2db      	uxtb	r3, r3
 8001614:	461a      	mov	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	795b      	ldrb	r3, [r3, #5]
 800161e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001622:	b2db      	uxtb	r3, r3
 8001624:	461a      	mov	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	795b      	ldrb	r3, [r3, #5]
 800162e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001632:	b2db      	uxtb	r3, r3
 8001634:	461a      	mov	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	791b      	ldrb	r3, [r3, #4]
 800163e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001642:	b2db      	uxtb	r3, r3
 8001644:	461a      	mov	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	70fb      	strb	r3, [r7, #3]
 8001660:	4613      	mov	r3, r2
 8001662:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001668:	78fb      	ldrb	r3, [r7, #3]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4619      	mov	r1, r3
 800166e:	2303      	movs	r3, #3
 8001670:	408b      	lsls	r3, r1
 8001672:	43db      	mvns	r3, r3
 8001674:	401a      	ands	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800167e:	78bb      	ldrb	r3, [r7, #2]
 8001680:	78f9      	ldrb	r1, [r7, #3]
 8001682:	0049      	lsls	r1, r1, #1
 8001684:	408b      	lsls	r3, r1
 8001686:	431a      	orrs	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop

08001698 <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
                                                           const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 80016a2:	783b      	ldrb	r3, [r7, #0]
 80016a4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	461a      	mov	r2, r3
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 80016ac:	78bb      	ldrb	r3, [r7, #2]
 80016ae:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 80016b6:	4313      	orrs	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80016c2:	78fb      	ldrb	r3, [r7, #3]
 80016c4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
 80016cc:	78fb      	ldrb	r3, [r7, #3]
 80016ce:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80016d6:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 80016d8:	78fb      	ldrb	r3, [r7, #3]
 80016da:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80016e2:	4313      	orrs	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001712:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop

08001728 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001736:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop

0800174c <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 8001750:	2001      	movs	r0, #1
 8001752:	f7fe ff99 	bl	8000688 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 8001756:	bd80      	pop	{r7, pc}

08001758 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint32_t reg;
#endif
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 8001762:	f7ff fff3 	bl	800174c <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	695a      	ldr	r2, [r3, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	68da      	ldr	r2, [r3, #12]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	691a      	ldr	r2, [r3, #16]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop

080017ac <XMC_VADC_GLOBAL_InputClassInit>:

/* API to Set the Global IClass registers*/
void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	603b      	str	r3, [r7, #0]
 80017b8:	4613      	mov	r3, r2
 80017ba:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_CONV_EMUX))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLASS_SET))

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d109      	bne.n	80017d6 <XMC_VADC_GLOBAL_InputClassInit+0x2a>
  {
#endif
	XMC_UNUSED_ARG(conv_type);
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	f240 731f 	movw	r3, #1823	; 0x71f
 80017c8:	4013      	ands	r3, r2
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	6839      	ldr	r1, [r7, #0]
 80017ce:	3128      	adds	r1, #40	; 0x28
 80017d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80017d4:	e007      	b.n	80017e6 <XMC_VADC_GLOBAL_InputClassInit+0x3a>
                                      (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk);
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  }
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <XMC_VADC_GLOBAL_InputClassInit+0x44>)
 80017da:	4013      	ands	r3, r2
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	6839      	ldr	r1, [r7, #0]
 80017e0:	3128      	adds	r1, #40	; 0x28
 80017e2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
#endif
}
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	071f0000 	.word	0x071f0000

080017f4 <XMC_VADC_GLOBAL_StartupCalibration>:

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001802:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800180c:	2300      	movs	r3, #0
 800180e:	73fb      	strb	r3, [r7, #15]
 8001810:	e017      	b.n	8001842 <XMC_VADC_GLOBAL_StartupCalibration+0x4e>
  {
    group_ptr = g_xmc_vadc_group_array[i];
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	4a0f      	ldr	r2, [pc, #60]	; (8001854 <XMC_VADC_GLOBAL_StartupCalibration+0x60>)
 8001816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181a:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001822:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d008      	beq.n	800183c <XMC_VADC_GLOBAL_StartupCalibration+0x48>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 800182a:	e000      	b.n	800182e <XMC_VADC_GLOBAL_StartupCalibration+0x3a>
      {
        __NOP();
 800182c:	bf00      	nop
  {
    group_ptr = g_xmc_vadc_group_array[i];
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1f7      	bne.n	800182c <XMC_VADC_GLOBAL_StartupCalibration+0x38>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	3301      	adds	r3, #1
 8001840:	73fb      	strb	r3, [r7, #15]
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	2b03      	cmp	r3, #3
 8001846:	d9e4      	bls.n	8001812 <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    __NOP();
  }
#endif
}
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	08006804 	.word	0x08006804

08001858 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>:
  global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
}

/* API to bind request source event with a service request line */
void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	70fb      	strb	r3, [r7, #3]
  uint32_t node;
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	2b03      	cmp	r3, #3
 8001868:	d903      	bls.n	8001872 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1a>
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 800186a:	78fb      	ldrb	r3, [r7, #3]
 800186c:	3b04      	subs	r3, #4
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	e001      	b.n	8001876 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1e>
  }
  else
  {
    node = (uint32_t)sr;
 8001872:	78fb      	ldrb	r3, [r7, #3]
 8001874:	60fb      	str	r3, [r7, #12]
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800187c:	f023 020f 	bic.w	r2, r3, #15
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <XMC_VADC_GROUP_Init>:

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	6859      	ldr	r1, [r3, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	2300      	movs	r3, #0
 80018b4:	f000 f828 	bl	8001908 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	6859      	ldr	r1, [r3, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	2300      	movs	r3, #0
 80018c2:	f000 f821 	bl	8001908 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	6899      	ldr	r1, [r3, #8]
 80018cc:	2200      	movs	r2, #0
 80018ce:	2301      	movs	r3, #1
 80018d0:	f000 f81a 	bl	8001908 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	6899      	ldr	r1, [r3, #8]
 80018da:	2201      	movs	r2, #1
 80018dc:	2301      	movs	r3, #1
 80018de:	f000 f813 	bl	8001908 <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	691a      	ldr	r2, [r3, #16]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  group_ptr->BOUND = config->g_bound;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	6819      	ldr	r1, [r3, #0]
 80018fc:	f7ff fecc 	bl	8001698 <XMC_VADC_GROUP_ExternalMuxControlInit>

}
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop

08001908 <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8001908:	b480      	push	{r7}
 800190a:	b08d      	sub	sp, #52	; 0x34
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	4613      	mov	r3, r2
 8001916:	71fb      	strb	r3, [r7, #7]

  /* 
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d113      	bne.n	8001946 <XMC_VADC_GROUP_InputClassInit+0x3e>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 800191e:	2308      	movs	r3, #8
 8001920:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 8001922:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 8001928:	2300      	movs	r3, #0
 800192a:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 800192c:	231f      	movs	r3, #31
 800192e:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
 8001930:	7a3b      	ldrb	r3, [r7, #8]
 8001932:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001936:	b2db      	uxtb	r3, r3
 8001938:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 800193a:	7a7b      	ldrb	r3, [r7, #9]
 800193c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001940:	b2db      	uxtb	r3, r3
 8001942:	76fb      	strb	r3, [r7, #27]
 8001944:	e013      	b.n	800196e <XMC_VADC_GROUP_InputClassInit+0x66>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 8001946:	2318      	movs	r3, #24
 8001948:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 800194a:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 8001950:	2310      	movs	r3, #16
 8001952:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 8001954:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 8001958:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 800195a:	7abb      	ldrb	r3, [r7, #10]
 800195c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001960:	b2db      	uxtb	r3, r3
 8001962:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 8001964:	7afb      	ldrb	r3, [r7, #11]
 8001966:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800196a:	b2db      	uxtb	r3, r3
 800196c:	76fb      	strb	r3, [r7, #27]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	3228      	adds	r2, #40	; 0x28
 8001974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001978:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	43db      	mvns	r3, r3
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	4013      	ands	r3, r2
 8001982:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 8001984:	7efa      	ldrb	r2, [r7, #27]
 8001986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	4313      	orrs	r3, r2
 8001990:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	43db      	mvns	r3, r3
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	4013      	ands	r3, r2
 800199a:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 800199c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800199e:	69fa      	ldr	r2, [r7, #28]
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	3228      	adds	r2, #40	; 0x28
 80019b0:	6979      	ldr	r1, [r7, #20]
 80019b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80019b6:	3734      	adds	r7, #52	; 0x34
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	70fb      	strb	r3, [r7, #3]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019d2:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f023 0303 	bic.w	r3, r3, #3
 80019da:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
 80019dc:	78fb      	ldrb	r3, [r7, #3]
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop

080019f8 <XMC_VADC_GLOBAL_BackgroundInit>:
}
#endif

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	75fb      	strb	r3, [r7, #23]
 8001a06:	e009      	b.n	8001a1c <XMC_VADC_GLOBAL_BackgroundInit+0x24>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 8001a08:	7dfb      	ldrb	r3, [r7, #23]
 8001a0a:	4a39      	ldr	r2, [pc, #228]	; (8001af0 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fe89 	bl	8001728 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001a16:	7dfb      	ldrb	r3, [r7, #23]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	75fb      	strb	r3, [r7, #23]
 8001a1c:	7dfb      	ldrb	r3, [r7, #23]
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d9f2      	bls.n	8001a08 <XMC_VADC_GLOBAL_BackgroundInit+0x10>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  
  conv_start_mask = (uint32_t) 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d002      	beq.n	8001a3a <XMC_VADC_GLOBAL_BackgroundInit+0x42>
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 8001a34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a38:	613b      	str	r3, [r7, #16]
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	75fb      	strb	r3, [r7, #23]
 8001a3e:	e021      	b.n	8001a84 <XMC_VADC_GLOBAL_BackgroundInit+0x8c>
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
 8001a40:	7dfb      	ldrb	r3, [r7, #23]
 8001a42:	4a2b      	ldr	r2, [pc, #172]	; (8001af0 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a4c:	60fb      	str	r3, [r7, #12]

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a54:	60fb      	str	r3, [r7, #12]

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	021b      	lsls	r3, r3, #8
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]
  
    /* Program the start mode */
    reg |= conv_start_mask;
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	60fb      	str	r3, [r7, #12]

    g_xmc_vadc_group_array[i]->ARBPR = reg;
 8001a70:	7dfb      	ldrb	r3, [r7, #23]
 8001a72:	4a1f      	ldr	r2, [pc, #124]	; (8001af0 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001a7e:	7dfb      	ldrb	r3, [r7, #23]
 8001a80:	3301      	adds	r3, #1
 8001a82:	75fb      	strb	r3, [r7, #23]
 8001a84:	7dfb      	ldrb	r3, [r7, #23]
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	d9da      	bls.n	8001a40 <XMC_VADC_GLOBAL_BackgroundInit+0x48>
  
  }
  #endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f043 0201 	orr.w	r2, r3, #1
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d107      	bne.n	8001ac8 <XMC_VADC_GLOBAL_BackgroundInit+0xd0>
  {
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001abe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001ac8:	2300      	movs	r3, #0
 8001aca:	75fb      	strb	r3, [r7, #23]
 8001acc:	e009      	b.n	8001ae2 <XMC_VADC_GLOBAL_BackgroundInit+0xea>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 8001ace:	7dfb      	ldrb	r3, [r7, #23]
 8001ad0:	4a07      	ldr	r2, [pc, #28]	; (8001af0 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fe14 	bl	8001704 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001adc:	7dfb      	ldrb	r3, [r7, #23]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	75fb      	strb	r3, [r7, #23]
 8001ae2:	7dfb      	ldrb	r3, [r7, #23]
 8001ae4:	2b03      	cmp	r3, #3
 8001ae6:	d9f2      	bls.n	8001ace <XMC_VADC_GLOBAL_BackgroundInit+0xd6>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  #endif
  
}
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	08006804 	.word	0x08006804

08001af4 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                        const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b089      	sub	sp, #36	; 0x24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	7a1b      	ldrb	r3, [r3, #8]
 8001b04:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b0c:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	2201      	movs	r2, #1
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	7a5b      	ldrb	r3, [r3, #9]
 8001b38:	b25b      	sxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	db29      	blt.n	8001b92 <XMC_VADC_GROUP_ChannelInit+0x9e>
  {
    mask = (uint32_t)0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d10a      	bne.n	8001b5e <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 8001b48:	2308      	movs	r3, #8
 8001b4a:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001b52:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001b5c:	e00c      	b.n	8001b78 <XMC_VADC_GROUP_ChannelInit+0x84>
    }
    else if ((uint32_t)0 == ch_num)
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d109      	bne.n	8001b78 <XMC_VADC_GROUP_ChannelInit+0x84>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001b6e:	f023 021f 	bic.w	r2, r3, #31
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	7a52      	ldrb	r2, [r2, #9]
 8001b82:	b251      	sxtb	r1, r2
 8001b84:	69fa      	ldr	r2, [r7, #28]
 8001b86:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6819      	ldr	r1, [r3, #0]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	3280      	adds	r2, #128	; 0x80
 8001bae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8001bb2:	3724      	adds	r7, #36	; 0x24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8001bc4:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <_sbrk+0x5c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d102      	bne.n	8001bd2 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <_sbrk+0x5c>)
 8001bce:	4a13      	ldr	r2, [pc, #76]	; (8001c1c <_sbrk+0x60>)
 8001bd0:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <_sbrk+0x5c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3303      	adds	r3, #3
 8001bdc:	f023 0303 	bic.w	r3, r3, #3
 8001be0:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8001be2:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <_sbrk+0x5c>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	4a0d      	ldr	r2, [pc, #52]	; (8001c20 <_sbrk+0x64>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d207      	bcs.n	8001c00 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8001bf0:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <_sbrk+0x5c>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	4a07      	ldr	r2, [pc, #28]	; (8001c18 <_sbrk+0x5c>)
 8001bfa:	6013      	str	r3, [r2, #0]
    return (base);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	e006      	b.n	8001c0e <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8001c00:	f004 fd06 	bl	8006610 <__errno>
 8001c04:	4602      	mov	r2, r0
 8001c06:	230c      	movs	r3, #12
 8001c08:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8001c0a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	200003d4 	.word	0x200003d4
 8001c1c:	200008a8 	.word	0x200008a8
 8001c20:	2000ffc0 	.word	0x2000ffc0

08001c24 <_init>:

/* Init */
void _init(void)
{}
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 8001c3c:	78fb      	ldrb	r3, [r7, #3]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	409a      	lsls	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	60da      	str	r2, [r3, #12]
}
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	60da      	str	r2, [r3, #12]
}
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2202      	movs	r2, #2
 8001c74:	611a      	str	r2, [r3, #16]
}
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8001c8c:	887a      	ldrh	r2, [r7, #2]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8001ca8:	887a      	ldrh	r2, [r7, #2]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	611a      	str	r2, [r3, #16]
}
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop

08001cd4 <XMC_CCU4_SLICE_GetTimerValue>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_SetTimerValue().
 */
__STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerValue(const XMC_CCU4_SLICE_t *const slice)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  return((uint16_t)slice->TIMER);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce0:	b29b      	uxth	r3, r3
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop

08001cf0 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001d02:	f083 0301 	eor.w	r3, r3, #1
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d009      	beq.n	8001d20 <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d104      	bne.n	8001d20 <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f86a 	bl	8001df0 <TIMER_CCU4_lInit>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop

08001d2c <TIMER_GetTime>:

/*
 * This function returns the current time value
 */
uint32_t TIMER_GetTime(TIMER_t *const handle_ptr)
{
 8001d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t ltimer_val;
  uint32_t lprescaler;
  uint32_t ltime_val;

  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));
  ltime_val = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d131      	bne.n	8001da6 <TIMER_GetTime+0x7a>
  {
    /* Added one to according to the edge aligned mode */
    ltimer_val = (uint32_t)XMC_CCU4_SLICE_GetTimerValue(handle_ptr->ccu4_slice_ptr) + 1U;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff ffc4 	bl	8001cd4 <XMC_CCU4_SLICE_GetTimerValue>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	3301      	adds	r3, #1
 8001d50:	613b      	str	r3, [r7, #16]
    lprescaler = handle_ptr->ccu4_slice_config_ptr->prescaler_initval;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	791b      	ldrb	r3, [r3, #4]
 8001d58:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	60fb      	str	r3, [r7, #12]

    /* calculate the time value in micro seconds and scaled with 100 */
    ltime_val = (uint32_t)((uint64_t)((uint64_t)ltimer_val * (uint64_t)TIMER_CLK_CONST_SCALED) >> \
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	461a      	mov	r2, r3
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	4911      	ldr	r1, [pc, #68]	; (8001db0 <TIMER_GetTime+0x84>)
 8001d6a:	fb01 f003 	mul.w	r0, r1, r3
 8001d6e:	2100      	movs	r1, #0
 8001d70:	fb01 f102 	mul.w	r1, r1, r2
 8001d74:	4401      	add	r1, r0
 8001d76:	480e      	ldr	r0, [pc, #56]	; (8001db0 <TIMER_GetTime+0x84>)
 8001d78:	fba2 2300 	umull	r2, r3, r2, r0
 8001d7c:	4419      	add	r1, r3
 8001d7e:	460b      	mov	r3, r1
                           (TIMER_CLK_SCALE_FACTOR - lprescaler));
 8001d80:	68f9      	ldr	r1, [r7, #12]
 8001d82:	f1c1 0120 	rsb	r1, r1, #32
    /* Added one to according to the edge aligned mode */
    ltimer_val = (uint32_t)XMC_CCU4_SLICE_GetTimerValue(handle_ptr->ccu4_slice_ptr) + 1U;
    lprescaler = handle_ptr->ccu4_slice_config_ptr->prescaler_initval;

    /* calculate the time value in micro seconds and scaled with 100 */
    ltime_val = (uint32_t)((uint64_t)((uint64_t)ltimer_val * (uint64_t)TIMER_CLK_CONST_SCALED) >> \
 8001d86:	f1c1 0620 	rsb	r6, r1, #32
 8001d8a:	f1a1 0020 	sub.w	r0, r1, #32
 8001d8e:	fa22 f401 	lsr.w	r4, r2, r1
 8001d92:	fa03 f606 	lsl.w	r6, r3, r6
 8001d96:	4334      	orrs	r4, r6
 8001d98:	fa23 f000 	lsr.w	r0, r3, r0
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	fa23 f501 	lsr.w	r5, r3, r1
 8001da2:	4623      	mov	r3, r4
 8001da4:	617b      	str	r3, [r7, #20]
    ltime_val = (uint32_t)((uint64_t)((uint64_t)ltimer_val * (uint64_t)TIMER_CLK_CONST_SCALED) >> \
                           (TIMER_CLK_SCALE_FACTOR - lprescaler));
  }
#endif

  return ltime_val;
 8001da6:	697b      	ldr	r3, [r7, #20]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	371c      	adds	r7, #28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001db0:	d5555555 	.word	0xd5555555

08001db4 <TIMER_Clear>:

/*
 * Clear the timer
 */
TIMER_STATUS_t TIMER_Clear(TIMER_t *const handle_ptr)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Clear:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00c      	beq.n	8001de0 <TIMER_Clear+0x2c>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d104      	bne.n	8001dda <TIMER_Clear+0x26>
    {
      /* Clear the timer register */
      XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff47 	bl	8001c68 <XMC_CCU4_SLICE_ClearTimer>
    {
      /* Clear the timer register */
      XMC_CCU8_SLICE_ClearTimer(handle_ptr->ccu8_slice_ptr);
    }
#endif
    status = TIMER_STATUS_SUCCESS;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	73fb      	strb	r3, [r7, #15]
 8001dde:	e001      	b.n	8001de4 <TIMER_Clear+0x30>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8001de0:	2301      	movs	r3, #1
 8001de2:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop

08001df0 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f000 f85b 	bl	8001eb8 <GLOBAL_CCU4_Init>
 8001e02:	4603      	mov	r3, r0
 8001e04:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	7e1b      	ldrb	r3, [r3, #24]
 8001e10:	4610      	mov	r0, r2
 8001e12:	4619      	mov	r1, r3
 8001e14:	f7ff ff0c 	bl	8001c30 <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	695a      	ldr	r2, [r3, #20]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	4610      	mov	r0, r2
 8001e22:	4619      	mov	r1, r3
 8001e24:	f7ff fbe0 	bl	80015e8 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f819 	bl	8001e60 <TIMER_CCU4_lShadowTransfer>
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff ff18 	bl	8001c68 <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d004      	beq.n	8001e54 <TIMER_CCU4_lInit+0x64>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff fefe 	bl	8001c50 <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop

08001e60 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	695a      	ldr	r2, [r3, #20]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001e70:	4610      	mov	r0, r2
 8001e72:	4619      	mov	r1, r3
 8001e74:	f7ff ff04 	bl	8001c80 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	2100      	movs	r1, #0
 8001e80:	f7ff ff0c 	bl	8001c9c <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	4610      	mov	r0, r2
 8001e90:	4619      	mov	r1, r3
 8001e92:	f7ff ff11 	bl	8001cb8 <XMC_CCU4_EnableShadowTransfer>
}
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eaa:	60da      	str	r2, [r3, #12]
}
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop

08001eb8 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	7b5b      	ldrb	r3, [r3, #13]
 8001ec4:	f083 0301 	eor.w	r3, r3, #1
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00f      	beq.n	8001eee <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	7b1b      	ldrb	r3, [r3, #12]
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f7ff fb67 	bl	80015ac <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff ffda 	bl	8001e9c <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <GLOBAL_CAN_Init>:
  return (version);
}

/*  Function to initialize the CAN Peripheral module clock.  */
GLOBAL_CAN_STATUS_t GLOBAL_CAN_Init(GLOBAL_CAN_t *handle)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  GLOBAL_CAN_STATUS_t status = GLOBAL_CAN_STATUS_SUCCESS;
 8001f00:	2300      	movs	r3, #0
 8001f02:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("GLOBAL_CAN_Init: handle null", handle != NULL);

  if (handle->init_status != true)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	7a5b      	ldrb	r3, [r3, #9]
 8001f08:	f083 0301 	eor.w	r3, r3, #1
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00c      	beq.n	8001f2c <GLOBAL_CAN_Init+0x34>
  {
#if defined(MULTICAN_PLUS)
    XMC_CAN_Init(handle->canglobal_ptr, (XMC_CAN_CANCLKSRC_t)handle->can_clock_src, handle->can_frequency);
#else
    XMC_CAN_Init(handle->canglobal_ptr, handle->can_frequency);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f7ff f8a1 	bl	8001064 <XMC_CAN_Init>
#endif
    handle->init_status = true;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	725a      	strb	r2, [r3, #9]
    status = GLOBAL_CAN_STATUS_SUCCESS;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]

}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop

08001f38 <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	3310      	adds	r3, #16
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	2301      	movs	r3, #1
 8001f50:	408b      	lsls	r3, r1
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL))
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	7e1b      	ldrb	r3, [r3, #24]
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d149      	bne.n	8002008 <GLOBAL_ADC_Init+0xa4>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	695a      	ldr	r2, [r3, #20]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f7ff fbea 	bl	8001758 <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	e02f      	b.n	8001fea <GLOBAL_ADC_Init+0x86>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f92:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	4608      	mov	r0, r1
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f7ff fc7d 	bl	80018a0 <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	2103      	movs	r1, #3
 8001fb4:	f7ff fd04 	bl	80019c0 <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc0:	7a1b      	ldrb	r3, [r3, #8]
 8001fc2:	f083 0301 	eor.w	r3, r3, #1
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <GLOBAL_ADC_Init+0x74>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	68f9      	ldr	r1, [r7, #12]
 8001fd4:	f7ff ffb0 	bl	8001f38 <XMC_VADC_GLOBAL_DisablePostCalibration>

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2b03      	cmp	r3, #3
 8001fee:	d9cc      	bls.n	8001f8a <GLOBAL_ADC_Init+0x26>
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
#endif
    if((bool)true == handle_ptr->enable_startup_calibration)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	7e5b      	ldrb	r3, [r3, #25]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d004      	beq.n	8002002 <GLOBAL_ADC_Init+0x9e>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff fbf9 	bl	80017f4 <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	7e1b      	ldrb	r3, [r3, #24]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	3b04      	subs	r3, #4
 8002024:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800202c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	3b04      	subs	r3, #4
 8002032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f023 0201 	bic.w	r2, r3, #1
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	3b04      	subs	r3, #4
 8002042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002044:	4a0c      	ldr	r2, [pc, #48]	; (8002078 <pxPortInitialiseStack+0x64>)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	3b14      	subs	r3, #20
 800204e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	3b04      	subs	r3, #4
 800205a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f06f 0202 	mvn.w	r2, #2
 8002062:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	3b20      	subs	r3, #32
 8002068:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800206a:	68fb      	ldr	r3, [r7, #12]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	0800207d 	.word	0x0800207d

0800207c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <prvTaskExitError+0x4c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208e:	d009      	beq.n	80020a4 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002090:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002094:	f383 8811 	msr	BASEPRI, r3
 8002098:	f3bf 8f6f 	isb	sy
 800209c:	f3bf 8f4f 	dsb	sy
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	e7fe      	b.n	80020a2 <prvTaskExitError+0x26>
 80020a4:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80020a8:	f383 8811 	msr	BASEPRI, r3
 80020ac:	f3bf 8f6f 	isb	sy
 80020b0:	f3bf 8f4f 	dsb	sy
 80020b4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80020b6:	bf00      	nop
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0fc      	beq.n	80020b8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	20000090 	.word	0x20000090
 80020cc:	00000000 	.word	0x00000000

080020d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80020d0:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <pxCurrentTCBConst2>)
 80020d2:	6819      	ldr	r1, [r3, #0]
 80020d4:	6808      	ldr	r0, [r1, #0]
 80020d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020da:	f380 8809 	msr	PSP, r0
 80020de:	f3bf 8f6f 	isb	sy
 80020e2:	f04f 0000 	mov.w	r0, #0
 80020e6:	f380 8811 	msr	BASEPRI, r0
 80020ea:	4770      	bx	lr
 80020ec:	f3af 8000 	nop.w

080020f0 <pxCurrentTCBConst2>:
 80020f0:	200003e8 	.word	0x200003e8
 80020f4:	f3af 8000 	nop.w
 80020f8:	f3af 8000 	nop.w
 80020fc:	f3af 8000 	nop.w

08002100 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002100:	4808      	ldr	r0, [pc, #32]	; (8002124 <prvPortStartFirstTask+0x24>)
 8002102:	6800      	ldr	r0, [r0, #0]
 8002104:	6800      	ldr	r0, [r0, #0]
 8002106:	f380 8808 	msr	MSP, r0
 800210a:	f04f 0000 	mov.w	r0, #0
 800210e:	f380 8814 	msr	CONTROL, r0
 8002112:	b662      	cpsie	i
 8002114:	b661      	cpsie	f
 8002116:	f3bf 8f4f 	dsb	sy
 800211a:	f3bf 8f6f 	isb	sy
 800211e:	df00      	svc	0
 8002120:	bf00      	nop
 8002122:	0000      	.short	0x0000
 8002124:	e000ed08 	.word	0xe000ed08

08002128 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800212e:	4b44      	ldr	r3, [pc, #272]	; (8002240 <xPortStartScheduler+0x118>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a44      	ldr	r2, [pc, #272]	; (8002244 <xPortStartScheduler+0x11c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d109      	bne.n	800214c <xPortStartScheduler+0x24>
 8002138:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800213c:	f383 8811 	msr	BASEPRI, r3
 8002140:	f3bf 8f6f 	isb	sy
 8002144:	f3bf 8f4f 	dsb	sy
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	e7fe      	b.n	800214a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800214c:	4b3c      	ldr	r3, [pc, #240]	; (8002240 <xPortStartScheduler+0x118>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a3d      	ldr	r2, [pc, #244]	; (8002248 <xPortStartScheduler+0x120>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d109      	bne.n	800216a <xPortStartScheduler+0x42>
 8002156:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800215a:	f383 8811 	msr	BASEPRI, r3
 800215e:	f3bf 8f6f 	isb	sy
 8002162:	f3bf 8f4f 	dsb	sy
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	e7fe      	b.n	8002168 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800216a:	4b38      	ldr	r3, [pc, #224]	; (800224c <xPortStartScheduler+0x124>)
 800216c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	b2db      	uxtb	r3, r3
 8002174:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	22ff      	movs	r2, #255	; 0xff
 800217a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	b2db      	uxtb	r3, r3
 8002188:	f023 0303 	bic.w	r3, r3, #3
 800218c:	b2da      	uxtb	r2, r3
 800218e:	4b30      	ldr	r3, [pc, #192]	; (8002250 <xPortStartScheduler+0x128>)
 8002190:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002192:	4b30      	ldr	r3, [pc, #192]	; (8002254 <xPortStartScheduler+0x12c>)
 8002194:	2207      	movs	r2, #7
 8002196:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002198:	e009      	b.n	80021ae <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800219a:	4b2e      	ldr	r3, [pc, #184]	; (8002254 <xPortStartScheduler+0x12c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	3b01      	subs	r3, #1
 80021a0:	4a2c      	ldr	r2, [pc, #176]	; (8002254 <xPortStartScheduler+0x12c>)
 80021a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80021a4:	78fb      	ldrb	r3, [r7, #3]
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	70fb      	strb	r3, [r7, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80021ae:	78fb      	ldrb	r3, [r7, #3]
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	b25b      	sxtb	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	dbef      	blt.n	800219a <xPortStartScheduler+0x72>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 80021ba:	4b26      	ldr	r3, [pc, #152]	; (8002254 <xPortStartScheduler+0x12c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f1c3 0307 	rsb	r3, r3, #7
 80021c2:	2b06      	cmp	r3, #6
 80021c4:	d009      	beq.n	80021da <xPortStartScheduler+0xb2>
 80021c6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80021ca:	f383 8811 	msr	BASEPRI, r3
 80021ce:	f3bf 8f6f 	isb	sy
 80021d2:	f3bf 8f4f 	dsb	sy
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	e7fe      	b.n	80021d8 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80021da:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <xPortStartScheduler+0x12c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	021b      	lsls	r3, r3, #8
 80021e0:	4a1c      	ldr	r2, [pc, #112]	; (8002254 <xPortStartScheduler+0x12c>)
 80021e2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80021e4:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <xPortStartScheduler+0x12c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021ec:	4a19      	ldr	r2, [pc, #100]	; (8002254 <xPortStartScheduler+0x12c>)
 80021ee:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80021f8:	4a17      	ldr	r2, [pc, #92]	; (8002258 <xPortStartScheduler+0x130>)
 80021fa:	4b17      	ldr	r3, [pc, #92]	; (8002258 <xPortStartScheduler+0x130>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f443 037c 	orr.w	r3, r3, #16515072	; 0xfc0000
 8002202:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002204:	4a14      	ldr	r2, [pc, #80]	; (8002258 <xPortStartScheduler+0x130>)
 8002206:	4b14      	ldr	r3, [pc, #80]	; (8002258 <xPortStartScheduler+0x130>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f043 437c 	orr.w	r3, r3, #4227858432	; 0xfc000000
 800220e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002210:	f000 f8d6 	bl	80023c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002214:	4b11      	ldr	r3, [pc, #68]	; (800225c <xPortStartScheduler+0x134>)
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800221a:	f000 f8f3 	bl	8002404 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800221e:	4a10      	ldr	r2, [pc, #64]	; (8002260 <xPortStartScheduler+0x138>)
 8002220:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <xPortStartScheduler+0x138>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002228:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800222a:	f7ff ff69 	bl	8002100 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800222e:	f001 fa7f 	bl	8003730 <vTaskSwitchContext>
	prvTaskExitError();
 8002232:	f7ff ff23 	bl	800207c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	e000ed00 	.word	0xe000ed00
 8002244:	410fc271 	.word	0x410fc271
 8002248:	410fc270 	.word	0x410fc270
 800224c:	e000e400 	.word	0xe000e400
 8002250:	200003e0 	.word	0x200003e0
 8002254:	200003e4 	.word	0x200003e4
 8002258:	e000ed20 	.word	0xe000ed20
 800225c:	20000090 	.word	0x20000090
 8002260:	e000ef34 	.word	0xe000ef34

08002264 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800226e:	f383 8811 	msr	BASEPRI, r3
 8002272:	f3bf 8f6f 	isb	sy
 8002276:	f3bf 8f4f 	dsb	sy
 800227a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800227c:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <vPortEnterCritical+0x54>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	3301      	adds	r3, #1
 8002282:	4a0d      	ldr	r2, [pc, #52]	; (80022b8 <vPortEnterCritical+0x54>)
 8002284:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002286:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <vPortEnterCritical+0x54>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d10e      	bne.n	80022ac <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800228e:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <vPortEnterCritical+0x58>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	d009      	beq.n	80022ac <vPortEnterCritical+0x48>
 8002298:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800229c:	f383 8811 	msr	BASEPRI, r3
 80022a0:	f3bf 8f6f 	isb	sy
 80022a4:	f3bf 8f4f 	dsb	sy
 80022a8:	603b      	str	r3, [r7, #0]
 80022aa:	e7fe      	b.n	80022aa <vPortEnterCritical+0x46>
	}
}
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	20000090 	.word	0x20000090
 80022bc:	e000ed04 	.word	0xe000ed04

080022c0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <vPortExitCritical+0x48>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d109      	bne.n	80022e2 <vPortExitCritical+0x22>
 80022ce:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80022d2:	f383 8811 	msr	BASEPRI, r3
 80022d6:	f3bf 8f6f 	isb	sy
 80022da:	f3bf 8f4f 	dsb	sy
 80022de:	607b      	str	r3, [r7, #4]
 80022e0:	e7fe      	b.n	80022e0 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <vPortExitCritical+0x48>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	4a07      	ldr	r2, [pc, #28]	; (8002308 <vPortExitCritical+0x48>)
 80022ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <vPortExitCritical+0x48>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d104      	bne.n	80022fe <vPortExitCritical+0x3e>
 80022f4:	2300      	movs	r3, #0
 80022f6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	20000090 	.word	0x20000090
 800230c:	00000000 	.word	0x00000000

08002310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002310:	f3ef 8009 	mrs	r0, PSP
 8002314:	f3bf 8f6f 	isb	sy
 8002318:	4b15      	ldr	r3, [pc, #84]	; (8002370 <pxCurrentTCBConst>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	f01e 0f10 	tst.w	lr, #16
 8002320:	bf08      	it	eq
 8002322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800232a:	6010      	str	r0, [r2, #0]
 800232c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002330:	f04f 00fc 	mov.w	r0, #252	; 0xfc
 8002334:	f380 8811 	msr	BASEPRI, r0
 8002338:	f3bf 8f4f 	dsb	sy
 800233c:	f3bf 8f6f 	isb	sy
 8002340:	f001 f9f6 	bl	8003730 <vTaskSwitchContext>
 8002344:	f04f 0000 	mov.w	r0, #0
 8002348:	f380 8811 	msr	BASEPRI, r0
 800234c:	bc09      	pop	{r0, r3}
 800234e:	6819      	ldr	r1, [r3, #0]
 8002350:	6808      	ldr	r0, [r1, #0]
 8002352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002356:	f01e 0f10 	tst.w	lr, #16
 800235a:	bf08      	it	eq
 800235c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002360:	f380 8809 	msr	PSP, r0
 8002364:	f3bf 8f6f 	isb	sy
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	f3af 8000 	nop.w

08002370 <pxCurrentTCBConst>:
 8002370:	200003e8 	.word	0x200003e8
 8002374:	f3af 8000 	nop.w
 8002378:	f3af 8000 	nop.w
 800237c:	f3af 8000 	nop.w

08002380 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002386:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800238a:	f383 8811 	msr	BASEPRI, r3
 800238e:	f3bf 8f6f 	isb	sy
 8002392:	f3bf 8f4f 	dsb	sy
 8002396:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002398:	f001 f90c 	bl	80035b4 <xTaskIncrementTick>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80023a2:	4b06      	ldr	r3, [pc, #24]	; (80023bc <SysTick_Handler+0x3c>)
 80023a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	2300      	movs	r3, #0
 80023ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	e000ed04 	.word	0xe000ed04

080023c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80023c4:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <vPortSetupTimerInterrupt+0x30>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80023ca:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <vPortSetupTimerInterrupt+0x34>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80023d0:	4a09      	ldr	r2, [pc, #36]	; (80023f8 <vPortSetupTimerInterrupt+0x38>)
 80023d2:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <vPortSetupTimerInterrupt+0x3c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	490a      	ldr	r1, [pc, #40]	; (8002400 <vPortSetupTimerInterrupt+0x40>)
 80023d8:	fba1 1303 	umull	r1, r3, r1, r3
 80023dc:	0b5b      	lsrs	r3, r3, #13
 80023de:	3b01      	subs	r3, #1
 80023e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80023e2:	4b03      	ldr	r3, [pc, #12]	; (80023f0 <vPortSetupTimerInterrupt+0x30>)
 80023e4:	2207      	movs	r2, #7
 80023e6:	601a      	str	r2, [r3, #0]
}
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	e000e010 	.word	0xe000e010
 80023f4:	e000e018 	.word	0xe000e018
 80023f8:	e000e014 	.word	0xe000e014
 80023fc:	2000ffc0 	.word	0x2000ffc0
 8002400:	d1b71759 	.word	0xd1b71759

08002404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002404:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002414 <vPortEnableVFP+0x10>
 8002408:	6801      	ldr	r1, [r0, #0]
 800240a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800240e:	6001      	str	r1, [r0, #0]
 8002410:	4770      	bx	lr
 8002412:	0000      	.short	0x0000
 8002414:	e000ed88 	.word	0xe000ed88

08002418 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800241e:	f3ef 8305 	mrs	r3, IPSR
 8002422:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2b0f      	cmp	r3, #15
 8002428:	d913      	bls.n	8002452 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800242a:	4a15      	ldr	r2, [pc, #84]	; (8002480 <vPortValidateInterruptPriority+0x68>)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4413      	add	r3, r2
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002434:	4b13      	ldr	r3, [pc, #76]	; (8002484 <vPortValidateInterruptPriority+0x6c>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	7afa      	ldrb	r2, [r7, #11]
 800243a:	429a      	cmp	r2, r3
 800243c:	d209      	bcs.n	8002452 <vPortValidateInterruptPriority+0x3a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800243e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002442:	f383 8811 	msr	BASEPRI, r3
 8002446:	f3bf 8f6f 	isb	sy
 800244a:	f3bf 8f4f 	dsb	sy
 800244e:	607b      	str	r3, [r7, #4]
 8002450:	e7fe      	b.n	8002450 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002452:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <vPortValidateInterruptPriority+0x70>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800245a:	4b0c      	ldr	r3, [pc, #48]	; (800248c <vPortValidateInterruptPriority+0x74>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d909      	bls.n	8002476 <vPortValidateInterruptPriority+0x5e>
 8002462:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002466:	f383 8811 	msr	BASEPRI, r3
 800246a:	f3bf 8f6f 	isb	sy
 800246e:	f3bf 8f4f 	dsb	sy
 8002472:	603b      	str	r3, [r7, #0]
 8002474:	e7fe      	b.n	8002474 <vPortValidateInterruptPriority+0x5c>
	}
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	e000e3f0 	.word	0xe000e3f0
 8002484:	200003e0 	.word	0x200003e0
 8002488:	e000ed0c 	.word	0xe000ed0c
 800248c:	200003e4 	.word	0x200003e4

08002490 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8002498:	f000 ffd0 	bl	800343c <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f004 f8e3 	bl	8006668 <malloc>
 80024a2:	4603      	mov	r3, r0
 80024a4:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80024a6:	f000 ffd7 	bl	8003458 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 80024aa:	68fb      	ldr	r3, [r7, #12]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
	if( pv )
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d006      	beq.n	80024d0 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 80024c2:	f000 ffbb 	bl	800343c <vTaskSuspendAll>
		{
			free( pv );
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f004 f8d6 	bl	8006678 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 80024cc:	f000 ffc4 	bl	8003458 <xTaskResumeAll>
	}
}
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop

080024d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f103 0208 	add.w	r2, r3, #8
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f04f 32ff 	mov.w	r2, #4294967295
 80024f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f103 0208 	add.w	r2, r3, #8
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f103 0208 	add.w	r2, r3, #8
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop

08002518 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	601a      	str	r2, [r3, #0]
}
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop

08002578 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258e:	d103      	bne.n	8002598 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	e00c      	b.n	80025b2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3308      	adds	r3, #8
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	e002      	b.n	80025a6 <vListInsert+0x2e>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d9f6      	bls.n	80025a0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	601a      	str	r2, [r3, #0]
}
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6892      	ldr	r2, [r2, #8]
 80025fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6852      	ldr	r2, [r2, #4]
 8002608:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	429a      	cmp	r2, r3
 8002612:	d103      	bne.n	800261c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	1e5a      	subs	r2, r3, #1
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d109      	bne.n	8002664 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002650:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002654:	f383 8811 	msr	BASEPRI, r3
 8002658:	f3bf 8f6f 	isb	sy
 800265c:	f3bf 8f4f 	dsb	sy
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	e7fe      	b.n	8002662 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002664:	f7ff fdfe 	bl	8002264 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002670:	68f9      	ldr	r1, [r7, #12]
 8002672:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002674:	fb01 f303 	mul.w	r3, r1, r3
 8002678:	441a      	add	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002694:	3b01      	subs	r3, #1
 8002696:	68f9      	ldr	r1, [r7, #12]
 8002698:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800269a:	fb01 f303 	mul.w	r3, r1, r3
 800269e:	441a      	add	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	22ff      	movs	r2, #255	; 0xff
 80026a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	22ff      	movs	r2, #255	; 0xff
 80026b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d114      	bne.n	80026e4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d01a      	beq.n	80026f8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	3310      	adds	r3, #16
 80026c6:	4618      	mov	r0, r3
 80026c8:	f001 f8d8 	bl	800387c <xTaskRemoveFromEventList>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d012      	beq.n	80026f8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80026d2:	4b0d      	ldr	r3, [pc, #52]	; (8002708 <xQueueGenericReset+0xcc>)
 80026d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	f3bf 8f4f 	dsb	sy
 80026de:	f3bf 8f6f 	isb	sy
 80026e2:	e009      	b.n	80026f8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	3310      	adds	r3, #16
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff fef5 	bl	80024d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	3324      	adds	r3, #36	; 0x24
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff fef0 	bl	80024d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80026f8:	f7ff fde2 	bl	80022c0 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80026fc:	2301      	movs	r3, #1
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	e000ed04 	.word	0xe000ed04

0800270c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800270c:	b590      	push	{r4, r7, lr}
 800270e:	b08b      	sub	sp, #44	; 0x2c
 8002710:	af02      	add	r7, sp, #8
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	4613      	mov	r3, r2
 8002718:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d109      	bne.n	8002734 <xQueueGenericCreate+0x28>
 8002720:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002724:	f383 8811 	msr	BASEPRI, r3
 8002728:	f3bf 8f6f 	isb	sy
 800272c:	f3bf 8f4f 	dsb	sy
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	e7fe      	b.n	8002732 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d102      	bne.n	8002740 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
 800273e:	e004      	b.n	800274a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	fb02 f303 	mul.w	r3, r2, r3
 8002748:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3354      	adds	r3, #84	; 0x54
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fe9e 	bl	8002490 <pvPortMalloc>
 8002754:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00b      	beq.n	8002774 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	3354      	adds	r3, #84	; 0x54
 8002760:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002762:	79fc      	ldrb	r4, [r7, #7]
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	68b9      	ldr	r1, [r7, #8]
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	4623      	mov	r3, r4
 8002770:	f000 f806 	bl	8002780 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002774:	69bb      	ldr	r3, [r7, #24]
	}
 8002776:	4618      	mov	r0, r3
 8002778:	3724      	adds	r7, #36	; 0x24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd90      	pop	{r4, r7, pc}
 800277e:	bf00      	nop

08002780 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
 800278c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d103      	bne.n	800279c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	e002      	b.n	80027a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80027ae:	69b8      	ldr	r0, [r7, #24]
 80027b0:	2101      	movs	r1, #1
 80027b2:	f7ff ff43 	bl	800263c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	78fa      	ldrb	r2, [r7, #3]
 80027ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	2200      	movs	r2, #0
 80027c2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop

080027cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08e      	sub	sp, #56	; 0x38
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80027da:	2300      	movs	r3, #0
 80027dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80027e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d109      	bne.n	80027fc <xQueueGenericSend+0x30>
 80027e8:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80027ec:	f383 8811 	msr	BASEPRI, r3
 80027f0:	f3bf 8f6f 	isb	sy
 80027f4:	f3bf 8f4f 	dsb	sy
 80027f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80027fa:	e7fe      	b.n	80027fa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d103      	bne.n	800280a <xQueueGenericSend+0x3e>
 8002802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <xQueueGenericSend+0x42>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <xQueueGenericSend+0x44>
 800280e:	2300      	movs	r3, #0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d109      	bne.n	8002828 <xQueueGenericSend+0x5c>
 8002814:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002818:	f383 8811 	msr	BASEPRI, r3
 800281c:	f3bf 8f6f 	isb	sy
 8002820:	f3bf 8f4f 	dsb	sy
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
 8002826:	e7fe      	b.n	8002826 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d103      	bne.n	8002836 <xQueueGenericSend+0x6a>
 800282e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <xQueueGenericSend+0x6e>
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <xQueueGenericSend+0x70>
 800283a:	2300      	movs	r3, #0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d109      	bne.n	8002854 <xQueueGenericSend+0x88>
 8002840:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002844:	f383 8811 	msr	BASEPRI, r3
 8002848:	f3bf 8f6f 	isb	sy
 800284c:	f3bf 8f4f 	dsb	sy
 8002850:	623b      	str	r3, [r7, #32]
 8002852:	e7fe      	b.n	8002852 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002854:	f001 f9be 	bl	8003bd4 <xTaskGetSchedulerState>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d102      	bne.n	8002864 <xQueueGenericSend+0x98>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <xQueueGenericSend+0x9c>
 8002864:	2301      	movs	r3, #1
 8002866:	e000      	b.n	800286a <xQueueGenericSend+0x9e>
 8002868:	2300      	movs	r3, #0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d109      	bne.n	8002882 <xQueueGenericSend+0xb6>
 800286e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002872:	f383 8811 	msr	BASEPRI, r3
 8002876:	f3bf 8f6f 	isb	sy
 800287a:	f3bf 8f4f 	dsb	sy
 800287e:	61fb      	str	r3, [r7, #28]
 8002880:	e7fe      	b.n	8002880 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002882:	f7ff fcef 	bl	8002264 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800288a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288e:	429a      	cmp	r2, r3
 8002890:	d302      	bcc.n	8002898 <xQueueGenericSend+0xcc>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d13d      	bne.n	8002914 <xQueueGenericSend+0x148>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002898:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800289a:	68b9      	ldr	r1, [r7, #8]
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	f000 fa2d 	bl	8002cfc <prvCopyDataToQueue>
 80028a2:	62f8      	str	r0, [r7, #44]	; 0x2c

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 80028a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00f      	beq.n	80028cc <xQueueGenericSend+0x100>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 80028ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028ae:	6839      	ldr	r1, [r7, #0]
 80028b0:	f000 fba2 	bl	8002ff8 <prvNotifyQueueSetContainer>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d028      	beq.n	800290c <xQueueGenericSend+0x140>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 80028ba:	4b4c      	ldr	r3, [pc, #304]	; (80029ec <xQueueGenericSend+0x220>)
 80028bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	f3bf 8f4f 	dsb	sy
 80028c6:	f3bf 8f6f 	isb	sy
 80028ca:	e01f      	b.n	800290c <xQueueGenericSend+0x140>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d010      	beq.n	80028f6 <xQueueGenericSend+0x12a>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d6:	3324      	adds	r3, #36	; 0x24
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 ffcf 	bl	800387c <xTaskRemoveFromEventList>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d013      	beq.n	800290c <xQueueGenericSend+0x140>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 80028e4:	4b41      	ldr	r3, [pc, #260]	; (80029ec <xQueueGenericSend+0x220>)
 80028e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	f3bf 8f6f 	isb	sy
 80028f4:	e00a      	b.n	800290c <xQueueGenericSend+0x140>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 80028f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d007      	beq.n	800290c <xQueueGenericSend+0x140>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 80028fc:	4b3b      	ldr	r3, [pc, #236]	; (80029ec <xQueueGenericSend+0x220>)
 80028fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	f3bf 8f4f 	dsb	sy
 8002908:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800290c:	f7ff fcd8 	bl	80022c0 <vPortExitCritical>
				return pdPASS;
 8002910:	2301      	movs	r3, #1
 8002912:	e067      	b.n	80029e4 <xQueueGenericSend+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d103      	bne.n	8002922 <xQueueGenericSend+0x156>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800291a:	f7ff fcd1 	bl	80022c0 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800291e:	2300      	movs	r3, #0
 8002920:	e060      	b.n	80029e4 <xQueueGenericSend+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002924:	2b00      	cmp	r3, #0
 8002926:	d106      	bne.n	8002936 <xQueueGenericSend+0x16a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002928:	f107 0314 	add.w	r3, r7, #20
 800292c:	4618      	mov	r0, r3
 800292e:	f001 f809 	bl	8003944 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002932:	2301      	movs	r3, #1
 8002934:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002936:	f7ff fcc3 	bl	80022c0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800293a:	f000 fd7f 	bl	800343c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800293e:	f7ff fc91 	bl	8002264 <vPortEnterCritical>
 8002942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002944:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002948:	b2db      	uxtb	r3, r3
 800294a:	b25b      	sxtb	r3, r3
 800294c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002950:	d103      	bne.n	800295a <xQueueGenericSend+0x18e>
 8002952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800295a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002960:	b2db      	uxtb	r3, r3
 8002962:	b25b      	sxtb	r3, r3
 8002964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002968:	d103      	bne.n	8002972 <xQueueGenericSend+0x1a6>
 800296a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002972:	f7ff fca5 	bl	80022c0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002976:	f107 0214 	add.w	r2, r7, #20
 800297a:	1d3b      	adds	r3, r7, #4
 800297c:	4610      	mov	r0, r2
 800297e:	4619      	mov	r1, r3
 8002980:	f000 fff6 	bl	8003970 <xTaskCheckForTimeOut>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d124      	bne.n	80029d4 <xQueueGenericSend+0x208>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800298a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800298c:	f000 fabe 	bl	8002f0c <prvIsQueueFull>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d018      	beq.n	80029c8 <xQueueGenericSend+0x1fc>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002998:	f103 0210 	add.w	r2, r3, #16
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4610      	mov	r0, r2
 80029a0:	4619      	mov	r1, r3
 80029a2:	f000 ff1f 	bl	80037e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80029a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029a8:	f000 fa3a 	bl	8002e20 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80029ac:	f000 fd54 	bl	8003458 <xTaskResumeAll>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d115      	bne.n	80029e2 <xQueueGenericSend+0x216>
				{
					portYIELD_WITHIN_API();
 80029b6:	4b0d      	ldr	r3, [pc, #52]	; (80029ec <xQueueGenericSend+0x220>)
 80029b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	f3bf 8f4f 	dsb	sy
 80029c2:	f3bf 8f6f 	isb	sy
 80029c6:	e00c      	b.n	80029e2 <xQueueGenericSend+0x216>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80029c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029ca:	f000 fa29 	bl	8002e20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029ce:	f000 fd43 	bl	8003458 <xTaskResumeAll>
 80029d2:	e756      	b.n	8002882 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80029d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029d6:	f000 fa23 	bl	8002e20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029da:	f000 fd3d 	bl	8003458 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <xQueueGenericSend+0x218>
		}
	}
 80029e2:	e74e      	b.n	8002882 <xQueueGenericSend+0xb6>
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3738      	adds	r7, #56	; 0x38
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	e000ed04 	.word	0xe000ed04

080029f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08e      	sub	sp, #56	; 0x38
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d109      	bne.n	8002a1c <xQueueGenericSendFromISR+0x2c>
 8002a08:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002a0c:	f383 8811 	msr	BASEPRI, r3
 8002a10:	f3bf 8f6f 	isb	sy
 8002a14:	f3bf 8f4f 	dsb	sy
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1a:	e7fe      	b.n	8002a1a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d103      	bne.n	8002a2a <xQueueGenericSendFromISR+0x3a>
 8002a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <xQueueGenericSendFromISR+0x3e>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <xQueueGenericSendFromISR+0x40>
 8002a2e:	2300      	movs	r3, #0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d109      	bne.n	8002a48 <xQueueGenericSendFromISR+0x58>
 8002a34:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002a38:	f383 8811 	msr	BASEPRI, r3
 8002a3c:	f3bf 8f6f 	isb	sy
 8002a40:	f3bf 8f4f 	dsb	sy
 8002a44:	623b      	str	r3, [r7, #32]
 8002a46:	e7fe      	b.n	8002a46 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d103      	bne.n	8002a56 <xQueueGenericSendFromISR+0x66>
 8002a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <xQueueGenericSendFromISR+0x6a>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <xQueueGenericSendFromISR+0x6c>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d109      	bne.n	8002a74 <xQueueGenericSendFromISR+0x84>
 8002a60:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002a64:	f383 8811 	msr	BASEPRI, r3
 8002a68:	f3bf 8f6f 	isb	sy
 8002a6c:	f3bf 8f4f 	dsb	sy
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	e7fe      	b.n	8002a72 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a74:	f7ff fcd0 	bl	8002418 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002a78:	f3ef 8211 	mrs	r2, BASEPRI
 8002a7c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002a80:	f383 8811 	msr	BASEPRI, r3
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	f3bf 8f4f 	dsb	sy
 8002a8c:	61ba      	str	r2, [r7, #24]
 8002a8e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002a90:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a92:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d302      	bcc.n	8002aa6 <xQueueGenericSendFromISR+0xb6>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d13e      	bne.n	8002b24 <xQueueGenericSendFromISR+0x134>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002aac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ab2:	68b9      	ldr	r1, [r7, #8]
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	f000 f921 	bl	8002cfc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002aba:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac2:	d124      	bne.n	8002b0e <xQueueGenericSendFromISR+0x11e>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8002ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00d      	beq.n	8002ae8 <xQueueGenericSendFromISR+0xf8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8002acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ace:	6839      	ldr	r1, [r7, #0]
 8002ad0:	f000 fa92 	bl	8002ff8 <prvNotifyQueueSetContainer>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d021      	beq.n	8002b1e <xQueueGenericSendFromISR+0x12e>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d01e      	beq.n	8002b1e <xQueueGenericSendFromISR+0x12e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	e01a      	b.n	8002b1e <xQueueGenericSendFromISR+0x12e>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d016      	beq.n	8002b1e <xQueueGenericSendFromISR+0x12e>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af2:	3324      	adds	r3, #36	; 0x24
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 fec1 	bl	800387c <xTaskRemoveFromEventList>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00e      	beq.n	8002b1e <xQueueGenericSendFromISR+0x12e>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00b      	beq.n	8002b1e <xQueueGenericSendFromISR+0x12e>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	e007      	b.n	8002b1e <xQueueGenericSendFromISR+0x12e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002b12:	3301      	adds	r3, #1
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	637b      	str	r3, [r7, #52]	; 0x34
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
 8002b22:	e001      	b.n	8002b28 <xQueueGenericSendFromISR+0x138>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	637b      	str	r3, [r7, #52]	; 0x34
 8002b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3738      	adds	r7, #56	; 0x38
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08c      	sub	sp, #48	; 0x30
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d109      	bne.n	8002b6a <xQueueReceive+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b56:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002b5a:	f383 8811 	msr	BASEPRI, r3
 8002b5e:	f3bf 8f6f 	isb	sy
 8002b62:	f3bf 8f4f 	dsb	sy
 8002b66:	623b      	str	r3, [r7, #32]
 8002b68:	e7fe      	b.n	8002b68 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d103      	bne.n	8002b78 <xQueueReceive+0x3c>
 8002b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <xQueueReceive+0x40>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <xQueueReceive+0x42>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d109      	bne.n	8002b96 <xQueueReceive+0x5a>
 8002b82:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002b86:	f383 8811 	msr	BASEPRI, r3
 8002b8a:	f3bf 8f6f 	isb	sy
 8002b8e:	f3bf 8f4f 	dsb	sy
 8002b92:	61fb      	str	r3, [r7, #28]
 8002b94:	e7fe      	b.n	8002b94 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b96:	f001 f81d 	bl	8003bd4 <xTaskGetSchedulerState>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d102      	bne.n	8002ba6 <xQueueReceive+0x6a>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <xQueueReceive+0x6e>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <xQueueReceive+0x70>
 8002baa:	2300      	movs	r3, #0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d109      	bne.n	8002bc4 <xQueueReceive+0x88>
 8002bb0:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	61bb      	str	r3, [r7, #24]
 8002bc2:	e7fe      	b.n	8002bc2 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bc4:	f7ff fb4e 	bl	8002264 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d01f      	beq.n	8002c14 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002bd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bd6:	68b9      	ldr	r1, [r7, #8]
 8002bd8:	f000 f8fc 	bl	8002dd4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	1e5a      	subs	r2, r3, #1
 8002be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00f      	beq.n	8002c0c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bee:	3310      	adds	r3, #16
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 fe43 	bl	800387c <xTaskRemoveFromEventList>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d007      	beq.n	8002c0c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002bfc:	4b3e      	ldr	r3, [pc, #248]	; (8002cf8 <xQueueReceive+0x1bc>)
 8002bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	f3bf 8f4f 	dsb	sy
 8002c08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002c0c:	f7ff fb58 	bl	80022c0 <vPortExitCritical>
				return pdPASS;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e06d      	b.n	8002cf0 <xQueueReceive+0x1b4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d103      	bne.n	8002c22 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c1a:	f7ff fb51 	bl	80022c0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	e066      	b.n	8002cf0 <xQueueReceive+0x1b4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d106      	bne.n	8002c36 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c28:	f107 0310 	add.w	r3, r7, #16
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 fe89 	bl	8003944 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c32:	2301      	movs	r3, #1
 8002c34:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c36:	f7ff fb43 	bl	80022c0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c3a:	f000 fbff 	bl	800343c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c3e:	f7ff fb11 	bl	8002264 <vPortEnterCritical>
 8002c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	b25b      	sxtb	r3, r3
 8002c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c50:	d103      	bne.n	8002c5a <xQueueReceive+0x11e>
 8002c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	b25b      	sxtb	r3, r3
 8002c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c68:	d103      	bne.n	8002c72 <xQueueReceive+0x136>
 8002c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c72:	f7ff fb25 	bl	80022c0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c76:	f107 0210 	add.w	r2, r7, #16
 8002c7a:	1d3b      	adds	r3, r7, #4
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	4619      	mov	r1, r3
 8002c80:	f000 fe76 	bl	8003970 <xTaskCheckForTimeOut>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d124      	bne.n	8002cd4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c8c:	f000 f928 	bl	8002ee0 <prvIsQueueEmpty>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d018      	beq.n	8002cc8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c98:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	f000 fd9f 	bl	80037e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ca8:	f000 f8ba 	bl	8002e20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002cac:	f000 fbd4 	bl	8003458 <xTaskResumeAll>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d11b      	bne.n	8002cee <xQueueReceive+0x1b2>
				{
					portYIELD_WITHIN_API();
 8002cb6:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <xQueueReceive+0x1bc>)
 8002cb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	f3bf 8f4f 	dsb	sy
 8002cc2:	f3bf 8f6f 	isb	sy
 8002cc6:	e012      	b.n	8002cee <xQueueReceive+0x1b2>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002cc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cca:	f000 f8a9 	bl	8002e20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002cce:	f000 fbc3 	bl	8003458 <xTaskResumeAll>
 8002cd2:	e777      	b.n	8002bc4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cd6:	f000 f8a3 	bl	8002e20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cda:	f000 fbbd 	bl	8003458 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ce0:	f000 f8fe 	bl	8002ee0 <prvIsQueueEmpty>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <xQueueReceive+0x1b2>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002cea:	2300      	movs	r3, #0
 8002cec:	e000      	b.n	8002cf0 <xQueueReceive+0x1b4>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002cee:	e769      	b.n	8002bc4 <xQueueReceive+0x88>
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3730      	adds	r7, #48	; 0x30
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	e000ed04 	.word	0xe000ed04

08002cfc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d10:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10d      	bne.n	8002d36 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d14f      	bne.n	8002dc2 <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 ff72 	bl	8003c10 <xTaskPriorityDisinherit>
 8002d2c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	605a      	str	r2, [r3, #4]
 8002d34:	e045      	b.n	8002dc2 <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d11a      	bne.n	8002d72 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	4610      	mov	r0, r2
 8002d46:	68b9      	ldr	r1, [r7, #8]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	f003 fc9d 	bl	8006688 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	441a      	add	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d32c      	bcc.n	8002dc2 <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	609a      	str	r2, [r3, #8]
 8002d70:	e027      	b.n	8002dc2 <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	4610      	mov	r0, r2
 8002d7c:	68b9      	ldr	r1, [r7, #8]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	f003 fc82 	bl	8006688 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	68da      	ldr	r2, [r3, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	425b      	negs	r3, r3
 8002d8e:	441a      	add	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d207      	bcs.n	8002db0 <prvCopyDataToQueue+0xb4>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da8:	425b      	negs	r3, r3
 8002daa:	441a      	add	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d105      	bne.n	8002dc2 <prvCopyDataToQueue+0xc6>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d002      	beq.n	8002dc2 <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002dca:	697b      	ldr	r3, [r7, #20]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d019      	beq.n	8002e1a <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	441a      	add	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d303      	bcc.n	8002e08 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e10:	6838      	ldr	r0, [r7, #0]
 8002e12:	4611      	mov	r1, r2
 8002e14:	461a      	mov	r2, r3
 8002e16:	f003 fc37 	bl	8006688 <memcpy>
	}
}
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002e28:	f7ff fa1c 	bl	8002264 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e32:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e34:	e021      	b.n	8002e7a <prvUnlockQueue+0x5a>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d009      	beq.n	8002e52 <prvUnlockQueue+0x32>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	2100      	movs	r1, #0
 8002e42:	f000 f8d9 	bl	8002ff8 <prvNotifyQueueSetContainer>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d012      	beq.n	8002e72 <prvUnlockQueue+0x52>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 8002e4c:	f000 fe00 	bl	8003a50 <vTaskMissedYield>
 8002e50:	e00f      	b.n	8002e72 <prvUnlockQueue+0x52>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <prvUnlockQueue+0x50>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	3324      	adds	r3, #36	; 0x24
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 fd0c 	bl	800387c <xTaskRemoveFromEventList>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <prvUnlockQueue+0x52>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 8002e6a:	f000 fdf1 	bl	8003a50 <vTaskMissedYield>
 8002e6e:	e000      	b.n	8002e72 <prvUnlockQueue+0x52>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						break;
 8002e70:	e007      	b.n	8002e82 <prvUnlockQueue+0x62>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
 8002e74:	3b01      	subs	r3, #1
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	73fb      	strb	r3, [r7, #15]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	dcd9      	bgt.n	8002e36 <prvUnlockQueue+0x16>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	22ff      	movs	r2, #255	; 0xff
 8002e86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002e8a:	f7ff fa19 	bl	80022c0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002e8e:	f7ff f9e9 	bl	8002264 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e9a:	e013      	b.n	8002ec4 <prvUnlockQueue+0xa4>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00e      	beq.n	8002ec2 <prvUnlockQueue+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3310      	adds	r3, #16
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 fce7 	bl	800387c <xTaskRemoveFromEventList>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <prvUnlockQueue+0x98>
				{
					vTaskMissedYield();
 8002eb4:	f000 fdcc 	bl	8003a50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002eb8:	7bbb      	ldrb	r3, [r7, #14]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	73bb      	strb	r3, [r7, #14]
 8002ec0:	e000      	b.n	8002ec4 <prvUnlockQueue+0xa4>
			}
			else
			{
				break;
 8002ec2:	e003      	b.n	8002ecc <prvUnlockQueue+0xac>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ec4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	dce7      	bgt.n	8002e9c <prvUnlockQueue+0x7c>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	22ff      	movs	r2, #255	; 0xff
 8002ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002ed4:	f7ff f9f4 	bl	80022c0 <vPortExitCritical>
}
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop

08002ee0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ee8:	f7ff f9bc 	bl	8002264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d102      	bne.n	8002efa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	e001      	b.n	8002efe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002efe:	f7ff f9df 	bl	80022c0 <vPortExitCritical>

	return xReturn;
 8002f02:	68fb      	ldr	r3, [r7, #12]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f14:	f7ff f9a6 	bl	8002264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d102      	bne.n	8002f2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002f24:	2301      	movs	r3, #1
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	e001      	b.n	8002f2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f2e:	f7ff f9c7 	bl	80022c0 <vPortExitCritical>

	return xReturn;
 8002f32:	68fb      	ldr	r3, [r7, #12]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	e014      	b.n	8002f76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002f4c:	4a0e      	ldr	r2, [pc, #56]	; (8002f88 <vQueueAddToRegistry+0x4c>)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10b      	bne.n	8002f70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002f58:	490b      	ldr	r1, [pc, #44]	; (8002f88 <vQueueAddToRegistry+0x4c>)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002f62:	4a09      	ldr	r2, [pc, #36]	; (8002f88 <vQueueAddToRegistry+0x4c>)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4413      	add	r3, r2
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002f6e:	e005      	b.n	8002f7c <vQueueAddToRegistry+0x40>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	3301      	adds	r3, #1
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2b07      	cmp	r3, #7
 8002f7a:	d9e7      	bls.n	8002f4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	20000594 	.word	0x20000594

08002f8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002f9c:	f7ff f962 	bl	8002264 <vPortEnterCritical>
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	b25b      	sxtb	r3, r3
 8002faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fae:	d103      	bne.n	8002fb8 <vQueueWaitForMessageRestricted+0x2c>
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	b25b      	sxtb	r3, r3
 8002fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc6:	d103      	bne.n	8002fd0 <vQueueWaitForMessageRestricted+0x44>
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fd0:	f7ff f976 	bl	80022c0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d106      	bne.n	8002fea <vQueueWaitForMessageRestricted+0x5e>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	3324      	adds	r3, #36	; 0x24
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	68b9      	ldr	r1, [r7, #8]
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	f000 fc1f 	bl	8003828 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002fea:	6978      	ldr	r0, [r7, #20]
 8002fec:	f7ff ff18 	bl	8002e20 <prvUnlockQueue>
	}
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop

08002ff8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003006:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 8003008:	2300      	movs	r3, #0
 800300a:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d109      	bne.n	8003026 <prvNotifyQueueSetContainer+0x2e>
 8003012:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003016:	f383 8811 	msr	BASEPRI, r3
 800301a:	f3bf 8f6f 	isb	sy
 800301e:	f3bf 8f4f 	dsb	sy
 8003022:	613b      	str	r3, [r7, #16]
 8003024:	e7fe      	b.n	8003024 <prvNotifyQueueSetContainer+0x2c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302e:	429a      	cmp	r2, r3
 8003030:	d309      	bcc.n	8003046 <prvNotifyQueueSetContainer+0x4e>
 8003032:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003036:	f383 8811 	msr	BASEPRI, r3
 800303a:	f3bf 8f6f 	isb	sy
 800303e:	f3bf 8f4f 	dsb	sy
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	e7fe      	b.n	8003044 <prvNotifyQueueSetContainer+0x4c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304e:	429a      	cmp	r2, r3
 8003050:	d226      	bcs.n	80030a0 <prvNotifyQueueSetContainer+0xa8>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003058:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 800305a:	1d3b      	adds	r3, r7, #4
 800305c:	69b8      	ldr	r0, [r7, #24]
 800305e:	4619      	mov	r1, r3
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	f7ff fe4b 	bl	8002cfc <prvCopyDataToQueue>
 8003066:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 8003068:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003070:	d10e      	bne.n	8003090 <prvNotifyQueueSetContainer+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	2b00      	cmp	r3, #0
 8003078:	d012      	beq.n	80030a0 <prvNotifyQueueSetContainer+0xa8>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	3324      	adds	r3, #36	; 0x24
 800307e:	4618      	mov	r0, r3
 8003080:	f000 fbfc 	bl	800387c <xTaskRemoveFromEventList>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00a      	beq.n	80030a0 <prvNotifyQueueSetContainer+0xa8>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 800308a:	2301      	movs	r3, #1
 800308c:	61fb      	str	r3, [r7, #28]
 800308e:	e007      	b.n	80030a0 <prvNotifyQueueSetContainer+0xa8>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003090:	7dfb      	ldrb	r3, [r7, #23]
 8003092:	3301      	adds	r3, #1
 8003094:	b2db      	uxtb	r3, r3
 8003096:	b2da      	uxtb	r2, r3
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800309e:	e7ff      	b.n	80030a0 <prvNotifyQueueSetContainer+0xa8>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80030a0:	69fb      	ldr	r3, [r7, #28]
	}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3720      	adds	r7, #32
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop

080030ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08c      	sub	sp, #48	; 0x30
 80030b0:	af04      	add	r7, sp, #16
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	603b      	str	r3, [r7, #0]
 80030b8:	4613      	mov	r3, r2
 80030ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030bc:	88fb      	ldrh	r3, [r7, #6]
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff f9e5 	bl	8002490 <pvPortMalloc>
 80030c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00e      	beq.n	80030ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80030ce:	2070      	movs	r0, #112	; 0x70
 80030d0:	f7ff f9de 	bl	8002490 <pvPortMalloc>
 80030d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	631a      	str	r2, [r3, #48]	; 0x30
 80030e2:	e005      	b.n	80030f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80030e4:	6978      	ldr	r0, [r7, #20]
 80030e6:	f7ff f9e5 	bl	80024b4 <vPortFree>
 80030ea:	e001      	b.n	80030f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d013      	beq.n	800311e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030f6:	88fa      	ldrh	r2, [r7, #6]
 80030f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fe:	9301      	str	r3, [sp, #4]
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	9302      	str	r3, [sp, #8]
 8003104:	2300      	movs	r3, #0
 8003106:	9303      	str	r3, [sp, #12]
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	68b9      	ldr	r1, [r7, #8]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	f000 f80f 	bl	8003130 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003112:	69f8      	ldr	r0, [r7, #28]
 8003114:	f000 f8a6 	bl	8003264 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003118:	2301      	movs	r3, #1
 800311a:	61bb      	str	r3, [r7, #24]
 800311c:	e002      	b.n	8003124 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800311e:	f04f 33ff 	mov.w	r3, #4294967295
 8003122:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003124:	69bb      	ldr	r3, [r7, #24]
	}
 8003126:	4618      	mov	r0, r3
 8003128:	3720      	adds	r7, #32
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop

08003130 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b088      	sub	sp, #32
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800313e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4610      	mov	r0, r2
 8003148:	21a5      	movs	r1, #165	; 0xa5
 800314a:	461a      	mov	r2, r3
 800314c:	f003 faa7 	bl	800669e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003152:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800315a:	3b01      	subs	r3, #1
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	f023 0307 	bic.w	r3, r3, #7
 8003168:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	2b00      	cmp	r3, #0
 8003172:	d009      	beq.n	8003188 <prvInitialiseNewTask+0x58>
 8003174:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003178:	f383 8811 	msr	BASEPRI, r3
 800317c:	f3bf 8f6f 	isb	sy
 8003180:	f3bf 8f4f 	dsb	sy
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	e7fe      	b.n	8003186 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003188:	2300      	movs	r3, #0
 800318a:	61fb      	str	r3, [r7, #28]
 800318c:	e013      	b.n	80031b6 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	4413      	add	r3, r2
 8003194:	7819      	ldrb	r1, [r3, #0]
 8003196:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	4413      	add	r3, r2
 800319c:	3330      	adds	r3, #48	; 0x30
 800319e:	460a      	mov	r2, r1
 80031a0:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	4413      	add	r3, r2
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d100      	bne.n	80031b0 <prvInitialiseNewTask+0x80>
		{
			break;
 80031ae:	e005      	b.n	80031bc <prvInitialiseNewTask+0x8c>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	3301      	adds	r3, #1
 80031b4:	61fb      	str	r3, [r7, #28]
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	2b0f      	cmp	r3, #15
 80031ba:	d9e8      	bls.n	800318e <prvInitialiseNewTask+0x5e>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80031bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80031c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d901      	bls.n	80031ce <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80031ca:	2304      	movs	r3, #4
 80031cc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80031ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031d2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80031d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031d8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80031da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031dc:	2200      	movs	r2, #0
 80031de:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80031e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e2:	3304      	adds	r3, #4
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff f997 	bl	8002518 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80031ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ec:	3318      	adds	r3, #24
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff f992 	bl	8002518 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80031f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fc:	f1c3 0205 	rsb	r2, r3, #5
 8003200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003202:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003208:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
	{
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
 800320e:	e009      	b.n	8003224 <prvInitialiseNewTask+0xf4>
		{
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 8003210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	3314      	adds	r3, #20
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	2200      	movs	r2, #0
 800321c:	605a      	str	r2, [r3, #4]
	}
	#endif

	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
	{
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	3301      	adds	r3, #1
 8003222:	61fb      	str	r3, [r7, #28]
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	2b04      	cmp	r3, #4
 8003228:	d9f2      	bls.n	8003210 <prvInitialiseNewTask+0xe0>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800322a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322c:	2200      	movs	r2, #0
 800322e:	669a      	str	r2, [r3, #104]	; 0x68
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003232:	2200      	movs	r2, #0
 8003234:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8003238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323a:	2200      	movs	r2, #0
 800323c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003240:	69b8      	ldr	r0, [r7, #24]
 8003242:	68f9      	ldr	r1, [r7, #12]
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	f7fe fee5 	bl	8002014 <pxPortInitialiseStack>
 800324a:	4602      	mov	r2, r0
 800324c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800325a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800325c:	3720      	adds	r7, #32
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop

08003264 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800326c:	f7fe fffa 	bl	8002264 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003270:	4b2d      	ldr	r3, [pc, #180]	; (8003328 <prvAddNewTaskToReadyList+0xc4>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	3301      	adds	r3, #1
 8003276:	4a2c      	ldr	r2, [pc, #176]	; (8003328 <prvAddNewTaskToReadyList+0xc4>)
 8003278:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800327a:	4b2c      	ldr	r3, [pc, #176]	; (800332c <prvAddNewTaskToReadyList+0xc8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d109      	bne.n	8003296 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003282:	4a2a      	ldr	r2, [pc, #168]	; (800332c <prvAddNewTaskToReadyList+0xc8>)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003288:	4b27      	ldr	r3, [pc, #156]	; (8003328 <prvAddNewTaskToReadyList+0xc4>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d110      	bne.n	80032b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003290:	f000 fc02 	bl	8003a98 <prvInitialiseTaskLists>
 8003294:	e00d      	b.n	80032b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003296:	4b26      	ldr	r3, [pc, #152]	; (8003330 <prvAddNewTaskToReadyList+0xcc>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d109      	bne.n	80032b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800329e:	4b23      	ldr	r3, [pc, #140]	; (800332c <prvAddNewTaskToReadyList+0xc8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d802      	bhi.n	80032b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80032ac:	4a1f      	ldr	r2, [pc, #124]	; (800332c <prvAddNewTaskToReadyList+0xc8>)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80032b2:	4b20      	ldr	r3, [pc, #128]	; (8003334 <prvAddNewTaskToReadyList+0xd0>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	3301      	adds	r3, #1
 80032b8:	4a1e      	ldr	r2, [pc, #120]	; (8003334 <prvAddNewTaskToReadyList+0xd0>)
 80032ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80032bc:	4b1d      	ldr	r3, [pc, #116]	; (8003334 <prvAddNewTaskToReadyList+0xd0>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	461a      	mov	r2, r3
 80032ca:	2301      	movs	r3, #1
 80032cc:	fa03 f202 	lsl.w	r2, r3, r2
 80032d0:	4b19      	ldr	r3, [pc, #100]	; (8003338 <prvAddNewTaskToReadyList+0xd4>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	4a18      	ldr	r2, [pc, #96]	; (8003338 <prvAddNewTaskToReadyList+0xd4>)
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4a15      	ldr	r2, [pc, #84]	; (800333c <prvAddNewTaskToReadyList+0xd8>)
 80032e8:	441a      	add	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3304      	adds	r3, #4
 80032ee:	4610      	mov	r0, r2
 80032f0:	4619      	mov	r1, r3
 80032f2:	f7ff f91d 	bl	8002530 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80032f6:	f7fe ffe3 	bl	80022c0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80032fa:	4b0d      	ldr	r3, [pc, #52]	; (8003330 <prvAddNewTaskToReadyList+0xcc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00e      	beq.n	8003320 <prvAddNewTaskToReadyList+0xbc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003302:	4b0a      	ldr	r3, [pc, #40]	; (800332c <prvAddNewTaskToReadyList+0xc8>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330c:	429a      	cmp	r2, r3
 800330e:	d207      	bcs.n	8003320 <prvAddNewTaskToReadyList+0xbc>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003310:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <prvAddNewTaskToReadyList+0xdc>)
 8003312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	200004c0 	.word	0x200004c0
 800332c:	200003e8 	.word	0x200003e8
 8003330:	200004cc 	.word	0x200004cc
 8003334:	200004dc 	.word	0x200004dc
 8003338:	200004c8 	.word	0x200004c8
 800333c:	200003ec 	.word	0x200003ec
 8003340:	e000ed04 	.word	0xe000ed04

08003344 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800334c:	2300      	movs	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d016      	beq.n	8003384 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003356:	4b12      	ldr	r3, [pc, #72]	; (80033a0 <vTaskDelay+0x5c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d009      	beq.n	8003372 <vTaskDelay+0x2e>
 800335e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003362:	f383 8811 	msr	BASEPRI, r3
 8003366:	f3bf 8f6f 	isb	sy
 800336a:	f3bf 8f4f 	dsb	sy
 800336e:	60bb      	str	r3, [r7, #8]
 8003370:	e7fe      	b.n	8003370 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003372:	f000 f863 	bl	800343c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	2100      	movs	r1, #0
 800337a:	f000 fccf 	bl	8003d1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800337e:	f000 f86b 	bl	8003458 <xTaskResumeAll>
 8003382:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d107      	bne.n	800339a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800338a:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <vTaskDelay+0x60>)
 800338c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	f3bf 8f4f 	dsb	sy
 8003396:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	200004e8 	.word	0x200004e8
 80033a4:	e000ed04 	.word	0xe000ed04

080033a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80033ae:	2300      	movs	r3, #0
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	4b1c      	ldr	r3, [pc, #112]	; (8003424 <vTaskStartScheduler+0x7c>)
 80033b4:	9301      	str	r3, [sp, #4]
 80033b6:	481c      	ldr	r0, [pc, #112]	; (8003428 <vTaskStartScheduler+0x80>)
 80033b8:	491c      	ldr	r1, [pc, #112]	; (800342c <vTaskStartScheduler+0x84>)
 80033ba:	2282      	movs	r2, #130	; 0x82
 80033bc:	2300      	movs	r3, #0
 80033be:	f7ff fe75 	bl	80030ac <xTaskCreate>
 80033c2:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d102      	bne.n	80033d0 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80033ca:	f000 fd11 	bl	8003df0 <xTimerCreateTimerTask>
 80033ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d115      	bne.n	8003402 <vTaskStartScheduler+0x5a>
 80033d6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80033da:	f383 8811 	msr	BASEPRI, r3
 80033de:	f3bf 8f6f 	isb	sy
 80033e2:	f3bf 8f4f 	dsb	sy
 80033e6:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80033e8:	4b11      	ldr	r3, [pc, #68]	; (8003430 <vTaskStartScheduler+0x88>)
 80033ea:	f04f 32ff 	mov.w	r2, #4294967295
 80033ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80033f0:	4b10      	ldr	r3, [pc, #64]	; (8003434 <vTaskStartScheduler+0x8c>)
 80033f2:	2201      	movs	r2, #1
 80033f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80033f6:	4b10      	ldr	r3, [pc, #64]	; (8003438 <vTaskStartScheduler+0x90>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80033fc:	f7fe fe94 	bl	8002128 <xPortStartScheduler>
 8003400:	e00d      	b.n	800341e <vTaskStartScheduler+0x76>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003408:	d109      	bne.n	800341e <vTaskStartScheduler+0x76>
 800340a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800340e:	f383 8811 	msr	BASEPRI, r3
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	607b      	str	r3, [r7, #4]
 800341c:	e7fe      	b.n	800341c <vTaskStartScheduler+0x74>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	200004e4 	.word	0x200004e4
 8003428:	08003a69 	.word	0x08003a69
 800342c:	0800687c 	.word	0x0800687c
 8003430:	200004e0 	.word	0x200004e0
 8003434:	200004cc 	.word	0x200004cc
 8003438:	200004c4 	.word	0x200004c4

0800343c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003440:	4b04      	ldr	r3, [pc, #16]	; (8003454 <vTaskSuspendAll+0x18>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	3301      	adds	r3, #1
 8003446:	4a03      	ldr	r2, [pc, #12]	; (8003454 <vTaskSuspendAll+0x18>)
 8003448:	6013      	str	r3, [r2, #0]
}
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	200004e8 	.word	0x200004e8

08003458 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003462:	2300      	movs	r3, #0
 8003464:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003466:	4b42      	ldr	r3, [pc, #264]	; (8003570 <xTaskResumeAll+0x118>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <xTaskResumeAll+0x2a>
 800346e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003472:	f383 8811 	msr	BASEPRI, r3
 8003476:	f3bf 8f6f 	isb	sy
 800347a:	f3bf 8f4f 	dsb	sy
 800347e:	603b      	str	r3, [r7, #0]
 8003480:	e7fe      	b.n	8003480 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003482:	f7fe feef 	bl	8002264 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003486:	4b3a      	ldr	r3, [pc, #232]	; (8003570 <xTaskResumeAll+0x118>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	3b01      	subs	r3, #1
 800348c:	4a38      	ldr	r2, [pc, #224]	; (8003570 <xTaskResumeAll+0x118>)
 800348e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003490:	4b37      	ldr	r3, [pc, #220]	; (8003570 <xTaskResumeAll+0x118>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d163      	bne.n	8003560 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003498:	4b36      	ldr	r3, [pc, #216]	; (8003574 <xTaskResumeAll+0x11c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d05f      	beq.n	8003560 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034a0:	e030      	b.n	8003504 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80034a2:	4b35      	ldr	r3, [pc, #212]	; (8003578 <xTaskResumeAll+0x120>)
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	3318      	adds	r3, #24
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff f89a 	bl	80025e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	3304      	adds	r3, #4
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff f895 	bl	80025e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c2:	461a      	mov	r2, r3
 80034c4:	2301      	movs	r3, #1
 80034c6:	fa03 f202 	lsl.w	r2, r3, r2
 80034ca:	4b2c      	ldr	r3, [pc, #176]	; (800357c <xTaskResumeAll+0x124>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	4a2a      	ldr	r2, [pc, #168]	; (800357c <xTaskResumeAll+0x124>)
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4a27      	ldr	r2, [pc, #156]	; (8003580 <xTaskResumeAll+0x128>)
 80034e2:	441a      	add	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	3304      	adds	r3, #4
 80034e8:	4610      	mov	r0, r2
 80034ea:	4619      	mov	r1, r3
 80034ec:	f7ff f820 	bl	8002530 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f4:	4b23      	ldr	r3, [pc, #140]	; (8003584 <xTaskResumeAll+0x12c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d302      	bcc.n	8003504 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80034fe:	4b22      	ldr	r3, [pc, #136]	; (8003588 <xTaskResumeAll+0x130>)
 8003500:	2201      	movs	r2, #1
 8003502:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003504:	4b1c      	ldr	r3, [pc, #112]	; (8003578 <xTaskResumeAll+0x120>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1ca      	bne.n	80034a2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003512:	f000 fb3b 	bl	8003b8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003516:	4b1d      	ldr	r3, [pc, #116]	; (800358c <xTaskResumeAll+0x134>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d010      	beq.n	8003544 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003522:	f000 f847 	bl	80035b4 <xTaskIncrementTick>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800352c:	4b16      	ldr	r3, [pc, #88]	; (8003588 <xTaskResumeAll+0x130>)
 800352e:	2201      	movs	r2, #1
 8003530:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3b01      	subs	r3, #1
 8003536:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f1      	bne.n	8003522 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800353e:	4b13      	ldr	r3, [pc, #76]	; (800358c <xTaskResumeAll+0x134>)
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003544:	4b10      	ldr	r3, [pc, #64]	; (8003588 <xTaskResumeAll+0x130>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d009      	beq.n	8003560 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800354c:	2301      	movs	r3, #1
 800354e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003550:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <xTaskResumeAll+0x138>)
 8003552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003560:	f7fe feae 	bl	80022c0 <vPortExitCritical>

	return xAlreadyYielded;
 8003564:	68bb      	ldr	r3, [r7, #8]
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	200004e8 	.word	0x200004e8
 8003574:	200004c0 	.word	0x200004c0
 8003578:	20000480 	.word	0x20000480
 800357c:	200004c8 	.word	0x200004c8
 8003580:	200003ec 	.word	0x200003ec
 8003584:	200003e8 	.word	0x200003e8
 8003588:	200004d4 	.word	0x200004d4
 800358c:	200004d0 	.word	0x200004d0
 8003590:	e000ed04 	.word	0xe000ed04

08003594 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800359a:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <xTaskGetTickCount+0x1c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80035a0:	687b      	ldr	r3, [r7, #4]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	200004c4 	.word	0x200004c4

080035b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035be:	4b51      	ldr	r3, [pc, #324]	; (8003704 <xTaskIncrementTick+0x150>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f040 808e 	bne.w	80036e4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80035c8:	4b4f      	ldr	r3, [pc, #316]	; (8003708 <xTaskIncrementTick+0x154>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	3301      	adds	r3, #1
 80035ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80035d0:	4a4d      	ldr	r2, [pc, #308]	; (8003708 <xTaskIncrementTick+0x154>)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d11f      	bne.n	800361c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80035dc:	4b4b      	ldr	r3, [pc, #300]	; (800370c <xTaskIncrementTick+0x158>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <xTaskIncrementTick+0x46>
 80035e6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80035ea:	f383 8811 	msr	BASEPRI, r3
 80035ee:	f3bf 8f6f 	isb	sy
 80035f2:	f3bf 8f4f 	dsb	sy
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	e7fe      	b.n	80035f8 <xTaskIncrementTick+0x44>
 80035fa:	4b44      	ldr	r3, [pc, #272]	; (800370c <xTaskIncrementTick+0x158>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	4b43      	ldr	r3, [pc, #268]	; (8003710 <xTaskIncrementTick+0x15c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a41      	ldr	r2, [pc, #260]	; (800370c <xTaskIncrementTick+0x158>)
 8003606:	6013      	str	r3, [r2, #0]
 8003608:	4a41      	ldr	r2, [pc, #260]	; (8003710 <xTaskIncrementTick+0x15c>)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	4b41      	ldr	r3, [pc, #260]	; (8003714 <xTaskIncrementTick+0x160>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	3301      	adds	r3, #1
 8003614:	4a3f      	ldr	r2, [pc, #252]	; (8003714 <xTaskIncrementTick+0x160>)
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	f000 fab8 	bl	8003b8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800361c:	4b3e      	ldr	r3, [pc, #248]	; (8003718 <xTaskIncrementTick+0x164>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	429a      	cmp	r2, r3
 8003624:	d34f      	bcc.n	80036c6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003626:	4b39      	ldr	r3, [pc, #228]	; (800370c <xTaskIncrementTick+0x158>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <xTaskIncrementTick+0x80>
 8003630:	2301      	movs	r3, #1
 8003632:	e000      	b.n	8003636 <xTaskIncrementTick+0x82>
 8003634:	2300      	movs	r3, #0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d004      	beq.n	8003644 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800363a:	4b37      	ldr	r3, [pc, #220]	; (8003718 <xTaskIncrementTick+0x164>)
 800363c:	f04f 32ff 	mov.w	r2, #4294967295
 8003640:	601a      	str	r2, [r3, #0]
					break;
 8003642:	e040      	b.n	80036c6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003644:	4b31      	ldr	r3, [pc, #196]	; (800370c <xTaskIncrementTick+0x158>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	429a      	cmp	r2, r3
 800365a:	d203      	bcs.n	8003664 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800365c:	4a2e      	ldr	r2, [pc, #184]	; (8003718 <xTaskIncrementTick+0x164>)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6013      	str	r3, [r2, #0]
						break;
 8003662:	e030      	b.n	80036c6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	3304      	adds	r3, #4
 8003668:	4618      	mov	r0, r3
 800366a:	f7fe ffbd 	bl	80025e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	2b00      	cmp	r3, #0
 8003674:	d004      	beq.n	8003680 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	3318      	adds	r3, #24
 800367a:	4618      	mov	r0, r3
 800367c:	f7fe ffb4 	bl	80025e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	461a      	mov	r2, r3
 8003686:	2301      	movs	r3, #1
 8003688:	fa03 f202 	lsl.w	r2, r3, r2
 800368c:	4b23      	ldr	r3, [pc, #140]	; (800371c <xTaskIncrementTick+0x168>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4313      	orrs	r3, r2
 8003692:	4a22      	ldr	r2, [pc, #136]	; (800371c <xTaskIncrementTick+0x168>)
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800369a:	4613      	mov	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4a1f      	ldr	r2, [pc, #124]	; (8003720 <xTaskIncrementTick+0x16c>)
 80036a4:	441a      	add	r2, r3
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	3304      	adds	r3, #4
 80036aa:	4610      	mov	r0, r2
 80036ac:	4619      	mov	r1, r3
 80036ae:	f7fe ff3f 	bl	8002530 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b6:	4b1b      	ldr	r3, [pc, #108]	; (8003724 <xTaskIncrementTick+0x170>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036bc:	429a      	cmp	r2, r3
 80036be:	d301      	bcc.n	80036c4 <xTaskIncrementTick+0x110>
						{
							xSwitchRequired = pdTRUE;
 80036c0:	2301      	movs	r3, #1
 80036c2:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 80036c4:	e7af      	b.n	8003626 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80036c6:	4b17      	ldr	r3, [pc, #92]	; (8003724 <xTaskIncrementTick+0x170>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036cc:	4914      	ldr	r1, [pc, #80]	; (8003720 <xTaskIncrementTick+0x16c>)
 80036ce:	4613      	mov	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d901      	bls.n	80036e2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80036de:	2301      	movs	r3, #1
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	e004      	b.n	80036ee <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80036e4:	4b10      	ldr	r3, [pc, #64]	; (8003728 <xTaskIncrementTick+0x174>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3301      	adds	r3, #1
 80036ea:	4a0f      	ldr	r2, [pc, #60]	; (8003728 <xTaskIncrementTick+0x174>)
 80036ec:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80036ee:	4b0f      	ldr	r3, [pc, #60]	; (800372c <xTaskIncrementTick+0x178>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80036f6:	2301      	movs	r3, #1
 80036f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80036fa:	697b      	ldr	r3, [r7, #20]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	200004e8 	.word	0x200004e8
 8003708:	200004c4 	.word	0x200004c4
 800370c:	20000478 	.word	0x20000478
 8003710:	2000047c 	.word	0x2000047c
 8003714:	200004d8 	.word	0x200004d8
 8003718:	200004e0 	.word	0x200004e0
 800371c:	200004c8 	.word	0x200004c8
 8003720:	200003ec 	.word	0x200003ec
 8003724:	200003e8 	.word	0x200003e8
 8003728:	200004d0 	.word	0x200004d0
 800372c:	200004d4 	.word	0x200004d4

08003730 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003730:	b480      	push	{r7}
 8003732:	b087      	sub	sp, #28
 8003734:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003736:	4b26      	ldr	r3, [pc, #152]	; (80037d0 <vTaskSwitchContext+0xa0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800373e:	4b25      	ldr	r3, [pc, #148]	; (80037d4 <vTaskSwitchContext+0xa4>)
 8003740:	2201      	movs	r2, #1
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	e03e      	b.n	80037c4 <vTaskSwitchContext+0x94>
	}
	else
	{
		xYieldPending = pdFALSE;
 8003746:	4b23      	ldr	r3, [pc, #140]	; (80037d4 <vTaskSwitchContext+0xa4>)
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800374c:	4b22      	ldr	r3, [pc, #136]	; (80037d8 <vTaskSwitchContext+0xa8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	60fb      	str	r3, [r7, #12]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	fab3 f383 	clz	r3, r3
 8003758:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800375a:	7afb      	ldrb	r3, [r7, #11]
 800375c:	f1c3 031f 	rsb	r3, r3, #31
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	491e      	ldr	r1, [pc, #120]	; (80037dc <vTaskSwitchContext+0xac>)
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	4613      	mov	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <vTaskSwitchContext+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003776:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800377a:	f383 8811 	msr	BASEPRI, r3
 800377e:	f3bf 8f6f 	isb	sy
 8003782:	f3bf 8f4f 	dsb	sy
 8003786:	607b      	str	r3, [r7, #4]
 8003788:	e7fe      	b.n	8003788 <vTaskSwitchContext+0x58>
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4613      	mov	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4a11      	ldr	r2, [pc, #68]	; (80037dc <vTaskSwitchContext+0xac>)
 8003796:	4413      	add	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	605a      	str	r2, [r3, #4]
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	3308      	adds	r3, #8
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d104      	bne.n	80037ba <vTaskSwitchContext+0x8a>
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	605a      	str	r2, [r3, #4]
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	4a07      	ldr	r2, [pc, #28]	; (80037e0 <vTaskSwitchContext+0xb0>)
 80037c2:	6013      	str	r3, [r2, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80037c4:	371c      	adds	r7, #28
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	200004e8 	.word	0x200004e8
 80037d4:	200004d4 	.word	0x200004d4
 80037d8:	200004c8 	.word	0x200004c8
 80037dc:	200003ec 	.word	0x200003ec
 80037e0:	200003e8 	.word	0x200003e8

080037e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d109      	bne.n	8003808 <vTaskPlaceOnEventList+0x24>
 80037f4:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80037f8:	f383 8811 	msr	BASEPRI, r3
 80037fc:	f3bf 8f6f 	isb	sy
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	e7fe      	b.n	8003806 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003808:	4b06      	ldr	r3, [pc, #24]	; (8003824 <vTaskPlaceOnEventList+0x40>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	3318      	adds	r3, #24
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	4619      	mov	r1, r3
 8003812:	f7fe feb1 	bl	8002578 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003816:	6838      	ldr	r0, [r7, #0]
 8003818:	2101      	movs	r1, #1
 800381a:	f000 fa7f 	bl	8003d1c <prvAddCurrentTaskToDelayedList>
}
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	200003e8 	.word	0x200003e8

08003828 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d109      	bne.n	800384e <vTaskPlaceOnEventListRestricted+0x26>
 800383a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800383e:	f383 8811 	msr	BASEPRI, r3
 8003842:	f3bf 8f6f 	isb	sy
 8003846:	f3bf 8f4f 	dsb	sy
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	e7fe      	b.n	800384c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800384e:	4b0a      	ldr	r3, [pc, #40]	; (8003878 <vTaskPlaceOnEventListRestricted+0x50>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3318      	adds	r3, #24
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	4619      	mov	r1, r3
 8003858:	f7fe fe6a 	bl	8002530 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d002      	beq.n	8003868 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003862:	f04f 33ff 	mov.w	r3, #4294967295
 8003866:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003868:	68b8      	ldr	r0, [r7, #8]
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	f000 fa56 	bl	8003d1c <prvAddCurrentTaskToDelayedList>
	}
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	200003e8 	.word	0x200003e8

0800387c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d109      	bne.n	80038a6 <xTaskRemoveFromEventList+0x2a>
 8003892:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003896:	f383 8811 	msr	BASEPRI, r3
 800389a:	f3bf 8f6f 	isb	sy
 800389e:	f3bf 8f4f 	dsb	sy
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	e7fe      	b.n	80038a4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	3318      	adds	r3, #24
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe fe9c 	bl	80025e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038b0:	4b1e      	ldr	r3, [pc, #120]	; (800392c <xTaskRemoveFromEventList+0xb0>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d11e      	bne.n	80038f6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	3304      	adds	r3, #4
 80038bc:	4618      	mov	r0, r3
 80038be:	f7fe fe93 	bl	80025e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c6:	461a      	mov	r2, r3
 80038c8:	2301      	movs	r3, #1
 80038ca:	fa03 f202 	lsl.w	r2, r3, r2
 80038ce:	4b18      	ldr	r3, [pc, #96]	; (8003930 <xTaskRemoveFromEventList+0xb4>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	4a16      	ldr	r2, [pc, #88]	; (8003930 <xTaskRemoveFromEventList+0xb4>)
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038dc:	4613      	mov	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4a13      	ldr	r2, [pc, #76]	; (8003934 <xTaskRemoveFromEventList+0xb8>)
 80038e6:	441a      	add	r2, r3
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	3304      	adds	r3, #4
 80038ec:	4610      	mov	r0, r2
 80038ee:	4619      	mov	r1, r3
 80038f0:	f7fe fe1e 	bl	8002530 <vListInsertEnd>
 80038f4:	e005      	b.n	8003902 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	3318      	adds	r3, #24
 80038fa:	480f      	ldr	r0, [pc, #60]	; (8003938 <xTaskRemoveFromEventList+0xbc>)
 80038fc:	4619      	mov	r1, r3
 80038fe:	f7fe fe17 	bl	8002530 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003906:	4b0d      	ldr	r3, [pc, #52]	; (800393c <xTaskRemoveFromEventList+0xc0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390c:	429a      	cmp	r2, r3
 800390e:	d905      	bls.n	800391c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003910:	2301      	movs	r3, #1
 8003912:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003914:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <xTaskRemoveFromEventList+0xc4>)
 8003916:	2201      	movs	r2, #1
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	e001      	b.n	8003920 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003920:	697b      	ldr	r3, [r7, #20]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	200004e8 	.word	0x200004e8
 8003930:	200004c8 	.word	0x200004c8
 8003934:	200003ec 	.word	0x200003ec
 8003938:	20000480 	.word	0x20000480
 800393c:	200003e8 	.word	0x200003e8
 8003940:	200004d4 	.word	0x200004d4

08003944 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800394c:	4b06      	ldr	r3, [pc, #24]	; (8003968 <vTaskInternalSetTimeOutState+0x24>)
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003954:	4b05      	ldr	r3, [pc, #20]	; (800396c <vTaskInternalSetTimeOutState+0x28>)
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	605a      	str	r2, [r3, #4]
}
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	200004d8 	.word	0x200004d8
 800396c:	200004c4 	.word	0x200004c4

08003970 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d109      	bne.n	8003994 <xTaskCheckForTimeOut+0x24>
 8003980:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003984:	f383 8811 	msr	BASEPRI, r3
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	613b      	str	r3, [r7, #16]
 8003992:	e7fe      	b.n	8003992 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d109      	bne.n	80039ae <xTaskCheckForTimeOut+0x3e>
 800399a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800399e:	f383 8811 	msr	BASEPRI, r3
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	e7fe      	b.n	80039ac <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80039ae:	f7fe fc59 	bl	8002264 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80039b2:	4b24      	ldr	r3, [pc, #144]	; (8003a44 <xTaskCheckForTimeOut+0xd4>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
 80039c2:	4b21      	ldr	r3, [pc, #132]	; (8003a48 <xTaskCheckForTimeOut+0xd8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d007      	beq.n	80039de <xTaskCheckForTimeOut+0x6e>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 80039ce:	4b1e      	ldr	r3, [pc, #120]	; (8003a48 <xTaskCheckForTimeOut+0xd8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
				xReturn = pdTRUE;
 80039d8:	2301      	movs	r3, #1
 80039da:	61fb      	str	r3, [r7, #28]
 80039dc:	e02b      	b.n	8003a36 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e6:	d102      	bne.n	80039ee <xTaskCheckForTimeOut+0x7e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80039e8:	2300      	movs	r3, #0
 80039ea:	61fb      	str	r3, [r7, #28]
 80039ec:	e023      	b.n	8003a36 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	4b16      	ldr	r3, [pc, #88]	; (8003a4c <xTaskCheckForTimeOut+0xdc>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d007      	beq.n	8003a0a <xTaskCheckForTimeOut+0x9a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d802      	bhi.n	8003a0a <xTaskCheckForTimeOut+0x9a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003a04:	2301      	movs	r3, #1
 8003a06:	61fb      	str	r3, [r7, #28]
 8003a08:	e015      	b.n	8003a36 <xTaskCheckForTimeOut+0xc6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d90b      	bls.n	8003a2c <xTaskCheckForTimeOut+0xbc>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	1ad2      	subs	r2, r2, r3
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff ff8f 	bl	8003944 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003a26:	2300      	movs	r3, #0
 8003a28:	61fb      	str	r3, [r7, #28]
 8003a2a:	e004      	b.n	8003a36 <xTaskCheckForTimeOut+0xc6>
		}
		else
		{
			*pxTicksToWait = 0;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003a32:	2301      	movs	r3, #1
 8003a34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003a36:	f7fe fc43 	bl	80022c0 <vPortExitCritical>

	return xReturn;
 8003a3a:	69fb      	ldr	r3, [r7, #28]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3720      	adds	r7, #32
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	200004c4 	.word	0x200004c4
 8003a48:	200003e8 	.word	0x200003e8
 8003a4c:	200004d8 	.word	0x200004d8

08003a50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003a54:	4b03      	ldr	r3, [pc, #12]	; (8003a64 <vTaskMissedYield+0x14>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	601a      	str	r2, [r3, #0]
}
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	200004d4 	.word	0x200004d4

08003a68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003a70:	f000 f850 	bl	8003b14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a74:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <prvIdleTask+0x28>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d907      	bls.n	8003a8c <prvIdleTask+0x24>
			{
				taskYIELD();
 8003a7c:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <prvIdleTask+0x2c>)
 8003a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	f3bf 8f4f 	dsb	sy
 8003a88:	f3bf 8f6f 	isb	sy
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8003a8c:	e7f0      	b.n	8003a70 <prvIdleTask+0x8>
 8003a8e:	bf00      	nop
 8003a90:	200003ec 	.word	0x200003ec
 8003a94:	e000ed04 	.word	0xe000ed04

08003a98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	607b      	str	r3, [r7, #4]
 8003aa2:	e00c      	b.n	8003abe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4a11      	ldr	r2, [pc, #68]	; (8003af4 <prvInitialiseTaskLists+0x5c>)
 8003ab0:	4413      	add	r3, r2
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fe fd10 	bl	80024d8 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3301      	adds	r3, #1
 8003abc:	607b      	str	r3, [r7, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	d9ef      	bls.n	8003aa4 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ac4:	480c      	ldr	r0, [pc, #48]	; (8003af8 <prvInitialiseTaskLists+0x60>)
 8003ac6:	f7fe fd07 	bl	80024d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003aca:	480c      	ldr	r0, [pc, #48]	; (8003afc <prvInitialiseTaskLists+0x64>)
 8003acc:	f7fe fd04 	bl	80024d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ad0:	480b      	ldr	r0, [pc, #44]	; (8003b00 <prvInitialiseTaskLists+0x68>)
 8003ad2:	f7fe fd01 	bl	80024d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003ad6:	480b      	ldr	r0, [pc, #44]	; (8003b04 <prvInitialiseTaskLists+0x6c>)
 8003ad8:	f7fe fcfe 	bl	80024d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003adc:	480a      	ldr	r0, [pc, #40]	; (8003b08 <prvInitialiseTaskLists+0x70>)
 8003ade:	f7fe fcfb 	bl	80024d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ae2:	4b0a      	ldr	r3, [pc, #40]	; (8003b0c <prvInitialiseTaskLists+0x74>)
 8003ae4:	4a04      	ldr	r2, [pc, #16]	; (8003af8 <prvInitialiseTaskLists+0x60>)
 8003ae6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <prvInitialiseTaskLists+0x78>)
 8003aea:	4a04      	ldr	r2, [pc, #16]	; (8003afc <prvInitialiseTaskLists+0x64>)
 8003aec:	601a      	str	r2, [r3, #0]
}
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	200003ec 	.word	0x200003ec
 8003af8:	20000450 	.word	0x20000450
 8003afc:	20000464 	.word	0x20000464
 8003b00:	20000480 	.word	0x20000480
 8003b04:	20000494 	.word	0x20000494
 8003b08:	200004ac 	.word	0x200004ac
 8003b0c:	20000478 	.word	0x20000478
 8003b10:	2000047c 	.word	0x2000047c

08003b14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b1a:	e019      	b.n	8003b50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003b1c:	f7fe fba2 	bl	8002264 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003b20:	4b0f      	ldr	r3, [pc, #60]	; (8003b60 <prvCheckTasksWaitingTermination+0x4c>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7fe fd5b 	bl	80025e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003b32:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <prvCheckTasksWaitingTermination+0x50>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	4a0a      	ldr	r2, [pc, #40]	; (8003b64 <prvCheckTasksWaitingTermination+0x50>)
 8003b3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003b3c:	4b0a      	ldr	r3, [pc, #40]	; (8003b68 <prvCheckTasksWaitingTermination+0x54>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3b01      	subs	r3, #1
 8003b42:	4a09      	ldr	r2, [pc, #36]	; (8003b68 <prvCheckTasksWaitingTermination+0x54>)
 8003b44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003b46:	f7fe fbbb 	bl	80022c0 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f80e 	bl	8003b6c <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b50:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <prvCheckTasksWaitingTermination+0x54>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1e1      	bne.n	8003b1c <prvCheckTasksWaitingTermination+0x8>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	20000494 	.word	0x20000494
 8003b64:	200004c0 	.word	0x200004c0
 8003b68:	200004a8 	.word	0x200004a8

08003b6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fe fc9b 	bl	80024b4 <vPortFree>
			vPortFree( pxTCB );
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7fe fc98 	bl	80024b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop

08003b8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b92:	4b0e      	ldr	r3, [pc, #56]	; (8003bcc <prvResetNextTaskUnblockTime+0x40>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <prvResetNextTaskUnblockTime+0x14>
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e000      	b.n	8003ba2 <prvResetNextTaskUnblockTime+0x16>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d004      	beq.n	8003bb0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ba6:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <prvResetNextTaskUnblockTime+0x44>)
 8003ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	e008      	b.n	8003bc2 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003bb0:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <prvResetNextTaskUnblockTime+0x40>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	4a04      	ldr	r2, [pc, #16]	; (8003bd0 <prvResetNextTaskUnblockTime+0x44>)
 8003bc0:	6013      	str	r3, [r2, #0]
	}
}
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	20000478 	.word	0x20000478
 8003bd0:	200004e0 	.word	0x200004e0

08003bd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003bda:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <xTaskGetSchedulerState+0x34>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d102      	bne.n	8003be8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003be2:	2301      	movs	r3, #1
 8003be4:	607b      	str	r3, [r7, #4]
 8003be6:	e008      	b.n	8003bfa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003be8:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <xTaskGetSchedulerState+0x38>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d102      	bne.n	8003bf6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	607b      	str	r3, [r7, #4]
 8003bf4:	e001      	b.n	8003bfa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003bfa:	687b      	ldr	r3, [r7, #4]
	}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	200004cc 	.word	0x200004cc
 8003c0c:	200004e8 	.word	0x200004e8

08003c10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d06e      	beq.n	8003d04 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003c26:	4b3a      	ldr	r3, [pc, #232]	; (8003d10 <xTaskPriorityDisinherit+0x100>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d009      	beq.n	8003c44 <xTaskPriorityDisinherit+0x34>
 8003c30:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003c34:	f383 8811 	msr	BASEPRI, r3
 8003c38:	f3bf 8f6f 	isb	sy
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	e7fe      	b.n	8003c42 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d109      	bne.n	8003c60 <xTaskPriorityDisinherit+0x50>
 8003c4c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003c50:	f383 8811 	msr	BASEPRI, r3
 8003c54:	f3bf 8f6f 	isb	sy
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	60bb      	str	r3, [r7, #8]
 8003c5e:	e7fe      	b.n	8003c5e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c64:	1e5a      	subs	r2, r3, #1
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d046      	beq.n	8003d04 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d142      	bne.n	8003d04 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	3304      	adds	r3, #4
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fe fcb0 	bl	80025e8 <uxListRemove>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d115      	bne.n	8003cba <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c92:	4920      	ldr	r1, [pc, #128]	; (8003d14 <xTaskPriorityDisinherit+0x104>)
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10a      	bne.n	8003cba <xTaskPriorityDisinherit+0xaa>
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	461a      	mov	r2, r3
 8003caa:	2301      	movs	r3, #1
 8003cac:	4093      	lsls	r3, r2
 8003cae:	43da      	mvns	r2, r3
 8003cb0:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <xTaskPriorityDisinherit+0x108>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	4a18      	ldr	r2, [pc, #96]	; (8003d18 <xTaskPriorityDisinherit+0x108>)
 8003cb8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc6:	f1c3 0205 	rsb	r2, r3, #5
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	fa03 f202 	lsl.w	r2, r3, r2
 8003cda:	4b0f      	ldr	r3, [pc, #60]	; (8003d18 <xTaskPriorityDisinherit+0x108>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	4a0d      	ldr	r2, [pc, #52]	; (8003d18 <xTaskPriorityDisinherit+0x108>)
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce8:	4613      	mov	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4a08      	ldr	r2, [pc, #32]	; (8003d14 <xTaskPriorityDisinherit+0x104>)
 8003cf2:	441a      	add	r2, r3
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	4610      	mov	r0, r2
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	f7fe fc18 	bl	8002530 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003d00:	2301      	movs	r3, #1
 8003d02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003d04:	697b      	ldr	r3, [r7, #20]
	}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	200003e8 	.word	0x200003e8
 8003d14:	200003ec 	.word	0x200003ec
 8003d18:	200004c8 	.word	0x200004c8

08003d1c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d26:	4b2b      	ldr	r3, [pc, #172]	; (8003dd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8003d2c:	4b2a      	ldr	r3, [pc, #168]	; (8003dd8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d36:	4b28      	ldr	r3, [pc, #160]	; (8003dd8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7fe fc53 	bl	80025e8 <uxListRemove>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10b      	bne.n	8003d60 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003d48:	4b23      	ldr	r3, [pc, #140]	; (8003dd8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4e:	461a      	mov	r2, r3
 8003d50:	2301      	movs	r3, #1
 8003d52:	4093      	lsls	r3, r2
 8003d54:	43da      	mvns	r2, r3
 8003d56:	4b21      	ldr	r3, [pc, #132]	; (8003ddc <prvAddCurrentTaskToDelayedList+0xc0>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	4a1f      	ldr	r2, [pc, #124]	; (8003ddc <prvAddCurrentTaskToDelayedList+0xc0>)
 8003d5e:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d66:	d10a      	bne.n	8003d7e <prvAddCurrentTaskToDelayedList+0x62>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d007      	beq.n	8003d7e <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d6e:	4b1a      	ldr	r3, [pc, #104]	; (8003dd8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3304      	adds	r3, #4
 8003d74:	481a      	ldr	r0, [pc, #104]	; (8003de0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003d76:	4619      	mov	r1, r3
 8003d78:	f7fe fbda 	bl	8002530 <vListInsertEnd>
 8003d7c:	e026      	b.n	8003dcc <prvAddCurrentTaskToDelayedList+0xb0>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4413      	add	r3, r2
 8003d84:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d86:	4b14      	ldr	r3, [pc, #80]	; (8003dd8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d209      	bcs.n	8003daa <prvAddCurrentTaskToDelayedList+0x8e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d96:	4b13      	ldr	r3, [pc, #76]	; (8003de4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	4b0f      	ldr	r3, [pc, #60]	; (8003dd8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	3304      	adds	r3, #4
 8003da0:	4610      	mov	r0, r2
 8003da2:	4619      	mov	r1, r3
 8003da4:	f7fe fbe8 	bl	8002578 <vListInsert>
 8003da8:	e010      	b.n	8003dcc <prvAddCurrentTaskToDelayedList+0xb0>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003daa:	4b0f      	ldr	r3, [pc, #60]	; (8003de8 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	4b0a      	ldr	r3, [pc, #40]	; (8003dd8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3304      	adds	r3, #4
 8003db4:	4610      	mov	r0, r2
 8003db6:	4619      	mov	r1, r3
 8003db8:	f7fe fbde 	bl	8002578 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8003dbc:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <prvAddCurrentTaskToDelayedList+0xd0>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d202      	bcs.n	8003dcc <prvAddCurrentTaskToDelayedList+0xb0>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8003dc6:	4a09      	ldr	r2, [pc, #36]	; (8003dec <prvAddCurrentTaskToDelayedList+0xd0>)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	6013      	str	r3, [r2, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	200004c4 	.word	0x200004c4
 8003dd8:	200003e8 	.word	0x200003e8
 8003ddc:	200004c8 	.word	0x200004c8
 8003de0:	200004ac 	.word	0x200004ac
 8003de4:	2000047c 	.word	0x2000047c
 8003de8:	20000478 	.word	0x20000478
 8003dec:	200004e0 	.word	0x200004e0

08003df0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8003df6:	2300      	movs	r3, #0
 8003df8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003dfa:	f000 fab3 	bl	8004364 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003dfe:	4b11      	ldr	r3, [pc, #68]	; (8003e44 <xTimerCreateTimerTask+0x54>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00b      	beq.n	8003e1e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8003e06:	2302      	movs	r3, #2
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	4b0f      	ldr	r3, [pc, #60]	; (8003e48 <xTimerCreateTimerTask+0x58>)
 8003e0c:	9301      	str	r3, [sp, #4]
 8003e0e:	480f      	ldr	r0, [pc, #60]	; (8003e4c <xTimerCreateTimerTask+0x5c>)
 8003e10:	490f      	ldr	r1, [pc, #60]	; (8003e50 <xTimerCreateTimerTask+0x60>)
 8003e12:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003e16:	2300      	movs	r3, #0
 8003e18:	f7ff f948 	bl	80030ac <xTaskCreate>
 8003e1c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d109      	bne.n	8003e38 <xTimerCreateTimerTask+0x48>
 8003e24:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	603b      	str	r3, [r7, #0]
 8003e36:	e7fe      	b.n	8003e36 <xTimerCreateTimerTask+0x46>
	return xReturn;
 8003e38:	687b      	ldr	r3, [r7, #4]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	2000051c 	.word	0x2000051c
 8003e48:	20000520 	.word	0x20000520
 8003e4c:	08003f79 	.word	0x08003f79
 8003e50:	08006894 	.word	0x08006894

08003e54 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b08a      	sub	sp, #40	; 0x28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
 8003e60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003e62:	2300      	movs	r3, #0
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d109      	bne.n	8003e80 <xTimerGenericCommand+0x2c>
 8003e6c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003e70:	f383 8811 	msr	BASEPRI, r3
 8003e74:	f3bf 8f6f 	isb	sy
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	623b      	str	r3, [r7, #32]
 8003e7e:	e7fe      	b.n	8003e7e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003e80:	4b1c      	ldr	r3, [pc, #112]	; (8003ef4 <xTimerGenericCommand+0xa0>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d030      	beq.n	8003eea <xTimerGenericCommand+0x96>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2b05      	cmp	r3, #5
 8003e98:	dc1c      	bgt.n	8003ed4 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003e9a:	f7ff fe9b 	bl	8003bd4 <xTaskGetSchedulerState>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d10b      	bne.n	8003ebc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003ea4:	4b13      	ldr	r3, [pc, #76]	; (8003ef4 <xTimerGenericCommand+0xa0>)
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	f107 0310 	add.w	r3, r7, #16
 8003eac:	4610      	mov	r0, r2
 8003eae:	4619      	mov	r1, r3
 8003eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	f7fe fc8a 	bl	80027cc <xQueueGenericSend>
 8003eb8:	6278      	str	r0, [r7, #36]	; 0x24
 8003eba:	e016      	b.n	8003eea <xTimerGenericCommand+0x96>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003ebc:	4b0d      	ldr	r3, [pc, #52]	; (8003ef4 <xTimerGenericCommand+0xa0>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	f107 0310 	add.w	r3, r7, #16
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	2200      	movs	r2, #0
 8003eca:	2300      	movs	r3, #0
 8003ecc:	f7fe fc7e 	bl	80027cc <xQueueGenericSend>
 8003ed0:	6278      	str	r0, [r7, #36]	; 0x24
 8003ed2:	e00a      	b.n	8003eea <xTimerGenericCommand+0x96>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003ed4:	4b07      	ldr	r3, [pc, #28]	; (8003ef4 <xTimerGenericCommand+0xa0>)
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	f107 0310 	add.w	r3, r7, #16
 8003edc:	4610      	mov	r0, r2
 8003ede:	4619      	mov	r1, r3
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	f7fe fd84 	bl	80029f0 <xQueueGenericSendFromISR>
 8003ee8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3728      	adds	r7, #40	; 0x28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	2000051c 	.word	0x2000051c

08003ef8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b088      	sub	sp, #32
 8003efc:	af02      	add	r7, sp, #8
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f02:	4b1c      	ldr	r3, [pc, #112]	; (8003f74 <prvProcessExpiredTimer+0x7c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fe fb69 	bl	80025e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d122      	bne.n	8003f64 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	699a      	ldr	r2, [r3, #24]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4413      	add	r3, r2
 8003f26:	6978      	ldr	r0, [r7, #20]
 8003f28:	4619      	mov	r1, r3
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f000 f8c7 	bl	80040c0 <prvInsertTimerInActiveList>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d015      	beq.n	8003f64 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f38:	2300      	movs	r3, #0
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	6978      	ldr	r0, [r7, #20]
 8003f3e:	2100      	movs	r1, #0
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	2300      	movs	r3, #0
 8003f44:	f7ff ff86 	bl	8003e54 <xTimerGenericCommand>
 8003f48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d109      	bne.n	8003f64 <prvProcessExpiredTimer+0x6c>
 8003f50:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003f54:	f383 8811 	msr	BASEPRI, r3
 8003f58:	f3bf 8f6f 	isb	sy
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	e7fe      	b.n	8003f62 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	6978      	ldr	r0, [r7, #20]
 8003f6a:	4798      	blx	r3
}
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000514 	.word	0x20000514

08003f78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f80:	f107 0308 	add.w	r3, r7, #8
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 f857 	bl	8004038 <prvGetNextExpireTime>
 8003f8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	4619      	mov	r1, r3
 8003f92:	f000 f803 	bl	8003f9c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003f96:	f000 f8d5 	bl	8004144 <prvProcessReceivedCommands>
	}
 8003f9a:	e7f1      	b.n	8003f80 <prvTimerTask+0x8>

08003f9c <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003fa6:	f7ff fa49 	bl	800343c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003faa:	f107 0308 	add.w	r3, r7, #8
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 f866 	bl	8004080 <prvSampleTimeNow>
 8003fb4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d131      	bne.n	8004020 <prvProcessTimerOrBlockTask+0x84>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10a      	bne.n	8003fd8 <prvProcessTimerOrBlockTask+0x3c>
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d806      	bhi.n	8003fd8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003fca:	f7ff fa45 	bl	8003458 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	68f9      	ldr	r1, [r7, #12]
 8003fd2:	f7ff ff91 	bl	8003ef8 <prvProcessExpiredTimer>
 8003fd6:	e025      	b.n	8004024 <prvProcessTimerOrBlockTask+0x88>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d008      	beq.n	8003ff0 <prvProcessTimerOrBlockTask+0x54>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003fde:	4b13      	ldr	r3, [pc, #76]	; (800402c <prvProcessTimerOrBlockTask+0x90>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	bf0c      	ite	eq
 8003fe8:	2301      	moveq	r3, #1
 8003fea:	2300      	movne	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003ff0:	4b0f      	ldr	r3, [pc, #60]	; (8004030 <prvProcessTimerOrBlockTask+0x94>)
 8003ff2:	6819      	ldr	r1, [r3, #0]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	4608      	mov	r0, r1
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	f7fe ffc4 	bl	8002f8c <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8004004:	f7ff fa28 	bl	8003458 <xTaskResumeAll>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10a      	bne.n	8004024 <prvProcessTimerOrBlockTask+0x88>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 800400e:	4b09      	ldr	r3, [pc, #36]	; (8004034 <prvProcessTimerOrBlockTask+0x98>)
 8004010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	f3bf 8f4f 	dsb	sy
 800401a:	f3bf 8f6f 	isb	sy
 800401e:	e001      	b.n	8004024 <prvProcessTimerOrBlockTask+0x88>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8004020:	f7ff fa1a 	bl	8003458 <xTaskResumeAll>
		}
	}
}
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	20000518 	.word	0x20000518
 8004030:	2000051c 	.word	0x2000051c
 8004034:	e000ed04 	.word	0xe000ed04

08004038 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004040:	4b0e      	ldr	r3, [pc, #56]	; (800407c <prvGetNextExpireTime+0x44>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	bf0c      	ite	eq
 800404a:	2301      	moveq	r3, #1
 800404c:	2300      	movne	r3, #0
 800404e:	b2db      	uxtb	r3, r3
 8004050:	461a      	mov	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d105      	bne.n	800406a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800405e:	4b07      	ldr	r3, [pc, #28]	; (800407c <prvGetNextExpireTime+0x44>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	e001      	b.n	800406e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800406e:	68fb      	ldr	r3, [r7, #12]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	20000514 	.word	0x20000514

08004080 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004088:	f7ff fa84 	bl	8003594 <xTaskGetTickCount>
 800408c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800408e:	4b0b      	ldr	r3, [pc, #44]	; (80040bc <prvSampleTimeNow+0x3c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	429a      	cmp	r2, r3
 8004096:	d205      	bcs.n	80040a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004098:	f000 f904 	bl	80042a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	e002      	b.n	80040aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80040aa:	4a04      	ldr	r2, [pc, #16]	; (80040bc <prvSampleTimeNow+0x3c>)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80040b0:	68fb      	ldr	r3, [r7, #12]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	20000524 	.word	0x20000524

080040c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
 80040cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80040ce:	2300      	movs	r3, #0
 80040d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d812      	bhi.n	800410c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	1ad2      	subs	r2, r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d302      	bcc.n	80040fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80040f4:	2301      	movs	r3, #1
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	e01b      	b.n	8004132 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80040fa:	4b10      	ldr	r3, [pc, #64]	; (800413c <prvInsertTimerInActiveList+0x7c>)
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	3304      	adds	r3, #4
 8004102:	4610      	mov	r0, r2
 8004104:	4619      	mov	r1, r3
 8004106:	f7fe fa37 	bl	8002578 <vListInsert>
 800410a:	e012      	b.n	8004132 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d206      	bcs.n	8004122 <prvInsertTimerInActiveList+0x62>
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	429a      	cmp	r2, r3
 800411a:	d302      	bcc.n	8004122 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800411c:	2301      	movs	r3, #1
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	e007      	b.n	8004132 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004122:	4b07      	ldr	r3, [pc, #28]	; (8004140 <prvInsertTimerInActiveList+0x80>)
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	3304      	adds	r3, #4
 800412a:	4610      	mov	r0, r2
 800412c:	4619      	mov	r1, r3
 800412e:	f7fe fa23 	bl	8002578 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004132:	697b      	ldr	r3, [r7, #20]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	20000518 	.word	0x20000518
 8004140:	20000514 	.word	0x20000514

08004144 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b08e      	sub	sp, #56	; 0x38
 8004148:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800414a:	e099      	b.n	8004280 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	da18      	bge.n	8004184 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004152:	1d3b      	adds	r3, r7, #4
 8004154:	3304      	adds	r3, #4
 8004156:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415a:	2b00      	cmp	r3, #0
 800415c:	d109      	bne.n	8004172 <prvProcessReceivedCommands+0x2e>
 800415e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8004162:	f383 8811 	msr	BASEPRI, r3
 8004166:	f3bf 8f6f 	isb	sy
 800416a:	f3bf 8f4f 	dsb	sy
 800416e:	61fb      	str	r3, [r7, #28]
 8004170:	e7fe      	b.n	8004170 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004178:	6851      	ldr	r1, [r2, #4]
 800417a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800417c:	6892      	ldr	r2, [r2, #8]
 800417e:	4608      	mov	r0, r1
 8004180:	4611      	mov	r1, r2
 8004182:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	db7a      	blt.n	8004280 <prvProcessReceivedCommands+0x13c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800418e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d004      	beq.n	80041a0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	3304      	adds	r3, #4
 800419a:	4618      	mov	r0, r3
 800419c:	f7fe fa24 	bl	80025e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041a0:	463b      	mov	r3, r7
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff ff6c 	bl	8004080 <prvSampleTimeNow>
 80041a8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b09      	cmp	r3, #9
 80041ae:	d866      	bhi.n	800427e <prvProcessReceivedCommands+0x13a>
 80041b0:	a201      	add	r2, pc, #4	; (adr r2, 80041b8 <prvProcessReceivedCommands+0x74>)
 80041b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b6:	bf00      	nop
 80041b8:	080041e1 	.word	0x080041e1
 80041bc:	080041e1 	.word	0x080041e1
 80041c0:	080041e1 	.word	0x080041e1
 80041c4:	08004281 	.word	0x08004281
 80041c8:	0800423f 	.word	0x0800423f
 80041cc:	08004277 	.word	0x08004277
 80041d0:	080041e1 	.word	0x080041e1
 80041d4:	080041e1 	.word	0x080041e1
 80041d8:	08004281 	.word	0x08004281
 80041dc:	0800423f 	.word	0x0800423f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	441a      	add	r2, r3
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041ec:	4611      	mov	r1, r2
 80041ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f0:	f7ff ff66 	bl	80040c0 <prvInsertTimerInActiveList>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d020      	beq.n	800423c <prvProcessReceivedCommands+0xf8>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004200:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d118      	bne.n	800423c <prvProcessReceivedCommands+0xf8>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	441a      	add	r2, r3
 8004212:	2300      	movs	r3, #0
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004218:	2100      	movs	r1, #0
 800421a:	2300      	movs	r3, #0
 800421c:	f7ff fe1a 	bl	8003e54 <xTimerGenericCommand>
 8004220:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d109      	bne.n	800423c <prvProcessReceivedCommands+0xf8>
 8004228:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	61bb      	str	r3, [r7, #24]
 800423a:	e7fe      	b.n	800423a <prvProcessReceivedCommands+0xf6>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 800423c:	e020      	b.n	8004280 <prvProcessReceivedCommands+0x13c>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004242:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d109      	bne.n	8004260 <prvProcessReceivedCommands+0x11c>
 800424c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8004250:	f383 8811 	msr	BASEPRI, r3
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	617b      	str	r3, [r7, #20]
 800425e:	e7fe      	b.n	800425e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004262:	699a      	ldr	r2, [r3, #24]
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	4413      	add	r3, r2
 8004268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800426a:	4619      	mov	r1, r3
 800426c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	f7ff ff26 	bl	80040c0 <prvInsertTimerInActiveList>
					break;
 8004274:	e004      	b.n	8004280 <prvProcessReceivedCommands+0x13c>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8004276:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004278:	f7fe f91c 	bl	80024b4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800427c:	e000      	b.n	8004280 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
 800427e:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004280:	4b07      	ldr	r3, [pc, #28]	; (80042a0 <prvProcessReceivedCommands+0x15c>)
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	1d3b      	adds	r3, r7, #4
 8004286:	4610      	mov	r0, r2
 8004288:	4619      	mov	r1, r3
 800428a:	2200      	movs	r2, #0
 800428c:	f7fe fc56 	bl	8002b3c <xQueueReceive>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	f47f af5a 	bne.w	800414c <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 8004298:	3730      	adds	r7, #48	; 0x30
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	2000051c 	.word	0x2000051c

080042a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042aa:	e044      	b.n	8004336 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042ac:	4b2b      	ldr	r3, [pc, #172]	; (800435c <prvSwitchTimerLists+0xb8>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042b6:	4b29      	ldr	r3, [pc, #164]	; (800435c <prvSwitchTimerLists+0xb8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	3304      	adds	r3, #4
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7fe f98f 	bl	80025e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	6938      	ldr	r0, [r7, #16]
 80042d0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d12d      	bne.n	8004336 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	699a      	ldr	r2, [r3, #24]
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	4413      	add	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d90e      	bls.n	800430a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80042f8:	4b18      	ldr	r3, [pc, #96]	; (800435c <prvSwitchTimerLists+0xb8>)
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	3304      	adds	r3, #4
 8004300:	4610      	mov	r0, r2
 8004302:	4619      	mov	r1, r3
 8004304:	f7fe f938 	bl	8002578 <vListInsert>
 8004308:	e015      	b.n	8004336 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800430a:	2300      	movs	r3, #0
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	6938      	ldr	r0, [r7, #16]
 8004310:	2100      	movs	r1, #0
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	2300      	movs	r3, #0
 8004316:	f7ff fd9d 	bl	8003e54 <xTimerGenericCommand>
 800431a:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d109      	bne.n	8004336 <prvSwitchTimerLists+0x92>
 8004322:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8004326:	f383 8811 	msr	BASEPRI, r3
 800432a:	f3bf 8f6f 	isb	sy
 800432e:	f3bf 8f4f 	dsb	sy
 8004332:	603b      	str	r3, [r7, #0]
 8004334:	e7fe      	b.n	8004334 <prvSwitchTimerLists+0x90>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004336:	4b09      	ldr	r3, [pc, #36]	; (800435c <prvSwitchTimerLists+0xb8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1b5      	bne.n	80042ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004340:	4b06      	ldr	r3, [pc, #24]	; (800435c <prvSwitchTimerLists+0xb8>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8004346:	4b06      	ldr	r3, [pc, #24]	; (8004360 <prvSwitchTimerLists+0xbc>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a04      	ldr	r2, [pc, #16]	; (800435c <prvSwitchTimerLists+0xb8>)
 800434c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800434e:	4a04      	ldr	r2, [pc, #16]	; (8004360 <prvSwitchTimerLists+0xbc>)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6013      	str	r3, [r2, #0]
}
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	20000514 	.word	0x20000514
 8004360:	20000518 	.word	0x20000518

08004364 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004368:	f7fd ff7c 	bl	8002264 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800436c:	4b12      	ldr	r3, [pc, #72]	; (80043b8 <prvCheckForValidListAndQueue+0x54>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d11d      	bne.n	80043b0 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8004374:	4811      	ldr	r0, [pc, #68]	; (80043bc <prvCheckForValidListAndQueue+0x58>)
 8004376:	f7fe f8af 	bl	80024d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800437a:	4811      	ldr	r0, [pc, #68]	; (80043c0 <prvCheckForValidListAndQueue+0x5c>)
 800437c:	f7fe f8ac 	bl	80024d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004380:	4b10      	ldr	r3, [pc, #64]	; (80043c4 <prvCheckForValidListAndQueue+0x60>)
 8004382:	4a0e      	ldr	r2, [pc, #56]	; (80043bc <prvCheckForValidListAndQueue+0x58>)
 8004384:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004386:	4b10      	ldr	r3, [pc, #64]	; (80043c8 <prvCheckForValidListAndQueue+0x64>)
 8004388:	4a0d      	ldr	r2, [pc, #52]	; (80043c0 <prvCheckForValidListAndQueue+0x5c>)
 800438a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800438c:	2005      	movs	r0, #5
 800438e:	2110      	movs	r1, #16
 8004390:	2200      	movs	r2, #0
 8004392:	f7fe f9bb 	bl	800270c <xQueueGenericCreate>
 8004396:	4602      	mov	r2, r0
 8004398:	4b07      	ldr	r3, [pc, #28]	; (80043b8 <prvCheckForValidListAndQueue+0x54>)
 800439a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800439c:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <prvCheckForValidListAndQueue+0x54>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d005      	beq.n	80043b0 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80043a4:	4b04      	ldr	r3, [pc, #16]	; (80043b8 <prvCheckForValidListAndQueue+0x54>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4618      	mov	r0, r3
 80043aa:	4908      	ldr	r1, [pc, #32]	; (80043cc <prvCheckForValidListAndQueue+0x68>)
 80043ac:	f7fe fdc6 	bl	8002f3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80043b0:	f7fd ff86 	bl	80022c0 <vPortExitCritical>
}
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	2000051c 	.word	0x2000051c
 80043bc:	200004ec 	.word	0x200004ec
 80043c0:	20000500 	.word	0x20000500
 80043c4:	20000514 	.word	0x20000514
 80043c8:	20000518 	.word	0x20000518
 80043cc:	0800689c 	.word	0x0800689c

080043d0 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6819      	ldr	r1, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	7c1a      	ldrb	r2, [r3, #16]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3304      	adds	r3, #4
 80043e4:	4608      	mov	r0, r1
 80043e6:	4611      	mov	r1, r2
 80043e8:	461a      	mov	r2, r3
 80043ea:	f7fb ffdd 	bl	80003a8 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6819      	ldr	r1, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	7c1a      	ldrb	r2, [r3, #16]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	7c5b      	ldrb	r3, [r3, #17]
 80043fa:	4608      	mov	r0, r1
 80043fc:	4611      	mov	r1, r2
 80043fe:	461a      	mov	r2, r3
 8004400:	f7fd f928 	bl	8001654 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop

08004410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f003 0307 	and.w	r3, r3, #7
 800441e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004420:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <__NVIC_SetPriorityGrouping+0x44>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800442c:	4013      	ands	r3, r2
 800442e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8004438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800443c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004440:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8004442:	4a04      	ldr	r2, [pc, #16]	; (8004454 <__NVIC_SetPriorityGrouping+0x44>)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	60d3      	str	r3, [r2, #12]
}
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	e000ed00 	.word	0xe000ed00

08004458 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 800445e:	2001      	movs	r0, #1
 8004460:	f7ff ffd6 	bl	8004410 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004464:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8004466:	4b21      	ldr	r3, [pc, #132]	; (80044ec <SystemCoreSetup+0x94>)
 8004468:	4a21      	ldr	r2, [pc, #132]	; (80044f0 <SystemCoreSetup+0x98>)
 800446a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800446c:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004470:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8004472:	4a1e      	ldr	r2, [pc, #120]	; (80044ec <SystemCoreSetup+0x94>)
 8004474:	4b1d      	ldr	r3, [pc, #116]	; (80044ec <SystemCoreSetup+0x94>)
 8004476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800447e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8004482:	4b1c      	ldr	r3, [pc, #112]	; (80044f4 <SystemCoreSetup+0x9c>)
 8004484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004488:	3314      	adds	r3, #20
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f023 030f 	bic.w	r3, r3, #15
 8004494:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f043 0303 	orr.w	r3, r3, #3
 800449c:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 800449e:	4b15      	ldr	r3, [pc, #84]	; (80044f4 <SystemCoreSetup+0x9c>)
 80044a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044a4:	3314      	adds	r3, #20
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 80044aa:	4a10      	ldr	r2, [pc, #64]	; (80044ec <SystemCoreSetup+0x94>)
 80044ac:	4b0f      	ldr	r3, [pc, #60]	; (80044ec <SystemCoreSetup+0x94>)
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	f023 0310 	bic.w	r3, r3, #16
 80044b4:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 80044b6:	4a0d      	ldr	r2, [pc, #52]	; (80044ec <SystemCoreSetup+0x94>)
 80044b8:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <SystemCoreSetup+0x94>)
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	f023 0308 	bic.w	r3, r3, #8
 80044c0:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80044c2:	4a0a      	ldr	r2, [pc, #40]	; (80044ec <SystemCoreSetup+0x94>)
 80044c4:	4b09      	ldr	r3, [pc, #36]	; (80044ec <SystemCoreSetup+0x94>)
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044cc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 80044ce:	4a07      	ldr	r2, [pc, #28]	; (80044ec <SystemCoreSetup+0x94>)
 80044d0:	4b06      	ldr	r3, [pc, #24]	; (80044ec <SystemCoreSetup+0x94>)
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80044d8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 80044da:	4a04      	ldr	r2, [pc, #16]	; (80044ec <SystemCoreSetup+0x94>)
 80044dc:	4b03      	ldr	r3, [pc, #12]	; (80044ec <SystemCoreSetup+0x94>)
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044e4:	6253      	str	r3, [r2, #36]	; 0x24
}
 80044e6:	3708      	adds	r7, #8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	e000ed00 	.word	0xe000ed00
 80044f0:	08000000 	.word	0x08000000
 80044f4:	58001000 	.word	0x58001000

080044f8 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8004500:	2300      	movs	r3, #0
 8004502:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	701a      	strb	r2, [r3, #0]

  return (status);
 800450a:	7bfb      	ldrb	r3, [r7, #15]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 800451c:	4b02      	ldr	r3, [pc, #8]	; (8004528 <OSCHP_GetFrequency+0x10>)
}
 800451e:	4618      	mov	r0, r3
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	00b71b00 	.word	0x00b71b00

0800452c <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 800452c:	b5b0      	push	{r4, r5, r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8004532:	4b12      	ldr	r3, [pc, #72]	; (800457c <SystemCoreClockSetup+0x50>)
 8004534:	1d3c      	adds	r4, r7, #4
 8004536:	461d      	mov	r5, r3
 8004538:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800453a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800453c:	682b      	ldr	r3, [r5, #0]
 800453e:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8004540:	1d3b      	adds	r3, r7, #4
 8004542:	4618      	mov	r0, r3
 8004544:	f7fc f82a 	bl	800059c <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8004548:	2000      	movs	r0, #0
 800454a:	f7fc f925 	bl	8000798 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 800454e:	2000      	movs	r0, #0
 8004550:	f7fc f8da 	bl	8000708 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8004554:	2004      	movs	r0, #4
 8004556:	f7fc f9ab 	bl	80008b0 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 800455a:	2001      	movs	r0, #1
 800455c:	2120      	movs	r1, #32
 800455e:	f7fc f9f3 	bl	8000948 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8004562:	2000      	movs	r0, #0
 8004564:	f7fc f8e4 	bl	8000730 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8004568:	2001      	movs	r0, #1
 800456a:	f7fc f9c9 	bl	8000900 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 800456e:	2001      	movs	r0, #1
 8004570:	f7fc f9b2 	bl	80008d8 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8004574:	3718      	adds	r7, #24
 8004576:	46bd      	mov	sp, r7
 8004578:	bdb0      	pop	{r4, r5, r7, pc}
 800457a:	bf00      	nop
 800457c:	080068f4 	.word	0x080068f4

08004580 <XMC_CAN_NODE_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
                                          const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
                                          const uint32_t service_request)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	460b      	mov	r3, r1
 800458a:	607a      	str	r2, [r7, #4]
 800458c:	72fb      	strb	r3, [r7, #11]
  can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_event)) | (service_request << (uint32_t)ptr_event);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	689a      	ldr	r2, [r3, #8]
 8004592:	7afb      	ldrb	r3, [r7, #11]
 8004594:	2107      	movs	r1, #7
 8004596:	fa01 f303 	lsl.w	r3, r1, r3
 800459a:	43db      	mvns	r3, r3
 800459c:	401a      	ands	r2, r3
 800459e:	7afb      	ldrb	r3, [r7, #11]
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	fa01 f303 	lsl.w	r3, r1, r3
 80045a6:	431a      	orrs	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	609a      	str	r2, [r3, #8]
}
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop

080045b8 <XMC_CAN_NODE_SetReceiveInput>:
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
                                              const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	460b      	mov	r3, r1
 80045c2:	70fb      	strb	r3, [r7, #3]
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f023 0207 	bic.w	r2, r3, #7
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
 80045cc:	78fb      	ldrb	r3, [r7, #3]
 80045ce:	f003 0307 	and.w	r3, r3, #7
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
                                              const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	60da      	str	r2, [r3, #12]
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
}
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop

080045e4 <XMC_CAN_NODE_EnableLoopBack>:
 *  NPCRx can be written only if bit NCRx.CCE is set.
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	60da      	str	r2, [r3, #12]
}
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop

08004604 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	601a      	str	r2, [r3, #0]
}
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop

08004624 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	601a      	str	r2, [r3, #0]
}
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop

08004644 <XMC_CAN_NODE_SetInitBit>:
 * XMC_CAN_NODE_ResetInitBit()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f043 0201 	orr.w	r2, r3, #1
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	601a      	str	r2, [r3, #0]
}
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop

08004664 <XMC_CAN_NODE_ResetInitBit>:
 * \par<b>Related API's:</b><br>
 * XMC_CAN_NODE_SetInitBit()
 *
 */
__STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f023 0201 	bic.w	r2, r3, #1
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	601a      	str	r2, [r3, #0]
}
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop

08004684 <XMC_CAN_MO_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
                                                const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
                                                const uint32_t service_request)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	460b      	mov	r3, r1
 800468e:	607a      	str	r2, [r7, #4]
 8004690:	72fb      	strb	r3, [r7, #11]
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	6812      	ldr	r2, [r2, #0]
 800469a:	6891      	ldr	r1, [r2, #8]
 800469c:	7afa      	ldrb	r2, [r7, #11]
 800469e:	2007      	movs	r0, #7
 80046a0:	fa00 f202 	lsl.w	r2, r0, r2
 80046a4:	43d2      	mvns	r2, r2
 80046a6:	4011      	ands	r1, r2
                          (service_request << (uint32_t)can_mo_ptr_int);
 80046a8:	7afa      	ldrb	r2, [r7, #11]
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	fa00 f202 	lsl.w	r2, r0, r2

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
                                                const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
                                                const uint32_t service_request)
{
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 80046b0:	430a      	orrs	r2, r1
 80046b2:	609a      	str	r2, [r3, #8]
                          (service_request << (uint32_t)can_mo_ptr_int);
}
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop

080046c0 <XMC_CAN_MO_EnableEvent>:
 *
 */

__STATIC_INLINE void XMC_CAN_MO_EnableEvent(const XMC_CAN_MO_t *const can_mo,
                                        const uint32_t event)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOFCR |= event;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	6812      	ldr	r2, [r2, #0]
 80046d2:	6811      	ldr	r1, [r2, #0]
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	601a      	str	r2, [r3, #0]
}
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <CAN_NODE_MO_EnableTxEvent>:
 *     return (1);
 *  }
 *  @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableTxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableTxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_TRANSMIT);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80046f6:	f7ff ffe3 	bl	80046c0 <XMC_CAN_MO_EnableEvent>
}
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <CAN_NODE_MO_EnableRxEvent>:
 *  }
 *  @endcode
 */

__STATIC_INLINE void CAN_NODE_MO_EnableRxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableRxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_RECEIVE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4618      	mov	r0, r3
 800470e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004712:	f7ff ffd5 	bl	80046c0 <XMC_CAN_MO_EnableEvent>
}
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <CAN_NODE_SetNodeEvents>:
  * @param  handle is a pointer pointing to APP data structure.
  * @return None
  */

static void CAN_NODE_SetNodeEvents(const CAN_NODE_t *handle)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t lnode_event = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	60fb      	str	r3, [r7, #12]

  XMC_ASSERT("CAN_NODE_lInit: handle null", handle != NULL);

  CAN_NODE_SetNodePointer(handle); /* set node service pointer */
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f831 	bl	8004790 <CAN_NODE_SetNodePointer>

  if (handle->txok_event_enable == true)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <CAN_NODE_SetNodeEvents+0x24>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_TX_INT;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f043 0302 	orr.w	r3, r3, #2
 800473e:	60fb      	str	r3, [r7, #12]
  }
  if (handle->lec_event_enable == true)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <CAN_NODE_SetNodeEvents+0x36>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_LEC;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f043 0304 	orr.w	r3, r3, #4
 8004750:	60fb      	str	r3, [r7, #12]
  }
  if (handle->alert_event_enable == true)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <CAN_NODE_SetNodeEvents+0x48>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_ALERT;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f043 0308 	orr.w	r3, r3, #8
 8004762:	60fb      	str	r3, [r7, #12]
  }
  XMC_CAN_NODE_EnableEvent(handle->node_ptr, (XMC_CAN_NODE_EVENT_t)lnode_event);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	4618      	mov	r0, r3
 800476a:	68f9      	ldr	r1, [r7, #12]
 800476c:	f7fc feb6 	bl	80014dc <XMC_CAN_NODE_EnableEvent>

  if (handle->framecount_event_enable == true)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8004776:	2b00      	cmp	r3, #0
 8004778:	d006      	beq.n	8004788 <CAN_NODE_SetNodeEvents+0x6c>
  {
    XMC_CAN_NODE_EnableEvent(handle->node_ptr, XMC_CAN_NODE_EVENT_CFCIE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	4618      	mov	r0, r3
 8004780:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004784:	f7fc feaa 	bl	80014dc <XMC_CAN_NODE_EnableEvent>
  }

}
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop

08004790 <CAN_NODE_SetNodePointer>:
  * @brief  Function to set the Node event pointer
  *
  */

static void CAN_NODE_SetNodePointer(const CAN_NODE_t *handle)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685a      	ldr	r2, [r3, #4]
                                                        handle->node_sr_ptr->alert_event_sr);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047a2:	781b      	ldrb	r3, [r3, #0]
{

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 80047a4:	4610      	mov	r0, r2
 80047a6:	2100      	movs	r1, #0
 80047a8:	461a      	mov	r2, r3
 80047aa:	f7ff fee9 	bl	8004580 <XMC_CAN_NODE_SetEventNodePointer>
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685a      	ldr	r2, [r3, #4]
                                                         handle->node_sr_ptr->lec_event_sr);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047b8:	785b      	ldrb	r3, [r3, #1]

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 80047ba:	4610      	mov	r0, r2
 80047bc:	2104      	movs	r1, #4
 80047be:	461a      	mov	r2, r3
 80047c0:	f7ff fede 	bl	8004580 <XMC_CAN_NODE_SetEventNodePointer>
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685a      	ldr	r2, [r3, #4]
                                                               handle->node_sr_ptr->txok_event_sr);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047ce:	789b      	ldrb	r3, [r3, #2]
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 80047d0:	4610      	mov	r0, r2
 80047d2:	2108      	movs	r1, #8
 80047d4:	461a      	mov	r2, r3
 80047d6:	f7ff fed3 	bl	8004580 <XMC_CAN_NODE_SetEventNodePointer>
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685a      	ldr	r2, [r3, #4]
                                                             handle->node_sr_ptr->framecount_event_sr);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047e4:	78db      	ldrb	r3, [r3, #3]
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 80047e6:	4610      	mov	r0, r2
 80047e8:	210c      	movs	r1, #12
 80047ea:	461a      	mov	r2, r3
 80047ec:	f7ff fec8 	bl	8004580 <XMC_CAN_NODE_SetEventNodePointer>
                                                             handle->node_sr_ptr->framecount_event_sr);

}
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop

080047f8 <CAN_NODE_MO_Init>:
  XMC_CAN_NODE_NominalBitTimeConfigure(can_node, can_bit_time);
}

/*  Function to initialize the CAN MO based on UI configuration. */
void CAN_NODE_MO_Init(const CAN_NODE_LMO_t *lmo_ptr)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_Init: lmo_ptr null", lmo_ptr != NULL);

  XMC_CAN_MO_Config(lmo_ptr->mo_ptr);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4618      	mov	r0, r3
 8004806:	f7fc fc97 	bl	8001138 <XMC_CAN_MO_Config>

  if (lmo_ptr->tx_event_enable == true)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	79db      	ldrb	r3, [r3, #7]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00b      	beq.n	800482a <CAN_NODE_MO_Init+0x32>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_TRANSMIT, lmo_ptr->tx_sr);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	795b      	ldrb	r3, [r3, #5]
 800481a:	4610      	mov	r0, r2
 800481c:	2104      	movs	r1, #4
 800481e:	461a      	mov	r2, r3
 8004820:	f7ff ff30 	bl	8004684 <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableTxEvent(lmo_ptr);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7ff ff5d 	bl	80046e4 <CAN_NODE_MO_EnableTxEvent>
  }
  if (lmo_ptr->rx_event_enable == true)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	7a1b      	ldrb	r3, [r3, #8]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00b      	beq.n	800484a <CAN_NODE_MO_Init+0x52>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_RECEIVE, lmo_ptr->rx_sr);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	799b      	ldrb	r3, [r3, #6]
 800483a:	4610      	mov	r0, r2
 800483c:	2100      	movs	r1, #0
 800483e:	461a      	mov	r2, r3
 8004840:	f7ff ff20 	bl	8004684 <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableRxEvent(lmo_ptr);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7ff ff5b 	bl	8004700 <CAN_NODE_MO_EnableRxEvent>
  }

}
 800484a:	3708      	adds	r7, #8
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <CAN_NODE_MO_Transmit>:

/* Function to transmit the can MO frame.  */
CAN_NODE_STATUS_t CAN_NODE_MO_Transmit(const CAN_NODE_LMO_t *lmo_ptr)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8004858:	2300      	movs	r3, #0
 800485a:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Transmit: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Transmit(lmo_ptr->mo_ptr);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4618      	mov	r0, r3
 8004862:	f7fc fd3d 	bl	80012e0 <XMC_CAN_MO_Transmit>
 8004866:	4603      	mov	r3, r0
 8004868:	73fb      	strb	r3, [r7, #15]
  return (status);
 800486a:	7bfb      	ldrb	r3, [r7, #15]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <CAN_NODE_MO_Receive>:

/* Function to read the received CAN message from the selected message object. */
CAN_NODE_STATUS_t CAN_NODE_MO_Receive( CAN_NODE_LMO_t *lmo_ptr)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 800487c:	2300      	movs	r3, #0
 800487e:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Receive: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Receive(lmo_ptr->mo_ptr);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4618      	mov	r0, r3
 8004886:	f7fc fd59 	bl	800133c <XMC_CAN_MO_Receive>
 800488a:	4603      	mov	r3, r0
 800488c:	73fb      	strb	r3, [r7, #15]
  return (status);
 800488e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <CAN_NODE_MO_UpdateData>:
  return (status);
}

/* Function to updates the data for the CAN Message Object. */
CAN_NODE_STATUS_t CAN_NODE_MO_UpdateData(const CAN_NODE_LMO_t *const lmo_ptr, uint8_t *array_data)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 80048a2:	2300      	movs	r3, #0
 80048a4:	73fb      	strb	r3, [r7, #15]
  uint32_t *data_pointer = (uint32_t*) array_data;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	60bb      	str	r3, [r7, #8]

  XMC_ASSERT("CAN_NODE_MO_UpdateData: lmo_ptr null", lmo_ptr != NULL);

  lmo_ptr->mo_ptr->can_data[0U] = *data_pointer;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	6812      	ldr	r2, [r2, #0]
 80048b2:	611a      	str	r2, [r3, #16]
  lmo_ptr->mo_ptr->can_data[1U] = *(data_pointer + 1U);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	6852      	ldr	r2, [r2, #4]
 80048bc:	615a      	str	r2, [r3, #20]

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_UpdateData(lmo_ptr->mo_ptr);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fc fcd4 	bl	8001270 <XMC_CAN_MO_UpdateData>
 80048c8:	4603      	mov	r3, r0
 80048ca:	73fb      	strb	r3, [r7, #15]
  return (status);
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop

080048d8 <CAN_NODE_Init>:
/*  Function to initialize the CAN node by configuring the baud rate, can bus type (External or internal)
 *  and message objects.
 */

CAN_NODE_STATUS_t CAN_NODE_Init(const CAN_NODE_t* handle)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 80048e0:	2300      	movs	r3, #0
 80048e2:	75fb      	strb	r3, [r7, #23]
  uint32_t loop_count;
  const CAN_NODE_LMO_t *lmo_ptr;

  XMC_ASSERT("CAN_NODE_Init: handle null", handle != NULL);

  const CAN_NODE_GPIO_t *const lgpio_ptr = handle->gpio_out;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Initialize the GLOBAL_CAN APP */
  status  = (CAN_NODE_STATUS_t)GLOBAL_CAN_Init(handle->global_ptr);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7fd fb01 	bl	8001ef8 <GLOBAL_CAN_Init>
 80048f6:	4603      	mov	r3, r0
 80048f8:	75fb      	strb	r3, [r7, #23]

  if (status == CAN_NODE_STATUS_SUCCESS)
 80048fa:	7dfb      	ldrb	r3, [r7, #23]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d17b      	bne.n	80049f8 <CAN_NODE_Init+0x120>
  {
    /* Initialize the GUI configured values for baud rate to NBTR Reg */
    XMC_CAN_NODE_NominalBitTimeConfigure(handle->node_ptr, handle->baudrate_config);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	4610      	mov	r0, r2
 800490a:	4619      	mov	r1, r3
 800490c:	f7fc fa90 	bl	8000e30 <XMC_CAN_NODE_NominalBitTimeConfigure>
    /* set CCE and INIT bit NCR for node configuration */
    XMC_CAN_NODE_EnableConfigurationChange(handle->node_ptr);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff fe75 	bl	8004604 <XMC_CAN_NODE_EnableConfigurationChange>
    XMC_CAN_NODE_SetInitBit(handle->node_ptr);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff fe90 	bl	8004644 <XMC_CAN_NODE_SetInitBit>

    if (handle->loopback_enable == true) /* Loop back mode enabled */
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 800492a:	2b00      	cmp	r3, #0
 800492c:	d005      	beq.n	800493a <CAN_NODE_Init+0x62>
    {
      XMC_CAN_NODE_EnableLoopBack(handle->node_ptr);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	4618      	mov	r0, r3
 8004934:	f7ff fe56 	bl	80045e4 <XMC_CAN_NODE_EnableLoopBack>
 8004938:	e018      	b.n	800496c <CAN_NODE_Init+0x94>
    }
    else
    {
      XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004940:	6819      	ldr	r1, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004948:	791a      	ldrb	r2, [r3, #4]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004950:	4608      	mov	r0, r1
 8004952:	4611      	mov	r1, r2
 8004954:	461a      	mov	r2, r3
 8004956:	f7fb fd27 	bl	80003a8 <XMC_GPIO_Init>
      XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004964:	4610      	mov	r0, r2
 8004966:	4619      	mov	r1, r3
 8004968:	f7ff fe26 	bl	80045b8 <XMC_CAN_NODE_SetReceiveInput>
    }
    CAN_NODE_SetNodeEvents(handle); /* API to enable node events */
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7ff fed5 	bl	800471c <CAN_NODE_SetNodeEvents>

    for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 8004972:	2300      	movs	r3, #0
 8004974:	613b      	str	r3, [r7, #16]
 8004976:	e019      	b.n	80049ac <CAN_NODE_Init+0xd4>
    {
      lmo_ptr = handle->lmobj_ptr[loop_count];
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	3302      	adds	r3, #2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	60bb      	str	r3, [r7, #8]
      XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6859      	ldr	r1, [r3, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	791b      	ldrb	r3, [r3, #4]
 8004996:	4608      	mov	r0, r1
 8004998:	4611      	mov	r1, r2
 800499a:	461a      	mov	r2, r3
 800499c:	f7fc fb2a 	bl	8000ff4 <XMC_CAN_AllocateMOtoNodeList>
      CAN_NODE_MO_Init(lmo_ptr);
 80049a0:	68b8      	ldr	r0, [r7, #8]
 80049a2:	f7ff ff29 	bl	80047f8 <CAN_NODE_MO_Init>
      XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
      XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
    }
    CAN_NODE_SetNodeEvents(handle); /* API to enable node events */

    for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	3301      	adds	r3, #1
 80049aa:	613b      	str	r3, [r7, #16]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80049b2:	461a      	mov	r2, r3
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d8de      	bhi.n	8004978 <CAN_NODE_Init+0xa0>
      lmo_ptr = handle->lmobj_ptr[loop_count];
      XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
      CAN_NODE_MO_Init(lmo_ptr);
    }
    /* reset CCE and INIT bit NCR for node configuration */
    XMC_CAN_NODE_DisableConfigurationChange(handle->node_ptr);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	4618      	mov	r0, r3
 80049c0:	f7ff fe30 	bl	8004624 <XMC_CAN_NODE_DisableConfigurationChange>
    XMC_CAN_NODE_ResetInitBit(handle->node_ptr);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7ff fe4b 	bl	8004664 <XMC_CAN_NODE_ResetInitBit>
    if (handle->loopback_enable == false)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 80049d4:	f083 0301 	eor.w	r3, r3, #1
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00e      	beq.n	80049fc <CAN_NODE_Init+0x124>
    {
      /* CAN transmit pin configuration */
      XMC_GPIO_Init(lgpio_ptr->port, lgpio_ptr->pin, handle->gpio_out_config);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6819      	ldr	r1, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	791a      	ldrb	r2, [r3, #4]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ec:	4608      	mov	r0, r1
 80049ee:	4611      	mov	r1, r2
 80049f0:	461a      	mov	r2, r3
 80049f2:	f7fb fcd9 	bl	80003a8 <XMC_GPIO_Init>
 80049f6:	e001      	b.n	80049fc <CAN_NODE_Init+0x124>
    }
  }
  else
  {
    status = CAN_NODE_STATUS_FAILURE;
 80049f8:	2301      	movs	r3, #1
 80049fa:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 80049fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3718      	adds	r7, #24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop

08004a08 <ANALOG_IO_Init>:
 * Input Parameter  : Handler Pointer pointing to APP data structure.
 * Output Parameter : ANALOG_IO_STATUS_t (ANALOG_IO APP initialization status).
 */

ANALOG_IO_STATUS_t ANALOG_IO_Init(const ANALOG_IO_t *const handle)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("ANALOG_IO_Init: Passed handler is a null pointer", handler != NULL);
  if (*(handle->state) == ANALOG_IO_STATE_NOT_INITIALIZED)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10a      	bne.n	8004a30 <ANALOG_IO_Init+0x28>
  {
    if (handle->config_ptr != NULL)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <ANALOG_IO_Init+0x20>
    {
      /* Instance specific initialization function call*/
      handle->config_ptr();
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4798      	blx	r3
    }
    /* Set the state variable to initialized state*/
    *(handle->state) = ANALOG_IO_STATE_INITIALIZED;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	701a      	strb	r2, [r3, #0]
  }
  return (ANALOG_IO_STATUS_OK);
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop

08004a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a40:	4b04      	ldr	r3, [pc, #16]	; (8004a54 <__NVIC_GetPriorityGrouping+0x18>)
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a48:	0a1b      	lsrs	r3, r3, #8
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	e000ed00 	.word	0xe000ed00

08004a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	4603      	mov	r3, r0
 8004a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	db0b      	blt.n	8004a82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a6a:	4908      	ldr	r1, [pc, #32]	; (8004a8c <__NVIC_EnableIRQ+0x34>)
 8004a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a70:	095b      	lsrs	r3, r3, #5
 8004a72:	79fa      	ldrb	r2, [r7, #7]
 8004a74:	f002 021f 	and.w	r2, r2, #31
 8004a78:	2001      	movs	r0, #1
 8004a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	e000e100 	.word	0xe000e100

08004a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	4603      	mov	r3, r0
 8004a98:	6039      	str	r1, [r7, #0]
 8004a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	db0a      	blt.n	8004aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aa4:	490d      	ldr	r1, [pc, #52]	; (8004adc <__NVIC_SetPriority+0x4c>)
 8004aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	b2d2      	uxtb	r2, r2
 8004aae:	0092      	lsls	r2, r2, #2
 8004ab0:	b2d2      	uxtb	r2, r2
 8004ab2:	440b      	add	r3, r1
 8004ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8004ab8:	e00a      	b.n	8004ad0 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aba:	4909      	ldr	r1, [pc, #36]	; (8004ae0 <__NVIC_SetPriority+0x50>)
 8004abc:	79fb      	ldrb	r3, [r7, #7]
 8004abe:	f003 030f 	and.w	r3, r3, #15
 8004ac2:	3b04      	subs	r3, #4
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	0092      	lsls	r2, r2, #2
 8004aca:	b2d2      	uxtb	r2, r2
 8004acc:	440b      	add	r3, r1
 8004ace:	761a      	strb	r2, [r3, #24]
  }
}
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	e000e100 	.word	0xe000e100
 8004ae0:	e000ed00 	.word	0xe000ed00

08004ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b089      	sub	sp, #36	; 0x24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	f1c3 0307 	rsb	r3, r3, #7
 8004afe:	2b06      	cmp	r3, #6
 8004b00:	bf28      	it	cs
 8004b02:	2306      	movcs	r3, #6
 8004b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	3306      	adds	r3, #6
 8004b0a:	2b06      	cmp	r3, #6
 8004b0c:	d902      	bls.n	8004b14 <NVIC_EncodePriority+0x30>
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	e000      	b.n	8004b16 <NVIC_EncodePriority+0x32>
 8004b14:	2300      	movs	r3, #0
 8004b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	1e5a      	subs	r2, r3, #1
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	401a      	ands	r2, r3
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b32:	1e59      	subs	r1, r3, #1
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8004b38:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3724      	adds	r7, #36	; 0x24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop

08004b48 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_ptr)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VADC))
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004b56:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop

08004b6c <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>:
 *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global_ptr,
                                                                    const uint32_t grp_num,
                                                                    const uint32_t ch_num)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	3260      	adds	r2, #96	; 0x60
 8004b7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2101      	movs	r1, #1
 8004b86:	fa01 f303 	lsl.w	r3, r1, r3
 8004b8a:	ea42 0103 	orr.w	r1, r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	3260      	adds	r2, #96	; 0x60
 8004b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8004b98:	3714      	adds	r7, #20
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop

08004ba4 <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
                                               const uint32_t res_reg_num,
                                               const XMC_VADC_RESULT_CONFIG_t *config)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6819      	ldr	r1, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	32a0      	adds	r2, #160	; 0xa0
 8004bba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <XMC_VADC_GROUP_GetResult>:
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_GetDetailedResult().
 */
__STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr, 
                                                                const uint32_t res_reg)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	32c0      	adds	r2, #192	; 0xc0
 8004bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bdc:	b29b      	uxth	r3, r3
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop

08004bec <ADC_MEASUREMENT_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
 8004bec:	b590      	push	{r4, r7, lr}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL))

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	7e1b      	ldrb	r3, [r3, #24]
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	f040 80a7 	bne.w	8004d4c <ADC_MEASUREMENT_Init+0x160>
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fd f9ae 	bl	8001f64 <GLOBAL_ADC_Init>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	73bb      	strb	r3, [r7, #14]
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	695a      	ldr	r2, [r3, #20]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	4610      	mov	r0, r2
 8004c18:	6819      	ldr	r1, [r3, #0]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f7fc fdc5 	bl	80017ac <XMC_VADC_GLOBAL_InputClassInit>
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
    		                              XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM_XMC11);
#endif
  
    /* Initialize the Background Scan hardware */
    XMC_VADC_GLOBAL_BackgroundInit(handle_ptr->global_handle->module_ptr, handle_ptr->backgnd_config_handle);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	695a      	ldr	r2, [r3, #20]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	4610      	mov	r0, r2
 8004c2e:	4619      	mov	r1, r3
 8004c30:	f7fc fee2 	bl	80019f8 <XMC_VADC_GLOBAL_BackgroundInit>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 8004c34:	2300      	movs	r3, #0
 8004c36:	73fb      	strb	r3, [r7, #15]
 8004c38:	e03c      	b.n	8004cb4 <ADC_MEASUREMENT_Init+0xc8>
    {
      indexed = handle_ptr->array->channel_array[j];
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	7bfa      	ldrb	r2, [r7, #15]
 8004c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c44:	60bb      	str	r3, [r7, #8]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	7c5b      	ldrb	r3, [r3, #17]
 8004c4e:	4619      	mov	r1, r3
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4610      	mov	r0, r2
 8004c56:	461a      	mov	r2, r3
 8004c58:	f7fc ff4c 	bl	8001af4 <XMC_VADC_GROUP_ChannelInit>
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	789b      	ldrb	r3, [r3, #2]
 8004c66:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	4619      	mov	r1, r3
                                indexed->res_handle);
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	685b      	ldr	r3, [r3, #4]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 8004c72:	4610      	mov	r0, r2
 8004c74:	461a      	mov	r2, r3
 8004c76:	f7ff ff95 	bl	8004ba4 <XMC_VADC_GROUP_ResultInit>
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	695a      	ldr	r2, [r3, #20]
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	7c1b      	ldrb	r3, [r3, #16]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 8004c84:	4619      	mov	r1, r3
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	7c5b      	ldrb	r3, [r3, #17]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	f7ff ff6d 	bl	8004b6c <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);

#ifdef ADC_MEASUREMENT_ANALOG_IO_USED
      /* ANALOG_IO initialization for the channel*/
      if(indexed->analog_io_config != NULL)
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d009      	beq.n	8004cae <ADC_MEASUREMENT_Init+0xc2>
      {
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7ff feb2 	bl	8004a08 <ANALOG_IO_Init>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	7bbb      	ldrb	r3, [r7, #14]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	73bb      	strb	r3, [r7, #14]
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 8004cae:	7bfb      	ldrb	r3, [r7, #15]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	73fb      	strb	r3, [r7, #15]
 8004cb4:	7bfb      	ldrb	r3, [r7, #15]
 8004cb6:	2b0f      	cmp	r3, #15
 8004cb8:	d9bf      	bls.n	8004c3a <ADC_MEASUREMENT_Init+0x4e>
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
      }
#endif
    }
#if(UC_SERIES != XMC11)
    if ((handle_ptr->backgnd_config_handle->req_src_interrupt) && (handle_ptr->req_src_intr_handle != NULL ))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	7a1b      	ldrb	r3, [r3, #8]
 8004cc0:	f003 0308 	and.w	r3, r3, #8
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d02c      	beq.n	8004d24 <ADC_MEASUREMENT_Init+0x138>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d028      	beq.n	8004d24 <ADC_MEASUREMENT_Init+0x138>
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	b2dc      	uxtb	r4, r3
 8004cda:	f7ff feaf 	bl	8004a3c <__NVIC_GetPriorityGrouping>
 8004cde:	4601      	mov	r1, r0
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 8004ce4:	685a      	ldr	r2, [r3, #4]
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	4608      	mov	r0, r1
 8004cee:	4611      	mov	r1, r2
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	f7ff fef7 	bl	8004ae4 <NVIC_EncodePriority>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	b263      	sxtb	r3, r4
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	4611      	mov	r1, r2
 8004cfe:	f7ff fec7 	bl	8004a90 <__NVIC_SetPriority>
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
#endif
      /* Connect background Request Source Event to NVIC node */
      XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(handle_ptr->global_handle->module_ptr,
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	695a      	ldr	r2, [r3, #20]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	7e5b      	ldrb	r3, [r3, #25]
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	4619      	mov	r1, r3
 8004d10:	f7fc fda2 	bl	8001858 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>
    		                                         (XMC_VADC_SR_t) handle_ptr->srv_req_node);
    
      /* Enable Background Scan Request source IRQ */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->req_src_intr_handle->node_id);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	b25b      	sxtb	r3, r3
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7ff fe9a 	bl	8004a58 <__NVIC_EnableIRQ>
    /* Enable Background Scan Request source IRQ */
    NVIC_EnableIRQ((IRQn_Type)handle_ptr->result_intr_handle->node_id);
#endif
#endif
    /* Mux Configuration is done*/
    if (handle_ptr->mux_config != NULL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d002      	beq.n	8004d32 <ADC_MEASUREMENT_Init+0x146>
    {
    	(handle_ptr->mux_config)();
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	4798      	blx	r3
    }
  
    if (handle_ptr->start_conversion != (bool)false)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	7e9b      	ldrb	r3, [r3, #26]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d005      	beq.n	8004d46 <ADC_MEASUREMENT_Init+0x15a>
    {
      /* Start conversion manually using load event trigger*/
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff ff01 	bl	8004b48 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
    }
    handle_ptr->init_state = status;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	7bba      	ldrb	r2, [r7, #14]
 8004d4a:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	7e1b      	ldrb	r3, [r3, #24]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd90      	pop	{r4, r7, pc}

08004d58 <ADC_MEASUREMENT_GetResult>:
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#if(XMC_VADC_GROUP_AVAILABLE == 1U)
/* This API will get the result of a conversion for a specific channel*/
XMC_VADC_RESULT_SIZE_t ADC_MEASUREMENT_GetResult(ADC_MEASUREMENT_CHANNEL_t *const handle_ptr)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  XMC_VADC_RESULT_SIZE_t result;

  XMC_ASSERT("ADC_MEASUREMENT_GetResult:Invalid handle_ptr", (handle_ptr != NULL))

  result = XMC_VADC_GROUP_GetResult(handle_ptr->group_handle, handle_ptr->ch_handle->result_reg_number);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	789b      	ldrb	r3, [r3, #2]
 8004d6a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	4610      	mov	r0, r2
 8004d72:	4619      	mov	r1, r3
 8004d74:	f7ff ff28 	bl	8004bc8 <XMC_VADC_GROUP_GetResult>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	81fb      	strh	r3, [r7, #14]

  return (result);
 8004d7c:	89fb      	ldrh	r3, [r7, #14]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop

08004d88 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8004d92:	4825      	ldr	r0, [pc, #148]	; (8004e28 <DAVE_Init+0xa0>)
 8004d94:	f7ff fbb0 	bl	80044f8 <CLOCK_XMC4_Init>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8004d9c:	79fb      	ldrb	r3, [r7, #7]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d104      	bne.n	8004dac <DAVE_Init+0x24>
  {
	 /**  Initialization of ADC_MEASUREMENT APP instance ADC_MEASUREMENT_0 */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_Init(&ADC_MEASUREMENT_0); 
 8004da2:	4822      	ldr	r0, [pc, #136]	; (8004e2c <DAVE_Init+0xa4>)
 8004da4:	f7ff ff22 	bl	8004bec <ADC_MEASUREMENT_Init>
 8004da8:	4603      	mov	r3, r0
 8004daa:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8004dac:	79fb      	ldrb	r3, [r7, #7]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d104      	bne.n	8004dbc <DAVE_Init+0x34>
  {
	 /**  Initialization of TIMER APP instance TIMER_0 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_0); 
 8004db2:	481f      	ldr	r0, [pc, #124]	; (8004e30 <DAVE_Init+0xa8>)
 8004db4:	f7fc ff9c 	bl	8001cf0 <TIMER_Init>
 8004db8:	4603      	mov	r3, r0
 8004dba:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8004dbc:	79fb      	ldrb	r3, [r7, #7]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d104      	bne.n	8004dcc <DAVE_Init+0x44>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_2 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_2); 
 8004dc2:	481c      	ldr	r0, [pc, #112]	; (8004e34 <DAVE_Init+0xac>)
 8004dc4:	f7ff fd88 	bl	80048d8 <CAN_NODE_Init>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8004dcc:	79fb      	ldrb	r3, [r7, #7]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d104      	bne.n	8004ddc <DAVE_Init+0x54>
  {
	 /**  Initialization of DIGITAL_IO APP instance Brake_Light */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&Brake_Light); 
 8004dd2:	4819      	ldr	r0, [pc, #100]	; (8004e38 <DAVE_Init+0xb0>)
 8004dd4:	f7ff fafc 	bl	80043d0 <DIGITAL_IO_Init>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8004ddc:	79fb      	ldrb	r3, [r7, #7]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d104      	bne.n	8004dec <DAVE_Init+0x64>
  {
	 /**  Initialization of DIGITAL_IO APP instance CAN_2_RES_CTRL */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CAN_2_RES_CTRL); 
 8004de2:	4816      	ldr	r0, [pc, #88]	; (8004e3c <DAVE_Init+0xb4>)
 8004de4:	f7ff faf4 	bl	80043d0 <DIGITAL_IO_Init>
 8004de8:	4603      	mov	r3, r0
 8004dea:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8004dec:	79fb      	ldrb	r3, [r7, #7]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d104      	bne.n	8004dfc <DAVE_Init+0x74>
  {
	 /**  Initialization of DIGITAL_IO APP instance CAN_1_RES_CTRL */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CAN_1_RES_CTRL); 
 8004df2:	4813      	ldr	r0, [pc, #76]	; (8004e40 <DAVE_Init+0xb8>)
 8004df4:	f7ff faec 	bl	80043d0 <DIGITAL_IO_Init>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8004dfc:	79fb      	ldrb	r3, [r7, #7]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d104      	bne.n	8004e0c <DAVE_Init+0x84>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_1 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_1); 
 8004e02:	4810      	ldr	r0, [pc, #64]	; (8004e44 <DAVE_Init+0xbc>)
 8004e04:	f7ff fd68 	bl	80048d8 <CAN_NODE_Init>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8004e0c:	79fb      	ldrb	r3, [r7, #7]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d104      	bne.n	8004e1c <DAVE_Init+0x94>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_0 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&Debug_LED);
 8004e12:	480d      	ldr	r0, [pc, #52]	; (8004e48 <DAVE_Init+0xc0>)
 8004e14:	f7ff fadc 	bl	80043d0 <DIGITAL_IO_Init>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8004e1c:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20000528 	.word	0x20000528
 8004e2c:	20000350 	.word	0x20000350
 8004e30:	20000000 	.word	0x20000000
 8004e34:	0800694c 	.word	0x0800694c
 8004e38:	080068a4 	.word	0x080068a4
 8004e3c:	080068b8 	.word	0x080068b8
 8004e40:	080068cc 	.word	0x080068cc
 8004e44:	08006a2c 	.word	0x08006a2c
 8004e48:	080068e0 	.word	0x080068e0

08004e4c <ANA_Init>:
#include <ANA_Init.h>
#include "Header.h"


void ANA_Init()
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
	// Type: 0: Linear, 1: Ride Height, 2: NTC, 3: Pressure, 4: Load Cell


	//------Sensors------
	T_Oil.Channel = &ADC_MEASUREMENT_Channel_A;
 8004e50:	4b7d      	ldr	r3, [pc, #500]	; (8005048 <ANA_Init+0x1fc>)
 8004e52:	4a7e      	ldr	r2, [pc, #504]	; (800504c <ANA_Init+0x200>)
 8004e54:	61da      	str	r2, [r3, #28]
	T_Oil.Type = NTC;
 8004e56:	4b7c      	ldr	r3, [pc, #496]	; (8005048 <ANA_Init+0x1fc>)
 8004e58:	2202      	movs	r2, #2
 8004e5a:	f883 2020 	strb.w	r2, [r3, #32]
	T_Oil.FilterType = Average;
 8004e5e:	4b7a      	ldr	r3, [pc, #488]	; (8005048 <ANA_Init+0x1fc>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	T_Oil.InputVoltage = 5;
 8004e66:	4b78      	ldr	r3, [pc, #480]	; (8005048 <ANA_Init+0x1fc>)
 8004e68:	2205      	movs	r2, #5
 8004e6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	T_Water.Channel = &ADC_MEASUREMENT_Channel_B;
 8004e6e:	4b78      	ldr	r3, [pc, #480]	; (8005050 <ANA_Init+0x204>)
 8004e70:	4a78      	ldr	r2, [pc, #480]	; (8005054 <ANA_Init+0x208>)
 8004e72:	61da      	str	r2, [r3, #28]
	T_Water.Type = NTC;
 8004e74:	4b76      	ldr	r3, [pc, #472]	; (8005050 <ANA_Init+0x204>)
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 2020 	strb.w	r2, [r3, #32]
	T_Water.FilterType = Average;
 8004e7c:	4b74      	ldr	r3, [pc, #464]	; (8005050 <ANA_Init+0x204>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	T_Water.InputVoltage = 5;
 8004e84:	4b72      	ldr	r3, [pc, #456]	; (8005050 <ANA_Init+0x204>)
 8004e86:	2205      	movs	r2, #5
 8004e88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	p_Oil.Channel = &ADC_MEASUREMENT_Channel_C;
 8004e8c:	4b72      	ldr	r3, [pc, #456]	; (8005058 <ANA_Init+0x20c>)
 8004e8e:	4a73      	ldr	r2, [pc, #460]	; (800505c <ANA_Init+0x210>)
 8004e90:	61da      	str	r2, [r3, #28]
	p_Oil.Type = Pressure;
 8004e92:	4b71      	ldr	r3, [pc, #452]	; (8005058 <ANA_Init+0x20c>)
 8004e94:	2203      	movs	r2, #3
 8004e96:	f883 2020 	strb.w	r2, [r3, #32]
	p_Oil.FilterType = Average;
 8004e9a:	4b6f      	ldr	r3, [pc, #444]	; (8005058 <ANA_Init+0x20c>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	p_Oil.k = 2.22; // Bar / V
 8004ea2:	4b6d      	ldr	r3, [pc, #436]	; (8005058 <ANA_Init+0x20c>)
 8004ea4:	4a6e      	ldr	r2, [pc, #440]	; (8005060 <ANA_Init+0x214>)
 8004ea6:	625a      	str	r2, [r3, #36]	; 0x24
	p_Oil.InputVoltage = 5;
 8004ea8:	4b6b      	ldr	r3, [pc, #428]	; (8005058 <ANA_Init+0x20c>)
 8004eaa:	2205      	movs	r2, #5
 8004eac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	p_Pneu.Channel = &ADC_MEASUREMENT_Channel_D;
 8004eb0:	4b6c      	ldr	r3, [pc, #432]	; (8005064 <ANA_Init+0x218>)
 8004eb2:	4a6d      	ldr	r2, [pc, #436]	; (8005068 <ANA_Init+0x21c>)
 8004eb4:	61da      	str	r2, [r3, #28]
	p_Pneu.Type = Pressure;
 8004eb6:	4b6b      	ldr	r3, [pc, #428]	; (8005064 <ANA_Init+0x218>)
 8004eb8:	2203      	movs	r2, #3
 8004eba:	f883 2020 	strb.w	r2, [r3, #32]
	p_Pneu.FilterType = Average;
 8004ebe:	4b69      	ldr	r3, [pc, #420]	; (8005064 <ANA_Init+0x218>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	p_Pneu.k = 2.22; // Bar / V
 8004ec6:	4b67      	ldr	r3, [pc, #412]	; (8005064 <ANA_Init+0x218>)
 8004ec8:	4a65      	ldr	r2, [pc, #404]	; (8005060 <ANA_Init+0x214>)
 8004eca:	625a      	str	r2, [r3, #36]	; 0x24
	p_Pneu.InputVoltage = 5;
 8004ecc:	4b65      	ldr	r3, [pc, #404]	; (8005064 <ANA_Init+0x218>)
 8004ece:	2205      	movs	r2, #5
 8004ed0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	x_DP_RL.Channel = &ADC_MEASUREMENT_Channel_F;
 8004ed4:	4b65      	ldr	r3, [pc, #404]	; (800506c <ANA_Init+0x220>)
 8004ed6:	4a66      	ldr	r2, [pc, #408]	; (8005070 <ANA_Init+0x224>)
 8004ed8:	61da      	str	r2, [r3, #28]
	x_DP_RL.Type = Linear;
 8004eda:	4b64      	ldr	r3, [pc, #400]	; (800506c <ANA_Init+0x220>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2020 	strb.w	r2, [r3, #32]
	x_DP_RL.FilterType = LowPass;
 8004ee2:	4b62      	ldr	r3, [pc, #392]	; (800506c <ANA_Init+0x220>)
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	x_DP_RL.k = 0.0083;
 8004eea:	4b60      	ldr	r3, [pc, #384]	; (800506c <ANA_Init+0x220>)
 8004eec:	4a61      	ldr	r2, [pc, #388]	; (8005074 <ANA_Init+0x228>)
 8004eee:	625a      	str	r2, [r3, #36]	; 0x24
	x_DP_RL.InputVoltage = 12;
 8004ef0:	4b5e      	ldr	r3, [pc, #376]	; (800506c <ANA_Init+0x220>)
 8004ef2:	220c      	movs	r2, #12
 8004ef4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	Powercycle_Calibration(&x_DP_RL);
 8004ef8:	485c      	ldr	r0, [pc, #368]	; (800506c <ANA_Init+0x220>)
 8004efa:	f000 fc2d 	bl	8005758 <Powercycle_Calibration>

	x_DP_RR.Channel = &ADC_MEASUREMENT_Channel_E;
 8004efe:	4b5e      	ldr	r3, [pc, #376]	; (8005078 <ANA_Init+0x22c>)
 8004f00:	4a5e      	ldr	r2, [pc, #376]	; (800507c <ANA_Init+0x230>)
 8004f02:	61da      	str	r2, [r3, #28]
	x_DP_RR.Type = Linear;
 8004f04:	4b5c      	ldr	r3, [pc, #368]	; (8005078 <ANA_Init+0x22c>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2020 	strb.w	r2, [r3, #32]
	x_DP_RR.FilterType = LowPass;
 8004f0c:	4b5a      	ldr	r3, [pc, #360]	; (8005078 <ANA_Init+0x22c>)
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	x_DP_RR.k = 0.0083;
 8004f14:	4b58      	ldr	r3, [pc, #352]	; (8005078 <ANA_Init+0x22c>)
 8004f16:	4a57      	ldr	r2, [pc, #348]	; (8005074 <ANA_Init+0x228>)
 8004f18:	625a      	str	r2, [r3, #36]	; 0x24
	x_DP_RR.InputVoltage = 12;
 8004f1a:	4b57      	ldr	r3, [pc, #348]	; (8005078 <ANA_Init+0x22c>)
 8004f1c:	220c      	movs	r2, #12
 8004f1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	Powercycle_Calibration(&x_DP_RR);
 8004f22:	4855      	ldr	r0, [pc, #340]	; (8005078 <ANA_Init+0x22c>)
 8004f24:	f000 fc18 	bl	8005758 <Powercycle_Calibration>

	x_RH_RL.Channel = &ADC_MEASUREMENT_Channel_G;
 8004f28:	4b55      	ldr	r3, [pc, #340]	; (8005080 <ANA_Init+0x234>)
 8004f2a:	4a56      	ldr	r2, [pc, #344]	; (8005084 <ANA_Init+0x238>)
 8004f2c:	61da      	str	r2, [r3, #28]
	x_RH_RL.Type = RideHeight;
 8004f2e:	4b54      	ldr	r3, [pc, #336]	; (8005080 <ANA_Init+0x234>)
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2020 	strb.w	r2, [r3, #32]
	x_RH_RL.FilterType = LowPass;
 8004f36:	4b52      	ldr	r3, [pc, #328]	; (8005080 <ANA_Init+0x234>)
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	x_RH_RL.k = 0.035;
 8004f3e:	4b50      	ldr	r3, [pc, #320]	; (8005080 <ANA_Init+0x234>)
 8004f40:	4a51      	ldr	r2, [pc, #324]	; (8005088 <ANA_Init+0x23c>)
 8004f42:	625a      	str	r2, [r3, #36]	; 0x24
	x_RH_RL.InputVoltage = 10;
 8004f44:	4b4e      	ldr	r3, [pc, #312]	; (8005080 <ANA_Init+0x234>)
 8004f46:	220a      	movs	r2, #10
 8004f48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	Powercycle_Calibration(&x_RH_RL);
 8004f4c:	484c      	ldr	r0, [pc, #304]	; (8005080 <ANA_Init+0x234>)
 8004f4e:	f000 fc03 	bl	8005758 <Powercycle_Calibration>

	x_RH_RR.Channel = &ADC_MEASUREMENT_Channel_H;
 8004f52:	4b4e      	ldr	r3, [pc, #312]	; (800508c <ANA_Init+0x240>)
 8004f54:	4a4e      	ldr	r2, [pc, #312]	; (8005090 <ANA_Init+0x244>)
 8004f56:	61da      	str	r2, [r3, #28]
	x_RH_RR.Type = RideHeight;
 8004f58:	4b4c      	ldr	r3, [pc, #304]	; (800508c <ANA_Init+0x240>)
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2020 	strb.w	r2, [r3, #32]
	x_RH_RR.FilterType = LowPass;
 8004f60:	4b4a      	ldr	r3, [pc, #296]	; (800508c <ANA_Init+0x240>)
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	x_RH_RR.k = 0.035;
 8004f68:	4b48      	ldr	r3, [pc, #288]	; (800508c <ANA_Init+0x240>)
 8004f6a:	4a47      	ldr	r2, [pc, #284]	; (8005088 <ANA_Init+0x23c>)
 8004f6c:	625a      	str	r2, [r3, #36]	; 0x24
	x_RH_RR.InputVoltage = 10;
 8004f6e:	4b47      	ldr	r3, [pc, #284]	; (800508c <ANA_Init+0x240>)
 8004f70:	220a      	movs	r2, #10
 8004f72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	Powercycle_Calibration(&x_RH_RR);
 8004f76:	4845      	ldr	r0, [pc, #276]	; (800508c <ANA_Init+0x240>)
 8004f78:	f000 fbee 	bl	8005758 <Powercycle_Calibration>

	f_LC_RL.Channel = &ADC_MEASUREMENT_Channel_I;
 8004f7c:	4b45      	ldr	r3, [pc, #276]	; (8005094 <ANA_Init+0x248>)
 8004f7e:	4a46      	ldr	r2, [pc, #280]	; (8005098 <ANA_Init+0x24c>)
 8004f80:	61da      	str	r2, [r3, #28]
	f_LC_RL.Type = LoadCell_RL;
 8004f82:	4b44      	ldr	r3, [pc, #272]	; (8005094 <ANA_Init+0x248>)
 8004f84:	2204      	movs	r2, #4
 8004f86:	f883 2020 	strb.w	r2, [r3, #32]
	f_LC_RL.FilterType = LowPass;
 8004f8a:	4b42      	ldr	r3, [pc, #264]	; (8005094 <ANA_Init+0x248>)
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	f_LC_RL.InputVoltage = 5;
 8004f92:	4b40      	ldr	r3, [pc, #256]	; (8005094 <ANA_Init+0x248>)
 8004f94:	2205      	movs	r2, #5
 8004f96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	f_LC_RR.Channel = &ADC_MEASUREMENT_Channel_J;
 8004f9a:	4b40      	ldr	r3, [pc, #256]	; (800509c <ANA_Init+0x250>)
 8004f9c:	4a40      	ldr	r2, [pc, #256]	; (80050a0 <ANA_Init+0x254>)
 8004f9e:	61da      	str	r2, [r3, #28]
	f_LC_RR.Type = LoadCell_RR;
 8004fa0:	4b3e      	ldr	r3, [pc, #248]	; (800509c <ANA_Init+0x250>)
 8004fa2:	2205      	movs	r2, #5
 8004fa4:	f883 2020 	strb.w	r2, [r3, #32]
	f_LC_RR.FilterType = LowPass;
 8004fa8:	4b3c      	ldr	r3, [pc, #240]	; (800509c <ANA_Init+0x250>)
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	f_LC_RR.InputVoltage = 5;
 8004fb0:	4b3a      	ldr	r3, [pc, #232]	; (800509c <ANA_Init+0x250>)
 8004fb2:	2205      	movs	r2, #5
 8004fb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


	//------Board Monitoring------
	T_Board.Channel = &ADC_MEASUREMENT_Channel_L;
 8004fb8:	4b3a      	ldr	r3, [pc, #232]	; (80050a4 <ANA_Init+0x258>)
 8004fba:	4a3b      	ldr	r2, [pc, #236]	; (80050a8 <ANA_Init+0x25c>)
 8004fbc:	61da      	str	r2, [r3, #28]
	T_Board.Type = NTC_Board;
 8004fbe:	4b39      	ldr	r3, [pc, #228]	; (80050a4 <ANA_Init+0x258>)
 8004fc0:	2206      	movs	r2, #6
 8004fc2:	f883 2020 	strb.w	r2, [r3, #32]
	T_Board.FilterType = No_Filter;
 8004fc6:	4b37      	ldr	r3, [pc, #220]	; (80050a4 <ANA_Init+0x258>)
 8004fc8:	2202      	movs	r2, #2
 8004fca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	T_Board.InputVoltage = 5;
 8004fce:	4b35      	ldr	r3, [pc, #212]	; (80050a4 <ANA_Init+0x258>)
 8004fd0:	2205      	movs	r2, #5
 8004fd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	u_12V_Meas.Channel = &ADC_MEASUREMENT_Channel_M;
 8004fd6:	4b35      	ldr	r3, [pc, #212]	; (80050ac <ANA_Init+0x260>)
 8004fd8:	4a35      	ldr	r2, [pc, #212]	; (80050b0 <ANA_Init+0x264>)
 8004fda:	61da      	str	r2, [r3, #28]
	u_12V_Meas.Type = Voltage;
 8004fdc:	4b33      	ldr	r3, [pc, #204]	; (80050ac <ANA_Init+0x260>)
 8004fde:	2207      	movs	r2, #7
 8004fe0:	f883 2020 	strb.w	r2, [r3, #32]
	u_12V_Meas.FilterType = No_Filter;
 8004fe4:	4b31      	ldr	r3, [pc, #196]	; (80050ac <ANA_Init+0x260>)
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	u_5V_ANA_Meas.Channel = &ADC_MEASUREMENT_Channel_N;
 8004fec:	4b31      	ldr	r3, [pc, #196]	; (80050b4 <ANA_Init+0x268>)
 8004fee:	4a32      	ldr	r2, [pc, #200]	; (80050b8 <ANA_Init+0x26c>)
 8004ff0:	61da      	str	r2, [r3, #28]
	u_5V_ANA_Meas.Type = Linear;
 8004ff2:	4b30      	ldr	r3, [pc, #192]	; (80050b4 <ANA_Init+0x268>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2020 	strb.w	r2, [r3, #32]
	u_5V_ANA_Meas.FilterType = No_Filter;
 8004ffa:	4b2e      	ldr	r3, [pc, #184]	; (80050b4 <ANA_Init+0x268>)
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	u_OUT1_Meas.Channel = &ADC_MEASUREMENT_Channel_O;
 8005002:	4b2e      	ldr	r3, [pc, #184]	; (80050bc <ANA_Init+0x270>)
 8005004:	4a2e      	ldr	r2, [pc, #184]	; (80050c0 <ANA_Init+0x274>)
 8005006:	61da      	str	r2, [r3, #28]
	u_OUT1_Meas.Type = Linear;
 8005008:	4b2c      	ldr	r3, [pc, #176]	; (80050bc <ANA_Init+0x270>)
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2020 	strb.w	r2, [r3, #32]
	u_OUT1_Meas.FilterType = No_Filter;
 8005010:	4b2a      	ldr	r3, [pc, #168]	; (80050bc <ANA_Init+0x270>)
 8005012:	2202      	movs	r2, #2
 8005014:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	u_OUT2_Meas.Channel = &ADC_MEASUREMENT_Channel_P;
 8005018:	4b2a      	ldr	r3, [pc, #168]	; (80050c4 <ANA_Init+0x278>)
 800501a:	4a2b      	ldr	r2, [pc, #172]	; (80050c8 <ANA_Init+0x27c>)
 800501c:	61da      	str	r2, [r3, #28]
	u_OUT2_Meas.Type = Linear;
 800501e:	4b29      	ldr	r3, [pc, #164]	; (80050c4 <ANA_Init+0x278>)
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2020 	strb.w	r2, [r3, #32]
	u_OUT2_Meas.FilterType = No_Filter;
 8005026:	4b27      	ldr	r3, [pc, #156]	; (80050c4 <ANA_Init+0x278>)
 8005028:	2202      	movs	r2, #2
 800502a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21


	//------not used Inputs------
	NTC1.Channel = &ADC_MEASUREMENT_Channel_K;
 800502e:	4b27      	ldr	r3, [pc, #156]	; (80050cc <ANA_Init+0x280>)
 8005030:	4a27      	ldr	r2, [pc, #156]	; (80050d0 <ANA_Init+0x284>)
 8005032:	61da      	str	r2, [r3, #28]
	NTC1.Type = NTC;
 8005034:	4b25      	ldr	r3, [pc, #148]	; (80050cc <ANA_Init+0x280>)
 8005036:	2202      	movs	r2, #2
 8005038:	f883 2020 	strb.w	r2, [r3, #32]
	NTC1.FilterType = Average;
 800503c:	4b23      	ldr	r3, [pc, #140]	; (80050cc <ANA_Init+0x280>)
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

}
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	200007bc 	.word	0x200007bc
 800504c:	2000011c 	.word	0x2000011c
 8005050:	20000814 	.word	0x20000814
 8005054:	2000013c 	.word	0x2000013c
 8005058:	20000708 	.word	0x20000708
 800505c:	2000015c 	.word	0x2000015c
 8005060:	400e147b 	.word	0x400e147b
 8005064:	200006b0 	.word	0x200006b0
 8005068:	2000017c 	.word	0x2000017c
 800506c:	20000840 	.word	0x20000840
 8005070:	200001bc 	.word	0x200001bc
 8005074:	3c07fcb9 	.word	0x3c07fcb9
 8005078:	20000658 	.word	0x20000658
 800507c:	2000019c 	.word	0x2000019c
 8005080:	2000062c 	.word	0x2000062c
 8005084:	200001dc 	.word	0x200001dc
 8005088:	3d0f5c29 	.word	0x3d0f5c29
 800508c:	20000600 	.word	0x20000600
 8005090:	200001fc 	.word	0x200001fc
 8005094:	200005d4 	.word	0x200005d4
 8005098:	2000021c 	.word	0x2000021c
 800509c:	200006dc 	.word	0x200006dc
 80050a0:	2000023c 	.word	0x2000023c
 80050a4:	20000684 	.word	0x20000684
 80050a8:	2000027c 	.word	0x2000027c
 80050ac:	200007e8 	.word	0x200007e8
 80050b0:	2000029c 	.word	0x2000029c
 80050b4:	20000760 	.word	0x20000760
 80050b8:	200002bc 	.word	0x200002bc
 80050bc:	20000734 	.word	0x20000734
 80050c0:	200002dc 	.word	0x200002dc
 80050c4:	2000086c 	.word	0x2000086c
 80050c8:	200002fc 	.word	0x200002fc
 80050cc:	20000790 	.word	0x20000790
 80050d0:	2000025c 	.word	0x2000025c

080050d4 <ANA_Read>:
#include "Header.h"
#include "ANA_Init.h"
#include "Average_Filter.h"

void ANA_Read(Analog_Sensor_t *const Sensor)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]

	//-----------Read-------------

	if(Sensor->Type == Linear)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d109      	bne.n	80050fa <ANA_Read+0x26>
		Sensor->Value = ADC_MEASUREMENT_GetResult(Sensor->Channel); //3.3V = 4095 uint16_t
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7ff fe34 	bl	8004d58 <ADC_MEASUREMENT_GetResult>
 80050f0:	4603      	mov	r3, r0
 80050f2:	461a      	mov	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	801a      	strh	r2, [r3, #0]
 80050f8:	e05d      	b.n	80051b6 <ANA_Read+0xe2>

	else if(Sensor->Type == Pressure)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005100:	2b03      	cmp	r3, #3
 8005102:	d109      	bne.n	8005118 <ANA_Read+0x44>
		Sensor->Value = ADC_MEASUREMENT_GetResult(Sensor->Channel);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	69db      	ldr	r3, [r3, #28]
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff fe25 	bl	8004d58 <ADC_MEASUREMENT_GetResult>
 800510e:	4603      	mov	r3, r0
 8005110:	461a      	mov	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	801a      	strh	r2, [r3, #0]
 8005116:	e04e      	b.n	80051b6 <ANA_Read+0xe2>

	else if(Sensor->Type == RideHeight)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d109      	bne.n	8005136 <ANA_Read+0x62>
		Sensor->Value = ADC_MEASUREMENT_GetResult(Sensor->Channel);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	4618      	mov	r0, r3
 8005128:	f7ff fe16 	bl	8004d58 <ADC_MEASUREMENT_GetResult>
 800512c:	4603      	mov	r3, r0
 800512e:	461a      	mov	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	801a      	strh	r2, [r3, #0]
 8005134:	e03f      	b.n	80051b6 <ANA_Read+0xe2>

	else if((Sensor->Type == NTC)||(Sensor->Type == NTC_Board))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 3020 	ldrb.w	r3, [r3, #32]
 800513c:	2b02      	cmp	r3, #2
 800513e:	d004      	beq.n	800514a <ANA_Read+0x76>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005146:	2b06      	cmp	r3, #6
 8005148:	d109      	bne.n	800515e <ANA_Read+0x8a>
		Sensor->Value = ADC_MEASUREMENT_GetResult(Sensor->Channel);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff fe02 	bl	8004d58 <ADC_MEASUREMENT_GetResult>
 8005154:	4603      	mov	r3, r0
 8005156:	461a      	mov	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	801a      	strh	r2, [r3, #0]
 800515c:	e02b      	b.n	80051b6 <ANA_Read+0xe2>

	else if(Sensor->Type == LoadCell_RL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005164:	2b04      	cmp	r3, #4
 8005166:	d109      	bne.n	800517c <ANA_Read+0xa8>
		Sensor->Value = ADC_MEASUREMENT_GetResult(Sensor->Channel);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	4618      	mov	r0, r3
 800516e:	f7ff fdf3 	bl	8004d58 <ADC_MEASUREMENT_GetResult>
 8005172:	4603      	mov	r3, r0
 8005174:	461a      	mov	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	801a      	strh	r2, [r3, #0]
 800517a:	e01c      	b.n	80051b6 <ANA_Read+0xe2>

	else if(Sensor->Type == LoadCell_RR)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005182:	2b05      	cmp	r3, #5
 8005184:	d109      	bne.n	800519a <ANA_Read+0xc6>
		Sensor->Value = ADC_MEASUREMENT_GetResult(Sensor->Channel);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	4618      	mov	r0, r3
 800518c:	f7ff fde4 	bl	8004d58 <ADC_MEASUREMENT_GetResult>
 8005190:	4603      	mov	r3, r0
 8005192:	461a      	mov	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	801a      	strh	r2, [r3, #0]
 8005198:	e00d      	b.n	80051b6 <ANA_Read+0xe2>

	else if(Sensor->Type == Voltage)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051a0:	2b07      	cmp	r3, #7
 80051a2:	d108      	bne.n	80051b6 <ANA_Read+0xe2>
		Sensor->Value = ADC_MEASUREMENT_GetResult(Sensor->Channel);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7ff fdd5 	bl	8004d58 <ADC_MEASUREMENT_GetResult>
 80051ae:	4603      	mov	r3, r0
 80051b0:	461a      	mov	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	801a      	strh	r2, [r3, #0]

	//-------------Filter-------------

	if(Sensor->FilterType == Average)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d103      	bne.n	80051c8 <ANA_Read+0xf4>
		Average_Filter(Sensor);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f893 	bl	80052ec <Average_Filter>
 80051c6:	e016      	b.n	80051f6 <ANA_Read+0x122>

	else if(Sensor->FilterType == LowPass)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d103      	bne.n	80051da <ANA_Read+0x106>
		Low_Pass_Filter(Sensor);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fa78 	bl	80056c8 <Low_Pass_Filter>
 80051d8:	e00d      	b.n	80051f6 <ANA_Read+0x122>

	else if(Sensor->FilterType == No_Filter)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d108      	bne.n	80051f6 <ANA_Read+0x122>
		Sensor->FilteredValue = Sensor->Value;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	881b      	ldrh	r3, [r3, #0]
 80051e8:	ee07 3a90 	vmov	s15, r3
 80051ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	edc3 7a01 	vstr	s15, [r3, #4]


	UnitConversion(Sensor);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fada 	bl	80057b0 <UnitConversion>

}
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop

08005204 <Filter_Time>:

void Filter_Time()
{
 8005204:	b580      	push	{r7, lr}
 8005206:	af00      	add	r7, sp, #0
	  //------Filter------
	  time = TIMER_GetTime(&TIMER_0);
 8005208:	480d      	ldr	r0, [pc, #52]	; (8005240 <Filter_Time+0x3c>)
 800520a:	f7fc fd8f 	bl	8001d2c <TIMER_GetTime>
 800520e:	4602      	mov	r2, r0
 8005210:	4b0c      	ldr	r3, [pc, #48]	; (8005244 <Filter_Time+0x40>)
 8005212:	601a      	str	r2, [r3, #0]

	  	if(time >= 1)   // 1 micro second --- every new sample from ADC
 8005214:	4b0b      	ldr	r3, [pc, #44]	; (8005244 <Filter_Time+0x40>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00f      	beq.n	800523c <Filter_Time+0x38>
	  	{
	  		i_Buffer_average++;
 800521c:	4b0a      	ldr	r3, [pc, #40]	; (8005248 <Filter_Time+0x44>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	3301      	adds	r3, #1
 8005222:	b2da      	uxtb	r2, r3
 8005224:	4b08      	ldr	r3, [pc, #32]	; (8005248 <Filter_Time+0x44>)
 8005226:	701a      	strb	r2, [r3, #0]

	  		if(i_Buffer_average == 4)
 8005228:	4b07      	ldr	r3, [pc, #28]	; (8005248 <Filter_Time+0x44>)
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	2b04      	cmp	r3, #4
 800522e:	d102      	bne.n	8005236 <Filter_Time+0x32>
	  			i_Buffer_average = 0;
 8005230:	4b05      	ldr	r3, [pc, #20]	; (8005248 <Filter_Time+0x44>)
 8005232:	2200      	movs	r2, #0
 8005234:	701a      	strb	r2, [r3, #0]

	  		TIMER_Clear(&TIMER_0);
 8005236:	4802      	ldr	r0, [pc, #8]	; (8005240 <Filter_Time+0x3c>)
 8005238:	f7fc fdbc 	bl	8001db4 <TIMER_Clear>
	  	}
}
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	20000000 	.word	0x20000000
 8005244:	2000078c 	.word	0x2000078c
 8005248:	200008a2 	.word	0x200008a2

0800524c <Task_ANA_Read>:

void Task_ANA_Read()
{
 800524c:	b580      	push	{r7, lr}
 800524e:	af00      	add	r7, sp, #0
	while(1){

	ANA_Read(&T_Oil);
 8005250:	4817      	ldr	r0, [pc, #92]	; (80052b0 <Task_ANA_Read+0x64>)
 8005252:	f7ff ff3f 	bl	80050d4 <ANA_Read>
	ANA_Read(&T_Water);
 8005256:	4817      	ldr	r0, [pc, #92]	; (80052b4 <Task_ANA_Read+0x68>)
 8005258:	f7ff ff3c 	bl	80050d4 <ANA_Read>
	ANA_Read(&T_Board);
 800525c:	4816      	ldr	r0, [pc, #88]	; (80052b8 <Task_ANA_Read+0x6c>)
 800525e:	f7ff ff39 	bl	80050d4 <ANA_Read>
	ANA_Read(&p_Oil);
 8005262:	4816      	ldr	r0, [pc, #88]	; (80052bc <Task_ANA_Read+0x70>)
 8005264:	f7ff ff36 	bl	80050d4 <ANA_Read>
	ANA_Read(&p_Pneu);
 8005268:	4815      	ldr	r0, [pc, #84]	; (80052c0 <Task_ANA_Read+0x74>)
 800526a:	f7ff ff33 	bl	80050d4 <ANA_Read>
	ANA_Read(&x_DP_RL);
 800526e:	4815      	ldr	r0, [pc, #84]	; (80052c4 <Task_ANA_Read+0x78>)
 8005270:	f7ff ff30 	bl	80050d4 <ANA_Read>
	ANA_Read(&x_DP_RR);
 8005274:	4814      	ldr	r0, [pc, #80]	; (80052c8 <Task_ANA_Read+0x7c>)
 8005276:	f7ff ff2d 	bl	80050d4 <ANA_Read>
	ANA_Read(&x_RH_RL);
 800527a:	4814      	ldr	r0, [pc, #80]	; (80052cc <Task_ANA_Read+0x80>)
 800527c:	f7ff ff2a 	bl	80050d4 <ANA_Read>
	ANA_Read(&x_RH_RR);
 8005280:	4813      	ldr	r0, [pc, #76]	; (80052d0 <Task_ANA_Read+0x84>)
 8005282:	f7ff ff27 	bl	80050d4 <ANA_Read>
	ANA_Read(&f_LC_RL);
 8005286:	4813      	ldr	r0, [pc, #76]	; (80052d4 <Task_ANA_Read+0x88>)
 8005288:	f7ff ff24 	bl	80050d4 <ANA_Read>
	ANA_Read(&f_LC_RR);
 800528c:	4812      	ldr	r0, [pc, #72]	; (80052d8 <Task_ANA_Read+0x8c>)
 800528e:	f7ff ff21 	bl	80050d4 <ANA_Read>
	ANA_Read(&u_12V_Meas);
 8005292:	4812      	ldr	r0, [pc, #72]	; (80052dc <Task_ANA_Read+0x90>)
 8005294:	f7ff ff1e 	bl	80050d4 <ANA_Read>
	ANA_Read(&u_5V_ANA_Meas);
 8005298:	4811      	ldr	r0, [pc, #68]	; (80052e0 <Task_ANA_Read+0x94>)
 800529a:	f7ff ff1b 	bl	80050d4 <ANA_Read>
	ANA_Read(&u_OUT1_Meas);
 800529e:	4811      	ldr	r0, [pc, #68]	; (80052e4 <Task_ANA_Read+0x98>)
 80052a0:	f7ff ff18 	bl	80050d4 <ANA_Read>
	ANA_Read(&u_OUT2_Meas);
 80052a4:	4810      	ldr	r0, [pc, #64]	; (80052e8 <Task_ANA_Read+0x9c>)
 80052a6:	f7ff ff15 	bl	80050d4 <ANA_Read>
	//ANA_Read(NTC1);            // comment/uncomment if used or not

	Filter_Time();
 80052aa:	f7ff ffab 	bl	8005204 <Filter_Time>

	}
 80052ae:	e7cf      	b.n	8005250 <Task_ANA_Read+0x4>
 80052b0:	200007bc 	.word	0x200007bc
 80052b4:	20000814 	.word	0x20000814
 80052b8:	20000684 	.word	0x20000684
 80052bc:	20000708 	.word	0x20000708
 80052c0:	200006b0 	.word	0x200006b0
 80052c4:	20000840 	.word	0x20000840
 80052c8:	20000658 	.word	0x20000658
 80052cc:	2000062c 	.word	0x2000062c
 80052d0:	20000600 	.word	0x20000600
 80052d4:	200005d4 	.word	0x200005d4
 80052d8:	200006dc 	.word	0x200006dc
 80052dc:	200007e8 	.word	0x200007e8
 80052e0:	20000760 	.word	0x20000760
 80052e4:	20000734 	.word	0x20000734
 80052e8:	2000086c 	.word	0x2000086c

080052ec <Average_Filter>:
 */
#include <Average_Filter.h>
#include "Header.h"

void Average_Filter(Analog_Sensor_t *const Sensor)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]

	Sensor->Buffer_Average_Filter[i_Buffer_average] = Sensor->Value;
 80052f4:	4b1c      	ldr	r3, [pc, #112]	; (8005368 <Average_Filter+0x7c>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	4618      	mov	r0, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	8819      	ldrh	r1, [r3, #0]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	1d03      	adds	r3, r0, #4
 8005302:	005b      	lsls	r3, r3, #1
 8005304:	4413      	add	r3, r2
 8005306:	460a      	mov	r2, r1
 8005308:	809a      	strh	r2, [r3, #4]

	for(int8_t j=0; j<5; j++) {
 800530a:	2300      	movs	r3, #0
 800530c:	73fb      	strb	r3, [r7, #15]
 800530e:	e017      	b.n	8005340 <Average_Filter+0x54>
		Sensor->FilteredValue += Sensor->Buffer_Average_Filter[j];
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	ed93 7a01 	vldr	s14, [r3, #4]
 8005316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	3304      	adds	r3, #4
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	4413      	add	r3, r2
 8005322:	889b      	ldrh	r3, [r3, #4]
 8005324:	ee07 3a90 	vmov	s15, r3
 8005328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800532c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	edc3 7a01 	vstr	s15, [r3, #4]
void Average_Filter(Analog_Sensor_t *const Sensor)
{

	Sensor->Buffer_Average_Filter[i_Buffer_average] = Sensor->Value;

	for(int8_t j=0; j<5; j++) {
 8005336:	7bfb      	ldrb	r3, [r7, #15]
 8005338:	b2db      	uxtb	r3, r3
 800533a:	3301      	adds	r3, #1
 800533c:	b2db      	uxtb	r3, r3
 800533e:	73fb      	strb	r3, [r7, #15]
 8005340:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005344:	2b04      	cmp	r3, #4
 8005346:	dde3      	ble.n	8005310 <Average_Filter+0x24>
		Sensor->FilteredValue += Sensor->Buffer_Average_Filter[j];
	}

	Sensor->FilteredValue = Sensor->FilteredValue / 5;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	edd3 7a01 	vldr	s15, [r3, #4]
 800534e:	eeb1 7a04 	vmov.f32	s14, #20
 8005352:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	200008a2 	.word	0x200008a2

0800536c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	460b      	mov	r3, r1
 8005376:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8005378:	78fb      	ldrb	r3, [r7, #3]
 800537a:	2201      	movs	r2, #1
 800537c:	409a      	lsls	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	605a      	str	r2, [r3, #4]
}
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	7c1b      	ldrb	r3, [r3, #16]
 800539c:	4610      	mov	r0, r2
 800539e:	4619      	mov	r1, r3
 80053a0:	f7ff ffe4 	bl	800536c <XMC_GPIO_SetOutputHigh>
}
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop

080053ac <CAN1_INIT>:
uint8_t CAN1_data_Tx_LM01[8] = {0};

uint8_t delay_for_CAN1_Transmit = 5; //ms

void CAN1_INIT()
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0

	if (CAN_1_RES == ENABLED)
		DIGITAL_IO_SetOutputHigh (&CAN_1_RES_CTRL);
 80053b0:	4801      	ldr	r0, [pc, #4]	; (80053b8 <CAN1_INIT+0xc>)
 80053b2:	f7ff ffeb 	bl	800538c <DIGITAL_IO_SetOutputHigh>

	else
		DIGITAL_IO_SetOutputLow (&CAN_1_RES_CTRL);

}
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	080068cc 	.word	0x080068cc

080053bc <Task_CAN_1_Transmit>:

void Task_CAN_1_Transmit()
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	af00      	add	r7, sp, #0
	while(1){

	T_Oil.CAN_Data[0] = (uint8_t)T_Oil.UnitValue;
 80053c0:	4b36      	ldr	r3, [pc, #216]	; (800549c <Task_CAN_1_Transmit+0xe0>)
 80053c2:	8adb      	ldrh	r3, [r3, #22]
 80053c4:	b2da      	uxtb	r2, r3
 80053c6:	4b35      	ldr	r3, [pc, #212]	; (800549c <Task_CAN_1_Transmit+0xe0>)
 80053c8:	761a      	strb	r2, [r3, #24]
	T_Water.CAN_Data[0] = (uint8_t)T_Water.UnitValue;
 80053ca:	4b35      	ldr	r3, [pc, #212]	; (80054a0 <Task_CAN_1_Transmit+0xe4>)
 80053cc:	8adb      	ldrh	r3, [r3, #22]
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	4b33      	ldr	r3, [pc, #204]	; (80054a0 <Task_CAN_1_Transmit+0xe4>)
 80053d2:	761a      	strb	r2, [r3, #24]
	T_Board.CAN_Data[0] = (uint8_t)T_Board.UnitValue;
 80053d4:	4b33      	ldr	r3, [pc, #204]	; (80054a4 <Task_CAN_1_Transmit+0xe8>)
 80053d6:	8adb      	ldrh	r3, [r3, #22]
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	4b32      	ldr	r3, [pc, #200]	; (80054a4 <Task_CAN_1_Transmit+0xe8>)
 80053dc:	761a      	strb	r2, [r3, #24]
	p_Oil.CAN_Data[0] = (uint8_t)p_Oil.UnitValue;
 80053de:	4b32      	ldr	r3, [pc, #200]	; (80054a8 <Task_CAN_1_Transmit+0xec>)
 80053e0:	8adb      	ldrh	r3, [r3, #22]
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	4b30      	ldr	r3, [pc, #192]	; (80054a8 <Task_CAN_1_Transmit+0xec>)
 80053e6:	761a      	strb	r2, [r3, #24]
	p_Pneu.CAN_Data[0] = (uint8_t)p_Pneu.UnitValue;
 80053e8:	4b30      	ldr	r3, [pc, #192]	; (80054ac <Task_CAN_1_Transmit+0xf0>)
 80053ea:	8adb      	ldrh	r3, [r3, #22]
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	4b2f      	ldr	r3, [pc, #188]	; (80054ac <Task_CAN_1_Transmit+0xf0>)
 80053f0:	761a      	strb	r2, [r3, #24]
	x_RH_RL.CAN_Data[0] = (uint8_t)x_RH_RL.UnitValue;
 80053f2:	4b2f      	ldr	r3, [pc, #188]	; (80054b0 <Task_CAN_1_Transmit+0xf4>)
 80053f4:	8adb      	ldrh	r3, [r3, #22]
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	4b2d      	ldr	r3, [pc, #180]	; (80054b0 <Task_CAN_1_Transmit+0xf4>)
 80053fa:	761a      	strb	r2, [r3, #24]
	x_RH_RR.CAN_Data[0] = (uint8_t)x_RH_RR.UnitValue;
 80053fc:	4b2d      	ldr	r3, [pc, #180]	; (80054b4 <Task_CAN_1_Transmit+0xf8>)
 80053fe:	8adb      	ldrh	r3, [r3, #22]
 8005400:	b2da      	uxtb	r2, r3
 8005402:	4b2c      	ldr	r3, [pc, #176]	; (80054b4 <Task_CAN_1_Transmit+0xf8>)
 8005404:	761a      	strb	r2, [r3, #24]
	u_12V_Meas.CAN_Data[0] = (uint8_t)u_12V_Meas.UnitValue;
 8005406:	4b2c      	ldr	r3, [pc, #176]	; (80054b8 <Task_CAN_1_Transmit+0xfc>)
 8005408:	8adb      	ldrh	r3, [r3, #22]
 800540a:	b2da      	uxtb	r2, r3
 800540c:	4b2a      	ldr	r3, [pc, #168]	; (80054b8 <Task_CAN_1_Transmit+0xfc>)
 800540e:	761a      	strb	r2, [r3, #24]
	u_5V_ANA_Meas.CAN_Data[0] = (uint8_t)u_5V_ANA_Meas.UnitValue;
 8005410:	4b2a      	ldr	r3, [pc, #168]	; (80054bc <Task_CAN_1_Transmit+0x100>)
 8005412:	8adb      	ldrh	r3, [r3, #22]
 8005414:	b2da      	uxtb	r2, r3
 8005416:	4b29      	ldr	r3, [pc, #164]	; (80054bc <Task_CAN_1_Transmit+0x100>)
 8005418:	761a      	strb	r2, [r3, #24]
	u_OUT1_Meas.CAN_Data[0] = (uint8_t)u_OUT1_Meas.UnitValue;
 800541a:	4b29      	ldr	r3, [pc, #164]	; (80054c0 <Task_CAN_1_Transmit+0x104>)
 800541c:	8adb      	ldrh	r3, [r3, #22]
 800541e:	b2da      	uxtb	r2, r3
 8005420:	4b27      	ldr	r3, [pc, #156]	; (80054c0 <Task_CAN_1_Transmit+0x104>)
 8005422:	761a      	strb	r2, [r3, #24]
	u_OUT2_Meas.CAN_Data[0] = (uint8_t)u_OUT2_Meas.UnitValue;
 8005424:	4b27      	ldr	r3, [pc, #156]	; (80054c4 <Task_CAN_1_Transmit+0x108>)
 8005426:	8adb      	ldrh	r3, [r3, #22]
 8005428:	b2da      	uxtb	r2, r3
 800542a:	4b26      	ldr	r3, [pc, #152]	; (80054c4 <Task_CAN_1_Transmit+0x108>)
 800542c:	761a      	strb	r2, [r3, #24]


	//Measuremenet 0x7E1 LM01
	CAN1_data_Tx_LM01[0] = p_Pneu.CAN_Data[0];
 800542e:	4b1f      	ldr	r3, [pc, #124]	; (80054ac <Task_CAN_1_Transmit+0xf0>)
 8005430:	7e1a      	ldrb	r2, [r3, #24]
 8005432:	4b25      	ldr	r3, [pc, #148]	; (80054c8 <Task_CAN_1_Transmit+0x10c>)
 8005434:	701a      	strb	r2, [r3, #0]
	CAN1_data_Tx_LM01[1] = x_RH_RL.CAN_Data[0];
 8005436:	4b1e      	ldr	r3, [pc, #120]	; (80054b0 <Task_CAN_1_Transmit+0xf4>)
 8005438:	7e1a      	ldrb	r2, [r3, #24]
 800543a:	4b23      	ldr	r3, [pc, #140]	; (80054c8 <Task_CAN_1_Transmit+0x10c>)
 800543c:	705a      	strb	r2, [r3, #1]
	CAN1_data_Tx_LM01[2] = x_RH_RR.CAN_Data[0];
 800543e:	4b1d      	ldr	r3, [pc, #116]	; (80054b4 <Task_CAN_1_Transmit+0xf8>)
 8005440:	7e1a      	ldrb	r2, [r3, #24]
 8005442:	4b21      	ldr	r3, [pc, #132]	; (80054c8 <Task_CAN_1_Transmit+0x10c>)
 8005444:	709a      	strb	r2, [r3, #2]
	CAN1_data_Tx_LM01[3] = T_Water.CAN_Data[0];
 8005446:	4b16      	ldr	r3, [pc, #88]	; (80054a0 <Task_CAN_1_Transmit+0xe4>)
 8005448:	7e1a      	ldrb	r2, [r3, #24]
 800544a:	4b1f      	ldr	r3, [pc, #124]	; (80054c8 <Task_CAN_1_Transmit+0x10c>)
 800544c:	70da      	strb	r2, [r3, #3]
	CAN1_data_Tx_LM01[4] = p_Oil.CAN_Data[0];
 800544e:	4b16      	ldr	r3, [pc, #88]	; (80054a8 <Task_CAN_1_Transmit+0xec>)
 8005450:	7e1a      	ldrb	r2, [r3, #24]
 8005452:	4b1d      	ldr	r3, [pc, #116]	; (80054c8 <Task_CAN_1_Transmit+0x10c>)
 8005454:	711a      	strb	r2, [r3, #4]
	CAN1_data_Tx_LM01[5] = T_Oil.CAN_Data[0];
 8005456:	4b11      	ldr	r3, [pc, #68]	; (800549c <Task_CAN_1_Transmit+0xe0>)
 8005458:	7e1a      	ldrb	r2, [r3, #24]
 800545a:	4b1b      	ldr	r3, [pc, #108]	; (80054c8 <Task_CAN_1_Transmit+0x10c>)
 800545c:	715a      	strb	r2, [r3, #5]
	CAN1_data_Tx_LM01[6] = T_Board.CAN_Data[0];
 800545e:	4b11      	ldr	r3, [pc, #68]	; (80054a4 <Task_CAN_1_Transmit+0xe8>)
 8005460:	7e1a      	ldrb	r2, [r3, #24]
 8005462:	4b19      	ldr	r3, [pc, #100]	; (80054c8 <Task_CAN_1_Transmit+0x10c>)
 8005464:	719a      	strb	r2, [r3, #6]
	CAN1_data_Tx_LM01[7] = u_12V_Meas.CAN_Data[0];
 8005466:	4b14      	ldr	r3, [pc, #80]	; (80054b8 <Task_CAN_1_Transmit+0xfc>)
 8005468:	7e1a      	ldrb	r2, [r3, #24]
 800546a:	4b17      	ldr	r3, [pc, #92]	; (80054c8 <Task_CAN_1_Transmit+0x10c>)
 800546c:	71da      	strb	r2, [r3, #7]

	CAN_NODE_MO_UpdateData(&CAN_1_LMO_01_Config, CAN1_data_Tx_LM01);
 800546e:	4817      	ldr	r0, [pc, #92]	; (80054cc <Task_CAN_1_Transmit+0x110>)
 8005470:	4915      	ldr	r1, [pc, #84]	; (80054c8 <Task_CAN_1_Transmit+0x10c>)
 8005472:	f7ff fa11 	bl	8004898 <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit(&CAN_1_LMO_01_Config);
 8005476:	4815      	ldr	r0, [pc, #84]	; (80054cc <Task_CAN_1_Transmit+0x110>)
 8005478:	f7ff f9ea 	bl	8004850 <CAN_NODE_MO_Transmit>

	vTaskDelay(pdMS_TO_TICKS(delay_for_CAN1_Transmit));
 800547c:	4b14      	ldr	r3, [pc, #80]	; (80054d0 <Task_CAN_1_Transmit+0x114>)
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	461a      	mov	r2, r3
 8005482:	f242 7310 	movw	r3, #10000	; 0x2710
 8005486:	fb03 f302 	mul.w	r3, r3, r2
 800548a:	4a12      	ldr	r2, [pc, #72]	; (80054d4 <Task_CAN_1_Transmit+0x118>)
 800548c:	fba2 2303 	umull	r2, r3, r2, r3
 8005490:	099b      	lsrs	r3, r3, #6
 8005492:	4618      	mov	r0, r3
 8005494:	f7fd ff56 	bl	8003344 <vTaskDelay>
	}
 8005498:	e792      	b.n	80053c0 <Task_CAN_1_Transmit+0x4>
 800549a:	bf00      	nop
 800549c:	200007bc 	.word	0x200007bc
 80054a0:	20000814 	.word	0x20000814
 80054a4:	20000684 	.word	0x20000684
 80054a8:	20000708 	.word	0x20000708
 80054ac:	200006b0 	.word	0x200006b0
 80054b0:	2000062c 	.word	0x2000062c
 80054b4:	20000600 	.word	0x20000600
 80054b8:	200007e8 	.word	0x200007e8
 80054bc:	20000760 	.word	0x20000760
 80054c0:	20000734 	.word	0x20000734
 80054c4:	2000086c 	.word	0x2000086c
 80054c8:	2000057c 	.word	0x2000057c
 80054cc:	08006a20 	.word	0x08006a20
 80054d0:	2000036c 	.word	0x2000036c
 80054d4:	10624dd3 	.word	0x10624dd3

080054d8 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	460b      	mov	r3, r1
 80054e2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 80054e4:	78fb      	ldrb	r3, [r7, #3]
 80054e6:	2201      	movs	r2, #1
 80054e8:	409a      	lsls	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	605a      	str	r2, [r3, #4]
}
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	460b      	mov	r3, r1
 8005502:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8005504:	78fb      	ldrb	r3, [r7, #3]
 8005506:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800550a:	409a      	lsls	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	605a      	str	r2, [r3, #4]
}
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop

0800551c <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	7c1b      	ldrb	r3, [r3, #16]
 800552c:	4610      	mov	r0, r2
 800552e:	4619      	mov	r1, r3
 8005530:	f7ff ffd2 	bl	80054d8 <XMC_GPIO_SetOutputHigh>
}
 8005534:	3708      	adds	r7, #8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop

0800553c <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	7c1b      	ldrb	r3, [r3, #16]
 800554c:	4610      	mov	r0, r2
 800554e:	4619      	mov	r1, r3
 8005550:	f7ff ffd2 	bl	80054f8 <XMC_GPIO_SetOutputLow>
}
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop

0800555c <CAN2_INIT>:

uint8_t delay_for_CAN2_Transmit = 5; //ms
uint8_t delay_for_CAN2_Receive = 1; //ms

void CAN2_INIT()
{
 800555c:	b580      	push	{r7, lr}
 800555e:	af00      	add	r7, sp, #0

	if (CAN_2_RES == ENABLED)
		DIGITAL_IO_SetOutputHigh (&CAN_2_RES_CTRL);
 8005560:	4801      	ldr	r0, [pc, #4]	; (8005568 <CAN2_INIT+0xc>)
 8005562:	f7ff ffdb 	bl	800551c <DIGITAL_IO_SetOutputHigh>

	else
		DIGITAL_IO_SetOutputLow (&CAN_2_RES_CTRL);

}
 8005566:	bd80      	pop	{r7, pc}
 8005568:	080068b8 	.word	0x080068b8

0800556c <Task_CAN_2_Receive>:

void Task_CAN_2_Receive()
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
	uint8_t Brake_Light_Value=0;
 8005572:	2300      	movs	r3, #0
 8005574:	71fb      	strb	r3, [r7, #7]

	while(1){

	//------VCU 0x7E2------
	CAN_NODE_MO_Receive((CAN_NODE_LMO_t*)&CAN_2_LMO_02_Config);
 8005576:	4810      	ldr	r0, [pc, #64]	; (80055b8 <Task_CAN_2_Receive+0x4c>)
 8005578:	f7ff f97c 	bl	8004874 <CAN_NODE_MO_Receive>

	Brake_Light_Value = CAN_2_LMO_02_Config.mo_ptr->can_data_byte[0];
 800557c:	4b0e      	ldr	r3, [pc, #56]	; (80055b8 <Task_CAN_2_Receive+0x4c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	7c1b      	ldrb	r3, [r3, #16]
 8005582:	71fb      	strb	r3, [r7, #7]

	if(Brake_Light_Value==0x80){
 8005584:	79fb      	ldrb	r3, [r7, #7]
 8005586:	2b80      	cmp	r3, #128	; 0x80
 8005588:	d103      	bne.n	8005592 <Task_CAN_2_Receive+0x26>
		DIGITAL_IO_SetOutputHigh (&Brake_Light);
 800558a:	480c      	ldr	r0, [pc, #48]	; (80055bc <Task_CAN_2_Receive+0x50>)
 800558c:	f7ff ffc6 	bl	800551c <DIGITAL_IO_SetOutputHigh>
 8005590:	e002      	b.n	8005598 <Task_CAN_2_Receive+0x2c>
	}
	else{
		DIGITAL_IO_SetOutputLow (&Brake_Light);
 8005592:	480a      	ldr	r0, [pc, #40]	; (80055bc <Task_CAN_2_Receive+0x50>)
 8005594:	f7ff ffd2 	bl	800553c <DIGITAL_IO_SetOutputLow>
	}
	vTaskDelay(pdMS_TO_TICKS(delay_for_CAN2_Receive));
 8005598:	4b09      	ldr	r3, [pc, #36]	; (80055c0 <Task_CAN_2_Receive+0x54>)
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	461a      	mov	r2, r3
 800559e:	f242 7310 	movw	r3, #10000	; 0x2710
 80055a2:	fb03 f302 	mul.w	r3, r3, r2
 80055a6:	4a07      	ldr	r2, [pc, #28]	; (80055c4 <Task_CAN_2_Receive+0x58>)
 80055a8:	fba2 2303 	umull	r2, r3, r2, r3
 80055ac:	099b      	lsrs	r3, r3, #6
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7fd fec8 	bl	8003344 <vTaskDelay>
	}
 80055b4:	e7df      	b.n	8005576 <Task_CAN_2_Receive+0xa>
 80055b6:	bf00      	nop
 80055b8:	08006940 	.word	0x08006940
 80055bc:	080068a4 	.word	0x080068a4
 80055c0:	2000036e 	.word	0x2000036e
 80055c4:	10624dd3 	.word	0x10624dd3

080055c8 <Task_CAN_2_Transmit>:
}

void Task_CAN_2_Transmit()
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
	u_5V_ANA_Meas.CAN_Data[0] = (uint8_t)u_5V_ANA_Meas.UnitValue;
	u_OUT1_Meas.CAN_Data[0] = (uint8_t)u_OUT1_Meas.UnitValue;
	u_OUT2_Meas.CAN_Data[0] = (uint8_t)u_OUT2_Meas.UnitValue;
	*/

	Buffer = (uint16_t)x_DP_RL.UnitValue;
 80055ce:	4b35      	ldr	r3, [pc, #212]	; (80056a4 <Task_CAN_2_Transmit+0xdc>)
 80055d0:	8adb      	ldrh	r3, [r3, #22]
 80055d2:	80fb      	strh	r3, [r7, #6]

	x_DP_RL.CAN_Data[0] = Buffer&0xFF;
 80055d4:	88fb      	ldrh	r3, [r7, #6]
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	4b32      	ldr	r3, [pc, #200]	; (80056a4 <Task_CAN_2_Transmit+0xdc>)
 80055da:	761a      	strb	r2, [r3, #24]
	x_DP_RL.CAN_Data[1] = (Buffer>>8)&0xFF;
 80055dc:	88fb      	ldrh	r3, [r7, #6]
 80055de:	0a1b      	lsrs	r3, r3, #8
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	4b2f      	ldr	r3, [pc, #188]	; (80056a4 <Task_CAN_2_Transmit+0xdc>)
 80055e6:	765a      	strb	r2, [r3, #25]

	Buffer = (uint16_t)x_DP_RR.UnitValue;
 80055e8:	4b2f      	ldr	r3, [pc, #188]	; (80056a8 <Task_CAN_2_Transmit+0xe0>)
 80055ea:	8adb      	ldrh	r3, [r3, #22]
 80055ec:	80fb      	strh	r3, [r7, #6]

	x_DP_RR.CAN_Data[0] = Buffer&0xFF;
 80055ee:	88fb      	ldrh	r3, [r7, #6]
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	4b2d      	ldr	r3, [pc, #180]	; (80056a8 <Task_CAN_2_Transmit+0xe0>)
 80055f4:	761a      	strb	r2, [r3, #24]
	x_DP_RR.CAN_Data[1] = (Buffer>>8)&0xFF;
 80055f6:	88fb      	ldrh	r3, [r7, #6]
 80055f8:	0a1b      	lsrs	r3, r3, #8
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	4b2a      	ldr	r3, [pc, #168]	; (80056a8 <Task_CAN_2_Transmit+0xe0>)
 8005600:	765a      	strb	r2, [r3, #25]

	Buffer = (uint16_t)f_LC_RL.UnitValue;
 8005602:	4b2a      	ldr	r3, [pc, #168]	; (80056ac <Task_CAN_2_Transmit+0xe4>)
 8005604:	8adb      	ldrh	r3, [r3, #22]
 8005606:	80fb      	strh	r3, [r7, #6]

	f_LC_RL.CAN_Data[0] = Buffer&0xFF;
 8005608:	88fb      	ldrh	r3, [r7, #6]
 800560a:	b2da      	uxtb	r2, r3
 800560c:	4b27      	ldr	r3, [pc, #156]	; (80056ac <Task_CAN_2_Transmit+0xe4>)
 800560e:	761a      	strb	r2, [r3, #24]
	f_LC_RL.CAN_Data[1] = (Buffer>>8)&0xFF;
 8005610:	88fb      	ldrh	r3, [r7, #6]
 8005612:	0a1b      	lsrs	r3, r3, #8
 8005614:	b29b      	uxth	r3, r3
 8005616:	b2da      	uxtb	r2, r3
 8005618:	4b24      	ldr	r3, [pc, #144]	; (80056ac <Task_CAN_2_Transmit+0xe4>)
 800561a:	765a      	strb	r2, [r3, #25]

	Buffer = (uint16_t)f_LC_RR.UnitValue;
 800561c:	4b24      	ldr	r3, [pc, #144]	; (80056b0 <Task_CAN_2_Transmit+0xe8>)
 800561e:	8adb      	ldrh	r3, [r3, #22]
 8005620:	80fb      	strh	r3, [r7, #6]

	f_LC_RR.CAN_Data[0] = Buffer&0xFF;
 8005622:	88fb      	ldrh	r3, [r7, #6]
 8005624:	b2da      	uxtb	r2, r3
 8005626:	4b22      	ldr	r3, [pc, #136]	; (80056b0 <Task_CAN_2_Transmit+0xe8>)
 8005628:	761a      	strb	r2, [r3, #24]
	f_LC_RR.CAN_Data[1] = (Buffer>>8)&0xFF;
 800562a:	88fb      	ldrh	r3, [r7, #6]
 800562c:	0a1b      	lsrs	r3, r3, #8
 800562e:	b29b      	uxth	r3, r3
 8005630:	b2da      	uxtb	r2, r3
 8005632:	4b1f      	ldr	r3, [pc, #124]	; (80056b0 <Task_CAN_2_Transmit+0xe8>)
 8005634:	765a      	strb	r2, [r3, #25]
	CAN_NODE_MO_UpdateData(&CAN_2_LMO_01_Config, CAN2_data_Tx_LM01);
	CAN_NODE_MO_Transmit(&CAN_2_LMO_01_Config);
	*/

	//WheelForce 0x7DF LM01
	CAN2_data_Tx_LM01[0] = f_LC_RL.CAN_Data[0];
 8005636:	4b1d      	ldr	r3, [pc, #116]	; (80056ac <Task_CAN_2_Transmit+0xe4>)
 8005638:	7e1a      	ldrb	r2, [r3, #24]
 800563a:	4b1e      	ldr	r3, [pc, #120]	; (80056b4 <Task_CAN_2_Transmit+0xec>)
 800563c:	701a      	strb	r2, [r3, #0]
	CAN2_data_Tx_LM01[1] = f_LC_RL.CAN_Data[1];
 800563e:	4b1b      	ldr	r3, [pc, #108]	; (80056ac <Task_CAN_2_Transmit+0xe4>)
 8005640:	7e5a      	ldrb	r2, [r3, #25]
 8005642:	4b1c      	ldr	r3, [pc, #112]	; (80056b4 <Task_CAN_2_Transmit+0xec>)
 8005644:	705a      	strb	r2, [r3, #1]
	CAN2_data_Tx_LM01[2] = f_LC_RR.CAN_Data[0];
 8005646:	4b1a      	ldr	r3, [pc, #104]	; (80056b0 <Task_CAN_2_Transmit+0xe8>)
 8005648:	7e1a      	ldrb	r2, [r3, #24]
 800564a:	4b1a      	ldr	r3, [pc, #104]	; (80056b4 <Task_CAN_2_Transmit+0xec>)
 800564c:	709a      	strb	r2, [r3, #2]
	CAN2_data_Tx_LM01[3] = f_LC_RR.CAN_Data[1];
 800564e:	4b18      	ldr	r3, [pc, #96]	; (80056b0 <Task_CAN_2_Transmit+0xe8>)
 8005650:	7e5a      	ldrb	r2, [r3, #25]
 8005652:	4b18      	ldr	r3, [pc, #96]	; (80056b4 <Task_CAN_2_Transmit+0xec>)
 8005654:	70da      	strb	r2, [r3, #3]
	CAN2_data_Tx_LM01[4] = x_DP_RL.CAN_Data[0];
 8005656:	4b13      	ldr	r3, [pc, #76]	; (80056a4 <Task_CAN_2_Transmit+0xdc>)
 8005658:	7e1a      	ldrb	r2, [r3, #24]
 800565a:	4b16      	ldr	r3, [pc, #88]	; (80056b4 <Task_CAN_2_Transmit+0xec>)
 800565c:	711a      	strb	r2, [r3, #4]
	CAN2_data_Tx_LM01[5] = x_DP_RL.CAN_Data[1];
 800565e:	4b11      	ldr	r3, [pc, #68]	; (80056a4 <Task_CAN_2_Transmit+0xdc>)
 8005660:	7e5a      	ldrb	r2, [r3, #25]
 8005662:	4b14      	ldr	r3, [pc, #80]	; (80056b4 <Task_CAN_2_Transmit+0xec>)
 8005664:	715a      	strb	r2, [r3, #5]
	CAN2_data_Tx_LM01[6] = x_DP_RR.CAN_Data[0];
 8005666:	4b10      	ldr	r3, [pc, #64]	; (80056a8 <Task_CAN_2_Transmit+0xe0>)
 8005668:	7e1a      	ldrb	r2, [r3, #24]
 800566a:	4b12      	ldr	r3, [pc, #72]	; (80056b4 <Task_CAN_2_Transmit+0xec>)
 800566c:	719a      	strb	r2, [r3, #6]
	CAN2_data_Tx_LM01[7] = x_DP_RR.CAN_Data[1];
 800566e:	4b0e      	ldr	r3, [pc, #56]	; (80056a8 <Task_CAN_2_Transmit+0xe0>)
 8005670:	7e5a      	ldrb	r2, [r3, #25]
 8005672:	4b10      	ldr	r3, [pc, #64]	; (80056b4 <Task_CAN_2_Transmit+0xec>)
 8005674:	71da      	strb	r2, [r3, #7]

	CAN_NODE_MO_UpdateData(&CAN_2_LMO_01_Config, CAN2_data_Tx_LM01);
 8005676:	4810      	ldr	r0, [pc, #64]	; (80056b8 <Task_CAN_2_Transmit+0xf0>)
 8005678:	490e      	ldr	r1, [pc, #56]	; (80056b4 <Task_CAN_2_Transmit+0xec>)
 800567a:	f7ff f90d 	bl	8004898 <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit(&CAN_2_LMO_01_Config);
 800567e:	480e      	ldr	r0, [pc, #56]	; (80056b8 <Task_CAN_2_Transmit+0xf0>)
 8005680:	f7ff f8e6 	bl	8004850 <CAN_NODE_MO_Transmit>

	vTaskDelay(pdMS_TO_TICKS(delay_for_CAN2_Transmit));
 8005684:	4b0d      	ldr	r3, [pc, #52]	; (80056bc <Task_CAN_2_Transmit+0xf4>)
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	461a      	mov	r2, r3
 800568a:	f242 7310 	movw	r3, #10000	; 0x2710
 800568e:	fb03 f302 	mul.w	r3, r3, r2
 8005692:	4a0b      	ldr	r2, [pc, #44]	; (80056c0 <Task_CAN_2_Transmit+0xf8>)
 8005694:	fba2 2303 	umull	r2, r3, r2, r3
 8005698:	099b      	lsrs	r3, r3, #6
 800569a:	4618      	mov	r0, r3
 800569c:	f7fd fe52 	bl	8003344 <vTaskDelay>
	}
 80056a0:	e795      	b.n	80055ce <Task_CAN_2_Transmit+0x6>
 80056a2:	bf00      	nop
 80056a4:	20000840 	.word	0x20000840
 80056a8:	20000658 	.word	0x20000658
 80056ac:	200005d4 	.word	0x200005d4
 80056b0:	200006dc 	.word	0x200006dc
 80056b4:	20000584 	.word	0x20000584
 80056b8:	08006934 	.word	0x08006934
 80056bc:	2000036d 	.word	0x2000036d
 80056c0:	10624dd3 	.word	0x10624dd3
 80056c4:	00000000 	.word	0x00000000

080056c8 <Low_Pass_Filter>:
//https://en.wikipedia.org/wiki/Low-pass_filter#Simple_infinite_impulse_response_filter



void Low_Pass_Filter(Analog_Sensor_t *const Sensor)
{
 80056c8:	b5b0      	push	{r4, r5, r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]

	Sensor->FilteredValue = alpha * Sensor->Value + (1-alpha) * Sensor->FilteredValue_old;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	881b      	ldrh	r3, [r3, #0]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 fcb3 	bl	8006040 <__aeabi_i2d>
 80056da:	4602      	mov	r2, r0
 80056dc:	460b      	mov	r3, r1
 80056de:	4610      	mov	r0, r2
 80056e0:	4619      	mov	r1, r3
 80056e2:	a319      	add	r3, pc, #100	; (adr r3, 8005748 <Low_Pass_Filter+0x80>)
 80056e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e8:	f000 fd10 	bl	800610c <__aeabi_dmul>
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	4614      	mov	r4, r2
 80056f2:	461d      	mov	r5, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f000 fc91 	bl	8006020 <__aeabi_ui2d>
 80056fe:	4602      	mov	r2, r0
 8005700:	460b      	mov	r3, r1
 8005702:	4610      	mov	r0, r2
 8005704:	4619      	mov	r1, r3
 8005706:	a312      	add	r3, pc, #72	; (adr r3, 8005750 <Low_Pass_Filter+0x88>)
 8005708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570c:	f000 fcfe 	bl	800610c <__aeabi_dmul>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	4620      	mov	r0, r4
 8005716:	4629      	mov	r1, r5
 8005718:	f000 fb46 	bl	8005da8 <__adddf3>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	4610      	mov	r0, r2
 8005722:	4619      	mov	r1, r3
 8005724:	f000 ff24 	bl	8006570 <__aeabi_d2f>
 8005728:	4602      	mov	r2, r0
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	605a      	str	r2, [r3, #4]

	Sensor->FilteredValue_old = Sensor->FilteredValue;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	edd3 7a01 	vldr	s15, [r3, #4]
 8005734:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005738:	ee17 2a90 	vmov	r2, s15
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	609a      	str	r2, [r3, #8]

}
 8005740:	3708      	adds	r7, #8
 8005742:	46bd      	mov	sp, r7
 8005744:	bdb0      	pop	{r4, r5, r7, pc}
 8005746:	bf00      	nop
 8005748:	cccccccd 	.word	0xcccccccd
 800574c:	3feccccc 	.word	0x3feccccc
 8005750:	99999998 	.word	0x99999998
 8005754:	3fb99999 	.word	0x3fb99999

08005758 <Powercycle_Calibration>:
 */
#include "Header.h"
#include "ANA_Init.h"

void Powercycle_Calibration(Analog_Sensor_t *const Sensor)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
	if(Sensor->Type == Linear)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d103      	bne.n	8005772 <Powercycle_Calibration+0x1a>
		Sensor->Offset = 0;				//no powercycle calibration
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	845a      	strh	r2, [r3, #34]	; 0x22
 8005770:	e01a      	b.n	80057a8 <Powercycle_Calibration+0x50>

	else if(Sensor->Type == Pressure)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005778:	2b03      	cmp	r3, #3
 800577a:	d103      	bne.n	8005784 <Powercycle_Calibration+0x2c>
		Sensor->Offset = 0;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	845a      	strh	r2, [r3, #34]	; 0x22
 8005782:	e011      	b.n	80057a8 <Powercycle_Calibration+0x50>

	else if(Sensor->Type == RideHeight)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 3020 	ldrb.w	r3, [r3, #32]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d109      	bne.n	80057a2 <Powercycle_Calibration+0x4a>
		Sensor->Offset = ADC_MEASUREMENT_GetResult(Sensor->Channel);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	4618      	mov	r0, r3
 8005794:	f7ff fae0 	bl	8004d58 <ADC_MEASUREMENT_GetResult>
 8005798:	4603      	mov	r3, r0
 800579a:	461a      	mov	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	845a      	strh	r2, [r3, #34]	; 0x22
 80057a0:	e002      	b.n	80057a8 <Powercycle_Calibration+0x50>

	else
		Sensor->Offset = 0;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	845a      	strh	r2, [r3, #34]	; 0x22

}
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop

080057b0 <UnitConversion>:
#include "ANA_Init.h"

#define NTC_LUT_NB_POINT 6

void UnitConversion(Analog_Sensor_t *const Sensor)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b096      	sub	sp, #88	; 0x58
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
	if(Sensor->Type == Linear)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d12b      	bne.n	800581a <UnitConversion+0x6a>
		Sensor->UnitValue = ((Sensor->FilteredValue - Sensor->Offset) * 8.0018 + 32768); //  !!!!!!!!!!!!
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80057cc:	ee07 3a90 	vmov	s15, r3
 80057d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057d8:	ee17 0a90 	vmov	r0, s15
 80057dc:	f000 fc42 	bl	8006064 <__aeabi_f2d>
 80057e0:	4602      	mov	r2, r0
 80057e2:	460b      	mov	r3, r1
 80057e4:	4610      	mov	r0, r2
 80057e6:	4619      	mov	r1, r3
 80057e8:	a3b9      	add	r3, pc, #740	; (adr r3, 8005ad0 <UnitConversion+0x320>)
 80057ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ee:	f000 fc8d 	bl	800610c <__aeabi_dmul>
 80057f2:	4602      	mov	r2, r0
 80057f4:	460b      	mov	r3, r1
 80057f6:	4610      	mov	r0, r2
 80057f8:	4619      	mov	r1, r3
 80057fa:	f04f 0200 	mov.w	r2, #0
 80057fe:	4ba8      	ldr	r3, [pc, #672]	; (8005aa0 <UnitConversion+0x2f0>)
 8005800:	f000 fad2 	bl	8005da8 <__adddf3>
 8005804:	4602      	mov	r2, r0
 8005806:	460b      	mov	r3, r1
 8005808:	4610      	mov	r0, r2
 800580a:	4619      	mov	r1, r3
 800580c:	f000 fe90 	bl	8006530 <__aeabi_d2uiz>
 8005810:	4603      	mov	r3, r0
 8005812:	b29a      	uxth	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	82da      	strh	r2, [r3, #22]
 8005818:	e235      	b.n	8005c86 <UnitConversion+0x4d6>

	else if(Sensor->Type == RideHeight)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d12d      	bne.n	8005880 <UnitConversion+0xd0>
		Sensor->UnitValue = (Sensor->k * ((Sensor->FilteredValue-Sensor->Offset) * Sensor->InputVoltage*1000 / 4095)+128); // mm !!!!!!!!!
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	edd3 6a01 	vldr	s13, [r3, #4]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005834:	ee07 3a90 	vmov	s15, r3
 8005838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800583c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005846:	ee07 3a90 	vmov	s15, r3
 800584a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800584e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005852:	eddf 6a94 	vldr	s13, [pc, #592]	; 8005aa4 <UnitConversion+0x2f4>
 8005856:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800585a:	eddf 6a93 	vldr	s13, [pc, #588]	; 8005aa8 <UnitConversion+0x2f8>
 800585e:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 8005862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005866:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8005aac <UnitConversion+0x2fc>
 800586a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800586e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005872:	edc7 7a00 	vstr	s15, [r7]
 8005876:	883b      	ldrh	r3, [r7, #0]
 8005878:	b29a      	uxth	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	82da      	strh	r2, [r3, #22]
 800587e:	e202      	b.n	8005c86 <UnitConversion+0x4d6>

	else if(Sensor->Type == Pressure)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005886:	2b03      	cmp	r3, #3
 8005888:	d135      	bne.n	80058f6 <UnitConversion+0x146>
		Sensor->UnitValue = (Sensor->k * (Sensor->FilteredValue * Sensor->InputVoltage / 4095) - (2.5/4.5) )/0.04; // Bar/0.04 !!!!!!!
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	edd3 6a01 	vldr	s13, [r3, #4]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800589c:	ee07 3a90 	vmov	s15, r3
 80058a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058a8:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8005aa8 <UnitConversion+0x2f8>
 80058ac:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 80058b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058b4:	ee17 0a90 	vmov	r0, s15
 80058b8:	f000 fbd4 	bl	8006064 <__aeabi_f2d>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	4610      	mov	r0, r2
 80058c2:	4619      	mov	r1, r3
 80058c4:	a372      	add	r3, pc, #456	; (adr r3, 8005a90 <UnitConversion+0x2e0>)
 80058c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ca:	f000 fa6b 	bl	8005da4 <__aeabi_dsub>
 80058ce:	4602      	mov	r2, r0
 80058d0:	460b      	mov	r3, r1
 80058d2:	4610      	mov	r0, r2
 80058d4:	4619      	mov	r1, r3
 80058d6:	a370      	add	r3, pc, #448	; (adr r3, 8005a98 <UnitConversion+0x2e8>)
 80058d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058dc:	f000 fd40 	bl	8006360 <__aeabi_ddiv>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4610      	mov	r0, r2
 80058e6:	4619      	mov	r1, r3
 80058e8:	f000 fe22 	bl	8006530 <__aeabi_d2uiz>
 80058ec:	4603      	mov	r3, r0
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	82da      	strh	r2, [r3, #22]
 80058f4:	e1c7      	b.n	8005c86 <UnitConversion+0x4d6>

	else if((Sensor->Type == NTC)||(Sensor->Type == NTC_Board))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d005      	beq.n	800590c <UnitConversion+0x15c>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005906:	2b06      	cmp	r3, #6
 8005908:	f040 8145 	bne.w	8005b96 <UnitConversion+0x3e6>
	{
		int i;
		uint16_t Temp_Val;
		float x0,y0,x1,y1,a,b;
		uint32_t LUT_NTC_V[6]={0};
 800590c:	f107 0320 	add.w	r3, r7, #32
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	3304      	adds	r3, #4
 8005916:	2200      	movs	r2, #0
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	3304      	adds	r3, #4
 800591c:	2200      	movs	r2, #0
 800591e:	601a      	str	r2, [r3, #0]
 8005920:	3304      	adds	r3, #4
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	3304      	adds	r3, #4
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	3304      	adds	r3, #4
 800592e:	2200      	movs	r2, #0
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	3304      	adds	r3, #4
		float LUT_NTC[6]={0};
 8005934:	f107 0308 	add.w	r3, r7, #8
 8005938:	2200      	movs	r2, #0
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	3304      	adds	r3, #4
 800593e:	2200      	movs	r2, #0
 8005940:	601a      	str	r2, [r3, #0]
 8005942:	3304      	adds	r3, #4
 8005944:	2200      	movs	r2, #0
 8005946:	601a      	str	r2, [r3, #0]
 8005948:	3304      	adds	r3, #4
 800594a:	2200      	movs	r2, #0
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	3304      	adds	r3, #4
 8005950:	2200      	movs	r2, #0
 8005952:	601a      	str	r2, [r3, #0]
 8005954:	3304      	adds	r3, #4
 8005956:	2200      	movs	r2, #0
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	3304      	adds	r3, #4

		switch(Sensor->Type){
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005962:	2b02      	cmp	r3, #2
 8005964:	d002      	beq.n	800596c <UnitConversion+0x1bc>
 8005966:	2b06      	cmp	r3, #6
 8005968:	d020      	beq.n	80059ac <UnitConversion+0x1fc>
		LUT_NTC[4] = 25;
		LUT_NTC[5] = 0;
		break;

		default :
		break;
 800596a:	e03e      	b.n	80059ea <UnitConversion+0x23a>
		uint32_t LUT_NTC_V[6]={0};
		float LUT_NTC[6]={0};

		switch(Sensor->Type){
		case NTC:
	    LUT_NTC_V[0] = 481;
 800596c:	f240 13e1 	movw	r3, #481	; 0x1e1
 8005970:	623b      	str	r3, [r7, #32]
		LUT_NTC_V[1] = 997;
 8005972:	f240 33e5 	movw	r3, #997	; 0x3e5
 8005976:	627b      	str	r3, [r7, #36]	; 0x24
		LUT_NTC_V[2] = 1517;
 8005978:	f240 53ed 	movw	r3, #1517	; 0x5ed
 800597c:	62bb      	str	r3, [r7, #40]	; 0x28
		LUT_NTC_V[3] = 2243;
 800597e:	f640 03c3 	movw	r3, #2243	; 0x8c3
 8005982:	62fb      	str	r3, [r7, #44]	; 0x2c
		LUT_NTC_V[4] = 3333;
 8005984:	f640 5305 	movw	r3, #3333	; 0xd05
 8005988:	633b      	str	r3, [r7, #48]	; 0x30
		LUT_NTC_V[5] = 4248;
 800598a:	f241 0398 	movw	r3, #4248	; 0x1098
 800598e:	637b      	str	r3, [r7, #52]	; 0x34

	    LUT_NTC[0] = 125;
 8005990:	4b47      	ldr	r3, [pc, #284]	; (8005ab0 <UnitConversion+0x300>)
 8005992:	60bb      	str	r3, [r7, #8]
		LUT_NTC[1] = 90;
 8005994:	4b47      	ldr	r3, [pc, #284]	; (8005ab4 <UnitConversion+0x304>)
 8005996:	60fb      	str	r3, [r7, #12]
		LUT_NTC[2] = 70;
 8005998:	4b47      	ldr	r3, [pc, #284]	; (8005ab8 <UnitConversion+0x308>)
 800599a:	613b      	str	r3, [r7, #16]
		LUT_NTC[3] = 50;
 800599c:	4b47      	ldr	r3, [pc, #284]	; (8005abc <UnitConversion+0x30c>)
 800599e:	617b      	str	r3, [r7, #20]
		LUT_NTC[4] = 25;
 80059a0:	4b47      	ldr	r3, [pc, #284]	; (8005ac0 <UnitConversion+0x310>)
 80059a2:	61bb      	str	r3, [r7, #24]
		LUT_NTC[5] = 0;
 80059a4:	f04f 0300 	mov.w	r3, #0
 80059a8:	61fb      	str	r3, [r7, #28]
		break;
 80059aa:	e01e      	b.n	80059ea <UnitConversion+0x23a>

		case NTC_Board:
		LUT_NTC_V[0] = 140;
 80059ac:	238c      	movs	r3, #140	; 0x8c
 80059ae:	623b      	str	r3, [r7, #32]
		LUT_NTC_V[1] = 283;
 80059b0:	f240 131b 	movw	r3, #283	; 0x11b
 80059b4:	627b      	str	r3, [r7, #36]	; 0x24
		LUT_NTC_V[2] = 602;
 80059b6:	f240 235a 	movw	r3, #602	; 0x25a
 80059ba:	62bb      	str	r3, [r7, #40]	; 0x28
		LUT_NTC_V[3] = 1288;
 80059bc:	f44f 63a1 	mov.w	r3, #1288	; 0x508
 80059c0:	62fb      	str	r3, [r7, #44]	; 0x2c
		LUT_NTC_V[4] = 2500;
 80059c2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80059c6:	633b      	str	r3, [r7, #48]	; 0x30
		LUT_NTC_V[5] = 3850;
 80059c8:	f640 730a 	movw	r3, #3850	; 0xf0a
 80059cc:	637b      	str	r3, [r7, #52]	; 0x34

	    LUT_NTC[0] = 125;
 80059ce:	4b38      	ldr	r3, [pc, #224]	; (8005ab0 <UnitConversion+0x300>)
 80059d0:	60bb      	str	r3, [r7, #8]
		LUT_NTC[1] = 100;
 80059d2:	4b3c      	ldr	r3, [pc, #240]	; (8005ac4 <UnitConversion+0x314>)
 80059d4:	60fb      	str	r3, [r7, #12]
		LUT_NTC[2] = 75;
 80059d6:	4b3c      	ldr	r3, [pc, #240]	; (8005ac8 <UnitConversion+0x318>)
 80059d8:	613b      	str	r3, [r7, #16]
		LUT_NTC[3] = 50;
 80059da:	4b38      	ldr	r3, [pc, #224]	; (8005abc <UnitConversion+0x30c>)
 80059dc:	617b      	str	r3, [r7, #20]
		LUT_NTC[4] = 25;
 80059de:	4b38      	ldr	r3, [pc, #224]	; (8005ac0 <UnitConversion+0x310>)
 80059e0:	61bb      	str	r3, [r7, #24]
		LUT_NTC[5] = 0;
 80059e2:	f04f 0300 	mov.w	r3, #0
 80059e6:	61fb      	str	r3, [r7, #28]
		break;
 80059e8:	bf00      	nop

		default :
		break;
		}

		i=0;
 80059ea:	2300      	movs	r3, #0
 80059ec:	657b      	str	r3, [r7, #84]	; 0x54
		Temp_Val = ((Sensor->FilteredValue)*5000/4095);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80059f4:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8005acc <UnitConversion+0x31c>
 80059f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059fc:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005aa8 <UnitConversion+0x2f8>
 8005a00:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8005a04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a08:	edc7 7a00 	vstr	s15, [r7]
 8005a0c:	883b      	ldrh	r3, [r7, #0]
 8005a0e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			while(i<NTC_LUT_NB_POINT && LUT_NTC_V[i]<=Temp_Val) i++;
 8005a12:	e002      	b.n	8005a1a <UnitConversion+0x26a>
 8005a14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a16:	3301      	adds	r3, #1
 8005a18:	657b      	str	r3, [r7, #84]	; 0x54
 8005a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a1c:	2b05      	cmp	r3, #5
 8005a1e:	dc0a      	bgt.n	8005a36 <UnitConversion+0x286>
 8005a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005a28:	4413      	add	r3, r2
 8005a2a:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8005a2e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d9ee      	bls.n	8005a14 <UnitConversion+0x264>
		if(i==0){
 8005a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d112      	bne.n	8005a62 <UnitConversion+0x2b2>
			x0 = LUT_NTC_V[0];
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	ee07 3a90 	vmov	s15, r3
 8005a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a46:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
			y0 = LUT_NTC[0];
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
			x1 = LUT_NTC_V[1];
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	ee07 3a90 	vmov	s15, r3
 8005a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a58:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
			y1 = LUT_NTC[1];
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a60:	e066      	b.n	8005b30 <UnitConversion+0x380>
		}
		else if(i==NTC_LUT_NB_POINT){
 8005a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a64:	2b06      	cmp	r3, #6
 8005a66:	d137      	bne.n	8005ad8 <UnitConversion+0x328>
			x0 = LUT_NTC_V[NTC_LUT_NB_POINT-2];
 8005a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6a:	ee07 3a90 	vmov	s15, r3
 8005a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a72:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
			y0 = LUT_NTC[NTC_LUT_NB_POINT-2];
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	64fb      	str	r3, [r7, #76]	; 0x4c
			x1 = LUT_NTC_V[NTC_LUT_NB_POINT-1];
 8005a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a7c:	ee07 3a90 	vmov	s15, r3
 8005a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a84:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
			y1 = LUT_NTC[NTC_LUT_NB_POINT-1];
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	647b      	str	r3, [r7, #68]	; 0x44
 8005a8c:	e050      	b.n	8005b30 <UnitConversion+0x380>
 8005a8e:	bf00      	nop
 8005a90:	71c71c72 	.word	0x71c71c72
 8005a94:	3fe1c71c 	.word	0x3fe1c71c
 8005a98:	47ae147b 	.word	0x47ae147b
 8005a9c:	3fa47ae1 	.word	0x3fa47ae1
 8005aa0:	40e00000 	.word	0x40e00000
 8005aa4:	447a0000 	.word	0x447a0000
 8005aa8:	457ff000 	.word	0x457ff000
 8005aac:	43000000 	.word	0x43000000
 8005ab0:	42fa0000 	.word	0x42fa0000
 8005ab4:	42b40000 	.word	0x42b40000
 8005ab8:	428c0000 	.word	0x428c0000
 8005abc:	42480000 	.word	0x42480000
 8005ac0:	41c80000 	.word	0x41c80000
 8005ac4:	42c80000 	.word	0x42c80000
 8005ac8:	42960000 	.word	0x42960000
 8005acc:	459c4000 	.word	0x459c4000
 8005ad0:	edfa43fe 	.word	0xedfa43fe
 8005ad4:	402000eb 	.word	0x402000eb
		}
		else{
			x0 = LUT_NTC_V[i-1];
 8005ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ada:	3b01      	subs	r3, #1
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8005ae8:	ee07 3a90 	vmov	s15, r3
 8005aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
			y0 = LUT_NTC[i-1];
 8005af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005af6:	3b01      	subs	r3, #1
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005afe:	4413      	add	r3, r2
 8005b00:	3b50      	subs	r3, #80	; 0x50
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	64fb      	str	r3, [r7, #76]	; 0x4c
			x1 = LUT_NTC_V[i];
 8005b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005b0e:	4413      	add	r3, r2
 8005b10:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8005b14:	ee07 3a90 	vmov	s15, r3
 8005b18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b1c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
			y1 = LUT_NTC[i];
 8005b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005b28:	4413      	add	r3, r2
 8005b2a:	3b50      	subs	r3, #80	; 0x50
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	647b      	str	r3, [r7, #68]	; 0x44
		}

		a = (y1-y0)/(x1-x0);
 8005b30:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8005b34:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8005b38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005b3c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8005b40:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005b44:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005b48:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005b4c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		b = y0 - a*x0;
 8005b50:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005b54:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b5c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005b60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b64:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		Sensor->UnitValue = a*(Temp_Val) + b;
 8005b68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005b6c:	ee07 3a90 	vmov	s15, r3
 8005b70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b74:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005b78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b7c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005b80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b88:	edc7 7a00 	vstr	s15, [r7]
 8005b8c:	883b      	ldrh	r3, [r7, #0]
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	82da      	strh	r2, [r3, #22]

	else if(Sensor->Type == Pressure)
		Sensor->UnitValue = (Sensor->k * (Sensor->FilteredValue * Sensor->InputVoltage / 4095) - (2.5/4.5) )/0.04; // Bar/0.04 !!!!!!!

	else if((Sensor->Type == NTC)||(Sensor->Type == NTC_Board))
	{
 8005b94:	e077      	b.n	8005c86 <UnitConversion+0x4d6>
		a = (y1-y0)/(x1-x0);
		b = y0 - a*x0;
		Sensor->UnitValue = a*(Temp_Val) + b;
	}

	else if(Sensor->Type == LoadCell_RL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b9c:	2b04      	cmp	r3, #4
 8005b9e:	d12a      	bne.n	8005bf6 <UnitConversion+0x446>
		Sensor->UnitValue = ((Sensor->FilteredValue) * 1.1846 - 168 ) * 10.0;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f000 fa5d 	bl	8006064 <__aeabi_f2d>
 8005baa:	4602      	mov	r2, r0
 8005bac:	460b      	mov	r3, r1
 8005bae:	4610      	mov	r0, r2
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	a33f      	add	r3, pc, #252	; (adr r3, 8005cb0 <UnitConversion+0x500>)
 8005bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb8:	f000 faa8 	bl	800610c <__aeabi_dmul>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	4610      	mov	r0, r2
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	f04f 0200 	mov.w	r2, #0
 8005bc8:	4b35      	ldr	r3, [pc, #212]	; (8005ca0 <UnitConversion+0x4f0>)
 8005bca:	f000 f8eb 	bl	8005da4 <__aeabi_dsub>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4610      	mov	r0, r2
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	f04f 0200 	mov.w	r2, #0
 8005bda:	4b32      	ldr	r3, [pc, #200]	; (8005ca4 <UnitConversion+0x4f4>)
 8005bdc:	f000 fa96 	bl	800610c <__aeabi_dmul>
 8005be0:	4602      	mov	r2, r0
 8005be2:	460b      	mov	r3, r1
 8005be4:	4610      	mov	r0, r2
 8005be6:	4619      	mov	r1, r3
 8005be8:	f000 fca2 	bl	8006530 <__aeabi_d2uiz>
 8005bec:	4603      	mov	r3, r0
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	82da      	strh	r2, [r3, #22]
 8005bf4:	e047      	b.n	8005c86 <UnitConversion+0x4d6>

	else if(Sensor->Type == LoadCell_RR)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bfc:	2b05      	cmp	r3, #5
 8005bfe:	d12a      	bne.n	8005c56 <UnitConversion+0x4a6>
		Sensor->UnitValue = ((Sensor->FilteredValue) * 1.5055 - 203 ) * 10.0;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 fa2d 	bl	8006064 <__aeabi_f2d>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	4610      	mov	r0, r2
 8005c10:	4619      	mov	r1, r3
 8005c12:	a31f      	add	r3, pc, #124	; (adr r3, 8005c90 <UnitConversion+0x4e0>)
 8005c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c18:	f000 fa78 	bl	800610c <__aeabi_dmul>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	4610      	mov	r0, r2
 8005c22:	4619      	mov	r1, r3
 8005c24:	a31c      	add	r3, pc, #112	; (adr r3, 8005c98 <UnitConversion+0x4e8>)
 8005c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2a:	f000 f8bb 	bl	8005da4 <__aeabi_dsub>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	460b      	mov	r3, r1
 8005c32:	4610      	mov	r0, r2
 8005c34:	4619      	mov	r1, r3
 8005c36:	f04f 0200 	mov.w	r2, #0
 8005c3a:	4b1a      	ldr	r3, [pc, #104]	; (8005ca4 <UnitConversion+0x4f4>)
 8005c3c:	f000 fa66 	bl	800610c <__aeabi_dmul>
 8005c40:	4602      	mov	r2, r0
 8005c42:	460b      	mov	r3, r1
 8005c44:	4610      	mov	r0, r2
 8005c46:	4619      	mov	r1, r3
 8005c48:	f000 fc72 	bl	8006530 <__aeabi_d2uiz>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	82da      	strh	r2, [r3, #22]
 8005c54:	e017      	b.n	8005c86 <UnitConversion+0x4d6>

	else if(Sensor->Type == Voltage)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c5c:	2b07      	cmp	r3, #7
 8005c5e:	d112      	bne.n	8005c86 <UnitConversion+0x4d6>
		Sensor->UnitValue = (((Sensor->FilteredValue)*(41600/1200)/4095));
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	edd3 7a01 	vldr	s15, [r3, #4]
 8005c66:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005ca8 <UnitConversion+0x4f8>
 8005c6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c6e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005cac <UnitConversion+0x4fc>
 8005c72:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8005c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c7a:	edc7 7a00 	vstr	s15, [r7]
 8005c7e:	883b      	ldrh	r3, [r7, #0]
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	82da      	strh	r2, [r3, #22]

}
 8005c86:	3758      	adds	r7, #88	; 0x58
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	f3af 8000 	nop.w
 8005c90:	2b020c4a 	.word	0x2b020c4a
 8005c94:	3ff81687 	.word	0x3ff81687
 8005c98:	00000000 	.word	0x00000000
 8005c9c:	40696000 	.word	0x40696000
 8005ca0:	40650000 	.word	0x40650000
 8005ca4:	40240000 	.word	0x40240000
 8005ca8:	42080000 	.word	0x42080000
 8005cac:	457ff000 	.word	0x457ff000
 8005cb0:	212d7732 	.word	0x212d7732
 8005cb4:	3ff2f41f 	.word	0x3ff2f41f

08005cb8 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8005cc4:	78fb      	ldrb	r3, [r7, #3]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	409a      	lsls	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	605a      	str	r2, [r3, #4]
}
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	7c1b      	ldrb	r3, [r3, #16]
 8005ce8:	4610      	mov	r0, r2
 8005cea:	4619      	mov	r1, r3
 8005cec:	f7ff ffe4 	bl	8005cb8 <XMC_GPIO_SetOutputHigh>
}
 8005cf0:	3708      	adds	r7, #8
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop

08005cf8 <main>:

uint16_t value;


int main(void)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af02      	add	r7, sp, #8

  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 8005cfe:	f7ff f843 	bl	8004d88 <DAVE_Init>
 8005d02:	4603      	mov	r3, r0
 8005d04:	71fb      	strb	r3, [r7, #7]
  ANA_Init();
 8005d06:	f7ff f8a1 	bl	8004e4c <ANA_Init>

  CAN1_INIT();
 8005d0a:	f7ff fb4f 	bl	80053ac <CAN1_INIT>
  CAN2_INIT();
 8005d0e:	f7ff fc25 	bl	800555c <CAN2_INIT>
  DIGITAL_IO_SetOutputHigh(&Debug_LED);
 8005d12:	4819      	ldr	r0, [pc, #100]	; (8005d78 <main+0x80>)
 8005d14:	f7ff ffe0 	bl	8005cd8 <DIGITAL_IO_SetOutputHigh>

  xTaskCreate(Task_ANA_Read, "Read_Task", 1000, NULL, 0, NULL);
 8005d18:	2300      	movs	r3, #0
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	9301      	str	r3, [sp, #4]
 8005d20:	4816      	ldr	r0, [pc, #88]	; (8005d7c <main+0x84>)
 8005d22:	4917      	ldr	r1, [pc, #92]	; (8005d80 <main+0x88>)
 8005d24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d28:	2300      	movs	r3, #0
 8005d2a:	f7fd f9bf 	bl	80030ac <xTaskCreate>
  xTaskCreate(Task_CAN_2_Receive, "Can2_Receive_Task", 1000, NULL, 1, NULL);
 8005d2e:	2301      	movs	r3, #1
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	2300      	movs	r3, #0
 8005d34:	9301      	str	r3, [sp, #4]
 8005d36:	4813      	ldr	r0, [pc, #76]	; (8005d84 <main+0x8c>)
 8005d38:	4913      	ldr	r1, [pc, #76]	; (8005d88 <main+0x90>)
 8005d3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d3e:	2300      	movs	r3, #0
 8005d40:	f7fd f9b4 	bl	80030ac <xTaskCreate>
  xTaskCreate(Task_CAN_2_Transmit, "Can2_Transmit_Task", 1000, NULL, 2, NULL);
 8005d44:	2302      	movs	r3, #2
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	2300      	movs	r3, #0
 8005d4a:	9301      	str	r3, [sp, #4]
 8005d4c:	480f      	ldr	r0, [pc, #60]	; (8005d8c <main+0x94>)
 8005d4e:	4910      	ldr	r1, [pc, #64]	; (8005d90 <main+0x98>)
 8005d50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d54:	2300      	movs	r3, #0
 8005d56:	f7fd f9a9 	bl	80030ac <xTaskCreate>
  xTaskCreate(Task_CAN_1_Transmit, "Can1_Transmit_Task", 1000, NULL, 2, NULL);
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	9300      	str	r3, [sp, #0]
 8005d5e:	2300      	movs	r3, #0
 8005d60:	9301      	str	r3, [sp, #4]
 8005d62:	480c      	ldr	r0, [pc, #48]	; (8005d94 <main+0x9c>)
 8005d64:	490c      	ldr	r1, [pc, #48]	; (8005d98 <main+0xa0>)
 8005d66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	f7fd f99e 	bl	80030ac <xTaskCreate>

  vTaskStartScheduler();
 8005d70:	f7fd fb1a 	bl	80033a8 <vTaskStartScheduler>
  {
	  //Task_ANA_Read();
	  //Task_CAN_2_Receive();
	  //Task_CAN_2_Transmit();

}
 8005d74:	e7fe      	b.n	8005d74 <main+0x7c>
 8005d76:	bf00      	nop
 8005d78:	080068e0 	.word	0x080068e0
 8005d7c:	0800524d 	.word	0x0800524d
 8005d80:	08006be4 	.word	0x08006be4
 8005d84:	0800556d 	.word	0x0800556d
 8005d88:	08006bf0 	.word	0x08006bf0
 8005d8c:	080055c9 	.word	0x080055c9
 8005d90:	08006c04 	.word	0x08006c04
 8005d94:	080053bd 	.word	0x080053bd
 8005d98:	08006c18 	.word	0x08006c18

08005d9c <__aeabi_drsub>:
 8005d9c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8005da0:	e002      	b.n	8005da8 <__adddf3>
 8005da2:	bf00      	nop

08005da4 <__aeabi_dsub>:
 8005da4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08005da8 <__adddf3>:
 8005da8:	b530      	push	{r4, r5, lr}
 8005daa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005dae:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8005db2:	ea94 0f05 	teq	r4, r5
 8005db6:	bf08      	it	eq
 8005db8:	ea90 0f02 	teqeq	r0, r2
 8005dbc:	bf1f      	itttt	ne
 8005dbe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8005dc2:	ea55 0c02 	orrsne.w	ip, r5, r2
 8005dc6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8005dca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005dce:	f000 80e2 	beq.w	8005f96 <__adddf3+0x1ee>
 8005dd2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8005dd6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8005dda:	bfb8      	it	lt
 8005ddc:	426d      	neglt	r5, r5
 8005dde:	dd0c      	ble.n	8005dfa <__adddf3+0x52>
 8005de0:	442c      	add	r4, r5
 8005de2:	ea80 0202 	eor.w	r2, r0, r2
 8005de6:	ea81 0303 	eor.w	r3, r1, r3
 8005dea:	ea82 0000 	eor.w	r0, r2, r0
 8005dee:	ea83 0101 	eor.w	r1, r3, r1
 8005df2:	ea80 0202 	eor.w	r2, r0, r2
 8005df6:	ea81 0303 	eor.w	r3, r1, r3
 8005dfa:	2d36      	cmp	r5, #54	; 0x36
 8005dfc:	bf88      	it	hi
 8005dfe:	bd30      	pophi	{r4, r5, pc}
 8005e00:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005e04:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005e08:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8005e0c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8005e10:	d002      	beq.n	8005e18 <__adddf3+0x70>
 8005e12:	4240      	negs	r0, r0
 8005e14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005e18:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8005e1c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005e20:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8005e24:	d002      	beq.n	8005e2c <__adddf3+0x84>
 8005e26:	4252      	negs	r2, r2
 8005e28:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005e2c:	ea94 0f05 	teq	r4, r5
 8005e30:	f000 80a7 	beq.w	8005f82 <__adddf3+0x1da>
 8005e34:	f1a4 0401 	sub.w	r4, r4, #1
 8005e38:	f1d5 0e20 	rsbs	lr, r5, #32
 8005e3c:	db0d      	blt.n	8005e5a <__adddf3+0xb2>
 8005e3e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8005e42:	fa22 f205 	lsr.w	r2, r2, r5
 8005e46:	1880      	adds	r0, r0, r2
 8005e48:	f141 0100 	adc.w	r1, r1, #0
 8005e4c:	fa03 f20e 	lsl.w	r2, r3, lr
 8005e50:	1880      	adds	r0, r0, r2
 8005e52:	fa43 f305 	asr.w	r3, r3, r5
 8005e56:	4159      	adcs	r1, r3
 8005e58:	e00e      	b.n	8005e78 <__adddf3+0xd0>
 8005e5a:	f1a5 0520 	sub.w	r5, r5, #32
 8005e5e:	f10e 0e20 	add.w	lr, lr, #32
 8005e62:	2a01      	cmp	r2, #1
 8005e64:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005e68:	bf28      	it	cs
 8005e6a:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005e6e:	fa43 f305 	asr.w	r3, r3, r5
 8005e72:	18c0      	adds	r0, r0, r3
 8005e74:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005e78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005e7c:	d507      	bpl.n	8005e8e <__adddf3+0xe6>
 8005e7e:	f04f 0e00 	mov.w	lr, #0
 8005e82:	f1dc 0c00 	rsbs	ip, ip, #0
 8005e86:	eb7e 0000 	sbcs.w	r0, lr, r0
 8005e8a:	eb6e 0101 	sbc.w	r1, lr, r1
 8005e8e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005e92:	d31b      	bcc.n	8005ecc <__adddf3+0x124>
 8005e94:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005e98:	d30c      	bcc.n	8005eb4 <__adddf3+0x10c>
 8005e9a:	0849      	lsrs	r1, r1, #1
 8005e9c:	ea5f 0030 	movs.w	r0, r0, rrx
 8005ea0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8005ea4:	f104 0401 	add.w	r4, r4, #1
 8005ea8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005eac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8005eb0:	f080 809a 	bcs.w	8005fe8 <__adddf3+0x240>
 8005eb4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8005eb8:	bf08      	it	eq
 8005eba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005ebe:	f150 0000 	adcs.w	r0, r0, #0
 8005ec2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005ec6:	ea41 0105 	orr.w	r1, r1, r5
 8005eca:	bd30      	pop	{r4, r5, pc}
 8005ecc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005ed0:	4140      	adcs	r0, r0
 8005ed2:	eb41 0101 	adc.w	r1, r1, r1
 8005ed6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005eda:	f1a4 0401 	sub.w	r4, r4, #1
 8005ede:	d1e9      	bne.n	8005eb4 <__adddf3+0x10c>
 8005ee0:	f091 0f00 	teq	r1, #0
 8005ee4:	bf04      	itt	eq
 8005ee6:	4601      	moveq	r1, r0
 8005ee8:	2000      	moveq	r0, #0
 8005eea:	fab1 f381 	clz	r3, r1
 8005eee:	bf08      	it	eq
 8005ef0:	3320      	addeq	r3, #32
 8005ef2:	f1a3 030b 	sub.w	r3, r3, #11
 8005ef6:	f1b3 0220 	subs.w	r2, r3, #32
 8005efa:	da0c      	bge.n	8005f16 <__adddf3+0x16e>
 8005efc:	320c      	adds	r2, #12
 8005efe:	dd08      	ble.n	8005f12 <__adddf3+0x16a>
 8005f00:	f102 0c14 	add.w	ip, r2, #20
 8005f04:	f1c2 020c 	rsb	r2, r2, #12
 8005f08:	fa01 f00c 	lsl.w	r0, r1, ip
 8005f0c:	fa21 f102 	lsr.w	r1, r1, r2
 8005f10:	e00c      	b.n	8005f2c <__adddf3+0x184>
 8005f12:	f102 0214 	add.w	r2, r2, #20
 8005f16:	bfd8      	it	le
 8005f18:	f1c2 0c20 	rsble	ip, r2, #32
 8005f1c:	fa01 f102 	lsl.w	r1, r1, r2
 8005f20:	fa20 fc0c 	lsr.w	ip, r0, ip
 8005f24:	bfdc      	itt	le
 8005f26:	ea41 010c 	orrle.w	r1, r1, ip
 8005f2a:	4090      	lslle	r0, r2
 8005f2c:	1ae4      	subs	r4, r4, r3
 8005f2e:	bfa2      	ittt	ge
 8005f30:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8005f34:	4329      	orrge	r1, r5
 8005f36:	bd30      	popge	{r4, r5, pc}
 8005f38:	ea6f 0404 	mvn.w	r4, r4
 8005f3c:	3c1f      	subs	r4, #31
 8005f3e:	da1c      	bge.n	8005f7a <__adddf3+0x1d2>
 8005f40:	340c      	adds	r4, #12
 8005f42:	dc0e      	bgt.n	8005f62 <__adddf3+0x1ba>
 8005f44:	f104 0414 	add.w	r4, r4, #20
 8005f48:	f1c4 0220 	rsb	r2, r4, #32
 8005f4c:	fa20 f004 	lsr.w	r0, r0, r4
 8005f50:	fa01 f302 	lsl.w	r3, r1, r2
 8005f54:	ea40 0003 	orr.w	r0, r0, r3
 8005f58:	fa21 f304 	lsr.w	r3, r1, r4
 8005f5c:	ea45 0103 	orr.w	r1, r5, r3
 8005f60:	bd30      	pop	{r4, r5, pc}
 8005f62:	f1c4 040c 	rsb	r4, r4, #12
 8005f66:	f1c4 0220 	rsb	r2, r4, #32
 8005f6a:	fa20 f002 	lsr.w	r0, r0, r2
 8005f6e:	fa01 f304 	lsl.w	r3, r1, r4
 8005f72:	ea40 0003 	orr.w	r0, r0, r3
 8005f76:	4629      	mov	r1, r5
 8005f78:	bd30      	pop	{r4, r5, pc}
 8005f7a:	fa21 f004 	lsr.w	r0, r1, r4
 8005f7e:	4629      	mov	r1, r5
 8005f80:	bd30      	pop	{r4, r5, pc}
 8005f82:	f094 0f00 	teq	r4, #0
 8005f86:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8005f8a:	bf06      	itte	eq
 8005f8c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8005f90:	3401      	addeq	r4, #1
 8005f92:	3d01      	subne	r5, #1
 8005f94:	e74e      	b.n	8005e34 <__adddf3+0x8c>
 8005f96:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005f9a:	bf18      	it	ne
 8005f9c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005fa0:	d029      	beq.n	8005ff6 <__adddf3+0x24e>
 8005fa2:	ea94 0f05 	teq	r4, r5
 8005fa6:	bf08      	it	eq
 8005fa8:	ea90 0f02 	teqeq	r0, r2
 8005fac:	d005      	beq.n	8005fba <__adddf3+0x212>
 8005fae:	ea54 0c00 	orrs.w	ip, r4, r0
 8005fb2:	bf04      	itt	eq
 8005fb4:	4619      	moveq	r1, r3
 8005fb6:	4610      	moveq	r0, r2
 8005fb8:	bd30      	pop	{r4, r5, pc}
 8005fba:	ea91 0f03 	teq	r1, r3
 8005fbe:	bf1e      	ittt	ne
 8005fc0:	2100      	movne	r1, #0
 8005fc2:	2000      	movne	r0, #0
 8005fc4:	bd30      	popne	{r4, r5, pc}
 8005fc6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8005fca:	d105      	bne.n	8005fd8 <__adddf3+0x230>
 8005fcc:	0040      	lsls	r0, r0, #1
 8005fce:	4149      	adcs	r1, r1
 8005fd0:	bf28      	it	cs
 8005fd2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8005fd6:	bd30      	pop	{r4, r5, pc}
 8005fd8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8005fdc:	bf3c      	itt	cc
 8005fde:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8005fe2:	bd30      	popcc	{r4, r5, pc}
 8005fe4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005fe8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8005fec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005ff0:	f04f 0000 	mov.w	r0, #0
 8005ff4:	bd30      	pop	{r4, r5, pc}
 8005ff6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005ffa:	bf1a      	itte	ne
 8005ffc:	4619      	movne	r1, r3
 8005ffe:	4610      	movne	r0, r2
 8006000:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006004:	bf1c      	itt	ne
 8006006:	460b      	movne	r3, r1
 8006008:	4602      	movne	r2, r0
 800600a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800600e:	bf06      	itte	eq
 8006010:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006014:	ea91 0f03 	teqeq	r1, r3
 8006018:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800601c:	bd30      	pop	{r4, r5, pc}
 800601e:	bf00      	nop

08006020 <__aeabi_ui2d>:
 8006020:	f090 0f00 	teq	r0, #0
 8006024:	bf04      	itt	eq
 8006026:	2100      	moveq	r1, #0
 8006028:	4770      	bxeq	lr
 800602a:	b530      	push	{r4, r5, lr}
 800602c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006030:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006034:	f04f 0500 	mov.w	r5, #0
 8006038:	f04f 0100 	mov.w	r1, #0
 800603c:	e750      	b.n	8005ee0 <__adddf3+0x138>
 800603e:	bf00      	nop

08006040 <__aeabi_i2d>:
 8006040:	f090 0f00 	teq	r0, #0
 8006044:	bf04      	itt	eq
 8006046:	2100      	moveq	r1, #0
 8006048:	4770      	bxeq	lr
 800604a:	b530      	push	{r4, r5, lr}
 800604c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006050:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006054:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8006058:	bf48      	it	mi
 800605a:	4240      	negmi	r0, r0
 800605c:	f04f 0100 	mov.w	r1, #0
 8006060:	e73e      	b.n	8005ee0 <__adddf3+0x138>
 8006062:	bf00      	nop

08006064 <__aeabi_f2d>:
 8006064:	0042      	lsls	r2, r0, #1
 8006066:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800606a:	ea4f 0131 	mov.w	r1, r1, rrx
 800606e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8006072:	bf1f      	itttt	ne
 8006074:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8006078:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800607c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8006080:	4770      	bxne	lr
 8006082:	f092 0f00 	teq	r2, #0
 8006086:	bf14      	ite	ne
 8006088:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800608c:	4770      	bxeq	lr
 800608e:	b530      	push	{r4, r5, lr}
 8006090:	f44f 7460 	mov.w	r4, #896	; 0x380
 8006094:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006098:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800609c:	e720      	b.n	8005ee0 <__adddf3+0x138>
 800609e:	bf00      	nop

080060a0 <__aeabi_ul2d>:
 80060a0:	ea50 0201 	orrs.w	r2, r0, r1
 80060a4:	bf08      	it	eq
 80060a6:	4770      	bxeq	lr
 80060a8:	b530      	push	{r4, r5, lr}
 80060aa:	f04f 0500 	mov.w	r5, #0
 80060ae:	e00a      	b.n	80060c6 <__aeabi_l2d+0x16>

080060b0 <__aeabi_l2d>:
 80060b0:	ea50 0201 	orrs.w	r2, r0, r1
 80060b4:	bf08      	it	eq
 80060b6:	4770      	bxeq	lr
 80060b8:	b530      	push	{r4, r5, lr}
 80060ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80060be:	d502      	bpl.n	80060c6 <__aeabi_l2d+0x16>
 80060c0:	4240      	negs	r0, r0
 80060c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80060c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80060ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80060ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80060d2:	f43f aedc 	beq.w	8005e8e <__adddf3+0xe6>
 80060d6:	f04f 0203 	mov.w	r2, #3
 80060da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80060de:	bf18      	it	ne
 80060e0:	3203      	addne	r2, #3
 80060e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80060e6:	bf18      	it	ne
 80060e8:	3203      	addne	r2, #3
 80060ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80060ee:	f1c2 0320 	rsb	r3, r2, #32
 80060f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80060f6:	fa20 f002 	lsr.w	r0, r0, r2
 80060fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80060fe:	ea40 000e 	orr.w	r0, r0, lr
 8006102:	fa21 f102 	lsr.w	r1, r1, r2
 8006106:	4414      	add	r4, r2
 8006108:	e6c1      	b.n	8005e8e <__adddf3+0xe6>
 800610a:	bf00      	nop

0800610c <__aeabi_dmul>:
 800610c:	b570      	push	{r4, r5, r6, lr}
 800610e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006112:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006116:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800611a:	bf1d      	ittte	ne
 800611c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006120:	ea94 0f0c 	teqne	r4, ip
 8006124:	ea95 0f0c 	teqne	r5, ip
 8006128:	f000 f8de 	bleq	80062e8 <__aeabi_dmul+0x1dc>
 800612c:	442c      	add	r4, r5
 800612e:	ea81 0603 	eor.w	r6, r1, r3
 8006132:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8006136:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800613a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800613e:	bf18      	it	ne
 8006140:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8006144:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006148:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800614c:	d038      	beq.n	80061c0 <__aeabi_dmul+0xb4>
 800614e:	fba0 ce02 	umull	ip, lr, r0, r2
 8006152:	f04f 0500 	mov.w	r5, #0
 8006156:	fbe1 e502 	umlal	lr, r5, r1, r2
 800615a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800615e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8006162:	f04f 0600 	mov.w	r6, #0
 8006166:	fbe1 5603 	umlal	r5, r6, r1, r3
 800616a:	f09c 0f00 	teq	ip, #0
 800616e:	bf18      	it	ne
 8006170:	f04e 0e01 	orrne.w	lr, lr, #1
 8006174:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8006178:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800617c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8006180:	d204      	bcs.n	800618c <__aeabi_dmul+0x80>
 8006182:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8006186:	416d      	adcs	r5, r5
 8006188:	eb46 0606 	adc.w	r6, r6, r6
 800618c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8006190:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8006194:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8006198:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800619c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80061a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80061a4:	bf88      	it	hi
 80061a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80061aa:	d81e      	bhi.n	80061ea <__aeabi_dmul+0xde>
 80061ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80061b0:	bf08      	it	eq
 80061b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80061b6:	f150 0000 	adcs.w	r0, r0, #0
 80061ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80061be:	bd70      	pop	{r4, r5, r6, pc}
 80061c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80061c4:	ea46 0101 	orr.w	r1, r6, r1
 80061c8:	ea40 0002 	orr.w	r0, r0, r2
 80061cc:	ea81 0103 	eor.w	r1, r1, r3
 80061d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80061d4:	bfc2      	ittt	gt
 80061d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80061da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80061de:	bd70      	popgt	{r4, r5, r6, pc}
 80061e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80061e4:	f04f 0e00 	mov.w	lr, #0
 80061e8:	3c01      	subs	r4, #1
 80061ea:	f300 80ab 	bgt.w	8006344 <__aeabi_dmul+0x238>
 80061ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80061f2:	bfde      	ittt	le
 80061f4:	2000      	movle	r0, #0
 80061f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80061fa:	bd70      	pople	{r4, r5, r6, pc}
 80061fc:	f1c4 0400 	rsb	r4, r4, #0
 8006200:	3c20      	subs	r4, #32
 8006202:	da35      	bge.n	8006270 <__aeabi_dmul+0x164>
 8006204:	340c      	adds	r4, #12
 8006206:	dc1b      	bgt.n	8006240 <__aeabi_dmul+0x134>
 8006208:	f104 0414 	add.w	r4, r4, #20
 800620c:	f1c4 0520 	rsb	r5, r4, #32
 8006210:	fa00 f305 	lsl.w	r3, r0, r5
 8006214:	fa20 f004 	lsr.w	r0, r0, r4
 8006218:	fa01 f205 	lsl.w	r2, r1, r5
 800621c:	ea40 0002 	orr.w	r0, r0, r2
 8006220:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8006224:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006228:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800622c:	fa21 f604 	lsr.w	r6, r1, r4
 8006230:	eb42 0106 	adc.w	r1, r2, r6
 8006234:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006238:	bf08      	it	eq
 800623a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800623e:	bd70      	pop	{r4, r5, r6, pc}
 8006240:	f1c4 040c 	rsb	r4, r4, #12
 8006244:	f1c4 0520 	rsb	r5, r4, #32
 8006248:	fa00 f304 	lsl.w	r3, r0, r4
 800624c:	fa20 f005 	lsr.w	r0, r0, r5
 8006250:	fa01 f204 	lsl.w	r2, r1, r4
 8006254:	ea40 0002 	orr.w	r0, r0, r2
 8006258:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800625c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006260:	f141 0100 	adc.w	r1, r1, #0
 8006264:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006268:	bf08      	it	eq
 800626a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800626e:	bd70      	pop	{r4, r5, r6, pc}
 8006270:	f1c4 0520 	rsb	r5, r4, #32
 8006274:	fa00 f205 	lsl.w	r2, r0, r5
 8006278:	ea4e 0e02 	orr.w	lr, lr, r2
 800627c:	fa20 f304 	lsr.w	r3, r0, r4
 8006280:	fa01 f205 	lsl.w	r2, r1, r5
 8006284:	ea43 0302 	orr.w	r3, r3, r2
 8006288:	fa21 f004 	lsr.w	r0, r1, r4
 800628c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006290:	fa21 f204 	lsr.w	r2, r1, r4
 8006294:	ea20 0002 	bic.w	r0, r0, r2
 8006298:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800629c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80062a0:	bf08      	it	eq
 80062a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80062a6:	bd70      	pop	{r4, r5, r6, pc}
 80062a8:	f094 0f00 	teq	r4, #0
 80062ac:	d10f      	bne.n	80062ce <__aeabi_dmul+0x1c2>
 80062ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80062b2:	0040      	lsls	r0, r0, #1
 80062b4:	eb41 0101 	adc.w	r1, r1, r1
 80062b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80062bc:	bf08      	it	eq
 80062be:	3c01      	subeq	r4, #1
 80062c0:	d0f7      	beq.n	80062b2 <__aeabi_dmul+0x1a6>
 80062c2:	ea41 0106 	orr.w	r1, r1, r6
 80062c6:	f095 0f00 	teq	r5, #0
 80062ca:	bf18      	it	ne
 80062cc:	4770      	bxne	lr
 80062ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80062d2:	0052      	lsls	r2, r2, #1
 80062d4:	eb43 0303 	adc.w	r3, r3, r3
 80062d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80062dc:	bf08      	it	eq
 80062de:	3d01      	subeq	r5, #1
 80062e0:	d0f7      	beq.n	80062d2 <__aeabi_dmul+0x1c6>
 80062e2:	ea43 0306 	orr.w	r3, r3, r6
 80062e6:	4770      	bx	lr
 80062e8:	ea94 0f0c 	teq	r4, ip
 80062ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80062f0:	bf18      	it	ne
 80062f2:	ea95 0f0c 	teqne	r5, ip
 80062f6:	d00c      	beq.n	8006312 <__aeabi_dmul+0x206>
 80062f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80062fc:	bf18      	it	ne
 80062fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006302:	d1d1      	bne.n	80062a8 <__aeabi_dmul+0x19c>
 8006304:	ea81 0103 	eor.w	r1, r1, r3
 8006308:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800630c:	f04f 0000 	mov.w	r0, #0
 8006310:	bd70      	pop	{r4, r5, r6, pc}
 8006312:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006316:	bf06      	itte	eq
 8006318:	4610      	moveq	r0, r2
 800631a:	4619      	moveq	r1, r3
 800631c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006320:	d019      	beq.n	8006356 <__aeabi_dmul+0x24a>
 8006322:	ea94 0f0c 	teq	r4, ip
 8006326:	d102      	bne.n	800632e <__aeabi_dmul+0x222>
 8006328:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800632c:	d113      	bne.n	8006356 <__aeabi_dmul+0x24a>
 800632e:	ea95 0f0c 	teq	r5, ip
 8006332:	d105      	bne.n	8006340 <__aeabi_dmul+0x234>
 8006334:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8006338:	bf1c      	itt	ne
 800633a:	4610      	movne	r0, r2
 800633c:	4619      	movne	r1, r3
 800633e:	d10a      	bne.n	8006356 <__aeabi_dmul+0x24a>
 8006340:	ea81 0103 	eor.w	r1, r1, r3
 8006344:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006348:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800634c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006350:	f04f 0000 	mov.w	r0, #0
 8006354:	bd70      	pop	{r4, r5, r6, pc}
 8006356:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800635a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800635e:	bd70      	pop	{r4, r5, r6, pc}

08006360 <__aeabi_ddiv>:
 8006360:	b570      	push	{r4, r5, r6, lr}
 8006362:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006366:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800636a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800636e:	bf1d      	ittte	ne
 8006370:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006374:	ea94 0f0c 	teqne	r4, ip
 8006378:	ea95 0f0c 	teqne	r5, ip
 800637c:	f000 f8a7 	bleq	80064ce <__aeabi_ddiv+0x16e>
 8006380:	eba4 0405 	sub.w	r4, r4, r5
 8006384:	ea81 0e03 	eor.w	lr, r1, r3
 8006388:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800638c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006390:	f000 8088 	beq.w	80064a4 <__aeabi_ddiv+0x144>
 8006394:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006398:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800639c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80063a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80063a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80063a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80063ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80063b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80063b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80063b8:	429d      	cmp	r5, r3
 80063ba:	bf08      	it	eq
 80063bc:	4296      	cmpeq	r6, r2
 80063be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80063c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80063c6:	d202      	bcs.n	80063ce <__aeabi_ddiv+0x6e>
 80063c8:	085b      	lsrs	r3, r3, #1
 80063ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80063ce:	1ab6      	subs	r6, r6, r2
 80063d0:	eb65 0503 	sbc.w	r5, r5, r3
 80063d4:	085b      	lsrs	r3, r3, #1
 80063d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80063da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80063de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80063e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80063e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80063ea:	bf22      	ittt	cs
 80063ec:	1ab6      	subcs	r6, r6, r2
 80063ee:	4675      	movcs	r5, lr
 80063f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80063f4:	085b      	lsrs	r3, r3, #1
 80063f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80063fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80063fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006402:	bf22      	ittt	cs
 8006404:	1ab6      	subcs	r6, r6, r2
 8006406:	4675      	movcs	r5, lr
 8006408:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800640c:	085b      	lsrs	r3, r3, #1
 800640e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006412:	ebb6 0e02 	subs.w	lr, r6, r2
 8006416:	eb75 0e03 	sbcs.w	lr, r5, r3
 800641a:	bf22      	ittt	cs
 800641c:	1ab6      	subcs	r6, r6, r2
 800641e:	4675      	movcs	r5, lr
 8006420:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006424:	085b      	lsrs	r3, r3, #1
 8006426:	ea4f 0232 	mov.w	r2, r2, rrx
 800642a:	ebb6 0e02 	subs.w	lr, r6, r2
 800642e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006432:	bf22      	ittt	cs
 8006434:	1ab6      	subcs	r6, r6, r2
 8006436:	4675      	movcs	r5, lr
 8006438:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800643c:	ea55 0e06 	orrs.w	lr, r5, r6
 8006440:	d018      	beq.n	8006474 <__aeabi_ddiv+0x114>
 8006442:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8006446:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800644a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800644e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8006452:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8006456:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800645a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800645e:	d1c0      	bne.n	80063e2 <__aeabi_ddiv+0x82>
 8006460:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006464:	d10b      	bne.n	800647e <__aeabi_ddiv+0x11e>
 8006466:	ea41 0100 	orr.w	r1, r1, r0
 800646a:	f04f 0000 	mov.w	r0, #0
 800646e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8006472:	e7b6      	b.n	80063e2 <__aeabi_ddiv+0x82>
 8006474:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006478:	bf04      	itt	eq
 800647a:	4301      	orreq	r1, r0
 800647c:	2000      	moveq	r0, #0
 800647e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006482:	bf88      	it	hi
 8006484:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006488:	f63f aeaf 	bhi.w	80061ea <__aeabi_dmul+0xde>
 800648c:	ebb5 0c03 	subs.w	ip, r5, r3
 8006490:	bf04      	itt	eq
 8006492:	ebb6 0c02 	subseq.w	ip, r6, r2
 8006496:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800649a:	f150 0000 	adcs.w	r0, r0, #0
 800649e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80064a2:	bd70      	pop	{r4, r5, r6, pc}
 80064a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80064a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80064ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80064b0:	bfc2      	ittt	gt
 80064b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80064b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80064ba:	bd70      	popgt	{r4, r5, r6, pc}
 80064bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80064c0:	f04f 0e00 	mov.w	lr, #0
 80064c4:	3c01      	subs	r4, #1
 80064c6:	e690      	b.n	80061ea <__aeabi_dmul+0xde>
 80064c8:	ea45 0e06 	orr.w	lr, r5, r6
 80064cc:	e68d      	b.n	80061ea <__aeabi_dmul+0xde>
 80064ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80064d2:	ea94 0f0c 	teq	r4, ip
 80064d6:	bf08      	it	eq
 80064d8:	ea95 0f0c 	teqeq	r5, ip
 80064dc:	f43f af3b 	beq.w	8006356 <__aeabi_dmul+0x24a>
 80064e0:	ea94 0f0c 	teq	r4, ip
 80064e4:	d10a      	bne.n	80064fc <__aeabi_ddiv+0x19c>
 80064e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80064ea:	f47f af34 	bne.w	8006356 <__aeabi_dmul+0x24a>
 80064ee:	ea95 0f0c 	teq	r5, ip
 80064f2:	f47f af25 	bne.w	8006340 <__aeabi_dmul+0x234>
 80064f6:	4610      	mov	r0, r2
 80064f8:	4619      	mov	r1, r3
 80064fa:	e72c      	b.n	8006356 <__aeabi_dmul+0x24a>
 80064fc:	ea95 0f0c 	teq	r5, ip
 8006500:	d106      	bne.n	8006510 <__aeabi_ddiv+0x1b0>
 8006502:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006506:	f43f aefd 	beq.w	8006304 <__aeabi_dmul+0x1f8>
 800650a:	4610      	mov	r0, r2
 800650c:	4619      	mov	r1, r3
 800650e:	e722      	b.n	8006356 <__aeabi_dmul+0x24a>
 8006510:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006514:	bf18      	it	ne
 8006516:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800651a:	f47f aec5 	bne.w	80062a8 <__aeabi_dmul+0x19c>
 800651e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8006522:	f47f af0d 	bne.w	8006340 <__aeabi_dmul+0x234>
 8006526:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800652a:	f47f aeeb 	bne.w	8006304 <__aeabi_dmul+0x1f8>
 800652e:	e712      	b.n	8006356 <__aeabi_dmul+0x24a>

08006530 <__aeabi_d2uiz>:
 8006530:	004a      	lsls	r2, r1, #1
 8006532:	d211      	bcs.n	8006558 <__aeabi_d2uiz+0x28>
 8006534:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006538:	d211      	bcs.n	800655e <__aeabi_d2uiz+0x2e>
 800653a:	d50d      	bpl.n	8006558 <__aeabi_d2uiz+0x28>
 800653c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006540:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006544:	d40e      	bmi.n	8006564 <__aeabi_d2uiz+0x34>
 8006546:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800654a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800654e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006552:	fa23 f002 	lsr.w	r0, r3, r2
 8006556:	4770      	bx	lr
 8006558:	f04f 0000 	mov.w	r0, #0
 800655c:	4770      	bx	lr
 800655e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006562:	d102      	bne.n	800656a <__aeabi_d2uiz+0x3a>
 8006564:	f04f 30ff 	mov.w	r0, #4294967295
 8006568:	4770      	bx	lr
 800656a:	f04f 0000 	mov.w	r0, #0
 800656e:	4770      	bx	lr

08006570 <__aeabi_d2f>:
 8006570:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006574:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8006578:	bf24      	itt	cs
 800657a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800657e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8006582:	d90d      	bls.n	80065a0 <__aeabi_d2f+0x30>
 8006584:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8006588:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800658c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8006590:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8006594:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8006598:	bf08      	it	eq
 800659a:	f020 0001 	biceq.w	r0, r0, #1
 800659e:	4770      	bx	lr
 80065a0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80065a4:	d121      	bne.n	80065ea <__aeabi_d2f+0x7a>
 80065a6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80065aa:	bfbc      	itt	lt
 80065ac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80065b0:	4770      	bxlt	lr
 80065b2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80065b6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80065ba:	f1c2 0218 	rsb	r2, r2, #24
 80065be:	f1c2 0c20 	rsb	ip, r2, #32
 80065c2:	fa10 f30c 	lsls.w	r3, r0, ip
 80065c6:	fa20 f002 	lsr.w	r0, r0, r2
 80065ca:	bf18      	it	ne
 80065cc:	f040 0001 	orrne.w	r0, r0, #1
 80065d0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80065d4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80065d8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80065dc:	ea40 000c 	orr.w	r0, r0, ip
 80065e0:	fa23 f302 	lsr.w	r3, r3, r2
 80065e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80065e8:	e7cc      	b.n	8006584 <__aeabi_d2f+0x14>
 80065ea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80065ee:	d107      	bne.n	8006600 <__aeabi_d2f+0x90>
 80065f0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80065f4:	bf1e      	ittt	ne
 80065f6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80065fa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80065fe:	4770      	bxne	lr
 8006600:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8006604:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8006608:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop

08006610 <__errno>:
 8006610:	4b01      	ldr	r3, [pc, #4]	; (8006618 <__errno+0x8>)
 8006612:	6818      	ldr	r0, [r3, #0]
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	200003d0 	.word	0x200003d0

0800661c <__libc_init_array>:
 800661c:	b570      	push	{r4, r5, r6, lr}
 800661e:	4b0e      	ldr	r3, [pc, #56]	; (8006658 <__libc_init_array+0x3c>)
 8006620:	4c0e      	ldr	r4, [pc, #56]	; (800665c <__libc_init_array+0x40>)
 8006622:	1ae4      	subs	r4, r4, r3
 8006624:	10a4      	asrs	r4, r4, #2
 8006626:	2500      	movs	r5, #0
 8006628:	461e      	mov	r6, r3
 800662a:	42a5      	cmp	r5, r4
 800662c:	d004      	beq.n	8006638 <__libc_init_array+0x1c>
 800662e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006632:	4798      	blx	r3
 8006634:	3501      	adds	r5, #1
 8006636:	e7f8      	b.n	800662a <__libc_init_array+0xe>
 8006638:	f7fb faf4 	bl	8001c24 <_init>
 800663c:	4c08      	ldr	r4, [pc, #32]	; (8006660 <__libc_init_array+0x44>)
 800663e:	4b09      	ldr	r3, [pc, #36]	; (8006664 <__libc_init_array+0x48>)
 8006640:	1ae4      	subs	r4, r4, r3
 8006642:	10a4      	asrs	r4, r4, #2
 8006644:	2500      	movs	r5, #0
 8006646:	461e      	mov	r6, r3
 8006648:	42a5      	cmp	r5, r4
 800664a:	d004      	beq.n	8006656 <__libc_init_array+0x3a>
 800664c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006650:	4798      	blx	r3
 8006652:	3501      	adds	r5, #1
 8006654:	e7f8      	b.n	8006648 <__libc_init_array+0x2c>
 8006656:	bd70      	pop	{r4, r5, r6, pc}
 8006658:	200003d4 	.word	0x200003d4
 800665c:	200003d4 	.word	0x200003d4
 8006660:	200003d4 	.word	0x200003d4
 8006664:	200003d4 	.word	0x200003d4

08006668 <malloc>:
 8006668:	4b02      	ldr	r3, [pc, #8]	; (8006674 <malloc+0xc>)
 800666a:	4601      	mov	r1, r0
 800666c:	6818      	ldr	r0, [r3, #0]
 800666e:	f000 b863 	b.w	8006738 <_malloc_r>
 8006672:	bf00      	nop
 8006674:	200003d0 	.word	0x200003d0

08006678 <free>:
 8006678:	4b02      	ldr	r3, [pc, #8]	; (8006684 <free+0xc>)
 800667a:	4601      	mov	r1, r0
 800667c:	6818      	ldr	r0, [r3, #0]
 800667e:	f000 b817 	b.w	80066b0 <_free_r>
 8006682:	bf00      	nop
 8006684:	200003d0 	.word	0x200003d0

08006688 <memcpy>:
 8006688:	b510      	push	{r4, lr}
 800668a:	1e43      	subs	r3, r0, #1
 800668c:	440a      	add	r2, r1
 800668e:	4291      	cmp	r1, r2
 8006690:	d004      	beq.n	800669c <memcpy+0x14>
 8006692:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006696:	f803 4f01 	strb.w	r4, [r3, #1]!
 800669a:	e7f8      	b.n	800668e <memcpy+0x6>
 800669c:	bd10      	pop	{r4, pc}

0800669e <memset>:
 800669e:	4402      	add	r2, r0
 80066a0:	4603      	mov	r3, r0
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d002      	beq.n	80066ac <memset+0xe>
 80066a6:	f803 1b01 	strb.w	r1, [r3], #1
 80066aa:	e7fa      	b.n	80066a2 <memset+0x4>
 80066ac:	4770      	bx	lr
	...

080066b0 <_free_r>:
 80066b0:	b530      	push	{r4, r5, lr}
 80066b2:	2900      	cmp	r1, #0
 80066b4:	d03d      	beq.n	8006732 <_free_r+0x82>
 80066b6:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80066ba:	1f0b      	subs	r3, r1, #4
 80066bc:	491d      	ldr	r1, [pc, #116]	; (8006734 <_free_r+0x84>)
 80066be:	2a00      	cmp	r2, #0
 80066c0:	bfb8      	it	lt
 80066c2:	189b      	addlt	r3, r3, r2
 80066c4:	680a      	ldr	r2, [r1, #0]
 80066c6:	460c      	mov	r4, r1
 80066c8:	b912      	cbnz	r2, 80066d0 <_free_r+0x20>
 80066ca:	605a      	str	r2, [r3, #4]
 80066cc:	600b      	str	r3, [r1, #0]
 80066ce:	bd30      	pop	{r4, r5, pc}
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d20d      	bcs.n	80066f0 <_free_r+0x40>
 80066d4:	6819      	ldr	r1, [r3, #0]
 80066d6:	1858      	adds	r0, r3, r1
 80066d8:	4290      	cmp	r0, r2
 80066da:	bf01      	itttt	eq
 80066dc:	585a      	ldreq	r2, [r3, r1]
 80066de:	1852      	addeq	r2, r2, r1
 80066e0:	601a      	streq	r2, [r3, #0]
 80066e2:	6842      	ldreq	r2, [r0, #4]
 80066e4:	605a      	str	r2, [r3, #4]
 80066e6:	6023      	str	r3, [r4, #0]
 80066e8:	bd30      	pop	{r4, r5, pc}
 80066ea:	4299      	cmp	r1, r3
 80066ec:	d803      	bhi.n	80066f6 <_free_r+0x46>
 80066ee:	460a      	mov	r2, r1
 80066f0:	6851      	ldr	r1, [r2, #4]
 80066f2:	2900      	cmp	r1, #0
 80066f4:	d1f9      	bne.n	80066ea <_free_r+0x3a>
 80066f6:	6814      	ldr	r4, [r2, #0]
 80066f8:	1915      	adds	r5, r2, r4
 80066fa:	429d      	cmp	r5, r3
 80066fc:	d10a      	bne.n	8006714 <_free_r+0x64>
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4423      	add	r3, r4
 8006702:	18d0      	adds	r0, r2, r3
 8006704:	4288      	cmp	r0, r1
 8006706:	6013      	str	r3, [r2, #0]
 8006708:	d113      	bne.n	8006732 <_free_r+0x82>
 800670a:	6808      	ldr	r0, [r1, #0]
 800670c:	4403      	add	r3, r0
 800670e:	6013      	str	r3, [r2, #0]
 8006710:	684b      	ldr	r3, [r1, #4]
 8006712:	e00d      	b.n	8006730 <_free_r+0x80>
 8006714:	d902      	bls.n	800671c <_free_r+0x6c>
 8006716:	230c      	movs	r3, #12
 8006718:	6003      	str	r3, [r0, #0]
 800671a:	bd30      	pop	{r4, r5, pc}
 800671c:	681c      	ldr	r4, [r3, #0]
 800671e:	1918      	adds	r0, r3, r4
 8006720:	4288      	cmp	r0, r1
 8006722:	bf04      	itt	eq
 8006724:	6808      	ldreq	r0, [r1, #0]
 8006726:	6849      	ldreq	r1, [r1, #4]
 8006728:	6059      	str	r1, [r3, #4]
 800672a:	bf04      	itt	eq
 800672c:	1900      	addeq	r0, r0, r4
 800672e:	6018      	streq	r0, [r3, #0]
 8006730:	6053      	str	r3, [r2, #4]
 8006732:	bd30      	pop	{r4, r5, pc}
 8006734:	20000590 	.word	0x20000590

08006738 <_malloc_r>:
 8006738:	b570      	push	{r4, r5, r6, lr}
 800673a:	1ccc      	adds	r4, r1, #3
 800673c:	f024 0403 	bic.w	r4, r4, #3
 8006740:	3408      	adds	r4, #8
 8006742:	2c0c      	cmp	r4, #12
 8006744:	bf38      	it	cc
 8006746:	240c      	movcc	r4, #12
 8006748:	2c00      	cmp	r4, #0
 800674a:	4606      	mov	r6, r0
 800674c:	da03      	bge.n	8006756 <_malloc_r+0x1e>
 800674e:	230c      	movs	r3, #12
 8006750:	6033      	str	r3, [r6, #0]
 8006752:	2000      	movs	r0, #0
 8006754:	bd70      	pop	{r4, r5, r6, pc}
 8006756:	428c      	cmp	r4, r1
 8006758:	d3f9      	bcc.n	800674e <_malloc_r+0x16>
 800675a:	4a20      	ldr	r2, [pc, #128]	; (80067dc <_malloc_r+0xa4>)
 800675c:	6813      	ldr	r3, [r2, #0]
 800675e:	4610      	mov	r0, r2
 8006760:	4619      	mov	r1, r3
 8006762:	b1a1      	cbz	r1, 800678e <_malloc_r+0x56>
 8006764:	680a      	ldr	r2, [r1, #0]
 8006766:	1b12      	subs	r2, r2, r4
 8006768:	d40e      	bmi.n	8006788 <_malloc_r+0x50>
 800676a:	2a0b      	cmp	r2, #11
 800676c:	d903      	bls.n	8006776 <_malloc_r+0x3e>
 800676e:	600a      	str	r2, [r1, #0]
 8006770:	188b      	adds	r3, r1, r2
 8006772:	508c      	str	r4, [r1, r2]
 8006774:	e01f      	b.n	80067b6 <_malloc_r+0x7e>
 8006776:	428b      	cmp	r3, r1
 8006778:	bf0d      	iteet	eq
 800677a:	685a      	ldreq	r2, [r3, #4]
 800677c:	684a      	ldrne	r2, [r1, #4]
 800677e:	605a      	strne	r2, [r3, #4]
 8006780:	6002      	streq	r2, [r0, #0]
 8006782:	bf18      	it	ne
 8006784:	460b      	movne	r3, r1
 8006786:	e016      	b.n	80067b6 <_malloc_r+0x7e>
 8006788:	460b      	mov	r3, r1
 800678a:	6849      	ldr	r1, [r1, #4]
 800678c:	e7e9      	b.n	8006762 <_malloc_r+0x2a>
 800678e:	4d14      	ldr	r5, [pc, #80]	; (80067e0 <_malloc_r+0xa8>)
 8006790:	682b      	ldr	r3, [r5, #0]
 8006792:	b91b      	cbnz	r3, 800679c <_malloc_r+0x64>
 8006794:	4630      	mov	r0, r6
 8006796:	f000 f825 	bl	80067e4 <_sbrk_r>
 800679a:	6028      	str	r0, [r5, #0]
 800679c:	4630      	mov	r0, r6
 800679e:	4621      	mov	r1, r4
 80067a0:	f000 f820 	bl	80067e4 <_sbrk_r>
 80067a4:	1c42      	adds	r2, r0, #1
 80067a6:	4603      	mov	r3, r0
 80067a8:	d0d1      	beq.n	800674e <_malloc_r+0x16>
 80067aa:	1cc5      	adds	r5, r0, #3
 80067ac:	f025 0503 	bic.w	r5, r5, #3
 80067b0:	4285      	cmp	r5, r0
 80067b2:	d10a      	bne.n	80067ca <_malloc_r+0x92>
 80067b4:	601c      	str	r4, [r3, #0]
 80067b6:	f103 000b 	add.w	r0, r3, #11
 80067ba:	1d1a      	adds	r2, r3, #4
 80067bc:	f020 0007 	bic.w	r0, r0, #7
 80067c0:	1a82      	subs	r2, r0, r2
 80067c2:	d00a      	beq.n	80067da <_malloc_r+0xa2>
 80067c4:	4251      	negs	r1, r2
 80067c6:	5099      	str	r1, [r3, r2]
 80067c8:	bd70      	pop	{r4, r5, r6, pc}
 80067ca:	4630      	mov	r0, r6
 80067cc:	1ae9      	subs	r1, r5, r3
 80067ce:	f000 f809 	bl	80067e4 <_sbrk_r>
 80067d2:	3001      	adds	r0, #1
 80067d4:	d0bb      	beq.n	800674e <_malloc_r+0x16>
 80067d6:	462b      	mov	r3, r5
 80067d8:	e7ec      	b.n	80067b4 <_malloc_r+0x7c>
 80067da:	bd70      	pop	{r4, r5, r6, pc}
 80067dc:	20000590 	.word	0x20000590
 80067e0:	2000058c 	.word	0x2000058c

080067e4 <_sbrk_r>:
 80067e4:	b538      	push	{r3, r4, r5, lr}
 80067e6:	4c06      	ldr	r4, [pc, #24]	; (8006800 <_sbrk_r+0x1c>)
 80067e8:	2300      	movs	r3, #0
 80067ea:	4605      	mov	r5, r0
 80067ec:	4608      	mov	r0, r1
 80067ee:	6023      	str	r3, [r4, #0]
 80067f0:	f7fb f9e4 	bl	8001bbc <_sbrk>
 80067f4:	1c43      	adds	r3, r0, #1
 80067f6:	d102      	bne.n	80067fe <_sbrk_r+0x1a>
 80067f8:	6823      	ldr	r3, [r4, #0]
 80067fa:	b103      	cbz	r3, 80067fe <_sbrk_r+0x1a>
 80067fc:	602b      	str	r3, [r5, #0]
 80067fe:	bd38      	pop	{r3, r4, r5, pc}
 8006800:	200008a4 	.word	0x200008a4

08006804 <g_xmc_vadc_group_array>:
 8006804:	40004400 40004800 40004c00 40005000     .D.@.H.@.L.@.P.@

08006814 <group_init_handle0>:
	...

08006828 <group_init_handle1>:
	...

0800683c <group_init_handle2>:
	...

08006850 <group_init_handle3>:
	...

08006864 <global_config>:
 8006864:	00000000 00000003 00000000 00000000     ................
	...
 800687c:	454c4449 00000000 09632509 25097525     IDLE.....%c.%u.%
 800688c:	75250975 00000a0d 20726d54 00637653     u.%u....Tmr Svc.
 800689c:	51726d54 00000000                       TmrQ....

080068a4 <Brake_Light>:
 80068a4:	48028000 00000080 00010000 00000000     ...H............
 80068b4:	00000003                                ....

080068b8 <CAN_2_RES_CTRL>:
 80068b8:	48028100 00000080 00010000 00000000     ...H............
 80068c8:	0000000e                                ....

080068cc <CAN_1_RES_CTRL>:
 80068cc:	48028100 00000080 00010000 00000000     ...H............
 80068dc:	00000006                                ....

080068e0 <Debug_LED>:
 80068e0:	48028000 00000080 00010000 00000004     ...H............
 80068f0:	00000002 01040250 00010000 00000000     ....P...........
 8006900:	00010000 01010101                       ........

08006908 <CAN_2_gpio_out>:
 8006908:	48028100 00000004                       ...H....

08006910 <CAN_2_gpio_out_config>:
 8006910:	00000090 00000001 00000002              ............

0800691c <CAN_2_gpio_in>:
 800691c:	48028100 00000005                       ...H....

08006924 <CAN_2_gpio_in_config>:
	...

08006930 <CAN_2_sr>:
 8006930:	00000000                                ....

08006934 <CAN_2_LMO_01_Config>:
 8006934:	200000a0 00000022 00000000              ... ".......

08006940 <CAN_2_LMO_02_Config>:
 8006940:	200000c0 00000023 00000000              ... #.......

0800694c <CAN_2>:
 800694c:	20000038 48014200 20000094 08006934     8.. .B.H... 4i..
 800695c:	08006940 00000000 00000000 00000000     @i..............
	...
 80069d8:	08006930 08006908 08006910 0800691c     0i...i...i...i..
 80069e8:	08006924 00020000 00000000              $i..........

080069f4 <CAN_1_gpio_out>:
 80069f4:	48028100 0000000c                       ...H....

080069fc <CAN_1_gpio_out_config>:
 80069fc:	00000090 00000001 00000002              ............

08006a08 <CAN_1_gpio_in>:
 8006a08:	48028100 0000000d                       ...H....

08006a10 <CAN_1_gpio_in_config>:
	...

08006a1c <CAN_1_sr>:
 8006a1c:	00000000                                ....

08006a20 <CAN_1_LMO_01_Config>:
 8006a20:	200000f0 00000021 00000000              ... !.......

08006a2c <CAN_1>:
 8006a2c:	20000038 48014300 200000e0 08006a20     8.. .C.H...  j..
	...
 8006ab8:	08006a1c 080069f4 080069fc 08006a08     .j...i...i...j..
 8006ac8:	08006a10 00010102 00000000              .j..........

08006ad4 <ANALOG_IO_0>:
 8006ad4:	00000000 2000052c 48028e00 00000000     ....,.. ...H....

08006ae4 <ANALOG_IO_1>:
 8006ae4:	00000000 2000052d 48028e00 00000001     ....-.. ...H....

08006af4 <ANALOG_IO_2>:
 8006af4:	00000000 2000052e 48028e00 00000002     ....... ...H....

08006b04 <ANALOG_IO_3>:
 8006b04:	00000000 2000052f 48028e00 00000003     ..../.. ...H....

08006b14 <ANALOG_IO_4>:
 8006b14:	00000000 20000530 48028e00 00000004     ....0.. ...H....

08006b24 <ANALOG_IO_5>:
 8006b24:	00000000 20000531 48028e00 00000005     ....1.. ...H....

08006b34 <ANALOG_IO_6>:
 8006b34:	00000000 20000532 48028e00 00000006     ....2.. ...H....

08006b44 <ANALOG_IO_7>:
 8006b44:	00000000 20000533 48028e00 00000007     ....3.. ...H....

08006b54 <ANALOG_IO_8>:
 8006b54:	00000000 20000534 48028e00 0000000f     ....4.. ...H....

08006b64 <ANALOG_IO_9>:
 8006b64:	00000000 20000535 48028f00 00000002     ....5.. ...H....

08006b74 <ANALOG_IO_10>:
 8006b74:	00000000 20000536 48028f00 00000003     ....6.. ...H....

08006b84 <ANALOG_IO_11>:
 8006b84:	00000000 20000537 48028e00 0000000e     ....7.. ...H....

08006b94 <ANALOG_IO_12>:
 8006b94:	00000000 20000538 48028e00 00000008     ....8.. ...H....

08006ba4 <ANALOG_IO_13>:
 8006ba4:	00000000 20000539 48028e00 00000009     ....9.. ...H....

08006bb4 <ANALOG_IO_14>:
 8006bb4:	00000000 2000053a 48028e00 0000000c     ....:.. ...H....

08006bc4 <ANALOG_IO_15>:
 8006bc4:	00000000 2000053b 48028e00 0000000d     ....;.. ...H....

08006bd4 <global_iclass_config>:
 8006bd4:	0000000d                                ....

08006bd8 <backgnd_config>:
 8006bd8:	00000005 00000000 00000010 64616552     ............Read
 8006be8:	7361545f 0000006b 326e6143 6365525f     _Task...Can2_Rec
 8006bf8:	65766965 7361545f 0000006b 326e6143     eive_Task...Can2
 8006c08:	6172545f 696d736e 61545f74 00006b73     _Transmit_Task..
 8006c18:	316e6143 6172545f 696d736e 61545f74     Can1_Transmit_Ta
 8006c28:	00006b73 00000043                       sk..C...
