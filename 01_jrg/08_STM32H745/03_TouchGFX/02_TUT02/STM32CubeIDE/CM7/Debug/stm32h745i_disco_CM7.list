
stm32h745i_disco_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025df4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021fc  08026094  08026094  00036094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  08028290  08028290  00038290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080282a8  080282a8  000a5394  2**0
                  CONTENTS
  5 .ARM          00000000  080282a8  080282a8  000a5394  2**0
                  CONTENTS
  6 .preinit_array 00000000  080282a8  080282a8  000a5394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  080282a8  080282a8  000382a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  080282bc  080282bc  000382bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000012c  24000000  080282c4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000b1fc  2400012c  080283f0  0004012c  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  2400b328  080283f0  0004b328  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000a5394  2**0
                  CONTENTS, READONLY
 13 FontFlashSection 000005e4  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 TextFlashSection 00000030  900005e4  900005e4  000505e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 ExtFlashSection 00054d80  90000614  90000614  00050614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .debug_info   00099702  00000000  00000000  000a53c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000110a5  00000000  00000000  0013eac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003f48  00000000  00000000  0014fb70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00003ac0  00000000  00000000  00153ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00011b0e  00000000  00000000  00157578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   000489cd  00000000  00000000  00169086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001b47ed  00000000  00000000  001b1a53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000cf  00000000  00000000  00366240  2**0
                  CONTENTS, READONLY
 24 .debug_frame  000114f0  00000000  00000000  00366310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400012c 	.word	0x2400012c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802607c 	.word	0x0802607c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000130 	.word	0x24000130
 80002dc:	0802607c 	.word	0x0802607c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000386:	f000 fb7f 	bl	8000a88 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800038a:	4b4c      	ldr	r3, [pc, #304]	; (80004bc <main+0x13c>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000392:	2b00      	cmp	r3, #0
 8000394:	d11b      	bne.n	80003ce <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000396:	f3bf 8f4f 	dsb	sy
}
 800039a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800039c:	f3bf 8f6f 	isb	sy
}
 80003a0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003a2:	4b46      	ldr	r3, [pc, #280]	; (80004bc <main+0x13c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003aa:	f3bf 8f4f 	dsb	sy
}
 80003ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003b0:	f3bf 8f6f 	isb	sy
}
 80003b4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003b6:	4b41      	ldr	r3, [pc, #260]	; (80004bc <main+0x13c>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a40      	ldr	r2, [pc, #256]	; (80004bc <main+0x13c>)
 80003bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003c2:	f3bf 8f4f 	dsb	sy
}
 80003c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003c8:	f3bf 8f6f 	isb	sy
}
 80003cc:	e000      	b.n	80003d0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ce:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003d0:	4b3a      	ldr	r3, [pc, #232]	; (80004bc <main+0x13c>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d138      	bne.n	800044e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80003dc:	4b37      	ldr	r3, [pc, #220]	; (80004bc <main+0x13c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80003e4:	f3bf 8f4f 	dsb	sy
}
 80003e8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80003ea:	4b34      	ldr	r3, [pc, #208]	; (80004bc <main+0x13c>)
 80003ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003f0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	0b5b      	lsrs	r3, r3, #13
 80003f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80003fa:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	08db      	lsrs	r3, r3, #3
 8000400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000404:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000406:	68bb      	ldr	r3, [r7, #8]
 8000408:	015a      	lsls	r2, r3, #5
 800040a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800040e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000414:	4929      	ldr	r1, [pc, #164]	; (80004bc <main+0x13c>)
 8000416:	4313      	orrs	r3, r2
 8000418:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	1e5a      	subs	r2, r3, #1
 8000420:	607a      	str	r2, [r7, #4]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d1ef      	bne.n	8000406 <main+0x86>
    } while(sets-- != 0U);
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	60ba      	str	r2, [r7, #8]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d1e5      	bne.n	80003fc <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000430:	f3bf 8f4f 	dsb	sy
}
 8000434:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000436:	4b21      	ldr	r3, [pc, #132]	; (80004bc <main+0x13c>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a20      	ldr	r2, [pc, #128]	; (80004bc <main+0x13c>)
 800043c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000440:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000442:	f3bf 8f4f 	dsb	sy
}
 8000446:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000448:	f3bf 8f6f 	isb	sy
}
 800044c:	e000      	b.n	8000450 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800044e:	bf00      	nop
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000450:	f00c fc2c 	bl	800ccac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000454:	f000 f842 	bl	80004dc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000458:	4b19      	ldr	r3, [pc, #100]	; (80004c0 <main+0x140>)
 800045a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800045e:	4a18      	ldr	r2, [pc, #96]	; (80004c0 <main+0x140>)
 8000460:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000464:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000468:	4b15      	ldr	r3, [pc, #84]	; (80004c0 <main+0x140>)
 800046a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800046e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000472:	603b      	str	r3, [r7, #0]
 8000474:	683b      	ldr	r3, [r7, #0]
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000476:	f000 fa07 	bl	8000888 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 800047a:	f000 f981 	bl	8000780 <MX_QUADSPI_Init>
  MX_FMC_Init();
 800047e:	f000 f9ad 	bl	80007dc <MX_FMC_Init>
  MX_LTDC_Init();
 8000482:	f000 f8f9 	bl	8000678 <MX_LTDC_Init>
  MX_CRC_Init();
 8000486:	f000 f8b7 	bl	80005f8 <MX_CRC_Init>
  MX_DMA2D_Init();
 800048a:	f000 f8d7 	bl	800063c <MX_DMA2D_Init>
  MX_TouchGFX_Init();
 800048e:	f001 f8fa 	bl	8001686 <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000492:	f006 fc1b 	bl	8006ccc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000496:	4a0b      	ldr	r2, [pc, #44]	; (80004c4 <main+0x144>)
 8000498:	2100      	movs	r1, #0
 800049a:	480b      	ldr	r0, [pc, #44]	; (80004c8 <main+0x148>)
 800049c:	f006 fc60 	bl	8006d60 <osThreadNew>
 80004a0:	4603      	mov	r3, r0
 80004a2:	4a0a      	ldr	r2, [pc, #40]	; (80004cc <main+0x14c>)
 80004a4:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80004a6:	4a0a      	ldr	r2, [pc, #40]	; (80004d0 <main+0x150>)
 80004a8:	2100      	movs	r1, #0
 80004aa:	480a      	ldr	r0, [pc, #40]	; (80004d4 <main+0x154>)
 80004ac:	f006 fc58 	bl	8006d60 <osThreadNew>
 80004b0:	4603      	mov	r3, r0
 80004b2:	4a09      	ldr	r2, [pc, #36]	; (80004d8 <main+0x158>)
 80004b4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004b6:	f006 fc2d 	bl	8006d14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ba:	e7fe      	b.n	80004ba <main+0x13a>
 80004bc:	e000ed00 	.word	0xe000ed00
 80004c0:	58024400 	.word	0x58024400
 80004c4:	08026db4 	.word	0x08026db4
 80004c8:	08000a79 	.word	0x08000a79
 80004cc:	240002fc 	.word	0x240002fc
 80004d0:	08026dd8 	.word	0x08026dd8
 80004d4:	08001693 	.word	0x08001693
 80004d8:	24000300 	.word	0x24000300

080004dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b09c      	sub	sp, #112	; 0x70
 80004e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004e6:	224c      	movs	r2, #76	; 0x4c
 80004e8:	2100      	movs	r1, #0
 80004ea:	4618      	mov	r0, r3
 80004ec:	f024 fda2 	bl	8025034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	2220      	movs	r2, #32
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f024 fd9c 	bl	8025034 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80004fc:	2004      	movs	r0, #4
 80004fe:	f00e fe6d 	bl	800f1dc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000502:	2300      	movs	r3, #0
 8000504:	603b      	str	r3, [r7, #0]
 8000506:	4b39      	ldr	r3, [pc, #228]	; (80005ec <SystemClock_Config+0x110>)
 8000508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800050a:	4a38      	ldr	r2, [pc, #224]	; (80005ec <SystemClock_Config+0x110>)
 800050c:	f023 0301 	bic.w	r3, r3, #1
 8000510:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000512:	4b36      	ldr	r3, [pc, #216]	; (80005ec <SystemClock_Config+0x110>)
 8000514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	603b      	str	r3, [r7, #0]
 800051c:	4b34      	ldr	r3, [pc, #208]	; (80005f0 <SystemClock_Config+0x114>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	4a33      	ldr	r2, [pc, #204]	; (80005f0 <SystemClock_Config+0x114>)
 8000522:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000526:	6193      	str	r3, [r2, #24]
 8000528:	4b31      	ldr	r3, [pc, #196]	; (80005f0 <SystemClock_Config+0x114>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000530:	603b      	str	r3, [r7, #0]
 8000532:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000534:	bf00      	nop
 8000536:	4b2e      	ldr	r3, [pc, #184]	; (80005f0 <SystemClock_Config+0x114>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800053e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000542:	d1f8      	bne.n	8000536 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000544:	4b2b      	ldr	r3, [pc, #172]	; (80005f4 <SystemClock_Config+0x118>)
 8000546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000548:	f023 0303 	bic.w	r3, r3, #3
 800054c:	4a29      	ldr	r2, [pc, #164]	; (80005f4 <SystemClock_Config+0x118>)
 800054e:	f043 0302 	orr.w	r3, r3, #2
 8000552:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000554:	2303      	movs	r3, #3
 8000556:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000558:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800055c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800055e:	2301      	movs	r3, #1
 8000560:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000562:	2340      	movs	r3, #64	; 0x40
 8000564:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000566:	2302      	movs	r3, #2
 8000568:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800056a:	2302      	movs	r3, #2
 800056c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800056e:	2305      	movs	r3, #5
 8000570:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000572:	23a0      	movs	r3, #160	; 0xa0
 8000574:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000576:	2302      	movs	r3, #2
 8000578:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800057a:	2304      	movs	r3, #4
 800057c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800057e:	2302      	movs	r3, #2
 8000580:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000582:	2308      	movs	r3, #8
 8000584:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000586:	2300      	movs	r3, #0
 8000588:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000592:	4618      	mov	r0, r3
 8000594:	f00f fd5e 	bl	8010054 <HAL_RCC_OscConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800059e:	f000 fabd 	bl	8000b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a2:	233f      	movs	r3, #63	; 0x3f
 80005a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a6:	2303      	movs	r3, #3
 80005a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80005ae:	2308      	movs	r3, #8
 80005b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80005b2:	2340      	movs	r3, #64	; 0x40
 80005b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005b6:	2340      	movs	r3, #64	; 0x40
 80005b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005c0:	2340      	movs	r3, #64	; 0x40
 80005c2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2102      	movs	r1, #2
 80005c8:	4618      	mov	r0, r3
 80005ca:	f010 f971 	bl	80108b0 <HAL_RCC_ClockConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80005d4:	f000 faa2 	bl	8000b1c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80005d8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80005dc:	2100      	movs	r1, #0
 80005de:	2000      	movs	r0, #0
 80005e0:	f010 fb1c 	bl	8010c1c <HAL_RCC_MCOConfig>
}
 80005e4:	bf00      	nop
 80005e6:	3770      	adds	r7, #112	; 0x70
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	58000400 	.word	0x58000400
 80005f0:	58024800 	.word	0x58024800
 80005f4:	58024400 	.word	0x58024400

080005f8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005fc:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <MX_CRC_Init+0x3c>)
 80005fe:	4a0e      	ldr	r2, [pc, #56]	; (8000638 <MX_CRC_Init+0x40>)
 8000600:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <MX_CRC_Init+0x3c>)
 8000604:	2200      	movs	r2, #0
 8000606:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <MX_CRC_Init+0x3c>)
 800060a:	2200      	movs	r2, #0
 800060c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_CRC_Init+0x3c>)
 8000610:	2200      	movs	r2, #0
 8000612:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <MX_CRC_Init+0x3c>)
 8000616:	2200      	movs	r2, #0
 8000618:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <MX_CRC_Init+0x3c>)
 800061c:	2201      	movs	r2, #1
 800061e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000620:	4804      	ldr	r0, [pc, #16]	; (8000634 <MX_CRC_Init+0x3c>)
 8000622:	f00c fd39 	bl	800d098 <HAL_CRC_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800062c:	f000 fa76 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	24000148 	.word	0x24000148
 8000638:	58024c00 	.word	0x58024c00

0800063c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MX_DMA2D_Init+0x34>)
 8000642:	4a0c      	ldr	r2, [pc, #48]	; (8000674 <MX_DMA2D_Init+0x38>)
 8000644:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <MX_DMA2D_Init+0x34>)
 8000648:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800064c:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <MX_DMA2D_Init+0x34>)
 8000650:	2202      	movs	r2, #2
 8000652:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_DMA2D_Init+0x34>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_DMA2D_Init+0x34>)
 800065c:	f00c fe06 	bl	800d26c <HAL_DMA2D_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 8000666:	f000 fa59 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2400016c 	.word	0x2400016c
 8000674:	52001000 	.word	0x52001000

08000678 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08e      	sub	sp, #56	; 0x38
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */
  initLtdcClocks();
 800067e:	f000 fa53 	bl	8000b28 <initLtdcClocks>
  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2234      	movs	r2, #52	; 0x34
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f024 fcd3 	bl	8025034 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800068e:	4b3a      	ldr	r3, [pc, #232]	; (8000778 <MX_LTDC_Init+0x100>)
 8000690:	4a3a      	ldr	r2, [pc, #232]	; (800077c <MX_LTDC_Init+0x104>)
 8000692:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000694:	4b38      	ldr	r3, [pc, #224]	; (8000778 <MX_LTDC_Init+0x100>)
 8000696:	2200      	movs	r2, #0
 8000698:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800069a:	4b37      	ldr	r3, [pc, #220]	; (8000778 <MX_LTDC_Init+0x100>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80006a0:	4b35      	ldr	r3, [pc, #212]	; (8000778 <MX_LTDC_Init+0x100>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80006a6:	4b34      	ldr	r3, [pc, #208]	; (8000778 <MX_LTDC_Init+0x100>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80006ac:	4b32      	ldr	r3, [pc, #200]	; (8000778 <MX_LTDC_Init+0x100>)
 80006ae:	2228      	movs	r2, #40	; 0x28
 80006b0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80006b2:	4b31      	ldr	r3, [pc, #196]	; (8000778 <MX_LTDC_Init+0x100>)
 80006b4:	2209      	movs	r2, #9
 80006b6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80006b8:	4b2f      	ldr	r3, [pc, #188]	; (8000778 <MX_LTDC_Init+0x100>)
 80006ba:	2235      	movs	r2, #53	; 0x35
 80006bc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80006be:	4b2e      	ldr	r3, [pc, #184]	; (8000778 <MX_LTDC_Init+0x100>)
 80006c0:	220b      	movs	r2, #11
 80006c2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80006c4:	4b2c      	ldr	r3, [pc, #176]	; (8000778 <MX_LTDC_Init+0x100>)
 80006c6:	f240 2215 	movw	r2, #533	; 0x215
 80006ca:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80006cc:	4b2a      	ldr	r3, [pc, #168]	; (8000778 <MX_LTDC_Init+0x100>)
 80006ce:	f240 121b 	movw	r2, #283	; 0x11b
 80006d2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80006d4:	4b28      	ldr	r3, [pc, #160]	; (8000778 <MX_LTDC_Init+0x100>)
 80006d6:	f240 2235 	movw	r2, #565	; 0x235
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80006dc:	4b26      	ldr	r3, [pc, #152]	; (8000778 <MX_LTDC_Init+0x100>)
 80006de:	f240 121d 	movw	r2, #285	; 0x11d
 80006e2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80006e4:	4b24      	ldr	r3, [pc, #144]	; (8000778 <MX_LTDC_Init+0x100>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80006ec:	4b22      	ldr	r3, [pc, #136]	; (8000778 <MX_LTDC_Init+0x100>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80006f4:	4b20      	ldr	r3, [pc, #128]	; (8000778 <MX_LTDC_Init+0x100>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80006fc:	481e      	ldr	r0, [pc, #120]	; (8000778 <MX_LTDC_Init+0x100>)
 80006fe:	f00e f871 	bl	800e7e4 <HAL_LTDC_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 8000708:	f000 fa08 	bl	8000b1c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000710:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000714:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800071a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800071e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000720:	2302      	movs	r3, #2
 8000722:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000724:	23ff      	movs	r3, #255	; 0xff
 8000726:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800072c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000730:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000732:	2305      	movs	r3, #5
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000736:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800073c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000740:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000742:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000746:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2200      	movs	r2, #0
 800075e:	4619      	mov	r1, r3
 8000760:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_LTDC_Init+0x100>)
 8000762:	f00e f9c7 	bl	800eaf4 <HAL_LTDC_ConfigLayer>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 800076c:	f000 f9d6 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	3738      	adds	r7, #56	; 0x38
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	240001d4 	.word	0x240001d4
 800077c:	50001000 	.word	0x50001000

08000780 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_QUADSPI_Init+0x50>)
 8000786:	4a13      	ldr	r2, [pc, #76]	; (80007d4 <MX_QUADSPI_Init+0x54>)
 8000788:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_QUADSPI_Init+0x50>)
 800078c:	2201      	movs	r2, #1
 800078e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_QUADSPI_Init+0x50>)
 8000792:	2201      	movs	r2, #1
 8000794:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_QUADSPI_Init+0x50>)
 8000798:	2210      	movs	r2, #16
 800079a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_QUADSPI_Init+0x50>)
 800079e:	221a      	movs	r2, #26
 80007a0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_3_CYCLE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_QUADSPI_Init+0x50>)
 80007a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a8:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_QUADSPI_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <MX_QUADSPI_Init+0x50>)
 80007b2:	2240      	movs	r2, #64	; 0x40
 80007b4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80007b6:	4806      	ldr	r0, [pc, #24]	; (80007d0 <MX_QUADSPI_Init+0x50>)
 80007b8:	f00e fd6a 	bl	800f290 <HAL_QSPI_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_QUADSPI_Init+0x46>
  {
    Error_Handler();
 80007c2:	f000 f9ab 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  initBspQuadSpi(&Error_Handler);
 80007c6:	4804      	ldr	r0, [pc, #16]	; (80007d8 <MX_QUADSPI_Init+0x58>)
 80007c8:	f000 fa22 	bl	8000c10 <initBspQuadSpi>
  /* USER CODE END QUADSPI_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2400027c 	.word	0x2400027c
 80007d4:	52005000 	.word	0x52005000
 80007d8:	08000b1d 	.word	0x08000b1d

080007dc <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
 80007f0:	615a      	str	r2, [r3, #20]
 80007f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 80007f4:	4b21      	ldr	r3, [pc, #132]	; (800087c <MX_FMC_Init+0xa0>)
 80007f6:	4a22      	ldr	r2, [pc, #136]	; (8000880 <MX_FMC_Init+0xa4>)
 80007f8:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 80007fa:	4b20      	ldr	r3, [pc, #128]	; (800087c <MX_FMC_Init+0xa0>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000800:	4b1e      	ldr	r3, [pc, #120]	; (800087c <MX_FMC_Init+0xa0>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000806:	4b1d      	ldr	r3, [pc, #116]	; (800087c <MX_FMC_Init+0xa0>)
 8000808:	2204      	movs	r2, #4
 800080a:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800080c:	4b1b      	ldr	r3, [pc, #108]	; (800087c <MX_FMC_Init+0xa0>)
 800080e:	2210      	movs	r2, #16
 8000810:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000812:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_FMC_Init+0xa0>)
 8000814:	2240      	movs	r2, #64	; 0x40
 8000816:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000818:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_FMC_Init+0xa0>)
 800081a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800081e:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000820:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_FMC_Init+0xa0>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_FMC_Init+0xa0>)
 8000828:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800082c:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_FMC_Init+0xa0>)
 8000830:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_FMC_Init+0xa0>)
 8000838:	2200      	movs	r2, #0
 800083a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800083c:	2302      	movs	r3, #2
 800083e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8000840:	2306      	movs	r3, #6
 8000842:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000844:	2304      	movs	r3, #4
 8000846:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8000848:	2306      	movs	r3, #6
 800084a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 800084c:	2302      	movs	r3, #2
 800084e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000850:	2302      	movs	r3, #2
 8000852:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000854:	2302      	movs	r3, #2
 8000856:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	4619      	mov	r1, r3
 800085c:	4807      	ldr	r0, [pc, #28]	; (800087c <MX_FMC_Init+0xa0>)
 800085e:	f011 fd09 	bl	8012274 <HAL_SDRAM_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000868:	f000 f958 	bl	8000b1c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  initBspSdRam(&Error_Handler);
 800086c:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_FMC_Init+0xa8>)
 800086e:	f000 f9f0 	bl	8000c52 <initBspSdRam>
  /* USER CODE END FMC_Init 2 */
}
 8000872:	bf00      	nop
 8000874:	3720      	adds	r7, #32
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	240002c8 	.word	0x240002c8
 8000880:	52004140 	.word	0x52004140
 8000884:	08000b1d 	.word	0x08000b1d

08000888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b090      	sub	sp, #64	; 0x40
 800088c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800089e:	4b72      	ldr	r3, [pc, #456]	; (8000a68 <MX_GPIO_Init+0x1e0>)
 80008a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a4:	4a70      	ldr	r2, [pc, #448]	; (8000a68 <MX_GPIO_Init+0x1e0>)
 80008a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ae:	4b6e      	ldr	r3, [pc, #440]	; (8000a68 <MX_GPIO_Init+0x1e0>)
 80008b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80008ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008bc:	4b6a      	ldr	r3, [pc, #424]	; (8000a68 <MX_GPIO_Init+0x1e0>)
 80008be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c2:	4a69      	ldr	r2, [pc, #420]	; (8000a68 <MX_GPIO_Init+0x1e0>)
 80008c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008cc:	4b66      	ldr	r3, [pc, #408]	; (8000a68 <MX_GPIO_Init+0x1e0>)
 80008ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
 80008d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80008da:	4b63      	ldr	r3, [pc, #396]	; (8000a68 <MX_GPIO_Init+0x1e0>)
 80008dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e0:	4a61      	ldr	r2, [pc, #388]	; (8000a68 <MX_GPIO_Init+0x1e0>)
 80008e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ea:	4b5f      	ldr	r3, [pc, #380]	; (8000a68 <MX_GPIO_Init+0x1e0>)
 80008ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008f4:	623b      	str	r3, [r7, #32]
 80008f6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008f8:	4b5b      	ldr	r3, [pc, #364]	; (8000a68 <MX_GPIO_Init+0x1e0>)
 80008fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fe:	4a5a      	ldr	r2, [pc, #360]	; (8000a68 <MX_GPIO_Init+0x1e0>)
 8000900:	f043 0310 	orr.w	r3, r3, #16
 8000904:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000908:	4b57      	ldr	r3, [pc, #348]	; (8000a68 <MX_GPIO_Init+0x1e0>)
 800090a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090e:	f003 0310 	and.w	r3, r3, #16
 8000912:	61fb      	str	r3, [r7, #28]
 8000914:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4b54      	ldr	r3, [pc, #336]	; (8000a68 <MX_GPIO_Init+0x1e0>)
 8000918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091c:	4a52      	ldr	r2, [pc, #328]	; (8000a68 <MX_GPIO_Init+0x1e0>)
 800091e:	f043 0302 	orr.w	r3, r3, #2
 8000922:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000926:	4b50      	ldr	r3, [pc, #320]	; (8000a68 <MX_GPIO_Init+0x1e0>)
 8000928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092c:	f003 0302 	and.w	r3, r3, #2
 8000930:	61bb      	str	r3, [r7, #24]
 8000932:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000934:	4b4c      	ldr	r3, [pc, #304]	; (8000a68 <MX_GPIO_Init+0x1e0>)
 8000936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093a:	4a4b      	ldr	r2, [pc, #300]	; (8000a68 <MX_GPIO_Init+0x1e0>)
 800093c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000940:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000944:	4b48      	ldr	r3, [pc, #288]	; (8000a68 <MX_GPIO_Init+0x1e0>)
 8000946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	4b45      	ldr	r3, [pc, #276]	; (8000a68 <MX_GPIO_Init+0x1e0>)
 8000954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000958:	4a43      	ldr	r2, [pc, #268]	; (8000a68 <MX_GPIO_Init+0x1e0>)
 800095a:	f043 0308 	orr.w	r3, r3, #8
 800095e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000962:	4b41      	ldr	r3, [pc, #260]	; (8000a68 <MX_GPIO_Init+0x1e0>)
 8000964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000968:	f003 0308 	and.w	r3, r3, #8
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000970:	4b3d      	ldr	r3, [pc, #244]	; (8000a68 <MX_GPIO_Init+0x1e0>)
 8000972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000976:	4a3c      	ldr	r2, [pc, #240]	; (8000a68 <MX_GPIO_Init+0x1e0>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000980:	4b39      	ldr	r3, [pc, #228]	; (8000a68 <MX_GPIO_Init+0x1e0>)
 8000982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800098e:	4b36      	ldr	r3, [pc, #216]	; (8000a68 <MX_GPIO_Init+0x1e0>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a34      	ldr	r2, [pc, #208]	; (8000a68 <MX_GPIO_Init+0x1e0>)
 8000996:	f043 0320 	orr.w	r3, r3, #32
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b32      	ldr	r3, [pc, #200]	; (8000a68 <MX_GPIO_Init+0x1e0>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0320 	and.w	r3, r3, #32
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ac:	4b2e      	ldr	r3, [pc, #184]	; (8000a68 <MX_GPIO_Init+0x1e0>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a2d      	ldr	r2, [pc, #180]	; (8000a68 <MX_GPIO_Init+0x1e0>)
 80009b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b2a      	ldr	r3, [pc, #168]	; (8000a68 <MX_GPIO_Init+0x1e0>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VSYNC_FREQ_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	21c0      	movs	r1, #192	; 0xc0
 80009ce:	4827      	ldr	r0, [pc, #156]	; (8000a6c <MX_GPIO_Init+0x1e4>)
 80009d0:	f00d f87a 	bl	800dac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2108      	movs	r1, #8
 80009d8:	4825      	ldr	r0, [pc, #148]	; (8000a70 <MX_GPIO_Init+0x1e8>)
 80009da:	f00d f875 	bl	800dac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	2140      	movs	r1, #64	; 0x40
 80009e2:	4824      	ldr	r0, [pc, #144]	; (8000a74 <MX_GPIO_Init+0x1ec>)
 80009e4:	f00d f870 	bl	800dac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VSYNC_FREQ_Pin RENDER_TIME_Pin */
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|RENDER_TIME_Pin;
 80009e8:	23c0      	movs	r3, #192	; 0xc0
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f4:	2303      	movs	r3, #3
 80009f6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009fc:	4619      	mov	r1, r3
 80009fe:	481b      	ldr	r0, [pc, #108]	; (8000a6c <MX_GPIO_Init+0x1e4>)
 8000a00:	f00c fda8 	bl	800d554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a16:	2300      	movs	r3, #0
 8000a18:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4814      	ldr	r0, [pc, #80]	; (8000a74 <MX_GPIO_Init+0x1ec>)
 8000a22:	f00c fd97 	bl	800d554 <HAL_GPIO_Init>

  /*Configure GPIO pin : FRAME_RATE_Pin */
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 8000a26:	2308      	movs	r3, #8
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a32:	2303      	movs	r3, #3
 8000a34:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480c      	ldr	r0, [pc, #48]	; (8000a70 <MX_GPIO_Init+0x1e8>)
 8000a3e:	f00c fd89 	bl	800d554 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_ACTIVE_Pin */
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 8000a42:	2340      	movs	r3, #64	; 0x40
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a56:	4619      	mov	r1, r3
 8000a58:	4806      	ldr	r0, [pc, #24]	; (8000a74 <MX_GPIO_Init+0x1ec>)
 8000a5a:	f00c fd7b 	bl	800d554 <HAL_GPIO_Init>

}
 8000a5e:	bf00      	nop
 8000a60:	3740      	adds	r7, #64	; 0x40
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	58024400 	.word	0x58024400
 8000a6c:	58020400 	.word	0x58020400
 8000a70:	58021800 	.word	0x58021800
 8000a74:	58020000 	.word	0x58020000

08000a78 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a80:	2001      	movs	r0, #1
 8000a82:	f006 f9ff 	bl	8006e84 <osDelay>
 8000a86:	e7fb      	b.n	8000a80 <StartDefaultTask+0x8>

08000a88 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a8e:	463b      	mov	r3, r7
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a9a:	f00c fa81 	bl	800cfa0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000aa6:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000aaa:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8000aac:	2313      	movs	r3, #19
 8000aae:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000abc:	2301      	movs	r3, #1
 8000abe:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000acc:	463b      	mov	r3, r7
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f00c fa9e 	bl	800d010 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000ad8:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000adc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000ade:	231a      	movs	r3, #26
 8000ae0:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f00c fa93 	bl	800d010 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000aea:	2004      	movs	r0, #4
 8000aec:	f00c fa70 	bl	800cfd0 <HAL_MPU_Enable>

}
 8000af0:	bf00      	nop
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d101      	bne.n	8000b0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b0a:	f00c f90b 	bl	800cd24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40001000 	.word	0x40001000

08000b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b20:	b672      	cpsid	i
}
 8000b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <Error_Handler+0x8>
	...

08000b28 <initLtdcClocks>:

/**
 * @brief initLtdcClocks initialize LTDC clocks
 */
void initLtdcClocks(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08c      	sub	sp, #48	; 0x30
 8000b2c:	af00      	add	r7, sp, #0
   // enable the LTDC and DMA2D clocks
   __HAL_RCC_LTDC_CLK_ENABLE();
 8000b2e:	4b36      	ldr	r3, [pc, #216]	; (8000c08 <initLtdcClocks+0xe0>)
 8000b30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000b34:	4a34      	ldr	r2, [pc, #208]	; (8000c08 <initLtdcClocks+0xe0>)
 8000b36:	f043 0308 	orr.w	r3, r3, #8
 8000b3a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8000b3e:	4b32      	ldr	r3, [pc, #200]	; (8000c08 <initLtdcClocks+0xe0>)
 8000b40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000b44:	f003 0308 	and.w	r3, r3, #8
 8000b48:	61bb      	str	r3, [r7, #24]
 8000b4a:	69bb      	ldr	r3, [r7, #24]

   // enable GPIOs clock
   __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b4c:	4b2e      	ldr	r3, [pc, #184]	; (8000c08 <initLtdcClocks+0xe0>)
 8000b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b52:	4a2d      	ldr	r2, [pc, #180]	; (8000c08 <initLtdcClocks+0xe0>)
 8000b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b5c:	4b2a      	ldr	r3, [pc, #168]	; (8000c08 <initLtdcClocks+0xe0>)
 8000b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	697b      	ldr	r3, [r7, #20]
   __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b6a:	4b27      	ldr	r3, [pc, #156]	; (8000c08 <initLtdcClocks+0xe0>)
 8000b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b70:	4a25      	ldr	r2, [pc, #148]	; (8000c08 <initLtdcClocks+0xe0>)
 8000b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b7a:	4b23      	ldr	r3, [pc, #140]	; (8000c08 <initLtdcClocks+0xe0>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOK_CLK_ENABLE();
 8000b88:	4b1f      	ldr	r3, [pc, #124]	; (8000c08 <initLtdcClocks+0xe0>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8e:	4a1e      	ldr	r2, [pc, #120]	; (8000c08 <initLtdcClocks+0xe0>)
 8000b90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <initLtdcClocks+0xe0>)
 8000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <initLtdcClocks+0xe0>)
 8000ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bac:	4a16      	ldr	r2, [pc, #88]	; (8000c08 <initLtdcClocks+0xe0>)
 8000bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <initLtdcClocks+0xe0>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc4:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <initLtdcClocks+0xe0>)
 8000bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bca:	4a0f      	ldr	r2, [pc, #60]	; (8000c08 <initLtdcClocks+0xe0>)
 8000bcc:	f043 0308 	orr.w	r3, r3, #8
 8000bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <initLtdcClocks+0xe0>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bda:	f003 0308 	and.w	r3, r3, #8
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]

   // LCD_DISP pin has to be manually controlled
   GPIO_InitTypeDef gpio_init_structure;
   gpio_init_structure.Pin = GPIO_PIN_7;
 8000be2:	2380      	movs	r3, #128	; 0x80
 8000be4:	61fb      	str	r3, [r7, #28]
   gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4806      	ldr	r0, [pc, #24]	; (8000c0c <initLtdcClocks+0xe4>)
 8000bf2:	f00c fcaf 	bl	800d554 <HAL_GPIO_Init>

   // assert display enable LCD_DISP pin
   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	2180      	movs	r1, #128	; 0x80
 8000bfa:	4804      	ldr	r0, [pc, #16]	; (8000c0c <initLtdcClocks+0xe4>)
 8000bfc:	f00c ff64 	bl	800dac8 <HAL_GPIO_WritePin>
}
 8000c00:	bf00      	nop
 8000c02:	3730      	adds	r7, #48	; 0x30
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	58024400 	.word	0x58024400
 8000c0c:	58020c00 	.word	0x58020c00

08000c10 <initBspQuadSpi>:
/**
 * @brief initBspQuadSpi initialize QSPI via BSP
 * @param error_handler callback to error handler
 */
void initBspQuadSpi(void (*error_handler)())
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
   BSP_QSPI_Init_t init;

   init.InterfaceMode = MT25TL01G_QPI_MODE;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	733b      	strb	r3, [r7, #12]
   init.TransferRate = MT25TL01G_DTR_TRANSFER;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	737b      	strb	r3, [r7, #13]
   init.DualFlashMode = MT25TL01G_DUALFLASH_ENABLE;
 8000c20:	2340      	movs	r3, #64	; 0x40
 8000c22:	73bb      	strb	r3, [r7, #14]

   if (BSP_QSPI_Init(0, &init) != BSP_ERROR_NONE)
 8000c24:	f107 030c 	add.w	r3, r7, #12
 8000c28:	4619      	mov	r1, r3
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f00a fff8 	bl	800bc20 <BSP_QSPI_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <initBspQuadSpi+0x2a>
   {
      error_handler();
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4798      	blx	r3
   }

   if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f00b f8ca 	bl	800bdd4 <BSP_QSPI_EnableMemoryMappedMode>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <initBspQuadSpi+0x3a>
   {
      error_handler();
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4798      	blx	r3
   }
}
 8000c4a:	bf00      	nop
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <initBspSdRam>:
/**
 * @brief initBspSdRam initialize SDRAM/FMC via BSP
 * @param error_handler callback to error handler
 */
void initBspSdRam(void (*error_handler)())
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
   BSP_SDRAM_DeInit(0);
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f00b fc28 	bl	800c4b0 <BSP_SDRAM_DeInit>

   if (BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8000c60:	2000      	movs	r0, #0
 8000c62:	f00b fbc9 	bl	800c3f8 <BSP_SDRAM_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <initBspSdRam+0x1e>
   {
      error_handler();
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4798      	blx	r3
   }
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <HAL_MspInit+0x38>)
 8000c80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c84:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <HAL_MspInit+0x38>)
 8000c86:	f043 0302 	orr.w	r3, r3, #2
 8000c8a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <HAL_MspInit+0x38>)
 8000c90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c94:	f003 0302 	and.w	r3, r3, #2
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	210f      	movs	r1, #15
 8000ca0:	f06f 0001 	mvn.w	r0, #1
 8000ca4:	f00c f946 	bl	800cf34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	58024400 	.word	0x58024400

08000cb4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <HAL_CRC_MspInit+0x3c>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d10e      	bne.n	8000ce4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <HAL_CRC_MspInit+0x40>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ccc:	4a09      	ldr	r2, [pc, #36]	; (8000cf4 <HAL_CRC_MspInit+0x40>)
 8000cce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000cd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd6:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <HAL_CRC_MspInit+0x40>)
 8000cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000ce4:	bf00      	nop
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	58024c00 	.word	0x58024c00
 8000cf4:	58024400 	.word	0x58024400

08000cf8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <HAL_DMA2D_MspInit+0x48>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d116      	bne.n	8000d38 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <HAL_DMA2D_MspInit+0x4c>)
 8000d0c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000d10:	4a0c      	ldr	r2, [pc, #48]	; (8000d44 <HAL_DMA2D_MspInit+0x4c>)
 8000d12:	f043 0310 	orr.w	r3, r3, #16
 8000d16:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <HAL_DMA2D_MspInit+0x4c>)
 8000d1c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000d20:	f003 0310 	and.w	r3, r3, #16
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2105      	movs	r1, #5
 8000d2c:	205a      	movs	r0, #90	; 0x5a
 8000d2e:	f00c f901 	bl	800cf34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000d32:	205a      	movs	r0, #90	; 0x5a
 8000d34:	f00c f918 	bl	800cf68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000d38:	bf00      	nop
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	52001000 	.word	0x52001000
 8000d44:	58024400 	.word	0x58024400

08000d48 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b0bc      	sub	sp, #240	; 0xf0
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d60:	f107 0320 	add.w	r3, r7, #32
 8000d64:	22bc      	movs	r2, #188	; 0xbc
 8000d66:	2100      	movs	r1, #0
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f024 f963 	bl	8025034 <memset>
  if(hltdc->Instance==LTDC)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a68      	ldr	r2, [pc, #416]	; (8000f14 <HAL_LTDC_MspInit+0x1cc>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	f040 80c8 	bne.w	8000f0a <HAL_LTDC_MspInit+0x1c2>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d7a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000d7e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 5;
 8000d80:	2305      	movs	r3, #5
 8000d82:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3N = 160;
 8000d84:	23a0      	movs	r3, #160	; 0xa0
 8000d86:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3R = 83;
 8000d90:	2353      	movs	r3, #83	; 0x53
 8000d92:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8000d94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d98:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000da2:	f107 0320 	add.w	r3, r7, #32
 8000da6:	4618      	mov	r0, r3
 8000da8:	f010 f9ba 	bl	8011120 <HAL_RCCEx_PeriphCLKConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 8000db2:	f7ff feb3 	bl	8000b1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000db6:	4b58      	ldr	r3, [pc, #352]	; (8000f18 <HAL_LTDC_MspInit+0x1d0>)
 8000db8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000dbc:	4a56      	ldr	r2, [pc, #344]	; (8000f18 <HAL_LTDC_MspInit+0x1d0>)
 8000dbe:	f043 0308 	orr.w	r3, r3, #8
 8000dc2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8000dc6:	4b54      	ldr	r3, [pc, #336]	; (8000f18 <HAL_LTDC_MspInit+0x1d0>)
 8000dc8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000dcc:	f003 0308 	and.w	r3, r3, #8
 8000dd0:	61fb      	str	r3, [r7, #28]
 8000dd2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000dd4:	4b50      	ldr	r3, [pc, #320]	; (8000f18 <HAL_LTDC_MspInit+0x1d0>)
 8000dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dda:	4a4f      	ldr	r2, [pc, #316]	; (8000f18 <HAL_LTDC_MspInit+0x1d0>)
 8000ddc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000de0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de4:	4b4c      	ldr	r3, [pc, #304]	; (8000f18 <HAL_LTDC_MspInit+0x1d0>)
 8000de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dee:	61bb      	str	r3, [r7, #24]
 8000df0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000df2:	4b49      	ldr	r3, [pc, #292]	; (8000f18 <HAL_LTDC_MspInit+0x1d0>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df8:	4a47      	ldr	r2, [pc, #284]	; (8000f18 <HAL_LTDC_MspInit+0x1d0>)
 8000dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e02:	4b45      	ldr	r3, [pc, #276]	; (8000f18 <HAL_LTDC_MspInit+0x1d0>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000e10:	4b41      	ldr	r3, [pc, #260]	; (8000f18 <HAL_LTDC_MspInit+0x1d0>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e16:	4a40      	ldr	r2, [pc, #256]	; (8000f18 <HAL_LTDC_MspInit+0x1d0>)
 8000e18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e20:	4b3d      	ldr	r3, [pc, #244]	; (8000f18 <HAL_LTDC_MspInit+0x1d0>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e2e:	4b3a      	ldr	r3, [pc, #232]	; (8000f18 <HAL_LTDC_MspInit+0x1d0>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e34:	4a38      	ldr	r2, [pc, #224]	; (8000f18 <HAL_LTDC_MspInit+0x1d0>)
 8000e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e3e:	4b36      	ldr	r3, [pc, #216]	; (8000f18 <HAL_LTDC_MspInit+0x1d0>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8000e4c:	23fc      	movs	r3, #252	; 0xfc
 8000e4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e64:	230e      	movs	r3, #14
 8000e66:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000e6a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e6e:	4619      	mov	r1, r3
 8000e70:	482a      	ldr	r0, [pc, #168]	; (8000f1c <HAL_LTDC_MspInit+0x1d4>)
 8000e72:	f00c fb6f 	bl	800d554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8000e76:	f24d 2303 	movw	r3, #53763	; 0xd203
 8000e7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e90:	230e      	movs	r3, #14
 8000e92:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e96:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4820      	ldr	r0, [pc, #128]	; (8000f20 <HAL_LTDC_MspInit+0x1d8>)
 8000e9e:	f00c fb59 	bl	800d554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8000ea2:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000ea6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ebc:	230e      	movs	r3, #14
 8000ebe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000ec2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4816      	ldr	r0, [pc, #88]	; (8000f24 <HAL_LTDC_MspInit+0x1dc>)
 8000eca:	f00c fb43 	bl	800d554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ece:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ed2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ee8:	230e      	movs	r3, #14
 8000eea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000eee:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	480c      	ldr	r0, [pc, #48]	; (8000f28 <HAL_LTDC_MspInit+0x1e0>)
 8000ef6:	f00c fb2d 	bl	800d554 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2105      	movs	r1, #5
 8000efe:	2058      	movs	r0, #88	; 0x58
 8000f00:	f00c f818 	bl	800cf34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000f04:	2058      	movs	r0, #88	; 0x58
 8000f06:	f00c f82f 	bl	800cf68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8000f0a:	bf00      	nop
 8000f0c:	37f0      	adds	r7, #240	; 0xf0
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	50001000 	.word	0x50001000
 8000f18:	58024400 	.word	0x58024400
 8000f1c:	58022800 	.word	0x58022800
 8000f20:	58022000 	.word	0x58022000
 8000f24:	58022400 	.word	0x58022400
 8000f28:	58021c00 	.word	0x58021c00

08000f2c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b0bc      	sub	sp, #240	; 0xf0
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f44:	f107 0320 	add.w	r3, r7, #32
 8000f48:	22bc      	movs	r2, #188	; 0xbc
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f024 f871 	bl	8025034 <memset>
  if(hqspi->Instance==QUADSPI)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a76      	ldr	r2, [pc, #472]	; (8001130 <HAL_QSPI_MspInit+0x204>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	f040 80e4 	bne.w	8001126 <HAL_QSPI_MspInit+0x1fa>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8000f5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f62:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000f64:	2300      	movs	r3, #0
 8000f66:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f68:	f107 0320 	add.w	r3, r7, #32
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f010 f8d7 	bl	8011120 <HAL_RCCEx_PeriphCLKConfig>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8000f78:	f7ff fdd0 	bl	8000b1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000f7c:	4b6d      	ldr	r3, [pc, #436]	; (8001134 <HAL_QSPI_MspInit+0x208>)
 8000f7e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f82:	4a6c      	ldr	r2, [pc, #432]	; (8001134 <HAL_QSPI_MspInit+0x208>)
 8000f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f88:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000f8c:	4b69      	ldr	r3, [pc, #420]	; (8001134 <HAL_QSPI_MspInit+0x208>)
 8000f8e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f96:	61fb      	str	r3, [r7, #28]
 8000f98:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f9a:	4b66      	ldr	r3, [pc, #408]	; (8001134 <HAL_QSPI_MspInit+0x208>)
 8000f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa0:	4a64      	ldr	r2, [pc, #400]	; (8001134 <HAL_QSPI_MspInit+0x208>)
 8000fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000faa:	4b62      	ldr	r3, [pc, #392]	; (8001134 <HAL_QSPI_MspInit+0x208>)
 8000fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fb4:	61bb      	str	r3, [r7, #24]
 8000fb6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fb8:	4b5e      	ldr	r3, [pc, #376]	; (8001134 <HAL_QSPI_MspInit+0x208>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fbe:	4a5d      	ldr	r2, [pc, #372]	; (8001134 <HAL_QSPI_MspInit+0x208>)
 8000fc0:	f043 0320 	orr.w	r3, r3, #32
 8000fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc8:	4b5a      	ldr	r3, [pc, #360]	; (8001134 <HAL_QSPI_MspInit+0x208>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fce:	f003 0320 	and.w	r3, r3, #32
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fd6:	4b57      	ldr	r3, [pc, #348]	; (8001134 <HAL_QSPI_MspInit+0x208>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fdc:	4a55      	ldr	r2, [pc, #340]	; (8001134 <HAL_QSPI_MspInit+0x208>)
 8000fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe6:	4b53      	ldr	r3, [pc, #332]	; (8001134 <HAL_QSPI_MspInit+0x208>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff4:	4b4f      	ldr	r3, [pc, #316]	; (8001134 <HAL_QSPI_MspInit+0x208>)
 8000ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffa:	4a4e      	ldr	r2, [pc, #312]	; (8001134 <HAL_QSPI_MspInit+0x208>)
 8000ffc:	f043 0308 	orr.w	r3, r3, #8
 8001000:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001004:	4b4b      	ldr	r3, [pc, #300]	; (8001134 <HAL_QSPI_MspInit+0x208>)
 8001006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100a:	f003 0308 	and.w	r3, r3, #8
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8001012:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001016:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800102c:	2309      	movs	r3, #9
 800102e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001032:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001036:	4619      	mov	r1, r3
 8001038:	483f      	ldr	r0, [pc, #252]	; (8001138 <HAL_QSPI_MspInit+0x20c>)
 800103a:	f00c fa8b 	bl	800d554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800103e:	2340      	movs	r3, #64	; 0x40
 8001040:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800104a:	2301      	movs	r3, #1
 800104c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001056:	230a      	movs	r3, #10
 8001058:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800105c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001060:	4619      	mov	r1, r3
 8001062:	4835      	ldr	r0, [pc, #212]	; (8001138 <HAL_QSPI_MspInit+0x20c>)
 8001064:	f00c fa76 	bl	800d554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8001068:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800106c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107c:	2303      	movs	r3, #3
 800107e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001082:	2309      	movs	r3, #9
 8001084:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001088:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800108c:	4619      	mov	r1, r3
 800108e:	482b      	ldr	r0, [pc, #172]	; (800113c <HAL_QSPI_MspInit+0x210>)
 8001090:	f00c fa60 	bl	800d554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001094:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001098:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a8:	2303      	movs	r3, #3
 80010aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80010ae:	230a      	movs	r3, #10
 80010b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010b8:	4619      	mov	r1, r3
 80010ba:	4820      	ldr	r0, [pc, #128]	; (800113c <HAL_QSPI_MspInit+0x210>)
 80010bc:	f00c fa4a 	bl	800d554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010c0:	230c      	movs	r3, #12
 80010c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80010d8:	2309      	movs	r3, #9
 80010da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010de:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010e2:	4619      	mov	r1, r3
 80010e4:	4816      	ldr	r0, [pc, #88]	; (8001140 <HAL_QSPI_MspInit+0x214>)
 80010e6:	f00c fa35 	bl	800d554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2302      	movs	r3, #2
 80010f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fe:	2303      	movs	r3, #3
 8001100:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001104:	2309      	movs	r3, #9
 8001106:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800110a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800110e:	4619      	mov	r1, r3
 8001110:	480c      	ldr	r0, [pc, #48]	; (8001144 <HAL_QSPI_MspInit+0x218>)
 8001112:	f00c fa1f 	bl	800d554 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2105      	movs	r1, #5
 800111a:	205c      	movs	r0, #92	; 0x5c
 800111c:	f00b ff0a 	bl	800cf34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8001120:	205c      	movs	r0, #92	; 0x5c
 8001122:	f00b ff21 	bl	800cf68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001126:	bf00      	nop
 8001128:	37f0      	adds	r7, #240	; 0xf0
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	52005000 	.word	0x52005000
 8001134:	58024400 	.word	0x58024400
 8001138:	58021800 	.word	0x58021800
 800113c:	58021400 	.word	0x58021400
 8001140:	58021c00 	.word	0x58021c00
 8001144:	58020c00 	.word	0x58020c00

08001148 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001148:	b580      	push	{r7, lr}
 800114a:	b0b6      	sub	sp, #216	; 0xd8
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800114e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
 800115c:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800115e:	4b4f      	ldr	r3, [pc, #316]	; (800129c <HAL_FMC_MspInit+0x154>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	f040 8096 	bne.w	8001294 <HAL_FMC_MspInit+0x14c>
    return;
  }
  FMC_Initialized = 1;
 8001168:	4b4c      	ldr	r3, [pc, #304]	; (800129c <HAL_FMC_MspInit+0x154>)
 800116a:	2201      	movs	r2, #1
 800116c:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800116e:	f107 0308 	add.w	r3, r7, #8
 8001172:	22bc      	movs	r2, #188	; 0xbc
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f023 ff5c 	bl	8025034 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800117c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001180:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8001182:	2300      	movs	r3, #0
 8001184:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001186:	f107 0308 	add.w	r3, r7, #8
 800118a:	4618      	mov	r0, r3
 800118c:	f00f ffc8 	bl	8011120 <HAL_RCCEx_PeriphCLKConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_FMC_MspInit+0x52>
    {
      Error_Handler();
 8001196:	f7ff fcc1 	bl	8000b1c <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800119a:	4b41      	ldr	r3, [pc, #260]	; (80012a0 <HAL_FMC_MspInit+0x158>)
 800119c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80011a0:	4a3f      	ldr	r2, [pc, #252]	; (80012a0 <HAL_FMC_MspInit+0x158>)
 80011a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011a6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80011aa:	4b3d      	ldr	r3, [pc, #244]	; (80012a0 <HAL_FMC_MspInit+0x158>)
 80011ac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80011b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 80011b8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80011bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c0:	2302      	movs	r3, #2
 80011c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011cc:	2303      	movs	r3, #3
 80011ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011d2:	230c      	movs	r3, #12
 80011d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011dc:	4619      	mov	r1, r3
 80011de:	4831      	ldr	r0, [pc, #196]	; (80012a4 <HAL_FMC_MspInit+0x15c>)
 80011e0:	f00c f9b8 	bl	800d554 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80011e4:	f248 1333 	movw	r3, #33075	; 0x8133
 80011e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f8:	2303      	movs	r3, #3
 80011fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011fe:	230c      	movs	r3, #12
 8001200:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001204:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001208:	4619      	mov	r1, r3
 800120a:	4827      	ldr	r0, [pc, #156]	; (80012a8 <HAL_FMC_MspInit+0x160>)
 800120c:	f00c f9a2 	bl	800d554 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001210:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001214:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001224:	2303      	movs	r3, #3
 8001226:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800122a:	230c      	movs	r3, #12
 800122c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001230:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001234:	4619      	mov	r1, r3
 8001236:	481d      	ldr	r0, [pc, #116]	; (80012ac <HAL_FMC_MspInit+0x164>)
 8001238:	f00c f98c 	bl	800d554 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800123c:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001240:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001250:	2303      	movs	r3, #3
 8001252:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001256:	230c      	movs	r3, #12
 8001258:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800125c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001260:	4619      	mov	r1, r3
 8001262:	4813      	ldr	r0, [pc, #76]	; (80012b0 <HAL_FMC_MspInit+0x168>)
 8001264:	f00c f976 	bl	800d554 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001268:	23e0      	movs	r3, #224	; 0xe0
 800126a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127a:	2303      	movs	r3, #3
 800127c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001280:	230c      	movs	r3, #12
 8001282:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001286:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800128a:	4619      	mov	r1, r3
 800128c:	4809      	ldr	r0, [pc, #36]	; (80012b4 <HAL_FMC_MspInit+0x16c>)
 800128e:	f00c f961 	bl	800d554 <HAL_GPIO_Init>
 8001292:	e000      	b.n	8001296 <HAL_FMC_MspInit+0x14e>
    return;
 8001294:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001296:	37d8      	adds	r7, #216	; 0xd8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	24000304 	.word	0x24000304
 80012a0:	58024400 	.word	0x58024400
 80012a4:	58021000 	.word	0x58021000
 80012a8:	58021800 	.word	0x58021800
 80012ac:	58020c00 	.word	0x58020c00
 80012b0:	58021400 	.word	0x58021400
 80012b4:	58021c00 	.word	0x58021c00

080012b8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80012c0:	f7ff ff42 	bl	8001148 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <HAL_FMC_MspDeInit>:

static uint32_t FMC_DeInitialized = 0;

static void HAL_FMC_MspDeInit(void){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 80012d0:	4b14      	ldr	r3, [pc, #80]	; (8001324 <HAL_FMC_MspDeInit+0x58>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d123      	bne.n	8001320 <HAL_FMC_MspDeInit+0x54>
    return;
  }
  FMC_DeInitialized = 1;
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <HAL_FMC_MspDeInit+0x58>)
 80012da:	2201      	movs	r2, #1
 80012dc:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_DISABLE();
 80012de:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HAL_FMC_MspDeInit+0x5c>)
 80012e0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80012e4:	4a10      	ldr	r2, [pc, #64]	; (8001328 <HAL_FMC_MspDeInit+0x5c>)
 80012e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012ea:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 80012ee:	f64f 7183 	movw	r1, #65411	; 0xff83
 80012f2:	480e      	ldr	r0, [pc, #56]	; (800132c <HAL_FMC_MspDeInit+0x60>)
 80012f4:	f00c fade 	bl	800d8b4 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14);

  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80012f8:	f248 1133 	movw	r1, #33075	; 0x8133
 80012fc:	480c      	ldr	r0, [pc, #48]	; (8001330 <HAL_FMC_MspDeInit+0x64>)
 80012fe:	f00c fad9 	bl	800d8b4 <HAL_GPIO_DeInit>
                          |GPIO_PIN_0|GPIO_PIN_1);

  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001302:	f24c 7103 	movw	r1, #50947	; 0xc703
 8001306:	480b      	ldr	r0, [pc, #44]	; (8001334 <HAL_FMC_MspDeInit+0x68>)
 8001308:	f00c fad4 	bl	800d8b4 <HAL_GPIO_DeInit>
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8);

  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800130c:	f64f 013f 	movw	r1, #63551	; 0xf83f
 8001310:	4809      	ldr	r0, [pc, #36]	; (8001338 <HAL_FMC_MspDeInit+0x6c>)
 8001312:	f00c facf 	bl	800d8b4 <HAL_GPIO_DeInit>
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11);

  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8001316:	21e0      	movs	r1, #224	; 0xe0
 8001318:	4808      	ldr	r0, [pc, #32]	; (800133c <HAL_FMC_MspDeInit+0x70>)
 800131a:	f00c facb 	bl	800d8b4 <HAL_GPIO_DeInit>
 800131e:	e000      	b.n	8001322 <HAL_FMC_MspDeInit+0x56>
    return;
 8001320:	bf00      	nop

  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}
 8001322:	bd80      	pop	{r7, pc}
 8001324:	24000308 	.word	0x24000308
 8001328:	58024400 	.word	0x58024400
 800132c:	58021000 	.word	0x58021000
 8001330:	58021800 	.word	0x58021800
 8001334:	58020c00 	.word	0x58020c00
 8001338:	58021400 	.word	0x58021400
 800133c:	58021c00 	.word	0x58021c00

08001340 <HAL_SDRAM_MspDeInit>:

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspDeInit 0 */

  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
 8001348:	f7ff ffc0 	bl	80012cc <HAL_FMC_MspDeInit>
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b090      	sub	sp, #64	; 0x40
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b0f      	cmp	r3, #15
 8001360:	d827      	bhi.n	80013b2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001362:	2200      	movs	r2, #0
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	2036      	movs	r0, #54	; 0x36
 8001368:	f00b fde4 	bl	800cf34 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800136c:	2036      	movs	r0, #54	; 0x36
 800136e:	f00b fdfb 	bl	800cf68 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001372:	4a29      	ldr	r2, [pc, #164]	; (8001418 <HAL_InitTick+0xc4>)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001378:	4b28      	ldr	r3, [pc, #160]	; (800141c <HAL_InitTick+0xc8>)
 800137a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800137e:	4a27      	ldr	r2, [pc, #156]	; (800141c <HAL_InitTick+0xc8>)
 8001380:	f043 0310 	orr.w	r3, r3, #16
 8001384:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001388:	4b24      	ldr	r3, [pc, #144]	; (800141c <HAL_InitTick+0xc8>)
 800138a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800138e:	f003 0310 	and.w	r3, r3, #16
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001396:	f107 0210 	add.w	r2, r7, #16
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4611      	mov	r1, r2
 80013a0:	4618      	mov	r0, r3
 80013a2:	f00f fe7b 	bl	801109c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d106      	bne.n	80013be <HAL_InitTick+0x6a>
 80013b0:	e001      	b.n	80013b6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e02b      	b.n	800140e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013b6:	f00f fe45 	bl	8011044 <HAL_RCC_GetPCLK1Freq>
 80013ba:	63f8      	str	r0, [r7, #60]	; 0x3c
 80013bc:	e004      	b.n	80013c8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013be:	f00f fe41 	bl	8011044 <HAL_RCC_GetPCLK1Freq>
 80013c2:	4603      	mov	r3, r0
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013ca:	4a15      	ldr	r2, [pc, #84]	; (8001420 <HAL_InitTick+0xcc>)
 80013cc:	fba2 2303 	umull	r2, r3, r2, r3
 80013d0:	0c9b      	lsrs	r3, r3, #18
 80013d2:	3b01      	subs	r3, #1
 80013d4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <HAL_InitTick+0xd0>)
 80013d8:	4a13      	ldr	r2, [pc, #76]	; (8001428 <HAL_InitTick+0xd4>)
 80013da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <HAL_InitTick+0xd0>)
 80013de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013e2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013e4:	4a0f      	ldr	r2, [pc, #60]	; (8001424 <HAL_InitTick+0xd0>)
 80013e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013e8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <HAL_InitTick+0xd0>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <HAL_InitTick+0xd0>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80013f6:	480b      	ldr	r0, [pc, #44]	; (8001424 <HAL_InitTick+0xd0>)
 80013f8:	f010 fff1 	bl	80123de <HAL_TIM_Base_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d104      	bne.n	800140c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001402:	4808      	ldr	r0, [pc, #32]	; (8001424 <HAL_InitTick+0xd0>)
 8001404:	f011 f84c 	bl	80124a0 <HAL_TIM_Base_Start_IT>
 8001408:	4603      	mov	r3, r0
 800140a:	e000      	b.n	800140e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
}
 800140e:	4618      	mov	r0, r3
 8001410:	3740      	adds	r7, #64	; 0x40
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	24000048 	.word	0x24000048
 800141c:	58024400 	.word	0x58024400
 8001420:	431bde83 	.word	0x431bde83
 8001424:	2400030c 	.word	0x2400030c
 8001428:	40001000 	.word	0x40001000

0800142c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <NMI_Handler+0x4>

08001432 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001436:	e7fe      	b.n	8001436 <HardFault_Handler+0x4>

08001438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <MemManage_Handler+0x4>

0800143e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001442:	e7fe      	b.n	8001442 <BusFault_Handler+0x4>

08001444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <UsageFault_Handler+0x4>

0800144a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <TIM6_DAC_IRQHandler+0x10>)
 800145e:	f011 f897 	bl	8012590 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	2400030c 	.word	0x2400030c

0800146c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <LTDC_IRQHandler+0x10>)
 8001472:	f00d fa87 	bl	800e984 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	240001d4 	.word	0x240001d4

08001480 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001484:	4802      	ldr	r0, [pc, #8]	; (8001490 <DMA2D_IRQHandler+0x10>)
 8001486:	f00b ff55 	bl	800d334 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	2400016c 	.word	0x2400016c

08001494 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8001498:	4802      	ldr	r0, [pc, #8]	; (80014a4 <QUADSPI_IRQHandler+0x10>)
 800149a:	f00d ff6d 	bl	800f378 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	2400027c 	.word	0x2400027c

080014a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
	return 1;
 80014ac:	2301      	movs	r3, #1
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <_kill>:

int _kill(int pid, int sig)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014c2:	f023 fd5d 	bl	8024f80 <__errno>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2216      	movs	r2, #22
 80014ca:	601a      	str	r2, [r3, #0]
	return -1;
 80014cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <_exit>:

void _exit (int status)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014e0:	f04f 31ff 	mov.w	r1, #4294967295
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ffe7 	bl	80014b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014ea:	e7fe      	b.n	80014ea <_exit+0x12>

080014ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	e00a      	b.n	8001514 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014fe:	f3af 8000 	nop.w
 8001502:	4601      	mov	r1, r0
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	1c5a      	adds	r2, r3, #1
 8001508:	60ba      	str	r2, [r7, #8]
 800150a:	b2ca      	uxtb	r2, r1
 800150c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	3301      	adds	r3, #1
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	429a      	cmp	r2, r3
 800151a:	dbf0      	blt.n	80014fe <_read+0x12>
	}

return len;
 800151c:	687b      	ldr	r3, [r7, #4]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b086      	sub	sp, #24
 800152a:	af00      	add	r7, sp, #0
 800152c:	60f8      	str	r0, [r7, #12]
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	e009      	b.n	800154c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	60ba      	str	r2, [r7, #8]
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	3301      	adds	r3, #1
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	697a      	ldr	r2, [r7, #20]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	429a      	cmp	r2, r3
 8001552:	dbf1      	blt.n	8001538 <_write+0x12>
	}
	return len;
 8001554:	687b      	ldr	r3, [r7, #4]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <_close>:

int _close(int file)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
	return -1;
 8001566:	f04f 33ff 	mov.w	r3, #4294967295
}
 800156a:	4618      	mov	r0, r3
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001586:	605a      	str	r2, [r3, #4]
	return 0;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <_isatty>:

int _isatty(int file)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
	return 1;
 800159e:	2301      	movs	r3, #1
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
	return 0;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
	...

080015c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d0:	4a14      	ldr	r2, [pc, #80]	; (8001624 <_sbrk+0x5c>)
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <_sbrk+0x60>)
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015dc:	4b13      	ldr	r3, [pc, #76]	; (800162c <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d102      	bne.n	80015ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <_sbrk+0x64>)
 80015e6:	4a12      	ldr	r2, [pc, #72]	; (8001630 <_sbrk+0x68>)
 80015e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d207      	bcs.n	8001608 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f8:	f023 fcc2 	bl	8024f80 <__errno>
 80015fc:	4603      	mov	r3, r0
 80015fe:	220c      	movs	r2, #12
 8001600:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
 8001606:	e009      	b.n	800161c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <_sbrk+0x64>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800160e:	4b07      	ldr	r3, [pc, #28]	; (800162c <_sbrk+0x64>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	4a05      	ldr	r2, [pc, #20]	; (800162c <_sbrk+0x64>)
 8001618:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800161a:	68fb      	ldr	r3, [r7, #12]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	24080000 	.word	0x24080000
 8001628:	00001000 	.word	0x00001000
 800162c:	24000358 	.word	0x24000358
 8001630:	2400b328 	.word	0x2400b328

08001634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001634:	f8df d034 	ldr.w	sp, [pc, #52]	; 800166c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001638:	f008 ff06 	bl	800a448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800163c:	480c      	ldr	r0, [pc, #48]	; (8001670 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800163e:	490d      	ldr	r1, [pc, #52]	; (8001674 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001640:	4a0d      	ldr	r2, [pc, #52]	; (8001678 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001644:	e002      	b.n	800164c <LoopCopyDataInit>

08001646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164a:	3304      	adds	r3, #4

0800164c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800164c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001650:	d3f9      	bcc.n	8001646 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001652:	4a0a      	ldr	r2, [pc, #40]	; (800167c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001654:	4c0a      	ldr	r4, [pc, #40]	; (8001680 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001658:	e001      	b.n	800165e <LoopFillZerobss>

0800165a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800165c:	3204      	adds	r2, #4

0800165e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001660:	d3fb      	bcc.n	800165a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001662:	f023 fca5 	bl	8024fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001666:	f7fe fe8b 	bl	8000380 <main>
  bx  lr
 800166a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800166c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001670:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001674:	2400012c 	.word	0x2400012c
  ldr r2, =_sidata
 8001678:	080282c4 	.word	0x080282c4
  ldr r2, =_sbss
 800167c:	2400012c 	.word	0x2400012c
  ldr r4, =_ebss
 8001680:	2400b328 	.word	0x2400b328

08001684 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001684:	e7fe      	b.n	8001684 <ADC3_IRQHandler>

08001686 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 800168a:	f001 fd29 	bl	80030e0 <touchgfx_init>
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}

08001692 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800169a:	f001 fd4b 	bl	8003134 <touchgfx_taskEntry>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
    {
 80016b0:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	601a      	str	r2, [r3, #0]
    }
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	08026e1c 	.word	0x08026e1c

080016c8 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
    }
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ffe9 	bl	80016a8 <_ZN8touchgfx15TouchControllerD1Ev>
 80016d6:	2104      	movs	r1, #4
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f023 fbf0 	bl	8024ebe <_ZdlPvj>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "stm32h745i_touchcontroller.hpp"

void STM32TouchController::init()
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
    STM32H745ITouchController::init();
 80016f0:	f000 fb50 	bl	8001d94 <_ZN25STM32H745ITouchController4initEv>
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return STM32H745ITouchController::sampleTouch(x, y);
 8001708:	6879      	ldr	r1, [r7, #4]
 800170a:	68b8      	ldr	r0, [r7, #8]
 800170c:	f000 fb66 	bl	8001ddc <_ZN25STM32H745ITouchController11sampleTouchERlS0_>
 8001710:	4603      	mov	r3, r0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	4a05      	ldr	r2, [pc, #20]	; (800173c <_ZN20STM32TouchControllerD1Ev+0x20>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ffbb 	bl	80016a8 <_ZN8touchgfx15TouchControllerD1Ev>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	08026e04 	.word	0x08026e04

08001740 <_ZN20STM32TouchControllerD0Ev>:
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ffe7 	bl	800171c <_ZN20STM32TouchControllerD1Ev>
 800174e:	2104      	movs	r1, #4
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f023 fbb4 	bl	8024ebe <_ZdlPvj>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	2b03      	cmp	r3, #3
 800176e:	d847      	bhi.n	8001800 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa0>
 8001770:	a201      	add	r2, pc, #4	; (adr r2, 8001778 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8001772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001776:	bf00      	nop
 8001778:	08001789 	.word	0x08001789
 800177c:	080017a7 	.word	0x080017a7
 8001780:	080017c5 	.word	0x080017c5
 8001784:	080017e3 	.word	0x080017e3
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	4a1f      	ldr	r2, [pc, #124]	; (8001808 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>)
 800178c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001790:	2b00      	cmp	r3, #0
 8001792:	bf0c      	ite	eq
 8001794:	2301      	moveq	r3, #1
 8001796:	2300      	movne	r3, #0
 8001798:	b2db      	uxtb	r3, r3
 800179a:	461a      	mov	r2, r3
 800179c:	2140      	movs	r1, #64	; 0x40
 800179e:	481b      	ldr	r0, [pc, #108]	; (800180c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xac>)
 80017a0:	f00c f992 	bl	800dac8 <HAL_GPIO_WritePin>
#endif
        break;
 80017a4:	e02c      	b.n	8001800 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa0>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	4a17      	ldr	r2, [pc, #92]	; (8001808 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>)
 80017aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	bf0c      	ite	eq
 80017b2:	2301      	moveq	r3, #1
 80017b4:	2300      	movne	r3, #0
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	461a      	mov	r2, r3
 80017ba:	2180      	movs	r1, #128	; 0x80
 80017bc:	4813      	ldr	r0, [pc, #76]	; (800180c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xac>)
 80017be:	f00c f983 	bl	800dac8 <HAL_GPIO_WritePin>
#endif
        break;
 80017c2:	e01d      	b.n	8001800 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa0>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	4a10      	ldr	r2, [pc, #64]	; (8001808 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>)
 80017c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	bf0c      	ite	eq
 80017d0:	2301      	moveq	r3, #1
 80017d2:	2300      	movne	r3, #0
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	461a      	mov	r2, r3
 80017d8:	2108      	movs	r1, #8
 80017da:	480d      	ldr	r0, [pc, #52]	; (8001810 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb0>)
 80017dc:	f00c f974 	bl	800dac8 <HAL_GPIO_WritePin>
#endif
        break;
 80017e0:	e00e      	b.n	8001800 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa0>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	4a08      	ldr	r2, [pc, #32]	; (8001808 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>)
 80017e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	bf0c      	ite	eq
 80017ee:	2301      	moveq	r3, #1
 80017f0:	2300      	movne	r3, #0
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	461a      	mov	r2, r3
 80017f6:	2140      	movs	r1, #64	; 0x40
 80017f8:	4806      	ldr	r0, [pc, #24]	; (8001814 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb4>)
 80017fa:	f00c f965 	bl	800dac8 <HAL_GPIO_WritePin>
#endif
        break;
 80017fe:	bf00      	nop
    }
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	2400035c 	.word	0x2400035c
 800180c:	58020400 	.word	0x58020400
 8001810:	58021800 	.word	0x58021800
 8001814:	58020000 	.word	0x58020000

08001818 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	2b03      	cmp	r3, #3
 8001826:	d847      	bhi.n	80018b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa0>
 8001828:	a201      	add	r2, pc, #4	; (adr r2, 8001830 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 800182a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182e:	bf00      	nop
 8001830:	08001841 	.word	0x08001841
 8001834:	0800185f 	.word	0x0800185f
 8001838:	0800187d 	.word	0x0800187d
 800183c:	0800189b 	.word	0x0800189b
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	4a1f      	ldr	r2, [pc, #124]	; (80018c0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>)
 8001844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x38>
 800184c:	2301      	movs	r3, #1
 800184e:	e000      	b.n	8001852 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x3a>
 8001850:	2300      	movs	r3, #0
 8001852:	461a      	mov	r2, r3
 8001854:	2140      	movs	r1, #64	; 0x40
 8001856:	481b      	ldr	r0, [pc, #108]	; (80018c4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xac>)
 8001858:	f00c f936 	bl	800dac8 <HAL_GPIO_WritePin>
#endif
        break;
 800185c:	e02c      	b.n	80018b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa0>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	4a17      	ldr	r2, [pc, #92]	; (80018c0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>)
 8001862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x56>
 800186a:	2301      	movs	r3, #1
 800186c:	e000      	b.n	8001870 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>
 800186e:	2300      	movs	r3, #0
 8001870:	461a      	mov	r2, r3
 8001872:	2180      	movs	r1, #128	; 0x80
 8001874:	4813      	ldr	r0, [pc, #76]	; (80018c4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xac>)
 8001876:	f00c f927 	bl	800dac8 <HAL_GPIO_WritePin>
#endif
        break;
 800187a:	e01d      	b.n	80018b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa0>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	4a10      	ldr	r2, [pc, #64]	; (80018c0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>)
 8001880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>
 8001888:	2301      	movs	r3, #1
 800188a:	e000      	b.n	800188e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x76>
 800188c:	2300      	movs	r3, #0
 800188e:	461a      	mov	r2, r3
 8001890:	2108      	movs	r1, #8
 8001892:	480d      	ldr	r0, [pc, #52]	; (80018c8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb0>)
 8001894:	f00c f918 	bl	800dac8 <HAL_GPIO_WritePin>
#endif
        break;
 8001898:	e00e      	b.n	80018b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa0>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	4a08      	ldr	r2, [pc, #32]	; (80018c0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>)
 800189e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x92>
 80018a6:	2301      	movs	r3, #1
 80018a8:	e000      	b.n	80018ac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x94>
 80018aa:	2300      	movs	r3, #0
 80018ac:	461a      	mov	r2, r3
 80018ae:	2140      	movs	r1, #64	; 0x40
 80018b0:	4806      	ldr	r0, [pc, #24]	; (80018cc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb4>)
 80018b2:	f00c f909 	bl	800dac8 <HAL_GPIO_WritePin>
#endif
        break;
 80018b6:	bf00      	nop
    }
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	2400035c 	.word	0x2400035c
 80018c4:	58020400 	.word	0x58020400
 80018c8:	58021800 	.word	0x58021800
 80018cc:	58020000 	.word	0x58020000

080018d0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	2b03      	cmp	r3, #3
 80018de:	d81f      	bhi.n	8001920 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x50>
 80018e0:	a201      	add	r2, pc, #4	; (adr r2, 80018e8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 80018e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e6:	bf00      	nop
 80018e8:	080018f9 	.word	0x080018f9
 80018ec:	08001903 	.word	0x08001903
 80018f0:	0800190d 	.word	0x0800190d
 80018f4:	08001917 	.word	0x08001917
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80018f8:	2140      	movs	r1, #64	; 0x40
 80018fa:	480b      	ldr	r0, [pc, #44]	; (8001928 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>)
 80018fc:	f00c f8fd 	bl	800dafa <HAL_GPIO_TogglePin>
#endif
        break;
 8001900:	e00e      	b.n	8001920 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x50>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001902:	2180      	movs	r1, #128	; 0x80
 8001904:	4808      	ldr	r0, [pc, #32]	; (8001928 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>)
 8001906:	f00c f8f8 	bl	800dafa <HAL_GPIO_TogglePin>
#endif
        break;
 800190a:	e009      	b.n	8001920 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x50>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 800190c:	2108      	movs	r1, #8
 800190e:	4807      	ldr	r0, [pc, #28]	; (800192c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x5c>)
 8001910:	f00c f8f3 	bl	800dafa <HAL_GPIO_TogglePin>
#endif
        break;
 8001914:	e004      	b.n	8001920 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x50>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001916:	2140      	movs	r1, #64	; 0x40
 8001918:	4805      	ldr	r0, [pc, #20]	; (8001930 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 800191a:	f00c f8ee 	bl	800dafa <HAL_GPIO_TogglePin>
#endif
        break;
 800191e:	bf00      	nop
    }
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	58020400 	.word	0x58020400
 800192c:	58021800 	.word	0x58021800
 8001930:	58020000 	.word	0x58020000

08001934 <_ZN8touchgfx3HALD1Ev>:
        DISPLAY_ROTATION = rotate0;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
    {
 800193c:	4a04      	ldr	r2, [pc, #16]	; (8001950 <_ZN8touchgfx3HALD1Ev+0x1c>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	601a      	str	r2, [r3, #0]
    }
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	080279bc 	.word	0x080279bc

08001954 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
    }
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff ffe9 	bl	8001934 <_ZN8touchgfx3HALD1Ev>
 8001962:	217c      	movs	r1, #124	; 0x7c
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f023 faaa 	bl	8024ebe <_ZdlPvj>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	78fa      	ldrb	r2, [r7, #3]
 8001984:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	807b      	strh	r3, [r7, #2]
 80019a8:	4613      	mov	r3, r2
 80019aa:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	887a      	ldrh	r2, [r7, #2]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d304      	bcc.n	80019c0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	883a      	ldrh	r2, [r7, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d205      	bcs.n	80019cc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 80019c2:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 80019c4:	219e      	movs	r1, #158	; 0x9e
 80019c6:	480a      	ldr	r0, [pc, #40]	; (80019f0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 80019c8:	f023 faa8 	bl	8024f1c <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 80019cc:	4a09      	ldr	r2, [pc, #36]	; (80019f4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 80019ce:	887b      	ldrh	r3, [r7, #2]
 80019d0:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 80019d2:	4a09      	ldr	r2, [pc, #36]	; (80019f8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 80019d4:	883b      	ldrh	r3, [r7, #0]
 80019d6:	8013      	strh	r3, [r2, #0]
    }
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	2400b078 	.word	0x2400b078
 80019e4:	2400b07a 	.word	0x2400b07a
 80019e8:	080260b0 	.word	0x080260b0
 80019ec:	08026114 	.word	0x08026114
 80019f0:	08026158 	.word	0x08026158
 80019f4:	2400b07e 	.word	0x2400b07e
 80019f8:	2400b080 	.word	0x2400b080

080019fc <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d009      	beq.n	8001a22 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4798      	blx	r3
 8001a1e:	4603      	mov	r3, r0
 8001a20:	e000      	b.n	8001a24 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8001a22:	2300      	movs	r3, #0
    }
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f012 f937 	bl	8013ca8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	33ac      	adds	r3, #172	; 0xac
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	4798      	blx	r3
    }
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 8001a58:	2300      	movs	r3, #0
    }
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
 8001a74:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d106      	bne.n	8001a8a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8001a7e:	4a10      	ldr	r2, [pc, #64]	; (8001ac0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8001a80:	f240 21d2 	movw	r1, #722	; 0x2d2
 8001a84:	480f      	ldr	r0, [pc, #60]	; (8001ac4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8001a86:	f023 fa49 	bl	8024f1c <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	68ba      	ldr	r2, [r7, #8]
 8001a8e:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	bf14      	ite	ne
 8001a9c:	2301      	movne	r3, #1
 8001a9e:	2300      	moveq	r3, #0
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8001aa4:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	338c      	adds	r3, #140	; 0x8c
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6839      	ldr	r1, [r7, #0]
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	4798      	blx	r3
    }
 8001ab4:	bf00      	nop
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	080261ac 	.word	0x080261ac
 8001ac0:	080261e4 	.word	0x080261e4
 8001ac4:	08026158 	.word	0x08026158
 8001ac8:	2400b082 	.word	0x2400b082

08001acc <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	bf14      	ite	ne
 8001ae2:	2301      	movne	r3, #1
 8001ae4:	2300      	moveq	r3, #0
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 8001aea:	701a      	strb	r2, [r3, #0]
    }
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	2400b083 	.word	0x2400b083

08001afc <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8001b04:	2300      	movs	r3, #0
    }
 8001b06:	4618      	mov	r0, r3
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d004      	beq.n	8001b30 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b2a:	887a      	ldrh	r2, [r7, #2]
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4798      	blx	r3
        }
    }
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8001b40:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	3318      	adds	r3, #24
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4610      	mov	r0, r2
 8001b68:	4798      	blx	r3
 8001b6a:	4603      	mov	r3, r0
    }
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d011      	beq.n	8001bb0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8001b8c:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d11e      	bne.n	8001bd2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001b94:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001b96:	881b      	ldrh	r3, [r3, #0]
 8001b98:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b9a:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001b9c:	881a      	ldrh	r2, [r3, #0]
 8001b9e:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001ba0:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8001ba2:	4a11      	ldr	r2, [pc, #68]	; (8001be8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001ba4:	89bb      	ldrh	r3, [r7, #12]
 8001ba6:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001ba8:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8001bae:	e010      	b.n	8001bd2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00c      	beq.n	8001bd2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001bc0:	881a      	ldrh	r2, [r3, #0]
 8001bc2:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001bc4:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8001bc6:	4a08      	ldr	r2, [pc, #32]	; (8001be8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001bc8:	89fb      	ldrh	r3, [r7, #14]
 8001bca:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001bcc:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
    }
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	2400b07c 	.word	0x2400b07c
 8001be4:	2400b07a 	.word	0x2400b07a
 8001be8:	2400b078 	.word	0x2400b078

08001bec <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f011 fabc 	bl	8013174 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	4a05      	ldr	r2, [pc, #20]	; (8001c24 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fe8d 	bl	8001934 <_ZN8touchgfx3HALD1Ev>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	080271a4 	.word	0x080271a4

08001c28 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ffe7 	bl	8001c04 <_ZN20TouchGFXGeneratedHALD1Ev>
 8001c36:	217c      	movs	r1, #124	; 0x7c
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f023 f940 	bl	8024ebe <_ZdlPvj>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff ffca 	bl	8001bec <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f001 fd52 	bl	8003714 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f001 fde8 	bl	8003858 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8001c88:	4603      	mov	r3, r0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6839      	ldr	r1, [r7, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f001 fde7 	bl	8003874 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6839      	ldr	r1, [r7, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f001 fdef 	bl	80038a0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b084      	sub	sp, #16
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	60f8      	str	r0, [r7, #12]
 8001cd2:	60b9      	str	r1, [r7, #8]
 8001cd4:	607a      	str	r2, [r7, #4]
 8001cd6:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	68b9      	ldr	r1, [r7, #8]
 8001ce0:	f001 fe36 	bl	8003950 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8001ce4:	4603      	mov	r3, r0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f001 fd2f 	bl	800375c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f001 fd33 	bl	800377c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f001 fd35 	bl	8003798 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f001 fd37 	bl	80037b4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <_ZN11TouchGFXHALD1Ev+0x20>)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff4f 	bl	8001c04 <_ZN20TouchGFXGeneratedHALD1Ev>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	08026e34 	.word	0x08026e34

08001d74 <_ZN11TouchGFXHALD0Ev>:
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff ffe7 	bl	8001d50 <_ZN11TouchGFXHALD1Ev>
 8001d82:	217c      	movs	r1, #124	; 0x7c
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f023 f89a 	bl	8024ebe <_ZdlPvj>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <_ZN25STM32H745ITouchController4initEv>:

/**
 * @brief initializes the touch controller
 */
void STM32H745ITouchController::init()
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
    static const uint32_t width = 480;
    static const uint32_t height = 272;

    TS_Init_t config;
    config.Width = width;
 8001d9a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001d9e:	603b      	str	r3, [r7, #0]
    config.Height = height;
 8001da0:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001da4:	607b      	str	r3, [r7, #4]
    config.Orientation = TS_SWAP_XY;
 8001da6:	2308      	movs	r3, #8
 8001da8:	60bb      	str	r3, [r7, #8]
    config.Accuracy = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]

    if (BSP_TS_Init(0, &config) != BSP_ERROR_NONE)
 8001dae:	463b      	mov	r3, r7
 8001db0:	4619      	mov	r1, r3
 8001db2:	2000      	movs	r0, #0
 8001db4:	f00a fd02 	bl	800c7bc <BSP_TS_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	bf14      	ite	ne
 8001dbe:	2301      	movne	r3, #1
 8001dc0:	2300      	moveq	r3, #0
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d103      	bne.n	8001dd0 <_ZN25STM32H745ITouchController4initEv+0x3c>
    {
        return;
    }

    _bsp_ts_initialized = true;
 8001dc8:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <_ZN25STM32H745ITouchController4initEv+0x44>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	701a      	strb	r2, [r3, #0]
 8001dce:	e000      	b.n	8001dd2 <_ZN25STM32H745ITouchController4initEv+0x3e>
        return;
 8001dd0:	bf00      	nop
}
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	2400036c 	.word	0x2400036c

08001ddc <_ZN25STM32H745ITouchController11sampleTouchERlS0_>:
 * @param x touch x coordinate
 * @param y touch y coordinate
 * @return \c true if a touch event was detected, else \c false
 */
bool STM32H745ITouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
    static TS_State_t state;

    if (!_bsp_ts_initialized)
 8001de6:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x50>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	f083 0301 	eor.w	r3, r3, #1
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x1c>
    {
        return false;
 8001df4:	2300      	movs	r3, #0
 8001df6:	e014      	b.n	8001e22 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    BSP_TS_GetState(0, &state);
 8001df8:	490d      	ldr	r1, [pc, #52]	; (8001e30 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f00a fd9a 	bl	800c934 <BSP_TS_GetState>

    if (!state.TouchDetected)
 8001e00:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x30>
    {
        return false;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	e00a      	b.n	8001e22 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    x = state.TouchX;
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	461a      	mov	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	601a      	str	r2, [r3, #0]
    y = state.TouchY;
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	601a      	str	r2, [r3, #0]
    return true;
 8001e20:	2301      	movs	r3, #1
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	2400036c 	.word	0x2400036c
 8001e30:	24000370 	.word	0x24000370

08001e34 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	f005 f83c 	bl	8006eba <osSemaphoreNew>
 8001e42:	4603      	mov	r3, r0
 8001e44:	4a0f      	ldr	r2, [pc, #60]	; (8001e84 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8001e46:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001e48:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d105      	bne.n	8001e5c <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8001e50:	4b0d      	ldr	r3, [pc, #52]	; (8001e88 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8001e52:	4a0e      	ldr	r2, [pc, #56]	; (8001e8c <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8001e54:	2128      	movs	r1, #40	; 0x28
 8001e56:	480e      	ldr	r0, [pc, #56]	; (8001e90 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8001e58:	f023 f860 	bl	8024f1c <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2104      	movs	r1, #4
 8001e60:	2001      	movs	r0, #1
 8001e62:	f005 f949 	bl	80070f8 <osMessageQueueNew>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8001e6a:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d105      	bne.n	8001e80 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8001e76:	4a05      	ldr	r2, [pc, #20]	; (8001e8c <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8001e78:	212c      	movs	r1, #44	; 0x2c
 8001e7a:	4805      	ldr	r0, [pc, #20]	; (8001e90 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8001e7c:	f023 f84e 	bl	8024f1c <__assert_func>
}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	2400037c 	.word	0x2400037c
 8001e88:	08026234 	.word	0x08026234
 8001e8c:	08026280 	.word	0x08026280
 8001e90:	080262b0 	.word	0x080262b0
 8001e94:	24000380 	.word	0x24000380
 8001e98:	08026330 	.word	0x08026330

08001e9c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f005 f88f 	bl	8006fcc <osSemaphoreAcquire>
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	2400037c 	.word	0x2400037c

08001eb8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8001ebc:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f005 f8d5 	bl	8007070 <osSemaphoreRelease>
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	2400037c 	.word	0x2400037c

08001ed0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001ed4:	4b03      	ldr	r3, [pc, #12]	; (8001ee4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4618      	mov	r0, r3
 8001edc:	f005 f876 	bl	8006fcc <osSemaphoreAcquire>
}
 8001ee0:	bf00      	nop
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	2400037c 	.word	0x2400037c

08001ee8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8001eec:	4b03      	ldr	r3, [pc, #12]	; (8001efc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f005 f8bd 	bl	8007070 <osSemaphoreRelease>
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	2400037c 	.word	0x2400037c

08001f00 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001f04:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8001f06:	6818      	ldr	r0, [r3, #0]
 8001f08:	2300      	movs	r3, #0
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	4903      	ldr	r1, [pc, #12]	; (8001f1c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8001f0e:	f005 f967 	bl	80071e0 <osMessageQueuePut>
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	24000380 	.word	0x24000380
 8001f1c:	24000004 	.word	0x24000004

08001f20 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001f26:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8001f28:	6818      	ldr	r0, [r3, #0]
 8001f2a:	1d39      	adds	r1, r7, #4
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f005 f9b6 	bl	80072a0 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001f34:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	1d39      	adds	r1, r7, #4
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f005 f9ae 	bl	80072a0 <osMessageQueueGet>
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	24000380 	.word	0x24000380

08001f50 <__NVIC_EnableIRQ>:
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	db0b      	blt.n	8001f7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	f003 021f 	and.w	r2, r3, #31
 8001f68:	4907      	ldr	r1, [pc, #28]	; (8001f88 <__NVIC_EnableIRQ+0x38>)
 8001f6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f6e:	095b      	lsrs	r3, r3, #5
 8001f70:	2001      	movs	r0, #1
 8001f72:	fa00 f202 	lsl.w	r2, r0, r2
 8001f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000e100 	.word	0xe000e100

08001f8c <__NVIC_DisableIRQ>:
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	db12      	blt.n	8001fc4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	f003 021f 	and.w	r2, r3, #31
 8001fa4:	490a      	ldr	r1, [pc, #40]	; (8001fd0 <__NVIC_DisableIRQ+0x44>)
 8001fa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001faa:	095b      	lsrs	r3, r3, #5
 8001fac:	2001      	movs	r0, #1
 8001fae:	fa00 f202 	lsl.w	r2, r0, r2
 8001fb2:	3320      	adds	r3, #32
 8001fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001fb8:	f3bf 8f4f 	dsb	sy
}
 8001fbc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001fbe:	f3bf 8f6f 	isb	sy
}
 8001fc2:	bf00      	nop
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000e100 	.word	0xe000e100

08001fd4 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
        : color(0)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
    {
    }
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
    {
        return color;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
    }
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
    {
 8002010:	4a04      	ldr	r2, [pc, #16]	; (8002024 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	601a      	str	r2, [r3, #0]
    }
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	08026f5c 	.word	0x08026f5c

08002028 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
    }
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff ffe9 	bl	8002008 <_ZN8touchgfx9DMA_QueueD1Ev>
 8002036:	2104      	movs	r1, #4
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f022 ff40 	bl	8024ebe <_ZdlPvj>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	3344      	adds	r3, #68	; 0x44
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	4798      	blx	r3
    }
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
    {
 800206c:	4a04      	ldr	r2, [pc, #16]	; (8002080 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	601a      	str	r2, [r3, #0]
    }
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	08027a94 	.word	0x08027a94

08002084 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
    }
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff ffe9 	bl	8002064 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8002092:	210c      	movs	r1, #12
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f022 ff12 	bl	8024ebe <_ZdlPvj>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80020ae:	4a09      	ldr	r2, [pc, #36]	; (80020d4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	721a      	strb	r2, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	725a      	strb	r2, [r3, #9]
    {
    }
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	08027a94 	.word	0x08027a94

080020d8 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 80020e0:	2301      	movs	r3, #1
    }
 80020e2:	4618      	mov	r0, r3
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	3328      	adds	r3, #40	; 0x28
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4610      	mov	r0, r2
 8002102:	4798      	blx	r3
    }
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
        return instance;
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8002112:	681b      	ldr	r3, [r3, #0]
    }
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	2400b084 	.word	0x2400b084

08002124 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	3314      	adds	r3, #20
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4610      	mov	r0, r2
 800213c:	4798      	blx	r3
    }
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 800214e:	f7ff ffdd 	bl	800210c <_ZN8touchgfx3HAL11getInstanceEv>
 8002152:	4603      	mov	r3, r0
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ffe5 	bl	8002124 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	330c      	adds	r3, #12
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff ff30 	bl	8001fd4 <_ZN8touchgfx9colortypeC1Ev>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8002180:	b5b0      	push	{r4, r5, r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	330c      	adds	r3, #12
 800218e:	4619      	mov	r1, r3
 8002190:	4610      	mov	r0, r2
 8002192:	f7ff ff87 	bl	80020a4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8002196:	4a0e      	ldr	r2, [pc, #56]	; (80021d0 <_ZN8STM32DMAC1Ev+0x50>)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f103 000c 	add.w	r0, r3, #12
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3320      	adds	r3, #32
 80021a6:	2260      	movs	r2, #96	; 0x60
 80021a8:	4619      	mov	r1, r3
 80021aa:	f011 feb7 	bl	8013f1c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3320      	adds	r3, #32
 80021b2:	245f      	movs	r4, #95	; 0x5f
 80021b4:	461d      	mov	r5, r3
 80021b6:	2c00      	cmp	r4, #0
 80021b8:	db05      	blt.n	80021c6 <_ZN8STM32DMAC1Ev+0x46>
 80021ba:	4628      	mov	r0, r5
 80021bc:	f7ff ffd1 	bl	8002162 <_ZN8touchgfx6BlitOpC1Ev>
 80021c0:	3524      	adds	r5, #36	; 0x24
 80021c2:	3c01      	subs	r4, #1
 80021c4:	e7f7      	b.n	80021b6 <_ZN8STM32DMAC1Ev+0x36>
{
}
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bdb0      	pop	{r4, r5, r7, pc}
 80021d0:	08026f0c 	.word	0x08026f0c

080021d4 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	4a09      	ldr	r2, [pc, #36]	; (8002204 <_ZN8STM32DMAD1Ev+0x30>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 80021e2:	205a      	movs	r0, #90	; 0x5a
 80021e4:	f7ff fed2 	bl	8001f8c <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	330c      	adds	r3, #12
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 facb 	bl	8002788 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff35 	bl	8002064 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4618      	mov	r0, r3
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	08026f0c 	.word	0x08026f0c

08002208 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
}
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff ffdf 	bl	80021d4 <_ZN8STM32DMAD1Ev>
 8002216:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f022 fe4f 	bl	8024ebe <_ZdlPvj>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002234:	4b12      	ldr	r3, [pc, #72]	; (8002280 <_ZN8STM32DMA10initializeEv+0x54>)
 8002236:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800223a:	4a11      	ldr	r2, [pc, #68]	; (8002280 <_ZN8STM32DMA10initializeEv+0x54>)
 800223c:	f043 0310 	orr.w	r3, r3, #16
 8002240:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002244:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <_ZN8STM32DMA10initializeEv+0x54>)
 8002246:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800224a:	f003 0310 	and.w	r3, r3, #16
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002252:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <_ZN8STM32DMA10initializeEv+0x54>)
 8002254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002256:	4a0a      	ldr	r2, [pc, #40]	; (8002280 <_ZN8STM32DMA10initializeEv+0x54>)
 8002258:	f043 0310 	orr.w	r3, r3, #16
 800225c:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800225e:	4b08      	ldr	r3, [pc, #32]	; (8002280 <_ZN8STM32DMA10initializeEv+0x54>)
 8002260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002262:	4a07      	ldr	r2, [pc, #28]	; (8002280 <_ZN8STM32DMA10initializeEv+0x54>)
 8002264:	f023 0310 	bic.w	r3, r3, #16
 8002268:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <_ZN8STM32DMA10initializeEv+0x58>)
 800226c:	4a06      	ldr	r2, [pc, #24]	; (8002288 <_ZN8STM32DMA10initializeEv+0x5c>)
 800226e:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8002270:	205a      	movs	r0, #90	; 0x5a
 8002272:	f7ff fe6d 	bl	8001f50 <__NVIC_EnableIRQ>
}
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	58024400 	.word	0x58024400
 8002284:	2400016c 	.word	0x2400016c
 8002288:	08002147 	.word	0x08002147

0800228c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002298:	2300      	movs	r3, #0
 800229a:	60fb      	str	r3, [r7, #12]

    switch (format)
 800229c:	78fb      	ldrb	r3, [r7, #3]
 800229e:	2b0b      	cmp	r3, #11
 80022a0:	d826      	bhi.n	80022f0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 80022a2:	a201      	add	r2, pc, #4	; (adr r2, 80022a8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80022a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a8:	080022e5 	.word	0x080022e5
 80022ac:	080022df 	.word	0x080022df
 80022b0:	080022d9 	.word	0x080022d9
 80022b4:	080022f1 	.word	0x080022f1
 80022b8:	080022f1 	.word	0x080022f1
 80022bc:	080022f1 	.word	0x080022f1
 80022c0:	080022f1 	.word	0x080022f1
 80022c4:	080022eb 	.word	0x080022eb
 80022c8:	080022eb 	.word	0x080022eb
 80022cc:	080022eb 	.word	0x080022eb
 80022d0:	080022eb 	.word	0x080022eb
 80022d4:	080022eb 	.word	0x080022eb
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80022d8:	2300      	movs	r3, #0
 80022da:	60fb      	str	r3, [r7, #12]
        break;
 80022dc:	e00e      	b.n	80022fc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 80022de:	2301      	movs	r3, #1
 80022e0:	60fb      	str	r3, [r7, #12]
        break;
 80022e2:	e00b      	b.n	80022fc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80022e4:	2302      	movs	r3, #2
 80022e6:	60fb      	str	r3, [r7, #12]
        break;
 80022e8:	e008      	b.n	80022fc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 80022ea:	2305      	movs	r3, #5
 80022ec:	60fb      	str	r3, [r7, #12]
        break;
 80022ee:	e005      	b.n	80022fc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 80022f0:	4b05      	ldr	r3, [pc, #20]	; (8002308 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 80022f2:	4a06      	ldr	r2, [pc, #24]	; (800230c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 80022f4:	2166      	movs	r1, #102	; 0x66
 80022f6:	4806      	ldr	r0, [pc, #24]	; (8002310 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 80022f8:	f022 fe10 	bl	8024f1c <__assert_func>
        break;
    }

    return dma2dColorMode;
 80022fc:	68fb      	ldr	r3, [r7, #12]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	08026374 	.word	0x08026374
 800230c:	08026390 	.word	0x08026390
 8002310:	080263dc 	.word	0x080263dc

08002314 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002320:	2300      	movs	r3, #0
 8002322:	60fb      	str	r3, [r7, #12]

    switch (format)
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	2b0a      	cmp	r3, #10
 8002328:	d821      	bhi.n	800236e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 800232a:	a201      	add	r2, pc, #4	; (adr r2, 8002330 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800232c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002330:	08002369 	.word	0x08002369
 8002334:	08002363 	.word	0x08002363
 8002338:	0800235d 	.word	0x0800235d
 800233c:	0800236f 	.word	0x0800236f
 8002340:	0800236f 	.word	0x0800236f
 8002344:	0800236f 	.word	0x0800236f
 8002348:	0800236f 	.word	0x0800236f
 800234c:	08002363 	.word	0x08002363
 8002350:	08002363 	.word	0x08002363
 8002354:	08002363 	.word	0x08002363
 8002358:	08002363 	.word	0x08002363
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800235c:	2300      	movs	r3, #0
 800235e:	60fb      	str	r3, [r7, #12]
        break;
 8002360:	e00b      	b.n	800237a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8002362:	2301      	movs	r3, #1
 8002364:	60fb      	str	r3, [r7, #12]
        break;
 8002366:	e008      	b.n	800237a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002368:	2302      	movs	r3, #2
 800236a:	60fb      	str	r3, [r7, #12]
        break;
 800236c:	e005      	b.n	800237a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 800236e:	4b05      	ldr	r3, [pc, #20]	; (8002384 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8002370:	4a05      	ldr	r2, [pc, #20]	; (8002388 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8002372:	2187      	movs	r1, #135	; 0x87
 8002374:	4805      	ldr	r0, [pc, #20]	; (800238c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8002376:	f022 fdd1 	bl	8024f1c <__assert_func>
        break;
    }

    return dma2dColorMode;
 800237a:	68fb      	ldr	r3, [r7, #12]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	08026374 	.word	0x08026374
 8002388:	0802645c 	.word	0x0802645c
 800238c:	080263dc 	.word	0x080263dc

08002390 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8002398:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 800239c:	4618      	mov	r0, r3
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 80023a8:	b590      	push	{r4, r7, lr}
 80023aa:	b089      	sub	sp, #36	; 0x24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	7f5b      	ldrb	r3, [r3, #29]
 80023b6:	4619      	mov	r1, r3
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff ff67 	bl	800228c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80023be:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	7f9b      	ldrb	r3, [r3, #30]
 80023c4:	4619      	mov	r1, r3
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff ff60 	bl	800228c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80023cc:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	7f9b      	ldrb	r3, [r3, #30]
 80023d2:	4619      	mov	r1, r3
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff ff9d 	bl	8002314 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80023da:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	8b5b      	ldrh	r3, [r3, #26]
 80023e0:	461a      	mov	r2, r3
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	8a9b      	ldrh	r3, [r3, #20]
 80023e6:	1ad2      	subs	r2, r2, r3
 80023e8:	4b92      	ldr	r3, [pc, #584]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80023ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	8b5b      	ldrh	r3, [r3, #26]
 80023f0:	461a      	mov	r2, r3
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	8a9b      	ldrh	r3, [r3, #20]
 80023f6:	1ad2      	subs	r2, r2, r3
 80023f8:	4b8e      	ldr	r3, [pc, #568]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80023fa:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	8b1b      	ldrh	r3, [r3, #24]
 8002400:	461a      	mov	r2, r3
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	8a9b      	ldrh	r3, [r3, #20]
 8002406:	1ad2      	subs	r2, r2, r3
 8002408:	4b8a      	ldr	r3, [pc, #552]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800240a:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800240c:	4a89      	ldr	r2, [pc, #548]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	8adb      	ldrh	r3, [r3, #22]
 8002416:	461a      	mov	r2, r3
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	8a9b      	ldrh	r3, [r3, #20]
 800241c:	041b      	lsls	r3, r3, #16
 800241e:	431a      	orrs	r2, r3
 8002420:	4b84      	ldr	r3, [pc, #528]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002422:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	4b82      	ldr	r3, [pc, #520]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800242a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	4b80      	ldr	r3, [pc, #512]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002432:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800243c:	d036      	beq.n	80024ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
 800243e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002442:	f200 80e2 	bhi.w	800260a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8002446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800244a:	d014      	beq.n	8002476 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 800244c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002450:	f200 80db 	bhi.w	800260a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8002454:	2b80      	cmp	r3, #128	; 0x80
 8002456:	d059      	beq.n	800250c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>
 8002458:	2b80      	cmp	r3, #128	; 0x80
 800245a:	f200 80d6 	bhi.w	800260a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 800245e:	2b40      	cmp	r3, #64	; 0x40
 8002460:	f000 80be 	beq.w	80025e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 8002464:	2b40      	cmp	r3, #64	; 0x40
 8002466:	f200 80d0 	bhi.w	800260a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 800246a:	2b04      	cmp	r3, #4
 800246c:	d039      	beq.n	80024e2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13a>
 800246e:	2b20      	cmp	r3, #32
 8002470:	f000 80b6 	beq.w	80025e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 8002474:	e0c9      	b.n	800260a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	7f1b      	ldrb	r3, [r3, #28]
 800247a:	061b      	lsls	r3, r3, #24
 800247c:	4619      	mov	r1, r3
 800247e:	4a6d      	ldr	r2, [pc, #436]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002480:	4b6d      	ldr	r3, [pc, #436]	; (8002638 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002482:	430b      	orrs	r3, r1
 8002484:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	330c      	adds	r3, #12
 800248a:	4c6a      	ldr	r4, [pc, #424]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fdaf 	bl	8001ff0 <_ZNK8touchgfx9colortypecvmEv>
 8002492:	4603      	mov	r3, r0
 8002494:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002496:	4a67      	ldr	r2, [pc, #412]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	4b64      	ldr	r3, [pc, #400]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80024a2:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80024a4:	4b63      	ldr	r3, [pc, #396]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80024a6:	4a65      	ldr	r2, [pc, #404]	; (800263c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80024a8:	601a      	str	r2, [r3, #0]
        break;
 80024aa:	e0da      	b.n	8002662 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	7f1b      	ldrb	r3, [r3, #28]
 80024b0:	061b      	lsls	r3, r3, #24
 80024b2:	4619      	mov	r1, r3
 80024b4:	4a5f      	ldr	r2, [pc, #380]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80024b6:	4b62      	ldr	r3, [pc, #392]	; (8002640 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80024b8:	430b      	orrs	r3, r1
 80024ba:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	330c      	adds	r3, #12
 80024c0:	4c5c      	ldr	r4, [pc, #368]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff fd94 	bl	8001ff0 <_ZNK8touchgfx9colortypecvmEv>
 80024c8:	4603      	mov	r3, r0
 80024ca:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80024cc:	4a59      	ldr	r2, [pc, #356]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	691a      	ldr	r2, [r3, #16]
 80024d6:	4b57      	ldr	r3, [pc, #348]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80024d8:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80024da:	4b56      	ldr	r3, [pc, #344]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80024dc:	4a57      	ldr	r2, [pc, #348]	; (800263c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80024de:	601a      	str	r2, [r3, #0]
        break;
 80024e0:	e0bf      	b.n	8002662 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	7f1b      	ldrb	r3, [r3, #28]
 80024e6:	061b      	lsls	r3, r3, #24
 80024e8:	461a      	mov	r2, r3
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	4a51      	ldr	r2, [pc, #324]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80024f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f4:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80024f6:	4a4f      	ldr	r2, [pc, #316]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	691a      	ldr	r2, [r3, #16]
 8002500:	4b4c      	ldr	r3, [pc, #304]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002502:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002504:	4b4b      	ldr	r3, [pc, #300]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002506:	4a4d      	ldr	r2, [pc, #308]	; (800263c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002508:	601a      	str	r2, [r3, #0]
        break;
 800250a:	e0aa      	b.n	8002662 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 800250c:	2301      	movs	r3, #1
 800250e:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1d1a      	adds	r2, r3, #4
 800251a:	4b46      	ldr	r3, [pc, #280]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800251c:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	7f1b      	ldrb	r3, [r3, #28]
 8002522:	061b      	lsls	r3, r3, #24
 8002524:	461a      	mov	r2, r3
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	4313      	orrs	r3, r2
 800252a:	4a42      	ldr	r2, [pc, #264]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800252c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002530:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002532:	4a40      	ldr	r2, [pc, #256]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	4b3d      	ldr	r3, [pc, #244]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800253e:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d002      	beq.n	8002550 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
 800254a:	2b01      	cmp	r3, #1
 800254c:	d00d      	beq.n	800256a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
 800254e:	e020      	b.n	8002592 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ea>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002550:	4b38      	ldr	r3, [pc, #224]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002552:	69da      	ldr	r2, [r3, #28]
 8002554:	4b3b      	ldr	r3, [pc, #236]	; (8002644 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002556:	4013      	ands	r3, r2
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	8852      	ldrh	r2, [r2, #2]
 800255c:	3a01      	subs	r2, #1
 800255e:	0212      	lsls	r2, r2, #8
 8002560:	4611      	mov	r1, r2
 8002562:	4a34      	ldr	r2, [pc, #208]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002564:	430b      	orrs	r3, r1
 8002566:	61d3      	str	r3, [r2, #28]
                break;
 8002568:	e01a      	b.n	80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	7f1b      	ldrb	r3, [r3, #28]
 800256e:	2bff      	cmp	r3, #255	; 0xff
 8002570:	d101      	bne.n	8002576 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
                {
                    blend = false;
 8002572:	2300      	movs	r3, #0
 8002574:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002576:	4b2f      	ldr	r3, [pc, #188]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002578:	69da      	ldr	r2, [r3, #28]
 800257a:	4b32      	ldr	r3, [pc, #200]	; (8002644 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800257c:	4013      	ands	r3, r2
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	8852      	ldrh	r2, [r2, #2]
 8002582:	3a01      	subs	r2, #1
 8002584:	0212      	lsls	r2, r2, #8
 8002586:	4313      	orrs	r3, r2
 8002588:	4a2a      	ldr	r2, [pc, #168]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800258a:	f043 0310 	orr.w	r3, r3, #16
 800258e:	61d3      	str	r3, [r2, #28]
                break;
 8002590:	e006      	b.n	80025a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8002592:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002594:	4a2d      	ldr	r2, [pc, #180]	; (800264c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8002596:	f240 1111 	movw	r1, #273	; 0x111
 800259a:	482d      	ldr	r0, [pc, #180]	; (8002650 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 800259c:	f022 fcbe 	bl	8024f1c <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80025a0:	4b24      	ldr	r3, [pc, #144]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	4a23      	ldr	r2, [pc, #140]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025a6:	f043 0320 	orr.w	r3, r3, #32
 80025aa:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80025ac:	4b21      	ldr	r3, [pc, #132]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	bf14      	ite	ne
 80025b8:	2301      	movne	r3, #1
 80025ba:	2300      	moveq	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d000      	beq.n	80025c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>
 80025c2:	e7f3      	b.n	80025ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80025c4:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025c6:	2210      	movs	r2, #16
 80025c8:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 80025ca:	7ffb      	ldrb	r3, [r7, #31]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80025d0:	4b18      	ldr	r3, [pc, #96]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025d2:	4a1a      	ldr	r2, [pc, #104]	; (800263c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80025d4:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 80025d6:	e044      	b.n	8002662 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80025d8:	4b16      	ldr	r3, [pc, #88]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025da:	4a1e      	ldr	r2, [pc, #120]	; (8002654 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80025dc:	601a      	str	r2, [r3, #0]
        break;
 80025de:	e040      	b.n	8002662 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	7f1b      	ldrb	r3, [r3, #28]
 80025e4:	061b      	lsls	r3, r3, #24
 80025e6:	461a      	mov	r2, r3
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	4a11      	ldr	r2, [pc, #68]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f2:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80025f4:	4a0f      	ldr	r2, [pc, #60]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	691a      	ldr	r2, [r3, #16]
 80025fe:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002600:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002602:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002604:	4a0d      	ldr	r2, [pc, #52]	; (800263c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002606:	601a      	str	r2, [r3, #0]
        break;
 8002608:	e02b      	b.n	8002662 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	7f1b      	ldrb	r3, [r3, #28]
 800260e:	061b      	lsls	r3, r3, #24
 8002610:	461a      	mov	r2, r3
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	4313      	orrs	r3, r2
 8002616:	4a07      	ldr	r2, [pc, #28]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800261c:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	7f5a      	ldrb	r2, [r3, #29]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	7f9b      	ldrb	r3, [r3, #30]
 8002626:	429a      	cmp	r2, r3
 8002628:	d016      	beq.n	8002658 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800262a:	4b02      	ldr	r3, [pc, #8]	; (8002634 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800262c:	4a09      	ldr	r2, [pc, #36]	; (8002654 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 800262e:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 8002630:	e016      	b.n	8002660 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 8002632:	bf00      	nop
 8002634:	52001000 	.word	0x52001000
 8002638:	0002000a 	.word	0x0002000a
 800263c:	00020201 	.word	0x00020201
 8002640:	00020009 	.word	0x00020009
 8002644:	ffff00ef 	.word	0xffff00ef
 8002648:	080264a8 	.word	0x080264a8
 800264c:	080264c4 	.word	0x080264c4
 8002650:	080263dc 	.word	0x080263dc
 8002654:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002658:	4b04      	ldr	r3, [pc, #16]	; (800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800265a:	f240 2201 	movw	r2, #513	; 0x201
 800265e:	601a      	str	r2, [r3, #0]
        break;
 8002660:	bf00      	nop
    }
}
 8002662:	bf00      	nop
 8002664:	3724      	adds	r7, #36	; 0x24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd90      	pop	{r4, r7, pc}
 800266a:	bf00      	nop
 800266c:	52001000 	.word	0x52001000

08002670 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002670:	b590      	push	{r4, r7, lr}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	7f9b      	ldrb	r3, [r3, #30]
 800267e:	4619      	mov	r1, r3
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff fe47 	bl	8002314 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002686:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002688:	4a3b      	ldr	r2, [pc, #236]	; (8002778 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	8adb      	ldrh	r3, [r3, #22]
 8002692:	461a      	mov	r2, r3
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	8a9b      	ldrh	r3, [r3, #20]
 8002698:	041b      	lsls	r3, r3, #16
 800269a:	431a      	orrs	r2, r3
 800269c:	4b36      	ldr	r3, [pc, #216]	; (8002778 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800269e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	691a      	ldr	r2, [r3, #16]
 80026a4:	4b34      	ldr	r3, [pc, #208]	; (8002778 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80026a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	8b5b      	ldrh	r3, [r3, #26]
 80026ac:	461a      	mov	r2, r3
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	8a9b      	ldrh	r3, [r3, #20]
 80026b2:	1ad2      	subs	r2, r2, r3
 80026b4:	4b30      	ldr	r3, [pc, #192]	; (8002778 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80026b6:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b08      	cmp	r3, #8
 80026be:	d12e      	bne.n	800271e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	8b5b      	ldrh	r3, [r3, #26]
 80026c4:	461a      	mov	r2, r3
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	8a9b      	ldrh	r3, [r3, #20]
 80026ca:	1ad2      	subs	r2, r2, r3
 80026cc:	4b2a      	ldr	r3, [pc, #168]	; (8002778 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80026ce:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	8b5b      	ldrh	r3, [r3, #26]
 80026d4:	461a      	mov	r2, r3
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	8a9b      	ldrh	r3, [r3, #20]
 80026da:	1ad2      	subs	r2, r2, r3
 80026dc:	4b26      	ldr	r3, [pc, #152]	; (8002778 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80026de:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80026e0:	4a25      	ldr	r2, [pc, #148]	; (8002778 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	7f1b      	ldrb	r3, [r3, #28]
 80026ea:	061b      	lsls	r3, r3, #24
 80026ec:	4619      	mov	r1, r3
 80026ee:	4a22      	ldr	r2, [pc, #136]	; (8002778 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80026f0:	4b22      	ldr	r3, [pc, #136]	; (800277c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 80026f2:	430b      	orrs	r3, r1
 80026f4:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	330c      	adds	r3, #12
 80026fa:	4c1f      	ldr	r4, [pc, #124]	; (8002778 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fc77 	bl	8001ff0 <_ZNK8touchgfx9colortypecvmEv>
 8002702:	4603      	mov	r3, r0
 8002704:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	691a      	ldr	r2, [r3, #16]
 800270a:	4b1b      	ldr	r3, [pc, #108]	; (8002778 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800270c:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	691a      	ldr	r2, [r3, #16]
 8002712:	4b19      	ldr	r3, [pc, #100]	; (8002778 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002714:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002716:	4b18      	ldr	r3, [pc, #96]	; (8002778 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002718:	4a19      	ldr	r2, [pc, #100]	; (8002780 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 800271a:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 800271c:	e027      	b.n	800276e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 800271e:	4a16      	ldr	r2, [pc, #88]	; (8002778 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002724:	4b14      	ldr	r3, [pc, #80]	; (8002778 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002726:	2200      	movs	r2, #0
 8002728:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	330c      	adds	r3, #12
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fc5e 	bl	8001ff0 <_ZNK8touchgfx9colortypecvmEv>
 8002734:	4603      	mov	r3, r0
 8002736:	0a1b      	lsrs	r3, r3, #8
 8002738:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	330c      	adds	r3, #12
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fc55 	bl	8001ff0 <_ZNK8touchgfx9colortypecvmEv>
 8002746:	4603      	mov	r3, r0
 8002748:	095b      	lsrs	r3, r3, #5
 800274a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800274e:	431c      	orrs	r4, r3
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	330c      	adds	r3, #12
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff fc4b 	bl	8001ff0 <_ZNK8touchgfx9colortypecvmEv>
 800275a:	4603      	mov	r3, r0
 800275c:	08db      	lsrs	r3, r3, #3
 800275e:	f003 031f 	and.w	r3, r3, #31
 8002762:	4a05      	ldr	r2, [pc, #20]	; (8002778 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002764:	4323      	orrs	r3, r4
 8002766:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002768:	4b03      	ldr	r3, [pc, #12]	; (8002778 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800276a:	4a06      	ldr	r2, [pc, #24]	; (8002784 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x114>)
 800276c:	601a      	str	r2, [r3, #0]
}
 800276e:	bf00      	nop
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	bd90      	pop	{r4, r7, pc}
 8002776:	bf00      	nop
 8002778:	52001000 	.word	0x52001000
 800277c:	00010009 	.word	0x00010009
 8002780:	00020201 	.word	0x00020201
 8002784:	00030201 	.word	0x00030201

08002788 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	4a05      	ldr	r2, [pc, #20]	; (80027a8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fc35 	bl	8002008 <_ZN8touchgfx9DMA_QueueD1Ev>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4618      	mov	r0, r3
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	08027ae4 	.word	0x08027ae4

080027ac <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff ffe7 	bl	8002788 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80027ba:	2114      	movs	r1, #20
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f022 fb7e 	bl	8024ebe <_ZdlPvj>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	801a      	strh	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	805a      	strh	r2, [r3, #2]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	809a      	strh	r2, [r3, #4]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	80da      	strh	r2, [r3, #6]
    {
    }
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4618      	mov	r0, r3
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
	...

080027fc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8002804:	4a04      	ldr	r2, [pc, #16]	; (8002818 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6013      	str	r3, [r2, #0]
    }
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	2400b0e0 	.word	0x2400b0e0

0800281c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
    {
 8002824:	4a04      	ldr	r2, [pc, #16]	; (8002838 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	601a      	str	r2, [r3, #0]
    }
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4618      	mov	r0, r3
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	08027190 	.word	0x08027190

0800283c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
    }
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff ffe9 	bl	800281c <_ZN8touchgfx12FontProviderD1Ev>
 800284a:	2104      	movs	r1, #4
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f022 fb36 	bl	8024ebe <_ZdlPvj>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4618      	mov	r0, r3
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
 8002868:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800286a:	4a0b      	ldr	r2, [pc, #44]	; (8002898 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	60da      	str	r2, [r3, #12]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	611a      	str	r2, [r3, #16]
    {
    }
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4618      	mov	r0, r3
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	08027180 	.word	0x08027180

0800289c <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
    {
 80028a4:	4a04      	ldr	r2, [pc, #16]	; (80028b8 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	601a      	str	r2, [r3, #0]
    }
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4618      	mov	r0, r3
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	08027180 	.word	0x08027180

080028bc <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
    }
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff ffe9 	bl	800289c <_ZN8touchgfx7MVPHeapD1Ev>
 80028ca:	2114      	movs	r1, #20
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f022 faf6 	bl	8024ebe <_ZdlPvj>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4618      	mov	r0, r3
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	460b      	mov	r3, r1
 8002928:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
    {
    }
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
    {
    }
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
	...

08002960 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
    {
 8002968:	4a04      	ldr	r2, [pc, #16]	; (800297c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	601a      	str	r2, [r3, #0]
    }
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	08027158 	.word	0x08027158

08002980 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
    }
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f7ff ffe9 	bl	8002960 <_ZN8touchgfx15UIEventListenerD1Ev>
 800298e:	2104      	movs	r1, #4
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f022 fa94 	bl	8024ebe <_ZdlPvj>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4618      	mov	r0, r3
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
    {
 80029a8:	4a04      	ldr	r2, [pc, #16]	; (80029bc <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	601a      	str	r2, [r3, #0]
    }
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4618      	mov	r0, r3
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	08027d64 	.word	0x08027d64

080029c0 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
    }
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff ffe9 	bl	80029a0 <_ZN8touchgfx3LCDD1Ev>
 80029ce:	2108      	movs	r1, #8
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f022 fa74 	bl	8024ebe <_ZdlPvj>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4618      	mov	r0, r3
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
    {
    }
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8002a1e:	6810      	ldr	r0, [r2, #0]
 8002a20:	6851      	ldr	r1, [r2, #4]
 8002a22:	c303      	stmia	r3!, {r0, r1}
    }
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
    {
 8002a38:	4a04      	ldr	r2, [pc, #16]	; (8002a4c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	601a      	str	r2, [r3, #0]
    }
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4618      	mov	r0, r3
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	08027140 	.word	0x08027140

08002a50 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
    }
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff ffe9 	bl	8002a30 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8002a5e:	2104      	movs	r1, #4
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f022 fa2c 	bl	8024ebe <_ZdlPvj>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	801a      	strh	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	805a      	strh	r2, [r3, #2]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	809a      	strh	r2, [r3, #4]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	80da      	strh	r2, [r3, #6]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	811a      	strh	r2, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	815a      	strh	r2, [r3, #10]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	819a      	strh	r2, [r3, #12]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	739a      	strb	r2, [r3, #14]
        {
        }
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff ffd5 	bl	8002a70 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	611a      	str	r2, [r3, #16]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	829a      	strh	r2, [r3, #20]
    {
    }
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8002aea:	4a55      	ldr	r2, [pc, #340]	; (8002c40 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	611a      	str	r2, [r3, #16]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	615a      	str	r2, [r3, #20]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	619a      	str	r2, [r3, #24]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	331c      	adds	r3, #28
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff ffcc 	bl	8002ab6 <_ZN8touchgfx8GesturesC1Ev>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	639a      	str	r2, [r3, #56]	; 0x38
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	641a      	str	r2, [r3, #64]	; 0x40
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	645a      	str	r2, [r3, #68]	; 0x44
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	64da      	str	r2, [r3, #76]	; 0x4c
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	3350      	adds	r3, #80	; 0x50
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fe2f 	bl	80027cc <_ZN8touchgfx4RectC1Ev>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	659a      	str	r2, [r3, #88]	; 0x58
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	661a      	str	r2, [r3, #96]	; 0x60
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	671a      	str	r2, [r3, #112]	; 0x70
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8002bf6:	4a13      	ldr	r2, [pc, #76]	; (8002c44 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002bfc:	4a12      	ldr	r2, [pc, #72]	; (8002c48 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002bfe:	8b3b      	ldrh	r3, [r7, #24]
 8002c00:	8013      	strh	r3, [r2, #0]
 8002c02:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002c04:	881a      	ldrh	r2, [r3, #0]
 8002c06:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8002c08:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002c0a:	4a11      	ldr	r2, [pc, #68]	; (8002c50 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002c0c:	8bbb      	ldrh	r3, [r7, #28]
 8002c0e:	8013      	strh	r3, [r2, #0]
 8002c10:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002c12:	881a      	ldrh	r2, [r3, #0]
 8002c14:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8002c16:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8002c18:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002c1e:	8b3a      	ldrh	r2, [r7, #24]
 8002c20:	8bbb      	ldrh	r3, [r7, #28]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	bf34      	ite	cc
 8002c26:	2301      	movcc	r3, #1
 8002c28:	2300      	movcs	r3, #0
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	080279bc 	.word	0x080279bc
 8002c44:	2400b084 	.word	0x2400b084
 8002c48:	2400b078 	.word	0x2400b078
 8002c4c:	2400b07e 	.word	0x2400b07e
 8002c50:	2400b07a 	.word	0x2400b07a
 8002c54:	2400b080 	.word	0x2400b080
 8002c58:	2400b07c 	.word	0x2400b07c

08002c5c <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	4a05      	ldr	r2, [pc, #20]	; (8002c7c <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff fe77 	bl	8002960 <_ZN8touchgfx15UIEventListenerD1Ev>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4618      	mov	r0, r3
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	08027dbc 	.word	0x08027dbc

08002c80 <_ZN8touchgfx11ApplicationD0Ev>:
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7ff ffe7 	bl	8002c5c <_ZN8touchgfx11ApplicationD1Ev>
 8002c8e:	f44f 719c 	mov.w	r1, #312	; 0x138
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f022 f913 	bl	8024ebe <_ZdlPvj>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f804 	bl	8002cb8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8002cb0:	bf00      	nop
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00f      	beq.n	8002cea <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	330c      	adds	r3, #12
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4610      	mov	r0, r2
 8002cde:	4798      	blx	r3
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8002cea:	2300      	movs	r3, #0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00e      	beq.n	8002d0e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	3308      	adds	r3, #8
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4610      	mov	r0, r2
 8002d04:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 8002d0e:	bf00      	nop
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	4a05      	ldr	r2, [pc, #20]	; (8002d38 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff ff97 	bl	8002c5c <_ZN8touchgfx11ApplicationD1Ev>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4618      	mov	r0, r3
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	080270f4 	.word	0x080270f4

08002d3c <_ZN8touchgfx14MVPApplicationD0Ev>:
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7ff ffe7 	bl	8002d18 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002d4a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f022 f8b5 	bl	8024ebe <_ZdlPvj>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	4a08      	ldr	r2, [pc, #32]	; (8002d8c <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 fb15 	bl	80033a4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff ffcb 	bl	8002d18 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4618      	mov	r0, r3
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	08027090 	.word	0x08027090

08002d90 <_ZN23FrontendApplicationBaseD0Ev>:
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff ffe1 	bl	8002d60 <_ZN23FrontendApplicationBaseD1Ev>
 8002d9e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f022 f88b 	bl	8024ebe <_ZdlPvj>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f001 f944 	bl	8004048 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8002dc0:	bf00      	nop
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	4a05      	ldr	r2, [pc, #20]	; (8002de8 <_ZN19FrontendApplicationD1Ev+0x20>)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff ffc1 	bl	8002d60 <_ZN23FrontendApplicationBaseD1Ev>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4618      	mov	r0, r3
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	08027044 	.word	0x08027044

08002dec <_ZN19FrontendApplicationD0Ev>:
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff ffe7 	bl	8002dc8 <_ZN19FrontendApplicationD1Ev>
 8002dfa:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f022 f85d 	bl	8024ebe <_ZdlPvj>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4618      	mov	r0, r3
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f003 fd8d 	bl	800693c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f013 f9b3 	bl	8016190 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b082      	sub	sp, #8
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f001 f902 	bl	8004048 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af02      	add	r7, sp, #8
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	f7ff fcf9 	bl	800285c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8002e6a:	4a04      	ldr	r2, [pc, #16]	; (8002e7c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	601a      	str	r2, [r3, #0]
    {

    }
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	08027030 	.word	0x08027030

08002e80 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	4801      	ldr	r0, [pc, #4]	; (8002e8c <__tcf_0+0xc>)
 8002e86:	f000 f95f 	bl	8003148 <_ZN12FrontendHeapD1Ev>
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	24000384 	.word	0x24000384

08002e90 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8002e94:	4b12      	ldr	r3, [pc, #72]	; (8002ee0 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	f3bf 8f5b 	dmb	ish
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	bf0c      	ite	eq
 8002ea6:	2301      	moveq	r3, #1
 8002ea8:	2300      	movne	r3, #0
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d013      	beq.n	8002ed8 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8002eb0:	480b      	ldr	r0, [pc, #44]	; (8002ee0 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8002eb2:	f022 f806 	bl	8024ec2 <__cxa_guard_acquire>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	bf14      	ite	ne
 8002ebc:	2301      	movne	r3, #1
 8002ebe:	2300      	moveq	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d008      	beq.n	8002ed8 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8002ec6:	4807      	ldr	r0, [pc, #28]	; (8002ee4 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8002ec8:	f000 f868 	bl	8002f9c <_ZN12FrontendHeapC1Ev>
 8002ecc:	4806      	ldr	r0, [pc, #24]	; (8002ee8 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8002ece:	f022 f843 	bl	8024f58 <atexit>
 8002ed2:	4803      	ldr	r0, [pc, #12]	; (8002ee0 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8002ed4:	f022 f801 	bl	8024eda <__cxa_guard_release>
        return instance;
 8002ed8:	4b02      	ldr	r3, [pc, #8]	; (8002ee4 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8002eda:	4618      	mov	r0, r3
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	240007e8 	.word	0x240007e8
 8002ee4:	24000384 	.word	0x24000384
 8002ee8:	08002e81 	.word	0x08002e81

08002eec <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	4a05      	ldr	r2, [pc, #20]	; (8002f0c <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff fccd 	bl	800289c <_ZN8touchgfx7MVPHeapD1Ev>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4618      	mov	r0, r3
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	08027030 	.word	0x08027030

08002f10 <_ZN16FrontendHeapBaseD0Ev>:
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7ff ffe7 	bl	8002eec <_ZN16FrontendHeapBaseD1Ev>
 8002f1e:	2114      	movs	r1, #20
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f021 ffcc 	bl	8024ebe <_ZdlPvj>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f00f fe70 	bl	8012c20 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002f40:	4a03      	ldr	r2, [pc, #12]	; (8002f50 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	08026ffc 	.word	0x08026ffc

08002f54 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f00f fe5e 	bl	8012c20 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002f64:	4a03      	ldr	r2, [pc, #12]	; (8002f74 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	08026fc8 	.word	0x08026fc8

08002f78 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f00f fe4c 	bl	8012c20 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002f88:	4a03      	ldr	r2, [pc, #12]	; (8002f98 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4618      	mov	r0, r3
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	08026f94 	.word	0x08026f94

08002f9c <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8002f9c:	b590      	push	{r4, r7, lr}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af02      	add	r7, sp, #8
 8002fa2:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f103 0114 	add.w	r1, r3, #20
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f503 7343 	add.w	r3, r3, #780	; 0x30c
                     app(model, *this)
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	4623      	mov	r3, r4
 8002fc2:	f7ff ff43 	bl	8002e4c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8002fc6:	4a18      	ldr	r2, [pc, #96]	; (8003028 <_ZN12FrontendHeapC1Ev+0x8c>)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3314      	adds	r3, #20
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff ffad 	bl	8002f30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	332c      	adds	r3, #44	; 0x2c
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff ffba 	bl	8002f54 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff ffc6 	bl	8002f78 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f003 fc94 	bl	8006920 <_ZN5ModelC1Ev>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f503 7043 	add.w	r0, r3, #780	; 0x30c
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	4619      	mov	r1, r3
 8003008:	f003 fc74 	bl	80068f4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8003014:	4619      	mov	r1, r3
 8003016:	4610      	mov	r0, r2
 8003018:	f7ff ff0b 	bl	8002e32 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4618      	mov	r0, r3
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	bd90      	pop	{r4, r7, pc}
 8003026:	bf00      	nop
 8003028:	08026f80 	.word	0x08026f80

0800302c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af02      	add	r7, sp, #8
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
 8003038:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	8bbb      	ldrh	r3, [r7, #28]
 800303e:	9301      	str	r3, [sp, #4]
 8003040:	8b3b      	ldrh	r3, [r7, #24]
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	68b9      	ldr	r1, [r7, #8]
 800304a:	f7ff fd47 	bl	8002adc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800304e:	4a04      	ldr	r2, [pc, #16]	; (8003060 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	601a      	str	r2, [r3, #0]
    }
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	080271a4 	.word	0x080271a4

08003064 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af02      	add	r7, sp, #8
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
 8003070:	603b      	str	r3, [r7, #0]
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	8bbb      	ldrh	r3, [r7, #28]
 8003076:	9301      	str	r3, [sp, #4]
 8003078:	8b3b      	ldrh	r3, [r7, #24]
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	68b9      	ldr	r1, [r7, #8]
 8003082:	f7ff ffd3 	bl	800302c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8003086:	4a04      	ldr	r2, [pc, #16]	; (8003098 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	601a      	str	r2, [r3, #0]
    }
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	08026e34 	.word	0x08026e34

0800309c <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	4a04      	ldr	r2, [pc, #16]	; (80030b8 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4618      	mov	r0, r3
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	08026e1c 	.word	0x08026e1c

080030bc <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff ffe8 	bl	800309c <_ZN8touchgfx15TouchControllerC1Ev>
 80030cc:	4a03      	ldr	r2, [pc, #12]	; (80030dc <_ZN20STM32TouchControllerC1Ev+0x20>)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4618      	mov	r0, r3
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	08026e04 	.word	0x08026e04

080030e0 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80030e6:	f000 fd67 	bl	8003bb8 <_ZN14BitmapDatabase11getInstanceEv>
 80030ea:	4604      	mov	r4, r0
 80030ec:	f000 fd6e 	bl	8003bcc <_ZN14BitmapDatabase15getInstanceSizeEv>
 80030f0:	4603      	mov	r3, r0
 80030f2:	4619      	mov	r1, r3
 80030f4:	2300      	movs	r3, #0
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	2300      	movs	r3, #0
 80030fa:	2200      	movs	r2, #0
 80030fc:	4620      	mov	r0, r4
 80030fe:	f016 f8f1 	bl	80192e4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8003102:	4809      	ldr	r0, [pc, #36]	; (8003128 <touchgfx_init+0x48>)
 8003104:	f7ff fb7a 	bl	80027fc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8003108:	2000      	movs	r0, #0
 800310a:	f003 fb47 	bl	800679c <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 800310e:	4807      	ldr	r0, [pc, #28]	; (800312c <touchgfx_init+0x4c>)
 8003110:	f016 f850 	bl	80191b4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8003114:	f7ff febc 	bl	8002e90 <_ZN12FrontendHeap11getInstanceEv>
 8003118:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800311a:	4805      	ldr	r0, [pc, #20]	; (8003130 <touchgfx_init+0x50>)
 800311c:	f7fe fda0 	bl	8001c60 <_ZN11TouchGFXHAL10initializeEv>
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	bd90      	pop	{r4, r7, pc}
 8003128:	24001608 	.word	0x24001608
 800312c:	24000008 	.word	0x24000008
 8003130:	2400160c 	.word	0x2400160c

08003134 <touchgfx_taskEntry>:
void touchgfx_components_init()
{
}

void touchgfx_taskEntry()
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8003138:	4802      	ldr	r0, [pc, #8]	; (8003144 <touchgfx_taskEntry+0x10>)
 800313a:	f010 f882 	bl	8013242 <_ZN8touchgfx3HAL9taskEntryEv>
}
 800313e:	bf00      	nop
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	2400160c 	.word	0x2400160c

08003148 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	4a10      	ldr	r2, [pc, #64]	; (8003194 <_ZN12FrontendHeapD1Ev+0x4c>)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff fe33 	bl	8002dc8 <_ZN19FrontendApplicationD1Ev>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8003168:	4618      	mov	r0, r3
 800316a:	f000 f827 	bl	80031bc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	332c      	adds	r3, #44	; 0x2c
 8003172:	4618      	mov	r0, r3
 8003174:	f000 f844 	bl	8003200 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3314      	adds	r3, #20
 800317c:	4618      	mov	r0, r3
 800317e:	f000 f863 	bl	8003248 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff feb1 	bl	8002eec <_ZN16FrontendHeapBaseD1Ev>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4618      	mov	r0, r3
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	08026f80 	.word	0x08026f80

08003198 <_ZN12FrontendHeapD0Ev>:
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7ff ffd1 	bl	8003148 <_ZN12FrontendHeapD1Ev>
 80031a6:	f240 4164 	movw	r1, #1124	; 0x464
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f021 fe87 	bl	8024ebe <_ZdlPvj>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	4a05      	ldr	r2, [pc, #20]	; (80031dc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f00f fd26 	bl	8012c1e <_ZN8touchgfx17AbstractPartitionD1Ev>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4618      	mov	r0, r3
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	08026f94 	.word	0x08026f94

080031e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7ff ffe7 	bl	80031bc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80031ee:	2114      	movs	r1, #20
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f021 fe64 	bl	8024ebe <_ZdlPvj>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4618      	mov	r0, r3
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	4a05      	ldr	r2, [pc, #20]	; (8003220 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4618      	mov	r0, r3
 8003212:	f00f fd04 	bl	8012c1e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4618      	mov	r0, r3
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	08026fc8 	.word	0x08026fc8

08003224 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7ff ffe7 	bl	8003200 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003232:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f021 fe41 	bl	8024ebe <_ZdlPvj>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	4a05      	ldr	r2, [pc, #20]	; (8003268 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4618      	mov	r0, r3
 800325a:	f00f fce0 	bl	8012c1e <_ZN8touchgfx17AbstractPartitionD1Ev>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4618      	mov	r0, r3
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	08026ffc 	.word	0x08026ffc

0800326c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f7ff ffe7 	bl	8003248 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800327a:	2118      	movs	r1, #24
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f021 fe1e 	bl	8024ebe <_ZdlPvj>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4618      	mov	r0, r3
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const touchgfx::FontId COUNTER = 0; // verdana_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	4a05      	ldr	r2, [pc, #20]	; (80032ac <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff fabd 	bl	800281c <_ZN8touchgfx12FontProviderD1Ev>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4618      	mov	r0, r3
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	0802727c 	.word	0x0802727c

080032b0 <_ZN23ApplicationFontProviderD0Ev>:
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff ffe7 	bl	800328c <_ZN23ApplicationFontProviderD1Ev>
 80032be:	2104      	movs	r1, #4
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f021 fdfc 	bl	8024ebe <_ZdlPvj>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4618      	mov	r0, r3
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	4a05      	ldr	r2, [pc, #20]	; (80032f0 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff fb5d 	bl	80029a0 <_ZN8touchgfx3LCDD1Ev>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4618      	mov	r0, r3
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	08028168 	.word	0x08028168

080032f4 <_ZN8touchgfx8LCD16bppD0Ev>:
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7ff ffe7 	bl	80032d0 <_ZN8touchgfx8LCD16bppD1Ev>
 8003302:	2178      	movs	r1, #120	; 0x78
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f021 fdda 	bl	8024ebe <_ZdlPvj>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <_Z41__static_initialization_and_destruction_0ii>:
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af02      	add	r7, sp, #8
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d119      	bne.n	8003358 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800332a:	4293      	cmp	r3, r2
 800332c:	d114      	bne.n	8003358 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 800332e:	4818      	ldr	r0, [pc, #96]	; (8003390 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003330:	f7ff fec4 	bl	80030bc <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8003334:	4817      	ldr	r0, [pc, #92]	; (8003394 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003336:	f7fe ff23 	bl	8002180 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 800333a:	4817      	ldr	r0, [pc, #92]	; (8003398 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800333c:	f019 f8d4 	bl	801c4e8 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8003340:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003344:	9301      	str	r3, [sp, #4]
 8003346:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	4b10      	ldr	r3, [pc, #64]	; (8003390 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800334e:	4a12      	ldr	r2, [pc, #72]	; (8003398 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003350:	4910      	ldr	r1, [pc, #64]	; (8003394 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003352:	4812      	ldr	r0, [pc, #72]	; (800339c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003354:	f7ff fe86 	bl	8003064 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d113      	bne.n	8003386 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003364:	4293      	cmp	r3, r2
 8003366:	d10e      	bne.n	8003386 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003368:	480c      	ldr	r0, [pc, #48]	; (800339c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800336a:	f7fe fcf1 	bl	8001d50 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 800336e:	480c      	ldr	r0, [pc, #48]	; (80033a0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003370:	f7ff ff8c 	bl	800328c <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8003374:	4808      	ldr	r0, [pc, #32]	; (8003398 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003376:	f7ff ffab 	bl	80032d0 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 800337a:	4806      	ldr	r0, [pc, #24]	; (8003394 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800337c:	f7fe ff2a 	bl	80021d4 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8003380:	4803      	ldr	r0, [pc, #12]	; (8003390 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003382:	f7fe f9cb 	bl	800171c <_ZN20STM32TouchControllerD1Ev>
}
 8003386:	bf00      	nop
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	240007ec 	.word	0x240007ec
 8003394:	240007f0 	.word	0x240007f0
 8003398:	24001590 	.word	0x24001590
 800339c:	2400160c 	.word	0x2400160c
 80033a0:	24000008 	.word	0x24000008

080033a4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	4a05      	ldr	r2, [pc, #20]	; (80033c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff fb3b 	bl	8002a30 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4618      	mov	r0, r3
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	080270dc 	.word	0x080270dc

080033c8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff ffe7 	bl	80033a4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80033d6:	2110      	movs	r1, #16
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f021 fd70 	bl	8024ebe <_ZdlPvj>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4618      	mov	r0, r3
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80033f0:	2301      	movs	r3, #1
    }
 80033f2:	4618      	mov	r0, r3
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8003406:	230c      	movs	r3, #12
    }
 8003408:	4618      	mov	r0, r3
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003420:	887a      	ldrh	r2, [r7, #2]
 8003422:	4613      	mov	r3, r2
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	4413      	add	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	3308      	adds	r3, #8
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	4413      	add	r3, r2
    }
 8003430:	4618      	mov	r0, r3
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003448:	887a      	ldrh	r2, [r7, #2]
 800344a:	4613      	mov	r3, r2
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	4413      	add	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	3308      	adds	r3, #8
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	4413      	add	r3, r2
    }
 8003458:	4618      	mov	r0, r3
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800346c:	2301      	movs	r3, #1
    }
 800346e:	4618      	mov	r0, r3
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8003482:	f44f 7330 	mov.w	r3, #704	; 0x2c0
    }
 8003486:	4618      	mov	r0, r3
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	460b      	mov	r3, r1
 800349c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800349e:	887b      	ldrh	r3, [r7, #2]
 80034a0:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 80034a4:	fb02 f303 	mul.w	r3, r2, r3
 80034a8:	3308      	adds	r3, #8
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	4413      	add	r3, r2
    }
 80034ae:	4618      	mov	r0, r3
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	460b      	mov	r3, r1
 80034c4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80034c6:	887b      	ldrh	r3, [r7, #2]
 80034c8:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 80034cc:	fb02 f303 	mul.w	r3, r2, r3
 80034d0:	3308      	adds	r3, #8
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	4413      	add	r3, r2
    }
 80034d6:	4618      	mov	r0, r3
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80034ea:	2301      	movs	r3, #1
    }
 80034ec:	4618      	mov	r0, r3
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8003500:	2310      	movs	r3, #16
    }
 8003502:	4618      	mov	r0, r3
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
 8003516:	460b      	mov	r3, r1
 8003518:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800351a:	887b      	ldrh	r3, [r7, #2]
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	3308      	adds	r3, #8
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	4413      	add	r3, r2
    }
 8003524:	4618      	mov	r0, r3
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800353c:	887b      	ldrh	r3, [r7, #2]
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	3308      	adds	r3, #8
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	4413      	add	r3, r2
    }
 8003546:	4618      	mov	r0, r3
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003552:	b580      	push	{r7, lr}
 8003554:	b082      	sub	sp, #8
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	68d2      	ldr	r2, [r2, #12]
 8003562:	1052      	asrs	r2, r2, #1
 8003564:	1899      	adds	r1, r3, r2
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d102      	bne.n	8003578 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	e00a      	b.n	800358e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	68d2      	ldr	r2, [r2, #12]
 8003580:	1052      	asrs	r2, r2, #1
 8003582:	4413      	add	r3, r2
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6892      	ldr	r2, [r2, #8]
 800358a:	4413      	add	r3, r2
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4608      	mov	r0, r1
 8003590:	4798      	blx	r3
    }
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d010      	beq.n	80035cc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d107      	bne.n	80035c2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80035be:	2301      	movs	r3, #1
 80035c0:	e000      	b.n	80035c4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 80035c2:	2300      	movs	r3, #0
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d001      	beq.n	80035cc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80035c8:	2301      	movs	r3, #1
 80035ca:	e000      	b.n	80035ce <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 80035cc:	2300      	movs	r3, #0
    }
 80035ce:	4618      	mov	r0, r3
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <_GLOBAL__sub_I_touchgfx_init>:
 80035da:	b580      	push	{r7, lr}
 80035dc:	af00      	add	r7, sp, #0
 80035de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80035e2:	2001      	movs	r0, #1
 80035e4:	f7ff fe96 	bl	8003314 <_Z41__static_initialization_and_destruction_0ii>
 80035e8:	bd80      	pop	{r7, pc}

080035ea <_GLOBAL__sub_D_touchgfx_init>:
 80035ea:	b580      	push	{r7, lr}
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80035f2:	2000      	movs	r0, #0
 80035f4:	f7ff fe8e 	bl	8003314 <_Z41__static_initialization_and_destruction_0ii>
 80035f8:	bd80      	pop	{r7, pc}

080035fa <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	3320      	adds	r3, #32
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	4798      	blx	r3
    }
 800360e:	bf00      	nop
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8003624:	3301      	adds	r3, #1
 8003626:	b2da      	uxtb	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
	...

0800363c <__NVIC_EnableIRQ>:
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003646:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800364a:	2b00      	cmp	r3, #0
 800364c:	db0b      	blt.n	8003666 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800364e:	88fb      	ldrh	r3, [r7, #6]
 8003650:	f003 021f 	and.w	r2, r3, #31
 8003654:	4907      	ldr	r1, [pc, #28]	; (8003674 <__NVIC_EnableIRQ+0x38>)
 8003656:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800365a:	095b      	lsrs	r3, r3, #5
 800365c:	2001      	movs	r0, #1
 800365e:	fa00 f202 	lsl.w	r2, r0, r2
 8003662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	e000e100 	.word	0xe000e100

08003678 <__NVIC_DisableIRQ>:
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003686:	2b00      	cmp	r3, #0
 8003688:	db12      	blt.n	80036b0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800368a:	88fb      	ldrh	r3, [r7, #6]
 800368c:	f003 021f 	and.w	r2, r3, #31
 8003690:	490a      	ldr	r1, [pc, #40]	; (80036bc <__NVIC_DisableIRQ+0x44>)
 8003692:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003696:	095b      	lsrs	r3, r3, #5
 8003698:	2001      	movs	r0, #1
 800369a:	fa00 f202 	lsl.w	r2, r0, r2
 800369e:	3320      	adds	r3, #32
 80036a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80036a4:	f3bf 8f4f 	dsb	sy
}
 80036a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80036aa:	f3bf 8f6f 	isb	sy
}
 80036ae:	bf00      	nop
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	e000e100 	.word	0xe000e100

080036c0 <__NVIC_SetPriority>:
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	4603      	mov	r3, r0
 80036c8:	6039      	str	r1, [r7, #0]
 80036ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80036cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	db0a      	blt.n	80036ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	490c      	ldr	r1, [pc, #48]	; (800370c <__NVIC_SetPriority+0x4c>)
 80036da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036de:	0112      	lsls	r2, r2, #4
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	440b      	add	r3, r1
 80036e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80036e8:	e00a      	b.n	8003700 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	4908      	ldr	r1, [pc, #32]	; (8003710 <__NVIC_SetPriority+0x50>)
 80036f0:	88fb      	ldrh	r3, [r7, #6]
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	3b04      	subs	r3, #4
 80036f8:	0112      	lsls	r2, r2, #4
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	440b      	add	r3, r1
 80036fe:	761a      	strb	r2, [r3, #24]
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	e000e100 	.word	0xe000e100
 8003710:	e000ed00 	.word	0xe000ed00

08003714 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8003714:	b5b0      	push	{r4, r5, r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4618      	mov	r0, r3
 8003720:	f00f fd7d 	bl	801321e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8003724:	687d      	ldr	r5, [r7, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3364      	adds	r3, #100	; 0x64
 800372c:	681c      	ldr	r4, [r3, #0]
 800372e:	f012 fe77 	bl	8016420 <_ZN8touchgfx11Application11getInstanceEv>
 8003732:	4603      	mov	r3, r0
 8003734:	4619      	mov	r1, r3
 8003736:	4628      	mov	r0, r5
 8003738:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0xD0200000, (void*)0);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	3388      	adds	r3, #136	; 0x88
 8003742:	681c      	ldr	r4, [r3, #0]
 8003744:	2300      	movs	r3, #0
 8003746:	4a04      	ldr	r2, [pc, #16]	; (8003758 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8003748:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800374c:	47a0      	blx	r4
}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bdb0      	pop	{r4, r5, r7, pc}
 8003756:	bf00      	nop
 8003758:	d0200000 	.word	0xd0200000

0800375c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8003764:	2109      	movs	r1, #9
 8003766:	205a      	movs	r0, #90	; 0x5a
 8003768:	f7ff ffaa 	bl	80036c0 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 800376c:	2109      	movs	r1, #9
 800376e:	2058      	movs	r0, #88	; 0x58
 8003770:	f7ff ffa6 	bl	80036c0 <__NVIC_SetPriority>
}
 8003774:	bf00      	nop
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8003784:	205a      	movs	r0, #90	; 0x5a
 8003786:	f7ff ff59 	bl	800363c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 800378a:	2058      	movs	r0, #88	; 0x58
 800378c:	f7ff ff56 	bl	800363c <__NVIC_EnableIRQ>
}
 8003790:	bf00      	nop
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 80037a0:	205a      	movs	r0, #90	; 0x5a
 80037a2:	f7ff ff69 	bl	8003678 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 80037a6:	2058      	movs	r0, #88	; 0x58
 80037a8:	f7ff ff66 	bl	8003678 <__NVIC_DisableIRQ>
}
 80037ac:	bf00      	nop
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80037bc:	4b11      	ldr	r3, [pc, #68]	; (8003804 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	4b0e      	ldr	r3, [pc, #56]	; (8003808 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80037ce:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80037d0:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037da:	b29b      	uxth	r3, r3
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	4b0a      	ldr	r3, [pc, #40]	; (800380c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 80037e2:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80037e4:	4b08      	ldr	r3, [pc, #32]	; (8003808 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80037e6:	881a      	ldrh	r2, [r3, #0]
 80037e8:	4b06      	ldr	r3, [pc, #24]	; (8003804 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80037ea:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80037ec:	4b05      	ldr	r3, [pc, #20]	; (8003804 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80037ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f0:	4a04      	ldr	r2, [pc, #16]	; (8003804 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80037f2:	f043 0301 	orr.w	r3, r3, #1
 80037f6:	6353      	str	r3, [r2, #52]	; 0x34
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	50001000 	.word	0x50001000
 8003808:	2400168a 	.word	0x2400168a
 800380c:	2400168c 	.word	0x2400168c

08003810 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4618      	mov	r0, r3
 800381c:	f00f fce6 	bl	80131ec <_ZN8touchgfx3HAL10beginFrameEv>
 8003820:	4603      	mov	r3, r0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
    if (frameBufferUpdatedThisFrame)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x18>
    {
        refreshRequested = true;
 800383e:	4b05      	ldr	r3, [pc, #20]	; (8003854 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x28>)
 8003840:	2201      	movs	r2, #1
 8003842:	701a      	strb	r2, [r3, #0]
    }
    HAL::endFrame();
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4618      	mov	r0, r3
 8003848:	f00f fcdc 	bl	8013204 <_ZN8touchgfx3HAL8endFrameEv>
}
 800384c:	bf00      	nop
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	24001688 	.word	0x24001688

08003858 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8003860:	4b03      	ldr	r3, [pc, #12]	; (8003870 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8003862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8003864:	4618      	mov	r0, r3
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	50001084 	.word	0x50001084

08003874 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800387e:	4a06      	ldr	r2, [pc, #24]	; (8003898 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8003886:	2201      	movs	r2, #1
 8003888:	625a      	str	r2, [r3, #36]	; 0x24
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	50001084 	.word	0x50001084
 800389c:	50001000 	.word	0x50001000

080038a0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6839      	ldr	r1, [r7, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f00f fc66 	bl	8013180 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80038b4:	4b25      	ldr	r3, [pc, #148]	; (800394c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	bf14      	ite	ne
 80038c0:	2301      	movne	r3, #1
 80038c2:	2300      	moveq	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d03c      	beq.n	8003944 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa4>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80038ca:	4b20      	ldr	r3, [pc, #128]	; (800394c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80038d2:	f3bf 8f4f 	dsb	sy
}
 80038d6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80038d8:	4b1c      	ldr	r3, [pc, #112]	; (800394c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 80038da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038de:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	0b5b      	lsrs	r3, r3, #13
 80038e4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80038e8:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	08db      	lsrs	r3, r3, #3
 80038ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038f2:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80038fc:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003902:	4912      	ldr	r1, [pc, #72]	; (800394c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8003904:	4313      	orrs	r3, r2
 8003906:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1e5a      	subs	r2, r3, #1
 800390e:	60fa      	str	r2, [r7, #12]
 8003910:	2b00      	cmp	r3, #0
 8003912:	bf14      	ite	ne
 8003914:	2301      	movne	r3, #1
 8003916:	2300      	moveq	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d000      	beq.n	8003920 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
      do {
 800391e:	e7e9      	b.n	80038f4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    } while(sets-- != 0U);
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1e5a      	subs	r2, r3, #1
 8003924:	613a      	str	r2, [r7, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	bf14      	ite	ne
 800392a:	2301      	movne	r3, #1
 800392c:	2300      	moveq	r3, #0
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d000      	beq.n	8003936 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x96>
    do {
 8003934:	e7d9      	b.n	80038ea <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8003936:	f3bf 8f4f 	dsb	sy
}
 800393a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800393c:	f3bf 8f6f 	isb	sy
}
 8003940:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8003942:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003944:	bf00      	nop
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	e000ed00 	.word	0xe000ed00

08003950 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
 800395c:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	68b9      	ldr	r1, [r7, #8]
 8003966:	f00f fd74 	bl	8013452 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 800396a:	4603      	mov	r3, r0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8003974:	b480      	push	{r7}
 8003976:	b087      	sub	sp, #28
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800397c:	4b26      	ldr	r3, [pc, #152]	; (8003a18 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003984:	2b00      	cmp	r3, #0
 8003986:	bf14      	ite	ne
 8003988:	2301      	movne	r3, #1
 800398a:	2300      	moveq	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d03c      	beq.n	8003a0c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003992:	4b21      	ldr	r3, [pc, #132]	; (8003a18 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8003994:	2200      	movs	r2, #0
 8003996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800399a:	f3bf 8f4f 	dsb	sy
}
 800399e:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80039a0:	4b1d      	ldr	r3, [pc, #116]	; (8003a18 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80039a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039a6:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	0b5b      	lsrs	r3, r3, #13
 80039ac:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80039b0:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	08db      	lsrs	r3, r3, #3
 80039b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039ba:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80039c4:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80039ca:	4913      	ldr	r1, [pc, #76]	; (8003a18 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	1e5a      	subs	r2, r3, #1
 80039d6:	60fa      	str	r2, [r7, #12]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	bf14      	ite	ne
 80039dc:	2301      	movne	r3, #1
 80039de:	2300      	moveq	r3, #0
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d000      	beq.n	80039e8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x74>
      do {
 80039e6:	e7e9      	b.n	80039bc <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1e5a      	subs	r2, r3, #1
 80039ec:	613a      	str	r2, [r7, #16]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	bf14      	ite	ne
 80039f2:	2301      	movne	r3, #1
 80039f4:	2300      	moveq	r3, #0
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d000      	beq.n	80039fe <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x8a>
    do {
 80039fc:	e7d9      	b.n	80039b2 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 80039fe:	f3bf 8f4f 	dsb	sy
}
 8003a02:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a04:	f3bf 8f6f 	isb	sy
}
 8003a08:	bf00      	nop
}
 8003a0a:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003a0c:	bf00      	nop
 8003a0e:	371c      	adds	r7, #28
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	e000ed00 	.word	0xe000ed00

08003a1c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003a24:	4b26      	ldr	r3, [pc, #152]	; (8003ac0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	bf14      	ite	ne
 8003a30:	2301      	movne	r3, #1
 8003a32:	2300      	moveq	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d03c      	beq.n	8003ab4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003a3a:	4b21      	ldr	r3, [pc, #132]	; (8003ac0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003a42:	f3bf 8f4f 	dsb	sy
}
 8003a46:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8003a48:	4b1d      	ldr	r3, [pc, #116]	; (8003ac0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8003a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a4e:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	0b5b      	lsrs	r3, r3, #13
 8003a54:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003a58:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	08db      	lsrs	r3, r3, #3
 8003a5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a62:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003a6c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003a72:	4913      	ldr	r1, [pc, #76]	; (8003ac0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	1e5a      	subs	r2, r3, #1
 8003a7e:	60fa      	str	r2, [r7, #12]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	bf14      	ite	ne
 8003a84:	2301      	movne	r3, #1
 8003a86:	2300      	moveq	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d000      	beq.n	8003a90 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x74>
      do {
 8003a8e:	e7e9      	b.n	8003a64 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1e5a      	subs	r2, r3, #1
 8003a94:	613a      	str	r2, [r7, #16]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	bf14      	ite	ne
 8003a9a:	2301      	movne	r3, #1
 8003a9c:	2300      	moveq	r3, #0
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d000      	beq.n	8003aa6 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x8a>
    do {
 8003aa4:	e7d9      	b.n	8003a5a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003aa6:	f3bf 8f4f 	dsb	sy
}
 8003aaa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003aac:	f3bf 8f6f 	isb	sy
}
 8003ab0:	bf00      	nop
}
 8003ab2:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003ab4:	bf00      	nop
 8003ab6:	371c      	adds	r7, #28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	e000ed00 	.word	0xe000ed00

08003ac4 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 8003acc:	f7fe fb1e 	bl	800210c <_ZN8touchgfx3HAL11getInstanceEv>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	bf0c      	ite	eq
 8003ad6:	2301      	moveq	r3, #1
 8003ad8:	2300      	movne	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d132      	bne.n	8003b46 <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8003ae0:	4b1b      	ldr	r3, [pc, #108]	; (8003b50 <HAL_LTDC_LineEventCallback+0x8c>)
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae4:	4a1b      	ldr	r2, [pc, #108]	; (8003b54 <HAL_LTDC_LineEventCallback+0x90>)
 8003ae6:	8812      	ldrh	r2, [r2, #0]
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	bf0c      	ite	eq
 8003aec:	2301      	moveq	r3, #1
 8003aee:	2300      	movne	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d017      	beq.n	8003b26 <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8003af6:	4b18      	ldr	r3, [pc, #96]	; (8003b58 <HAL_LTDC_LineEventCallback+0x94>)
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	4619      	mov	r1, r3
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f00b f837 	bl	800eb70 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8003b02:	f7fe fb03 	bl	800210c <_ZN8touchgfx3HAL11getInstanceEv>
 8003b06:	4603      	mov	r3, r0
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff fd84 	bl	8003616 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8003b0e:	f7fe f9f7 	bl	8001f00 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8003b12:	f7fe fafb 	bl	800210c <_ZN8touchgfx3HAL11getInstanceEv>
 8003b16:	4603      	mov	r3, r0
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f010 f8c5 	bl	8013ca8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8003b1e:	2000      	movs	r0, #0
 8003b20:	f7fd fe1e 	bl	8001760 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8003b24:	e010      	b.n	8003b48 <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8003b26:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <HAL_LTDC_LineEventCallback+0x90>)
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f00b f81f 	bl	800eb70 <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 8003b32:	f7fe faeb 	bl	800210c <_ZN8touchgfx3HAL11getInstanceEv>
 8003b36:	4603      	mov	r3, r0
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff fd5e 	bl	80035fa <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8003b3e:	2000      	movs	r0, #0
 8003b40:	f7fd fe6a 	bl	8001818 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8003b44:	e000      	b.n	8003b48 <HAL_LTDC_LineEventCallback+0x84>
            return;
 8003b46:	bf00      	nop
        }
    }
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	50001000 	.word	0x50001000
 8003b54:	2400168a 	.word	0x2400168a
 8003b58:	2400168c 	.word	0x2400168c

08003b5c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8003b68:	887b      	ldrh	r3, [r7, #2]
 8003b6a:	2b03      	cmp	r3, #3
 8003b6c:	d81e      	bhi.n	8003bac <_ZN23ApplicationFontProvider7getFontEt+0x50>
 8003b6e:	a201      	add	r2, pc, #4	; (adr r2, 8003b74 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 8003b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b74:	08003b85 	.word	0x08003b85
 8003b78:	08003b8f 	.word	0x08003b8f
 8003b7c:	08003b99 	.word	0x08003b99
 8003b80:	08003ba3 	.word	0x08003ba3
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003b84:	f002 fe82 	bl	800688c <_ZN17TypedTextDatabase8getFontsEv>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	e00f      	b.n	8003bae <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003b8e:	f002 fe7d 	bl	800688c <_ZN17TypedTextDatabase8getFontsEv>
 8003b92:	4603      	mov	r3, r0
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	e00a      	b.n	8003bae <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003b98:	f002 fe78 	bl	800688c <_ZN17TypedTextDatabase8getFontsEv>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	e005      	b.n	8003bae <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::COUNTER:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003ba2:	f002 fe73 	bl	800688c <_ZN17TypedTextDatabase8getFontsEv>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	e000      	b.n	8003bae <_ZN23ApplicationFontProvider7getFontEt+0x52>
    default:
        return 0;
 8003bac:	2300      	movs	r3, #0
    }
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop

08003bb8 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
    return bitmap_database;
 8003bbc:	4b02      	ldr	r3, [pc, #8]	; (8003bc8 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	08027288 	.word	0x08027288

08003bcc <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8003bd0:	2302      	movs	r3, #2
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
    {
 8003be4:	4a04      	ldr	r2, [pc, #16]	; (8003bf8 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	601a      	str	r2, [r3, #0]
    }
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4618      	mov	r0, r3
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	08027770 	.word	0x08027770

08003bfc <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
    }
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7ff ffe9 	bl	8003bdc <_ZN8touchgfx4FontD1Ev>
 8003c0a:	2110      	movs	r1, #16
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f021 f956 	bl	8024ebe <_ZdlPvj>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4618      	mov	r0, r3
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003c1c:	b590      	push	{r4, r7, lr}
 8003c1e:	b087      	sub	sp, #28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	460b      	mov	r3, r1
 8003c26:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8003c28:	887b      	ldrh	r3, [r7, #2]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	e010      	b.n	8003c54 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8003c32:	2300      	movs	r3, #0
 8003c34:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8003c36:	2300      	movs	r3, #0
 8003c38:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	3308      	adds	r3, #8
 8003c40:	681c      	ldr	r4, [r3, #0]
 8003c42:	f107 030f 	add.w	r3, r7, #15
 8003c46:	f107 0210 	add.w	r2, r7, #16
 8003c4a:	8879      	ldrh	r1, [r7, #2]
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	47a0      	blx	r4
 8003c50:	6178      	str	r0, [r7, #20]
        return glyph;
 8003c52:	697b      	ldr	r3, [r7, #20]
    }
 8003c54:	4618      	mov	r0, r3
 8003c56:	371c      	adds	r7, #28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd90      	pop	{r4, r7, pc}

08003c5c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	895b      	ldrh	r3, [r3, #10]
    }
 8003c68:	4618      	mov	r0, r3
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	899b      	ldrh	r3, [r3, #12]
    }
 8003c80:	4618      	mov	r0, r3
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	889b      	ldrh	r3, [r3, #4]
    }
 8003c98:	4618      	mov	r0, r3
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	889a      	ldrh	r2, [r3, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	799b      	ldrb	r3, [r3, #6]
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	4413      	add	r3, r2
 8003cb8:	b29b      	uxth	r3, r3
    }
 8003cba:	4618      	mov	r0, r3
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	79db      	ldrb	r3, [r3, #7]
 8003cd2:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8003cd6:	b2db      	uxtb	r3, r3
    }
 8003cd8:	4618      	mov	r0, r3
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	79db      	ldrb	r3, [r3, #7]
 8003cf0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003cf4:	b2db      	uxtb	r3, r3
    }
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
	...

08003d04 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	4a05      	ldr	r2, [pc, #20]	; (8003d24 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff ff61 	bl	8003bdc <_ZN8touchgfx4FontD1Ev>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	08027e70 	.word	0x08027e70

08003d28 <_ZN8touchgfx9ConstFontD0Ev>:
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7ff ffe7 	bl	8003d04 <_ZN8touchgfx9ConstFontD1Ev>
 8003d36:	2118      	movs	r1, #24
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f021 f8c0 	bl	8024ebe <_ZdlPvj>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4618      	mov	r0, r3
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	4a05      	ldr	r2, [pc, #20]	; (8003d68 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7ff ffd3 	bl	8003d04 <_ZN8touchgfx9ConstFontD1Ev>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4618      	mov	r0, r3
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	08027310 	.word	0x08027310

08003d6c <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7ff ffe7 	bl	8003d48 <_ZN8touchgfx13GeneratedFontD1Ev>
 8003d7a:	2128      	movs	r1, #40	; 0x28
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f021 f89e 	bl	8024ebe <_ZdlPvj>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4618      	mov	r0, r3
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
    {
 8003d94:	4a04      	ldr	r2, [pc, #16]	; (8003da8 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	601a      	str	r2, [r3, #0]
    }
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	080272b8 	.word	0x080272b8

08003dac <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
    }
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7ff ffe9 	bl	8003d8c <_ZN8touchgfx9TypedTextD1Ev>
 8003dba:	2108      	movs	r1, #8
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f021 f87e 	bl	8024ebe <_ZdlPvj>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003de8:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8003df4:	4b08      	ldr	r3, [pc, #32]	; (8003e18 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 8003dfe:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e04:	e002      	b.n	8003e0c <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 8003e06:	4b04      	ldr	r3, [pc, #16]	; (8003e18 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
    }
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	2400b084 	.word	0x2400b084

08003e1c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8003e24:	4a07      	ldr	r2, [pc, #28]	; (8003e44 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	605a      	str	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	721a      	strb	r2, [r3, #8]
    {
    }
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	080272ec 	.word	0x080272ec

08003e48 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
    {
 8003e50:	4a04      	ldr	r2, [pc, #16]	; (8003e64 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	601a      	str	r2, [r3, #0]
    }
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	080272ec 	.word	0x080272ec

08003e68 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
    }
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7ff ffe9 	bl	8003e48 <_ZN8touchgfx10TransitionD1Ev>
 8003e76:	210c      	movs	r1, #12
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f021 f820 	bl	8024ebe <_ZdlPvj>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4618      	mov	r0, r3
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
    {
    }
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
    {
    }
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
    {
    }
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 8003ecc:	f012 faa8 	bl	8016420 <_ZN8touchgfx11Application11getInstanceEv>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f012 fe4a 	bl	8016b6c <_ZN8touchgfx11Application10invalidateEv>
    }
 8003ed8:	bf00      	nop
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	605a      	str	r2, [r3, #4]
    }
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f012 faac 	bl	8016464 <_ZN8touchgfx11ApplicationC1Ev>
 8003f0c:	4a09      	ldr	r2, [pc, #36]	; (8003f34 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        instance = this;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a04      	ldr	r2, [pc, #16]	; (8003f38 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8003f26:	6013      	str	r3, [r2, #0]
    }
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	080270f4 	.word	0x080270f4
 8003f38:	2400b0d0 	.word	0x2400b0d0

08003f3c <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	601a      	str	r2, [r3, #0]
    }
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	721a      	strb	r2, [r3, #8]
    }
 8003f66:	bf00      	nop
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
 8003f7a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	605a      	str	r2, [r3, #4]
    }
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
	...

08003f90 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff ffac 	bl	8003efc <_ZN8touchgfx14MVPApplicationC1Ev>
 8003fa4:	4a13      	ldr	r2, [pc, #76]	; (8003ff4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 f89f 	bl	80040f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003fc6:	f7fe f8a1 	bl	800210c <_ZN8touchgfx3HAL11getInstanceEv>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	3208      	adds	r2, #8
 8003fd0:	6812      	ldr	r2, [r2, #0]
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8003fd8:	2000      	movs	r0, #0
 8003fda:	f002 fbdf 	bl	800679c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8003fde:	f7ff ff01 	bl	8003de4 <_ZN8touchgfx3HAL3lcdEv>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f01a f866 	bl	801e0b6 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	08027090 	.word	0x08027090

08003ff8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4618      	mov	r0, r3
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	4611      	mov	r1, r2
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff ffe9 	bl	8003ff8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	605a      	str	r2, [r3, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	3308      	adds	r3, #8
 8004034:	3208      	adds	r2, #8
 8004036:	e892 0003 	ldmia.w	r2, {r0, r1}
 800403a:	e883 0003 	stmia.w	r3, {r0, r1}
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4618      	mov	r0, r3
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8004048:	b590      	push	{r4, r7, lr}
 800404a:	b089      	sub	sp, #36	; 0x24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8004056:	4b10      	ldr	r3, [pc, #64]	; (8004098 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8004058:	61bb      	str	r3, [r7, #24]
 800405a:	2300      	movs	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]
 800405e:	f107 0008 	add.w	r0, r7, #8
 8004062:	f107 0318 	add.w	r3, r7, #24
 8004066:	cb0c      	ldmia	r3, {r2, r3}
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	f000 f85f 	bl	800412c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800406e:	f107 0308 	add.w	r3, r7, #8
 8004072:	4619      	mov	r1, r3
 8004074:	4620      	mov	r0, r4
 8004076:	f7ff ffcb 	bl	8004010 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800407a:	f107 0308 	add.w	r3, r7, #8
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff f990 	bl	80033a4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8004090:	bf00      	nop
 8004092:	3724      	adds	r7, #36	; 0x24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd90      	pop	{r4, r7, pc}
 8004098:	0800409d 	.word	0x0800409d

0800409c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af02      	add	r7, sp, #8
 80040a2:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f503 719c 	add.w	r1, r3, #312	; 0x138
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80040b0:	461a      	mov	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	4b04      	ldr	r3, [pc, #16]	; (80040cc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 80040bc:	4804      	ldr	r0, [pc, #16]	; (80040d0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 80040be:	f000 f867 	bl	8004190 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80040c2:	bf00      	nop
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	2400b0c4 	.word	0x2400b0c4
 80040d0:	2400b0c0 	.word	0x2400b0c0

080040d4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	4a04      	ldr	r2, [pc, #16]	; (80040f0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4618      	mov	r0, r3
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	08027140 	.word	0x08027140

080040f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff ffe8 	bl	80040d4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004104:	4a08      	ldr	r2, [pc, #32]	; (8004128 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	605a      	str	r2, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	609a      	str	r2, [r3, #8]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	60da      	str	r2, [r3, #12]
    }
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4618      	mov	r0, r3
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	080270dc 	.word	0x080270dc

0800412c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	4639      	mov	r1, r7
 8004138:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff ffc8 	bl	80040d4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004144:	4a08      	ldr	r2, [pc, #32]	; (8004168 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	605a      	str	r2, [r3, #4]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	3308      	adds	r3, #8
 8004154:	463a      	mov	r2, r7
 8004156:	e892 0003 	ldmia.w	r2, {r0, r1}
 800415a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	080270dc 	.word	0x080270dc

0800416c <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4618      	mov	r0, r3
 8004178:	f7ff fe50 	bl	8003e1c <_ZN8touchgfx10TransitionC1Ev>
 800417c:	4a03      	ldr	r2, [pc, #12]	; (800418c <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4618      	mov	r0, r3
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	080272c8 	.word	0x080272c8

08004190 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004190:	b590      	push	{r4, r7, lr}
 8004192:	b08f      	sub	sp, #60	; 0x3c
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
 800419c:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689a      	ldr	r2, [r3, #8]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	3320      	adds	r3, #32
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4610      	mov	r0, r2
 80041ae:	4798      	blx	r3
 80041b0:	4603      	mov	r3, r0
 80041b2:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80041b6:	d205      	bcs.n	80041c4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 80041b8:	4b7e      	ldr	r3, [pc, #504]	; (80043b4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80041ba:	4a7f      	ldr	r2, [pc, #508]	; (80043b8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80041bc:	21a3      	movs	r1, #163	; 0xa3
 80041be:	487f      	ldr	r0, [pc, #508]	; (80043bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80041c0:	f020 feac 	bl	8024f1c <__assert_func>
 80041c4:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3320      	adds	r3, #32
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4610      	mov	r0, r2
 80041d6:	4798      	blx	r3
 80041d8:	4603      	mov	r3, r0
 80041da:	2b0f      	cmp	r3, #15
 80041dc:	d805      	bhi.n	80041ea <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 80041de:	4b78      	ldr	r3, [pc, #480]	; (80043c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80041e0:	4a75      	ldr	r2, [pc, #468]	; (80043b8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80041e2:	21a4      	movs	r1, #164	; 0xa4
 80041e4:	4875      	ldr	r0, [pc, #468]	; (80043bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80041e6:	f020 fe99 	bl	8024f1c <__assert_func>
 80041ea:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	3320      	adds	r3, #32
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4610      	mov	r0, r2
 80041fc:	4798      	blx	r3
 80041fe:	4603      	mov	r3, r0
 8004200:	2b0b      	cmp	r3, #11
 8004202:	d805      	bhi.n	8004210 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8004204:	4b6f      	ldr	r3, [pc, #444]	; (80043c4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8004206:	4a6c      	ldr	r2, [pc, #432]	; (80043b8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004208:	21a5      	movs	r1, #165	; 0xa5
 800420a:	486c      	ldr	r0, [pc, #432]	; (80043bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800420c:	f020 fe86 	bl	8024f1c <__assert_func>
 8004210:	bf00      	nop
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	62bb      	str	r3, [r7, #40]	; 0x28
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	627b      	str	r3, [r7, #36]	; 0x24
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800421e:	f012 f8ff 	bl	8016420 <_ZN8touchgfx11Application11getInstanceEv>
 8004222:	4603      	mov	r3, r0
 8004224:	4618      	mov	r0, r3
 8004226:	f012 f901 	bl	801642c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d008      	beq.n	8004244 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8004232:	6a3b      	ldr	r3, [r7, #32]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	6a3b      	ldr	r3, [r7, #32]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	330c      	adds	r3, #12
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4610      	mov	r0, r2
 8004242:	4798      	blx	r3
    if (*currentTrans)
 8004244:	6a3b      	ldr	r3, [r7, #32]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d007      	beq.n	800425c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4610      	mov	r0, r2
 800425a:	4798      	blx	r3
    if (*currentScreen)
 800425c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d008      	beq.n	8004276 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8004264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	3314      	adds	r3, #20
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4610      	mov	r0, r2
 8004274:	4798      	blx	r3
    if (*currentPresenter)
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d008      	beq.n	8004290 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3304      	adds	r3, #4
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4610      	mov	r0, r2
 800428e:	4798      	blx	r3
    if (*currentScreen)
 8004290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d007      	beq.n	80042a8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8004298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4610      	mov	r0, r2
 80042a6:	4798      	blx	r3
    if (*currentPresenter)
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d008      	beq.n	80042c2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	3308      	adds	r3, #8
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4610      	mov	r0, r2
 80042c0:	4798      	blx	r3
}
 80042c2:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	2100      	movs	r1, #0
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 f87c 	bl	80043c8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80042d0:	4603      	mov	r3, r0
 80042d2:	4619      	mov	r1, r3
 80042d4:	200c      	movs	r0, #12
 80042d6:	f7ff fd79 	bl	8003dcc <_ZnwjPv>
 80042da:	4604      	mov	r4, r0
 80042dc:	4620      	mov	r0, r4
 80042de:	f7ff ff45 	bl	800416c <_ZN8touchgfx12NoTransitionC1Ev>
 80042e2:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	2100      	movs	r1, #0
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 f87f 	bl	80043ee <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 80042f0:	4603      	mov	r3, r0
 80042f2:	4619      	mov	r1, r3
 80042f4:	f44f 7030 	mov.w	r0, #704	; 0x2c0
 80042f8:	f7ff fd68 	bl	8003dcc <_ZnwjPv>
 80042fc:	4604      	mov	r4, r0
 80042fe:	4620      	mov	r0, r4
 8004300:	f002 fc2a 	bl	8006b58 <_ZN11Screen1ViewC1Ev>
 8004304:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2100      	movs	r1, #0
 800430c:	4618      	mov	r0, r3
 800430e:	f000 f881 	bl	8004414 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8004312:	4603      	mov	r3, r0
 8004314:	4619      	mov	r1, r3
 8004316:	2010      	movs	r0, #16
 8004318:	f7ff fd58 	bl	8003dcc <_ZnwjPv>
 800431c:	4604      	mov	r4, r0
 800431e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004320:	4620      	mov	r0, r4
 8004322:	f002 fbc1 	bl	8006aa8 <_ZN16Screen1PresenterC1ER11Screen1View>
 8004326:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800432c:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004332:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004338:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800433a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433c:	2b00      	cmp	r3, #0
 800433e:	d002      	beq.n	8004346 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 8004340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004342:	3304      	adds	r3, #4
 8004344:	e000      	b.n	8004348 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8004346:	2300      	movs	r3, #0
 8004348:	4619      	mov	r1, r3
 800434a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800434c:	f7ff fdf6 	bl	8003f3c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004352:	3304      	adds	r3, #4
 8004354:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff fe0b 	bl	8003f72 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800435c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004360:	4618      	mov	r0, r3
 8004362:	f000 f86a 	bl	800443a <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8004366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004368:	61fb      	str	r3, [r7, #28]
 800436a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436c:	61bb      	str	r3, [r7, #24]
 800436e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004370:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	330c      	adds	r3, #12
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	69f8      	ldr	r0, [r7, #28]
 800437c:	4798      	blx	r3
    newPresenter->activate();
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	69b8      	ldr	r0, [r7, #24]
 8004386:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004388:	6979      	ldr	r1, [r7, #20]
 800438a:	69f8      	ldr	r0, [r7, #28]
 800438c:	f013 fc26 	bl	8017bdc <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3310      	adds	r3, #16
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6978      	ldr	r0, [r7, #20]
 800439a:	4798      	blx	r3
    newTransition->invalidate();
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3314      	adds	r3, #20
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6978      	ldr	r0, [r7, #20]
 80043a6:	4798      	blx	r3
}
 80043a8:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 80043aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	373c      	adds	r7, #60	; 0x3c
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd90      	pop	{r4, r7, pc}
 80043b4:	08026504 	.word	0x08026504
 80043b8:	08026594 	.word	0x08026594
 80043bc:	08026698 	.word	0x08026698
 80043c0:	080266f0 	.word	0x080266f0
 80043c4:	08026794 	.word	0x08026794

080043c8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	460b      	mov	r3, r1
 80043d2:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3324      	adds	r3, #36	; 0x24
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	887a      	ldrh	r2, [r7, #2]
 80043de:	4611      	mov	r1, r2
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	4798      	blx	r3
 80043e4:	4603      	mov	r3, r0
    }
 80043e6:	4618      	mov	r0, r3
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b082      	sub	sp, #8
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	460b      	mov	r3, r1
 80043f8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3324      	adds	r3, #36	; 0x24
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	887a      	ldrh	r2, [r7, #2]
 8004404:	4611      	mov	r1, r2
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	4798      	blx	r3
 800440a:	4603      	mov	r3, r0
    }
 800440c:	4618      	mov	r0, r3
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	460b      	mov	r3, r1
 800441e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3324      	adds	r3, #36	; 0x24
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	887a      	ldrh	r2, [r7, #2]
 800442a:	4611      	mov	r1, r2
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	4798      	blx	r3
 8004430:	4603      	mov	r3, r0
    }
 8004432:	4618      	mov	r0, r3
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
 8004442:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
	...

08004458 <_ZN8touchgfx12NoTransitionD1Ev>:
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	4a05      	ldr	r2, [pc, #20]	; (8004478 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff fced 	bl	8003e48 <_ZN8touchgfx10TransitionD1Ev>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4618      	mov	r0, r3
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	080272c8 	.word	0x080272c8

0800447c <_ZN8touchgfx12NoTransitionD0Ev>:
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f7ff ffe7 	bl	8004458 <_ZN8touchgfx12NoTransitionD1Ev>
 800448a:	210c      	movs	r1, #12
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f020 fd16 	bl	8024ebe <_ZdlPvj>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4618      	mov	r0, r3
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
    }
 80044a8:	4618      	mov	r0, r3
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 80044c0:	4618      	mov	r0, r3
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b08c      	sub	sp, #48	; 0x30
 80044d0:	af08      	add	r7, sp, #32
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	4611      	mov	r1, r2
 80044d8:	461a      	mov	r2, r3
 80044da:	460b      	mov	r3, r1
 80044dc:	80fb      	strh	r3, [r7, #6]
 80044de:	4613      	mov	r3, r2
 80044e0:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	88b9      	ldrh	r1, [r7, #4]
 80044e6:	88fa      	ldrh	r2, [r7, #6]
 80044e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80044ea:	9306      	str	r3, [sp, #24]
 80044ec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80044ee:	9305      	str	r3, [sp, #20]
 80044f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80044f4:	9304      	str	r3, [sp, #16]
 80044f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80044fa:	9303      	str	r3, [sp, #12]
 80044fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004500:	9302      	str	r3, [sp, #8]
 8004502:	7f3b      	ldrb	r3, [r7, #28]
 8004504:	9301      	str	r3, [sp, #4]
 8004506:	7e3b      	ldrb	r3, [r7, #24]
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	460b      	mov	r3, r1
 800450c:	68b9      	ldr	r1, [r7, #8]
 800450e:	f012 ffcd 	bl	80174ac <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8004512:	4a0a      	ldr	r2, [pc, #40]	; (800453c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800451c:	619a      	str	r2, [r3, #24]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004522:	61da      	str	r2, [r3, #28]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004528:	621a      	str	r2, [r3, #32]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800452e:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	08027310 	.word	0x08027310

08004540 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	889b      	ldrh	r3, [r3, #4]
 8004554:	0adb      	lsrs	r3, r3, #11
 8004556:	b29b      	uxth	r3, r3
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	4413      	add	r3, r2
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4413      	add	r3, r2
}
 8004566:	4618      	mov	r0, r3
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8004572:	b480      	push	{r7}
 8004574:	b089      	sub	sp, #36	; 0x24
 8004576:	af00      	add	r7, sp, #0
 8004578:	60f8      	str	r0, [r7, #12]
 800457a:	460b      	mov	r3, r1
 800457c:	607a      	str	r2, [r7, #4]
 800457e:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	7b1b      	ldrb	r3, [r3, #12]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800458e:	2300      	movs	r3, #0
 8004590:	e030      	b.n	80045f4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	69da      	ldr	r2, [r3, #28]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	7b5b      	ldrb	r3, [r3, #13]
 800459e:	021b      	lsls	r3, r3, #8
 80045a0:	b21b      	sxth	r3, r3
 80045a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045a6:	b219      	sxth	r1, r3
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	7adb      	ldrb	r3, [r3, #11]
 80045ac:	b21b      	sxth	r3, r3
 80045ae:	430b      	orrs	r3, r1
 80045b0:	b21b      	sxth	r3, r3
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4413      	add	r3, r2
 80045b8:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	7b1b      	ldrb	r3, [r3, #12]
 80045be:	837b      	strh	r3, [r7, #26]
 80045c0:	8b7b      	ldrh	r3, [r7, #26]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d015      	beq.n	80045f2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	897a      	ldrh	r2, [r7, #10]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d103      	bne.n	80045d8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80045d6:	e00d      	b.n	80045f4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	897a      	ldrh	r2, [r7, #10]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d306      	bcc.n	80045f0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80045e2:	8b7b      	ldrh	r3, [r7, #26]
 80045e4:	3b01      	subs	r3, #1
 80045e6:	837b      	strh	r3, [r7, #26]
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	3304      	adds	r3, #4
 80045ec:	61fb      	str	r3, [r7, #28]
 80045ee:	e7e7      	b.n	80045c0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 80045f0:	bf00      	nop
        }
    }
    return 0;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3724      	adds	r7, #36	; 0x24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
        : color(col)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	601a      	str	r2, [r3, #0]
    }
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4618      	mov	r0, r3
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 800461e:	b480      	push	{r7}
 8004620:	b085      	sub	sp, #20
 8004622:	af00      	add	r7, sp, #0
 8004624:	60f8      	str	r0, [r7, #12]
 8004626:	4608      	mov	r0, r1
 8004628:	4611      	mov	r1, r2
 800462a:	461a      	mov	r2, r3
 800462c:	4603      	mov	r3, r0
 800462e:	817b      	strh	r3, [r7, #10]
 8004630:	460b      	mov	r3, r1
 8004632:	813b      	strh	r3, [r7, #8]
 8004634:	4613      	mov	r3, r2
 8004636:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	897a      	ldrh	r2, [r7, #10]
 800463c:	801a      	strh	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	893a      	ldrh	r2, [r7, #8]
 8004642:	805a      	strh	r2, [r3, #2]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	88fa      	ldrh	r2, [r7, #6]
 8004648:	809a      	strh	r2, [r3, #4]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8b3a      	ldrh	r2, [r7, #24]
 800464e:	80da      	strh	r2, [r3, #6]
    {
    }
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4618      	mov	r0, r3
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <_ZNK8touchgfx10ClickEvent7getTypeEv>:
    /**
     * Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
    {
        return clickEventType;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	791b      	ldrb	r3, [r3, #4]
    }
 800466a:	4618      	mov	r0, r3
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8004676:	b480      	push	{r7}
 8004678:	b083      	sub	sp, #12
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	460b      	mov	r3, r1
 8004680:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	887a      	ldrh	r2, [r7, #2]
 8004686:	801a      	strh	r2, [r3, #0]
    {
    }
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4618      	mov	r0, r3
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
	...

08004698 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 80046a0:	4a14      	ldr	r2, [pc, #80]	; (80046f4 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	3304      	adds	r3, #4
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fe f88e 	bl	80027cc <_ZN8touchgfx4RectC1Ev>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	330c      	adds	r3, #12
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7fe f889 	bl	80027cc <_ZN8touchgfx4RectC1Ev>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	615a      	str	r2, [r3, #20]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	619a      	str	r2, [r3, #24]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	61da      	str	r2, [r3, #28]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	841a      	strh	r2, [r3, #32]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	845a      	strh	r2, [r3, #34]	; 0x22
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4618      	mov	r0, r3
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	08027e08 	.word	0x08027e08

080046f8 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
    {
 8004700:	4a04      	ldr	r2, [pc, #16]	; (8004714 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	601a      	str	r2, [r3, #0]
    }
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4618      	mov	r0, r3
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	08027e08 	.word	0x08027e08

08004718 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
    }
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f7ff ffe9 	bl	80046f8 <_ZN8touchgfx8DrawableD1Ev>
 8004726:	2128      	movs	r1, #40	; 0x28
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f020 fbc8 	bl	8024ebe <_ZdlPvj>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4618      	mov	r0, r3
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004746:	2b00      	cmp	r3, #0
 8004748:	d005      	beq.n	8004756 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	3314      	adds	r3, #20
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	4798      	blx	r3
        }
    }
 8004756:	bf00      	nop
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8004766:	2300      	movs	r3, #0
    }
 8004768:	4618      	mov	r0, r3
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	4608      	mov	r0, r1
 800477e:	4611      	mov	r1, r2
 8004780:	461a      	mov	r2, r3
 8004782:	4603      	mov	r3, r0
 8004784:	817b      	strh	r3, [r7, #10]
 8004786:	460b      	mov	r3, r1
 8004788:	813b      	strh	r3, [r7, #8]
 800478a:	4613      	mov	r3, r2
 800478c:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800478e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004792:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004796:	4619      	mov	r1, r3
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 f844 	bl	8004826 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800479e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80047a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047a6:	4619      	mov	r1, r3
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 f898 	bl	80048de <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 80047ae:	bf00      	nop
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <_ZNK8touchgfx8Drawable8getWidthEv>:
    /**
     * Gets the width of this Drawable.
     *
     * @return The width of this Drawable.
     */
    int16_t getWidth() const
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
    {
        return rect.width;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 80047c4:	4618      	mov	r0, r3
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <_ZNK8touchgfx8Drawable9getHeightEv>:
    /**
     * Gets the height of this Drawable.
     *
     * @return The height of this Drawable.
     */
    int16_t getHeight() const
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
    {
        return rect.height;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 80047de:	4618      	mov	r0, r3
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
 80047f2:	460b      	mov	r3, r1
 80047f4:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	887a      	ldrh	r2, [r7, #2]
 80047fa:	809a      	strh	r2, [r3, #4]
    }
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	460b      	mov	r3, r1
 8004812:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	887a      	ldrh	r2, [r7, #2]
 8004818:	80da      	strh	r2, [r3, #6]
    }
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8004826:	b580      	push	{r7, lr}
 8004828:	b082      	sub	sp, #8
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	460b      	mov	r3, r1
 8004830:	807b      	strh	r3, [r7, #2]
 8004832:	4613      	mov	r3, r2
 8004834:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	3330      	adds	r3, #48	; 0x30
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004842:	4611      	mov	r1, r2
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	4798      	blx	r3
        setY(y);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3334      	adds	r3, #52	; 0x34
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004854:	4611      	mov	r1, r2
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	4798      	blx	r3
    }
 800485a:	bf00      	nop
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	460b      	mov	r3, r1
 800486c:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	887a      	ldrh	r2, [r7, #2]
 8004872:	811a      	strh	r2, [r3, #8]
    }
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	460b      	mov	r3, r1
 800488a:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	887a      	ldrh	r2, [r7, #2]
 8004890:	815a      	strh	r2, [r3, #10]
    }
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
    {
    }
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
 80048ba:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 80048de:	b580      	push	{r7, lr}
 80048e0:	b082      	sub	sp, #8
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
 80048e6:	460b      	mov	r3, r1
 80048e8:	807b      	strh	r3, [r7, #2]
 80048ea:	4613      	mov	r3, r2
 80048ec:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	3338      	adds	r3, #56	; 0x38
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80048fa:	4611      	mov	r1, r2
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	4798      	blx	r3
        setHeight(height);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	333c      	adds	r3, #60	; 0x3c
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f9b7 2000 	ldrsh.w	r2, [r7]
 800490c:	4611      	mov	r1, r2
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	4798      	blx	r3
    }
 8004912:	bf00      	nop
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <_ZN8touchgfx8Drawable14setWidthHeightERKS0_>:
     *
     * @param  drawable The Drawable to copy the width and height from.
     *
     * @see setWidthHeight(int16_t,int16_t)
     */
    void setWidthHeight(const Drawable& drawable)
 800491a:	b590      	push	{r4, r7, lr}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	6039      	str	r1, [r7, #0]
    {
        setWidthHeight(drawable.getWidth(), drawable.getHeight());
 8004924:	6838      	ldr	r0, [r7, #0]
 8004926:	f7ff ff46 	bl	80047b6 <_ZNK8touchgfx8Drawable8getWidthEv>
 800492a:	4603      	mov	r3, r0
 800492c:	461c      	mov	r4, r3
 800492e:	6838      	ldr	r0, [r7, #0]
 8004930:	f7ff ff4e 	bl	80047d0 <_ZNK8touchgfx8Drawable9getHeightEv>
 8004934:	4603      	mov	r3, r0
 8004936:	461a      	mov	r2, r3
 8004938:	4621      	mov	r1, r4
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7ff ffcf 	bl	80048de <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	bd90      	pop	{r4, r7, pc}

08004948 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8004952:	bf00      	nop
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
    {
    }
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	460b      	mov	r3, r1
 800497c:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	78fa      	ldrb	r2, [r7, #3]
 8004982:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 80049a0:	4618      	mov	r0, r3
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 80049ba:	4618      	mov	r0, r3
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b082      	sub	sp, #8
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	460b      	mov	r3, r1
 80049d0:	807b      	strh	r3, [r7, #2]
 80049d2:	4613      	mov	r3, r2
 80049d4:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3354      	adds	r3, #84	; 0x54
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	8879      	ldrh	r1, [r7, #2]
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80049e6:	b292      	uxth	r2, r2
 80049e8:	1a8a      	subs	r2, r1, r2
 80049ea:	b292      	uxth	r2, r2
 80049ec:	b210      	sxth	r0, r2
 80049ee:	8839      	ldrh	r1, [r7, #0]
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80049f6:	b292      	uxth	r2, r2
 80049f8:	1a8a      	subs	r2, r1, r2
 80049fa:	b292      	uxth	r2, r2
 80049fc:	b212      	sxth	r2, r2
 80049fe:	4601      	mov	r1, r0
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	4798      	blx	r3
    }
 8004a04:	bf00      	nop
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a1a:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a22:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a2a:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f7ff ffe1 	bl	8004a0c <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	601a      	str	r2, [r3, #0]
    }
 8004a58:	bf00      	nop
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff fe14 	bl	8004698 <_ZN8touchgfx8DrawableC1Ev>
 8004a70:	4a05      	ldr	r2, [pc, #20]	; (8004a88 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	08027920 	.word	0x08027920

08004a8c <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 8004a98:	4618      	mov	r0, r3
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
    {
 8004aac:	4a06      	ldr	r2, [pc, #24]	; (8004ac8 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	601a      	str	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fb16 	bl	80050e8 <_ZN8touchgfx9ContainerD1Ev>
    }
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	08027f04 	.word	0x08027f04

08004acc <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
    }
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f7ff ffe5 	bl	8004aa4 <_ZN8touchgfx6ScreenD1Ev>
 8004ada:	213c      	movs	r1, #60	; 0x3c
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f020 f9ee 	bl	8024ebe <_ZdlPvj>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
    {
    }
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
    {
    }
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
    {
    }
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
    {
    }
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	3304      	adds	r3, #4
 8004b62:	6839      	ldr	r1, [r7, #0]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f00e f86d 	bl	8012c44 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8004b6a:	bf00      	nop
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b084      	sub	sp, #16
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	60f8      	str	r0, [r7, #12]
 8004b7a:	607b      	str	r3, [r7, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	817b      	strh	r3, [r7, #10]
 8004b80:	4613      	mov	r3, r2
 8004b82:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7ff ff03 	bl	8004992 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d008      	beq.n	8004ba4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff ff09 	bl	80049ac <_ZNK8touchgfx8Drawable11isTouchableEv>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	601a      	str	r2, [r3, #0]
        }
    }
 8004bb0:	bf00      	nop
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7ff fd68 	bl	8004698 <_ZN8touchgfx8DrawableC1Ev>
 8004bc8:	4a03      	ldr	r2, [pc, #12]	; (8004bd8 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	08027708 	.word	0x08027708

08004bdc <_ZN8touchgfx6WidgetD1Ev>:
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	4a05      	ldr	r2, [pc, #20]	; (8004bfc <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff fd83 	bl	80046f8 <_ZN8touchgfx8DrawableD1Ev>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3708      	adds	r7, #8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	08027708 	.word	0x08027708

08004c00 <_ZN8touchgfx6WidgetD0Ev>:
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7ff ffe7 	bl	8004bdc <_ZN8touchgfx6WidgetD1Ev>
 8004c0e:	2128      	movs	r1, #40	; 0x28
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f020 f954 	bl	8024ebe <_ZdlPvj>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	2326      	movs	r3, #38	; 0x26
 8004c2e:	461a      	mov	r2, r3
 8004c30:	2100      	movs	r1, #0
 8004c32:	f020 f9ff 	bl	8025034 <memset>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7ff ffbd 	bl	8004bb8 <_ZN8touchgfx6WidgetC1Ev>
 8004c3e:	4a09      	ldr	r2, [pc, #36]	; (8004c64 <_ZN8touchgfx3BoxC1Ev+0x44>)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	22ff      	movs	r2, #255	; 0xff
 8004c48:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3328      	adds	r3, #40	; 0x28
 8004c50:	2100      	movs	r1, #0
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7ff fcd4 	bl	8004600 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	08027b98 	.word	0x08027b98

08004c68 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <_ZN8touchgfx3Box8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	78fa      	ldrb	r2, [r7, #3]
 8004c94:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	2326      	movs	r3, #38	; 0x26
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	f020 f9bc 	bl	8025034 <memset>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff ff7a 	bl	8004bb8 <_ZN8touchgfx6WidgetC1Ev>
 8004cc4:	4a09      	ldr	r2, [pc, #36]	; (8004cec <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	8812      	ldrh	r2, [r2, #0]
 8004cd0:	84da      	strh	r2, [r3, #38]	; 0x26
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	22ff      	movs	r2, #255	; 0xff
 8004cd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 8004cda:	6839      	ldr	r1, [r7, #0]
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f00f fe42 	bl	8014966 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	08027cf8 	.word	0x08027cf8

08004cf0 <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8004cfc:	4a06      	ldr	r2, [pc, #24]	; (8004d18 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	601a      	str	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	887a      	ldrh	r2, [r7, #2]
 8004d06:	809a      	strh	r2, [r3, #4]
    }
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	080272b8 	.word	0x080272b8

08004d1c <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4618      	mov	r0, r3
 8004d28:	2326      	movs	r3, #38	; 0x26
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	f020 f981 	bl	8025034 <memset>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7ff ff3f 	bl	8004bb8 <_ZN8touchgfx6WidgetC1Ev>
 8004d3a:	4a16      	ldr	r2, [pc, #88]	; (8004d94 <_ZN8touchgfx8TextAreaC1Ev+0x78>)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3328      	adds	r3, #40	; 0x28
 8004d44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7ff ffd1 	bl	8004cf0 <_ZN8touchgfx9TypedTextC1Et>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	3330      	adds	r3, #48	; 0x30
 8004d52:	2100      	movs	r1, #0
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7ff fc53 	bl	8004600 <_ZN8touchgfx9colortypeC1Em>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	869a      	strh	r2, [r3, #52]	; 0x34
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	22ff      	movs	r2, #255	; 0xff
 8004d64:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	333c      	adds	r3, #60	; 0x3c
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 f8f2 	bl	8004f6e <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    {
    }
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	08027b08 	.word	0x08027b08

08004d98 <_ZN8touchgfx8TextArea8setWidthEs>:

    virtual void setWidth(int16_t width)
 8004d98:	b590      	push	{r4, r7, lr}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6178      	str	r0, [r7, #20]
 8004da0:	460b      	mov	r3, r1
 8004da2:	827b      	strh	r3, [r7, #18]
    {
        Widget::setWidth(width);
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004daa:	4611      	mov	r1, r2
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7ff fd58 	bl	8004862 <_ZN8touchgfx8Drawable8setWidthEs>
        boundingArea = calculateBoundingArea();
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3384      	adds	r3, #132	; 0x84
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	697c      	ldr	r4, [r7, #20]
 8004dbc:	463a      	mov	r2, r7
 8004dbe:	6979      	ldr	r1, [r7, #20]
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	4798      	blx	r3
 8004dc4:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8004dc8:	463a      	mov	r2, r7
 8004dca:	ca07      	ldmia	r2, {r0, r1, r2}
 8004dcc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8004dd0:	bf00      	nop
 8004dd2:	371c      	adds	r7, #28
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd90      	pop	{r4, r7, pc}

08004dd8 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 8004dd8:	b590      	push	{r4, r7, lr}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6178      	str	r0, [r7, #20]
 8004de0:	460b      	mov	r3, r1
 8004de2:	827b      	strh	r3, [r7, #18]
    {
        Widget::setHeight(height);
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004dea:	4611      	mov	r1, r2
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7ff fd47 	bl	8004880 <_ZN8touchgfx8Drawable9setHeightEs>
        boundingArea = calculateBoundingArea();
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3384      	adds	r3, #132	; 0x84
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	697c      	ldr	r4, [r7, #20]
 8004dfc:	463a      	mov	r2, r7
 8004dfe:	6979      	ldr	r1, [r7, #20]
 8004e00:	4610      	mov	r0, r2
 8004e02:	4798      	blx	r3
 8004e04:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8004e08:	463a      	mov	r2, r7
 8004e0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8004e0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8004e10:	bf00      	nop
 8004e12:	371c      	adds	r7, #28
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd90      	pop	{r4, r7, pc}

08004e18 <_ZNK8touchgfx8TextArea12getSolidRectEv>:

    virtual Rect getSolidRect() const
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7fd fcd2 	bl	80027cc <_ZN8touchgfx4RectC1Ev>
    }
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <_ZN8touchgfx8TextArea8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	78fa      	ldrb	r2, [r7, #3]
 8004e40:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    }
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 8004e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8004e5c:	687e      	ldr	r6, [r7, #4]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3334      	adds	r3, #52	; 0x34
 8004e64:	681c      	ldr	r4, [r3, #0]
 8004e66:	887d      	ldrh	r5, [r7, #2]
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f869 	bl	8004f40 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	60fb      	str	r3, [r7, #12]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004e72:	4b1d      	ldr	r3, [pc, #116]	; (8004ee8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d105      	bne.n	8004e86 <_ZN8touchgfx8TextArea12setBaselineYEs+0x36>
 8004e7a:	4b1c      	ldr	r3, [pc, #112]	; (8004eec <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 8004e7c:	4a1c      	ldr	r2, [pc, #112]	; (8004ef0 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 8004e7e:	216c      	movs	r1, #108	; 0x6c
 8004e80:	481c      	ldr	r0, [pc, #112]	; (8004ef4 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 8004e82:	f020 f84b 	bl	8024f1c <__assert_func>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	60bb      	str	r3, [r7, #8]
        return typedTextId < numberOfTypedTexts;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	889a      	ldrh	r2, [r3, #4]
 8004e8e:	4b1a      	ldr	r3, [pc, #104]	; (8004ef8 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa8>)
 8004e90:	881b      	ldrh	r3, [r3, #0]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	bf34      	ite	cc
 8004e96:	2301      	movcc	r3, #1
 8004e98:	2300      	movcs	r3, #0
 8004e9a:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d105      	bne.n	8004eac <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>
 8004ea0:	4b16      	ldr	r3, [pc, #88]	; (8004efc <_ZN8touchgfx8TextArea12setBaselineYEs+0xac>)
 8004ea2:	4a13      	ldr	r2, [pc, #76]	; (8004ef0 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 8004ea4:	216d      	movs	r1, #109	; 0x6d
 8004ea6:	4813      	ldr	r0, [pc, #76]	; (8004ef4 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 8004ea8:	f020 f838 	bl	8024f1c <__assert_func>
 8004eac:	bf00      	nop
        return fonts[typedTexts[typedTextId].fontIdx];
 8004eae:	4b14      	ldr	r3, [pc, #80]	; (8004f00 <_ZN8touchgfx8TextArea12setBaselineYEs+0xb0>)
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	4b0d      	ldr	r3, [pc, #52]	; (8004ee8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 8004eb4:	6819      	ldr	r1, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	889b      	ldrh	r3, [r3, #4]
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	440b      	add	r3, r1
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	322c      	adds	r2, #44	; 0x2c
 8004eca:	6812      	ldr	r2, [r2, #0]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	4790      	blx	r2
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	1aeb      	subs	r3, r5, r3
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	b21b      	sxth	r3, r3
 8004ed8:	4619      	mov	r1, r3
 8004eda:	4630      	mov	r0, r6
 8004edc:	47a0      	blx	r4
    }
 8004ede:	bf00      	nop
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	2400b0d4 	.word	0x2400b0d4
 8004eec:	08026838 	.word	0x08026838
 8004ef0:	0802687c 	.word	0x0802687c
 8004ef4:	080268b8 	.word	0x080268b8
 8004ef8:	2400b0d8 	.word	0x2400b0d8
 8004efc:	08026910 	.word	0x08026910
 8004f00:	2400b0dc 	.word	0x2400b0dc

08004f04 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	807b      	strh	r3, [r7, #2]
 8004f10:	4613      	mov	r3, r2
 8004f12:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	3330      	adds	r3, #48	; 0x30
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8004f22:	4610      	mov	r0, r2
 8004f24:	4798      	blx	r3
        setBaselineY(baselineY);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	3364      	adds	r3, #100	; 0x64
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004f32:	4611      	mov	r1, r2
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	4798      	blx	r3
    }
 8004f38:	bf00      	nop
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
    /**
     * Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    const TypedText& getTypedText() const
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3328      	adds	r3, #40	; 0x28
    }
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     *
     * @return A pointer to the second wildcard, if this text area has two wildcards, otherwise 0.
     *
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8004f60:	2300      	movs	r3, #0
    }
 8004f62:	4618      	mov	r0, r3
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b084      	sub	sp, #16
 8004f72:	af02      	add	r7, sp, #8
 8004f74:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f04f 33ff 	mov.w	r3, #4294967295
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f82:	2200      	movs	r2, #0
 8004f84:	2100      	movs	r1, #0
 8004f86:	f7ff fb4a 	bl	800461e <_ZN8touchgfx4RectC1Essss>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	609a      	str	r2, [r3, #8]
        {
        }
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4618      	mov	r0, r3
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
	...

08004f9c <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	4a08      	ldr	r2, [pc, #32]	; (8004fc8 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	3328      	adds	r3, #40	; 0x28
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fe feec 	bl	8003d8c <_ZN8touchgfx9TypedTextD1Ev>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7ff fe10 	bl	8004bdc <_ZN8touchgfx6WidgetD1Ev>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	08027b08 	.word	0x08027b08

08004fcc <_ZN8touchgfx8TextAreaD0Ev>:
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff ffe1 	bl	8004f9c <_ZN8touchgfx8TextAreaD1Ev>
 8004fda:	2148      	movs	r1, #72	; 0x48
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f01f ff6e 	bl	8024ebe <_ZdlPvj>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3708      	adds	r7, #8
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
 *
 */
class TextAreaWithWildcardBase : public TextArea
{
public:
    TextAreaWithWildcardBase()
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
        : TextArea()
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7ff fe90 	bl	8004d1c <_ZN8touchgfx8TextAreaC1Ev>
 8004ffc:	4a03      	ldr	r2, [pc, #12]	; (800500c <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	601a      	str	r2, [r3, #0]
    {
    }
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4618      	mov	r0, r3
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	08027c00 	.word	0x08027c00

08005010 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:
    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const;

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
    {
        return TextArea::BoundingArea();
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7ff ffa7 	bl	8004f6e <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    }
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	4a05      	ldr	r2, [pc, #20]	; (8005048 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4618      	mov	r0, r3
 800503a:	f7ff ffaf 	bl	8004f9c <_ZN8touchgfx8TextAreaD1Ev>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4618      	mov	r0, r3
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	08027c00 	.word	0x08027c00

0800504c <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f7ff ffe7 	bl	8005028 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800505a:	2148      	movs	r1, #72	; 0x48
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f01f ff2e 	bl	8024ebe <_ZdlPvj>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4618      	mov	r0, r3
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
{
public:
    TextAreaWithOneWildcard()
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wc1(0)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4618      	mov	r0, r3
 8005078:	f7ff ffb8 	bl	8004fec <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 800507c:	4a05      	ldr	r2, [pc, #20]	; (8005094 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	649a      	str	r2, [r3, #72]	; 0x48
    {
    }
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4618      	mov	r0, r3
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	08027678 	.word	0x08027678

08005098 <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard1(const Unicode::UnicodeChar* value)
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
    {
        wc1 = value;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	649a      	str	r2, [r3, #72]	; 0x48
    }
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:

    virtual const Unicode::UnicodeChar* getWildcard1() const
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
    {
        return wc1;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
 80050c0:	4618      	mov	r0, r3
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
    {
        setWildcard1(value);
 80050d6:	6839      	ldr	r1, [r7, #0]
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f7ff ffdd 	bl	8005098 <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>
    }
 80050de:	bf00      	nop
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
	...

080050e8 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	4a05      	ldr	r2, [pc, #20]	; (8005108 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7ff fafd 	bl	80046f8 <_ZN8touchgfx8DrawableD1Ev>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4618      	mov	r0, r3
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	08027920 	.word	0x08027920

0800510c <_ZN8touchgfx9ContainerD0Ev>:
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7ff ffe7 	bl	80050e8 <_ZN8touchgfx9ContainerD1Ev>
 800511a:	212c      	movs	r1, #44	; 0x2c
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f01f fece 	bl	8024ebe <_ZdlPvj>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4618      	mov	r0, r3
 8005126:	3708      	adds	r7, #8
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <_ZN8touchgfx23AbstractButtonContainerC1Ev>:
 * @see ClickButtonTrigger, RepeatButtonTrigger, ToggleButtonTrigger, TouchButtonTrigger
 */
class AbstractButtonContainer : public Container
{
public:
    AbstractButtonContainer()
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
        : pressed(false), alpha(255), action(0)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4618      	mov	r0, r3
 8005138:	f7ff fc92 	bl	8004a60 <_ZN8touchgfx9ContainerC1Ev>
 800513c:	4a0b      	ldr	r2, [pc, #44]	; (800516c <_ZN8touchgfx23AbstractButtonContainerC1Ev+0x40>)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	601a      	str	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	22ff      	movs	r2, #255	; 0xff
 800514e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	631a      	str	r2, [r3, #48]	; 0x30
    {
        setTouchable(true);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2101      	movs	r1, #1
 800515c:	4618      	mov	r0, r3
 800515e:	f7ff fc08 	bl	8004972 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4618      	mov	r0, r3
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	080275dc 	.word	0x080275dc

08005170 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>:
     *
     * @param  isPressed True if is pressed, false if not.
     *
     * @see getPressed, handlePressedUpdated
     */
    void setPressed(bool isPressed)
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	460b      	mov	r3, r1
 800517a:	70fb      	strb	r3, [r7, #3]
    {
        pressed = isPressed;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	78fa      	ldrb	r2, [r7, #3]
 8005180:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        handlePressedUpdated();
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	338c      	adds	r3, #140	; 0x8c
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	4798      	blx	r3
    }
 8005190:	bf00      	nop
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>:
     *
     * @return True if it succeeds, false if it fails.
     *
     * @see setPressed
     */
    bool getPressed()
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 80051a6:	4618      	mov	r0, r3
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>:
        alpha = newAlpha;
        handleAlphaUpdated();
    }

    /** @copydoc Image::getAlpha() */
    uint8_t getAlpha() const
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    }
 80051c0:	4618      	mov	r0, r3
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     *
     * @param  callback The callback.
     *
     * @see executeAction
     */
    void setAction(GenericCallback<const AbstractButtonContainer&>& callback)
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
    {
        if (action && action->isValid())
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00d      	beq.n	8005214 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2c>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	330c      	adds	r3, #12
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4610      	mov	r0, r2
 8005208:	4798      	blx	r3
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2c>
 8005210:	2301      	movs	r3, #1
 8005212:	e000      	b.n	8005216 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2e>
 8005214:	2300      	movs	r3, #0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d009      	beq.n	800522e <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x46>
        {
            action->execute(*this);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	3308      	adds	r3, #8
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6879      	ldr	r1, [r7, #4]
 800522a:	4610      	mov	r0, r2
 800522c:	4798      	blx	r3
        }
    }
 800522e:	bf00      	nop
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>:
    uint8_t alpha; ///< The current alpha value. 255 denotes solid, 0 denotes completely invisible.

    GenericCallback<const AbstractButtonContainer&>* action; ///< The action to be executed

    /** Handles what should happen when the pressed state is updated. */
    virtual void handlePressedUpdated()
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
    {
    }
 800523e:	bf00      	nop
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>:

    /** Handles what should happen when the alpha is updated. */
    virtual void handleAlphaUpdated()
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
    {
    }
 8005252:	bf00      	nop
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
	...

08005260 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	4a05      	ldr	r2, [pc, #20]	; (8005280 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4618      	mov	r0, r3
 8005272:	f7ff fcb3 	bl	8004bdc <_ZN8touchgfx6WidgetD1Ev>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4618      	mov	r0, r3
 800527a:	3708      	adds	r7, #8
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	08027cf8 	.word	0x08027cf8

08005284 <_ZN8touchgfx5ImageD0Ev>:
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f7ff ffe7 	bl	8005260 <_ZN8touchgfx5ImageD1Ev>
 8005292:	212c      	movs	r1, #44	; 0x2c
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f01f fe12 	bl	8024ebe <_ZdlPvj>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4618      	mov	r0, r3
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	4a05      	ldr	r2, [pc, #20]	; (80052c4 <_ZN8touchgfx3BoxD1Ev+0x20>)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7ff fc91 	bl	8004bdc <_ZN8touchgfx6WidgetD1Ev>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4618      	mov	r0, r3
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	08027b98 	.word	0x08027b98

080052c8 <_ZN8touchgfx3BoxD0Ev>:
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7ff ffe7 	bl	80052a4 <_ZN8touchgfx3BoxD1Ev>
 80052d6:	212c      	movs	r1, #44	; 0x2c
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f01f fdf0 	bl	8024ebe <_ZdlPvj>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4618      	mov	r0, r3
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <_ZN8touchgfx13BoxWithBorderC1Ev>:
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff fc94 	bl	8004c20 <_ZN8touchgfx3BoxC1Ev>
 80052f8:	4a08      	ldr	r2, [pc, #32]	; (800531c <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	332c      	adds	r3, #44	; 0x2c
 8005302:	2100      	movs	r1, #0
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff f97b 	bl	8004600 <_ZN8touchgfx9colortypeC1Em>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	861a      	strh	r2, [r3, #48]	; 0x30
    {
    }
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4618      	mov	r0, r3
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	08027c90 	.word	0x08027c90

08005320 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     *
     * @param  colorBorder The color of the border.
     *
     * @see setColor, getBorderColor, Color::getColorFromRGB
     */
    void setBorderColor(colortype colorBorder)
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
    {
        borderColor = colorBorder;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	460b      	mov	r3, r1
 8005346:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	887a      	ldrh	r2, [r7, #2]
 800534c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
 800534e:	bf00      	nop
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
	...

0800535c <_ZN8touchgfx23AbstractButtonContainerD1Ev>:
class AbstractButtonContainer : public Container
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	4a05      	ldr	r2, [pc, #20]	; (800537c <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x20>)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4618      	mov	r0, r3
 800536e:	f7ff febb 	bl	80050e8 <_ZN8touchgfx9ContainerD1Ev>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4618      	mov	r0, r3
 8005376:	3708      	adds	r7, #8
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	080275dc 	.word	0x080275dc

08005380 <_ZN8touchgfx23AbstractButtonContainerD0Ev>:
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f7ff ffe7 	bl	800535c <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 800538e:	2134      	movs	r1, #52	; 0x34
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f01f fd94 	bl	8024ebe <_ZdlPvj>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4618      	mov	r0, r3
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7ff fef3 	bl	8005198 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 80053b2:	4603      	mov	r3, r0
 80053b4:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 80053b6:	6838      	ldr	r0, [r7, #0]
 80053b8:	f7ff f951 	bl	800465e <_ZNK8touchgfx10ClickEvent7getTypeEv>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	bf0c      	ite	eq
 80053c2:	2301      	moveq	r3, #1
 80053c4:	2300      	movne	r3, #0
 80053c6:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 80053c8:	7bbb      	ldrb	r3, [r7, #14]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d005      	beq.n	80053da <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 80053ce:	7bfb      	ldrb	r3, [r7, #15]
 80053d0:	f083 0301 	eor.w	r3, r3, #1
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d108      	bne.n	80053ec <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 80053da:	7bbb      	ldrb	r3, [r7, #14]
 80053dc:	f083 0301 	eor.w	r3, r3, #1
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00f      	beq.n	8005406 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 80053e6:	7bfb      	ldrb	r3, [r7, #15]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00c      	beq.n	8005406 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	7bba      	ldrb	r2, [r7, #14]
 80053f0:	4611      	mov	r1, r2
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7ff febc 	bl	8005170 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	3314      	adds	r3, #20
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4610      	mov	r0, r2
 8005404:	4798      	blx	r3
        }
        if (newPressedValue)
 8005406:	7bbb      	ldrb	r3, [r7, #14]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d006      	beq.n	800541a <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7a>
        {
            executeAction();
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3388      	adds	r3, #136	; 0x88
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4610      	mov	r0, r2
 8005418:	4798      	blx	r3
        }
    }
 800541a:	bf00      	nop
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
	...

08005424 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	4a05      	ldr	r2, [pc, #20]	; (8005444 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4618      	mov	r0, r3
 8005436:	f7ff fb35 	bl	8004aa4 <_ZN8touchgfx6ScreenD1Ev>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4618      	mov	r0, r3
 800543e:	3708      	adds	r7, #8
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	080274f4 	.word	0x080274f4

08005448 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f7ff ffe7 	bl	8005424 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8005456:	2140      	movs	r1, #64	; 0x40
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f01f fd30 	bl	8024ebe <_ZdlPvj>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4618      	mov	r0, r3
 8005462:	3708      	adds	r7, #8
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	4a18      	ldr	r2, [pc, #96]	; (80054d4 <_ZN15Screen1ViewBaseD1Ev+0x6c>)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 800547c:	4618      	mov	r0, r3
 800547e:	f000 fe6d 	bl	800615c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8005488:	4618      	mov	r0, r3
 800548a:	f000 fe89 	bl	80061a0 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEED1Ev>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8005494:	4618      	mov	r0, r3
 8005496:	f000 fe83 	bl	80061a0 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEED1Ev>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	33c4      	adds	r3, #196	; 0xc4
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 fea6 	bl	80061f0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3398      	adds	r3, #152	; 0x98
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7ff fed9 	bl	8005260 <_ZN8touchgfx5ImageD1Ev>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	336c      	adds	r3, #108	; 0x6c
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff fed4 	bl	8005260 <_ZN8touchgfx5ImageD1Ev>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	3340      	adds	r3, #64	; 0x40
 80054bc:	4618      	mov	r0, r3
 80054be:	f7ff fef1 	bl	80052a4 <_ZN8touchgfx3BoxD1Ev>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7ff ffad 	bl	8005424 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4618      	mov	r0, r3
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	08027368 	.word	0x08027368

080054d8 <_ZN15Screen1ViewBaseD0Ev>:
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f7ff ffc1 	bl	8005468 <_ZN15Screen1ViewBaseD1Ev>
 80054e6:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f01f fce7 	bl	8024ebe <_ZdlPvj>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4618      	mov	r0, r3
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <_ZN15Screen1ViewBase7upclickEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void upclick()
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 8005502:	bf00      	nop
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <_ZN15Screen1ViewBase9downclickEv>:

    virtual void downclick()
 800550e:	b480      	push	{r7}
 8005510:	b083      	sub	sp, #12
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 8005516:	bf00      	nop
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
	...

08005524 <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase() :
 8005524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005528:	b0b4      	sub	sp, #208	; 0xd0
 800552a:	af02      	add	r7, sp, #8
 800552c:	6178      	str	r0, [r7, #20]
    flexButtonCallback(this, &Screen1ViewBase::flexButtonCallbackHandler)
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	4618      	mov	r0, r3
 8005532:	f000 fbd5 	bl	8005ce0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8005536:	4a8f      	ldr	r2, [pc, #572]	; (8005774 <_ZN15Screen1ViewBaseC1Ev+0x250>)
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	3340      	adds	r3, #64	; 0x40
 8005540:	4618      	mov	r0, r3
 8005542:	f7ff fb6d 	bl	8004c20 <_ZN8touchgfx3BoxC1Ev>
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800554c:	f107 031c 	add.w	r3, r7, #28
 8005550:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005554:	4618      	mov	r0, r3
 8005556:	f7ff f88e 	bl	8004676 <_ZN8touchgfx6BitmapC1Et>
 800555a:	f107 031c 	add.w	r3, r7, #28
 800555e:	4619      	mov	r1, r3
 8005560:	4620      	mov	r0, r4
 8005562:	f7ff fb9f 	bl	8004ca4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800556c:	f107 0320 	add.w	r3, r7, #32
 8005570:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff f87e 	bl	8004676 <_ZN8touchgfx6BitmapC1Et>
 800557a:	f107 0320 	add.w	r3, r7, #32
 800557e:	4619      	mov	r1, r3
 8005580:	4620      	mov	r0, r4
 8005582:	f7ff fb8f 	bl	8004ca4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	33c4      	adds	r3, #196	; 0xc4
 800558a:	4618      	mov	r0, r3
 800558c:	f7ff fd6e 	bl	800506c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8005596:	4618      	mov	r0, r3
 8005598:	f000 fc24 	bl	8005de4 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEEC1Ev>
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 fc1e 	bl	8005de4 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEEC1Ev>
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f503 702b 	add.w	r0, r3, #684	; 0x2ac
 80055ae:	4b72      	ldr	r3, [pc, #456]	; (8005778 <_ZN15Screen1ViewBaseC1Ev+0x254>)
 80055b0:	627b      	str	r3, [r7, #36]	; 0x24
 80055b2:	2300      	movs	r3, #0
 80055b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80055b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055ba:	cb0c      	ldmia	r3, {r2, r3}
 80055bc:	6979      	ldr	r1, [r7, #20]
 80055be:	f000 fc49 	bl	8005e54 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80055c8:	f44f 7388 	mov.w	r3, #272	; 0x110
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80055d2:	2200      	movs	r2, #0
 80055d4:	2100      	movs	r1, #0
 80055d6:	f7ff f8cd 	bl	8004774 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80055e0:	2300      	movs	r3, #0
 80055e2:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 80055e6:	2300      	movs	r3, #0
 80055e8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80055ec:	2300      	movs	r3, #0
 80055ee:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80055f2:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80055f6:	041b      	lsls	r3, r3, #16
 80055f8:	461a      	mov	r2, r3
 80055fa:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80055fe:	021b      	lsls	r3, r3, #8
 8005600:	431a      	orrs	r2, r3
 8005602:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8005606:	4313      	orrs	r3, r2
 8005608:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800560c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005610:	4611      	mov	r1, r2
 8005612:	4618      	mov	r0, r3
 8005614:	f7fe fff4 	bl	8004600 <_ZN8touchgfx9colortypeC1Em>
 8005618:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800561c:	4619      	mov	r1, r3
 800561e:	4620      	mov	r0, r4
 8005620:	f7ff fb22 	bl	8004c68 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    image1.setXY(0, 0);
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	336c      	adds	r3, #108	; 0x6c
 8005628:	2200      	movs	r2, #0
 800562a:	2100      	movs	r1, #0
 800562c:	4618      	mov	r0, r3
 800562e:	f7ff f8fa 	bl	8004826 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_DARK_BACKGROUNDS_MAIN_BG_TEXTURE_480X272PX_ID));
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8005638:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800563c:	2100      	movs	r1, #0
 800563e:	4618      	mov	r0, r3
 8005640:	f7ff f819 	bl	8004676 <_ZN8touchgfx6BitmapC1Et>
 8005644:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005648:	4619      	mov	r1, r3
 800564a:	4620      	mov	r0, r4
 800564c:	f00f f98b 	bl	8014966 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    image2.setXY(60, 106);
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	3398      	adds	r3, #152	; 0x98
 8005654:	226a      	movs	r2, #106	; 0x6a
 8005656:	213c      	movs	r1, #60	; 0x3c
 8005658:	4618      	mov	r0, r3
 800565a:	f7ff f8e4 	bl	8004826 <_ZN8touchgfx8Drawable5setXYEss>
    image2.setBitmap(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_LARGE_PRESSED_ID));
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8005664:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005668:	2101      	movs	r1, #1
 800566a:	4618      	mov	r0, r3
 800566c:	f7ff f803 	bl	8004676 <_ZN8touchgfx6BitmapC1Et>
 8005670:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005674:	4619      	mov	r1, r3
 8005676:	4620      	mov	r0, r4
 8005678:	f00f f975 	bl	8014966 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    textArea1.setPosition(174, 121, 132, 30);
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 8005682:	231e      	movs	r3, #30
 8005684:	9300      	str	r3, [sp, #0]
 8005686:	2384      	movs	r3, #132	; 0x84
 8005688:	2279      	movs	r2, #121	; 0x79
 800568a:	21ae      	movs	r1, #174	; 0xae
 800568c:	f7ff f872 	bl	8004774 <_ZN8touchgfx8Drawable11setPositionEssss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 8005696:	23ff      	movs	r3, #255	; 0xff
 8005698:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 800569c:	23ff      	movs	r3, #255	; 0xff
 800569e:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 80056a2:	23ff      	movs	r3, #255	; 0xff
 80056a4:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 80056a8:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80056ac:	041b      	lsls	r3, r3, #16
 80056ae:	461a      	mov	r2, r3
 80056b0:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 80056b4:	021b      	lsls	r3, r3, #8
 80056b6:	431a      	orrs	r2, r3
 80056b8:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80056bc:	4313      	orrs	r3, r2
 80056be:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80056c2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80056c6:	4611      	mov	r1, r2
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7fe ff99 	bl	8004600 <_ZN8touchgfx9colortypeC1Em>
 80056ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056d2:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 80056d6:	61bb      	str	r3, [r7, #24]
        color = newColor;
 80056d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80056e0:	bf00      	nop
    textArea1.setLinespacing(0);
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	33c4      	adds	r3, #196	; 0xc4
 80056e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056ea:	2300      	movs	r3, #0
 80056ec:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
        linespace = space;
 80056f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056f4:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 80056f8:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 80056fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3384      	adds	r3, #132	; 0x84
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8005708:	463a      	mov	r2, r7
 800570a:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800570e:	4610      	mov	r0, r2
 8005710:	4798      	blx	r3
 8005712:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8005716:	463a      	mov	r2, r7
 8005718:	ca07      	ldmia	r2, {r0, r1, r2}
 800571a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800571e:	bf00      	nop
    Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_068G).getText());
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f503 7428 	add.w	r4, r3, #672	; 0x2a0
 8005726:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800572a:	2100      	movs	r1, #0
 800572c:	4618      	mov	r0, r3
 800572e:	f7ff fadf 	bl	8004cf0 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8005732:	4b12      	ldr	r3, [pc, #72]	; (800577c <_ZN15Screen1ViewBaseC1Ev+0x258>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d105      	bne.n	8005746 <_ZN15Screen1ViewBaseC1Ev+0x222>
 800573a:	4b11      	ldr	r3, [pc, #68]	; (8005780 <_ZN15Screen1ViewBaseC1Ev+0x25c>)
 800573c:	4a11      	ldr	r2, [pc, #68]	; (8005784 <_ZN15Screen1ViewBaseC1Ev+0x260>)
 800573e:	2160      	movs	r1, #96	; 0x60
 8005740:	4811      	ldr	r0, [pc, #68]	; (8005788 <_ZN15Screen1ViewBaseC1Ev+0x264>)
 8005742:	f01f fbeb 	bl	8024f1c <__assert_func>
 8005746:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800574a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        return typedTextId < numberOfTypedTexts;
 800574e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005752:	889a      	ldrh	r2, [r3, #4]
 8005754:	4b0d      	ldr	r3, [pc, #52]	; (800578c <_ZN15Screen1ViewBaseC1Ev+0x268>)
 8005756:	881b      	ldrh	r3, [r3, #0]
 8005758:	429a      	cmp	r2, r3
 800575a:	bf34      	ite	cc
 800575c:	2301      	movcc	r3, #1
 800575e:	2300      	movcs	r3, #0
 8005760:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8005762:	2b00      	cmp	r3, #0
 8005764:	d116      	bne.n	8005794 <_ZN15Screen1ViewBaseC1Ev+0x270>
 8005766:	4b0a      	ldr	r3, [pc, #40]	; (8005790 <_ZN15Screen1ViewBaseC1Ev+0x26c>)
 8005768:	4a06      	ldr	r2, [pc, #24]	; (8005784 <_ZN15Screen1ViewBaseC1Ev+0x260>)
 800576a:	2161      	movs	r1, #97	; 0x61
 800576c:	4806      	ldr	r0, [pc, #24]	; (8005788 <_ZN15Screen1ViewBaseC1Ev+0x264>)
 800576e:	f01f fbd5 	bl	8024f1c <__assert_func>
 8005772:	bf00      	nop
 8005774:	08027368 	.word	0x08027368
 8005778:	08005c9d 	.word	0x08005c9d
 800577c:	2400b0d4 	.word	0x2400b0d4
 8005780:	08026838 	.word	0x08026838
 8005784:	08026950 	.word	0x08026950
 8005788:	080268b8 	.word	0x080268b8
 800578c:	2400b0d8 	.word	0x2400b0d8
 8005790:	08026910 	.word	0x08026910
 8005794:	bf00      	nop
        return texts->getText(typedTextId);
 8005796:	4bec      	ldr	r3, [pc, #944]	; (8005b48 <_ZN15Screen1ViewBaseC1Ev+0x624>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800579c:	4611      	mov	r1, r2
 800579e:	4618      	mov	r0, r3
 80057a0:	f001 f852 	bl	8006848 <_ZNK8touchgfx5Texts7getTextEt>
 80057a4:	4603      	mov	r3, r0
 80057a6:	bf00      	nop
 80057a8:	4ae8      	ldr	r2, [pc, #928]	; (8005b4c <_ZN15Screen1ViewBaseC1Ev+0x628>)
 80057aa:	2105      	movs	r1, #5
 80057ac:	4620      	mov	r0, r4
 80057ae:	f013 fcf3 	bl	8019198 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80057b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7fe fae8 	bl	8003d8c <_ZN8touchgfx9TypedTextD1Ev>
    textArea1.setWildcard(textArea1Buffer);
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 80057c8:	4619      	mov	r1, r3
 80057ca:	4610      	mov	r0, r2
 80057cc:	f7ff fc7e 	bl	80050cc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_CWD8));
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 80057d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80057da:	2103      	movs	r1, #3
 80057dc:	4618      	mov	r0, r3
 80057de:	f7ff fa87 	bl	8004cf0 <_ZN8touchgfx9TypedTextC1Et>
 80057e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80057e6:	4619      	mov	r1, r3
 80057e8:	4620      	mov	r0, r4
 80057ea:	f00e ff01 	bl	80145f0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80057ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fe faca 	bl	8003d8c <_ZN8touchgfx9TypedTextD1Ev>

    flexButton1.setBoxWithBorderPosition(0, 0, 40, 30);
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f503 7088 	add.w	r0, r3, #272	; 0x110
 80057fe:	231e      	movs	r3, #30
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	2328      	movs	r3, #40	; 0x28
 8005804:	2200      	movs	r2, #0
 8005806:	2100      	movs	r1, #0
 8005808:	f000 fb44 	bl	8005e94 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE24setBoxWithBorderPositionEssss>
    flexButton1.setBorderSize(5);
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8005812:	2105      	movs	r1, #5
 8005814:	4618      	mov	r0, r3
 8005816:	f000 fb5d 	bl	8005ed4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE13setBorderSizeEh>
    flexButton1.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f503 7488 	add.w	r4, r3, #272	; 0x110
 8005820:	2300      	movs	r3, #0
 8005822:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
 8005826:	2366      	movs	r3, #102	; 0x66
 8005828:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 800582c:	2399      	movs	r3, #153	; 0x99
 800582e:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
 8005832:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8005836:	041b      	lsls	r3, r3, #16
 8005838:	461a      	mov	r2, r3
 800583a:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 800583e:	021b      	lsls	r3, r3, #8
 8005840:	431a      	orrs	r2, r3
 8005842:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8005846:	4313      	orrs	r3, r2
 8005848:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800584c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005850:	4611      	mov	r1, r2
 8005852:	4618      	mov	r0, r3
 8005854:	f7fe fed4 	bl	8004600 <_ZN8touchgfx9colortypeC1Em>
 8005858:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800585c:	461d      	mov	r5, r3
 800585e:	2300      	movs	r3, #0
 8005860:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
 8005864:	2399      	movs	r3, #153	; 0x99
 8005866:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
 800586a:	23cc      	movs	r3, #204	; 0xcc
 800586c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8005870:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8005874:	041b      	lsls	r3, r3, #16
 8005876:	461a      	mov	r2, r3
 8005878:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 800587c:	021b      	lsls	r3, r3, #8
 800587e:	431a      	orrs	r2, r3
 8005880:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005884:	4313      	orrs	r3, r2
 8005886:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800588a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800588e:	4611      	mov	r1, r2
 8005890:	4618      	mov	r0, r3
 8005892:	f7fe feb5 	bl	8004600 <_ZN8touchgfx9colortypeC1Em>
 8005896:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005898:	461e      	mov	r6, r3
 800589a:	2300      	movs	r3, #0
 800589c:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
 80058a0:	2333      	movs	r3, #51	; 0x33
 80058a2:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 80058a6:	2366      	movs	r3, #102	; 0x66
 80058a8:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
 80058ac:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 80058b0:	041b      	lsls	r3, r3, #16
 80058b2:	461a      	mov	r2, r3
 80058b4:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80058b8:	021b      	lsls	r3, r3, #8
 80058ba:	431a      	orrs	r2, r3
 80058bc:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 80058c0:	4313      	orrs	r3, r2
 80058c2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80058c6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80058ca:	4611      	mov	r1, r2
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7fe fe97 	bl	8004600 <_ZN8touchgfx9colortypeC1Em>
 80058d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058d4:	4698      	mov	r8, r3
 80058d6:	2333      	movs	r3, #51	; 0x33
 80058d8:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80058dc:	2366      	movs	r3, #102	; 0x66
 80058de:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 80058e2:	2399      	movs	r3, #153	; 0x99
 80058e4:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
 80058e8:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80058ec:	041b      	lsls	r3, r3, #16
 80058ee:	461a      	mov	r2, r3
 80058f0:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80058f4:	021b      	lsls	r3, r3, #8
 80058f6:	431a      	orrs	r2, r3
 80058f8:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80058fc:	4313      	orrs	r3, r2
 80058fe:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005902:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005906:	4611      	mov	r1, r2
 8005908:	4618      	mov	r0, r3
 800590a:	f7fe fe79 	bl	8004600 <_ZN8touchgfx9colortypeC1Em>
 800590e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	4643      	mov	r3, r8
 8005914:	4632      	mov	r2, r6
 8005916:	4629      	mov	r1, r5
 8005918:	4620      	mov	r0, r4
 800591a:	f000 faed 	bl	8005ef8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    flexButton1.setText(TypedText(T___SINGLEUSE_1W3X));
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f503 7488 	add.w	r4, r3, #272	; 0x110
 8005924:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005928:	2102      	movs	r1, #2
 800592a:	4618      	mov	r0, r3
 800592c:	f7ff f9e0 	bl	8004cf0 <_ZN8touchgfx9TypedTextC1Et>
 8005930:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005934:	4619      	mov	r1, r3
 8005936:	4620      	mov	r0, r4
 8005938:	f000 fafb 	bl	8005f32 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE7setTextENS_9TypedTextE>
 800593c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005940:	4618      	mov	r0, r3
 8005942:	f7fe fa23 	bl	8003d8c <_ZN8touchgfx9TypedTextD1Ev>
    flexButton1.setTextPosition(0, 0, 40, 30);
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f503 7088 	add.w	r0, r3, #272	; 0x110
 800594c:	231e      	movs	r3, #30
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	2328      	movs	r3, #40	; 0x28
 8005952:	2200      	movs	r2, #0
 8005954:	2100      	movs	r1, #0
 8005956:	f000 fb02 	bl	8005f5e <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE15setTextPositionEssss>
    flexButton1.setTextColors(touchgfx::Color::getColorFromRGB(10, 10, 10), touchgfx::Color::getColorFromRGB(10, 10, 10));
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f503 7488 	add.w	r4, r3, #272	; 0x110
 8005960:	230a      	movs	r3, #10
 8005962:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
 8005966:	230a      	movs	r3, #10
 8005968:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 800596c:	230a      	movs	r3, #10
 800596e:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
 8005972:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8005976:	041b      	lsls	r3, r3, #16
 8005978:	461a      	mov	r2, r3
 800597a:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 800597e:	021b      	lsls	r3, r3, #8
 8005980:	431a      	orrs	r2, r3
 8005982:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8005986:	4313      	orrs	r3, r2
 8005988:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800598c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005990:	4611      	mov	r1, r2
 8005992:	4618      	mov	r0, r3
 8005994:	f7fe fe34 	bl	8004600 <_ZN8touchgfx9colortypeC1Em>
 8005998:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800599a:	461d      	mov	r5, r3
 800599c:	230a      	movs	r3, #10
 800599e:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 80059a2:	230a      	movs	r3, #10
 80059a4:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80059a8:	230a      	movs	r3, #10
 80059aa:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 80059ae:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80059b2:	041b      	lsls	r3, r3, #16
 80059b4:	461a      	mov	r2, r3
 80059b6:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80059ba:	021b      	lsls	r3, r3, #8
 80059bc:	431a      	orrs	r2, r3
 80059be:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80059c2:	4313      	orrs	r3, r2
 80059c4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80059c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80059cc:	4611      	mov	r1, r2
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fe fe16 	bl	8004600 <_ZN8touchgfx9colortypeC1Em>
 80059d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059d6:	461a      	mov	r2, r3
 80059d8:	4629      	mov	r1, r5
 80059da:	4620      	mov	r0, r4
 80059dc:	f000 fadf 	bl	8005f9e <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>
    flexButton1.setPosition(40, 200, 40, 30);
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	f503 7088 	add.w	r0, r3, #272	; 0x110
 80059e6:	231e      	movs	r3, #30
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	2328      	movs	r3, #40	; 0x28
 80059ec:	22c8      	movs	r2, #200	; 0xc8
 80059ee:	2128      	movs	r1, #40	; 0x28
 80059f0:	f7fe fec0 	bl	8004774 <_ZN8touchgfx8Drawable11setPositionEssss>
    flexButton1.setAction(flexButtonCallback);
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f503 7288 	add.w	r2, r3, #272	; 0x110
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8005a00:	4619      	mov	r1, r3
 8005a02:	4610      	mov	r0, r2
 8005a04:	f7ff fbe2 	bl	80051cc <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    flexButton2.setBoxWithBorderPosition(0, 0, 40, 30);
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 8005a0e:	231e      	movs	r3, #30
 8005a10:	9300      	str	r3, [sp, #0]
 8005a12:	2328      	movs	r3, #40	; 0x28
 8005a14:	2200      	movs	r2, #0
 8005a16:	2100      	movs	r1, #0
 8005a18:	f000 fa3c 	bl	8005e94 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE24setBoxWithBorderPositionEssss>
    flexButton2.setBorderSize(5);
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8005a22:	2105      	movs	r1, #5
 8005a24:	4618      	mov	r0, r3
 8005a26:	f000 fa55 	bl	8005ed4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE13setBorderSizeEh>
    flexButton2.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 8005a30:	2300      	movs	r3, #0
 8005a32:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
 8005a36:	2366      	movs	r3, #102	; 0x66
 8005a38:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8005a3c:	2399      	movs	r3, #153	; 0x99
 8005a3e:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 8005a42:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8005a46:	041b      	lsls	r3, r3, #16
 8005a48:	461a      	mov	r2, r3
 8005a4a:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8005a4e:	021b      	lsls	r3, r3, #8
 8005a50:	431a      	orrs	r2, r3
 8005a52:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8005a56:	4313      	orrs	r3, r2
 8005a58:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005a5c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005a60:	4611      	mov	r1, r2
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fe fdcc 	bl	8004600 <_ZN8touchgfx9colortypeC1Em>
 8005a68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a6a:	461d      	mov	r5, r3
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
 8005a72:	2399      	movs	r3, #153	; 0x99
 8005a74:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
 8005a78:	23cc      	movs	r3, #204	; 0xcc
 8005a7a:	f887 30b9 	strb.w	r3, [r7, #185]	; 0xb9
 8005a7e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8005a82:	041b      	lsls	r3, r3, #16
 8005a84:	461a      	mov	r2, r3
 8005a86:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8005a8a:	021b      	lsls	r3, r3, #8
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 8005a92:	4313      	orrs	r3, r2
 8005a94:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005a98:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005a9c:	4611      	mov	r1, r2
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fe fdae 	bl	8004600 <_ZN8touchgfx9colortypeC1Em>
 8005aa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005aa6:	461e      	mov	r6, r3
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
 8005aae:	2333      	movs	r3, #51	; 0x33
 8005ab0:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
 8005ab4:	2366      	movs	r3, #102	; 0x66
 8005ab6:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
 8005aba:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 8005abe:	041b      	lsls	r3, r3, #16
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 8005ac6:	021b      	lsls	r3, r3, #8
 8005ac8:	431a      	orrs	r2, r3
 8005aca:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005ad4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005ad8:	4611      	mov	r1, r2
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fe fd90 	bl	8004600 <_ZN8touchgfx9colortypeC1Em>
 8005ae0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ae2:	4698      	mov	r8, r3
 8005ae4:	2333      	movs	r3, #51	; 0x33
 8005ae6:	f887 30c1 	strb.w	r3, [r7, #193]	; 0xc1
 8005aea:	2366      	movs	r3, #102	; 0x66
 8005aec:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0
 8005af0:	2399      	movs	r3, #153	; 0x99
 8005af2:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 8005af6:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 8005afa:	041b      	lsls	r3, r3, #16
 8005afc:	461a      	mov	r2, r3
 8005afe:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 8005b02:	021b      	lsls	r3, r3, #8
 8005b04:	431a      	orrs	r2, r3
 8005b06:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005b10:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005b14:	4611      	mov	r1, r2
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fe fd72 	bl	8004600 <_ZN8touchgfx9colortypeC1Em>
 8005b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	4643      	mov	r3, r8
 8005b22:	4632      	mov	r2, r6
 8005b24:	4629      	mov	r1, r5
 8005b26:	4620      	mov	r0, r4
 8005b28:	f000 f9e6 	bl	8005ef8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    flexButton2.setText(TypedText(T___SINGLEUSE_ESSW));
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 8005b32:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005b36:	2101      	movs	r1, #1
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7ff f8d9 	bl	8004cf0 <_ZN8touchgfx9TypedTextC1Et>
 8005b3e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005b42:	4619      	mov	r1, r3
 8005b44:	4620      	mov	r0, r4
 8005b46:	e003      	b.n	8005b50 <_ZN15Screen1ViewBaseC1Ev+0x62c>
 8005b48:	2400b0e0 	.word	0x2400b0e0
 8005b4c:	08026988 	.word	0x08026988
 8005b50:	f000 f9ef 	bl	8005f32 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE7setTextENS_9TypedTextE>
 8005b54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7fe f917 	bl	8003d8c <_ZN8touchgfx9TypedTextD1Ev>
    flexButton2.setTextPosition(0, 0, 40, 30);
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 8005b64:	231e      	movs	r3, #30
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	2328      	movs	r3, #40	; 0x28
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	f000 f9f6 	bl	8005f5e <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE15setTextPositionEssss>
    flexButton2.setTextColors(touchgfx::Color::getColorFromRGB(10, 10, 10), touchgfx::Color::getColorFromRGB(10, 10, 10));
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 8005b78:	230a      	movs	r3, #10
 8005b7a:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
 8005b7e:	230a      	movs	r3, #10
 8005b80:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 8005b84:	230a      	movs	r3, #10
 8005b86:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
 8005b8a:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 8005b8e:	041b      	lsls	r3, r3, #16
 8005b90:	461a      	mov	r2, r3
 8005b92:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8005b96:	021b      	lsls	r3, r3, #8
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005ba4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005ba8:	4611      	mov	r1, r2
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fe fd28 	bl	8004600 <_ZN8touchgfx9colortypeC1Em>
 8005bb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bb2:	461d      	mov	r5, r3
 8005bb4:	230a      	movs	r3, #10
 8005bb6:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8005bba:	230a      	movs	r3, #10
 8005bbc:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
 8005bc0:	230a      	movs	r3, #10
 8005bc2:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
 8005bc6:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8005bca:	041b      	lsls	r3, r3, #16
 8005bcc:	461a      	mov	r2, r3
 8005bce:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 8005bd2:	021b      	lsls	r3, r3, #8
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005be0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005be4:	4611      	mov	r1, r2
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fe fd0a 	bl	8004600 <_ZN8touchgfx9colortypeC1Em>
 8005bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bee:	461a      	mov	r2, r3
 8005bf0:	4629      	mov	r1, r5
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	f000 f9d3 	bl	8005f9e <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>
    flexButton2.setPosition(400, 200, 40, 30);
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 8005bfe:	231e      	movs	r3, #30
 8005c00:	9300      	str	r3, [sp, #0]
 8005c02:	2328      	movs	r3, #40	; 0x28
 8005c04:	22c8      	movs	r2, #200	; 0xc8
 8005c06:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005c0a:	f7fe fdb3 	bl	8004774 <_ZN8touchgfx8Drawable11setPositionEssss>
    flexButton2.setAction(flexButtonCallback);
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	4610      	mov	r0, r2
 8005c1e:	f7ff fad5 	bl	80051cc <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(__background);
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	3340      	adds	r3, #64	; 0x40
 8005c28:	4619      	mov	r1, r3
 8005c2a:	4610      	mov	r0, r2
 8005c2c:	f7fe ff92 	bl	8004b54 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	336c      	adds	r3, #108	; 0x6c
 8005c36:	4619      	mov	r1, r3
 8005c38:	4610      	mov	r0, r2
 8005c3a:	f7fe ff8b 	bl	8004b54 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image2);
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	3398      	adds	r3, #152	; 0x98
 8005c44:	4619      	mov	r1, r3
 8005c46:	4610      	mov	r0, r2
 8005c48:	f7fe ff84 	bl	8004b54 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	33c4      	adds	r3, #196	; 0xc4
 8005c52:	4619      	mov	r1, r3
 8005c54:	4610      	mov	r0, r2
 8005c56:	f7fe ff7d 	bl	8004b54 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(flexButton1);
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8005c62:	4619      	mov	r1, r3
 8005c64:	4610      	mov	r0, r2
 8005c66:	f7fe ff75 	bl	8004b54 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(flexButton2);
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8005c72:	4619      	mov	r1, r3
 8005c74:	4610      	mov	r0, r2
 8005c76:	f7fe ff6d 	bl	8004b54 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	37c8      	adds	r7, #200	; 0xc8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c86:	bf00      	nop

08005c88 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]

}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen1ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
    if (&src == &flexButton1)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d106      	bne.n	8005cc0 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x24>
    {
        //up
        //When flexButton1 clicked call virtual function
        //Call upclick
        upclick();
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	332c      	adds	r3, #44	; 0x2c
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	4798      	blx	r3
        //down
        //When flexButton2 clicked call virtual function
        //Call downclick
        downclick();
    }
}
 8005cbe:	e00b      	b.n	8005cd8 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x3c>
    else if (&src == &flexButton2)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d105      	bne.n	8005cd8 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x3c>
        downclick();
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	3330      	adds	r3, #48	; 0x30
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	4798      	blx	r3
}
 8005cd8:	bf00      	nop
 8005cda:	3708      	adds	r7, #8
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f011 fdca 	bl	8017884 <_ZN8touchgfx6ScreenC1Ev>
 8005cf0:	4a05      	ldr	r2, [pc, #20]	; (8005d08 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	080274f4 	.word	0x080274f4

08005d0c <_ZN8touchgfx18TouchButtonTriggerD1Ev>:
class TouchButtonTrigger : public AbstractButtonContainer
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	4a05      	ldr	r2, [pc, #20]	; (8005d2c <_ZN8touchgfx18TouchButtonTriggerD1Ev+0x20>)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7ff fb1d 	bl	800535c <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4618      	mov	r0, r3
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	08027528 	.word	0x08027528

08005d30 <_ZN8touchgfx18TouchButtonTriggerD0Ev>:
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7ff ffe7 	bl	8005d0c <_ZN8touchgfx18TouchButtonTriggerD1Ev>
 8005d3e:	2134      	movs	r1, #52	; 0x34
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f01f f8bc 	bl	8024ebe <_ZdlPvj>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3708      	adds	r7, #8
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <_ZN8touchgfx13BoxWithBorderD1Ev>:
class BoxWithBorder : public Box
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	4a05      	ldr	r2, [pc, #20]	; (8005d70 <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7ff fa9f 	bl	80052a4 <_ZN8touchgfx3BoxD1Ev>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3708      	adds	r7, #8
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	08027c90 	.word	0x08027c90

08005d74 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f7ff ffe7 	bl	8005d50 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005d82:	2134      	movs	r1, #52	; 0x34
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f01f f89a 	bl	8024ebe <_ZdlPvj>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev>:
 * @tparam T Generic type parameter. Typically a AbstractButtonContainer subclass.
 *
 * @see AbstractButtonContainer, BoxWithBorder
 */
template <class T>
class BoxWithBorderButtonStyle : public T
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	4a08      	ldr	r2, [pc, #32]	; (8005dc0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev+0x2c>)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	601a      	str	r2, [r3, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	3334      	adds	r3, #52	; 0x34
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7ff ffd2 	bl	8005d50 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7ff ffac 	bl	8005d0c <_ZN8touchgfx18TouchButtonTriggerD1Ev>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4618      	mov	r0, r3
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	08027458 	.word	0x08027458

08005dc4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED0Ev>:
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7ff ffe1 	bl	8005d94 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev>
 8005dd2:	2178      	movs	r1, #120	; 0x78
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f01f f872 	bl	8024ebe <_ZdlPvj>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3708      	adds	r7, #8
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEEC1Ev>:
 */
template <class T>
class TextButtonStyle : public T
{
public:
    TextButtonStyle()
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
        : T()
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 f900 	bl	8005ff4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEC1Ev>
 8005df4:	4a0e      	ldr	r2, [pc, #56]	; (8005e30 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEEC1Ev+0x4c>)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	601a      	str	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	3378      	adds	r3, #120	; 0x78
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fe ff8c 	bl	8004d1c <_ZN8touchgfx8TextAreaC1Ev>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	33c0      	adds	r3, #192	; 0xc0
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7fc f8e3 	bl	8001fd4 <_ZN8touchgfx9colortypeC1Ev>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	33c4      	adds	r3, #196	; 0xc4
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7fc f8de 	bl	8001fd4 <_ZN8touchgfx9colortypeC1Ev>
    {
        T::add(text);
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	3378      	adds	r3, #120	; 0x78
 8005e1e:	4619      	mov	r1, r3
 8005e20:	4610      	mov	r0, r2
 8005e22:	f00c ff0f 	bl	8012c44 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	080273bc 	.word	0x080273bc

08005e34 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	4a04      	ldr	r2, [pc, #16]	; (8005e50 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev+0x1c>)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4618      	mov	r0, r3
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	080275c4 	.word	0x080275c4

08005e54 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	4639      	mov	r1, r7
 8005e60:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7ff ffe4 	bl	8005e34 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 8005e6c:	4a08      	ldr	r2, [pc, #32]	; (8005e90 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	605a      	str	r2, [r3, #4]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	3308      	adds	r3, #8
 8005e7c:	463a      	mov	r2, r7
 8005e7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e82:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	080273a4 	.word	0x080273a4

08005e94 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE24setBoxWithBorderPositionEssss>:
     * @param  width  The width of this BoxWithBorderButtonStyle.
     * @param  height The height of this BoxWithBorderButtonStyle.
     *
     * @note Changing this does not automatically yield a redraw.
     */
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8005e94:	b590      	push	{r4, r7, lr}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af02      	add	r7, sp, #8
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	4608      	mov	r0, r1
 8005e9e:	4611      	mov	r1, r2
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	817b      	strh	r3, [r7, #10]
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	813b      	strh	r3, [r7, #8]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	80fb      	strh	r3, [r7, #6]
    {
        borderBox.setPosition(x, y, width, height);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8005eb4:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8005eb8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005ebc:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8005ec0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	4623      	mov	r3, r4
 8005ec8:	f7fe fc54 	bl	8004774 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8005ecc:	bf00      	nop
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd90      	pop	{r4, r7, pc}

08005ed4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE13setBorderSizeEh>:
    /**
     * Sets border size.
     *
     * @param  size The size.
     */
    void setBorderSize(uint8_t size)
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	460b      	mov	r3, r1
 8005ede:	70fb      	strb	r3, [r7, #3]
    {
        borderBox.setBorderSize(size);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	3334      	adds	r3, #52	; 0x34
 8005ee4:	78fa      	ldrb	r2, [r7, #3]
 8005ee6:	b292      	uxth	r2, r2
 8005ee8:	4611      	mov	r1, r2
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7ff fa26 	bl	800533c <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    }
 8005ef0:	bf00      	nop
 8005ef2:	3708      	adds	r7, #8
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
 8005f04:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	669a      	str	r2, [r3, #104]	; 0x68
        down = colorPressed;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	66da      	str	r2, [r3, #108]	; 0x6c
        borderUp = borderColorReleased;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	671a      	str	r2, [r3, #112]	; 0x70
        borderDown = borderColorPressed;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	675a      	str	r2, [r3, #116]	; 0x74
        handlePressedUpdated();
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	338c      	adds	r3, #140	; 0x8c
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	4798      	blx	r3
    }
 8005f2a:	bf00      	nop
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE7setTextENS_9TypedTextE>:
    /**
     * Sets a text.
     *
     * @param  t A TypedText to process.
     */
    void setText(TypedText t)
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b082      	sub	sp, #8
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	6039      	str	r1, [r7, #0]
    {
        text.setTypedText(t);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	3378      	adds	r3, #120	; 0x78
 8005f40:	6839      	ldr	r1, [r7, #0]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f00e fb54 	bl	80145f0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
        text.setWidthHeight(*this);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3378      	adds	r3, #120	; 0x78
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	4611      	mov	r1, r2
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7fe fce2 	bl	800491a <_ZN8touchgfx8Drawable14setWidthHeightERKS0_>
    }
 8005f56:	bf00      	nop
 8005f58:	3708      	adds	r7, #8
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE15setTextPositionEssss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width of the text.
     * @param  height The height of the text.
     */
    void setTextPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8005f5e:	b590      	push	{r4, r7, lr}
 8005f60:	b087      	sub	sp, #28
 8005f62:	af02      	add	r7, sp, #8
 8005f64:	60f8      	str	r0, [r7, #12]
 8005f66:	4608      	mov	r0, r1
 8005f68:	4611      	mov	r1, r2
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	817b      	strh	r3, [r7, #10]
 8005f70:	460b      	mov	r3, r1
 8005f72:	813b      	strh	r3, [r7, #8]
 8005f74:	4613      	mov	r3, r2
 8005f76:	80fb      	strh	r3, [r7, #6]
    {
        text.setPosition(x, y, width, height);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8005f7e:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8005f82:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005f86:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8005f8a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	4623      	mov	r3, r4
 8005f92:	f7fe fbef 	bl	8004774 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8005f96:	bf00      	nop
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd90      	pop	{r4, r7, pc}

08005f9e <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE13setTextColorsENS_9colortypeES5_>:
     * Sets text colors.
     *
     * @param  newColorReleased The new color released.
     * @param  newColorPressed  The new color pressed.
     */
    void setTextColors(colortype newColorReleased, colortype newColorPressed)
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b084      	sub	sp, #16
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	60f8      	str	r0, [r7, #12]
 8005fa6:	60b9      	str	r1, [r7, #8]
 8005fa8:	607a      	str	r2, [r7, #4]
    {
        colorReleased = newColorReleased;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        colorPressed = newColorPressed;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

        handlePressedUpdated();
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	338c      	adds	r3, #140	; 0x8c
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	4798      	blx	r3
    }
 8005fc6:	bf00      	nop
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
	...

08005fd0 <_ZN8touchgfx18TouchButtonTriggerC1Ev>:
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7ff f8a6 	bl	800512c <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 8005fe0:	4a03      	ldr	r2, [pc, #12]	; (8005ff0 <_ZN8touchgfx18TouchButtonTriggerC1Ev+0x20>)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	601a      	str	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	08027528 	.word	0x08027528

08005ff4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEC1Ev>:
    BoxWithBorderButtonStyle()
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
        : T(), up(), down()
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4618      	mov	r0, r3
 8006000:	2334      	movs	r3, #52	; 0x34
 8006002:	461a      	mov	r2, r3
 8006004:	2100      	movs	r1, #0
 8006006:	f01f f815 	bl	8025034 <memset>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4618      	mov	r0, r3
 800600e:	f7ff ffdf 	bl	8005fd0 <_ZN8touchgfx18TouchButtonTriggerC1Ev>
 8006012:	4a17      	ldr	r2, [pc, #92]	; (8006070 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEC1Ev+0x7c>)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	3334      	adds	r3, #52	; 0x34
 800601c:	4618      	mov	r0, r3
 800601e:	f7ff f963 	bl	80052e8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	3368      	adds	r3, #104	; 0x68
 8006026:	4618      	mov	r0, r3
 8006028:	f7fb ffd4 	bl	8001fd4 <_ZN8touchgfx9colortypeC1Ev>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	336c      	adds	r3, #108	; 0x6c
 8006030:	4618      	mov	r0, r3
 8006032:	f7fb ffcf 	bl	8001fd4 <_ZN8touchgfx9colortypeC1Ev>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	3370      	adds	r3, #112	; 0x70
 800603a:	4618      	mov	r0, r3
 800603c:	f7fb ffca 	bl	8001fd4 <_ZN8touchgfx9colortypeC1Ev>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3374      	adds	r3, #116	; 0x74
 8006044:	4618      	mov	r0, r3
 8006046:	f7fb ffc5 	bl	8001fd4 <_ZN8touchgfx9colortypeC1Ev>
        borderBox.setXY(0, 0);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	3334      	adds	r3, #52	; 0x34
 800604e:	2200      	movs	r2, #0
 8006050:	2100      	movs	r1, #0
 8006052:	4618      	mov	r0, r3
 8006054:	f7fe fbe7 	bl	8004826 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	3334      	adds	r3, #52	; 0x34
 800605e:	4619      	mov	r1, r3
 8006060:	4610      	mov	r0, r2
 8006062:	f00c fdef 	bl	8012c44 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4618      	mov	r0, r3
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	08027458 	.word	0x08027458

08006074 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>:
    virtual ~GenericCallback()
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
    }
 800607c:	4a04      	ldr	r2, [pc, #16]	; (8006090 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev+0x1c>)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	601a      	str	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4618      	mov	r0, r3
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	080275c4 	.word	0x080275c4

08006094 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED0Ev>:
    virtual ~GenericCallback()
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
    }
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f7ff ffe9 	bl	8006074 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 80060a2:	2104      	movs	r1, #4
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f01e ff0a 	bl	8024ebe <_ZdlPvj>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4618      	mov	r0, r3
 80060ae:	3708      	adds	r7, #8
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv>:
    colortype down;          ///< The down
    colortype borderUp;      ///< The border up
    colortype borderDown;    ///< The border down

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
 80060b4:	b590      	push	{r4, r7, lr}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
    {
        borderBox.setColor(T::getPressed() ? down : up);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f103 0434 	add.w	r4, r3, #52	; 0x34
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7ff f867 	bl	8005198 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x22>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	336c      	adds	r3, #108	; 0x6c
 80060d4:	e001      	b.n	80060da <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x26>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	3368      	adds	r3, #104	; 0x68
 80060da:	6819      	ldr	r1, [r3, #0]
 80060dc:	4620      	mov	r0, r4
 80060de:	f7fe fdc3 	bl	8004c68 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f103 0434 	add.w	r4, r3, #52	; 0x34
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7ff f854 	bl	8005198 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d002      	beq.n	80060fc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x48>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	3374      	adds	r3, #116	; 0x74
 80060fa:	e001      	b.n	8006100 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	3370      	adds	r3, #112	; 0x70
 8006100:	6819      	ldr	r1, [r3, #0]
 8006102:	4620      	mov	r0, r4
 8006104:	f7ff f90c 	bl	8005320 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4618      	mov	r0, r3
 800610c:	f7ff f893 	bl	8005236 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	bd90      	pop	{r4, r7, pc}

08006118 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE20handlePressedUpdatedEv>:
    TextArea text;           ///< The text
    colortype colorReleased; ///< The color released
    colortype colorPressed;  ///< The color pressed

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
 8006118:	b590      	push	{r4, r7, lr}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
    {
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4618      	mov	r0, r3
 800612a:	f7ff f835 	bl	8005198 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d002      	beq.n	800613a <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE20handlePressedUpdatedEv+0x22>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	33c4      	adds	r3, #196	; 0xc4
 8006138:	e001      	b.n	800613e <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE20handlePressedUpdatedEv+0x26>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	33c0      	adds	r3, #192	; 0xc0
 800613e:	60fc      	str	r4, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	60bb      	str	r3, [r7, #8]
        color = newColor;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800614a:	bf00      	nop
        T::handlePressedUpdated();
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff ffb0 	bl	80060b4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv>
    }
 8006154:	bf00      	nop
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	bd90      	pop	{r4, r7, pc}

0800615c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	4a05      	ldr	r2, [pc, #20]	; (800617c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4618      	mov	r0, r3
 800616e:	f7ff ff81 	bl	8006074 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4618      	mov	r0, r3
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	080273a4 	.word	0x080273a4

08006180 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f7ff ffe7 	bl	800615c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 800618e:	2110      	movs	r1, #16
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f01e fe94 	bl	8024ebe <_ZdlPvj>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4618      	mov	r0, r3
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEED1Ev>:
class TextButtonStyle : public T
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	4a08      	ldr	r2, [pc, #32]	; (80061cc <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEED1Ev+0x2c>)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	601a      	str	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	3378      	adds	r3, #120	; 0x78
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7fe fef2 	bl	8004f9c <_ZN8touchgfx8TextAreaD1Ev>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7ff fdea 	bl	8005d94 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4618      	mov	r0, r3
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	080273bc 	.word	0x080273bc

080061d0 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEED0Ev>:
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f7ff ffe1 	bl	80061a0 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEED1Ev>
 80061de:	21c8      	movs	r1, #200	; 0xc8
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f01e fe6c 	bl	8024ebe <_ZdlPvj>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4618      	mov	r0, r3
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	4a05      	ldr	r2, [pc, #20]	; (8006210 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	601a      	str	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4618      	mov	r0, r3
 8006202:	f7fe ff11 	bl	8005028 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4618      	mov	r0, r3
 800620a:	3708      	adds	r7, #8
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	08027678 	.word	0x08027678

08006214 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7ff ffe7 	bl	80061f0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8006222:	214c      	movs	r1, #76	; 0x4c
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f01e fe4a 	bl	8024ebe <_ZdlPvj>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4618      	mov	r0, r3
 800622e:	3708      	adds	r7, #8
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	68d2      	ldr	r2, [r2, #12]
 8006246:	1052      	asrs	r2, r2, #1
 8006248:	1898      	adds	r0, r3, r2
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	2b00      	cmp	r3, #0
 8006254:	d102      	bne.n	800625c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	e00a      	b.n	8006272 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	68d2      	ldr	r2, [r2, #12]
 8006264:	1052      	asrs	r2, r2, #1
 8006266:	4413      	add	r3, r2
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	6892      	ldr	r2, [r2, #8]
 800626e:	4413      	add	r3, r2
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	6839      	ldr	r1, [r7, #0]
 8006274:	4798      	blx	r3
    }
 8006276:	bf00      	nop
 8006278:	3708      	adds	r7, #8
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 800627e:	b480      	push	{r7}
 8006280:	b083      	sub	sp, #12
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d010      	beq.n	80062b0 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d107      	bne.n	80062a6 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 80062a2:	2301      	movs	r3, #1
 80062a4:	e000      	b.n	80062a8 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 80062a6:	2300      	movs	r3, #0
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d001      	beq.n	80062b0 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 80062ac:	2301      	movs	r3, #1
 80062ae:	e000      	b.n	80062b2 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 80062b0:	2300      	movs	r3, #0
    }
 80062b2:	4618      	mov	r0, r3
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEEE18handleAlphaUpdatedEv>:

    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
 80062be:	b590      	push	{r4, r7, lr}
 80062c0:	b083      	sub	sp, #12
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
    {
        text.setAlpha(T::getAlpha());
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7fe ff6f 	bl	80051b2 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 80062d4:	4603      	mov	r3, r0
 80062d6:	4619      	mov	r1, r3
 80062d8:	4620      	mov	r0, r4
 80062da:	f7fe fda9 	bl	8004e30 <_ZN8touchgfx8TextArea8setAlphaEh>
        T::handleAlphaUpdated();
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f000 f804 	bl	80062ee <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE18handleAlphaUpdatedEv>
    }
 80062e6:	bf00      	nop
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd90      	pop	{r4, r7, pc}

080062ee <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE18handleAlphaUpdatedEv>:

    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
 80062ee:	b590      	push	{r4, r7, lr}
 80062f0:	b083      	sub	sp, #12
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
    {
        borderBox.setAlpha(T::getAlpha());
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f103 0434 	add.w	r4, r3, #52	; 0x34
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fe ff57 	bl	80051b2 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8006304:	4603      	mov	r3, r0
 8006306:	4619      	mov	r1, r3
 8006308:	4620      	mov	r0, r4
 800630a:	f7fe fcbb 	bl	8004c84 <_ZN8touchgfx3Box8setAlphaEh>
        T::handleAlphaUpdated();
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4618      	mov	r0, r3
 8006312:	f7fe ff9a 	bl	800524a <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 8006316:	bf00      	nop
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	bd90      	pop	{r4, r7, pc}
	...

08006320 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0
 8006324:	4801      	ldr	r0, [pc, #4]	; (800632c <__tcf_0+0xc>)
 8006326:	f7fd fd0f 	bl	8003d48 <_ZN8touchgfx13GeneratedFontD1Ev>
 800632a:	bd80      	pop	{r7, pc}
 800632c:	24001690 	.word	0x24001690

08006330 <_Z23getFont_verdana_10_4bppv>:
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b08c      	sub	sp, #48	; 0x30
 8006334:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8006336:	4b1f      	ldr	r3, [pc, #124]	; (80063b4 <_Z23getFont_verdana_10_4bppv+0x84>)
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	f3bf 8f5b 	dmb	ish
 800633e:	b2db      	uxtb	r3, r3
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	2b00      	cmp	r3, #0
 8006346:	bf0c      	ite	eq
 8006348:	2301      	moveq	r3, #1
 800634a:	2300      	movne	r3, #0
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d02c      	beq.n	80063ac <_Z23getFont_verdana_10_4bppv+0x7c>
 8006352:	4818      	ldr	r0, [pc, #96]	; (80063b4 <_Z23getFont_verdana_10_4bppv+0x84>)
 8006354:	f01e fdb5 	bl	8024ec2 <__cxa_guard_acquire>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	bf14      	ite	ne
 800635e:	2301      	movne	r3, #1
 8006360:	2300      	moveq	r3, #0
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b00      	cmp	r3, #0
 8006366:	d021      	beq.n	80063ac <_Z23getFont_verdana_10_4bppv+0x7c>
 8006368:	2300      	movs	r3, #0
 800636a:	930a      	str	r3, [sp, #40]	; 0x28
 800636c:	2300      	movs	r3, #0
 800636e:	9309      	str	r3, [sp, #36]	; 0x24
 8006370:	2300      	movs	r3, #0
 8006372:	9308      	str	r3, [sp, #32]
 8006374:	233f      	movs	r3, #63	; 0x3f
 8006376:	9307      	str	r3, [sp, #28]
 8006378:	4b0f      	ldr	r3, [pc, #60]	; (80063b8 <_Z23getFont_verdana_10_4bppv+0x88>)
 800637a:	9306      	str	r3, [sp, #24]
 800637c:	4b0f      	ldr	r3, [pc, #60]	; (80063bc <_Z23getFont_verdana_10_4bppv+0x8c>)
 800637e:	9305      	str	r3, [sp, #20]
 8006380:	2300      	movs	r3, #0
 8006382:	9304      	str	r3, [sp, #16]
 8006384:	2300      	movs	r3, #0
 8006386:	9303      	str	r3, [sp, #12]
 8006388:	2301      	movs	r3, #1
 800638a:	9302      	str	r3, [sp, #8]
 800638c:	2304      	movs	r3, #4
 800638e:	9301      	str	r3, [sp, #4]
 8006390:	2300      	movs	r3, #0
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	230a      	movs	r3, #10
 8006396:	2201      	movs	r2, #1
 8006398:	4909      	ldr	r1, [pc, #36]	; (80063c0 <_Z23getFont_verdana_10_4bppv+0x90>)
 800639a:	480a      	ldr	r0, [pc, #40]	; (80063c4 <_Z23getFont_verdana_10_4bppv+0x94>)
 800639c:	f7fe f896 	bl	80044cc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80063a0:	4809      	ldr	r0, [pc, #36]	; (80063c8 <_Z23getFont_verdana_10_4bppv+0x98>)
 80063a2:	f01e fdd9 	bl	8024f58 <atexit>
 80063a6:	4803      	ldr	r0, [pc, #12]	; (80063b4 <_Z23getFont_verdana_10_4bppv+0x84>)
 80063a8:	f01e fd97 	bl	8024eda <__cxa_guard_release>
    return verdana_10_4bpp;
 80063ac:	4b05      	ldr	r3, [pc, #20]	; (80063c4 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	240016b8 	.word	0x240016b8
 80063b8:	08028290 	.word	0x08028290
 80063bc:	0802829c 	.word	0x0802829c
 80063c0:	9000050c 	.word	0x9000050c
 80063c4:	24001690 	.word	0x24001690
 80063c8:	08006321 	.word	0x08006321

080063cc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 13, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80063cc:	b580      	push	{r7, lr}
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	4801      	ldr	r0, [pc, #4]	; (80063d8 <__tcf_0+0xc>)
 80063d2:	f7fd fcb9 	bl	8003d48 <_ZN8touchgfx13GeneratedFontD1Ev>
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	240016bc 	.word	0x240016bc

080063dc <_Z23getFont_verdana_20_4bppv>:
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08c      	sub	sp, #48	; 0x30
 80063e0:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 13, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80063e2:	4b1f      	ldr	r3, [pc, #124]	; (8006460 <_Z23getFont_verdana_20_4bppv+0x84>)
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	f3bf 8f5b 	dmb	ish
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	bf0c      	ite	eq
 80063f4:	2301      	moveq	r3, #1
 80063f6:	2300      	movne	r3, #0
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d02c      	beq.n	8006458 <_Z23getFont_verdana_20_4bppv+0x7c>
 80063fe:	4818      	ldr	r0, [pc, #96]	; (8006460 <_Z23getFont_verdana_20_4bppv+0x84>)
 8006400:	f01e fd5f 	bl	8024ec2 <__cxa_guard_acquire>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	bf14      	ite	ne
 800640a:	2301      	movne	r3, #1
 800640c:	2300      	moveq	r3, #0
 800640e:	b2db      	uxtb	r3, r3
 8006410:	2b00      	cmp	r3, #0
 8006412:	d021      	beq.n	8006458 <_Z23getFont_verdana_20_4bppv+0x7c>
 8006414:	2300      	movs	r3, #0
 8006416:	930a      	str	r3, [sp, #40]	; 0x28
 8006418:	2300      	movs	r3, #0
 800641a:	9309      	str	r3, [sp, #36]	; 0x24
 800641c:	2300      	movs	r3, #0
 800641e:	9308      	str	r3, [sp, #32]
 8006420:	233f      	movs	r3, #63	; 0x3f
 8006422:	9307      	str	r3, [sp, #28]
 8006424:	4b0f      	ldr	r3, [pc, #60]	; (8006464 <_Z23getFont_verdana_20_4bppv+0x88>)
 8006426:	9306      	str	r3, [sp, #24]
 8006428:	4b0f      	ldr	r3, [pc, #60]	; (8006468 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800642a:	9305      	str	r3, [sp, #20]
 800642c:	2300      	movs	r3, #0
 800642e:	9304      	str	r3, [sp, #16]
 8006430:	2300      	movs	r3, #0
 8006432:	9303      	str	r3, [sp, #12]
 8006434:	2301      	movs	r3, #1
 8006436:	9302      	str	r3, [sp, #8]
 8006438:	2304      	movs	r3, #4
 800643a:	9301      	str	r3, [sp, #4]
 800643c:	2300      	movs	r3, #0
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	2314      	movs	r3, #20
 8006442:	220d      	movs	r2, #13
 8006444:	4909      	ldr	r1, [pc, #36]	; (800646c <_Z23getFont_verdana_20_4bppv+0x90>)
 8006446:	480a      	ldr	r0, [pc, #40]	; (8006470 <_Z23getFont_verdana_20_4bppv+0x94>)
 8006448:	f7fe f840 	bl	80044cc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800644c:	4809      	ldr	r0, [pc, #36]	; (8006474 <_Z23getFont_verdana_20_4bppv+0x98>)
 800644e:	f01e fd83 	bl	8024f58 <atexit>
 8006452:	4803      	ldr	r0, [pc, #12]	; (8006460 <_Z23getFont_verdana_20_4bppv+0x84>)
 8006454:	f01e fd41 	bl	8024eda <__cxa_guard_release>
    return verdana_20_4bpp;
 8006458:	4b05      	ldr	r3, [pc, #20]	; (8006470 <_Z23getFont_verdana_20_4bppv+0x94>)
}
 800645a:	4618      	mov	r0, r3
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	240016e4 	.word	0x240016e4
 8006464:	08028294 	.word	0x08028294
 8006468:	080282a0 	.word	0x080282a0
 800646c:	9000051c 	.word	0x9000051c
 8006470:	240016bc 	.word	0x240016bc
 8006474:	080063cd 	.word	0x080063cd

08006478 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8006478:	b580      	push	{r7, lr}
 800647a:	af00      	add	r7, sp, #0
 800647c:	4801      	ldr	r0, [pc, #4]	; (8006484 <__tcf_0+0xc>)
 800647e:	f7fd fc63 	bl	8003d48 <_ZN8touchgfx13GeneratedFontD1Ev>
 8006482:	bd80      	pop	{r7, pc}
 8006484:	240016e8 	.word	0x240016e8

08006488 <_Z23getFont_verdana_40_4bppv>:
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08c      	sub	sp, #48	; 0x30
 800648c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800648e:	4b1f      	ldr	r3, [pc, #124]	; (800650c <_Z23getFont_verdana_40_4bppv+0x84>)
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	f3bf 8f5b 	dmb	ish
 8006496:	b2db      	uxtb	r3, r3
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b00      	cmp	r3, #0
 800649e:	bf0c      	ite	eq
 80064a0:	2301      	moveq	r3, #1
 80064a2:	2300      	movne	r3, #0
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d02c      	beq.n	8006504 <_Z23getFont_verdana_40_4bppv+0x7c>
 80064aa:	4818      	ldr	r0, [pc, #96]	; (800650c <_Z23getFont_verdana_40_4bppv+0x84>)
 80064ac:	f01e fd09 	bl	8024ec2 <__cxa_guard_acquire>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	bf14      	ite	ne
 80064b6:	2301      	movne	r3, #1
 80064b8:	2300      	moveq	r3, #0
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d021      	beq.n	8006504 <_Z23getFont_verdana_40_4bppv+0x7c>
 80064c0:	2300      	movs	r3, #0
 80064c2:	930a      	str	r3, [sp, #40]	; 0x28
 80064c4:	2300      	movs	r3, #0
 80064c6:	9309      	str	r3, [sp, #36]	; 0x24
 80064c8:	2300      	movs	r3, #0
 80064ca:	9308      	str	r3, [sp, #32]
 80064cc:	233f      	movs	r3, #63	; 0x3f
 80064ce:	9307      	str	r3, [sp, #28]
 80064d0:	4b0f      	ldr	r3, [pc, #60]	; (8006510 <_Z23getFont_verdana_40_4bppv+0x88>)
 80064d2:	9306      	str	r3, [sp, #24]
 80064d4:	4b0f      	ldr	r3, [pc, #60]	; (8006514 <_Z23getFont_verdana_40_4bppv+0x8c>)
 80064d6:	9305      	str	r3, [sp, #20]
 80064d8:	2300      	movs	r3, #0
 80064da:	9304      	str	r3, [sp, #16]
 80064dc:	2300      	movs	r3, #0
 80064de:	9303      	str	r3, [sp, #12]
 80064e0:	2301      	movs	r3, #1
 80064e2:	9302      	str	r3, [sp, #8]
 80064e4:	2304      	movs	r3, #4
 80064e6:	9301      	str	r3, [sp, #4]
 80064e8:	2300      	movs	r3, #0
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	2328      	movs	r3, #40	; 0x28
 80064ee:	2201      	movs	r2, #1
 80064f0:	4909      	ldr	r1, [pc, #36]	; (8006518 <_Z23getFont_verdana_40_4bppv+0x90>)
 80064f2:	480a      	ldr	r0, [pc, #40]	; (800651c <_Z23getFont_verdana_40_4bppv+0x94>)
 80064f4:	f7fd ffea 	bl	80044cc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80064f8:	4809      	ldr	r0, [pc, #36]	; (8006520 <_Z23getFont_verdana_40_4bppv+0x98>)
 80064fa:	f01e fd2d 	bl	8024f58 <atexit>
 80064fe:	4803      	ldr	r0, [pc, #12]	; (800650c <_Z23getFont_verdana_40_4bppv+0x84>)
 8006500:	f01e fceb 	bl	8024eda <__cxa_guard_release>
    return verdana_40_4bpp;
 8006504:	4b05      	ldr	r3, [pc, #20]	; (800651c <_Z23getFont_verdana_40_4bppv+0x94>)
}
 8006506:	4618      	mov	r0, r3
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	24001710 	.word	0x24001710
 8006510:	08028298 	.word	0x08028298
 8006514:	080282a4 	.word	0x080282a4
 8006518:	900005d4 	.word	0x900005d4
 800651c:	240016e8 	.word	0x240016e8
 8006520:	08006479 	.word	0x08006479

08006524 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	460b      	mov	r3, r1
 800652e:	607a      	str	r2, [r7, #4]
 8006530:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 8006532:	2300      	movs	r3, #0
    }
 8006534:	4618      	mov	r0, r3
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8006548:	2300      	movs	r3, #0
    }
 800654a:	4618      	mov	r0, r3
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8006556:	b480      	push	{r7}
 8006558:	b083      	sub	sp, #12
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800655e:	2300      	movs	r3, #0
    }
 8006560:	4618      	mov	r0, r3
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	4613      	mov	r3, r2
 8006578:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 800657a:	4a07      	ldr	r2, [pc, #28]	; (8006598 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6013      	str	r3, [r2, #0]
        fonts = f;
 8006580:	4a06      	ldr	r2, [pc, #24]	; (800659c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8006586:	4a06      	ldr	r2, [pc, #24]	; (80065a0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8006588:	88fb      	ldrh	r3, [r7, #6]
 800658a:	8013      	strh	r3, [r2, #0]
    }
 800658c:	bf00      	nop
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	2400b0d4 	.word	0x2400b0d4
 800659c:	2400b0dc 	.word	0x2400b0dc
 80065a0:	2400b0d8 	.word	0x2400b0d8

080065a4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80065a4:	b40e      	push	{r1, r2, r3}
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b085      	sub	sp, #20
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 80065ae:	f107 0320 	add.w	r3, r7, #32
 80065b2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	69fa      	ldr	r2, [r7, #28]
 80065b8:	2100      	movs	r1, #0
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f010 fda6 	bl	801710c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80065c0:	4603      	mov	r3, r0
 80065c2:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80065c4:	89fb      	ldrh	r3, [r7, #14]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065d0:	b003      	add	sp, #12
 80065d2:	4770      	bx	lr

080065d4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80065d4:	b40c      	push	{r2, r3}
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b084      	sub	sp, #16
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
 80065de:	460b      	mov	r3, r1
 80065e0:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 80065e2:	f107 031c 	add.w	r3, r7, #28
 80065e6:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80065e8:	78f9      	ldrb	r1, [r7, #3]
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f010 fd8c 	bl	801710c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80065f4:	4603      	mov	r3, r0
 80065f6:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80065f8:	89fb      	ldrh	r3, [r7, #14]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006604:	b002      	add	sp, #8
 8006606:	4770      	bx	lr

08006608 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b08a      	sub	sp, #40	; 0x28
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	460b      	mov	r3, r1
 8006612:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006618:	2b00      	cmp	r3, #0
 800661a:	d016      	beq.n	800664a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	3322      	adds	r3, #34	; 0x22
 8006620:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	8adb      	ldrh	r3, [r3, #22]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d105      	bne.n	8006636 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800662a:	4b43      	ldr	r3, [pc, #268]	; (8006738 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800662c:	4a43      	ldr	r2, [pc, #268]	; (800673c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800662e:	21c0      	movs	r1, #192	; 0xc0
 8006630:	4843      	ldr	r0, [pc, #268]	; (8006740 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8006632:	f01e fc73 	bl	8024f1c <__assert_func>
            return buffer[pos];
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	8a9b      	ldrh	r3, [r3, #20]
 800663a:	461a      	mov	r2, r3
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8006646:	2301      	movs	r3, #1
 8006648:	e000      	b.n	800664c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800664a:	2300      	movs	r3, #0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d06a      	beq.n	8006726 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f011 fff3 	bl	801863c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	3322      	adds	r3, #34	; 0x22
 800665a:	623b      	str	r3, [r7, #32]
 800665c:	2301      	movs	r3, #1
 800665e:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	8adb      	ldrh	r3, [r3, #22]
 8006664:	8bfa      	ldrh	r2, [r7, #30]
 8006666:	429a      	cmp	r2, r3
 8006668:	d305      	bcc.n	8006676 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800666a:	4b36      	ldr	r3, [pc, #216]	; (8006744 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800666c:	4a36      	ldr	r2, [pc, #216]	; (8006748 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800666e:	21c5      	movs	r1, #197	; 0xc5
 8006670:	4833      	ldr	r0, [pc, #204]	; (8006740 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8006672:	f01e fc53 	bl	8024f1c <__assert_func>
            const uint16_t index = pos + offset;
 8006676:	6a3b      	ldr	r3, [r7, #32]
 8006678:	8a9a      	ldrh	r2, [r3, #20]
 800667a:	8bfb      	ldrh	r3, [r7, #30]
 800667c:	4413      	add	r3, r2
 800667e:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8006680:	8bbb      	ldrh	r3, [r7, #28]
 8006682:	2b09      	cmp	r3, #9
 8006684:	d801      	bhi.n	800668a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8006686:	8bbb      	ldrh	r3, [r7, #28]
 8006688:	e001      	b.n	800668e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800668a:	8bbb      	ldrh	r3, [r7, #28]
 800668c:	3b0a      	subs	r3, #10
 800668e:	6a3a      	ldr	r2, [r7, #32]
 8006690:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006694:	f640 123f 	movw	r2, #2367	; 0x93f
 8006698:	4293      	cmp	r3, r2
 800669a:	bf0c      	ite	eq
 800669c:	2301      	moveq	r3, #1
 800669e:	2300      	movne	r3, #0
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d03f      	beq.n	8006726 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	3322      	adds	r3, #34	; 0x22
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	3222      	adds	r2, #34	; 0x22
 80066ae:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	8ad2      	ldrh	r2, [r2, #22]
 80066b4:	2a00      	cmp	r2, #0
 80066b6:	d105      	bne.n	80066c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 80066b8:	4b1f      	ldr	r3, [pc, #124]	; (8006738 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80066ba:	4a20      	ldr	r2, [pc, #128]	; (800673c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80066bc:	21c0      	movs	r1, #192	; 0xc0
 80066be:	4820      	ldr	r0, [pc, #128]	; (8006740 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80066c0:	f01e fc2c 	bl	8024f1c <__assert_func>
            return buffer[pos];
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	8a92      	ldrh	r2, [r2, #20]
 80066c8:	4611      	mov	r1, r2
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80066d0:	613b      	str	r3, [r7, #16]
 80066d2:	4613      	mov	r3, r2
 80066d4:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	8adb      	ldrh	r3, [r3, #22]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d806      	bhi.n	80066ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 80066de:	4b1b      	ldr	r3, [pc, #108]	; (800674c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 80066e0:	4a1b      	ldr	r2, [pc, #108]	; (8006750 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 80066e2:	f240 110d 	movw	r1, #269	; 0x10d
 80066e6:	4816      	ldr	r0, [pc, #88]	; (8006740 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80066e8:	f01e fc18 	bl	8024f1c <__assert_func>
            const uint16_t index = pos + 1;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	8a9b      	ldrh	r3, [r3, #20]
 80066f0:	3301      	adds	r3, #1
 80066f2:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 80066f4:	89bb      	ldrh	r3, [r7, #12]
 80066f6:	2b09      	cmp	r3, #9
 80066f8:	d801      	bhi.n	80066fe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 80066fa:	89bb      	ldrh	r3, [r7, #12]
 80066fc:	e000      	b.n	8006700 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 80066fe:	2300      	movs	r3, #0
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	89f9      	ldrh	r1, [r7, #14]
 8006704:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8006708:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	3322      	adds	r3, #34	; 0x22
 800670e:	61bb      	str	r3, [r7, #24]
 8006710:	f640 133f 	movw	r3, #2367	; 0x93f
 8006714:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	8a9b      	ldrh	r3, [r3, #20]
 800671a:	4619      	mov	r1, r3
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	8afa      	ldrh	r2, [r7, #22]
 8006720:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8006724:	bf00      	nop
        }
    }
    return getNextChar();
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f011 fe8a 	bl	8018440 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800672c:	4603      	mov	r3, r0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3728      	adds	r7, #40	; 0x28
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	0802698c 	.word	0x0802698c
 800673c:	08026998 	.word	0x08026998
 8006740:	08026a44 	.word	0x08026a44
 8006744:	08026a9c 	.word	0x08026a9c
 8006748:	08026aac 	.word	0x08026aac
 800674c:	08026b80 	.word	0x08026b80
 8006750:	08026b8c 	.word	0x08026b8c

08006754 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f011 fe38 	bl	80183d2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8006762:	bf00      	nop
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b088      	sub	sp, #32
 800676e:	af02      	add	r7, sp, #8
 8006770:	60f8      	str	r0, [r7, #12]
 8006772:	1d38      	adds	r0, r7, #4
 8006774:	e880 0006 	stmia.w	r0, {r1, r2}
 8006778:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 800677a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800677e:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8006780:	1d39      	adds	r1, r7, #4
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	9301      	str	r3, [sp, #4]
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f00f f986 	bl	8015aa0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8006794:	bf00      	nop
 8006796:	3718      	adds	r7, #24
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800679c:	b590      	push	{r4, r7, lr}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	4603      	mov	r3, r0
 80067a4:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 80067a6:	2300      	movs	r3, #0
 80067a8:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 80067aa:	88fb      	ldrh	r3, [r7, #6]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d127      	bne.n	8006800 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80067b0:	88fb      	ldrh	r3, [r7, #6]
 80067b2:	4a1e      	ldr	r2, [pc, #120]	; (800682c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80067b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d016      	beq.n	80067ea <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80067bc:	88fb      	ldrh	r3, [r7, #6]
 80067be:	4a1b      	ldr	r2, [pc, #108]	; (800682c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80067c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067c4:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	4413      	add	r3, r2
 80067ce:	4a18      	ldr	r2, [pc, #96]	; (8006830 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80067d0:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	68ba      	ldr	r2, [r7, #8]
 80067d8:	4413      	add	r3, r2
 80067da:	4a16      	ldr	r2, [pc, #88]	; (8006834 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80067dc:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	4413      	add	r3, r2
 80067e6:	60fb      	str	r3, [r7, #12]
 80067e8:	e00a      	b.n	8006800 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 80067ea:	4b11      	ldr	r3, [pc, #68]	; (8006830 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80067ec:	4a12      	ldr	r2, [pc, #72]	; (8006838 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 80067ee:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80067f0:	4a12      	ldr	r2, [pc, #72]	; (800683c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 80067f2:	4b10      	ldr	r3, [pc, #64]	; (8006834 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80067f4:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80067f6:	88fb      	ldrh	r3, [r7, #6]
 80067f8:	4a11      	ldr	r2, [pc, #68]	; (8006840 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 80067fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067fe:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00d      	beq.n	8006822 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8006806:	4a0f      	ldr	r2, [pc, #60]	; (8006844 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8006808:	88fb      	ldrh	r3, [r7, #6]
 800680a:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800680c:	f000 f83e 	bl	800688c <_ZN17TypedTextDatabase8getFontsEv>
 8006810:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8006812:	f000 f833 	bl	800687c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8006816:	4603      	mov	r3, r0
 8006818:	461a      	mov	r2, r3
 800681a:	4621      	mov	r1, r4
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f7ff fea5 	bl	800656c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8006822:	bf00      	nop
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	bd90      	pop	{r4, r7, pc}
 800682a:	bf00      	nop
 800682c:	24001714 	.word	0x24001714
 8006830:	2400171c 	.word	0x2400171c
 8006834:	24001720 	.word	0x24001720
 8006838:	900005f4 	.word	0x900005f4
 800683c:	900005e4 	.word	0x900005e4
 8006840:	90000610 	.word	0x90000610
 8006844:	24001718 	.word	0x24001718

08006848 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	460b      	mov	r3, r1
 8006852:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8006854:	4b07      	ldr	r3, [pc, #28]	; (8006874 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	4b07      	ldr	r3, [pc, #28]	; (8006878 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800685a:	6819      	ldr	r1, [r3, #0]
 800685c:	887b      	ldrh	r3, [r7, #2]
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	440b      	add	r3, r1
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	005b      	lsls	r3, r3, #1
 8006866:	4413      	add	r3, r2
}
 8006868:	4618      	mov	r0, r3
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr
 8006874:	2400171c 	.word	0x2400171c
 8006878:	24001720 	.word	0x24001720

0800687c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800687c:	b480      	push	{r7}
 800687e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8006880:	2304      	movs	r3, #4
}
 8006882:	4618      	mov	r0, r3
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800688c:	b480      	push	{r7}
 800688e:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8006890:	4b02      	ldr	r3, [pc, #8]	; (800689c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8006892:	4618      	mov	r0, r3
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr
 800689c:	24001724 	.word	0x24001724

080068a0 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d113      	bne.n	80068d8 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d10e      	bne.n	80068d8 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 80068ba:	f7ff fd8f 	bl	80063dc <_Z23getFont_verdana_20_4bppv>
 80068be:	4603      	mov	r3, r0
};
 80068c0:	4a07      	ldr	r2, [pc, #28]	; (80068e0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80068c2:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 80068c4:	f7ff fde0 	bl	8006488 <_Z23getFont_verdana_40_4bppv>
 80068c8:	4603      	mov	r3, r0
};
 80068ca:	4a05      	ldr	r2, [pc, #20]	; (80068e0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80068cc:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 80068ce:	f7ff fd2f 	bl	8006330 <_Z23getFont_verdana_10_4bppv>
 80068d2:	4603      	mov	r3, r0
};
 80068d4:	4a02      	ldr	r2, [pc, #8]	; (80068e0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80068d6:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 80068d8:	bf00      	nop
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	24001724 	.word	0x24001724

080068e4 <_GLOBAL__sub_I_touchgfx_fonts>:
 80068e4:	b580      	push	{r7, lr}
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80068ec:	2001      	movs	r0, #1
 80068ee:	f7ff ffd7 	bl	80068a0 <_Z41__static_initialization_and_destruction_0ii>
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	68b9      	ldr	r1, [r7, #8]
 8006906:	4618      	mov	r0, r3
 8006908:	f7fd fb42 	bl	8003f90 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800690c:	4a03      	ldr	r2, [pc, #12]	; (800691c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	601a      	str	r2, [r3, #0]
{

}
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	08027044 	.word	0x08027044

08006920 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	601a      	str	r2, [r3, #0]
{

}
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4618      	mov	r0, r3
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <_ZN5Model4tickEv>:

void Model::tick()
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]

}
 8006944:	bf00      	nop
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
    {
    }
 8006958:	bf00      	nop
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
    {
    }
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
    {
 8006980:	4a04      	ldr	r2, [pc, #16]	; (8006994 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	601a      	str	r2, [r3, #0]
    }
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4618      	mov	r0, r3
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	080277fc 	.word	0x080277fc

08006998 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
    }
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f7ff ffe9 	bl	8006978 <_ZN8touchgfx9PresenterD1Ev>
 80069a6:	2104      	movs	r1, #4
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f01e fa88 	bl	8024ebe <_ZdlPvj>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4618      	mov	r0, r3
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
    {
 80069c0:	4a04      	ldr	r2, [pc, #16]	; (80069d4 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	601a      	str	r2, [r3, #0]
    }
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4618      	mov	r0, r3
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr
 80069d4:	080277fc 	.word	0x080277fc

080069d8 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	4a06      	ldr	r2, [pc, #24]	; (80069fc <_ZN13ModelListenerC1Ev+0x24>)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	601a      	str	r2, [r3, #0]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	605a      	str	r2, [r3, #4]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4618      	mov	r0, r3
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	080277ec 	.word	0x080277ec

08006a00 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	4a04      	ldr	r2, [pc, #16]	; (8006a1c <_ZN13ModelListenerD1Ev+0x1c>)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	601a      	str	r2, [r3, #0]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4618      	mov	r0, r3
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	080277ec 	.word	0x080277ec

08006a20 <_ZN13ModelListenerD0Ev>:
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7ff ffe9 	bl	8006a00 <_ZN13ModelListenerD1Ev>
 8006a2e:	2108      	movs	r1, #8
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f01e fa44 	bl	8024ebe <_ZdlPvj>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3708      	adds	r7, #8
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	4a09      	ldr	r2, [pc, #36]	; (8006a70 <_ZN16Screen1PresenterD1Ev+0x30>)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	4a09      	ldr	r2, [pc, #36]	; (8006a74 <_ZN16Screen1PresenterD1Ev+0x34>)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	605a      	str	r2, [r3, #4]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	3304      	adds	r3, #4
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7ff ffd1 	bl	8006a00 <_ZN13ModelListenerD1Ev>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7ff ff89 	bl	8006978 <_ZN8touchgfx9PresenterD1Ev>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3708      	adds	r7, #8
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	080277c4 	.word	0x080277c4
 8006a74:	080277dc 	.word	0x080277dc

08006a78 <_ZThn4_N16Screen1PresenterD1Ev>:
 8006a78:	f1a0 0004 	sub.w	r0, r0, #4
 8006a7c:	e7e0      	b.n	8006a40 <_ZN16Screen1PresenterD1Ev>
 8006a7e:	bf00      	nop

08006a80 <_ZN16Screen1PresenterD0Ev>:
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f7ff ffd9 	bl	8006a40 <_ZN16Screen1PresenterD1Ev>
 8006a8e:	2110      	movs	r1, #16
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f01e fa14 	bl	8024ebe <_ZdlPvj>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <_ZThn4_N16Screen1PresenterD0Ev>:
 8006aa0:	f1a0 0004 	sub.w	r0, r0, #4
 8006aa4:	e7ec      	b.n	8006a80 <_ZN16Screen1PresenterD0Ev>
	...

08006aa8 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
    : view(v)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7ff ff7f 	bl	80069b8 <_ZN8touchgfx9PresenterC1Ev>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	3304      	adds	r3, #4
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7ff ff8a 	bl	80069d8 <_ZN13ModelListenerC1Ev>
 8006ac4:	4a06      	ldr	r2, [pc, #24]	; (8006ae0 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	601a      	str	r2, [r3, #0]
 8006aca:	4a06      	ldr	r2, [pc, #24]	; (8006ae4 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	605a      	str	r2, [r3, #4]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	683a      	ldr	r2, [r7, #0]
 8006ad4:	60da      	str	r2, [r3, #12]
{

}
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3708      	adds	r7, #8
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	080277c4 	.word	0x080277c4
 8006ae4:	080277dc 	.word	0x080277dc

08006ae8 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]

}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]

}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	4a05      	ldr	r2, [pc, #20]	; (8006b30 <_ZN11Screen1ViewD1Ev+0x20>)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	601a      	str	r2, [r3, #0]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7fe fca1 	bl	8005468 <_ZN15Screen1ViewBaseD1Ev>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	08027814 	.word	0x08027814

08006b34 <_ZN11Screen1ViewD0Ev>:
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f7ff ffe7 	bl	8006b10 <_ZN11Screen1ViewD1Ev>
 8006b42:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f01e f9b9 	bl	8024ebe <_ZdlPvj>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3708      	adds	r7, #8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
	...

08006b58 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fe fcde 	bl	8005524 <_ZN15Screen1ViewBaseC1Ev>
 8006b68:	4a05      	ldr	r2, [pc, #20]	; (8006b80 <_ZN11Screen1ViewC1Ev+0x28>)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	601a      	str	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f8a3 22bc 	strh.w	r2, [r3, #700]	; 0x2bc
{

}
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3708      	adds	r7, #8
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	08027814 	.word	0x08027814

08006b84 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7ff f87a 	bl	8005c88 <_ZN15Screen1ViewBase11setupScreenEv>
}
 8006b94:	bf00      	nop
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7fd ffb4 	bl	8004b14 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8006bac:	bf00      	nop
 8006bae:	3708      	adds	r7, #8
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <_ZN11Screen1View7upclickEv>:


void Screen1View::upclick()
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
	counter++;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f9b3 32bc 	ldrsh.w	r3, [r3, #700]	; 0x2bc
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	b21a      	sxth	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8a3 22bc 	strh.w	r2, [r3, #700]	; 0x2bc
	Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%d", counter);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f9b3 32bc 	ldrsh.w	r3, [r3, #700]	; 0x2bc
 8006bdc:	4a06      	ldr	r2, [pc, #24]	; (8006bf8 <_ZN11Screen1View7upclickEv+0x44>)
 8006bde:	2105      	movs	r1, #5
 8006be0:	f012 fada 	bl	8019198 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	textArea1.invalidate();
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	33c4      	adds	r3, #196	; 0xc4
 8006be8:	4618      	mov	r0, r3
 8006bea:	f010 fbb1 	bl	8017350 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8006bee:	bf00      	nop
 8006bf0:	3708      	adds	r7, #8
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	08026d58 	.word	0x08026d58

08006bfc <_ZN11Screen1View9downclickEv>:

void Screen1View::downclick()
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
	counter--;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f9b3 32bc 	ldrsh.w	r3, [r3, #700]	; 0x2bc
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	b21a      	sxth	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8a3 22bc 	strh.w	r2, [r3, #700]	; 0x2bc
	//if(counter <= 0) counter = 0;
	Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%d", counter);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f9b3 32bc 	ldrsh.w	r3, [r3, #700]	; 0x2bc
 8006c24:	4a06      	ldr	r2, [pc, #24]	; (8006c40 <_ZN11Screen1View9downclickEv+0x44>)
 8006c26:	2105      	movs	r1, #5
 8006c28:	f012 fab6 	bl	8019198 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	textArea1.invalidate();
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	33c4      	adds	r3, #196	; 0xc4
 8006c30:	4618      	mov	r0, r3
 8006c32:	f010 fb8d 	bl	8017350 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8006c36:	bf00      	nop
 8006c38:	3708      	adds	r7, #8
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	08026d58 	.word	0x08026d58

08006c44 <__NVIC_SetPriority>:
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	6039      	str	r1, [r7, #0]
 8006c4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006c50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	db0a      	blt.n	8006c6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	b2da      	uxtb	r2, r3
 8006c5c:	490c      	ldr	r1, [pc, #48]	; (8006c90 <__NVIC_SetPriority+0x4c>)
 8006c5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c62:	0112      	lsls	r2, r2, #4
 8006c64:	b2d2      	uxtb	r2, r2
 8006c66:	440b      	add	r3, r1
 8006c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006c6c:	e00a      	b.n	8006c84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	b2da      	uxtb	r2, r3
 8006c72:	4908      	ldr	r1, [pc, #32]	; (8006c94 <__NVIC_SetPriority+0x50>)
 8006c74:	88fb      	ldrh	r3, [r7, #6]
 8006c76:	f003 030f 	and.w	r3, r3, #15
 8006c7a:	3b04      	subs	r3, #4
 8006c7c:	0112      	lsls	r2, r2, #4
 8006c7e:	b2d2      	uxtb	r2, r2
 8006c80:	440b      	add	r3, r1
 8006c82:	761a      	strb	r2, [r3, #24]
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	e000e100 	.word	0xe000e100
 8006c94:	e000ed00 	.word	0xe000ed00

08006c98 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006c9c:	4b05      	ldr	r3, [pc, #20]	; (8006cb4 <SysTick_Handler+0x1c>)
 8006c9e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006ca0:	f002 fea6 	bl	80099f0 <xTaskGetSchedulerState>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d001      	beq.n	8006cae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006caa:	f000 ffe5 	bl	8007c78 <xPortSysTickHandler>
  }
}
 8006cae:	bf00      	nop
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	e000e010 	.word	0xe000e010

08006cb8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	f06f 0004 	mvn.w	r0, #4
 8006cc2:	f7ff ffbf 	bl	8006c44 <__NVIC_SetPriority>
#endif
}
 8006cc6:	bf00      	nop
 8006cc8:	bd80      	pop	{r7, pc}
	...

08006ccc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cd2:	f3ef 8305 	mrs	r3, IPSR
 8006cd6:	603b      	str	r3, [r7, #0]
  return(result);
 8006cd8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006cde:	f06f 0305 	mvn.w	r3, #5
 8006ce2:	607b      	str	r3, [r7, #4]
 8006ce4:	e00c      	b.n	8006d00 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006ce6:	4b0a      	ldr	r3, [pc, #40]	; (8006d10 <osKernelInitialize+0x44>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d105      	bne.n	8006cfa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006cee:	4b08      	ldr	r3, [pc, #32]	; (8006d10 <osKernelInitialize+0x44>)
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	607b      	str	r3, [r7, #4]
 8006cf8:	e002      	b.n	8006d00 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8006cfe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006d00:	687b      	ldr	r3, [r7, #4]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	370c      	adds	r7, #12
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	24001730 	.word	0x24001730

08006d14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d1a:	f3ef 8305 	mrs	r3, IPSR
 8006d1e:	603b      	str	r3, [r7, #0]
  return(result);
 8006d20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d003      	beq.n	8006d2e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006d26:	f06f 0305 	mvn.w	r3, #5
 8006d2a:	607b      	str	r3, [r7, #4]
 8006d2c:	e010      	b.n	8006d50 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006d2e:	4b0b      	ldr	r3, [pc, #44]	; (8006d5c <osKernelStart+0x48>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d109      	bne.n	8006d4a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006d36:	f7ff ffbf 	bl	8006cb8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006d3a:	4b08      	ldr	r3, [pc, #32]	; (8006d5c <osKernelStart+0x48>)
 8006d3c:	2202      	movs	r2, #2
 8006d3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006d40:	f002 fa0e 	bl	8009160 <vTaskStartScheduler>
      stat = osOK;
 8006d44:	2300      	movs	r3, #0
 8006d46:	607b      	str	r3, [r7, #4]
 8006d48:	e002      	b.n	8006d50 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006d50:	687b      	ldr	r3, [r7, #4]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	24001730 	.word	0x24001730

08006d60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b08e      	sub	sp, #56	; 0x38
 8006d64:	af04      	add	r7, sp, #16
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d70:	f3ef 8305 	mrs	r3, IPSR
 8006d74:	617b      	str	r3, [r7, #20]
  return(result);
 8006d76:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d17e      	bne.n	8006e7a <osThreadNew+0x11a>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d07b      	beq.n	8006e7a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006d82:	2380      	movs	r3, #128	; 0x80
 8006d84:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006d86:	2318      	movs	r3, #24
 8006d88:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d92:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d045      	beq.n	8006e26 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d002      	beq.n	8006da8 <osThreadNew+0x48>
        name = attr->name;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d002      	beq.n	8006db6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d008      	beq.n	8006dce <osThreadNew+0x6e>
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	2b38      	cmp	r3, #56	; 0x38
 8006dc0:	d805      	bhi.n	8006dce <osThreadNew+0x6e>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f003 0301 	and.w	r3, r3, #1
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d001      	beq.n	8006dd2 <osThreadNew+0x72>
        return (NULL);
 8006dce:	2300      	movs	r3, #0
 8006dd0:	e054      	b.n	8006e7c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d003      	beq.n	8006de2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	089b      	lsrs	r3, r3, #2
 8006de0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00e      	beq.n	8006e08 <osThreadNew+0xa8>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	2b5b      	cmp	r3, #91	; 0x5b
 8006df0:	d90a      	bls.n	8006e08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d006      	beq.n	8006e08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d002      	beq.n	8006e08 <osThreadNew+0xa8>
        mem = 1;
 8006e02:	2301      	movs	r3, #1
 8006e04:	61bb      	str	r3, [r7, #24]
 8006e06:	e010      	b.n	8006e2a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10c      	bne.n	8006e2a <osThreadNew+0xca>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d108      	bne.n	8006e2a <osThreadNew+0xca>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d104      	bne.n	8006e2a <osThreadNew+0xca>
          mem = 0;
 8006e20:	2300      	movs	r3, #0
 8006e22:	61bb      	str	r3, [r7, #24]
 8006e24:	e001      	b.n	8006e2a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006e26:	2300      	movs	r3, #0
 8006e28:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d110      	bne.n	8006e52 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e38:	9202      	str	r2, [sp, #8]
 8006e3a:	9301      	str	r3, [sp, #4]
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	6a3a      	ldr	r2, [r7, #32]
 8006e44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f001 ffb4 	bl	8008db4 <xTaskCreateStatic>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	613b      	str	r3, [r7, #16]
 8006e50:	e013      	b.n	8006e7a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d110      	bne.n	8006e7a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006e58:	6a3b      	ldr	r3, [r7, #32]
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	f107 0310 	add.w	r3, r7, #16
 8006e60:	9301      	str	r3, [sp, #4]
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f001 ffff 	bl	8008e6e <xTaskCreate>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d001      	beq.n	8006e7a <osThreadNew+0x11a>
            hTask = NULL;
 8006e76:	2300      	movs	r3, #0
 8006e78:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006e7a:	693b      	ldr	r3, [r7, #16]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3728      	adds	r7, #40	; 0x28
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e8c:	f3ef 8305 	mrs	r3, IPSR
 8006e90:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e92:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d003      	beq.n	8006ea0 <osDelay+0x1c>
    stat = osErrorISR;
 8006e98:	f06f 0305 	mvn.w	r3, #5
 8006e9c:	60fb      	str	r3, [r7, #12]
 8006e9e:	e007      	b.n	8006eb0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d002      	beq.n	8006eb0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f002 f924 	bl	80090f8 <vTaskDelay>
    }
  }

  return (stat);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b08a      	sub	sp, #40	; 0x28
 8006ebe:	af02      	add	r7, sp, #8
 8006ec0:	60f8      	str	r0, [r7, #12]
 8006ec2:	60b9      	str	r1, [r7, #8]
 8006ec4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006eca:	f3ef 8305 	mrs	r3, IPSR
 8006ece:	613b      	str	r3, [r7, #16]
  return(result);
 8006ed0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d175      	bne.n	8006fc2 <osSemaphoreNew+0x108>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d072      	beq.n	8006fc2 <osSemaphoreNew+0x108>
 8006edc:	68ba      	ldr	r2, [r7, #8]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d86e      	bhi.n	8006fc2 <osSemaphoreNew+0x108>
    mem = -1;
 8006ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ee8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d015      	beq.n	8006f1c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d006      	beq.n	8006f06 <osSemaphoreNew+0x4c>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	2b4f      	cmp	r3, #79	; 0x4f
 8006efe:	d902      	bls.n	8006f06 <osSemaphoreNew+0x4c>
        mem = 1;
 8006f00:	2301      	movs	r3, #1
 8006f02:	61bb      	str	r3, [r7, #24]
 8006f04:	e00c      	b.n	8006f20 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d108      	bne.n	8006f20 <osSemaphoreNew+0x66>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d104      	bne.n	8006f20 <osSemaphoreNew+0x66>
          mem = 0;
 8006f16:	2300      	movs	r3, #0
 8006f18:	61bb      	str	r3, [r7, #24]
 8006f1a:	e001      	b.n	8006f20 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f26:	d04c      	beq.n	8006fc2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d128      	bne.n	8006f80 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d10a      	bne.n	8006f4a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	2203      	movs	r2, #3
 8006f3a:	9200      	str	r2, [sp, #0]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	2100      	movs	r1, #0
 8006f40:	2001      	movs	r0, #1
 8006f42:	f000 ff91 	bl	8007e68 <xQueueGenericCreateStatic>
 8006f46:	61f8      	str	r0, [r7, #28]
 8006f48:	e005      	b.n	8006f56 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006f4a:	2203      	movs	r2, #3
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	2001      	movs	r0, #1
 8006f50:	f001 f802 	bl	8007f58 <xQueueGenericCreate>
 8006f54:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d022      	beq.n	8006fa2 <osSemaphoreNew+0xe8>
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d01f      	beq.n	8006fa2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006f62:	2300      	movs	r3, #0
 8006f64:	2200      	movs	r2, #0
 8006f66:	2100      	movs	r1, #0
 8006f68:	69f8      	ldr	r0, [r7, #28]
 8006f6a:	f001 f8bd 	bl	80080e8 <xQueueGenericSend>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d016      	beq.n	8006fa2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006f74:	69f8      	ldr	r0, [r7, #28]
 8006f76:	f001 fd49 	bl	8008a0c <vQueueDelete>
            hSemaphore = NULL;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	61fb      	str	r3, [r7, #28]
 8006f7e:	e010      	b.n	8006fa2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d108      	bne.n	8006f98 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	68b9      	ldr	r1, [r7, #8]
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	f001 f83f 	bl	8008012 <xQueueCreateCountingSemaphoreStatic>
 8006f94:	61f8      	str	r0, [r7, #28]
 8006f96:	e004      	b.n	8006fa2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006f98:	68b9      	ldr	r1, [r7, #8]
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f001 f870 	bl	8008080 <xQueueCreateCountingSemaphore>
 8006fa0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00c      	beq.n	8006fc2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d003      	beq.n	8006fb6 <osSemaphoreNew+0xfc>
          name = attr->name;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	617b      	str	r3, [r7, #20]
 8006fb4:	e001      	b.n	8006fba <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006fba:	6979      	ldr	r1, [r7, #20]
 8006fbc:	69f8      	ldr	r0, [r7, #28]
 8006fbe:	f001 fe71 	bl	8008ca4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006fc2:	69fb      	ldr	r3, [r7, #28]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3720      	adds	r7, #32
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d103      	bne.n	8006fec <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006fe4:	f06f 0303 	mvn.w	r3, #3
 8006fe8:	617b      	str	r3, [r7, #20]
 8006fea:	e039      	b.n	8007060 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fec:	f3ef 8305 	mrs	r3, IPSR
 8006ff0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d022      	beq.n	800703e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d003      	beq.n	8007006 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006ffe:	f06f 0303 	mvn.w	r3, #3
 8007002:	617b      	str	r3, [r7, #20]
 8007004:	e02c      	b.n	8007060 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8007006:	2300      	movs	r3, #0
 8007008:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800700a:	f107 0308 	add.w	r3, r7, #8
 800700e:	461a      	mov	r2, r3
 8007010:	2100      	movs	r1, #0
 8007012:	6938      	ldr	r0, [r7, #16]
 8007014:	f001 fc7a 	bl	800890c <xQueueReceiveFromISR>
 8007018:	4603      	mov	r3, r0
 800701a:	2b01      	cmp	r3, #1
 800701c:	d003      	beq.n	8007026 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800701e:	f06f 0302 	mvn.w	r3, #2
 8007022:	617b      	str	r3, [r7, #20]
 8007024:	e01c      	b.n	8007060 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d019      	beq.n	8007060 <osSemaphoreAcquire+0x94>
 800702c:	4b0f      	ldr	r3, [pc, #60]	; (800706c <osSemaphoreAcquire+0xa0>)
 800702e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007032:	601a      	str	r2, [r3, #0]
 8007034:	f3bf 8f4f 	dsb	sy
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	e010      	b.n	8007060 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800703e:	6839      	ldr	r1, [r7, #0]
 8007040:	6938      	ldr	r0, [r7, #16]
 8007042:	f001 fb57 	bl	80086f4 <xQueueSemaphoreTake>
 8007046:	4603      	mov	r3, r0
 8007048:	2b01      	cmp	r3, #1
 800704a:	d009      	beq.n	8007060 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d003      	beq.n	800705a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8007052:	f06f 0301 	mvn.w	r3, #1
 8007056:	617b      	str	r3, [r7, #20]
 8007058:	e002      	b.n	8007060 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800705a:	f06f 0302 	mvn.w	r3, #2
 800705e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007060:	697b      	ldr	r3, [r7, #20]
}
 8007062:	4618      	mov	r0, r3
 8007064:	3718      	adds	r7, #24
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	e000ed04 	.word	0xe000ed04

08007070 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800707c:	2300      	movs	r3, #0
 800707e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d103      	bne.n	800708e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007086:	f06f 0303 	mvn.w	r3, #3
 800708a:	617b      	str	r3, [r7, #20]
 800708c:	e02c      	b.n	80070e8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800708e:	f3ef 8305 	mrs	r3, IPSR
 8007092:	60fb      	str	r3, [r7, #12]
  return(result);
 8007094:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007096:	2b00      	cmp	r3, #0
 8007098:	d01a      	beq.n	80070d0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800709a:	2300      	movs	r3, #0
 800709c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800709e:	f107 0308 	add.w	r3, r7, #8
 80070a2:	4619      	mov	r1, r3
 80070a4:	6938      	ldr	r0, [r7, #16]
 80070a6:	f001 f9b8 	bl	800841a <xQueueGiveFromISR>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d003      	beq.n	80070b8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80070b0:	f06f 0302 	mvn.w	r3, #2
 80070b4:	617b      	str	r3, [r7, #20]
 80070b6:	e017      	b.n	80070e8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d014      	beq.n	80070e8 <osSemaphoreRelease+0x78>
 80070be:	4b0d      	ldr	r3, [pc, #52]	; (80070f4 <osSemaphoreRelease+0x84>)
 80070c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070c4:	601a      	str	r2, [r3, #0]
 80070c6:	f3bf 8f4f 	dsb	sy
 80070ca:	f3bf 8f6f 	isb	sy
 80070ce:	e00b      	b.n	80070e8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80070d0:	2300      	movs	r3, #0
 80070d2:	2200      	movs	r2, #0
 80070d4:	2100      	movs	r1, #0
 80070d6:	6938      	ldr	r0, [r7, #16]
 80070d8:	f001 f806 	bl	80080e8 <xQueueGenericSend>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d002      	beq.n	80070e8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80070e2:	f06f 0302 	mvn.w	r3, #2
 80070e6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80070e8:	697b      	ldr	r3, [r7, #20]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3718      	adds	r7, #24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	e000ed04 	.word	0xe000ed04

080070f8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b08a      	sub	sp, #40	; 0x28
 80070fc:	af02      	add	r7, sp, #8
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007104:	2300      	movs	r3, #0
 8007106:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007108:	f3ef 8305 	mrs	r3, IPSR
 800710c:	613b      	str	r3, [r7, #16]
  return(result);
 800710e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007110:	2b00      	cmp	r3, #0
 8007112:	d15f      	bne.n	80071d4 <osMessageQueueNew+0xdc>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d05c      	beq.n	80071d4 <osMessageQueueNew+0xdc>
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d059      	beq.n	80071d4 <osMessageQueueNew+0xdc>
    mem = -1;
 8007120:	f04f 33ff 	mov.w	r3, #4294967295
 8007124:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d029      	beq.n	8007180 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d012      	beq.n	800715a <osMessageQueueNew+0x62>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	2b4f      	cmp	r3, #79	; 0x4f
 800713a:	d90e      	bls.n	800715a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00a      	beq.n	800715a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	695a      	ldr	r2, [r3, #20]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	68b9      	ldr	r1, [r7, #8]
 800714c:	fb01 f303 	mul.w	r3, r1, r3
 8007150:	429a      	cmp	r2, r3
 8007152:	d302      	bcc.n	800715a <osMessageQueueNew+0x62>
        mem = 1;
 8007154:	2301      	movs	r3, #1
 8007156:	61bb      	str	r3, [r7, #24]
 8007158:	e014      	b.n	8007184 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d110      	bne.n	8007184 <osMessageQueueNew+0x8c>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10c      	bne.n	8007184 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800716e:	2b00      	cmp	r3, #0
 8007170:	d108      	bne.n	8007184 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d104      	bne.n	8007184 <osMessageQueueNew+0x8c>
          mem = 0;
 800717a:	2300      	movs	r3, #0
 800717c:	61bb      	str	r3, [r7, #24]
 800717e:	e001      	b.n	8007184 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007180:	2300      	movs	r3, #0
 8007182:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d10b      	bne.n	80071a2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	691a      	ldr	r2, [r3, #16]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	2100      	movs	r1, #0
 8007194:	9100      	str	r1, [sp, #0]
 8007196:	68b9      	ldr	r1, [r7, #8]
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 fe65 	bl	8007e68 <xQueueGenericCreateStatic>
 800719e:	61f8      	str	r0, [r7, #28]
 80071a0:	e008      	b.n	80071b4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d105      	bne.n	80071b4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80071a8:	2200      	movs	r2, #0
 80071aa:	68b9      	ldr	r1, [r7, #8]
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f000 fed3 	bl	8007f58 <xQueueGenericCreate>
 80071b2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00c      	beq.n	80071d4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d003      	beq.n	80071c8 <osMessageQueueNew+0xd0>
        name = attr->name;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	617b      	str	r3, [r7, #20]
 80071c6:	e001      	b.n	80071cc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80071c8:	2300      	movs	r3, #0
 80071ca:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80071cc:	6979      	ldr	r1, [r7, #20]
 80071ce:	69f8      	ldr	r0, [r7, #28]
 80071d0:	f001 fd68 	bl	8008ca4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80071d4:	69fb      	ldr	r3, [r7, #28]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3720      	adds	r7, #32
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
	...

080071e0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b088      	sub	sp, #32
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	603b      	str	r3, [r7, #0]
 80071ec:	4613      	mov	r3, r2
 80071ee:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80071f4:	2300      	movs	r3, #0
 80071f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071f8:	f3ef 8305 	mrs	r3, IPSR
 80071fc:	617b      	str	r3, [r7, #20]
  return(result);
 80071fe:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007200:	2b00      	cmp	r3, #0
 8007202:	d028      	beq.n	8007256 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d005      	beq.n	8007216 <osMessageQueuePut+0x36>
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d002      	beq.n	8007216 <osMessageQueuePut+0x36>
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d003      	beq.n	800721e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007216:	f06f 0303 	mvn.w	r3, #3
 800721a:	61fb      	str	r3, [r7, #28]
 800721c:	e038      	b.n	8007290 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800721e:	2300      	movs	r3, #0
 8007220:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007222:	f107 0210 	add.w	r2, r7, #16
 8007226:	2300      	movs	r3, #0
 8007228:	68b9      	ldr	r1, [r7, #8]
 800722a:	69b8      	ldr	r0, [r7, #24]
 800722c:	f001 f85a 	bl	80082e4 <xQueueGenericSendFromISR>
 8007230:	4603      	mov	r3, r0
 8007232:	2b01      	cmp	r3, #1
 8007234:	d003      	beq.n	800723e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8007236:	f06f 0302 	mvn.w	r3, #2
 800723a:	61fb      	str	r3, [r7, #28]
 800723c:	e028      	b.n	8007290 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d025      	beq.n	8007290 <osMessageQueuePut+0xb0>
 8007244:	4b15      	ldr	r3, [pc, #84]	; (800729c <osMessageQueuePut+0xbc>)
 8007246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800724a:	601a      	str	r2, [r3, #0]
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	e01c      	b.n	8007290 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d002      	beq.n	8007262 <osMessageQueuePut+0x82>
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d103      	bne.n	800726a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8007262:	f06f 0303 	mvn.w	r3, #3
 8007266:	61fb      	str	r3, [r7, #28]
 8007268:	e012      	b.n	8007290 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800726a:	2300      	movs	r3, #0
 800726c:	683a      	ldr	r2, [r7, #0]
 800726e:	68b9      	ldr	r1, [r7, #8]
 8007270:	69b8      	ldr	r0, [r7, #24]
 8007272:	f000 ff39 	bl	80080e8 <xQueueGenericSend>
 8007276:	4603      	mov	r3, r0
 8007278:	2b01      	cmp	r3, #1
 800727a:	d009      	beq.n	8007290 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d003      	beq.n	800728a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8007282:	f06f 0301 	mvn.w	r3, #1
 8007286:	61fb      	str	r3, [r7, #28]
 8007288:	e002      	b.n	8007290 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800728a:	f06f 0302 	mvn.w	r3, #2
 800728e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007290:	69fb      	ldr	r3, [r7, #28]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3720      	adds	r7, #32
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	e000ed04 	.word	0xe000ed04

080072a0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b088      	sub	sp, #32
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
 80072ac:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80072b2:	2300      	movs	r3, #0
 80072b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072b6:	f3ef 8305 	mrs	r3, IPSR
 80072ba:	617b      	str	r3, [r7, #20]
  return(result);
 80072bc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d028      	beq.n	8007314 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d005      	beq.n	80072d4 <osMessageQueueGet+0x34>
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d002      	beq.n	80072d4 <osMessageQueueGet+0x34>
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d003      	beq.n	80072dc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80072d4:	f06f 0303 	mvn.w	r3, #3
 80072d8:	61fb      	str	r3, [r7, #28]
 80072da:	e037      	b.n	800734c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80072dc:	2300      	movs	r3, #0
 80072de:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80072e0:	f107 0310 	add.w	r3, r7, #16
 80072e4:	461a      	mov	r2, r3
 80072e6:	68b9      	ldr	r1, [r7, #8]
 80072e8:	69b8      	ldr	r0, [r7, #24]
 80072ea:	f001 fb0f 	bl	800890c <xQueueReceiveFromISR>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d003      	beq.n	80072fc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80072f4:	f06f 0302 	mvn.w	r3, #2
 80072f8:	61fb      	str	r3, [r7, #28]
 80072fa:	e027      	b.n	800734c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d024      	beq.n	800734c <osMessageQueueGet+0xac>
 8007302:	4b15      	ldr	r3, [pc, #84]	; (8007358 <osMessageQueueGet+0xb8>)
 8007304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007308:	601a      	str	r2, [r3, #0]
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	f3bf 8f6f 	isb	sy
 8007312:	e01b      	b.n	800734c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d002      	beq.n	8007320 <osMessageQueueGet+0x80>
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d103      	bne.n	8007328 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007320:	f06f 0303 	mvn.w	r3, #3
 8007324:	61fb      	str	r3, [r7, #28]
 8007326:	e011      	b.n	800734c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007328:	683a      	ldr	r2, [r7, #0]
 800732a:	68b9      	ldr	r1, [r7, #8]
 800732c:	69b8      	ldr	r0, [r7, #24]
 800732e:	f001 f901 	bl	8008534 <xQueueReceive>
 8007332:	4603      	mov	r3, r0
 8007334:	2b01      	cmp	r3, #1
 8007336:	d009      	beq.n	800734c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d003      	beq.n	8007346 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800733e:	f06f 0301 	mvn.w	r3, #1
 8007342:	61fb      	str	r3, [r7, #28]
 8007344:	e002      	b.n	800734c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007346:	f06f 0302 	mvn.w	r3, #2
 800734a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800734c:	69fb      	ldr	r3, [r7, #28]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3720      	adds	r7, #32
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	e000ed04 	.word	0xe000ed04

0800735c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	4a07      	ldr	r2, [pc, #28]	; (8007388 <vApplicationGetIdleTaskMemory+0x2c>)
 800736c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	4a06      	ldr	r2, [pc, #24]	; (800738c <vApplicationGetIdleTaskMemory+0x30>)
 8007372:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2280      	movs	r2, #128	; 0x80
 8007378:	601a      	str	r2, [r3, #0]
}
 800737a:	bf00      	nop
 800737c:	3714      	adds	r7, #20
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	24001734 	.word	0x24001734
 800738c:	24001790 	.word	0x24001790

08007390 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	4a07      	ldr	r2, [pc, #28]	; (80073bc <vApplicationGetTimerTaskMemory+0x2c>)
 80073a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	4a06      	ldr	r2, [pc, #24]	; (80073c0 <vApplicationGetTimerTaskMemory+0x30>)
 80073a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073ae:	601a      	str	r2, [r3, #0]
}
 80073b0:	bf00      	nop
 80073b2:	3714      	adds	r7, #20
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	24001990 	.word	0x24001990
 80073c0:	240019ec 	.word	0x240019ec

080073c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b08a      	sub	sp, #40	; 0x28
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80073cc:	2300      	movs	r3, #0
 80073ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80073d0:	f001 ff2c 	bl	800922c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80073d4:	4b5b      	ldr	r3, [pc, #364]	; (8007544 <pvPortMalloc+0x180>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d101      	bne.n	80073e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80073dc:	f000 f920 	bl	8007620 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80073e0:	4b59      	ldr	r3, [pc, #356]	; (8007548 <pvPortMalloc+0x184>)
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4013      	ands	r3, r2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f040 8093 	bne.w	8007514 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d01d      	beq.n	8007430 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80073f4:	2208      	movs	r2, #8
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4413      	add	r3, r2
 80073fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f003 0307 	and.w	r3, r3, #7
 8007402:	2b00      	cmp	r3, #0
 8007404:	d014      	beq.n	8007430 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f023 0307 	bic.w	r3, r3, #7
 800740c:	3308      	adds	r3, #8
 800740e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f003 0307 	and.w	r3, r3, #7
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00a      	beq.n	8007430 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800741a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741e:	f383 8811 	msr	BASEPRI, r3
 8007422:	f3bf 8f6f 	isb	sy
 8007426:	f3bf 8f4f 	dsb	sy
 800742a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800742c:	bf00      	nop
 800742e:	e7fe      	b.n	800742e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d06e      	beq.n	8007514 <pvPortMalloc+0x150>
 8007436:	4b45      	ldr	r3, [pc, #276]	; (800754c <pvPortMalloc+0x188>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	429a      	cmp	r2, r3
 800743e:	d869      	bhi.n	8007514 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007440:	4b43      	ldr	r3, [pc, #268]	; (8007550 <pvPortMalloc+0x18c>)
 8007442:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007444:	4b42      	ldr	r3, [pc, #264]	; (8007550 <pvPortMalloc+0x18c>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800744a:	e004      	b.n	8007456 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	429a      	cmp	r2, r3
 800745e:	d903      	bls.n	8007468 <pvPortMalloc+0xa4>
 8007460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1f1      	bne.n	800744c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007468:	4b36      	ldr	r3, [pc, #216]	; (8007544 <pvPortMalloc+0x180>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800746e:	429a      	cmp	r2, r3
 8007470:	d050      	beq.n	8007514 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007472:	6a3b      	ldr	r3, [r7, #32]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2208      	movs	r2, #8
 8007478:	4413      	add	r3, r2
 800747a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800747c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	6a3b      	ldr	r3, [r7, #32]
 8007482:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	685a      	ldr	r2, [r3, #4]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	1ad2      	subs	r2, r2, r3
 800748c:	2308      	movs	r3, #8
 800748e:	005b      	lsls	r3, r3, #1
 8007490:	429a      	cmp	r2, r3
 8007492:	d91f      	bls.n	80074d4 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4413      	add	r3, r2
 800749a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	f003 0307 	and.w	r3, r3, #7
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00a      	beq.n	80074bc <pvPortMalloc+0xf8>
	__asm volatile
 80074a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074aa:	f383 8811 	msr	BASEPRI, r3
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	613b      	str	r3, [r7, #16]
}
 80074b8:	bf00      	nop
 80074ba:	e7fe      	b.n	80074ba <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80074bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	1ad2      	subs	r2, r2, r3
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80074c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80074ce:	69b8      	ldr	r0, [r7, #24]
 80074d0:	f000 f908 	bl	80076e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80074d4:	4b1d      	ldr	r3, [pc, #116]	; (800754c <pvPortMalloc+0x188>)
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	4a1b      	ldr	r2, [pc, #108]	; (800754c <pvPortMalloc+0x188>)
 80074e0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80074e2:	4b1a      	ldr	r3, [pc, #104]	; (800754c <pvPortMalloc+0x188>)
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	4b1b      	ldr	r3, [pc, #108]	; (8007554 <pvPortMalloc+0x190>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d203      	bcs.n	80074f6 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80074ee:	4b17      	ldr	r3, [pc, #92]	; (800754c <pvPortMalloc+0x188>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a18      	ldr	r2, [pc, #96]	; (8007554 <pvPortMalloc+0x190>)
 80074f4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80074f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f8:	685a      	ldr	r2, [r3, #4]
 80074fa:	4b13      	ldr	r3, [pc, #76]	; (8007548 <pvPortMalloc+0x184>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	431a      	orrs	r2, r3
 8007500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007502:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	2200      	movs	r2, #0
 8007508:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800750a:	4b13      	ldr	r3, [pc, #76]	; (8007558 <pvPortMalloc+0x194>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	3301      	adds	r3, #1
 8007510:	4a11      	ldr	r2, [pc, #68]	; (8007558 <pvPortMalloc+0x194>)
 8007512:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007514:	f001 fe98 	bl	8009248 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	f003 0307 	and.w	r3, r3, #7
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00a      	beq.n	8007538 <pvPortMalloc+0x174>
	__asm volatile
 8007522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007526:	f383 8811 	msr	BASEPRI, r3
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	60fb      	str	r3, [r7, #12]
}
 8007534:	bf00      	nop
 8007536:	e7fe      	b.n	8007536 <pvPortMalloc+0x172>
	return pvReturn;
 8007538:	69fb      	ldr	r3, [r7, #28]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3728      	adds	r7, #40	; 0x28
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	24009df4 	.word	0x24009df4
 8007548:	24009e08 	.word	0x24009e08
 800754c:	24009df8 	.word	0x24009df8
 8007550:	24009dec 	.word	0x24009dec
 8007554:	24009dfc 	.word	0x24009dfc
 8007558:	24009e00 	.word	0x24009e00

0800755c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b086      	sub	sp, #24
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d04d      	beq.n	800760a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800756e:	2308      	movs	r3, #8
 8007570:	425b      	negs	r3, r3
 8007572:	697a      	ldr	r2, [r7, #20]
 8007574:	4413      	add	r3, r2
 8007576:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	4b24      	ldr	r3, [pc, #144]	; (8007614 <vPortFree+0xb8>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4013      	ands	r3, r2
 8007586:	2b00      	cmp	r3, #0
 8007588:	d10a      	bne.n	80075a0 <vPortFree+0x44>
	__asm volatile
 800758a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758e:	f383 8811 	msr	BASEPRI, r3
 8007592:	f3bf 8f6f 	isb	sy
 8007596:	f3bf 8f4f 	dsb	sy
 800759a:	60fb      	str	r3, [r7, #12]
}
 800759c:	bf00      	nop
 800759e:	e7fe      	b.n	800759e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00a      	beq.n	80075be <vPortFree+0x62>
	__asm volatile
 80075a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ac:	f383 8811 	msr	BASEPRI, r3
 80075b0:	f3bf 8f6f 	isb	sy
 80075b4:	f3bf 8f4f 	dsb	sy
 80075b8:	60bb      	str	r3, [r7, #8]
}
 80075ba:	bf00      	nop
 80075bc:	e7fe      	b.n	80075bc <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	685a      	ldr	r2, [r3, #4]
 80075c2:	4b14      	ldr	r3, [pc, #80]	; (8007614 <vPortFree+0xb8>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4013      	ands	r3, r2
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d01e      	beq.n	800760a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d11a      	bne.n	800760a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	685a      	ldr	r2, [r3, #4]
 80075d8:	4b0e      	ldr	r3, [pc, #56]	; (8007614 <vPortFree+0xb8>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	43db      	mvns	r3, r3
 80075de:	401a      	ands	r2, r3
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80075e4:	f001 fe22 	bl	800922c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	685a      	ldr	r2, [r3, #4]
 80075ec:	4b0a      	ldr	r3, [pc, #40]	; (8007618 <vPortFree+0xbc>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4413      	add	r3, r2
 80075f2:	4a09      	ldr	r2, [pc, #36]	; (8007618 <vPortFree+0xbc>)
 80075f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80075f6:	6938      	ldr	r0, [r7, #16]
 80075f8:	f000 f874 	bl	80076e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80075fc:	4b07      	ldr	r3, [pc, #28]	; (800761c <vPortFree+0xc0>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	3301      	adds	r3, #1
 8007602:	4a06      	ldr	r2, [pc, #24]	; (800761c <vPortFree+0xc0>)
 8007604:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007606:	f001 fe1f 	bl	8009248 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800760a:	bf00      	nop
 800760c:	3718      	adds	r7, #24
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	24009e08 	.word	0x24009e08
 8007618:	24009df8 	.word	0x24009df8
 800761c:	24009e04 	.word	0x24009e04

08007620 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800762a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800762c:	4b27      	ldr	r3, [pc, #156]	; (80076cc <prvHeapInit+0xac>)
 800762e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f003 0307 	and.w	r3, r3, #7
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00c      	beq.n	8007654 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	3307      	adds	r3, #7
 800763e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f023 0307 	bic.w	r3, r3, #7
 8007646:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	4a1f      	ldr	r2, [pc, #124]	; (80076cc <prvHeapInit+0xac>)
 8007650:	4413      	add	r3, r2
 8007652:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007658:	4a1d      	ldr	r2, [pc, #116]	; (80076d0 <prvHeapInit+0xb0>)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800765e:	4b1c      	ldr	r3, [pc, #112]	; (80076d0 <prvHeapInit+0xb0>)
 8007660:	2200      	movs	r2, #0
 8007662:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	4413      	add	r3, r2
 800766a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800766c:	2208      	movs	r2, #8
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	1a9b      	subs	r3, r3, r2
 8007672:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f023 0307 	bic.w	r3, r3, #7
 800767a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	4a15      	ldr	r2, [pc, #84]	; (80076d4 <prvHeapInit+0xb4>)
 8007680:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007682:	4b14      	ldr	r3, [pc, #80]	; (80076d4 <prvHeapInit+0xb4>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2200      	movs	r2, #0
 8007688:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800768a:	4b12      	ldr	r3, [pc, #72]	; (80076d4 <prvHeapInit+0xb4>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2200      	movs	r2, #0
 8007690:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	1ad2      	subs	r2, r2, r3
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076a0:	4b0c      	ldr	r3, [pc, #48]	; (80076d4 <prvHeapInit+0xb4>)
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	4a0a      	ldr	r2, [pc, #40]	; (80076d8 <prvHeapInit+0xb8>)
 80076ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	4a09      	ldr	r2, [pc, #36]	; (80076dc <prvHeapInit+0xbc>)
 80076b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80076b8:	4b09      	ldr	r3, [pc, #36]	; (80076e0 <prvHeapInit+0xc0>)
 80076ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80076be:	601a      	str	r2, [r3, #0]
}
 80076c0:	bf00      	nop
 80076c2:	3714      	adds	r7, #20
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr
 80076cc:	24001dec 	.word	0x24001dec
 80076d0:	24009dec 	.word	0x24009dec
 80076d4:	24009df4 	.word	0x24009df4
 80076d8:	24009dfc 	.word	0x24009dfc
 80076dc:	24009df8 	.word	0x24009df8
 80076e0:	24009e08 	.word	0x24009e08

080076e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80076e4:	b480      	push	{r7}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80076ec:	4b28      	ldr	r3, [pc, #160]	; (8007790 <prvInsertBlockIntoFreeList+0xac>)
 80076ee:	60fb      	str	r3, [r7, #12]
 80076f0:	e002      	b.n	80076f8 <prvInsertBlockIntoFreeList+0x14>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	60fb      	str	r3, [r7, #12]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d8f7      	bhi.n	80076f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	4413      	add	r3, r2
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	429a      	cmp	r2, r3
 8007712:	d108      	bne.n	8007726 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	685a      	ldr	r2, [r3, #4]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	441a      	add	r2, r3
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	441a      	add	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	429a      	cmp	r2, r3
 8007738:	d118      	bne.n	800776c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	4b15      	ldr	r3, [pc, #84]	; (8007794 <prvInsertBlockIntoFreeList+0xb0>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	429a      	cmp	r2, r3
 8007744:	d00d      	beq.n	8007762 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	685a      	ldr	r2, [r3, #4]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	441a      	add	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	601a      	str	r2, [r3, #0]
 8007760:	e008      	b.n	8007774 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007762:	4b0c      	ldr	r3, [pc, #48]	; (8007794 <prvInsertBlockIntoFreeList+0xb0>)
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	601a      	str	r2, [r3, #0]
 800776a:	e003      	b.n	8007774 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	429a      	cmp	r2, r3
 800777a:	d002      	beq.n	8007782 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007782:	bf00      	nop
 8007784:	3714      	adds	r7, #20
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	24009dec 	.word	0x24009dec
 8007794:	24009df4 	.word	0x24009df4

08007798 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f103 0208 	add.w	r2, r3, #8
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f04f 32ff 	mov.w	r2, #4294967295
 80077b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f103 0208 	add.w	r2, r3, #8
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f103 0208 	add.w	r2, r3, #8
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80077cc:	bf00      	nop
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80077e6:	bf00      	nop
 80077e8:	370c      	adds	r7, #12
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr

080077f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077f2:	b480      	push	{r7}
 80077f4:	b085      	sub	sp, #20
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
 80077fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	689a      	ldr	r2, [r3, #8]
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	683a      	ldr	r2, [r7, #0]
 8007816:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	683a      	ldr	r2, [r7, #0]
 800781c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	1c5a      	adds	r2, r3, #1
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	601a      	str	r2, [r3, #0]
}
 800782e:	bf00      	nop
 8007830:	3714      	adds	r7, #20
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800783a:	b480      	push	{r7}
 800783c:	b085      	sub	sp, #20
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
 8007842:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007850:	d103      	bne.n	800785a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	60fb      	str	r3, [r7, #12]
 8007858:	e00c      	b.n	8007874 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	3308      	adds	r3, #8
 800785e:	60fb      	str	r3, [r7, #12]
 8007860:	e002      	b.n	8007868 <vListInsert+0x2e>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	60fb      	str	r3, [r7, #12]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68ba      	ldr	r2, [r7, #8]
 8007870:	429a      	cmp	r2, r3
 8007872:	d2f6      	bcs.n	8007862 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	683a      	ldr	r2, [r7, #0]
 8007882:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	683a      	ldr	r2, [r7, #0]
 800788e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	1c5a      	adds	r2, r3, #1
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	601a      	str	r2, [r3, #0]
}
 80078a0:	bf00      	nop
 80078a2:	3714      	adds	r7, #20
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	691b      	ldr	r3, [r3, #16]
 80078b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	6892      	ldr	r2, [r2, #8]
 80078c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	6852      	ldr	r2, [r2, #4]
 80078cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d103      	bne.n	80078e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	689a      	ldr	r2, [r3, #8]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	1e5a      	subs	r2, r3, #1
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007900:	b480      	push	{r7}
 8007902:	b085      	sub	sp, #20
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	3b04      	subs	r3, #4
 8007910:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007918:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	3b04      	subs	r3, #4
 800791e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	f023 0201 	bic.w	r2, r3, #1
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	3b04      	subs	r3, #4
 800792e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007930:	4a0c      	ldr	r2, [pc, #48]	; (8007964 <pxPortInitialiseStack+0x64>)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	3b14      	subs	r3, #20
 800793a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	3b04      	subs	r3, #4
 8007946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f06f 0202 	mvn.w	r2, #2
 800794e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	3b20      	subs	r3, #32
 8007954:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007956:	68fb      	ldr	r3, [r7, #12]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3714      	adds	r7, #20
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr
 8007964:	08007969 	.word	0x08007969

08007968 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800796e:	2300      	movs	r3, #0
 8007970:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007972:	4b12      	ldr	r3, [pc, #72]	; (80079bc <prvTaskExitError+0x54>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797a:	d00a      	beq.n	8007992 <prvTaskExitError+0x2a>
	__asm volatile
 800797c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007980:	f383 8811 	msr	BASEPRI, r3
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	f3bf 8f4f 	dsb	sy
 800798c:	60fb      	str	r3, [r7, #12]
}
 800798e:	bf00      	nop
 8007990:	e7fe      	b.n	8007990 <prvTaskExitError+0x28>
	__asm volatile
 8007992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007996:	f383 8811 	msr	BASEPRI, r3
 800799a:	f3bf 8f6f 	isb	sy
 800799e:	f3bf 8f4f 	dsb	sy
 80079a2:	60bb      	str	r3, [r7, #8]
}
 80079a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80079a6:	bf00      	nop
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d0fc      	beq.n	80079a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80079ae:	bf00      	nop
 80079b0:	bf00      	nop
 80079b2:	3714      	adds	r7, #20
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	2400000c 	.word	0x2400000c

080079c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80079c0:	4b07      	ldr	r3, [pc, #28]	; (80079e0 <pxCurrentTCBConst2>)
 80079c2:	6819      	ldr	r1, [r3, #0]
 80079c4:	6808      	ldr	r0, [r1, #0]
 80079c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ca:	f380 8809 	msr	PSP, r0
 80079ce:	f3bf 8f6f 	isb	sy
 80079d2:	f04f 0000 	mov.w	r0, #0
 80079d6:	f380 8811 	msr	BASEPRI, r0
 80079da:	4770      	bx	lr
 80079dc:	f3af 8000 	nop.w

080079e0 <pxCurrentTCBConst2>:
 80079e0:	24009e54 	.word	0x24009e54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80079e4:	bf00      	nop
 80079e6:	bf00      	nop

080079e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80079e8:	4808      	ldr	r0, [pc, #32]	; (8007a0c <prvPortStartFirstTask+0x24>)
 80079ea:	6800      	ldr	r0, [r0, #0]
 80079ec:	6800      	ldr	r0, [r0, #0]
 80079ee:	f380 8808 	msr	MSP, r0
 80079f2:	f04f 0000 	mov.w	r0, #0
 80079f6:	f380 8814 	msr	CONTROL, r0
 80079fa:	b662      	cpsie	i
 80079fc:	b661      	cpsie	f
 80079fe:	f3bf 8f4f 	dsb	sy
 8007a02:	f3bf 8f6f 	isb	sy
 8007a06:	df00      	svc	0
 8007a08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a0a:	bf00      	nop
 8007a0c:	e000ed08 	.word	0xe000ed08

08007a10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007a16:	4b46      	ldr	r3, [pc, #280]	; (8007b30 <xPortStartScheduler+0x120>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a46      	ldr	r2, [pc, #280]	; (8007b34 <xPortStartScheduler+0x124>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d10a      	bne.n	8007a36 <xPortStartScheduler+0x26>
	__asm volatile
 8007a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a24:	f383 8811 	msr	BASEPRI, r3
 8007a28:	f3bf 8f6f 	isb	sy
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	613b      	str	r3, [r7, #16]
}
 8007a32:	bf00      	nop
 8007a34:	e7fe      	b.n	8007a34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007a36:	4b3e      	ldr	r3, [pc, #248]	; (8007b30 <xPortStartScheduler+0x120>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a3f      	ldr	r2, [pc, #252]	; (8007b38 <xPortStartScheduler+0x128>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d10a      	bne.n	8007a56 <xPortStartScheduler+0x46>
	__asm volatile
 8007a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	60fb      	str	r3, [r7, #12]
}
 8007a52:	bf00      	nop
 8007a54:	e7fe      	b.n	8007a54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a56:	4b39      	ldr	r3, [pc, #228]	; (8007b3c <xPortStartScheduler+0x12c>)
 8007a58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	22ff      	movs	r2, #255	; 0xff
 8007a66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a70:	78fb      	ldrb	r3, [r7, #3]
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	4b31      	ldr	r3, [pc, #196]	; (8007b40 <xPortStartScheduler+0x130>)
 8007a7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a7e:	4b31      	ldr	r3, [pc, #196]	; (8007b44 <xPortStartScheduler+0x134>)
 8007a80:	2207      	movs	r2, #7
 8007a82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a84:	e009      	b.n	8007a9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007a86:	4b2f      	ldr	r3, [pc, #188]	; (8007b44 <xPortStartScheduler+0x134>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	4a2d      	ldr	r2, [pc, #180]	; (8007b44 <xPortStartScheduler+0x134>)
 8007a8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a90:	78fb      	ldrb	r3, [r7, #3]
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	005b      	lsls	r3, r3, #1
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a9a:	78fb      	ldrb	r3, [r7, #3]
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aa2:	2b80      	cmp	r3, #128	; 0x80
 8007aa4:	d0ef      	beq.n	8007a86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007aa6:	4b27      	ldr	r3, [pc, #156]	; (8007b44 <xPortStartScheduler+0x134>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f1c3 0307 	rsb	r3, r3, #7
 8007aae:	2b04      	cmp	r3, #4
 8007ab0:	d00a      	beq.n	8007ac8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab6:	f383 8811 	msr	BASEPRI, r3
 8007aba:	f3bf 8f6f 	isb	sy
 8007abe:	f3bf 8f4f 	dsb	sy
 8007ac2:	60bb      	str	r3, [r7, #8]
}
 8007ac4:	bf00      	nop
 8007ac6:	e7fe      	b.n	8007ac6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ac8:	4b1e      	ldr	r3, [pc, #120]	; (8007b44 <xPortStartScheduler+0x134>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	021b      	lsls	r3, r3, #8
 8007ace:	4a1d      	ldr	r2, [pc, #116]	; (8007b44 <xPortStartScheduler+0x134>)
 8007ad0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ad2:	4b1c      	ldr	r3, [pc, #112]	; (8007b44 <xPortStartScheduler+0x134>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ada:	4a1a      	ldr	r2, [pc, #104]	; (8007b44 <xPortStartScheduler+0x134>)
 8007adc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	b2da      	uxtb	r2, r3
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ae6:	4b18      	ldr	r3, [pc, #96]	; (8007b48 <xPortStartScheduler+0x138>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a17      	ldr	r2, [pc, #92]	; (8007b48 <xPortStartScheduler+0x138>)
 8007aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007af0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007af2:	4b15      	ldr	r3, [pc, #84]	; (8007b48 <xPortStartScheduler+0x138>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a14      	ldr	r2, [pc, #80]	; (8007b48 <xPortStartScheduler+0x138>)
 8007af8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007afc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007afe:	f000 f8dd 	bl	8007cbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b02:	4b12      	ldr	r3, [pc, #72]	; (8007b4c <xPortStartScheduler+0x13c>)
 8007b04:	2200      	movs	r2, #0
 8007b06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b08:	f000 f8fc 	bl	8007d04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b0c:	4b10      	ldr	r3, [pc, #64]	; (8007b50 <xPortStartScheduler+0x140>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a0f      	ldr	r2, [pc, #60]	; (8007b50 <xPortStartScheduler+0x140>)
 8007b12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007b16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b18:	f7ff ff66 	bl	80079e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b1c:	f001 fcfc 	bl	8009518 <vTaskSwitchContext>
	prvTaskExitError();
 8007b20:	f7ff ff22 	bl	8007968 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3718      	adds	r7, #24
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	e000ed00 	.word	0xe000ed00
 8007b34:	410fc271 	.word	0x410fc271
 8007b38:	410fc270 	.word	0x410fc270
 8007b3c:	e000e400 	.word	0xe000e400
 8007b40:	24009e0c 	.word	0x24009e0c
 8007b44:	24009e10 	.word	0x24009e10
 8007b48:	e000ed20 	.word	0xe000ed20
 8007b4c:	2400000c 	.word	0x2400000c
 8007b50:	e000ef34 	.word	0xe000ef34

08007b54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
	__asm volatile
 8007b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	607b      	str	r3, [r7, #4]
}
 8007b6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b6e:	4b0f      	ldr	r3, [pc, #60]	; (8007bac <vPortEnterCritical+0x58>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	3301      	adds	r3, #1
 8007b74:	4a0d      	ldr	r2, [pc, #52]	; (8007bac <vPortEnterCritical+0x58>)
 8007b76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b78:	4b0c      	ldr	r3, [pc, #48]	; (8007bac <vPortEnterCritical+0x58>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d10f      	bne.n	8007ba0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b80:	4b0b      	ldr	r3, [pc, #44]	; (8007bb0 <vPortEnterCritical+0x5c>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00a      	beq.n	8007ba0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8e:	f383 8811 	msr	BASEPRI, r3
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	603b      	str	r3, [r7, #0]
}
 8007b9c:	bf00      	nop
 8007b9e:	e7fe      	b.n	8007b9e <vPortEnterCritical+0x4a>
	}
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr
 8007bac:	2400000c 	.word	0x2400000c
 8007bb0:	e000ed04 	.word	0xe000ed04

08007bb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007bba:	4b12      	ldr	r3, [pc, #72]	; (8007c04 <vPortExitCritical+0x50>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10a      	bne.n	8007bd8 <vPortExitCritical+0x24>
	__asm volatile
 8007bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc6:	f383 8811 	msr	BASEPRI, r3
 8007bca:	f3bf 8f6f 	isb	sy
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	607b      	str	r3, [r7, #4]
}
 8007bd4:	bf00      	nop
 8007bd6:	e7fe      	b.n	8007bd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007bd8:	4b0a      	ldr	r3, [pc, #40]	; (8007c04 <vPortExitCritical+0x50>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	4a09      	ldr	r2, [pc, #36]	; (8007c04 <vPortExitCritical+0x50>)
 8007be0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007be2:	4b08      	ldr	r3, [pc, #32]	; (8007c04 <vPortExitCritical+0x50>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d105      	bne.n	8007bf6 <vPortExitCritical+0x42>
 8007bea:	2300      	movs	r3, #0
 8007bec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007bf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007bf6:	bf00      	nop
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	2400000c 	.word	0x2400000c
	...

08007c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c10:	f3ef 8009 	mrs	r0, PSP
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	4b15      	ldr	r3, [pc, #84]	; (8007c70 <pxCurrentTCBConst>)
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	f01e 0f10 	tst.w	lr, #16
 8007c20:	bf08      	it	eq
 8007c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c2a:	6010      	str	r0, [r2, #0]
 8007c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c34:	f380 8811 	msr	BASEPRI, r0
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	f3bf 8f6f 	isb	sy
 8007c40:	f001 fc6a 	bl	8009518 <vTaskSwitchContext>
 8007c44:	f04f 0000 	mov.w	r0, #0
 8007c48:	f380 8811 	msr	BASEPRI, r0
 8007c4c:	bc09      	pop	{r0, r3}
 8007c4e:	6819      	ldr	r1, [r3, #0]
 8007c50:	6808      	ldr	r0, [r1, #0]
 8007c52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c56:	f01e 0f10 	tst.w	lr, #16
 8007c5a:	bf08      	it	eq
 8007c5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c60:	f380 8809 	msr	PSP, r0
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	f3af 8000 	nop.w

08007c70 <pxCurrentTCBConst>:
 8007c70:	24009e54 	.word	0x24009e54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c74:	bf00      	nop
 8007c76:	bf00      	nop

08007c78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	607b      	str	r3, [r7, #4]
}
 8007c90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c92:	f001 fb87 	bl	80093a4 <xTaskIncrementTick>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d003      	beq.n	8007ca4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c9c:	4b06      	ldr	r3, [pc, #24]	; (8007cb8 <xPortSysTickHandler+0x40>)
 8007c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	f383 8811 	msr	BASEPRI, r3
}
 8007cae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007cb0:	bf00      	nop
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	e000ed04 	.word	0xe000ed04

08007cbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007cc0:	4b0b      	ldr	r3, [pc, #44]	; (8007cf0 <vPortSetupTimerInterrupt+0x34>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007cc6:	4b0b      	ldr	r3, [pc, #44]	; (8007cf4 <vPortSetupTimerInterrupt+0x38>)
 8007cc8:	2200      	movs	r2, #0
 8007cca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007ccc:	4b0a      	ldr	r3, [pc, #40]	; (8007cf8 <vPortSetupTimerInterrupt+0x3c>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a0a      	ldr	r2, [pc, #40]	; (8007cfc <vPortSetupTimerInterrupt+0x40>)
 8007cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd6:	099b      	lsrs	r3, r3, #6
 8007cd8:	4a09      	ldr	r2, [pc, #36]	; (8007d00 <vPortSetupTimerInterrupt+0x44>)
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007cde:	4b04      	ldr	r3, [pc, #16]	; (8007cf0 <vPortSetupTimerInterrupt+0x34>)
 8007ce0:	2207      	movs	r2, #7
 8007ce2:	601a      	str	r2, [r3, #0]
}
 8007ce4:	bf00      	nop
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	e000e010 	.word	0xe000e010
 8007cf4:	e000e018 	.word	0xe000e018
 8007cf8:	24000010 	.word	0x24000010
 8007cfc:	10624dd3 	.word	0x10624dd3
 8007d00:	e000e014 	.word	0xe000e014

08007d04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007d14 <vPortEnableVFP+0x10>
 8007d08:	6801      	ldr	r1, [r0, #0]
 8007d0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007d0e:	6001      	str	r1, [r0, #0]
 8007d10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d12:	bf00      	nop
 8007d14:	e000ed88 	.word	0xe000ed88

08007d18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007d18:	b480      	push	{r7}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d1e:	f3ef 8305 	mrs	r3, IPSR
 8007d22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2b0f      	cmp	r3, #15
 8007d28:	d914      	bls.n	8007d54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d2a:	4a17      	ldr	r2, [pc, #92]	; (8007d88 <vPortValidateInterruptPriority+0x70>)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	4413      	add	r3, r2
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d34:	4b15      	ldr	r3, [pc, #84]	; (8007d8c <vPortValidateInterruptPriority+0x74>)
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	7afa      	ldrb	r2, [r7, #11]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d20a      	bcs.n	8007d54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	607b      	str	r3, [r7, #4]
}
 8007d50:	bf00      	nop
 8007d52:	e7fe      	b.n	8007d52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d54:	4b0e      	ldr	r3, [pc, #56]	; (8007d90 <vPortValidateInterruptPriority+0x78>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d5c:	4b0d      	ldr	r3, [pc, #52]	; (8007d94 <vPortValidateInterruptPriority+0x7c>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d90a      	bls.n	8007d7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d68:	f383 8811 	msr	BASEPRI, r3
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	603b      	str	r3, [r7, #0]
}
 8007d76:	bf00      	nop
 8007d78:	e7fe      	b.n	8007d78 <vPortValidateInterruptPriority+0x60>
	}
 8007d7a:	bf00      	nop
 8007d7c:	3714      	adds	r7, #20
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	e000e3f0 	.word	0xe000e3f0
 8007d8c:	24009e0c 	.word	0x24009e0c
 8007d90:	e000ed0c 	.word	0xe000ed0c
 8007d94:	24009e10 	.word	0x24009e10

08007d98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10a      	bne.n	8007dc2 <xQueueGenericReset+0x2a>
	__asm volatile
 8007dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db0:	f383 8811 	msr	BASEPRI, r3
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	60bb      	str	r3, [r7, #8]
}
 8007dbe:	bf00      	nop
 8007dc0:	e7fe      	b.n	8007dc0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007dc2:	f7ff fec7 	bl	8007b54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dce:	68f9      	ldr	r1, [r7, #12]
 8007dd0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007dd2:	fb01 f303 	mul.w	r3, r1, r3
 8007dd6:	441a      	add	r2, r3
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2200      	movs	r2, #0
 8007de0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007df2:	3b01      	subs	r3, #1
 8007df4:	68f9      	ldr	r1, [r7, #12]
 8007df6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007df8:	fb01 f303 	mul.w	r3, r1, r3
 8007dfc:	441a      	add	r2, r3
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	22ff      	movs	r2, #255	; 0xff
 8007e06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	22ff      	movs	r2, #255	; 0xff
 8007e0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d114      	bne.n	8007e42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d01a      	beq.n	8007e56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	3310      	adds	r3, #16
 8007e24:	4618      	mov	r0, r3
 8007e26:	f001 fc25 	bl	8009674 <xTaskRemoveFromEventList>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d012      	beq.n	8007e56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007e30:	4b0c      	ldr	r3, [pc, #48]	; (8007e64 <xQueueGenericReset+0xcc>)
 8007e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e36:	601a      	str	r2, [r3, #0]
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	e009      	b.n	8007e56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	3310      	adds	r3, #16
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7ff fca6 	bl	8007798 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	3324      	adds	r3, #36	; 0x24
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7ff fca1 	bl	8007798 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007e56:	f7ff fead 	bl	8007bb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007e5a:	2301      	movs	r3, #1
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	e000ed04 	.word	0xe000ed04

08007e68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b08e      	sub	sp, #56	; 0x38
 8007e6c:	af02      	add	r7, sp, #8
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
 8007e74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10a      	bne.n	8007e92 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e80:	f383 8811 	msr	BASEPRI, r3
 8007e84:	f3bf 8f6f 	isb	sy
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e8e:	bf00      	nop
 8007e90:	e7fe      	b.n	8007e90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d10a      	bne.n	8007eae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9c:	f383 8811 	msr	BASEPRI, r3
 8007ea0:	f3bf 8f6f 	isb	sy
 8007ea4:	f3bf 8f4f 	dsb	sy
 8007ea8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007eaa:	bf00      	nop
 8007eac:	e7fe      	b.n	8007eac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d002      	beq.n	8007eba <xQueueGenericCreateStatic+0x52>
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d001      	beq.n	8007ebe <xQueueGenericCreateStatic+0x56>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e000      	b.n	8007ec0 <xQueueGenericCreateStatic+0x58>
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10a      	bne.n	8007eda <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec8:	f383 8811 	msr	BASEPRI, r3
 8007ecc:	f3bf 8f6f 	isb	sy
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	623b      	str	r3, [r7, #32]
}
 8007ed6:	bf00      	nop
 8007ed8:	e7fe      	b.n	8007ed8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d102      	bne.n	8007ee6 <xQueueGenericCreateStatic+0x7e>
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d101      	bne.n	8007eea <xQueueGenericCreateStatic+0x82>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e000      	b.n	8007eec <xQueueGenericCreateStatic+0x84>
 8007eea:	2300      	movs	r3, #0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10a      	bne.n	8007f06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef4:	f383 8811 	msr	BASEPRI, r3
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	61fb      	str	r3, [r7, #28]
}
 8007f02:	bf00      	nop
 8007f04:	e7fe      	b.n	8007f04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007f06:	2350      	movs	r3, #80	; 0x50
 8007f08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	2b50      	cmp	r3, #80	; 0x50
 8007f0e:	d00a      	beq.n	8007f26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	61bb      	str	r3, [r7, #24]
}
 8007f22:	bf00      	nop
 8007f24:	e7fe      	b.n	8007f24 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007f26:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00d      	beq.n	8007f4e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	4613      	mov	r3, r2
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	68b9      	ldr	r1, [r7, #8]
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f000 f83f 	bl	8007fcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3730      	adds	r7, #48	; 0x30
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b08a      	sub	sp, #40	; 0x28
 8007f5c:	af02      	add	r7, sp, #8
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	4613      	mov	r3, r2
 8007f64:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d10a      	bne.n	8007f82 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f70:	f383 8811 	msr	BASEPRI, r3
 8007f74:	f3bf 8f6f 	isb	sy
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	613b      	str	r3, [r7, #16]
}
 8007f7e:	bf00      	nop
 8007f80:	e7fe      	b.n	8007f80 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	68ba      	ldr	r2, [r7, #8]
 8007f86:	fb02 f303 	mul.w	r3, r2, r3
 8007f8a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	3350      	adds	r3, #80	; 0x50
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7ff fa17 	bl	80073c4 <pvPortMalloc>
 8007f96:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d011      	beq.n	8007fc2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	3350      	adds	r3, #80	; 0x50
 8007fa6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007fb0:	79fa      	ldrb	r2, [r7, #7]
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	9300      	str	r3, [sp, #0]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	697a      	ldr	r2, [r7, #20]
 8007fba:	68b9      	ldr	r1, [r7, #8]
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f000 f805 	bl	8007fcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007fc2:	69bb      	ldr	r3, [r7, #24]
	}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3720      	adds	r7, #32
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	607a      	str	r2, [r7, #4]
 8007fd8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d103      	bne.n	8007fe8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	69ba      	ldr	r2, [r7, #24]
 8007fe4:	601a      	str	r2, [r3, #0]
 8007fe6:	e002      	b.n	8007fee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ffa:	2101      	movs	r1, #1
 8007ffc:	69b8      	ldr	r0, [r7, #24]
 8007ffe:	f7ff fecb 	bl	8007d98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	78fa      	ldrb	r2, [r7, #3]
 8008006:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800800a:	bf00      	nop
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008012:	b580      	push	{r7, lr}
 8008014:	b08a      	sub	sp, #40	; 0x28
 8008016:	af02      	add	r7, sp, #8
 8008018:	60f8      	str	r0, [r7, #12]
 800801a:	60b9      	str	r1, [r7, #8]
 800801c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d10a      	bne.n	800803a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008028:	f383 8811 	msr	BASEPRI, r3
 800802c:	f3bf 8f6f 	isb	sy
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	61bb      	str	r3, [r7, #24]
}
 8008036:	bf00      	nop
 8008038:	e7fe      	b.n	8008038 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800803a:	68ba      	ldr	r2, [r7, #8]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	429a      	cmp	r2, r3
 8008040:	d90a      	bls.n	8008058 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008046:	f383 8811 	msr	BASEPRI, r3
 800804a:	f3bf 8f6f 	isb	sy
 800804e:	f3bf 8f4f 	dsb	sy
 8008052:	617b      	str	r3, [r7, #20]
}
 8008054:	bf00      	nop
 8008056:	e7fe      	b.n	8008056 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008058:	2302      	movs	r3, #2
 800805a:	9300      	str	r3, [sp, #0]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	2100      	movs	r1, #0
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	f7ff ff00 	bl	8007e68 <xQueueGenericCreateStatic>
 8008068:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d002      	beq.n	8008076 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008076:	69fb      	ldr	r3, [r7, #28]
	}
 8008078:	4618      	mov	r0, r3
 800807a:	3720      	adds	r7, #32
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d10a      	bne.n	80080a6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008094:	f383 8811 	msr	BASEPRI, r3
 8008098:	f3bf 8f6f 	isb	sy
 800809c:	f3bf 8f4f 	dsb	sy
 80080a0:	613b      	str	r3, [r7, #16]
}
 80080a2:	bf00      	nop
 80080a4:	e7fe      	b.n	80080a4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80080a6:	683a      	ldr	r2, [r7, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d90a      	bls.n	80080c4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80080ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	60fb      	str	r3, [r7, #12]
}
 80080c0:	bf00      	nop
 80080c2:	e7fe      	b.n	80080c2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80080c4:	2202      	movs	r2, #2
 80080c6:	2100      	movs	r1, #0
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f7ff ff45 	bl	8007f58 <xQueueGenericCreate>
 80080ce:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d002      	beq.n	80080dc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	683a      	ldr	r2, [r7, #0]
 80080da:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80080dc:	697b      	ldr	r3, [r7, #20]
	}
 80080de:	4618      	mov	r0, r3
 80080e0:	3718      	adds	r7, #24
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
	...

080080e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b08e      	sub	sp, #56	; 0x38
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	607a      	str	r2, [r7, #4]
 80080f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80080f6:	2300      	movs	r3, #0
 80080f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80080fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10a      	bne.n	800811a <xQueueGenericSend+0x32>
	__asm volatile
 8008104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008116:	bf00      	nop
 8008118:	e7fe      	b.n	8008118 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d103      	bne.n	8008128 <xQueueGenericSend+0x40>
 8008120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008124:	2b00      	cmp	r3, #0
 8008126:	d101      	bne.n	800812c <xQueueGenericSend+0x44>
 8008128:	2301      	movs	r3, #1
 800812a:	e000      	b.n	800812e <xQueueGenericSend+0x46>
 800812c:	2300      	movs	r3, #0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10a      	bne.n	8008148 <xQueueGenericSend+0x60>
	__asm volatile
 8008132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008136:	f383 8811 	msr	BASEPRI, r3
 800813a:	f3bf 8f6f 	isb	sy
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008144:	bf00      	nop
 8008146:	e7fe      	b.n	8008146 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	2b02      	cmp	r3, #2
 800814c:	d103      	bne.n	8008156 <xQueueGenericSend+0x6e>
 800814e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008152:	2b01      	cmp	r3, #1
 8008154:	d101      	bne.n	800815a <xQueueGenericSend+0x72>
 8008156:	2301      	movs	r3, #1
 8008158:	e000      	b.n	800815c <xQueueGenericSend+0x74>
 800815a:	2300      	movs	r3, #0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d10a      	bne.n	8008176 <xQueueGenericSend+0x8e>
	__asm volatile
 8008160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	623b      	str	r3, [r7, #32]
}
 8008172:	bf00      	nop
 8008174:	e7fe      	b.n	8008174 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008176:	f001 fc3b 	bl	80099f0 <xTaskGetSchedulerState>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d102      	bne.n	8008186 <xQueueGenericSend+0x9e>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d101      	bne.n	800818a <xQueueGenericSend+0xa2>
 8008186:	2301      	movs	r3, #1
 8008188:	e000      	b.n	800818c <xQueueGenericSend+0xa4>
 800818a:	2300      	movs	r3, #0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d10a      	bne.n	80081a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8008190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008194:	f383 8811 	msr	BASEPRI, r3
 8008198:	f3bf 8f6f 	isb	sy
 800819c:	f3bf 8f4f 	dsb	sy
 80081a0:	61fb      	str	r3, [r7, #28]
}
 80081a2:	bf00      	nop
 80081a4:	e7fe      	b.n	80081a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80081a6:	f7ff fcd5 	bl	8007b54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d302      	bcc.n	80081bc <xQueueGenericSend+0xd4>
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d129      	bne.n	8008210 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081bc:	683a      	ldr	r2, [r7, #0]
 80081be:	68b9      	ldr	r1, [r7, #8]
 80081c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081c2:	f000 fc5e 	bl	8008a82 <prvCopyDataToQueue>
 80081c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d010      	beq.n	80081f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d2:	3324      	adds	r3, #36	; 0x24
 80081d4:	4618      	mov	r0, r3
 80081d6:	f001 fa4d 	bl	8009674 <xTaskRemoveFromEventList>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d013      	beq.n	8008208 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80081e0:	4b3f      	ldr	r3, [pc, #252]	; (80082e0 <xQueueGenericSend+0x1f8>)
 80081e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	e00a      	b.n	8008208 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80081f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d007      	beq.n	8008208 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80081f8:	4b39      	ldr	r3, [pc, #228]	; (80082e0 <xQueueGenericSend+0x1f8>)
 80081fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081fe:	601a      	str	r2, [r3, #0]
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008208:	f7ff fcd4 	bl	8007bb4 <vPortExitCritical>
				return pdPASS;
 800820c:	2301      	movs	r3, #1
 800820e:	e063      	b.n	80082d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d103      	bne.n	800821e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008216:	f7ff fccd 	bl	8007bb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800821a:	2300      	movs	r3, #0
 800821c:	e05c      	b.n	80082d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800821e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008220:	2b00      	cmp	r3, #0
 8008222:	d106      	bne.n	8008232 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008224:	f107 0314 	add.w	r3, r7, #20
 8008228:	4618      	mov	r0, r3
 800822a:	f001 fa87 	bl	800973c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800822e:	2301      	movs	r3, #1
 8008230:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008232:	f7ff fcbf 	bl	8007bb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008236:	f000 fff9 	bl	800922c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800823a:	f7ff fc8b 	bl	8007b54 <vPortEnterCritical>
 800823e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008240:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008244:	b25b      	sxtb	r3, r3
 8008246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800824a:	d103      	bne.n	8008254 <xQueueGenericSend+0x16c>
 800824c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824e:	2200      	movs	r2, #0
 8008250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008256:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800825a:	b25b      	sxtb	r3, r3
 800825c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008260:	d103      	bne.n	800826a <xQueueGenericSend+0x182>
 8008262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008264:	2200      	movs	r2, #0
 8008266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800826a:	f7ff fca3 	bl	8007bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800826e:	1d3a      	adds	r2, r7, #4
 8008270:	f107 0314 	add.w	r3, r7, #20
 8008274:	4611      	mov	r1, r2
 8008276:	4618      	mov	r0, r3
 8008278:	f001 fa76 	bl	8009768 <xTaskCheckForTimeOut>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d124      	bne.n	80082cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008282:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008284:	f000 fcf5 	bl	8008c72 <prvIsQueueFull>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d018      	beq.n	80082c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800828e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008290:	3310      	adds	r3, #16
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	4611      	mov	r1, r2
 8008296:	4618      	mov	r0, r3
 8008298:	f001 f99c 	bl	80095d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800829c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800829e:	f000 fc80 	bl	8008ba2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80082a2:	f000 ffd1 	bl	8009248 <xTaskResumeAll>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f47f af7c 	bne.w	80081a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80082ae:	4b0c      	ldr	r3, [pc, #48]	; (80082e0 <xQueueGenericSend+0x1f8>)
 80082b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082b4:	601a      	str	r2, [r3, #0]
 80082b6:	f3bf 8f4f 	dsb	sy
 80082ba:	f3bf 8f6f 	isb	sy
 80082be:	e772      	b.n	80081a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80082c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082c2:	f000 fc6e 	bl	8008ba2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082c6:	f000 ffbf 	bl	8009248 <xTaskResumeAll>
 80082ca:	e76c      	b.n	80081a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80082cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082ce:	f000 fc68 	bl	8008ba2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082d2:	f000 ffb9 	bl	8009248 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80082d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3738      	adds	r7, #56	; 0x38
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	e000ed04 	.word	0xe000ed04

080082e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b090      	sub	sp, #64	; 0x40
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	607a      	str	r2, [r7, #4]
 80082f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80082f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10a      	bne.n	8008312 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80082fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008300:	f383 8811 	msr	BASEPRI, r3
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	f3bf 8f4f 	dsb	sy
 800830c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800830e:	bf00      	nop
 8008310:	e7fe      	b.n	8008310 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d103      	bne.n	8008320 <xQueueGenericSendFromISR+0x3c>
 8008318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831c:	2b00      	cmp	r3, #0
 800831e:	d101      	bne.n	8008324 <xQueueGenericSendFromISR+0x40>
 8008320:	2301      	movs	r3, #1
 8008322:	e000      	b.n	8008326 <xQueueGenericSendFromISR+0x42>
 8008324:	2300      	movs	r3, #0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d10a      	bne.n	8008340 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800832a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832e:	f383 8811 	msr	BASEPRI, r3
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	f3bf 8f4f 	dsb	sy
 800833a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800833c:	bf00      	nop
 800833e:	e7fe      	b.n	800833e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	2b02      	cmp	r3, #2
 8008344:	d103      	bne.n	800834e <xQueueGenericSendFromISR+0x6a>
 8008346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800834a:	2b01      	cmp	r3, #1
 800834c:	d101      	bne.n	8008352 <xQueueGenericSendFromISR+0x6e>
 800834e:	2301      	movs	r3, #1
 8008350:	e000      	b.n	8008354 <xQueueGenericSendFromISR+0x70>
 8008352:	2300      	movs	r3, #0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d10a      	bne.n	800836e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835c:	f383 8811 	msr	BASEPRI, r3
 8008360:	f3bf 8f6f 	isb	sy
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	623b      	str	r3, [r7, #32]
}
 800836a:	bf00      	nop
 800836c:	e7fe      	b.n	800836c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800836e:	f7ff fcd3 	bl	8007d18 <vPortValidateInterruptPriority>
	__asm volatile
 8008372:	f3ef 8211 	mrs	r2, BASEPRI
 8008376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837a:	f383 8811 	msr	BASEPRI, r3
 800837e:	f3bf 8f6f 	isb	sy
 8008382:	f3bf 8f4f 	dsb	sy
 8008386:	61fa      	str	r2, [r7, #28]
 8008388:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800838a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800838c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800838e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008396:	429a      	cmp	r2, r3
 8008398:	d302      	bcc.n	80083a0 <xQueueGenericSendFromISR+0xbc>
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	2b02      	cmp	r3, #2
 800839e:	d12f      	bne.n	8008400 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80083a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083b0:	683a      	ldr	r2, [r7, #0]
 80083b2:	68b9      	ldr	r1, [r7, #8]
 80083b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80083b6:	f000 fb64 	bl	8008a82 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80083ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80083be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c2:	d112      	bne.n	80083ea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d016      	beq.n	80083fa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ce:	3324      	adds	r3, #36	; 0x24
 80083d0:	4618      	mov	r0, r3
 80083d2:	f001 f94f 	bl	8009674 <xTaskRemoveFromEventList>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00e      	beq.n	80083fa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00b      	beq.n	80083fa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2201      	movs	r2, #1
 80083e6:	601a      	str	r2, [r3, #0]
 80083e8:	e007      	b.n	80083fa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80083ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80083ee:	3301      	adds	r3, #1
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	b25a      	sxtb	r2, r3
 80083f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80083fa:	2301      	movs	r3, #1
 80083fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80083fe:	e001      	b.n	8008404 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008400:	2300      	movs	r3, #0
 8008402:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008406:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	f383 8811 	msr	BASEPRI, r3
}
 800840e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008412:	4618      	mov	r0, r3
 8008414:	3740      	adds	r7, #64	; 0x40
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}

0800841a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800841a:	b580      	push	{r7, lr}
 800841c:	b08e      	sub	sp, #56	; 0x38
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
 8008422:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842a:	2b00      	cmp	r3, #0
 800842c:	d10a      	bne.n	8008444 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800842e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008432:	f383 8811 	msr	BASEPRI, r3
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	623b      	str	r3, [r7, #32]
}
 8008440:	bf00      	nop
 8008442:	e7fe      	b.n	8008442 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00a      	beq.n	8008462 <xQueueGiveFromISR+0x48>
	__asm volatile
 800844c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008450:	f383 8811 	msr	BASEPRI, r3
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	61fb      	str	r3, [r7, #28]
}
 800845e:	bf00      	nop
 8008460:	e7fe      	b.n	8008460 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d103      	bne.n	8008472 <xQueueGiveFromISR+0x58>
 800846a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d101      	bne.n	8008476 <xQueueGiveFromISR+0x5c>
 8008472:	2301      	movs	r3, #1
 8008474:	e000      	b.n	8008478 <xQueueGiveFromISR+0x5e>
 8008476:	2300      	movs	r3, #0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d10a      	bne.n	8008492 <xQueueGiveFromISR+0x78>
	__asm volatile
 800847c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008480:	f383 8811 	msr	BASEPRI, r3
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	61bb      	str	r3, [r7, #24]
}
 800848e:	bf00      	nop
 8008490:	e7fe      	b.n	8008490 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008492:	f7ff fc41 	bl	8007d18 <vPortValidateInterruptPriority>
	__asm volatile
 8008496:	f3ef 8211 	mrs	r2, BASEPRI
 800849a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849e:	f383 8811 	msr	BASEPRI, r3
 80084a2:	f3bf 8f6f 	isb	sy
 80084a6:	f3bf 8f4f 	dsb	sy
 80084aa:	617a      	str	r2, [r7, #20]
 80084ac:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80084ae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80084b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80084b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084be:	429a      	cmp	r2, r3
 80084c0:	d22b      	bcs.n	800851a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80084c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80084cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ce:	1c5a      	adds	r2, r3, #1
 80084d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80084d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80084d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084dc:	d112      	bne.n	8008504 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d016      	beq.n	8008514 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e8:	3324      	adds	r3, #36	; 0x24
 80084ea:	4618      	mov	r0, r3
 80084ec:	f001 f8c2 	bl	8009674 <xTaskRemoveFromEventList>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00e      	beq.n	8008514 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00b      	beq.n	8008514 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	2201      	movs	r2, #1
 8008500:	601a      	str	r2, [r3, #0]
 8008502:	e007      	b.n	8008514 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008508:	3301      	adds	r3, #1
 800850a:	b2db      	uxtb	r3, r3
 800850c:	b25a      	sxtb	r2, r3
 800850e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008514:	2301      	movs	r3, #1
 8008516:	637b      	str	r3, [r7, #52]	; 0x34
 8008518:	e001      	b.n	800851e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800851a:	2300      	movs	r3, #0
 800851c:	637b      	str	r3, [r7, #52]	; 0x34
 800851e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008520:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f383 8811 	msr	BASEPRI, r3
}
 8008528:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800852a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800852c:	4618      	mov	r0, r3
 800852e:	3738      	adds	r7, #56	; 0x38
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b08c      	sub	sp, #48	; 0x30
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008540:	2300      	movs	r3, #0
 8008542:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10a      	bne.n	8008564 <xQueueReceive+0x30>
	__asm volatile
 800854e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008552:	f383 8811 	msr	BASEPRI, r3
 8008556:	f3bf 8f6f 	isb	sy
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	623b      	str	r3, [r7, #32]
}
 8008560:	bf00      	nop
 8008562:	e7fe      	b.n	8008562 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d103      	bne.n	8008572 <xQueueReceive+0x3e>
 800856a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856e:	2b00      	cmp	r3, #0
 8008570:	d101      	bne.n	8008576 <xQueueReceive+0x42>
 8008572:	2301      	movs	r3, #1
 8008574:	e000      	b.n	8008578 <xQueueReceive+0x44>
 8008576:	2300      	movs	r3, #0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d10a      	bne.n	8008592 <xQueueReceive+0x5e>
	__asm volatile
 800857c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008580:	f383 8811 	msr	BASEPRI, r3
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	f3bf 8f4f 	dsb	sy
 800858c:	61fb      	str	r3, [r7, #28]
}
 800858e:	bf00      	nop
 8008590:	e7fe      	b.n	8008590 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008592:	f001 fa2d 	bl	80099f0 <xTaskGetSchedulerState>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d102      	bne.n	80085a2 <xQueueReceive+0x6e>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d101      	bne.n	80085a6 <xQueueReceive+0x72>
 80085a2:	2301      	movs	r3, #1
 80085a4:	e000      	b.n	80085a8 <xQueueReceive+0x74>
 80085a6:	2300      	movs	r3, #0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d10a      	bne.n	80085c2 <xQueueReceive+0x8e>
	__asm volatile
 80085ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b0:	f383 8811 	msr	BASEPRI, r3
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	61bb      	str	r3, [r7, #24]
}
 80085be:	bf00      	nop
 80085c0:	e7fe      	b.n	80085c0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80085c2:	f7ff fac7 	bl	8007b54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d01f      	beq.n	8008612 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80085d2:	68b9      	ldr	r1, [r7, #8]
 80085d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085d6:	f000 fabe 	bl	8008b56 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	1e5a      	subs	r2, r3, #1
 80085de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00f      	beq.n	800860a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ec:	3310      	adds	r3, #16
 80085ee:	4618      	mov	r0, r3
 80085f0:	f001 f840 	bl	8009674 <xTaskRemoveFromEventList>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d007      	beq.n	800860a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80085fa:	4b3d      	ldr	r3, [pc, #244]	; (80086f0 <xQueueReceive+0x1bc>)
 80085fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008600:	601a      	str	r2, [r3, #0]
 8008602:	f3bf 8f4f 	dsb	sy
 8008606:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800860a:	f7ff fad3 	bl	8007bb4 <vPortExitCritical>
				return pdPASS;
 800860e:	2301      	movs	r3, #1
 8008610:	e069      	b.n	80086e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d103      	bne.n	8008620 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008618:	f7ff facc 	bl	8007bb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800861c:	2300      	movs	r3, #0
 800861e:	e062      	b.n	80086e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008622:	2b00      	cmp	r3, #0
 8008624:	d106      	bne.n	8008634 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008626:	f107 0310 	add.w	r3, r7, #16
 800862a:	4618      	mov	r0, r3
 800862c:	f001 f886 	bl	800973c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008630:	2301      	movs	r3, #1
 8008632:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008634:	f7ff fabe 	bl	8007bb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008638:	f000 fdf8 	bl	800922c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800863c:	f7ff fa8a 	bl	8007b54 <vPortEnterCritical>
 8008640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008642:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008646:	b25b      	sxtb	r3, r3
 8008648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800864c:	d103      	bne.n	8008656 <xQueueReceive+0x122>
 800864e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008650:	2200      	movs	r2, #0
 8008652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008658:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800865c:	b25b      	sxtb	r3, r3
 800865e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008662:	d103      	bne.n	800866c <xQueueReceive+0x138>
 8008664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008666:	2200      	movs	r2, #0
 8008668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800866c:	f7ff faa2 	bl	8007bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008670:	1d3a      	adds	r2, r7, #4
 8008672:	f107 0310 	add.w	r3, r7, #16
 8008676:	4611      	mov	r1, r2
 8008678:	4618      	mov	r0, r3
 800867a:	f001 f875 	bl	8009768 <xTaskCheckForTimeOut>
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d123      	bne.n	80086cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008684:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008686:	f000 fade 	bl	8008c46 <prvIsQueueEmpty>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d017      	beq.n	80086c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008692:	3324      	adds	r3, #36	; 0x24
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	4611      	mov	r1, r2
 8008698:	4618      	mov	r0, r3
 800869a:	f000 ff9b 	bl	80095d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800869e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086a0:	f000 fa7f 	bl	8008ba2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80086a4:	f000 fdd0 	bl	8009248 <xTaskResumeAll>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d189      	bne.n	80085c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80086ae:	4b10      	ldr	r3, [pc, #64]	; (80086f0 <xQueueReceive+0x1bc>)
 80086b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086b4:	601a      	str	r2, [r3, #0]
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	f3bf 8f6f 	isb	sy
 80086be:	e780      	b.n	80085c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80086c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086c2:	f000 fa6e 	bl	8008ba2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086c6:	f000 fdbf 	bl	8009248 <xTaskResumeAll>
 80086ca:	e77a      	b.n	80085c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80086cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086ce:	f000 fa68 	bl	8008ba2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086d2:	f000 fdb9 	bl	8009248 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086d8:	f000 fab5 	bl	8008c46 <prvIsQueueEmpty>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f43f af6f 	beq.w	80085c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80086e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3730      	adds	r7, #48	; 0x30
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	e000ed04 	.word	0xe000ed04

080086f4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b08e      	sub	sp, #56	; 0x38
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80086fe:	2300      	movs	r3, #0
 8008700:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008706:	2300      	movs	r3, #0
 8008708:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800870a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800870c:	2b00      	cmp	r3, #0
 800870e:	d10a      	bne.n	8008726 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008714:	f383 8811 	msr	BASEPRI, r3
 8008718:	f3bf 8f6f 	isb	sy
 800871c:	f3bf 8f4f 	dsb	sy
 8008720:	623b      	str	r3, [r7, #32]
}
 8008722:	bf00      	nop
 8008724:	e7fe      	b.n	8008724 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00a      	beq.n	8008744 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800872e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008732:	f383 8811 	msr	BASEPRI, r3
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	61fb      	str	r3, [r7, #28]
}
 8008740:	bf00      	nop
 8008742:	e7fe      	b.n	8008742 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008744:	f001 f954 	bl	80099f0 <xTaskGetSchedulerState>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d102      	bne.n	8008754 <xQueueSemaphoreTake+0x60>
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d101      	bne.n	8008758 <xQueueSemaphoreTake+0x64>
 8008754:	2301      	movs	r3, #1
 8008756:	e000      	b.n	800875a <xQueueSemaphoreTake+0x66>
 8008758:	2300      	movs	r3, #0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d10a      	bne.n	8008774 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800875e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008762:	f383 8811 	msr	BASEPRI, r3
 8008766:	f3bf 8f6f 	isb	sy
 800876a:	f3bf 8f4f 	dsb	sy
 800876e:	61bb      	str	r3, [r7, #24]
}
 8008770:	bf00      	nop
 8008772:	e7fe      	b.n	8008772 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008774:	f7ff f9ee 	bl	8007b54 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800877c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800877e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008780:	2b00      	cmp	r3, #0
 8008782:	d024      	beq.n	80087ce <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008786:	1e5a      	subs	r2, r3, #1
 8008788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800878a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800878c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d104      	bne.n	800879e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008794:	f001 faa2 	bl	8009cdc <pvTaskIncrementMutexHeldCount>
 8008798:	4602      	mov	r2, r0
 800879a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800879c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800879e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00f      	beq.n	80087c6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a8:	3310      	adds	r3, #16
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 ff62 	bl	8009674 <xTaskRemoveFromEventList>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d007      	beq.n	80087c6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80087b6:	4b54      	ldr	r3, [pc, #336]	; (8008908 <xQueueSemaphoreTake+0x214>)
 80087b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087bc:	601a      	str	r2, [r3, #0]
 80087be:	f3bf 8f4f 	dsb	sy
 80087c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80087c6:	f7ff f9f5 	bl	8007bb4 <vPortExitCritical>
				return pdPASS;
 80087ca:	2301      	movs	r3, #1
 80087cc:	e097      	b.n	80088fe <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d111      	bne.n	80087f8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80087d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00a      	beq.n	80087f0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80087da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087de:	f383 8811 	msr	BASEPRI, r3
 80087e2:	f3bf 8f6f 	isb	sy
 80087e6:	f3bf 8f4f 	dsb	sy
 80087ea:	617b      	str	r3, [r7, #20]
}
 80087ec:	bf00      	nop
 80087ee:	e7fe      	b.n	80087ee <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80087f0:	f7ff f9e0 	bl	8007bb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80087f4:	2300      	movs	r3, #0
 80087f6:	e082      	b.n	80088fe <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80087f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d106      	bne.n	800880c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087fe:	f107 030c 	add.w	r3, r7, #12
 8008802:	4618      	mov	r0, r3
 8008804:	f000 ff9a 	bl	800973c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008808:	2301      	movs	r3, #1
 800880a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800880c:	f7ff f9d2 	bl	8007bb4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008810:	f000 fd0c 	bl	800922c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008814:	f7ff f99e 	bl	8007b54 <vPortEnterCritical>
 8008818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800881e:	b25b      	sxtb	r3, r3
 8008820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008824:	d103      	bne.n	800882e <xQueueSemaphoreTake+0x13a>
 8008826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008828:	2200      	movs	r2, #0
 800882a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800882e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008830:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008834:	b25b      	sxtb	r3, r3
 8008836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800883a:	d103      	bne.n	8008844 <xQueueSemaphoreTake+0x150>
 800883c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883e:	2200      	movs	r2, #0
 8008840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008844:	f7ff f9b6 	bl	8007bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008848:	463a      	mov	r2, r7
 800884a:	f107 030c 	add.w	r3, r7, #12
 800884e:	4611      	mov	r1, r2
 8008850:	4618      	mov	r0, r3
 8008852:	f000 ff89 	bl	8009768 <xTaskCheckForTimeOut>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d132      	bne.n	80088c2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800885c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800885e:	f000 f9f2 	bl	8008c46 <prvIsQueueEmpty>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d026      	beq.n	80088b6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d109      	bne.n	8008884 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008870:	f7ff f970 	bl	8007b54 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	4618      	mov	r0, r3
 800887a:	f001 f8d7 	bl	8009a2c <xTaskPriorityInherit>
 800887e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008880:	f7ff f998 	bl	8007bb4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008886:	3324      	adds	r3, #36	; 0x24
 8008888:	683a      	ldr	r2, [r7, #0]
 800888a:	4611      	mov	r1, r2
 800888c:	4618      	mov	r0, r3
 800888e:	f000 fea1 	bl	80095d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008892:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008894:	f000 f985 	bl	8008ba2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008898:	f000 fcd6 	bl	8009248 <xTaskResumeAll>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f47f af68 	bne.w	8008774 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80088a4:	4b18      	ldr	r3, [pc, #96]	; (8008908 <xQueueSemaphoreTake+0x214>)
 80088a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088aa:	601a      	str	r2, [r3, #0]
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	f3bf 8f6f 	isb	sy
 80088b4:	e75e      	b.n	8008774 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80088b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80088b8:	f000 f973 	bl	8008ba2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088bc:	f000 fcc4 	bl	8009248 <xTaskResumeAll>
 80088c0:	e758      	b.n	8008774 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80088c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80088c4:	f000 f96d 	bl	8008ba2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80088c8:	f000 fcbe 	bl	8009248 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80088ce:	f000 f9ba 	bl	8008c46 <prvIsQueueEmpty>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f43f af4d 	beq.w	8008774 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80088da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00d      	beq.n	80088fc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80088e0:	f7ff f938 	bl	8007b54 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80088e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80088e6:	f000 f8b4 	bl	8008a52 <prvGetDisinheritPriorityAfterTimeout>
 80088ea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80088ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088f2:	4618      	mov	r0, r3
 80088f4:	f001 f970 	bl	8009bd8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80088f8:	f7ff f95c 	bl	8007bb4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80088fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3738      	adds	r7, #56	; 0x38
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	e000ed04 	.word	0xe000ed04

0800890c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b08e      	sub	sp, #56	; 0x38
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800891c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891e:	2b00      	cmp	r3, #0
 8008920:	d10a      	bne.n	8008938 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008926:	f383 8811 	msr	BASEPRI, r3
 800892a:	f3bf 8f6f 	isb	sy
 800892e:	f3bf 8f4f 	dsb	sy
 8008932:	623b      	str	r3, [r7, #32]
}
 8008934:	bf00      	nop
 8008936:	e7fe      	b.n	8008936 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d103      	bne.n	8008946 <xQueueReceiveFromISR+0x3a>
 800893e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008942:	2b00      	cmp	r3, #0
 8008944:	d101      	bne.n	800894a <xQueueReceiveFromISR+0x3e>
 8008946:	2301      	movs	r3, #1
 8008948:	e000      	b.n	800894c <xQueueReceiveFromISR+0x40>
 800894a:	2300      	movs	r3, #0
 800894c:	2b00      	cmp	r3, #0
 800894e:	d10a      	bne.n	8008966 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008954:	f383 8811 	msr	BASEPRI, r3
 8008958:	f3bf 8f6f 	isb	sy
 800895c:	f3bf 8f4f 	dsb	sy
 8008960:	61fb      	str	r3, [r7, #28]
}
 8008962:	bf00      	nop
 8008964:	e7fe      	b.n	8008964 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008966:	f7ff f9d7 	bl	8007d18 <vPortValidateInterruptPriority>
	__asm volatile
 800896a:	f3ef 8211 	mrs	r2, BASEPRI
 800896e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008972:	f383 8811 	msr	BASEPRI, r3
 8008976:	f3bf 8f6f 	isb	sy
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	61ba      	str	r2, [r7, #24]
 8008980:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008982:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008984:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800898c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898e:	2b00      	cmp	r3, #0
 8008990:	d02f      	beq.n	80089f2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008994:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800899c:	68b9      	ldr	r1, [r7, #8]
 800899e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089a0:	f000 f8d9 	bl	8008b56 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80089a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a6:	1e5a      	subs	r2, r3, #1
 80089a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089aa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80089ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80089b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b4:	d112      	bne.n	80089dc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d016      	beq.n	80089ec <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c0:	3310      	adds	r3, #16
 80089c2:	4618      	mov	r0, r3
 80089c4:	f000 fe56 	bl	8009674 <xTaskRemoveFromEventList>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00e      	beq.n	80089ec <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00b      	beq.n	80089ec <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	601a      	str	r2, [r3, #0]
 80089da:	e007      	b.n	80089ec <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80089dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089e0:	3301      	adds	r3, #1
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	b25a      	sxtb	r2, r3
 80089e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80089ec:	2301      	movs	r3, #1
 80089ee:	637b      	str	r3, [r7, #52]	; 0x34
 80089f0:	e001      	b.n	80089f6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80089f2:	2300      	movs	r3, #0
 80089f4:	637b      	str	r3, [r7, #52]	; 0x34
 80089f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	f383 8811 	msr	BASEPRI, r3
}
 8008a00:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3738      	adds	r7, #56	; 0x38
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d10a      	bne.n	8008a34 <vQueueDelete+0x28>
	__asm volatile
 8008a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	60bb      	str	r3, [r7, #8]
}
 8008a30:	bf00      	nop
 8008a32:	e7fe      	b.n	8008a32 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f000 f95f 	bl	8008cf8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d102      	bne.n	8008a4a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	f7fe fd89 	bl	800755c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008a4a:	bf00      	nop
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008a52:	b480      	push	{r7}
 8008a54:	b085      	sub	sp, #20
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d006      	beq.n	8008a70 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008a6c:	60fb      	str	r3, [r7, #12]
 8008a6e:	e001      	b.n	8008a74 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008a70:	2300      	movs	r3, #0
 8008a72:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008a74:	68fb      	ldr	r3, [r7, #12]
	}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3714      	adds	r7, #20
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr

08008a82 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b086      	sub	sp, #24
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	60f8      	str	r0, [r7, #12]
 8008a8a:	60b9      	str	r1, [r7, #8]
 8008a8c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a96:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d10d      	bne.n	8008abc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d14d      	bne.n	8008b44 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	4618      	mov	r0, r3
 8008aae:	f001 f825 	bl	8009afc <xTaskPriorityDisinherit>
 8008ab2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	609a      	str	r2, [r3, #8]
 8008aba:	e043      	b.n	8008b44 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d119      	bne.n	8008af6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6858      	ldr	r0, [r3, #4]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aca:	461a      	mov	r2, r3
 8008acc:	68b9      	ldr	r1, [r7, #8]
 8008ace:	f01c faa3 	bl	8025018 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	685a      	ldr	r2, [r3, #4]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ada:	441a      	add	r2, r3
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	685a      	ldr	r2, [r3, #4]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d32b      	bcc.n	8008b44 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	605a      	str	r2, [r3, #4]
 8008af4:	e026      	b.n	8008b44 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	68d8      	ldr	r0, [r3, #12]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008afe:	461a      	mov	r2, r3
 8008b00:	68b9      	ldr	r1, [r7, #8]
 8008b02:	f01c fa89 	bl	8025018 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	68da      	ldr	r2, [r3, #12]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0e:	425b      	negs	r3, r3
 8008b10:	441a      	add	r2, r3
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	68da      	ldr	r2, [r3, #12]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d207      	bcs.n	8008b32 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	689a      	ldr	r2, [r3, #8]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b2a:	425b      	negs	r3, r3
 8008b2c:	441a      	add	r2, r3
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2b02      	cmp	r3, #2
 8008b36:	d105      	bne.n	8008b44 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d002      	beq.n	8008b44 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	3b01      	subs	r3, #1
 8008b42:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	1c5a      	adds	r2, r3, #1
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008b4c:	697b      	ldr	r3, [r7, #20]
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3718      	adds	r7, #24
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b082      	sub	sp, #8
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
 8008b5e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d018      	beq.n	8008b9a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	68da      	ldr	r2, [r3, #12]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b70:	441a      	add	r2, r3
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	68da      	ldr	r2, [r3, #12]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d303      	bcc.n	8008b8a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	68d9      	ldr	r1, [r3, #12]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b92:	461a      	mov	r2, r3
 8008b94:	6838      	ldr	r0, [r7, #0]
 8008b96:	f01c fa3f 	bl	8025018 <memcpy>
	}
}
 8008b9a:	bf00      	nop
 8008b9c:	3708      	adds	r7, #8
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b084      	sub	sp, #16
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008baa:	f7fe ffd3 	bl	8007b54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bb4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008bb6:	e011      	b.n	8008bdc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d012      	beq.n	8008be6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	3324      	adds	r3, #36	; 0x24
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f000 fd55 	bl	8009674 <xTaskRemoveFromEventList>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d001      	beq.n	8008bd4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008bd0:	f000 fe2c 	bl	800982c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008bdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	dce9      	bgt.n	8008bb8 <prvUnlockQueue+0x16>
 8008be4:	e000      	b.n	8008be8 <prvUnlockQueue+0x46>
					break;
 8008be6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	22ff      	movs	r2, #255	; 0xff
 8008bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008bf0:	f7fe ffe0 	bl	8007bb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008bf4:	f7fe ffae 	bl	8007b54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bfe:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c00:	e011      	b.n	8008c26 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	691b      	ldr	r3, [r3, #16]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d012      	beq.n	8008c30 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	3310      	adds	r3, #16
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f000 fd30 	bl	8009674 <xTaskRemoveFromEventList>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d001      	beq.n	8008c1e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008c1a:	f000 fe07 	bl	800982c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008c1e:	7bbb      	ldrb	r3, [r7, #14]
 8008c20:	3b01      	subs	r3, #1
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	dce9      	bgt.n	8008c02 <prvUnlockQueue+0x60>
 8008c2e:	e000      	b.n	8008c32 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008c30:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	22ff      	movs	r2, #255	; 0xff
 8008c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008c3a:	f7fe ffbb 	bl	8007bb4 <vPortExitCritical>
}
 8008c3e:	bf00      	nop
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b084      	sub	sp, #16
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c4e:	f7fe ff81 	bl	8007b54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d102      	bne.n	8008c60 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	60fb      	str	r3, [r7, #12]
 8008c5e:	e001      	b.n	8008c64 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008c60:	2300      	movs	r3, #0
 8008c62:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c64:	f7fe ffa6 	bl	8007bb4 <vPortExitCritical>

	return xReturn;
 8008c68:	68fb      	ldr	r3, [r7, #12]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b084      	sub	sp, #16
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c7a:	f7fe ff6b 	bl	8007b54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d102      	bne.n	8008c90 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	60fb      	str	r3, [r7, #12]
 8008c8e:	e001      	b.n	8008c94 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008c90:	2300      	movs	r3, #0
 8008c92:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c94:	f7fe ff8e 	bl	8007bb4 <vPortExitCritical>

	return xReturn;
 8008c98:	68fb      	ldr	r3, [r7, #12]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
	...

08008ca4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008cae:	2300      	movs	r3, #0
 8008cb0:	60fb      	str	r3, [r7, #12]
 8008cb2:	e014      	b.n	8008cde <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008cb4:	4a0f      	ldr	r2, [pc, #60]	; (8008cf4 <vQueueAddToRegistry+0x50>)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d10b      	bne.n	8008cd8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008cc0:	490c      	ldr	r1, [pc, #48]	; (8008cf4 <vQueueAddToRegistry+0x50>)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	683a      	ldr	r2, [r7, #0]
 8008cc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008cca:	4a0a      	ldr	r2, [pc, #40]	; (8008cf4 <vQueueAddToRegistry+0x50>)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	00db      	lsls	r3, r3, #3
 8008cd0:	4413      	add	r3, r2
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008cd6:	e006      	b.n	8008ce6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	60fb      	str	r3, [r7, #12]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2b07      	cmp	r3, #7
 8008ce2:	d9e7      	bls.n	8008cb4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ce4:	bf00      	nop
 8008ce6:	bf00      	nop
 8008ce8:	3714      	adds	r7, #20
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	24009e14 	.word	0x24009e14

08008cf8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d00:	2300      	movs	r3, #0
 8008d02:	60fb      	str	r3, [r7, #12]
 8008d04:	e016      	b.n	8008d34 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008d06:	4a10      	ldr	r2, [pc, #64]	; (8008d48 <vQueueUnregisterQueue+0x50>)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	00db      	lsls	r3, r3, #3
 8008d0c:	4413      	add	r3, r2
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d10b      	bne.n	8008d2e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008d16:	4a0c      	ldr	r2, [pc, #48]	; (8008d48 <vQueueUnregisterQueue+0x50>)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008d20:	4a09      	ldr	r2, [pc, #36]	; (8008d48 <vQueueUnregisterQueue+0x50>)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	00db      	lsls	r3, r3, #3
 8008d26:	4413      	add	r3, r2
 8008d28:	2200      	movs	r2, #0
 8008d2a:	605a      	str	r2, [r3, #4]
				break;
 8008d2c:	e006      	b.n	8008d3c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	3301      	adds	r3, #1
 8008d32:	60fb      	str	r3, [r7, #12]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2b07      	cmp	r3, #7
 8008d38:	d9e5      	bls.n	8008d06 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008d3a:	bf00      	nop
 8008d3c:	bf00      	nop
 8008d3e:	3714      	adds	r7, #20
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr
 8008d48:	24009e14 	.word	0x24009e14

08008d4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b086      	sub	sp, #24
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008d5c:	f7fe fefa 	bl	8007b54 <vPortEnterCritical>
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d66:	b25b      	sxtb	r3, r3
 8008d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d6c:	d103      	bne.n	8008d76 <vQueueWaitForMessageRestricted+0x2a>
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d7c:	b25b      	sxtb	r3, r3
 8008d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d82:	d103      	bne.n	8008d8c <vQueueWaitForMessageRestricted+0x40>
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d8c:	f7fe ff12 	bl	8007bb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d106      	bne.n	8008da6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	3324      	adds	r3, #36	; 0x24
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	68b9      	ldr	r1, [r7, #8]
 8008da0:	4618      	mov	r0, r3
 8008da2:	f000 fc3b 	bl	800961c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008da6:	6978      	ldr	r0, [r7, #20]
 8008da8:	f7ff fefb 	bl	8008ba2 <prvUnlockQueue>
	}
 8008dac:	bf00      	nop
 8008dae:	3718      	adds	r7, #24
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b08e      	sub	sp, #56	; 0x38
 8008db8:	af04      	add	r7, sp, #16
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	607a      	str	r2, [r7, #4]
 8008dc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10a      	bne.n	8008dde <xTaskCreateStatic+0x2a>
	__asm volatile
 8008dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dcc:	f383 8811 	msr	BASEPRI, r3
 8008dd0:	f3bf 8f6f 	isb	sy
 8008dd4:	f3bf 8f4f 	dsb	sy
 8008dd8:	623b      	str	r3, [r7, #32]
}
 8008dda:	bf00      	nop
 8008ddc:	e7fe      	b.n	8008ddc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d10a      	bne.n	8008dfa <xTaskCreateStatic+0x46>
	__asm volatile
 8008de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de8:	f383 8811 	msr	BASEPRI, r3
 8008dec:	f3bf 8f6f 	isb	sy
 8008df0:	f3bf 8f4f 	dsb	sy
 8008df4:	61fb      	str	r3, [r7, #28]
}
 8008df6:	bf00      	nop
 8008df8:	e7fe      	b.n	8008df8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008dfa:	235c      	movs	r3, #92	; 0x5c
 8008dfc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	2b5c      	cmp	r3, #92	; 0x5c
 8008e02:	d00a      	beq.n	8008e1a <xTaskCreateStatic+0x66>
	__asm volatile
 8008e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e08:	f383 8811 	msr	BASEPRI, r3
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	f3bf 8f4f 	dsb	sy
 8008e14:	61bb      	str	r3, [r7, #24]
}
 8008e16:	bf00      	nop
 8008e18:	e7fe      	b.n	8008e18 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008e1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d01e      	beq.n	8008e60 <xTaskCreateStatic+0xac>
 8008e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d01b      	beq.n	8008e60 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e30:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e34:	2202      	movs	r2, #2
 8008e36:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	9303      	str	r3, [sp, #12]
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e40:	9302      	str	r3, [sp, #8]
 8008e42:	f107 0314 	add.w	r3, r7, #20
 8008e46:	9301      	str	r3, [sp, #4]
 8008e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4a:	9300      	str	r3, [sp, #0]
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	68b9      	ldr	r1, [r7, #8]
 8008e52:	68f8      	ldr	r0, [r7, #12]
 8008e54:	f000 f850 	bl	8008ef8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e5a:	f000 f8dd 	bl	8009018 <prvAddNewTaskToReadyList>
 8008e5e:	e001      	b.n	8008e64 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008e60:	2300      	movs	r3, #0
 8008e62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008e64:	697b      	ldr	r3, [r7, #20]
	}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3728      	adds	r7, #40	; 0x28
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b08c      	sub	sp, #48	; 0x30
 8008e72:	af04      	add	r7, sp, #16
 8008e74:	60f8      	str	r0, [r7, #12]
 8008e76:	60b9      	str	r1, [r7, #8]
 8008e78:	603b      	str	r3, [r7, #0]
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008e7e:	88fb      	ldrh	r3, [r7, #6]
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fe fa9e 	bl	80073c4 <pvPortMalloc>
 8008e88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00e      	beq.n	8008eae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008e90:	205c      	movs	r0, #92	; 0x5c
 8008e92:	f7fe fa97 	bl	80073c4 <pvPortMalloc>
 8008e96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d003      	beq.n	8008ea6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	697a      	ldr	r2, [r7, #20]
 8008ea2:	631a      	str	r2, [r3, #48]	; 0x30
 8008ea4:	e005      	b.n	8008eb2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008ea6:	6978      	ldr	r0, [r7, #20]
 8008ea8:	f7fe fb58 	bl	800755c <vPortFree>
 8008eac:	e001      	b.n	8008eb2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d017      	beq.n	8008ee8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ec0:	88fa      	ldrh	r2, [r7, #6]
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	9303      	str	r3, [sp, #12]
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	9302      	str	r3, [sp, #8]
 8008eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ecc:	9301      	str	r3, [sp, #4]
 8008ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed0:	9300      	str	r3, [sp, #0]
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	68b9      	ldr	r1, [r7, #8]
 8008ed6:	68f8      	ldr	r0, [r7, #12]
 8008ed8:	f000 f80e 	bl	8008ef8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008edc:	69f8      	ldr	r0, [r7, #28]
 8008ede:	f000 f89b 	bl	8009018 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	61bb      	str	r3, [r7, #24]
 8008ee6:	e002      	b.n	8008eee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8008eec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008eee:	69bb      	ldr	r3, [r7, #24]
	}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3720      	adds	r7, #32
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b088      	sub	sp, #32
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	607a      	str	r2, [r7, #4]
 8008f04:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f08:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	461a      	mov	r2, r3
 8008f10:	21a5      	movs	r1, #165	; 0xa5
 8008f12:	f01c f88f 	bl	8025034 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f1a:	6879      	ldr	r1, [r7, #4]
 8008f1c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008f20:	440b      	add	r3, r1
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	4413      	add	r3, r2
 8008f26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	f023 0307 	bic.w	r3, r3, #7
 8008f2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	f003 0307 	and.w	r3, r3, #7
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d00a      	beq.n	8008f50 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f3e:	f383 8811 	msr	BASEPRI, r3
 8008f42:	f3bf 8f6f 	isb	sy
 8008f46:	f3bf 8f4f 	dsb	sy
 8008f4a:	617b      	str	r3, [r7, #20]
}
 8008f4c:	bf00      	nop
 8008f4e:	e7fe      	b.n	8008f4e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d01f      	beq.n	8008f96 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f56:	2300      	movs	r3, #0
 8008f58:	61fb      	str	r3, [r7, #28]
 8008f5a:	e012      	b.n	8008f82 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	4413      	add	r3, r2
 8008f62:	7819      	ldrb	r1, [r3, #0]
 8008f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	4413      	add	r3, r2
 8008f6a:	3334      	adds	r3, #52	; 0x34
 8008f6c:	460a      	mov	r2, r1
 8008f6e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	4413      	add	r3, r2
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d006      	beq.n	8008f8a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	3301      	adds	r3, #1
 8008f80:	61fb      	str	r3, [r7, #28]
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	2b0f      	cmp	r3, #15
 8008f86:	d9e9      	bls.n	8008f5c <prvInitialiseNewTask+0x64>
 8008f88:	e000      	b.n	8008f8c <prvInitialiseNewTask+0x94>
			{
				break;
 8008f8a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f94:	e003      	b.n	8008f9e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa0:	2b37      	cmp	r3, #55	; 0x37
 8008fa2:	d901      	bls.n	8008fa8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008fa4:	2337      	movs	r3, #55	; 0x37
 8008fa6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008faa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fb2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fbc:	3304      	adds	r3, #4
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7fe fc0a 	bl	80077d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc6:	3318      	adds	r3, #24
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7fe fc05 	bl	80077d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fd2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fdc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fe2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fec:	2200      	movs	r2, #0
 8008fee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008ff2:	683a      	ldr	r2, [r7, #0]
 8008ff4:	68f9      	ldr	r1, [r7, #12]
 8008ff6:	69b8      	ldr	r0, [r7, #24]
 8008ff8:	f7fe fc82 	bl	8007900 <pxPortInitialiseStack>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009000:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009004:	2b00      	cmp	r3, #0
 8009006:	d002      	beq.n	800900e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800900c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800900e:	bf00      	nop
 8009010:	3720      	adds	r7, #32
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
	...

08009018 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009020:	f7fe fd98 	bl	8007b54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009024:	4b2d      	ldr	r3, [pc, #180]	; (80090dc <prvAddNewTaskToReadyList+0xc4>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	3301      	adds	r3, #1
 800902a:	4a2c      	ldr	r2, [pc, #176]	; (80090dc <prvAddNewTaskToReadyList+0xc4>)
 800902c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800902e:	4b2c      	ldr	r3, [pc, #176]	; (80090e0 <prvAddNewTaskToReadyList+0xc8>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d109      	bne.n	800904a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009036:	4a2a      	ldr	r2, [pc, #168]	; (80090e0 <prvAddNewTaskToReadyList+0xc8>)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800903c:	4b27      	ldr	r3, [pc, #156]	; (80090dc <prvAddNewTaskToReadyList+0xc4>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2b01      	cmp	r3, #1
 8009042:	d110      	bne.n	8009066 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009044:	f000 fc16 	bl	8009874 <prvInitialiseTaskLists>
 8009048:	e00d      	b.n	8009066 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800904a:	4b26      	ldr	r3, [pc, #152]	; (80090e4 <prvAddNewTaskToReadyList+0xcc>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d109      	bne.n	8009066 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009052:	4b23      	ldr	r3, [pc, #140]	; (80090e0 <prvAddNewTaskToReadyList+0xc8>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905c:	429a      	cmp	r2, r3
 800905e:	d802      	bhi.n	8009066 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009060:	4a1f      	ldr	r2, [pc, #124]	; (80090e0 <prvAddNewTaskToReadyList+0xc8>)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009066:	4b20      	ldr	r3, [pc, #128]	; (80090e8 <prvAddNewTaskToReadyList+0xd0>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	3301      	adds	r3, #1
 800906c:	4a1e      	ldr	r2, [pc, #120]	; (80090e8 <prvAddNewTaskToReadyList+0xd0>)
 800906e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009070:	4b1d      	ldr	r3, [pc, #116]	; (80090e8 <prvAddNewTaskToReadyList+0xd0>)
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800907c:	4b1b      	ldr	r3, [pc, #108]	; (80090ec <prvAddNewTaskToReadyList+0xd4>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	429a      	cmp	r2, r3
 8009082:	d903      	bls.n	800908c <prvAddNewTaskToReadyList+0x74>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009088:	4a18      	ldr	r2, [pc, #96]	; (80090ec <prvAddNewTaskToReadyList+0xd4>)
 800908a:	6013      	str	r3, [r2, #0]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009090:	4613      	mov	r3, r2
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	4413      	add	r3, r2
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	4a15      	ldr	r2, [pc, #84]	; (80090f0 <prvAddNewTaskToReadyList+0xd8>)
 800909a:	441a      	add	r2, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	3304      	adds	r3, #4
 80090a0:	4619      	mov	r1, r3
 80090a2:	4610      	mov	r0, r2
 80090a4:	f7fe fba5 	bl	80077f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80090a8:	f7fe fd84 	bl	8007bb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80090ac:	4b0d      	ldr	r3, [pc, #52]	; (80090e4 <prvAddNewTaskToReadyList+0xcc>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d00e      	beq.n	80090d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80090b4:	4b0a      	ldr	r3, [pc, #40]	; (80090e0 <prvAddNewTaskToReadyList+0xc8>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090be:	429a      	cmp	r2, r3
 80090c0:	d207      	bcs.n	80090d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80090c2:	4b0c      	ldr	r3, [pc, #48]	; (80090f4 <prvAddNewTaskToReadyList+0xdc>)
 80090c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090c8:	601a      	str	r2, [r3, #0]
 80090ca:	f3bf 8f4f 	dsb	sy
 80090ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090d2:	bf00      	nop
 80090d4:	3708      	adds	r7, #8
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	2400a328 	.word	0x2400a328
 80090e0:	24009e54 	.word	0x24009e54
 80090e4:	2400a334 	.word	0x2400a334
 80090e8:	2400a344 	.word	0x2400a344
 80090ec:	2400a330 	.word	0x2400a330
 80090f0:	24009e58 	.word	0x24009e58
 80090f4:	e000ed04 	.word	0xe000ed04

080090f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009100:	2300      	movs	r3, #0
 8009102:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d017      	beq.n	800913a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800910a:	4b13      	ldr	r3, [pc, #76]	; (8009158 <vTaskDelay+0x60>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d00a      	beq.n	8009128 <vTaskDelay+0x30>
	__asm volatile
 8009112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009116:	f383 8811 	msr	BASEPRI, r3
 800911a:	f3bf 8f6f 	isb	sy
 800911e:	f3bf 8f4f 	dsb	sy
 8009122:	60bb      	str	r3, [r7, #8]
}
 8009124:	bf00      	nop
 8009126:	e7fe      	b.n	8009126 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009128:	f000 f880 	bl	800922c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800912c:	2100      	movs	r1, #0
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 fde8 	bl	8009d04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009134:	f000 f888 	bl	8009248 <xTaskResumeAll>
 8009138:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d107      	bne.n	8009150 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009140:	4b06      	ldr	r3, [pc, #24]	; (800915c <vTaskDelay+0x64>)
 8009142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009146:	601a      	str	r2, [r3, #0]
 8009148:	f3bf 8f4f 	dsb	sy
 800914c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009150:	bf00      	nop
 8009152:	3710      	adds	r7, #16
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	2400a350 	.word	0x2400a350
 800915c:	e000ed04 	.word	0xe000ed04

08009160 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b08a      	sub	sp, #40	; 0x28
 8009164:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009166:	2300      	movs	r3, #0
 8009168:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800916a:	2300      	movs	r3, #0
 800916c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800916e:	463a      	mov	r2, r7
 8009170:	1d39      	adds	r1, r7, #4
 8009172:	f107 0308 	add.w	r3, r7, #8
 8009176:	4618      	mov	r0, r3
 8009178:	f7fe f8f0 	bl	800735c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800917c:	6839      	ldr	r1, [r7, #0]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	68ba      	ldr	r2, [r7, #8]
 8009182:	9202      	str	r2, [sp, #8]
 8009184:	9301      	str	r3, [sp, #4]
 8009186:	2300      	movs	r3, #0
 8009188:	9300      	str	r3, [sp, #0]
 800918a:	2300      	movs	r3, #0
 800918c:	460a      	mov	r2, r1
 800918e:	4921      	ldr	r1, [pc, #132]	; (8009214 <vTaskStartScheduler+0xb4>)
 8009190:	4821      	ldr	r0, [pc, #132]	; (8009218 <vTaskStartScheduler+0xb8>)
 8009192:	f7ff fe0f 	bl	8008db4 <xTaskCreateStatic>
 8009196:	4603      	mov	r3, r0
 8009198:	4a20      	ldr	r2, [pc, #128]	; (800921c <vTaskStartScheduler+0xbc>)
 800919a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800919c:	4b1f      	ldr	r3, [pc, #124]	; (800921c <vTaskStartScheduler+0xbc>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d002      	beq.n	80091aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80091a4:	2301      	movs	r3, #1
 80091a6:	617b      	str	r3, [r7, #20]
 80091a8:	e001      	b.n	80091ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80091aa:	2300      	movs	r3, #0
 80091ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d102      	bne.n	80091ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80091b4:	f000 fdfa 	bl	8009dac <xTimerCreateTimerTask>
 80091b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d116      	bne.n	80091ee <vTaskStartScheduler+0x8e>
	__asm volatile
 80091c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c4:	f383 8811 	msr	BASEPRI, r3
 80091c8:	f3bf 8f6f 	isb	sy
 80091cc:	f3bf 8f4f 	dsb	sy
 80091d0:	613b      	str	r3, [r7, #16]
}
 80091d2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80091d4:	4b12      	ldr	r3, [pc, #72]	; (8009220 <vTaskStartScheduler+0xc0>)
 80091d6:	f04f 32ff 	mov.w	r2, #4294967295
 80091da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80091dc:	4b11      	ldr	r3, [pc, #68]	; (8009224 <vTaskStartScheduler+0xc4>)
 80091de:	2201      	movs	r2, #1
 80091e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80091e2:	4b11      	ldr	r3, [pc, #68]	; (8009228 <vTaskStartScheduler+0xc8>)
 80091e4:	2200      	movs	r2, #0
 80091e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80091e8:	f7fe fc12 	bl	8007a10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80091ec:	e00e      	b.n	800920c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f4:	d10a      	bne.n	800920c <vTaskStartScheduler+0xac>
	__asm volatile
 80091f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fa:	f383 8811 	msr	BASEPRI, r3
 80091fe:	f3bf 8f6f 	isb	sy
 8009202:	f3bf 8f4f 	dsb	sy
 8009206:	60fb      	str	r3, [r7, #12]
}
 8009208:	bf00      	nop
 800920a:	e7fe      	b.n	800920a <vTaskStartScheduler+0xaa>
}
 800920c:	bf00      	nop
 800920e:	3718      	adds	r7, #24
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	08026d5c 	.word	0x08026d5c
 8009218:	08009845 	.word	0x08009845
 800921c:	2400a34c 	.word	0x2400a34c
 8009220:	2400a348 	.word	0x2400a348
 8009224:	2400a334 	.word	0x2400a334
 8009228:	2400a32c 	.word	0x2400a32c

0800922c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800922c:	b480      	push	{r7}
 800922e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009230:	4b04      	ldr	r3, [pc, #16]	; (8009244 <vTaskSuspendAll+0x18>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	3301      	adds	r3, #1
 8009236:	4a03      	ldr	r2, [pc, #12]	; (8009244 <vTaskSuspendAll+0x18>)
 8009238:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800923a:	bf00      	nop
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr
 8009244:	2400a350 	.word	0x2400a350

08009248 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800924e:	2300      	movs	r3, #0
 8009250:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009252:	2300      	movs	r3, #0
 8009254:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009256:	4b42      	ldr	r3, [pc, #264]	; (8009360 <xTaskResumeAll+0x118>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d10a      	bne.n	8009274 <xTaskResumeAll+0x2c>
	__asm volatile
 800925e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009262:	f383 8811 	msr	BASEPRI, r3
 8009266:	f3bf 8f6f 	isb	sy
 800926a:	f3bf 8f4f 	dsb	sy
 800926e:	603b      	str	r3, [r7, #0]
}
 8009270:	bf00      	nop
 8009272:	e7fe      	b.n	8009272 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009274:	f7fe fc6e 	bl	8007b54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009278:	4b39      	ldr	r3, [pc, #228]	; (8009360 <xTaskResumeAll+0x118>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	3b01      	subs	r3, #1
 800927e:	4a38      	ldr	r2, [pc, #224]	; (8009360 <xTaskResumeAll+0x118>)
 8009280:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009282:	4b37      	ldr	r3, [pc, #220]	; (8009360 <xTaskResumeAll+0x118>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d162      	bne.n	8009350 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800928a:	4b36      	ldr	r3, [pc, #216]	; (8009364 <xTaskResumeAll+0x11c>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d05e      	beq.n	8009350 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009292:	e02f      	b.n	80092f4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009294:	4b34      	ldr	r3, [pc, #208]	; (8009368 <xTaskResumeAll+0x120>)
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	3318      	adds	r3, #24
 80092a0:	4618      	mov	r0, r3
 80092a2:	f7fe fb03 	bl	80078ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	3304      	adds	r3, #4
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7fe fafe 	bl	80078ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b4:	4b2d      	ldr	r3, [pc, #180]	; (800936c <xTaskResumeAll+0x124>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d903      	bls.n	80092c4 <xTaskResumeAll+0x7c>
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c0:	4a2a      	ldr	r2, [pc, #168]	; (800936c <xTaskResumeAll+0x124>)
 80092c2:	6013      	str	r3, [r2, #0]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c8:	4613      	mov	r3, r2
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	4413      	add	r3, r2
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	4a27      	ldr	r2, [pc, #156]	; (8009370 <xTaskResumeAll+0x128>)
 80092d2:	441a      	add	r2, r3
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	3304      	adds	r3, #4
 80092d8:	4619      	mov	r1, r3
 80092da:	4610      	mov	r0, r2
 80092dc:	f7fe fa89 	bl	80077f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e4:	4b23      	ldr	r3, [pc, #140]	; (8009374 <xTaskResumeAll+0x12c>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d302      	bcc.n	80092f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80092ee:	4b22      	ldr	r3, [pc, #136]	; (8009378 <xTaskResumeAll+0x130>)
 80092f0:	2201      	movs	r2, #1
 80092f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092f4:	4b1c      	ldr	r3, [pc, #112]	; (8009368 <xTaskResumeAll+0x120>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d1cb      	bne.n	8009294 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d001      	beq.n	8009306 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009302:	f000 fb55 	bl	80099b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009306:	4b1d      	ldr	r3, [pc, #116]	; (800937c <xTaskResumeAll+0x134>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d010      	beq.n	8009334 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009312:	f000 f847 	bl	80093a4 <xTaskIncrementTick>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d002      	beq.n	8009322 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800931c:	4b16      	ldr	r3, [pc, #88]	; (8009378 <xTaskResumeAll+0x130>)
 800931e:	2201      	movs	r2, #1
 8009320:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	3b01      	subs	r3, #1
 8009326:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d1f1      	bne.n	8009312 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800932e:	4b13      	ldr	r3, [pc, #76]	; (800937c <xTaskResumeAll+0x134>)
 8009330:	2200      	movs	r2, #0
 8009332:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009334:	4b10      	ldr	r3, [pc, #64]	; (8009378 <xTaskResumeAll+0x130>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d009      	beq.n	8009350 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800933c:	2301      	movs	r3, #1
 800933e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009340:	4b0f      	ldr	r3, [pc, #60]	; (8009380 <xTaskResumeAll+0x138>)
 8009342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009346:	601a      	str	r2, [r3, #0]
 8009348:	f3bf 8f4f 	dsb	sy
 800934c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009350:	f7fe fc30 	bl	8007bb4 <vPortExitCritical>

	return xAlreadyYielded;
 8009354:	68bb      	ldr	r3, [r7, #8]
}
 8009356:	4618      	mov	r0, r3
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	2400a350 	.word	0x2400a350
 8009364:	2400a328 	.word	0x2400a328
 8009368:	2400a2e8 	.word	0x2400a2e8
 800936c:	2400a330 	.word	0x2400a330
 8009370:	24009e58 	.word	0x24009e58
 8009374:	24009e54 	.word	0x24009e54
 8009378:	2400a33c 	.word	0x2400a33c
 800937c:	2400a338 	.word	0x2400a338
 8009380:	e000ed04 	.word	0xe000ed04

08009384 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800938a:	4b05      	ldr	r3, [pc, #20]	; (80093a0 <xTaskGetTickCount+0x1c>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009390:	687b      	ldr	r3, [r7, #4]
}
 8009392:	4618      	mov	r0, r3
 8009394:	370c      	adds	r7, #12
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop
 80093a0:	2400a32c 	.word	0x2400a32c

080093a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b086      	sub	sp, #24
 80093a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80093aa:	2300      	movs	r3, #0
 80093ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093ae:	4b4f      	ldr	r3, [pc, #316]	; (80094ec <xTaskIncrementTick+0x148>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	f040 808f 	bne.w	80094d6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80093b8:	4b4d      	ldr	r3, [pc, #308]	; (80094f0 <xTaskIncrementTick+0x14c>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	3301      	adds	r3, #1
 80093be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80093c0:	4a4b      	ldr	r2, [pc, #300]	; (80094f0 <xTaskIncrementTick+0x14c>)
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d120      	bne.n	800940e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80093cc:	4b49      	ldr	r3, [pc, #292]	; (80094f4 <xTaskIncrementTick+0x150>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00a      	beq.n	80093ec <xTaskIncrementTick+0x48>
	__asm volatile
 80093d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093da:	f383 8811 	msr	BASEPRI, r3
 80093de:	f3bf 8f6f 	isb	sy
 80093e2:	f3bf 8f4f 	dsb	sy
 80093e6:	603b      	str	r3, [r7, #0]
}
 80093e8:	bf00      	nop
 80093ea:	e7fe      	b.n	80093ea <xTaskIncrementTick+0x46>
 80093ec:	4b41      	ldr	r3, [pc, #260]	; (80094f4 <xTaskIncrementTick+0x150>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	60fb      	str	r3, [r7, #12]
 80093f2:	4b41      	ldr	r3, [pc, #260]	; (80094f8 <xTaskIncrementTick+0x154>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a3f      	ldr	r2, [pc, #252]	; (80094f4 <xTaskIncrementTick+0x150>)
 80093f8:	6013      	str	r3, [r2, #0]
 80093fa:	4a3f      	ldr	r2, [pc, #252]	; (80094f8 <xTaskIncrementTick+0x154>)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6013      	str	r3, [r2, #0]
 8009400:	4b3e      	ldr	r3, [pc, #248]	; (80094fc <xTaskIncrementTick+0x158>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	3301      	adds	r3, #1
 8009406:	4a3d      	ldr	r2, [pc, #244]	; (80094fc <xTaskIncrementTick+0x158>)
 8009408:	6013      	str	r3, [r2, #0]
 800940a:	f000 fad1 	bl	80099b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800940e:	4b3c      	ldr	r3, [pc, #240]	; (8009500 <xTaskIncrementTick+0x15c>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	693a      	ldr	r2, [r7, #16]
 8009414:	429a      	cmp	r2, r3
 8009416:	d349      	bcc.n	80094ac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009418:	4b36      	ldr	r3, [pc, #216]	; (80094f4 <xTaskIncrementTick+0x150>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d104      	bne.n	800942c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009422:	4b37      	ldr	r3, [pc, #220]	; (8009500 <xTaskIncrementTick+0x15c>)
 8009424:	f04f 32ff 	mov.w	r2, #4294967295
 8009428:	601a      	str	r2, [r3, #0]
					break;
 800942a:	e03f      	b.n	80094ac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800942c:	4b31      	ldr	r3, [pc, #196]	; (80094f4 <xTaskIncrementTick+0x150>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800943c:	693a      	ldr	r2, [r7, #16]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	429a      	cmp	r2, r3
 8009442:	d203      	bcs.n	800944c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009444:	4a2e      	ldr	r2, [pc, #184]	; (8009500 <xTaskIncrementTick+0x15c>)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800944a:	e02f      	b.n	80094ac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	3304      	adds	r3, #4
 8009450:	4618      	mov	r0, r3
 8009452:	f7fe fa2b 	bl	80078ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800945a:	2b00      	cmp	r3, #0
 800945c:	d004      	beq.n	8009468 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	3318      	adds	r3, #24
 8009462:	4618      	mov	r0, r3
 8009464:	f7fe fa22 	bl	80078ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800946c:	4b25      	ldr	r3, [pc, #148]	; (8009504 <xTaskIncrementTick+0x160>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	429a      	cmp	r2, r3
 8009472:	d903      	bls.n	800947c <xTaskIncrementTick+0xd8>
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009478:	4a22      	ldr	r2, [pc, #136]	; (8009504 <xTaskIncrementTick+0x160>)
 800947a:	6013      	str	r3, [r2, #0]
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009480:	4613      	mov	r3, r2
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	4413      	add	r3, r2
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	4a1f      	ldr	r2, [pc, #124]	; (8009508 <xTaskIncrementTick+0x164>)
 800948a:	441a      	add	r2, r3
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	3304      	adds	r3, #4
 8009490:	4619      	mov	r1, r3
 8009492:	4610      	mov	r0, r2
 8009494:	f7fe f9ad 	bl	80077f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800949c:	4b1b      	ldr	r3, [pc, #108]	; (800950c <xTaskIncrementTick+0x168>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d3b8      	bcc.n	8009418 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80094a6:	2301      	movs	r3, #1
 80094a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094aa:	e7b5      	b.n	8009418 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80094ac:	4b17      	ldr	r3, [pc, #92]	; (800950c <xTaskIncrementTick+0x168>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b2:	4915      	ldr	r1, [pc, #84]	; (8009508 <xTaskIncrementTick+0x164>)
 80094b4:	4613      	mov	r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	4413      	add	r3, r2
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	440b      	add	r3, r1
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d901      	bls.n	80094c8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80094c4:	2301      	movs	r3, #1
 80094c6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80094c8:	4b11      	ldr	r3, [pc, #68]	; (8009510 <xTaskIncrementTick+0x16c>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d007      	beq.n	80094e0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80094d0:	2301      	movs	r3, #1
 80094d2:	617b      	str	r3, [r7, #20]
 80094d4:	e004      	b.n	80094e0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80094d6:	4b0f      	ldr	r3, [pc, #60]	; (8009514 <xTaskIncrementTick+0x170>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	3301      	adds	r3, #1
 80094dc:	4a0d      	ldr	r2, [pc, #52]	; (8009514 <xTaskIncrementTick+0x170>)
 80094de:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80094e0:	697b      	ldr	r3, [r7, #20]
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3718      	adds	r7, #24
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	2400a350 	.word	0x2400a350
 80094f0:	2400a32c 	.word	0x2400a32c
 80094f4:	2400a2e0 	.word	0x2400a2e0
 80094f8:	2400a2e4 	.word	0x2400a2e4
 80094fc:	2400a340 	.word	0x2400a340
 8009500:	2400a348 	.word	0x2400a348
 8009504:	2400a330 	.word	0x2400a330
 8009508:	24009e58 	.word	0x24009e58
 800950c:	24009e54 	.word	0x24009e54
 8009510:	2400a33c 	.word	0x2400a33c
 8009514:	2400a338 	.word	0x2400a338

08009518 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009518:	b480      	push	{r7}
 800951a:	b085      	sub	sp, #20
 800951c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800951e:	4b28      	ldr	r3, [pc, #160]	; (80095c0 <vTaskSwitchContext+0xa8>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d003      	beq.n	800952e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009526:	4b27      	ldr	r3, [pc, #156]	; (80095c4 <vTaskSwitchContext+0xac>)
 8009528:	2201      	movs	r2, #1
 800952a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800952c:	e041      	b.n	80095b2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800952e:	4b25      	ldr	r3, [pc, #148]	; (80095c4 <vTaskSwitchContext+0xac>)
 8009530:	2200      	movs	r2, #0
 8009532:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009534:	4b24      	ldr	r3, [pc, #144]	; (80095c8 <vTaskSwitchContext+0xb0>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	60fb      	str	r3, [r7, #12]
 800953a:	e010      	b.n	800955e <vTaskSwitchContext+0x46>
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d10a      	bne.n	8009558 <vTaskSwitchContext+0x40>
	__asm volatile
 8009542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009546:	f383 8811 	msr	BASEPRI, r3
 800954a:	f3bf 8f6f 	isb	sy
 800954e:	f3bf 8f4f 	dsb	sy
 8009552:	607b      	str	r3, [r7, #4]
}
 8009554:	bf00      	nop
 8009556:	e7fe      	b.n	8009556 <vTaskSwitchContext+0x3e>
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	3b01      	subs	r3, #1
 800955c:	60fb      	str	r3, [r7, #12]
 800955e:	491b      	ldr	r1, [pc, #108]	; (80095cc <vTaskSwitchContext+0xb4>)
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	4613      	mov	r3, r2
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	4413      	add	r3, r2
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	440b      	add	r3, r1
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d0e4      	beq.n	800953c <vTaskSwitchContext+0x24>
 8009572:	68fa      	ldr	r2, [r7, #12]
 8009574:	4613      	mov	r3, r2
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	4413      	add	r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	4a13      	ldr	r2, [pc, #76]	; (80095cc <vTaskSwitchContext+0xb4>)
 800957e:	4413      	add	r3, r2
 8009580:	60bb      	str	r3, [r7, #8]
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	685a      	ldr	r2, [r3, #4]
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	605a      	str	r2, [r3, #4]
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	685a      	ldr	r2, [r3, #4]
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	3308      	adds	r3, #8
 8009594:	429a      	cmp	r2, r3
 8009596:	d104      	bne.n	80095a2 <vTaskSwitchContext+0x8a>
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	685a      	ldr	r2, [r3, #4]
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	605a      	str	r2, [r3, #4]
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	4a09      	ldr	r2, [pc, #36]	; (80095d0 <vTaskSwitchContext+0xb8>)
 80095aa:	6013      	str	r3, [r2, #0]
 80095ac:	4a06      	ldr	r2, [pc, #24]	; (80095c8 <vTaskSwitchContext+0xb0>)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6013      	str	r3, [r2, #0]
}
 80095b2:	bf00      	nop
 80095b4:	3714      	adds	r7, #20
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop
 80095c0:	2400a350 	.word	0x2400a350
 80095c4:	2400a33c 	.word	0x2400a33c
 80095c8:	2400a330 	.word	0x2400a330
 80095cc:	24009e58 	.word	0x24009e58
 80095d0:	24009e54 	.word	0x24009e54

080095d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d10a      	bne.n	80095fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80095e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e8:	f383 8811 	msr	BASEPRI, r3
 80095ec:	f3bf 8f6f 	isb	sy
 80095f0:	f3bf 8f4f 	dsb	sy
 80095f4:	60fb      	str	r3, [r7, #12]
}
 80095f6:	bf00      	nop
 80095f8:	e7fe      	b.n	80095f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095fa:	4b07      	ldr	r3, [pc, #28]	; (8009618 <vTaskPlaceOnEventList+0x44>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	3318      	adds	r3, #24
 8009600:	4619      	mov	r1, r3
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f7fe f919 	bl	800783a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009608:	2101      	movs	r1, #1
 800960a:	6838      	ldr	r0, [r7, #0]
 800960c:	f000 fb7a 	bl	8009d04 <prvAddCurrentTaskToDelayedList>
}
 8009610:	bf00      	nop
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}
 8009618:	24009e54 	.word	0x24009e54

0800961c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800961c:	b580      	push	{r7, lr}
 800961e:	b086      	sub	sp, #24
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d10a      	bne.n	8009644 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800962e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009632:	f383 8811 	msr	BASEPRI, r3
 8009636:	f3bf 8f6f 	isb	sy
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	617b      	str	r3, [r7, #20]
}
 8009640:	bf00      	nop
 8009642:	e7fe      	b.n	8009642 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009644:	4b0a      	ldr	r3, [pc, #40]	; (8009670 <vTaskPlaceOnEventListRestricted+0x54>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	3318      	adds	r3, #24
 800964a:	4619      	mov	r1, r3
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	f7fe f8d0 	bl	80077f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d002      	beq.n	800965e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009658:	f04f 33ff 	mov.w	r3, #4294967295
 800965c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800965e:	6879      	ldr	r1, [r7, #4]
 8009660:	68b8      	ldr	r0, [r7, #8]
 8009662:	f000 fb4f 	bl	8009d04 <prvAddCurrentTaskToDelayedList>
	}
 8009666:	bf00      	nop
 8009668:	3718      	adds	r7, #24
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	24009e54 	.word	0x24009e54

08009674 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b086      	sub	sp, #24
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	68db      	ldr	r3, [r3, #12]
 8009682:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d10a      	bne.n	80096a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800968a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968e:	f383 8811 	msr	BASEPRI, r3
 8009692:	f3bf 8f6f 	isb	sy
 8009696:	f3bf 8f4f 	dsb	sy
 800969a:	60fb      	str	r3, [r7, #12]
}
 800969c:	bf00      	nop
 800969e:	e7fe      	b.n	800969e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	3318      	adds	r3, #24
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7fe f901 	bl	80078ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096aa:	4b1e      	ldr	r3, [pc, #120]	; (8009724 <xTaskRemoveFromEventList+0xb0>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d11d      	bne.n	80096ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	3304      	adds	r3, #4
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7fe f8f8 	bl	80078ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096c0:	4b19      	ldr	r3, [pc, #100]	; (8009728 <xTaskRemoveFromEventList+0xb4>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d903      	bls.n	80096d0 <xTaskRemoveFromEventList+0x5c>
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096cc:	4a16      	ldr	r2, [pc, #88]	; (8009728 <xTaskRemoveFromEventList+0xb4>)
 80096ce:	6013      	str	r3, [r2, #0]
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096d4:	4613      	mov	r3, r2
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	4413      	add	r3, r2
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	4a13      	ldr	r2, [pc, #76]	; (800972c <xTaskRemoveFromEventList+0xb8>)
 80096de:	441a      	add	r2, r3
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	3304      	adds	r3, #4
 80096e4:	4619      	mov	r1, r3
 80096e6:	4610      	mov	r0, r2
 80096e8:	f7fe f883 	bl	80077f2 <vListInsertEnd>
 80096ec:	e005      	b.n	80096fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	3318      	adds	r3, #24
 80096f2:	4619      	mov	r1, r3
 80096f4:	480e      	ldr	r0, [pc, #56]	; (8009730 <xTaskRemoveFromEventList+0xbc>)
 80096f6:	f7fe f87c 	bl	80077f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096fe:	4b0d      	ldr	r3, [pc, #52]	; (8009734 <xTaskRemoveFromEventList+0xc0>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009704:	429a      	cmp	r2, r3
 8009706:	d905      	bls.n	8009714 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009708:	2301      	movs	r3, #1
 800970a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800970c:	4b0a      	ldr	r3, [pc, #40]	; (8009738 <xTaskRemoveFromEventList+0xc4>)
 800970e:	2201      	movs	r2, #1
 8009710:	601a      	str	r2, [r3, #0]
 8009712:	e001      	b.n	8009718 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009714:	2300      	movs	r3, #0
 8009716:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009718:	697b      	ldr	r3, [r7, #20]
}
 800971a:	4618      	mov	r0, r3
 800971c:	3718      	adds	r7, #24
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	2400a350 	.word	0x2400a350
 8009728:	2400a330 	.word	0x2400a330
 800972c:	24009e58 	.word	0x24009e58
 8009730:	2400a2e8 	.word	0x2400a2e8
 8009734:	24009e54 	.word	0x24009e54
 8009738:	2400a33c 	.word	0x2400a33c

0800973c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009744:	4b06      	ldr	r3, [pc, #24]	; (8009760 <vTaskInternalSetTimeOutState+0x24>)
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800974c:	4b05      	ldr	r3, [pc, #20]	; (8009764 <vTaskInternalSetTimeOutState+0x28>)
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	605a      	str	r2, [r3, #4]
}
 8009754:	bf00      	nop
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr
 8009760:	2400a340 	.word	0x2400a340
 8009764:	2400a32c 	.word	0x2400a32c

08009768 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b088      	sub	sp, #32
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d10a      	bne.n	800978e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977c:	f383 8811 	msr	BASEPRI, r3
 8009780:	f3bf 8f6f 	isb	sy
 8009784:	f3bf 8f4f 	dsb	sy
 8009788:	613b      	str	r3, [r7, #16]
}
 800978a:	bf00      	nop
 800978c:	e7fe      	b.n	800978c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d10a      	bne.n	80097aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009798:	f383 8811 	msr	BASEPRI, r3
 800979c:	f3bf 8f6f 	isb	sy
 80097a0:	f3bf 8f4f 	dsb	sy
 80097a4:	60fb      	str	r3, [r7, #12]
}
 80097a6:	bf00      	nop
 80097a8:	e7fe      	b.n	80097a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80097aa:	f7fe f9d3 	bl	8007b54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80097ae:	4b1d      	ldr	r3, [pc, #116]	; (8009824 <xTaskCheckForTimeOut+0xbc>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	69ba      	ldr	r2, [r7, #24]
 80097ba:	1ad3      	subs	r3, r2, r3
 80097bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097c6:	d102      	bne.n	80097ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80097c8:	2300      	movs	r3, #0
 80097ca:	61fb      	str	r3, [r7, #28]
 80097cc:	e023      	b.n	8009816 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	4b15      	ldr	r3, [pc, #84]	; (8009828 <xTaskCheckForTimeOut+0xc0>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d007      	beq.n	80097ea <xTaskCheckForTimeOut+0x82>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	69ba      	ldr	r2, [r7, #24]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d302      	bcc.n	80097ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80097e4:	2301      	movs	r3, #1
 80097e6:	61fb      	str	r3, [r7, #28]
 80097e8:	e015      	b.n	8009816 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	697a      	ldr	r2, [r7, #20]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d20b      	bcs.n	800980c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	1ad2      	subs	r2, r2, r3
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f7ff ff9b 	bl	800973c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009806:	2300      	movs	r3, #0
 8009808:	61fb      	str	r3, [r7, #28]
 800980a:	e004      	b.n	8009816 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	2200      	movs	r2, #0
 8009810:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009812:	2301      	movs	r3, #1
 8009814:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009816:	f7fe f9cd 	bl	8007bb4 <vPortExitCritical>

	return xReturn;
 800981a:	69fb      	ldr	r3, [r7, #28]
}
 800981c:	4618      	mov	r0, r3
 800981e:	3720      	adds	r7, #32
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	2400a32c 	.word	0x2400a32c
 8009828:	2400a340 	.word	0x2400a340

0800982c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800982c:	b480      	push	{r7}
 800982e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009830:	4b03      	ldr	r3, [pc, #12]	; (8009840 <vTaskMissedYield+0x14>)
 8009832:	2201      	movs	r2, #1
 8009834:	601a      	str	r2, [r3, #0]
}
 8009836:	bf00      	nop
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr
 8009840:	2400a33c 	.word	0x2400a33c

08009844 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800984c:	f000 f852 	bl	80098f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009850:	4b06      	ldr	r3, [pc, #24]	; (800986c <prvIdleTask+0x28>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2b01      	cmp	r3, #1
 8009856:	d9f9      	bls.n	800984c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009858:	4b05      	ldr	r3, [pc, #20]	; (8009870 <prvIdleTask+0x2c>)
 800985a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800985e:	601a      	str	r2, [r3, #0]
 8009860:	f3bf 8f4f 	dsb	sy
 8009864:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009868:	e7f0      	b.n	800984c <prvIdleTask+0x8>
 800986a:	bf00      	nop
 800986c:	24009e58 	.word	0x24009e58
 8009870:	e000ed04 	.word	0xe000ed04

08009874 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800987a:	2300      	movs	r3, #0
 800987c:	607b      	str	r3, [r7, #4]
 800987e:	e00c      	b.n	800989a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	4613      	mov	r3, r2
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	4413      	add	r3, r2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	4a12      	ldr	r2, [pc, #72]	; (80098d4 <prvInitialiseTaskLists+0x60>)
 800988c:	4413      	add	r3, r2
 800988e:	4618      	mov	r0, r3
 8009890:	f7fd ff82 	bl	8007798 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	3301      	adds	r3, #1
 8009898:	607b      	str	r3, [r7, #4]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2b37      	cmp	r3, #55	; 0x37
 800989e:	d9ef      	bls.n	8009880 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80098a0:	480d      	ldr	r0, [pc, #52]	; (80098d8 <prvInitialiseTaskLists+0x64>)
 80098a2:	f7fd ff79 	bl	8007798 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80098a6:	480d      	ldr	r0, [pc, #52]	; (80098dc <prvInitialiseTaskLists+0x68>)
 80098a8:	f7fd ff76 	bl	8007798 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80098ac:	480c      	ldr	r0, [pc, #48]	; (80098e0 <prvInitialiseTaskLists+0x6c>)
 80098ae:	f7fd ff73 	bl	8007798 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80098b2:	480c      	ldr	r0, [pc, #48]	; (80098e4 <prvInitialiseTaskLists+0x70>)
 80098b4:	f7fd ff70 	bl	8007798 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80098b8:	480b      	ldr	r0, [pc, #44]	; (80098e8 <prvInitialiseTaskLists+0x74>)
 80098ba:	f7fd ff6d 	bl	8007798 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80098be:	4b0b      	ldr	r3, [pc, #44]	; (80098ec <prvInitialiseTaskLists+0x78>)
 80098c0:	4a05      	ldr	r2, [pc, #20]	; (80098d8 <prvInitialiseTaskLists+0x64>)
 80098c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80098c4:	4b0a      	ldr	r3, [pc, #40]	; (80098f0 <prvInitialiseTaskLists+0x7c>)
 80098c6:	4a05      	ldr	r2, [pc, #20]	; (80098dc <prvInitialiseTaskLists+0x68>)
 80098c8:	601a      	str	r2, [r3, #0]
}
 80098ca:	bf00      	nop
 80098cc:	3708      	adds	r7, #8
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	24009e58 	.word	0x24009e58
 80098d8:	2400a2b8 	.word	0x2400a2b8
 80098dc:	2400a2cc 	.word	0x2400a2cc
 80098e0:	2400a2e8 	.word	0x2400a2e8
 80098e4:	2400a2fc 	.word	0x2400a2fc
 80098e8:	2400a314 	.word	0x2400a314
 80098ec:	2400a2e0 	.word	0x2400a2e0
 80098f0:	2400a2e4 	.word	0x2400a2e4

080098f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098fa:	e019      	b.n	8009930 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80098fc:	f7fe f92a 	bl	8007b54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009900:	4b10      	ldr	r3, [pc, #64]	; (8009944 <prvCheckTasksWaitingTermination+0x50>)
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	3304      	adds	r3, #4
 800990c:	4618      	mov	r0, r3
 800990e:	f7fd ffcd 	bl	80078ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009912:	4b0d      	ldr	r3, [pc, #52]	; (8009948 <prvCheckTasksWaitingTermination+0x54>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	3b01      	subs	r3, #1
 8009918:	4a0b      	ldr	r2, [pc, #44]	; (8009948 <prvCheckTasksWaitingTermination+0x54>)
 800991a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800991c:	4b0b      	ldr	r3, [pc, #44]	; (800994c <prvCheckTasksWaitingTermination+0x58>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	3b01      	subs	r3, #1
 8009922:	4a0a      	ldr	r2, [pc, #40]	; (800994c <prvCheckTasksWaitingTermination+0x58>)
 8009924:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009926:	f7fe f945 	bl	8007bb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 f810 	bl	8009950 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009930:	4b06      	ldr	r3, [pc, #24]	; (800994c <prvCheckTasksWaitingTermination+0x58>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d1e1      	bne.n	80098fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009938:	bf00      	nop
 800993a:	bf00      	nop
 800993c:	3708      	adds	r7, #8
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	2400a2fc 	.word	0x2400a2fc
 8009948:	2400a328 	.word	0x2400a328
 800994c:	2400a310 	.word	0x2400a310

08009950 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800995e:	2b00      	cmp	r3, #0
 8009960:	d108      	bne.n	8009974 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009966:	4618      	mov	r0, r3
 8009968:	f7fd fdf8 	bl	800755c <vPortFree>
				vPortFree( pxTCB );
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f7fd fdf5 	bl	800755c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009972:	e018      	b.n	80099a6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800997a:	2b01      	cmp	r3, #1
 800997c:	d103      	bne.n	8009986 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f7fd fdec 	bl	800755c <vPortFree>
	}
 8009984:	e00f      	b.n	80099a6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800998c:	2b02      	cmp	r3, #2
 800998e:	d00a      	beq.n	80099a6 <prvDeleteTCB+0x56>
	__asm volatile
 8009990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009994:	f383 8811 	msr	BASEPRI, r3
 8009998:	f3bf 8f6f 	isb	sy
 800999c:	f3bf 8f4f 	dsb	sy
 80099a0:	60fb      	str	r3, [r7, #12]
}
 80099a2:	bf00      	nop
 80099a4:	e7fe      	b.n	80099a4 <prvDeleteTCB+0x54>
	}
 80099a6:	bf00      	nop
 80099a8:	3710      	adds	r7, #16
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
	...

080099b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099b6:	4b0c      	ldr	r3, [pc, #48]	; (80099e8 <prvResetNextTaskUnblockTime+0x38>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d104      	bne.n	80099ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80099c0:	4b0a      	ldr	r3, [pc, #40]	; (80099ec <prvResetNextTaskUnblockTime+0x3c>)
 80099c2:	f04f 32ff 	mov.w	r2, #4294967295
 80099c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80099c8:	e008      	b.n	80099dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099ca:	4b07      	ldr	r3, [pc, #28]	; (80099e8 <prvResetNextTaskUnblockTime+0x38>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	68db      	ldr	r3, [r3, #12]
 80099d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	4a04      	ldr	r2, [pc, #16]	; (80099ec <prvResetNextTaskUnblockTime+0x3c>)
 80099da:	6013      	str	r3, [r2, #0]
}
 80099dc:	bf00      	nop
 80099de:	370c      	adds	r7, #12
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr
 80099e8:	2400a2e0 	.word	0x2400a2e0
 80099ec:	2400a348 	.word	0x2400a348

080099f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80099f6:	4b0b      	ldr	r3, [pc, #44]	; (8009a24 <xTaskGetSchedulerState+0x34>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d102      	bne.n	8009a04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80099fe:	2301      	movs	r3, #1
 8009a00:	607b      	str	r3, [r7, #4]
 8009a02:	e008      	b.n	8009a16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a04:	4b08      	ldr	r3, [pc, #32]	; (8009a28 <xTaskGetSchedulerState+0x38>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d102      	bne.n	8009a12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009a0c:	2302      	movs	r3, #2
 8009a0e:	607b      	str	r3, [r7, #4]
 8009a10:	e001      	b.n	8009a16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009a12:	2300      	movs	r3, #0
 8009a14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009a16:	687b      	ldr	r3, [r7, #4]
	}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	370c      	adds	r7, #12
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr
 8009a24:	2400a334 	.word	0x2400a334
 8009a28:	2400a350 	.word	0x2400a350

08009a2c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d051      	beq.n	8009ae6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a46:	4b2a      	ldr	r3, [pc, #168]	; (8009af0 <xTaskPriorityInherit+0xc4>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d241      	bcs.n	8009ad4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	699b      	ldr	r3, [r3, #24]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	db06      	blt.n	8009a66 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a58:	4b25      	ldr	r3, [pc, #148]	; (8009af0 <xTaskPriorityInherit+0xc4>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	6959      	ldr	r1, [r3, #20]
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a6e:	4613      	mov	r3, r2
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	4413      	add	r3, r2
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	4a1f      	ldr	r2, [pc, #124]	; (8009af4 <xTaskPriorityInherit+0xc8>)
 8009a78:	4413      	add	r3, r2
 8009a7a:	4299      	cmp	r1, r3
 8009a7c:	d122      	bne.n	8009ac4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	3304      	adds	r3, #4
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7fd ff12 	bl	80078ac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009a88:	4b19      	ldr	r3, [pc, #100]	; (8009af0 <xTaskPriorityInherit+0xc4>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a96:	4b18      	ldr	r3, [pc, #96]	; (8009af8 <xTaskPriorityInherit+0xcc>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d903      	bls.n	8009aa6 <xTaskPriorityInherit+0x7a>
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa2:	4a15      	ldr	r2, [pc, #84]	; (8009af8 <xTaskPriorityInherit+0xcc>)
 8009aa4:	6013      	str	r3, [r2, #0]
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aaa:	4613      	mov	r3, r2
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	4413      	add	r3, r2
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	4a10      	ldr	r2, [pc, #64]	; (8009af4 <xTaskPriorityInherit+0xc8>)
 8009ab4:	441a      	add	r2, r3
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	3304      	adds	r3, #4
 8009aba:	4619      	mov	r1, r3
 8009abc:	4610      	mov	r0, r2
 8009abe:	f7fd fe98 	bl	80077f2 <vListInsertEnd>
 8009ac2:	e004      	b.n	8009ace <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009ac4:	4b0a      	ldr	r3, [pc, #40]	; (8009af0 <xTaskPriorityInherit+0xc4>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	60fb      	str	r3, [r7, #12]
 8009ad2:	e008      	b.n	8009ae6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ad8:	4b05      	ldr	r3, [pc, #20]	; (8009af0 <xTaskPriorityInherit+0xc4>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d201      	bcs.n	8009ae6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
	}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3710      	adds	r7, #16
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	24009e54 	.word	0x24009e54
 8009af4:	24009e58 	.word	0x24009e58
 8009af8:	2400a330 	.word	0x2400a330

08009afc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b086      	sub	sp, #24
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d056      	beq.n	8009bc0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009b12:	4b2e      	ldr	r3, [pc, #184]	; (8009bcc <xTaskPriorityDisinherit+0xd0>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	693a      	ldr	r2, [r7, #16]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d00a      	beq.n	8009b32 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b20:	f383 8811 	msr	BASEPRI, r3
 8009b24:	f3bf 8f6f 	isb	sy
 8009b28:	f3bf 8f4f 	dsb	sy
 8009b2c:	60fb      	str	r3, [r7, #12]
}
 8009b2e:	bf00      	nop
 8009b30:	e7fe      	b.n	8009b30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d10a      	bne.n	8009b50 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3e:	f383 8811 	msr	BASEPRI, r3
 8009b42:	f3bf 8f6f 	isb	sy
 8009b46:	f3bf 8f4f 	dsb	sy
 8009b4a:	60bb      	str	r3, [r7, #8]
}
 8009b4c:	bf00      	nop
 8009b4e:	e7fe      	b.n	8009b4e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b54:	1e5a      	subs	r2, r3, #1
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d02c      	beq.n	8009bc0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d128      	bne.n	8009bc0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	3304      	adds	r3, #4
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7fd fe9a 	bl	80078ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b84:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b90:	4b0f      	ldr	r3, [pc, #60]	; (8009bd0 <xTaskPriorityDisinherit+0xd4>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d903      	bls.n	8009ba0 <xTaskPriorityDisinherit+0xa4>
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b9c:	4a0c      	ldr	r2, [pc, #48]	; (8009bd0 <xTaskPriorityDisinherit+0xd4>)
 8009b9e:	6013      	str	r3, [r2, #0]
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	4413      	add	r3, r2
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	4a09      	ldr	r2, [pc, #36]	; (8009bd4 <xTaskPriorityDisinherit+0xd8>)
 8009bae:	441a      	add	r2, r3
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	3304      	adds	r3, #4
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	4610      	mov	r0, r2
 8009bb8:	f7fd fe1b 	bl	80077f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009bc0:	697b      	ldr	r3, [r7, #20]
	}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3718      	adds	r7, #24
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	24009e54 	.word	0x24009e54
 8009bd0:	2400a330 	.word	0x2400a330
 8009bd4:	24009e58 	.word	0x24009e58

08009bd8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b088      	sub	sp, #32
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009be6:	2301      	movs	r3, #1
 8009be8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d06a      	beq.n	8009cc6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d10a      	bne.n	8009c0e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfc:	f383 8811 	msr	BASEPRI, r3
 8009c00:	f3bf 8f6f 	isb	sy
 8009c04:	f3bf 8f4f 	dsb	sy
 8009c08:	60fb      	str	r3, [r7, #12]
}
 8009c0a:	bf00      	nop
 8009c0c:	e7fe      	b.n	8009c0c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009c0e:	69bb      	ldr	r3, [r7, #24]
 8009c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c12:	683a      	ldr	r2, [r7, #0]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d902      	bls.n	8009c1e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	61fb      	str	r3, [r7, #28]
 8009c1c:	e002      	b.n	8009c24 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c22:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c28:	69fa      	ldr	r2, [r7, #28]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d04b      	beq.n	8009cc6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009c2e:	69bb      	ldr	r3, [r7, #24]
 8009c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c32:	697a      	ldr	r2, [r7, #20]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d146      	bne.n	8009cc6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009c38:	4b25      	ldr	r3, [pc, #148]	; (8009cd0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	69ba      	ldr	r2, [r7, #24]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d10a      	bne.n	8009c58 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c46:	f383 8811 	msr	BASEPRI, r3
 8009c4a:	f3bf 8f6f 	isb	sy
 8009c4e:	f3bf 8f4f 	dsb	sy
 8009c52:	60bb      	str	r3, [r7, #8]
}
 8009c54:	bf00      	nop
 8009c56:	e7fe      	b.n	8009c56 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c5c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	69fa      	ldr	r2, [r7, #28]
 8009c62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009c64:	69bb      	ldr	r3, [r7, #24]
 8009c66:	699b      	ldr	r3, [r3, #24]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	db04      	blt.n	8009c76 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	6959      	ldr	r1, [r3, #20]
 8009c7a:	693a      	ldr	r2, [r7, #16]
 8009c7c:	4613      	mov	r3, r2
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	4413      	add	r3, r2
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	4a13      	ldr	r2, [pc, #76]	; (8009cd4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009c86:	4413      	add	r3, r2
 8009c88:	4299      	cmp	r1, r3
 8009c8a:	d11c      	bne.n	8009cc6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	3304      	adds	r3, #4
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7fd fe0b 	bl	80078ac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c9a:	4b0f      	ldr	r3, [pc, #60]	; (8009cd8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d903      	bls.n	8009caa <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca6:	4a0c      	ldr	r2, [pc, #48]	; (8009cd8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009ca8:	6013      	str	r3, [r2, #0]
 8009caa:	69bb      	ldr	r3, [r7, #24]
 8009cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cae:	4613      	mov	r3, r2
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	4413      	add	r3, r2
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	4a07      	ldr	r2, [pc, #28]	; (8009cd4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009cb8:	441a      	add	r2, r3
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	3304      	adds	r3, #4
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	4610      	mov	r0, r2
 8009cc2:	f7fd fd96 	bl	80077f2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009cc6:	bf00      	nop
 8009cc8:	3720      	adds	r7, #32
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	24009e54 	.word	0x24009e54
 8009cd4:	24009e58 	.word	0x24009e58
 8009cd8:	2400a330 	.word	0x2400a330

08009cdc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009cdc:	b480      	push	{r7}
 8009cde:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009ce0:	4b07      	ldr	r3, [pc, #28]	; (8009d00 <pvTaskIncrementMutexHeldCount+0x24>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d004      	beq.n	8009cf2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009ce8:	4b05      	ldr	r3, [pc, #20]	; (8009d00 <pvTaskIncrementMutexHeldCount+0x24>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009cee:	3201      	adds	r2, #1
 8009cf0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009cf2:	4b03      	ldr	r3, [pc, #12]	; (8009d00 <pvTaskIncrementMutexHeldCount+0x24>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
	}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr
 8009d00:	24009e54 	.word	0x24009e54

08009d04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009d0e:	4b21      	ldr	r3, [pc, #132]	; (8009d94 <prvAddCurrentTaskToDelayedList+0x90>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d14:	4b20      	ldr	r3, [pc, #128]	; (8009d98 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	3304      	adds	r3, #4
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7fd fdc6 	bl	80078ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d26:	d10a      	bne.n	8009d3e <prvAddCurrentTaskToDelayedList+0x3a>
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d007      	beq.n	8009d3e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d2e:	4b1a      	ldr	r3, [pc, #104]	; (8009d98 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	3304      	adds	r3, #4
 8009d34:	4619      	mov	r1, r3
 8009d36:	4819      	ldr	r0, [pc, #100]	; (8009d9c <prvAddCurrentTaskToDelayedList+0x98>)
 8009d38:	f7fd fd5b 	bl	80077f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009d3c:	e026      	b.n	8009d8c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4413      	add	r3, r2
 8009d44:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009d46:	4b14      	ldr	r3, [pc, #80]	; (8009d98 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68ba      	ldr	r2, [r7, #8]
 8009d4c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009d4e:	68ba      	ldr	r2, [r7, #8]
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d209      	bcs.n	8009d6a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d56:	4b12      	ldr	r3, [pc, #72]	; (8009da0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	4b0f      	ldr	r3, [pc, #60]	; (8009d98 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	3304      	adds	r3, #4
 8009d60:	4619      	mov	r1, r3
 8009d62:	4610      	mov	r0, r2
 8009d64:	f7fd fd69 	bl	800783a <vListInsert>
}
 8009d68:	e010      	b.n	8009d8c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d6a:	4b0e      	ldr	r3, [pc, #56]	; (8009da4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	4b0a      	ldr	r3, [pc, #40]	; (8009d98 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	3304      	adds	r3, #4
 8009d74:	4619      	mov	r1, r3
 8009d76:	4610      	mov	r0, r2
 8009d78:	f7fd fd5f 	bl	800783a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009d7c:	4b0a      	ldr	r3, [pc, #40]	; (8009da8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	68ba      	ldr	r2, [r7, #8]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d202      	bcs.n	8009d8c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009d86:	4a08      	ldr	r2, [pc, #32]	; (8009da8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	6013      	str	r3, [r2, #0]
}
 8009d8c:	bf00      	nop
 8009d8e:	3710      	adds	r7, #16
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	2400a32c 	.word	0x2400a32c
 8009d98:	24009e54 	.word	0x24009e54
 8009d9c:	2400a314 	.word	0x2400a314
 8009da0:	2400a2e4 	.word	0x2400a2e4
 8009da4:	2400a2e0 	.word	0x2400a2e0
 8009da8:	2400a348 	.word	0x2400a348

08009dac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b08a      	sub	sp, #40	; 0x28
 8009db0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009db2:	2300      	movs	r3, #0
 8009db4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009db6:	f000 fb07 	bl	800a3c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009dba:	4b1c      	ldr	r3, [pc, #112]	; (8009e2c <xTimerCreateTimerTask+0x80>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d021      	beq.n	8009e06 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009dca:	1d3a      	adds	r2, r7, #4
 8009dcc:	f107 0108 	add.w	r1, r7, #8
 8009dd0:	f107 030c 	add.w	r3, r7, #12
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7fd fadb 	bl	8007390 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009dda:	6879      	ldr	r1, [r7, #4]
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	68fa      	ldr	r2, [r7, #12]
 8009de0:	9202      	str	r2, [sp, #8]
 8009de2:	9301      	str	r3, [sp, #4]
 8009de4:	2302      	movs	r3, #2
 8009de6:	9300      	str	r3, [sp, #0]
 8009de8:	2300      	movs	r3, #0
 8009dea:	460a      	mov	r2, r1
 8009dec:	4910      	ldr	r1, [pc, #64]	; (8009e30 <xTimerCreateTimerTask+0x84>)
 8009dee:	4811      	ldr	r0, [pc, #68]	; (8009e34 <xTimerCreateTimerTask+0x88>)
 8009df0:	f7fe ffe0 	bl	8008db4 <xTaskCreateStatic>
 8009df4:	4603      	mov	r3, r0
 8009df6:	4a10      	ldr	r2, [pc, #64]	; (8009e38 <xTimerCreateTimerTask+0x8c>)
 8009df8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009dfa:	4b0f      	ldr	r3, [pc, #60]	; (8009e38 <xTimerCreateTimerTask+0x8c>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d001      	beq.n	8009e06 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009e02:	2301      	movs	r3, #1
 8009e04:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d10a      	bne.n	8009e22 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e10:	f383 8811 	msr	BASEPRI, r3
 8009e14:	f3bf 8f6f 	isb	sy
 8009e18:	f3bf 8f4f 	dsb	sy
 8009e1c:	613b      	str	r3, [r7, #16]
}
 8009e1e:	bf00      	nop
 8009e20:	e7fe      	b.n	8009e20 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009e22:	697b      	ldr	r3, [r7, #20]
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3718      	adds	r7, #24
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	2400a384 	.word	0x2400a384
 8009e30:	08026d64 	.word	0x08026d64
 8009e34:	08009f71 	.word	0x08009f71
 8009e38:	2400a388 	.word	0x2400a388

08009e3c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b08a      	sub	sp, #40	; 0x28
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	607a      	str	r2, [r7, #4]
 8009e48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d10a      	bne.n	8009e6a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e58:	f383 8811 	msr	BASEPRI, r3
 8009e5c:	f3bf 8f6f 	isb	sy
 8009e60:	f3bf 8f4f 	dsb	sy
 8009e64:	623b      	str	r3, [r7, #32]
}
 8009e66:	bf00      	nop
 8009e68:	e7fe      	b.n	8009e68 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009e6a:	4b1a      	ldr	r3, [pc, #104]	; (8009ed4 <xTimerGenericCommand+0x98>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d02a      	beq.n	8009ec8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	2b05      	cmp	r3, #5
 8009e82:	dc18      	bgt.n	8009eb6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009e84:	f7ff fdb4 	bl	80099f0 <xTaskGetSchedulerState>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	2b02      	cmp	r3, #2
 8009e8c:	d109      	bne.n	8009ea2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009e8e:	4b11      	ldr	r3, [pc, #68]	; (8009ed4 <xTimerGenericCommand+0x98>)
 8009e90:	6818      	ldr	r0, [r3, #0]
 8009e92:	f107 0110 	add.w	r1, r7, #16
 8009e96:	2300      	movs	r3, #0
 8009e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e9a:	f7fe f925 	bl	80080e8 <xQueueGenericSend>
 8009e9e:	6278      	str	r0, [r7, #36]	; 0x24
 8009ea0:	e012      	b.n	8009ec8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009ea2:	4b0c      	ldr	r3, [pc, #48]	; (8009ed4 <xTimerGenericCommand+0x98>)
 8009ea4:	6818      	ldr	r0, [r3, #0]
 8009ea6:	f107 0110 	add.w	r1, r7, #16
 8009eaa:	2300      	movs	r3, #0
 8009eac:	2200      	movs	r2, #0
 8009eae:	f7fe f91b 	bl	80080e8 <xQueueGenericSend>
 8009eb2:	6278      	str	r0, [r7, #36]	; 0x24
 8009eb4:	e008      	b.n	8009ec8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009eb6:	4b07      	ldr	r3, [pc, #28]	; (8009ed4 <xTimerGenericCommand+0x98>)
 8009eb8:	6818      	ldr	r0, [r3, #0]
 8009eba:	f107 0110 	add.w	r1, r7, #16
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	683a      	ldr	r2, [r7, #0]
 8009ec2:	f7fe fa0f 	bl	80082e4 <xQueueGenericSendFromISR>
 8009ec6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3728      	adds	r7, #40	; 0x28
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	2400a384 	.word	0x2400a384

08009ed8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b088      	sub	sp, #32
 8009edc:	af02      	add	r7, sp, #8
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ee2:	4b22      	ldr	r3, [pc, #136]	; (8009f6c <prvProcessExpiredTimer+0x94>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	68db      	ldr	r3, [r3, #12]
 8009eea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	3304      	adds	r3, #4
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f7fd fcdb 	bl	80078ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009efc:	f003 0304 	and.w	r3, r3, #4
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d022      	beq.n	8009f4a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	699a      	ldr	r2, [r3, #24]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	18d1      	adds	r1, r2, r3
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	683a      	ldr	r2, [r7, #0]
 8009f10:	6978      	ldr	r0, [r7, #20]
 8009f12:	f000 f8d1 	bl	800a0b8 <prvInsertTimerInActiveList>
 8009f16:	4603      	mov	r3, r0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d01f      	beq.n	8009f5c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	9300      	str	r3, [sp, #0]
 8009f20:	2300      	movs	r3, #0
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	2100      	movs	r1, #0
 8009f26:	6978      	ldr	r0, [r7, #20]
 8009f28:	f7ff ff88 	bl	8009e3c <xTimerGenericCommand>
 8009f2c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d113      	bne.n	8009f5c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f38:	f383 8811 	msr	BASEPRI, r3
 8009f3c:	f3bf 8f6f 	isb	sy
 8009f40:	f3bf 8f4f 	dsb	sy
 8009f44:	60fb      	str	r3, [r7, #12]
}
 8009f46:	bf00      	nop
 8009f48:	e7fe      	b.n	8009f48 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f50:	f023 0301 	bic.w	r3, r3, #1
 8009f54:	b2da      	uxtb	r2, r3
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	6a1b      	ldr	r3, [r3, #32]
 8009f60:	6978      	ldr	r0, [r7, #20]
 8009f62:	4798      	blx	r3
}
 8009f64:	bf00      	nop
 8009f66:	3718      	adds	r7, #24
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	2400a37c 	.word	0x2400a37c

08009f70 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f78:	f107 0308 	add.w	r3, r7, #8
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f000 f857 	bl	800a030 <prvGetNextExpireTime>
 8009f82:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	4619      	mov	r1, r3
 8009f88:	68f8      	ldr	r0, [r7, #12]
 8009f8a:	f000 f803 	bl	8009f94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009f8e:	f000 f8d5 	bl	800a13c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f92:	e7f1      	b.n	8009f78 <prvTimerTask+0x8>

08009f94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009f9e:	f7ff f945 	bl	800922c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009fa2:	f107 0308 	add.w	r3, r7, #8
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f000 f866 	bl	800a078 <prvSampleTimeNow>
 8009fac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d130      	bne.n	800a016 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d10a      	bne.n	8009fd0 <prvProcessTimerOrBlockTask+0x3c>
 8009fba:	687a      	ldr	r2, [r7, #4]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d806      	bhi.n	8009fd0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009fc2:	f7ff f941 	bl	8009248 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009fc6:	68f9      	ldr	r1, [r7, #12]
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f7ff ff85 	bl	8009ed8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009fce:	e024      	b.n	800a01a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d008      	beq.n	8009fe8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009fd6:	4b13      	ldr	r3, [pc, #76]	; (800a024 <prvProcessTimerOrBlockTask+0x90>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d101      	bne.n	8009fe4 <prvProcessTimerOrBlockTask+0x50>
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e000      	b.n	8009fe6 <prvProcessTimerOrBlockTask+0x52>
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009fe8:	4b0f      	ldr	r3, [pc, #60]	; (800a028 <prvProcessTimerOrBlockTask+0x94>)
 8009fea:	6818      	ldr	r0, [r3, #0]
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	1ad3      	subs	r3, r2, r3
 8009ff2:	683a      	ldr	r2, [r7, #0]
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	f7fe fea9 	bl	8008d4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009ffa:	f7ff f925 	bl	8009248 <xTaskResumeAll>
 8009ffe:	4603      	mov	r3, r0
 800a000:	2b00      	cmp	r3, #0
 800a002:	d10a      	bne.n	800a01a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a004:	4b09      	ldr	r3, [pc, #36]	; (800a02c <prvProcessTimerOrBlockTask+0x98>)
 800a006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a00a:	601a      	str	r2, [r3, #0]
 800a00c:	f3bf 8f4f 	dsb	sy
 800a010:	f3bf 8f6f 	isb	sy
}
 800a014:	e001      	b.n	800a01a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a016:	f7ff f917 	bl	8009248 <xTaskResumeAll>
}
 800a01a:	bf00      	nop
 800a01c:	3710      	adds	r7, #16
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop
 800a024:	2400a380 	.word	0x2400a380
 800a028:	2400a384 	.word	0x2400a384
 800a02c:	e000ed04 	.word	0xe000ed04

0800a030 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a030:	b480      	push	{r7}
 800a032:	b085      	sub	sp, #20
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a038:	4b0e      	ldr	r3, [pc, #56]	; (800a074 <prvGetNextExpireTime+0x44>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d101      	bne.n	800a046 <prvGetNextExpireTime+0x16>
 800a042:	2201      	movs	r2, #1
 800a044:	e000      	b.n	800a048 <prvGetNextExpireTime+0x18>
 800a046:	2200      	movs	r2, #0
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d105      	bne.n	800a060 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a054:	4b07      	ldr	r3, [pc, #28]	; (800a074 <prvGetNextExpireTime+0x44>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	60fb      	str	r3, [r7, #12]
 800a05e:	e001      	b.n	800a064 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a060:	2300      	movs	r3, #0
 800a062:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a064:	68fb      	ldr	r3, [r7, #12]
}
 800a066:	4618      	mov	r0, r3
 800a068:	3714      	adds	r7, #20
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr
 800a072:	bf00      	nop
 800a074:	2400a37c 	.word	0x2400a37c

0800a078 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a080:	f7ff f980 	bl	8009384 <xTaskGetTickCount>
 800a084:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a086:	4b0b      	ldr	r3, [pc, #44]	; (800a0b4 <prvSampleTimeNow+0x3c>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	68fa      	ldr	r2, [r7, #12]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d205      	bcs.n	800a09c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a090:	f000 f936 	bl	800a300 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2201      	movs	r2, #1
 800a098:	601a      	str	r2, [r3, #0]
 800a09a:	e002      	b.n	800a0a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a0a2:	4a04      	ldr	r2, [pc, #16]	; (800a0b4 <prvSampleTimeNow+0x3c>)
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	2400a38c 	.word	0x2400a38c

0800a0b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b086      	sub	sp, #24
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	607a      	str	r2, [r7, #4]
 800a0c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	68ba      	ldr	r2, [r7, #8]
 800a0ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	68fa      	ldr	r2, [r7, #12]
 800a0d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a0d6:	68ba      	ldr	r2, [r7, #8]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d812      	bhi.n	800a104 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	1ad2      	subs	r2, r2, r3
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	699b      	ldr	r3, [r3, #24]
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d302      	bcc.n	800a0f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	617b      	str	r3, [r7, #20]
 800a0f0:	e01b      	b.n	800a12a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a0f2:	4b10      	ldr	r3, [pc, #64]	; (800a134 <prvInsertTimerInActiveList+0x7c>)
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	3304      	adds	r3, #4
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	4610      	mov	r0, r2
 800a0fe:	f7fd fb9c 	bl	800783a <vListInsert>
 800a102:	e012      	b.n	800a12a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	429a      	cmp	r2, r3
 800a10a:	d206      	bcs.n	800a11a <prvInsertTimerInActiveList+0x62>
 800a10c:	68ba      	ldr	r2, [r7, #8]
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	429a      	cmp	r2, r3
 800a112:	d302      	bcc.n	800a11a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a114:	2301      	movs	r3, #1
 800a116:	617b      	str	r3, [r7, #20]
 800a118:	e007      	b.n	800a12a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a11a:	4b07      	ldr	r3, [pc, #28]	; (800a138 <prvInsertTimerInActiveList+0x80>)
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	3304      	adds	r3, #4
 800a122:	4619      	mov	r1, r3
 800a124:	4610      	mov	r0, r2
 800a126:	f7fd fb88 	bl	800783a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a12a:	697b      	ldr	r3, [r7, #20]
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3718      	adds	r7, #24
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}
 800a134:	2400a380 	.word	0x2400a380
 800a138:	2400a37c 	.word	0x2400a37c

0800a13c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b08e      	sub	sp, #56	; 0x38
 800a140:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a142:	e0ca      	b.n	800a2da <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2b00      	cmp	r3, #0
 800a148:	da18      	bge.n	800a17c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a14a:	1d3b      	adds	r3, r7, #4
 800a14c:	3304      	adds	r3, #4
 800a14e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a152:	2b00      	cmp	r3, #0
 800a154:	d10a      	bne.n	800a16c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15a:	f383 8811 	msr	BASEPRI, r3
 800a15e:	f3bf 8f6f 	isb	sy
 800a162:	f3bf 8f4f 	dsb	sy
 800a166:	61fb      	str	r3, [r7, #28]
}
 800a168:	bf00      	nop
 800a16a:	e7fe      	b.n	800a16a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a172:	6850      	ldr	r0, [r2, #4]
 800a174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a176:	6892      	ldr	r2, [r2, #8]
 800a178:	4611      	mov	r1, r2
 800a17a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	f2c0 80aa 	blt.w	800a2d8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18a:	695b      	ldr	r3, [r3, #20]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d004      	beq.n	800a19a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a192:	3304      	adds	r3, #4
 800a194:	4618      	mov	r0, r3
 800a196:	f7fd fb89 	bl	80078ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a19a:	463b      	mov	r3, r7
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7ff ff6b 	bl	800a078 <prvSampleTimeNow>
 800a1a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2b09      	cmp	r3, #9
 800a1a8:	f200 8097 	bhi.w	800a2da <prvProcessReceivedCommands+0x19e>
 800a1ac:	a201      	add	r2, pc, #4	; (adr r2, 800a1b4 <prvProcessReceivedCommands+0x78>)
 800a1ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b2:	bf00      	nop
 800a1b4:	0800a1dd 	.word	0x0800a1dd
 800a1b8:	0800a1dd 	.word	0x0800a1dd
 800a1bc:	0800a1dd 	.word	0x0800a1dd
 800a1c0:	0800a251 	.word	0x0800a251
 800a1c4:	0800a265 	.word	0x0800a265
 800a1c8:	0800a2af 	.word	0x0800a2af
 800a1cc:	0800a1dd 	.word	0x0800a1dd
 800a1d0:	0800a1dd 	.word	0x0800a1dd
 800a1d4:	0800a251 	.word	0x0800a251
 800a1d8:	0800a265 	.word	0x0800a265
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1e2:	f043 0301 	orr.w	r3, r3, #1
 800a1e6:	b2da      	uxtb	r2, r3
 800a1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a1ee:	68ba      	ldr	r2, [r7, #8]
 800a1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f2:	699b      	ldr	r3, [r3, #24]
 800a1f4:	18d1      	adds	r1, r2, r3
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1fc:	f7ff ff5c 	bl	800a0b8 <prvInsertTimerInActiveList>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d069      	beq.n	800a2da <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a208:	6a1b      	ldr	r3, [r3, #32]
 800a20a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a20c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a210:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a214:	f003 0304 	and.w	r3, r3, #4
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d05e      	beq.n	800a2da <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a21c:	68ba      	ldr	r2, [r7, #8]
 800a21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a220:	699b      	ldr	r3, [r3, #24]
 800a222:	441a      	add	r2, r3
 800a224:	2300      	movs	r3, #0
 800a226:	9300      	str	r3, [sp, #0]
 800a228:	2300      	movs	r3, #0
 800a22a:	2100      	movs	r1, #0
 800a22c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a22e:	f7ff fe05 	bl	8009e3c <xTimerGenericCommand>
 800a232:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a234:	6a3b      	ldr	r3, [r7, #32]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d14f      	bne.n	800a2da <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a23e:	f383 8811 	msr	BASEPRI, r3
 800a242:	f3bf 8f6f 	isb	sy
 800a246:	f3bf 8f4f 	dsb	sy
 800a24a:	61bb      	str	r3, [r7, #24]
}
 800a24c:	bf00      	nop
 800a24e:	e7fe      	b.n	800a24e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a252:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a256:	f023 0301 	bic.w	r3, r3, #1
 800a25a:	b2da      	uxtb	r2, r3
 800a25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a262:	e03a      	b.n	800a2da <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a266:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a26a:	f043 0301 	orr.w	r3, r3, #1
 800a26e:	b2da      	uxtb	r2, r3
 800a270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a272:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a276:	68ba      	ldr	r2, [r7, #8]
 800a278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a27a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a27e:	699b      	ldr	r3, [r3, #24]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d10a      	bne.n	800a29a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a288:	f383 8811 	msr	BASEPRI, r3
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	617b      	str	r3, [r7, #20]
}
 800a296:	bf00      	nop
 800a298:	e7fe      	b.n	800a298 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a29c:	699a      	ldr	r2, [r3, #24]
 800a29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a0:	18d1      	adds	r1, r2, r3
 800a2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2a8:	f7ff ff06 	bl	800a0b8 <prvInsertTimerInActiveList>
					break;
 800a2ac:	e015      	b.n	800a2da <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2b4:	f003 0302 	and.w	r3, r3, #2
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d103      	bne.n	800a2c4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a2bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2be:	f7fd f94d 	bl	800755c <vPortFree>
 800a2c2:	e00a      	b.n	800a2da <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2ca:	f023 0301 	bic.w	r3, r3, #1
 800a2ce:	b2da      	uxtb	r2, r3
 800a2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a2d6:	e000      	b.n	800a2da <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a2d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a2da:	4b08      	ldr	r3, [pc, #32]	; (800a2fc <prvProcessReceivedCommands+0x1c0>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	1d39      	adds	r1, r7, #4
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7fe f926 	bl	8008534 <xQueueReceive>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	f47f af2a 	bne.w	800a144 <prvProcessReceivedCommands+0x8>
	}
}
 800a2f0:	bf00      	nop
 800a2f2:	bf00      	nop
 800a2f4:	3730      	adds	r7, #48	; 0x30
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	2400a384 	.word	0x2400a384

0800a300 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b088      	sub	sp, #32
 800a304:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a306:	e048      	b.n	800a39a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a308:	4b2d      	ldr	r3, [pc, #180]	; (800a3c0 <prvSwitchTimerLists+0xc0>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	68db      	ldr	r3, [r3, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a312:	4b2b      	ldr	r3, [pc, #172]	; (800a3c0 <prvSwitchTimerLists+0xc0>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	68db      	ldr	r3, [r3, #12]
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	3304      	adds	r3, #4
 800a320:	4618      	mov	r0, r3
 800a322:	f7fd fac3 	bl	80078ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	6a1b      	ldr	r3, [r3, #32]
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a334:	f003 0304 	and.w	r3, r3, #4
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d02e      	beq.n	800a39a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	699b      	ldr	r3, [r3, #24]
 800a340:	693a      	ldr	r2, [r7, #16]
 800a342:	4413      	add	r3, r2
 800a344:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a346:	68ba      	ldr	r2, [r7, #8]
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d90e      	bls.n	800a36c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	68ba      	ldr	r2, [r7, #8]
 800a352:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	68fa      	ldr	r2, [r7, #12]
 800a358:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a35a:	4b19      	ldr	r3, [pc, #100]	; (800a3c0 <prvSwitchTimerLists+0xc0>)
 800a35c:	681a      	ldr	r2, [r3, #0]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	3304      	adds	r3, #4
 800a362:	4619      	mov	r1, r3
 800a364:	4610      	mov	r0, r2
 800a366:	f7fd fa68 	bl	800783a <vListInsert>
 800a36a:	e016      	b.n	800a39a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a36c:	2300      	movs	r3, #0
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	2300      	movs	r3, #0
 800a372:	693a      	ldr	r2, [r7, #16]
 800a374:	2100      	movs	r1, #0
 800a376:	68f8      	ldr	r0, [r7, #12]
 800a378:	f7ff fd60 	bl	8009e3c <xTimerGenericCommand>
 800a37c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d10a      	bne.n	800a39a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a388:	f383 8811 	msr	BASEPRI, r3
 800a38c:	f3bf 8f6f 	isb	sy
 800a390:	f3bf 8f4f 	dsb	sy
 800a394:	603b      	str	r3, [r7, #0]
}
 800a396:	bf00      	nop
 800a398:	e7fe      	b.n	800a398 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a39a:	4b09      	ldr	r3, [pc, #36]	; (800a3c0 <prvSwitchTimerLists+0xc0>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d1b1      	bne.n	800a308 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a3a4:	4b06      	ldr	r3, [pc, #24]	; (800a3c0 <prvSwitchTimerLists+0xc0>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a3aa:	4b06      	ldr	r3, [pc, #24]	; (800a3c4 <prvSwitchTimerLists+0xc4>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a04      	ldr	r2, [pc, #16]	; (800a3c0 <prvSwitchTimerLists+0xc0>)
 800a3b0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a3b2:	4a04      	ldr	r2, [pc, #16]	; (800a3c4 <prvSwitchTimerLists+0xc4>)
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	6013      	str	r3, [r2, #0]
}
 800a3b8:	bf00      	nop
 800a3ba:	3718      	adds	r7, #24
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}
 800a3c0:	2400a37c 	.word	0x2400a37c
 800a3c4:	2400a380 	.word	0x2400a380

0800a3c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a3ce:	f7fd fbc1 	bl	8007b54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a3d2:	4b15      	ldr	r3, [pc, #84]	; (800a428 <prvCheckForValidListAndQueue+0x60>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d120      	bne.n	800a41c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a3da:	4814      	ldr	r0, [pc, #80]	; (800a42c <prvCheckForValidListAndQueue+0x64>)
 800a3dc:	f7fd f9dc 	bl	8007798 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a3e0:	4813      	ldr	r0, [pc, #76]	; (800a430 <prvCheckForValidListAndQueue+0x68>)
 800a3e2:	f7fd f9d9 	bl	8007798 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a3e6:	4b13      	ldr	r3, [pc, #76]	; (800a434 <prvCheckForValidListAndQueue+0x6c>)
 800a3e8:	4a10      	ldr	r2, [pc, #64]	; (800a42c <prvCheckForValidListAndQueue+0x64>)
 800a3ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a3ec:	4b12      	ldr	r3, [pc, #72]	; (800a438 <prvCheckForValidListAndQueue+0x70>)
 800a3ee:	4a10      	ldr	r2, [pc, #64]	; (800a430 <prvCheckForValidListAndQueue+0x68>)
 800a3f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	9300      	str	r3, [sp, #0]
 800a3f6:	4b11      	ldr	r3, [pc, #68]	; (800a43c <prvCheckForValidListAndQueue+0x74>)
 800a3f8:	4a11      	ldr	r2, [pc, #68]	; (800a440 <prvCheckForValidListAndQueue+0x78>)
 800a3fa:	2110      	movs	r1, #16
 800a3fc:	200a      	movs	r0, #10
 800a3fe:	f7fd fd33 	bl	8007e68 <xQueueGenericCreateStatic>
 800a402:	4603      	mov	r3, r0
 800a404:	4a08      	ldr	r2, [pc, #32]	; (800a428 <prvCheckForValidListAndQueue+0x60>)
 800a406:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a408:	4b07      	ldr	r3, [pc, #28]	; (800a428 <prvCheckForValidListAndQueue+0x60>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d005      	beq.n	800a41c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a410:	4b05      	ldr	r3, [pc, #20]	; (800a428 <prvCheckForValidListAndQueue+0x60>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	490b      	ldr	r1, [pc, #44]	; (800a444 <prvCheckForValidListAndQueue+0x7c>)
 800a416:	4618      	mov	r0, r3
 800a418:	f7fe fc44 	bl	8008ca4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a41c:	f7fd fbca 	bl	8007bb4 <vPortExitCritical>
}
 800a420:	bf00      	nop
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	2400a384 	.word	0x2400a384
 800a42c:	2400a354 	.word	0x2400a354
 800a430:	2400a368 	.word	0x2400a368
 800a434:	2400a37c 	.word	0x2400a37c
 800a438:	2400a380 	.word	0x2400a380
 800a43c:	2400a430 	.word	0x2400a430
 800a440:	2400a390 	.word	0x2400a390
 800a444:	08026d6c 	.word	0x08026d6c

0800a448 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a448:	b480      	push	{r7}
 800a44a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800a44c:	4b3f      	ldr	r3, [pc, #252]	; (800a54c <SystemInit+0x104>)
 800a44e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a452:	4a3e      	ldr	r2, [pc, #248]	; (800a54c <SystemInit+0x104>)
 800a454:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800a45c:	4b3b      	ldr	r3, [pc, #236]	; (800a54c <SystemInit+0x104>)
 800a45e:	691b      	ldr	r3, [r3, #16]
 800a460:	4a3a      	ldr	r2, [pc, #232]	; (800a54c <SystemInit+0x104>)
 800a462:	f043 0310 	orr.w	r3, r3, #16
 800a466:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800a468:	4b39      	ldr	r3, [pc, #228]	; (800a550 <SystemInit+0x108>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f003 030f 	and.w	r3, r3, #15
 800a470:	2b06      	cmp	r3, #6
 800a472:	d807      	bhi.n	800a484 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800a474:	4b36      	ldr	r3, [pc, #216]	; (800a550 <SystemInit+0x108>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f023 030f 	bic.w	r3, r3, #15
 800a47c:	4a34      	ldr	r2, [pc, #208]	; (800a550 <SystemInit+0x108>)
 800a47e:	f043 0307 	orr.w	r3, r3, #7
 800a482:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800a484:	4b33      	ldr	r3, [pc, #204]	; (800a554 <SystemInit+0x10c>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a32      	ldr	r2, [pc, #200]	; (800a554 <SystemInit+0x10c>)
 800a48a:	f043 0301 	orr.w	r3, r3, #1
 800a48e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a490:	4b30      	ldr	r3, [pc, #192]	; (800a554 <SystemInit+0x10c>)
 800a492:	2200      	movs	r2, #0
 800a494:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800a496:	4b2f      	ldr	r3, [pc, #188]	; (800a554 <SystemInit+0x10c>)
 800a498:	681a      	ldr	r2, [r3, #0]
 800a49a:	492e      	ldr	r1, [pc, #184]	; (800a554 <SystemInit+0x10c>)
 800a49c:	4b2e      	ldr	r3, [pc, #184]	; (800a558 <SystemInit+0x110>)
 800a49e:	4013      	ands	r3, r2
 800a4a0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800a4a2:	4b2b      	ldr	r3, [pc, #172]	; (800a550 <SystemInit+0x108>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f003 0308 	and.w	r3, r3, #8
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d007      	beq.n	800a4be <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800a4ae:	4b28      	ldr	r3, [pc, #160]	; (800a550 <SystemInit+0x108>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f023 030f 	bic.w	r3, r3, #15
 800a4b6:	4a26      	ldr	r2, [pc, #152]	; (800a550 <SystemInit+0x108>)
 800a4b8:	f043 0307 	orr.w	r3, r3, #7
 800a4bc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800a4be:	4b25      	ldr	r3, [pc, #148]	; (800a554 <SystemInit+0x10c>)
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800a4c4:	4b23      	ldr	r3, [pc, #140]	; (800a554 <SystemInit+0x10c>)
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800a4ca:	4b22      	ldr	r3, [pc, #136]	; (800a554 <SystemInit+0x10c>)
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800a4d0:	4b20      	ldr	r3, [pc, #128]	; (800a554 <SystemInit+0x10c>)
 800a4d2:	4a22      	ldr	r2, [pc, #136]	; (800a55c <SystemInit+0x114>)
 800a4d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800a4d6:	4b1f      	ldr	r3, [pc, #124]	; (800a554 <SystemInit+0x10c>)
 800a4d8:	4a21      	ldr	r2, [pc, #132]	; (800a560 <SystemInit+0x118>)
 800a4da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800a4dc:	4b1d      	ldr	r3, [pc, #116]	; (800a554 <SystemInit+0x10c>)
 800a4de:	4a21      	ldr	r2, [pc, #132]	; (800a564 <SystemInit+0x11c>)
 800a4e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800a4e2:	4b1c      	ldr	r3, [pc, #112]	; (800a554 <SystemInit+0x10c>)
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800a4e8:	4b1a      	ldr	r3, [pc, #104]	; (800a554 <SystemInit+0x10c>)
 800a4ea:	4a1e      	ldr	r2, [pc, #120]	; (800a564 <SystemInit+0x11c>)
 800a4ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800a4ee:	4b19      	ldr	r3, [pc, #100]	; (800a554 <SystemInit+0x10c>)
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800a4f4:	4b17      	ldr	r3, [pc, #92]	; (800a554 <SystemInit+0x10c>)
 800a4f6:	4a1b      	ldr	r2, [pc, #108]	; (800a564 <SystemInit+0x11c>)
 800a4f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800a4fa:	4b16      	ldr	r3, [pc, #88]	; (800a554 <SystemInit+0x10c>)
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a500:	4b14      	ldr	r3, [pc, #80]	; (800a554 <SystemInit+0x10c>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a13      	ldr	r2, [pc, #76]	; (800a554 <SystemInit+0x10c>)
 800a506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a50a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800a50c:	4b11      	ldr	r3, [pc, #68]	; (800a554 <SystemInit+0x10c>)
 800a50e:	2200      	movs	r2, #0
 800a510:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800a512:	4b15      	ldr	r3, [pc, #84]	; (800a568 <SystemInit+0x120>)
 800a514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a516:	4a14      	ldr	r2, [pc, #80]	; (800a568 <SystemInit+0x120>)
 800a518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a51c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800a51e:	4b13      	ldr	r3, [pc, #76]	; (800a56c <SystemInit+0x124>)
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	4b13      	ldr	r3, [pc, #76]	; (800a570 <SystemInit+0x128>)
 800a524:	4013      	ands	r3, r2
 800a526:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a52a:	d202      	bcs.n	800a532 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800a52c:	4b11      	ldr	r3, [pc, #68]	; (800a574 <SystemInit+0x12c>)
 800a52e:	2201      	movs	r2, #1
 800a530:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800a532:	4b11      	ldr	r3, [pc, #68]	; (800a578 <SystemInit+0x130>)
 800a534:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800a538:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800a53a:	4b04      	ldr	r3, [pc, #16]	; (800a54c <SystemInit+0x104>)
 800a53c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a540:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800a542:	bf00      	nop
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr
 800a54c:	e000ed00 	.word	0xe000ed00
 800a550:	52002000 	.word	0x52002000
 800a554:	58024400 	.word	0x58024400
 800a558:	eaf6ed7f 	.word	0xeaf6ed7f
 800a55c:	02020200 	.word	0x02020200
 800a560:	01ff0000 	.word	0x01ff0000
 800a564:	01010280 	.word	0x01010280
 800a568:	580000c0 	.word	0x580000c0
 800a56c:	5c001000 	.word	0x5c001000
 800a570:	ffff0000 	.word	0xffff0000
 800a574:	51008108 	.word	0x51008108
 800a578:	52004000 	.word	0x52004000

0800a57c <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d103      	bne.n	800a594 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 800a58c:	f04f 33ff 	mov.w	r3, #4294967295
 800a590:	60fb      	str	r3, [r7, #12]
 800a592:	e02c      	b.n	800a5ee <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	685a      	ldr	r2, [r3, #4]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	891a      	ldrh	r2, [r3, #8]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	68da      	ldr	r2, [r3, #12]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	691a      	ldr	r2, [r3, #16]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	695a      	ldr	r2, [r3, #20]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	4a0c      	ldr	r2, [pc, #48]	; (800a5f8 <FT5336_RegisterBusIO+0x7c>)
 800a5c8:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	4a0b      	ldr	r2, [pc, #44]	; (800a5fc <FT5336_RegisterBusIO+0x80>)
 800a5ce:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d004      	beq.n	800a5e8 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4798      	blx	r3
 800a5e4:	60f8      	str	r0, [r7, #12]
 800a5e6:	e002      	b.n	800a5ee <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 800a5e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a5ec:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3710      	adds	r7, #16
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	0800a9f5 	.word	0x0800a9f5
 800a5fc:	0800aa29 	.word	0x0800aa29

0800a600 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	2201      	movs	r2, #1
 800a60e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	2201      	movs	r2, #1
 800a614:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	2205      	movs	r2, #5
 800a61a:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a622:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	f44f 7288 	mov.w	r2, #272	; 0x110
 800a62a:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 800a62c:	2300      	movs	r3, #0
}
 800a62e:	4618      	mov	r0, r3
 800a630:	370c      	adds	r7, #12
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr

0800a63a <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 800a63a:	b580      	push	{r7, lr}
 800a63c:	b084      	sub	sp, #16
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800a642:	2300      	movs	r3, #0
 800a644:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d10d      	bne.n	800a66c <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 f987 	bl	800a96a <FT5336_DisableIT>
 800a65c:	4602      	mov	r2, r0
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	4413      	add	r3, r2
 800a662:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2201      	movs	r2, #1
 800a668:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d002      	beq.n	800a678 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 800a672:	f04f 33ff 	mov.w	r3, #4294967295
 800a676:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a678:	68fb      	ldr	r3, [r7, #12]
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 800a682:	b480      	push	{r7}
 800a684:	b085      	sub	sp, #20
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800a68a:	2300      	movs	r3, #0
 800a68c:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a694:	2b01      	cmp	r3, #1
 800a696:	d103      	bne.n	800a6a0 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3714      	adds	r7, #20
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr

0800a6ae <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b084      	sub	sp, #16
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
 800a6b6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f103 0218 	add.w	r2, r3, #24
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	4610      	mov	r0, r2
 800a6c8:	f000 fa25 	bl	800ab16 <ft5336_radian_value>
 800a6cc:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f103 0218 	add.w	r2, r3, #24
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	b2db      	uxtb	r3, r3
 800a6da:	4619      	mov	r1, r3
 800a6dc:	4610      	mov	r0, r2
 800a6de:	f000 fa2b 	bl	800ab38 <ft5336_offset_left_right>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f103 0218 	add.w	r2, r3, #24
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	4610      	mov	r0, r2
 800a6fa:	f000 fa2e 	bl	800ab5a <ft5336_offset_up_down>
 800a6fe:	4602      	mov	r2, r0
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	4413      	add	r3, r2
 800a704:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f103 0218 	add.w	r2, r3, #24
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	68db      	ldr	r3, [r3, #12]
 800a710:	b2db      	uxtb	r3, r3
 800a712:	4619      	mov	r1, r3
 800a714:	4610      	mov	r0, r2
 800a716:	f000 fa31 	bl	800ab7c <ft5336_disatnce_left_right>
 800a71a:	4602      	mov	r2, r0
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	4413      	add	r3, r2
 800a720:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f103 0218 	add.w	r2, r3, #24
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	691b      	ldr	r3, [r3, #16]
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	4619      	mov	r1, r3
 800a730:	4610      	mov	r0, r2
 800a732:	f000 fa34 	bl	800ab9e <ft5336_distance_up_down>
 800a736:	4602      	mov	r2, r0
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	4413      	add	r3, r2
 800a73c:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f103 0218 	add.w	r2, r3, #24
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	695b      	ldr	r3, [r3, #20]
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	4619      	mov	r1, r3
 800a74c:	4610      	mov	r0, r2
 800a74e:	f000 fa37 	bl	800abc0 <ft5336_distance_zoom>
 800a752:	4602      	mov	r2, r0
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	4413      	add	r3, r2
 800a758:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d002      	beq.n	800a766 <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 800a760:	f04f 33ff 	mov.w	r3, #4294967295
 800a764:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a766:	68fb      	ldr	r3, [r7, #12]
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3710      	adds	r7, #16
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	3318      	adds	r3, #24
 800a77e:	6839      	ldr	r1, [r7, #0]
 800a780:	4618      	mov	r0, r3
 800a782:	f000 fa3f 	bl	800ac04 <ft5336_chip_id>
 800a786:	4603      	mov	r3, r0
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3708      	adds	r7, #8
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800a79a:	2300      	movs	r3, #0
 800a79c:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 f908 	bl	800a9b4 <FT5336_DetectTouch>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f103 0018 	add.w	r0, r3, #24
 800a7b2:	f107 0208 	add.w	r2, r7, #8
 800a7b6:	2304      	movs	r3, #4
 800a7b8:	2103      	movs	r1, #3
 800a7ba:	f000 f94f 	bl	800aa5c <ft5336_read_reg>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d003      	beq.n	800a7cc <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 800a7c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a7c8:	60fb      	str	r3, [r7, #12]
 800a7ca:	e00f      	b.n	800a7ec <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 800a7cc:	7a3b      	ldrb	r3, [r7, #8]
 800a7ce:	021b      	lsls	r3, r3, #8
 800a7d0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a7d4:	7a7a      	ldrb	r2, [r7, #9]
 800a7d6:	431a      	orrs	r2, r3
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 800a7dc:	7abb      	ldrb	r3, [r7, #10]
 800a7de:	021b      	lsls	r3, r3, #8
 800a7e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a7e4:	7afa      	ldrb	r2, [r7, #11]
 800a7e6:	431a      	orrs	r2, r3
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3710      	adds	r7, #16
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}

0800a7f6 <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b08c      	sub	sp, #48	; 0x30
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
 800a7fe:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800a800:	2300      	movs	r3, #0
 800a802:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 f8d5 	bl	800a9b4 <FT5336_DetectTouch>
 800a80a:	4603      	mov	r3, r0
 800a80c:	461a      	mov	r2, r3
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f103 0018 	add.w	r0, r3, #24
 800a818:	f107 0208 	add.w	r2, r7, #8
 800a81c:	231e      	movs	r3, #30
 800a81e:	2103      	movs	r1, #3
 800a820:	f000 f91c 	bl	800aa5c <ft5336_read_reg>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d003      	beq.n	800a832 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 800a82a:	f04f 33ff 	mov.w	r3, #4294967295
 800a82e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a830:	e077      	b.n	800a922 <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800a832:	2300      	movs	r3, #0
 800a834:	62bb      	str	r3, [r7, #40]	; 0x28
 800a836:	e071      	b.n	800a91c <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800a838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a83a:	4613      	mov	r3, r2
 800a83c:	005b      	lsls	r3, r3, #1
 800a83e:	4413      	add	r3, r2
 800a840:	005b      	lsls	r3, r3, #1
 800a842:	3330      	adds	r3, #48	; 0x30
 800a844:	443b      	add	r3, r7
 800a846:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a84a:	021b      	lsls	r3, r3, #8
 800a84c:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 800a850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a852:	4613      	mov	r3, r2
 800a854:	005b      	lsls	r3, r3, #1
 800a856:	4413      	add	r3, r2
 800a858:	005b      	lsls	r3, r3, #1
 800a85a:	3301      	adds	r3, #1
 800a85c:	3330      	adds	r3, #48	; 0x30
 800a85e:	443b      	add	r3, r7
 800a860:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a864:	ea41 0203 	orr.w	r2, r1, r3
 800a868:	6839      	ldr	r1, [r7, #0]
 800a86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	440b      	add	r3, r1
 800a870:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800a872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a874:	4613      	mov	r3, r2
 800a876:	005b      	lsls	r3, r3, #1
 800a878:	4413      	add	r3, r2
 800a87a:	005b      	lsls	r3, r3, #1
 800a87c:	3302      	adds	r3, #2
 800a87e:	3330      	adds	r3, #48	; 0x30
 800a880:	443b      	add	r3, r7
 800a882:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a886:	021b      	lsls	r3, r3, #8
 800a888:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 800a88c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a88e:	4613      	mov	r3, r2
 800a890:	005b      	lsls	r3, r3, #1
 800a892:	4413      	add	r3, r2
 800a894:	005b      	lsls	r3, r3, #1
 800a896:	3303      	adds	r3, #3
 800a898:	3330      	adds	r3, #48	; 0x30
 800a89a:	443b      	add	r3, r7
 800a89c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a8a0:	4319      	orrs	r1, r3
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8a6:	3206      	adds	r2, #6
 800a8a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 800a8ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	005b      	lsls	r3, r3, #1
 800a8b2:	4413      	add	r3, r2
 800a8b4:	005b      	lsls	r3, r3, #1
 800a8b6:	3330      	adds	r3, #48	; 0x30
 800a8b8:	443b      	add	r3, r7
 800a8ba:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a8be:	099b      	lsrs	r3, r3, #6
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8c8:	3210      	adds	r2, #16
 800a8ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800a8ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8d0:	4613      	mov	r3, r2
 800a8d2:	005b      	lsls	r3, r3, #1
 800a8d4:	4413      	add	r3, r2
 800a8d6:	005b      	lsls	r3, r3, #1
 800a8d8:	3304      	adds	r3, #4
 800a8da:	3330      	adds	r3, #48	; 0x30
 800a8dc:	443b      	add	r3, r7
 800a8de:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	683a      	ldr	r2, [r7, #0]
 800a8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e8:	330a      	adds	r3, #10
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	4413      	add	r3, r2
 800a8ee:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 800a8f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8f2:	4613      	mov	r3, r2
 800a8f4:	005b      	lsls	r3, r3, #1
 800a8f6:	4413      	add	r3, r2
 800a8f8:	005b      	lsls	r3, r3, #1
 800a8fa:	3305      	adds	r3, #5
 800a8fc:	3330      	adds	r3, #48	; 0x30
 800a8fe:	443b      	add	r3, r7
 800a900:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a904:	091b      	lsrs	r3, r3, #4
 800a906:	b2db      	uxtb	r3, r3
 800a908:	4619      	mov	r1, r3
 800a90a:	683a      	ldr	r2, [r7, #0]
 800a90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a90e:	3314      	adds	r3, #20
 800a910:	009b      	lsls	r3, r3, #2
 800a912:	4413      	add	r3, r2
 800a914:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800a916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a918:	3301      	adds	r3, #1
 800a91a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a91e:	2b04      	cmp	r3, #4
 800a920:	d98a      	bls.n	800a838 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 800a922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a924:	4618      	mov	r0, r3
 800a926:	3730      	adds	r7, #48	; 0x30
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	3318      	adds	r3, #24
 800a93a:	6839      	ldr	r1, [r7, #0]
 800a93c:	4618      	mov	r0, r3
 800a93e:	f000 f8bb 	bl	800aab8 <ft5336_gest_id>
 800a942:	4603      	mov	r3, r0
}
 800a944:	4618      	mov	r0, r3
 800a946:	3708      	adds	r7, #8
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b082      	sub	sp, #8
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	3318      	adds	r3, #24
 800a958:	2101      	movs	r1, #1
 800a95a:	4618      	mov	r0, r3
 800a95c:	f000 f941 	bl	800abe2 <ft5336_g_mode>
 800a960:	4603      	mov	r3, r0
}
 800a962:	4618      	mov	r0, r3
 800a964:	3708      	adds	r7, #8
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}

0800a96a <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 800a96a:	b580      	push	{r7, lr}
 800a96c:	b082      	sub	sp, #8
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	3318      	adds	r3, #24
 800a976:	2100      	movs	r1, #0
 800a978:	4618      	mov	r0, r3
 800a97a:	f000 f932 	bl	800abe2 <ft5336_g_mode>
 800a97e:	4603      	mov	r3, r0
}
 800a980:	4618      	mov	r0, r3
 800a982:	3708      	adds	r7, #8
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 800a988:	b480      	push	{r7}
 800a98a:	b083      	sub	sp, #12
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	370c      	adds	r7, #12
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr

0800a99e <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 800a99e:	b480      	push	{r7}
 800a9a0:	b083      	sub	sp, #12
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800a9a6:	2300      	movs	r3, #0
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	370c      	adds	r7, #12
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	3318      	adds	r3, #24
 800a9c0:	f107 020b 	add.w	r2, r7, #11
 800a9c4:	4611      	mov	r1, r2
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f000 f886 	bl	800aad8 <ft5336_td_status>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d003      	beq.n	800a9da <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 800a9d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a9d6:	60fb      	str	r3, [r7, #12]
 800a9d8:	e007      	b.n	800a9ea <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 800a9da:	7afb      	ldrb	r3, [r7, #11]
 800a9dc:	2b05      	cmp	r3, #5
 800a9de:	d902      	bls.n	800a9e6 <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	60fb      	str	r3, [r7, #12]
 800a9e4:	e001      	b.n	800a9ea <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 800a9e6:	7afb      	ldrb	r3, [r7, #11]
 800a9e8:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3710      	adds	r7, #16
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800a9f4:	b590      	push	{r4, r7, lr}
 800a9f6:	b087      	sub	sp, #28
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	607a      	str	r2, [r7, #4]
 800a9fe:	461a      	mov	r2, r3
 800aa00:	460b      	mov	r3, r1
 800aa02:	72fb      	strb	r3, [r7, #11]
 800aa04:	4613      	mov	r3, r2
 800aa06:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	691c      	ldr	r4, [r3, #16]
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	8918      	ldrh	r0, [r3, #8]
 800aa14:	7afb      	ldrb	r3, [r7, #11]
 800aa16:	b299      	uxth	r1, r3
 800aa18:	893b      	ldrh	r3, [r7, #8]
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	47a0      	blx	r4
 800aa1e:	4603      	mov	r3, r0
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	371c      	adds	r7, #28
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd90      	pop	{r4, r7, pc}

0800aa28 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800aa28:	b590      	push	{r4, r7, lr}
 800aa2a:	b087      	sub	sp, #28
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	607a      	str	r2, [r7, #4]
 800aa32:	461a      	mov	r2, r3
 800aa34:	460b      	mov	r3, r1
 800aa36:	72fb      	strb	r3, [r7, #11]
 800aa38:	4613      	mov	r3, r2
 800aa3a:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	68dc      	ldr	r4, [r3, #12]
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	8918      	ldrh	r0, [r3, #8]
 800aa48:	7afb      	ldrb	r3, [r7, #11]
 800aa4a:	b299      	uxth	r1, r3
 800aa4c:	893b      	ldrh	r3, [r7, #8]
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	47a0      	blx	r4
 800aa52:	4603      	mov	r3, r0
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	371c      	adds	r7, #28
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd90      	pop	{r4, r7, pc}

0800aa5c <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 800aa5c:	b590      	push	{r4, r7, lr}
 800aa5e:	b085      	sub	sp, #20
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	60f8      	str	r0, [r7, #12]
 800aa64:	607a      	str	r2, [r7, #4]
 800aa66:	461a      	mov	r2, r3
 800aa68:	460b      	mov	r3, r1
 800aa6a:	72fb      	strb	r3, [r7, #11]
 800aa6c:	4613      	mov	r3, r2
 800aa6e:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	685c      	ldr	r4, [r3, #4]
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6898      	ldr	r0, [r3, #8]
 800aa78:	893b      	ldrh	r3, [r7, #8]
 800aa7a:	7af9      	ldrb	r1, [r7, #11]
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	47a0      	blx	r4
 800aa80:	4603      	mov	r3, r0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3714      	adds	r7, #20
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd90      	pop	{r4, r7, pc}

0800aa8a <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800aa8a:	b590      	push	{r4, r7, lr}
 800aa8c:	b085      	sub	sp, #20
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	60f8      	str	r0, [r7, #12]
 800aa92:	607a      	str	r2, [r7, #4]
 800aa94:	461a      	mov	r2, r3
 800aa96:	460b      	mov	r3, r1
 800aa98:	72fb      	strb	r3, [r7, #11]
 800aa9a:	4613      	mov	r3, r2
 800aa9c:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681c      	ldr	r4, [r3, #0]
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	6898      	ldr	r0, [r3, #8]
 800aaa6:	893b      	ldrh	r3, [r7, #8]
 800aaa8:	7af9      	ldrb	r1, [r7, #11]
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	47a0      	blx	r4
 800aaae:	4603      	mov	r3, r0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3714      	adds	r7, #20
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd90      	pop	{r4, r7, pc}

0800aab8 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 800aac2:	2301      	movs	r3, #1
 800aac4:	683a      	ldr	r2, [r7, #0]
 800aac6:	2101      	movs	r1, #1
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f7ff ffc7 	bl	800aa5c <ft5336_read_reg>
 800aace:	4603      	mov	r3, r0
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3708      	adds	r7, #8
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 800aae2:	2301      	movs	r3, #1
 800aae4:	683a      	ldr	r2, [r7, #0]
 800aae6:	2102      	movs	r1, #2
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f7ff ffb7 	bl	800aa5c <ft5336_read_reg>
 800aaee:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d10a      	bne.n	800ab0c <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	f003 030f 	and.w	r3, r3, #15
 800aafe:	b2da      	uxtb	r2, r3
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	781a      	ldrb	r2, [r3, #0]
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3710      	adds	r7, #16
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b082      	sub	sp, #8
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
 800ab1e:	460b      	mov	r3, r1
 800ab20:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 800ab22:	1cfa      	adds	r2, r7, #3
 800ab24:	2301      	movs	r3, #1
 800ab26:	2191      	movs	r1, #145	; 0x91
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f7ff ffae 	bl	800aa8a <ft5336_write_reg>
 800ab2e:	4603      	mov	r3, r0
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3708      	adds	r7, #8
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	460b      	mov	r3, r1
 800ab42:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 800ab44:	1cfa      	adds	r2, r7, #3
 800ab46:	2301      	movs	r3, #1
 800ab48:	2192      	movs	r1, #146	; 0x92
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f7ff ff9d 	bl	800aa8a <ft5336_write_reg>
 800ab50:	4603      	mov	r3, r0
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3708      	adds	r7, #8
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}

0800ab5a <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b082      	sub	sp, #8
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
 800ab62:	460b      	mov	r3, r1
 800ab64:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 800ab66:	1cfa      	adds	r2, r7, #3
 800ab68:	2301      	movs	r3, #1
 800ab6a:	2193      	movs	r1, #147	; 0x93
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f7ff ff8c 	bl	800aa8a <ft5336_write_reg>
 800ab72:	4603      	mov	r3, r0
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3708      	adds	r7, #8
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	460b      	mov	r3, r1
 800ab86:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 800ab88:	1cfa      	adds	r2, r7, #3
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	2194      	movs	r1, #148	; 0x94
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f7ff ff7b 	bl	800aa8a <ft5336_write_reg>
 800ab94:	4603      	mov	r3, r0
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3708      	adds	r7, #8
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}

0800ab9e <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800ab9e:	b580      	push	{r7, lr}
 800aba0:	b082      	sub	sp, #8
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
 800aba6:	460b      	mov	r3, r1
 800aba8:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 800abaa:	1cfa      	adds	r2, r7, #3
 800abac:	2301      	movs	r3, #1
 800abae:	2195      	movs	r1, #149	; 0x95
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f7ff ff6a 	bl	800aa8a <ft5336_write_reg>
 800abb6:	4603      	mov	r3, r0
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3708      	adds	r7, #8
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	460b      	mov	r3, r1
 800abca:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 800abcc:	1cfa      	adds	r2, r7, #3
 800abce:	2301      	movs	r3, #1
 800abd0:	2196      	movs	r1, #150	; 0x96
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f7ff ff59 	bl	800aa8a <ft5336_write_reg>
 800abd8:	4603      	mov	r3, r0
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3708      	adds	r7, #8
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}

0800abe2 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b082      	sub	sp, #8
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
 800abea:	460b      	mov	r3, r1
 800abec:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 800abee:	1cfa      	adds	r2, r7, #3
 800abf0:	2301      	movs	r3, #1
 800abf2:	21a4      	movs	r1, #164	; 0xa4
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f7ff ff48 	bl	800aa8a <ft5336_write_reg>
 800abfa:	4603      	mov	r3, r0
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3708      	adds	r7, #8
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 800ac0e:	2301      	movs	r3, #1
 800ac10:	683a      	ldr	r2, [r7, #0]
 800ac12:	21a8      	movs	r1, #168	; 0xa8
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f7ff ff21 	bl	800aa5c <ft5336_read_reg>
 800ac1a:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d107      	bne.n	800ac32 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	781a      	ldrb	r2, [r3, #0]
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	781a      	ldrb	r2, [r3, #0]
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800ac32:	68fb      	ldr	r3, [r7, #12]
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3710      	adds	r7, #16
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <MT25TL01G_GetFlashInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo pointer on the configuration structure
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ac4a:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ac52:	605a      	str	r2, [r3, #4]
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ac5a:	60da      	str	r2, [r3, #12]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ac64:	fbb2 f2f3 	udiv	r2, r2, r3
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	609a      	str	r2, [r3, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ac74:	fbb2 f2f3 	udiv	r2, r2, r3
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	611a      	str	r2, [r3, #16]
  return MT25TL01G_OK;
 800ac7c:	2300      	movs	r3, #0
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	370c      	adds	r7, #12
 800ac82:	46bd      	mov	sp, r7
 800ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac88:	4770      	bx	lr

0800ac8a <MT25TL01G_Enter4BytesAddressMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_Enter4BytesAddressMode(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800ac8a:	b580      	push	{r7, lr}
 800ac8c:	b090      	sub	sp, #64	; 0x40
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	6078      	str	r0, [r7, #4]
 800ac92:	460b      	mov	r3, r1
 800ac94:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800ac96:	78fb      	ldrb	r3, [r7, #3]
 800ac98:	2b03      	cmp	r3, #3
 800ac9a:	d102      	bne.n	800aca2 <MT25TL01G_Enter4BytesAddressMode+0x18>
 800ac9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800aca0:	e001      	b.n	800aca6 <MT25TL01G_Enter4BytesAddressMode+0x1c>
 800aca2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aca6:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 800aca8:	23b7      	movs	r3, #183	; 0xb7
 800acaa:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800acac:	2300      	movs	r3, #0
 800acae:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800acb0:	2300      	movs	r3, #0
 800acb2:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800acb4:	2300      	movs	r3, #0
 800acb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800acb8:	2300      	movs	r3, #0
 800acba:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800acbc:	2300      	movs	r3, #0
 800acbe:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800acc0:	2300      	movs	r3, #0
 800acc2:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800acc4:	2300      	movs	r3, #0
 800acc6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /*write enable */
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 800acc8:	78fb      	ldrb	r3, [r7, #3]
 800acca:	4619      	mov	r1, r3
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 f860 	bl	800ad92 <MT25TL01G_WriteEnable>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d002      	beq.n	800acde <MT25TL01G_Enter4BytesAddressMode+0x54>
  {
    return MT25TL01G_ERROR_COMMAND;
 800acd8:	f06f 0301 	mvn.w	r3, #1
 800acdc:	e019      	b.n	800ad12 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }
  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800acde:	f107 0308 	add.w	r3, r7, #8
 800ace2:	f241 3288 	movw	r2, #5000	; 0x1388
 800ace6:	4619      	mov	r1, r3
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f004 fcff 	bl	800f6ec <HAL_QSPI_Command>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d002      	beq.n	800acfa <MT25TL01G_Enter4BytesAddressMode+0x70>
  {
    return MT25TL01G_ERROR_COMMAND;
 800acf4:	f06f 0301 	mvn.w	r3, #1
 800acf8:	e00b      	b.n	800ad12 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 800acfa:	78fb      	ldrb	r3, [r7, #3]
 800acfc:	4619      	mov	r1, r3
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 f80b 	bl	800ad1a <MT25TL01G_AutoPollingMemReady>
 800ad04:	4603      	mov	r3, r0
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d002      	beq.n	800ad10 <MT25TL01G_Enter4BytesAddressMode+0x86>
  {
    return MT25TL01G_ERROR_COMMAND;
 800ad0a:	f06f 0301 	mvn.w	r3, #1
 800ad0e:	e000      	b.n	800ad12 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  return MT25TL01G_OK;
 800ad10:	2300      	movs	r3, #0
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3740      	adds	r7, #64	; 0x40
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}

0800ad1a <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800ad1a:	b580      	push	{r7, lr}
 800ad1c:	b096      	sub	sp, #88	; 0x58
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	6078      	str	r0, [r7, #4]
 800ad22:	460b      	mov	r3, r1
 800ad24:	70fb      	strb	r3, [r7, #3]

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800ad26:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ad2a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 800ad2c:	2305      	movs	r3, #5
 800ad2e:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800ad30:	2300      	movs	r3, #0
 800ad32:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800ad34:	2300      	movs	r3, #0
 800ad36:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800ad38:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800ad3c:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 2;
 800ad3e:	2302      	movs	r3, #2
 800ad40:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800ad42:	2300      	movs	r3, #0
 800ad44:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800ad46:	2300      	movs	r3, #0
 800ad48:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	60bb      	str	r3, [r7, #8]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800ad52:	2300      	movs	r3, #0
 800ad54:	61bb      	str	r3, [r7, #24]
  s_config.Interval        = 0x10;
 800ad56:	2310      	movs	r3, #16
 800ad58:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800ad5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ad5e:	61fb      	str	r3, [r7, #28]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 800ad60:	f240 1301 	movw	r3, #257	; 0x101
 800ad64:	60fb      	str	r3, [r7, #12]
  s_config.StatusBytesSize = 2;
 800ad66:	2302      	movs	r3, #2
 800ad68:	617b      	str	r3, [r7, #20]

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ad6a:	f107 0208 	add.w	r2, r7, #8
 800ad6e:	f107 0120 	add.w	r1, r7, #32
 800ad72:	f241 3388 	movw	r3, #5000	; 0x1388
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f004 fe45 	bl	800fa06 <HAL_QSPI_AutoPolling>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d002      	beq.n	800ad88 <MT25TL01G_AutoPollingMemReady+0x6e>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800ad82:	f06f 0304 	mvn.w	r3, #4
 800ad86:	e000      	b.n	800ad8a <MT25TL01G_AutoPollingMemReady+0x70>
  }

  return MT25TL01G_OK;
 800ad88:	2300      	movs	r3, #0

}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3758      	adds	r7, #88	; 0x58
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <MT25TL01G_WriteEnable>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_WriteEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b096      	sub	sp, #88	; 0x58
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
 800ad9a:	460b      	mov	r3, r1
 800ad9c:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800ad9e:	78fb      	ldrb	r3, [r7, #3]
 800ada0:	2b03      	cmp	r3, #3
 800ada2:	d102      	bne.n	800adaa <MT25TL01G_WriteEnable+0x18>
 800ada4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ada8:	e001      	b.n	800adae <MT25TL01G_WriteEnable+0x1c>
 800adaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adae:	63bb      	str	r3, [r7, #56]	; 0x38

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 800adb0:	2306      	movs	r3, #6
 800adb2:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800adb4:	2300      	movs	r3, #0
 800adb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800adb8:	2300      	movs	r3, #0
 800adba:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 800adbc:	2300      	movs	r3, #0
 800adbe:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 800adc0:	2300      	movs	r3, #0
 800adc2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800adc4:	2300      	movs	r3, #0
 800adc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800adc8:	2300      	movs	r3, #0
 800adca:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800adcc:	2300      	movs	r3, #0
 800adce:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800add0:	f107 0320 	add.w	r3, r7, #32
 800add4:	f241 3288 	movw	r2, #5000	; 0x1388
 800add8:	4619      	mov	r1, r3
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f004 fc86 	bl	800f6ec <HAL_QSPI_Command>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d002      	beq.n	800adec <MT25TL01G_WriteEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800ade6:	f06f 0301 	mvn.w	r3, #1
 800adea:	e029      	b.n	800ae40 <MT25TL01G_WriteEnable+0xae>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800adec:	f240 2302 	movw	r3, #514	; 0x202
 800adf0:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800adf2:	f240 2302 	movw	r3, #514	; 0x202
 800adf6:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800adf8:	2300      	movs	r3, #0
 800adfa:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 2;
 800adfc:	2302      	movs	r3, #2
 800adfe:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 800ae00:	2310      	movs	r3, #16
 800ae02:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800ae04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ae08:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800ae0a:	2305      	movs	r3, #5
 800ae0c:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 800ae0e:	78fb      	ldrb	r3, [r7, #3]
 800ae10:	2b03      	cmp	r3, #3
 800ae12:	d102      	bne.n	800ae1a <MT25TL01G_WriteEnable+0x88>
 800ae14:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800ae18:	e001      	b.n	800ae1e <MT25TL01G_WriteEnable+0x8c>
 800ae1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ae1e:	647b      	str	r3, [r7, #68]	; 0x44


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ae20:	f107 0208 	add.w	r2, r7, #8
 800ae24:	f107 0120 	add.w	r1, r7, #32
 800ae28:	f241 3388 	movw	r3, #5000	; 0x1388
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f004 fdea 	bl	800fa06 <HAL_QSPI_AutoPolling>
 800ae32:	4603      	mov	r3, r0
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d002      	beq.n	800ae3e <MT25TL01G_WriteEnable+0xac>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800ae38:	f06f 0304 	mvn.w	r3, #4
 800ae3c:	e000      	b.n	800ae40 <MT25TL01G_WriteEnable+0xae>
  }

  return MT25TL01G_OK;
 800ae3e:	2300      	movs	r3, #0
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3758      	adds	r7, #88	; 0x58
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b090      	sub	sp, #64	; 0x40
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800ae50:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae54:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 800ae56:	2335      	movs	r3, #53	; 0x35
 800ae58:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800ae62:	2300      	movs	r3, #0
 800ae64:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800ae66:	2300      	movs	r3, #0
 800ae68:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800ae72:	2300      	movs	r3, #0
 800ae74:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ae76:	f107 0308 	add.w	r3, r7, #8
 800ae7a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae7e:	4619      	mov	r1, r3
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f004 fc33 	bl	800f6ec <HAL_QSPI_Command>
 800ae86:	4603      	mov	r3, r0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d002      	beq.n	800ae92 <MT25TL01G_EnterQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800ae8c:	f06f 0301 	mvn.w	r3, #1
 800ae90:	e000      	b.n	800ae94 <MT25TL01G_EnterQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 800ae92:	2300      	movs	r3, #0
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3740      	adds	r7, #64	; 0x40
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b090      	sub	sp, #64	; 0x40
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800aea4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aea8:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800aeaa:	23f5      	movs	r3, #245	; 0xf5
 800aeac:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800aeba:	2300      	movs	r3, #0
 800aebc:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800aebe:	2300      	movs	r3, #0
 800aec0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800aec2:	2300      	movs	r3, #0
 800aec4:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800aec6:	2300      	movs	r3, #0
 800aec8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800aeca:	f107 0308 	add.w	r3, r7, #8
 800aece:	f241 3288 	movw	r2, #5000	; 0x1388
 800aed2:	4619      	mov	r1, r3
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f004 fc09 	bl	800f6ec <HAL_QSPI_Command>
 800aeda:	4603      	mov	r3, r0
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d002      	beq.n	800aee6 <MT25TL01G_ExitQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800aee0:	f06f 0301 	mvn.w	r3, #1
 800aee4:	e000      	b.n	800aee8 <MT25TL01G_ExitQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 800aee6:	2300      	movs	r3, #0
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3740      	adds	r7, #64	; 0x40
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b092      	sub	sp, #72	; 0x48
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	460b      	mov	r3, r1
 800aefa:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800aefc:	78fb      	ldrb	r3, [r7, #3]
 800aefe:	2b03      	cmp	r3, #3
 800af00:	d83a      	bhi.n	800af78 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
 800af02:	a201      	add	r2, pc, #4	; (adr r2, 800af08 <MT25TL01G_EnableMemoryMappedModeDTR+0x18>)
 800af04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af08:	0800af19 	.word	0x0800af19
 800af0c:	0800af31 	.word	0x0800af31
 800af10:	0800af49 	.word	0x0800af49
 800af14:	0800af61 	.word	0x0800af61
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800af18:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af1c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 800af1e:	230e      	movs	r3, #14
 800af20:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800af22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af26:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800af28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800af2c:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800af2e:	e023      	b.n	800af78 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-1-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800af30:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af34:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 800af36:	233d      	movs	r3, #61	; 0x3d
 800af38:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800af3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800af40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800af44:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800af46:	e017      	b.n	800af78 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800af48:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af4c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 800af4e:	23ee      	movs	r3, #238	; 0xee
 800af50:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800af52:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800af56:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800af58:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800af5c:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800af5e:	e00b      	b.n	800af78 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800af60:	f44f 7340 	mov.w	r3, #768	; 0x300
 800af64:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 800af66:	23ed      	movs	r3, #237	; 0xed
 800af68:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800af6a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800af6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800af70:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800af74:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800af76:	bf00      	nop
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800af78:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800af7c:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800af7e:	2300      	movs	r3, #0
 800af80:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800af82:	2308      	movs	r3, #8
 800af84:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 800af86:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800af8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800af90:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800af92:	2300      	movs	r3, #0
 800af94:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800af96:	2300      	movs	r3, #0
 800af98:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800af9a:	2300      	movs	r3, #0
 800af9c:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800af9e:	f107 0208 	add.w	r2, r7, #8
 800afa2:	f107 0310 	add.w	r3, r7, #16
 800afa6:	4619      	mov	r1, r3
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f004 fda3 	bl	800faf4 <HAL_QSPI_MemoryMapped>
 800afae:	4603      	mov	r3, r0
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d002      	beq.n	800afba <MT25TL01G_EnableMemoryMappedModeDTR+0xca>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800afb4:	f06f 0305 	mvn.w	r3, #5
 800afb8:	e000      	b.n	800afbc <MT25TL01G_EnableMemoryMappedModeDTR+0xcc>
  }

  return MT25TL01G_OK;
 800afba:	2300      	movs	r3, #0
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3748      	adds	r7, #72	; 0x48
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b092      	sub	sp, #72	; 0x48
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	460b      	mov	r3, r1
 800afce:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800afd0:	78fb      	ldrb	r3, [r7, #3]
 800afd2:	2b03      	cmp	r3, #3
 800afd4:	d83a      	bhi.n	800b04c <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
 800afd6:	a201      	add	r2, pc, #4	; (adr r2, 800afdc <MT25TL01G_EnableMemoryMappedModeSTR+0x18>)
 800afd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afdc:	0800afed 	.word	0x0800afed
 800afe0:	0800b005 	.word	0x0800b005
 800afe4:	0800b01d 	.word	0x0800b01d
 800afe8:	0800b035 	.word	0x0800b035
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800afec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aff0:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 800aff2:	230c      	movs	r3, #12
 800aff4:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800aff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800affa:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800affc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b000:	637b      	str	r3, [r7, #52]	; 0x34


    break;
 800b002:	e023      	b.n	800b04c <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-2-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800b004:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b008:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800b00a:	23bc      	movs	r3, #188	; 0xbc
 800b00c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 800b00e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b012:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800b014:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b018:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800b01a:	e017      	b.n	800b04c <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800b01c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b020:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800b022:	23ec      	movs	r3, #236	; 0xec
 800b024:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800b026:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b02a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800b02c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800b030:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800b032:	e00b      	b.n	800b04c <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800b034:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b038:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800b03a:	23eb      	movs	r3, #235	; 0xeb
 800b03c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800b03e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b042:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800b044:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800b048:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800b04a:	bf00      	nop

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 800b04c:	2308      	movs	r3, #8
 800b04e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800b050:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b054:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b056:	2300      	movs	r3, #0
 800b058:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800b05a:	2300      	movs	r3, #0
 800b05c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800b05e:	2300      	movs	r3, #0
 800b060:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b062:	2300      	movs	r3, #0
 800b064:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800b066:	2300      	movs	r3, #0
 800b068:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800b06a:	2300      	movs	r3, #0
 800b06c:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800b06e:	f107 0208 	add.w	r2, r7, #8
 800b072:	f107 0310 	add.w	r3, r7, #16
 800b076:	4619      	mov	r1, r3
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f004 fd3b 	bl	800faf4 <HAL_QSPI_MemoryMapped>
 800b07e:	4603      	mov	r3, r0
 800b080:	2b00      	cmp	r3, #0
 800b082:	d002      	beq.n	800b08a <MT25TL01G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800b084:	f06f 0305 	mvn.w	r3, #5
 800b088:	e000      	b.n	800b08c <MT25TL01G_EnableMemoryMappedModeSTR+0xc8>
  }

  return MT25TL01G_OK;
 800b08a:	2300      	movs	r3, #0
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3748      	adds	r7, #72	; 0x48
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <MT25TL01G_ResetEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b090      	sub	sp, #64	; 0x40
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	460b      	mov	r3, r1
 800b09e:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800b0a0:	78fb      	ldrb	r3, [r7, #3]
 800b0a2:	2b03      	cmp	r3, #3
 800b0a4:	d102      	bne.n	800b0ac <MT25TL01G_ResetEnable+0x18>
 800b0a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b0aa:	e001      	b.n	800b0b0 <MT25TL01G_ResetEnable+0x1c>
 800b0ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0b0:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 800b0b2:	2366      	movs	r3, #102	; 0x66
 800b0b4:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b0d2:	f107 0308 	add.w	r3, r7, #8
 800b0d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0da:	4619      	mov	r1, r3
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f004 fb05 	bl	800f6ec <HAL_QSPI_Command>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d002      	beq.n	800b0ee <MT25TL01G_ResetEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800b0e8:	f06f 0301 	mvn.w	r3, #1
 800b0ec:	e000      	b.n	800b0f0 <MT25TL01G_ResetEnable+0x5c>
  }

  return MT25TL01G_OK;
 800b0ee:	2300      	movs	r3, #0
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3740      	adds	r7, #64	; 0x40
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <MT25TL01G_ResetMemory>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b090      	sub	sp, #64	; 0x40
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	460b      	mov	r3, r1
 800b102:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800b104:	78fb      	ldrb	r3, [r7, #3]
 800b106:	2b03      	cmp	r3, #3
 800b108:	d102      	bne.n	800b110 <MT25TL01G_ResetMemory+0x18>
 800b10a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b10e:	e001      	b.n	800b114 <MT25TL01G_ResetMemory+0x1c>
 800b110:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b114:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 800b116:	2399      	movs	r3, #153	; 0x99
 800b118:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800b11a:	2300      	movs	r3, #0
 800b11c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b11e:	2300      	movs	r3, #0
 800b120:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800b122:	2300      	movs	r3, #0
 800b124:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800b126:	2300      	movs	r3, #0
 800b128:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800b12a:	2300      	movs	r3, #0
 800b12c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800b12e:	2300      	movs	r3, #0
 800b130:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b132:	2300      	movs	r3, #0
 800b134:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b136:	f107 0308 	add.w	r3, r7, #8
 800b13a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b13e:	4619      	mov	r1, r3
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f004 fad3 	bl	800f6ec <HAL_QSPI_Command>
 800b146:	4603      	mov	r3, r0
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d002      	beq.n	800b152 <MT25TL01G_ResetMemory+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800b14c:	f06f 0301 	mvn.w	r3, #1
 800b150:	e000      	b.n	800b154 <MT25TL01G_ResetMemory+0x5c>
  }

  return MT25TL01G_OK;
 800b152:	2300      	movs	r3, #0
}
 800b154:	4618      	mov	r0, r3
 800b156:	3740      	adds	r7, #64	; 0x40
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b084      	sub	sp, #16
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 800b166:	f04f 33ff 	mov.w	r3, #4294967295
 800b16a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4619      	mov	r1, r3
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 f832 	bl	800b1dc <MT48LC4M32B2_ClockEnable>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d128      	bne.n	800b1d0 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 800b17e:	2001      	movs	r0, #1
 800b180:	f000 f8e2 	bl	800b348 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	4619      	mov	r1, r3
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 f84a 	bl	800b224 <MT48LC4M32B2_Precharge>
 800b190:	4603      	mov	r3, r0
 800b192:	2b00      	cmp	r3, #0
 800b194:	d11c      	bne.n	800b1d0 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	6819      	ldr	r1, [r3, #0]
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	461a      	mov	r2, r3
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 f897 	bl	800b2d4 <MT48LC4M32B2_RefreshMode>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d111      	bne.n	800b1d0 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 800b1ac:	6839      	ldr	r1, [r7, #0]
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 f85c 	bl	800b26c <MT48LC4M32B2_ModeRegConfig>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d10a      	bne.n	800b1d0 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	689b      	ldr	r3, [r3, #8]
 800b1be:	4619      	mov	r1, r3
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f000 f8ad 	bl	800b320 <MT48LC4M32B2_RefreshRate>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d101      	bne.n	800b1d0 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3710      	adds	r7, #16
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}
	...

0800b1dc <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b082      	sub	sp, #8
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 800b1e6:	4b0e      	ldr	r3, [pc, #56]	; (800b220 <MT48LC4M32B2_ClockEnable+0x44>)
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800b1ec:	4a0c      	ldr	r2, [pc, #48]	; (800b220 <MT48LC4M32B2_ClockEnable+0x44>)
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800b1f2:	4b0b      	ldr	r3, [pc, #44]	; (800b220 <MT48LC4M32B2_ClockEnable+0x44>)
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800b1f8:	4b09      	ldr	r3, [pc, #36]	; (800b220 <MT48LC4M32B2_ClockEnable+0x44>)
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800b1fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b202:	4907      	ldr	r1, [pc, #28]	; (800b220 <MT48LC4M32B2_ClockEnable+0x44>)
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f007 f88d 	bl	8012324 <HAL_SDRAM_SendCommand>
 800b20a:	4603      	mov	r3, r0
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d002      	beq.n	800b216 <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800b210:	f04f 33ff 	mov.w	r3, #4294967295
 800b214:	e000      	b.n	800b218 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800b216:	2300      	movs	r3, #0
  }
}
 800b218:	4618      	mov	r0, r3
 800b21a:	3708      	adds	r7, #8
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}
 800b220:	2400a480 	.word	0x2400a480

0800b224 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 800b22e:	4b0e      	ldr	r3, [pc, #56]	; (800b268 <MT48LC4M32B2_Precharge+0x44>)
 800b230:	2202      	movs	r2, #2
 800b232:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800b234:	4a0c      	ldr	r2, [pc, #48]	; (800b268 <MT48LC4M32B2_Precharge+0x44>)
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800b23a:	4b0b      	ldr	r3, [pc, #44]	; (800b268 <MT48LC4M32B2_Precharge+0x44>)
 800b23c:	2201      	movs	r2, #1
 800b23e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800b240:	4b09      	ldr	r3, [pc, #36]	; (800b268 <MT48LC4M32B2_Precharge+0x44>)
 800b242:	2200      	movs	r2, #0
 800b244:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800b246:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b24a:	4907      	ldr	r1, [pc, #28]	; (800b268 <MT48LC4M32B2_Precharge+0x44>)
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f007 f869 	bl	8012324 <HAL_SDRAM_SendCommand>
 800b252:	4603      	mov	r3, r0
 800b254:	2b00      	cmp	r3, #0
 800b256:	d002      	beq.n	800b25e <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800b258:	f04f 33ff 	mov.w	r3, #4294967295
 800b25c:	e000      	b.n	800b260 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800b25e:	2300      	movs	r3, #0
  }
}
 800b260:	4618      	mov	r0, r3
 800b262:	3708      	adds	r7, #8
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}
 800b268:	2400a480 	.word	0x2400a480

0800b26c <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b084      	sub	sp, #16
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800b27e:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 800b284:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 800b28a:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800b290:	4313      	orrs	r3, r2
 800b292:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 800b294:	4b0e      	ldr	r3, [pc, #56]	; (800b2d0 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800b296:	2204      	movs	r2, #4
 800b298:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4a0c      	ldr	r2, [pc, #48]	; (800b2d0 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800b2a0:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800b2a2:	4b0b      	ldr	r3, [pc, #44]	; (800b2d0 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800b2a4:	2201      	movs	r2, #1
 800b2a6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800b2a8:	4a09      	ldr	r2, [pc, #36]	; (800b2d0 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800b2ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b2b2:	4907      	ldr	r1, [pc, #28]	; (800b2d0 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f007 f835 	bl	8012324 <HAL_SDRAM_SendCommand>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d002      	beq.n	800b2c6 <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 800b2c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b2c4:	e000      	b.n	800b2c8 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800b2c6:	2300      	movs	r3, #0
  }
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3710      	adds	r7, #16
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	2400a480 	.word	0x2400a480

0800b2d4 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b084      	sub	sp, #16
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	60b9      	str	r1, [r7, #8]
 800b2de:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 800b2e0:	4a0e      	ldr	r2, [pc, #56]	; (800b31c <MT48LC4M32B2_RefreshMode+0x48>)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 800b2e6:	4a0d      	ldr	r2, [pc, #52]	; (800b31c <MT48LC4M32B2_RefreshMode+0x48>)
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 800b2ec:	4b0b      	ldr	r3, [pc, #44]	; (800b31c <MT48LC4M32B2_RefreshMode+0x48>)
 800b2ee:	2208      	movs	r2, #8
 800b2f0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800b2f2:	4b0a      	ldr	r3, [pc, #40]	; (800b31c <MT48LC4M32B2_RefreshMode+0x48>)
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800b2f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b2fc:	4907      	ldr	r1, [pc, #28]	; (800b31c <MT48LC4M32B2_RefreshMode+0x48>)
 800b2fe:	68f8      	ldr	r0, [r7, #12]
 800b300:	f007 f810 	bl	8012324 <HAL_SDRAM_SendCommand>
 800b304:	4603      	mov	r3, r0
 800b306:	2b00      	cmp	r3, #0
 800b308:	d002      	beq.n	800b310 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 800b30a:	f04f 33ff 	mov.w	r3, #4294967295
 800b30e:	e000      	b.n	800b312 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800b310:	2300      	movs	r3, #0
  }
}
 800b312:	4618      	mov	r0, r3
 800b314:	3710      	adds	r7, #16
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
 800b31a:	bf00      	nop
 800b31c:	2400a480 	.word	0x2400a480

0800b320 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b082      	sub	sp, #8
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800b32a:	6839      	ldr	r1, [r7, #0]
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f007 f82e 	bl	801238e <HAL_SDRAM_ProgramRefreshRate>
 800b332:	4603      	mov	r3, r0
 800b334:	2b00      	cmp	r3, #0
 800b336:	d002      	beq.n	800b33e <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 800b338:	f04f 33ff 	mov.w	r3, #4294967295
 800b33c:	e000      	b.n	800b340 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800b33e:	2300      	movs	r3, #0
  }
}
 800b340:	4618      	mov	r0, r3
 800b342:	3708      	adds	r7, #8
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 800b348:	b580      	push	{r7, lr}
 800b34a:	b084      	sub	sp, #16
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 800b350:	f001 fcfc 	bl	800cd4c <HAL_GetTick>
 800b354:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800b356:	bf00      	nop
 800b358:	f001 fcf8 	bl	800cd4c <HAL_GetTick>
 800b35c:	4602      	mov	r2, r0
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	1ad3      	subs	r3, r2, r3
 800b362:	687a      	ldr	r2, [r7, #4]
 800b364:	429a      	cmp	r2, r3
 800b366:	d8f7      	bhi.n	800b358 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 800b368:	2300      	movs	r3, #0
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
	...

0800b374 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b082      	sub	sp, #8
 800b378:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800b37a:	2300      	movs	r3, #0
 800b37c:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800b37e:	4b16      	ldr	r3, [pc, #88]	; (800b3d8 <BSP_I2C4_Init+0x64>)
 800b380:	4a16      	ldr	r2, [pc, #88]	; (800b3dc <BSP_I2C4_Init+0x68>)
 800b382:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 800b384:	4b16      	ldr	r3, [pc, #88]	; (800b3e0 <BSP_I2C4_Init+0x6c>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d11f      	bne.n	800b3cc <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 800b38c:	4b14      	ldr	r3, [pc, #80]	; (800b3e0 <BSP_I2C4_Init+0x6c>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	3301      	adds	r3, #1
 800b392:	4a13      	ldr	r2, [pc, #76]	; (800b3e0 <BSP_I2C4_Init+0x6c>)
 800b394:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800b396:	4810      	ldr	r0, [pc, #64]	; (800b3d8 <BSP_I2C4_Init+0x64>)
 800b398:	f002 fecc 	bl	800e134 <HAL_I2C_GetState>
 800b39c:	4603      	mov	r3, r0
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d114      	bne.n	800b3cc <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800b3a2:	480d      	ldr	r0, [pc, #52]	; (800b3d8 <BSP_I2C4_Init+0x64>)
 800b3a4:	f000 fb60 	bl	800ba68 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800b3a8:	f005 fe62 	bl	8011070 <HAL_RCC_GetPCLK2Freq>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	490d      	ldr	r1, [pc, #52]	; (800b3e4 <BSP_I2C4_Init+0x70>)
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f000 f8e3 	bl	800b57c <I2C_GetTiming>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	4807      	ldr	r0, [pc, #28]	; (800b3d8 <BSP_I2C4_Init+0x64>)
 800b3bc:	f000 f838 	bl	800b430 <MX_I2C4_Init>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d002      	beq.n	800b3cc <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800b3c6:	f06f 0307 	mvn.w	r3, #7
 800b3ca:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 800b3cc:	687b      	ldr	r3, [r7, #4]
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3708      	adds	r7, #8
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
 800b3d6:	bf00      	nop
 800b3d8:	2400ae98 	.word	0x2400ae98
 800b3dc:	58001c00 	.word	0x58001c00
 800b3e0:	2400a490 	.word	0x2400a490
 800b3e4:	000186a0 	.word	0x000186a0

0800b3e8 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800b3f2:	4b0d      	ldr	r3, [pc, #52]	; (800b428 <BSP_I2C4_DeInit+0x40>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	3b01      	subs	r3, #1
 800b3f8:	4a0b      	ldr	r2, [pc, #44]	; (800b428 <BSP_I2C4_DeInit+0x40>)
 800b3fa:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 800b3fc:	4b0a      	ldr	r3, [pc, #40]	; (800b428 <BSP_I2C4_DeInit+0x40>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d10b      	bne.n	800b41c <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 800b404:	4809      	ldr	r0, [pc, #36]	; (800b42c <BSP_I2C4_DeInit+0x44>)
 800b406:	f000 fb9b 	bl	800bb40 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800b40a:	4808      	ldr	r0, [pc, #32]	; (800b42c <BSP_I2C4_DeInit+0x44>)
 800b40c:	f002 fc20 	bl	800dc50 <HAL_I2C_DeInit>
 800b410:	4603      	mov	r3, r0
 800b412:	2b00      	cmp	r3, #0
 800b414:	d002      	beq.n	800b41c <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800b416:	f06f 0307 	mvn.w	r3, #7
 800b41a:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800b41c:	687b      	ldr	r3, [r7, #4]
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3708      	adds	r7, #8
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	2400a490 	.word	0x2400a490
 800b42c:	2400ae98 	.word	0x2400ae98

0800b430 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b43a:	2300      	movs	r3, #0
 800b43c:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	683a      	ldr	r2, [r7, #0]
 800b442:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2200      	movs	r2, #0
 800b448:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2201      	movs	r2, #1
 800b44e:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2200      	movs	r2, #0
 800b454:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2200      	movs	r2, #0
 800b45a:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2200      	movs	r2, #0
 800b460:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2200      	movs	r2, #0
 800b466:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2200      	movs	r2, #0
 800b46c:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f002 fb5e 	bl	800db30 <HAL_I2C_Init>
 800b474:	4603      	mov	r3, r0
 800b476:	2b00      	cmp	r3, #0
 800b478:	d002      	beq.n	800b480 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800b47a:	2301      	movs	r3, #1
 800b47c:	73fb      	strb	r3, [r7, #15]
 800b47e:	e014      	b.n	800b4aa <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800b480:	2300      	movs	r3, #0
 800b482:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800b484:	68b9      	ldr	r1, [r7, #8]
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f003 f914 	bl	800e6b4 <HAL_I2CEx_ConfigAnalogFilter>
 800b48c:	4603      	mov	r3, r0
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d002      	beq.n	800b498 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800b492:	2301      	movs	r3, #1
 800b494:	73fb      	strb	r3, [r7, #15]
 800b496:	e008      	b.n	800b4aa <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800b498:	2100      	movs	r1, #0
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f003 f955 	bl	800e74a <HAL_I2CEx_ConfigDigitalFilter>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d001      	beq.n	800b4aa <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800b4aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3710      	adds	r7, #16
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b088      	sub	sp, #32
 800b4b8:	af02      	add	r7, sp, #8
 800b4ba:	60ba      	str	r2, [r7, #8]
 800b4bc:	461a      	mov	r2, r3
 800b4be:	4603      	mov	r3, r0
 800b4c0:	81fb      	strh	r3, [r7, #14]
 800b4c2:	460b      	mov	r3, r1
 800b4c4:	81bb      	strh	r3, [r7, #12]
 800b4c6:	4613      	mov	r3, r2
 800b4c8:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800b4ca:	89b9      	ldrh	r1, [r7, #12]
 800b4cc:	89f8      	ldrh	r0, [r7, #14]
 800b4ce:	88fb      	ldrh	r3, [r7, #6]
 800b4d0:	9300      	str	r3, [sp, #0]
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	f000 fb57 	bl	800bb88 <I2C4_WriteReg>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d102      	bne.n	800b4e6 <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	617b      	str	r3, [r7, #20]
 800b4e4:	e00c      	b.n	800b500 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800b4e6:	4809      	ldr	r0, [pc, #36]	; (800b50c <BSP_I2C4_WriteReg+0x58>)
 800b4e8:	f002 fe32 	bl	800e150 <HAL_I2C_GetError>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	2b04      	cmp	r3, #4
 800b4f0:	d103      	bne.n	800b4fa <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800b4f2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800b4f6:	617b      	str	r3, [r7, #20]
 800b4f8:	e002      	b.n	800b500 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800b4fa:	f06f 0303 	mvn.w	r3, #3
 800b4fe:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800b500:	697b      	ldr	r3, [r7, #20]
}
 800b502:	4618      	mov	r0, r3
 800b504:	3718      	adds	r7, #24
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	2400ae98 	.word	0x2400ae98

0800b510 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b088      	sub	sp, #32
 800b514:	af02      	add	r7, sp, #8
 800b516:	60ba      	str	r2, [r7, #8]
 800b518:	461a      	mov	r2, r3
 800b51a:	4603      	mov	r3, r0
 800b51c:	81fb      	strh	r3, [r7, #14]
 800b51e:	460b      	mov	r3, r1
 800b520:	81bb      	strh	r3, [r7, #12]
 800b522:	4613      	mov	r3, r2
 800b524:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800b526:	89b9      	ldrh	r1, [r7, #12]
 800b528:	89f8      	ldrh	r0, [r7, #14]
 800b52a:	88fb      	ldrh	r3, [r7, #6]
 800b52c:	9300      	str	r3, [sp, #0]
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	2201      	movs	r2, #1
 800b532:	f000 fb4f 	bl	800bbd4 <I2C4_ReadReg>
 800b536:	4603      	mov	r3, r0
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d102      	bne.n	800b542 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800b53c:	2300      	movs	r3, #0
 800b53e:	617b      	str	r3, [r7, #20]
 800b540:	e00c      	b.n	800b55c <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800b542:	4809      	ldr	r0, [pc, #36]	; (800b568 <BSP_I2C4_ReadReg+0x58>)
 800b544:	f002 fe04 	bl	800e150 <HAL_I2C_GetError>
 800b548:	4603      	mov	r3, r0
 800b54a:	2b04      	cmp	r3, #4
 800b54c:	d103      	bne.n	800b556 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800b54e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800b552:	617b      	str	r3, [r7, #20]
 800b554:	e002      	b.n	800b55c <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800b556:	f06f 0303 	mvn.w	r3, #3
 800b55a:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800b55c:	697b      	ldr	r3, [r7, #20]
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3718      	adds	r7, #24
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	2400ae98 	.word	0x2400ae98

0800b56c <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800b570:	f001 fbec 	bl	800cd4c <HAL_GetTick>
 800b574:	4603      	mov	r3, r0
}
 800b576:	4618      	mov	r0, r3
 800b578:	bd80      	pop	{r7, pc}
	...

0800b57c <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b086      	sub	sp, #24
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800b586:	2300      	movs	r3, #0
 800b588:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d06b      	beq.n	800b668 <I2C_GetTiming+0xec>
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d068      	beq.n	800b668 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800b596:	2300      	movs	r3, #0
 800b598:	613b      	str	r3, [r7, #16]
 800b59a:	e060      	b.n	800b65e <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800b59c:	4a35      	ldr	r2, [pc, #212]	; (800b674 <I2C_GetTiming+0xf8>)
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	212c      	movs	r1, #44	; 0x2c
 800b5a2:	fb01 f303 	mul.w	r3, r1, r3
 800b5a6:	4413      	add	r3, r2
 800b5a8:	3304      	adds	r3, #4
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	683a      	ldr	r2, [r7, #0]
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d352      	bcc.n	800b658 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800b5b2:	4a30      	ldr	r2, [pc, #192]	; (800b674 <I2C_GetTiming+0xf8>)
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	212c      	movs	r1, #44	; 0x2c
 800b5b8:	fb01 f303 	mul.w	r3, r1, r3
 800b5bc:	4413      	add	r3, r2
 800b5be:	3308      	adds	r3, #8
 800b5c0:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800b5c2:	683a      	ldr	r2, [r7, #0]
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d847      	bhi.n	800b658 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800b5c8:	6939      	ldr	r1, [r7, #16]
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 f856 	bl	800b67c <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800b5d0:	6939      	ldr	r1, [r7, #16]
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f000 f940 	bl	800b858 <I2C_Compute_SCLL_SCLH>
 800b5d8:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2b7f      	cmp	r3, #127	; 0x7f
 800b5de:	d842      	bhi.n	800b666 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800b5e0:	4925      	ldr	r1, [pc, #148]	; (800b678 <I2C_GetTiming+0xfc>)
 800b5e2:	68fa      	ldr	r2, [r7, #12]
 800b5e4:	4613      	mov	r3, r2
 800b5e6:	009b      	lsls	r3, r3, #2
 800b5e8:	4413      	add	r3, r2
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	440b      	add	r3, r1
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800b5f2:	4821      	ldr	r0, [pc, #132]	; (800b678 <I2C_GetTiming+0xfc>)
 800b5f4:	68fa      	ldr	r2, [r7, #12]
 800b5f6:	4613      	mov	r3, r2
 800b5f8:	009b      	lsls	r3, r3, #2
 800b5fa:	4413      	add	r3, r2
 800b5fc:	009b      	lsls	r3, r3, #2
 800b5fe:	4403      	add	r3, r0
 800b600:	3304      	adds	r3, #4
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	051b      	lsls	r3, r3, #20
 800b606:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800b60a:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800b60c:	481a      	ldr	r0, [pc, #104]	; (800b678 <I2C_GetTiming+0xfc>)
 800b60e:	68fa      	ldr	r2, [r7, #12]
 800b610:	4613      	mov	r3, r2
 800b612:	009b      	lsls	r3, r3, #2
 800b614:	4413      	add	r3, r2
 800b616:	009b      	lsls	r3, r3, #2
 800b618:	4403      	add	r3, r0
 800b61a:	3308      	adds	r3, #8
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	041b      	lsls	r3, r3, #16
 800b620:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800b624:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800b626:	4814      	ldr	r0, [pc, #80]	; (800b678 <I2C_GetTiming+0xfc>)
 800b628:	68fa      	ldr	r2, [r7, #12]
 800b62a:	4613      	mov	r3, r2
 800b62c:	009b      	lsls	r3, r3, #2
 800b62e:	4413      	add	r3, r2
 800b630:	009b      	lsls	r3, r3, #2
 800b632:	4403      	add	r3, r0
 800b634:	330c      	adds	r3, #12
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	021b      	lsls	r3, r3, #8
 800b63a:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800b63c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800b63e:	480e      	ldr	r0, [pc, #56]	; (800b678 <I2C_GetTiming+0xfc>)
 800b640:	68fa      	ldr	r2, [r7, #12]
 800b642:	4613      	mov	r3, r2
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	4413      	add	r3, r2
 800b648:	009b      	lsls	r3, r3, #2
 800b64a:	4403      	add	r3, r0
 800b64c:	3310      	adds	r3, #16
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800b652:	430b      	orrs	r3, r1
 800b654:	617b      	str	r3, [r7, #20]
        }
        break;
 800b656:	e006      	b.n	800b666 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	3301      	adds	r3, #1
 800b65c:	613b      	str	r3, [r7, #16]
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	2b02      	cmp	r3, #2
 800b662:	d99b      	bls.n	800b59c <I2C_GetTiming+0x20>
 800b664:	e000      	b.n	800b668 <I2C_GetTiming+0xec>
        break;
 800b666:	bf00      	nop
      }
    }
  }

  return ret;
 800b668:	697b      	ldr	r3, [r7, #20]
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3718      	adds	r7, #24
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	bf00      	nop
 800b674:	08027858 	.word	0x08027858
 800b678:	2400a494 	.word	0x2400a494

0800b67c <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b08f      	sub	sp, #60	; 0x3c
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800b686:	2310      	movs	r3, #16
 800b688:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	085a      	lsrs	r2, r3, #1
 800b68e:	4b6e      	ldr	r3, [pc, #440]	; (800b848 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800b690:	4413      	add	r3, r2
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	fbb3 f3f2 	udiv	r3, r3, r2
 800b698:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800b69a:	2332      	movs	r3, #50	; 0x32
 800b69c:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800b69e:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b6a2:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800b6a4:	4a69      	ldr	r2, [pc, #420]	; (800b84c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	212c      	movs	r1, #44	; 0x2c
 800b6aa:	fb01 f303 	mul.w	r3, r1, r3
 800b6ae:	4413      	add	r3, r2
 800b6b0:	3324      	adds	r3, #36	; 0x24
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	4a65      	ldr	r2, [pc, #404]	; (800b84c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	212c      	movs	r1, #44	; 0x2c
 800b6bc:	fb01 f303 	mul.w	r3, r1, r3
 800b6c0:	4413      	add	r3, r2
 800b6c2:	330c      	adds	r3, #12
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800b6c8:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800b6ca:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800b6cc:	495f      	ldr	r1, [pc, #380]	; (800b84c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	202c      	movs	r0, #44	; 0x2c
 800b6d2:	fb00 f303 	mul.w	r3, r0, r3
 800b6d6:	440b      	add	r3, r1
 800b6d8:	3328      	adds	r3, #40	; 0x28
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	3303      	adds	r3, #3
 800b6de:	69f9      	ldr	r1, [r7, #28]
 800b6e0:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800b6e4:	1ad3      	subs	r3, r2, r3
 800b6e6:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800b6e8:	4a58      	ldr	r2, [pc, #352]	; (800b84c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	212c      	movs	r1, #44	; 0x2c
 800b6ee:	fb01 f303 	mul.w	r3, r1, r3
 800b6f2:	4413      	add	r3, r2
 800b6f4:	3310      	adds	r3, #16
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	4a54      	ldr	r2, [pc, #336]	; (800b84c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	212c      	movs	r1, #44	; 0x2c
 800b700:	fb01 f303 	mul.w	r3, r1, r3
 800b704:	4413      	add	r3, r2
 800b706:	3320      	adds	r3, #32
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800b70c:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800b70e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800b710:	494e      	ldr	r1, [pc, #312]	; (800b84c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	202c      	movs	r0, #44	; 0x2c
 800b716:	fb00 f303 	mul.w	r3, r0, r3
 800b71a:	440b      	add	r3, r1
 800b71c:	3328      	adds	r3, #40	; 0x28
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	3304      	adds	r3, #4
 800b722:	69f9      	ldr	r1, [r7, #28]
 800b724:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800b728:	1ad3      	subs	r3, r2, r3
 800b72a:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800b72c:	4a47      	ldr	r2, [pc, #284]	; (800b84c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	212c      	movs	r1, #44	; 0x2c
 800b732:	fb01 f303 	mul.w	r3, r1, r3
 800b736:	4413      	add	r3, r2
 800b738:	3320      	adds	r3, #32
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4618      	mov	r0, r3
 800b73e:	4a43      	ldr	r2, [pc, #268]	; (800b84c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	212c      	movs	r1, #44	; 0x2c
 800b744:	fb01 f303 	mul.w	r3, r1, r3
 800b748:	4413      	add	r3, r2
 800b74a:	3314      	adds	r3, #20
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	4403      	add	r3, r0
 800b750:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800b752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b754:	2b00      	cmp	r3, #0
 800b756:	dc01      	bgt.n	800b75c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800b758:	2300      	movs	r3, #0
 800b75a:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 800b75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b75e:	2b00      	cmp	r3, #0
 800b760:	dc01      	bgt.n	800b766 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800b762:	2300      	movs	r3, #0
 800b764:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800b766:	2300      	movs	r3, #0
 800b768:	62bb      	str	r3, [r7, #40]	; 0x28
 800b76a:	e062      	b.n	800b832 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800b76c:	2300      	movs	r3, #0
 800b76e:	627b      	str	r3, [r7, #36]	; 0x24
 800b770:	e059      	b.n	800b826 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800b772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b774:	3301      	adds	r3, #1
 800b776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b778:	3201      	adds	r2, #1
 800b77a:	fb03 f202 	mul.w	r2, r3, r2
 800b77e:	69fb      	ldr	r3, [r7, #28]
 800b780:	fb02 f303 	mul.w	r3, r2, r3
 800b784:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	68fa      	ldr	r2, [r7, #12]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d348      	bcc.n	800b820 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800b78e:	2300      	movs	r3, #0
 800b790:	623b      	str	r3, [r7, #32]
 800b792:	e042      	b.n	800b81a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800b794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b796:	3301      	adds	r3, #1
 800b798:	6a3a      	ldr	r2, [r7, #32]
 800b79a:	fb03 f202 	mul.w	r2, r3, r2
 800b79e:	69fb      	ldr	r3, [r7, #28]
 800b7a0:	fb02 f303 	mul.w	r3, r2, r3
 800b7a4:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800b7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a8:	68ba      	ldr	r2, [r7, #8]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d332      	bcc.n	800b814 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800b7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b0:	68ba      	ldr	r2, [r7, #8]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d82e      	bhi.n	800b814 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800b7b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d02a      	beq.n	800b814 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800b7be:	4b24      	ldr	r3, [pc, #144]	; (800b850 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b7c0:	681a      	ldr	r2, [r3, #0]
 800b7c2:	4924      	ldr	r1, [pc, #144]	; (800b854 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800b7c4:	4613      	mov	r3, r2
 800b7c6:	009b      	lsls	r3, r3, #2
 800b7c8:	4413      	add	r3, r2
 800b7ca:	009b      	lsls	r3, r3, #2
 800b7cc:	440b      	add	r3, r1
 800b7ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7d0:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800b7d2:	4b1f      	ldr	r3, [pc, #124]	; (800b850 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b7d4:	681a      	ldr	r2, [r3, #0]
 800b7d6:	491f      	ldr	r1, [pc, #124]	; (800b854 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800b7d8:	4613      	mov	r3, r2
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	4413      	add	r3, r2
 800b7de:	009b      	lsls	r3, r3, #2
 800b7e0:	440b      	add	r3, r1
 800b7e2:	3304      	adds	r3, #4
 800b7e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7e6:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800b7e8:	4b19      	ldr	r3, [pc, #100]	; (800b850 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b7ea:	681a      	ldr	r2, [r3, #0]
 800b7ec:	4919      	ldr	r1, [pc, #100]	; (800b854 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800b7ee:	4613      	mov	r3, r2
 800b7f0:	009b      	lsls	r3, r3, #2
 800b7f2:	4413      	add	r3, r2
 800b7f4:	009b      	lsls	r3, r3, #2
 800b7f6:	440b      	add	r3, r1
 800b7f8:	3308      	adds	r3, #8
 800b7fa:	6a3a      	ldr	r2, [r7, #32]
 800b7fc:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800b7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b800:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 800b802:	4b13      	ldr	r3, [pc, #76]	; (800b850 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	3301      	adds	r3, #1
 800b808:	4a11      	ldr	r2, [pc, #68]	; (800b850 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b80a:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800b80c:	4b10      	ldr	r3, [pc, #64]	; (800b850 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	2b7f      	cmp	r3, #127	; 0x7f
 800b812:	d812      	bhi.n	800b83a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800b814:	6a3b      	ldr	r3, [r7, #32]
 800b816:	3301      	adds	r3, #1
 800b818:	623b      	str	r3, [r7, #32]
 800b81a:	6a3b      	ldr	r3, [r7, #32]
 800b81c:	2b0f      	cmp	r3, #15
 800b81e:	d9b9      	bls.n	800b794 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800b820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b822:	3301      	adds	r3, #1
 800b824:	627b      	str	r3, [r7, #36]	; 0x24
 800b826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b828:	2b0f      	cmp	r3, #15
 800b82a:	d9a2      	bls.n	800b772 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800b82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b82e:	3301      	adds	r3, #1
 800b830:	62bb      	str	r3, [r7, #40]	; 0x28
 800b832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b834:	2b0f      	cmp	r3, #15
 800b836:	d999      	bls.n	800b76c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800b838:	e000      	b.n	800b83c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800b83a:	bf00      	nop
          }
        }
      }
    }
  }
}
 800b83c:	373c      	adds	r7, #60	; 0x3c
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	3b9aca00 	.word	0x3b9aca00
 800b84c:	08027858 	.word	0x08027858
 800b850:	2400ae94 	.word	0x2400ae94
 800b854:	2400a494 	.word	0x2400a494

0800b858 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800b858:	b480      	push	{r7}
 800b85a:	b093      	sub	sp, #76	; 0x4c
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800b862:	f04f 33ff 	mov.w	r3, #4294967295
 800b866:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	085a      	lsrs	r2, r3, #1
 800b86c:	4b7a      	ldr	r3, [pc, #488]	; (800ba58 <I2C_Compute_SCLL_SCLH+0x200>)
 800b86e:	4413      	add	r3, r2
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	fbb3 f3f2 	udiv	r3, r3, r2
 800b876:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 800b878:	4a78      	ldr	r2, [pc, #480]	; (800ba5c <I2C_Compute_SCLL_SCLH+0x204>)
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	212c      	movs	r1, #44	; 0x2c
 800b87e:	fb01 f303 	mul.w	r3, r1, r3
 800b882:	4413      	add	r3, r2
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	085a      	lsrs	r2, r3, #1
 800b888:	4b73      	ldr	r3, [pc, #460]	; (800ba58 <I2C_Compute_SCLL_SCLH+0x200>)
 800b88a:	4413      	add	r3, r2
 800b88c:	4973      	ldr	r1, [pc, #460]	; (800ba5c <I2C_Compute_SCLL_SCLH+0x204>)
 800b88e:	683a      	ldr	r2, [r7, #0]
 800b890:	202c      	movs	r0, #44	; 0x2c
 800b892:	fb00 f202 	mul.w	r2, r0, r2
 800b896:	440a      	add	r2, r1
 800b898:	6812      	ldr	r2, [r2, #0]
 800b89a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b89e:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800b8a0:	2332      	movs	r3, #50	; 0x32
 800b8a2:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800b8a4:	4a6d      	ldr	r2, [pc, #436]	; (800ba5c <I2C_Compute_SCLL_SCLH+0x204>)
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	212c      	movs	r1, #44	; 0x2c
 800b8aa:	fb01 f303 	mul.w	r3, r1, r3
 800b8ae:	4413      	add	r3, r2
 800b8b0:	3328      	adds	r3, #40	; 0x28
 800b8b2:	681a      	ldr	r2, [r3, #0]
 800b8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b6:	fb02 f303 	mul.w	r3, r2, r3
 800b8ba:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800b8bc:	4a67      	ldr	r2, [pc, #412]	; (800ba5c <I2C_Compute_SCLL_SCLH+0x204>)
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	212c      	movs	r1, #44	; 0x2c
 800b8c2:	fb01 f303 	mul.w	r3, r1, r3
 800b8c6:	4413      	add	r3, r2
 800b8c8:	3304      	adds	r3, #4
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4a62      	ldr	r2, [pc, #392]	; (800ba58 <I2C_Compute_SCLL_SCLH+0x200>)
 800b8ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8d2:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 800b8d4:	4a61      	ldr	r2, [pc, #388]	; (800ba5c <I2C_Compute_SCLL_SCLH+0x204>)
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	212c      	movs	r1, #44	; 0x2c
 800b8da:	fb01 f303 	mul.w	r3, r1, r3
 800b8de:	4413      	add	r3, r2
 800b8e0:	3308      	adds	r3, #8
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	4a5c      	ldr	r2, [pc, #368]	; (800ba58 <I2C_Compute_SCLL_SCLH+0x200>)
 800b8e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8ea:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800b8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ee:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	637b      	str	r3, [r7, #52]	; 0x34
 800b8f4:	e0a3      	b.n	800ba3e <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800b8f6:	495a      	ldr	r1, [pc, #360]	; (800ba60 <I2C_Compute_SCLL_SCLH+0x208>)
 800b8f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b8fa:	4613      	mov	r3, r2
 800b8fc:	009b      	lsls	r3, r3, #2
 800b8fe:	4413      	add	r3, r2
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	440b      	add	r3, r1
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	1c5a      	adds	r2, r3, #1
 800b908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b90a:	fb02 f303 	mul.w	r3, r2, r3
 800b90e:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800b910:	2300      	movs	r3, #0
 800b912:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b914:	e08c      	b.n	800ba30 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800b916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b918:	6a3b      	ldr	r3, [r7, #32]
 800b91a:	441a      	add	r2, r3
 800b91c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b91e:	3301      	adds	r3, #1
 800b920:	6979      	ldr	r1, [r7, #20]
 800b922:	fb03 f101 	mul.w	r1, r3, r1
 800b926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b928:	005b      	lsls	r3, r3, #1
 800b92a:	440b      	add	r3, r1
 800b92c:	4413      	add	r3, r2
 800b92e:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800b930:	4a4a      	ldr	r2, [pc, #296]	; (800ba5c <I2C_Compute_SCLL_SCLH+0x204>)
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	212c      	movs	r1, #44	; 0x2c
 800b936:	fb01 f303 	mul.w	r3, r1, r3
 800b93a:	4413      	add	r3, r2
 800b93c:	3318      	adds	r3, #24
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	693a      	ldr	r2, [r7, #16]
 800b942:	429a      	cmp	r2, r3
 800b944:	d971      	bls.n	800ba2a <I2C_Compute_SCLL_SCLH+0x1d2>
 800b946:	693a      	ldr	r2, [r7, #16]
 800b948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94a:	1ad2      	subs	r2, r2, r3
 800b94c:	6a3b      	ldr	r3, [r7, #32]
 800b94e:	1ad3      	subs	r3, r2, r3
 800b950:	089b      	lsrs	r3, r3, #2
 800b952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b954:	429a      	cmp	r2, r3
 800b956:	d268      	bcs.n	800ba2a <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800b958:	2300      	movs	r3, #0
 800b95a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b95c:	e062      	b.n	800ba24 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800b95e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b960:	6a3b      	ldr	r3, [r7, #32]
 800b962:	441a      	add	r2, r3
 800b964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b966:	3301      	adds	r3, #1
 800b968:	6979      	ldr	r1, [r7, #20]
 800b96a:	fb03 f101 	mul.w	r1, r3, r1
 800b96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b970:	005b      	lsls	r3, r3, #1
 800b972:	440b      	add	r3, r1
 800b974:	4413      	add	r3, r2
 800b976:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800b978:	693a      	ldr	r2, [r7, #16]
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	441a      	add	r2, r3
 800b97e:	4937      	ldr	r1, [pc, #220]	; (800ba5c <I2C_Compute_SCLL_SCLH+0x204>)
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	202c      	movs	r0, #44	; 0x2c
 800b984:	fb00 f303 	mul.w	r3, r0, r3
 800b988:	440b      	add	r3, r1
 800b98a:	3320      	adds	r3, #32
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	441a      	add	r2, r3
 800b990:	4932      	ldr	r1, [pc, #200]	; (800ba5c <I2C_Compute_SCLL_SCLH+0x204>)
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	202c      	movs	r0, #44	; 0x2c
 800b996:	fb00 f303 	mul.w	r3, r0, r3
 800b99a:	440b      	add	r3, r1
 800b99c:	3324      	adds	r3, #36	; 0x24
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4413      	add	r3, r2
 800b9a2:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800b9a4:	68ba      	ldr	r2, [r7, #8]
 800b9a6:	69bb      	ldr	r3, [r7, #24]
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	d338      	bcc.n	800ba1e <I2C_Compute_SCLL_SCLH+0x1c6>
 800b9ac:	68ba      	ldr	r2, [r7, #8]
 800b9ae:	69fb      	ldr	r3, [r7, #28]
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d834      	bhi.n	800ba1e <I2C_Compute_SCLL_SCLH+0x1c6>
 800b9b4:	4a29      	ldr	r2, [pc, #164]	; (800ba5c <I2C_Compute_SCLL_SCLH+0x204>)
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	212c      	movs	r1, #44	; 0x2c
 800b9ba:	fb01 f303 	mul.w	r3, r1, r3
 800b9be:	4413      	add	r3, r2
 800b9c0:	331c      	adds	r3, #28
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	68fa      	ldr	r2, [r7, #12]
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d329      	bcc.n	800ba1e <I2C_Compute_SCLL_SCLH+0x1c6>
 800b9ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d225      	bcs.n	800ba1e <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800b9d2:	68ba      	ldr	r2, [r7, #8]
 800b9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d6:	1ad3      	subs	r3, r2, r3
 800b9d8:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800b9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	da02      	bge.n	800b9e6 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 800b9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e2:	425b      	negs	r3, r3
 800b9e4:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800b9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d917      	bls.n	800ba1e <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800b9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f0:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 800b9f2:	491b      	ldr	r1, [pc, #108]	; (800ba60 <I2C_Compute_SCLL_SCLH+0x208>)
 800b9f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9f6:	4613      	mov	r3, r2
 800b9f8:	009b      	lsls	r3, r3, #2
 800b9fa:	4413      	add	r3, r2
 800b9fc:	009b      	lsls	r3, r3, #2
 800b9fe:	440b      	add	r3, r1
 800ba00:	3310      	adds	r3, #16
 800ba02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba04:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800ba06:	4916      	ldr	r1, [pc, #88]	; (800ba60 <I2C_Compute_SCLL_SCLH+0x208>)
 800ba08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba0a:	4613      	mov	r3, r2
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	4413      	add	r3, r2
 800ba10:	009b      	lsls	r3, r3, #2
 800ba12:	440b      	add	r3, r1
 800ba14:	330c      	adds	r3, #12
 800ba16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba18:	601a      	str	r2, [r3, #0]
              ret = count;
 800ba1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba1c:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800ba1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba20:	3301      	adds	r3, #1
 800ba22:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba26:	2bff      	cmp	r3, #255	; 0xff
 800ba28:	d999      	bls.n	800b95e <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800ba2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba32:	2bff      	cmp	r3, #255	; 0xff
 800ba34:	f67f af6f 	bls.w	800b916 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800ba38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	637b      	str	r3, [r7, #52]	; 0x34
 800ba3e:	4b09      	ldr	r3, [pc, #36]	; (800ba64 <I2C_Compute_SCLL_SCLH+0x20c>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba44:	429a      	cmp	r2, r3
 800ba46:	f4ff af56 	bcc.w	800b8f6 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800ba4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	374c      	adds	r7, #76	; 0x4c
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr
 800ba58:	3b9aca00 	.word	0x3b9aca00
 800ba5c:	08027858 	.word	0x08027858
 800ba60:	2400a494 	.word	0x2400a494
 800ba64:	2400ae94 	.word	0x2400ae94

0800ba68 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b08a      	sub	sp, #40	; 0x28
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800ba70:	4b31      	ldr	r3, [pc, #196]	; (800bb38 <I2C4_MspInit+0xd0>)
 800ba72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ba76:	4a30      	ldr	r2, [pc, #192]	; (800bb38 <I2C4_MspInit+0xd0>)
 800ba78:	f043 0308 	orr.w	r3, r3, #8
 800ba7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ba80:	4b2d      	ldr	r3, [pc, #180]	; (800bb38 <I2C4_MspInit+0xd0>)
 800ba82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ba86:	f003 0308 	and.w	r3, r3, #8
 800ba8a:	613b      	str	r3, [r7, #16]
 800ba8c:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800ba8e:	4b2a      	ldr	r3, [pc, #168]	; (800bb38 <I2C4_MspInit+0xd0>)
 800ba90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ba94:	4a28      	ldr	r2, [pc, #160]	; (800bb38 <I2C4_MspInit+0xd0>)
 800ba96:	f043 0308 	orr.w	r3, r3, #8
 800ba9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ba9e:	4b26      	ldr	r3, [pc, #152]	; (800bb38 <I2C4_MspInit+0xd0>)
 800baa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800baa4:	f003 0308 	and.w	r3, r3, #8
 800baa8:	60fb      	str	r3, [r7, #12]
 800baaa:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800baac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bab0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800bab2:	2312      	movs	r3, #18
 800bab4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800bab6:	2300      	movs	r3, #0
 800bab8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800baba:	2302      	movs	r3, #2
 800babc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800babe:	2304      	movs	r3, #4
 800bac0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800bac2:	f107 0314 	add.w	r3, r7, #20
 800bac6:	4619      	mov	r1, r3
 800bac8:	481c      	ldr	r0, [pc, #112]	; (800bb3c <I2C4_MspInit+0xd4>)
 800baca:	f001 fd43 	bl	800d554 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800bace:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bad2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800bad4:	2312      	movs	r3, #18
 800bad6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800bad8:	2300      	movs	r3, #0
 800bada:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800badc:	2302      	movs	r3, #2
 800bade:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800bae0:	2304      	movs	r3, #4
 800bae2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800bae4:	f107 0314 	add.w	r3, r7, #20
 800bae8:	4619      	mov	r1, r3
 800baea:	4814      	ldr	r0, [pc, #80]	; (800bb3c <I2C4_MspInit+0xd4>)
 800baec:	f001 fd32 	bl	800d554 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800baf0:	4b11      	ldr	r3, [pc, #68]	; (800bb38 <I2C4_MspInit+0xd0>)
 800baf2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800baf6:	4a10      	ldr	r2, [pc, #64]	; (800bb38 <I2C4_MspInit+0xd0>)
 800baf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bafc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800bb00:	4b0d      	ldr	r3, [pc, #52]	; (800bb38 <I2C4_MspInit+0xd0>)
 800bb02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bb06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb0a:	60bb      	str	r3, [r7, #8]
 800bb0c:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800bb0e:	4b0a      	ldr	r3, [pc, #40]	; (800bb38 <I2C4_MspInit+0xd0>)
 800bb10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bb14:	4a08      	ldr	r2, [pc, #32]	; (800bb38 <I2C4_MspInit+0xd0>)
 800bb16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb1a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800bb1e:	4b06      	ldr	r3, [pc, #24]	; (800bb38 <I2C4_MspInit+0xd0>)
 800bb20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bb24:	4a04      	ldr	r2, [pc, #16]	; (800bb38 <I2C4_MspInit+0xd0>)
 800bb26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb2a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 800bb2e:	bf00      	nop
 800bb30:	3728      	adds	r7, #40	; 0x28
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	bf00      	nop
 800bb38:	58024400 	.word	0x58024400
 800bb3c:	58020c00 	.word	0x58020c00

0800bb40 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b088      	sub	sp, #32
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800bb48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb4c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	4619      	mov	r1, r3
 800bb52:	480b      	ldr	r0, [pc, #44]	; (800bb80 <I2C4_MspDeInit+0x40>)
 800bb54:	f001 feae 	bl	800d8b4 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800bb58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bb5c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	4619      	mov	r1, r3
 800bb62:	4807      	ldr	r0, [pc, #28]	; (800bb80 <I2C4_MspDeInit+0x40>)
 800bb64:	f001 fea6 	bl	800d8b4 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800bb68:	4b06      	ldr	r3, [pc, #24]	; (800bb84 <I2C4_MspDeInit+0x44>)
 800bb6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bb6e:	4a05      	ldr	r2, [pc, #20]	; (800bb84 <I2C4_MspDeInit+0x44>)
 800bb70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb74:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 800bb78:	bf00      	nop
 800bb7a:	3720      	adds	r7, #32
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}
 800bb80:	58020c00 	.word	0x58020c00
 800bb84:	58024400 	.word	0x58024400

0800bb88 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b088      	sub	sp, #32
 800bb8c:	af04      	add	r7, sp, #16
 800bb8e:	607b      	str	r3, [r7, #4]
 800bb90:	4603      	mov	r3, r0
 800bb92:	81fb      	strh	r3, [r7, #14]
 800bb94:	460b      	mov	r3, r1
 800bb96:	81bb      	strh	r3, [r7, #12]
 800bb98:	4613      	mov	r3, r2
 800bb9a:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800bb9c:	8978      	ldrh	r0, [r7, #10]
 800bb9e:	89ba      	ldrh	r2, [r7, #12]
 800bba0:	89f9      	ldrh	r1, [r7, #14]
 800bba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bba6:	9302      	str	r3, [sp, #8]
 800bba8:	8b3b      	ldrh	r3, [r7, #24]
 800bbaa:	9301      	str	r3, [sp, #4]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	9300      	str	r3, [sp, #0]
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	4807      	ldr	r0, [pc, #28]	; (800bbd0 <I2C4_WriteReg+0x48>)
 800bbb4:	f002 f890 	bl	800dcd8 <HAL_I2C_Mem_Write>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d101      	bne.n	800bbc2 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	e001      	b.n	800bbc6 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800bbc2:	f06f 0307 	mvn.w	r3, #7
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3710      	adds	r7, #16
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	2400ae98 	.word	0x2400ae98

0800bbd4 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b088      	sub	sp, #32
 800bbd8:	af04      	add	r7, sp, #16
 800bbda:	607b      	str	r3, [r7, #4]
 800bbdc:	4603      	mov	r3, r0
 800bbde:	81fb      	strh	r3, [r7, #14]
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	81bb      	strh	r3, [r7, #12]
 800bbe4:	4613      	mov	r3, r2
 800bbe6:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800bbe8:	8978      	ldrh	r0, [r7, #10]
 800bbea:	89ba      	ldrh	r2, [r7, #12]
 800bbec:	89f9      	ldrh	r1, [r7, #14]
 800bbee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bbf2:	9302      	str	r3, [sp, #8]
 800bbf4:	8b3b      	ldrh	r3, [r7, #24]
 800bbf6:	9301      	str	r3, [sp, #4]
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	9300      	str	r3, [sp, #0]
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	4807      	ldr	r0, [pc, #28]	; (800bc1c <I2C4_ReadReg+0x48>)
 800bc00:	f002 f97e 	bl	800df00 <HAL_I2C_Mem_Read>
 800bc04:	4603      	mov	r3, r0
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d101      	bne.n	800bc0e <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	e001      	b.n	800bc12 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800bc0e:	f06f 0307 	mvn.w	r3, #7
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3710      	adds	r7, #16
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
 800bc1a:	bf00      	nop
 800bc1c:	2400ae98 	.word	0x2400ae98

0800bc20 <BSP_QSPI_Init>:
  * @param  Instance   QSPI Instance
  * @param  Init       QSPI Init structure
  * @retval BSP status
  */
int32_t BSP_QSPI_Init(uint32_t Instance, BSP_QSPI_Init_t *Init)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b090      	sub	sp, #64	; 0x40
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
 800bc28:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  3: For DTR mode to reach max 54Mhz
  */
  static const uint32_t PrescalerTab[2] = {1, 3};

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d003      	beq.n	800bc3c <BSP_QSPI_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800bc34:	f06f 0301 	mvn.w	r3, #1
 800bc38:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc3a:	e090      	b.n	800bd5e <BSP_QSPI_Init+0x13e>
  }
  else
  {
    /* Check if instance is already initialized */
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 800bc3c:	494a      	ldr	r1, [pc, #296]	; (800bd68 <BSP_QSPI_Init+0x148>)
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	4613      	mov	r3, r2
 800bc42:	005b      	lsls	r3, r3, #1
 800bc44:	4413      	add	r3, r2
 800bc46:	009b      	lsls	r3, r3, #2
 800bc48:	440b      	add	r3, r1
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	f040 8086 	bne.w	800bd5e <BSP_QSPI_Init+0x13e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp QSPI initialization */
      QSPI_MspInit(&hqspi);
 800bc52:	4846      	ldr	r0, [pc, #280]	; (800bd6c <BSP_QSPI_Init+0x14c>)
 800bc54:	f000 f99c 	bl	800bf90 <QSPI_MspInit>
#endif /* USE_HAL_QSPI_REGISTER_CALLBACKS */

      if(ret == BSP_ERROR_NONE)
 800bc58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d17f      	bne.n	800bd5e <BSP_QSPI_Init+0x13e>
      {
        /* STM32 QSPI interface initialization */
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 800bc5e:	f107 031c 	add.w	r3, r7, #28
 800bc62:	4618      	mov	r0, r3
 800bc64:	f7fe ffea 	bl	800ac3c <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	785b      	ldrb	r3, [r3, #1]
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	4b40      	ldr	r3, [pc, #256]	; (800bd70 <BSP_QSPI_Init+0x150>)
 800bc70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc74:	613b      	str	r3, [r7, #16]
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 800bc76:	2340      	movs	r3, #64	; 0x40
 800bc78:	61bb      	str	r3, [r7, #24]
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800bc7a:	69fb      	ldr	r3, [r7, #28]
 800bc7c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc80:	fa93 f3a3 	rbit	r3, r3
 800bc84:	633b      	str	r3, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800bc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc88:	63bb      	str	r3, [r7, #56]	; 0x38
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800bc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d101      	bne.n	800bc94 <BSP_QSPI_Init+0x74>
  {
    return 32U;
 800bc90:	2320      	movs	r3, #32
 800bc92:	e003      	b.n	800bc9c <BSP_QSPI_Init+0x7c>
  }
  return __builtin_clz(value);
 800bc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc96:	fab3 f383 	clz	r3, r3
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	3b01      	subs	r3, #1
 800bc9e:	60fb      	str	r3, [r7, #12]
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	785b      	ldrb	r3, [r3, #1]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d101      	bne.n	800bcac <BSP_QSPI_Init+0x8c>
 800bca8:	2310      	movs	r3, #16
 800bcaa:	e000      	b.n	800bcae <BSP_QSPI_Init+0x8e>
 800bcac:	2300      	movs	r3, #0
 800bcae:	617b      	str	r3, [r7, #20]

        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800bcb0:	f107 030c 	add.w	r3, r7, #12
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	482d      	ldr	r0, [pc, #180]	; (800bd6c <BSP_QSPI_Init+0x14c>)
 800bcb8:	f000 f85c 	bl	800bd74 <MX_QSPI_Init>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d003      	beq.n	800bcca <BSP_QSPI_Init+0xaa>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800bcc2:	f06f 0303 	mvn.w	r3, #3
 800bcc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcc8:	e049      	b.n	800bd5e <BSP_QSPI_Init+0x13e>
        }/* QSPI memory reset */
        else if(QSPI_ResetMemory(Instance) != BSP_ERROR_NONE)
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f000 faa8 	bl	800c220 <QSPI_ResetMemory>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d003      	beq.n	800bcde <BSP_QSPI_Init+0xbe>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800bcd6:	f06f 0304 	mvn.w	r3, #4
 800bcda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcdc:	e03f      	b.n	800bd5e <BSP_QSPI_Init+0x13e>
        }/* Force Flash enter 4 Byte address mode */
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800bcde:	4922      	ldr	r1, [pc, #136]	; (800bd68 <BSP_QSPI_Init+0x148>)
 800bce0:	687a      	ldr	r2, [r7, #4]
 800bce2:	4613      	mov	r3, r2
 800bce4:	005b      	lsls	r3, r3, #1
 800bce6:	4413      	add	r3, r2
 800bce8:	009b      	lsls	r3, r3, #2
 800bcea:	440b      	add	r3, r1
 800bcec:	3301      	adds	r3, #1
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	4619      	mov	r1, r3
 800bcf2:	481e      	ldr	r0, [pc, #120]	; (800bd6c <BSP_QSPI_Init+0x14c>)
 800bcf4:	f7ff f811 	bl	800ad1a <MT25TL01G_AutoPollingMemReady>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d003      	beq.n	800bd06 <BSP_QSPI_Init+0xe6>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800bcfe:	f06f 0304 	mvn.w	r3, #4
 800bd02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd04:	e02b      	b.n	800bd5e <BSP_QSPI_Init+0x13e>
        }
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800bd06:	4918      	ldr	r1, [pc, #96]	; (800bd68 <BSP_QSPI_Init+0x148>)
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	4613      	mov	r3, r2
 800bd0c:	005b      	lsls	r3, r3, #1
 800bd0e:	4413      	add	r3, r2
 800bd10:	009b      	lsls	r3, r3, #2
 800bd12:	440b      	add	r3, r1
 800bd14:	3301      	adds	r3, #1
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	4619      	mov	r1, r3
 800bd1a:	4814      	ldr	r0, [pc, #80]	; (800bd6c <BSP_QSPI_Init+0x14c>)
 800bd1c:	f7fe ffb5 	bl	800ac8a <MT25TL01G_Enter4BytesAddressMode>
 800bd20:	4603      	mov	r3, r0
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d003      	beq.n	800bd2e <BSP_QSPI_Init+0x10e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800bd26:	f06f 0304 	mvn.w	r3, #4
 800bd2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd2c:	e017      	b.n	800bd5e <BSP_QSPI_Init+0x13e>
        }/* Configuration of the dummy cycles on QSPI memory side */
        else if(QSPI_DummyCyclesCfg(Instance) != BSP_ERROR_NONE)
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 fae2 	bl	800c2f8 <QSPI_DummyCyclesCfg>
 800bd34:	4603      	mov	r3, r0
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d003      	beq.n	800bd42 <BSP_QSPI_Init+0x122>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800bd3a:	f06f 0304 	mvn.w	r3, #4
 800bd3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd40:	e00d      	b.n	800bd5e <BSP_QSPI_Init+0x13e>
        }
        else
        {
          /* Configure Flash to desired mode */
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	7819      	ldrb	r1, [r3, #0]
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	785b      	ldrb	r3, [r3, #1]
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f000 f89d 	bl	800be8c <BSP_QSPI_ConfigFlash>
 800bd52:	4603      	mov	r3, r0
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d002      	beq.n	800bd5e <BSP_QSPI_Init+0x13e>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800bd58:	f06f 0304 	mvn.w	r3, #4
 800bd5c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
  }

  /* Return BSP status */
  return ret;
 800bd5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3740      	adds	r7, #64	; 0x40
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}
 800bd68:	2400aee4 	.word	0x2400aee4
 800bd6c:	2400027c 	.word	0x2400027c
 800bd70:	080278dc 	.word	0x080278dc

0800bd74 <MX_QSPI_Init>:
  * @param  hQspi       QSPI handle
  * @param  Config      QSPI configuration structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b082      	sub	sp, #8
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	6039      	str	r1, [r7, #0]
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	4a13      	ldr	r2, [pc, #76]	; (800bdd0 <MX_QSPI_Init+0x5c>)
 800bd82:	601a      	str	r2, [r3, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	685a      	ldr	r2, [r3, #4]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	605a      	str	r2, [r3, #4]
  hQspi->Init.FifoThreshold      = 1;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	609a      	str	r2, [r3, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	689a      	ldr	r2, [r3, #8]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	60da      	str	r2, [r3, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	611a      	str	r2, [r3, #16]
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f44f 7240 	mov.w	r2, #768	; 0x300
 800bda8:	615a      	str	r2, [r3, #20]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2200      	movs	r2, #0
 800bdae:	619a      	str	r2, [r3, #24]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	61da      	str	r2, [r3, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	68da      	ldr	r2, [r3, #12]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	621a      	str	r2, [r3, #32]

  return HAL_QSPI_Init(hQspi);
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f003 fa66 	bl	800f290 <HAL_QSPI_Init>
 800bdc4:	4603      	mov	r3, r0
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3708      	adds	r7, #8
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop
 800bdd0:	52005000 	.word	0x52005000

0800bdd4 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800bddc:	2300      	movs	r3, #0
 800bdde:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d003      	beq.n	800bdee <BSP_QSPI_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800bde6:	f06f 0301 	mvn.w	r3, #1
 800bdea:	60fb      	str	r3, [r7, #12]
 800bdec:	e045      	b.n	800be7a <BSP_QSPI_EnableMemoryMappedMode+0xa6>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800bdee:	4925      	ldr	r1, [pc, #148]	; (800be84 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800bdf0:	687a      	ldr	r2, [r7, #4]
 800bdf2:	4613      	mov	r3, r2
 800bdf4:	005b      	lsls	r3, r3, #1
 800bdf6:	4413      	add	r3, r2
 800bdf8:	009b      	lsls	r3, r3, #2
 800bdfa:	440b      	add	r3, r1
 800bdfc:	3302      	adds	r3, #2
 800bdfe:	781b      	ldrb	r3, [r3, #0]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d11d      	bne.n	800be40 <BSP_QSPI_EnableMemoryMappedMode+0x6c>
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800be04:	491f      	ldr	r1, [pc, #124]	; (800be84 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800be06:	687a      	ldr	r2, [r7, #4]
 800be08:	4613      	mov	r3, r2
 800be0a:	005b      	lsls	r3, r3, #1
 800be0c:	4413      	add	r3, r2
 800be0e:	009b      	lsls	r3, r3, #2
 800be10:	440b      	add	r3, r1
 800be12:	3301      	adds	r3, #1
 800be14:	781b      	ldrb	r3, [r3, #0]
 800be16:	4619      	mov	r1, r3
 800be18:	481b      	ldr	r0, [pc, #108]	; (800be88 <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 800be1a:	f7ff f8d3 	bl	800afc4 <MT25TL01G_EnableMemoryMappedModeSTR>
 800be1e:	4603      	mov	r3, r0
 800be20:	2b00      	cmp	r3, #0
 800be22:	d003      	beq.n	800be2c <BSP_QSPI_EnableMemoryMappedMode+0x58>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800be24:	f06f 0304 	mvn.w	r3, #4
 800be28:	60fb      	str	r3, [r7, #12]
 800be2a:	e026      	b.n	800be7a <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800be2c:	4915      	ldr	r1, [pc, #84]	; (800be84 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	4613      	mov	r3, r2
 800be32:	005b      	lsls	r3, r3, #1
 800be34:	4413      	add	r3, r2
 800be36:	009b      	lsls	r3, r3, #2
 800be38:	440b      	add	r3, r1
 800be3a:	2202      	movs	r2, #2
 800be3c:	701a      	strb	r2, [r3, #0]
 800be3e:	e01c      	b.n	800be7a <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800be40:	4910      	ldr	r1, [pc, #64]	; (800be84 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800be42:	687a      	ldr	r2, [r7, #4]
 800be44:	4613      	mov	r3, r2
 800be46:	005b      	lsls	r3, r3, #1
 800be48:	4413      	add	r3, r2
 800be4a:	009b      	lsls	r3, r3, #2
 800be4c:	440b      	add	r3, r1
 800be4e:	3301      	adds	r3, #1
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	4619      	mov	r1, r3
 800be54:	480c      	ldr	r0, [pc, #48]	; (800be88 <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 800be56:	f7ff f84b 	bl	800aef0 <MT25TL01G_EnableMemoryMappedModeDTR>
 800be5a:	4603      	mov	r3, r0
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d003      	beq.n	800be68 <BSP_QSPI_EnableMemoryMappedMode+0x94>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800be60:	f06f 0304 	mvn.w	r3, #4
 800be64:	60fb      	str	r3, [r7, #12]
 800be66:	e008      	b.n	800be7a <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800be68:	4906      	ldr	r1, [pc, #24]	; (800be84 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800be6a:	687a      	ldr	r2, [r7, #4]
 800be6c:	4613      	mov	r3, r2
 800be6e:	005b      	lsls	r3, r3, #1
 800be70:	4413      	add	r3, r2
 800be72:	009b      	lsls	r3, r3, #2
 800be74:	440b      	add	r3, r1
 800be76:	2202      	movs	r2, #2
 800be78:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800be7a:	68fb      	ldr	r3, [r7, #12]
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3710      	adds	r7, #16
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}
 800be84:	2400aee4 	.word	0x2400aee4
 800be88:	2400027c 	.word	0x2400027c

0800be8c <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	460b      	mov	r3, r1
 800be96:	70fb      	strb	r3, [r7, #3]
 800be98:	4613      	mov	r3, r2
 800be9a:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 800be9c:	2300      	movs	r3, #0
 800be9e:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d003      	beq.n	800beae <BSP_QSPI_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800bea6:	f06f 0301 	mvn.w	r3, #1
 800beaa:	60fb      	str	r3, [r7, #12]
 800beac:	e067      	b.n	800bf7e <BSP_QSPI_ConfigFlash+0xf2>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 800beae:	4936      	ldr	r1, [pc, #216]	; (800bf88 <BSP_QSPI_ConfigFlash+0xfc>)
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	4613      	mov	r3, r2
 800beb4:	005b      	lsls	r3, r3, #1
 800beb6:	4413      	add	r3, r2
 800beb8:	009b      	lsls	r3, r3, #2
 800beba:	440b      	add	r3, r1
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	2b02      	cmp	r3, #2
 800bec0:	d103      	bne.n	800beca <BSP_QSPI_ConfigFlash+0x3e>
    {
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 800bec2:	f06f 0319 	mvn.w	r3, #25
 800bec6:	60fb      	str	r3, [r7, #12]
 800bec8:	e059      	b.n	800bf7e <BSP_QSPI_ConfigFlash+0xf2>
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800beca:	78bb      	ldrb	r3, [r7, #2]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d101      	bne.n	800bed4 <BSP_QSPI_ConfigFlash+0x48>
 800bed0:	2310      	movs	r3, #16
 800bed2:	e000      	b.n	800bed6 <BSP_QSPI_ConfigFlash+0x4a>
 800bed4:	2300      	movs	r3, #0
 800bed6:	4a2d      	ldr	r2, [pc, #180]	; (800bf8c <BSP_QSPI_ConfigFlash+0x100>)
 800bed8:	60d3      	str	r3, [r2, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800beda:	482c      	ldr	r0, [pc, #176]	; (800bf8c <BSP_QSPI_ConfigFlash+0x100>)
 800bedc:	f003 f9d8 	bl	800f290 <HAL_QSPI_Init>
 800bee0:	4603      	mov	r3, r0
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d003      	beq.n	800beee <BSP_QSPI_ConfigFlash+0x62>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800bee6:	f06f 0303 	mvn.w	r3, #3
 800beea:	60fb      	str	r3, [r7, #12]
 800beec:	e047      	b.n	800bf7e <BSP_QSPI_ConfigFlash+0xf2>
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 800beee:	4926      	ldr	r1, [pc, #152]	; (800bf88 <BSP_QSPI_ConfigFlash+0xfc>)
 800bef0:	687a      	ldr	r2, [r7, #4]
 800bef2:	4613      	mov	r3, r2
 800bef4:	005b      	lsls	r3, r3, #1
 800bef6:	4413      	add	r3, r2
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	440b      	add	r3, r1
 800befc:	3301      	adds	r3, #1
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	2b03      	cmp	r3, #3
 800bf02:	d10c      	bne.n	800bf1e <BSP_QSPI_ConfigFlash+0x92>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 800bf04:	78fb      	ldrb	r3, [r7, #3]
 800bf06:	2b03      	cmp	r3, #3
 800bf08:	d016      	beq.n	800bf38 <BSP_QSPI_ConfigFlash+0xac>
          {
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 800bf0a:	4820      	ldr	r0, [pc, #128]	; (800bf8c <BSP_QSPI_ConfigFlash+0x100>)
 800bf0c:	f7fe ffc6 	bl	800ae9c <MT25TL01G_ExitQPIMode>
 800bf10:	4603      	mov	r3, r0
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d010      	beq.n	800bf38 <BSP_QSPI_ConfigFlash+0xac>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800bf16:	f06f 0304 	mvn.w	r3, #4
 800bf1a:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 800bf1c:	e00c      	b.n	800bf38 <BSP_QSPI_ConfigFlash+0xac>

        case BSP_QSPI_SPI_MODE :               /* 1-1-1 commands, Power on H/W default setting */
        case BSP_QSPI_SPI_2IO_MODE :           /* 1-2-2 read commands */
        case BSP_QSPI_SPI_4IO_MODE :           /* 1-4-4 read commands */
        default :
          if(Mode == MT25TL01G_QPI_MODE)
 800bf1e:	78fb      	ldrb	r3, [r7, #3]
 800bf20:	2b03      	cmp	r3, #3
 800bf22:	d10b      	bne.n	800bf3c <BSP_QSPI_ConfigFlash+0xb0>
          {
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 800bf24:	4819      	ldr	r0, [pc, #100]	; (800bf8c <BSP_QSPI_ConfigFlash+0x100>)
 800bf26:	f7fe ff8f 	bl	800ae48 <MT25TL01G_EnterQPIMode>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d005      	beq.n	800bf3c <BSP_QSPI_ConfigFlash+0xb0>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800bf30:	f06f 0304 	mvn.w	r3, #4
 800bf34:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 800bf36:	e001      	b.n	800bf3c <BSP_QSPI_ConfigFlash+0xb0>
          break;
 800bf38:	bf00      	nop
 800bf3a:	e000      	b.n	800bf3e <BSP_QSPI_ConfigFlash+0xb2>
          break;
 800bf3c:	bf00      	nop
        }

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d11c      	bne.n	800bf7e <BSP_QSPI_ConfigFlash+0xf2>
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800bf44:	4910      	ldr	r1, [pc, #64]	; (800bf88 <BSP_QSPI_ConfigFlash+0xfc>)
 800bf46:	687a      	ldr	r2, [r7, #4]
 800bf48:	4613      	mov	r3, r2
 800bf4a:	005b      	lsls	r3, r3, #1
 800bf4c:	4413      	add	r3, r2
 800bf4e:	009b      	lsls	r3, r3, #2
 800bf50:	440b      	add	r3, r1
 800bf52:	2201      	movs	r2, #1
 800bf54:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 800bf56:	490c      	ldr	r1, [pc, #48]	; (800bf88 <BSP_QSPI_ConfigFlash+0xfc>)
 800bf58:	687a      	ldr	r2, [r7, #4]
 800bf5a:	4613      	mov	r3, r2
 800bf5c:	005b      	lsls	r3, r3, #1
 800bf5e:	4413      	add	r3, r2
 800bf60:	009b      	lsls	r3, r3, #2
 800bf62:	440b      	add	r3, r1
 800bf64:	3301      	adds	r3, #1
 800bf66:	78fa      	ldrb	r2, [r7, #3]
 800bf68:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 800bf6a:	4907      	ldr	r1, [pc, #28]	; (800bf88 <BSP_QSPI_ConfigFlash+0xfc>)
 800bf6c:	687a      	ldr	r2, [r7, #4]
 800bf6e:	4613      	mov	r3, r2
 800bf70:	005b      	lsls	r3, r3, #1
 800bf72:	4413      	add	r3, r2
 800bf74:	009b      	lsls	r3, r3, #2
 800bf76:	440b      	add	r3, r1
 800bf78:	3302      	adds	r3, #2
 800bf7a:	78ba      	ldrb	r2, [r7, #2]
 800bf7c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3710      	adds	r7, #16
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}
 800bf88:	2400aee4 	.word	0x2400aee4
 800bf8c:	2400027c 	.word	0x2400027c

0800bf90 <QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
static void QSPI_MspInit(QSPI_HandleTypeDef *hQspi)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b094      	sub	sp, #80	; 0x50
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hQspi);

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 800bf98:	4b9c      	ldr	r3, [pc, #624]	; (800c20c <QSPI_MspInit+0x27c>)
 800bf9a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800bf9e:	4a9b      	ldr	r2, [pc, #620]	; (800c20c <QSPI_MspInit+0x27c>)
 800bfa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bfa4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800bfa8:	4b98      	ldr	r3, [pc, #608]	; (800c20c <QSPI_MspInit+0x27c>)
 800bfaa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800bfae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bfb2:	63bb      	str	r3, [r7, #56]	; 0x38
 800bfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 800bfb6:	4b95      	ldr	r3, [pc, #596]	; (800c20c <QSPI_MspInit+0x27c>)
 800bfb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfba:	4a94      	ldr	r2, [pc, #592]	; (800c20c <QSPI_MspInit+0x27c>)
 800bfbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bfc0:	67d3      	str	r3, [r2, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 800bfc2:	4b92      	ldr	r3, [pc, #584]	; (800c20c <QSPI_MspInit+0x27c>)
 800bfc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfc6:	4a91      	ldr	r2, [pc, #580]	; (800c20c <QSPI_MspInit+0x27c>)
 800bfc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bfcc:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* Enable GPIO clocks */
  QSPI_CLK_GPIO_CLK_ENABLE();
 800bfce:	4b8f      	ldr	r3, [pc, #572]	; (800c20c <QSPI_MspInit+0x27c>)
 800bfd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bfd4:	4a8d      	ldr	r2, [pc, #564]	; (800c20c <QSPI_MspInit+0x27c>)
 800bfd6:	f043 0320 	orr.w	r3, r3, #32
 800bfda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bfde:	4b8b      	ldr	r3, [pc, #556]	; (800c20c <QSPI_MspInit+0x27c>)
 800bfe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bfe4:	f003 0320 	and.w	r3, r3, #32
 800bfe8:	637b      	str	r3, [r7, #52]	; 0x34
 800bfea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 800bfec:	4b87      	ldr	r3, [pc, #540]	; (800c20c <QSPI_MspInit+0x27c>)
 800bfee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bff2:	4a86      	ldr	r2, [pc, #536]	; (800c20c <QSPI_MspInit+0x27c>)
 800bff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bff8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bffc:	4b83      	ldr	r3, [pc, #524]	; (800c20c <QSPI_MspInit+0x27c>)
 800bffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c006:	633b      	str	r3, [r7, #48]	; 0x30
 800c008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 800c00a:	4b80      	ldr	r3, [pc, #512]	; (800c20c <QSPI_MspInit+0x27c>)
 800c00c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c010:	4a7e      	ldr	r2, [pc, #504]	; (800c20c <QSPI_MspInit+0x27c>)
 800c012:	f043 0308 	orr.w	r3, r3, #8
 800c016:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c01a:	4b7c      	ldr	r3, [pc, #496]	; (800c20c <QSPI_MspInit+0x27c>)
 800c01c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c020:	f003 0308 	and.w	r3, r3, #8
 800c024:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 800c028:	4b78      	ldr	r3, [pc, #480]	; (800c20c <QSPI_MspInit+0x27c>)
 800c02a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c02e:	4a77      	ldr	r2, [pc, #476]	; (800c20c <QSPI_MspInit+0x27c>)
 800c030:	f043 0320 	orr.w	r3, r3, #32
 800c034:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c038:	4b74      	ldr	r3, [pc, #464]	; (800c20c <QSPI_MspInit+0x27c>)
 800c03a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c03e:	f003 0320 	and.w	r3, r3, #32
 800c042:	62bb      	str	r3, [r7, #40]	; 0x28
 800c044:	6abb      	ldr	r3, [r7, #40]	; 0x28
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 800c046:	4b71      	ldr	r3, [pc, #452]	; (800c20c <QSPI_MspInit+0x27c>)
 800c048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c04c:	4a6f      	ldr	r2, [pc, #444]	; (800c20c <QSPI_MspInit+0x27c>)
 800c04e:	f043 0320 	orr.w	r3, r3, #32
 800c052:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c056:	4b6d      	ldr	r3, [pc, #436]	; (800c20c <QSPI_MspInit+0x27c>)
 800c058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c05c:	f003 0320 	and.w	r3, r3, #32
 800c060:	627b      	str	r3, [r7, #36]	; 0x24
 800c062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 800c064:	4b69      	ldr	r3, [pc, #420]	; (800c20c <QSPI_MspInit+0x27c>)
 800c066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c06a:	4a68      	ldr	r2, [pc, #416]	; (800c20c <QSPI_MspInit+0x27c>)
 800c06c:	f043 0320 	orr.w	r3, r3, #32
 800c070:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c074:	4b65      	ldr	r3, [pc, #404]	; (800c20c <QSPI_MspInit+0x27c>)
 800c076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c07a:	f003 0320 	and.w	r3, r3, #32
 800c07e:	623b      	str	r3, [r7, #32]
 800c080:	6a3b      	ldr	r3, [r7, #32]

  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 800c082:	4b62      	ldr	r3, [pc, #392]	; (800c20c <QSPI_MspInit+0x27c>)
 800c084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c088:	4a60      	ldr	r2, [pc, #384]	; (800c20c <QSPI_MspInit+0x27c>)
 800c08a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c08e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c092:	4b5e      	ldr	r3, [pc, #376]	; (800c20c <QSPI_MspInit+0x27c>)
 800c094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c09c:	61fb      	str	r3, [r7, #28]
 800c09e:	69fb      	ldr	r3, [r7, #28]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 800c0a0:	4b5a      	ldr	r3, [pc, #360]	; (800c20c <QSPI_MspInit+0x27c>)
 800c0a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c0a6:	4a59      	ldr	r2, [pc, #356]	; (800c20c <QSPI_MspInit+0x27c>)
 800c0a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c0b0:	4b56      	ldr	r3, [pc, #344]	; (800c20c <QSPI_MspInit+0x27c>)
 800c0b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c0b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0ba:	61bb      	str	r3, [r7, #24]
 800c0bc:	69bb      	ldr	r3, [r7, #24]
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 800c0be:	4b53      	ldr	r3, [pc, #332]	; (800c20c <QSPI_MspInit+0x27c>)
 800c0c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c0c4:	4a51      	ldr	r2, [pc, #324]	; (800c20c <QSPI_MspInit+0x27c>)
 800c0c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c0ce:	4b4f      	ldr	r3, [pc, #316]	; (800c20c <QSPI_MspInit+0x27c>)
 800c0d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c0d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0d8:	617b      	str	r3, [r7, #20]
 800c0da:	697b      	ldr	r3, [r7, #20]
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 800c0dc:	4b4b      	ldr	r3, [pc, #300]	; (800c20c <QSPI_MspInit+0x27c>)
 800c0de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c0e2:	4a4a      	ldr	r2, [pc, #296]	; (800c20c <QSPI_MspInit+0x27c>)
 800c0e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c0ec:	4b47      	ldr	r3, [pc, #284]	; (800c20c <QSPI_MspInit+0x27c>)
 800c0ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c0f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0f6:	613b      	str	r3, [r7, #16]
 800c0f8:	693b      	ldr	r3, [r7, #16]
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800c0fa:	4b44      	ldr	r3, [pc, #272]	; (800c20c <QSPI_MspInit+0x27c>)
 800c0fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c100:	4a42      	ldr	r2, [pc, #264]	; (800c20c <QSPI_MspInit+0x27c>)
 800c102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c106:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c10a:	4b40      	ldr	r3, [pc, #256]	; (800c20c <QSPI_MspInit+0x27c>)
 800c10c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c114:	60fb      	str	r3, [r7, #12]
 800c116:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 800c118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c11c:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800c11e:	2302      	movs	r3, #2
 800c120:	643b      	str	r3, [r7, #64]	; 0x40
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800c122:	2303      	movs	r3, #3
 800c124:	64bb      	str	r3, [r7, #72]	; 0x48
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800c126:	2300      	movs	r3, #0
 800c128:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800c12a:	2309      	movs	r3, #9
 800c12c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800c12e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c132:	4619      	mov	r1, r3
 800c134:	4836      	ldr	r0, [pc, #216]	; (800c210 <QSPI_MspInit+0x280>)
 800c136:	f001 fa0d 	bl	800d554 <HAL_GPIO_Init>

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800c13a:	2340      	movs	r3, #64	; 0x40
 800c13c:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800c13e:	2301      	movs	r3, #1
 800c140:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800c142:	230a      	movs	r3, #10
 800c144:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800c146:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c14a:	4619      	mov	r1, r3
 800c14c:	4831      	ldr	r0, [pc, #196]	; (800c214 <QSPI_MspInit+0x284>)
 800c14e:	f001 fa01 	bl	800d554 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800c152:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c156:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800c158:	2300      	movs	r3, #0
 800c15a:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800c15c:	2309      	movs	r3, #9
 800c15e:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800c160:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c164:	4619      	mov	r1, r3
 800c166:	482c      	ldr	r0, [pc, #176]	; (800c218 <QSPI_MspInit+0x288>)
 800c168:	f001 f9f4 	bl	800d554 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 800c16c:	2304      	movs	r3, #4
 800c16e:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800c170:	2309      	movs	r3, #9
 800c172:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800c174:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c178:	4619      	mov	r1, r3
 800c17a:	4828      	ldr	r0, [pc, #160]	; (800c21c <QSPI_MspInit+0x28c>)
 800c17c:	f001 f9ea 	bl	800d554 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800c180:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c184:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800c186:	230a      	movs	r3, #10
 800c188:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800c18a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c18e:	4619      	mov	r1, r3
 800c190:	481f      	ldr	r0, [pc, #124]	; (800c210 <QSPI_MspInit+0x280>)
 800c192:	f001 f9df 	bl	800d554 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800c196:	2308      	movs	r3, #8
 800c198:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800c19a:	2309      	movs	r3, #9
 800c19c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800c19e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c1a2:	4619      	mov	r1, r3
 800c1a4:	481d      	ldr	r0, [pc, #116]	; (800c21c <QSPI_MspInit+0x28c>)
 800c1a6:	f001 f9d5 	bl	800d554 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800c1aa:	2380      	movs	r3, #128	; 0x80
 800c1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800c1ae:	2309      	movs	r3, #9
 800c1b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800c1b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	4815      	ldr	r0, [pc, #84]	; (800c210 <QSPI_MspInit+0x280>)
 800c1ba:	f001 f9cb 	bl	800d554 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 800c1be:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800c1c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	4812      	ldr	r0, [pc, #72]	; (800c214 <QSPI_MspInit+0x284>)
 800c1cc:	f001 f9c2 	bl	800d554 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 800c1d0:	2340      	movs	r3, #64	; 0x40
 800c1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800c1d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c1d8:	4619      	mov	r1, r3
 800c1da:	480d      	ldr	r0, [pc, #52]	; (800c210 <QSPI_MspInit+0x280>)
 800c1dc:	f001 f9ba 	bl	800d554 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800c1e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c1e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800c1e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	4809      	ldr	r0, [pc, #36]	; (800c214 <QSPI_MspInit+0x284>)
 800c1ee:	f001 f9b1 	bl	800d554 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	210f      	movs	r1, #15
 800c1f6:	205c      	movs	r0, #92	; 0x5c
 800c1f8:	f000 fe9c 	bl	800cf34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800c1fc:	205c      	movs	r0, #92	; 0x5c
 800c1fe:	f000 feb3 	bl	800cf68 <HAL_NVIC_EnableIRQ>
}
 800c202:	bf00      	nop
 800c204:	3750      	adds	r7, #80	; 0x50
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	58024400 	.word	0x58024400
 800c210:	58021400 	.word	0x58021400
 800c214:	58021800 	.word	0x58021800
 800c218:	58020c00 	.word	0x58020c00
 800c21c:	58021c00 	.word	0x58021c00

0800c220 <QSPI_ResetMemory>:
  *         Flash accept 1-1-1, 1-1-2, 1-2-2 commands after reset.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b084      	sub	sp, #16
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c228:	2300      	movs	r3, #0
 800c22a:	60fb      	str	r3, [r7, #12]

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800c22c:	2103      	movs	r1, #3
 800c22e:	4830      	ldr	r0, [pc, #192]	; (800c2f0 <QSPI_ResetMemory+0xd0>)
 800c230:	f7fe ff30 	bl	800b094 <MT25TL01G_ResetEnable>
 800c234:	4603      	mov	r3, r0
 800c236:	2b00      	cmp	r3, #0
 800c238:	d003      	beq.n	800c242 <QSPI_ResetMemory+0x22>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
 800c23a:	f06f 0304 	mvn.w	r3, #4
 800c23e:	60fb      	str	r3, [r7, #12]
 800c240:	e051      	b.n	800c2e6 <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800c242:	2103      	movs	r1, #3
 800c244:	482a      	ldr	r0, [pc, #168]	; (800c2f0 <QSPI_ResetMemory+0xd0>)
 800c246:	f7fe ff57 	bl	800b0f8 <MT25TL01G_ResetMemory>
 800c24a:	4603      	mov	r3, r0
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d003      	beq.n	800c258 <QSPI_ResetMemory+0x38>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c250:	f06f 0304 	mvn.w	r3, #4
 800c254:	60fb      	str	r3, [r7, #12]
 800c256:	e046      	b.n	800c2e6 <QSPI_ResetMemory+0xc6>
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800c258:	4926      	ldr	r1, [pc, #152]	; (800c2f4 <QSPI_ResetMemory+0xd4>)
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	4613      	mov	r3, r2
 800c25e:	005b      	lsls	r3, r3, #1
 800c260:	4413      	add	r3, r2
 800c262:	009b      	lsls	r3, r3, #2
 800c264:	440b      	add	r3, r1
 800c266:	3301      	adds	r3, #1
 800c268:	781b      	ldrb	r3, [r3, #0]
 800c26a:	4619      	mov	r1, r3
 800c26c:	4820      	ldr	r0, [pc, #128]	; (800c2f0 <QSPI_ResetMemory+0xd0>)
 800c26e:	f7fe fd54 	bl	800ad1a <MT25TL01G_AutoPollingMemReady>
 800c272:	4603      	mov	r3, r0
 800c274:	2b00      	cmp	r3, #0
 800c276:	d003      	beq.n	800c280 <QSPI_ResetMemory+0x60>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c278:	f06f 0304 	mvn.w	r3, #4
 800c27c:	60fb      	str	r3, [r7, #12]
 800c27e:	e032      	b.n	800c2e6 <QSPI_ResetMemory+0xc6>
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800c280:	2100      	movs	r1, #0
 800c282:	481b      	ldr	r0, [pc, #108]	; (800c2f0 <QSPI_ResetMemory+0xd0>)
 800c284:	f7fe ff06 	bl	800b094 <MT25TL01G_ResetEnable>
 800c288:	4603      	mov	r3, r0
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d003      	beq.n	800c296 <QSPI_ResetMemory+0x76>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c28e:	f06f 0304 	mvn.w	r3, #4
 800c292:	60fb      	str	r3, [r7, #12]
 800c294:	e027      	b.n	800c2e6 <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800c296:	2100      	movs	r1, #0
 800c298:	4815      	ldr	r0, [pc, #84]	; (800c2f0 <QSPI_ResetMemory+0xd0>)
 800c29a:	f7fe ff2d 	bl	800b0f8 <MT25TL01G_ResetMemory>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d003      	beq.n	800c2ac <QSPI_ResetMemory+0x8c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c2a4:	f06f 0304 	mvn.w	r3, #4
 800c2a8:	60fb      	str	r3, [r7, #12]
 800c2aa:	e01c      	b.n	800c2e6 <QSPI_ResetMemory+0xc6>
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 800c2ac:	4911      	ldr	r1, [pc, #68]	; (800c2f4 <QSPI_ResetMemory+0xd4>)
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	4613      	mov	r3, r2
 800c2b2:	005b      	lsls	r3, r3, #1
 800c2b4:	4413      	add	r3, r2
 800c2b6:	009b      	lsls	r3, r3, #2
 800c2b8:	440b      	add	r3, r1
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
 800c2be:	490d      	ldr	r1, [pc, #52]	; (800c2f4 <QSPI_ResetMemory+0xd4>)
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	4613      	mov	r3, r2
 800c2c4:	005b      	lsls	r3, r3, #1
 800c2c6:	4413      	add	r3, r2
 800c2c8:	009b      	lsls	r3, r3, #2
 800c2ca:	440b      	add	r3, r1
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 800c2d2:	4908      	ldr	r1, [pc, #32]	; (800c2f4 <QSPI_ResetMemory+0xd4>)
 800c2d4:	687a      	ldr	r2, [r7, #4]
 800c2d6:	4613      	mov	r3, r2
 800c2d8:	005b      	lsls	r3, r3, #1
 800c2da:	4413      	add	r3, r2
 800c2dc:	009b      	lsls	r3, r3, #2
 800c2de:	440b      	add	r3, r1
 800c2e0:	3302      	adds	r3, #2
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	701a      	strb	r2, [r3, #0]

  }

  /* Return BSP status */
  return ret;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3710      	adds	r7, #16
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}
 800c2f0:	2400027c 	.word	0x2400027c
 800c2f4:	2400aee4 	.word	0x2400aee4

0800c2f8 <QSPI_DummyCyclesCfg>:
  *         Dummy cycle bit locate in Configuration Register[7:6]
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_DummyCyclesCfg(uint32_t Instance)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b092      	sub	sp, #72	; 0x48
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
    int32_t ret= BSP_ERROR_NONE;
 800c300:	2300      	movs	r3, #0
 800c302:	647b      	str	r3, [r7, #68]	; 0x44
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;
 800c304:	2300      	movs	r3, #0
 800c306:	817b      	strh	r3, [r7, #10]

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800c308:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c30c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800c30e:	2385      	movs	r3, #133	; 0x85
 800c310:	60fb      	str	r3, [r7, #12]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800c312:	2300      	movs	r3, #0
 800c314:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800c316:	2300      	movs	r3, #0
 800c318:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800c31a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800c31e:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = 0;
 800c320:	2300      	movs	r3, #0
 800c322:	623b      	str	r3, [r7, #32]
  s_command.NbData            = 2;
 800c324:	2302      	movs	r3, #2
 800c326:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800c328:	2300      	movs	r3, #0
 800c32a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800c32c:	2300      	movs	r3, #0
 800c32e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800c330:	2300      	movs	r3, #0
 800c332:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800c334:	f107 030c 	add.w	r3, r7, #12
 800c338:	f241 3288 	movw	r2, #5000	; 0x1388
 800c33c:	4619      	mov	r1, r3
 800c33e:	482b      	ldr	r0, [pc, #172]	; (800c3ec <QSPI_DummyCyclesCfg+0xf4>)
 800c340:	f003 f9d4 	bl	800f6ec <HAL_QSPI_Command>
 800c344:	4603      	mov	r3, r0
 800c346:	2b00      	cmp	r3, #0
 800c348:	d002      	beq.n	800c350 <QSPI_DummyCyclesCfg+0x58>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800c34a:	f06f 0304 	mvn.w	r3, #4
 800c34e:	e048      	b.n	800c3e2 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800c350:	f107 030a 	add.w	r3, r7, #10
 800c354:	f241 3288 	movw	r2, #5000	; 0x1388
 800c358:	4619      	mov	r1, r3
 800c35a:	4824      	ldr	r0, [pc, #144]	; (800c3ec <QSPI_DummyCyclesCfg+0xf4>)
 800c35c:	f003 fab6 	bl	800f8cc <HAL_QSPI_Receive>
 800c360:	4603      	mov	r3, r0
 800c362:	2b00      	cmp	r3, #0
 800c364:	d002      	beq.n	800c36c <QSPI_DummyCyclesCfg+0x74>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800c366:	f06f 0304 	mvn.w	r3, #4
 800c36a:	e03a      	b.n	800c3e2 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800c36c:	4920      	ldr	r1, [pc, #128]	; (800c3f0 <QSPI_DummyCyclesCfg+0xf8>)
 800c36e:	687a      	ldr	r2, [r7, #4]
 800c370:	4613      	mov	r3, r2
 800c372:	005b      	lsls	r3, r3, #1
 800c374:	4413      	add	r3, r2
 800c376:	009b      	lsls	r3, r3, #2
 800c378:	440b      	add	r3, r1
 800c37a:	3301      	adds	r3, #1
 800c37c:	781b      	ldrb	r3, [r3, #0]
 800c37e:	4619      	mov	r1, r3
 800c380:	481a      	ldr	r0, [pc, #104]	; (800c3ec <QSPI_DummyCyclesCfg+0xf4>)
 800c382:	f7fe fd06 	bl	800ad92 <MT25TL01G_WriteEnable>
 800c386:	4603      	mov	r3, r0
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d002      	beq.n	800c392 <QSPI_DummyCyclesCfg+0x9a>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800c38c:	f06f 0304 	mvn.w	r3, #4
 800c390:	e027      	b.n	800c3e2 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800c392:	2381      	movs	r3, #129	; 0x81
 800c394:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800c396:	897a      	ldrh	r2, [r7, #10]
 800c398:	f640 730f 	movw	r3, #3855	; 0xf0f
 800c39c:	4013      	ands	r3, r2
 800c39e:	b29a      	uxth	r2, r3
 800c3a0:	4b14      	ldr	r3, [pc, #80]	; (800c3f4 <QSPI_DummyCyclesCfg+0xfc>)
 800c3a2:	4313      	orrs	r3, r2
 800c3a4:	b29b      	uxth	r3, r3
 800c3a6:	817b      	strh	r3, [r7, #10]
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800c3a8:	f107 030c 	add.w	r3, r7, #12
 800c3ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	480e      	ldr	r0, [pc, #56]	; (800c3ec <QSPI_DummyCyclesCfg+0xf4>)
 800c3b4:	f003 f99a 	bl	800f6ec <HAL_QSPI_Command>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d002      	beq.n	800c3c4 <QSPI_DummyCyclesCfg+0xcc>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800c3be:	f06f 0304 	mvn.w	r3, #4
 800c3c2:	e00e      	b.n	800c3e2 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800c3c4:	f107 030a 	add.w	r3, r7, #10
 800c3c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3cc:	4619      	mov	r1, r3
 800c3ce:	4807      	ldr	r0, [pc, #28]	; (800c3ec <QSPI_DummyCyclesCfg+0xf4>)
 800c3d0:	f003 f9ea 	bl	800f7a8 <HAL_QSPI_Transmit>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d002      	beq.n	800c3e0 <QSPI_DummyCyclesCfg+0xe8>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800c3da:	f06f 0304 	mvn.w	r3, #4
 800c3de:	e000      	b.n	800c3e2 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Return BSP status */
  return ret;
 800c3e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3748      	adds	r7, #72	; 0x48
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
 800c3ea:	bf00      	nop
 800c3ec:	2400027c 	.word	0x2400027c
 800c3f0:	2400aee4 	.word	0x2400aee4
 800c3f4:	ffff8080 	.word	0xffff8080

0800c3f8 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b084      	sub	sp, #16
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c400:	2300      	movs	r3, #0
 800c402:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d003      	beq.n	800c412 <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 800c40a:	f06f 0301 	mvn.w	r3, #1
 800c40e:	60fb      	str	r3, [r7, #12]
 800c410:	e044      	b.n	800c49c <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2234      	movs	r2, #52	; 0x34
 800c416:	fb02 f303 	mul.w	r3, r2, r3
 800c41a:	4a23      	ldr	r2, [pc, #140]	; (800c4a8 <BSP_SDRAM_Init+0xb0>)
 800c41c:	4413      	add	r3, r2
 800c41e:	4618      	mov	r0, r3
 800c420:	f000 f8b8 	bl	800c594 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2234      	movs	r2, #52	; 0x34
 800c428:	fb02 f303 	mul.w	r3, r2, r3
 800c42c:	4a1e      	ldr	r2, [pc, #120]	; (800c4a8 <BSP_SDRAM_Init+0xb0>)
 800c42e:	4413      	add	r3, r2
 800c430:	2210      	movs	r2, #16
 800c432:	2104      	movs	r1, #4
 800c434:	4618      	mov	r0, r3
 800c436:	f000 f861 	bl	800c4fc <MX_SDRAM_BANK2_Init>
 800c43a:	4603      	mov	r3, r0
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d003      	beq.n	800c448 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 800c440:	f04f 33ff 	mov.w	r3, #4294967295
 800c444:	60fb      	str	r3, [r7, #12]
 800c446:	e029      	b.n	800c49c <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800c448:	4b18      	ldr	r3, [pc, #96]	; (800c4ac <BSP_SDRAM_Init+0xb4>)
 800c44a:	2208      	movs	r2, #8
 800c44c:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 800c44e:	4b17      	ldr	r3, [pc, #92]	; (800c4ac <BSP_SDRAM_Init+0xb4>)
 800c450:	2203      	movs	r2, #3
 800c452:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800c454:	4b15      	ldr	r3, [pc, #84]	; (800c4ac <BSP_SDRAM_Init+0xb4>)
 800c456:	f240 6203 	movw	r2, #1539	; 0x603
 800c45a:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 800c45c:	4b13      	ldr	r3, [pc, #76]	; (800c4ac <BSP_SDRAM_Init+0xb4>)
 800c45e:	2200      	movs	r2, #0
 800c460:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 800c462:	4b12      	ldr	r3, [pc, #72]	; (800c4ac <BSP_SDRAM_Init+0xb4>)
 800c464:	2200      	movs	r2, #0
 800c466:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 800c468:	4b10      	ldr	r3, [pc, #64]	; (800c4ac <BSP_SDRAM_Init+0xb4>)
 800c46a:	2230      	movs	r2, #48	; 0x30
 800c46c:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 800c46e:	4b0f      	ldr	r3, [pc, #60]	; (800c4ac <BSP_SDRAM_Init+0xb4>)
 800c470:	2200      	movs	r2, #0
 800c472:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 800c474:	4b0d      	ldr	r3, [pc, #52]	; (800c4ac <BSP_SDRAM_Init+0xb4>)
 800c476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c47a:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2234      	movs	r2, #52	; 0x34
 800c480:	fb02 f303 	mul.w	r3, r2, r3
 800c484:	4a08      	ldr	r2, [pc, #32]	; (800c4a8 <BSP_SDRAM_Init+0xb0>)
 800c486:	4413      	add	r3, r2
 800c488:	4908      	ldr	r1, [pc, #32]	; (800c4ac <BSP_SDRAM_Init+0xb4>)
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7fe fe66 	bl	800b15c <MT48LC4M32B2_Init>
 800c490:	4603      	mov	r3, r0
 800c492:	2b00      	cmp	r3, #0
 800c494:	d002      	beq.n	800c49c <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 800c496:	f06f 0304 	mvn.w	r3, #4
 800c49a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 800c49c:	68fb      	ldr	r3, [r7, #12]
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3710      	adds	r7, #16
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
 800c4a6:	bf00      	nop
 800c4a8:	2400aef0 	.word	0x2400aef0
 800c4ac:	2400af24 	.word	0x2400af24

0800c4b0 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param  Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b084      	sub	sp, #16
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	60fb      	str	r3, [r7, #12]

  if(Instance >= SDRAM_INSTANCES_NBR)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d003      	beq.n	800c4ca <BSP_SDRAM_DeInit+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 800c4c2:	f06f 0301 	mvn.w	r3, #1
 800c4c6:	60fb      	str	r3, [r7, #12]
 800c4c8:	e011      	b.n	800c4ee <BSP_SDRAM_DeInit+0x3e>
  }
  else
  {
    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2234      	movs	r2, #52	; 0x34
 800c4ce:	fb02 f303 	mul.w	r3, r2, r3
 800c4d2:	4a09      	ldr	r2, [pc, #36]	; (800c4f8 <BSP_SDRAM_DeInit+0x48>)
 800c4d4:	4413      	add	r3, r2
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f005 ff08 	bl	80122ec <HAL_SDRAM_DeInit>
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0)
    /* SDRAM controller de-initialization */
    SDRAM_MspDeInit(&hsdram[Instance]);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2234      	movs	r2, #52	; 0x34
 800c4e0:	fb02 f303 	mul.w	r3, r2, r3
 800c4e4:	4a04      	ldr	r2, [pc, #16]	; (800c4f8 <BSP_SDRAM_DeInit+0x48>)
 800c4e6:	4413      	add	r3, r2
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f000 f951 	bl	800c790 <SDRAM_MspDeInit>
#endif /* (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0) */
  }

  return ret;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3710      	adds	r7, #16
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}
 800c4f8:	2400aef0 	.word	0x2400aef0

0800c4fc <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b08c      	sub	sp, #48	; 0x30
 800c500:	af00      	add	r7, sp, #0
 800c502:	60f8      	str	r0, [r7, #12]
 800c504:	60b9      	str	r1, [r7, #8]
 800c506:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 800c508:	4b20      	ldr	r3, [pc, #128]	; (800c58c <MX_SDRAM_BANK2_Init+0x90>)
 800c50a:	4a21      	ldr	r2, [pc, #132]	; (800c590 <MX_SDRAM_BANK2_Init+0x94>)
 800c50c:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2201      	movs	r2, #1
 800c512:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	2200      	movs	r2, #0
 800c518:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	68ba      	ldr	r2, [r7, #8]
 800c51e:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	687a      	ldr	r2, [r7, #4]
 800c524:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800c526:	4b19      	ldr	r3, [pc, #100]	; (800c58c <MX_SDRAM_BANK2_Init+0x90>)
 800c528:	2240      	movs	r2, #64	; 0x40
 800c52a:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800c532:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2200      	movs	r2, #0
 800c538:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c540:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c548:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	2200      	movs	r2, #0
 800c54e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 800c550:	2302      	movs	r3, #2
 800c552:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 800c554:	2307      	movs	r3, #7
 800c556:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 800c558:	2304      	movs	r3, #4
 800c55a:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 800c55c:	2307      	movs	r3, #7
 800c55e:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 800c560:	2302      	movs	r3, #2
 800c562:	627b      	str	r3, [r7, #36]	; 0x24
  sdram_timing.RPDelay              = 2;
 800c564:	2302      	movs	r3, #2
 800c566:	62bb      	str	r3, [r7, #40]	; 0x28
  sdram_timing.RCDDelay             = 2;
 800c568:	2302      	movs	r3, #2
 800c56a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800c56c:	f107 0314 	add.w	r3, r7, #20
 800c570:	4619      	mov	r1, r3
 800c572:	68f8      	ldr	r0, [r7, #12]
 800c574:	f005 fe7e 	bl	8012274 <HAL_SDRAM_Init>
 800c578:	4603      	mov	r3, r0
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d001      	beq.n	800c582 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 800c57e:	2301      	movs	r3, #1
 800c580:	e000      	b.n	800c584 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 800c582:	2300      	movs	r3, #0
}
 800c584:	4618      	mov	r0, r3
 800c586:	3730      	adds	r7, #48	; 0x30
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}
 800c58c:	2400aef0 	.word	0x2400aef0
 800c590:	52004140 	.word	0x52004140

0800c594 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b08e      	sub	sp, #56	; 0x38
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800c59c:	4b73      	ldr	r3, [pc, #460]	; (800c76c <SDRAM_MspInit+0x1d8>)
 800c59e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c5a2:	4a72      	ldr	r2, [pc, #456]	; (800c76c <SDRAM_MspInit+0x1d8>)
 800c5a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c5a8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800c5ac:	4b6f      	ldr	r3, [pc, #444]	; (800c76c <SDRAM_MspInit+0x1d8>)
 800c5ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c5b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c5b6:	623b      	str	r3, [r7, #32]
 800c5b8:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 800c5ba:	4b6c      	ldr	r3, [pc, #432]	; (800c76c <SDRAM_MspInit+0x1d8>)
 800c5bc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c5c0:	4a6a      	ldr	r2, [pc, #424]	; (800c76c <SDRAM_MspInit+0x1d8>)
 800c5c2:	f043 0301 	orr.w	r3, r3, #1
 800c5c6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800c5ca:	4b68      	ldr	r3, [pc, #416]	; (800c76c <SDRAM_MspInit+0x1d8>)
 800c5cc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c5d0:	f003 0301 	and.w	r3, r3, #1
 800c5d4:	61fb      	str	r3, [r7, #28]
 800c5d6:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c5d8:	4b64      	ldr	r3, [pc, #400]	; (800c76c <SDRAM_MspInit+0x1d8>)
 800c5da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c5de:	4a63      	ldr	r2, [pc, #396]	; (800c76c <SDRAM_MspInit+0x1d8>)
 800c5e0:	f043 0308 	orr.w	r3, r3, #8
 800c5e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c5e8:	4b60      	ldr	r3, [pc, #384]	; (800c76c <SDRAM_MspInit+0x1d8>)
 800c5ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c5ee:	f003 0308 	and.w	r3, r3, #8
 800c5f2:	61bb      	str	r3, [r7, #24]
 800c5f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c5f6:	4b5d      	ldr	r3, [pc, #372]	; (800c76c <SDRAM_MspInit+0x1d8>)
 800c5f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c5fc:	4a5b      	ldr	r2, [pc, #364]	; (800c76c <SDRAM_MspInit+0x1d8>)
 800c5fe:	f043 0310 	orr.w	r3, r3, #16
 800c602:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c606:	4b59      	ldr	r3, [pc, #356]	; (800c76c <SDRAM_MspInit+0x1d8>)
 800c608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c60c:	f003 0310 	and.w	r3, r3, #16
 800c610:	617b      	str	r3, [r7, #20]
 800c612:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800c614:	4b55      	ldr	r3, [pc, #340]	; (800c76c <SDRAM_MspInit+0x1d8>)
 800c616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c61a:	4a54      	ldr	r2, [pc, #336]	; (800c76c <SDRAM_MspInit+0x1d8>)
 800c61c:	f043 0320 	orr.w	r3, r3, #32
 800c620:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c624:	4b51      	ldr	r3, [pc, #324]	; (800c76c <SDRAM_MspInit+0x1d8>)
 800c626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c62a:	f003 0320 	and.w	r3, r3, #32
 800c62e:	613b      	str	r3, [r7, #16]
 800c630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800c632:	4b4e      	ldr	r3, [pc, #312]	; (800c76c <SDRAM_MspInit+0x1d8>)
 800c634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c638:	4a4c      	ldr	r2, [pc, #304]	; (800c76c <SDRAM_MspInit+0x1d8>)
 800c63a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c63e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c642:	4b4a      	ldr	r3, [pc, #296]	; (800c76c <SDRAM_MspInit+0x1d8>)
 800c644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c64c:	60fb      	str	r3, [r7, #12]
 800c64e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c650:	4b46      	ldr	r3, [pc, #280]	; (800c76c <SDRAM_MspInit+0x1d8>)
 800c652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c656:	4a45      	ldr	r2, [pc, #276]	; (800c76c <SDRAM_MspInit+0x1d8>)
 800c658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c65c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c660:	4b42      	ldr	r3, [pc, #264]	; (800c76c <SDRAM_MspInit+0x1d8>)
 800c662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c66a:	60bb      	str	r3, [r7, #8]
 800c66c:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800c66e:	2302      	movs	r3, #2
 800c670:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800c672:	2301      	movs	r3, #1
 800c674:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800c676:	2303      	movs	r3, #3
 800c678:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800c67a:	230c      	movs	r3, #12
 800c67c:	637b      	str	r3, [r7, #52]	; 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800c67e:	f24c 7303 	movw	r3, #50947	; 0xc703
 800c682:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800c684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c688:	4619      	mov	r1, r3
 800c68a:	4839      	ldr	r0, [pc, #228]	; (800c770 <SDRAM_MspInit+0x1dc>)
 800c68c:	f000 ff62 	bl	800d554 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800c690:	f64f 7383 	movw	r3, #65411	; 0xff83
 800c694:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800c696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c69a:	4619      	mov	r1, r3
 800c69c:	4835      	ldr	r0, [pc, #212]	; (800c774 <SDRAM_MspInit+0x1e0>)
 800c69e:	f000 ff59 	bl	800d554 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800c6a2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800c6a6:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800c6a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6ac:	4619      	mov	r1, r3
 800c6ae:	4832      	ldr	r0, [pc, #200]	; (800c778 <SDRAM_MspInit+0x1e4>)
 800c6b0:	f000 ff50 	bl	800d554 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 800c6b4:	f248 1333 	movw	r3, #33075	; 0x8133
 800c6b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800c6ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6be:	4619      	mov	r1, r3
 800c6c0:	482e      	ldr	r0, [pc, #184]	; (800c77c <SDRAM_MspInit+0x1e8>)
 800c6c2:	f000 ff47 	bl	800d554 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 800c6c6:	23e0      	movs	r3, #224	; 0xe0
 800c6c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800c6ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	482b      	ldr	r0, [pc, #172]	; (800c780 <SDRAM_MspInit+0x1ec>)
 800c6d2:	f000 ff3f 	bl	800d554 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 800c6d6:	4b2b      	ldr	r3, [pc, #172]	; (800c784 <SDRAM_MspInit+0x1f0>)
 800c6d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c6dc:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 800c6de:	4b29      	ldr	r3, [pc, #164]	; (800c784 <SDRAM_MspInit+0x1f0>)
 800c6e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6e4:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 800c6e6:	4b27      	ldr	r3, [pc, #156]	; (800c784 <SDRAM_MspInit+0x1f0>)
 800c6e8:	2280      	movs	r2, #128	; 0x80
 800c6ea:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800c6ec:	4b25      	ldr	r3, [pc, #148]	; (800c784 <SDRAM_MspInit+0x1f0>)
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 800c6f2:	4b24      	ldr	r3, [pc, #144]	; (800c784 <SDRAM_MspInit+0x1f0>)
 800c6f4:	f240 2202 	movw	r2, #514	; 0x202
 800c6f8:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 800c6fa:	4b22      	ldr	r3, [pc, #136]	; (800c784 <SDRAM_MspInit+0x1f0>)
 800c6fc:	f640 0208 	movw	r2, #2056	; 0x808
 800c700:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800c702:	4b20      	ldr	r3, [pc, #128]	; (800c784 <SDRAM_MspInit+0x1f0>)
 800c704:	2220      	movs	r2, #32
 800c706:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 800c708:	4b1e      	ldr	r3, [pc, #120]	; (800c784 <SDRAM_MspInit+0x1f0>)
 800c70a:	2280      	movs	r2, #128	; 0x80
 800c70c:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800c70e:	4b1d      	ldr	r3, [pc, #116]	; (800c784 <SDRAM_MspInit+0x1f0>)
 800c710:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800c714:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 800c716:	4b1b      	ldr	r3, [pc, #108]	; (800c784 <SDRAM_MspInit+0x1f0>)
 800c718:	2200      	movs	r2, #0
 800c71a:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 800c71c:	4b19      	ldr	r3, [pc, #100]	; (800c784 <SDRAM_MspInit+0x1f0>)
 800c71e:	2200      	movs	r2, #0
 800c720:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 800c722:	4b18      	ldr	r3, [pc, #96]	; (800c784 <SDRAM_MspInit+0x1f0>)
 800c724:	2280      	movs	r2, #128	; 0x80
 800c726:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 800c728:	4b16      	ldr	r3, [pc, #88]	; (800c784 <SDRAM_MspInit+0x1f0>)
 800c72a:	2200      	movs	r2, #0
 800c72c:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 800c72e:	4b15      	ldr	r3, [pc, #84]	; (800c784 <SDRAM_MspInit+0x1f0>)
 800c730:	2200      	movs	r2, #0
 800c732:	639a      	str	r2, [r3, #56]	; 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800c734:	4b13      	ldr	r3, [pc, #76]	; (800c784 <SDRAM_MspInit+0x1f0>)
 800c736:	4a14      	ldr	r2, [pc, #80]	; (800c788 <SDRAM_MspInit+0x1f4>)
 800c738:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800c73a:	4b14      	ldr	r3, [pc, #80]	; (800c78c <SDRAM_MspInit+0x1f8>)
 800c73c:	4a11      	ldr	r2, [pc, #68]	; (800c784 <SDRAM_MspInit+0x1f0>)
 800c73e:	631a      	str	r2, [r3, #48]	; 0x30
 800c740:	4b10      	ldr	r3, [pc, #64]	; (800c784 <SDRAM_MspInit+0x1f0>)
 800c742:	4a12      	ldr	r2, [pc, #72]	; (800c78c <SDRAM_MspInit+0x1f8>)
 800c744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 800c746:	480f      	ldr	r0, [pc, #60]	; (800c784 <SDRAM_MspInit+0x1f0>)
 800c748:	f002 fc30 	bl	800efac <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 800c74c:	480d      	ldr	r0, [pc, #52]	; (800c784 <SDRAM_MspInit+0x1f0>)
 800c74e:	f002 fbe1 	bl	800ef14 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 800c752:	2200      	movs	r2, #0
 800c754:	210f      	movs	r1, #15
 800c756:	207a      	movs	r0, #122	; 0x7a
 800c758:	f000 fbec 	bl	800cf34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 800c75c:	207a      	movs	r0, #122	; 0x7a
 800c75e:	f000 fc03 	bl	800cf68 <HAL_NVIC_EnableIRQ>
}
 800c762:	bf00      	nop
 800c764:	3738      	adds	r7, #56	; 0x38
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	58024400 	.word	0x58024400
 800c770:	58020c00 	.word	0x58020c00
 800c774:	58021000 	.word	0x58021000
 800c778:	58021400 	.word	0x58021400
 800c77c:	58021800 	.word	0x58021800
 800c780:	58021c00 	.word	0x58021c00
 800c784:	2400af44 	.word	0x2400af44
 800c788:	52000040 	.word	0x52000040
 800c78c:	2400aef0 	.word	0x2400aef0

0800c790 <SDRAM_MspDeInit>:
  * @brief  DeInitializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspDeInit(SDRAM_HandleTypeDef  *hSdram)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSdram);

  /* Disable NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 800c798:	207a      	movs	r0, #122	; 0x7a
 800c79a:	f000 fbf3 	bl	800cf84 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800c79e:	4b05      	ldr	r3, [pc, #20]	; (800c7b4 <SDRAM_MspDeInit+0x24>)
 800c7a0:	4a05      	ldr	r2, [pc, #20]	; (800c7b8 <SDRAM_MspDeInit+0x28>)
 800c7a2:	601a      	str	r2, [r3, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800c7a4:	4803      	ldr	r0, [pc, #12]	; (800c7b4 <SDRAM_MspDeInit+0x24>)
 800c7a6:	f002 fc01 	bl	800efac <HAL_MDMA_DeInit>
}
 800c7aa:	bf00      	nop
 800c7ac:	3708      	adds	r7, #8
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}
 800c7b2:	bf00      	nop
 800c7b4:	2400afb0 	.word	0x2400afb0
 800c7b8:	52000040 	.word	0x52000040

0800c7bc <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b088      	sub	sp, #32
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d11c      	bne.n	800c80a <BSP_TS_Init+0x4e>
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d018      	beq.n	800c80a <BSP_TS_Init+0x4e>
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800c7e0:	d813      	bhi.n	800c80a <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d00f      	beq.n	800c80a <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	685b      	ldr	r3, [r3, #4]
 800c7ee:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800c7f2:	d80a      	bhi.n	800c80a <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	68da      	ldr	r2, [r3, #12]
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	6819      	ldr	r1, [r3, #0]
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	428b      	cmp	r3, r1
 800c802:	bf28      	it	cs
 800c804:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800c806:	429a      	cmp	r2, r3
 800c808:	d903      	bls.n	800c812 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c80a:	f06f 0301 	mvn.w	r3, #1
 800c80e:	61fb      	str	r3, [r7, #28]
 800c810:	e085      	b.n	800c91e <BSP_TS_Init+0x162>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 f9e6 	bl	800cbe4 <FT5336_Probe>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d003      	beq.n	800c826 <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 800c81e:	f04f 33ff 	mov.w	r3, #4294967295
 800c822:	61fb      	str	r3, [r7, #28]
 800c824:	e07b      	b.n	800c91e <BSP_TS_Init+0x162>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	6819      	ldr	r1, [r3, #0]
 800c82a:	483f      	ldr	r0, [pc, #252]	; (800c928 <BSP_TS_Init+0x16c>)
 800c82c:	687a      	ldr	r2, [r7, #4]
 800c82e:	4613      	mov	r3, r2
 800c830:	009b      	lsls	r3, r3, #2
 800c832:	4413      	add	r3, r2
 800c834:	00db      	lsls	r3, r3, #3
 800c836:	4403      	add	r3, r0
 800c838:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	6859      	ldr	r1, [r3, #4]
 800c83e:	483a      	ldr	r0, [pc, #232]	; (800c928 <BSP_TS_Init+0x16c>)
 800c840:	687a      	ldr	r2, [r7, #4]
 800c842:	4613      	mov	r3, r2
 800c844:	009b      	lsls	r3, r3, #2
 800c846:	4413      	add	r3, r2
 800c848:	00db      	lsls	r3, r3, #3
 800c84a:	4403      	add	r3, r0
 800c84c:	3304      	adds	r3, #4
 800c84e:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	6899      	ldr	r1, [r3, #8]
 800c854:	4834      	ldr	r0, [pc, #208]	; (800c928 <BSP_TS_Init+0x16c>)
 800c856:	687a      	ldr	r2, [r7, #4]
 800c858:	4613      	mov	r3, r2
 800c85a:	009b      	lsls	r3, r3, #2
 800c85c:	4413      	add	r3, r2
 800c85e:	00db      	lsls	r3, r3, #3
 800c860:	4403      	add	r3, r0
 800c862:	3308      	adds	r3, #8
 800c864:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	68d9      	ldr	r1, [r3, #12]
 800c86a:	482f      	ldr	r0, [pc, #188]	; (800c928 <BSP_TS_Init+0x16c>)
 800c86c:	687a      	ldr	r2, [r7, #4]
 800c86e:	4613      	mov	r3, r2
 800c870:	009b      	lsls	r3, r3, #2
 800c872:	4413      	add	r3, r2
 800c874:	00db      	lsls	r3, r3, #3
 800c876:	4403      	add	r3, r0
 800c878:	330c      	adds	r3, #12
 800c87a:	6019      	str	r1, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800c87c:	4b2b      	ldr	r3, [pc, #172]	; (800c92c <BSP_TS_Init+0x170>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	69db      	ldr	r3, [r3, #28]
 800c882:	492b      	ldr	r1, [pc, #172]	; (800c930 <BSP_TS_Init+0x174>)
 800c884:	687a      	ldr	r2, [r7, #4]
 800c886:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c88a:	f107 010c 	add.w	r1, r7, #12
 800c88e:	4610      	mov	r0, r2
 800c890:	4798      	blx	r3
 800c892:	4603      	mov	r3, r0
 800c894:	2b00      	cmp	r3, #0
 800c896:	da03      	bge.n	800c8a0 <BSP_TS_Init+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c898:	f06f 0304 	mvn.w	r3, #4
 800c89c:	61fb      	str	r3, [r7, #28]
 800c89e:	e03e      	b.n	800c91e <BSP_TS_Init+0x162>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800c8a0:	6939      	ldr	r1, [r7, #16]
 800c8a2:	4821      	ldr	r0, [pc, #132]	; (800c928 <BSP_TS_Init+0x16c>)
 800c8a4:	687a      	ldr	r2, [r7, #4]
 800c8a6:	4613      	mov	r3, r2
 800c8a8:	009b      	lsls	r3, r3, #2
 800c8aa:	4413      	add	r3, r2
 800c8ac:	00db      	lsls	r3, r3, #3
 800c8ae:	4403      	add	r3, r0
 800c8b0:	3310      	adds	r3, #16
 800c8b2:	6019      	str	r1, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800c8b4:	6979      	ldr	r1, [r7, #20]
 800c8b6:	481c      	ldr	r0, [pc, #112]	; (800c928 <BSP_TS_Init+0x16c>)
 800c8b8:	687a      	ldr	r2, [r7, #4]
 800c8ba:	4613      	mov	r3, r2
 800c8bc:	009b      	lsls	r3, r3, #2
 800c8be:	4413      	add	r3, r2
 800c8c0:	00db      	lsls	r3, r3, #3
 800c8c2:	4403      	add	r3, r0
 800c8c4:	3314      	adds	r3, #20
 800c8c6:	6019      	str	r1, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	61bb      	str	r3, [r7, #24]
 800c8cc:	e024      	b.n	800c918 <BSP_TS_Init+0x15c>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	68db      	ldr	r3, [r3, #12]
 800c8d6:	4413      	add	r3, r2
 800c8d8:	1c59      	adds	r1, r3, #1
 800c8da:	4813      	ldr	r0, [pc, #76]	; (800c928 <BSP_TS_Init+0x16c>)
 800c8dc:	687a      	ldr	r2, [r7, #4]
 800c8de:	4613      	mov	r3, r2
 800c8e0:	009b      	lsls	r3, r3, #2
 800c8e2:	4413      	add	r3, r2
 800c8e4:	005b      	lsls	r3, r3, #1
 800c8e6:	69ba      	ldr	r2, [r7, #24]
 800c8e8:	4413      	add	r3, r2
 800c8ea:	3306      	adds	r3, #6
 800c8ec:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	685a      	ldr	r2, [r3, #4]
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	68db      	ldr	r3, [r3, #12]
 800c8f8:	4413      	add	r3, r2
 800c8fa:	1c59      	adds	r1, r3, #1
 800c8fc:	480a      	ldr	r0, [pc, #40]	; (800c928 <BSP_TS_Init+0x16c>)
 800c8fe:	687a      	ldr	r2, [r7, #4]
 800c900:	4613      	mov	r3, r2
 800c902:	009b      	lsls	r3, r3, #2
 800c904:	4413      	add	r3, r2
 800c906:	005b      	lsls	r3, r3, #1
 800c908:	69ba      	ldr	r2, [r7, #24]
 800c90a:	4413      	add	r3, r2
 800c90c:	3308      	adds	r3, #8
 800c90e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800c912:	69bb      	ldr	r3, [r7, #24]
 800c914:	3301      	adds	r3, #1
 800c916:	61bb      	str	r3, [r7, #24]
 800c918:	69bb      	ldr	r3, [r7, #24]
 800c91a:	2b01      	cmp	r3, #1
 800c91c:	d9d7      	bls.n	800c8ce <BSP_TS_Init+0x112>
        }
      }
    }
  }

  return ret;
 800c91e:	69fb      	ldr	r3, [r7, #28]
}
 800c920:	4618      	mov	r0, r3
 800c922:	3720      	adds	r7, #32
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}
 800c928:	2400b024 	.word	0x2400b024
 800c92c:	2400b01c 	.word	0x2400b01c
 800c930:	2400b020 	.word	0x2400b020

0800c934 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b08a      	sub	sp, #40	; 0x28
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800c93e:	2300      	movs	r3, #0
 800c940:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d003      	beq.n	800c950 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c948:	f06f 0301 	mvn.w	r3, #1
 800c94c:	627b      	str	r3, [r7, #36]	; 0x24
 800c94e:	e13e      	b.n	800cbce <BSP_TS_GetState+0x29a>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800c950:	4ba1      	ldr	r3, [pc, #644]	; (800cbd8 <BSP_TS_GetState+0x2a4>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	691b      	ldr	r3, [r3, #16]
 800c956:	49a1      	ldr	r1, [pc, #644]	; (800cbdc <BSP_TS_GetState+0x2a8>)
 800c958:	687a      	ldr	r2, [r7, #4]
 800c95a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c95e:	f107 0108 	add.w	r1, r7, #8
 800c962:	4610      	mov	r0, r2
 800c964:	4798      	blx	r3
 800c966:	4603      	mov	r3, r0
 800c968:	2b00      	cmp	r3, #0
 800c96a:	da03      	bge.n	800c974 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c96c:	f06f 0304 	mvn.w	r3, #4
 800c970:	627b      	str	r3, [r7, #36]	; 0x24
 800c972:	e12c      	b.n	800cbce <BSP_TS_GetState+0x29a>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	2b00      	cmp	r3, #0
 800c978:	f000 8110 	beq.w	800cb9c <BSP_TS_GetState+0x268>
    {
      x_oriented = state.TouchX;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800c984:	4996      	ldr	r1, [pc, #600]	; (800cbe0 <BSP_TS_GetState+0x2ac>)
 800c986:	687a      	ldr	r2, [r7, #4]
 800c988:	4613      	mov	r3, r2
 800c98a:	009b      	lsls	r3, r3, #2
 800c98c:	4413      	add	r3, r2
 800c98e:	00db      	lsls	r3, r3, #3
 800c990:	440b      	add	r3, r1
 800c992:	3308      	adds	r3, #8
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f003 0308 	and.w	r3, r3, #8
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d003      	beq.n	800c9a6 <BSP_TS_GetState+0x72>
      {
        x_oriented = state.TouchY;
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800c9a6:	498e      	ldr	r1, [pc, #568]	; (800cbe0 <BSP_TS_GetState+0x2ac>)
 800c9a8:	687a      	ldr	r2, [r7, #4]
 800c9aa:	4613      	mov	r3, r2
 800c9ac:	009b      	lsls	r3, r3, #2
 800c9ae:	4413      	add	r3, r2
 800c9b0:	00db      	lsls	r3, r3, #3
 800c9b2:	440b      	add	r3, r1
 800c9b4:	3308      	adds	r3, #8
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f003 0302 	and.w	r3, r3, #2
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d00c      	beq.n	800c9da <BSP_TS_GetState+0xa6>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800c9c0:	4987      	ldr	r1, [pc, #540]	; (800cbe0 <BSP_TS_GetState+0x2ac>)
 800c9c2:	687a      	ldr	r2, [r7, #4]
 800c9c4:	4613      	mov	r3, r2
 800c9c6:	009b      	lsls	r3, r3, #2
 800c9c8:	4413      	add	r3, r2
 800c9ca:	00db      	lsls	r3, r3, #3
 800c9cc:	440b      	add	r3, r1
 800c9ce:	3310      	adds	r3, #16
 800c9d0:	681a      	ldr	r2, [r3, #0]
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	1ad3      	subs	r3, r2, r3
 800c9d6:	3b01      	subs	r3, #1
 800c9d8:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800c9da:	4981      	ldr	r1, [pc, #516]	; (800cbe0 <BSP_TS_GetState+0x2ac>)
 800c9dc:	687a      	ldr	r2, [r7, #4]
 800c9de:	4613      	mov	r3, r2
 800c9e0:	009b      	lsls	r3, r3, #2
 800c9e2:	4413      	add	r3, r2
 800c9e4:	00db      	lsls	r3, r3, #3
 800c9e6:	440b      	add	r3, r1
 800c9e8:	3308      	adds	r3, #8
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f003 0304 	and.w	r3, r3, #4
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d00b      	beq.n	800ca0c <BSP_TS_GetState+0xd8>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800c9f4:	497a      	ldr	r1, [pc, #488]	; (800cbe0 <BSP_TS_GetState+0x2ac>)
 800c9f6:	687a      	ldr	r2, [r7, #4]
 800c9f8:	4613      	mov	r3, r2
 800c9fa:	009b      	lsls	r3, r3, #2
 800c9fc:	4413      	add	r3, r2
 800c9fe:	00db      	lsls	r3, r3, #3
 800ca00:	440b      	add	r3, r1
 800ca02:	3314      	adds	r3, #20
 800ca04:	681a      	ldr	r2, [r3, #0]
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	1ad3      	subs	r3, r2, r3
 800ca0a:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800ca0c:	4974      	ldr	r1, [pc, #464]	; (800cbe0 <BSP_TS_GetState+0x2ac>)
 800ca0e:	687a      	ldr	r2, [r7, #4]
 800ca10:	4613      	mov	r3, r2
 800ca12:	009b      	lsls	r3, r3, #2
 800ca14:	4413      	add	r3, r2
 800ca16:	00db      	lsls	r3, r3, #3
 800ca18:	440b      	add	r3, r1
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	6a3a      	ldr	r2, [r7, #32]
 800ca1e:	fb02 f103 	mul.w	r1, r2, r3
 800ca22:	486f      	ldr	r0, [pc, #444]	; (800cbe0 <BSP_TS_GetState+0x2ac>)
 800ca24:	687a      	ldr	r2, [r7, #4]
 800ca26:	4613      	mov	r3, r2
 800ca28:	009b      	lsls	r3, r3, #2
 800ca2a:	4413      	add	r3, r2
 800ca2c:	00db      	lsls	r3, r3, #3
 800ca2e:	4403      	add	r3, r0
 800ca30:	3310      	adds	r3, #16
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	fbb1 f2f3 	udiv	r2, r1, r3
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800ca3c:	4968      	ldr	r1, [pc, #416]	; (800cbe0 <BSP_TS_GetState+0x2ac>)
 800ca3e:	687a      	ldr	r2, [r7, #4]
 800ca40:	4613      	mov	r3, r2
 800ca42:	009b      	lsls	r3, r3, #2
 800ca44:	4413      	add	r3, r2
 800ca46:	00db      	lsls	r3, r3, #3
 800ca48:	440b      	add	r3, r1
 800ca4a:	3304      	adds	r3, #4
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	69fa      	ldr	r2, [r7, #28]
 800ca50:	fb02 f103 	mul.w	r1, r2, r3
 800ca54:	4862      	ldr	r0, [pc, #392]	; (800cbe0 <BSP_TS_GetState+0x2ac>)
 800ca56:	687a      	ldr	r2, [r7, #4]
 800ca58:	4613      	mov	r3, r2
 800ca5a:	009b      	lsls	r3, r3, #2
 800ca5c:	4413      	add	r3, r2
 800ca5e:	00db      	lsls	r3, r3, #3
 800ca60:	4403      	add	r3, r0
 800ca62:	3314      	adds	r3, #20
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	fbb1 f2f3 	udiv	r2, r1, r3
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 800ca6e:	68ba      	ldr	r2, [r7, #8]
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	6859      	ldr	r1, [r3, #4]
 800ca78:	4859      	ldr	r0, [pc, #356]	; (800cbe0 <BSP_TS_GetState+0x2ac>)
 800ca7a:	687a      	ldr	r2, [r7, #4]
 800ca7c:	4613      	mov	r3, r2
 800ca7e:	009b      	lsls	r3, r3, #2
 800ca80:	4413      	add	r3, r2
 800ca82:	00db      	lsls	r3, r3, #3
 800ca84:	4403      	add	r3, r0
 800ca86:	3318      	adds	r3, #24
 800ca88:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800ca8a:	4299      	cmp	r1, r3
 800ca8c:	d90c      	bls.n	800caa8 <BSP_TS_GetState+0x174>
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	6859      	ldr	r1, [r3, #4]
 800ca92:	4853      	ldr	r0, [pc, #332]	; (800cbe0 <BSP_TS_GetState+0x2ac>)
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	4613      	mov	r3, r2
 800ca98:	009b      	lsls	r3, r3, #2
 800ca9a:	4413      	add	r3, r2
 800ca9c:	00db      	lsls	r3, r3, #3
 800ca9e:	4403      	add	r3, r0
 800caa0:	3318      	adds	r3, #24
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	1acb      	subs	r3, r1, r3
 800caa6:	e00b      	b.n	800cac0 <BSP_TS_GetState+0x18c>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 800caa8:	494d      	ldr	r1, [pc, #308]	; (800cbe0 <BSP_TS_GetState+0x2ac>)
 800caaa:	687a      	ldr	r2, [r7, #4]
 800caac:	4613      	mov	r3, r2
 800caae:	009b      	lsls	r3, r3, #2
 800cab0:	4413      	add	r3, r2
 800cab2:	00db      	lsls	r3, r3, #3
 800cab4:	440b      	add	r3, r1
 800cab6:	3318      	adds	r3, #24
 800cab8:	681a      	ldr	r2, [r3, #0]
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800cabe:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800cac0:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	6899      	ldr	r1, [r3, #8]
 800cac6:	4846      	ldr	r0, [pc, #280]	; (800cbe0 <BSP_TS_GetState+0x2ac>)
 800cac8:	687a      	ldr	r2, [r7, #4]
 800caca:	4613      	mov	r3, r2
 800cacc:	009b      	lsls	r3, r3, #2
 800cace:	4413      	add	r3, r2
 800cad0:	00db      	lsls	r3, r3, #3
 800cad2:	4403      	add	r3, r0
 800cad4:	3320      	adds	r3, #32
 800cad6:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800cad8:	4299      	cmp	r1, r3
 800cada:	d90c      	bls.n	800caf6 <BSP_TS_GetState+0x1c2>
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	6899      	ldr	r1, [r3, #8]
 800cae0:	483f      	ldr	r0, [pc, #252]	; (800cbe0 <BSP_TS_GetState+0x2ac>)
 800cae2:	687a      	ldr	r2, [r7, #4]
 800cae4:	4613      	mov	r3, r2
 800cae6:	009b      	lsls	r3, r3, #2
 800cae8:	4413      	add	r3, r2
 800caea:	00db      	lsls	r3, r3, #3
 800caec:	4403      	add	r3, r0
 800caee:	3320      	adds	r3, #32
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	1acb      	subs	r3, r1, r3
 800caf4:	e00b      	b.n	800cb0e <BSP_TS_GetState+0x1da>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 800caf6:	493a      	ldr	r1, [pc, #232]	; (800cbe0 <BSP_TS_GetState+0x2ac>)
 800caf8:	687a      	ldr	r2, [r7, #4]
 800cafa:	4613      	mov	r3, r2
 800cafc:	009b      	lsls	r3, r3, #2
 800cafe:	4413      	add	r3, r2
 800cb00:	00db      	lsls	r3, r3, #3
 800cb02:	440b      	add	r3, r1
 800cb04:	3320      	adds	r3, #32
 800cb06:	681a      	ldr	r2, [r3, #0]
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800cb0c:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800cb0e:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800cb10:	4933      	ldr	r1, [pc, #204]	; (800cbe0 <BSP_TS_GetState+0x2ac>)
 800cb12:	687a      	ldr	r2, [r7, #4]
 800cb14:	4613      	mov	r3, r2
 800cb16:	009b      	lsls	r3, r3, #2
 800cb18:	4413      	add	r3, r2
 800cb1a:	00db      	lsls	r3, r3, #3
 800cb1c:	440b      	add	r3, r1
 800cb1e:	330c      	adds	r3, #12
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	69ba      	ldr	r2, [r7, #24]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d80b      	bhi.n	800cb40 <BSP_TS_GetState+0x20c>
 800cb28:	492d      	ldr	r1, [pc, #180]	; (800cbe0 <BSP_TS_GetState+0x2ac>)
 800cb2a:	687a      	ldr	r2, [r7, #4]
 800cb2c:	4613      	mov	r3, r2
 800cb2e:	009b      	lsls	r3, r3, #2
 800cb30:	4413      	add	r3, r2
 800cb32:	00db      	lsls	r3, r3, #3
 800cb34:	440b      	add	r3, r1
 800cb36:	330c      	adds	r3, #12
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	697a      	ldr	r2, [r7, #20]
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d916      	bls.n	800cb6e <BSP_TS_GetState+0x23a>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	6859      	ldr	r1, [r3, #4]
 800cb44:	4826      	ldr	r0, [pc, #152]	; (800cbe0 <BSP_TS_GetState+0x2ac>)
 800cb46:	687a      	ldr	r2, [r7, #4]
 800cb48:	4613      	mov	r3, r2
 800cb4a:	009b      	lsls	r3, r3, #2
 800cb4c:	4413      	add	r3, r2
 800cb4e:	00db      	lsls	r3, r3, #3
 800cb50:	4403      	add	r3, r0
 800cb52:	3318      	adds	r3, #24
 800cb54:	6019      	str	r1, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	6899      	ldr	r1, [r3, #8]
 800cb5a:	4821      	ldr	r0, [pc, #132]	; (800cbe0 <BSP_TS_GetState+0x2ac>)
 800cb5c:	687a      	ldr	r2, [r7, #4]
 800cb5e:	4613      	mov	r3, r2
 800cb60:	009b      	lsls	r3, r3, #2
 800cb62:	4413      	add	r3, r2
 800cb64:	00db      	lsls	r3, r3, #3
 800cb66:	4403      	add	r3, r0
 800cb68:	3320      	adds	r3, #32
 800cb6a:	6019      	str	r1, [r3, #0]
 800cb6c:	e02f      	b.n	800cbce <BSP_TS_GetState+0x29a>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800cb6e:	491c      	ldr	r1, [pc, #112]	; (800cbe0 <BSP_TS_GetState+0x2ac>)
 800cb70:	687a      	ldr	r2, [r7, #4]
 800cb72:	4613      	mov	r3, r2
 800cb74:	009b      	lsls	r3, r3, #2
 800cb76:	4413      	add	r3, r2
 800cb78:	00db      	lsls	r3, r3, #3
 800cb7a:	440b      	add	r3, r1
 800cb7c:	3318      	adds	r3, #24
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800cb84:	4916      	ldr	r1, [pc, #88]	; (800cbe0 <BSP_TS_GetState+0x2ac>)
 800cb86:	687a      	ldr	r2, [r7, #4]
 800cb88:	4613      	mov	r3, r2
 800cb8a:	009b      	lsls	r3, r3, #2
 800cb8c:	4413      	add	r3, r2
 800cb8e:	00db      	lsls	r3, r3, #3
 800cb90:	440b      	add	r3, r1
 800cb92:	3320      	adds	r3, #32
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	609a      	str	r2, [r3, #8]
 800cb9a:	e018      	b.n	800cbce <BSP_TS_GetState+0x29a>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	2200      	movs	r2, #0
 800cba0:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800cba2:	490f      	ldr	r1, [pc, #60]	; (800cbe0 <BSP_TS_GetState+0x2ac>)
 800cba4:	687a      	ldr	r2, [r7, #4]
 800cba6:	4613      	mov	r3, r2
 800cba8:	009b      	lsls	r3, r3, #2
 800cbaa:	4413      	add	r3, r2
 800cbac:	00db      	lsls	r3, r3, #3
 800cbae:	440b      	add	r3, r1
 800cbb0:	3318      	adds	r3, #24
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800cbb8:	4909      	ldr	r1, [pc, #36]	; (800cbe0 <BSP_TS_GetState+0x2ac>)
 800cbba:	687a      	ldr	r2, [r7, #4]
 800cbbc:	4613      	mov	r3, r2
 800cbbe:	009b      	lsls	r3, r3, #2
 800cbc0:	4413      	add	r3, r2
 800cbc2:	00db      	lsls	r3, r3, #3
 800cbc4:	440b      	add	r3, r1
 800cbc6:	3320      	adds	r3, #32
 800cbc8:	681a      	ldr	r2, [r3, #0]
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	609a      	str	r2, [r3, #8]
    }
}

return ret;
 800cbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	3728      	adds	r7, #40	; 0x28
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}
 800cbd8:	2400b01c 	.word	0x2400b01c
 800cbdc:	2400b020 	.word	0x2400b020
 800cbe0:	2400b024 	.word	0x2400b024

0800cbe4 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b08a      	sub	sp, #40	; 0x28
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800cbec:	2300      	movs	r3, #0
 800cbee:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 800cbf4:	2370      	movs	r3, #112	; 0x70
 800cbf6:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 800cbf8:	4b23      	ldr	r3, [pc, #140]	; (800cc88 <FT5336_Probe+0xa4>)
 800cbfa:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800cbfc:	4b23      	ldr	r3, [pc, #140]	; (800cc8c <FT5336_Probe+0xa8>)
 800cbfe:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800cc00:	4b23      	ldr	r3, [pc, #140]	; (800cc90 <FT5336_Probe+0xac>)
 800cc02:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800cc04:	4b23      	ldr	r3, [pc, #140]	; (800cc94 <FT5336_Probe+0xb0>)
 800cc06:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 800cc08:	4b23      	ldr	r3, [pc, #140]	; (800cc98 <FT5336_Probe+0xb4>)
 800cc0a:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800cc0c:	f107 030c 	add.w	r3, r7, #12
 800cc10:	4619      	mov	r1, r3
 800cc12:	4822      	ldr	r0, [pc, #136]	; (800cc9c <FT5336_Probe+0xb8>)
 800cc14:	f7fd fcb2 	bl	800a57c <FT5336_RegisterBusIO>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d003      	beq.n	800cc26 <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800cc1e:	f06f 0307 	mvn.w	r3, #7
 800cc22:	627b      	str	r3, [r7, #36]	; 0x24
 800cc24:	e02a      	b.n	800cc7c <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 800cc26:	f107 0308 	add.w	r3, r7, #8
 800cc2a:	4619      	mov	r1, r3
 800cc2c:	481b      	ldr	r0, [pc, #108]	; (800cc9c <FT5336_Probe+0xb8>)
 800cc2e:	f7fd fd9f 	bl	800a770 <FT5336_ReadID>
 800cc32:	4603      	mov	r3, r0
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d003      	beq.n	800cc40 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800cc38:	f06f 0304 	mvn.w	r3, #4
 800cc3c:	627b      	str	r3, [r7, #36]	; 0x24
 800cc3e:	e01d      	b.n	800cc7c <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	2b51      	cmp	r3, #81	; 0x51
 800cc44:	d003      	beq.n	800cc4e <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800cc46:	f06f 0306 	mvn.w	r3, #6
 800cc4a:	627b      	str	r3, [r7, #36]	; 0x24
 800cc4c:	e016      	b.n	800cc7c <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 800cc4e:	4a14      	ldr	r2, [pc, #80]	; (800cca0 <FT5336_Probe+0xbc>)
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	4912      	ldr	r1, [pc, #72]	; (800cc9c <FT5336_Probe+0xb8>)
 800cc54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800cc58:	4b12      	ldr	r3, [pc, #72]	; (800cca4 <FT5336_Probe+0xc0>)
 800cc5a:	4a13      	ldr	r2, [pc, #76]	; (800cca8 <FT5336_Probe+0xc4>)
 800cc5c:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800cc5e:	4b11      	ldr	r3, [pc, #68]	; (800cca4 <FT5336_Probe+0xc0>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	490e      	ldr	r1, [pc, #56]	; (800cca0 <FT5336_Probe+0xbc>)
 800cc66:	687a      	ldr	r2, [r7, #4]
 800cc68:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800cc6c:	4610      	mov	r0, r2
 800cc6e:	4798      	blx	r3
 800cc70:	4603      	mov	r3, r0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d002      	beq.n	800cc7c <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800cc76:	f06f 0304 	mvn.w	r3, #4
 800cc7a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 800cc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3728      	adds	r7, #40	; 0x28
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	0800b375 	.word	0x0800b375
 800cc8c:	0800b3e9 	.word	0x0800b3e9
 800cc90:	0800b511 	.word	0x0800b511
 800cc94:	0800b4b5 	.word	0x0800b4b5
 800cc98:	0800b56d 	.word	0x0800b56d
 800cc9c:	2400b04c 	.word	0x2400b04c
 800cca0:	2400b020 	.word	0x2400b020
 800cca4:	2400b01c 	.word	0x2400b01c
 800cca8:	24000018 	.word	0x24000018

0800ccac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b082      	sub	sp, #8
 800ccb0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ccb2:	2003      	movs	r0, #3
 800ccb4:	f000 f933 	bl	800cf1e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ccb8:	f004 f81a 	bl	8010cf0 <HAL_RCC_GetSysClockFreq>
 800ccbc:	4602      	mov	r2, r0
 800ccbe:	4b15      	ldr	r3, [pc, #84]	; (800cd14 <HAL_Init+0x68>)
 800ccc0:	699b      	ldr	r3, [r3, #24]
 800ccc2:	0a1b      	lsrs	r3, r3, #8
 800ccc4:	f003 030f 	and.w	r3, r3, #15
 800ccc8:	4913      	ldr	r1, [pc, #76]	; (800cd18 <HAL_Init+0x6c>)
 800ccca:	5ccb      	ldrb	r3, [r1, r3]
 800cccc:	f003 031f 	and.w	r3, r3, #31
 800ccd0:	fa22 f303 	lsr.w	r3, r2, r3
 800ccd4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ccd6:	4b0f      	ldr	r3, [pc, #60]	; (800cd14 <HAL_Init+0x68>)
 800ccd8:	699b      	ldr	r3, [r3, #24]
 800ccda:	f003 030f 	and.w	r3, r3, #15
 800ccde:	4a0e      	ldr	r2, [pc, #56]	; (800cd18 <HAL_Init+0x6c>)
 800cce0:	5cd3      	ldrb	r3, [r2, r3]
 800cce2:	f003 031f 	and.w	r3, r3, #31
 800cce6:	687a      	ldr	r2, [r7, #4]
 800cce8:	fa22 f303 	lsr.w	r3, r2, r3
 800ccec:	4a0b      	ldr	r2, [pc, #44]	; (800cd1c <HAL_Init+0x70>)
 800ccee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ccf0:	4a0b      	ldr	r2, [pc, #44]	; (800cd20 <HAL_Init+0x74>)
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800ccf6:	200f      	movs	r0, #15
 800ccf8:	f7f4 fb2c 	bl	8001354 <HAL_InitTick>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d001      	beq.n	800cd06 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800cd02:	2301      	movs	r3, #1
 800cd04:	e002      	b.n	800cd0c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800cd06:	f7f3 ffb7 	bl	8000c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800cd0a:	2300      	movs	r3, #0
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3708      	adds	r7, #8
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}
 800cd14:	58024400 	.word	0x58024400
 800cd18:	08027848 	.word	0x08027848
 800cd1c:	24000014 	.word	0x24000014
 800cd20:	24000010 	.word	0x24000010

0800cd24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800cd24:	b480      	push	{r7}
 800cd26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800cd28:	4b06      	ldr	r3, [pc, #24]	; (800cd44 <HAL_IncTick+0x20>)
 800cd2a:	781b      	ldrb	r3, [r3, #0]
 800cd2c:	461a      	mov	r2, r3
 800cd2e:	4b06      	ldr	r3, [pc, #24]	; (800cd48 <HAL_IncTick+0x24>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4413      	add	r3, r2
 800cd34:	4a04      	ldr	r2, [pc, #16]	; (800cd48 <HAL_IncTick+0x24>)
 800cd36:	6013      	str	r3, [r2, #0]
}
 800cd38:	bf00      	nop
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd40:	4770      	bx	lr
 800cd42:	bf00      	nop
 800cd44:	2400004c 	.word	0x2400004c
 800cd48:	2400b074 	.word	0x2400b074

0800cd4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	af00      	add	r7, sp, #0
  return uwTick;
 800cd50:	4b03      	ldr	r3, [pc, #12]	; (800cd60 <HAL_GetTick+0x14>)
 800cd52:	681b      	ldr	r3, [r3, #0]
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	46bd      	mov	sp, r7
 800cd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5c:	4770      	bx	lr
 800cd5e:	bf00      	nop
 800cd60:	2400b074 	.word	0x2400b074

0800cd64 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800cd64:	b480      	push	{r7}
 800cd66:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800cd68:	4b03      	ldr	r3, [pc, #12]	; (800cd78 <HAL_GetREVID+0x14>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	0c1b      	lsrs	r3, r3, #16
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	46bd      	mov	sp, r7
 800cd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd76:	4770      	bx	lr
 800cd78:	5c001000 	.word	0x5c001000

0800cd7c <__NVIC_SetPriorityGrouping>:
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b085      	sub	sp, #20
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f003 0307 	and.w	r3, r3, #7
 800cd8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800cd8c:	4b0b      	ldr	r3, [pc, #44]	; (800cdbc <__NVIC_SetPriorityGrouping+0x40>)
 800cd8e:	68db      	ldr	r3, [r3, #12]
 800cd90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800cd92:	68ba      	ldr	r2, [r7, #8]
 800cd94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800cd98:	4013      	ands	r3, r2
 800cd9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800cda4:	4b06      	ldr	r3, [pc, #24]	; (800cdc0 <__NVIC_SetPriorityGrouping+0x44>)
 800cda6:	4313      	orrs	r3, r2
 800cda8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800cdaa:	4a04      	ldr	r2, [pc, #16]	; (800cdbc <__NVIC_SetPriorityGrouping+0x40>)
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	60d3      	str	r3, [r2, #12]
}
 800cdb0:	bf00      	nop
 800cdb2:	3714      	adds	r7, #20
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr
 800cdbc:	e000ed00 	.word	0xe000ed00
 800cdc0:	05fa0000 	.word	0x05fa0000

0800cdc4 <__NVIC_GetPriorityGrouping>:
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800cdc8:	4b04      	ldr	r3, [pc, #16]	; (800cddc <__NVIC_GetPriorityGrouping+0x18>)
 800cdca:	68db      	ldr	r3, [r3, #12]
 800cdcc:	0a1b      	lsrs	r3, r3, #8
 800cdce:	f003 0307 	and.w	r3, r3, #7
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdda:	4770      	bx	lr
 800cddc:	e000ed00 	.word	0xe000ed00

0800cde0 <__NVIC_EnableIRQ>:
{
 800cde0:	b480      	push	{r7}
 800cde2:	b083      	sub	sp, #12
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	4603      	mov	r3, r0
 800cde8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cdea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	db0b      	blt.n	800ce0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cdf2:	88fb      	ldrh	r3, [r7, #6]
 800cdf4:	f003 021f 	and.w	r2, r3, #31
 800cdf8:	4907      	ldr	r1, [pc, #28]	; (800ce18 <__NVIC_EnableIRQ+0x38>)
 800cdfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cdfe:	095b      	lsrs	r3, r3, #5
 800ce00:	2001      	movs	r0, #1
 800ce02:	fa00 f202 	lsl.w	r2, r0, r2
 800ce06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800ce0a:	bf00      	nop
 800ce0c:	370c      	adds	r7, #12
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce14:	4770      	bx	lr
 800ce16:	bf00      	nop
 800ce18:	e000e100 	.word	0xe000e100

0800ce1c <__NVIC_DisableIRQ>:
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b083      	sub	sp, #12
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	4603      	mov	r3, r0
 800ce24:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ce26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	db12      	blt.n	800ce54 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ce2e:	88fb      	ldrh	r3, [r7, #6]
 800ce30:	f003 021f 	and.w	r2, r3, #31
 800ce34:	490a      	ldr	r1, [pc, #40]	; (800ce60 <__NVIC_DisableIRQ+0x44>)
 800ce36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ce3a:	095b      	lsrs	r3, r3, #5
 800ce3c:	2001      	movs	r0, #1
 800ce3e:	fa00 f202 	lsl.w	r2, r0, r2
 800ce42:	3320      	adds	r3, #32
 800ce44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800ce48:	f3bf 8f4f 	dsb	sy
}
 800ce4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ce4e:	f3bf 8f6f 	isb	sy
}
 800ce52:	bf00      	nop
}
 800ce54:	bf00      	nop
 800ce56:	370c      	adds	r7, #12
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5e:	4770      	bx	lr
 800ce60:	e000e100 	.word	0xe000e100

0800ce64 <__NVIC_SetPriority>:
{
 800ce64:	b480      	push	{r7}
 800ce66:	b083      	sub	sp, #12
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	6039      	str	r1, [r7, #0]
 800ce6e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ce70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	db0a      	blt.n	800ce8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	b2da      	uxtb	r2, r3
 800ce7c:	490c      	ldr	r1, [pc, #48]	; (800ceb0 <__NVIC_SetPriority+0x4c>)
 800ce7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ce82:	0112      	lsls	r2, r2, #4
 800ce84:	b2d2      	uxtb	r2, r2
 800ce86:	440b      	add	r3, r1
 800ce88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ce8c:	e00a      	b.n	800cea4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	b2da      	uxtb	r2, r3
 800ce92:	4908      	ldr	r1, [pc, #32]	; (800ceb4 <__NVIC_SetPriority+0x50>)
 800ce94:	88fb      	ldrh	r3, [r7, #6]
 800ce96:	f003 030f 	and.w	r3, r3, #15
 800ce9a:	3b04      	subs	r3, #4
 800ce9c:	0112      	lsls	r2, r2, #4
 800ce9e:	b2d2      	uxtb	r2, r2
 800cea0:	440b      	add	r3, r1
 800cea2:	761a      	strb	r2, [r3, #24]
}
 800cea4:	bf00      	nop
 800cea6:	370c      	adds	r7, #12
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceae:	4770      	bx	lr
 800ceb0:	e000e100 	.word	0xe000e100
 800ceb4:	e000ed00 	.word	0xe000ed00

0800ceb8 <NVIC_EncodePriority>:
{
 800ceb8:	b480      	push	{r7}
 800ceba:	b089      	sub	sp, #36	; 0x24
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	60f8      	str	r0, [r7, #12]
 800cec0:	60b9      	str	r1, [r7, #8]
 800cec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f003 0307 	and.w	r3, r3, #7
 800ceca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800cecc:	69fb      	ldr	r3, [r7, #28]
 800cece:	f1c3 0307 	rsb	r3, r3, #7
 800ced2:	2b04      	cmp	r3, #4
 800ced4:	bf28      	it	cs
 800ced6:	2304      	movcs	r3, #4
 800ced8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ceda:	69fb      	ldr	r3, [r7, #28]
 800cedc:	3304      	adds	r3, #4
 800cede:	2b06      	cmp	r3, #6
 800cee0:	d902      	bls.n	800cee8 <NVIC_EncodePriority+0x30>
 800cee2:	69fb      	ldr	r3, [r7, #28]
 800cee4:	3b03      	subs	r3, #3
 800cee6:	e000      	b.n	800ceea <NVIC_EncodePriority+0x32>
 800cee8:	2300      	movs	r3, #0
 800ceea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ceec:	f04f 32ff 	mov.w	r2, #4294967295
 800cef0:	69bb      	ldr	r3, [r7, #24]
 800cef2:	fa02 f303 	lsl.w	r3, r2, r3
 800cef6:	43da      	mvns	r2, r3
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	401a      	ands	r2, r3
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800cf00:	f04f 31ff 	mov.w	r1, #4294967295
 800cf04:	697b      	ldr	r3, [r7, #20]
 800cf06:	fa01 f303 	lsl.w	r3, r1, r3
 800cf0a:	43d9      	mvns	r1, r3
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cf10:	4313      	orrs	r3, r2
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3724      	adds	r7, #36	; 0x24
 800cf16:	46bd      	mov	sp, r7
 800cf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1c:	4770      	bx	lr

0800cf1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cf1e:	b580      	push	{r7, lr}
 800cf20:	b082      	sub	sp, #8
 800cf22:	af00      	add	r7, sp, #0
 800cf24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f7ff ff28 	bl	800cd7c <__NVIC_SetPriorityGrouping>
}
 800cf2c:	bf00      	nop
 800cf2e:	3708      	adds	r7, #8
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}

0800cf34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b086      	sub	sp, #24
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	60b9      	str	r1, [r7, #8]
 800cf3e:	607a      	str	r2, [r7, #4]
 800cf40:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800cf42:	f7ff ff3f 	bl	800cdc4 <__NVIC_GetPriorityGrouping>
 800cf46:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800cf48:	687a      	ldr	r2, [r7, #4]
 800cf4a:	68b9      	ldr	r1, [r7, #8]
 800cf4c:	6978      	ldr	r0, [r7, #20]
 800cf4e:	f7ff ffb3 	bl	800ceb8 <NVIC_EncodePriority>
 800cf52:	4602      	mov	r2, r0
 800cf54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800cf58:	4611      	mov	r1, r2
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7ff ff82 	bl	800ce64 <__NVIC_SetPriority>
}
 800cf60:	bf00      	nop
 800cf62:	3718      	adds	r7, #24
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}

0800cf68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b082      	sub	sp, #8
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	4603      	mov	r3, r0
 800cf70:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800cf72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cf76:	4618      	mov	r0, r3
 800cf78:	f7ff ff32 	bl	800cde0 <__NVIC_EnableIRQ>
}
 800cf7c:	bf00      	nop
 800cf7e:	3708      	adds	r7, #8
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}

0800cf84 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b082      	sub	sp, #8
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800cf8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7ff ff42 	bl	800ce1c <__NVIC_DisableIRQ>
}
 800cf98:	bf00      	nop
 800cf9a:	3708      	adds	r7, #8
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}

0800cfa0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800cfa4:	f3bf 8f5f 	dmb	sy
}
 800cfa8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800cfaa:	4b07      	ldr	r3, [pc, #28]	; (800cfc8 <HAL_MPU_Disable+0x28>)
 800cfac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfae:	4a06      	ldr	r2, [pc, #24]	; (800cfc8 <HAL_MPU_Disable+0x28>)
 800cfb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cfb4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800cfb6:	4b05      	ldr	r3, [pc, #20]	; (800cfcc <HAL_MPU_Disable+0x2c>)
 800cfb8:	2200      	movs	r2, #0
 800cfba:	605a      	str	r2, [r3, #4]
}
 800cfbc:	bf00      	nop
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc4:	4770      	bx	lr
 800cfc6:	bf00      	nop
 800cfc8:	e000ed00 	.word	0xe000ed00
 800cfcc:	e000ed90 	.word	0xe000ed90

0800cfd0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b083      	sub	sp, #12
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800cfd8:	4a0b      	ldr	r2, [pc, #44]	; (800d008 <HAL_MPU_Enable+0x38>)
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f043 0301 	orr.w	r3, r3, #1
 800cfe0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800cfe2:	4b0a      	ldr	r3, [pc, #40]	; (800d00c <HAL_MPU_Enable+0x3c>)
 800cfe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfe6:	4a09      	ldr	r2, [pc, #36]	; (800d00c <HAL_MPU_Enable+0x3c>)
 800cfe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cfec:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800cfee:	f3bf 8f4f 	dsb	sy
}
 800cff2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800cff4:	f3bf 8f6f 	isb	sy
}
 800cff8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800cffa:	bf00      	nop
 800cffc:	370c      	adds	r7, #12
 800cffe:	46bd      	mov	sp, r7
 800d000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d004:	4770      	bx	lr
 800d006:	bf00      	nop
 800d008:	e000ed90 	.word	0xe000ed90
 800d00c:	e000ed00 	.word	0xe000ed00

0800d010 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800d010:	b480      	push	{r7}
 800d012:	b083      	sub	sp, #12
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	785a      	ldrb	r2, [r3, #1]
 800d01c:	4b1d      	ldr	r3, [pc, #116]	; (800d094 <HAL_MPU_ConfigRegion+0x84>)
 800d01e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	781b      	ldrb	r3, [r3, #0]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d029      	beq.n	800d07c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800d028:	4a1a      	ldr	r2, [pc, #104]	; (800d094 <HAL_MPU_ConfigRegion+0x84>)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	7b1b      	ldrb	r3, [r3, #12]
 800d034:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	7adb      	ldrb	r3, [r3, #11]
 800d03a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800d03c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	7a9b      	ldrb	r3, [r3, #10]
 800d042:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800d044:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	7b5b      	ldrb	r3, [r3, #13]
 800d04a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800d04c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	7b9b      	ldrb	r3, [r3, #14]
 800d052:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800d054:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	7bdb      	ldrb	r3, [r3, #15]
 800d05a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800d05c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	7a5b      	ldrb	r3, [r3, #9]
 800d062:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800d064:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	7a1b      	ldrb	r3, [r3, #8]
 800d06a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800d06c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	7812      	ldrb	r2, [r2, #0]
 800d072:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800d074:	4a07      	ldr	r2, [pc, #28]	; (800d094 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800d076:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800d078:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800d07a:	e005      	b.n	800d088 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800d07c:	4b05      	ldr	r3, [pc, #20]	; (800d094 <HAL_MPU_ConfigRegion+0x84>)
 800d07e:	2200      	movs	r2, #0
 800d080:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800d082:	4b04      	ldr	r3, [pc, #16]	; (800d094 <HAL_MPU_ConfigRegion+0x84>)
 800d084:	2200      	movs	r2, #0
 800d086:	611a      	str	r2, [r3, #16]
}
 800d088:	bf00      	nop
 800d08a:	370c      	adds	r7, #12
 800d08c:	46bd      	mov	sp, r7
 800d08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d092:	4770      	bx	lr
 800d094:	e000ed90 	.word	0xe000ed90

0800d098 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b082      	sub	sp, #8
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d101      	bne.n	800d0aa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	e054      	b.n	800d154 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	7f5b      	ldrb	r3, [r3, #29]
 800d0ae:	b2db      	uxtb	r3, r3
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d105      	bne.n	800d0c0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f7f3 fdfa 	bl	8000cb4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2202      	movs	r2, #2
 800d0c4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	791b      	ldrb	r3, [r3, #4]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d10c      	bne.n	800d0e8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	4a22      	ldr	r2, [pc, #136]	; (800d15c <HAL_CRC_Init+0xc4>)
 800d0d4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	689a      	ldr	r2, [r3, #8]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f022 0218 	bic.w	r2, r2, #24
 800d0e4:	609a      	str	r2, [r3, #8]
 800d0e6:	e00c      	b.n	800d102 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6899      	ldr	r1, [r3, #8]
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	68db      	ldr	r3, [r3, #12]
 800d0f0:	461a      	mov	r2, r3
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f000 f834 	bl	800d160 <HAL_CRCEx_Polynomial_Set>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d001      	beq.n	800d102 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800d0fe:	2301      	movs	r3, #1
 800d100:	e028      	b.n	800d154 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	795b      	ldrb	r3, [r3, #5]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d105      	bne.n	800d116 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f04f 32ff 	mov.w	r2, #4294967295
 800d112:	611a      	str	r2, [r3, #16]
 800d114:	e004      	b.n	800d120 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	6912      	ldr	r2, [r2, #16]
 800d11e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	689b      	ldr	r3, [r3, #8]
 800d126:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	695a      	ldr	r2, [r3, #20]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	430a      	orrs	r2, r1
 800d134:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	689b      	ldr	r3, [r3, #8]
 800d13c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	699a      	ldr	r2, [r3, #24]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	430a      	orrs	r2, r1
 800d14a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2201      	movs	r2, #1
 800d150:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800d152:	2300      	movs	r3, #0
}
 800d154:	4618      	mov	r0, r3
 800d156:	3708      	adds	r7, #8
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}
 800d15c:	04c11db7 	.word	0x04c11db7

0800d160 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800d160:	b480      	push	{r7}
 800d162:	b087      	sub	sp, #28
 800d164:	af00      	add	r7, sp, #0
 800d166:	60f8      	str	r0, [r7, #12]
 800d168:	60b9      	str	r1, [r7, #8]
 800d16a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d16c:	2300      	movs	r3, #0
 800d16e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800d170:	231f      	movs	r3, #31
 800d172:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800d174:	bf00      	nop
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	1e5a      	subs	r2, r3, #1
 800d17a:	613a      	str	r2, [r7, #16]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d009      	beq.n	800d194 <HAL_CRCEx_Polynomial_Set+0x34>
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	f003 031f 	and.w	r3, r3, #31
 800d186:	68ba      	ldr	r2, [r7, #8]
 800d188:	fa22 f303 	lsr.w	r3, r2, r3
 800d18c:	f003 0301 	and.w	r3, r3, #1
 800d190:	2b00      	cmp	r3, #0
 800d192:	d0f0      	beq.n	800d176 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2b18      	cmp	r3, #24
 800d198:	d846      	bhi.n	800d228 <HAL_CRCEx_Polynomial_Set+0xc8>
 800d19a:	a201      	add	r2, pc, #4	; (adr r2, 800d1a0 <HAL_CRCEx_Polynomial_Set+0x40>)
 800d19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1a0:	0800d22f 	.word	0x0800d22f
 800d1a4:	0800d229 	.word	0x0800d229
 800d1a8:	0800d229 	.word	0x0800d229
 800d1ac:	0800d229 	.word	0x0800d229
 800d1b0:	0800d229 	.word	0x0800d229
 800d1b4:	0800d229 	.word	0x0800d229
 800d1b8:	0800d229 	.word	0x0800d229
 800d1bc:	0800d229 	.word	0x0800d229
 800d1c0:	0800d21d 	.word	0x0800d21d
 800d1c4:	0800d229 	.word	0x0800d229
 800d1c8:	0800d229 	.word	0x0800d229
 800d1cc:	0800d229 	.word	0x0800d229
 800d1d0:	0800d229 	.word	0x0800d229
 800d1d4:	0800d229 	.word	0x0800d229
 800d1d8:	0800d229 	.word	0x0800d229
 800d1dc:	0800d229 	.word	0x0800d229
 800d1e0:	0800d211 	.word	0x0800d211
 800d1e4:	0800d229 	.word	0x0800d229
 800d1e8:	0800d229 	.word	0x0800d229
 800d1ec:	0800d229 	.word	0x0800d229
 800d1f0:	0800d229 	.word	0x0800d229
 800d1f4:	0800d229 	.word	0x0800d229
 800d1f8:	0800d229 	.word	0x0800d229
 800d1fc:	0800d229 	.word	0x0800d229
 800d200:	0800d205 	.word	0x0800d205
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	2b06      	cmp	r3, #6
 800d208:	d913      	bls.n	800d232 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800d20a:	2301      	movs	r3, #1
 800d20c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800d20e:	e010      	b.n	800d232 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	2b07      	cmp	r3, #7
 800d214:	d90f      	bls.n	800d236 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800d216:	2301      	movs	r3, #1
 800d218:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800d21a:	e00c      	b.n	800d236 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	2b0f      	cmp	r3, #15
 800d220:	d90b      	bls.n	800d23a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800d222:	2301      	movs	r3, #1
 800d224:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800d226:	e008      	b.n	800d23a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800d228:	2301      	movs	r3, #1
 800d22a:	75fb      	strb	r3, [r7, #23]
      break;
 800d22c:	e006      	b.n	800d23c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800d22e:	bf00      	nop
 800d230:	e004      	b.n	800d23c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800d232:	bf00      	nop
 800d234:	e002      	b.n	800d23c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800d236:	bf00      	nop
 800d238:	e000      	b.n	800d23c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800d23a:	bf00      	nop
  }
  if (status == HAL_OK)
 800d23c:	7dfb      	ldrb	r3, [r7, #23]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d10d      	bne.n	800d25e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	68ba      	ldr	r2, [r7, #8]
 800d248:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	689b      	ldr	r3, [r3, #8]
 800d250:	f023 0118 	bic.w	r1, r3, #24
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	687a      	ldr	r2, [r7, #4]
 800d25a:	430a      	orrs	r2, r1
 800d25c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800d25e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d260:	4618      	mov	r0, r3
 800d262:	371c      	adds	r7, #28
 800d264:	46bd      	mov	sp, r7
 800d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26a:	4770      	bx	lr

0800d26c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b082      	sub	sp, #8
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d101      	bne.n	800d27e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800d27a:	2301      	movs	r3, #1
 800d27c:	e04f      	b.n	800d31e <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800d284:	b2db      	uxtb	r3, r3
 800d286:	2b00      	cmp	r3, #0
 800d288:	d106      	bne.n	800d298 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2200      	movs	r2, #0
 800d28e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f7f3 fd30 	bl	8000cf8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2202      	movs	r2, #2
 800d29c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	681a      	ldr	r2, [r3, #0]
 800d2a6:	4b20      	ldr	r3, [pc, #128]	; (800d328 <HAL_DMA2D_Init+0xbc>)
 800d2a8:	4013      	ands	r3, r2
 800d2aa:	687a      	ldr	r2, [r7, #4]
 800d2ac:	6851      	ldr	r1, [r2, #4]
 800d2ae:	687a      	ldr	r2, [r7, #4]
 800d2b0:	69d2      	ldr	r2, [r2, #28]
 800d2b2:	4311      	orrs	r1, r2
 800d2b4:	687a      	ldr	r2, [r7, #4]
 800d2b6:	6812      	ldr	r2, [r2, #0]
 800d2b8:	430b      	orrs	r3, r1
 800d2ba:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d2c2:	4b1a      	ldr	r3, [pc, #104]	; (800d32c <HAL_DMA2D_Init+0xc0>)
 800d2c4:	4013      	ands	r3, r2
 800d2c6:	687a      	ldr	r2, [r7, #4]
 800d2c8:	6891      	ldr	r1, [r2, #8]
 800d2ca:	687a      	ldr	r2, [r7, #4]
 800d2cc:	6992      	ldr	r2, [r2, #24]
 800d2ce:	4311      	orrs	r1, r2
 800d2d0:	687a      	ldr	r2, [r7, #4]
 800d2d2:	6812      	ldr	r2, [r2, #0]
 800d2d4:	430b      	orrs	r3, r1
 800d2d6:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d2de:	4b14      	ldr	r3, [pc, #80]	; (800d330 <HAL_DMA2D_Init+0xc4>)
 800d2e0:	4013      	ands	r3, r2
 800d2e2:	687a      	ldr	r2, [r7, #4]
 800d2e4:	68d1      	ldr	r1, [r2, #12]
 800d2e6:	687a      	ldr	r2, [r7, #4]
 800d2e8:	6812      	ldr	r2, [r2, #0]
 800d2ea:	430b      	orrs	r3, r1
 800d2ec:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2f4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	691b      	ldr	r3, [r3, #16]
 800d2fc:	051a      	lsls	r2, r3, #20
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	695b      	ldr	r3, [r3, #20]
 800d302:	055b      	lsls	r3, r3, #21
 800d304:	431a      	orrs	r2, r3
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	430a      	orrs	r2, r1
 800d30c:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2200      	movs	r2, #0
 800d312:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2201      	movs	r2, #1
 800d318:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 800d31c:	2300      	movs	r3, #0
}
 800d31e:	4618      	mov	r0, r3
 800d320:	3708      	adds	r7, #8
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
 800d326:	bf00      	nop
 800d328:	fff8ffbf 	.word	0xfff8ffbf
 800d32c:	fffffef8 	.word	0xfffffef8
 800d330:	ffff0000 	.word	0xffff0000

0800d334 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b084      	sub	sp, #16
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	685b      	ldr	r3, [r3, #4]
 800d342:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	f003 0301 	and.w	r3, r3, #1
 800d352:	2b00      	cmp	r3, #0
 800d354:	d026      	beq.n	800d3a4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d021      	beq.n	800d3a4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	681a      	ldr	r2, [r3, #0]
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d36e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d374:	f043 0201 	orr.w	r2, r3, #1
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	2201      	movs	r2, #1
 800d382:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2204      	movs	r2, #4
 800d388:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2200      	movs	r2, #0
 800d390:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d003      	beq.n	800d3a4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	f003 0320 	and.w	r3, r3, #32
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d026      	beq.n	800d3fc <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d021      	beq.n	800d3fc <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	681a      	ldr	r2, [r3, #0]
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d3c6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	2220      	movs	r2, #32
 800d3ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3d4:	f043 0202 	orr.w	r2, r3, #2
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2204      	movs	r2, #4
 800d3e0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d003      	beq.n	800d3fc <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	f003 0308 	and.w	r3, r3, #8
 800d402:	2b00      	cmp	r3, #0
 800d404:	d026      	beq.n	800d454 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d021      	beq.n	800d454 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	681a      	ldr	r2, [r3, #0]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d41e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	2208      	movs	r2, #8
 800d426:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d42c:	f043 0204 	orr.w	r2, r3, #4
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2204      	movs	r2, #4
 800d438:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2200      	movs	r2, #0
 800d440:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d003      	beq.n	800d454 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	f003 0304 	and.w	r3, r3, #4
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d013      	beq.n	800d486 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d464:	2b00      	cmp	r3, #0
 800d466:	d00e      	beq.n	800d486 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	681a      	ldr	r2, [r3, #0]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d476:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	2204      	movs	r2, #4
 800d47e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f000 f853 	bl	800d52c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	f003 0302 	and.w	r3, r3, #2
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d024      	beq.n	800d4da <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d496:	2b00      	cmp	r3, #0
 800d498:	d01f      	beq.n	800d4da <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	681a      	ldr	r2, [r3, #0]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d4a8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	2202      	movs	r2, #2
 800d4b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2201      	movs	r2, #1
 800d4be:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6a1b      	ldr	r3, [r3, #32]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d003      	beq.n	800d4da <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6a1b      	ldr	r3, [r3, #32]
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	f003 0310 	and.w	r3, r3, #16
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d01f      	beq.n	800d524 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d01a      	beq.n	800d524 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	681a      	ldr	r2, [r3, #0]
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d4fc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	2210      	movs	r2, #16
 800d504:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2201      	movs	r2, #1
 800d512:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2200      	movs	r2, #0
 800d51a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f000 f80e 	bl	800d540 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800d524:	bf00      	nop
 800d526:	3710      	adds	r7, #16
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}

0800d52c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800d52c:	b480      	push	{r7}
 800d52e:	b083      	sub	sp, #12
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800d534:	bf00      	nop
 800d536:	370c      	adds	r7, #12
 800d538:	46bd      	mov	sp, r7
 800d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53e:	4770      	bx	lr

0800d540 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800d540:	b480      	push	{r7}
 800d542:	b083      	sub	sp, #12
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800d548:	bf00      	nop
 800d54a:	370c      	adds	r7, #12
 800d54c:	46bd      	mov	sp, r7
 800d54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d552:	4770      	bx	lr

0800d554 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d554:	b480      	push	{r7}
 800d556:	b089      	sub	sp, #36	; 0x24
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
 800d55c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d55e:	2300      	movs	r3, #0
 800d560:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800d562:	4b89      	ldr	r3, [pc, #548]	; (800d788 <HAL_GPIO_Init+0x234>)
 800d564:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d566:	e194      	b.n	800d892 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	681a      	ldr	r2, [r3, #0]
 800d56c:	2101      	movs	r1, #1
 800d56e:	69fb      	ldr	r3, [r7, #28]
 800d570:	fa01 f303 	lsl.w	r3, r1, r3
 800d574:	4013      	ands	r3, r2
 800d576:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800d578:	693b      	ldr	r3, [r7, #16]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	f000 8186 	beq.w	800d88c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	685b      	ldr	r3, [r3, #4]
 800d584:	f003 0303 	and.w	r3, r3, #3
 800d588:	2b01      	cmp	r3, #1
 800d58a:	d005      	beq.n	800d598 <HAL_GPIO_Init+0x44>
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	685b      	ldr	r3, [r3, #4]
 800d590:	f003 0303 	and.w	r3, r3, #3
 800d594:	2b02      	cmp	r3, #2
 800d596:	d130      	bne.n	800d5fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	689b      	ldr	r3, [r3, #8]
 800d59c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d59e:	69fb      	ldr	r3, [r7, #28]
 800d5a0:	005b      	lsls	r3, r3, #1
 800d5a2:	2203      	movs	r2, #3
 800d5a4:	fa02 f303 	lsl.w	r3, r2, r3
 800d5a8:	43db      	mvns	r3, r3
 800d5aa:	69ba      	ldr	r2, [r7, #24]
 800d5ac:	4013      	ands	r3, r2
 800d5ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	68da      	ldr	r2, [r3, #12]
 800d5b4:	69fb      	ldr	r3, [r7, #28]
 800d5b6:	005b      	lsls	r3, r3, #1
 800d5b8:	fa02 f303 	lsl.w	r3, r2, r3
 800d5bc:	69ba      	ldr	r2, [r7, #24]
 800d5be:	4313      	orrs	r3, r2
 800d5c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	69ba      	ldr	r2, [r7, #24]
 800d5c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	685b      	ldr	r3, [r3, #4]
 800d5cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d5ce:	2201      	movs	r2, #1
 800d5d0:	69fb      	ldr	r3, [r7, #28]
 800d5d2:	fa02 f303 	lsl.w	r3, r2, r3
 800d5d6:	43db      	mvns	r3, r3
 800d5d8:	69ba      	ldr	r2, [r7, #24]
 800d5da:	4013      	ands	r3, r2
 800d5dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	685b      	ldr	r3, [r3, #4]
 800d5e2:	091b      	lsrs	r3, r3, #4
 800d5e4:	f003 0201 	and.w	r2, r3, #1
 800d5e8:	69fb      	ldr	r3, [r7, #28]
 800d5ea:	fa02 f303 	lsl.w	r3, r2, r3
 800d5ee:	69ba      	ldr	r2, [r7, #24]
 800d5f0:	4313      	orrs	r3, r2
 800d5f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	69ba      	ldr	r2, [r7, #24]
 800d5f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	685b      	ldr	r3, [r3, #4]
 800d5fe:	f003 0303 	and.w	r3, r3, #3
 800d602:	2b03      	cmp	r3, #3
 800d604:	d017      	beq.n	800d636 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	68db      	ldr	r3, [r3, #12]
 800d60a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d60c:	69fb      	ldr	r3, [r7, #28]
 800d60e:	005b      	lsls	r3, r3, #1
 800d610:	2203      	movs	r2, #3
 800d612:	fa02 f303 	lsl.w	r3, r2, r3
 800d616:	43db      	mvns	r3, r3
 800d618:	69ba      	ldr	r2, [r7, #24]
 800d61a:	4013      	ands	r3, r2
 800d61c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	689a      	ldr	r2, [r3, #8]
 800d622:	69fb      	ldr	r3, [r7, #28]
 800d624:	005b      	lsls	r3, r3, #1
 800d626:	fa02 f303 	lsl.w	r3, r2, r3
 800d62a:	69ba      	ldr	r2, [r7, #24]
 800d62c:	4313      	orrs	r3, r2
 800d62e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	69ba      	ldr	r2, [r7, #24]
 800d634:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	f003 0303 	and.w	r3, r3, #3
 800d63e:	2b02      	cmp	r3, #2
 800d640:	d123      	bne.n	800d68a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d642:	69fb      	ldr	r3, [r7, #28]
 800d644:	08da      	lsrs	r2, r3, #3
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	3208      	adds	r2, #8
 800d64a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d64e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800d650:	69fb      	ldr	r3, [r7, #28]
 800d652:	f003 0307 	and.w	r3, r3, #7
 800d656:	009b      	lsls	r3, r3, #2
 800d658:	220f      	movs	r2, #15
 800d65a:	fa02 f303 	lsl.w	r3, r2, r3
 800d65e:	43db      	mvns	r3, r3
 800d660:	69ba      	ldr	r2, [r7, #24]
 800d662:	4013      	ands	r3, r2
 800d664:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	691a      	ldr	r2, [r3, #16]
 800d66a:	69fb      	ldr	r3, [r7, #28]
 800d66c:	f003 0307 	and.w	r3, r3, #7
 800d670:	009b      	lsls	r3, r3, #2
 800d672:	fa02 f303 	lsl.w	r3, r2, r3
 800d676:	69ba      	ldr	r2, [r7, #24]
 800d678:	4313      	orrs	r3, r2
 800d67a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d67c:	69fb      	ldr	r3, [r7, #28]
 800d67e:	08da      	lsrs	r2, r3, #3
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	3208      	adds	r2, #8
 800d684:	69b9      	ldr	r1, [r7, #24]
 800d686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d690:	69fb      	ldr	r3, [r7, #28]
 800d692:	005b      	lsls	r3, r3, #1
 800d694:	2203      	movs	r2, #3
 800d696:	fa02 f303 	lsl.w	r3, r2, r3
 800d69a:	43db      	mvns	r3, r3
 800d69c:	69ba      	ldr	r2, [r7, #24]
 800d69e:	4013      	ands	r3, r2
 800d6a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	685b      	ldr	r3, [r3, #4]
 800d6a6:	f003 0203 	and.w	r2, r3, #3
 800d6aa:	69fb      	ldr	r3, [r7, #28]
 800d6ac:	005b      	lsls	r3, r3, #1
 800d6ae:	fa02 f303 	lsl.w	r3, r2, r3
 800d6b2:	69ba      	ldr	r2, [r7, #24]
 800d6b4:	4313      	orrs	r3, r2
 800d6b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	69ba      	ldr	r2, [r7, #24]
 800d6bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	f000 80e0 	beq.w	800d88c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d6cc:	4b2f      	ldr	r3, [pc, #188]	; (800d78c <HAL_GPIO_Init+0x238>)
 800d6ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d6d2:	4a2e      	ldr	r2, [pc, #184]	; (800d78c <HAL_GPIO_Init+0x238>)
 800d6d4:	f043 0302 	orr.w	r3, r3, #2
 800d6d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800d6dc:	4b2b      	ldr	r3, [pc, #172]	; (800d78c <HAL_GPIO_Init+0x238>)
 800d6de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d6e2:	f003 0302 	and.w	r3, r3, #2
 800d6e6:	60fb      	str	r3, [r7, #12]
 800d6e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d6ea:	4a29      	ldr	r2, [pc, #164]	; (800d790 <HAL_GPIO_Init+0x23c>)
 800d6ec:	69fb      	ldr	r3, [r7, #28]
 800d6ee:	089b      	lsrs	r3, r3, #2
 800d6f0:	3302      	adds	r3, #2
 800d6f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d6f8:	69fb      	ldr	r3, [r7, #28]
 800d6fa:	f003 0303 	and.w	r3, r3, #3
 800d6fe:	009b      	lsls	r3, r3, #2
 800d700:	220f      	movs	r2, #15
 800d702:	fa02 f303 	lsl.w	r3, r2, r3
 800d706:	43db      	mvns	r3, r3
 800d708:	69ba      	ldr	r2, [r7, #24]
 800d70a:	4013      	ands	r3, r2
 800d70c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	4a20      	ldr	r2, [pc, #128]	; (800d794 <HAL_GPIO_Init+0x240>)
 800d712:	4293      	cmp	r3, r2
 800d714:	d052      	beq.n	800d7bc <HAL_GPIO_Init+0x268>
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	4a1f      	ldr	r2, [pc, #124]	; (800d798 <HAL_GPIO_Init+0x244>)
 800d71a:	4293      	cmp	r3, r2
 800d71c:	d031      	beq.n	800d782 <HAL_GPIO_Init+0x22e>
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	4a1e      	ldr	r2, [pc, #120]	; (800d79c <HAL_GPIO_Init+0x248>)
 800d722:	4293      	cmp	r3, r2
 800d724:	d02b      	beq.n	800d77e <HAL_GPIO_Init+0x22a>
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	4a1d      	ldr	r2, [pc, #116]	; (800d7a0 <HAL_GPIO_Init+0x24c>)
 800d72a:	4293      	cmp	r3, r2
 800d72c:	d025      	beq.n	800d77a <HAL_GPIO_Init+0x226>
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	4a1c      	ldr	r2, [pc, #112]	; (800d7a4 <HAL_GPIO_Init+0x250>)
 800d732:	4293      	cmp	r3, r2
 800d734:	d01f      	beq.n	800d776 <HAL_GPIO_Init+0x222>
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	4a1b      	ldr	r2, [pc, #108]	; (800d7a8 <HAL_GPIO_Init+0x254>)
 800d73a:	4293      	cmp	r3, r2
 800d73c:	d019      	beq.n	800d772 <HAL_GPIO_Init+0x21e>
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	4a1a      	ldr	r2, [pc, #104]	; (800d7ac <HAL_GPIO_Init+0x258>)
 800d742:	4293      	cmp	r3, r2
 800d744:	d013      	beq.n	800d76e <HAL_GPIO_Init+0x21a>
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	4a19      	ldr	r2, [pc, #100]	; (800d7b0 <HAL_GPIO_Init+0x25c>)
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d00d      	beq.n	800d76a <HAL_GPIO_Init+0x216>
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	4a18      	ldr	r2, [pc, #96]	; (800d7b4 <HAL_GPIO_Init+0x260>)
 800d752:	4293      	cmp	r3, r2
 800d754:	d007      	beq.n	800d766 <HAL_GPIO_Init+0x212>
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	4a17      	ldr	r2, [pc, #92]	; (800d7b8 <HAL_GPIO_Init+0x264>)
 800d75a:	4293      	cmp	r3, r2
 800d75c:	d101      	bne.n	800d762 <HAL_GPIO_Init+0x20e>
 800d75e:	2309      	movs	r3, #9
 800d760:	e02d      	b.n	800d7be <HAL_GPIO_Init+0x26a>
 800d762:	230a      	movs	r3, #10
 800d764:	e02b      	b.n	800d7be <HAL_GPIO_Init+0x26a>
 800d766:	2308      	movs	r3, #8
 800d768:	e029      	b.n	800d7be <HAL_GPIO_Init+0x26a>
 800d76a:	2307      	movs	r3, #7
 800d76c:	e027      	b.n	800d7be <HAL_GPIO_Init+0x26a>
 800d76e:	2306      	movs	r3, #6
 800d770:	e025      	b.n	800d7be <HAL_GPIO_Init+0x26a>
 800d772:	2305      	movs	r3, #5
 800d774:	e023      	b.n	800d7be <HAL_GPIO_Init+0x26a>
 800d776:	2304      	movs	r3, #4
 800d778:	e021      	b.n	800d7be <HAL_GPIO_Init+0x26a>
 800d77a:	2303      	movs	r3, #3
 800d77c:	e01f      	b.n	800d7be <HAL_GPIO_Init+0x26a>
 800d77e:	2302      	movs	r3, #2
 800d780:	e01d      	b.n	800d7be <HAL_GPIO_Init+0x26a>
 800d782:	2301      	movs	r3, #1
 800d784:	e01b      	b.n	800d7be <HAL_GPIO_Init+0x26a>
 800d786:	bf00      	nop
 800d788:	58000080 	.word	0x58000080
 800d78c:	58024400 	.word	0x58024400
 800d790:	58000400 	.word	0x58000400
 800d794:	58020000 	.word	0x58020000
 800d798:	58020400 	.word	0x58020400
 800d79c:	58020800 	.word	0x58020800
 800d7a0:	58020c00 	.word	0x58020c00
 800d7a4:	58021000 	.word	0x58021000
 800d7a8:	58021400 	.word	0x58021400
 800d7ac:	58021800 	.word	0x58021800
 800d7b0:	58021c00 	.word	0x58021c00
 800d7b4:	58022000 	.word	0x58022000
 800d7b8:	58022400 	.word	0x58022400
 800d7bc:	2300      	movs	r3, #0
 800d7be:	69fa      	ldr	r2, [r7, #28]
 800d7c0:	f002 0203 	and.w	r2, r2, #3
 800d7c4:	0092      	lsls	r2, r2, #2
 800d7c6:	4093      	lsls	r3, r2
 800d7c8:	69ba      	ldr	r2, [r7, #24]
 800d7ca:	4313      	orrs	r3, r2
 800d7cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d7ce:	4938      	ldr	r1, [pc, #224]	; (800d8b0 <HAL_GPIO_Init+0x35c>)
 800d7d0:	69fb      	ldr	r3, [r7, #28]
 800d7d2:	089b      	lsrs	r3, r3, #2
 800d7d4:	3302      	adds	r3, #2
 800d7d6:	69ba      	ldr	r2, [r7, #24]
 800d7d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800d7dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d7e4:	693b      	ldr	r3, [r7, #16]
 800d7e6:	43db      	mvns	r3, r3
 800d7e8:	69ba      	ldr	r2, [r7, #24]
 800d7ea:	4013      	ands	r3, r2
 800d7ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	685b      	ldr	r3, [r3, #4]
 800d7f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d003      	beq.n	800d802 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800d7fa:	69ba      	ldr	r2, [r7, #24]
 800d7fc:	693b      	ldr	r3, [r7, #16]
 800d7fe:	4313      	orrs	r3, r2
 800d800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800d802:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d806:	69bb      	ldr	r3, [r7, #24]
 800d808:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800d80a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d80e:	685b      	ldr	r3, [r3, #4]
 800d810:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	43db      	mvns	r3, r3
 800d816:	69ba      	ldr	r2, [r7, #24]
 800d818:	4013      	ands	r3, r2
 800d81a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	685b      	ldr	r3, [r3, #4]
 800d820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d824:	2b00      	cmp	r3, #0
 800d826:	d003      	beq.n	800d830 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800d828:	69ba      	ldr	r2, [r7, #24]
 800d82a:	693b      	ldr	r3, [r7, #16]
 800d82c:	4313      	orrs	r3, r2
 800d82e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800d830:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d834:	69bb      	ldr	r3, [r7, #24]
 800d836:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	685b      	ldr	r3, [r3, #4]
 800d83c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d83e:	693b      	ldr	r3, [r7, #16]
 800d840:	43db      	mvns	r3, r3
 800d842:	69ba      	ldr	r2, [r7, #24]
 800d844:	4013      	ands	r3, r2
 800d846:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	685b      	ldr	r3, [r3, #4]
 800d84c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d850:	2b00      	cmp	r3, #0
 800d852:	d003      	beq.n	800d85c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800d854:	69ba      	ldr	r2, [r7, #24]
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	4313      	orrs	r3, r2
 800d85a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	69ba      	ldr	r2, [r7, #24]
 800d860:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	43db      	mvns	r3, r3
 800d86c:	69ba      	ldr	r2, [r7, #24]
 800d86e:	4013      	ands	r3, r2
 800d870:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	685b      	ldr	r3, [r3, #4]
 800d876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d003      	beq.n	800d886 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800d87e:	69ba      	ldr	r2, [r7, #24]
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	4313      	orrs	r3, r2
 800d884:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	69ba      	ldr	r2, [r7, #24]
 800d88a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800d88c:	69fb      	ldr	r3, [r7, #28]
 800d88e:	3301      	adds	r3, #1
 800d890:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	681a      	ldr	r2, [r3, #0]
 800d896:	69fb      	ldr	r3, [r7, #28]
 800d898:	fa22 f303 	lsr.w	r3, r2, r3
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	f47f ae63 	bne.w	800d568 <HAL_GPIO_Init+0x14>
  }
}
 800d8a2:	bf00      	nop
 800d8a4:	bf00      	nop
 800d8a6:	3724      	adds	r7, #36	; 0x24
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ae:	4770      	bx	lr
 800d8b0:	58000400 	.word	0x58000400

0800d8b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b087      	sub	sp, #28
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800d8c2:	4b75      	ldr	r3, [pc, #468]	; (800da98 <HAL_GPIO_DeInit+0x1e4>)
 800d8c4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800d8c6:	e0d9      	b.n	800da7c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800d8c8:	2201      	movs	r2, #1
 800d8ca:	697b      	ldr	r3, [r7, #20]
 800d8cc:	fa02 f303 	lsl.w	r3, r2, r3
 800d8d0:	683a      	ldr	r2, [r7, #0]
 800d8d2:	4013      	ands	r3, r2
 800d8d4:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	f000 80cc 	beq.w	800da76 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800d8de:	4a6f      	ldr	r2, [pc, #444]	; (800da9c <HAL_GPIO_DeInit+0x1e8>)
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	089b      	lsrs	r3, r3, #2
 800d8e4:	3302      	adds	r3, #2
 800d8e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8ea:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	f003 0303 	and.w	r3, r3, #3
 800d8f2:	009b      	lsls	r3, r3, #2
 800d8f4:	220f      	movs	r2, #15
 800d8f6:	fa02 f303 	lsl.w	r3, r2, r3
 800d8fa:	68ba      	ldr	r2, [r7, #8]
 800d8fc:	4013      	ands	r3, r2
 800d8fe:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	4a67      	ldr	r2, [pc, #412]	; (800daa0 <HAL_GPIO_DeInit+0x1ec>)
 800d904:	4293      	cmp	r3, r2
 800d906:	d037      	beq.n	800d978 <HAL_GPIO_DeInit+0xc4>
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	4a66      	ldr	r2, [pc, #408]	; (800daa4 <HAL_GPIO_DeInit+0x1f0>)
 800d90c:	4293      	cmp	r3, r2
 800d90e:	d031      	beq.n	800d974 <HAL_GPIO_DeInit+0xc0>
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	4a65      	ldr	r2, [pc, #404]	; (800daa8 <HAL_GPIO_DeInit+0x1f4>)
 800d914:	4293      	cmp	r3, r2
 800d916:	d02b      	beq.n	800d970 <HAL_GPIO_DeInit+0xbc>
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	4a64      	ldr	r2, [pc, #400]	; (800daac <HAL_GPIO_DeInit+0x1f8>)
 800d91c:	4293      	cmp	r3, r2
 800d91e:	d025      	beq.n	800d96c <HAL_GPIO_DeInit+0xb8>
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	4a63      	ldr	r2, [pc, #396]	; (800dab0 <HAL_GPIO_DeInit+0x1fc>)
 800d924:	4293      	cmp	r3, r2
 800d926:	d01f      	beq.n	800d968 <HAL_GPIO_DeInit+0xb4>
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	4a62      	ldr	r2, [pc, #392]	; (800dab4 <HAL_GPIO_DeInit+0x200>)
 800d92c:	4293      	cmp	r3, r2
 800d92e:	d019      	beq.n	800d964 <HAL_GPIO_DeInit+0xb0>
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	4a61      	ldr	r2, [pc, #388]	; (800dab8 <HAL_GPIO_DeInit+0x204>)
 800d934:	4293      	cmp	r3, r2
 800d936:	d013      	beq.n	800d960 <HAL_GPIO_DeInit+0xac>
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	4a60      	ldr	r2, [pc, #384]	; (800dabc <HAL_GPIO_DeInit+0x208>)
 800d93c:	4293      	cmp	r3, r2
 800d93e:	d00d      	beq.n	800d95c <HAL_GPIO_DeInit+0xa8>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	4a5f      	ldr	r2, [pc, #380]	; (800dac0 <HAL_GPIO_DeInit+0x20c>)
 800d944:	4293      	cmp	r3, r2
 800d946:	d007      	beq.n	800d958 <HAL_GPIO_DeInit+0xa4>
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	4a5e      	ldr	r2, [pc, #376]	; (800dac4 <HAL_GPIO_DeInit+0x210>)
 800d94c:	4293      	cmp	r3, r2
 800d94e:	d101      	bne.n	800d954 <HAL_GPIO_DeInit+0xa0>
 800d950:	2309      	movs	r3, #9
 800d952:	e012      	b.n	800d97a <HAL_GPIO_DeInit+0xc6>
 800d954:	230a      	movs	r3, #10
 800d956:	e010      	b.n	800d97a <HAL_GPIO_DeInit+0xc6>
 800d958:	2308      	movs	r3, #8
 800d95a:	e00e      	b.n	800d97a <HAL_GPIO_DeInit+0xc6>
 800d95c:	2307      	movs	r3, #7
 800d95e:	e00c      	b.n	800d97a <HAL_GPIO_DeInit+0xc6>
 800d960:	2306      	movs	r3, #6
 800d962:	e00a      	b.n	800d97a <HAL_GPIO_DeInit+0xc6>
 800d964:	2305      	movs	r3, #5
 800d966:	e008      	b.n	800d97a <HAL_GPIO_DeInit+0xc6>
 800d968:	2304      	movs	r3, #4
 800d96a:	e006      	b.n	800d97a <HAL_GPIO_DeInit+0xc6>
 800d96c:	2303      	movs	r3, #3
 800d96e:	e004      	b.n	800d97a <HAL_GPIO_DeInit+0xc6>
 800d970:	2302      	movs	r3, #2
 800d972:	e002      	b.n	800d97a <HAL_GPIO_DeInit+0xc6>
 800d974:	2301      	movs	r3, #1
 800d976:	e000      	b.n	800d97a <HAL_GPIO_DeInit+0xc6>
 800d978:	2300      	movs	r3, #0
 800d97a:	697a      	ldr	r2, [r7, #20]
 800d97c:	f002 0203 	and.w	r2, r2, #3
 800d980:	0092      	lsls	r2, r2, #2
 800d982:	4093      	lsls	r3, r2
 800d984:	68ba      	ldr	r2, [r7, #8]
 800d986:	429a      	cmp	r2, r3
 800d988:	d136      	bne.n	800d9f8 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800d98a:	693b      	ldr	r3, [r7, #16]
 800d98c:	681a      	ldr	r2, [r3, #0]
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	43db      	mvns	r3, r3
 800d992:	401a      	ands	r2, r3
 800d994:	693b      	ldr	r3, [r7, #16]
 800d996:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	685a      	ldr	r2, [r3, #4]
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	43db      	mvns	r3, r3
 800d9a0:	401a      	ands	r2, r3
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800d9a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d9aa:	685a      	ldr	r2, [r3, #4]
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	43db      	mvns	r3, r3
 800d9b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d9b4:	4013      	ands	r3, r2
 800d9b6:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800d9b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d9bc:	681a      	ldr	r2, [r3, #0]
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	43db      	mvns	r3, r3
 800d9c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d9c6:	4013      	ands	r3, r2
 800d9c8:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	f003 0303 	and.w	r3, r3, #3
 800d9d0:	009b      	lsls	r3, r3, #2
 800d9d2:	220f      	movs	r2, #15
 800d9d4:	fa02 f303 	lsl.w	r3, r2, r3
 800d9d8:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800d9da:	4a30      	ldr	r2, [pc, #192]	; (800da9c <HAL_GPIO_DeInit+0x1e8>)
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	089b      	lsrs	r3, r3, #2
 800d9e0:	3302      	adds	r3, #2
 800d9e2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	43da      	mvns	r2, r3
 800d9ea:	482c      	ldr	r0, [pc, #176]	; (800da9c <HAL_GPIO_DeInit+0x1e8>)
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	089b      	lsrs	r3, r3, #2
 800d9f0:	400a      	ands	r2, r1
 800d9f2:	3302      	adds	r3, #2
 800d9f4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681a      	ldr	r2, [r3, #0]
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	005b      	lsls	r3, r3, #1
 800da00:	2103      	movs	r1, #3
 800da02:	fa01 f303 	lsl.w	r3, r1, r3
 800da06:	431a      	orrs	r2, r3
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	08da      	lsrs	r2, r3, #3
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	3208      	adds	r2, #8
 800da14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	f003 0307 	and.w	r3, r3, #7
 800da1e:	009b      	lsls	r3, r3, #2
 800da20:	220f      	movs	r2, #15
 800da22:	fa02 f303 	lsl.w	r3, r2, r3
 800da26:	43db      	mvns	r3, r3
 800da28:	697a      	ldr	r2, [r7, #20]
 800da2a:	08d2      	lsrs	r2, r2, #3
 800da2c:	4019      	ands	r1, r3
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	3208      	adds	r2, #8
 800da32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	68da      	ldr	r2, [r3, #12]
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	005b      	lsls	r3, r3, #1
 800da3e:	2103      	movs	r1, #3
 800da40:	fa01 f303 	lsl.w	r3, r1, r3
 800da44:	43db      	mvns	r3, r3
 800da46:	401a      	ands	r2, r3
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	685a      	ldr	r2, [r3, #4]
 800da50:	2101      	movs	r1, #1
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	fa01 f303 	lsl.w	r3, r1, r3
 800da58:	43db      	mvns	r3, r3
 800da5a:	401a      	ands	r2, r3
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	689a      	ldr	r2, [r3, #8]
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	005b      	lsls	r3, r3, #1
 800da68:	2103      	movs	r1, #3
 800da6a:	fa01 f303 	lsl.w	r3, r1, r3
 800da6e:	43db      	mvns	r3, r3
 800da70:	401a      	ands	r2, r3
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	609a      	str	r2, [r3, #8]
    }

    position++;
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	3301      	adds	r3, #1
 800da7a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800da7c:	683a      	ldr	r2, [r7, #0]
 800da7e:	697b      	ldr	r3, [r7, #20]
 800da80:	fa22 f303 	lsr.w	r3, r2, r3
 800da84:	2b00      	cmp	r3, #0
 800da86:	f47f af1f 	bne.w	800d8c8 <HAL_GPIO_DeInit+0x14>
  }
}
 800da8a:	bf00      	nop
 800da8c:	bf00      	nop
 800da8e:	371c      	adds	r7, #28
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr
 800da98:	58000080 	.word	0x58000080
 800da9c:	58000400 	.word	0x58000400
 800daa0:	58020000 	.word	0x58020000
 800daa4:	58020400 	.word	0x58020400
 800daa8:	58020800 	.word	0x58020800
 800daac:	58020c00 	.word	0x58020c00
 800dab0:	58021000 	.word	0x58021000
 800dab4:	58021400 	.word	0x58021400
 800dab8:	58021800 	.word	0x58021800
 800dabc:	58021c00 	.word	0x58021c00
 800dac0:	58022000 	.word	0x58022000
 800dac4:	58022400 	.word	0x58022400

0800dac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800dac8:	b480      	push	{r7}
 800daca:	b083      	sub	sp, #12
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
 800dad0:	460b      	mov	r3, r1
 800dad2:	807b      	strh	r3, [r7, #2]
 800dad4:	4613      	mov	r3, r2
 800dad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800dad8:	787b      	ldrb	r3, [r7, #1]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d003      	beq.n	800dae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800dade:	887a      	ldrh	r2, [r7, #2]
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800dae4:	e003      	b.n	800daee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800dae6:	887b      	ldrh	r3, [r7, #2]
 800dae8:	041a      	lsls	r2, r3, #16
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	619a      	str	r2, [r3, #24]
}
 800daee:	bf00      	nop
 800daf0:	370c      	adds	r7, #12
 800daf2:	46bd      	mov	sp, r7
 800daf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf8:	4770      	bx	lr

0800dafa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800dafa:	b480      	push	{r7}
 800dafc:	b085      	sub	sp, #20
 800dafe:	af00      	add	r7, sp, #0
 800db00:	6078      	str	r0, [r7, #4]
 800db02:	460b      	mov	r3, r1
 800db04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	695b      	ldr	r3, [r3, #20]
 800db0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800db0c:	887a      	ldrh	r2, [r7, #2]
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	4013      	ands	r3, r2
 800db12:	041a      	lsls	r2, r3, #16
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	43d9      	mvns	r1, r3
 800db18:	887b      	ldrh	r3, [r7, #2]
 800db1a:	400b      	ands	r3, r1
 800db1c:	431a      	orrs	r2, r3
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	619a      	str	r2, [r3, #24]
}
 800db22:	bf00      	nop
 800db24:	3714      	adds	r7, #20
 800db26:	46bd      	mov	sp, r7
 800db28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2c:	4770      	bx	lr
	...

0800db30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b082      	sub	sp, #8
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d101      	bne.n	800db42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800db3e:	2301      	movs	r3, #1
 800db40:	e07f      	b.n	800dc42 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800db48:	b2db      	uxtb	r3, r3
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d106      	bne.n	800db5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2200      	movs	r2, #0
 800db52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f000 f8a9 	bl	800dcae <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2224      	movs	r2, #36	; 0x24
 800db60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	681a      	ldr	r2, [r3, #0]
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f022 0201 	bic.w	r2, r2, #1
 800db72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	685a      	ldr	r2, [r3, #4]
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800db80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	689a      	ldr	r2, [r3, #8]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800db90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	68db      	ldr	r3, [r3, #12]
 800db96:	2b01      	cmp	r3, #1
 800db98:	d107      	bne.n	800dbaa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	689a      	ldr	r2, [r3, #8]
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dba6:	609a      	str	r2, [r3, #8]
 800dba8:	e006      	b.n	800dbb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	689a      	ldr	r2, [r3, #8]
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800dbb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	68db      	ldr	r3, [r3, #12]
 800dbbc:	2b02      	cmp	r3, #2
 800dbbe:	d104      	bne.n	800dbca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dbc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	6859      	ldr	r1, [r3, #4]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681a      	ldr	r2, [r3, #0]
 800dbd4:	4b1d      	ldr	r3, [pc, #116]	; (800dc4c <HAL_I2C_Init+0x11c>)
 800dbd6:	430b      	orrs	r3, r1
 800dbd8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	68da      	ldr	r2, [r3, #12]
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dbe8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	691a      	ldr	r2, [r3, #16]
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	695b      	ldr	r3, [r3, #20]
 800dbf2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	699b      	ldr	r3, [r3, #24]
 800dbfa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	430a      	orrs	r2, r1
 800dc02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	69d9      	ldr	r1, [r3, #28]
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6a1a      	ldr	r2, [r3, #32]
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	430a      	orrs	r2, r1
 800dc12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	681a      	ldr	r2, [r3, #0]
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	f042 0201 	orr.w	r2, r2, #1
 800dc22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2200      	movs	r2, #0
 800dc28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2220      	movs	r2, #32
 800dc2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2200      	movs	r2, #0
 800dc36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800dc40:	2300      	movs	r3, #0
}
 800dc42:	4618      	mov	r0, r3
 800dc44:	3708      	adds	r7, #8
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}
 800dc4a:	bf00      	nop
 800dc4c:	02008000 	.word	0x02008000

0800dc50 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b082      	sub	sp, #8
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d101      	bne.n	800dc62 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800dc5e:	2301      	movs	r3, #1
 800dc60:	e021      	b.n	800dca6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	2224      	movs	r2, #36	; 0x24
 800dc66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	681a      	ldr	r2, [r3, #0]
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	f022 0201 	bic.w	r2, r2, #1
 800dc78:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f000 f821 	bl	800dcc2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2200      	movs	r2, #0
 800dc84:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2200      	movs	r2, #0
 800dc8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2200      	movs	r2, #0
 800dc92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2200      	movs	r2, #0
 800dc98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2200      	movs	r2, #0
 800dca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800dca4:	2300      	movs	r3, #0
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	3708      	adds	r7, #8
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}

0800dcae <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800dcae:	b480      	push	{r7}
 800dcb0:	b083      	sub	sp, #12
 800dcb2:	af00      	add	r7, sp, #0
 800dcb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800dcb6:	bf00      	nop
 800dcb8:	370c      	adds	r7, #12
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc0:	4770      	bx	lr

0800dcc2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800dcc2:	b480      	push	{r7}
 800dcc4:	b083      	sub	sp, #12
 800dcc6:	af00      	add	r7, sp, #0
 800dcc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800dcca:	bf00      	nop
 800dccc:	370c      	adds	r7, #12
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd4:	4770      	bx	lr
	...

0800dcd8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b088      	sub	sp, #32
 800dcdc:	af02      	add	r7, sp, #8
 800dcde:	60f8      	str	r0, [r7, #12]
 800dce0:	4608      	mov	r0, r1
 800dce2:	4611      	mov	r1, r2
 800dce4:	461a      	mov	r2, r3
 800dce6:	4603      	mov	r3, r0
 800dce8:	817b      	strh	r3, [r7, #10]
 800dcea:	460b      	mov	r3, r1
 800dcec:	813b      	strh	r3, [r7, #8]
 800dcee:	4613      	mov	r3, r2
 800dcf0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dcf8:	b2db      	uxtb	r3, r3
 800dcfa:	2b20      	cmp	r3, #32
 800dcfc:	f040 80f9 	bne.w	800def2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800dd00:	6a3b      	ldr	r3, [r7, #32]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d002      	beq.n	800dd0c <HAL_I2C_Mem_Write+0x34>
 800dd06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d105      	bne.n	800dd18 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dd12:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800dd14:	2301      	movs	r3, #1
 800dd16:	e0ed      	b.n	800def4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dd1e:	2b01      	cmp	r3, #1
 800dd20:	d101      	bne.n	800dd26 <HAL_I2C_Mem_Write+0x4e>
 800dd22:	2302      	movs	r3, #2
 800dd24:	e0e6      	b.n	800def4 <HAL_I2C_Mem_Write+0x21c>
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	2201      	movs	r2, #1
 800dd2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800dd2e:	f7ff f80d 	bl	800cd4c <HAL_GetTick>
 800dd32:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	9300      	str	r3, [sp, #0]
 800dd38:	2319      	movs	r3, #25
 800dd3a:	2201      	movs	r2, #1
 800dd3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800dd40:	68f8      	ldr	r0, [r7, #12]
 800dd42:	f000 fadd 	bl	800e300 <I2C_WaitOnFlagUntilTimeout>
 800dd46:	4603      	mov	r3, r0
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d001      	beq.n	800dd50 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	e0d1      	b.n	800def4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	2221      	movs	r2, #33	; 0x21
 800dd54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	2240      	movs	r2, #64	; 0x40
 800dd5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	2200      	movs	r2, #0
 800dd64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	6a3a      	ldr	r2, [r7, #32]
 800dd6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dd70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	2200      	movs	r2, #0
 800dd76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800dd78:	88f8      	ldrh	r0, [r7, #6]
 800dd7a:	893a      	ldrh	r2, [r7, #8]
 800dd7c:	8979      	ldrh	r1, [r7, #10]
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	9301      	str	r3, [sp, #4]
 800dd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd84:	9300      	str	r3, [sp, #0]
 800dd86:	4603      	mov	r3, r0
 800dd88:	68f8      	ldr	r0, [r7, #12]
 800dd8a:	f000 f9ed 	bl	800e168 <I2C_RequestMemoryWrite>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d005      	beq.n	800dda0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	2200      	movs	r2, #0
 800dd98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	e0a9      	b.n	800def4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dda4:	b29b      	uxth	r3, r3
 800dda6:	2bff      	cmp	r3, #255	; 0xff
 800dda8:	d90e      	bls.n	800ddc8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	22ff      	movs	r2, #255	; 0xff
 800ddae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddb4:	b2da      	uxtb	r2, r3
 800ddb6:	8979      	ldrh	r1, [r7, #10]
 800ddb8:	2300      	movs	r3, #0
 800ddba:	9300      	str	r3, [sp, #0]
 800ddbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ddc0:	68f8      	ldr	r0, [r7, #12]
 800ddc2:	f000 fc45 	bl	800e650 <I2C_TransferConfig>
 800ddc6:	e00f      	b.n	800dde8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ddcc:	b29a      	uxth	r2, r3
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddd6:	b2da      	uxtb	r2, r3
 800ddd8:	8979      	ldrh	r1, [r7, #10]
 800ddda:	2300      	movs	r3, #0
 800dddc:	9300      	str	r3, [sp, #0]
 800ddde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dde2:	68f8      	ldr	r0, [r7, #12]
 800dde4:	f000 fc34 	bl	800e650 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dde8:	697a      	ldr	r2, [r7, #20]
 800ddea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ddec:	68f8      	ldr	r0, [r7, #12]
 800ddee:	f000 fac7 	bl	800e380 <I2C_WaitOnTXISFlagUntilTimeout>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d001      	beq.n	800ddfc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800ddf8:	2301      	movs	r3, #1
 800ddfa:	e07b      	b.n	800def4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de00:	781a      	ldrb	r2, [r3, #0]
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de0c:	1c5a      	adds	r2, r3, #1
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de16:	b29b      	uxth	r3, r3
 800de18:	3b01      	subs	r3, #1
 800de1a:	b29a      	uxth	r2, r3
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de24:	3b01      	subs	r3, #1
 800de26:	b29a      	uxth	r2, r3
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de30:	b29b      	uxth	r3, r3
 800de32:	2b00      	cmp	r3, #0
 800de34:	d034      	beq.n	800dea0 <HAL_I2C_Mem_Write+0x1c8>
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d130      	bne.n	800dea0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800de3e:	697b      	ldr	r3, [r7, #20]
 800de40:	9300      	str	r3, [sp, #0]
 800de42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de44:	2200      	movs	r2, #0
 800de46:	2180      	movs	r1, #128	; 0x80
 800de48:	68f8      	ldr	r0, [r7, #12]
 800de4a:	f000 fa59 	bl	800e300 <I2C_WaitOnFlagUntilTimeout>
 800de4e:	4603      	mov	r3, r0
 800de50:	2b00      	cmp	r3, #0
 800de52:	d001      	beq.n	800de58 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800de54:	2301      	movs	r3, #1
 800de56:	e04d      	b.n	800def4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de5c:	b29b      	uxth	r3, r3
 800de5e:	2bff      	cmp	r3, #255	; 0xff
 800de60:	d90e      	bls.n	800de80 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	22ff      	movs	r2, #255	; 0xff
 800de66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de6c:	b2da      	uxtb	r2, r3
 800de6e:	8979      	ldrh	r1, [r7, #10]
 800de70:	2300      	movs	r3, #0
 800de72:	9300      	str	r3, [sp, #0]
 800de74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800de78:	68f8      	ldr	r0, [r7, #12]
 800de7a:	f000 fbe9 	bl	800e650 <I2C_TransferConfig>
 800de7e:	e00f      	b.n	800dea0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de84:	b29a      	uxth	r2, r3
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de8e:	b2da      	uxtb	r2, r3
 800de90:	8979      	ldrh	r1, [r7, #10]
 800de92:	2300      	movs	r3, #0
 800de94:	9300      	str	r3, [sp, #0]
 800de96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800de9a:	68f8      	ldr	r0, [r7, #12]
 800de9c:	f000 fbd8 	bl	800e650 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d19e      	bne.n	800dde8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800deaa:	697a      	ldr	r2, [r7, #20]
 800deac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800deae:	68f8      	ldr	r0, [r7, #12]
 800deb0:	f000 faa6 	bl	800e400 <I2C_WaitOnSTOPFlagUntilTimeout>
 800deb4:	4603      	mov	r3, r0
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d001      	beq.n	800debe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800deba:	2301      	movs	r3, #1
 800debc:	e01a      	b.n	800def4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	2220      	movs	r2, #32
 800dec4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	6859      	ldr	r1, [r3, #4]
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	681a      	ldr	r2, [r3, #0]
 800ded0:	4b0a      	ldr	r3, [pc, #40]	; (800defc <HAL_I2C_Mem_Write+0x224>)
 800ded2:	400b      	ands	r3, r1
 800ded4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	2220      	movs	r2, #32
 800deda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	2200      	movs	r2, #0
 800dee2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	2200      	movs	r2, #0
 800deea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800deee:	2300      	movs	r3, #0
 800def0:	e000      	b.n	800def4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800def2:	2302      	movs	r3, #2
  }
}
 800def4:	4618      	mov	r0, r3
 800def6:	3718      	adds	r7, #24
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}
 800defc:	fe00e800 	.word	0xfe00e800

0800df00 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b088      	sub	sp, #32
 800df04:	af02      	add	r7, sp, #8
 800df06:	60f8      	str	r0, [r7, #12]
 800df08:	4608      	mov	r0, r1
 800df0a:	4611      	mov	r1, r2
 800df0c:	461a      	mov	r2, r3
 800df0e:	4603      	mov	r3, r0
 800df10:	817b      	strh	r3, [r7, #10]
 800df12:	460b      	mov	r3, r1
 800df14:	813b      	strh	r3, [r7, #8]
 800df16:	4613      	mov	r3, r2
 800df18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800df20:	b2db      	uxtb	r3, r3
 800df22:	2b20      	cmp	r3, #32
 800df24:	f040 80fd 	bne.w	800e122 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800df28:	6a3b      	ldr	r3, [r7, #32]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d002      	beq.n	800df34 <HAL_I2C_Mem_Read+0x34>
 800df2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df30:	2b00      	cmp	r3, #0
 800df32:	d105      	bne.n	800df40 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df3a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800df3c:	2301      	movs	r3, #1
 800df3e:	e0f1      	b.n	800e124 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800df46:	2b01      	cmp	r3, #1
 800df48:	d101      	bne.n	800df4e <HAL_I2C_Mem_Read+0x4e>
 800df4a:	2302      	movs	r3, #2
 800df4c:	e0ea      	b.n	800e124 <HAL_I2C_Mem_Read+0x224>
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	2201      	movs	r2, #1
 800df52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800df56:	f7fe fef9 	bl	800cd4c <HAL_GetTick>
 800df5a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	9300      	str	r3, [sp, #0]
 800df60:	2319      	movs	r3, #25
 800df62:	2201      	movs	r2, #1
 800df64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800df68:	68f8      	ldr	r0, [r7, #12]
 800df6a:	f000 f9c9 	bl	800e300 <I2C_WaitOnFlagUntilTimeout>
 800df6e:	4603      	mov	r3, r0
 800df70:	2b00      	cmp	r3, #0
 800df72:	d001      	beq.n	800df78 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800df74:	2301      	movs	r3, #1
 800df76:	e0d5      	b.n	800e124 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	2222      	movs	r2, #34	; 0x22
 800df7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	2240      	movs	r2, #64	; 0x40
 800df84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	2200      	movs	r2, #0
 800df8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	6a3a      	ldr	r2, [r7, #32]
 800df92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800df98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2200      	movs	r2, #0
 800df9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800dfa0:	88f8      	ldrh	r0, [r7, #6]
 800dfa2:	893a      	ldrh	r2, [r7, #8]
 800dfa4:	8979      	ldrh	r1, [r7, #10]
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	9301      	str	r3, [sp, #4]
 800dfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfac:	9300      	str	r3, [sp, #0]
 800dfae:	4603      	mov	r3, r0
 800dfb0:	68f8      	ldr	r0, [r7, #12]
 800dfb2:	f000 f92d 	bl	800e210 <I2C_RequestMemoryRead>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d005      	beq.n	800dfc8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800dfc4:	2301      	movs	r3, #1
 800dfc6:	e0ad      	b.n	800e124 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dfcc:	b29b      	uxth	r3, r3
 800dfce:	2bff      	cmp	r3, #255	; 0xff
 800dfd0:	d90e      	bls.n	800dff0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	22ff      	movs	r2, #255	; 0xff
 800dfd6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dfdc:	b2da      	uxtb	r2, r3
 800dfde:	8979      	ldrh	r1, [r7, #10]
 800dfe0:	4b52      	ldr	r3, [pc, #328]	; (800e12c <HAL_I2C_Mem_Read+0x22c>)
 800dfe2:	9300      	str	r3, [sp, #0]
 800dfe4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dfe8:	68f8      	ldr	r0, [r7, #12]
 800dfea:	f000 fb31 	bl	800e650 <I2C_TransferConfig>
 800dfee:	e00f      	b.n	800e010 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dff4:	b29a      	uxth	r2, r3
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dffe:	b2da      	uxtb	r2, r3
 800e000:	8979      	ldrh	r1, [r7, #10]
 800e002:	4b4a      	ldr	r3, [pc, #296]	; (800e12c <HAL_I2C_Mem_Read+0x22c>)
 800e004:	9300      	str	r3, [sp, #0]
 800e006:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e00a:	68f8      	ldr	r0, [r7, #12]
 800e00c:	f000 fb20 	bl	800e650 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	9300      	str	r3, [sp, #0]
 800e014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e016:	2200      	movs	r2, #0
 800e018:	2104      	movs	r1, #4
 800e01a:	68f8      	ldr	r0, [r7, #12]
 800e01c:	f000 f970 	bl	800e300 <I2C_WaitOnFlagUntilTimeout>
 800e020:	4603      	mov	r3, r0
 800e022:	2b00      	cmp	r3, #0
 800e024:	d001      	beq.n	800e02a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800e026:	2301      	movs	r3, #1
 800e028:	e07c      	b.n	800e124 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e034:	b2d2      	uxtb	r2, r2
 800e036:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e03c:	1c5a      	adds	r2, r3, #1
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e046:	3b01      	subs	r3, #1
 800e048:	b29a      	uxth	r2, r3
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e052:	b29b      	uxth	r3, r3
 800e054:	3b01      	subs	r3, #1
 800e056:	b29a      	uxth	r2, r3
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e060:	b29b      	uxth	r3, r3
 800e062:	2b00      	cmp	r3, #0
 800e064:	d034      	beq.n	800e0d0 <HAL_I2C_Mem_Read+0x1d0>
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d130      	bne.n	800e0d0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	9300      	str	r3, [sp, #0]
 800e072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e074:	2200      	movs	r2, #0
 800e076:	2180      	movs	r1, #128	; 0x80
 800e078:	68f8      	ldr	r0, [r7, #12]
 800e07a:	f000 f941 	bl	800e300 <I2C_WaitOnFlagUntilTimeout>
 800e07e:	4603      	mov	r3, r0
 800e080:	2b00      	cmp	r3, #0
 800e082:	d001      	beq.n	800e088 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800e084:	2301      	movs	r3, #1
 800e086:	e04d      	b.n	800e124 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e08c:	b29b      	uxth	r3, r3
 800e08e:	2bff      	cmp	r3, #255	; 0xff
 800e090:	d90e      	bls.n	800e0b0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	22ff      	movs	r2, #255	; 0xff
 800e096:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e09c:	b2da      	uxtb	r2, r3
 800e09e:	8979      	ldrh	r1, [r7, #10]
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	9300      	str	r3, [sp, #0]
 800e0a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e0a8:	68f8      	ldr	r0, [r7, #12]
 800e0aa:	f000 fad1 	bl	800e650 <I2C_TransferConfig>
 800e0ae:	e00f      	b.n	800e0d0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0b4:	b29a      	uxth	r2, r3
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0be:	b2da      	uxtb	r2, r3
 800e0c0:	8979      	ldrh	r1, [r7, #10]
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	9300      	str	r3, [sp, #0]
 800e0c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e0ca:	68f8      	ldr	r0, [r7, #12]
 800e0cc:	f000 fac0 	bl	800e650 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0d4:	b29b      	uxth	r3, r3
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d19a      	bne.n	800e010 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e0da:	697a      	ldr	r2, [r7, #20]
 800e0dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e0de:	68f8      	ldr	r0, [r7, #12]
 800e0e0:	f000 f98e 	bl	800e400 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d001      	beq.n	800e0ee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	e01a      	b.n	800e124 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	2220      	movs	r2, #32
 800e0f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	6859      	ldr	r1, [r3, #4]
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	681a      	ldr	r2, [r3, #0]
 800e100:	4b0b      	ldr	r3, [pc, #44]	; (800e130 <HAL_I2C_Mem_Read+0x230>)
 800e102:	400b      	ands	r3, r1
 800e104:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	2220      	movs	r2, #32
 800e10a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	2200      	movs	r2, #0
 800e112:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	2200      	movs	r2, #0
 800e11a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e11e:	2300      	movs	r3, #0
 800e120:	e000      	b.n	800e124 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800e122:	2302      	movs	r3, #2
  }
}
 800e124:	4618      	mov	r0, r3
 800e126:	3718      	adds	r7, #24
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}
 800e12c:	80002400 	.word	0x80002400
 800e130:	fe00e800 	.word	0xfe00e800

0800e134 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800e134:	b480      	push	{r7}
 800e136:	b083      	sub	sp, #12
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e142:	b2db      	uxtb	r3, r3
}
 800e144:	4618      	mov	r0, r3
 800e146:	370c      	adds	r7, #12
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr

0800e150 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800e150:	b480      	push	{r7}
 800e152:	b083      	sub	sp, #12
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800e15c:	4618      	mov	r0, r3
 800e15e:	370c      	adds	r7, #12
 800e160:	46bd      	mov	sp, r7
 800e162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e166:	4770      	bx	lr

0800e168 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b086      	sub	sp, #24
 800e16c:	af02      	add	r7, sp, #8
 800e16e:	60f8      	str	r0, [r7, #12]
 800e170:	4608      	mov	r0, r1
 800e172:	4611      	mov	r1, r2
 800e174:	461a      	mov	r2, r3
 800e176:	4603      	mov	r3, r0
 800e178:	817b      	strh	r3, [r7, #10]
 800e17a:	460b      	mov	r3, r1
 800e17c:	813b      	strh	r3, [r7, #8]
 800e17e:	4613      	mov	r3, r2
 800e180:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800e182:	88fb      	ldrh	r3, [r7, #6]
 800e184:	b2da      	uxtb	r2, r3
 800e186:	8979      	ldrh	r1, [r7, #10]
 800e188:	4b20      	ldr	r3, [pc, #128]	; (800e20c <I2C_RequestMemoryWrite+0xa4>)
 800e18a:	9300      	str	r3, [sp, #0]
 800e18c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e190:	68f8      	ldr	r0, [r7, #12]
 800e192:	f000 fa5d 	bl	800e650 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e196:	69fa      	ldr	r2, [r7, #28]
 800e198:	69b9      	ldr	r1, [r7, #24]
 800e19a:	68f8      	ldr	r0, [r7, #12]
 800e19c:	f000 f8f0 	bl	800e380 <I2C_WaitOnTXISFlagUntilTimeout>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d001      	beq.n	800e1aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800e1a6:	2301      	movs	r3, #1
 800e1a8:	e02c      	b.n	800e204 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e1aa:	88fb      	ldrh	r3, [r7, #6]
 800e1ac:	2b01      	cmp	r3, #1
 800e1ae:	d105      	bne.n	800e1bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e1b0:	893b      	ldrh	r3, [r7, #8]
 800e1b2:	b2da      	uxtb	r2, r3
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	629a      	str	r2, [r3, #40]	; 0x28
 800e1ba:	e015      	b.n	800e1e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e1bc:	893b      	ldrh	r3, [r7, #8]
 800e1be:	0a1b      	lsrs	r3, r3, #8
 800e1c0:	b29b      	uxth	r3, r3
 800e1c2:	b2da      	uxtb	r2, r3
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e1ca:	69fa      	ldr	r2, [r7, #28]
 800e1cc:	69b9      	ldr	r1, [r7, #24]
 800e1ce:	68f8      	ldr	r0, [r7, #12]
 800e1d0:	f000 f8d6 	bl	800e380 <I2C_WaitOnTXISFlagUntilTimeout>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d001      	beq.n	800e1de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800e1da:	2301      	movs	r3, #1
 800e1dc:	e012      	b.n	800e204 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e1de:	893b      	ldrh	r3, [r7, #8]
 800e1e0:	b2da      	uxtb	r2, r3
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800e1e8:	69fb      	ldr	r3, [r7, #28]
 800e1ea:	9300      	str	r3, [sp, #0]
 800e1ec:	69bb      	ldr	r3, [r7, #24]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	2180      	movs	r1, #128	; 0x80
 800e1f2:	68f8      	ldr	r0, [r7, #12]
 800e1f4:	f000 f884 	bl	800e300 <I2C_WaitOnFlagUntilTimeout>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d001      	beq.n	800e202 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800e1fe:	2301      	movs	r3, #1
 800e200:	e000      	b.n	800e204 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800e202:	2300      	movs	r3, #0
}
 800e204:	4618      	mov	r0, r3
 800e206:	3710      	adds	r7, #16
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}
 800e20c:	80002000 	.word	0x80002000

0800e210 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b086      	sub	sp, #24
 800e214:	af02      	add	r7, sp, #8
 800e216:	60f8      	str	r0, [r7, #12]
 800e218:	4608      	mov	r0, r1
 800e21a:	4611      	mov	r1, r2
 800e21c:	461a      	mov	r2, r3
 800e21e:	4603      	mov	r3, r0
 800e220:	817b      	strh	r3, [r7, #10]
 800e222:	460b      	mov	r3, r1
 800e224:	813b      	strh	r3, [r7, #8]
 800e226:	4613      	mov	r3, r2
 800e228:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800e22a:	88fb      	ldrh	r3, [r7, #6]
 800e22c:	b2da      	uxtb	r2, r3
 800e22e:	8979      	ldrh	r1, [r7, #10]
 800e230:	4b20      	ldr	r3, [pc, #128]	; (800e2b4 <I2C_RequestMemoryRead+0xa4>)
 800e232:	9300      	str	r3, [sp, #0]
 800e234:	2300      	movs	r3, #0
 800e236:	68f8      	ldr	r0, [r7, #12]
 800e238:	f000 fa0a 	bl	800e650 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e23c:	69fa      	ldr	r2, [r7, #28]
 800e23e:	69b9      	ldr	r1, [r7, #24]
 800e240:	68f8      	ldr	r0, [r7, #12]
 800e242:	f000 f89d 	bl	800e380 <I2C_WaitOnTXISFlagUntilTimeout>
 800e246:	4603      	mov	r3, r0
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d001      	beq.n	800e250 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800e24c:	2301      	movs	r3, #1
 800e24e:	e02c      	b.n	800e2aa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e250:	88fb      	ldrh	r3, [r7, #6]
 800e252:	2b01      	cmp	r3, #1
 800e254:	d105      	bne.n	800e262 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e256:	893b      	ldrh	r3, [r7, #8]
 800e258:	b2da      	uxtb	r2, r3
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	629a      	str	r2, [r3, #40]	; 0x28
 800e260:	e015      	b.n	800e28e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e262:	893b      	ldrh	r3, [r7, #8]
 800e264:	0a1b      	lsrs	r3, r3, #8
 800e266:	b29b      	uxth	r3, r3
 800e268:	b2da      	uxtb	r2, r3
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e270:	69fa      	ldr	r2, [r7, #28]
 800e272:	69b9      	ldr	r1, [r7, #24]
 800e274:	68f8      	ldr	r0, [r7, #12]
 800e276:	f000 f883 	bl	800e380 <I2C_WaitOnTXISFlagUntilTimeout>
 800e27a:	4603      	mov	r3, r0
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d001      	beq.n	800e284 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800e280:	2301      	movs	r3, #1
 800e282:	e012      	b.n	800e2aa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e284:	893b      	ldrh	r3, [r7, #8]
 800e286:	b2da      	uxtb	r2, r3
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800e28e:	69fb      	ldr	r3, [r7, #28]
 800e290:	9300      	str	r3, [sp, #0]
 800e292:	69bb      	ldr	r3, [r7, #24]
 800e294:	2200      	movs	r2, #0
 800e296:	2140      	movs	r1, #64	; 0x40
 800e298:	68f8      	ldr	r0, [r7, #12]
 800e29a:	f000 f831 	bl	800e300 <I2C_WaitOnFlagUntilTimeout>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d001      	beq.n	800e2a8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	e000      	b.n	800e2aa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800e2a8:	2300      	movs	r3, #0
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	3710      	adds	r7, #16
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}
 800e2b2:	bf00      	nop
 800e2b4:	80002000 	.word	0x80002000

0800e2b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	b083      	sub	sp, #12
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	699b      	ldr	r3, [r3, #24]
 800e2c6:	f003 0302 	and.w	r3, r3, #2
 800e2ca:	2b02      	cmp	r3, #2
 800e2cc:	d103      	bne.n	800e2d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	699b      	ldr	r3, [r3, #24]
 800e2dc:	f003 0301 	and.w	r3, r3, #1
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d007      	beq.n	800e2f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	699a      	ldr	r2, [r3, #24]
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	f042 0201 	orr.w	r2, r2, #1
 800e2f2:	619a      	str	r2, [r3, #24]
  }
}
 800e2f4:	bf00      	nop
 800e2f6:	370c      	adds	r7, #12
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	4770      	bx	lr

0800e300 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b084      	sub	sp, #16
 800e304:	af00      	add	r7, sp, #0
 800e306:	60f8      	str	r0, [r7, #12]
 800e308:	60b9      	str	r1, [r7, #8]
 800e30a:	603b      	str	r3, [r7, #0]
 800e30c:	4613      	mov	r3, r2
 800e30e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e310:	e022      	b.n	800e358 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e318:	d01e      	beq.n	800e358 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e31a:	f7fe fd17 	bl	800cd4c <HAL_GetTick>
 800e31e:	4602      	mov	r2, r0
 800e320:	69bb      	ldr	r3, [r7, #24]
 800e322:	1ad3      	subs	r3, r2, r3
 800e324:	683a      	ldr	r2, [r7, #0]
 800e326:	429a      	cmp	r2, r3
 800e328:	d302      	bcc.n	800e330 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d113      	bne.n	800e358 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e334:	f043 0220 	orr.w	r2, r3, #32
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	2220      	movs	r2, #32
 800e340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	2200      	movs	r2, #0
 800e348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	2200      	movs	r2, #0
 800e350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800e354:	2301      	movs	r3, #1
 800e356:	e00f      	b.n	800e378 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	699a      	ldr	r2, [r3, #24]
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	4013      	ands	r3, r2
 800e362:	68ba      	ldr	r2, [r7, #8]
 800e364:	429a      	cmp	r2, r3
 800e366:	bf0c      	ite	eq
 800e368:	2301      	moveq	r3, #1
 800e36a:	2300      	movne	r3, #0
 800e36c:	b2db      	uxtb	r3, r3
 800e36e:	461a      	mov	r2, r3
 800e370:	79fb      	ldrb	r3, [r7, #7]
 800e372:	429a      	cmp	r2, r3
 800e374:	d0cd      	beq.n	800e312 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e376:	2300      	movs	r3, #0
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3710      	adds	r7, #16
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}

0800e380 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b084      	sub	sp, #16
 800e384:	af00      	add	r7, sp, #0
 800e386:	60f8      	str	r0, [r7, #12]
 800e388:	60b9      	str	r1, [r7, #8]
 800e38a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e38c:	e02c      	b.n	800e3e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e38e:	687a      	ldr	r2, [r7, #4]
 800e390:	68b9      	ldr	r1, [r7, #8]
 800e392:	68f8      	ldr	r0, [r7, #12]
 800e394:	f000 f870 	bl	800e478 <I2C_IsErrorOccurred>
 800e398:	4603      	mov	r3, r0
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d001      	beq.n	800e3a2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e39e:	2301      	movs	r3, #1
 800e3a0:	e02a      	b.n	800e3f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3a8:	d01e      	beq.n	800e3e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e3aa:	f7fe fccf 	bl	800cd4c <HAL_GetTick>
 800e3ae:	4602      	mov	r2, r0
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	1ad3      	subs	r3, r2, r3
 800e3b4:	68ba      	ldr	r2, [r7, #8]
 800e3b6:	429a      	cmp	r2, r3
 800e3b8:	d302      	bcc.n	800e3c0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d113      	bne.n	800e3e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3c4:	f043 0220 	orr.w	r2, r3, #32
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	2220      	movs	r2, #32
 800e3d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	e007      	b.n	800e3f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	699b      	ldr	r3, [r3, #24]
 800e3ee:	f003 0302 	and.w	r3, r3, #2
 800e3f2:	2b02      	cmp	r3, #2
 800e3f4:	d1cb      	bne.n	800e38e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e3f6:	2300      	movs	r3, #0
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	3710      	adds	r7, #16
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}

0800e400 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b084      	sub	sp, #16
 800e404:	af00      	add	r7, sp, #0
 800e406:	60f8      	str	r0, [r7, #12]
 800e408:	60b9      	str	r1, [r7, #8]
 800e40a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e40c:	e028      	b.n	800e460 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e40e:	687a      	ldr	r2, [r7, #4]
 800e410:	68b9      	ldr	r1, [r7, #8]
 800e412:	68f8      	ldr	r0, [r7, #12]
 800e414:	f000 f830 	bl	800e478 <I2C_IsErrorOccurred>
 800e418:	4603      	mov	r3, r0
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d001      	beq.n	800e422 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e41e:	2301      	movs	r3, #1
 800e420:	e026      	b.n	800e470 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e422:	f7fe fc93 	bl	800cd4c <HAL_GetTick>
 800e426:	4602      	mov	r2, r0
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	1ad3      	subs	r3, r2, r3
 800e42c:	68ba      	ldr	r2, [r7, #8]
 800e42e:	429a      	cmp	r2, r3
 800e430:	d302      	bcc.n	800e438 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d113      	bne.n	800e460 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e43c:	f043 0220 	orr.w	r2, r3, #32
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	2220      	movs	r2, #32
 800e448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	2200      	movs	r2, #0
 800e450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	2200      	movs	r2, #0
 800e458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800e45c:	2301      	movs	r3, #1
 800e45e:	e007      	b.n	800e470 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	699b      	ldr	r3, [r3, #24]
 800e466:	f003 0320 	and.w	r3, r3, #32
 800e46a:	2b20      	cmp	r3, #32
 800e46c:	d1cf      	bne.n	800e40e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800e46e:	2300      	movs	r3, #0
}
 800e470:	4618      	mov	r0, r3
 800e472:	3710      	adds	r7, #16
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}

0800e478 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b08a      	sub	sp, #40	; 0x28
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	60f8      	str	r0, [r7, #12]
 800e480:	60b9      	str	r1, [r7, #8]
 800e482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e484:	2300      	movs	r3, #0
 800e486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	699b      	ldr	r3, [r3, #24]
 800e490:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800e492:	2300      	movs	r3, #0
 800e494:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800e49a:	69bb      	ldr	r3, [r7, #24]
 800e49c:	f003 0310 	and.w	r3, r3, #16
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d075      	beq.n	800e590 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	2210      	movs	r2, #16
 800e4aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e4ac:	e056      	b.n	800e55c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4b4:	d052      	beq.n	800e55c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800e4b6:	f7fe fc49 	bl	800cd4c <HAL_GetTick>
 800e4ba:	4602      	mov	r2, r0
 800e4bc:	69fb      	ldr	r3, [r7, #28]
 800e4be:	1ad3      	subs	r3, r2, r3
 800e4c0:	68ba      	ldr	r2, [r7, #8]
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d302      	bcc.n	800e4cc <I2C_IsErrorOccurred+0x54>
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d147      	bne.n	800e55c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	685b      	ldr	r3, [r3, #4]
 800e4d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e4d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e4de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	699b      	ldr	r3, [r3, #24]
 800e4e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e4ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e4ee:	d12e      	bne.n	800e54e <I2C_IsErrorOccurred+0xd6>
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e4f6:	d02a      	beq.n	800e54e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800e4f8:	7cfb      	ldrb	r3, [r7, #19]
 800e4fa:	2b20      	cmp	r3, #32
 800e4fc:	d027      	beq.n	800e54e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	685a      	ldr	r2, [r3, #4]
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e50c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800e50e:	f7fe fc1d 	bl	800cd4c <HAL_GetTick>
 800e512:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e514:	e01b      	b.n	800e54e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800e516:	f7fe fc19 	bl	800cd4c <HAL_GetTick>
 800e51a:	4602      	mov	r2, r0
 800e51c:	69fb      	ldr	r3, [r7, #28]
 800e51e:	1ad3      	subs	r3, r2, r3
 800e520:	2b19      	cmp	r3, #25
 800e522:	d914      	bls.n	800e54e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e528:	f043 0220 	orr.w	r2, r3, #32
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	2220      	movs	r2, #32
 800e534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	2200      	movs	r2, #0
 800e53c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	2200      	movs	r2, #0
 800e544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800e548:	2301      	movs	r3, #1
 800e54a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	699b      	ldr	r3, [r3, #24]
 800e554:	f003 0320 	and.w	r3, r3, #32
 800e558:	2b20      	cmp	r3, #32
 800e55a:	d1dc      	bne.n	800e516 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	699b      	ldr	r3, [r3, #24]
 800e562:	f003 0320 	and.w	r3, r3, #32
 800e566:	2b20      	cmp	r3, #32
 800e568:	d003      	beq.n	800e572 <I2C_IsErrorOccurred+0xfa>
 800e56a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d09d      	beq.n	800e4ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800e572:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e576:	2b00      	cmp	r3, #0
 800e578:	d103      	bne.n	800e582 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	2220      	movs	r2, #32
 800e580:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800e582:	6a3b      	ldr	r3, [r7, #32]
 800e584:	f043 0304 	orr.w	r3, r3, #4
 800e588:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800e58a:	2301      	movs	r3, #1
 800e58c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	699b      	ldr	r3, [r3, #24]
 800e596:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800e598:	69bb      	ldr	r3, [r7, #24]
 800e59a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d00b      	beq.n	800e5ba <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800e5a2:	6a3b      	ldr	r3, [r7, #32]
 800e5a4:	f043 0301 	orr.w	r3, r3, #1
 800e5a8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e5b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800e5ba:	69bb      	ldr	r3, [r7, #24]
 800e5bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d00b      	beq.n	800e5dc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800e5c4:	6a3b      	ldr	r3, [r7, #32]
 800e5c6:	f043 0308 	orr.w	r3, r3, #8
 800e5ca:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e5d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800e5dc:	69bb      	ldr	r3, [r7, #24]
 800e5de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d00b      	beq.n	800e5fe <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800e5e6:	6a3b      	ldr	r3, [r7, #32]
 800e5e8:	f043 0302 	orr.w	r3, r3, #2
 800e5ec:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e5f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800e5fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e602:	2b00      	cmp	r3, #0
 800e604:	d01c      	beq.n	800e640 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e606:	68f8      	ldr	r0, [r7, #12]
 800e608:	f7ff fe56 	bl	800e2b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	6859      	ldr	r1, [r3, #4]
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	681a      	ldr	r2, [r3, #0]
 800e616:	4b0d      	ldr	r3, [pc, #52]	; (800e64c <I2C_IsErrorOccurred+0x1d4>)
 800e618:	400b      	ands	r3, r1
 800e61a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e620:	6a3b      	ldr	r3, [r7, #32]
 800e622:	431a      	orrs	r2, r3
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	2220      	movs	r2, #32
 800e62c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	2200      	movs	r2, #0
 800e634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	2200      	movs	r2, #0
 800e63c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800e640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e644:	4618      	mov	r0, r3
 800e646:	3728      	adds	r7, #40	; 0x28
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}
 800e64c:	fe00e800 	.word	0xfe00e800

0800e650 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800e650:	b480      	push	{r7}
 800e652:	b087      	sub	sp, #28
 800e654:	af00      	add	r7, sp, #0
 800e656:	60f8      	str	r0, [r7, #12]
 800e658:	607b      	str	r3, [r7, #4]
 800e65a:	460b      	mov	r3, r1
 800e65c:	817b      	strh	r3, [r7, #10]
 800e65e:	4613      	mov	r3, r2
 800e660:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e662:	897b      	ldrh	r3, [r7, #10]
 800e664:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e668:	7a7b      	ldrb	r3, [r7, #9]
 800e66a:	041b      	lsls	r3, r3, #16
 800e66c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e670:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e676:	6a3b      	ldr	r3, [r7, #32]
 800e678:	4313      	orrs	r3, r2
 800e67a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e67e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	685a      	ldr	r2, [r3, #4]
 800e686:	6a3b      	ldr	r3, [r7, #32]
 800e688:	0d5b      	lsrs	r3, r3, #21
 800e68a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800e68e:	4b08      	ldr	r3, [pc, #32]	; (800e6b0 <I2C_TransferConfig+0x60>)
 800e690:	430b      	orrs	r3, r1
 800e692:	43db      	mvns	r3, r3
 800e694:	ea02 0103 	and.w	r1, r2, r3
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	697a      	ldr	r2, [r7, #20]
 800e69e:	430a      	orrs	r2, r1
 800e6a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800e6a2:	bf00      	nop
 800e6a4:	371c      	adds	r7, #28
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ac:	4770      	bx	lr
 800e6ae:	bf00      	nop
 800e6b0:	03ff63ff 	.word	0x03ff63ff

0800e6b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	b083      	sub	sp, #12
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e6c4:	b2db      	uxtb	r3, r3
 800e6c6:	2b20      	cmp	r3, #32
 800e6c8:	d138      	bne.n	800e73c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e6d0:	2b01      	cmp	r3, #1
 800e6d2:	d101      	bne.n	800e6d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800e6d4:	2302      	movs	r3, #2
 800e6d6:	e032      	b.n	800e73e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2201      	movs	r2, #1
 800e6dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2224      	movs	r2, #36	; 0x24
 800e6e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	681a      	ldr	r2, [r3, #0]
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	f022 0201 	bic.w	r2, r2, #1
 800e6f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	681a      	ldr	r2, [r3, #0]
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e706:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	6819      	ldr	r1, [r3, #0]
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	683a      	ldr	r2, [r7, #0]
 800e714:	430a      	orrs	r2, r1
 800e716:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	681a      	ldr	r2, [r3, #0]
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	f042 0201 	orr.w	r2, r2, #1
 800e726:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2220      	movs	r2, #32
 800e72c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2200      	movs	r2, #0
 800e734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e738:	2300      	movs	r3, #0
 800e73a:	e000      	b.n	800e73e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e73c:	2302      	movs	r3, #2
  }
}
 800e73e:	4618      	mov	r0, r3
 800e740:	370c      	adds	r7, #12
 800e742:	46bd      	mov	sp, r7
 800e744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e748:	4770      	bx	lr

0800e74a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800e74a:	b480      	push	{r7}
 800e74c:	b085      	sub	sp, #20
 800e74e:	af00      	add	r7, sp, #0
 800e750:	6078      	str	r0, [r7, #4]
 800e752:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e75a:	b2db      	uxtb	r3, r3
 800e75c:	2b20      	cmp	r3, #32
 800e75e:	d139      	bne.n	800e7d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e766:	2b01      	cmp	r3, #1
 800e768:	d101      	bne.n	800e76e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800e76a:	2302      	movs	r3, #2
 800e76c:	e033      	b.n	800e7d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2201      	movs	r2, #1
 800e772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2224      	movs	r2, #36	; 0x24
 800e77a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	681a      	ldr	r2, [r3, #0]
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	f022 0201 	bic.w	r2, r2, #1
 800e78c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800e79c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	021b      	lsls	r3, r3, #8
 800e7a2:	68fa      	ldr	r2, [r7, #12]
 800e7a4:	4313      	orrs	r3, r2
 800e7a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	68fa      	ldr	r2, [r7, #12]
 800e7ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	681a      	ldr	r2, [r3, #0]
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	f042 0201 	orr.w	r2, r2, #1
 800e7be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2220      	movs	r2, #32
 800e7c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	e000      	b.n	800e7d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800e7d4:	2302      	movs	r3, #2
  }
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3714      	adds	r7, #20
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e0:	4770      	bx	lr
	...

0800e7e4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b084      	sub	sp, #16
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d101      	bne.n	800e7f6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	e0bf      	b.n	800e976 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800e7fc:	b2db      	uxtb	r3, r3
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d106      	bne.n	800e810 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2200      	movs	r2, #0
 800e806:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f7f2 fa9c 	bl	8000d48 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2202      	movs	r2, #2
 800e814:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	699a      	ldr	r2, [r3, #24]
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800e826:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	6999      	ldr	r1, [r3, #24]
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	685a      	ldr	r2, [r3, #4]
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	689b      	ldr	r3, [r3, #8]
 800e836:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e83c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	691b      	ldr	r3, [r3, #16]
 800e842:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	430a      	orrs	r2, r1
 800e84a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	6899      	ldr	r1, [r3, #8]
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681a      	ldr	r2, [r3, #0]
 800e856:	4b4a      	ldr	r3, [pc, #296]	; (800e980 <HAL_LTDC_Init+0x19c>)
 800e858:	400b      	ands	r3, r1
 800e85a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	695b      	ldr	r3, [r3, #20]
 800e860:	041b      	lsls	r3, r3, #16
 800e862:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	6899      	ldr	r1, [r3, #8]
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	699a      	ldr	r2, [r3, #24]
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	431a      	orrs	r2, r3
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	430a      	orrs	r2, r1
 800e878:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	68d9      	ldr	r1, [r3, #12]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681a      	ldr	r2, [r3, #0]
 800e884:	4b3e      	ldr	r3, [pc, #248]	; (800e980 <HAL_LTDC_Init+0x19c>)
 800e886:	400b      	ands	r3, r1
 800e888:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	69db      	ldr	r3, [r3, #28]
 800e88e:	041b      	lsls	r3, r3, #16
 800e890:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	68d9      	ldr	r1, [r3, #12]
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6a1a      	ldr	r2, [r3, #32]
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	431a      	orrs	r2, r3
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	430a      	orrs	r2, r1
 800e8a6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	6919      	ldr	r1, [r3, #16]
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681a      	ldr	r2, [r3, #0]
 800e8b2:	4b33      	ldr	r3, [pc, #204]	; (800e980 <HAL_LTDC_Init+0x19c>)
 800e8b4:	400b      	ands	r3, r1
 800e8b6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8bc:	041b      	lsls	r3, r3, #16
 800e8be:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	6919      	ldr	r1, [r3, #16]
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	431a      	orrs	r2, r3
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	430a      	orrs	r2, r1
 800e8d4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	6959      	ldr	r1, [r3, #20]
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681a      	ldr	r2, [r3, #0]
 800e8e0:	4b27      	ldr	r3, [pc, #156]	; (800e980 <HAL_LTDC_Init+0x19c>)
 800e8e2:	400b      	ands	r3, r1
 800e8e4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8ea:	041b      	lsls	r3, r3, #16
 800e8ec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	6959      	ldr	r1, [r3, #20]
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	431a      	orrs	r2, r3
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	430a      	orrs	r2, r1
 800e902:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e90a:	021b      	lsls	r3, r3, #8
 800e90c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e914:	041b      	lsls	r3, r3, #16
 800e916:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800e926:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e92e:	68ba      	ldr	r2, [r7, #8]
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	4313      	orrs	r3, r2
 800e934:	687a      	ldr	r2, [r7, #4]
 800e936:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800e93a:	431a      	orrs	r2, r3
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	430a      	orrs	r2, r1
 800e942:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	f042 0206 	orr.w	r2, r2, #6
 800e952:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	699a      	ldr	r2, [r3, #24]
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	f042 0201 	orr.w	r2, r2, #1
 800e962:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2200      	movs	r2, #0
 800e968:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2201      	movs	r2, #1
 800e970:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800e974:	2300      	movs	r3, #0
}
 800e976:	4618      	mov	r0, r3
 800e978:	3710      	adds	r7, #16
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}
 800e97e:	bf00      	nop
 800e980:	f000f800 	.word	0xf000f800

0800e984 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b084      	sub	sp, #16
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e992:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e99a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	f003 0304 	and.w	r3, r3, #4
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d023      	beq.n	800e9ee <HAL_LTDC_IRQHandler+0x6a>
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	f003 0304 	and.w	r3, r3, #4
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d01e      	beq.n	800e9ee <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	f022 0204 	bic.w	r2, r2, #4
 800e9be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	2204      	movs	r2, #4
 800e9c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e9ce:	f043 0201 	orr.w	r2, r3, #1
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2204      	movs	r2, #4
 800e9dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800e9e8:	6878      	ldr	r0, [r7, #4]
 800e9ea:	f000 f86f 	bl	800eacc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	f003 0302 	and.w	r3, r3, #2
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d023      	beq.n	800ea40 <HAL_LTDC_IRQHandler+0xbc>
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	f003 0302 	and.w	r3, r3, #2
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d01e      	beq.n	800ea40 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	f022 0202 	bic.w	r2, r2, #2
 800ea10:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	2202      	movs	r2, #2
 800ea18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ea20:	f043 0202 	orr.w	r2, r3, #2
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2204      	movs	r2, #4
 800ea2e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	2200      	movs	r2, #0
 800ea36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	f000 f846 	bl	800eacc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	f003 0301 	and.w	r3, r3, #1
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d01b      	beq.n	800ea82 <HAL_LTDC_IRQHandler+0xfe>
 800ea4a:	68bb      	ldr	r3, [r7, #8]
 800ea4c:	f003 0301 	and.w	r3, r3, #1
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d016      	beq.n	800ea82 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	f022 0201 	bic.w	r2, r2, #1
 800ea62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	2201      	movs	r2, #1
 800ea6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2201      	movs	r2, #1
 800ea70:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2200      	movs	r2, #0
 800ea78:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f7f5 f821 	bl	8003ac4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	f003 0308 	and.w	r3, r3, #8
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d01b      	beq.n	800eac4 <HAL_LTDC_IRQHandler+0x140>
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	f003 0308 	and.w	r3, r3, #8
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d016      	beq.n	800eac4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	f022 0208 	bic.w	r2, r2, #8
 800eaa4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	2208      	movs	r2, #8
 800eaac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2201      	movs	r2, #1
 800eab2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	2200      	movs	r2, #0
 800eaba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800eabe:	6878      	ldr	r0, [r7, #4]
 800eac0:	f000 f80e 	bl	800eae0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800eac4:	bf00      	nop
 800eac6:	3710      	adds	r7, #16
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}

0800eacc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800eacc:	b480      	push	{r7}
 800eace:	b083      	sub	sp, #12
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800ead4:	bf00      	nop
 800ead6:	370c      	adds	r7, #12
 800ead8:	46bd      	mov	sp, r7
 800eada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eade:	4770      	bx	lr

0800eae0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800eae0:	b480      	push	{r7}
 800eae2:	b083      	sub	sp, #12
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800eae8:	bf00      	nop
 800eaea:	370c      	adds	r7, #12
 800eaec:	46bd      	mov	sp, r7
 800eaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf2:	4770      	bx	lr

0800eaf4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800eaf4:	b5b0      	push	{r4, r5, r7, lr}
 800eaf6:	b084      	sub	sp, #16
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	60f8      	str	r0, [r7, #12]
 800eafc:	60b9      	str	r1, [r7, #8]
 800eafe:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800eb06:	2b01      	cmp	r3, #1
 800eb08:	d101      	bne.n	800eb0e <HAL_LTDC_ConfigLayer+0x1a>
 800eb0a:	2302      	movs	r3, #2
 800eb0c:	e02c      	b.n	800eb68 <HAL_LTDC_ConfigLayer+0x74>
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2201      	movs	r2, #1
 800eb12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	2202      	movs	r2, #2
 800eb1a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800eb1e:	68fa      	ldr	r2, [r7, #12]
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2134      	movs	r1, #52	; 0x34
 800eb24:	fb01 f303 	mul.w	r3, r1, r3
 800eb28:	4413      	add	r3, r2
 800eb2a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	4614      	mov	r4, r2
 800eb32:	461d      	mov	r5, r3
 800eb34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb40:	682b      	ldr	r3, [r5, #0]
 800eb42:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800eb44:	687a      	ldr	r2, [r7, #4]
 800eb46:	68b9      	ldr	r1, [r7, #8]
 800eb48:	68f8      	ldr	r0, [r7, #12]
 800eb4a:	f000 f849 	bl	800ebe0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	2201      	movs	r2, #1
 800eb54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	2201      	movs	r2, #1
 800eb5a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	2200      	movs	r2, #0
 800eb62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800eb66:	2300      	movs	r3, #0
}
 800eb68:	4618      	mov	r0, r3
 800eb6a:	3710      	adds	r7, #16
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bdb0      	pop	{r4, r5, r7, pc}

0800eb70 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800eb70:	b480      	push	{r7}
 800eb72:	b083      	sub	sp, #12
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
 800eb78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800eb80:	2b01      	cmp	r3, #1
 800eb82:	d101      	bne.n	800eb88 <HAL_LTDC_ProgramLineEvent+0x18>
 800eb84:	2302      	movs	r3, #2
 800eb86:	e023      	b.n	800ebd0 <HAL_LTDC_ProgramLineEvent+0x60>
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2201      	movs	r2, #1
 800eb8c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2202      	movs	r2, #2
 800eb94:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	f022 0201 	bic.w	r2, r2, #1
 800eba6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800eba8:	4a0c      	ldr	r2, [pc, #48]	; (800ebdc <HAL_LTDC_ProgramLineEvent+0x6c>)
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	f042 0201 	orr.w	r2, r2, #1
 800ebbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2201      	movs	r2, #1
 800ebc2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2200      	movs	r2, #0
 800ebca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800ebce:	2300      	movs	r3, #0
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	370c      	adds	r7, #12
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebda:	4770      	bx	lr
 800ebdc:	50001000 	.word	0x50001000

0800ebe0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800ebe0:	b480      	push	{r7}
 800ebe2:	b089      	sub	sp, #36	; 0x24
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	60f8      	str	r0, [r7, #12]
 800ebe8:	60b9      	str	r1, [r7, #8]
 800ebea:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ebec:	68bb      	ldr	r3, [r7, #8]
 800ebee:	685a      	ldr	r2, [r3, #4]
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	68db      	ldr	r3, [r3, #12]
 800ebf6:	0c1b      	lsrs	r3, r3, #16
 800ebf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ebfc:	4413      	add	r3, r2
 800ebfe:	041b      	lsls	r3, r3, #16
 800ec00:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	461a      	mov	r2, r3
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	01db      	lsls	r3, r3, #7
 800ec0c:	4413      	add	r3, r2
 800ec0e:	3384      	adds	r3, #132	; 0x84
 800ec10:	685b      	ldr	r3, [r3, #4]
 800ec12:	68fa      	ldr	r2, [r7, #12]
 800ec14:	6812      	ldr	r2, [r2, #0]
 800ec16:	4611      	mov	r1, r2
 800ec18:	687a      	ldr	r2, [r7, #4]
 800ec1a:	01d2      	lsls	r2, r2, #7
 800ec1c:	440a      	add	r2, r1
 800ec1e:	3284      	adds	r2, #132	; 0x84
 800ec20:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800ec24:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	68db      	ldr	r3, [r3, #12]
 800ec30:	0c1b      	lsrs	r3, r3, #16
 800ec32:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ec36:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ec38:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	4619      	mov	r1, r3
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	01db      	lsls	r3, r3, #7
 800ec44:	440b      	add	r3, r1
 800ec46:	3384      	adds	r3, #132	; 0x84
 800ec48:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ec4a:	69fb      	ldr	r3, [r7, #28]
 800ec4c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ec4e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	68da      	ldr	r2, [r3, #12]
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	68db      	ldr	r3, [r3, #12]
 800ec5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ec5e:	4413      	add	r3, r2
 800ec60:	041b      	lsls	r3, r3, #16
 800ec62:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	461a      	mov	r2, r3
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	01db      	lsls	r3, r3, #7
 800ec6e:	4413      	add	r3, r2
 800ec70:	3384      	adds	r3, #132	; 0x84
 800ec72:	689b      	ldr	r3, [r3, #8]
 800ec74:	68fa      	ldr	r2, [r7, #12]
 800ec76:	6812      	ldr	r2, [r2, #0]
 800ec78:	4611      	mov	r1, r2
 800ec7a:	687a      	ldr	r2, [r7, #4]
 800ec7c:	01d2      	lsls	r2, r2, #7
 800ec7e:	440a      	add	r2, r1
 800ec80:	3284      	adds	r2, #132	; 0x84
 800ec82:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800ec86:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ec88:	68bb      	ldr	r3, [r7, #8]
 800ec8a:	689a      	ldr	r2, [r3, #8]
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	68db      	ldr	r3, [r3, #12]
 800ec92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ec96:	4413      	add	r3, r2
 800ec98:	1c5a      	adds	r2, r3, #1
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	4619      	mov	r1, r3
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	01db      	lsls	r3, r3, #7
 800eca4:	440b      	add	r3, r1
 800eca6:	3384      	adds	r3, #132	; 0x84
 800eca8:	4619      	mov	r1, r3
 800ecaa:	69fb      	ldr	r3, [r7, #28]
 800ecac:	4313      	orrs	r3, r2
 800ecae:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	461a      	mov	r2, r3
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	01db      	lsls	r3, r3, #7
 800ecba:	4413      	add	r3, r2
 800ecbc:	3384      	adds	r3, #132	; 0x84
 800ecbe:	691b      	ldr	r3, [r3, #16]
 800ecc0:	68fa      	ldr	r2, [r7, #12]
 800ecc2:	6812      	ldr	r2, [r2, #0]
 800ecc4:	4611      	mov	r1, r2
 800ecc6:	687a      	ldr	r2, [r7, #4]
 800ecc8:	01d2      	lsls	r2, r2, #7
 800ecca:	440a      	add	r2, r1
 800eccc:	3284      	adds	r2, #132	; 0x84
 800ecce:	f023 0307 	bic.w	r3, r3, #7
 800ecd2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	461a      	mov	r2, r3
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	01db      	lsls	r3, r3, #7
 800ecde:	4413      	add	r3, r2
 800ece0:	3384      	adds	r3, #132	; 0x84
 800ece2:	461a      	mov	r2, r3
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	691b      	ldr	r3, [r3, #16]
 800ece8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ecf0:	021b      	lsls	r3, r3, #8
 800ecf2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800ecf4:	68bb      	ldr	r3, [r7, #8]
 800ecf6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ecfa:	041b      	lsls	r3, r3, #16
 800ecfc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	699b      	ldr	r3, [r3, #24]
 800ed02:	061b      	lsls	r3, r3, #24
 800ed04:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	461a      	mov	r2, r3
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	01db      	lsls	r3, r3, #7
 800ed10:	4413      	add	r3, r2
 800ed12:	3384      	adds	r3, #132	; 0x84
 800ed14:	699b      	ldr	r3, [r3, #24]
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	461a      	mov	r2, r3
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	01db      	lsls	r3, r3, #7
 800ed20:	4413      	add	r3, r2
 800ed22:	3384      	adds	r3, #132	; 0x84
 800ed24:	461a      	mov	r2, r3
 800ed26:	2300      	movs	r3, #0
 800ed28:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ed30:	461a      	mov	r2, r3
 800ed32:	69fb      	ldr	r3, [r7, #28]
 800ed34:	431a      	orrs	r2, r3
 800ed36:	69bb      	ldr	r3, [r7, #24]
 800ed38:	431a      	orrs	r2, r3
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	4619      	mov	r1, r3
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	01db      	lsls	r3, r3, #7
 800ed44:	440b      	add	r3, r1
 800ed46:	3384      	adds	r3, #132	; 0x84
 800ed48:	4619      	mov	r1, r3
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	4313      	orrs	r3, r2
 800ed4e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	461a      	mov	r2, r3
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	01db      	lsls	r3, r3, #7
 800ed5a:	4413      	add	r3, r2
 800ed5c:	3384      	adds	r3, #132	; 0x84
 800ed5e:	695b      	ldr	r3, [r3, #20]
 800ed60:	68fa      	ldr	r2, [r7, #12]
 800ed62:	6812      	ldr	r2, [r2, #0]
 800ed64:	4611      	mov	r1, r2
 800ed66:	687a      	ldr	r2, [r7, #4]
 800ed68:	01d2      	lsls	r2, r2, #7
 800ed6a:	440a      	add	r2, r1
 800ed6c:	3284      	adds	r2, #132	; 0x84
 800ed6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ed72:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	461a      	mov	r2, r3
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	01db      	lsls	r3, r3, #7
 800ed7e:	4413      	add	r3, r2
 800ed80:	3384      	adds	r3, #132	; 0x84
 800ed82:	461a      	mov	r2, r3
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	695b      	ldr	r3, [r3, #20]
 800ed88:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	461a      	mov	r2, r3
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	01db      	lsls	r3, r3, #7
 800ed94:	4413      	add	r3, r2
 800ed96:	3384      	adds	r3, #132	; 0x84
 800ed98:	69da      	ldr	r2, [r3, #28]
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	4619      	mov	r1, r3
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	01db      	lsls	r3, r3, #7
 800eda4:	440b      	add	r3, r1
 800eda6:	3384      	adds	r3, #132	; 0x84
 800eda8:	4619      	mov	r1, r3
 800edaa:	4b58      	ldr	r3, [pc, #352]	; (800ef0c <LTDC_SetConfig+0x32c>)
 800edac:	4013      	ands	r3, r2
 800edae:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	69da      	ldr	r2, [r3, #28]
 800edb4:	68bb      	ldr	r3, [r7, #8]
 800edb6:	6a1b      	ldr	r3, [r3, #32]
 800edb8:	68f9      	ldr	r1, [r7, #12]
 800edba:	6809      	ldr	r1, [r1, #0]
 800edbc:	4608      	mov	r0, r1
 800edbe:	6879      	ldr	r1, [r7, #4]
 800edc0:	01c9      	lsls	r1, r1, #7
 800edc2:	4401      	add	r1, r0
 800edc4:	3184      	adds	r1, #132	; 0x84
 800edc6:	4313      	orrs	r3, r2
 800edc8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	461a      	mov	r2, r3
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	01db      	lsls	r3, r3, #7
 800edd4:	4413      	add	r3, r2
 800edd6:	3384      	adds	r3, #132	; 0x84
 800edd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	461a      	mov	r2, r3
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	01db      	lsls	r3, r3, #7
 800ede4:	4413      	add	r3, r2
 800ede6:	3384      	adds	r3, #132	; 0x84
 800ede8:	461a      	mov	r2, r3
 800edea:	2300      	movs	r3, #0
 800edec:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	461a      	mov	r2, r3
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	01db      	lsls	r3, r3, #7
 800edf8:	4413      	add	r3, r2
 800edfa:	3384      	adds	r3, #132	; 0x84
 800edfc:	461a      	mov	r2, r3
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee02:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	691b      	ldr	r3, [r3, #16]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d102      	bne.n	800ee12 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800ee0c:	2304      	movs	r3, #4
 800ee0e:	61fb      	str	r3, [r7, #28]
 800ee10:	e01b      	b.n	800ee4a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	691b      	ldr	r3, [r3, #16]
 800ee16:	2b01      	cmp	r3, #1
 800ee18:	d102      	bne.n	800ee20 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800ee1a:	2303      	movs	r3, #3
 800ee1c:	61fb      	str	r3, [r7, #28]
 800ee1e:	e014      	b.n	800ee4a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	691b      	ldr	r3, [r3, #16]
 800ee24:	2b04      	cmp	r3, #4
 800ee26:	d00b      	beq.n	800ee40 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800ee28:	68bb      	ldr	r3, [r7, #8]
 800ee2a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800ee2c:	2b02      	cmp	r3, #2
 800ee2e:	d007      	beq.n	800ee40 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800ee34:	2b03      	cmp	r3, #3
 800ee36:	d003      	beq.n	800ee40 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800ee38:	68bb      	ldr	r3, [r7, #8]
 800ee3a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800ee3c:	2b07      	cmp	r3, #7
 800ee3e:	d102      	bne.n	800ee46 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800ee40:	2302      	movs	r3, #2
 800ee42:	61fb      	str	r3, [r7, #28]
 800ee44:	e001      	b.n	800ee4a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800ee46:	2301      	movs	r3, #1
 800ee48:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	461a      	mov	r2, r3
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	01db      	lsls	r3, r3, #7
 800ee54:	4413      	add	r3, r2
 800ee56:	3384      	adds	r3, #132	; 0x84
 800ee58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee5a:	68fa      	ldr	r2, [r7, #12]
 800ee5c:	6812      	ldr	r2, [r2, #0]
 800ee5e:	4611      	mov	r1, r2
 800ee60:	687a      	ldr	r2, [r7, #4]
 800ee62:	01d2      	lsls	r2, r2, #7
 800ee64:	440a      	add	r2, r1
 800ee66:	3284      	adds	r2, #132	; 0x84
 800ee68:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800ee6c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800ee6e:	68bb      	ldr	r3, [r7, #8]
 800ee70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee72:	69fa      	ldr	r2, [r7, #28]
 800ee74:	fb02 f303 	mul.w	r3, r2, r3
 800ee78:	041a      	lsls	r2, r3, #16
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	6859      	ldr	r1, [r3, #4]
 800ee7e:	68bb      	ldr	r3, [r7, #8]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	1acb      	subs	r3, r1, r3
 800ee84:	69f9      	ldr	r1, [r7, #28]
 800ee86:	fb01 f303 	mul.w	r3, r1, r3
 800ee8a:	3307      	adds	r3, #7
 800ee8c:	68f9      	ldr	r1, [r7, #12]
 800ee8e:	6809      	ldr	r1, [r1, #0]
 800ee90:	4608      	mov	r0, r1
 800ee92:	6879      	ldr	r1, [r7, #4]
 800ee94:	01c9      	lsls	r1, r1, #7
 800ee96:	4401      	add	r1, r0
 800ee98:	3184      	adds	r1, #132	; 0x84
 800ee9a:	4313      	orrs	r3, r2
 800ee9c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	461a      	mov	r2, r3
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	01db      	lsls	r3, r3, #7
 800eea8:	4413      	add	r3, r2
 800eeaa:	3384      	adds	r3, #132	; 0x84
 800eeac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	4619      	mov	r1, r3
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	01db      	lsls	r3, r3, #7
 800eeb8:	440b      	add	r3, r1
 800eeba:	3384      	adds	r3, #132	; 0x84
 800eebc:	4619      	mov	r1, r3
 800eebe:	4b14      	ldr	r3, [pc, #80]	; (800ef10 <LTDC_SetConfig+0x330>)
 800eec0:	4013      	ands	r3, r2
 800eec2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	461a      	mov	r2, r3
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	01db      	lsls	r3, r3, #7
 800eece:	4413      	add	r3, r2
 800eed0:	3384      	adds	r3, #132	; 0x84
 800eed2:	461a      	mov	r2, r3
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eed8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	461a      	mov	r2, r3
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	01db      	lsls	r3, r3, #7
 800eee4:	4413      	add	r3, r2
 800eee6:	3384      	adds	r3, #132	; 0x84
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	68fa      	ldr	r2, [r7, #12]
 800eeec:	6812      	ldr	r2, [r2, #0]
 800eeee:	4611      	mov	r1, r2
 800eef0:	687a      	ldr	r2, [r7, #4]
 800eef2:	01d2      	lsls	r2, r2, #7
 800eef4:	440a      	add	r2, r1
 800eef6:	3284      	adds	r2, #132	; 0x84
 800eef8:	f043 0301 	orr.w	r3, r3, #1
 800eefc:	6013      	str	r3, [r2, #0]
}
 800eefe:	bf00      	nop
 800ef00:	3724      	adds	r7, #36	; 0x24
 800ef02:	46bd      	mov	sp, r7
 800ef04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef08:	4770      	bx	lr
 800ef0a:	bf00      	nop
 800ef0c:	fffff8f8 	.word	0xfffff8f8
 800ef10:	fffff800 	.word	0xfffff800

0800ef14 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b084      	sub	sp, #16
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ef1c:	f7fd ff16 	bl	800cd4c <HAL_GetTick>
 800ef20:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d101      	bne.n	800ef2c <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800ef28:	2301      	movs	r3, #1
 800ef2a:	e03b      	b.n	800efa4 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2200      	movs	r2, #0
 800ef30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2202      	movs	r2, #2
 800ef38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	68da      	ldr	r2, [r3, #12]
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	f022 0201 	bic.w	r2, r2, #1
 800ef4a:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800ef4c:	e00f      	b.n	800ef6e <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800ef4e:	f7fd fefd 	bl	800cd4c <HAL_GetTick>
 800ef52:	4602      	mov	r2, r0
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	1ad3      	subs	r3, r2, r3
 800ef58:	2b05      	cmp	r3, #5
 800ef5a:	d908      	bls.n	800ef6e <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2240      	movs	r2, #64	; 0x40
 800ef60:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2203      	movs	r2, #3
 800ef66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	e01a      	b.n	800efa4 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	68db      	ldr	r3, [r3, #12]
 800ef74:	f003 0301 	and.w	r3, r3, #1
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d1e8      	bne.n	800ef4e <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800ef7c:	6878      	ldr	r0, [r7, #4]
 800ef7e:	f000 f894 	bl	800f0aa <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	2200      	movs	r2, #0
 800ef86:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2200      	movs	r2, #0
 800ef92:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2200      	movs	r2, #0
 800ef98:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	2201      	movs	r2, #1
 800ef9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800efa2:	2300      	movs	r3, #0
}
 800efa4:	4618      	mov	r0, r3
 800efa6:	3710      	adds	r7, #16
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bd80      	pop	{r7, pc}

0800efac <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 800efac:	b480      	push	{r7}
 800efae:	b083      	sub	sp, #12
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d101      	bne.n	800efbe <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800efba:	2301      	movs	r3, #1
 800efbc:	e048      	b.n	800f050 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	68da      	ldr	r2, [r3, #12]
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	f022 0201 	bic.w	r2, r2, #1
 800efcc:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	2200      	movs	r2, #0
 800efd4:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	2200      	movs	r2, #0
 800efdc:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	2200      	movs	r2, #0
 800efe4:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	2200      	movs	r2, #0
 800efec:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	2200      	movs	r2, #0
 800eff4:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	2200      	movs	r2, #0
 800effc:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	2200      	movs	r2, #0
 800f004:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	2200      	movs	r2, #0
 800f00c:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	2200      	movs	r2, #0
 800f014:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	2200      	movs	r2, #0
 800f01c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	221f      	movs	r2, #31
 800f024:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2200      	movs	r2, #0
 800f02a:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	2200      	movs	r2, #0
 800f030:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2200      	movs	r2, #0
 800f036:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2200      	movs	r2, #0
 800f03c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2200      	movs	r2, #0
 800f042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	2200      	movs	r2, #0
 800f04a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f04e:	2300      	movs	r3, #0
}
 800f050:	4618      	mov	r0, r3
 800f052:	370c      	adds	r7, #12
 800f054:	46bd      	mov	sp, r7
 800f056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05a:	4770      	bx	lr

0800f05c <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800f05c:	b480      	push	{r7}
 800f05e:	b083      	sub	sp, #12
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d101      	bne.n	800f06e <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800f06a:	2301      	movs	r3, #1
 800f06c:	e017      	b.n	800f09e <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f074:	b2db      	uxtb	r3, r3
 800f076:	2b02      	cmp	r3, #2
 800f078:	d004      	beq.n	800f084 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2280      	movs	r2, #128	; 0x80
 800f07e:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 800f080:	2301      	movs	r3, #1
 800f082:	e00c      	b.n	800f09e <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2204      	movs	r2, #4
 800f088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	68da      	ldr	r2, [r3, #12]
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	f022 0201 	bic.w	r2, r2, #1
 800f09a:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800f09c:	2300      	movs	r3, #0
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	370c      	adds	r7, #12
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a8:	4770      	bx	lr

0800f0aa <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800f0aa:	b480      	push	{r7}
 800f0ac:	b085      	sub	sp, #20
 800f0ae:	af00      	add	r7, sp, #0
 800f0b0:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	68d9      	ldr	r1, [r3, #12]
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	691a      	ldr	r2, [r3, #16]
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	430a      	orrs	r2, r1
 800f0c0:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	695a      	ldr	r2, [r3, #20]
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	699b      	ldr	r3, [r3, #24]
 800f0ca:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800f0d0:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	6a1b      	ldr	r3, [r3, #32]
 800f0d6:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800f0dc:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0e2:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800f0e8:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0ee:	3b01      	subs	r3, #1
 800f0f0:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800f0f2:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800f0fe:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800f100:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	685b      	ldr	r3, [r3, #4]
 800f106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f10a:	d107      	bne.n	800f11c <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	691a      	ldr	r2, [r3, #16]
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800f11a:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	2200      	movs	r2, #0
 800f122:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f128:	2b00      	cmp	r3, #0
 800f12a:	da11      	bge.n	800f150 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	695a      	ldr	r2, [r3, #20]
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800f13a:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f140:	425b      	negs	r3, r3
 800f142:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	68fa      	ldr	r2, [r7, #12]
 800f14a:	b292      	uxth	r2, r2
 800f14c:	621a      	str	r2, [r3, #32]
 800f14e:	e006      	b.n	800f15e <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f154:	461a      	mov	r2, r3
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	b292      	uxth	r2, r2
 800f15c:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f162:	2b00      	cmp	r3, #0
 800f164:	da15      	bge.n	800f192 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	695a      	ldr	r2, [r3, #20]
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800f174:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f17a:	425b      	negs	r3, r3
 800f17c:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	6a19      	ldr	r1, [r3, #32]
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	041a      	lsls	r2, r3, #16
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	430a      	orrs	r2, r1
 800f18e:	621a      	str	r2, [r3, #32]
 800f190:	e009      	b.n	800f1a6 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	6a19      	ldr	r1, [r3, #32]
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f19c:	041a      	lsls	r2, r3, #16
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	430a      	orrs	r2, r1
 800f1a4:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	685b      	ldr	r3, [r3, #4]
 800f1aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f1ae:	d006      	beq.n	800f1be <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	685a      	ldr	r2, [r3, #4]
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	b2d2      	uxtb	r2, r2
 800f1ba:	629a      	str	r2, [r3, #40]	; 0x28
 800f1bc:	e003      	b.n	800f1c6 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f1ce:	bf00      	nop
 800f1d0:	3714      	adds	r7, #20
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d8:	4770      	bx	lr
	...

0800f1dc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b084      	sub	sp, #16
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800f1e4:	4b29      	ldr	r3, [pc, #164]	; (800f28c <HAL_PWREx_ConfigSupply+0xb0>)
 800f1e6:	68db      	ldr	r3, [r3, #12]
 800f1e8:	f003 0307 	and.w	r3, r3, #7
 800f1ec:	2b06      	cmp	r3, #6
 800f1ee:	d00a      	beq.n	800f206 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800f1f0:	4b26      	ldr	r3, [pc, #152]	; (800f28c <HAL_PWREx_ConfigSupply+0xb0>)
 800f1f2:	68db      	ldr	r3, [r3, #12]
 800f1f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f1f8:	687a      	ldr	r2, [r7, #4]
 800f1fa:	429a      	cmp	r2, r3
 800f1fc:	d001      	beq.n	800f202 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800f1fe:	2301      	movs	r3, #1
 800f200:	e040      	b.n	800f284 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800f202:	2300      	movs	r3, #0
 800f204:	e03e      	b.n	800f284 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800f206:	4b21      	ldr	r3, [pc, #132]	; (800f28c <HAL_PWREx_ConfigSupply+0xb0>)
 800f208:	68db      	ldr	r3, [r3, #12]
 800f20a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800f20e:	491f      	ldr	r1, [pc, #124]	; (800f28c <HAL_PWREx_ConfigSupply+0xb0>)
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	4313      	orrs	r3, r2
 800f214:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800f216:	f7fd fd99 	bl	800cd4c <HAL_GetTick>
 800f21a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800f21c:	e009      	b.n	800f232 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800f21e:	f7fd fd95 	bl	800cd4c <HAL_GetTick>
 800f222:	4602      	mov	r2, r0
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	1ad3      	subs	r3, r2, r3
 800f228:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f22c:	d901      	bls.n	800f232 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800f22e:	2301      	movs	r3, #1
 800f230:	e028      	b.n	800f284 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800f232:	4b16      	ldr	r3, [pc, #88]	; (800f28c <HAL_PWREx_ConfigSupply+0xb0>)
 800f234:	685b      	ldr	r3, [r3, #4]
 800f236:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f23a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f23e:	d1ee      	bne.n	800f21e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2b1e      	cmp	r3, #30
 800f244:	d008      	beq.n	800f258 <HAL_PWREx_ConfigSupply+0x7c>
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	2b2e      	cmp	r3, #46	; 0x2e
 800f24a:	d005      	beq.n	800f258 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2b1d      	cmp	r3, #29
 800f250:	d002      	beq.n	800f258 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2b2d      	cmp	r3, #45	; 0x2d
 800f256:	d114      	bne.n	800f282 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800f258:	f7fd fd78 	bl	800cd4c <HAL_GetTick>
 800f25c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800f25e:	e009      	b.n	800f274 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800f260:	f7fd fd74 	bl	800cd4c <HAL_GetTick>
 800f264:	4602      	mov	r2, r0
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	1ad3      	subs	r3, r2, r3
 800f26a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f26e:	d901      	bls.n	800f274 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800f270:	2301      	movs	r3, #1
 800f272:	e007      	b.n	800f284 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800f274:	4b05      	ldr	r3, [pc, #20]	; (800f28c <HAL_PWREx_ConfigSupply+0xb0>)
 800f276:	68db      	ldr	r3, [r3, #12]
 800f278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f27c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f280:	d1ee      	bne.n	800f260 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800f282:	2300      	movs	r3, #0
}
 800f284:	4618      	mov	r0, r3
 800f286:	3710      	adds	r7, #16
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}
 800f28c:	58024800 	.word	0x58024800

0800f290 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b086      	sub	sp, #24
 800f294:	af02      	add	r7, sp, #8
 800f296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f298:	f7fd fd58 	bl	800cd4c <HAL_GetTick>
 800f29c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d101      	bne.n	800f2a8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800f2a4:	2301      	movs	r3, #1
 800f2a6:	e05f      	b.n	800f368 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f2ae:	b2db      	uxtb	r3, r3
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d107      	bne.n	800f2c4 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f7f1 fe39 	bl	8000f2c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800f2ba:	f241 3188 	movw	r1, #5000	; 0x1388
 800f2be:	6878      	ldr	r0, [r7, #4]
 800f2c0:	f000 fcca 	bl	800fc58 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	689b      	ldr	r3, [r3, #8]
 800f2d2:	3b01      	subs	r3, #1
 800f2d4:	021a      	lsls	r2, r3, #8
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	430a      	orrs	r2, r1
 800f2dc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f2e2:	9300      	str	r3, [sp, #0]
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	2120      	movs	r1, #32
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f000 fcf5 	bl	800fcda <QSPI_WaitFlagStateUntilTimeout>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800f2f4:	7afb      	ldrb	r3, [r7, #11]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d135      	bne.n	800f366 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	681a      	ldr	r2, [r3, #0]
 800f300:	4b1b      	ldr	r3, [pc, #108]	; (800f370 <HAL_QSPI_Init+0xe0>)
 800f302:	4013      	ands	r3, r2
 800f304:	687a      	ldr	r2, [r7, #4]
 800f306:	6852      	ldr	r2, [r2, #4]
 800f308:	0611      	lsls	r1, r2, #24
 800f30a:	687a      	ldr	r2, [r7, #4]
 800f30c:	68d2      	ldr	r2, [r2, #12]
 800f30e:	4311      	orrs	r1, r2
 800f310:	687a      	ldr	r2, [r7, #4]
 800f312:	69d2      	ldr	r2, [r2, #28]
 800f314:	4311      	orrs	r1, r2
 800f316:	687a      	ldr	r2, [r7, #4]
 800f318:	6a12      	ldr	r2, [r2, #32]
 800f31a:	4311      	orrs	r1, r2
 800f31c:	687a      	ldr	r2, [r7, #4]
 800f31e:	6812      	ldr	r2, [r2, #0]
 800f320:	430b      	orrs	r3, r1
 800f322:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	685a      	ldr	r2, [r3, #4]
 800f32a:	4b12      	ldr	r3, [pc, #72]	; (800f374 <HAL_QSPI_Init+0xe4>)
 800f32c:	4013      	ands	r3, r2
 800f32e:	687a      	ldr	r2, [r7, #4]
 800f330:	6912      	ldr	r2, [r2, #16]
 800f332:	0411      	lsls	r1, r2, #16
 800f334:	687a      	ldr	r2, [r7, #4]
 800f336:	6952      	ldr	r2, [r2, #20]
 800f338:	4311      	orrs	r1, r2
 800f33a:	687a      	ldr	r2, [r7, #4]
 800f33c:	6992      	ldr	r2, [r2, #24]
 800f33e:	4311      	orrs	r1, r2
 800f340:	687a      	ldr	r2, [r7, #4]
 800f342:	6812      	ldr	r2, [r2, #0]
 800f344:	430b      	orrs	r3, r1
 800f346:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	681a      	ldr	r2, [r3, #0]
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	f042 0201 	orr.w	r2, r2, #1
 800f356:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2200      	movs	r2, #0
 800f35c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	2201      	movs	r2, #1
 800f362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800f366:	7afb      	ldrb	r3, [r7, #11]
}
 800f368:	4618      	mov	r0, r3
 800f36a:	3710      	adds	r7, #16
 800f36c:	46bd      	mov	sp, r7
 800f36e:	bd80      	pop	{r7, pc}
 800f370:	00ffff2f 	.word	0x00ffff2f
 800f374:	ffe0f8fe 	.word	0xffe0f8fe

0800f378 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b086      	sub	sp, #24
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	689b      	ldr	r3, [r3, #8]
 800f386:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800f390:	697b      	ldr	r3, [r7, #20]
 800f392:	f003 0304 	and.w	r3, r3, #4
 800f396:	2b00      	cmp	r3, #0
 800f398:	d064      	beq.n	800f464 <HAL_QSPI_IRQHandler+0xec>
 800f39a:	693b      	ldr	r3, [r7, #16]
 800f39c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d05f      	beq.n	800f464 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	3320      	adds	r3, #32
 800f3aa:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f3b2:	b2db      	uxtb	r3, r3
 800f3b4:	2b12      	cmp	r3, #18
 800f3b6:	d125      	bne.n	800f404 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800f3b8:	e01c      	b.n	800f3f4 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d00f      	beq.n	800f3e2 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3c6:	781a      	ldrb	r2, [r3, #0]
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3d0:	1c5a      	adds	r2, r3, #1
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3da:	1e5a      	subs	r2, r3, #1
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	62da      	str	r2, [r3, #44]	; 0x2c
 800f3e0:	e008      	b.n	800f3f4 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	681a      	ldr	r2, [r3, #0]
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f3f0:	601a      	str	r2, [r3, #0]
          break;
 800f3f2:	e033      	b.n	800f45c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	689b      	ldr	r3, [r3, #8]
 800f3fa:	f003 0304 	and.w	r3, r3, #4
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d1db      	bne.n	800f3ba <HAL_QSPI_IRQHandler+0x42>
 800f402:	e02b      	b.n	800f45c <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f40a:	b2db      	uxtb	r3, r3
 800f40c:	2b22      	cmp	r3, #34	; 0x22
 800f40e:	d125      	bne.n	800f45c <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800f410:	e01d      	b.n	800f44e <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f416:	2b00      	cmp	r3, #0
 800f418:	d010      	beq.n	800f43c <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f41e:	68fa      	ldr	r2, [r7, #12]
 800f420:	7812      	ldrb	r2, [r2, #0]
 800f422:	b2d2      	uxtb	r2, r2
 800f424:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f42a:	1c5a      	adds	r2, r3, #1
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f434:	1e5a      	subs	r2, r3, #1
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	639a      	str	r2, [r3, #56]	; 0x38
 800f43a:	e008      	b.n	800f44e <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	681a      	ldr	r2, [r3, #0]
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f44a:	601a      	str	r2, [r3, #0]
          break;
 800f44c:	e006      	b.n	800f45c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	689b      	ldr	r3, [r3, #8]
 800f454:	f003 0304 	and.w	r3, r3, #4
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d1da      	bne.n	800f412 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800f45c:	6878      	ldr	r0, [r7, #4]
 800f45e:	f000 fbdd 	bl	800fc1c <HAL_QSPI_FifoThresholdCallback>
 800f462:	e13c      	b.n	800f6de <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800f464:	697b      	ldr	r3, [r7, #20]
 800f466:	f003 0302 	and.w	r3, r3, #2
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	f000 80b0 	beq.w	800f5d0 <HAL_QSPI_IRQHandler+0x258>
 800f470:	693b      	ldr	r3, [r7, #16]
 800f472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f476:	2b00      	cmp	r3, #0
 800f478:	f000 80aa 	beq.w	800f5d0 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	2202      	movs	r2, #2
 800f482:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	681a      	ldr	r2, [r3, #0]
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800f492:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f49a:	b2db      	uxtb	r3, r3
 800f49c:	2b12      	cmp	r3, #18
 800f49e:	d120      	bne.n	800f4e2 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	f003 0304 	and.w	r3, r3, #4
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d011      	beq.n	800f4d2 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	681a      	ldr	r2, [r3, #0]
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	f022 0204 	bic.w	r2, r2, #4
 800f4bc:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	68da      	ldr	r2, [r3, #12]
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	f022 0201 	bic.w	r2, r2, #1
 800f4d0:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	2201      	movs	r2, #1
 800f4d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800f4da:	6878      	ldr	r0, [r7, #4]
 800f4dc:	f000 fb94 	bl	800fc08 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f4e0:	e0fa      	b.n	800f6d8 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f4e8:	b2db      	uxtb	r3, r3
 800f4ea:	2b22      	cmp	r3, #34	; 0x22
 800f4ec:	d143      	bne.n	800f576 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	f003 0304 	and.w	r3, r3, #4
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d012      	beq.n	800f522 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	681a      	ldr	r2, [r3, #0]
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	f022 0204 	bic.w	r2, r2, #4
 800f50a:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	68da      	ldr	r2, [r3, #12]
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	f022 0201 	bic.w	r2, r2, #1
 800f51e:	60da      	str	r2, [r3, #12]
 800f520:	e021      	b.n	800f566 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	3320      	adds	r3, #32
 800f528:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800f52a:	e013      	b.n	800f554 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f530:	2b00      	cmp	r3, #0
 800f532:	d017      	beq.n	800f564 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f538:	68fa      	ldr	r2, [r7, #12]
 800f53a:	7812      	ldrb	r2, [r2, #0]
 800f53c:	b2d2      	uxtb	r2, r2
 800f53e:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f544:	1c5a      	adds	r2, r3, #1
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f54e:	1e5a      	subs	r2, r3, #1
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	689b      	ldr	r3, [r3, #8]
 800f55a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d1e4      	bne.n	800f52c <HAL_QSPI_IRQHandler+0x1b4>
 800f562:	e000      	b.n	800f566 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800f564:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	2201      	movs	r2, #1
 800f56a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	f000 fb40 	bl	800fbf4 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f574:	e0b0      	b.n	800f6d8 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f57c:	b2db      	uxtb	r3, r3
 800f57e:	2b02      	cmp	r3, #2
 800f580:	d107      	bne.n	800f592 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	2201      	movs	r2, #1
 800f586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800f58a:	6878      	ldr	r0, [r7, #4]
 800f58c:	f000 fb28 	bl	800fbe0 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f590:	e0a2      	b.n	800f6d8 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f598:	b2db      	uxtb	r3, r3
 800f59a:	2b08      	cmp	r3, #8
 800f59c:	f040 809c 	bne.w	800f6d8 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	695a      	ldr	r2, [r3, #20]
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800f5ae:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2201      	movs	r2, #1
 800f5b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d103      	bne.n	800f5c8 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f000 fb03 	bl	800fbcc <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f5c6:	e087      	b.n	800f6d8 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800f5c8:	6878      	ldr	r0, [r7, #4]
 800f5ca:	f000 faf5 	bl	800fbb8 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f5ce:	e083      	b.n	800f6d8 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	f003 0308 	and.w	r3, r3, #8
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d01f      	beq.n	800f61a <HAL_QSPI_IRQHandler+0x2a2>
 800f5da:	693b      	ldr	r3, [r7, #16]
 800f5dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d01a      	beq.n	800f61a <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	2208      	movs	r2, #8
 800f5ea:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d00b      	beq.n	800f612 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	681a      	ldr	r2, [r3, #0]
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800f608:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	2201      	movs	r2, #1
 800f60e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800f612:	6878      	ldr	r0, [r7, #4]
 800f614:	f000 fb0c 	bl	800fc30 <HAL_QSPI_StatusMatchCallback>
 800f618:	e061      	b.n	800f6de <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800f61a:	697b      	ldr	r3, [r7, #20]
 800f61c:	f003 0301 	and.w	r3, r3, #1
 800f620:	2b00      	cmp	r3, #0
 800f622:	d047      	beq.n	800f6b4 <HAL_QSPI_IRQHandler+0x33c>
 800f624:	693b      	ldr	r3, [r7, #16]
 800f626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d042      	beq.n	800f6b4 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	2201      	movs	r2, #1
 800f634:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	681a      	ldr	r2, [r3, #0]
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800f644:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f64a:	f043 0202 	orr.w	r2, r3, #2
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	f003 0304 	and.w	r3, r3, #4
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d021      	beq.n	800f6a4 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	681a      	ldr	r2, [r3, #0]
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	f022 0204 	bic.w	r2, r2, #4
 800f66e:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f674:	4a1c      	ldr	r2, [pc, #112]	; (800f6e8 <HAL_QSPI_IRQHandler+0x370>)
 800f676:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f67c:	4618      	mov	r0, r3
 800f67e:	f7ff fced 	bl	800f05c <HAL_MDMA_Abort_IT>
 800f682:	4603      	mov	r3, r0
 800f684:	2b00      	cmp	r3, #0
 800f686:	d029      	beq.n	800f6dc <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f68c:	f043 0204 	orr.w	r2, r3, #4
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2201      	movs	r2, #1
 800f698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800f69c:	6878      	ldr	r0, [r7, #4]
 800f69e:	f000 fa8b 	bl	800fbb8 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f6a2:	e01b      	b.n	800f6dc <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	2201      	movs	r2, #1
 800f6a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800f6ac:	6878      	ldr	r0, [r7, #4]
 800f6ae:	f000 fa83 	bl	800fbb8 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f6b2:	e013      	b.n	800f6dc <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	f003 0310 	and.w	r3, r3, #16
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d00f      	beq.n	800f6de <HAL_QSPI_IRQHandler+0x366>
 800f6be:	693b      	ldr	r3, [r7, #16]
 800f6c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d00a      	beq.n	800f6de <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	2210      	movs	r2, #16
 800f6ce:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800f6d0:	6878      	ldr	r0, [r7, #4]
 800f6d2:	f000 fab7 	bl	800fc44 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800f6d6:	e002      	b.n	800f6de <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f6d8:	bf00      	nop
 800f6da:	e000      	b.n	800f6de <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f6dc:	bf00      	nop
}
 800f6de:	bf00      	nop
 800f6e0:	3718      	adds	r7, #24
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}
 800f6e6:	bf00      	nop
 800f6e8:	0800fc75 	.word	0x0800fc75

0800f6ec <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b088      	sub	sp, #32
 800f6f0:	af02      	add	r7, sp, #8
 800f6f2:	60f8      	str	r0, [r7, #12]
 800f6f4:	60b9      	str	r1, [r7, #8]
 800f6f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f6f8:	f7fd fb28 	bl	800cd4c <HAL_GetTick>
 800f6fc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f704:	b2db      	uxtb	r3, r3
 800f706:	2b01      	cmp	r3, #1
 800f708:	d101      	bne.n	800f70e <HAL_QSPI_Command+0x22>
 800f70a:	2302      	movs	r3, #2
 800f70c:	e048      	b.n	800f7a0 <HAL_QSPI_Command+0xb4>
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	2201      	movs	r2, #1
 800f712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f71c:	b2db      	uxtb	r3, r3
 800f71e:	2b01      	cmp	r3, #1
 800f720:	d137      	bne.n	800f792 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	2200      	movs	r2, #0
 800f726:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	2202      	movs	r2, #2
 800f72c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	9300      	str	r3, [sp, #0]
 800f734:	693b      	ldr	r3, [r7, #16]
 800f736:	2200      	movs	r2, #0
 800f738:	2120      	movs	r1, #32
 800f73a:	68f8      	ldr	r0, [r7, #12]
 800f73c:	f000 facd 	bl	800fcda <QSPI_WaitFlagStateUntilTimeout>
 800f740:	4603      	mov	r3, r0
 800f742:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800f744:	7dfb      	ldrb	r3, [r7, #23]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d125      	bne.n	800f796 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800f74a:	2200      	movs	r2, #0
 800f74c:	68b9      	ldr	r1, [r7, #8]
 800f74e:	68f8      	ldr	r0, [r7, #12]
 800f750:	f000 fafa 	bl	800fd48 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800f754:	68bb      	ldr	r3, [r7, #8]
 800f756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d115      	bne.n	800f788 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	9300      	str	r3, [sp, #0]
 800f760:	693b      	ldr	r3, [r7, #16]
 800f762:	2201      	movs	r2, #1
 800f764:	2102      	movs	r1, #2
 800f766:	68f8      	ldr	r0, [r7, #12]
 800f768:	f000 fab7 	bl	800fcda <QSPI_WaitFlagStateUntilTimeout>
 800f76c:	4603      	mov	r3, r0
 800f76e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800f770:	7dfb      	ldrb	r3, [r7, #23]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d10f      	bne.n	800f796 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	2202      	movs	r2, #2
 800f77c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	2201      	movs	r2, #1
 800f782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f786:	e006      	b.n	800f796 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	2201      	movs	r2, #1
 800f78c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f790:	e001      	b.n	800f796 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800f792:	2302      	movs	r3, #2
 800f794:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	2200      	movs	r2, #0
 800f79a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800f79e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	3718      	adds	r7, #24
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	bd80      	pop	{r7, pc}

0800f7a8 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b08a      	sub	sp, #40	; 0x28
 800f7ac:	af02      	add	r7, sp, #8
 800f7ae:	60f8      	str	r0, [r7, #12]
 800f7b0:	60b9      	str	r1, [r7, #8]
 800f7b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800f7b8:	f7fd fac8 	bl	800cd4c <HAL_GetTick>
 800f7bc:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	3320      	adds	r3, #32
 800f7c4:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f7cc:	b2db      	uxtb	r3, r3
 800f7ce:	2b01      	cmp	r3, #1
 800f7d0:	d101      	bne.n	800f7d6 <HAL_QSPI_Transmit+0x2e>
 800f7d2:	2302      	movs	r3, #2
 800f7d4:	e076      	b.n	800f8c4 <HAL_QSPI_Transmit+0x11c>
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	2201      	movs	r2, #1
 800f7da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f7e4:	b2db      	uxtb	r3, r3
 800f7e6:	2b01      	cmp	r3, #1
 800f7e8:	d165      	bne.n	800f8b6 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d056      	beq.n	800f8a4 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	2212      	movs	r2, #18
 800f7fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	691b      	ldr	r3, [r3, #16]
 800f804:	1c5a      	adds	r2, r3, #1
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	691b      	ldr	r3, [r3, #16]
 800f810:	1c5a      	adds	r2, r3, #1
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	68ba      	ldr	r2, [r7, #8]
 800f81a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	695a      	ldr	r2, [r3, #20]
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800f82a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800f82c:	e01b      	b.n	800f866 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	9300      	str	r3, [sp, #0]
 800f832:	69bb      	ldr	r3, [r7, #24]
 800f834:	2201      	movs	r2, #1
 800f836:	2104      	movs	r1, #4
 800f838:	68f8      	ldr	r0, [r7, #12]
 800f83a:	f000 fa4e 	bl	800fcda <QSPI_WaitFlagStateUntilTimeout>
 800f83e:	4603      	mov	r3, r0
 800f840:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800f842:	7ffb      	ldrb	r3, [r7, #31]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d113      	bne.n	800f870 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f84c:	781a      	ldrb	r2, [r3, #0]
 800f84e:	697b      	ldr	r3, [r7, #20]
 800f850:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f856:	1c5a      	adds	r2, r3, #1
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f860:	1e5a      	subs	r2, r3, #1
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d1df      	bne.n	800f82e <HAL_QSPI_Transmit+0x86>
 800f86e:	e000      	b.n	800f872 <HAL_QSPI_Transmit+0xca>
          break;
 800f870:	bf00      	nop
      }

      if (status == HAL_OK)
 800f872:	7ffb      	ldrb	r3, [r7, #31]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d110      	bne.n	800f89a <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	9300      	str	r3, [sp, #0]
 800f87c:	69bb      	ldr	r3, [r7, #24]
 800f87e:	2201      	movs	r2, #1
 800f880:	2102      	movs	r1, #2
 800f882:	68f8      	ldr	r0, [r7, #12]
 800f884:	f000 fa29 	bl	800fcda <QSPI_WaitFlagStateUntilTimeout>
 800f888:	4603      	mov	r3, r0
 800f88a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800f88c:	7ffb      	ldrb	r3, [r7, #31]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d103      	bne.n	800f89a <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	2202      	movs	r2, #2
 800f898:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	2201      	movs	r2, #1
 800f89e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f8a2:	e00a      	b.n	800f8ba <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8a8:	f043 0208 	orr.w	r2, r3, #8
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800f8b0:	2301      	movs	r3, #1
 800f8b2:	77fb      	strb	r3, [r7, #31]
 800f8b4:	e001      	b.n	800f8ba <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800f8b6:	2302      	movs	r3, #2
 800f8b8:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	2200      	movs	r2, #0
 800f8be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800f8c2:	7ffb      	ldrb	r3, [r7, #31]
}
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	3720      	adds	r7, #32
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bd80      	pop	{r7, pc}

0800f8cc <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b08a      	sub	sp, #40	; 0x28
 800f8d0:	af02      	add	r7, sp, #8
 800f8d2:	60f8      	str	r0, [r7, #12]
 800f8d4:	60b9      	str	r1, [r7, #8]
 800f8d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f8d8:	2300      	movs	r3, #0
 800f8da:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800f8dc:	f7fd fa36 	bl	800cd4c <HAL_GetTick>
 800f8e0:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	699b      	ldr	r3, [r3, #24]
 800f8e8:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	3320      	adds	r3, #32
 800f8f0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f8f8:	b2db      	uxtb	r3, r3
 800f8fa:	2b01      	cmp	r3, #1
 800f8fc:	d101      	bne.n	800f902 <HAL_QSPI_Receive+0x36>
 800f8fe:	2302      	movs	r3, #2
 800f900:	e07d      	b.n	800f9fe <HAL_QSPI_Receive+0x132>
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	2201      	movs	r2, #1
 800f906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f910:	b2db      	uxtb	r3, r3
 800f912:	2b01      	cmp	r3, #1
 800f914:	d16c      	bne.n	800f9f0 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	2200      	movs	r2, #0
 800f91a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d05d      	beq.n	800f9de <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	2222      	movs	r2, #34	; 0x22
 800f926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	691b      	ldr	r3, [r3, #16]
 800f930:	1c5a      	adds	r2, r3, #1
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	691b      	ldr	r3, [r3, #16]
 800f93c:	1c5a      	adds	r2, r3, #1
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	68ba      	ldr	r2, [r7, #8]
 800f946:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	695b      	ldr	r3, [r3, #20]
 800f94e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800f95a:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	697a      	ldr	r2, [r7, #20]
 800f962:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800f964:	e01c      	b.n	800f9a0 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	9300      	str	r3, [sp, #0]
 800f96a:	69bb      	ldr	r3, [r7, #24]
 800f96c:	2201      	movs	r2, #1
 800f96e:	2106      	movs	r1, #6
 800f970:	68f8      	ldr	r0, [r7, #12]
 800f972:	f000 f9b2 	bl	800fcda <QSPI_WaitFlagStateUntilTimeout>
 800f976:	4603      	mov	r3, r0
 800f978:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800f97a:	7ffb      	ldrb	r3, [r7, #31]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d114      	bne.n	800f9aa <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f984:	693a      	ldr	r2, [r7, #16]
 800f986:	7812      	ldrb	r2, [r2, #0]
 800f988:	b2d2      	uxtb	r2, r2
 800f98a:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f990:	1c5a      	adds	r2, r3, #1
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f99a:	1e5a      	subs	r2, r3, #1
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d1de      	bne.n	800f966 <HAL_QSPI_Receive+0x9a>
 800f9a8:	e000      	b.n	800f9ac <HAL_QSPI_Receive+0xe0>
          break;
 800f9aa:	bf00      	nop
      }

      if (status == HAL_OK)
 800f9ac:	7ffb      	ldrb	r3, [r7, #31]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d110      	bne.n	800f9d4 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	9300      	str	r3, [sp, #0]
 800f9b6:	69bb      	ldr	r3, [r7, #24]
 800f9b8:	2201      	movs	r2, #1
 800f9ba:	2102      	movs	r1, #2
 800f9bc:	68f8      	ldr	r0, [r7, #12]
 800f9be:	f000 f98c 	bl	800fcda <QSPI_WaitFlagStateUntilTimeout>
 800f9c2:	4603      	mov	r3, r0
 800f9c4:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800f9c6:	7ffb      	ldrb	r3, [r7, #31]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d103      	bne.n	800f9d4 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	2202      	movs	r2, #2
 800f9d2:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	2201      	movs	r2, #1
 800f9d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f9dc:	e00a      	b.n	800f9f4 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9e2:	f043 0208 	orr.w	r2, r3, #8
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	77fb      	strb	r3, [r7, #31]
 800f9ee:	e001      	b.n	800f9f4 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800f9f0:	2302      	movs	r3, #2
 800f9f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800f9fc:	7ffb      	ldrb	r3, [r7, #31]
}
 800f9fe:	4618      	mov	r0, r3
 800fa00:	3720      	adds	r7, #32
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}

0800fa06 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800fa06:	b580      	push	{r7, lr}
 800fa08:	b088      	sub	sp, #32
 800fa0a:	af02      	add	r7, sp, #8
 800fa0c:	60f8      	str	r0, [r7, #12]
 800fa0e:	60b9      	str	r1, [r7, #8]
 800fa10:	607a      	str	r2, [r7, #4]
 800fa12:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800fa14:	f7fd f99a 	bl	800cd4c <HAL_GetTick>
 800fa18:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fa20:	b2db      	uxtb	r3, r3
 800fa22:	2b01      	cmp	r3, #1
 800fa24:	d101      	bne.n	800fa2a <HAL_QSPI_AutoPolling+0x24>
 800fa26:	2302      	movs	r3, #2
 800fa28:	e060      	b.n	800faec <HAL_QSPI_AutoPolling+0xe6>
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	2201      	movs	r2, #1
 800fa2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fa38:	b2db      	uxtb	r3, r3
 800fa3a:	2b01      	cmp	r3, #1
 800fa3c:	d14f      	bne.n	800fade <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	2200      	movs	r2, #0
 800fa42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	2242      	movs	r2, #66	; 0x42
 800fa48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	9300      	str	r3, [sp, #0]
 800fa50:	693b      	ldr	r3, [r7, #16]
 800fa52:	2200      	movs	r2, #0
 800fa54:	2120      	movs	r1, #32
 800fa56:	68f8      	ldr	r0, [r7, #12]
 800fa58:	f000 f93f 	bl	800fcda <QSPI_WaitFlagStateUntilTimeout>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800fa60:	7dfb      	ldrb	r3, [r7, #23]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d13d      	bne.n	800fae2 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	687a      	ldr	r2, [r7, #4]
 800fa6c:	6812      	ldr	r2, [r2, #0]
 800fa6e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	687a      	ldr	r2, [r7, #4]
 800fa76:	6852      	ldr	r2, [r2, #4]
 800fa78:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	687a      	ldr	r2, [r7, #4]
 800fa80:	6892      	ldr	r2, [r2, #8]
 800fa82:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	691b      	ldr	r3, [r3, #16]
 800fa92:	431a      	orrs	r2, r3
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800fa9c:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	68da      	ldr	r2, [r3, #12]
 800faa2:	68bb      	ldr	r3, [r7, #8]
 800faa4:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800faa6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800faaa:	68b9      	ldr	r1, [r7, #8]
 800faac:	68f8      	ldr	r0, [r7, #12]
 800faae:	f000 f94b 	bl	800fd48 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800fab2:	683b      	ldr	r3, [r7, #0]
 800fab4:	9300      	str	r3, [sp, #0]
 800fab6:	693b      	ldr	r3, [r7, #16]
 800fab8:	2201      	movs	r2, #1
 800faba:	2108      	movs	r1, #8
 800fabc:	68f8      	ldr	r0, [r7, #12]
 800fabe:	f000 f90c 	bl	800fcda <QSPI_WaitFlagStateUntilTimeout>
 800fac2:	4603      	mov	r3, r0
 800fac4:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800fac6:	7dfb      	ldrb	r3, [r7, #23]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d10a      	bne.n	800fae2 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	2208      	movs	r2, #8
 800fad2:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	2201      	movs	r2, #1
 800fad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fadc:	e001      	b.n	800fae2 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800fade:	2302      	movs	r3, #2
 800fae0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	2200      	movs	r2, #0
 800fae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800faea:	7dfb      	ldrb	r3, [r7, #23]
}
 800faec:	4618      	mov	r0, r3
 800faee:	3718      	adds	r7, #24
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}

0800faf4 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b088      	sub	sp, #32
 800faf8:	af02      	add	r7, sp, #8
 800fafa:	60f8      	str	r0, [r7, #12]
 800fafc:	60b9      	str	r1, [r7, #8]
 800fafe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800fb00:	f7fd f924 	bl	800cd4c <HAL_GetTick>
 800fb04:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fb0c:	b2db      	uxtb	r3, r3
 800fb0e:	2b01      	cmp	r3, #1
 800fb10:	d101      	bne.n	800fb16 <HAL_QSPI_MemoryMapped+0x22>
 800fb12:	2302      	movs	r3, #2
 800fb14:	e04c      	b.n	800fbb0 <HAL_QSPI_MemoryMapped+0xbc>
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	2201      	movs	r2, #1
 800fb1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fb24:	b2db      	uxtb	r3, r3
 800fb26:	2b01      	cmp	r3, #1
 800fb28:	d13b      	bne.n	800fba2 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	2282      	movs	r2, #130	; 0x82
 800fb34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb3c:	9300      	str	r3, [sp, #0]
 800fb3e:	693b      	ldr	r3, [r7, #16]
 800fb40:	2200      	movs	r2, #0
 800fb42:	2120      	movs	r1, #32
 800fb44:	68f8      	ldr	r0, [r7, #12]
 800fb46:	f000 f8c8 	bl	800fcda <QSPI_WaitFlagStateUntilTimeout>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800fb4e:	7dfb      	ldrb	r3, [r7, #23]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d128      	bne.n	800fba6 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	f023 0108 	bic.w	r1, r3, #8
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	685a      	ldr	r2, [r3, #4]
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	430a      	orrs	r2, r1
 800fb68:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	685b      	ldr	r3, [r3, #4]
 800fb6e:	2b08      	cmp	r3, #8
 800fb70:	d110      	bne.n	800fb94 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	687a      	ldr	r2, [r7, #4]
 800fb78:	6812      	ldr	r2, [r2, #0]
 800fb7a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	2210      	movs	r2, #16
 800fb82:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	681a      	ldr	r2, [r3, #0]
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800fb92:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800fb94:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800fb98:	68b9      	ldr	r1, [r7, #8]
 800fb9a:	68f8      	ldr	r0, [r7, #12]
 800fb9c:	f000 f8d4 	bl	800fd48 <QSPI_Config>
 800fba0:	e001      	b.n	800fba6 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800fba2:	2302      	movs	r3, #2
 800fba4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	2200      	movs	r2, #0
 800fbaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800fbae:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	3718      	adds	r7, #24
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}

0800fbb8 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800fbb8:	b480      	push	{r7}
 800fbba:	b083      	sub	sp, #12
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800fbc0:	bf00      	nop
 800fbc2:	370c      	adds	r7, #12
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbca:	4770      	bx	lr

0800fbcc <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800fbcc:	b480      	push	{r7}
 800fbce:	b083      	sub	sp, #12
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800fbd4:	bf00      	nop
 800fbd6:	370c      	adds	r7, #12
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbde:	4770      	bx	lr

0800fbe0 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800fbe0:	b480      	push	{r7}
 800fbe2:	b083      	sub	sp, #12
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800fbe8:	bf00      	nop
 800fbea:	370c      	adds	r7, #12
 800fbec:	46bd      	mov	sp, r7
 800fbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf2:	4770      	bx	lr

0800fbf4 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800fbf4:	b480      	push	{r7}
 800fbf6:	b083      	sub	sp, #12
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800fbfc:	bf00      	nop
 800fbfe:	370c      	adds	r7, #12
 800fc00:	46bd      	mov	sp, r7
 800fc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc06:	4770      	bx	lr

0800fc08 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800fc08:	b480      	push	{r7}
 800fc0a:	b083      	sub	sp, #12
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800fc10:	bf00      	nop
 800fc12:	370c      	adds	r7, #12
 800fc14:	46bd      	mov	sp, r7
 800fc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1a:	4770      	bx	lr

0800fc1c <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800fc1c:	b480      	push	{r7}
 800fc1e:	b083      	sub	sp, #12
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800fc24:	bf00      	nop
 800fc26:	370c      	adds	r7, #12
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2e:	4770      	bx	lr

0800fc30 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800fc30:	b480      	push	{r7}
 800fc32:	b083      	sub	sp, #12
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800fc38:	bf00      	nop
 800fc3a:	370c      	adds	r7, #12
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc42:	4770      	bx	lr

0800fc44 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800fc44:	b480      	push	{r7}
 800fc46:	b083      	sub	sp, #12
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800fc4c:	bf00      	nop
 800fc4e:	370c      	adds	r7, #12
 800fc50:	46bd      	mov	sp, r7
 800fc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc56:	4770      	bx	lr

0800fc58 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800fc58:	b480      	push	{r7}
 800fc5a:	b083      	sub	sp, #12
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
 800fc60:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	683a      	ldr	r2, [r7, #0]
 800fc66:	649a      	str	r2, [r3, #72]	; 0x48
}
 800fc68:	bf00      	nop
 800fc6a:	370c      	adds	r7, #12
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc72:	4770      	bx	lr

0800fc74 <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b084      	sub	sp, #16
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc80:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	2200      	movs	r2, #0
 800fc86:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fc94:	b2db      	uxtb	r3, r3
 800fc96:	2b08      	cmp	r3, #8
 800fc98:	d114      	bne.n	800fcc4 <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	2202      	movs	r2, #2
 800fca0:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	681a      	ldr	r2, [r3, #0]
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fcb0:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	681a      	ldr	r2, [r3, #0]
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	f042 0202 	orr.w	r2, r2, #2
 800fcc0:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800fcc2:	e006      	b.n	800fcd2 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	2201      	movs	r2, #1
 800fcc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800fccc:	68f8      	ldr	r0, [r7, #12]
 800fcce:	f7ff ff73 	bl	800fbb8 <HAL_QSPI_ErrorCallback>
}
 800fcd2:	bf00      	nop
 800fcd4:	3710      	adds	r7, #16
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}

0800fcda <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800fcda:	b580      	push	{r7, lr}
 800fcdc:	b084      	sub	sp, #16
 800fcde:	af00      	add	r7, sp, #0
 800fce0:	60f8      	str	r0, [r7, #12]
 800fce2:	60b9      	str	r1, [r7, #8]
 800fce4:	603b      	str	r3, [r7, #0]
 800fce6:	4613      	mov	r3, r2
 800fce8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800fcea:	e01a      	b.n	800fd22 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fcec:	69bb      	ldr	r3, [r7, #24]
 800fcee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcf2:	d016      	beq.n	800fd22 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fcf4:	f7fd f82a 	bl	800cd4c <HAL_GetTick>
 800fcf8:	4602      	mov	r2, r0
 800fcfa:	683b      	ldr	r3, [r7, #0]
 800fcfc:	1ad3      	subs	r3, r2, r3
 800fcfe:	69ba      	ldr	r2, [r7, #24]
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d302      	bcc.n	800fd0a <QSPI_WaitFlagStateUntilTimeout+0x30>
 800fd04:	69bb      	ldr	r3, [r7, #24]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d10b      	bne.n	800fd22 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	2204      	movs	r2, #4
 800fd0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd16:	f043 0201 	orr.w	r2, r3, #1
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800fd1e:	2301      	movs	r3, #1
 800fd20:	e00e      	b.n	800fd40 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	689a      	ldr	r2, [r3, #8]
 800fd28:	68bb      	ldr	r3, [r7, #8]
 800fd2a:	4013      	ands	r3, r2
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	bf14      	ite	ne
 800fd30:	2301      	movne	r3, #1
 800fd32:	2300      	moveq	r3, #0
 800fd34:	b2db      	uxtb	r3, r3
 800fd36:	461a      	mov	r2, r3
 800fd38:	79fb      	ldrb	r3, [r7, #7]
 800fd3a:	429a      	cmp	r2, r3
 800fd3c:	d1d6      	bne.n	800fcec <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800fd3e:	2300      	movs	r3, #0
}
 800fd40:	4618      	mov	r0, r3
 800fd42:	3710      	adds	r7, #16
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd80      	pop	{r7, pc}

0800fd48 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800fd48:	b480      	push	{r7}
 800fd4a:	b085      	sub	sp, #20
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	60f8      	str	r0, [r7, #12]
 800fd50:	60b9      	str	r1, [r7, #8]
 800fd52:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800fd54:	68bb      	ldr	r3, [r7, #8]
 800fd56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d009      	beq.n	800fd70 <QSPI_Config+0x28>
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800fd62:	d005      	beq.n	800fd70 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	3a01      	subs	r2, #1
 800fd6e:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800fd70:	68bb      	ldr	r3, [r7, #8]
 800fd72:	699b      	ldr	r3, [r3, #24]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	f000 80b9 	beq.w	800feec <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800fd7a:	68bb      	ldr	r3, [r7, #8]
 800fd7c:	6a1b      	ldr	r3, [r3, #32]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d05f      	beq.n	800fe42 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	68ba      	ldr	r2, [r7, #8]
 800fd88:	6892      	ldr	r2, [r2, #8]
 800fd8a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800fd8c:	68bb      	ldr	r3, [r7, #8]
 800fd8e:	69db      	ldr	r3, [r3, #28]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d031      	beq.n	800fdf8 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd98:	68bb      	ldr	r3, [r7, #8]
 800fd9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd9c:	431a      	orrs	r2, r3
 800fd9e:	68bb      	ldr	r3, [r7, #8]
 800fda0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fda2:	431a      	orrs	r2, r3
 800fda4:	68bb      	ldr	r3, [r7, #8]
 800fda6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fda8:	431a      	orrs	r2, r3
 800fdaa:	68bb      	ldr	r3, [r7, #8]
 800fdac:	695b      	ldr	r3, [r3, #20]
 800fdae:	049b      	lsls	r3, r3, #18
 800fdb0:	431a      	orrs	r2, r3
 800fdb2:	68bb      	ldr	r3, [r7, #8]
 800fdb4:	691b      	ldr	r3, [r3, #16]
 800fdb6:	431a      	orrs	r2, r3
 800fdb8:	68bb      	ldr	r3, [r7, #8]
 800fdba:	6a1b      	ldr	r3, [r3, #32]
 800fdbc:	431a      	orrs	r2, r3
 800fdbe:	68bb      	ldr	r3, [r7, #8]
 800fdc0:	68db      	ldr	r3, [r3, #12]
 800fdc2:	431a      	orrs	r2, r3
 800fdc4:	68bb      	ldr	r3, [r7, #8]
 800fdc6:	69db      	ldr	r3, [r3, #28]
 800fdc8:	431a      	orrs	r2, r3
 800fdca:	68bb      	ldr	r3, [r7, #8]
 800fdcc:	699b      	ldr	r3, [r3, #24]
 800fdce:	431a      	orrs	r2, r3
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	ea42 0103 	orr.w	r1, r2, r3
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	687a      	ldr	r2, [r7, #4]
 800fdde:	430a      	orrs	r2, r1
 800fde0:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800fde8:	f000 812e 	beq.w	8010048 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	68ba      	ldr	r2, [r7, #8]
 800fdf2:	6852      	ldr	r2, [r2, #4]
 800fdf4:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800fdf6:	e127      	b.n	8010048 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800fdf8:	68bb      	ldr	r3, [r7, #8]
 800fdfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe00:	431a      	orrs	r2, r3
 800fe02:	68bb      	ldr	r3, [r7, #8]
 800fe04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe06:	431a      	orrs	r2, r3
 800fe08:	68bb      	ldr	r3, [r7, #8]
 800fe0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe0c:	431a      	orrs	r2, r3
 800fe0e:	68bb      	ldr	r3, [r7, #8]
 800fe10:	695b      	ldr	r3, [r3, #20]
 800fe12:	049b      	lsls	r3, r3, #18
 800fe14:	431a      	orrs	r2, r3
 800fe16:	68bb      	ldr	r3, [r7, #8]
 800fe18:	691b      	ldr	r3, [r3, #16]
 800fe1a:	431a      	orrs	r2, r3
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	6a1b      	ldr	r3, [r3, #32]
 800fe20:	431a      	orrs	r2, r3
 800fe22:	68bb      	ldr	r3, [r7, #8]
 800fe24:	69db      	ldr	r3, [r3, #28]
 800fe26:	431a      	orrs	r2, r3
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	699b      	ldr	r3, [r3, #24]
 800fe2c:	431a      	orrs	r2, r3
 800fe2e:	68bb      	ldr	r3, [r7, #8]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	ea42 0103 	orr.w	r1, r2, r3
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	687a      	ldr	r2, [r7, #4]
 800fe3c:	430a      	orrs	r2, r1
 800fe3e:	615a      	str	r2, [r3, #20]
}
 800fe40:	e102      	b.n	8010048 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800fe42:	68bb      	ldr	r3, [r7, #8]
 800fe44:	69db      	ldr	r3, [r3, #28]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d02e      	beq.n	800fea8 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800fe4a:	68bb      	ldr	r3, [r7, #8]
 800fe4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe4e:	68bb      	ldr	r3, [r7, #8]
 800fe50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe52:	431a      	orrs	r2, r3
 800fe54:	68bb      	ldr	r3, [r7, #8]
 800fe56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe58:	431a      	orrs	r2, r3
 800fe5a:	68bb      	ldr	r3, [r7, #8]
 800fe5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe5e:	431a      	orrs	r2, r3
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	695b      	ldr	r3, [r3, #20]
 800fe64:	049b      	lsls	r3, r3, #18
 800fe66:	431a      	orrs	r2, r3
 800fe68:	68bb      	ldr	r3, [r7, #8]
 800fe6a:	6a1b      	ldr	r3, [r3, #32]
 800fe6c:	431a      	orrs	r2, r3
 800fe6e:	68bb      	ldr	r3, [r7, #8]
 800fe70:	68db      	ldr	r3, [r3, #12]
 800fe72:	431a      	orrs	r2, r3
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	69db      	ldr	r3, [r3, #28]
 800fe78:	431a      	orrs	r2, r3
 800fe7a:	68bb      	ldr	r3, [r7, #8]
 800fe7c:	699b      	ldr	r3, [r3, #24]
 800fe7e:	431a      	orrs	r2, r3
 800fe80:	68bb      	ldr	r3, [r7, #8]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	ea42 0103 	orr.w	r1, r2, r3
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	687a      	ldr	r2, [r7, #4]
 800fe8e:	430a      	orrs	r2, r1
 800fe90:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800fe98:	f000 80d6 	beq.w	8010048 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	68ba      	ldr	r2, [r7, #8]
 800fea2:	6852      	ldr	r2, [r2, #4]
 800fea4:	619a      	str	r2, [r3, #24]
}
 800fea6:	e0cf      	b.n	8010048 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800feac:	68bb      	ldr	r3, [r7, #8]
 800feae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800feb0:	431a      	orrs	r2, r3
 800feb2:	68bb      	ldr	r3, [r7, #8]
 800feb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800feb6:	431a      	orrs	r2, r3
 800feb8:	68bb      	ldr	r3, [r7, #8]
 800feba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800febc:	431a      	orrs	r2, r3
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	695b      	ldr	r3, [r3, #20]
 800fec2:	049b      	lsls	r3, r3, #18
 800fec4:	431a      	orrs	r2, r3
 800fec6:	68bb      	ldr	r3, [r7, #8]
 800fec8:	6a1b      	ldr	r3, [r3, #32]
 800feca:	431a      	orrs	r2, r3
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	69db      	ldr	r3, [r3, #28]
 800fed0:	431a      	orrs	r2, r3
 800fed2:	68bb      	ldr	r3, [r7, #8]
 800fed4:	699b      	ldr	r3, [r3, #24]
 800fed6:	431a      	orrs	r2, r3
 800fed8:	68bb      	ldr	r3, [r7, #8]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	ea42 0103 	orr.w	r1, r2, r3
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	687a      	ldr	r2, [r7, #4]
 800fee6:	430a      	orrs	r2, r1
 800fee8:	615a      	str	r2, [r3, #20]
}
 800feea:	e0ad      	b.n	8010048 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800feec:	68bb      	ldr	r3, [r7, #8]
 800feee:	6a1b      	ldr	r3, [r3, #32]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d058      	beq.n	800ffa6 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	68ba      	ldr	r2, [r7, #8]
 800fefa:	6892      	ldr	r2, [r2, #8]
 800fefc:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800fefe:	68bb      	ldr	r3, [r7, #8]
 800ff00:	69db      	ldr	r3, [r3, #28]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d02d      	beq.n	800ff62 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ff06:	68bb      	ldr	r3, [r7, #8]
 800ff08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff0a:	68bb      	ldr	r3, [r7, #8]
 800ff0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff0e:	431a      	orrs	r2, r3
 800ff10:	68bb      	ldr	r3, [r7, #8]
 800ff12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff14:	431a      	orrs	r2, r3
 800ff16:	68bb      	ldr	r3, [r7, #8]
 800ff18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff1a:	431a      	orrs	r2, r3
 800ff1c:	68bb      	ldr	r3, [r7, #8]
 800ff1e:	695b      	ldr	r3, [r3, #20]
 800ff20:	049b      	lsls	r3, r3, #18
 800ff22:	431a      	orrs	r2, r3
 800ff24:	68bb      	ldr	r3, [r7, #8]
 800ff26:	691b      	ldr	r3, [r3, #16]
 800ff28:	431a      	orrs	r2, r3
 800ff2a:	68bb      	ldr	r3, [r7, #8]
 800ff2c:	6a1b      	ldr	r3, [r3, #32]
 800ff2e:	431a      	orrs	r2, r3
 800ff30:	68bb      	ldr	r3, [r7, #8]
 800ff32:	68db      	ldr	r3, [r3, #12]
 800ff34:	431a      	orrs	r2, r3
 800ff36:	68bb      	ldr	r3, [r7, #8]
 800ff38:	69db      	ldr	r3, [r3, #28]
 800ff3a:	431a      	orrs	r2, r3
 800ff3c:	68bb      	ldr	r3, [r7, #8]
 800ff3e:	699b      	ldr	r3, [r3, #24]
 800ff40:	ea42 0103 	orr.w	r1, r2, r3
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	687a      	ldr	r2, [r7, #4]
 800ff4a:	430a      	orrs	r2, r1
 800ff4c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ff54:	d078      	beq.n	8010048 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	68ba      	ldr	r2, [r7, #8]
 800ff5c:	6852      	ldr	r2, [r2, #4]
 800ff5e:	619a      	str	r2, [r3, #24]
}
 800ff60:	e072      	b.n	8010048 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff66:	68bb      	ldr	r3, [r7, #8]
 800ff68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff6a:	431a      	orrs	r2, r3
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff70:	431a      	orrs	r2, r3
 800ff72:	68bb      	ldr	r3, [r7, #8]
 800ff74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff76:	431a      	orrs	r2, r3
 800ff78:	68bb      	ldr	r3, [r7, #8]
 800ff7a:	695b      	ldr	r3, [r3, #20]
 800ff7c:	049b      	lsls	r3, r3, #18
 800ff7e:	431a      	orrs	r2, r3
 800ff80:	68bb      	ldr	r3, [r7, #8]
 800ff82:	691b      	ldr	r3, [r3, #16]
 800ff84:	431a      	orrs	r2, r3
 800ff86:	68bb      	ldr	r3, [r7, #8]
 800ff88:	6a1b      	ldr	r3, [r3, #32]
 800ff8a:	431a      	orrs	r2, r3
 800ff8c:	68bb      	ldr	r3, [r7, #8]
 800ff8e:	69db      	ldr	r3, [r3, #28]
 800ff90:	431a      	orrs	r2, r3
 800ff92:	68bb      	ldr	r3, [r7, #8]
 800ff94:	699b      	ldr	r3, [r3, #24]
 800ff96:	ea42 0103 	orr.w	r1, r2, r3
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	687a      	ldr	r2, [r7, #4]
 800ffa0:	430a      	orrs	r2, r1
 800ffa2:	615a      	str	r2, [r3, #20]
}
 800ffa4:	e050      	b.n	8010048 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ffa6:	68bb      	ldr	r3, [r7, #8]
 800ffa8:	69db      	ldr	r3, [r3, #28]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d02a      	beq.n	8010004 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffb2:	68bb      	ldr	r3, [r7, #8]
 800ffb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffb6:	431a      	orrs	r2, r3
 800ffb8:	68bb      	ldr	r3, [r7, #8]
 800ffba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffbc:	431a      	orrs	r2, r3
 800ffbe:	68bb      	ldr	r3, [r7, #8]
 800ffc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffc2:	431a      	orrs	r2, r3
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	695b      	ldr	r3, [r3, #20]
 800ffc8:	049b      	lsls	r3, r3, #18
 800ffca:	431a      	orrs	r2, r3
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	6a1b      	ldr	r3, [r3, #32]
 800ffd0:	431a      	orrs	r2, r3
 800ffd2:	68bb      	ldr	r3, [r7, #8]
 800ffd4:	68db      	ldr	r3, [r3, #12]
 800ffd6:	431a      	orrs	r2, r3
 800ffd8:	68bb      	ldr	r3, [r7, #8]
 800ffda:	69db      	ldr	r3, [r3, #28]
 800ffdc:	431a      	orrs	r2, r3
 800ffde:	68bb      	ldr	r3, [r7, #8]
 800ffe0:	699b      	ldr	r3, [r3, #24]
 800ffe2:	ea42 0103 	orr.w	r1, r2, r3
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	687a      	ldr	r2, [r7, #4]
 800ffec:	430a      	orrs	r2, r1
 800ffee:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800fff6:	d027      	beq.n	8010048 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	68ba      	ldr	r2, [r7, #8]
 800fffe:	6852      	ldr	r2, [r2, #4]
 8010000:	619a      	str	r2, [r3, #24]
}
 8010002:	e021      	b.n	8010048 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8010004:	68bb      	ldr	r3, [r7, #8]
 8010006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010008:	2b00      	cmp	r3, #0
 801000a:	d01d      	beq.n	8010048 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801000c:	68bb      	ldr	r3, [r7, #8]
 801000e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010010:	68bb      	ldr	r3, [r7, #8]
 8010012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010014:	431a      	orrs	r2, r3
 8010016:	68bb      	ldr	r3, [r7, #8]
 8010018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801001a:	431a      	orrs	r2, r3
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010020:	431a      	orrs	r2, r3
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	695b      	ldr	r3, [r3, #20]
 8010026:	049b      	lsls	r3, r3, #18
 8010028:	431a      	orrs	r2, r3
 801002a:	68bb      	ldr	r3, [r7, #8]
 801002c:	6a1b      	ldr	r3, [r3, #32]
 801002e:	431a      	orrs	r2, r3
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	69db      	ldr	r3, [r3, #28]
 8010034:	431a      	orrs	r2, r3
 8010036:	68bb      	ldr	r3, [r7, #8]
 8010038:	699b      	ldr	r3, [r3, #24]
 801003a:	ea42 0103 	orr.w	r1, r2, r3
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	687a      	ldr	r2, [r7, #4]
 8010044:	430a      	orrs	r2, r1
 8010046:	615a      	str	r2, [r3, #20]
}
 8010048:	bf00      	nop
 801004a:	3714      	adds	r7, #20
 801004c:	46bd      	mov	sp, r7
 801004e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010052:	4770      	bx	lr

08010054 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b08c      	sub	sp, #48	; 0x30
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d102      	bne.n	8010068 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8010062:	2301      	movs	r3, #1
 8010064:	f000 bc1d 	b.w	80108a2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	f003 0301 	and.w	r3, r3, #1
 8010070:	2b00      	cmp	r3, #0
 8010072:	f000 8087 	beq.w	8010184 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010076:	4b99      	ldr	r3, [pc, #612]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 8010078:	691b      	ldr	r3, [r3, #16]
 801007a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801007e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010080:	4b96      	ldr	r3, [pc, #600]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 8010082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010084:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8010086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010088:	2b10      	cmp	r3, #16
 801008a:	d007      	beq.n	801009c <HAL_RCC_OscConfig+0x48>
 801008c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801008e:	2b18      	cmp	r3, #24
 8010090:	d110      	bne.n	80100b4 <HAL_RCC_OscConfig+0x60>
 8010092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010094:	f003 0303 	and.w	r3, r3, #3
 8010098:	2b02      	cmp	r3, #2
 801009a:	d10b      	bne.n	80100b4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801009c:	4b8f      	ldr	r3, [pc, #572]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d06c      	beq.n	8010182 <HAL_RCC_OscConfig+0x12e>
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	685b      	ldr	r3, [r3, #4]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d168      	bne.n	8010182 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80100b0:	2301      	movs	r3, #1
 80100b2:	e3f6      	b.n	80108a2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	685b      	ldr	r3, [r3, #4]
 80100b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80100bc:	d106      	bne.n	80100cc <HAL_RCC_OscConfig+0x78>
 80100be:	4b87      	ldr	r3, [pc, #540]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	4a86      	ldr	r2, [pc, #536]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 80100c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80100c8:	6013      	str	r3, [r2, #0]
 80100ca:	e02e      	b.n	801012a <HAL_RCC_OscConfig+0xd6>
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	685b      	ldr	r3, [r3, #4]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d10c      	bne.n	80100ee <HAL_RCC_OscConfig+0x9a>
 80100d4:	4b81      	ldr	r3, [pc, #516]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	4a80      	ldr	r2, [pc, #512]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 80100da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80100de:	6013      	str	r3, [r2, #0]
 80100e0:	4b7e      	ldr	r3, [pc, #504]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	4a7d      	ldr	r2, [pc, #500]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 80100e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80100ea:	6013      	str	r3, [r2, #0]
 80100ec:	e01d      	b.n	801012a <HAL_RCC_OscConfig+0xd6>
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	685b      	ldr	r3, [r3, #4]
 80100f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80100f6:	d10c      	bne.n	8010112 <HAL_RCC_OscConfig+0xbe>
 80100f8:	4b78      	ldr	r3, [pc, #480]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	4a77      	ldr	r2, [pc, #476]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 80100fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010102:	6013      	str	r3, [r2, #0]
 8010104:	4b75      	ldr	r3, [pc, #468]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	4a74      	ldr	r2, [pc, #464]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 801010a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801010e:	6013      	str	r3, [r2, #0]
 8010110:	e00b      	b.n	801012a <HAL_RCC_OscConfig+0xd6>
 8010112:	4b72      	ldr	r3, [pc, #456]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	4a71      	ldr	r2, [pc, #452]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 8010118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801011c:	6013      	str	r3, [r2, #0]
 801011e:	4b6f      	ldr	r3, [pc, #444]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	4a6e      	ldr	r2, [pc, #440]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 8010124:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010128:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	685b      	ldr	r3, [r3, #4]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d013      	beq.n	801015a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010132:	f7fc fe0b 	bl	800cd4c <HAL_GetTick>
 8010136:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010138:	e008      	b.n	801014c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801013a:	f7fc fe07 	bl	800cd4c <HAL_GetTick>
 801013e:	4602      	mov	r2, r0
 8010140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010142:	1ad3      	subs	r3, r2, r3
 8010144:	2b64      	cmp	r3, #100	; 0x64
 8010146:	d901      	bls.n	801014c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8010148:	2303      	movs	r3, #3
 801014a:	e3aa      	b.n	80108a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801014c:	4b63      	ldr	r3, [pc, #396]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010154:	2b00      	cmp	r3, #0
 8010156:	d0f0      	beq.n	801013a <HAL_RCC_OscConfig+0xe6>
 8010158:	e014      	b.n	8010184 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801015a:	f7fc fdf7 	bl	800cd4c <HAL_GetTick>
 801015e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010160:	e008      	b.n	8010174 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010162:	f7fc fdf3 	bl	800cd4c <HAL_GetTick>
 8010166:	4602      	mov	r2, r0
 8010168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801016a:	1ad3      	subs	r3, r2, r3
 801016c:	2b64      	cmp	r3, #100	; 0x64
 801016e:	d901      	bls.n	8010174 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8010170:	2303      	movs	r3, #3
 8010172:	e396      	b.n	80108a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010174:	4b59      	ldr	r3, [pc, #356]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801017c:	2b00      	cmp	r3, #0
 801017e:	d1f0      	bne.n	8010162 <HAL_RCC_OscConfig+0x10e>
 8010180:	e000      	b.n	8010184 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010182:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	f003 0302 	and.w	r3, r3, #2
 801018c:	2b00      	cmp	r3, #0
 801018e:	f000 80cb 	beq.w	8010328 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010192:	4b52      	ldr	r3, [pc, #328]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 8010194:	691b      	ldr	r3, [r3, #16]
 8010196:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801019a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801019c:	4b4f      	ldr	r3, [pc, #316]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 801019e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101a0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80101a2:	6a3b      	ldr	r3, [r7, #32]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d007      	beq.n	80101b8 <HAL_RCC_OscConfig+0x164>
 80101a8:	6a3b      	ldr	r3, [r7, #32]
 80101aa:	2b18      	cmp	r3, #24
 80101ac:	d156      	bne.n	801025c <HAL_RCC_OscConfig+0x208>
 80101ae:	69fb      	ldr	r3, [r7, #28]
 80101b0:	f003 0303 	and.w	r3, r3, #3
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d151      	bne.n	801025c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80101b8:	4b48      	ldr	r3, [pc, #288]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	f003 0304 	and.w	r3, r3, #4
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d005      	beq.n	80101d0 <HAL_RCC_OscConfig+0x17c>
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	68db      	ldr	r3, [r3, #12]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d101      	bne.n	80101d0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80101cc:	2301      	movs	r3, #1
 80101ce:	e368      	b.n	80108a2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80101d0:	4b42      	ldr	r3, [pc, #264]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	f023 0219 	bic.w	r2, r3, #25
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	68db      	ldr	r3, [r3, #12]
 80101dc:	493f      	ldr	r1, [pc, #252]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 80101de:	4313      	orrs	r3, r2
 80101e0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80101e2:	f7fc fdb3 	bl	800cd4c <HAL_GetTick>
 80101e6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80101e8:	e008      	b.n	80101fc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80101ea:	f7fc fdaf 	bl	800cd4c <HAL_GetTick>
 80101ee:	4602      	mov	r2, r0
 80101f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101f2:	1ad3      	subs	r3, r2, r3
 80101f4:	2b02      	cmp	r3, #2
 80101f6:	d901      	bls.n	80101fc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80101f8:	2303      	movs	r3, #3
 80101fa:	e352      	b.n	80108a2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80101fc:	4b37      	ldr	r3, [pc, #220]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	f003 0304 	and.w	r3, r3, #4
 8010204:	2b00      	cmp	r3, #0
 8010206:	d0f0      	beq.n	80101ea <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010208:	f7fc fdac 	bl	800cd64 <HAL_GetREVID>
 801020c:	4603      	mov	r3, r0
 801020e:	f241 0203 	movw	r2, #4099	; 0x1003
 8010212:	4293      	cmp	r3, r2
 8010214:	d817      	bhi.n	8010246 <HAL_RCC_OscConfig+0x1f2>
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	691b      	ldr	r3, [r3, #16]
 801021a:	2b40      	cmp	r3, #64	; 0x40
 801021c:	d108      	bne.n	8010230 <HAL_RCC_OscConfig+0x1dc>
 801021e:	4b2f      	ldr	r3, [pc, #188]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 8010220:	685b      	ldr	r3, [r3, #4]
 8010222:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8010226:	4a2d      	ldr	r2, [pc, #180]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 8010228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801022c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801022e:	e07b      	b.n	8010328 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010230:	4b2a      	ldr	r3, [pc, #168]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 8010232:	685b      	ldr	r3, [r3, #4]
 8010234:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	691b      	ldr	r3, [r3, #16]
 801023c:	031b      	lsls	r3, r3, #12
 801023e:	4927      	ldr	r1, [pc, #156]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 8010240:	4313      	orrs	r3, r2
 8010242:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010244:	e070      	b.n	8010328 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010246:	4b25      	ldr	r3, [pc, #148]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 8010248:	685b      	ldr	r3, [r3, #4]
 801024a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	691b      	ldr	r3, [r3, #16]
 8010252:	061b      	lsls	r3, r3, #24
 8010254:	4921      	ldr	r1, [pc, #132]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 8010256:	4313      	orrs	r3, r2
 8010258:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801025a:	e065      	b.n	8010328 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	68db      	ldr	r3, [r3, #12]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d048      	beq.n	80102f6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8010264:	4b1d      	ldr	r3, [pc, #116]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	f023 0219 	bic.w	r2, r3, #25
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	68db      	ldr	r3, [r3, #12]
 8010270:	491a      	ldr	r1, [pc, #104]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 8010272:	4313      	orrs	r3, r2
 8010274:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010276:	f7fc fd69 	bl	800cd4c <HAL_GetTick>
 801027a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801027c:	e008      	b.n	8010290 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801027e:	f7fc fd65 	bl	800cd4c <HAL_GetTick>
 8010282:	4602      	mov	r2, r0
 8010284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010286:	1ad3      	subs	r3, r2, r3
 8010288:	2b02      	cmp	r3, #2
 801028a:	d901      	bls.n	8010290 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 801028c:	2303      	movs	r3, #3
 801028e:	e308      	b.n	80108a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010290:	4b12      	ldr	r3, [pc, #72]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	f003 0304 	and.w	r3, r3, #4
 8010298:	2b00      	cmp	r3, #0
 801029a:	d0f0      	beq.n	801027e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801029c:	f7fc fd62 	bl	800cd64 <HAL_GetREVID>
 80102a0:	4603      	mov	r3, r0
 80102a2:	f241 0203 	movw	r2, #4099	; 0x1003
 80102a6:	4293      	cmp	r3, r2
 80102a8:	d81a      	bhi.n	80102e0 <HAL_RCC_OscConfig+0x28c>
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	691b      	ldr	r3, [r3, #16]
 80102ae:	2b40      	cmp	r3, #64	; 0x40
 80102b0:	d108      	bne.n	80102c4 <HAL_RCC_OscConfig+0x270>
 80102b2:	4b0a      	ldr	r3, [pc, #40]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 80102b4:	685b      	ldr	r3, [r3, #4]
 80102b6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80102ba:	4a08      	ldr	r2, [pc, #32]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 80102bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80102c0:	6053      	str	r3, [r2, #4]
 80102c2:	e031      	b.n	8010328 <HAL_RCC_OscConfig+0x2d4>
 80102c4:	4b05      	ldr	r3, [pc, #20]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 80102c6:	685b      	ldr	r3, [r3, #4]
 80102c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	691b      	ldr	r3, [r3, #16]
 80102d0:	031b      	lsls	r3, r3, #12
 80102d2:	4902      	ldr	r1, [pc, #8]	; (80102dc <HAL_RCC_OscConfig+0x288>)
 80102d4:	4313      	orrs	r3, r2
 80102d6:	604b      	str	r3, [r1, #4]
 80102d8:	e026      	b.n	8010328 <HAL_RCC_OscConfig+0x2d4>
 80102da:	bf00      	nop
 80102dc:	58024400 	.word	0x58024400
 80102e0:	4b9a      	ldr	r3, [pc, #616]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 80102e2:	685b      	ldr	r3, [r3, #4]
 80102e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	691b      	ldr	r3, [r3, #16]
 80102ec:	061b      	lsls	r3, r3, #24
 80102ee:	4997      	ldr	r1, [pc, #604]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 80102f0:	4313      	orrs	r3, r2
 80102f2:	604b      	str	r3, [r1, #4]
 80102f4:	e018      	b.n	8010328 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80102f6:	4b95      	ldr	r3, [pc, #596]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	4a94      	ldr	r2, [pc, #592]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 80102fc:	f023 0301 	bic.w	r3, r3, #1
 8010300:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010302:	f7fc fd23 	bl	800cd4c <HAL_GetTick>
 8010306:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8010308:	e008      	b.n	801031c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801030a:	f7fc fd1f 	bl	800cd4c <HAL_GetTick>
 801030e:	4602      	mov	r2, r0
 8010310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010312:	1ad3      	subs	r3, r2, r3
 8010314:	2b02      	cmp	r3, #2
 8010316:	d901      	bls.n	801031c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8010318:	2303      	movs	r3, #3
 801031a:	e2c2      	b.n	80108a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801031c:	4b8b      	ldr	r3, [pc, #556]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	f003 0304 	and.w	r3, r3, #4
 8010324:	2b00      	cmp	r3, #0
 8010326:	d1f0      	bne.n	801030a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	f003 0310 	and.w	r3, r3, #16
 8010330:	2b00      	cmp	r3, #0
 8010332:	f000 80a9 	beq.w	8010488 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010336:	4b85      	ldr	r3, [pc, #532]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 8010338:	691b      	ldr	r3, [r3, #16]
 801033a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801033e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010340:	4b82      	ldr	r3, [pc, #520]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 8010342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010344:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8010346:	69bb      	ldr	r3, [r7, #24]
 8010348:	2b08      	cmp	r3, #8
 801034a:	d007      	beq.n	801035c <HAL_RCC_OscConfig+0x308>
 801034c:	69bb      	ldr	r3, [r7, #24]
 801034e:	2b18      	cmp	r3, #24
 8010350:	d13a      	bne.n	80103c8 <HAL_RCC_OscConfig+0x374>
 8010352:	697b      	ldr	r3, [r7, #20]
 8010354:	f003 0303 	and.w	r3, r3, #3
 8010358:	2b01      	cmp	r3, #1
 801035a:	d135      	bne.n	80103c8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801035c:	4b7b      	ldr	r3, [pc, #492]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010364:	2b00      	cmp	r3, #0
 8010366:	d005      	beq.n	8010374 <HAL_RCC_OscConfig+0x320>
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	69db      	ldr	r3, [r3, #28]
 801036c:	2b80      	cmp	r3, #128	; 0x80
 801036e:	d001      	beq.n	8010374 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8010370:	2301      	movs	r3, #1
 8010372:	e296      	b.n	80108a2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8010374:	f7fc fcf6 	bl	800cd64 <HAL_GetREVID>
 8010378:	4603      	mov	r3, r0
 801037a:	f241 0203 	movw	r2, #4099	; 0x1003
 801037e:	4293      	cmp	r3, r2
 8010380:	d817      	bhi.n	80103b2 <HAL_RCC_OscConfig+0x35e>
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	6a1b      	ldr	r3, [r3, #32]
 8010386:	2b20      	cmp	r3, #32
 8010388:	d108      	bne.n	801039c <HAL_RCC_OscConfig+0x348>
 801038a:	4b70      	ldr	r3, [pc, #448]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 801038c:	685b      	ldr	r3, [r3, #4]
 801038e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8010392:	4a6e      	ldr	r2, [pc, #440]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 8010394:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010398:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801039a:	e075      	b.n	8010488 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801039c:	4b6b      	ldr	r3, [pc, #428]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 801039e:	685b      	ldr	r3, [r3, #4]
 80103a0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	6a1b      	ldr	r3, [r3, #32]
 80103a8:	069b      	lsls	r3, r3, #26
 80103aa:	4968      	ldr	r1, [pc, #416]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 80103ac:	4313      	orrs	r3, r2
 80103ae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80103b0:	e06a      	b.n	8010488 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80103b2:	4b66      	ldr	r3, [pc, #408]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 80103b4:	68db      	ldr	r3, [r3, #12]
 80103b6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	6a1b      	ldr	r3, [r3, #32]
 80103be:	061b      	lsls	r3, r3, #24
 80103c0:	4962      	ldr	r1, [pc, #392]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 80103c2:	4313      	orrs	r3, r2
 80103c4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80103c6:	e05f      	b.n	8010488 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	69db      	ldr	r3, [r3, #28]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d042      	beq.n	8010456 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80103d0:	4b5e      	ldr	r3, [pc, #376]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	4a5d      	ldr	r2, [pc, #372]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 80103d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80103dc:	f7fc fcb6 	bl	800cd4c <HAL_GetTick>
 80103e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80103e2:	e008      	b.n	80103f6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80103e4:	f7fc fcb2 	bl	800cd4c <HAL_GetTick>
 80103e8:	4602      	mov	r2, r0
 80103ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ec:	1ad3      	subs	r3, r2, r3
 80103ee:	2b02      	cmp	r3, #2
 80103f0:	d901      	bls.n	80103f6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80103f2:	2303      	movs	r3, #3
 80103f4:	e255      	b.n	80108a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80103f6:	4b55      	ldr	r3, [pc, #340]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d0f0      	beq.n	80103e4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8010402:	f7fc fcaf 	bl	800cd64 <HAL_GetREVID>
 8010406:	4603      	mov	r3, r0
 8010408:	f241 0203 	movw	r2, #4099	; 0x1003
 801040c:	4293      	cmp	r3, r2
 801040e:	d817      	bhi.n	8010440 <HAL_RCC_OscConfig+0x3ec>
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	6a1b      	ldr	r3, [r3, #32]
 8010414:	2b20      	cmp	r3, #32
 8010416:	d108      	bne.n	801042a <HAL_RCC_OscConfig+0x3d6>
 8010418:	4b4c      	ldr	r3, [pc, #304]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 801041a:	685b      	ldr	r3, [r3, #4]
 801041c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8010420:	4a4a      	ldr	r2, [pc, #296]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 8010422:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010426:	6053      	str	r3, [r2, #4]
 8010428:	e02e      	b.n	8010488 <HAL_RCC_OscConfig+0x434>
 801042a:	4b48      	ldr	r3, [pc, #288]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 801042c:	685b      	ldr	r3, [r3, #4]
 801042e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	6a1b      	ldr	r3, [r3, #32]
 8010436:	069b      	lsls	r3, r3, #26
 8010438:	4944      	ldr	r1, [pc, #272]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 801043a:	4313      	orrs	r3, r2
 801043c:	604b      	str	r3, [r1, #4]
 801043e:	e023      	b.n	8010488 <HAL_RCC_OscConfig+0x434>
 8010440:	4b42      	ldr	r3, [pc, #264]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 8010442:	68db      	ldr	r3, [r3, #12]
 8010444:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	6a1b      	ldr	r3, [r3, #32]
 801044c:	061b      	lsls	r3, r3, #24
 801044e:	493f      	ldr	r1, [pc, #252]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 8010450:	4313      	orrs	r3, r2
 8010452:	60cb      	str	r3, [r1, #12]
 8010454:	e018      	b.n	8010488 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8010456:	4b3d      	ldr	r3, [pc, #244]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	4a3c      	ldr	r2, [pc, #240]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 801045c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010462:	f7fc fc73 	bl	800cd4c <HAL_GetTick>
 8010466:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8010468:	e008      	b.n	801047c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 801046a:	f7fc fc6f 	bl	800cd4c <HAL_GetTick>
 801046e:	4602      	mov	r2, r0
 8010470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010472:	1ad3      	subs	r3, r2, r3
 8010474:	2b02      	cmp	r3, #2
 8010476:	d901      	bls.n	801047c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8010478:	2303      	movs	r3, #3
 801047a:	e212      	b.n	80108a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801047c:	4b33      	ldr	r3, [pc, #204]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010484:	2b00      	cmp	r3, #0
 8010486:	d1f0      	bne.n	801046a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	f003 0308 	and.w	r3, r3, #8
 8010490:	2b00      	cmp	r3, #0
 8010492:	d036      	beq.n	8010502 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	695b      	ldr	r3, [r3, #20]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d019      	beq.n	80104d0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801049c:	4b2b      	ldr	r3, [pc, #172]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 801049e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104a0:	4a2a      	ldr	r2, [pc, #168]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 80104a2:	f043 0301 	orr.w	r3, r3, #1
 80104a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80104a8:	f7fc fc50 	bl	800cd4c <HAL_GetTick>
 80104ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80104ae:	e008      	b.n	80104c2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80104b0:	f7fc fc4c 	bl	800cd4c <HAL_GetTick>
 80104b4:	4602      	mov	r2, r0
 80104b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104b8:	1ad3      	subs	r3, r2, r3
 80104ba:	2b02      	cmp	r3, #2
 80104bc:	d901      	bls.n	80104c2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80104be:	2303      	movs	r3, #3
 80104c0:	e1ef      	b.n	80108a2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80104c2:	4b22      	ldr	r3, [pc, #136]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 80104c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104c6:	f003 0302 	and.w	r3, r3, #2
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d0f0      	beq.n	80104b0 <HAL_RCC_OscConfig+0x45c>
 80104ce:	e018      	b.n	8010502 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80104d0:	4b1e      	ldr	r3, [pc, #120]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 80104d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104d4:	4a1d      	ldr	r2, [pc, #116]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 80104d6:	f023 0301 	bic.w	r3, r3, #1
 80104da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80104dc:	f7fc fc36 	bl	800cd4c <HAL_GetTick>
 80104e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80104e2:	e008      	b.n	80104f6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80104e4:	f7fc fc32 	bl	800cd4c <HAL_GetTick>
 80104e8:	4602      	mov	r2, r0
 80104ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ec:	1ad3      	subs	r3, r2, r3
 80104ee:	2b02      	cmp	r3, #2
 80104f0:	d901      	bls.n	80104f6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80104f2:	2303      	movs	r3, #3
 80104f4:	e1d5      	b.n	80108a2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80104f6:	4b15      	ldr	r3, [pc, #84]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 80104f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104fa:	f003 0302 	and.w	r3, r3, #2
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d1f0      	bne.n	80104e4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	f003 0320 	and.w	r3, r3, #32
 801050a:	2b00      	cmp	r3, #0
 801050c:	d039      	beq.n	8010582 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	699b      	ldr	r3, [r3, #24]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d01c      	beq.n	8010550 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8010516:	4b0d      	ldr	r3, [pc, #52]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	4a0c      	ldr	r2, [pc, #48]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 801051c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010520:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8010522:	f7fc fc13 	bl	800cd4c <HAL_GetTick>
 8010526:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8010528:	e008      	b.n	801053c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 801052a:	f7fc fc0f 	bl	800cd4c <HAL_GetTick>
 801052e:	4602      	mov	r2, r0
 8010530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010532:	1ad3      	subs	r3, r2, r3
 8010534:	2b02      	cmp	r3, #2
 8010536:	d901      	bls.n	801053c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8010538:	2303      	movs	r3, #3
 801053a:	e1b2      	b.n	80108a2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801053c:	4b03      	ldr	r3, [pc, #12]	; (801054c <HAL_RCC_OscConfig+0x4f8>)
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010544:	2b00      	cmp	r3, #0
 8010546:	d0f0      	beq.n	801052a <HAL_RCC_OscConfig+0x4d6>
 8010548:	e01b      	b.n	8010582 <HAL_RCC_OscConfig+0x52e>
 801054a:	bf00      	nop
 801054c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8010550:	4b9b      	ldr	r3, [pc, #620]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	4a9a      	ldr	r2, [pc, #616]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 8010556:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801055a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801055c:	f7fc fbf6 	bl	800cd4c <HAL_GetTick>
 8010560:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8010562:	e008      	b.n	8010576 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8010564:	f7fc fbf2 	bl	800cd4c <HAL_GetTick>
 8010568:	4602      	mov	r2, r0
 801056a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801056c:	1ad3      	subs	r3, r2, r3
 801056e:	2b02      	cmp	r3, #2
 8010570:	d901      	bls.n	8010576 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8010572:	2303      	movs	r3, #3
 8010574:	e195      	b.n	80108a2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8010576:	4b92      	ldr	r3, [pc, #584]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801057e:	2b00      	cmp	r3, #0
 8010580:	d1f0      	bne.n	8010564 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	f003 0304 	and.w	r3, r3, #4
 801058a:	2b00      	cmp	r3, #0
 801058c:	f000 8081 	beq.w	8010692 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8010590:	4b8c      	ldr	r3, [pc, #560]	; (80107c4 <HAL_RCC_OscConfig+0x770>)
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	4a8b      	ldr	r2, [pc, #556]	; (80107c4 <HAL_RCC_OscConfig+0x770>)
 8010596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801059a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801059c:	f7fc fbd6 	bl	800cd4c <HAL_GetTick>
 80105a0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80105a2:	e008      	b.n	80105b6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80105a4:	f7fc fbd2 	bl	800cd4c <HAL_GetTick>
 80105a8:	4602      	mov	r2, r0
 80105aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ac:	1ad3      	subs	r3, r2, r3
 80105ae:	2b64      	cmp	r3, #100	; 0x64
 80105b0:	d901      	bls.n	80105b6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80105b2:	2303      	movs	r3, #3
 80105b4:	e175      	b.n	80108a2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80105b6:	4b83      	ldr	r3, [pc, #524]	; (80107c4 <HAL_RCC_OscConfig+0x770>)
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d0f0      	beq.n	80105a4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	689b      	ldr	r3, [r3, #8]
 80105c6:	2b01      	cmp	r3, #1
 80105c8:	d106      	bne.n	80105d8 <HAL_RCC_OscConfig+0x584>
 80105ca:	4b7d      	ldr	r3, [pc, #500]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 80105cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105ce:	4a7c      	ldr	r2, [pc, #496]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 80105d0:	f043 0301 	orr.w	r3, r3, #1
 80105d4:	6713      	str	r3, [r2, #112]	; 0x70
 80105d6:	e02d      	b.n	8010634 <HAL_RCC_OscConfig+0x5e0>
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	689b      	ldr	r3, [r3, #8]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d10c      	bne.n	80105fa <HAL_RCC_OscConfig+0x5a6>
 80105e0:	4b77      	ldr	r3, [pc, #476]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 80105e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105e4:	4a76      	ldr	r2, [pc, #472]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 80105e6:	f023 0301 	bic.w	r3, r3, #1
 80105ea:	6713      	str	r3, [r2, #112]	; 0x70
 80105ec:	4b74      	ldr	r3, [pc, #464]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 80105ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105f0:	4a73      	ldr	r2, [pc, #460]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 80105f2:	f023 0304 	bic.w	r3, r3, #4
 80105f6:	6713      	str	r3, [r2, #112]	; 0x70
 80105f8:	e01c      	b.n	8010634 <HAL_RCC_OscConfig+0x5e0>
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	689b      	ldr	r3, [r3, #8]
 80105fe:	2b05      	cmp	r3, #5
 8010600:	d10c      	bne.n	801061c <HAL_RCC_OscConfig+0x5c8>
 8010602:	4b6f      	ldr	r3, [pc, #444]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 8010604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010606:	4a6e      	ldr	r2, [pc, #440]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 8010608:	f043 0304 	orr.w	r3, r3, #4
 801060c:	6713      	str	r3, [r2, #112]	; 0x70
 801060e:	4b6c      	ldr	r3, [pc, #432]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 8010610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010612:	4a6b      	ldr	r2, [pc, #428]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 8010614:	f043 0301 	orr.w	r3, r3, #1
 8010618:	6713      	str	r3, [r2, #112]	; 0x70
 801061a:	e00b      	b.n	8010634 <HAL_RCC_OscConfig+0x5e0>
 801061c:	4b68      	ldr	r3, [pc, #416]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 801061e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010620:	4a67      	ldr	r2, [pc, #412]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 8010622:	f023 0301 	bic.w	r3, r3, #1
 8010626:	6713      	str	r3, [r2, #112]	; 0x70
 8010628:	4b65      	ldr	r3, [pc, #404]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 801062a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801062c:	4a64      	ldr	r2, [pc, #400]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 801062e:	f023 0304 	bic.w	r3, r3, #4
 8010632:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	689b      	ldr	r3, [r3, #8]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d015      	beq.n	8010668 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801063c:	f7fc fb86 	bl	800cd4c <HAL_GetTick>
 8010640:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010642:	e00a      	b.n	801065a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010644:	f7fc fb82 	bl	800cd4c <HAL_GetTick>
 8010648:	4602      	mov	r2, r0
 801064a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801064c:	1ad3      	subs	r3, r2, r3
 801064e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010652:	4293      	cmp	r3, r2
 8010654:	d901      	bls.n	801065a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8010656:	2303      	movs	r3, #3
 8010658:	e123      	b.n	80108a2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801065a:	4b59      	ldr	r3, [pc, #356]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 801065c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801065e:	f003 0302 	and.w	r3, r3, #2
 8010662:	2b00      	cmp	r3, #0
 8010664:	d0ee      	beq.n	8010644 <HAL_RCC_OscConfig+0x5f0>
 8010666:	e014      	b.n	8010692 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010668:	f7fc fb70 	bl	800cd4c <HAL_GetTick>
 801066c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801066e:	e00a      	b.n	8010686 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010670:	f7fc fb6c 	bl	800cd4c <HAL_GetTick>
 8010674:	4602      	mov	r2, r0
 8010676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010678:	1ad3      	subs	r3, r2, r3
 801067a:	f241 3288 	movw	r2, #5000	; 0x1388
 801067e:	4293      	cmp	r3, r2
 8010680:	d901      	bls.n	8010686 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8010682:	2303      	movs	r3, #3
 8010684:	e10d      	b.n	80108a2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8010686:	4b4e      	ldr	r3, [pc, #312]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 8010688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801068a:	f003 0302 	and.w	r3, r3, #2
 801068e:	2b00      	cmp	r3, #0
 8010690:	d1ee      	bne.n	8010670 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010696:	2b00      	cmp	r3, #0
 8010698:	f000 8102 	beq.w	80108a0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801069c:	4b48      	ldr	r3, [pc, #288]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 801069e:	691b      	ldr	r3, [r3, #16]
 80106a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80106a4:	2b18      	cmp	r3, #24
 80106a6:	f000 80bd 	beq.w	8010824 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106ae:	2b02      	cmp	r3, #2
 80106b0:	f040 809e 	bne.w	80107f0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80106b4:	4b42      	ldr	r3, [pc, #264]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	4a41      	ldr	r2, [pc, #260]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 80106ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80106be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80106c0:	f7fc fb44 	bl	800cd4c <HAL_GetTick>
 80106c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80106c6:	e008      	b.n	80106da <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80106c8:	f7fc fb40 	bl	800cd4c <HAL_GetTick>
 80106cc:	4602      	mov	r2, r0
 80106ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d0:	1ad3      	subs	r3, r2, r3
 80106d2:	2b02      	cmp	r3, #2
 80106d4:	d901      	bls.n	80106da <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80106d6:	2303      	movs	r3, #3
 80106d8:	e0e3      	b.n	80108a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80106da:	4b39      	ldr	r3, [pc, #228]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d1f0      	bne.n	80106c8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80106e6:	4b36      	ldr	r3, [pc, #216]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 80106e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80106ea:	4b37      	ldr	r3, [pc, #220]	; (80107c8 <HAL_RCC_OscConfig+0x774>)
 80106ec:	4013      	ands	r3, r2
 80106ee:	687a      	ldr	r2, [r7, #4]
 80106f0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80106f2:	687a      	ldr	r2, [r7, #4]
 80106f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80106f6:	0112      	lsls	r2, r2, #4
 80106f8:	430a      	orrs	r2, r1
 80106fa:	4931      	ldr	r1, [pc, #196]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 80106fc:	4313      	orrs	r3, r2
 80106fe:	628b      	str	r3, [r1, #40]	; 0x28
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010704:	3b01      	subs	r3, #1
 8010706:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801070e:	3b01      	subs	r3, #1
 8010710:	025b      	lsls	r3, r3, #9
 8010712:	b29b      	uxth	r3, r3
 8010714:	431a      	orrs	r2, r3
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801071a:	3b01      	subs	r3, #1
 801071c:	041b      	lsls	r3, r3, #16
 801071e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8010722:	431a      	orrs	r2, r3
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010728:	3b01      	subs	r3, #1
 801072a:	061b      	lsls	r3, r3, #24
 801072c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010730:	4923      	ldr	r1, [pc, #140]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 8010732:	4313      	orrs	r3, r2
 8010734:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8010736:	4b22      	ldr	r3, [pc, #136]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 8010738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801073a:	4a21      	ldr	r2, [pc, #132]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 801073c:	f023 0301 	bic.w	r3, r3, #1
 8010740:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8010742:	4b1f      	ldr	r3, [pc, #124]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 8010744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010746:	4b21      	ldr	r3, [pc, #132]	; (80107cc <HAL_RCC_OscConfig+0x778>)
 8010748:	4013      	ands	r3, r2
 801074a:	687a      	ldr	r2, [r7, #4]
 801074c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801074e:	00d2      	lsls	r2, r2, #3
 8010750:	491b      	ldr	r1, [pc, #108]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 8010752:	4313      	orrs	r3, r2
 8010754:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8010756:	4b1a      	ldr	r3, [pc, #104]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 8010758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801075a:	f023 020c 	bic.w	r2, r3, #12
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010762:	4917      	ldr	r1, [pc, #92]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 8010764:	4313      	orrs	r3, r2
 8010766:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8010768:	4b15      	ldr	r3, [pc, #84]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 801076a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801076c:	f023 0202 	bic.w	r2, r3, #2
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010774:	4912      	ldr	r1, [pc, #72]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 8010776:	4313      	orrs	r3, r2
 8010778:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801077a:	4b11      	ldr	r3, [pc, #68]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 801077c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801077e:	4a10      	ldr	r2, [pc, #64]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 8010780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010784:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010786:	4b0e      	ldr	r3, [pc, #56]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 8010788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801078a:	4a0d      	ldr	r2, [pc, #52]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 801078c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010790:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8010792:	4b0b      	ldr	r3, [pc, #44]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 8010794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010796:	4a0a      	ldr	r2, [pc, #40]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 8010798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801079c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 801079e:	4b08      	ldr	r3, [pc, #32]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 80107a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107a2:	4a07      	ldr	r2, [pc, #28]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 80107a4:	f043 0301 	orr.w	r3, r3, #1
 80107a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80107aa:	4b05      	ldr	r3, [pc, #20]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	4a04      	ldr	r2, [pc, #16]	; (80107c0 <HAL_RCC_OscConfig+0x76c>)
 80107b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80107b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80107b6:	f7fc fac9 	bl	800cd4c <HAL_GetTick>
 80107ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80107bc:	e011      	b.n	80107e2 <HAL_RCC_OscConfig+0x78e>
 80107be:	bf00      	nop
 80107c0:	58024400 	.word	0x58024400
 80107c4:	58024800 	.word	0x58024800
 80107c8:	fffffc0c 	.word	0xfffffc0c
 80107cc:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80107d0:	f7fc fabc 	bl	800cd4c <HAL_GetTick>
 80107d4:	4602      	mov	r2, r0
 80107d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107d8:	1ad3      	subs	r3, r2, r3
 80107da:	2b02      	cmp	r3, #2
 80107dc:	d901      	bls.n	80107e2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80107de:	2303      	movs	r3, #3
 80107e0:	e05f      	b.n	80108a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80107e2:	4b32      	ldr	r3, [pc, #200]	; (80108ac <HAL_RCC_OscConfig+0x858>)
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d0f0      	beq.n	80107d0 <HAL_RCC_OscConfig+0x77c>
 80107ee:	e057      	b.n	80108a0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80107f0:	4b2e      	ldr	r3, [pc, #184]	; (80108ac <HAL_RCC_OscConfig+0x858>)
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	4a2d      	ldr	r2, [pc, #180]	; (80108ac <HAL_RCC_OscConfig+0x858>)
 80107f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80107fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80107fc:	f7fc faa6 	bl	800cd4c <HAL_GetTick>
 8010800:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010802:	e008      	b.n	8010816 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010804:	f7fc faa2 	bl	800cd4c <HAL_GetTick>
 8010808:	4602      	mov	r2, r0
 801080a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801080c:	1ad3      	subs	r3, r2, r3
 801080e:	2b02      	cmp	r3, #2
 8010810:	d901      	bls.n	8010816 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8010812:	2303      	movs	r3, #3
 8010814:	e045      	b.n	80108a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010816:	4b25      	ldr	r3, [pc, #148]	; (80108ac <HAL_RCC_OscConfig+0x858>)
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801081e:	2b00      	cmp	r3, #0
 8010820:	d1f0      	bne.n	8010804 <HAL_RCC_OscConfig+0x7b0>
 8010822:	e03d      	b.n	80108a0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8010824:	4b21      	ldr	r3, [pc, #132]	; (80108ac <HAL_RCC_OscConfig+0x858>)
 8010826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010828:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801082a:	4b20      	ldr	r3, [pc, #128]	; (80108ac <HAL_RCC_OscConfig+0x858>)
 801082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801082e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010834:	2b01      	cmp	r3, #1
 8010836:	d031      	beq.n	801089c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010838:	693b      	ldr	r3, [r7, #16]
 801083a:	f003 0203 	and.w	r2, r3, #3
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010842:	429a      	cmp	r2, r3
 8010844:	d12a      	bne.n	801089c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8010846:	693b      	ldr	r3, [r7, #16]
 8010848:	091b      	lsrs	r3, r3, #4
 801084a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010852:	429a      	cmp	r2, r3
 8010854:	d122      	bne.n	801089c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010860:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8010862:	429a      	cmp	r2, r3
 8010864:	d11a      	bne.n	801089c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	0a5b      	lsrs	r3, r3, #9
 801086a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010872:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8010874:	429a      	cmp	r2, r3
 8010876:	d111      	bne.n	801089c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	0c1b      	lsrs	r3, r3, #16
 801087c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010884:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8010886:	429a      	cmp	r2, r3
 8010888:	d108      	bne.n	801089c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	0e1b      	lsrs	r3, r3, #24
 801088e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010896:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8010898:	429a      	cmp	r2, r3
 801089a:	d001      	beq.n	80108a0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 801089c:	2301      	movs	r3, #1
 801089e:	e000      	b.n	80108a2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80108a0:	2300      	movs	r3, #0
}
 80108a2:	4618      	mov	r0, r3
 80108a4:	3730      	adds	r7, #48	; 0x30
 80108a6:	46bd      	mov	sp, r7
 80108a8:	bd80      	pop	{r7, pc}
 80108aa:	bf00      	nop
 80108ac:	58024400 	.word	0x58024400

080108b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b086      	sub	sp, #24
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
 80108b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d101      	bne.n	80108c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80108c0:	2301      	movs	r3, #1
 80108c2:	e19c      	b.n	8010bfe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80108c4:	4b8a      	ldr	r3, [pc, #552]	; (8010af0 <HAL_RCC_ClockConfig+0x240>)
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	f003 030f 	and.w	r3, r3, #15
 80108cc:	683a      	ldr	r2, [r7, #0]
 80108ce:	429a      	cmp	r2, r3
 80108d0:	d910      	bls.n	80108f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80108d2:	4b87      	ldr	r3, [pc, #540]	; (8010af0 <HAL_RCC_ClockConfig+0x240>)
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	f023 020f 	bic.w	r2, r3, #15
 80108da:	4985      	ldr	r1, [pc, #532]	; (8010af0 <HAL_RCC_ClockConfig+0x240>)
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	4313      	orrs	r3, r2
 80108e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80108e2:	4b83      	ldr	r3, [pc, #524]	; (8010af0 <HAL_RCC_ClockConfig+0x240>)
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	f003 030f 	and.w	r3, r3, #15
 80108ea:	683a      	ldr	r2, [r7, #0]
 80108ec:	429a      	cmp	r2, r3
 80108ee:	d001      	beq.n	80108f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80108f0:	2301      	movs	r3, #1
 80108f2:	e184      	b.n	8010bfe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	f003 0304 	and.w	r3, r3, #4
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d010      	beq.n	8010922 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	691a      	ldr	r2, [r3, #16]
 8010904:	4b7b      	ldr	r3, [pc, #492]	; (8010af4 <HAL_RCC_ClockConfig+0x244>)
 8010906:	699b      	ldr	r3, [r3, #24]
 8010908:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801090c:	429a      	cmp	r2, r3
 801090e:	d908      	bls.n	8010922 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8010910:	4b78      	ldr	r3, [pc, #480]	; (8010af4 <HAL_RCC_ClockConfig+0x244>)
 8010912:	699b      	ldr	r3, [r3, #24]
 8010914:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	691b      	ldr	r3, [r3, #16]
 801091c:	4975      	ldr	r1, [pc, #468]	; (8010af4 <HAL_RCC_ClockConfig+0x244>)
 801091e:	4313      	orrs	r3, r2
 8010920:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	f003 0308 	and.w	r3, r3, #8
 801092a:	2b00      	cmp	r3, #0
 801092c:	d010      	beq.n	8010950 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	695a      	ldr	r2, [r3, #20]
 8010932:	4b70      	ldr	r3, [pc, #448]	; (8010af4 <HAL_RCC_ClockConfig+0x244>)
 8010934:	69db      	ldr	r3, [r3, #28]
 8010936:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801093a:	429a      	cmp	r2, r3
 801093c:	d908      	bls.n	8010950 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801093e:	4b6d      	ldr	r3, [pc, #436]	; (8010af4 <HAL_RCC_ClockConfig+0x244>)
 8010940:	69db      	ldr	r3, [r3, #28]
 8010942:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	695b      	ldr	r3, [r3, #20]
 801094a:	496a      	ldr	r1, [pc, #424]	; (8010af4 <HAL_RCC_ClockConfig+0x244>)
 801094c:	4313      	orrs	r3, r2
 801094e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	f003 0310 	and.w	r3, r3, #16
 8010958:	2b00      	cmp	r3, #0
 801095a:	d010      	beq.n	801097e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	699a      	ldr	r2, [r3, #24]
 8010960:	4b64      	ldr	r3, [pc, #400]	; (8010af4 <HAL_RCC_ClockConfig+0x244>)
 8010962:	69db      	ldr	r3, [r3, #28]
 8010964:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010968:	429a      	cmp	r2, r3
 801096a:	d908      	bls.n	801097e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801096c:	4b61      	ldr	r3, [pc, #388]	; (8010af4 <HAL_RCC_ClockConfig+0x244>)
 801096e:	69db      	ldr	r3, [r3, #28]
 8010970:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	699b      	ldr	r3, [r3, #24]
 8010978:	495e      	ldr	r1, [pc, #376]	; (8010af4 <HAL_RCC_ClockConfig+0x244>)
 801097a:	4313      	orrs	r3, r2
 801097c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	f003 0320 	and.w	r3, r3, #32
 8010986:	2b00      	cmp	r3, #0
 8010988:	d010      	beq.n	80109ac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	69da      	ldr	r2, [r3, #28]
 801098e:	4b59      	ldr	r3, [pc, #356]	; (8010af4 <HAL_RCC_ClockConfig+0x244>)
 8010990:	6a1b      	ldr	r3, [r3, #32]
 8010992:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010996:	429a      	cmp	r2, r3
 8010998:	d908      	bls.n	80109ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 801099a:	4b56      	ldr	r3, [pc, #344]	; (8010af4 <HAL_RCC_ClockConfig+0x244>)
 801099c:	6a1b      	ldr	r3, [r3, #32]
 801099e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	69db      	ldr	r3, [r3, #28]
 80109a6:	4953      	ldr	r1, [pc, #332]	; (8010af4 <HAL_RCC_ClockConfig+0x244>)
 80109a8:	4313      	orrs	r3, r2
 80109aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	f003 0302 	and.w	r3, r3, #2
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d010      	beq.n	80109da <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	68da      	ldr	r2, [r3, #12]
 80109bc:	4b4d      	ldr	r3, [pc, #308]	; (8010af4 <HAL_RCC_ClockConfig+0x244>)
 80109be:	699b      	ldr	r3, [r3, #24]
 80109c0:	f003 030f 	and.w	r3, r3, #15
 80109c4:	429a      	cmp	r2, r3
 80109c6:	d908      	bls.n	80109da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80109c8:	4b4a      	ldr	r3, [pc, #296]	; (8010af4 <HAL_RCC_ClockConfig+0x244>)
 80109ca:	699b      	ldr	r3, [r3, #24]
 80109cc:	f023 020f 	bic.w	r2, r3, #15
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	68db      	ldr	r3, [r3, #12]
 80109d4:	4947      	ldr	r1, [pc, #284]	; (8010af4 <HAL_RCC_ClockConfig+0x244>)
 80109d6:	4313      	orrs	r3, r2
 80109d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	f003 0301 	and.w	r3, r3, #1
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d055      	beq.n	8010a92 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80109e6:	4b43      	ldr	r3, [pc, #268]	; (8010af4 <HAL_RCC_ClockConfig+0x244>)
 80109e8:	699b      	ldr	r3, [r3, #24]
 80109ea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	689b      	ldr	r3, [r3, #8]
 80109f2:	4940      	ldr	r1, [pc, #256]	; (8010af4 <HAL_RCC_ClockConfig+0x244>)
 80109f4:	4313      	orrs	r3, r2
 80109f6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	685b      	ldr	r3, [r3, #4]
 80109fc:	2b02      	cmp	r3, #2
 80109fe:	d107      	bne.n	8010a10 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010a00:	4b3c      	ldr	r3, [pc, #240]	; (8010af4 <HAL_RCC_ClockConfig+0x244>)
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d121      	bne.n	8010a50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8010a0c:	2301      	movs	r3, #1
 8010a0e:	e0f6      	b.n	8010bfe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	685b      	ldr	r3, [r3, #4]
 8010a14:	2b03      	cmp	r3, #3
 8010a16:	d107      	bne.n	8010a28 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010a18:	4b36      	ldr	r3, [pc, #216]	; (8010af4 <HAL_RCC_ClockConfig+0x244>)
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d115      	bne.n	8010a50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8010a24:	2301      	movs	r3, #1
 8010a26:	e0ea      	b.n	8010bfe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	685b      	ldr	r3, [r3, #4]
 8010a2c:	2b01      	cmp	r3, #1
 8010a2e:	d107      	bne.n	8010a40 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8010a30:	4b30      	ldr	r3, [pc, #192]	; (8010af4 <HAL_RCC_ClockConfig+0x244>)
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d109      	bne.n	8010a50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8010a3c:	2301      	movs	r3, #1
 8010a3e:	e0de      	b.n	8010bfe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010a40:	4b2c      	ldr	r3, [pc, #176]	; (8010af4 <HAL_RCC_ClockConfig+0x244>)
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	f003 0304 	and.w	r3, r3, #4
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d101      	bne.n	8010a50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8010a4c:	2301      	movs	r3, #1
 8010a4e:	e0d6      	b.n	8010bfe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010a50:	4b28      	ldr	r3, [pc, #160]	; (8010af4 <HAL_RCC_ClockConfig+0x244>)
 8010a52:	691b      	ldr	r3, [r3, #16]
 8010a54:	f023 0207 	bic.w	r2, r3, #7
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	685b      	ldr	r3, [r3, #4]
 8010a5c:	4925      	ldr	r1, [pc, #148]	; (8010af4 <HAL_RCC_ClockConfig+0x244>)
 8010a5e:	4313      	orrs	r3, r2
 8010a60:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010a62:	f7fc f973 	bl	800cd4c <HAL_GetTick>
 8010a66:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010a68:	e00a      	b.n	8010a80 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010a6a:	f7fc f96f 	bl	800cd4c <HAL_GetTick>
 8010a6e:	4602      	mov	r2, r0
 8010a70:	697b      	ldr	r3, [r7, #20]
 8010a72:	1ad3      	subs	r3, r2, r3
 8010a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a78:	4293      	cmp	r3, r2
 8010a7a:	d901      	bls.n	8010a80 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8010a7c:	2303      	movs	r3, #3
 8010a7e:	e0be      	b.n	8010bfe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010a80:	4b1c      	ldr	r3, [pc, #112]	; (8010af4 <HAL_RCC_ClockConfig+0x244>)
 8010a82:	691b      	ldr	r3, [r3, #16]
 8010a84:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	685b      	ldr	r3, [r3, #4]
 8010a8c:	00db      	lsls	r3, r3, #3
 8010a8e:	429a      	cmp	r2, r3
 8010a90:	d1eb      	bne.n	8010a6a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	f003 0302 	and.w	r3, r3, #2
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d010      	beq.n	8010ac0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	68da      	ldr	r2, [r3, #12]
 8010aa2:	4b14      	ldr	r3, [pc, #80]	; (8010af4 <HAL_RCC_ClockConfig+0x244>)
 8010aa4:	699b      	ldr	r3, [r3, #24]
 8010aa6:	f003 030f 	and.w	r3, r3, #15
 8010aaa:	429a      	cmp	r2, r3
 8010aac:	d208      	bcs.n	8010ac0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010aae:	4b11      	ldr	r3, [pc, #68]	; (8010af4 <HAL_RCC_ClockConfig+0x244>)
 8010ab0:	699b      	ldr	r3, [r3, #24]
 8010ab2:	f023 020f 	bic.w	r2, r3, #15
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	68db      	ldr	r3, [r3, #12]
 8010aba:	490e      	ldr	r1, [pc, #56]	; (8010af4 <HAL_RCC_ClockConfig+0x244>)
 8010abc:	4313      	orrs	r3, r2
 8010abe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8010ac0:	4b0b      	ldr	r3, [pc, #44]	; (8010af0 <HAL_RCC_ClockConfig+0x240>)
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	f003 030f 	and.w	r3, r3, #15
 8010ac8:	683a      	ldr	r2, [r7, #0]
 8010aca:	429a      	cmp	r2, r3
 8010acc:	d214      	bcs.n	8010af8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010ace:	4b08      	ldr	r3, [pc, #32]	; (8010af0 <HAL_RCC_ClockConfig+0x240>)
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	f023 020f 	bic.w	r2, r3, #15
 8010ad6:	4906      	ldr	r1, [pc, #24]	; (8010af0 <HAL_RCC_ClockConfig+0x240>)
 8010ad8:	683b      	ldr	r3, [r7, #0]
 8010ada:	4313      	orrs	r3, r2
 8010adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010ade:	4b04      	ldr	r3, [pc, #16]	; (8010af0 <HAL_RCC_ClockConfig+0x240>)
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	f003 030f 	and.w	r3, r3, #15
 8010ae6:	683a      	ldr	r2, [r7, #0]
 8010ae8:	429a      	cmp	r2, r3
 8010aea:	d005      	beq.n	8010af8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8010aec:	2301      	movs	r3, #1
 8010aee:	e086      	b.n	8010bfe <HAL_RCC_ClockConfig+0x34e>
 8010af0:	52002000 	.word	0x52002000
 8010af4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	f003 0304 	and.w	r3, r3, #4
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d010      	beq.n	8010b26 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	691a      	ldr	r2, [r3, #16]
 8010b08:	4b3f      	ldr	r3, [pc, #252]	; (8010c08 <HAL_RCC_ClockConfig+0x358>)
 8010b0a:	699b      	ldr	r3, [r3, #24]
 8010b0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010b10:	429a      	cmp	r2, r3
 8010b12:	d208      	bcs.n	8010b26 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8010b14:	4b3c      	ldr	r3, [pc, #240]	; (8010c08 <HAL_RCC_ClockConfig+0x358>)
 8010b16:	699b      	ldr	r3, [r3, #24]
 8010b18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	691b      	ldr	r3, [r3, #16]
 8010b20:	4939      	ldr	r1, [pc, #228]	; (8010c08 <HAL_RCC_ClockConfig+0x358>)
 8010b22:	4313      	orrs	r3, r2
 8010b24:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	f003 0308 	and.w	r3, r3, #8
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d010      	beq.n	8010b54 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	695a      	ldr	r2, [r3, #20]
 8010b36:	4b34      	ldr	r3, [pc, #208]	; (8010c08 <HAL_RCC_ClockConfig+0x358>)
 8010b38:	69db      	ldr	r3, [r3, #28]
 8010b3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010b3e:	429a      	cmp	r2, r3
 8010b40:	d208      	bcs.n	8010b54 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8010b42:	4b31      	ldr	r3, [pc, #196]	; (8010c08 <HAL_RCC_ClockConfig+0x358>)
 8010b44:	69db      	ldr	r3, [r3, #28]
 8010b46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	695b      	ldr	r3, [r3, #20]
 8010b4e:	492e      	ldr	r1, [pc, #184]	; (8010c08 <HAL_RCC_ClockConfig+0x358>)
 8010b50:	4313      	orrs	r3, r2
 8010b52:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	f003 0310 	and.w	r3, r3, #16
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d010      	beq.n	8010b82 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	699a      	ldr	r2, [r3, #24]
 8010b64:	4b28      	ldr	r3, [pc, #160]	; (8010c08 <HAL_RCC_ClockConfig+0x358>)
 8010b66:	69db      	ldr	r3, [r3, #28]
 8010b68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010b6c:	429a      	cmp	r2, r3
 8010b6e:	d208      	bcs.n	8010b82 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8010b70:	4b25      	ldr	r3, [pc, #148]	; (8010c08 <HAL_RCC_ClockConfig+0x358>)
 8010b72:	69db      	ldr	r3, [r3, #28]
 8010b74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	699b      	ldr	r3, [r3, #24]
 8010b7c:	4922      	ldr	r1, [pc, #136]	; (8010c08 <HAL_RCC_ClockConfig+0x358>)
 8010b7e:	4313      	orrs	r3, r2
 8010b80:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	f003 0320 	and.w	r3, r3, #32
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d010      	beq.n	8010bb0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	69da      	ldr	r2, [r3, #28]
 8010b92:	4b1d      	ldr	r3, [pc, #116]	; (8010c08 <HAL_RCC_ClockConfig+0x358>)
 8010b94:	6a1b      	ldr	r3, [r3, #32]
 8010b96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010b9a:	429a      	cmp	r2, r3
 8010b9c:	d208      	bcs.n	8010bb0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8010b9e:	4b1a      	ldr	r3, [pc, #104]	; (8010c08 <HAL_RCC_ClockConfig+0x358>)
 8010ba0:	6a1b      	ldr	r3, [r3, #32]
 8010ba2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	69db      	ldr	r3, [r3, #28]
 8010baa:	4917      	ldr	r1, [pc, #92]	; (8010c08 <HAL_RCC_ClockConfig+0x358>)
 8010bac:	4313      	orrs	r3, r2
 8010bae:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8010bb0:	f000 f89e 	bl	8010cf0 <HAL_RCC_GetSysClockFreq>
 8010bb4:	4602      	mov	r2, r0
 8010bb6:	4b14      	ldr	r3, [pc, #80]	; (8010c08 <HAL_RCC_ClockConfig+0x358>)
 8010bb8:	699b      	ldr	r3, [r3, #24]
 8010bba:	0a1b      	lsrs	r3, r3, #8
 8010bbc:	f003 030f 	and.w	r3, r3, #15
 8010bc0:	4912      	ldr	r1, [pc, #72]	; (8010c0c <HAL_RCC_ClockConfig+0x35c>)
 8010bc2:	5ccb      	ldrb	r3, [r1, r3]
 8010bc4:	f003 031f 	and.w	r3, r3, #31
 8010bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8010bcc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010bce:	4b0e      	ldr	r3, [pc, #56]	; (8010c08 <HAL_RCC_ClockConfig+0x358>)
 8010bd0:	699b      	ldr	r3, [r3, #24]
 8010bd2:	f003 030f 	and.w	r3, r3, #15
 8010bd6:	4a0d      	ldr	r2, [pc, #52]	; (8010c0c <HAL_RCC_ClockConfig+0x35c>)
 8010bd8:	5cd3      	ldrb	r3, [r2, r3]
 8010bda:	f003 031f 	and.w	r3, r3, #31
 8010bde:	693a      	ldr	r2, [r7, #16]
 8010be0:	fa22 f303 	lsr.w	r3, r2, r3
 8010be4:	4a0a      	ldr	r2, [pc, #40]	; (8010c10 <HAL_RCC_ClockConfig+0x360>)
 8010be6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8010be8:	4a0a      	ldr	r2, [pc, #40]	; (8010c14 <HAL_RCC_ClockConfig+0x364>)
 8010bea:	693b      	ldr	r3, [r7, #16]
 8010bec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8010bee:	4b0a      	ldr	r3, [pc, #40]	; (8010c18 <HAL_RCC_ClockConfig+0x368>)
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f7f0 fbae 	bl	8001354 <HAL_InitTick>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8010bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bfe:	4618      	mov	r0, r3
 8010c00:	3718      	adds	r7, #24
 8010c02:	46bd      	mov	sp, r7
 8010c04:	bd80      	pop	{r7, pc}
 8010c06:	bf00      	nop
 8010c08:	58024400 	.word	0x58024400
 8010c0c:	08027848 	.word	0x08027848
 8010c10:	24000014 	.word	0x24000014
 8010c14:	24000010 	.word	0x24000010
 8010c18:	24000048 	.word	0x24000048

08010c1c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b08c      	sub	sp, #48	; 0x30
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	60f8      	str	r0, [r7, #12]
 8010c24:	60b9      	str	r1, [r7, #8]
 8010c26:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d12a      	bne.n	8010c84 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8010c2e:	4b2d      	ldr	r3, [pc, #180]	; (8010ce4 <HAL_RCC_MCOConfig+0xc8>)
 8010c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010c34:	4a2b      	ldr	r2, [pc, #172]	; (8010ce4 <HAL_RCC_MCOConfig+0xc8>)
 8010c36:	f043 0301 	orr.w	r3, r3, #1
 8010c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010c3e:	4b29      	ldr	r3, [pc, #164]	; (8010ce4 <HAL_RCC_MCOConfig+0xc8>)
 8010c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010c44:	f003 0301 	and.w	r3, r3, #1
 8010c48:	61bb      	str	r3, [r7, #24]
 8010c4a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8010c4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010c52:	2302      	movs	r3, #2
 8010c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010c56:	2303      	movs	r3, #3
 8010c58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8010c62:	f107 031c 	add.w	r3, r7, #28
 8010c66:	4619      	mov	r1, r3
 8010c68:	481f      	ldr	r0, [pc, #124]	; (8010ce8 <HAL_RCC_MCOConfig+0xcc>)
 8010c6a:	f7fc fc73 	bl	800d554 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8010c6e:	4b1d      	ldr	r3, [pc, #116]	; (8010ce4 <HAL_RCC_MCOConfig+0xc8>)
 8010c70:	691b      	ldr	r3, [r3, #16]
 8010c72:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8010c76:	68b9      	ldr	r1, [r7, #8]
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	430b      	orrs	r3, r1
 8010c7c:	4919      	ldr	r1, [pc, #100]	; (8010ce4 <HAL_RCC_MCOConfig+0xc8>)
 8010c7e:	4313      	orrs	r3, r2
 8010c80:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8010c82:	e02a      	b.n	8010cda <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8010c84:	4b17      	ldr	r3, [pc, #92]	; (8010ce4 <HAL_RCC_MCOConfig+0xc8>)
 8010c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010c8a:	4a16      	ldr	r2, [pc, #88]	; (8010ce4 <HAL_RCC_MCOConfig+0xc8>)
 8010c8c:	f043 0304 	orr.w	r3, r3, #4
 8010c90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010c94:	4b13      	ldr	r3, [pc, #76]	; (8010ce4 <HAL_RCC_MCOConfig+0xc8>)
 8010c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010c9a:	f003 0304 	and.w	r3, r3, #4
 8010c9e:	617b      	str	r3, [r7, #20]
 8010ca0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8010ca2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010ca8:	2302      	movs	r3, #2
 8010caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010cac:	2303      	movs	r3, #3
 8010cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8010cb8:	f107 031c 	add.w	r3, r7, #28
 8010cbc:	4619      	mov	r1, r3
 8010cbe:	480b      	ldr	r0, [pc, #44]	; (8010cec <HAL_RCC_MCOConfig+0xd0>)
 8010cc0:	f7fc fc48 	bl	800d554 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8010cc4:	4b07      	ldr	r3, [pc, #28]	; (8010ce4 <HAL_RCC_MCOConfig+0xc8>)
 8010cc6:	691b      	ldr	r3, [r3, #16]
 8010cc8:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	01d9      	lsls	r1, r3, #7
 8010cd0:	68bb      	ldr	r3, [r7, #8]
 8010cd2:	430b      	orrs	r3, r1
 8010cd4:	4903      	ldr	r1, [pc, #12]	; (8010ce4 <HAL_RCC_MCOConfig+0xc8>)
 8010cd6:	4313      	orrs	r3, r2
 8010cd8:	610b      	str	r3, [r1, #16]
}
 8010cda:	bf00      	nop
 8010cdc:	3730      	adds	r7, #48	; 0x30
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}
 8010ce2:	bf00      	nop
 8010ce4:	58024400 	.word	0x58024400
 8010ce8:	58020000 	.word	0x58020000
 8010cec:	58020800 	.word	0x58020800

08010cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010cf0:	b480      	push	{r7}
 8010cf2:	b089      	sub	sp, #36	; 0x24
 8010cf4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010cf6:	4bb3      	ldr	r3, [pc, #716]	; (8010fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010cf8:	691b      	ldr	r3, [r3, #16]
 8010cfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010cfe:	2b18      	cmp	r3, #24
 8010d00:	f200 8155 	bhi.w	8010fae <HAL_RCC_GetSysClockFreq+0x2be>
 8010d04:	a201      	add	r2, pc, #4	; (adr r2, 8010d0c <HAL_RCC_GetSysClockFreq+0x1c>)
 8010d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d0a:	bf00      	nop
 8010d0c:	08010d71 	.word	0x08010d71
 8010d10:	08010faf 	.word	0x08010faf
 8010d14:	08010faf 	.word	0x08010faf
 8010d18:	08010faf 	.word	0x08010faf
 8010d1c:	08010faf 	.word	0x08010faf
 8010d20:	08010faf 	.word	0x08010faf
 8010d24:	08010faf 	.word	0x08010faf
 8010d28:	08010faf 	.word	0x08010faf
 8010d2c:	08010d97 	.word	0x08010d97
 8010d30:	08010faf 	.word	0x08010faf
 8010d34:	08010faf 	.word	0x08010faf
 8010d38:	08010faf 	.word	0x08010faf
 8010d3c:	08010faf 	.word	0x08010faf
 8010d40:	08010faf 	.word	0x08010faf
 8010d44:	08010faf 	.word	0x08010faf
 8010d48:	08010faf 	.word	0x08010faf
 8010d4c:	08010d9d 	.word	0x08010d9d
 8010d50:	08010faf 	.word	0x08010faf
 8010d54:	08010faf 	.word	0x08010faf
 8010d58:	08010faf 	.word	0x08010faf
 8010d5c:	08010faf 	.word	0x08010faf
 8010d60:	08010faf 	.word	0x08010faf
 8010d64:	08010faf 	.word	0x08010faf
 8010d68:	08010faf 	.word	0x08010faf
 8010d6c:	08010da3 	.word	0x08010da3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010d70:	4b94      	ldr	r3, [pc, #592]	; (8010fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	f003 0320 	and.w	r3, r3, #32
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d009      	beq.n	8010d90 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010d7c:	4b91      	ldr	r3, [pc, #580]	; (8010fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	08db      	lsrs	r3, r3, #3
 8010d82:	f003 0303 	and.w	r3, r3, #3
 8010d86:	4a90      	ldr	r2, [pc, #576]	; (8010fc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8010d88:	fa22 f303 	lsr.w	r3, r2, r3
 8010d8c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8010d8e:	e111      	b.n	8010fb4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8010d90:	4b8d      	ldr	r3, [pc, #564]	; (8010fc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8010d92:	61bb      	str	r3, [r7, #24]
    break;
 8010d94:	e10e      	b.n	8010fb4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8010d96:	4b8d      	ldr	r3, [pc, #564]	; (8010fcc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8010d98:	61bb      	str	r3, [r7, #24]
    break;
 8010d9a:	e10b      	b.n	8010fb4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8010d9c:	4b8c      	ldr	r3, [pc, #560]	; (8010fd0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8010d9e:	61bb      	str	r3, [r7, #24]
    break;
 8010da0:	e108      	b.n	8010fb4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010da2:	4b88      	ldr	r3, [pc, #544]	; (8010fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010da6:	f003 0303 	and.w	r3, r3, #3
 8010daa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8010dac:	4b85      	ldr	r3, [pc, #532]	; (8010fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010db0:	091b      	lsrs	r3, r3, #4
 8010db2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010db6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8010db8:	4b82      	ldr	r3, [pc, #520]	; (8010fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dbc:	f003 0301 	and.w	r3, r3, #1
 8010dc0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8010dc2:	4b80      	ldr	r3, [pc, #512]	; (8010fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dc6:	08db      	lsrs	r3, r3, #3
 8010dc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010dcc:	68fa      	ldr	r2, [r7, #12]
 8010dce:	fb02 f303 	mul.w	r3, r2, r3
 8010dd2:	ee07 3a90 	vmov	s15, r3
 8010dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010dda:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8010dde:	693b      	ldr	r3, [r7, #16]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	f000 80e1 	beq.w	8010fa8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8010de6:	697b      	ldr	r3, [r7, #20]
 8010de8:	2b02      	cmp	r3, #2
 8010dea:	f000 8083 	beq.w	8010ef4 <HAL_RCC_GetSysClockFreq+0x204>
 8010dee:	697b      	ldr	r3, [r7, #20]
 8010df0:	2b02      	cmp	r3, #2
 8010df2:	f200 80a1 	bhi.w	8010f38 <HAL_RCC_GetSysClockFreq+0x248>
 8010df6:	697b      	ldr	r3, [r7, #20]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d003      	beq.n	8010e04 <HAL_RCC_GetSysClockFreq+0x114>
 8010dfc:	697b      	ldr	r3, [r7, #20]
 8010dfe:	2b01      	cmp	r3, #1
 8010e00:	d056      	beq.n	8010eb0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8010e02:	e099      	b.n	8010f38 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010e04:	4b6f      	ldr	r3, [pc, #444]	; (8010fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	f003 0320 	and.w	r3, r3, #32
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d02d      	beq.n	8010e6c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010e10:	4b6c      	ldr	r3, [pc, #432]	; (8010fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	08db      	lsrs	r3, r3, #3
 8010e16:	f003 0303 	and.w	r3, r3, #3
 8010e1a:	4a6b      	ldr	r2, [pc, #428]	; (8010fc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8010e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8010e20:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	ee07 3a90 	vmov	s15, r3
 8010e28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e2c:	693b      	ldr	r3, [r7, #16]
 8010e2e:	ee07 3a90 	vmov	s15, r3
 8010e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e3a:	4b62      	ldr	r3, [pc, #392]	; (8010fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e42:	ee07 3a90 	vmov	s15, r3
 8010e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8010e4e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8010fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8010e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8010e6a:	e087      	b.n	8010f7c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010e6c:	693b      	ldr	r3, [r7, #16]
 8010e6e:	ee07 3a90 	vmov	s15, r3
 8010e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e76:	eddf 6a58 	vldr	s13, [pc, #352]	; 8010fd8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8010e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e7e:	4b51      	ldr	r3, [pc, #324]	; (8010fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e86:	ee07 3a90 	vmov	s15, r3
 8010e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8010e92:	eddf 5a50 	vldr	s11, [pc, #320]	; 8010fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8010e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010eaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010eae:	e065      	b.n	8010f7c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010eb0:	693b      	ldr	r3, [r7, #16]
 8010eb2:	ee07 3a90 	vmov	s15, r3
 8010eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010eba:	eddf 6a48 	vldr	s13, [pc, #288]	; 8010fdc <HAL_RCC_GetSysClockFreq+0x2ec>
 8010ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010ec2:	4b40      	ldr	r3, [pc, #256]	; (8010fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010eca:	ee07 3a90 	vmov	s15, r3
 8010ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010ed2:	ed97 6a02 	vldr	s12, [r7, #8]
 8010ed6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8010fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8010eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010ee2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010eee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010ef2:	e043      	b.n	8010f7c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010ef4:	693b      	ldr	r3, [r7, #16]
 8010ef6:	ee07 3a90 	vmov	s15, r3
 8010efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010efe:	eddf 6a38 	vldr	s13, [pc, #224]	; 8010fe0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8010f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010f06:	4b2f      	ldr	r3, [pc, #188]	; (8010fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f0e:	ee07 3a90 	vmov	s15, r3
 8010f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f16:	ed97 6a02 	vldr	s12, [r7, #8]
 8010f1a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8010fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8010f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010f36:	e021      	b.n	8010f7c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010f38:	693b      	ldr	r3, [r7, #16]
 8010f3a:	ee07 3a90 	vmov	s15, r3
 8010f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f42:	eddf 6a26 	vldr	s13, [pc, #152]	; 8010fdc <HAL_RCC_GetSysClockFreq+0x2ec>
 8010f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010f4a:	4b1e      	ldr	r3, [pc, #120]	; (8010fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f52:	ee07 3a90 	vmov	s15, r3
 8010f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8010f5e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8010fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8010f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010f7a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8010f7c:	4b11      	ldr	r3, [pc, #68]	; (8010fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f80:	0a5b      	lsrs	r3, r3, #9
 8010f82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f86:	3301      	adds	r3, #1
 8010f88:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	ee07 3a90 	vmov	s15, r3
 8010f90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010f94:	edd7 6a07 	vldr	s13, [r7, #28]
 8010f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010fa0:	ee17 3a90 	vmov	r3, s15
 8010fa4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8010fa6:	e005      	b.n	8010fb4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8010fa8:	2300      	movs	r3, #0
 8010faa:	61bb      	str	r3, [r7, #24]
    break;
 8010fac:	e002      	b.n	8010fb4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8010fae:	4b07      	ldr	r3, [pc, #28]	; (8010fcc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8010fb0:	61bb      	str	r3, [r7, #24]
    break;
 8010fb2:	bf00      	nop
  }

  return sysclockfreq;
 8010fb4:	69bb      	ldr	r3, [r7, #24]
}
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	3724      	adds	r7, #36	; 0x24
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc0:	4770      	bx	lr
 8010fc2:	bf00      	nop
 8010fc4:	58024400 	.word	0x58024400
 8010fc8:	03d09000 	.word	0x03d09000
 8010fcc:	003d0900 	.word	0x003d0900
 8010fd0:	017d7840 	.word	0x017d7840
 8010fd4:	46000000 	.word	0x46000000
 8010fd8:	4c742400 	.word	0x4c742400
 8010fdc:	4a742400 	.word	0x4a742400
 8010fe0:	4bbebc20 	.word	0x4bbebc20

08010fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b082      	sub	sp, #8
 8010fe8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8010fea:	f7ff fe81 	bl	8010cf0 <HAL_RCC_GetSysClockFreq>
 8010fee:	4602      	mov	r2, r0
 8010ff0:	4b10      	ldr	r3, [pc, #64]	; (8011034 <HAL_RCC_GetHCLKFreq+0x50>)
 8010ff2:	699b      	ldr	r3, [r3, #24]
 8010ff4:	0a1b      	lsrs	r3, r3, #8
 8010ff6:	f003 030f 	and.w	r3, r3, #15
 8010ffa:	490f      	ldr	r1, [pc, #60]	; (8011038 <HAL_RCC_GetHCLKFreq+0x54>)
 8010ffc:	5ccb      	ldrb	r3, [r1, r3]
 8010ffe:	f003 031f 	and.w	r3, r3, #31
 8011002:	fa22 f303 	lsr.w	r3, r2, r3
 8011006:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8011008:	4b0a      	ldr	r3, [pc, #40]	; (8011034 <HAL_RCC_GetHCLKFreq+0x50>)
 801100a:	699b      	ldr	r3, [r3, #24]
 801100c:	f003 030f 	and.w	r3, r3, #15
 8011010:	4a09      	ldr	r2, [pc, #36]	; (8011038 <HAL_RCC_GetHCLKFreq+0x54>)
 8011012:	5cd3      	ldrb	r3, [r2, r3]
 8011014:	f003 031f 	and.w	r3, r3, #31
 8011018:	687a      	ldr	r2, [r7, #4]
 801101a:	fa22 f303 	lsr.w	r3, r2, r3
 801101e:	4a07      	ldr	r2, [pc, #28]	; (801103c <HAL_RCC_GetHCLKFreq+0x58>)
 8011020:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011022:	4a07      	ldr	r2, [pc, #28]	; (8011040 <HAL_RCC_GetHCLKFreq+0x5c>)
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8011028:	4b04      	ldr	r3, [pc, #16]	; (801103c <HAL_RCC_GetHCLKFreq+0x58>)
 801102a:	681b      	ldr	r3, [r3, #0]
}
 801102c:	4618      	mov	r0, r3
 801102e:	3708      	adds	r7, #8
 8011030:	46bd      	mov	sp, r7
 8011032:	bd80      	pop	{r7, pc}
 8011034:	58024400 	.word	0x58024400
 8011038:	08027848 	.word	0x08027848
 801103c:	24000014 	.word	0x24000014
 8011040:	24000010 	.word	0x24000010

08011044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011044:	b580      	push	{r7, lr}
 8011046:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8011048:	f7ff ffcc 	bl	8010fe4 <HAL_RCC_GetHCLKFreq>
 801104c:	4602      	mov	r2, r0
 801104e:	4b06      	ldr	r3, [pc, #24]	; (8011068 <HAL_RCC_GetPCLK1Freq+0x24>)
 8011050:	69db      	ldr	r3, [r3, #28]
 8011052:	091b      	lsrs	r3, r3, #4
 8011054:	f003 0307 	and.w	r3, r3, #7
 8011058:	4904      	ldr	r1, [pc, #16]	; (801106c <HAL_RCC_GetPCLK1Freq+0x28>)
 801105a:	5ccb      	ldrb	r3, [r1, r3]
 801105c:	f003 031f 	and.w	r3, r3, #31
 8011060:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8011064:	4618      	mov	r0, r3
 8011066:	bd80      	pop	{r7, pc}
 8011068:	58024400 	.word	0x58024400
 801106c:	08027848 	.word	0x08027848

08011070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8011074:	f7ff ffb6 	bl	8010fe4 <HAL_RCC_GetHCLKFreq>
 8011078:	4602      	mov	r2, r0
 801107a:	4b06      	ldr	r3, [pc, #24]	; (8011094 <HAL_RCC_GetPCLK2Freq+0x24>)
 801107c:	69db      	ldr	r3, [r3, #28]
 801107e:	0a1b      	lsrs	r3, r3, #8
 8011080:	f003 0307 	and.w	r3, r3, #7
 8011084:	4904      	ldr	r1, [pc, #16]	; (8011098 <HAL_RCC_GetPCLK2Freq+0x28>)
 8011086:	5ccb      	ldrb	r3, [r1, r3]
 8011088:	f003 031f 	and.w	r3, r3, #31
 801108c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8011090:	4618      	mov	r0, r3
 8011092:	bd80      	pop	{r7, pc}
 8011094:	58024400 	.word	0x58024400
 8011098:	08027848 	.word	0x08027848

0801109c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 801109c:	b480      	push	{r7}
 801109e:	b083      	sub	sp, #12
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
 80110a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	223f      	movs	r2, #63	; 0x3f
 80110aa:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80110ac:	4b1a      	ldr	r3, [pc, #104]	; (8011118 <HAL_RCC_GetClockConfig+0x7c>)
 80110ae:	691b      	ldr	r3, [r3, #16]
 80110b0:	f003 0207 	and.w	r2, r3, #7
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80110b8:	4b17      	ldr	r3, [pc, #92]	; (8011118 <HAL_RCC_GetClockConfig+0x7c>)
 80110ba:	699b      	ldr	r3, [r3, #24]
 80110bc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80110c4:	4b14      	ldr	r3, [pc, #80]	; (8011118 <HAL_RCC_GetClockConfig+0x7c>)
 80110c6:	699b      	ldr	r3, [r3, #24]
 80110c8:	f003 020f 	and.w	r2, r3, #15
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80110d0:	4b11      	ldr	r3, [pc, #68]	; (8011118 <HAL_RCC_GetClockConfig+0x7c>)
 80110d2:	699b      	ldr	r3, [r3, #24]
 80110d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80110dc:	4b0e      	ldr	r3, [pc, #56]	; (8011118 <HAL_RCC_GetClockConfig+0x7c>)
 80110de:	69db      	ldr	r3, [r3, #28]
 80110e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80110e8:	4b0b      	ldr	r3, [pc, #44]	; (8011118 <HAL_RCC_GetClockConfig+0x7c>)
 80110ea:	69db      	ldr	r3, [r3, #28]
 80110ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80110f4:	4b08      	ldr	r3, [pc, #32]	; (8011118 <HAL_RCC_GetClockConfig+0x7c>)
 80110f6:	6a1b      	ldr	r3, [r3, #32]
 80110f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8011100:	4b06      	ldr	r3, [pc, #24]	; (801111c <HAL_RCC_GetClockConfig+0x80>)
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	f003 020f 	and.w	r2, r3, #15
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	601a      	str	r2, [r3, #0]
}
 801110c:	bf00      	nop
 801110e:	370c      	adds	r7, #12
 8011110:	46bd      	mov	sp, r7
 8011112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011116:	4770      	bx	lr
 8011118:	58024400 	.word	0x58024400
 801111c:	52002000 	.word	0x52002000

08011120 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b086      	sub	sp, #24
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8011128:	2300      	movs	r3, #0
 801112a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801112c:	2300      	movs	r3, #0
 801112e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011138:	2b00      	cmp	r3, #0
 801113a:	d03f      	beq.n	80111bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011140:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8011144:	d02a      	beq.n	801119c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8011146:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801114a:	d824      	bhi.n	8011196 <HAL_RCCEx_PeriphCLKConfig+0x76>
 801114c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011150:	d018      	beq.n	8011184 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8011152:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011156:	d81e      	bhi.n	8011196 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8011158:	2b00      	cmp	r3, #0
 801115a:	d003      	beq.n	8011164 <HAL_RCCEx_PeriphCLKConfig+0x44>
 801115c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011160:	d007      	beq.n	8011172 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8011162:	e018      	b.n	8011196 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011164:	4ba3      	ldr	r3, [pc, #652]	; (80113f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011168:	4aa2      	ldr	r2, [pc, #648]	; (80113f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801116a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801116e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8011170:	e015      	b.n	801119e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	3304      	adds	r3, #4
 8011176:	2102      	movs	r1, #2
 8011178:	4618      	mov	r0, r3
 801117a:	f000 ff17 	bl	8011fac <RCCEx_PLL2_Config>
 801117e:	4603      	mov	r3, r0
 8011180:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8011182:	e00c      	b.n	801119e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	3324      	adds	r3, #36	; 0x24
 8011188:	2102      	movs	r1, #2
 801118a:	4618      	mov	r0, r3
 801118c:	f000 ffc0 	bl	8012110 <RCCEx_PLL3_Config>
 8011190:	4603      	mov	r3, r0
 8011192:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8011194:	e003      	b.n	801119e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011196:	2301      	movs	r3, #1
 8011198:	75fb      	strb	r3, [r7, #23]
      break;
 801119a:	e000      	b.n	801119e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 801119c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801119e:	7dfb      	ldrb	r3, [r7, #23]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d109      	bne.n	80111b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80111a4:	4b93      	ldr	r3, [pc, #588]	; (80113f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80111a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80111a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80111b0:	4990      	ldr	r1, [pc, #576]	; (80113f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80111b2:	4313      	orrs	r3, r2
 80111b4:	650b      	str	r3, [r1, #80]	; 0x50
 80111b6:	e001      	b.n	80111bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80111b8:	7dfb      	ldrb	r3, [r7, #23]
 80111ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d03d      	beq.n	8011244 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111cc:	2b04      	cmp	r3, #4
 80111ce:	d826      	bhi.n	801121e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80111d0:	a201      	add	r2, pc, #4	; (adr r2, 80111d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80111d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111d6:	bf00      	nop
 80111d8:	080111ed 	.word	0x080111ed
 80111dc:	080111fb 	.word	0x080111fb
 80111e0:	0801120d 	.word	0x0801120d
 80111e4:	08011225 	.word	0x08011225
 80111e8:	08011225 	.word	0x08011225
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80111ec:	4b81      	ldr	r3, [pc, #516]	; (80113f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80111ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111f0:	4a80      	ldr	r2, [pc, #512]	; (80113f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80111f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80111f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80111f8:	e015      	b.n	8011226 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	3304      	adds	r3, #4
 80111fe:	2100      	movs	r1, #0
 8011200:	4618      	mov	r0, r3
 8011202:	f000 fed3 	bl	8011fac <RCCEx_PLL2_Config>
 8011206:	4603      	mov	r3, r0
 8011208:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801120a:	e00c      	b.n	8011226 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	3324      	adds	r3, #36	; 0x24
 8011210:	2100      	movs	r1, #0
 8011212:	4618      	mov	r0, r3
 8011214:	f000 ff7c 	bl	8012110 <RCCEx_PLL3_Config>
 8011218:	4603      	mov	r3, r0
 801121a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801121c:	e003      	b.n	8011226 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801121e:	2301      	movs	r3, #1
 8011220:	75fb      	strb	r3, [r7, #23]
      break;
 8011222:	e000      	b.n	8011226 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8011224:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011226:	7dfb      	ldrb	r3, [r7, #23]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d109      	bne.n	8011240 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801122c:	4b71      	ldr	r3, [pc, #452]	; (80113f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801122e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011230:	f023 0207 	bic.w	r2, r3, #7
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011238:	496e      	ldr	r1, [pc, #440]	; (80113f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801123a:	4313      	orrs	r3, r2
 801123c:	650b      	str	r3, [r1, #80]	; 0x50
 801123e:	e001      	b.n	8011244 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011240:	7dfb      	ldrb	r3, [r7, #23]
 8011242:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801124c:	2b00      	cmp	r3, #0
 801124e:	d042      	beq.n	80112d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011258:	d02b      	beq.n	80112b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 801125a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801125e:	d825      	bhi.n	80112ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8011260:	2bc0      	cmp	r3, #192	; 0xc0
 8011262:	d028      	beq.n	80112b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8011264:	2bc0      	cmp	r3, #192	; 0xc0
 8011266:	d821      	bhi.n	80112ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8011268:	2b80      	cmp	r3, #128	; 0x80
 801126a:	d016      	beq.n	801129a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 801126c:	2b80      	cmp	r3, #128	; 0x80
 801126e:	d81d      	bhi.n	80112ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8011270:	2b00      	cmp	r3, #0
 8011272:	d002      	beq.n	801127a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8011274:	2b40      	cmp	r3, #64	; 0x40
 8011276:	d007      	beq.n	8011288 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8011278:	e018      	b.n	80112ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801127a:	4b5e      	ldr	r3, [pc, #376]	; (80113f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801127c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801127e:	4a5d      	ldr	r2, [pc, #372]	; (80113f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011284:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8011286:	e017      	b.n	80112b8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	3304      	adds	r3, #4
 801128c:	2100      	movs	r1, #0
 801128e:	4618      	mov	r0, r3
 8011290:	f000 fe8c 	bl	8011fac <RCCEx_PLL2_Config>
 8011294:	4603      	mov	r3, r0
 8011296:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8011298:	e00e      	b.n	80112b8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	3324      	adds	r3, #36	; 0x24
 801129e:	2100      	movs	r1, #0
 80112a0:	4618      	mov	r0, r3
 80112a2:	f000 ff35 	bl	8012110 <RCCEx_PLL3_Config>
 80112a6:	4603      	mov	r3, r0
 80112a8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80112aa:	e005      	b.n	80112b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80112ac:	2301      	movs	r3, #1
 80112ae:	75fb      	strb	r3, [r7, #23]
      break;
 80112b0:	e002      	b.n	80112b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80112b2:	bf00      	nop
 80112b4:	e000      	b.n	80112b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80112b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80112b8:	7dfb      	ldrb	r3, [r7, #23]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d109      	bne.n	80112d2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80112be:	4b4d      	ldr	r3, [pc, #308]	; (80113f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80112c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80112c2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80112ca:	494a      	ldr	r1, [pc, #296]	; (80113f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80112cc:	4313      	orrs	r3, r2
 80112ce:	650b      	str	r3, [r1, #80]	; 0x50
 80112d0:	e001      	b.n	80112d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80112d2:	7dfb      	ldrb	r3, [r7, #23]
 80112d4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d049      	beq.n	8011376 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80112e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80112ec:	d030      	beq.n	8011350 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80112ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80112f2:	d82a      	bhi.n	801134a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80112f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80112f8:	d02c      	beq.n	8011354 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80112fa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80112fe:	d824      	bhi.n	801134a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8011300:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011304:	d018      	beq.n	8011338 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8011306:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801130a:	d81e      	bhi.n	801134a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 801130c:	2b00      	cmp	r3, #0
 801130e:	d003      	beq.n	8011318 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8011310:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011314:	d007      	beq.n	8011326 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8011316:	e018      	b.n	801134a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011318:	4b36      	ldr	r3, [pc, #216]	; (80113f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801131a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801131c:	4a35      	ldr	r2, [pc, #212]	; (80113f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801131e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011322:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8011324:	e017      	b.n	8011356 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	3304      	adds	r3, #4
 801132a:	2100      	movs	r1, #0
 801132c:	4618      	mov	r0, r3
 801132e:	f000 fe3d 	bl	8011fac <RCCEx_PLL2_Config>
 8011332:	4603      	mov	r3, r0
 8011334:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8011336:	e00e      	b.n	8011356 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	3324      	adds	r3, #36	; 0x24
 801133c:	2100      	movs	r1, #0
 801133e:	4618      	mov	r0, r3
 8011340:	f000 fee6 	bl	8012110 <RCCEx_PLL3_Config>
 8011344:	4603      	mov	r3, r0
 8011346:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8011348:	e005      	b.n	8011356 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 801134a:	2301      	movs	r3, #1
 801134c:	75fb      	strb	r3, [r7, #23]
      break;
 801134e:	e002      	b.n	8011356 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8011350:	bf00      	nop
 8011352:	e000      	b.n	8011356 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8011354:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011356:	7dfb      	ldrb	r3, [r7, #23]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d10a      	bne.n	8011372 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801135c:	4b25      	ldr	r3, [pc, #148]	; (80113f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801135e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011360:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801136a:	4922      	ldr	r1, [pc, #136]	; (80113f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801136c:	4313      	orrs	r3, r2
 801136e:	658b      	str	r3, [r1, #88]	; 0x58
 8011370:	e001      	b.n	8011376 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011372:	7dfb      	ldrb	r3, [r7, #23]
 8011374:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801137e:	2b00      	cmp	r3, #0
 8011380:	d04b      	beq.n	801141a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011388:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801138c:	d030      	beq.n	80113f0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 801138e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011392:	d82a      	bhi.n	80113ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8011394:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8011398:	d02e      	beq.n	80113f8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 801139a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801139e:	d824      	bhi.n	80113ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80113a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80113a4:	d018      	beq.n	80113d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80113a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80113aa:	d81e      	bhi.n	80113ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d003      	beq.n	80113b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80113b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80113b4:	d007      	beq.n	80113c6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80113b6:	e018      	b.n	80113ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80113b8:	4b0e      	ldr	r3, [pc, #56]	; (80113f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80113ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113bc:	4a0d      	ldr	r2, [pc, #52]	; (80113f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80113be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80113c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80113c4:	e019      	b.n	80113fa <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	3304      	adds	r3, #4
 80113ca:	2100      	movs	r1, #0
 80113cc:	4618      	mov	r0, r3
 80113ce:	f000 fded 	bl	8011fac <RCCEx_PLL2_Config>
 80113d2:	4603      	mov	r3, r0
 80113d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80113d6:	e010      	b.n	80113fa <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	3324      	adds	r3, #36	; 0x24
 80113dc:	2100      	movs	r1, #0
 80113de:	4618      	mov	r0, r3
 80113e0:	f000 fe96 	bl	8012110 <RCCEx_PLL3_Config>
 80113e4:	4603      	mov	r3, r0
 80113e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80113e8:	e007      	b.n	80113fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80113ea:	2301      	movs	r3, #1
 80113ec:	75fb      	strb	r3, [r7, #23]
      break;
 80113ee:	e004      	b.n	80113fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80113f0:	bf00      	nop
 80113f2:	e002      	b.n	80113fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80113f4:	58024400 	.word	0x58024400
      break;
 80113f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80113fa:	7dfb      	ldrb	r3, [r7, #23]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d10a      	bne.n	8011416 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8011400:	4b99      	ldr	r3, [pc, #612]	; (8011668 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011404:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801140e:	4996      	ldr	r1, [pc, #600]	; (8011668 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011410:	4313      	orrs	r3, r2
 8011412:	658b      	str	r3, [r1, #88]	; 0x58
 8011414:	e001      	b.n	801141a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011416:	7dfb      	ldrb	r3, [r7, #23]
 8011418:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011422:	2b00      	cmp	r3, #0
 8011424:	d032      	beq.n	801148c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801142a:	2b30      	cmp	r3, #48	; 0x30
 801142c:	d01c      	beq.n	8011468 <HAL_RCCEx_PeriphCLKConfig+0x348>
 801142e:	2b30      	cmp	r3, #48	; 0x30
 8011430:	d817      	bhi.n	8011462 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8011432:	2b20      	cmp	r3, #32
 8011434:	d00c      	beq.n	8011450 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8011436:	2b20      	cmp	r3, #32
 8011438:	d813      	bhi.n	8011462 <HAL_RCCEx_PeriphCLKConfig+0x342>
 801143a:	2b00      	cmp	r3, #0
 801143c:	d016      	beq.n	801146c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 801143e:	2b10      	cmp	r3, #16
 8011440:	d10f      	bne.n	8011462 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011442:	4b89      	ldr	r3, [pc, #548]	; (8011668 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011446:	4a88      	ldr	r2, [pc, #544]	; (8011668 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801144c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 801144e:	e00e      	b.n	801146e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	3304      	adds	r3, #4
 8011454:	2102      	movs	r1, #2
 8011456:	4618      	mov	r0, r3
 8011458:	f000 fda8 	bl	8011fac <RCCEx_PLL2_Config>
 801145c:	4603      	mov	r3, r0
 801145e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8011460:	e005      	b.n	801146e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8011462:	2301      	movs	r3, #1
 8011464:	75fb      	strb	r3, [r7, #23]
      break;
 8011466:	e002      	b.n	801146e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8011468:	bf00      	nop
 801146a:	e000      	b.n	801146e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 801146c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801146e:	7dfb      	ldrb	r3, [r7, #23]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d109      	bne.n	8011488 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8011474:	4b7c      	ldr	r3, [pc, #496]	; (8011668 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011478:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011480:	4979      	ldr	r1, [pc, #484]	; (8011668 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011482:	4313      	orrs	r3, r2
 8011484:	64cb      	str	r3, [r1, #76]	; 0x4c
 8011486:	e001      	b.n	801148c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011488:	7dfb      	ldrb	r3, [r7, #23]
 801148a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011494:	2b00      	cmp	r3, #0
 8011496:	d047      	beq.n	8011528 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801149c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80114a0:	d030      	beq.n	8011504 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80114a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80114a6:	d82a      	bhi.n	80114fe <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80114a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80114ac:	d02c      	beq.n	8011508 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80114ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80114b2:	d824      	bhi.n	80114fe <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80114b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80114b8:	d018      	beq.n	80114ec <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80114ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80114be:	d81e      	bhi.n	80114fe <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d003      	beq.n	80114cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80114c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80114c8:	d007      	beq.n	80114da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80114ca:	e018      	b.n	80114fe <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80114cc:	4b66      	ldr	r3, [pc, #408]	; (8011668 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80114ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114d0:	4a65      	ldr	r2, [pc, #404]	; (8011668 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80114d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80114d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80114d8:	e017      	b.n	801150a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	3304      	adds	r3, #4
 80114de:	2100      	movs	r1, #0
 80114e0:	4618      	mov	r0, r3
 80114e2:	f000 fd63 	bl	8011fac <RCCEx_PLL2_Config>
 80114e6:	4603      	mov	r3, r0
 80114e8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80114ea:	e00e      	b.n	801150a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	3324      	adds	r3, #36	; 0x24
 80114f0:	2100      	movs	r1, #0
 80114f2:	4618      	mov	r0, r3
 80114f4:	f000 fe0c 	bl	8012110 <RCCEx_PLL3_Config>
 80114f8:	4603      	mov	r3, r0
 80114fa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80114fc:	e005      	b.n	801150a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80114fe:	2301      	movs	r3, #1
 8011500:	75fb      	strb	r3, [r7, #23]
      break;
 8011502:	e002      	b.n	801150a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8011504:	bf00      	nop
 8011506:	e000      	b.n	801150a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8011508:	bf00      	nop
    }

    if(ret == HAL_OK)
 801150a:	7dfb      	ldrb	r3, [r7, #23]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d109      	bne.n	8011524 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8011510:	4b55      	ldr	r3, [pc, #340]	; (8011668 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011514:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801151c:	4952      	ldr	r1, [pc, #328]	; (8011668 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801151e:	4313      	orrs	r3, r2
 8011520:	650b      	str	r3, [r1, #80]	; 0x50
 8011522:	e001      	b.n	8011528 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011524:	7dfb      	ldrb	r3, [r7, #23]
 8011526:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011530:	2b00      	cmp	r3, #0
 8011532:	d049      	beq.n	80115c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801153c:	d02e      	beq.n	801159c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 801153e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011542:	d828      	bhi.n	8011596 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8011544:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011548:	d02a      	beq.n	80115a0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 801154a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801154e:	d822      	bhi.n	8011596 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8011550:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8011554:	d026      	beq.n	80115a4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8011556:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801155a:	d81c      	bhi.n	8011596 <HAL_RCCEx_PeriphCLKConfig+0x476>
 801155c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011560:	d010      	beq.n	8011584 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8011562:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011566:	d816      	bhi.n	8011596 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8011568:	2b00      	cmp	r3, #0
 801156a:	d01d      	beq.n	80115a8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 801156c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011570:	d111      	bne.n	8011596 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	3304      	adds	r3, #4
 8011576:	2101      	movs	r1, #1
 8011578:	4618      	mov	r0, r3
 801157a:	f000 fd17 	bl	8011fac <RCCEx_PLL2_Config>
 801157e:	4603      	mov	r3, r0
 8011580:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8011582:	e012      	b.n	80115aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	3324      	adds	r3, #36	; 0x24
 8011588:	2101      	movs	r1, #1
 801158a:	4618      	mov	r0, r3
 801158c:	f000 fdc0 	bl	8012110 <RCCEx_PLL3_Config>
 8011590:	4603      	mov	r3, r0
 8011592:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8011594:	e009      	b.n	80115aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011596:	2301      	movs	r3, #1
 8011598:	75fb      	strb	r3, [r7, #23]
      break;
 801159a:	e006      	b.n	80115aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 801159c:	bf00      	nop
 801159e:	e004      	b.n	80115aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80115a0:	bf00      	nop
 80115a2:	e002      	b.n	80115aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80115a4:	bf00      	nop
 80115a6:	e000      	b.n	80115aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80115a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80115aa:	7dfb      	ldrb	r3, [r7, #23]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d109      	bne.n	80115c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80115b0:	4b2d      	ldr	r3, [pc, #180]	; (8011668 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80115b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80115b4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80115bc:	492a      	ldr	r1, [pc, #168]	; (8011668 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80115be:	4313      	orrs	r3, r2
 80115c0:	650b      	str	r3, [r1, #80]	; 0x50
 80115c2:	e001      	b.n	80115c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80115c4:	7dfb      	ldrb	r3, [r7, #23]
 80115c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d04d      	beq.n	8011670 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80115da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80115de:	d02e      	beq.n	801163e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80115e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80115e4:	d828      	bhi.n	8011638 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80115e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80115ea:	d02a      	beq.n	8011642 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80115ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80115f0:	d822      	bhi.n	8011638 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80115f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80115f6:	d026      	beq.n	8011646 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80115f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80115fc:	d81c      	bhi.n	8011638 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80115fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011602:	d010      	beq.n	8011626 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8011604:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011608:	d816      	bhi.n	8011638 <HAL_RCCEx_PeriphCLKConfig+0x518>
 801160a:	2b00      	cmp	r3, #0
 801160c:	d01d      	beq.n	801164a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 801160e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011612:	d111      	bne.n	8011638 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	3304      	adds	r3, #4
 8011618:	2101      	movs	r1, #1
 801161a:	4618      	mov	r0, r3
 801161c:	f000 fcc6 	bl	8011fac <RCCEx_PLL2_Config>
 8011620:	4603      	mov	r3, r0
 8011622:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8011624:	e012      	b.n	801164c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	3324      	adds	r3, #36	; 0x24
 801162a:	2101      	movs	r1, #1
 801162c:	4618      	mov	r0, r3
 801162e:	f000 fd6f 	bl	8012110 <RCCEx_PLL3_Config>
 8011632:	4603      	mov	r3, r0
 8011634:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8011636:	e009      	b.n	801164c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8011638:	2301      	movs	r3, #1
 801163a:	75fb      	strb	r3, [r7, #23]
      break;
 801163c:	e006      	b.n	801164c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 801163e:	bf00      	nop
 8011640:	e004      	b.n	801164c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8011642:	bf00      	nop
 8011644:	e002      	b.n	801164c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8011646:	bf00      	nop
 8011648:	e000      	b.n	801164c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 801164a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801164c:	7dfb      	ldrb	r3, [r7, #23]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d10c      	bne.n	801166c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8011652:	4b05      	ldr	r3, [pc, #20]	; (8011668 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011656:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011660:	4901      	ldr	r1, [pc, #4]	; (8011668 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011662:	4313      	orrs	r3, r2
 8011664:	658b      	str	r3, [r1, #88]	; 0x58
 8011666:	e003      	b.n	8011670 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8011668:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801166c:	7dfb      	ldrb	r3, [r7, #23]
 801166e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011678:	2b00      	cmp	r3, #0
 801167a:	d02f      	beq.n	80116dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011680:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011684:	d00e      	beq.n	80116a4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8011686:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801168a:	d814      	bhi.n	80116b6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 801168c:	2b00      	cmp	r3, #0
 801168e:	d015      	beq.n	80116bc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8011690:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011694:	d10f      	bne.n	80116b6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011696:	4baf      	ldr	r3, [pc, #700]	; (8011954 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801169a:	4aae      	ldr	r2, [pc, #696]	; (8011954 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801169c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80116a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80116a2:	e00c      	b.n	80116be <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	3304      	adds	r3, #4
 80116a8:	2101      	movs	r1, #1
 80116aa:	4618      	mov	r0, r3
 80116ac:	f000 fc7e 	bl	8011fac <RCCEx_PLL2_Config>
 80116b0:	4603      	mov	r3, r0
 80116b2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80116b4:	e003      	b.n	80116be <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80116b6:	2301      	movs	r3, #1
 80116b8:	75fb      	strb	r3, [r7, #23]
      break;
 80116ba:	e000      	b.n	80116be <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80116bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80116be:	7dfb      	ldrb	r3, [r7, #23]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d109      	bne.n	80116d8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80116c4:	4ba3      	ldr	r3, [pc, #652]	; (8011954 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80116c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80116c8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116d0:	49a0      	ldr	r1, [pc, #640]	; (8011954 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80116d2:	4313      	orrs	r3, r2
 80116d4:	650b      	str	r3, [r1, #80]	; 0x50
 80116d6:	e001      	b.n	80116dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80116d8:	7dfb      	ldrb	r3, [r7, #23]
 80116da:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d032      	beq.n	801174e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116ec:	2b03      	cmp	r3, #3
 80116ee:	d81b      	bhi.n	8011728 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80116f0:	a201      	add	r2, pc, #4	; (adr r2, 80116f8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80116f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116f6:	bf00      	nop
 80116f8:	0801172f 	.word	0x0801172f
 80116fc:	08011709 	.word	0x08011709
 8011700:	08011717 	.word	0x08011717
 8011704:	0801172f 	.word	0x0801172f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011708:	4b92      	ldr	r3, [pc, #584]	; (8011954 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801170c:	4a91      	ldr	r2, [pc, #580]	; (8011954 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801170e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011712:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8011714:	e00c      	b.n	8011730 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	3304      	adds	r3, #4
 801171a:	2102      	movs	r1, #2
 801171c:	4618      	mov	r0, r3
 801171e:	f000 fc45 	bl	8011fac <RCCEx_PLL2_Config>
 8011722:	4603      	mov	r3, r0
 8011724:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8011726:	e003      	b.n	8011730 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8011728:	2301      	movs	r3, #1
 801172a:	75fb      	strb	r3, [r7, #23]
      break;
 801172c:	e000      	b.n	8011730 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 801172e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011730:	7dfb      	ldrb	r3, [r7, #23]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d109      	bne.n	801174a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8011736:	4b87      	ldr	r3, [pc, #540]	; (8011954 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801173a:	f023 0203 	bic.w	r2, r3, #3
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011742:	4984      	ldr	r1, [pc, #528]	; (8011954 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011744:	4313      	orrs	r3, r2
 8011746:	64cb      	str	r3, [r1, #76]	; 0x4c
 8011748:	e001      	b.n	801174e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801174a:	7dfb      	ldrb	r3, [r7, #23]
 801174c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011756:	2b00      	cmp	r3, #0
 8011758:	f000 8086 	beq.w	8011868 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801175c:	4b7e      	ldr	r3, [pc, #504]	; (8011958 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	4a7d      	ldr	r2, [pc, #500]	; (8011958 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8011762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011766:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8011768:	f7fb faf0 	bl	800cd4c <HAL_GetTick>
 801176c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801176e:	e009      	b.n	8011784 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011770:	f7fb faec 	bl	800cd4c <HAL_GetTick>
 8011774:	4602      	mov	r2, r0
 8011776:	693b      	ldr	r3, [r7, #16]
 8011778:	1ad3      	subs	r3, r2, r3
 801177a:	2b64      	cmp	r3, #100	; 0x64
 801177c:	d902      	bls.n	8011784 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 801177e:	2303      	movs	r3, #3
 8011780:	75fb      	strb	r3, [r7, #23]
        break;
 8011782:	e005      	b.n	8011790 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011784:	4b74      	ldr	r3, [pc, #464]	; (8011958 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801178c:	2b00      	cmp	r3, #0
 801178e:	d0ef      	beq.n	8011770 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8011790:	7dfb      	ldrb	r3, [r7, #23]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d166      	bne.n	8011864 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8011796:	4b6f      	ldr	r3, [pc, #444]	; (8011954 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011798:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80117a0:	4053      	eors	r3, r2
 80117a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d013      	beq.n	80117d2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80117aa:	4b6a      	ldr	r3, [pc, #424]	; (8011954 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80117ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80117b2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80117b4:	4b67      	ldr	r3, [pc, #412]	; (8011954 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80117b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117b8:	4a66      	ldr	r2, [pc, #408]	; (8011954 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80117ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80117be:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80117c0:	4b64      	ldr	r3, [pc, #400]	; (8011954 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80117c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117c4:	4a63      	ldr	r2, [pc, #396]	; (8011954 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80117c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80117ca:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80117cc:	4a61      	ldr	r2, [pc, #388]	; (8011954 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80117d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80117dc:	d115      	bne.n	801180a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80117de:	f7fb fab5 	bl	800cd4c <HAL_GetTick>
 80117e2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80117e4:	e00b      	b.n	80117fe <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80117e6:	f7fb fab1 	bl	800cd4c <HAL_GetTick>
 80117ea:	4602      	mov	r2, r0
 80117ec:	693b      	ldr	r3, [r7, #16]
 80117ee:	1ad3      	subs	r3, r2, r3
 80117f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80117f4:	4293      	cmp	r3, r2
 80117f6:	d902      	bls.n	80117fe <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80117f8:	2303      	movs	r3, #3
 80117fa:	75fb      	strb	r3, [r7, #23]
            break;
 80117fc:	e005      	b.n	801180a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80117fe:	4b55      	ldr	r3, [pc, #340]	; (8011954 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011802:	f003 0302 	and.w	r3, r3, #2
 8011806:	2b00      	cmp	r3, #0
 8011808:	d0ed      	beq.n	80117e6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 801180a:	7dfb      	ldrb	r3, [r7, #23]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d126      	bne.n	801185e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801181a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801181e:	d10d      	bne.n	801183c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8011820:	4b4c      	ldr	r3, [pc, #304]	; (8011954 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011822:	691b      	ldr	r3, [r3, #16]
 8011824:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801182e:	0919      	lsrs	r1, r3, #4
 8011830:	4b4a      	ldr	r3, [pc, #296]	; (801195c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8011832:	400b      	ands	r3, r1
 8011834:	4947      	ldr	r1, [pc, #284]	; (8011954 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011836:	4313      	orrs	r3, r2
 8011838:	610b      	str	r3, [r1, #16]
 801183a:	e005      	b.n	8011848 <HAL_RCCEx_PeriphCLKConfig+0x728>
 801183c:	4b45      	ldr	r3, [pc, #276]	; (8011954 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801183e:	691b      	ldr	r3, [r3, #16]
 8011840:	4a44      	ldr	r2, [pc, #272]	; (8011954 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011842:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011846:	6113      	str	r3, [r2, #16]
 8011848:	4b42      	ldr	r3, [pc, #264]	; (8011954 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801184a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011856:	493f      	ldr	r1, [pc, #252]	; (8011954 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011858:	4313      	orrs	r3, r2
 801185a:	670b      	str	r3, [r1, #112]	; 0x70
 801185c:	e004      	b.n	8011868 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801185e:	7dfb      	ldrb	r3, [r7, #23]
 8011860:	75bb      	strb	r3, [r7, #22]
 8011862:	e001      	b.n	8011868 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011864:	7dfb      	ldrb	r3, [r7, #23]
 8011866:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	f003 0301 	and.w	r3, r3, #1
 8011870:	2b00      	cmp	r3, #0
 8011872:	f000 8085 	beq.w	8011980 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801187a:	2b28      	cmp	r3, #40	; 0x28
 801187c:	d866      	bhi.n	801194c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 801187e:	a201      	add	r2, pc, #4	; (adr r2, 8011884 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8011880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011884:	08011961 	.word	0x08011961
 8011888:	0801194d 	.word	0x0801194d
 801188c:	0801194d 	.word	0x0801194d
 8011890:	0801194d 	.word	0x0801194d
 8011894:	0801194d 	.word	0x0801194d
 8011898:	0801194d 	.word	0x0801194d
 801189c:	0801194d 	.word	0x0801194d
 80118a0:	0801194d 	.word	0x0801194d
 80118a4:	08011929 	.word	0x08011929
 80118a8:	0801194d 	.word	0x0801194d
 80118ac:	0801194d 	.word	0x0801194d
 80118b0:	0801194d 	.word	0x0801194d
 80118b4:	0801194d 	.word	0x0801194d
 80118b8:	0801194d 	.word	0x0801194d
 80118bc:	0801194d 	.word	0x0801194d
 80118c0:	0801194d 	.word	0x0801194d
 80118c4:	0801193b 	.word	0x0801193b
 80118c8:	0801194d 	.word	0x0801194d
 80118cc:	0801194d 	.word	0x0801194d
 80118d0:	0801194d 	.word	0x0801194d
 80118d4:	0801194d 	.word	0x0801194d
 80118d8:	0801194d 	.word	0x0801194d
 80118dc:	0801194d 	.word	0x0801194d
 80118e0:	0801194d 	.word	0x0801194d
 80118e4:	08011961 	.word	0x08011961
 80118e8:	0801194d 	.word	0x0801194d
 80118ec:	0801194d 	.word	0x0801194d
 80118f0:	0801194d 	.word	0x0801194d
 80118f4:	0801194d 	.word	0x0801194d
 80118f8:	0801194d 	.word	0x0801194d
 80118fc:	0801194d 	.word	0x0801194d
 8011900:	0801194d 	.word	0x0801194d
 8011904:	08011961 	.word	0x08011961
 8011908:	0801194d 	.word	0x0801194d
 801190c:	0801194d 	.word	0x0801194d
 8011910:	0801194d 	.word	0x0801194d
 8011914:	0801194d 	.word	0x0801194d
 8011918:	0801194d 	.word	0x0801194d
 801191c:	0801194d 	.word	0x0801194d
 8011920:	0801194d 	.word	0x0801194d
 8011924:	08011961 	.word	0x08011961
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	3304      	adds	r3, #4
 801192c:	2101      	movs	r1, #1
 801192e:	4618      	mov	r0, r3
 8011930:	f000 fb3c 	bl	8011fac <RCCEx_PLL2_Config>
 8011934:	4603      	mov	r3, r0
 8011936:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8011938:	e013      	b.n	8011962 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	3324      	adds	r3, #36	; 0x24
 801193e:	2101      	movs	r1, #1
 8011940:	4618      	mov	r0, r3
 8011942:	f000 fbe5 	bl	8012110 <RCCEx_PLL3_Config>
 8011946:	4603      	mov	r3, r0
 8011948:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 801194a:	e00a      	b.n	8011962 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801194c:	2301      	movs	r3, #1
 801194e:	75fb      	strb	r3, [r7, #23]
      break;
 8011950:	e007      	b.n	8011962 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8011952:	bf00      	nop
 8011954:	58024400 	.word	0x58024400
 8011958:	58024800 	.word	0x58024800
 801195c:	00ffffcf 	.word	0x00ffffcf
      break;
 8011960:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011962:	7dfb      	ldrb	r3, [r7, #23]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d109      	bne.n	801197c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8011968:	4b96      	ldr	r3, [pc, #600]	; (8011bc4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 801196a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801196c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011974:	4993      	ldr	r1, [pc, #588]	; (8011bc4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8011976:	4313      	orrs	r3, r2
 8011978:	654b      	str	r3, [r1, #84]	; 0x54
 801197a:	e001      	b.n	8011980 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801197c:	7dfb      	ldrb	r3, [r7, #23]
 801197e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	f003 0302 	and.w	r3, r3, #2
 8011988:	2b00      	cmp	r3, #0
 801198a:	d038      	beq.n	80119fe <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011990:	2b05      	cmp	r3, #5
 8011992:	d821      	bhi.n	80119d8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8011994:	a201      	add	r2, pc, #4	; (adr r2, 801199c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8011996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801199a:	bf00      	nop
 801199c:	080119df 	.word	0x080119df
 80119a0:	080119b5 	.word	0x080119b5
 80119a4:	080119c7 	.word	0x080119c7
 80119a8:	080119df 	.word	0x080119df
 80119ac:	080119df 	.word	0x080119df
 80119b0:	080119df 	.word	0x080119df
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	3304      	adds	r3, #4
 80119b8:	2101      	movs	r1, #1
 80119ba:	4618      	mov	r0, r3
 80119bc:	f000 faf6 	bl	8011fac <RCCEx_PLL2_Config>
 80119c0:	4603      	mov	r3, r0
 80119c2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80119c4:	e00c      	b.n	80119e0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	3324      	adds	r3, #36	; 0x24
 80119ca:	2101      	movs	r1, #1
 80119cc:	4618      	mov	r0, r3
 80119ce:	f000 fb9f 	bl	8012110 <RCCEx_PLL3_Config>
 80119d2:	4603      	mov	r3, r0
 80119d4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80119d6:	e003      	b.n	80119e0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80119d8:	2301      	movs	r3, #1
 80119da:	75fb      	strb	r3, [r7, #23]
      break;
 80119dc:	e000      	b.n	80119e0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80119de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80119e0:	7dfb      	ldrb	r3, [r7, #23]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d109      	bne.n	80119fa <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80119e6:	4b77      	ldr	r3, [pc, #476]	; (8011bc4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80119e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80119ea:	f023 0207 	bic.w	r2, r3, #7
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80119f2:	4974      	ldr	r1, [pc, #464]	; (8011bc4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80119f4:	4313      	orrs	r3, r2
 80119f6:	654b      	str	r3, [r1, #84]	; 0x54
 80119f8:	e001      	b.n	80119fe <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80119fa:	7dfb      	ldrb	r3, [r7, #23]
 80119fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	f003 0304 	and.w	r3, r3, #4
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d03a      	beq.n	8011a80 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a10:	2b05      	cmp	r3, #5
 8011a12:	d821      	bhi.n	8011a58 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8011a14:	a201      	add	r2, pc, #4	; (adr r2, 8011a1c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8011a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a1a:	bf00      	nop
 8011a1c:	08011a5f 	.word	0x08011a5f
 8011a20:	08011a35 	.word	0x08011a35
 8011a24:	08011a47 	.word	0x08011a47
 8011a28:	08011a5f 	.word	0x08011a5f
 8011a2c:	08011a5f 	.word	0x08011a5f
 8011a30:	08011a5f 	.word	0x08011a5f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	3304      	adds	r3, #4
 8011a38:	2101      	movs	r1, #1
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f000 fab6 	bl	8011fac <RCCEx_PLL2_Config>
 8011a40:	4603      	mov	r3, r0
 8011a42:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8011a44:	e00c      	b.n	8011a60 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	3324      	adds	r3, #36	; 0x24
 8011a4a:	2101      	movs	r1, #1
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	f000 fb5f 	bl	8012110 <RCCEx_PLL3_Config>
 8011a52:	4603      	mov	r3, r0
 8011a54:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8011a56:	e003      	b.n	8011a60 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011a58:	2301      	movs	r3, #1
 8011a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8011a5c:	e000      	b.n	8011a60 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8011a5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011a60:	7dfb      	ldrb	r3, [r7, #23]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d10a      	bne.n	8011a7c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8011a66:	4b57      	ldr	r3, [pc, #348]	; (8011bc4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8011a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a6a:	f023 0207 	bic.w	r2, r3, #7
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a74:	4953      	ldr	r1, [pc, #332]	; (8011bc4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8011a76:	4313      	orrs	r3, r2
 8011a78:	658b      	str	r3, [r1, #88]	; 0x58
 8011a7a:	e001      	b.n	8011a80 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011a7c:	7dfb      	ldrb	r3, [r7, #23]
 8011a7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	f003 0320 	and.w	r3, r3, #32
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d04b      	beq.n	8011b24 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011a96:	d02e      	beq.n	8011af6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8011a98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011a9c:	d828      	bhi.n	8011af0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8011a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011aa2:	d02a      	beq.n	8011afa <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8011aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011aa8:	d822      	bhi.n	8011af0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8011aaa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011aae:	d026      	beq.n	8011afe <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8011ab0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011ab4:	d81c      	bhi.n	8011af0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8011ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011aba:	d010      	beq.n	8011ade <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8011abc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011ac0:	d816      	bhi.n	8011af0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d01d      	beq.n	8011b02 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8011ac6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011aca:	d111      	bne.n	8011af0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	3304      	adds	r3, #4
 8011ad0:	2100      	movs	r1, #0
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	f000 fa6a 	bl	8011fac <RCCEx_PLL2_Config>
 8011ad8:	4603      	mov	r3, r0
 8011ada:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8011adc:	e012      	b.n	8011b04 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	3324      	adds	r3, #36	; 0x24
 8011ae2:	2102      	movs	r1, #2
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	f000 fb13 	bl	8012110 <RCCEx_PLL3_Config>
 8011aea:	4603      	mov	r3, r0
 8011aec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8011aee:	e009      	b.n	8011b04 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011af0:	2301      	movs	r3, #1
 8011af2:	75fb      	strb	r3, [r7, #23]
      break;
 8011af4:	e006      	b.n	8011b04 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8011af6:	bf00      	nop
 8011af8:	e004      	b.n	8011b04 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8011afa:	bf00      	nop
 8011afc:	e002      	b.n	8011b04 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8011afe:	bf00      	nop
 8011b00:	e000      	b.n	8011b04 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8011b02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011b04:	7dfb      	ldrb	r3, [r7, #23]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d10a      	bne.n	8011b20 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8011b0a:	4b2e      	ldr	r3, [pc, #184]	; (8011bc4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8011b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b0e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b18:	492a      	ldr	r1, [pc, #168]	; (8011bc4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8011b1a:	4313      	orrs	r3, r2
 8011b1c:	654b      	str	r3, [r1, #84]	; 0x54
 8011b1e:	e001      	b.n	8011b24 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011b20:	7dfb      	ldrb	r3, [r7, #23]
 8011b22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d04d      	beq.n	8011bcc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011b36:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8011b3a:	d02e      	beq.n	8011b9a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8011b3c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8011b40:	d828      	bhi.n	8011b94 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8011b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011b46:	d02a      	beq.n	8011b9e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8011b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011b4c:	d822      	bhi.n	8011b94 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8011b4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011b52:	d026      	beq.n	8011ba2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8011b54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011b58:	d81c      	bhi.n	8011b94 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8011b5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011b5e:	d010      	beq.n	8011b82 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8011b60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011b64:	d816      	bhi.n	8011b94 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d01d      	beq.n	8011ba6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8011b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011b6e:	d111      	bne.n	8011b94 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	3304      	adds	r3, #4
 8011b74:	2100      	movs	r1, #0
 8011b76:	4618      	mov	r0, r3
 8011b78:	f000 fa18 	bl	8011fac <RCCEx_PLL2_Config>
 8011b7c:	4603      	mov	r3, r0
 8011b7e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8011b80:	e012      	b.n	8011ba8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	3324      	adds	r3, #36	; 0x24
 8011b86:	2102      	movs	r1, #2
 8011b88:	4618      	mov	r0, r3
 8011b8a:	f000 fac1 	bl	8012110 <RCCEx_PLL3_Config>
 8011b8e:	4603      	mov	r3, r0
 8011b90:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8011b92:	e009      	b.n	8011ba8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011b94:	2301      	movs	r3, #1
 8011b96:	75fb      	strb	r3, [r7, #23]
      break;
 8011b98:	e006      	b.n	8011ba8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8011b9a:	bf00      	nop
 8011b9c:	e004      	b.n	8011ba8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8011b9e:	bf00      	nop
 8011ba0:	e002      	b.n	8011ba8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8011ba2:	bf00      	nop
 8011ba4:	e000      	b.n	8011ba8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8011ba6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011ba8:	7dfb      	ldrb	r3, [r7, #23]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d10c      	bne.n	8011bc8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8011bae:	4b05      	ldr	r3, [pc, #20]	; (8011bc4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8011bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011bb2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011bbc:	4901      	ldr	r1, [pc, #4]	; (8011bc4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8011bbe:	4313      	orrs	r3, r2
 8011bc0:	658b      	str	r3, [r1, #88]	; 0x58
 8011bc2:	e003      	b.n	8011bcc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8011bc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011bc8:	7dfb      	ldrb	r3, [r7, #23]
 8011bca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d04b      	beq.n	8011c70 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011bde:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8011be2:	d02e      	beq.n	8011c42 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8011be4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8011be8:	d828      	bhi.n	8011c3c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8011bea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011bee:	d02a      	beq.n	8011c46 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8011bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011bf4:	d822      	bhi.n	8011c3c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8011bf6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8011bfa:	d026      	beq.n	8011c4a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8011bfc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8011c00:	d81c      	bhi.n	8011c3c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8011c02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011c06:	d010      	beq.n	8011c2a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8011c08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011c0c:	d816      	bhi.n	8011c3c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d01d      	beq.n	8011c4e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8011c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011c16:	d111      	bne.n	8011c3c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	3304      	adds	r3, #4
 8011c1c:	2100      	movs	r1, #0
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f000 f9c4 	bl	8011fac <RCCEx_PLL2_Config>
 8011c24:	4603      	mov	r3, r0
 8011c26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8011c28:	e012      	b.n	8011c50 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	3324      	adds	r3, #36	; 0x24
 8011c2e:	2102      	movs	r1, #2
 8011c30:	4618      	mov	r0, r3
 8011c32:	f000 fa6d 	bl	8012110 <RCCEx_PLL3_Config>
 8011c36:	4603      	mov	r3, r0
 8011c38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8011c3a:	e009      	b.n	8011c50 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011c3c:	2301      	movs	r3, #1
 8011c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8011c40:	e006      	b.n	8011c50 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8011c42:	bf00      	nop
 8011c44:	e004      	b.n	8011c50 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8011c46:	bf00      	nop
 8011c48:	e002      	b.n	8011c50 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8011c4a:	bf00      	nop
 8011c4c:	e000      	b.n	8011c50 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8011c4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011c50:	7dfb      	ldrb	r3, [r7, #23]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d10a      	bne.n	8011c6c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8011c56:	4b9d      	ldr	r3, [pc, #628]	; (8011ecc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011c5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011c64:	4999      	ldr	r1, [pc, #612]	; (8011ecc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011c66:	4313      	orrs	r3, r2
 8011c68:	658b      	str	r3, [r1, #88]	; 0x58
 8011c6a:	e001      	b.n	8011c70 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011c6c:	7dfb      	ldrb	r3, [r7, #23]
 8011c6e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	f003 0308 	and.w	r3, r3, #8
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d01a      	beq.n	8011cb2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011c86:	d10a      	bne.n	8011c9e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	3324      	adds	r3, #36	; 0x24
 8011c8c:	2102      	movs	r1, #2
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f000 fa3e 	bl	8012110 <RCCEx_PLL3_Config>
 8011c94:	4603      	mov	r3, r0
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d001      	beq.n	8011c9e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8011c9a:	2301      	movs	r3, #1
 8011c9c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8011c9e:	4b8b      	ldr	r3, [pc, #556]	; (8011ecc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ca2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011cac:	4987      	ldr	r1, [pc, #540]	; (8011ecc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011cae:	4313      	orrs	r3, r2
 8011cb0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	f003 0310 	and.w	r3, r3, #16
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d01a      	beq.n	8011cf4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011cc8:	d10a      	bne.n	8011ce0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	3324      	adds	r3, #36	; 0x24
 8011cce:	2102      	movs	r1, #2
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	f000 fa1d 	bl	8012110 <RCCEx_PLL3_Config>
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d001      	beq.n	8011ce0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8011cdc:	2301      	movs	r3, #1
 8011cde:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8011ce0:	4b7a      	ldr	r3, [pc, #488]	; (8011ecc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ce4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011cee:	4977      	ldr	r1, [pc, #476]	; (8011ecc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011cf0:	4313      	orrs	r3, r2
 8011cf2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d034      	beq.n	8011d6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011d06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011d0a:	d01d      	beq.n	8011d48 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8011d0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011d10:	d817      	bhi.n	8011d42 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d003      	beq.n	8011d1e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8011d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011d1a:	d009      	beq.n	8011d30 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8011d1c:	e011      	b.n	8011d42 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	3304      	adds	r3, #4
 8011d22:	2100      	movs	r1, #0
 8011d24:	4618      	mov	r0, r3
 8011d26:	f000 f941 	bl	8011fac <RCCEx_PLL2_Config>
 8011d2a:	4603      	mov	r3, r0
 8011d2c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8011d2e:	e00c      	b.n	8011d4a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	3324      	adds	r3, #36	; 0x24
 8011d34:	2102      	movs	r1, #2
 8011d36:	4618      	mov	r0, r3
 8011d38:	f000 f9ea 	bl	8012110 <RCCEx_PLL3_Config>
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8011d40:	e003      	b.n	8011d4a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011d42:	2301      	movs	r3, #1
 8011d44:	75fb      	strb	r3, [r7, #23]
      break;
 8011d46:	e000      	b.n	8011d4a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8011d48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011d4a:	7dfb      	ldrb	r3, [r7, #23]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d10a      	bne.n	8011d66 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8011d50:	4b5e      	ldr	r3, [pc, #376]	; (8011ecc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011d5e:	495b      	ldr	r1, [pc, #364]	; (8011ecc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011d60:	4313      	orrs	r3, r2
 8011d62:	658b      	str	r3, [r1, #88]	; 0x58
 8011d64:	e001      	b.n	8011d6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011d66:	7dfb      	ldrb	r3, [r7, #23]
 8011d68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d033      	beq.n	8011dde <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011d7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8011d80:	d01c      	beq.n	8011dbc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8011d82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8011d86:	d816      	bhi.n	8011db6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8011d88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011d8c:	d003      	beq.n	8011d96 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8011d8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011d92:	d007      	beq.n	8011da4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8011d94:	e00f      	b.n	8011db6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011d96:	4b4d      	ldr	r3, [pc, #308]	; (8011ecc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d9a:	4a4c      	ldr	r2, [pc, #304]	; (8011ecc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011da0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8011da2:	e00c      	b.n	8011dbe <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	3324      	adds	r3, #36	; 0x24
 8011da8:	2101      	movs	r1, #1
 8011daa:	4618      	mov	r0, r3
 8011dac:	f000 f9b0 	bl	8012110 <RCCEx_PLL3_Config>
 8011db0:	4603      	mov	r3, r0
 8011db2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8011db4:	e003      	b.n	8011dbe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011db6:	2301      	movs	r3, #1
 8011db8:	75fb      	strb	r3, [r7, #23]
      break;
 8011dba:	e000      	b.n	8011dbe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8011dbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011dbe:	7dfb      	ldrb	r3, [r7, #23]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d10a      	bne.n	8011dda <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8011dc4:	4b41      	ldr	r3, [pc, #260]	; (8011ecc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011dc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011dd2:	493e      	ldr	r1, [pc, #248]	; (8011ecc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011dd4:	4313      	orrs	r3, r2
 8011dd6:	654b      	str	r3, [r1, #84]	; 0x54
 8011dd8:	e001      	b.n	8011dde <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011dda:	7dfb      	ldrb	r3, [r7, #23]
 8011ddc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d029      	beq.n	8011e3e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d003      	beq.n	8011dfa <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8011df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011df6:	d007      	beq.n	8011e08 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8011df8:	e00f      	b.n	8011e1a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011dfa:	4b34      	ldr	r3, [pc, #208]	; (8011ecc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dfe:	4a33      	ldr	r2, [pc, #204]	; (8011ecc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011e04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8011e06:	e00b      	b.n	8011e20 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	3304      	adds	r3, #4
 8011e0c:	2102      	movs	r1, #2
 8011e0e:	4618      	mov	r0, r3
 8011e10:	f000 f8cc 	bl	8011fac <RCCEx_PLL2_Config>
 8011e14:	4603      	mov	r3, r0
 8011e16:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8011e18:	e002      	b.n	8011e20 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8011e1a:	2301      	movs	r3, #1
 8011e1c:	75fb      	strb	r3, [r7, #23]
      break;
 8011e1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011e20:	7dfb      	ldrb	r3, [r7, #23]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d109      	bne.n	8011e3a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8011e26:	4b29      	ldr	r3, [pc, #164]	; (8011ecc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011e2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011e32:	4926      	ldr	r1, [pc, #152]	; (8011ecc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011e34:	4313      	orrs	r3, r2
 8011e36:	64cb      	str	r3, [r1, #76]	; 0x4c
 8011e38:	e001      	b.n	8011e3e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011e3a:	7dfb      	ldrb	r3, [r7, #23]
 8011e3c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d00a      	beq.n	8011e60 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	3324      	adds	r3, #36	; 0x24
 8011e4e:	2102      	movs	r1, #2
 8011e50:	4618      	mov	r0, r3
 8011e52:	f000 f95d 	bl	8012110 <RCCEx_PLL3_Config>
 8011e56:	4603      	mov	r3, r0
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d001      	beq.n	8011e60 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8011e5c:	2301      	movs	r3, #1
 8011e5e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d033      	beq.n	8011ed4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011e74:	d017      	beq.n	8011ea6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8011e76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011e7a:	d811      	bhi.n	8011ea0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8011e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011e80:	d013      	beq.n	8011eaa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8011e82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011e86:	d80b      	bhi.n	8011ea0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d010      	beq.n	8011eae <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8011e8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011e90:	d106      	bne.n	8011ea0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011e92:	4b0e      	ldr	r3, [pc, #56]	; (8011ecc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e96:	4a0d      	ldr	r2, [pc, #52]	; (8011ecc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011e9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8011e9e:	e007      	b.n	8011eb0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011ea0:	2301      	movs	r3, #1
 8011ea2:	75fb      	strb	r3, [r7, #23]
      break;
 8011ea4:	e004      	b.n	8011eb0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8011ea6:	bf00      	nop
 8011ea8:	e002      	b.n	8011eb0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8011eaa:	bf00      	nop
 8011eac:	e000      	b.n	8011eb0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8011eae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011eb0:	7dfb      	ldrb	r3, [r7, #23]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d10c      	bne.n	8011ed0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8011eb6:	4b05      	ldr	r3, [pc, #20]	; (8011ecc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011eba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011ec2:	4902      	ldr	r1, [pc, #8]	; (8011ecc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011ec4:	4313      	orrs	r3, r2
 8011ec6:	654b      	str	r3, [r1, #84]	; 0x54
 8011ec8:	e004      	b.n	8011ed4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8011eca:	bf00      	nop
 8011ecc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011ed0:	7dfb      	ldrb	r3, [r7, #23]
 8011ed2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d008      	beq.n	8011ef2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8011ee0:	4b31      	ldr	r3, [pc, #196]	; (8011fa8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ee4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011eec:	492e      	ldr	r1, [pc, #184]	; (8011fa8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011eee:	4313      	orrs	r3, r2
 8011ef0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d009      	beq.n	8011f12 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8011efe:	4b2a      	ldr	r3, [pc, #168]	; (8011fa8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011f00:	691b      	ldr	r3, [r3, #16]
 8011f02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8011f0c:	4926      	ldr	r1, [pc, #152]	; (8011fa8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011f0e:	4313      	orrs	r3, r2
 8011f10:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d008      	beq.n	8011f30 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8011f1e:	4b22      	ldr	r3, [pc, #136]	; (8011fa8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f22:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011f2a:	491f      	ldr	r1, [pc, #124]	; (8011fa8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011f2c:	4313      	orrs	r3, r2
 8011f2e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d00d      	beq.n	8011f58 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8011f3c:	4b1a      	ldr	r3, [pc, #104]	; (8011fa8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011f3e:	691b      	ldr	r3, [r3, #16]
 8011f40:	4a19      	ldr	r2, [pc, #100]	; (8011fa8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011f42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011f46:	6113      	str	r3, [r2, #16]
 8011f48:	4b17      	ldr	r3, [pc, #92]	; (8011fa8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011f4a:	691a      	ldr	r2, [r3, #16]
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8011f52:	4915      	ldr	r1, [pc, #84]	; (8011fa8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011f54:	4313      	orrs	r3, r2
 8011f56:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	da08      	bge.n	8011f72 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8011f60:	4b11      	ldr	r3, [pc, #68]	; (8011fa8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011f64:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f6c:	490e      	ldr	r1, [pc, #56]	; (8011fa8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011f6e:	4313      	orrs	r3, r2
 8011f70:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d009      	beq.n	8011f92 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8011f7e:	4b0a      	ldr	r3, [pc, #40]	; (8011fa8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011f82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011f8c:	4906      	ldr	r1, [pc, #24]	; (8011fa8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011f8e:	4313      	orrs	r3, r2
 8011f90:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8011f92:	7dbb      	ldrb	r3, [r7, #22]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d101      	bne.n	8011f9c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8011f98:	2300      	movs	r3, #0
 8011f9a:	e000      	b.n	8011f9e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8011f9c:	2301      	movs	r3, #1
}
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	3718      	adds	r7, #24
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	bd80      	pop	{r7, pc}
 8011fa6:	bf00      	nop
 8011fa8:	58024400 	.word	0x58024400

08011fac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8011fac:	b580      	push	{r7, lr}
 8011fae:	b084      	sub	sp, #16
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
 8011fb4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011fba:	4b53      	ldr	r3, [pc, #332]	; (8012108 <RCCEx_PLL2_Config+0x15c>)
 8011fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011fbe:	f003 0303 	and.w	r3, r3, #3
 8011fc2:	2b03      	cmp	r3, #3
 8011fc4:	d101      	bne.n	8011fca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8011fc6:	2301      	movs	r3, #1
 8011fc8:	e099      	b.n	80120fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8011fca:	4b4f      	ldr	r3, [pc, #316]	; (8012108 <RCCEx_PLL2_Config+0x15c>)
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	4a4e      	ldr	r2, [pc, #312]	; (8012108 <RCCEx_PLL2_Config+0x15c>)
 8011fd0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011fd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011fd6:	f7fa feb9 	bl	800cd4c <HAL_GetTick>
 8011fda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011fdc:	e008      	b.n	8011ff0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8011fde:	f7fa feb5 	bl	800cd4c <HAL_GetTick>
 8011fe2:	4602      	mov	r2, r0
 8011fe4:	68bb      	ldr	r3, [r7, #8]
 8011fe6:	1ad3      	subs	r3, r2, r3
 8011fe8:	2b02      	cmp	r3, #2
 8011fea:	d901      	bls.n	8011ff0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011fec:	2303      	movs	r3, #3
 8011fee:	e086      	b.n	80120fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011ff0:	4b45      	ldr	r3, [pc, #276]	; (8012108 <RCCEx_PLL2_Config+0x15c>)
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d1f0      	bne.n	8011fde <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8011ffc:	4b42      	ldr	r3, [pc, #264]	; (8012108 <RCCEx_PLL2_Config+0x15c>)
 8011ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012000:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	031b      	lsls	r3, r3, #12
 801200a:	493f      	ldr	r1, [pc, #252]	; (8012108 <RCCEx_PLL2_Config+0x15c>)
 801200c:	4313      	orrs	r3, r2
 801200e:	628b      	str	r3, [r1, #40]	; 0x28
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	685b      	ldr	r3, [r3, #4]
 8012014:	3b01      	subs	r3, #1
 8012016:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	689b      	ldr	r3, [r3, #8]
 801201e:	3b01      	subs	r3, #1
 8012020:	025b      	lsls	r3, r3, #9
 8012022:	b29b      	uxth	r3, r3
 8012024:	431a      	orrs	r2, r3
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	68db      	ldr	r3, [r3, #12]
 801202a:	3b01      	subs	r3, #1
 801202c:	041b      	lsls	r3, r3, #16
 801202e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8012032:	431a      	orrs	r2, r3
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	691b      	ldr	r3, [r3, #16]
 8012038:	3b01      	subs	r3, #1
 801203a:	061b      	lsls	r3, r3, #24
 801203c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8012040:	4931      	ldr	r1, [pc, #196]	; (8012108 <RCCEx_PLL2_Config+0x15c>)
 8012042:	4313      	orrs	r3, r2
 8012044:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8012046:	4b30      	ldr	r3, [pc, #192]	; (8012108 <RCCEx_PLL2_Config+0x15c>)
 8012048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801204a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	695b      	ldr	r3, [r3, #20]
 8012052:	492d      	ldr	r1, [pc, #180]	; (8012108 <RCCEx_PLL2_Config+0x15c>)
 8012054:	4313      	orrs	r3, r2
 8012056:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8012058:	4b2b      	ldr	r3, [pc, #172]	; (8012108 <RCCEx_PLL2_Config+0x15c>)
 801205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801205c:	f023 0220 	bic.w	r2, r3, #32
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	699b      	ldr	r3, [r3, #24]
 8012064:	4928      	ldr	r1, [pc, #160]	; (8012108 <RCCEx_PLL2_Config+0x15c>)
 8012066:	4313      	orrs	r3, r2
 8012068:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801206a:	4b27      	ldr	r3, [pc, #156]	; (8012108 <RCCEx_PLL2_Config+0x15c>)
 801206c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801206e:	4a26      	ldr	r2, [pc, #152]	; (8012108 <RCCEx_PLL2_Config+0x15c>)
 8012070:	f023 0310 	bic.w	r3, r3, #16
 8012074:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8012076:	4b24      	ldr	r3, [pc, #144]	; (8012108 <RCCEx_PLL2_Config+0x15c>)
 8012078:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801207a:	4b24      	ldr	r3, [pc, #144]	; (801210c <RCCEx_PLL2_Config+0x160>)
 801207c:	4013      	ands	r3, r2
 801207e:	687a      	ldr	r2, [r7, #4]
 8012080:	69d2      	ldr	r2, [r2, #28]
 8012082:	00d2      	lsls	r2, r2, #3
 8012084:	4920      	ldr	r1, [pc, #128]	; (8012108 <RCCEx_PLL2_Config+0x15c>)
 8012086:	4313      	orrs	r3, r2
 8012088:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801208a:	4b1f      	ldr	r3, [pc, #124]	; (8012108 <RCCEx_PLL2_Config+0x15c>)
 801208c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801208e:	4a1e      	ldr	r2, [pc, #120]	; (8012108 <RCCEx_PLL2_Config+0x15c>)
 8012090:	f043 0310 	orr.w	r3, r3, #16
 8012094:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d106      	bne.n	80120aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801209c:	4b1a      	ldr	r3, [pc, #104]	; (8012108 <RCCEx_PLL2_Config+0x15c>)
 801209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120a0:	4a19      	ldr	r2, [pc, #100]	; (8012108 <RCCEx_PLL2_Config+0x15c>)
 80120a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80120a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80120a8:	e00f      	b.n	80120ca <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80120aa:	683b      	ldr	r3, [r7, #0]
 80120ac:	2b01      	cmp	r3, #1
 80120ae:	d106      	bne.n	80120be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80120b0:	4b15      	ldr	r3, [pc, #84]	; (8012108 <RCCEx_PLL2_Config+0x15c>)
 80120b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120b4:	4a14      	ldr	r2, [pc, #80]	; (8012108 <RCCEx_PLL2_Config+0x15c>)
 80120b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80120ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80120bc:	e005      	b.n	80120ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80120be:	4b12      	ldr	r3, [pc, #72]	; (8012108 <RCCEx_PLL2_Config+0x15c>)
 80120c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120c2:	4a11      	ldr	r2, [pc, #68]	; (8012108 <RCCEx_PLL2_Config+0x15c>)
 80120c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80120c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80120ca:	4b0f      	ldr	r3, [pc, #60]	; (8012108 <RCCEx_PLL2_Config+0x15c>)
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	4a0e      	ldr	r2, [pc, #56]	; (8012108 <RCCEx_PLL2_Config+0x15c>)
 80120d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80120d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80120d6:	f7fa fe39 	bl	800cd4c <HAL_GetTick>
 80120da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80120dc:	e008      	b.n	80120f0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80120de:	f7fa fe35 	bl	800cd4c <HAL_GetTick>
 80120e2:	4602      	mov	r2, r0
 80120e4:	68bb      	ldr	r3, [r7, #8]
 80120e6:	1ad3      	subs	r3, r2, r3
 80120e8:	2b02      	cmp	r3, #2
 80120ea:	d901      	bls.n	80120f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80120ec:	2303      	movs	r3, #3
 80120ee:	e006      	b.n	80120fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80120f0:	4b05      	ldr	r3, [pc, #20]	; (8012108 <RCCEx_PLL2_Config+0x15c>)
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d0f0      	beq.n	80120de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80120fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80120fe:	4618      	mov	r0, r3
 8012100:	3710      	adds	r7, #16
 8012102:	46bd      	mov	sp, r7
 8012104:	bd80      	pop	{r7, pc}
 8012106:	bf00      	nop
 8012108:	58024400 	.word	0x58024400
 801210c:	ffff0007 	.word	0xffff0007

08012110 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8012110:	b580      	push	{r7, lr}
 8012112:	b084      	sub	sp, #16
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
 8012118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801211a:	2300      	movs	r3, #0
 801211c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801211e:	4b53      	ldr	r3, [pc, #332]	; (801226c <RCCEx_PLL3_Config+0x15c>)
 8012120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012122:	f003 0303 	and.w	r3, r3, #3
 8012126:	2b03      	cmp	r3, #3
 8012128:	d101      	bne.n	801212e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801212a:	2301      	movs	r3, #1
 801212c:	e099      	b.n	8012262 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801212e:	4b4f      	ldr	r3, [pc, #316]	; (801226c <RCCEx_PLL3_Config+0x15c>)
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	4a4e      	ldr	r2, [pc, #312]	; (801226c <RCCEx_PLL3_Config+0x15c>)
 8012134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012138:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801213a:	f7fa fe07 	bl	800cd4c <HAL_GetTick>
 801213e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8012140:	e008      	b.n	8012154 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8012142:	f7fa fe03 	bl	800cd4c <HAL_GetTick>
 8012146:	4602      	mov	r2, r0
 8012148:	68bb      	ldr	r3, [r7, #8]
 801214a:	1ad3      	subs	r3, r2, r3
 801214c:	2b02      	cmp	r3, #2
 801214e:	d901      	bls.n	8012154 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8012150:	2303      	movs	r3, #3
 8012152:	e086      	b.n	8012262 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8012154:	4b45      	ldr	r3, [pc, #276]	; (801226c <RCCEx_PLL3_Config+0x15c>)
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801215c:	2b00      	cmp	r3, #0
 801215e:	d1f0      	bne.n	8012142 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8012160:	4b42      	ldr	r3, [pc, #264]	; (801226c <RCCEx_PLL3_Config+0x15c>)
 8012162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012164:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	051b      	lsls	r3, r3, #20
 801216e:	493f      	ldr	r1, [pc, #252]	; (801226c <RCCEx_PLL3_Config+0x15c>)
 8012170:	4313      	orrs	r3, r2
 8012172:	628b      	str	r3, [r1, #40]	; 0x28
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	685b      	ldr	r3, [r3, #4]
 8012178:	3b01      	subs	r3, #1
 801217a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	689b      	ldr	r3, [r3, #8]
 8012182:	3b01      	subs	r3, #1
 8012184:	025b      	lsls	r3, r3, #9
 8012186:	b29b      	uxth	r3, r3
 8012188:	431a      	orrs	r2, r3
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	68db      	ldr	r3, [r3, #12]
 801218e:	3b01      	subs	r3, #1
 8012190:	041b      	lsls	r3, r3, #16
 8012192:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8012196:	431a      	orrs	r2, r3
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	691b      	ldr	r3, [r3, #16]
 801219c:	3b01      	subs	r3, #1
 801219e:	061b      	lsls	r3, r3, #24
 80121a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80121a4:	4931      	ldr	r1, [pc, #196]	; (801226c <RCCEx_PLL3_Config+0x15c>)
 80121a6:	4313      	orrs	r3, r2
 80121a8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80121aa:	4b30      	ldr	r3, [pc, #192]	; (801226c <RCCEx_PLL3_Config+0x15c>)
 80121ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	695b      	ldr	r3, [r3, #20]
 80121b6:	492d      	ldr	r1, [pc, #180]	; (801226c <RCCEx_PLL3_Config+0x15c>)
 80121b8:	4313      	orrs	r3, r2
 80121ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80121bc:	4b2b      	ldr	r3, [pc, #172]	; (801226c <RCCEx_PLL3_Config+0x15c>)
 80121be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	699b      	ldr	r3, [r3, #24]
 80121c8:	4928      	ldr	r1, [pc, #160]	; (801226c <RCCEx_PLL3_Config+0x15c>)
 80121ca:	4313      	orrs	r3, r2
 80121cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80121ce:	4b27      	ldr	r3, [pc, #156]	; (801226c <RCCEx_PLL3_Config+0x15c>)
 80121d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121d2:	4a26      	ldr	r2, [pc, #152]	; (801226c <RCCEx_PLL3_Config+0x15c>)
 80121d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80121d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80121da:	4b24      	ldr	r3, [pc, #144]	; (801226c <RCCEx_PLL3_Config+0x15c>)
 80121dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80121de:	4b24      	ldr	r3, [pc, #144]	; (8012270 <RCCEx_PLL3_Config+0x160>)
 80121e0:	4013      	ands	r3, r2
 80121e2:	687a      	ldr	r2, [r7, #4]
 80121e4:	69d2      	ldr	r2, [r2, #28]
 80121e6:	00d2      	lsls	r2, r2, #3
 80121e8:	4920      	ldr	r1, [pc, #128]	; (801226c <RCCEx_PLL3_Config+0x15c>)
 80121ea:	4313      	orrs	r3, r2
 80121ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80121ee:	4b1f      	ldr	r3, [pc, #124]	; (801226c <RCCEx_PLL3_Config+0x15c>)
 80121f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121f2:	4a1e      	ldr	r2, [pc, #120]	; (801226c <RCCEx_PLL3_Config+0x15c>)
 80121f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80121f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80121fa:	683b      	ldr	r3, [r7, #0]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d106      	bne.n	801220e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8012200:	4b1a      	ldr	r3, [pc, #104]	; (801226c <RCCEx_PLL3_Config+0x15c>)
 8012202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012204:	4a19      	ldr	r2, [pc, #100]	; (801226c <RCCEx_PLL3_Config+0x15c>)
 8012206:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801220a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801220c:	e00f      	b.n	801222e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 801220e:	683b      	ldr	r3, [r7, #0]
 8012210:	2b01      	cmp	r3, #1
 8012212:	d106      	bne.n	8012222 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8012214:	4b15      	ldr	r3, [pc, #84]	; (801226c <RCCEx_PLL3_Config+0x15c>)
 8012216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012218:	4a14      	ldr	r2, [pc, #80]	; (801226c <RCCEx_PLL3_Config+0x15c>)
 801221a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801221e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012220:	e005      	b.n	801222e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8012222:	4b12      	ldr	r3, [pc, #72]	; (801226c <RCCEx_PLL3_Config+0x15c>)
 8012224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012226:	4a11      	ldr	r2, [pc, #68]	; (801226c <RCCEx_PLL3_Config+0x15c>)
 8012228:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801222c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801222e:	4b0f      	ldr	r3, [pc, #60]	; (801226c <RCCEx_PLL3_Config+0x15c>)
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	4a0e      	ldr	r2, [pc, #56]	; (801226c <RCCEx_PLL3_Config+0x15c>)
 8012234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012238:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801223a:	f7fa fd87 	bl	800cd4c <HAL_GetTick>
 801223e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8012240:	e008      	b.n	8012254 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8012242:	f7fa fd83 	bl	800cd4c <HAL_GetTick>
 8012246:	4602      	mov	r2, r0
 8012248:	68bb      	ldr	r3, [r7, #8]
 801224a:	1ad3      	subs	r3, r2, r3
 801224c:	2b02      	cmp	r3, #2
 801224e:	d901      	bls.n	8012254 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8012250:	2303      	movs	r3, #3
 8012252:	e006      	b.n	8012262 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8012254:	4b05      	ldr	r3, [pc, #20]	; (801226c <RCCEx_PLL3_Config+0x15c>)
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801225c:	2b00      	cmp	r3, #0
 801225e:	d0f0      	beq.n	8012242 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8012260:	7bfb      	ldrb	r3, [r7, #15]
}
 8012262:	4618      	mov	r0, r3
 8012264:	3710      	adds	r7, #16
 8012266:	46bd      	mov	sp, r7
 8012268:	bd80      	pop	{r7, pc}
 801226a:	bf00      	nop
 801226c:	58024400 	.word	0x58024400
 8012270:	ffff0007 	.word	0xffff0007

08012274 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b082      	sub	sp, #8
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
 801227c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d101      	bne.n	8012288 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8012284:	2301      	movs	r3, #1
 8012286:	e02b      	b.n	80122e0 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801228e:	b2db      	uxtb	r3, r3
 8012290:	2b00      	cmp	r3, #0
 8012292:	d106      	bne.n	80122a2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	2200      	movs	r2, #0
 8012298:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 801229c:	6878      	ldr	r0, [r7, #4]
 801229e:	f7ef f80b 	bl	80012b8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	2202      	movs	r2, #2
 80122a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	681a      	ldr	r2, [r3, #0]
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	3304      	adds	r3, #4
 80122b2:	4619      	mov	r1, r3
 80122b4:	4610      	mov	r0, r2
 80122b6:	f000 fb6b 	bl	8012990 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	6818      	ldr	r0, [r3, #0]
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	685b      	ldr	r3, [r3, #4]
 80122c2:	461a      	mov	r2, r3
 80122c4:	6839      	ldr	r1, [r7, #0]
 80122c6:	f000 fbbf 	bl	8012a48 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80122ca:	4b07      	ldr	r3, [pc, #28]	; (80122e8 <HAL_SDRAM_Init+0x74>)
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	4a06      	ldr	r2, [pc, #24]	; (80122e8 <HAL_SDRAM_Init+0x74>)
 80122d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80122d4:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	2201      	movs	r2, #1
 80122da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80122de:	2300      	movs	r3, #0
}
 80122e0:	4618      	mov	r0, r3
 80122e2:	3708      	adds	r7, #8
 80122e4:	46bd      	mov	sp, r7
 80122e6:	bd80      	pop	{r7, pc}
 80122e8:	52004000 	.word	0x52004000

080122ec <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b082      	sub	sp, #8
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 80122f4:	6878      	ldr	r0, [r7, #4]
 80122f6:	f7ef f823 	bl	8001340 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	681a      	ldr	r2, [r3, #0]
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	685b      	ldr	r3, [r3, #4]
 8012302:	4619      	mov	r1, r3
 8012304:	4610      	mov	r0, r2
 8012306:	f000 fc09 	bl	8012b1c <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	2200      	movs	r2, #0
 801230e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	2200      	movs	r2, #0
 8012316:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  return HAL_OK;
 801231a:	2300      	movs	r3, #0
}
 801231c:	4618      	mov	r0, r3
 801231e:	3708      	adds	r7, #8
 8012320:	46bd      	mov	sp, r7
 8012322:	bd80      	pop	{r7, pc}

08012324 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8012324:	b580      	push	{r7, lr}
 8012326:	b086      	sub	sp, #24
 8012328:	af00      	add	r7, sp, #0
 801232a:	60f8      	str	r0, [r7, #12]
 801232c:	60b9      	str	r1, [r7, #8]
 801232e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012336:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8012338:	7dfb      	ldrb	r3, [r7, #23]
 801233a:	2b02      	cmp	r3, #2
 801233c:	d101      	bne.n	8012342 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 801233e:	2302      	movs	r3, #2
 8012340:	e021      	b.n	8012386 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8012342:	7dfb      	ldrb	r3, [r7, #23]
 8012344:	2b01      	cmp	r3, #1
 8012346:	d002      	beq.n	801234e <HAL_SDRAM_SendCommand+0x2a>
 8012348:	7dfb      	ldrb	r3, [r7, #23]
 801234a:	2b05      	cmp	r3, #5
 801234c:	d118      	bne.n	8012380 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	2202      	movs	r2, #2
 8012352:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	687a      	ldr	r2, [r7, #4]
 801235c:	68b9      	ldr	r1, [r7, #8]
 801235e:	4618      	mov	r0, r3
 8012360:	f000 fbfe 	bl	8012b60 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8012364:	68bb      	ldr	r3, [r7, #8]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	2b02      	cmp	r3, #2
 801236a:	d104      	bne.n	8012376 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	2205      	movs	r2, #5
 8012370:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8012374:	e006      	b.n	8012384 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	2201      	movs	r2, #1
 801237a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 801237e:	e001      	b.n	8012384 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8012380:	2301      	movs	r3, #1
 8012382:	e000      	b.n	8012386 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8012384:	2300      	movs	r3, #0
}
 8012386:	4618      	mov	r0, r3
 8012388:	3718      	adds	r7, #24
 801238a:	46bd      	mov	sp, r7
 801238c:	bd80      	pop	{r7, pc}

0801238e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 801238e:	b580      	push	{r7, lr}
 8012390:	b082      	sub	sp, #8
 8012392:	af00      	add	r7, sp, #0
 8012394:	6078      	str	r0, [r7, #4]
 8012396:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801239e:	b2db      	uxtb	r3, r3
 80123a0:	2b02      	cmp	r3, #2
 80123a2:	d101      	bne.n	80123a8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80123a4:	2302      	movs	r3, #2
 80123a6:	e016      	b.n	80123d6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80123ae:	b2db      	uxtb	r3, r3
 80123b0:	2b01      	cmp	r3, #1
 80123b2:	d10f      	bne.n	80123d4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	2202      	movs	r2, #2
 80123b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	6839      	ldr	r1, [r7, #0]
 80123c2:	4618      	mov	r0, r3
 80123c4:	f000 fbf0 	bl	8012ba8 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	2201      	movs	r2, #1
 80123cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80123d0:	2300      	movs	r3, #0
 80123d2:	e000      	b.n	80123d6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80123d4:	2301      	movs	r3, #1
}
 80123d6:	4618      	mov	r0, r3
 80123d8:	3708      	adds	r7, #8
 80123da:	46bd      	mov	sp, r7
 80123dc:	bd80      	pop	{r7, pc}

080123de <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80123de:	b580      	push	{r7, lr}
 80123e0:	b082      	sub	sp, #8
 80123e2:	af00      	add	r7, sp, #0
 80123e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d101      	bne.n	80123f0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80123ec:	2301      	movs	r3, #1
 80123ee:	e049      	b.n	8012484 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80123f6:	b2db      	uxtb	r3, r3
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d106      	bne.n	801240a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	2200      	movs	r2, #0
 8012400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012404:	6878      	ldr	r0, [r7, #4]
 8012406:	f000 f841 	bl	801248c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	2202      	movs	r2, #2
 801240e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	681a      	ldr	r2, [r3, #0]
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	3304      	adds	r3, #4
 801241a:	4619      	mov	r1, r3
 801241c:	4610      	mov	r0, r2
 801241e:	f000 f9ff 	bl	8012820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	2201      	movs	r2, #1
 8012426:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	2201      	movs	r2, #1
 801242e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	2201      	movs	r2, #1
 8012436:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	2201      	movs	r2, #1
 801243e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	2201      	movs	r2, #1
 8012446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	2201      	movs	r2, #1
 801244e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	2201      	movs	r2, #1
 8012456:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	2201      	movs	r2, #1
 801245e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	2201      	movs	r2, #1
 8012466:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	2201      	movs	r2, #1
 801246e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	2201      	movs	r2, #1
 8012476:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	2201      	movs	r2, #1
 801247e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012482:	2300      	movs	r3, #0
}
 8012484:	4618      	mov	r0, r3
 8012486:	3708      	adds	r7, #8
 8012488:	46bd      	mov	sp, r7
 801248a:	bd80      	pop	{r7, pc}

0801248c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 801248c:	b480      	push	{r7}
 801248e:	b083      	sub	sp, #12
 8012490:	af00      	add	r7, sp, #0
 8012492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8012494:	bf00      	nop
 8012496:	370c      	adds	r7, #12
 8012498:	46bd      	mov	sp, r7
 801249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249e:	4770      	bx	lr

080124a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80124a0:	b480      	push	{r7}
 80124a2:	b085      	sub	sp, #20
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80124ae:	b2db      	uxtb	r3, r3
 80124b0:	2b01      	cmp	r3, #1
 80124b2:	d001      	beq.n	80124b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80124b4:	2301      	movs	r3, #1
 80124b6:	e054      	b.n	8012562 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	2202      	movs	r2, #2
 80124bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	68da      	ldr	r2, [r3, #12]
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	f042 0201 	orr.w	r2, r2, #1
 80124ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	4a26      	ldr	r2, [pc, #152]	; (8012570 <HAL_TIM_Base_Start_IT+0xd0>)
 80124d6:	4293      	cmp	r3, r2
 80124d8:	d022      	beq.n	8012520 <HAL_TIM_Base_Start_IT+0x80>
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80124e2:	d01d      	beq.n	8012520 <HAL_TIM_Base_Start_IT+0x80>
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	4a22      	ldr	r2, [pc, #136]	; (8012574 <HAL_TIM_Base_Start_IT+0xd4>)
 80124ea:	4293      	cmp	r3, r2
 80124ec:	d018      	beq.n	8012520 <HAL_TIM_Base_Start_IT+0x80>
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	4a21      	ldr	r2, [pc, #132]	; (8012578 <HAL_TIM_Base_Start_IT+0xd8>)
 80124f4:	4293      	cmp	r3, r2
 80124f6:	d013      	beq.n	8012520 <HAL_TIM_Base_Start_IT+0x80>
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	4a1f      	ldr	r2, [pc, #124]	; (801257c <HAL_TIM_Base_Start_IT+0xdc>)
 80124fe:	4293      	cmp	r3, r2
 8012500:	d00e      	beq.n	8012520 <HAL_TIM_Base_Start_IT+0x80>
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	4a1e      	ldr	r2, [pc, #120]	; (8012580 <HAL_TIM_Base_Start_IT+0xe0>)
 8012508:	4293      	cmp	r3, r2
 801250a:	d009      	beq.n	8012520 <HAL_TIM_Base_Start_IT+0x80>
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	4a1c      	ldr	r2, [pc, #112]	; (8012584 <HAL_TIM_Base_Start_IT+0xe4>)
 8012512:	4293      	cmp	r3, r2
 8012514:	d004      	beq.n	8012520 <HAL_TIM_Base_Start_IT+0x80>
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	4a1b      	ldr	r2, [pc, #108]	; (8012588 <HAL_TIM_Base_Start_IT+0xe8>)
 801251c:	4293      	cmp	r3, r2
 801251e:	d115      	bne.n	801254c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	689a      	ldr	r2, [r3, #8]
 8012526:	4b19      	ldr	r3, [pc, #100]	; (801258c <HAL_TIM_Base_Start_IT+0xec>)
 8012528:	4013      	ands	r3, r2
 801252a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	2b06      	cmp	r3, #6
 8012530:	d015      	beq.n	801255e <HAL_TIM_Base_Start_IT+0xbe>
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012538:	d011      	beq.n	801255e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	681a      	ldr	r2, [r3, #0]
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	f042 0201 	orr.w	r2, r2, #1
 8012548:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801254a:	e008      	b.n	801255e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	681a      	ldr	r2, [r3, #0]
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	f042 0201 	orr.w	r2, r2, #1
 801255a:	601a      	str	r2, [r3, #0]
 801255c:	e000      	b.n	8012560 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801255e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012560:	2300      	movs	r3, #0
}
 8012562:	4618      	mov	r0, r3
 8012564:	3714      	adds	r7, #20
 8012566:	46bd      	mov	sp, r7
 8012568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801256c:	4770      	bx	lr
 801256e:	bf00      	nop
 8012570:	40010000 	.word	0x40010000
 8012574:	40000400 	.word	0x40000400
 8012578:	40000800 	.word	0x40000800
 801257c:	40000c00 	.word	0x40000c00
 8012580:	40010400 	.word	0x40010400
 8012584:	40001800 	.word	0x40001800
 8012588:	40014000 	.word	0x40014000
 801258c:	00010007 	.word	0x00010007

08012590 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b082      	sub	sp, #8
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	691b      	ldr	r3, [r3, #16]
 801259e:	f003 0302 	and.w	r3, r3, #2
 80125a2:	2b02      	cmp	r3, #2
 80125a4:	d122      	bne.n	80125ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	68db      	ldr	r3, [r3, #12]
 80125ac:	f003 0302 	and.w	r3, r3, #2
 80125b0:	2b02      	cmp	r3, #2
 80125b2:	d11b      	bne.n	80125ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	f06f 0202 	mvn.w	r2, #2
 80125bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	2201      	movs	r2, #1
 80125c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	699b      	ldr	r3, [r3, #24]
 80125ca:	f003 0303 	and.w	r3, r3, #3
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d003      	beq.n	80125da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80125d2:	6878      	ldr	r0, [r7, #4]
 80125d4:	f000 f905 	bl	80127e2 <HAL_TIM_IC_CaptureCallback>
 80125d8:	e005      	b.n	80125e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80125da:	6878      	ldr	r0, [r7, #4]
 80125dc:	f000 f8f7 	bl	80127ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80125e0:	6878      	ldr	r0, [r7, #4]
 80125e2:	f000 f908 	bl	80127f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	2200      	movs	r2, #0
 80125ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	691b      	ldr	r3, [r3, #16]
 80125f2:	f003 0304 	and.w	r3, r3, #4
 80125f6:	2b04      	cmp	r3, #4
 80125f8:	d122      	bne.n	8012640 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	68db      	ldr	r3, [r3, #12]
 8012600:	f003 0304 	and.w	r3, r3, #4
 8012604:	2b04      	cmp	r3, #4
 8012606:	d11b      	bne.n	8012640 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	f06f 0204 	mvn.w	r2, #4
 8012610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	2202      	movs	r2, #2
 8012616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	699b      	ldr	r3, [r3, #24]
 801261e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012622:	2b00      	cmp	r3, #0
 8012624:	d003      	beq.n	801262e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012626:	6878      	ldr	r0, [r7, #4]
 8012628:	f000 f8db 	bl	80127e2 <HAL_TIM_IC_CaptureCallback>
 801262c:	e005      	b.n	801263a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801262e:	6878      	ldr	r0, [r7, #4]
 8012630:	f000 f8cd 	bl	80127ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012634:	6878      	ldr	r0, [r7, #4]
 8012636:	f000 f8de 	bl	80127f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	2200      	movs	r2, #0
 801263e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	691b      	ldr	r3, [r3, #16]
 8012646:	f003 0308 	and.w	r3, r3, #8
 801264a:	2b08      	cmp	r3, #8
 801264c:	d122      	bne.n	8012694 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	68db      	ldr	r3, [r3, #12]
 8012654:	f003 0308 	and.w	r3, r3, #8
 8012658:	2b08      	cmp	r3, #8
 801265a:	d11b      	bne.n	8012694 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	f06f 0208 	mvn.w	r2, #8
 8012664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	2204      	movs	r2, #4
 801266a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	69db      	ldr	r3, [r3, #28]
 8012672:	f003 0303 	and.w	r3, r3, #3
 8012676:	2b00      	cmp	r3, #0
 8012678:	d003      	beq.n	8012682 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801267a:	6878      	ldr	r0, [r7, #4]
 801267c:	f000 f8b1 	bl	80127e2 <HAL_TIM_IC_CaptureCallback>
 8012680:	e005      	b.n	801268e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012682:	6878      	ldr	r0, [r7, #4]
 8012684:	f000 f8a3 	bl	80127ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012688:	6878      	ldr	r0, [r7, #4]
 801268a:	f000 f8b4 	bl	80127f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	2200      	movs	r2, #0
 8012692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	691b      	ldr	r3, [r3, #16]
 801269a:	f003 0310 	and.w	r3, r3, #16
 801269e:	2b10      	cmp	r3, #16
 80126a0:	d122      	bne.n	80126e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	68db      	ldr	r3, [r3, #12]
 80126a8:	f003 0310 	and.w	r3, r3, #16
 80126ac:	2b10      	cmp	r3, #16
 80126ae:	d11b      	bne.n	80126e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	f06f 0210 	mvn.w	r2, #16
 80126b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	2208      	movs	r2, #8
 80126be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	69db      	ldr	r3, [r3, #28]
 80126c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d003      	beq.n	80126d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80126ce:	6878      	ldr	r0, [r7, #4]
 80126d0:	f000 f887 	bl	80127e2 <HAL_TIM_IC_CaptureCallback>
 80126d4:	e005      	b.n	80126e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80126d6:	6878      	ldr	r0, [r7, #4]
 80126d8:	f000 f879 	bl	80127ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80126dc:	6878      	ldr	r0, [r7, #4]
 80126de:	f000 f88a 	bl	80127f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	2200      	movs	r2, #0
 80126e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	691b      	ldr	r3, [r3, #16]
 80126ee:	f003 0301 	and.w	r3, r3, #1
 80126f2:	2b01      	cmp	r3, #1
 80126f4:	d10e      	bne.n	8012714 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	68db      	ldr	r3, [r3, #12]
 80126fc:	f003 0301 	and.w	r3, r3, #1
 8012700:	2b01      	cmp	r3, #1
 8012702:	d107      	bne.n	8012714 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	f06f 0201 	mvn.w	r2, #1
 801270c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801270e:	6878      	ldr	r0, [r7, #4]
 8012710:	f7ee f9f2 	bl	8000af8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	691b      	ldr	r3, [r3, #16]
 801271a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801271e:	2b80      	cmp	r3, #128	; 0x80
 8012720:	d10e      	bne.n	8012740 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	68db      	ldr	r3, [r3, #12]
 8012728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801272c:	2b80      	cmp	r3, #128	; 0x80
 801272e:	d107      	bne.n	8012740 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8012738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801273a:	6878      	ldr	r0, [r7, #4]
 801273c:	f000 f914 	bl	8012968 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	691b      	ldr	r3, [r3, #16]
 8012746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801274a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801274e:	d10e      	bne.n	801276e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	68db      	ldr	r3, [r3, #12]
 8012756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801275a:	2b80      	cmp	r3, #128	; 0x80
 801275c:	d107      	bne.n	801276e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8012766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8012768:	6878      	ldr	r0, [r7, #4]
 801276a:	f000 f907 	bl	801297c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	691b      	ldr	r3, [r3, #16]
 8012774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012778:	2b40      	cmp	r3, #64	; 0x40
 801277a:	d10e      	bne.n	801279a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	68db      	ldr	r3, [r3, #12]
 8012782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012786:	2b40      	cmp	r3, #64	; 0x40
 8012788:	d107      	bne.n	801279a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8012792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012794:	6878      	ldr	r0, [r7, #4]
 8012796:	f000 f838 	bl	801280a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	691b      	ldr	r3, [r3, #16]
 80127a0:	f003 0320 	and.w	r3, r3, #32
 80127a4:	2b20      	cmp	r3, #32
 80127a6:	d10e      	bne.n	80127c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	68db      	ldr	r3, [r3, #12]
 80127ae:	f003 0320 	and.w	r3, r3, #32
 80127b2:	2b20      	cmp	r3, #32
 80127b4:	d107      	bne.n	80127c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	f06f 0220 	mvn.w	r2, #32
 80127be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80127c0:	6878      	ldr	r0, [r7, #4]
 80127c2:	f000 f8c7 	bl	8012954 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80127c6:	bf00      	nop
 80127c8:	3708      	adds	r7, #8
 80127ca:	46bd      	mov	sp, r7
 80127cc:	bd80      	pop	{r7, pc}

080127ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80127ce:	b480      	push	{r7}
 80127d0:	b083      	sub	sp, #12
 80127d2:	af00      	add	r7, sp, #0
 80127d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80127d6:	bf00      	nop
 80127d8:	370c      	adds	r7, #12
 80127da:	46bd      	mov	sp, r7
 80127dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e0:	4770      	bx	lr

080127e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80127e2:	b480      	push	{r7}
 80127e4:	b083      	sub	sp, #12
 80127e6:	af00      	add	r7, sp, #0
 80127e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80127ea:	bf00      	nop
 80127ec:	370c      	adds	r7, #12
 80127ee:	46bd      	mov	sp, r7
 80127f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f4:	4770      	bx	lr

080127f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80127f6:	b480      	push	{r7}
 80127f8:	b083      	sub	sp, #12
 80127fa:	af00      	add	r7, sp, #0
 80127fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80127fe:	bf00      	nop
 8012800:	370c      	adds	r7, #12
 8012802:	46bd      	mov	sp, r7
 8012804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012808:	4770      	bx	lr

0801280a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801280a:	b480      	push	{r7}
 801280c:	b083      	sub	sp, #12
 801280e:	af00      	add	r7, sp, #0
 8012810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8012812:	bf00      	nop
 8012814:	370c      	adds	r7, #12
 8012816:	46bd      	mov	sp, r7
 8012818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281c:	4770      	bx	lr
	...

08012820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8012820:	b480      	push	{r7}
 8012822:	b085      	sub	sp, #20
 8012824:	af00      	add	r7, sp, #0
 8012826:	6078      	str	r0, [r7, #4]
 8012828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	4a40      	ldr	r2, [pc, #256]	; (8012934 <TIM_Base_SetConfig+0x114>)
 8012834:	4293      	cmp	r3, r2
 8012836:	d013      	beq.n	8012860 <TIM_Base_SetConfig+0x40>
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801283e:	d00f      	beq.n	8012860 <TIM_Base_SetConfig+0x40>
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	4a3d      	ldr	r2, [pc, #244]	; (8012938 <TIM_Base_SetConfig+0x118>)
 8012844:	4293      	cmp	r3, r2
 8012846:	d00b      	beq.n	8012860 <TIM_Base_SetConfig+0x40>
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	4a3c      	ldr	r2, [pc, #240]	; (801293c <TIM_Base_SetConfig+0x11c>)
 801284c:	4293      	cmp	r3, r2
 801284e:	d007      	beq.n	8012860 <TIM_Base_SetConfig+0x40>
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	4a3b      	ldr	r2, [pc, #236]	; (8012940 <TIM_Base_SetConfig+0x120>)
 8012854:	4293      	cmp	r3, r2
 8012856:	d003      	beq.n	8012860 <TIM_Base_SetConfig+0x40>
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	4a3a      	ldr	r2, [pc, #232]	; (8012944 <TIM_Base_SetConfig+0x124>)
 801285c:	4293      	cmp	r3, r2
 801285e:	d108      	bne.n	8012872 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012868:	683b      	ldr	r3, [r7, #0]
 801286a:	685b      	ldr	r3, [r3, #4]
 801286c:	68fa      	ldr	r2, [r7, #12]
 801286e:	4313      	orrs	r3, r2
 8012870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	4a2f      	ldr	r2, [pc, #188]	; (8012934 <TIM_Base_SetConfig+0x114>)
 8012876:	4293      	cmp	r3, r2
 8012878:	d01f      	beq.n	80128ba <TIM_Base_SetConfig+0x9a>
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012880:	d01b      	beq.n	80128ba <TIM_Base_SetConfig+0x9a>
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	4a2c      	ldr	r2, [pc, #176]	; (8012938 <TIM_Base_SetConfig+0x118>)
 8012886:	4293      	cmp	r3, r2
 8012888:	d017      	beq.n	80128ba <TIM_Base_SetConfig+0x9a>
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	4a2b      	ldr	r2, [pc, #172]	; (801293c <TIM_Base_SetConfig+0x11c>)
 801288e:	4293      	cmp	r3, r2
 8012890:	d013      	beq.n	80128ba <TIM_Base_SetConfig+0x9a>
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	4a2a      	ldr	r2, [pc, #168]	; (8012940 <TIM_Base_SetConfig+0x120>)
 8012896:	4293      	cmp	r3, r2
 8012898:	d00f      	beq.n	80128ba <TIM_Base_SetConfig+0x9a>
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	4a29      	ldr	r2, [pc, #164]	; (8012944 <TIM_Base_SetConfig+0x124>)
 801289e:	4293      	cmp	r3, r2
 80128a0:	d00b      	beq.n	80128ba <TIM_Base_SetConfig+0x9a>
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	4a28      	ldr	r2, [pc, #160]	; (8012948 <TIM_Base_SetConfig+0x128>)
 80128a6:	4293      	cmp	r3, r2
 80128a8:	d007      	beq.n	80128ba <TIM_Base_SetConfig+0x9a>
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	4a27      	ldr	r2, [pc, #156]	; (801294c <TIM_Base_SetConfig+0x12c>)
 80128ae:	4293      	cmp	r3, r2
 80128b0:	d003      	beq.n	80128ba <TIM_Base_SetConfig+0x9a>
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	4a26      	ldr	r2, [pc, #152]	; (8012950 <TIM_Base_SetConfig+0x130>)
 80128b6:	4293      	cmp	r3, r2
 80128b8:	d108      	bne.n	80128cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80128c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80128c2:	683b      	ldr	r3, [r7, #0]
 80128c4:	68db      	ldr	r3, [r3, #12]
 80128c6:	68fa      	ldr	r2, [r7, #12]
 80128c8:	4313      	orrs	r3, r2
 80128ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80128d2:	683b      	ldr	r3, [r7, #0]
 80128d4:	695b      	ldr	r3, [r3, #20]
 80128d6:	4313      	orrs	r3, r2
 80128d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	68fa      	ldr	r2, [r7, #12]
 80128de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80128e0:	683b      	ldr	r3, [r7, #0]
 80128e2:	689a      	ldr	r2, [r3, #8]
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80128e8:	683b      	ldr	r3, [r7, #0]
 80128ea:	681a      	ldr	r2, [r3, #0]
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	4a10      	ldr	r2, [pc, #64]	; (8012934 <TIM_Base_SetConfig+0x114>)
 80128f4:	4293      	cmp	r3, r2
 80128f6:	d00f      	beq.n	8012918 <TIM_Base_SetConfig+0xf8>
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	4a12      	ldr	r2, [pc, #72]	; (8012944 <TIM_Base_SetConfig+0x124>)
 80128fc:	4293      	cmp	r3, r2
 80128fe:	d00b      	beq.n	8012918 <TIM_Base_SetConfig+0xf8>
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	4a11      	ldr	r2, [pc, #68]	; (8012948 <TIM_Base_SetConfig+0x128>)
 8012904:	4293      	cmp	r3, r2
 8012906:	d007      	beq.n	8012918 <TIM_Base_SetConfig+0xf8>
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	4a10      	ldr	r2, [pc, #64]	; (801294c <TIM_Base_SetConfig+0x12c>)
 801290c:	4293      	cmp	r3, r2
 801290e:	d003      	beq.n	8012918 <TIM_Base_SetConfig+0xf8>
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	4a0f      	ldr	r2, [pc, #60]	; (8012950 <TIM_Base_SetConfig+0x130>)
 8012914:	4293      	cmp	r3, r2
 8012916:	d103      	bne.n	8012920 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012918:	683b      	ldr	r3, [r7, #0]
 801291a:	691a      	ldr	r2, [r3, #16]
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	2201      	movs	r2, #1
 8012924:	615a      	str	r2, [r3, #20]
}
 8012926:	bf00      	nop
 8012928:	3714      	adds	r7, #20
 801292a:	46bd      	mov	sp, r7
 801292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012930:	4770      	bx	lr
 8012932:	bf00      	nop
 8012934:	40010000 	.word	0x40010000
 8012938:	40000400 	.word	0x40000400
 801293c:	40000800 	.word	0x40000800
 8012940:	40000c00 	.word	0x40000c00
 8012944:	40010400 	.word	0x40010400
 8012948:	40014000 	.word	0x40014000
 801294c:	40014400 	.word	0x40014400
 8012950:	40014800 	.word	0x40014800

08012954 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012954:	b480      	push	{r7}
 8012956:	b083      	sub	sp, #12
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801295c:	bf00      	nop
 801295e:	370c      	adds	r7, #12
 8012960:	46bd      	mov	sp, r7
 8012962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012966:	4770      	bx	lr

08012968 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012968:	b480      	push	{r7}
 801296a:	b083      	sub	sp, #12
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012970:	bf00      	nop
 8012972:	370c      	adds	r7, #12
 8012974:	46bd      	mov	sp, r7
 8012976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297a:	4770      	bx	lr

0801297c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801297c:	b480      	push	{r7}
 801297e:	b083      	sub	sp, #12
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012984:	bf00      	nop
 8012986:	370c      	adds	r7, #12
 8012988:	46bd      	mov	sp, r7
 801298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801298e:	4770      	bx	lr

08012990 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8012990:	b480      	push	{r7}
 8012992:	b083      	sub	sp, #12
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
 8012998:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 801299a:	683b      	ldr	r3, [r7, #0]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d121      	bne.n	80129e6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	681a      	ldr	r2, [r3, #0]
 80129a6:	4b27      	ldr	r3, [pc, #156]	; (8012a44 <FMC_SDRAM_Init+0xb4>)
 80129a8:	4013      	ands	r3, r2
 80129aa:	683a      	ldr	r2, [r7, #0]
 80129ac:	6851      	ldr	r1, [r2, #4]
 80129ae:	683a      	ldr	r2, [r7, #0]
 80129b0:	6892      	ldr	r2, [r2, #8]
 80129b2:	4311      	orrs	r1, r2
 80129b4:	683a      	ldr	r2, [r7, #0]
 80129b6:	68d2      	ldr	r2, [r2, #12]
 80129b8:	4311      	orrs	r1, r2
 80129ba:	683a      	ldr	r2, [r7, #0]
 80129bc:	6912      	ldr	r2, [r2, #16]
 80129be:	4311      	orrs	r1, r2
 80129c0:	683a      	ldr	r2, [r7, #0]
 80129c2:	6952      	ldr	r2, [r2, #20]
 80129c4:	4311      	orrs	r1, r2
 80129c6:	683a      	ldr	r2, [r7, #0]
 80129c8:	6992      	ldr	r2, [r2, #24]
 80129ca:	4311      	orrs	r1, r2
 80129cc:	683a      	ldr	r2, [r7, #0]
 80129ce:	69d2      	ldr	r2, [r2, #28]
 80129d0:	4311      	orrs	r1, r2
 80129d2:	683a      	ldr	r2, [r7, #0]
 80129d4:	6a12      	ldr	r2, [r2, #32]
 80129d6:	4311      	orrs	r1, r2
 80129d8:	683a      	ldr	r2, [r7, #0]
 80129da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80129dc:	430a      	orrs	r2, r1
 80129de:	431a      	orrs	r2, r3
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	601a      	str	r2, [r3, #0]
 80129e4:	e026      	b.n	8012a34 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80129ee:	683b      	ldr	r3, [r7, #0]
 80129f0:	69d9      	ldr	r1, [r3, #28]
 80129f2:	683b      	ldr	r3, [r7, #0]
 80129f4:	6a1b      	ldr	r3, [r3, #32]
 80129f6:	4319      	orrs	r1, r3
 80129f8:	683b      	ldr	r3, [r7, #0]
 80129fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129fc:	430b      	orrs	r3, r1
 80129fe:	431a      	orrs	r2, r3
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	685a      	ldr	r2, [r3, #4]
 8012a08:	4b0e      	ldr	r3, [pc, #56]	; (8012a44 <FMC_SDRAM_Init+0xb4>)
 8012a0a:	4013      	ands	r3, r2
 8012a0c:	683a      	ldr	r2, [r7, #0]
 8012a0e:	6851      	ldr	r1, [r2, #4]
 8012a10:	683a      	ldr	r2, [r7, #0]
 8012a12:	6892      	ldr	r2, [r2, #8]
 8012a14:	4311      	orrs	r1, r2
 8012a16:	683a      	ldr	r2, [r7, #0]
 8012a18:	68d2      	ldr	r2, [r2, #12]
 8012a1a:	4311      	orrs	r1, r2
 8012a1c:	683a      	ldr	r2, [r7, #0]
 8012a1e:	6912      	ldr	r2, [r2, #16]
 8012a20:	4311      	orrs	r1, r2
 8012a22:	683a      	ldr	r2, [r7, #0]
 8012a24:	6952      	ldr	r2, [r2, #20]
 8012a26:	4311      	orrs	r1, r2
 8012a28:	683a      	ldr	r2, [r7, #0]
 8012a2a:	6992      	ldr	r2, [r2, #24]
 8012a2c:	430a      	orrs	r2, r1
 8012a2e:	431a      	orrs	r2, r3
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8012a34:	2300      	movs	r3, #0
}
 8012a36:	4618      	mov	r0, r3
 8012a38:	370c      	adds	r7, #12
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a40:	4770      	bx	lr
 8012a42:	bf00      	nop
 8012a44:	ffff8000 	.word	0xffff8000

08012a48 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8012a48:	b480      	push	{r7}
 8012a4a:	b085      	sub	sp, #20
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	60f8      	str	r0, [r7, #12]
 8012a50:	60b9      	str	r1, [r7, #8]
 8012a52:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d128      	bne.n	8012aac <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	689b      	ldr	r3, [r3, #8]
 8012a5e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8012a62:	68bb      	ldr	r3, [r7, #8]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	1e59      	subs	r1, r3, #1
 8012a68:	68bb      	ldr	r3, [r7, #8]
 8012a6a:	685b      	ldr	r3, [r3, #4]
 8012a6c:	3b01      	subs	r3, #1
 8012a6e:	011b      	lsls	r3, r3, #4
 8012a70:	4319      	orrs	r1, r3
 8012a72:	68bb      	ldr	r3, [r7, #8]
 8012a74:	689b      	ldr	r3, [r3, #8]
 8012a76:	3b01      	subs	r3, #1
 8012a78:	021b      	lsls	r3, r3, #8
 8012a7a:	4319      	orrs	r1, r3
 8012a7c:	68bb      	ldr	r3, [r7, #8]
 8012a7e:	68db      	ldr	r3, [r3, #12]
 8012a80:	3b01      	subs	r3, #1
 8012a82:	031b      	lsls	r3, r3, #12
 8012a84:	4319      	orrs	r1, r3
 8012a86:	68bb      	ldr	r3, [r7, #8]
 8012a88:	691b      	ldr	r3, [r3, #16]
 8012a8a:	3b01      	subs	r3, #1
 8012a8c:	041b      	lsls	r3, r3, #16
 8012a8e:	4319      	orrs	r1, r3
 8012a90:	68bb      	ldr	r3, [r7, #8]
 8012a92:	695b      	ldr	r3, [r3, #20]
 8012a94:	3b01      	subs	r3, #1
 8012a96:	051b      	lsls	r3, r3, #20
 8012a98:	4319      	orrs	r1, r3
 8012a9a:	68bb      	ldr	r3, [r7, #8]
 8012a9c:	699b      	ldr	r3, [r3, #24]
 8012a9e:	3b01      	subs	r3, #1
 8012aa0:	061b      	lsls	r3, r3, #24
 8012aa2:	430b      	orrs	r3, r1
 8012aa4:	431a      	orrs	r2, r3
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	609a      	str	r2, [r3, #8]
 8012aaa:	e02d      	b.n	8012b08 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	689a      	ldr	r2, [r3, #8]
 8012ab0:	4b19      	ldr	r3, [pc, #100]	; (8012b18 <FMC_SDRAM_Timing_Init+0xd0>)
 8012ab2:	4013      	ands	r3, r2
 8012ab4:	68ba      	ldr	r2, [r7, #8]
 8012ab6:	68d2      	ldr	r2, [r2, #12]
 8012ab8:	3a01      	subs	r2, #1
 8012aba:	0311      	lsls	r1, r2, #12
 8012abc:	68ba      	ldr	r2, [r7, #8]
 8012abe:	6952      	ldr	r2, [r2, #20]
 8012ac0:	3a01      	subs	r2, #1
 8012ac2:	0512      	lsls	r2, r2, #20
 8012ac4:	430a      	orrs	r2, r1
 8012ac6:	431a      	orrs	r2, r3
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	68db      	ldr	r3, [r3, #12]
 8012ad0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8012ad4:	68bb      	ldr	r3, [r7, #8]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	1e59      	subs	r1, r3, #1
 8012ada:	68bb      	ldr	r3, [r7, #8]
 8012adc:	685b      	ldr	r3, [r3, #4]
 8012ade:	3b01      	subs	r3, #1
 8012ae0:	011b      	lsls	r3, r3, #4
 8012ae2:	4319      	orrs	r1, r3
 8012ae4:	68bb      	ldr	r3, [r7, #8]
 8012ae6:	689b      	ldr	r3, [r3, #8]
 8012ae8:	3b01      	subs	r3, #1
 8012aea:	021b      	lsls	r3, r3, #8
 8012aec:	4319      	orrs	r1, r3
 8012aee:	68bb      	ldr	r3, [r7, #8]
 8012af0:	691b      	ldr	r3, [r3, #16]
 8012af2:	3b01      	subs	r3, #1
 8012af4:	041b      	lsls	r3, r3, #16
 8012af6:	4319      	orrs	r1, r3
 8012af8:	68bb      	ldr	r3, [r7, #8]
 8012afa:	699b      	ldr	r3, [r3, #24]
 8012afc:	3b01      	subs	r3, #1
 8012afe:	061b      	lsls	r3, r3, #24
 8012b00:	430b      	orrs	r3, r1
 8012b02:	431a      	orrs	r2, r3
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8012b08:	2300      	movs	r3, #0
}
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	3714      	adds	r7, #20
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b14:	4770      	bx	lr
 8012b16:	bf00      	nop
 8012b18:	ff0f0fff 	.word	0xff0f0fff

08012b1c <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 8012b1c:	b480      	push	{r7}
 8012b1e:	b083      	sub	sp, #12
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
 8012b24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	683a      	ldr	r2, [r7, #0]
 8012b2a:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8012b2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	683a      	ldr	r2, [r7, #0]
 8012b36:	3202      	adds	r2, #2
 8012b38:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8012b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDCMR      = 0x00000000U;
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	2200      	movs	r2, #0
 8012b44:	611a      	str	r2, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	2200      	movs	r2, #0
 8012b4a:	615a      	str	r2, [r3, #20]
  Device->SDSR       = 0x00000000U;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	2200      	movs	r2, #0
 8012b50:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 8012b52:	2300      	movs	r3, #0
}
 8012b54:	4618      	mov	r0, r3
 8012b56:	370c      	adds	r7, #12
 8012b58:	46bd      	mov	sp, r7
 8012b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b5e:	4770      	bx	lr

08012b60 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8012b60:	b480      	push	{r7}
 8012b62:	b085      	sub	sp, #20
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	60f8      	str	r0, [r7, #12]
 8012b68:	60b9      	str	r1, [r7, #8]
 8012b6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	691a      	ldr	r2, [r3, #16]
 8012b70:	4b0c      	ldr	r3, [pc, #48]	; (8012ba4 <FMC_SDRAM_SendCommand+0x44>)
 8012b72:	4013      	ands	r3, r2
 8012b74:	68ba      	ldr	r2, [r7, #8]
 8012b76:	6811      	ldr	r1, [r2, #0]
 8012b78:	68ba      	ldr	r2, [r7, #8]
 8012b7a:	6852      	ldr	r2, [r2, #4]
 8012b7c:	4311      	orrs	r1, r2
 8012b7e:	68ba      	ldr	r2, [r7, #8]
 8012b80:	6892      	ldr	r2, [r2, #8]
 8012b82:	3a01      	subs	r2, #1
 8012b84:	0152      	lsls	r2, r2, #5
 8012b86:	4311      	orrs	r1, r2
 8012b88:	68ba      	ldr	r2, [r7, #8]
 8012b8a:	68d2      	ldr	r2, [r2, #12]
 8012b8c:	0252      	lsls	r2, r2, #9
 8012b8e:	430a      	orrs	r2, r1
 8012b90:	431a      	orrs	r2, r3
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8012b96:	2300      	movs	r3, #0
}
 8012b98:	4618      	mov	r0, r3
 8012b9a:	3714      	adds	r7, #20
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba2:	4770      	bx	lr
 8012ba4:	ffc00000 	.word	0xffc00000

08012ba8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8012ba8:	b480      	push	{r7}
 8012baa:	b083      	sub	sp, #12
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	6078      	str	r0, [r7, #4]
 8012bb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	695a      	ldr	r2, [r3, #20]
 8012bb6:	4b07      	ldr	r3, [pc, #28]	; (8012bd4 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8012bb8:	4013      	ands	r3, r2
 8012bba:	683a      	ldr	r2, [r7, #0]
 8012bbc:	0052      	lsls	r2, r2, #1
 8012bbe:	431a      	orrs	r2, r3
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8012bc4:	2300      	movs	r3, #0
}
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	370c      	adds	r7, #12
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd0:	4770      	bx	lr
 8012bd2:	bf00      	nop
 8012bd4:	ffffc001 	.word	0xffffc001

08012bd8 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8012bd8:	8880      	ldrh	r0, [r0, #4]
 8012bda:	4770      	bx	lr

08012bdc <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8012bdc:	b570      	push	{r4, r5, r6, lr}
 8012bde:	6803      	ldr	r3, [r0, #0]
 8012be0:	460c      	mov	r4, r1
 8012be2:	2100      	movs	r1, #0
 8012be4:	4605      	mov	r5, r0
 8012be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012be8:	4798      	blx	r3
 8012bea:	4606      	mov	r6, r0
 8012bec:	682b      	ldr	r3, [r5, #0]
 8012bee:	4628      	mov	r0, r5
 8012bf0:	1ba4      	subs	r4, r4, r6
 8012bf2:	6a1b      	ldr	r3, [r3, #32]
 8012bf4:	b2a4      	uxth	r4, r4
 8012bf6:	4798      	blx	r3
 8012bf8:	fbb4 f0f0 	udiv	r0, r4, r0
 8012bfc:	bd70      	pop	{r4, r5, r6, pc}

08012bfe <_ZN8touchgfx17AbstractPartition5clearEv>:
 8012bfe:	2300      	movs	r3, #0
 8012c00:	8083      	strh	r3, [r0, #4]
 8012c02:	4770      	bx	lr

08012c04 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8012c04:	b510      	push	{r4, lr}
 8012c06:	6803      	ldr	r3, [r0, #0]
 8012c08:	4604      	mov	r4, r0
 8012c0a:	8881      	ldrh	r1, [r0, #4]
 8012c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c0e:	4798      	blx	r3
 8012c10:	88a3      	ldrh	r3, [r4, #4]
 8012c12:	3301      	adds	r3, #1
 8012c14:	80a3      	strh	r3, [r4, #4]
 8012c16:	bd10      	pop	{r4, pc}

08012c18 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8012c18:	6803      	ldr	r3, [r0, #0]
 8012c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c1c:	4718      	bx	r3

08012c1e <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8012c1e:	4770      	bx	lr

08012c20 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8012c20:	4a02      	ldr	r2, [pc, #8]	; (8012c2c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8012c22:	6002      	str	r2, [r0, #0]
 8012c24:	2200      	movs	r2, #0
 8012c26:	8082      	strh	r2, [r0, #4]
 8012c28:	4770      	bx	lr
 8012c2a:	bf00      	nop
 8012c2c:	080278ec 	.word	0x080278ec

08012c30 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8012c30:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012c32:	2000      	movs	r0, #0
 8012c34:	b12b      	cbz	r3, 8012c42 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012c36:	b920      	cbnz	r0, 8012c42 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012c38:	1a5a      	subs	r2, r3, r1
 8012c3a:	699b      	ldr	r3, [r3, #24]
 8012c3c:	4250      	negs	r0, r2
 8012c3e:	4150      	adcs	r0, r2
 8012c40:	e7f8      	b.n	8012c34 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8012c42:	4770      	bx	lr

08012c44 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8012c44:	2300      	movs	r3, #0
 8012c46:	6148      	str	r0, [r1, #20]
 8012c48:	618b      	str	r3, [r1, #24]
 8012c4a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012c4c:	b913      	cbnz	r3, 8012c54 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8012c4e:	6281      	str	r1, [r0, #40]	; 0x28
 8012c50:	4770      	bx	lr
 8012c52:	4613      	mov	r3, r2
 8012c54:	699a      	ldr	r2, [r3, #24]
 8012c56:	2a00      	cmp	r2, #0
 8012c58:	d1fb      	bne.n	8012c52 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8012c5a:	6199      	str	r1, [r3, #24]
 8012c5c:	4770      	bx	lr

08012c5e <_ZN8touchgfx9Container9removeAllEv>:
 8012c5e:	2200      	movs	r2, #0
 8012c60:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012c62:	b123      	cbz	r3, 8012c6e <_ZN8touchgfx9Container9removeAllEv+0x10>
 8012c64:	6999      	ldr	r1, [r3, #24]
 8012c66:	6281      	str	r1, [r0, #40]	; 0x28
 8012c68:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8012c6c:	e7f8      	b.n	8012c60 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8012c6e:	4770      	bx	lr

08012c70 <_ZN8touchgfx9Container6unlinkEv>:
 8012c70:	2300      	movs	r3, #0
 8012c72:	6283      	str	r3, [r0, #40]	; 0x28
 8012c74:	4770      	bx	lr

08012c76 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8012c76:	2200      	movs	r2, #0
 8012c78:	8002      	strh	r2, [r0, #0]
 8012c7a:	8042      	strh	r2, [r0, #2]
 8012c7c:	8082      	strh	r2, [r0, #4]
 8012c7e:	80c2      	strh	r2, [r0, #6]
 8012c80:	4770      	bx	lr

08012c82 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8012c82:	b570      	push	{r4, r5, r6, lr}
 8012c84:	460d      	mov	r5, r1
 8012c86:	4616      	mov	r6, r2
 8012c88:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012c8a:	b13c      	cbz	r4, 8012c9c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8012c8c:	6823      	ldr	r3, [r4, #0]
 8012c8e:	4620      	mov	r0, r4
 8012c90:	4632      	mov	r2, r6
 8012c92:	4629      	mov	r1, r5
 8012c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012c96:	4798      	blx	r3
 8012c98:	69a4      	ldr	r4, [r4, #24]
 8012c9a:	e7f6      	b.n	8012c8a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8012c9c:	bd70      	pop	{r4, r5, r6, pc}

08012c9e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8012c9e:	b538      	push	{r3, r4, r5, lr}
 8012ca0:	460d      	mov	r5, r1
 8012ca2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012ca4:	b134      	cbz	r4, 8012cb4 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8012ca6:	682b      	ldr	r3, [r5, #0]
 8012ca8:	4621      	mov	r1, r4
 8012caa:	4628      	mov	r0, r5
 8012cac:	689b      	ldr	r3, [r3, #8]
 8012cae:	4798      	blx	r3
 8012cb0:	69a4      	ldr	r4, [r4, #24]
 8012cb2:	e7f7      	b.n	8012ca4 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8012cb4:	bd38      	pop	{r3, r4, r5, pc}

08012cb6 <_ZNK8touchgfx9Container17invalidateContentEv>:
 8012cb6:	b510      	push	{r4, lr}
 8012cb8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012cba:	b12c      	cbz	r4, 8012cc8 <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 8012cbc:	6823      	ldr	r3, [r4, #0]
 8012cbe:	4620      	mov	r0, r4
 8012cc0:	699b      	ldr	r3, [r3, #24]
 8012cc2:	4798      	blx	r3
 8012cc4:	69a4      	ldr	r4, [r4, #24]
 8012cc6:	e7f8      	b.n	8012cba <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 8012cc8:	bd10      	pop	{r4, pc}

08012cca <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8012cca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012ccc:	b19b      	cbz	r3, 8012cf6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8012cce:	428b      	cmp	r3, r1
 8012cd0:	d109      	bne.n	8012ce6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8012cd2:	699a      	ldr	r2, [r3, #24]
 8012cd4:	2100      	movs	r1, #0
 8012cd6:	6159      	str	r1, [r3, #20]
 8012cd8:	6282      	str	r2, [r0, #40]	; 0x28
 8012cda:	b902      	cbnz	r2, 8012cde <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8012cdc:	4770      	bx	lr
 8012cde:	6199      	str	r1, [r3, #24]
 8012ce0:	4770      	bx	lr
 8012ce2:	4613      	mov	r3, r2
 8012ce4:	b13a      	cbz	r2, 8012cf6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8012ce6:	699a      	ldr	r2, [r3, #24]
 8012ce8:	428a      	cmp	r2, r1
 8012cea:	d1fa      	bne.n	8012ce2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8012cec:	698a      	ldr	r2, [r1, #24]
 8012cee:	619a      	str	r2, [r3, #24]
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8012cf6:	4770      	bx	lr

08012cf8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8012cf8:	b410      	push	{r4}
 8012cfa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012cfc:	4604      	mov	r4, r0
 8012cfe:	b92b      	cbnz	r3, 8012d0c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8012d00:	6803      	ldr	r3, [r0, #0]
 8012d02:	4611      	mov	r1, r2
 8012d04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012d0a:	4718      	bx	r3
 8012d0c:	b941      	cbnz	r1, 8012d20 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8012d0e:	6193      	str	r3, [r2, #24]
 8012d10:	6282      	str	r2, [r0, #40]	; 0x28
 8012d12:	6154      	str	r4, [r2, #20]
 8012d14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d18:	4770      	bx	lr
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	2800      	cmp	r0, #0
 8012d1e:	d0f9      	beq.n	8012d14 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8012d20:	4299      	cmp	r1, r3
 8012d22:	6998      	ldr	r0, [r3, #24]
 8012d24:	d1f9      	bne.n	8012d1a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8012d26:	6190      	str	r0, [r2, #24]
 8012d28:	618a      	str	r2, [r1, #24]
 8012d2a:	e7f2      	b.n	8012d12 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08012d2c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8012d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d30:	461f      	mov	r7, r3
 8012d32:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8012d36:	460d      	mov	r5, r1
 8012d38:	4616      	mov	r6, r2
 8012d3a:	b103      	cbz	r3, 8012d3e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8012d3c:	6038      	str	r0, [r7, #0]
 8012d3e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012d40:	b314      	cbz	r4, 8012d88 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8012d42:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8012d46:	b1eb      	cbz	r3, 8012d84 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012d48:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012d4c:	428d      	cmp	r5, r1
 8012d4e:	db19      	blt.n	8012d84 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012d50:	b289      	uxth	r1, r1
 8012d52:	8923      	ldrh	r3, [r4, #8]
 8012d54:	440b      	add	r3, r1
 8012d56:	b21b      	sxth	r3, r3
 8012d58:	429d      	cmp	r5, r3
 8012d5a:	da13      	bge.n	8012d84 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012d5c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8012d60:	4296      	cmp	r6, r2
 8012d62:	db0f      	blt.n	8012d84 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012d64:	b292      	uxth	r2, r2
 8012d66:	8963      	ldrh	r3, [r4, #10]
 8012d68:	4413      	add	r3, r2
 8012d6a:	b21b      	sxth	r3, r3
 8012d6c:	429e      	cmp	r6, r3
 8012d6e:	da09      	bge.n	8012d84 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012d70:	6823      	ldr	r3, [r4, #0]
 8012d72:	1ab2      	subs	r2, r6, r2
 8012d74:	1a69      	subs	r1, r5, r1
 8012d76:	4620      	mov	r0, r4
 8012d78:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8012d7c:	b212      	sxth	r2, r2
 8012d7e:	463b      	mov	r3, r7
 8012d80:	b209      	sxth	r1, r1
 8012d82:	47c0      	blx	r8
 8012d84:	69a4      	ldr	r4, [r4, #24]
 8012d86:	e7db      	b.n	8012d40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8012d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012d8c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8012d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d90:	4c6d      	ldr	r4, [pc, #436]	; (8012f48 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8012d92:	b0a1      	sub	sp, #132	; 0x84
 8012d94:	4606      	mov	r6, r0
 8012d96:	6824      	ldr	r4, [r4, #0]
 8012d98:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8012d9a:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8012d9e:	2400      	movs	r4, #0
 8012da0:	9303      	str	r3, [sp, #12]
 8012da2:	802c      	strh	r4, [r5, #0]
 8012da4:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8012da6:	802c      	strh	r4, [r5, #0]
 8012da8:	601c      	str	r4, [r3, #0]
 8012daa:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8012dae:	f7ff ffbd 	bl	8012d2c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8012db2:	f1b9 0f03 	cmp.w	r9, #3
 8012db6:	f340 80c1 	ble.w	8012f3c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8012dba:	4631      	mov	r1, r6
 8012dbc:	a80c      	add	r0, sp, #48	; 0x30
 8012dbe:	f004 fb63 	bl	8017488 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012dc2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8012dc6:	9306      	str	r3, [sp, #24]
 8012dc8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8012dcc:	9307      	str	r3, [sp, #28]
 8012dce:	9b03      	ldr	r3, [sp, #12]
 8012dd0:	f8d3 a000 	ldr.w	sl, [r3]
 8012dd4:	f1ba 0f00 	cmp.w	sl, #0
 8012dd8:	f000 80b3 	beq.w	8012f42 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8012ddc:	4651      	mov	r1, sl
 8012dde:	a810      	add	r0, sp, #64	; 0x40
 8012de0:	f004 fb52 	bl	8017488 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012de4:	2002      	movs	r0, #2
 8012de6:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8012dea:	9b01      	ldr	r3, [sp, #4]
 8012dec:	9a06      	ldr	r2, [sp, #24]
 8012dee:	fb91 f1f0 	sdiv	r1, r1, r0
 8012df2:	189d      	adds	r5, r3, r2
 8012df4:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8012df8:	9a07      	ldr	r2, [sp, #28]
 8012dfa:	4419      	add	r1, r3
 8012dfc:	9b02      	ldr	r3, [sp, #8]
 8012dfe:	4413      	add	r3, r2
 8012e00:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8012e04:	1a6d      	subs	r5, r5, r1
 8012e06:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8012e0a:	fb92 f2f0 	sdiv	r2, r2, r0
 8012e0e:	440a      	add	r2, r1
 8012e10:	1a9b      	subs	r3, r3, r2
 8012e12:	435b      	muls	r3, r3
 8012e14:	fb05 3505 	mla	r5, r5, r5, r3
 8012e18:	4f4c      	ldr	r7, [pc, #304]	; (8012f4c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8012e1a:	ac10      	add	r4, sp, #64	; 0x40
 8012e1c:	f1b9 0f0c 	cmp.w	r9, #12
 8012e20:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012e24:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012e26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012e28:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012e2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012e2c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8012e30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012e34:	f04f 0303 	mov.w	r3, #3
 8012e38:	bfd8      	it	le
 8012e3a:	f109 32ff 	addle.w	r2, r9, #4294967295
 8012e3e:	f04f 0400 	mov.w	r4, #0
 8012e42:	f8cd 9000 	str.w	r9, [sp]
 8012e46:	bfcc      	ite	gt
 8012e48:	4698      	movgt	r8, r3
 8012e4a:	fb92 f8f3 	sdivle	r8, r2, r3
 8012e4e:	1c63      	adds	r3, r4, #1
 8012e50:	aa10      	add	r2, sp, #64	; 0x40
 8012e52:	f004 0401 	and.w	r4, r4, #1
 8012e56:	f04f 0b00 	mov.w	fp, #0
 8012e5a:	9308      	str	r3, [sp, #32]
 8012e5c:	9b00      	ldr	r3, [sp, #0]
 8012e5e:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8012e62:	fb93 f3f8 	sdiv	r3, r3, r8
 8012e66:	3404      	adds	r4, #4
 8012e68:	b29b      	uxth	r3, r3
 8012e6a:	9304      	str	r3, [sp, #16]
 8012e6c:	9a04      	ldr	r2, [sp, #16]
 8012e6e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012e72:	fb13 f302 	smulbb	r3, r3, r2
 8012e76:	9a01      	ldr	r2, [sp, #4]
 8012e78:	b29b      	uxth	r3, r3
 8012e7a:	1899      	adds	r1, r3, r2
 8012e7c:	9305      	str	r3, [sp, #20]
 8012e7e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8012e82:	b209      	sxth	r1, r1
 8012e84:	4299      	cmp	r1, r3
 8012e86:	db4d      	blt.n	8012f24 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012e88:	8932      	ldrh	r2, [r6, #8]
 8012e8a:	4413      	add	r3, r2
 8012e8c:	b21b      	sxth	r3, r3
 8012e8e:	4299      	cmp	r1, r3
 8012e90:	da48      	bge.n	8012f24 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012e92:	9b04      	ldr	r3, [sp, #16]
 8012e94:	6827      	ldr	r7, [r4, #0]
 8012e96:	fb17 f703 	smulbb	r7, r7, r3
 8012e9a:	9b02      	ldr	r3, [sp, #8]
 8012e9c:	b2bf      	uxth	r7, r7
 8012e9e:	18fa      	adds	r2, r7, r3
 8012ea0:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8012ea4:	b212      	sxth	r2, r2
 8012ea6:	429a      	cmp	r2, r3
 8012ea8:	db3c      	blt.n	8012f24 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012eaa:	8970      	ldrh	r0, [r6, #10]
 8012eac:	4403      	add	r3, r0
 8012eae:	b21b      	sxth	r3, r3
 8012eb0:	429a      	cmp	r2, r3
 8012eb2:	da37      	bge.n	8012f24 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	4630      	mov	r0, r6
 8012eb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8012eba:	ab0b      	add	r3, sp, #44	; 0x2c
 8012ebc:	f7ff ff36 	bl	8012d2c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8012ec0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012ec2:	b37a      	cbz	r2, 8012f24 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012ec4:	4552      	cmp	r2, sl
 8012ec6:	d02d      	beq.n	8012f24 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012ec8:	4611      	mov	r1, r2
 8012eca:	a80e      	add	r0, sp, #56	; 0x38
 8012ecc:	9209      	str	r2, [sp, #36]	; 0x24
 8012ece:	f004 fadb 	bl	8017488 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012ed2:	f04f 0e02 	mov.w	lr, #2
 8012ed6:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8012eda:	9a06      	ldr	r2, [sp, #24]
 8012edc:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8012ee0:	9b01      	ldr	r3, [sp, #4]
 8012ee2:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8012ee6:	4413      	add	r3, r2
 8012ee8:	9a07      	ldr	r2, [sp, #28]
 8012eea:	fb91 f1fe 	sdiv	r1, r1, lr
 8012eee:	fb9c fcfe 	sdiv	ip, ip, lr
 8012ef2:	4401      	add	r1, r0
 8012ef4:	1a58      	subs	r0, r3, r1
 8012ef6:	9b02      	ldr	r3, [sp, #8]
 8012ef8:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8012efc:	4413      	add	r3, r2
 8012efe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f00:	448c      	add	ip, r1
 8012f02:	eba3 030c 	sub.w	r3, r3, ip
 8012f06:	435b      	muls	r3, r3
 8012f08:	fb00 3300 	mla	r3, r0, r0, r3
 8012f0c:	42ab      	cmp	r3, r5
 8012f0e:	d208      	bcs.n	8012f22 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8012f10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012f12:	461d      	mov	r5, r3
 8012f14:	9803      	ldr	r0, [sp, #12]
 8012f16:	6001      	str	r1, [r0, #0]
 8012f18:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8012f1a:	9805      	ldr	r0, [sp, #20]
 8012f1c:	8008      	strh	r0, [r1, #0]
 8012f1e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8012f20:	800f      	strh	r7, [r1, #0]
 8012f22:	4692      	mov	sl, r2
 8012f24:	f10b 0b01 	add.w	fp, fp, #1
 8012f28:	3408      	adds	r4, #8
 8012f2a:	f1bb 0f04 	cmp.w	fp, #4
 8012f2e:	d19d      	bne.n	8012e6c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8012f30:	9b00      	ldr	r3, [sp, #0]
 8012f32:	9c08      	ldr	r4, [sp, #32]
 8012f34:	444b      	add	r3, r9
 8012f36:	4544      	cmp	r4, r8
 8012f38:	9300      	str	r3, [sp, #0]
 8012f3a:	d188      	bne.n	8012e4e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8012f3c:	b021      	add	sp, #132	; 0x84
 8012f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f42:	f04f 35ff 	mov.w	r5, #4294967295
 8012f46:	e767      	b.n	8012e18 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8012f48:	2400b084 	.word	0x2400b084
 8012f4c:	08026d74 	.word	0x08026d74

08012f50 <_ZN8touchgfx4RectaNERKS0_>:
 8012f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f54:	f9b1 7000 	ldrsh.w	r7, [r1]
 8012f58:	888c      	ldrh	r4, [r1, #4]
 8012f5a:	f9b0 9000 	ldrsh.w	r9, [r0]
 8012f5e:	443c      	add	r4, r7
 8012f60:	b2a4      	uxth	r4, r4
 8012f62:	fa0f f884 	sxth.w	r8, r4
 8012f66:	45c1      	cmp	r9, r8
 8012f68:	da2f      	bge.n	8012fca <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012f6a:	8882      	ldrh	r2, [r0, #4]
 8012f6c:	444a      	add	r2, r9
 8012f6e:	b292      	uxth	r2, r2
 8012f70:	fa0f fe82 	sxth.w	lr, r2
 8012f74:	4577      	cmp	r7, lr
 8012f76:	da28      	bge.n	8012fca <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012f78:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8012f7c:	88cb      	ldrh	r3, [r1, #6]
 8012f7e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8012f82:	442b      	add	r3, r5
 8012f84:	b21b      	sxth	r3, r3
 8012f86:	429e      	cmp	r6, r3
 8012f88:	da1f      	bge.n	8012fca <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012f8a:	88c3      	ldrh	r3, [r0, #6]
 8012f8c:	4433      	add	r3, r6
 8012f8e:	b29b      	uxth	r3, r3
 8012f90:	fa0f fc83 	sxth.w	ip, r3
 8012f94:	4565      	cmp	r5, ip
 8012f96:	da18      	bge.n	8012fca <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012f98:	454f      	cmp	r7, r9
 8012f9a:	bfb8      	it	lt
 8012f9c:	464f      	movlt	r7, r9
 8012f9e:	42b5      	cmp	r5, r6
 8012fa0:	bfb8      	it	lt
 8012fa2:	4635      	movlt	r5, r6
 8012fa4:	45f0      	cmp	r8, lr
 8012fa6:	bfd8      	it	le
 8012fa8:	4622      	movle	r2, r4
 8012faa:	1bd2      	subs	r2, r2, r7
 8012fac:	8082      	strh	r2, [r0, #4]
 8012fae:	884a      	ldrh	r2, [r1, #2]
 8012fb0:	88c9      	ldrh	r1, [r1, #6]
 8012fb2:	8007      	strh	r7, [r0, #0]
 8012fb4:	440a      	add	r2, r1
 8012fb6:	8045      	strh	r5, [r0, #2]
 8012fb8:	b292      	uxth	r2, r2
 8012fba:	b211      	sxth	r1, r2
 8012fbc:	458c      	cmp	ip, r1
 8012fbe:	bfa8      	it	ge
 8012fc0:	4613      	movge	r3, r2
 8012fc2:	1b5b      	subs	r3, r3, r5
 8012fc4:	80c3      	strh	r3, [r0, #6]
 8012fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012fca:	2300      	movs	r3, #0
 8012fcc:	8003      	strh	r3, [r0, #0]
 8012fce:	8043      	strh	r3, [r0, #2]
 8012fd0:	8083      	strh	r3, [r0, #4]
 8012fd2:	80c3      	strh	r3, [r0, #6]
 8012fd4:	e7f7      	b.n	8012fc6 <_ZN8touchgfx4RectaNERKS0_+0x76>

08012fd6 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8012fd6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	dd06      	ble.n	8012fec <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8012fde:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8012fe2:	2800      	cmp	r0, #0
 8012fe4:	bfcc      	ite	gt
 8012fe6:	2000      	movgt	r0, #0
 8012fe8:	2001      	movle	r0, #1
 8012fea:	4770      	bx	lr
 8012fec:	2001      	movs	r0, #1
 8012fee:	4770      	bx	lr

08012ff0 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8012ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ff4:	2300      	movs	r3, #0
 8012ff6:	4604      	mov	r4, r0
 8012ff8:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8012ffa:	8003      	strh	r3, [r0, #0]
 8012ffc:	8043      	strh	r3, [r0, #2]
 8012ffe:	8083      	strh	r3, [r0, #4]
 8013000:	80c3      	strh	r3, [r0, #6]
 8013002:	2d00      	cmp	r5, #0
 8013004:	d040      	beq.n	8013088 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8013006:	1d28      	adds	r0, r5, #4
 8013008:	f7ff ffe5 	bl	8012fd6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801300c:	b988      	cbnz	r0, 8013032 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801300e:	4620      	mov	r0, r4
 8013010:	f7ff ffe1 	bl	8012fd6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013014:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8013018:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801301c:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8013020:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8013024:	b138      	cbz	r0, 8013036 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8013026:	8022      	strh	r2, [r4, #0]
 8013028:	8063      	strh	r3, [r4, #2]
 801302a:	f8a4 e004 	strh.w	lr, [r4, #4]
 801302e:	f8a4 c006 	strh.w	ip, [r4, #6]
 8013032:	69ad      	ldr	r5, [r5, #24]
 8013034:	e7e5      	b.n	8013002 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8013036:	f9b4 0000 	ldrsh.w	r0, [r4]
 801303a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801303e:	4290      	cmp	r0, r2
 8013040:	4607      	mov	r7, r0
 8013042:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8013046:	460e      	mov	r6, r1
 8013048:	bfa8      	it	ge
 801304a:	4617      	movge	r7, r2
 801304c:	4299      	cmp	r1, r3
 801304e:	4472      	add	r2, lr
 8013050:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8013054:	bfa8      	it	ge
 8013056:	461e      	movge	r6, r3
 8013058:	4440      	add	r0, r8
 801305a:	4471      	add	r1, lr
 801305c:	4463      	add	r3, ip
 801305e:	b200      	sxth	r0, r0
 8013060:	8027      	strh	r7, [r4, #0]
 8013062:	b212      	sxth	r2, r2
 8013064:	8066      	strh	r6, [r4, #2]
 8013066:	b209      	sxth	r1, r1
 8013068:	b21b      	sxth	r3, r3
 801306a:	4290      	cmp	r0, r2
 801306c:	bfac      	ite	ge
 801306e:	ebc7 0200 	rsbge	r2, r7, r0
 8013072:	ebc7 0202 	rsblt	r2, r7, r2
 8013076:	4299      	cmp	r1, r3
 8013078:	bfac      	ite	ge
 801307a:	ebc6 0301 	rsbge	r3, r6, r1
 801307e:	ebc6 0303 	rsblt	r3, r6, r3
 8013082:	80a2      	strh	r2, [r4, #4]
 8013084:	80e3      	strh	r3, [r4, #6]
 8013086:	e7d4      	b.n	8013032 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8013088:	4620      	mov	r0, r4
 801308a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801308e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801308e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013092:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8013096:	b383      	cbz	r3, 80130fa <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8013098:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801309a:	b374      	cbz	r4, 80130fa <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801309c:	f9b1 5000 	ldrsh.w	r5, [r1]
 80130a0:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80130a4:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80130a8:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80130ac:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80130b0:	b303      	cbz	r3, 80130f4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80130b2:	4668      	mov	r0, sp
 80130b4:	1d21      	adds	r1, r4, #4
 80130b6:	f8ad 5000 	strh.w	r5, [sp]
 80130ba:	f8ad 6002 	strh.w	r6, [sp, #2]
 80130be:	f8ad 7004 	strh.w	r7, [sp, #4]
 80130c2:	f8ad 8006 	strh.w	r8, [sp, #6]
 80130c6:	f7ff ff43 	bl	8012f50 <_ZN8touchgfx4RectaNERKS0_>
 80130ca:	4668      	mov	r0, sp
 80130cc:	f7ff ff83 	bl	8012fd6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80130d0:	b980      	cbnz	r0, 80130f4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80130d2:	f8bd 3000 	ldrh.w	r3, [sp]
 80130d6:	4669      	mov	r1, sp
 80130d8:	88a2      	ldrh	r2, [r4, #4]
 80130da:	4620      	mov	r0, r4
 80130dc:	1a9b      	subs	r3, r3, r2
 80130de:	88e2      	ldrh	r2, [r4, #6]
 80130e0:	f8ad 3000 	strh.w	r3, [sp]
 80130e4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80130e8:	1a9b      	subs	r3, r3, r2
 80130ea:	f8ad 3002 	strh.w	r3, [sp, #2]
 80130ee:	6823      	ldr	r3, [r4, #0]
 80130f0:	689b      	ldr	r3, [r3, #8]
 80130f2:	4798      	blx	r3
 80130f4:	69a4      	ldr	r4, [r4, #24]
 80130f6:	2c00      	cmp	r4, #0
 80130f8:	d1d8      	bne.n	80130ac <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80130fa:	b002      	add	sp, #8
 80130fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013100 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8013100:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013102:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8013106:	460d      	mov	r5, r1
 8013108:	4616      	mov	r6, r2
 801310a:	b323      	cbz	r3, 8013156 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801310c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801310e:	b314      	cbz	r4, 8013156 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8013110:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8013114:	b1eb      	cbz	r3, 8013152 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8013116:	6828      	ldr	r0, [r5, #0]
 8013118:	466b      	mov	r3, sp
 801311a:	6869      	ldr	r1, [r5, #4]
 801311c:	c303      	stmia	r3!, {r0, r1}
 801311e:	4668      	mov	r0, sp
 8013120:	1d21      	adds	r1, r4, #4
 8013122:	f7ff ff15 	bl	8012f50 <_ZN8touchgfx4RectaNERKS0_>
 8013126:	4668      	mov	r0, sp
 8013128:	f7ff ff55 	bl	8012fd6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801312c:	b988      	cbnz	r0, 8013152 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801312e:	f8bd 3000 	ldrh.w	r3, [sp]
 8013132:	4669      	mov	r1, sp
 8013134:	88a2      	ldrh	r2, [r4, #4]
 8013136:	4620      	mov	r0, r4
 8013138:	1a9b      	subs	r3, r3, r2
 801313a:	88e2      	ldrh	r2, [r4, #6]
 801313c:	f8ad 3000 	strh.w	r3, [sp]
 8013140:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013144:	1a9b      	subs	r3, r3, r2
 8013146:	4632      	mov	r2, r6
 8013148:	f8ad 3002 	strh.w	r3, [sp, #2]
 801314c:	6823      	ldr	r3, [r4, #0]
 801314e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013150:	4798      	blx	r3
 8013152:	69a4      	ldr	r4, [r4, #24]
 8013154:	e7db      	b.n	801310e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8013156:	b002      	add	sp, #8
 8013158:	bd70      	pop	{r4, r5, r6, pc}

0801315a <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 801315a:	4770      	bx	lr

0801315c <_ZN8touchgfx3HAL10FlushCacheEv>:
 801315c:	4770      	bx	lr

0801315e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801315e:	6803      	ldr	r3, [r0, #0]
 8013160:	b513      	push	{r0, r1, r4, lr}
 8013162:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8013166:	2300      	movs	r3, #0
 8013168:	e9cd 3300 	strd	r3, r3, [sp]
 801316c:	466b      	mov	r3, sp
 801316e:	47a0      	blx	r4
 8013170:	b002      	add	sp, #8
 8013172:	bd10      	pop	{r4, pc}

08013174 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8013174:	2301      	movs	r3, #1
 8013176:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801317a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801317e:	4770      	bx	lr

08013180 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8013180:	2301      	movs	r3, #1
 8013182:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8013186:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801318a:	4770      	bx	lr

0801318c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801318c:	6843      	ldr	r3, [r0, #4]
 801318e:	2201      	movs	r2, #1
 8013190:	725a      	strb	r2, [r3, #9]
 8013192:	6840      	ldr	r0, [r0, #4]
 8013194:	6803      	ldr	r3, [r0, #0]
 8013196:	691b      	ldr	r3, [r3, #16]
 8013198:	4718      	bx	r3

0801319a <_ZN8touchgfx3HAL8flushDMAEv>:
 801319a:	6840      	ldr	r0, [r0, #4]
 801319c:	6803      	ldr	r3, [r0, #0]
 801319e:	689b      	ldr	r3, [r3, #8]
 80131a0:	4718      	bx	r3

080131a2 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80131a2:	b530      	push	{r4, r5, lr}
 80131a4:	b08b      	sub	sp, #44	; 0x2c
 80131a6:	6804      	ldr	r4, [r0, #0]
 80131a8:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80131ac:	9509      	str	r5, [sp, #36]	; 0x24
 80131ae:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80131b2:	9508      	str	r5, [sp, #32]
 80131b4:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80131b8:	9507      	str	r5, [sp, #28]
 80131ba:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80131be:	9506      	str	r5, [sp, #24]
 80131c0:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80131c4:	9505      	str	r5, [sp, #20]
 80131c6:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80131ca:	9504      	str	r5, [sp, #16]
 80131cc:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 80131d0:	9503      	str	r5, [sp, #12]
 80131d2:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80131d6:	9502      	str	r5, [sp, #8]
 80131d8:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80131dc:	e9cd 3500 	strd	r3, r5, [sp]
 80131e0:	4613      	mov	r3, r2
 80131e2:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 80131e4:	2200      	movs	r2, #0
 80131e6:	47a0      	blx	r4
 80131e8:	b00b      	add	sp, #44	; 0x2c
 80131ea:	bd30      	pop	{r4, r5, pc}

080131ec <_ZN8touchgfx3HAL10beginFrameEv>:
 80131ec:	4b04      	ldr	r3, [pc, #16]	; (8013200 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80131ee:	781b      	ldrb	r3, [r3, #0]
 80131f0:	b123      	cbz	r3, 80131fc <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80131f2:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 80131f6:	f080 0001 	eor.w	r0, r0, #1
 80131fa:	4770      	bx	lr
 80131fc:	2001      	movs	r0, #1
 80131fe:	4770      	bx	lr
 8013200:	2400b082 	.word	0x2400b082

08013204 <_ZN8touchgfx3HAL8endFrameEv>:
 8013204:	b510      	push	{r4, lr}
 8013206:	4604      	mov	r4, r0
 8013208:	6840      	ldr	r0, [r0, #4]
 801320a:	6803      	ldr	r3, [r0, #0]
 801320c:	689b      	ldr	r3, [r3, #8]
 801320e:	4798      	blx	r3
 8013210:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8013214:	b113      	cbz	r3, 801321c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8013216:	2301      	movs	r3, #1
 8013218:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801321c:	bd10      	pop	{r4, pc}

0801321e <_ZN8touchgfx3HAL10initializeEv>:
 801321e:	b510      	push	{r4, lr}
 8013220:	4604      	mov	r4, r0
 8013222:	f7ee fe07 	bl	8001e34 <_ZN8touchgfx10OSWrappers10initializeEv>
 8013226:	6860      	ldr	r0, [r4, #4]
 8013228:	6803      	ldr	r3, [r0, #0]
 801322a:	68db      	ldr	r3, [r3, #12]
 801322c:	4798      	blx	r3
 801322e:	68e0      	ldr	r0, [r4, #12]
 8013230:	6803      	ldr	r3, [r0, #0]
 8013232:	689b      	ldr	r3, [r3, #8]
 8013234:	4798      	blx	r3
 8013236:	6823      	ldr	r3, [r4, #0]
 8013238:	4620      	mov	r0, r4
 801323a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801323c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013240:	4718      	bx	r3

08013242 <_ZN8touchgfx3HAL9taskEntryEv>:
 8013242:	b508      	push	{r3, lr}
 8013244:	6803      	ldr	r3, [r0, #0]
 8013246:	4604      	mov	r4, r0
 8013248:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801324c:	4798      	blx	r3
 801324e:	6823      	ldr	r3, [r4, #0]
 8013250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013252:	4620      	mov	r0, r4
 8013254:	4798      	blx	r3
 8013256:	f7ee fe63 	bl	8001f20 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801325a:	6823      	ldr	r3, [r4, #0]
 801325c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801325e:	e7f8      	b.n	8013252 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08013260 <_ZN8touchgfx3HAL4tickEv>:
 8013260:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8013262:	6803      	ldr	r3, [r0, #0]
 8013264:	4604      	mov	r4, r0
 8013266:	4d5b      	ldr	r5, [pc, #364]	; (80133d4 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8013268:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801326c:	4798      	blx	r3
 801326e:	2800      	cmp	r0, #0
 8013270:	f000 8095 	beq.w	801339e <_ZN8touchgfx3HAL4tickEv+0x13e>
 8013274:	2001      	movs	r0, #1
 8013276:	2600      	movs	r6, #0
 8013278:	f7ee fa72 	bl	8001760 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801327c:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8013280:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8013284:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8013288:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 801328c:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8013290:	b133      	cbz	r3, 80132a0 <_ZN8touchgfx3HAL4tickEv+0x40>
 8013292:	6823      	ldr	r3, [r4, #0]
 8013294:	4620      	mov	r0, r4
 8013296:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801329a:	4798      	blx	r3
 801329c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80132a0:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80132a4:	2601      	movs	r6, #1
 80132a6:	6862      	ldr	r2, [r4, #4]
 80132a8:	f083 0301 	eor.w	r3, r3, #1
 80132ac:	702e      	strb	r6, [r5, #0]
 80132ae:	7253      	strb	r3, [r2, #9]
 80132b0:	f003 f8b6 	bl	8016420 <_ZN8touchgfx11Application11getInstanceEv>
 80132b4:	6803      	ldr	r3, [r0, #0]
 80132b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132b8:	4798      	blx	r3
 80132ba:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80132be:	b90b      	cbnz	r3, 80132c4 <_ZN8touchgfx3HAL4tickEv+0x64>
 80132c0:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 80132c4:	f003 f8ac 	bl	8016420 <_ZN8touchgfx11Application11getInstanceEv>
 80132c8:	6803      	ldr	r3, [r0, #0]
 80132ca:	695b      	ldr	r3, [r3, #20]
 80132cc:	4798      	blx	r3
 80132ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80132d0:	6803      	ldr	r3, [r0, #0]
 80132d2:	691b      	ldr	r3, [r3, #16]
 80132d4:	4798      	blx	r3
 80132d6:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80132da:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 80132de:	3b01      	subs	r3, #1
 80132e0:	b2db      	uxtb	r3, r3
 80132e2:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80132e6:	b10a      	cbz	r2, 80132ec <_ZN8touchgfx3HAL4tickEv+0x8c>
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d1eb      	bne.n	80132c4 <_ZN8touchgfx3HAL4tickEv+0x64>
 80132ec:	4a3a      	ldr	r2, [pc, #232]	; (80133d8 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80132ee:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80132f2:	7813      	ldrb	r3, [r2, #0]
 80132f4:	3301      	adds	r3, #1
 80132f6:	b25b      	sxtb	r3, r3
 80132f8:	4299      	cmp	r1, r3
 80132fa:	7013      	strb	r3, [r2, #0]
 80132fc:	dc10      	bgt.n	8013320 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80132fe:	2300      	movs	r3, #0
 8013300:	68e0      	ldr	r0, [r4, #12]
 8013302:	a902      	add	r1, sp, #8
 8013304:	7013      	strb	r3, [r2, #0]
 8013306:	aa03      	add	r2, sp, #12
 8013308:	6803      	ldr	r3, [r0, #0]
 801330a:	68db      	ldr	r3, [r3, #12]
 801330c:	4798      	blx	r3
 801330e:	6823      	ldr	r3, [r4, #0]
 8013310:	2800      	cmp	r0, #0
 8013312:	d050      	beq.n	80133b6 <_ZN8touchgfx3HAL4tickEv+0x156>
 8013314:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8013318:	4620      	mov	r0, r4
 801331a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801331e:	4798      	blx	r3
 8013320:	2300      	movs	r3, #0
 8013322:	6960      	ldr	r0, [r4, #20]
 8013324:	f88d 3007 	strb.w	r3, [sp, #7]
 8013328:	b158      	cbz	r0, 8013342 <_ZN8touchgfx3HAL4tickEv+0xe2>
 801332a:	6803      	ldr	r3, [r0, #0]
 801332c:	f10d 0107 	add.w	r1, sp, #7
 8013330:	68db      	ldr	r3, [r3, #12]
 8013332:	4798      	blx	r3
 8013334:	b128      	cbz	r0, 8013342 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8013336:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013338:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801333c:	6803      	ldr	r3, [r0, #0]
 801333e:	68db      	ldr	r3, [r3, #12]
 8013340:	4798      	blx	r3
 8013342:	f104 001c 	add.w	r0, r4, #28
 8013346:	f011 fd05 	bl	8024d54 <_ZN8touchgfx8Gestures4tickEv>
 801334a:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801334e:	b30b      	cbz	r3, 8013394 <_ZN8touchgfx3HAL4tickEv+0x134>
 8013350:	6920      	ldr	r0, [r4, #16]
 8013352:	6803      	ldr	r3, [r0, #0]
 8013354:	691b      	ldr	r3, [r3, #16]
 8013356:	4798      	blx	r3
 8013358:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801335a:	4606      	mov	r6, r0
 801335c:	b903      	cbnz	r3, 8013360 <_ZN8touchgfx3HAL4tickEv+0x100>
 801335e:	6720      	str	r0, [r4, #112]	; 0x70
 8013360:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013362:	4a1e      	ldr	r2, [pc, #120]	; (80133dc <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8013364:	1af3      	subs	r3, r6, r3
 8013366:	4293      	cmp	r3, r2
 8013368:	d914      	bls.n	8013394 <_ZN8touchgfx3HAL4tickEv+0x134>
 801336a:	6920      	ldr	r0, [r4, #16]
 801336c:	6803      	ldr	r3, [r0, #0]
 801336e:	699b      	ldr	r3, [r3, #24]
 8013370:	4798      	blx	r3
 8013372:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013374:	2264      	movs	r2, #100	; 0x64
 8013376:	1af3      	subs	r3, r6, r3
 8013378:	fbb3 f3f2 	udiv	r3, r3, r2
 801337c:	fbb0 f0f3 	udiv	r0, r0, r3
 8013380:	2800      	cmp	r0, #0
 8013382:	dc1d      	bgt.n	80133c0 <_ZN8touchgfx3HAL4tickEv+0x160>
 8013384:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8013388:	6920      	ldr	r0, [r4, #16]
 801338a:	2100      	movs	r1, #0
 801338c:	6803      	ldr	r3, [r0, #0]
 801338e:	69db      	ldr	r3, [r3, #28]
 8013390:	4798      	blx	r3
 8013392:	6726      	str	r6, [r4, #112]	; 0x70
 8013394:	f003 f844 	bl	8016420 <_ZN8touchgfx11Application11getInstanceEv>
 8013398:	6803      	ldr	r3, [r0, #0]
 801339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801339c:	4798      	blx	r3
 801339e:	6823      	ldr	r3, [r4, #0]
 80133a0:	4620      	mov	r0, r4
 80133a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80133a6:	4798      	blx	r3
 80133a8:	2001      	movs	r0, #1
 80133aa:	f7ee fa35 	bl	8001818 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80133ae:	2300      	movs	r3, #0
 80133b0:	702b      	strb	r3, [r5, #0]
 80133b2:	b004      	add	sp, #16
 80133b4:	bd70      	pop	{r4, r5, r6, pc}
 80133b6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80133ba:	4620      	mov	r0, r4
 80133bc:	4798      	blx	r3
 80133be:	e7af      	b.n	8013320 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80133c0:	2863      	cmp	r0, #99	; 0x63
 80133c2:	bfcb      	itete	gt
 80133c4:	2300      	movgt	r3, #0
 80133c6:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 80133ca:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 80133ce:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 80133d2:	e7d9      	b.n	8013388 <_ZN8touchgfx3HAL4tickEv+0x128>
 80133d4:	2400b088 	.word	0x2400b088
 80133d8:	2400b089 	.word	0x2400b089
 80133dc:	05f5e100 	.word	0x05f5e100

080133e0 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80133e0:	f7ee bd6a 	b.w	8001eb8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080133e4 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80133e4:	6581      	str	r1, [r0, #88]	; 0x58
 80133e6:	301c      	adds	r0, #28
 80133e8:	f011 bcb2 	b.w	8024d50 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080133ec <_ZN8touchgfx3HAL5touchEll>:
 80133ec:	b530      	push	{r4, r5, lr}
 80133ee:	b087      	sub	sp, #28
 80133f0:	4604      	mov	r4, r0
 80133f2:	a804      	add	r0, sp, #16
 80133f4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80133f8:	f002 fd98 	bl	8015f2c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80133fc:	9b04      	ldr	r3, [sp, #16]
 80133fe:	a906      	add	r1, sp, #24
 8013400:	a803      	add	r0, sp, #12
 8013402:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013406:	9b05      	ldr	r3, [sp, #20]
 8013408:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801340c:	f002 fde0 	bl	8015fd0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8013410:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8013414:	f104 001c 	add.w	r0, r4, #28
 8013418:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801341c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8013420:	b189      	cbz	r1, 8013446 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8013422:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8013426:	9300      	str	r3, [sp, #0]
 8013428:	4613      	mov	r3, r2
 801342a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801342e:	462a      	mov	r2, r5
 8013430:	f011 fc9e 	bl	8024d70 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8013434:	b128      	cbz	r0, 8013442 <_ZN8touchgfx3HAL5touchEll+0x56>
 8013436:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801343a:	65e3      	str	r3, [r4, #92]	; 0x5c
 801343c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8013440:	6623      	str	r3, [r4, #96]	; 0x60
 8013442:	b007      	add	sp, #28
 8013444:	bd30      	pop	{r4, r5, pc}
 8013446:	f011 fcd3 	bl	8024df0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801344a:	2301      	movs	r3, #1
 801344c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8013450:	e7f1      	b.n	8013436 <_ZN8touchgfx3HAL5touchEll+0x4a>

08013452 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8013452:	b510      	push	{r4, lr}
 8013454:	2b00      	cmp	r3, #0
 8013456:	d046      	beq.n	80134e6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8013458:	ea81 0002 	eor.w	r0, r1, r2
 801345c:	07c4      	lsls	r4, r0, #31
 801345e:	d508      	bpl.n	8013472 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8013460:	440b      	add	r3, r1
 8013462:	3a01      	subs	r2, #1
 8013464:	428b      	cmp	r3, r1
 8013466:	d93e      	bls.n	80134e6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8013468:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801346c:	f801 0b01 	strb.w	r0, [r1], #1
 8013470:	e7f8      	b.n	8013464 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8013472:	07d0      	lsls	r0, r2, #31
 8013474:	bf42      	ittt	mi
 8013476:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801347a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801347e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8013482:	2b01      	cmp	r3, #1
 8013484:	d911      	bls.n	80134aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8013486:	ea81 0402 	eor.w	r4, r1, r2
 801348a:	4610      	mov	r0, r2
 801348c:	07a4      	lsls	r4, r4, #30
 801348e:	d022      	beq.n	80134d6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8013490:	f023 0401 	bic.w	r4, r3, #1
 8013494:	440c      	add	r4, r1
 8013496:	428c      	cmp	r4, r1
 8013498:	4602      	mov	r2, r0
 801349a:	d904      	bls.n	80134a6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 801349c:	8812      	ldrh	r2, [r2, #0]
 801349e:	3002      	adds	r0, #2
 80134a0:	f821 2b02 	strh.w	r2, [r1], #2
 80134a4:	e7f7      	b.n	8013496 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80134a6:	f003 0301 	and.w	r3, r3, #1
 80134aa:	f023 0003 	bic.w	r0, r3, #3
 80134ae:	4408      	add	r0, r1
 80134b0:	4288      	cmp	r0, r1
 80134b2:	4614      	mov	r4, r2
 80134b4:	d904      	bls.n	80134c0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 80134b6:	6824      	ldr	r4, [r4, #0]
 80134b8:	3204      	adds	r2, #4
 80134ba:	f841 4b04 	str.w	r4, [r1], #4
 80134be:	e7f7      	b.n	80134b0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 80134c0:	f003 0303 	and.w	r3, r3, #3
 80134c4:	3a01      	subs	r2, #1
 80134c6:	440b      	add	r3, r1
 80134c8:	428b      	cmp	r3, r1
 80134ca:	d90c      	bls.n	80134e6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80134cc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80134d0:	f801 0b01 	strb.w	r0, [r1], #1
 80134d4:	e7f8      	b.n	80134c8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 80134d6:	0790      	lsls	r0, r2, #30
 80134d8:	d0e7      	beq.n	80134aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80134da:	f832 0b02 	ldrh.w	r0, [r2], #2
 80134de:	3b02      	subs	r3, #2
 80134e0:	f821 0b02 	strh.w	r0, [r1], #2
 80134e4:	e7e1      	b.n	80134aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80134e6:	2001      	movs	r0, #1
 80134e8:	bd10      	pop	{r4, pc}

080134ea <_ZN8touchgfx3HAL7noTouchEv>:
 80134ea:	b510      	push	{r4, lr}
 80134ec:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80134f0:	4604      	mov	r4, r0
 80134f2:	b153      	cbz	r3, 801350a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80134f4:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80134f8:	2101      	movs	r1, #1
 80134fa:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80134fe:	301c      	adds	r0, #28
 8013500:	f011 fc76 	bl	8024df0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8013504:	2300      	movs	r3, #0
 8013506:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801350a:	bd10      	pop	{r4, pc}

0801350c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801350c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013510:	b085      	sub	sp, #20
 8013512:	4604      	mov	r4, r0
 8013514:	2000      	movs	r0, #0
 8013516:	4699      	mov	r9, r3
 8013518:	ad04      	add	r5, sp, #16
 801351a:	460f      	mov	r7, r1
 801351c:	4690      	mov	r8, r2
 801351e:	f845 0d04 	str.w	r0, [r5, #-4]!
 8013522:	69a0      	ldr	r0, [r4, #24]
 8013524:	6806      	ldr	r6, [r0, #0]
 8013526:	9501      	str	r5, [sp, #4]
 8013528:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 801352c:	9500      	str	r5, [sp, #0]
 801352e:	6835      	ldr	r5, [r6, #0]
 8013530:	47a8      	blx	r5
 8013532:	4d10      	ldr	r5, [pc, #64]	; (8013574 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8013534:	4606      	mov	r6, r0
 8013536:	f8a5 9000 	strh.w	r9, [r5]
 801353a:	f7f0 fc53 	bl	8003de4 <_ZN8touchgfx3HAL3lcdEv>
 801353e:	6803      	ldr	r3, [r0, #0]
 8013540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013542:	4798      	blx	r3
 8013544:	b128      	cbz	r0, 8013552 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8013546:	2801      	cmp	r0, #1
 8013548:	d00b      	beq.n	8013562 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 801354a:	4630      	mov	r0, r6
 801354c:	b005      	add	sp, #20
 801354e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013552:	882b      	ldrh	r3, [r5, #0]
 8013554:	fb08 7203 	mla	r2, r8, r3, r7
 8013558:	9b03      	ldr	r3, [sp, #12]
 801355a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801355e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8013560:	e7f3      	b.n	801354a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8013562:	882a      	ldrh	r2, [r5, #0]
 8013564:	9b03      	ldr	r3, [sp, #12]
 8013566:	fb08 7202 	mla	r2, r8, r2, r7
 801356a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801356e:	1a9a      	subs	r2, r3, r2
 8013570:	63e2      	str	r2, [r4, #60]	; 0x3c
 8013572:	e7ea      	b.n	801354a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8013574:	2400b07e 	.word	0x2400b07e

08013578 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8013578:	b5f0      	push	{r4, r5, r6, r7, lr}
 801357a:	b08b      	sub	sp, #44	; 0x2c
 801357c:	4617      	mov	r7, r2
 801357e:	4604      	mov	r4, r0
 8013580:	460e      	mov	r6, r1
 8013582:	461d      	mov	r5, r3
 8013584:	f7f0 fc2e 	bl	8003de4 <_ZN8touchgfx3HAL3lcdEv>
 8013588:	6803      	ldr	r3, [r0, #0]
 801358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801358c:	4798      	blx	r3
 801358e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8013592:	9007      	str	r0, [sp, #28]
 8013594:	4631      	mov	r1, r6
 8013596:	6822      	ldr	r2, [r4, #0]
 8013598:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801359c:	4b0c      	ldr	r3, [pc, #48]	; (80135d0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801359e:	4620      	mov	r0, r4
 80135a0:	881b      	ldrh	r3, [r3, #0]
 80135a2:	9306      	str	r3, [sp, #24]
 80135a4:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80135a8:	9305      	str	r3, [sp, #20]
 80135aa:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80135ae:	9304      	str	r3, [sp, #16]
 80135b0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80135b4:	9303      	str	r3, [sp, #12]
 80135b6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80135ba:	9302      	str	r3, [sp, #8]
 80135bc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80135c0:	e9cd 5300 	strd	r5, r3, [sp]
 80135c4:	463b      	mov	r3, r7
 80135c6:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 80135c8:	2200      	movs	r2, #0
 80135ca:	47a8      	blx	r5
 80135cc:	b00b      	add	sp, #44	; 0x2c
 80135ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135d0:	2400b07e 	.word	0x2400b07e

080135d4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 80135d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80135d8:	4698      	mov	r8, r3
 80135da:	6803      	ldr	r3, [r0, #0]
 80135dc:	b08b      	sub	sp, #44	; 0x2c
 80135de:	4617      	mov	r7, r2
 80135e0:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80135e2:	460e      	mov	r6, r1
 80135e4:	4b13      	ldr	r3, [pc, #76]	; (8013634 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 80135e6:	4604      	mov	r4, r0
 80135e8:	f8b3 9000 	ldrh.w	r9, [r3]
 80135ec:	f7f0 fbfa 	bl	8003de4 <_ZN8touchgfx3HAL3lcdEv>
 80135f0:	6803      	ldr	r3, [r0, #0]
 80135f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135f4:	4798      	blx	r3
 80135f6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80135fa:	2200      	movs	r2, #0
 80135fc:	4631      	mov	r1, r6
 80135fe:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8013602:	2302      	movs	r3, #2
 8013604:	4620      	mov	r0, r4
 8013606:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801360a:	2301      	movs	r3, #1
 801360c:	9305      	str	r3, [sp, #20]
 801360e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8013612:	9304      	str	r3, [sp, #16]
 8013614:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8013618:	9303      	str	r3, [sp, #12]
 801361a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801361e:	9302      	str	r3, [sp, #8]
 8013620:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013624:	e9cd 8300 	strd	r8, r3, [sp]
 8013628:	463b      	mov	r3, r7
 801362a:	47a8      	blx	r5
 801362c:	b00b      	add	sp, #44	; 0x2c
 801362e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013632:	bf00      	nop
 8013634:	2400b07e 	.word	0x2400b07e

08013638 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8013638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801363c:	4698      	mov	r8, r3
 801363e:	6803      	ldr	r3, [r0, #0]
 8013640:	b087      	sub	sp, #28
 8013642:	460e      	mov	r6, r1
 8013644:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8013646:	4617      	mov	r7, r2
 8013648:	4b0f      	ldr	r3, [pc, #60]	; (8013688 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 801364a:	4604      	mov	r4, r0
 801364c:	f8b3 9000 	ldrh.w	r9, [r3]
 8013650:	f7f0 fbc8 	bl	8003de4 <_ZN8touchgfx3HAL3lcdEv>
 8013654:	6803      	ldr	r3, [r0, #0]
 8013656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013658:	4798      	blx	r3
 801365a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801365e:	463a      	mov	r2, r7
 8013660:	4631      	mov	r1, r6
 8013662:	f8cd 900c 	str.w	r9, [sp, #12]
 8013666:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801366a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801366e:	4620      	mov	r0, r4
 8013670:	9302      	str	r3, [sp, #8]
 8013672:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8013676:	9301      	str	r3, [sp, #4]
 8013678:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801367c:	9300      	str	r3, [sp, #0]
 801367e:	4643      	mov	r3, r8
 8013680:	47a8      	blx	r5
 8013682:	b007      	add	sp, #28
 8013684:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013688:	2400b07e 	.word	0x2400b07e

0801368c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801368c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013690:	4604      	mov	r4, r0
 8013692:	b08f      	sub	sp, #60	; 0x3c
 8013694:	4610      	mov	r0, r2
 8013696:	460d      	mov	r5, r1
 8013698:	4691      	mov	r9, r2
 801369a:	461e      	mov	r6, r3
 801369c:	f005 fda2 	bl	80191e4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80136a0:	2800      	cmp	r0, #0
 80136a2:	f000 809d 	beq.w	80137e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 80136a6:	6823      	ldr	r3, [r4, #0]
 80136a8:	4620      	mov	r0, r4
 80136aa:	f8df b198 	ldr.w	fp, [pc, #408]	; 8013844 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 80136ae:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80136b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80136b4:	4798      	blx	r3
 80136b6:	6823      	ldr	r3, [r4, #0]
 80136b8:	4620      	mov	r0, r4
 80136ba:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8013848 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 80136be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136c0:	4798      	blx	r3
 80136c2:	f8bb 3000 	ldrh.w	r3, [fp]
 80136c6:	4f5c      	ldr	r7, [pc, #368]	; (8013838 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80136c8:	9301      	str	r3, [sp, #4]
 80136ca:	f8ba 3000 	ldrh.w	r3, [sl]
 80136ce:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80136d2:	4640      	mov	r0, r8
 80136d4:	9302      	str	r3, [sp, #8]
 80136d6:	883b      	ldrh	r3, [r7, #0]
 80136d8:	9303      	str	r3, [sp, #12]
 80136da:	4b58      	ldr	r3, [pc, #352]	; (801383c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80136dc:	881a      	ldrh	r2, [r3, #0]
 80136de:	9305      	str	r3, [sp, #20]
 80136e0:	9204      	str	r2, [sp, #16]
 80136e2:	f005 fe13 	bl	801930c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80136e6:	8038      	strh	r0, [r7, #0]
 80136e8:	4640      	mov	r0, r8
 80136ea:	f005 fe43 	bl	8019374 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80136ee:	9b05      	ldr	r3, [sp, #20]
 80136f0:	b280      	uxth	r0, r0
 80136f2:	8018      	strh	r0, [r3, #0]
 80136f4:	4b52      	ldr	r3, [pc, #328]	; (8013840 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80136f6:	781b      	ldrb	r3, [r3, #0]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d174      	bne.n	80137e6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80136fc:	883b      	ldrh	r3, [r7, #0]
 80136fe:	f8aa 0000 	strh.w	r0, [sl]
 8013702:	f8ab 3000 	strh.w	r3, [fp]
 8013706:	4648      	mov	r0, r9
 8013708:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 801370c:	f005 fd6a 	bl	80191e4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8013710:	2200      	movs	r2, #0
 8013712:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8013716:	4611      	mov	r1, r2
 8013718:	4628      	mov	r0, r5
 801371a:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 801371e:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8013722:	f7f1 f880 	bl	8004826 <_ZN8touchgfx8Drawable5setXYEss>
 8013726:	2301      	movs	r3, #1
 8013728:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 801372c:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8013730:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8013734:	2b00      	cmp	r3, #0
 8013736:	dd5c      	ble.n	80137f2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8013738:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801373c:	2b00      	cmp	r3, #0
 801373e:	dd58      	ble.n	80137f2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8013740:	462a      	mov	r2, r5
 8013742:	ab0a      	add	r3, sp, #40	; 0x28
 8013744:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8013748:	6851      	ldr	r1, [r2, #4]
 801374a:	c303      	stmia	r3!, {r0, r1}
 801374c:	4631      	mov	r1, r6
 801374e:	a80a      	add	r0, sp, #40	; 0x28
 8013750:	f7ff fbfe 	bl	8012f50 <_ZN8touchgfx4RectaNERKS0_>
 8013754:	4b38      	ldr	r3, [pc, #224]	; (8013838 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8013756:	2100      	movs	r1, #0
 8013758:	f9b3 2000 	ldrsh.w	r2, [r3]
 801375c:	4b37      	ldr	r3, [pc, #220]	; (801383c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801375e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8013762:	aa0a      	add	r2, sp, #40	; 0x28
 8013764:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013768:	910c      	str	r1, [sp, #48]	; 0x30
 801376a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801376e:	ab08      	add	r3, sp, #32
 8013770:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013774:	e883 0003 	stmia.w	r3, {r0, r1}
 8013778:	4618      	mov	r0, r3
 801377a:	a90c      	add	r1, sp, #48	; 0x30
 801377c:	f7ff fbe8 	bl	8012f50 <_ZN8touchgfx4RectaNERKS0_>
 8013780:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8013782:	2b00      	cmp	r3, #0
 8013784:	d13c      	bne.n	8013800 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8013786:	2000      	movs	r0, #0
 8013788:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 801378c:	2600      	movs	r6, #0
 801378e:	696b      	ldr	r3, [r5, #20]
 8013790:	a908      	add	r1, sp, #32
 8013792:	682a      	ldr	r2, [r5, #0]
 8013794:	4628      	mov	r0, r5
 8013796:	9305      	str	r3, [sp, #20]
 8013798:	616e      	str	r6, [r5, #20]
 801379a:	6892      	ldr	r2, [r2, #8]
 801379c:	4790      	blx	r2
 801379e:	9b05      	ldr	r3, [sp, #20]
 80137a0:	4652      	mov	r2, sl
 80137a2:	4649      	mov	r1, r9
 80137a4:	616b      	str	r3, [r5, #20]
 80137a6:	4628      	mov	r0, r5
 80137a8:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 80137ac:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 80137b0:	f7f1 f839 	bl	8004826 <_ZN8touchgfx8Drawable5setXYEss>
 80137b4:	9a01      	ldr	r2, [sp, #4]
 80137b6:	4b23      	ldr	r3, [pc, #140]	; (8013844 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 80137b8:	4620      	mov	r0, r4
 80137ba:	801a      	strh	r2, [r3, #0]
 80137bc:	9a02      	ldr	r2, [sp, #8]
 80137be:	4b22      	ldr	r3, [pc, #136]	; (8013848 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 80137c0:	801a      	strh	r2, [r3, #0]
 80137c2:	9a03      	ldr	r2, [sp, #12]
 80137c4:	4b1c      	ldr	r3, [pc, #112]	; (8013838 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80137c6:	801a      	strh	r2, [r3, #0]
 80137c8:	4b1c      	ldr	r3, [pc, #112]	; (801383c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80137ca:	9a04      	ldr	r2, [sp, #16]
 80137cc:	801a      	strh	r2, [r3, #0]
 80137ce:	6823      	ldr	r3, [r4, #0]
 80137d0:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 80137d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80137d6:	4798      	blx	r3
 80137d8:	6823      	ldr	r3, [r4, #0]
 80137da:	4620      	mov	r0, r4
 80137dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137de:	4798      	blx	r3
 80137e0:	b00f      	add	sp, #60	; 0x3c
 80137e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137e6:	883b      	ldrh	r3, [r7, #0]
 80137e8:	f8ab 0000 	strh.w	r0, [fp]
 80137ec:	f8aa 3000 	strh.w	r3, [sl]
 80137f0:	e789      	b.n	8013706 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80137f2:	462a      	mov	r2, r5
 80137f4:	ab0a      	add	r3, sp, #40	; 0x28
 80137f6:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80137fa:	6851      	ldr	r1, [r2, #4]
 80137fc:	c303      	stmia	r3!, {r0, r1}
 80137fe:	e7a9      	b.n	8013754 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8013800:	a807      	add	r0, sp, #28
 8013802:	f005 fef3 	bl	80195ec <_ZNK8touchgfx6Bitmap9getFormatEv>
 8013806:	4606      	mov	r6, r0
 8013808:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801380a:	6803      	ldr	r3, [r0, #0]
 801380c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801380e:	4798      	blx	r3
 8013810:	4286      	cmp	r6, r0
 8013812:	d1b8      	bne.n	8013786 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8013814:	f7f0 fae6 	bl	8003de4 <_ZN8touchgfx3HAL3lcdEv>
 8013818:	6803      	ldr	r3, [r0, #0]
 801381a:	4606      	mov	r6, r0
 801381c:	a807      	add	r0, sp, #28
 801381e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013820:	9305      	str	r3, [sp, #20]
 8013822:	f005 fee3 	bl	80195ec <_ZNK8touchgfx6Bitmap9getFormatEv>
 8013826:	9b05      	ldr	r3, [sp, #20]
 8013828:	4601      	mov	r1, r0
 801382a:	4630      	mov	r0, r6
 801382c:	4798      	blx	r3
 801382e:	f080 0001 	eor.w	r0, r0, #1
 8013832:	b2c0      	uxtb	r0, r0
 8013834:	e7a8      	b.n	8013788 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8013836:	bf00      	nop
 8013838:	2400b078 	.word	0x2400b078
 801383c:	2400b07a 	.word	0x2400b07a
 8013840:	2400b07c 	.word	0x2400b07c
 8013844:	2400b07e 	.word	0x2400b07e
 8013848:	2400b080 	.word	0x2400b080

0801384c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801384c:	4b07      	ldr	r3, [pc, #28]	; (801386c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801384e:	b510      	push	{r4, lr}
 8013850:	781b      	ldrb	r3, [r3, #0]
 8013852:	4604      	mov	r4, r0
 8013854:	b13b      	cbz	r3, 8013866 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8013856:	6803      	ldr	r3, [r0, #0]
 8013858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801385a:	4798      	blx	r3
 801385c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801385e:	4283      	cmp	r3, r0
 8013860:	d101      	bne.n	8013866 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8013862:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8013864:	bd10      	pop	{r4, pc}
 8013866:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8013868:	e7fc      	b.n	8013864 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801386a:	bf00      	nop
 801386c:	2400b082 	.word	0x2400b082

08013870 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8013870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013874:	461d      	mov	r5, r3
 8013876:	b08a      	sub	sp, #40	; 0x28
 8013878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801387c:	4690      	mov	r8, r2
 801387e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8013882:	2400      	movs	r4, #0
 8013884:	4607      	mov	r7, r0
 8013886:	fb06 8505 	mla	r5, r6, r5, r8
 801388a:	9404      	str	r4, [sp, #16]
 801388c:	f88d 4020 	strb.w	r4, [sp, #32]
 8013890:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8013894:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8013898:	f8ad 3018 	strh.w	r3, [sp, #24]
 801389c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80138a0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80138a4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80138a8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80138ac:	f7ff ffce 	bl	801384c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80138b0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80138b4:	6878      	ldr	r0, [r7, #4]
 80138b6:	f8ad 601e 	strh.w	r6, [sp, #30]
 80138ba:	a901      	add	r1, sp, #4
 80138bc:	9505      	str	r5, [sp, #20]
 80138be:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80138c2:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80138c6:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80138ca:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80138ce:	6803      	ldr	r3, [r0, #0]
 80138d0:	685b      	ldr	r3, [r3, #4]
 80138d2:	4798      	blx	r3
 80138d4:	b00a      	add	sp, #40	; 0x28
 80138d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080138da <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 80138da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80138de:	b08b      	sub	sp, #44	; 0x2c
 80138e0:	2400      	movs	r4, #0
 80138e2:	4691      	mov	r9, r2
 80138e4:	461d      	mov	r5, r3
 80138e6:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 80138ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80138ee:	4688      	mov	r8, r1
 80138f0:	4607      	mov	r7, r0
 80138f2:	9404      	str	r4, [sp, #16]
 80138f4:	fb06 9505 	mla	r5, r6, r5, r9
 80138f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80138fc:	f7ff ffa6 	bl	801384c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013900:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013904:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8013908:	6878      	ldr	r0, [r7, #4]
 801390a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801390e:	a901      	add	r1, sp, #4
 8013910:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8013914:	9505      	str	r5, [sp, #20]
 8013916:	f8ad 301a 	strh.w	r3, [sp, #26]
 801391a:	f8ad 401c 	strh.w	r4, [sp, #28]
 801391e:	f8ad 601e 	strh.w	r6, [sp, #30]
 8013922:	f8cd 8010 	str.w	r8, [sp, #16]
 8013926:	f8ad 4020 	strh.w	r4, [sp, #32]
 801392a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801392e:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8013932:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8013936:	6803      	ldr	r3, [r0, #0]
 8013938:	685b      	ldr	r3, [r3, #4]
 801393a:	4798      	blx	r3
 801393c:	b00b      	add	sp, #44	; 0x2c
 801393e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08013944 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8013944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013948:	b08a      	sub	sp, #40	; 0x28
 801394a:	4698      	mov	r8, r3
 801394c:	2300      	movs	r3, #0
 801394e:	4606      	mov	r6, r0
 8013950:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8013954:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8013958:	2d0b      	cmp	r5, #11
 801395a:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 801395e:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8013962:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8013966:	9304      	str	r3, [sp, #16]
 8013968:	d137      	bne.n	80139da <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 801396a:	2380      	movs	r3, #128	; 0x80
 801396c:	f88d 0020 	strb.w	r0, [sp, #32]
 8013970:	4630      	mov	r0, r6
 8013972:	9203      	str	r2, [sp, #12]
 8013974:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8013978:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801397c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013980:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013984:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013988:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801398c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013990:	f7ff ff5c 	bl	801384c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013994:	2c0b      	cmp	r4, #11
 8013996:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801399a:	f8ad 701e 	strh.w	r7, [sp, #30]
 801399e:	bf94      	ite	ls
 80139a0:	4b19      	ldrls	r3, [pc, #100]	; (8013a08 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 80139a2:	2100      	movhi	r1, #0
 80139a4:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 80139a8:	bf98      	it	ls
 80139aa:	5d19      	ldrbls	r1, [r3, r4]
 80139ac:	fb02 8307 	mla	r3, r2, r7, r8
 80139b0:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80139b4:	10c9      	asrs	r1, r1, #3
 80139b6:	fb01 0003 	mla	r0, r1, r3, r0
 80139ba:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 80139be:	a901      	add	r1, sp, #4
 80139c0:	9005      	str	r0, [sp, #20]
 80139c2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80139c6:	2300      	movs	r3, #0
 80139c8:	6870      	ldr	r0, [r6, #4]
 80139ca:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80139ce:	6803      	ldr	r3, [r0, #0]
 80139d0:	685b      	ldr	r3, [r3, #4]
 80139d2:	4798      	blx	r3
 80139d4:	b00a      	add	sp, #40	; 0x28
 80139d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139da:	2d02      	cmp	r5, #2
 80139dc:	d109      	bne.n	80139f2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 80139de:	28ff      	cmp	r0, #255	; 0xff
 80139e0:	d105      	bne.n	80139ee <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 80139e2:	f1bc 0f00 	cmp.w	ip, #0
 80139e6:	bf14      	ite	ne
 80139e8:	2340      	movne	r3, #64	; 0x40
 80139ea:	2320      	moveq	r3, #32
 80139ec:	e7be      	b.n	801396c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80139ee:	2340      	movs	r3, #64	; 0x40
 80139f0:	e7bc      	b.n	801396c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80139f2:	28ff      	cmp	r0, #255	; 0xff
 80139f4:	d105      	bne.n	8013a02 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 80139f6:	f1bc 0f00 	cmp.w	ip, #0
 80139fa:	bf14      	ite	ne
 80139fc:	2304      	movne	r3, #4
 80139fe:	2301      	moveq	r3, #1
 8013a00:	e7b4      	b.n	801396c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8013a02:	2304      	movs	r3, #4
 8013a04:	e7b2      	b.n	801396c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8013a06:	bf00      	nop
 8013a08:	080279a8 	.word	0x080279a8

08013a0c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8013a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a10:	b08b      	sub	sp, #44	; 0x2c
 8013a12:	461d      	mov	r5, r3
 8013a14:	2400      	movs	r4, #0
 8013a16:	4688      	mov	r8, r1
 8013a18:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8013a1c:	4693      	mov	fp, r2
 8013a1e:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8013a22:	4607      	mov	r7, r0
 8013a24:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8013a28:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8013a2c:	9404      	str	r4, [sp, #16]
 8013a2e:	bf14      	ite	ne
 8013a30:	2308      	movne	r3, #8
 8013a32:	2302      	moveq	r3, #2
 8013a34:	fb05 b50a 	mla	r5, r5, sl, fp
 8013a38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013a3c:	f7ff ff06 	bl	801384c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013a40:	2e0b      	cmp	r6, #11
 8013a42:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8013a46:	a901      	add	r1, sp, #4
 8013a48:	bf98      	it	ls
 8013a4a:	4b13      	ldrls	r3, [pc, #76]	; (8013a98 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8013a4c:	f8ad a01e 	strh.w	sl, [sp, #30]
 8013a50:	bf98      	it	ls
 8013a52:	5d9c      	ldrbls	r4, [r3, r6]
 8013a54:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8013a58:	10e4      	asrs	r4, r4, #3
 8013a5a:	f8cd 8010 	str.w	r8, [sp, #16]
 8013a5e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013a62:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8013a66:	fb04 0405 	mla	r4, r4, r5, r0
 8013a6a:	6878      	ldr	r0, [r7, #4]
 8013a6c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013a70:	2300      	movs	r3, #0
 8013a72:	9405      	str	r4, [sp, #20]
 8013a74:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013a78:	f88d 9020 	strb.w	r9, [sp, #32]
 8013a7c:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8013a80:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8013a84:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8013a88:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8013a8c:	6803      	ldr	r3, [r0, #0]
 8013a8e:	685b      	ldr	r3, [r3, #4]
 8013a90:	4798      	blx	r3
 8013a92:	b00b      	add	sp, #44	; 0x2c
 8013a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a98:	080279a8 	.word	0x080279a8

08013a9c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8013a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013aa0:	461e      	mov	r6, r3
 8013aa2:	4b0a      	ldr	r3, [pc, #40]	; (8013acc <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8013aa4:	460f      	mov	r7, r1
 8013aa6:	4690      	mov	r8, r2
 8013aa8:	881d      	ldrh	r5, [r3, #0]
 8013aaa:	f7f0 f99b 	bl	8003de4 <_ZN8touchgfx3HAL3lcdEv>
 8013aae:	6803      	ldr	r3, [r0, #0]
 8013ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ab2:	4798      	blx	r3
 8013ab4:	280b      	cmp	r0, #11
 8013ab6:	bf96      	itet	ls
 8013ab8:	4b05      	ldrls	r3, [pc, #20]	; (8013ad0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8013aba:	2400      	movhi	r4, #0
 8013abc:	5c1c      	ldrbls	r4, [r3, r0]
 8013abe:	fb08 7005 	mla	r0, r8, r5, r7
 8013ac2:	10e4      	asrs	r4, r4, #3
 8013ac4:	fb04 6000 	mla	r0, r4, r0, r6
 8013ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013acc:	2400b07e 	.word	0x2400b07e
 8013ad0:	080279a8 	.word	0x080279a8

08013ad4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8013ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ad6:	b08b      	sub	sp, #44	; 0x2c
 8013ad8:	461f      	mov	r7, r3
 8013ada:	4604      	mov	r4, r0
 8013adc:	4616      	mov	r6, r2
 8013ade:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8013ae2:	2500      	movs	r5, #0
 8013ae4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8013ae8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8013aec:	9504      	str	r5, [sp, #16]
 8013aee:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013af2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8013af6:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013afa:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013afe:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013b02:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8013b06:	f88d 3020 	strb.w	r3, [sp, #32]
 8013b0a:	f7ff fe9f 	bl	801384c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013b0e:	463a      	mov	r2, r7
 8013b10:	4631      	mov	r1, r6
 8013b12:	4603      	mov	r3, r0
 8013b14:	4620      	mov	r0, r4
 8013b16:	f7ff ffc1 	bl	8013a9c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013b1a:	4b0e      	ldr	r3, [pc, #56]	; (8013b54 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8013b1c:	9005      	str	r0, [sp, #20]
 8013b1e:	881b      	ldrh	r3, [r3, #0]
 8013b20:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013b24:	f7f0 f95e 	bl	8003de4 <_ZN8touchgfx3HAL3lcdEv>
 8013b28:	6803      	ldr	r3, [r0, #0]
 8013b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b2c:	4798      	blx	r3
 8013b2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013b30:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8013b34:	a901      	add	r1, sp, #4
 8013b36:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8013b3a:	9304      	str	r3, [sp, #16]
 8013b3c:	6860      	ldr	r0, [r4, #4]
 8013b3e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8013b42:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8013b46:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8013b4a:	6803      	ldr	r3, [r0, #0]
 8013b4c:	685b      	ldr	r3, [r3, #4]
 8013b4e:	4798      	blx	r3
 8013b50:	b00b      	add	sp, #44	; 0x2c
 8013b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b54:	2400b07e 	.word	0x2400b07e

08013b58 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8013b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b5a:	b08d      	sub	sp, #52	; 0x34
 8013b5c:	2501      	movs	r5, #1
 8013b5e:	4604      	mov	r4, r0
 8013b60:	466b      	mov	r3, sp
 8013b62:	9503      	str	r5, [sp, #12]
 8013b64:	e883 0006 	stmia.w	r3, {r1, r2}
 8013b68:	2300      	movs	r3, #0
 8013b6a:	f8bd 6000 	ldrh.w	r6, [sp]
 8013b6e:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8013b72:	9306      	str	r3, [sp, #24]
 8013b74:	6803      	ldr	r3, [r0, #0]
 8013b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b78:	4798      	blx	r3
 8013b7a:	463a      	mov	r2, r7
 8013b7c:	4631      	mov	r1, r6
 8013b7e:	4603      	mov	r3, r0
 8013b80:	4620      	mov	r0, r4
 8013b82:	f7ff ff8b 	bl	8013a9c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013b86:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8013b88:	9004      	str	r0, [sp, #16]
 8013b8a:	9307      	str	r3, [sp, #28]
 8013b8c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013b90:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013b94:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013b98:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8013b9c:	4b0e      	ldr	r3, [pc, #56]	; (8013bd8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8013b9e:	881b      	ldrh	r3, [r3, #0]
 8013ba0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8013ba4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8013ba8:	f7f0 f91c 	bl	8003de4 <_ZN8touchgfx3HAL3lcdEv>
 8013bac:	6803      	ldr	r3, [r0, #0]
 8013bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bb0:	4798      	blx	r3
 8013bb2:	23ff      	movs	r3, #255	; 0xff
 8013bb4:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8013bb8:	a903      	add	r1, sp, #12
 8013bba:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8013bbe:	6860      	ldr	r0, [r4, #4]
 8013bc0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8013bc4:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8013bc8:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8013bcc:	6803      	ldr	r3, [r0, #0]
 8013bce:	685b      	ldr	r3, [r3, #4]
 8013bd0:	4798      	blx	r3
 8013bd2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8013bd4:	b00d      	add	sp, #52	; 0x34
 8013bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013bd8:	2400b07e 	.word	0x2400b07e

08013bdc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8013bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013be0:	b08c      	sub	sp, #48	; 0x30
 8013be2:	461e      	mov	r6, r3
 8013be4:	2300      	movs	r3, #0
 8013be6:	4604      	mov	r4, r0
 8013be8:	466d      	mov	r5, sp
 8013bea:	9306      	str	r3, [sp, #24]
 8013bec:	6803      	ldr	r3, [r0, #0]
 8013bee:	e885 0006 	stmia.w	r5, {r1, r2}
 8013bf2:	2501      	movs	r5, #1
 8013bf4:	f8bd 7000 	ldrh.w	r7, [sp]
 8013bf8:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8013bfc:	9503      	str	r5, [sp, #12]
 8013bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c00:	4798      	blx	r3
 8013c02:	4642      	mov	r2, r8
 8013c04:	4639      	mov	r1, r7
 8013c06:	4603      	mov	r3, r0
 8013c08:	4620      	mov	r0, r4
 8013c0a:	f7ff ff47 	bl	8013a9c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013c0e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013c12:	9004      	str	r0, [sp, #16]
 8013c14:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013c18:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013c1c:	9607      	str	r6, [sp, #28]
 8013c1e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8013c22:	4b10      	ldr	r3, [pc, #64]	; (8013c64 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8013c24:	881b      	ldrh	r3, [r3, #0]
 8013c26:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8013c2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013c2c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8013c30:	f7f0 f8d8 	bl	8003de4 <_ZN8touchgfx3HAL3lcdEv>
 8013c34:	6803      	ldr	r3, [r0, #0]
 8013c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c38:	4798      	blx	r3
 8013c3a:	23ff      	movs	r3, #255	; 0xff
 8013c3c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8013c40:	a903      	add	r1, sp, #12
 8013c42:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8013c46:	6860      	ldr	r0, [r4, #4]
 8013c48:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8013c4c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8013c50:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8013c54:	6803      	ldr	r3, [r0, #0]
 8013c56:	685b      	ldr	r3, [r3, #4]
 8013c58:	4798      	blx	r3
 8013c5a:	4630      	mov	r0, r6
 8013c5c:	b00c      	add	sp, #48	; 0x30
 8013c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c62:	bf00      	nop
 8013c64:	2400b07e 	.word	0x2400b07e

08013c68 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8013c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c6a:	b085      	sub	sp, #20
 8013c6c:	4605      	mov	r5, r0
 8013c6e:	ac02      	add	r4, sp, #8
 8013c70:	e884 0006 	stmia.w	r4, {r1, r2}
 8013c74:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8013c78:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8013c7c:	f7ff fde6 	bl	801384c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013c80:	4631      	mov	r1, r6
 8013c82:	4603      	mov	r3, r0
 8013c84:	463a      	mov	r2, r7
 8013c86:	4628      	mov	r0, r5
 8013c88:	f7ff ff08 	bl	8013a9c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013c8c:	4a05      	ldr	r2, [pc, #20]	; (8013ca4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8013c8e:	682b      	ldr	r3, [r5, #0]
 8013c90:	8812      	ldrh	r2, [r2, #0]
 8013c92:	9200      	str	r2, [sp, #0]
 8013c94:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8013c96:	4603      	mov	r3, r0
 8013c98:	4628      	mov	r0, r5
 8013c9a:	e894 0006 	ldmia.w	r4, {r1, r2}
 8013c9e:	47b0      	blx	r6
 8013ca0:	b005      	add	sp, #20
 8013ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ca4:	2400b07e 	.word	0x2400b07e

08013ca8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8013ca8:	b570      	push	{r4, r5, r6, lr}
 8013caa:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8013cae:	4604      	mov	r4, r0
 8013cb0:	b19b      	cbz	r3, 8013cda <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8013cb2:	2002      	movs	r0, #2
 8013cb4:	f7ed fe0c 	bl	80018d0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8013cb8:	2300      	movs	r3, #0
 8013cba:	4620      	mov	r0, r4
 8013cbc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8013cc0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8013cc4:	6823      	ldr	r3, [r4, #0]
 8013cc6:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8013cca:	f7ff fdbf 	bl	801384c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013cce:	4601      	mov	r1, r0
 8013cd0:	4620      	mov	r0, r4
 8013cd2:	462b      	mov	r3, r5
 8013cd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013cd8:	4718      	bx	r3
 8013cda:	bd70      	pop	{r4, r5, r6, pc}

08013cdc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8013cdc:	b538      	push	{r3, r4, r5, lr}
 8013cde:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8013ce2:	4604      	mov	r4, r0
 8013ce4:	460d      	mov	r5, r1
 8013ce6:	428b      	cmp	r3, r1
 8013ce8:	d006      	beq.n	8013cf8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8013cea:	6803      	ldr	r3, [r0, #0]
 8013cec:	b929      	cbnz	r1, 8013cfa <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8013cee:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8013cf2:	4798      	blx	r3
 8013cf4:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8013cf8:	bd38      	pop	{r3, r4, r5, pc}
 8013cfa:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8013cfe:	e7f8      	b.n	8013cf2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08013d00 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8013d00:	4b0d      	ldr	r3, [pc, #52]	; (8013d38 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8013d02:	b510      	push	{r4, lr}
 8013d04:	781b      	ldrb	r3, [r3, #0]
 8013d06:	4604      	mov	r4, r0
 8013d08:	b95b      	cbnz	r3, 8013d22 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013d0a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8013d0e:	2b02      	cmp	r3, #2
 8013d10:	d007      	beq.n	8013d22 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013d12:	6840      	ldr	r0, [r0, #4]
 8013d14:	f000 f90e 	bl	8013f34 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8013d18:	b118      	cbz	r0, 8013d22 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013d1a:	6862      	ldr	r2, [r4, #4]
 8013d1c:	7a53      	ldrb	r3, [r2, #9]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d0fc      	beq.n	8013d1c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8013d22:	f7ee f8bb 	bl	8001e9c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8013d26:	4620      	mov	r0, r4
 8013d28:	2100      	movs	r1, #0
 8013d2a:	f7ff ffd7 	bl	8013cdc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013d2e:	4620      	mov	r0, r4
 8013d30:	f7ff fd8c 	bl	801384c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013d34:	bd10      	pop	{r4, pc}
 8013d36:	bf00      	nop
 8013d38:	2400b082 	.word	0x2400b082

08013d3c <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8013d3c:	4770      	bx	lr

08013d3e <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8013d3e:	2000      	movs	r0, #0
 8013d40:	4770      	bx	lr

08013d42 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8013d42:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8013d46:	1a13      	subs	r3, r2, r0
 8013d48:	4258      	negs	r0, r3
 8013d4a:	4158      	adcs	r0, r3
 8013d4c:	4770      	bx	lr

08013d4e <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8013d4e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8013d52:	1a9b      	subs	r3, r3, r2
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	bfdc      	itt	le
 8013d58:	6882      	ldrle	r2, [r0, #8]
 8013d5a:	189b      	addle	r3, r3, r2
 8013d5c:	2b01      	cmp	r3, #1
 8013d5e:	bfcc      	ite	gt
 8013d60:	2000      	movgt	r0, #0
 8013d62:	2001      	movle	r0, #1
 8013d64:	4770      	bx	lr

08013d66 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8013d66:	6902      	ldr	r2, [r0, #16]
 8013d68:	6843      	ldr	r3, [r0, #4]
 8013d6a:	2024      	movs	r0, #36	; 0x24
 8013d6c:	fb00 3002 	mla	r0, r0, r2, r3
 8013d70:	4770      	bx	lr

08013d72 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8013d72:	6803      	ldr	r3, [r0, #0]
 8013d74:	691b      	ldr	r3, [r3, #16]
 8013d76:	4718      	bx	r3

08013d78 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8013d78:	2301      	movs	r3, #1
 8013d7a:	b570      	push	{r4, r5, r6, lr}
 8013d7c:	7203      	strb	r3, [r0, #8]
 8013d7e:	4604      	mov	r4, r0
 8013d80:	6840      	ldr	r0, [r0, #4]
 8013d82:	6803      	ldr	r3, [r0, #0]
 8013d84:	699b      	ldr	r3, [r3, #24]
 8013d86:	4798      	blx	r3
 8013d88:	6803      	ldr	r3, [r0, #0]
 8013d8a:	4605      	mov	r5, r0
 8013d8c:	2b40      	cmp	r3, #64	; 0x40
 8013d8e:	d00c      	beq.n	8013daa <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013d90:	d810      	bhi.n	8013db4 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8013d92:	2b04      	cmp	r3, #4
 8013d94:	d01d      	beq.n	8013dd2 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8013d96:	d804      	bhi.n	8013da2 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8013d98:	2b01      	cmp	r3, #1
 8013d9a:	d006      	beq.n	8013daa <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013d9c:	2b02      	cmp	r3, #2
 8013d9e:	d02c      	beq.n	8013dfa <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8013da0:	bd70      	pop	{r4, r5, r6, pc}
 8013da2:	2b08      	cmp	r3, #8
 8013da4:	d01d      	beq.n	8013de2 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8013da6:	2b20      	cmp	r3, #32
 8013da8:	d1fa      	bne.n	8013da0 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8013daa:	6823      	ldr	r3, [r4, #0]
 8013dac:	4620      	mov	r0, r4
 8013dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013db0:	4798      	blx	r3
 8013db2:	e013      	b.n	8013ddc <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8013db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013db8:	d0f7      	beq.n	8013daa <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013dba:	d804      	bhi.n	8013dc6 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8013dbc:	2b80      	cmp	r3, #128	; 0x80
 8013dbe:	d0f4      	beq.n	8013daa <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013dc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013dc4:	e7f0      	b.n	8013da8 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8013dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013dca:	d0ee      	beq.n	8013daa <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013dd0:	e7e5      	b.n	8013d9e <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8013dd2:	6823      	ldr	r3, [r4, #0]
 8013dd4:	7f01      	ldrb	r1, [r0, #28]
 8013dd6:	4620      	mov	r0, r4
 8013dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013dda:	4798      	blx	r3
 8013ddc:	6823      	ldr	r3, [r4, #0]
 8013dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013de0:	e006      	b.n	8013df0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8013de2:	6823      	ldr	r3, [r4, #0]
 8013de4:	7f01      	ldrb	r1, [r0, #28]
 8013de6:	4620      	mov	r0, r4
 8013de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013dea:	4798      	blx	r3
 8013dec:	6823      	ldr	r3, [r4, #0]
 8013dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013df0:	4629      	mov	r1, r5
 8013df2:	4620      	mov	r0, r4
 8013df4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013df8:	4718      	bx	r3
 8013dfa:	6823      	ldr	r3, [r4, #0]
 8013dfc:	4620      	mov	r0, r4
 8013dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013e00:	4798      	blx	r3
 8013e02:	e7f3      	b.n	8013dec <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08013e04 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8013e04:	4770      	bx	lr

08013e06 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8013e06:	4770      	bx	lr

08013e08 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8013e08:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8013e0c:	b510      	push	{r4, lr}
 8013e0e:	1ad2      	subs	r2, r2, r3
 8013e10:	2a00      	cmp	r2, #0
 8013e12:	bfdc      	itt	le
 8013e14:	6884      	ldrle	r4, [r0, #8]
 8013e16:	1912      	addle	r2, r2, r4
 8013e18:	2a01      	cmp	r2, #1
 8013e1a:	dd16      	ble.n	8013e4a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8013e1c:	6842      	ldr	r2, [r0, #4]
 8013e1e:	2424      	movs	r4, #36	; 0x24
 8013e20:	fb04 2303 	mla	r3, r4, r3, r2
 8013e24:	f101 0220 	add.w	r2, r1, #32
 8013e28:	f851 4b04 	ldr.w	r4, [r1], #4
 8013e2c:	4291      	cmp	r1, r2
 8013e2e:	f843 4b04 	str.w	r4, [r3], #4
 8013e32:	d1f9      	bne.n	8013e28 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8013e34:	780a      	ldrb	r2, [r1, #0]
 8013e36:	701a      	strb	r2, [r3, #0]
 8013e38:	68c3      	ldr	r3, [r0, #12]
 8013e3a:	6882      	ldr	r2, [r0, #8]
 8013e3c:	f3bf 8f5b 	dmb	ish
 8013e40:	3301      	adds	r3, #1
 8013e42:	429a      	cmp	r2, r3
 8013e44:	bfd8      	it	le
 8013e46:	1a9b      	suble	r3, r3, r2
 8013e48:	60c3      	str	r3, [r0, #12]
 8013e4a:	bd10      	pop	{r4, pc}

08013e4c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8013e4c:	6903      	ldr	r3, [r0, #16]
 8013e4e:	6882      	ldr	r2, [r0, #8]
 8013e50:	f3bf 8f5b 	dmb	ish
 8013e54:	3301      	adds	r3, #1
 8013e56:	429a      	cmp	r2, r3
 8013e58:	bfd8      	it	le
 8013e5a:	1a9b      	suble	r3, r3, r2
 8013e5c:	6103      	str	r3, [r0, #16]
 8013e5e:	4770      	bx	lr

08013e60 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8013e60:	b570      	push	{r4, r5, r6, lr}
 8013e62:	4604      	mov	r4, r0
 8013e64:	460e      	mov	r6, r1
 8013e66:	6860      	ldr	r0, [r4, #4]
 8013e68:	6803      	ldr	r3, [r0, #0]
 8013e6a:	685b      	ldr	r3, [r3, #4]
 8013e6c:	4798      	blx	r3
 8013e6e:	2800      	cmp	r0, #0
 8013e70:	d1f9      	bne.n	8013e66 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8013e72:	4d0d      	ldr	r5, [pc, #52]	; (8013ea8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8013e74:	6828      	ldr	r0, [r5, #0]
 8013e76:	6803      	ldr	r3, [r0, #0]
 8013e78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013e7a:	4798      	blx	r3
 8013e7c:	f7ee f828 	bl	8001ed0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8013e80:	6828      	ldr	r0, [r5, #0]
 8013e82:	2101      	movs	r1, #1
 8013e84:	f7ff ff2a 	bl	8013cdc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013e88:	6860      	ldr	r0, [r4, #4]
 8013e8a:	4631      	mov	r1, r6
 8013e8c:	6803      	ldr	r3, [r0, #0]
 8013e8e:	689b      	ldr	r3, [r3, #8]
 8013e90:	4798      	blx	r3
 8013e92:	6823      	ldr	r3, [r4, #0]
 8013e94:	4620      	mov	r0, r4
 8013e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e98:	4798      	blx	r3
 8013e9a:	6828      	ldr	r0, [r5, #0]
 8013e9c:	6803      	ldr	r3, [r0, #0]
 8013e9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ea2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013ea4:	4718      	bx	r3
 8013ea6:	bf00      	nop
 8013ea8:	2400b084 	.word	0x2400b084

08013eac <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8013eac:	b508      	push	{r3, lr}
 8013eae:	f7ed fff5 	bl	8001e9c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8013eb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013eb6:	f7ed bfff 	b.w	8001eb8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08013eba <_ZN8touchgfx13DMA_Interface5startEv>:
 8013eba:	b510      	push	{r4, lr}
 8013ebc:	4604      	mov	r4, r0
 8013ebe:	6840      	ldr	r0, [r0, #4]
 8013ec0:	6803      	ldr	r3, [r0, #0]
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	4798      	blx	r3
 8013ec6:	b948      	cbnz	r0, 8013edc <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013ec8:	7a63      	ldrb	r3, [r4, #9]
 8013eca:	b13b      	cbz	r3, 8013edc <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013ecc:	7a23      	ldrb	r3, [r4, #8]
 8013ece:	b92b      	cbnz	r3, 8013edc <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013ed0:	6823      	ldr	r3, [r4, #0]
 8013ed2:	4620      	mov	r0, r4
 8013ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013eda:	4718      	bx	r3
 8013edc:	bd10      	pop	{r4, pc}

08013ede <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8013ede:	b570      	push	{r4, r5, r6, lr}
 8013ee0:	4604      	mov	r4, r0
 8013ee2:	6840      	ldr	r0, [r0, #4]
 8013ee4:	6803      	ldr	r3, [r0, #0]
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	4798      	blx	r3
 8013eea:	4605      	mov	r5, r0
 8013eec:	b930      	cbnz	r0, 8013efc <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8013eee:	7a23      	ldrb	r3, [r4, #8]
 8013ef0:	b123      	cbz	r3, 8013efc <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8013ef2:	6860      	ldr	r0, [r4, #4]
 8013ef4:	6803      	ldr	r3, [r0, #0]
 8013ef6:	695b      	ldr	r3, [r3, #20]
 8013ef8:	4798      	blx	r3
 8013efa:	7225      	strb	r5, [r4, #8]
 8013efc:	6860      	ldr	r0, [r4, #4]
 8013efe:	6803      	ldr	r3, [r0, #0]
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	4798      	blx	r3
 8013f04:	b928      	cbnz	r0, 8013f12 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8013f06:	6823      	ldr	r3, [r4, #0]
 8013f08:	4620      	mov	r0, r4
 8013f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f10:	4718      	bx	r3
 8013f12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f16:	f7ed bfe7 	b.w	8001ee8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08013f1c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8013f1c:	b510      	push	{r4, lr}
 8013f1e:	6082      	str	r2, [r0, #8]
 8013f20:	2200      	movs	r2, #0
 8013f22:	4c03      	ldr	r4, [pc, #12]	; (8013f30 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8013f24:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8013f28:	e9c0 4100 	strd	r4, r1, [r0]
 8013f2c:	bd10      	pop	{r4, pc}
 8013f2e:	bf00      	nop
 8013f30:	08027ae4 	.word	0x08027ae4

08013f34 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8013f34:	6840      	ldr	r0, [r0, #4]
 8013f36:	6803      	ldr	r3, [r0, #0]
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	4718      	bx	r3

08013f3c <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8013f3c:	2000      	movs	r0, #0
 8013f3e:	4770      	bx	lr

08013f40 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8013f40:	4b07      	ldr	r3, [pc, #28]	; (8013f60 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8013f42:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8013f44:	881b      	ldrh	r3, [r3, #0]
 8013f46:	4293      	cmp	r3, r2
 8013f48:	bf81      	itttt	hi
 8013f4a:	4b06      	ldrhi	r3, [pc, #24]	; (8013f64 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8013f4c:	681b      	ldrhi	r3, [r3, #0]
 8013f4e:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8013f52:	7858      	ldrbhi	r0, [r3, #1]
 8013f54:	bf8c      	ite	hi
 8013f56:	f000 0003 	andhi.w	r0, r0, #3
 8013f5a:	2000      	movls	r0, #0
 8013f5c:	4770      	bx	lr
 8013f5e:	bf00      	nop
 8013f60:	2400b0d8 	.word	0x2400b0d8
 8013f64:	2400b0d4 	.word	0x2400b0d4

08013f68 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8013f68:	4b11      	ldr	r3, [pc, #68]	; (8013fb0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8013f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f6e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8013f70:	4604      	mov	r4, r0
 8013f72:	881b      	ldrh	r3, [r3, #0]
 8013f74:	428b      	cmp	r3, r1
 8013f76:	d918      	bls.n	8013faa <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8013f78:	6803      	ldr	r3, [r0, #0]
 8013f7a:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8013f7c:	4b0d      	ldr	r3, [pc, #52]	; (8013fb4 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8013f7e:	6818      	ldr	r0, [r3, #0]
 8013f80:	f7f2 fc62 	bl	8006848 <_ZNK8touchgfx5Texts7getTextEt>
 8013f84:	6823      	ldr	r3, [r4, #0]
 8013f86:	4606      	mov	r6, r0
 8013f88:	4620      	mov	r0, r4
 8013f8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013f8c:	4798      	blx	r3
 8013f8e:	6823      	ldr	r3, [r4, #0]
 8013f90:	4607      	mov	r7, r0
 8013f92:	4620      	mov	r0, r4
 8013f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013f98:	4798      	blx	r3
 8013f9a:	463a      	mov	r2, r7
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	4631      	mov	r1, r6
 8013fa0:	4620      	mov	r0, r4
 8013fa2:	46ac      	mov	ip, r5
 8013fa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013fa8:	4760      	bx	ip
 8013faa:	2000      	movs	r0, #0
 8013fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fb0:	2400b0d8 	.word	0x2400b0d8
 8013fb4:	2400b0e0 	.word	0x2400b0e0

08013fb8 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8013fb8:	4b18      	ldr	r3, [pc, #96]	; (801401c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8013fba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013fbe:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8013fc0:	4604      	mov	r4, r0
 8013fc2:	881b      	ldrh	r3, [r3, #0]
 8013fc4:	428b      	cmp	r3, r1
 8013fc6:	d926      	bls.n	8014016 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8013fc8:	4b15      	ldr	r3, [pc, #84]	; (8014020 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8013fd0:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8013fd4:	4b13      	ldr	r3, [pc, #76]	; (8014024 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8013fd6:	7855      	ldrb	r5, [r2, #1]
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8013fde:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8013fe2:	6833      	ldr	r3, [r6, #0]
 8013fe4:	69df      	ldr	r7, [r3, #28]
 8013fe6:	4b10      	ldr	r3, [pc, #64]	; (8014028 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8013fe8:	6818      	ldr	r0, [r3, #0]
 8013fea:	f7f2 fc2d 	bl	8006848 <_ZNK8touchgfx5Texts7getTextEt>
 8013fee:	6823      	ldr	r3, [r4, #0]
 8013ff0:	4680      	mov	r8, r0
 8013ff2:	4620      	mov	r0, r4
 8013ff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013ff6:	4798      	blx	r3
 8013ff8:	6823      	ldr	r3, [r4, #0]
 8013ffa:	4681      	mov	r9, r0
 8013ffc:	4620      	mov	r0, r4
 8013ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014002:	4798      	blx	r3
 8014004:	464b      	mov	r3, r9
 8014006:	9000      	str	r0, [sp, #0]
 8014008:	4642      	mov	r2, r8
 801400a:	4629      	mov	r1, r5
 801400c:	4630      	mov	r0, r6
 801400e:	47b8      	blx	r7
 8014010:	b003      	add	sp, #12
 8014012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014016:	2000      	movs	r0, #0
 8014018:	e7fa      	b.n	8014010 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 801401a:	bf00      	nop
 801401c:	2400b0d8 	.word	0x2400b0d8
 8014020:	2400b0d4 	.word	0x2400b0d4
 8014024:	2400b0dc 	.word	0x2400b0dc
 8014028:	2400b0e0 	.word	0x2400b0e0

0801402c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801402c:	b40e      	push	{r1, r2, r3}
 801402e:	4b30      	ldr	r3, [pc, #192]	; (80140f0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8014030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014034:	881a      	ldrh	r2, [r3, #0]
 8014036:	b09d      	sub	sp, #116	; 0x74
 8014038:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801403a:	4604      	mov	r4, r0
 801403c:	429a      	cmp	r2, r3
 801403e:	d954      	bls.n	80140ea <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8014040:	aa26      	add	r2, sp, #152	; 0x98
 8014042:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80140f4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8014046:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80140f8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 801404a:	9202      	str	r2, [sp, #8]
 801404c:	f8d9 2000 	ldr.w	r2, [r9]
 8014050:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8014054:	f8d8 3000 	ldr.w	r3, [r8]
 8014058:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801405c:	682b      	ldr	r3, [r5, #0]
 801405e:	4628      	mov	r0, r5
 8014060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014062:	4798      	blx	r3
 8014064:	4606      	mov	r6, r0
 8014066:	b207      	sxth	r7, r0
 8014068:	a803      	add	r0, sp, #12
 801406a:	f003 fdbd 	bl	8017be8 <_ZN8touchgfx12TextProviderC1Ev>
 801406e:	682b      	ldr	r3, [r5, #0]
 8014070:	4628      	mov	r0, r5
 8014072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014074:	4798      	blx	r3
 8014076:	682b      	ldr	r3, [r5, #0]
 8014078:	4682      	mov	sl, r0
 801407a:	4628      	mov	r0, r5
 801407c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801407e:	4798      	blx	r3
 8014080:	4653      	mov	r3, sl
 8014082:	9000      	str	r0, [sp, #0]
 8014084:	a803      	add	r0, sp, #12
 8014086:	9a02      	ldr	r2, [sp, #8]
 8014088:	9925      	ldr	r1, [sp, #148]	; 0x94
 801408a:	f003 fe08 	bl	8017c9e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801408e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8014090:	f8d9 3000 	ldr.w	r3, [r9]
 8014094:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8014098:	8925      	ldrh	r5, [r4, #8]
 801409a:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 801409e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 80140a2:	eba5 050c 	sub.w	r5, r5, ip
 80140a6:	784a      	ldrb	r2, [r1, #1]
 80140a8:	f8d8 3000 	ldr.w	r3, [r8]
 80140ac:	b22d      	sxth	r5, r5
 80140ae:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 80140b2:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80140b6:	9500      	str	r5, [sp, #0]
 80140b8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80140bc:	a803      	add	r0, sp, #12
 80140be:	f001 fcca 	bl	8015a56 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80140c2:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 80140c6:	b203      	sxth	r3, r0
 80140c8:	18b9      	adds	r1, r7, r2
 80140ca:	2900      	cmp	r1, #0
 80140cc:	dd0b      	ble.n	80140e6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 80140ce:	3b01      	subs	r3, #1
 80140d0:	fb13 f302 	smulbb	r3, r3, r2
 80140d4:	fb16 3300 	smlabb	r3, r6, r0, r3
 80140d8:	b21f      	sxth	r7, r3
 80140da:	4638      	mov	r0, r7
 80140dc:	b01d      	add	sp, #116	; 0x74
 80140de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80140e2:	b003      	add	sp, #12
 80140e4:	4770      	bx	lr
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	dcf7      	bgt.n	80140da <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 80140ea:	2700      	movs	r7, #0
 80140ec:	e7f5      	b.n	80140da <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 80140ee:	bf00      	nop
 80140f0:	2400b0d8 	.word	0x2400b0d8
 80140f4:	2400b0d4 	.word	0x2400b0d4
 80140f8:	2400b0dc 	.word	0x2400b0dc

080140fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 80140fc:	4bbc      	ldr	r3, [pc, #752]	; (80143f0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f4>)
 80140fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014102:	460c      	mov	r4, r1
 8014104:	881b      	ldrh	r3, [r3, #0]
 8014106:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8014108:	b0a9      	sub	sp, #164	; 0xa4
 801410a:	4681      	mov	r9, r0
 801410c:	428b      	cmp	r3, r1
 801410e:	d809      	bhi.n	8014124 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8014110:	2300      	movs	r3, #0
 8014112:	f04f 32ff 	mov.w	r2, #4294967295
 8014116:	6083      	str	r3, [r0, #8]
 8014118:	e9c0 3200 	strd	r3, r2, [r0]
 801411c:	4648      	mov	r0, r9
 801411e:	b029      	add	sp, #164	; 0xa4
 8014120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014124:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 80143f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8014128:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 801412c:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 80143fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>
 8014130:	f8db 3000 	ldr.w	r3, [fp]
 8014134:	f8d8 0000 	ldr.w	r0, [r8]
 8014138:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 801413c:	4bad      	ldr	r3, [pc, #692]	; (80143f4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8014144:	f7f2 fb80 	bl	8006848 <_ZNK8touchgfx5Texts7getTextEt>
 8014148:	4607      	mov	r7, r0
 801414a:	682b      	ldr	r3, [r5, #0]
 801414c:	4628      	mov	r0, r5
 801414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014150:	4798      	blx	r3
 8014152:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
 8014154:	f8cd 800c 	str.w	r8, [sp, #12]
 8014158:	4430      	add	r0, r6
 801415a:	f894 6039 	ldrb.w	r6, [r4, #57]	; 0x39
 801415e:	b283      	uxth	r3, r0
 8014160:	4650      	mov	r0, sl
 8014162:	9302      	str	r3, [sp, #8]
 8014164:	2e00      	cmp	r6, #0
 8014166:	f040 8090 	bne.w	801428a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 801416a:	f003 fd3d 	bl	8017be8 <_ZN8touchgfx12TextProviderC1Ev>
 801416e:	682b      	ldr	r3, [r5, #0]
 8014170:	4628      	mov	r0, r5
 8014172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014174:	4798      	blx	r3
 8014176:	682b      	ldr	r3, [r5, #0]
 8014178:	9005      	str	r0, [sp, #20]
 801417a:	4628      	mov	r0, r5
 801417c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801417e:	4798      	blx	r3
 8014180:	6823      	ldr	r3, [r4, #0]
 8014182:	4680      	mov	r8, r0
 8014184:	4620      	mov	r0, r4
 8014186:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014188:	4798      	blx	r3
 801418a:	6822      	ldr	r2, [r4, #0]
 801418c:	9004      	str	r0, [sp, #16]
 801418e:	4620      	mov	r0, r4
 8014190:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8014194:	4790      	blx	r2
 8014196:	9905      	ldr	r1, [sp, #20]
 8014198:	9b04      	ldr	r3, [sp, #16]
 801419a:	460a      	mov	r2, r1
 801419c:	4639      	mov	r1, r7
 801419e:	4637      	mov	r7, r6
 80141a0:	9001      	str	r0, [sp, #4]
 80141a2:	9300      	str	r3, [sp, #0]
 80141a4:	4650      	mov	r0, sl
 80141a6:	4643      	mov	r3, r8
 80141a8:	f003 fd8e 	bl	8017cc8 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80141ac:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80141ae:	4629      	mov	r1, r5
 80141b0:	f8db 3000 	ldr.w	r3, [fp]
 80141b4:	4650      	mov	r0, sl
 80141b6:	3601      	adds	r6, #1
 80141b8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80141bc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80141c0:	b2b6      	uxth	r6, r6
 80141c2:	785b      	ldrb	r3, [r3, #1]
 80141c4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80141c8:	f001 f996 	bl	80154f8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80141cc:	4287      	cmp	r7, r0
 80141ce:	bfb8      	it	lt
 80141d0:	b207      	sxthlt	r7, r0
 80141d2:	4650      	mov	r0, sl
 80141d4:	f003 fd2f 	bl	8017c36 <_ZN8touchgfx12TextProvider11endOfStringEv>
 80141d8:	2800      	cmp	r0, #0
 80141da:	d0e7      	beq.n	80141ac <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xb0>
 80141dc:	9b02      	ldr	r3, [sp, #8]
 80141de:	f8b4 8034 	ldrh.w	r8, [r4, #52]	; 0x34
 80141e2:	fb13 f606 	smulbb	r6, r3, r6
 80141e6:	eba6 0608 	sub.w	r6, r6, r8
 80141ea:	b2b6      	uxth	r6, r6
 80141ec:	fa0f f886 	sxth.w	r8, r6
 80141f0:	f1b8 0f00 	cmp.w	r8, #0
 80141f4:	dd06      	ble.n	8014204 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x108>
 80141f6:	682b      	ldr	r3, [r5, #0]
 80141f8:	4628      	mov	r0, r5
 80141fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141fc:	4798      	blx	r3
 80141fe:	4430      	add	r0, r6
 8014200:	fa0f f880 	sxth.w	r8, r0
 8014204:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014208:	4620      	mov	r0, r4
 801420a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801420e:	6823      	ldr	r3, [r4, #0]
 8014210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014212:	bf0c      	ite	eq
 8014214:	f9b4 6008 	ldrsheq.w	r6, [r4, #8]
 8014218:	f9b4 600a 	ldrshne.w	r6, [r4, #10]
 801421c:	4798      	blx	r3
 801421e:	2801      	cmp	r0, #1
 8014220:	b2ba      	uxth	r2, r7
 8014222:	f000 80d2 	beq.w	80143ca <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ce>
 8014226:	2802      	cmp	r0, #2
 8014228:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 801422c:	f000 80d3 	beq.w	80143d6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2da>
 8014230:	b21e      	sxth	r6, r3
 8014232:	7a29      	ldrb	r1, [r5, #8]
 8014234:	7a6d      	ldrb	r5, [r5, #9]
 8014236:	1a76      	subs	r6, r6, r1
 8014238:	4429      	add	r1, r5
 801423a:	b2b3      	uxth	r3, r6
 801423c:	440a      	add	r2, r1
 801423e:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8014242:	b21f      	sxth	r7, r3
 8014244:	b292      	uxth	r2, r2
 8014246:	2902      	cmp	r1, #2
 8014248:	b216      	sxth	r6, r2
 801424a:	f000 80c7 	beq.w	80143dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e0>
 801424e:	2903      	cmp	r1, #3
 8014250:	f000 80d6 	beq.w	8014400 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>
 8014254:	2901      	cmp	r1, #1
 8014256:	f040 80dc 	bne.w	8014412 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x316>
 801425a:	8923      	ldrh	r3, [r4, #8]
 801425c:	4632      	mov	r2, r6
 801425e:	463d      	mov	r5, r7
 8014260:	4646      	mov	r6, r8
 8014262:	eba3 0308 	sub.w	r3, r3, r8
 8014266:	4690      	mov	r8, r2
 8014268:	b21f      	sxth	r7, r3
 801426a:	9b03      	ldr	r3, [sp, #12]
 801426c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801426e:	6818      	ldr	r0, [r3, #0]
 8014270:	f7f2 faea 	bl	8006848 <_ZNK8touchgfx5Texts7getTextEt>
 8014274:	f8a9 7000 	strh.w	r7, [r9]
 8014278:	f8a9 5002 	strh.w	r5, [r9, #2]
 801427c:	f8a9 6004 	strh.w	r6, [r9, #4]
 8014280:	f8a9 8006 	strh.w	r8, [r9, #6]
 8014284:	f8c9 0008 	str.w	r0, [r9, #8]
 8014288:	e748      	b.n	801411c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 801428a:	f003 fcad 	bl	8017be8 <_ZN8touchgfx12TextProviderC1Ev>
 801428e:	682b      	ldr	r3, [r5, #0]
 8014290:	4628      	mov	r0, r5
 8014292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014294:	4798      	blx	r3
 8014296:	682b      	ldr	r3, [r5, #0]
 8014298:	4606      	mov	r6, r0
 801429a:	4628      	mov	r0, r5
 801429c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801429e:	4798      	blx	r3
 80142a0:	6823      	ldr	r3, [r4, #0]
 80142a2:	4680      	mov	r8, r0
 80142a4:	4620      	mov	r0, r4
 80142a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80142a8:	4798      	blx	r3
 80142aa:	6822      	ldr	r2, [r4, #0]
 80142ac:	9004      	str	r0, [sp, #16]
 80142ae:	4620      	mov	r0, r4
 80142b0:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80142b4:	4790      	blx	r2
 80142b6:	9b04      	ldr	r3, [sp, #16]
 80142b8:	4632      	mov	r2, r6
 80142ba:	9001      	str	r0, [sp, #4]
 80142bc:	9300      	str	r3, [sp, #0]
 80142be:	4639      	mov	r1, r7
 80142c0:	4643      	mov	r3, r8
 80142c2:	4650      	mov	r0, sl
 80142c4:	f003 fd00 	bl	8017cc8 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80142c8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80142cc:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 80142d0:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80142d4:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80142d8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80142da:	bf0a      	itet	eq
 80142dc:	4642      	moveq	r2, r8
 80142de:	461a      	movne	r2, r3
 80142e0:	4698      	moveq	r8, r3
 80142e2:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 80142e6:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 80142ea:	1ad2      	subs	r2, r2, r3
 80142ec:	f8db 3000 	ldr.w	r3, [fp]
 80142f0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80142f4:	7859      	ldrb	r1, [r3, #1]
 80142f6:	2300      	movs	r3, #0
 80142f8:	f8cd a020 	str.w	sl, [sp, #32]
 80142fc:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8014300:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014304:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8014308:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801430c:	950a      	str	r5, [sp, #40]	; 0x28
 801430e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8014312:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8014316:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801431a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801431e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8014322:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8014326:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801432a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 801432e:	b350      	cbz	r0, 8014386 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8014330:	682b      	ldr	r3, [r5, #0]
 8014332:	4628      	mov	r0, r5
 8014334:	695b      	ldr	r3, [r3, #20]
 8014336:	4798      	blx	r3
 8014338:	4607      	mov	r7, r0
 801433a:	b320      	cbz	r0, 8014386 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 801433c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801433e:	4639      	mov	r1, r7
 8014340:	6803      	ldr	r3, [r0, #0]
 8014342:	68db      	ldr	r3, [r3, #12]
 8014344:	4798      	blx	r3
 8014346:	4606      	mov	r6, r0
 8014348:	b1e8      	cbz	r0, 8014386 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 801434a:	7b43      	ldrb	r3, [r0, #13]
 801434c:	7a82      	ldrb	r2, [r0, #10]
 801434e:	005b      	lsls	r3, r3, #1
 8014350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014354:	4313      	orrs	r3, r2
 8014356:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801435a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 801435e:	2b04      	cmp	r3, #4
 8014360:	d111      	bne.n	8014386 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8014362:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014364:	4632      	mov	r2, r6
 8014366:	4639      	mov	r1, r7
 8014368:	6803      	ldr	r3, [r0, #0]
 801436a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801436c:	4798      	blx	r3
 801436e:	7b73      	ldrb	r3, [r6, #13]
 8014370:	005b      	lsls	r3, r3, #1
 8014372:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014376:	7ab3      	ldrb	r3, [r6, #10]
 8014378:	4313      	orrs	r3, r2
 801437a:	4418      	add	r0, r3
 801437c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8014380:	4418      	add	r0, r3
 8014382:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8014386:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 801438a:	2600      	movs	r6, #0
 801438c:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 8014390:	4637      	mov	r7, r6
 8014392:	45c3      	cmp	fp, r8
 8014394:	a807      	add	r0, sp, #28
 8014396:	f106 0601 	add.w	r6, r6, #1
 801439a:	bfd4      	ite	le
 801439c:	2100      	movle	r1, #0
 801439e:	2101      	movgt	r1, #1
 80143a0:	f001 fa8a 	bl	80158b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80143a4:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80143a8:	b2b6      	uxth	r6, r6
 80143aa:	429f      	cmp	r7, r3
 80143ac:	bfb8      	it	lt
 80143ae:	b21f      	sxthlt	r7, r3
 80143b0:	9b02      	ldr	r3, [sp, #8]
 80143b2:	eba8 0803 	sub.w	r8, r8, r3
 80143b6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80143ba:	fa0f f888 	sxth.w	r8, r8
 80143be:	2b00      	cmp	r3, #0
 80143c0:	f43f af0c 	beq.w	80141dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 80143c4:	45c2      	cmp	sl, r8
 80143c6:	dbe4      	blt.n	8014392 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x296>
 80143c8:	e708      	b.n	80141dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 80143ca:	1bf6      	subs	r6, r6, r7
 80143cc:	2702      	movs	r7, #2
 80143ce:	fb96 f6f7 	sdiv	r6, r6, r7
 80143d2:	b236      	sxth	r6, r6
 80143d4:	e72d      	b.n	8014232 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x136>
 80143d6:	4413      	add	r3, r2
 80143d8:	1af6      	subs	r6, r6, r3
 80143da:	e7fa      	b.n	80143d2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2d6>
 80143dc:	8925      	ldrh	r5, [r4, #8]
 80143de:	1aad      	subs	r5, r5, r2
 80143e0:	1aed      	subs	r5, r5, r3
 80143e2:	b22f      	sxth	r7, r5
 80143e4:	8965      	ldrh	r5, [r4, #10]
 80143e6:	eba5 0508 	sub.w	r5, r5, r8
 80143ea:	b22d      	sxth	r5, r5
 80143ec:	e73d      	b.n	801426a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 80143ee:	bf00      	nop
 80143f0:	2400b0d8 	.word	0x2400b0d8
 80143f4:	2400b0dc 	.word	0x2400b0dc
 80143f8:	2400b0d4 	.word	0x2400b0d4
 80143fc:	2400b0e0 	.word	0x2400b0e0
 8014400:	8965      	ldrh	r5, [r4, #10]
 8014402:	2700      	movs	r7, #0
 8014404:	1aad      	subs	r5, r5, r2
 8014406:	1aed      	subs	r5, r5, r3
 8014408:	4633      	mov	r3, r6
 801440a:	4646      	mov	r6, r8
 801440c:	b22d      	sxth	r5, r5
 801440e:	4698      	mov	r8, r3
 8014410:	e72b      	b.n	801426a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 8014412:	2500      	movs	r5, #0
 8014414:	e729      	b.n	801426a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 8014416:	bf00      	nop

08014418 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8014418:	b513      	push	{r0, r1, r4, lr}
 801441a:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 801441e:	4604      	mov	r4, r0
 8014420:	b1fb      	cbz	r3, 8014462 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8014422:	4b16      	ldr	r3, [pc, #88]	; (801447c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8014424:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8014426:	881b      	ldrh	r3, [r3, #0]
 8014428:	428b      	cmp	r3, r1
 801442a:	d91a      	bls.n	8014462 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801442c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8014430:	2b00      	cmp	r3, #0
 8014432:	dd16      	ble.n	8014462 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8014434:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8014438:	2b00      	cmp	r3, #0
 801443a:	dd12      	ble.n	8014462 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801443c:	4b10      	ldr	r3, [pc, #64]	; (8014480 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 801443e:	6818      	ldr	r0, [r3, #0]
 8014440:	f7f2 fa02 	bl	8006848 <_ZNK8touchgfx5Texts7getTextEt>
 8014444:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8014448:	6822      	ldr	r2, [r4, #0]
 801444a:	2b00      	cmp	r3, #0
 801444c:	db06      	blt.n	801445c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 801444e:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8014452:	2b00      	cmp	r3, #0
 8014454:	db02      	blt.n	801445c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8014456:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014458:	4298      	cmp	r0, r3
 801445a:	d004      	beq.n	8014466 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 801445c:	6953      	ldr	r3, [r2, #20]
 801445e:	4620      	mov	r0, r4
 8014460:	4798      	blx	r3
 8014462:	b002      	add	sp, #8
 8014464:	bd10      	pop	{r4, pc}
 8014466:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 801446a:	466b      	mov	r3, sp
 801446c:	6912      	ldr	r2, [r2, #16]
 801446e:	c903      	ldmia	r1, {r0, r1}
 8014470:	e883 0003 	stmia.w	r3, {r0, r1}
 8014474:	4619      	mov	r1, r3
 8014476:	4620      	mov	r0, r4
 8014478:	4790      	blx	r2
 801447a:	e7f2      	b.n	8014462 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801447c:	2400b0d8 	.word	0x2400b0d8
 8014480:	2400b0e0 	.word	0x2400b0e0

08014484 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8014484:	4b45      	ldr	r3, [pc, #276]	; (801459c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 8014486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801448a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801448c:	b08e      	sub	sp, #56	; 0x38
 801448e:	881b      	ldrh	r3, [r3, #0]
 8014490:	4604      	mov	r4, r0
 8014492:	4293      	cmp	r3, r2
 8014494:	d97e      	bls.n	8014594 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8014496:	6808      	ldr	r0, [r1, #0]
 8014498:	ab05      	add	r3, sp, #20
 801449a:	6849      	ldr	r1, [r1, #4]
 801449c:	4d40      	ldr	r5, [pc, #256]	; (80145a0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 801449e:	c303      	stmia	r3!, {r0, r1}
 80144a0:	4611      	mov	r1, r2
 80144a2:	6828      	ldr	r0, [r5, #0]
 80144a4:	f7f2 f9d0 	bl	8006848 <_ZNK8touchgfx5Texts7getTextEt>
 80144a8:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	db11      	blt.n	80144d4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80144b0:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	db0d      	blt.n	80144d4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80144b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80144ba:	4298      	cmp	r0, r3
 80144bc:	d10a      	bne.n	80144d4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80144be:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 80144c2:	ab09      	add	r3, sp, #36	; 0x24
 80144c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80144c8:	e883 0003 	stmia.w	r3, {r0, r1}
 80144cc:	4619      	mov	r1, r3
 80144ce:	a805      	add	r0, sp, #20
 80144d0:	f7fe fd3e 	bl	8012f50 <_ZN8touchgfx4RectaNERKS0_>
 80144d4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	dd5b      	ble.n	8014594 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80144dc:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	dd57      	ble.n	8014594 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80144e4:	4f2f      	ldr	r7, [pc, #188]	; (80145a4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 80144e6:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80144e8:	683b      	ldr	r3, [r7, #0]
 80144ea:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80144ee:	4b2e      	ldr	r3, [pc, #184]	; (80145a8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80144f6:	2e00      	cmp	r6, #0
 80144f8:	d04c      	beq.n	8014594 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80144fa:	6823      	ldr	r3, [r4, #0]
 80144fc:	4620      	mov	r0, r4
 80144fe:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 8014502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014504:	4798      	blx	r3
 8014506:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8014508:	683b      	ldr	r3, [r7, #0]
 801450a:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 801450e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8014512:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 8014516:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 801451a:	785b      	ldrb	r3, [r3, #1]
 801451c:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 8014520:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8014524:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014526:	9609      	str	r6, [sp, #36]	; 0x24
 8014528:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801452c:	4b1f      	ldr	r3, [pc, #124]	; (80145ac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 801452e:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 8014538:	910b      	str	r1, [sp, #44]	; 0x2c
 801453a:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 801453e:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 8014542:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 8014546:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 801454a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801454e:	b10a      	cbz	r2, 8014554 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8014550:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8014552:	b906      	cbnz	r6, 8014556 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8014554:	689e      	ldr	r6, [r3, #8]
 8014556:	af07      	add	r7, sp, #28
 8014558:	4621      	mov	r1, r4
 801455a:	4638      	mov	r0, r7
 801455c:	f002 ff94 	bl	8017488 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014560:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8014562:	6828      	ldr	r0, [r5, #0]
 8014564:	f7f2 f970 	bl	8006848 <_ZNK8touchgfx5Texts7getTextEt>
 8014568:	6823      	ldr	r3, [r4, #0]
 801456a:	4605      	mov	r5, r0
 801456c:	4620      	mov	r0, r4
 801456e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014570:	4798      	blx	r3
 8014572:	6823      	ldr	r3, [r4, #0]
 8014574:	4680      	mov	r8, r0
 8014576:	4620      	mov	r0, r4
 8014578:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801457c:	4798      	blx	r3
 801457e:	ab09      	add	r3, sp, #36	; 0x24
 8014580:	9501      	str	r5, [sp, #4]
 8014582:	9300      	str	r3, [sp, #0]
 8014584:	ab05      	add	r3, sp, #20
 8014586:	e9cd 8002 	strd	r8, r0, [sp, #8]
 801458a:	4630      	mov	r0, r6
 801458c:	e897 0006 	ldmia.w	r7, {r1, r2}
 8014590:	f7f2 f8eb 	bl	800676a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8014594:	b00e      	add	sp, #56	; 0x38
 8014596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801459a:	bf00      	nop
 801459c:	2400b0d8 	.word	0x2400b0d8
 80145a0:	2400b0e0 	.word	0x2400b0e0
 80145a4:	2400b0d4 	.word	0x2400b0d4
 80145a8:	2400b0dc 	.word	0x2400b0dc
 80145ac:	2400b084 	.word	0x2400b084

080145b0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80145b0:	b538      	push	{r3, r4, r5, lr}
 80145b2:	4b0e      	ldr	r3, [pc, #56]	; (80145ec <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 80145b4:	4604      	mov	r4, r0
 80145b6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80145b8:	881b      	ldrh	r3, [r3, #0]
 80145ba:	429a      	cmp	r2, r3
 80145bc:	d214      	bcs.n	80145e8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 80145be:	6803      	ldr	r3, [r0, #0]
 80145c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80145c2:	4798      	blx	r3
 80145c4:	6823      	ldr	r3, [r4, #0]
 80145c6:	4605      	mov	r5, r0
 80145c8:	4620      	mov	r0, r4
 80145ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80145cc:	4798      	blx	r3
 80145ce:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80145d2:	b22d      	sxth	r5, r5
 80145d4:	4601      	mov	r1, r0
 80145d6:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80145da:	bf06      	itte	eq
 80145dc:	4602      	moveq	r2, r0
 80145de:	4629      	moveq	r1, r5
 80145e0:	462a      	movne	r2, r5
 80145e2:	4620      	mov	r0, r4
 80145e4:	f7f0 f97b 	bl	80048de <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80145e8:	bd38      	pop	{r3, r4, r5, pc}
 80145ea:	bf00      	nop
 80145ec:	2400b0d8 	.word	0x2400b0d8

080145f0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 80145f0:	b530      	push	{r4, r5, lr}
 80145f2:	888b      	ldrh	r3, [r1, #4]
 80145f4:	b085      	sub	sp, #20
 80145f6:	4604      	mov	r4, r0
 80145f8:	8583      	strh	r3, [r0, #44]	; 0x2c
 80145fa:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80145fe:	b923      	cbnz	r3, 801460a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8014600:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8014604:	b90b      	cbnz	r3, 801460a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8014606:	f7ff ffd3 	bl	80145b0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801460a:	6823      	ldr	r3, [r4, #0]
 801460c:	466d      	mov	r5, sp
 801460e:	4621      	mov	r1, r4
 8014610:	343c      	adds	r4, #60	; 0x3c
 8014612:	4628      	mov	r0, r5
 8014614:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014618:	4798      	blx	r3
 801461a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801461e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014622:	b005      	add	sp, #20
 8014624:	bd30      	pop	{r4, r5, pc}

08014626 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8014626:	2300      	movs	r3, #0
 8014628:	8083      	strh	r3, [r0, #4]
 801462a:	80c3      	strh	r3, [r0, #6]
 801462c:	8003      	strh	r3, [r0, #0]
 801462e:	8043      	strh	r3, [r0, #2]
 8014630:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8014634:	2bff      	cmp	r3, #255	; 0xff
 8014636:	bf01      	itttt	eq
 8014638:	890b      	ldrheq	r3, [r1, #8]
 801463a:	8083      	strheq	r3, [r0, #4]
 801463c:	894b      	ldrheq	r3, [r1, #10]
 801463e:	80c3      	strheq	r3, [r0, #6]
 8014640:	4770      	bx	lr
	...

08014644 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8014644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014646:	4604      	mov	r4, r0
 8014648:	466b      	mov	r3, sp
 801464a:	6808      	ldr	r0, [r1, #0]
 801464c:	6849      	ldr	r1, [r1, #4]
 801464e:	c303      	stmia	r3!, {r0, r1}
 8014650:	6823      	ldr	r3, [r4, #0]
 8014652:	4669      	mov	r1, sp
 8014654:	4620      	mov	r0, r4
 8014656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014658:	4798      	blx	r3
 801465a:	4b08      	ldr	r3, [pc, #32]	; (801467c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8014662:	b10a      	cbz	r2, 8014668 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8014664:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8014666:	b900      	cbnz	r0, 801466a <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8014668:	6898      	ldr	r0, [r3, #8]
 801466a:	6803      	ldr	r3, [r0, #0]
 801466c:	4669      	mov	r1, sp
 801466e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8014670:	6a1d      	ldr	r5, [r3, #32]
 8014672:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8014676:	47a8      	blx	r5
 8014678:	b003      	add	sp, #12
 801467a:	bd30      	pop	{r4, r5, pc}
 801467c:	2400b084 	.word	0x2400b084

08014680 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8014680:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8014684:	b12a      	cbz	r2, 8014692 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8014686:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801468a:	b112      	cbz	r2, 8014692 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801468c:	6803      	ldr	r3, [r0, #0]
 801468e:	695b      	ldr	r3, [r3, #20]
 8014690:	4718      	bx	r3
 8014692:	4770      	bx	lr

08014694 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8014694:	4b30      	ldr	r3, [pc, #192]	; (8014758 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8014696:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801469a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801469c:	b08d      	sub	sp, #52	; 0x34
 801469e:	881b      	ldrh	r3, [r3, #0]
 80146a0:	4604      	mov	r4, r0
 80146a2:	460f      	mov	r7, r1
 80146a4:	4293      	cmp	r3, r2
 80146a6:	d954      	bls.n	8014752 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 80146a8:	4b2c      	ldr	r3, [pc, #176]	; (801475c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 80146aa:	6819      	ldr	r1, [r3, #0]
 80146ac:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 80146b0:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 80146b4:	4a2a      	ldr	r2, [pc, #168]	; (8014760 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 80146b6:	6812      	ldr	r2, [r2, #0]
 80146b8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80146bc:	2900      	cmp	r1, #0
 80146be:	d048      	beq.n	8014752 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 80146c0:	785a      	ldrb	r2, [r3, #1]
 80146c2:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80146c6:	f3c2 0801 	ubfx	r8, r2, #0, #2
 80146ca:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80146ce:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80146d2:	4b24      	ldr	r3, [pc, #144]	; (8014764 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 80146d4:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 80146d8:	681a      	ldr	r2, [r3, #0]
 80146da:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 80146de:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 80146e2:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 80146e6:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80146e8:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 80146ec:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 80146f0:	9107      	str	r1, [sp, #28]
 80146f2:	f88d 8020 	strb.w	r8, [sp, #32]
 80146f6:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 80146fa:	9609      	str	r6, [sp, #36]	; 0x24
 80146fc:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8014700:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8014704:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 8014708:	b10b      	cbz	r3, 801470e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 801470a:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 801470c:	b905      	cbnz	r5, 8014710 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 801470e:	6895      	ldr	r5, [r2, #8]
 8014710:	ae05      	add	r6, sp, #20
 8014712:	4621      	mov	r1, r4
 8014714:	4630      	mov	r0, r6
 8014716:	f002 feb7 	bl	8017488 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801471a:	4b13      	ldr	r3, [pc, #76]	; (8014768 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 801471c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801471e:	6818      	ldr	r0, [r3, #0]
 8014720:	f7f2 f892 	bl	8006848 <_ZNK8touchgfx5Texts7getTextEt>
 8014724:	6823      	ldr	r3, [r4, #0]
 8014726:	4680      	mov	r8, r0
 8014728:	4620      	mov	r0, r4
 801472a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801472c:	4798      	blx	r3
 801472e:	6823      	ldr	r3, [r4, #0]
 8014730:	4681      	mov	r9, r0
 8014732:	4620      	mov	r0, r4
 8014734:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014738:	4798      	blx	r3
 801473a:	ab07      	add	r3, sp, #28
 801473c:	f8cd 8004 	str.w	r8, [sp, #4]
 8014740:	9300      	str	r3, [sp, #0]
 8014742:	463b      	mov	r3, r7
 8014744:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8014748:	4628      	mov	r0, r5
 801474a:	e896 0006 	ldmia.w	r6, {r1, r2}
 801474e:	f7f2 f80c 	bl	800676a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8014752:	b00d      	add	sp, #52	; 0x34
 8014754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014758:	2400b0d8 	.word	0x2400b0d8
 801475c:	2400b0d4 	.word	0x2400b0d4
 8014760:	2400b0dc 	.word	0x2400b0dc
 8014764:	2400b084 	.word	0x2400b084
 8014768:	2400b0e0 	.word	0x2400b0e0

0801476c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
 801476c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014770:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8014774:	b0a0      	sub	sp, #128	; 0x80
 8014776:	4604      	mov	r4, r0
 8014778:	b193      	cbz	r3, 80147a0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 801477a:	4b30      	ldr	r3, [pc, #192]	; (801483c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd0>)
 801477c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801477e:	881b      	ldrh	r3, [r3, #0]
 8014780:	428b      	cmp	r3, r1
 8014782:	d90d      	bls.n	80147a0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8014784:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8014788:	2b00      	cmp	r3, #0
 801478a:	dd09      	ble.n	80147a0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 801478c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8014790:	2b00      	cmp	r3, #0
 8014792:	dd05      	ble.n	80147a0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8014794:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8014798:	b12b      	cbz	r3, 80147a6 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x3a>
 801479a:	6803      	ldr	r3, [r0, #0]
 801479c:	695b      	ldr	r3, [r3, #20]
 801479e:	4798      	blx	r3
 80147a0:	b020      	add	sp, #128	; 0x80
 80147a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147a6:	4b26      	ldr	r3, [pc, #152]	; (8014840 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd4>)
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 80147ae:	4b25      	ldr	r3, [pc, #148]	; (8014844 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd8>)
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80147b6:	4b24      	ldr	r3, [pc, #144]	; (8014848 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xdc>)
 80147b8:	6818      	ldr	r0, [r3, #0]
 80147ba:	f7f2 f845 	bl	8006848 <_ZNK8touchgfx5Texts7getTextEt>
 80147be:	4606      	mov	r6, r0
 80147c0:	a807      	add	r0, sp, #28
 80147c2:	f003 fa11 	bl	8017be8 <_ZN8touchgfx12TextProviderC1Ev>
 80147c6:	682b      	ldr	r3, [r5, #0]
 80147c8:	4628      	mov	r0, r5
 80147ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80147cc:	4798      	blx	r3
 80147ce:	682b      	ldr	r3, [r5, #0]
 80147d0:	4607      	mov	r7, r0
 80147d2:	4628      	mov	r0, r5
 80147d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80147d6:	4798      	blx	r3
 80147d8:	6823      	ldr	r3, [r4, #0]
 80147da:	4605      	mov	r5, r0
 80147dc:	4620      	mov	r0, r4
 80147de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80147e0:	4798      	blx	r3
 80147e2:	6823      	ldr	r3, [r4, #0]
 80147e4:	4680      	mov	r8, r0
 80147e6:	4620      	mov	r0, r4
 80147e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80147ec:	4798      	blx	r3
 80147ee:	462b      	mov	r3, r5
 80147f0:	463a      	mov	r2, r7
 80147f2:	4631      	mov	r1, r6
 80147f4:	e9cd 8000 	strd	r8, r0, [sp]
 80147f8:	a807      	add	r0, sp, #28
 80147fa:	f003 fa65 	bl	8017cc8 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80147fe:	a807      	add	r0, sp, #28
 8014800:	f003 fe1e 	bl	8018440 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014804:	280a      	cmp	r0, #10
 8014806:	d103      	bne.n	8014810 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xa4>
 8014808:	6823      	ldr	r3, [r4, #0]
 801480a:	4620      	mov	r0, r4
 801480c:	695b      	ldr	r3, [r3, #20]
 801480e:	e7c6      	b.n	801479e <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x32>
 8014810:	a807      	add	r0, sp, #28
 8014812:	f003 fe15 	bl	8018440 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014816:	2800      	cmp	r0, #0
 8014818:	d1f4      	bne.n	8014804 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x98>
 801481a:	ad04      	add	r5, sp, #16
 801481c:	4621      	mov	r1, r4
 801481e:	4628      	mov	r0, r5
 8014820:	f7ff fc6c 	bl	80140fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8014824:	ab02      	add	r3, sp, #8
 8014826:	6822      	ldr	r2, [r4, #0]
 8014828:	e895 0003 	ldmia.w	r5, {r0, r1}
 801482c:	6912      	ldr	r2, [r2, #16]
 801482e:	e883 0003 	stmia.w	r3, {r0, r1}
 8014832:	4619      	mov	r1, r3
 8014834:	4620      	mov	r0, r4
 8014836:	4790      	blx	r2
 8014838:	e7b2      	b.n	80147a0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 801483a:	bf00      	nop
 801483c:	2400b0d8 	.word	0x2400b0d8
 8014840:	2400b0d4 	.word	0x2400b0d4
 8014844:	2400b0dc 	.word	0x2400b0dc
 8014848:	2400b0e0 	.word	0x2400b0e0

0801484c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 801484c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014850:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8014852:	4604      	mov	r4, r0
 8014854:	460e      	mov	r6, r1
 8014856:	b08e      	sub	sp, #56	; 0x38
 8014858:	b218      	sxth	r0, r3
 801485a:	8921      	ldrh	r1, [r4, #8]
 801485c:	005b      	lsls	r3, r3, #1
 801485e:	8962      	ldrh	r2, [r4, #10]
 8014860:	f8ad 0000 	strh.w	r0, [sp]
 8014864:	b29b      	uxth	r3, r3
 8014866:	f8ad 0002 	strh.w	r0, [sp, #2]
 801486a:	1ac9      	subs	r1, r1, r3
 801486c:	1ad3      	subs	r3, r2, r3
 801486e:	b209      	sxth	r1, r1
 8014870:	b21b      	sxth	r3, r3
 8014872:	2900      	cmp	r1, #0
 8014874:	f8ad 1004 	strh.w	r1, [sp, #4]
 8014878:	f8ad 3006 	strh.w	r3, [sp, #6]
 801487c:	dd5e      	ble.n	801493c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801487e:	2b00      	cmp	r3, #0
 8014880:	dd5c      	ble.n	801493c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8014882:	6830      	ldr	r0, [r6, #0]
 8014884:	ab02      	add	r3, sp, #8
 8014886:	6871      	ldr	r1, [r6, #4]
 8014888:	c303      	stmia	r3!, {r0, r1}
 801488a:	4669      	mov	r1, sp
 801488c:	a802      	add	r0, sp, #8
 801488e:	f7fe fb5f 	bl	8012f50 <_ZN8touchgfx4RectaNERKS0_>
 8014892:	4620      	mov	r0, r4
 8014894:	a902      	add	r1, sp, #8
 8014896:	f7ff fed5 	bl	8014644 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 801489a:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 801489c:	2800      	cmp	r0, #0
 801489e:	d05f      	beq.n	8014960 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 80148a0:	8963      	ldrh	r3, [r4, #10]
 80148a2:	b202      	sxth	r2, r0
 80148a4:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80148a8:	2500      	movs	r5, #0
 80148aa:	1a1f      	subs	r7, r3, r0
 80148ac:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 80148b0:	f8ad 101c 	strh.w	r1, [sp, #28]
 80148b4:	b21b      	sxth	r3, r3
 80148b6:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 80148ba:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 80148be:	af04      	add	r7, sp, #16
 80148c0:	1a09      	subs	r1, r1, r0
 80148c2:	9506      	str	r5, [sp, #24]
 80148c4:	f8ad 201e 	strh.w	r2, [sp, #30]
 80148c8:	f8ad 5020 	strh.w	r5, [sp, #32]
 80148cc:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 80148d0:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 80148d4:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80148d8:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80148dc:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80148e0:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 80148e4:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 80148e8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80148ec:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80148f0:	ab06      	add	r3, sp, #24
 80148f2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80148f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80148fa:	e887 0003 	stmia.w	r7, {r0, r1}
 80148fe:	4631      	mov	r1, r6
 8014900:	4638      	mov	r0, r7
 8014902:	f7fe fb25 	bl	8012f50 <_ZN8touchgfx4RectaNERKS0_>
 8014906:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801490a:	2b00      	cmp	r3, #0
 801490c:	dd12      	ble.n	8014934 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 801490e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8014912:	2b00      	cmp	r3, #0
 8014914:	dd0e      	ble.n	8014934 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8014916:	6823      	ldr	r3, [r4, #0]
 8014918:	4639      	mov	r1, r7
 801491a:	4620      	mov	r0, r4
 801491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801491e:	4798      	blx	r3
 8014920:	f7ef fa60 	bl	8003de4 <_ZN8touchgfx3HAL3lcdEv>
 8014924:	6803      	ldr	r3, [r0, #0]
 8014926:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014928:	4639      	mov	r1, r7
 801492a:	f8d3 8020 	ldr.w	r8, [r3, #32]
 801492e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8014932:	47c0      	blx	r8
 8014934:	3501      	adds	r5, #1
 8014936:	2d04      	cmp	r5, #4
 8014938:	d1da      	bne.n	80148f0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 801493a:	e011      	b.n	8014960 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 801493c:	6830      	ldr	r0, [r6, #0]
 801493e:	ab06      	add	r3, sp, #24
 8014940:	6871      	ldr	r1, [r6, #4]
 8014942:	c303      	stmia	r3!, {r0, r1}
 8014944:	6823      	ldr	r3, [r4, #0]
 8014946:	a906      	add	r1, sp, #24
 8014948:	4620      	mov	r0, r4
 801494a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801494c:	4798      	blx	r3
 801494e:	f7ef fa49 	bl	8003de4 <_ZN8touchgfx3HAL3lcdEv>
 8014952:	6803      	ldr	r3, [r0, #0]
 8014954:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014956:	a906      	add	r1, sp, #24
 8014958:	6a1d      	ldr	r5, [r3, #32]
 801495a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801495e:	47a8      	blx	r5
 8014960:	b00e      	add	sp, #56	; 0x38
 8014962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014966 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8014966:	b570      	push	{r4, r5, r6, lr}
 8014968:	880b      	ldrh	r3, [r1, #0]
 801496a:	460d      	mov	r5, r1
 801496c:	4604      	mov	r4, r0
 801496e:	84c3      	strh	r3, [r0, #38]	; 0x26
 8014970:	4608      	mov	r0, r1
 8014972:	f004 fccb 	bl	801930c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014976:	4606      	mov	r6, r0
 8014978:	4628      	mov	r0, r5
 801497a:	f004 fcfb 	bl	8019374 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801497e:	6823      	ldr	r3, [r4, #0]
 8014980:	4605      	mov	r5, r0
 8014982:	4631      	mov	r1, r6
 8014984:	4620      	mov	r0, r4
 8014986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014988:	4798      	blx	r3
 801498a:	6823      	ldr	r3, [r4, #0]
 801498c:	4629      	mov	r1, r5
 801498e:	4620      	mov	r0, r4
 8014990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014992:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014996:	4718      	bx	r3

08014998 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8014998:	b510      	push	{r4, lr}
 801499a:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801499e:	4604      	mov	r4, r0
 80149a0:	2bff      	cmp	r3, #255	; 0xff
 80149a2:	d006      	beq.n	80149b2 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 80149a4:	2300      	movs	r3, #0
 80149a6:	8003      	strh	r3, [r0, #0]
 80149a8:	8043      	strh	r3, [r0, #2]
 80149aa:	8083      	strh	r3, [r0, #4]
 80149ac:	80c3      	strh	r3, [r0, #6]
 80149ae:	4620      	mov	r0, r4
 80149b0:	bd10      	pop	{r4, pc}
 80149b2:	3126      	adds	r1, #38	; 0x26
 80149b4:	f004 fd12 	bl	80193dc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80149b8:	e7f9      	b.n	80149ae <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

080149ba <_ZNK8touchgfx5Image17invalidateContentEv>:
 80149ba:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 80149be:	b12a      	cbz	r2, 80149cc <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80149c0:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80149c4:	b112      	cbz	r2, 80149cc <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80149c6:	6803      	ldr	r3, [r0, #0]
 80149c8:	695b      	ldr	r3, [r3, #20]
 80149ca:	4718      	bx	r3
 80149cc:	4770      	bx	lr
	...

080149d0 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 80149d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149d4:	4604      	mov	r4, r0
 80149d6:	b088      	sub	sp, #32
 80149d8:	2500      	movs	r5, #0
 80149da:	460f      	mov	r7, r1
 80149dc:	f854 3b26 	ldr.w	r3, [r4], #38
 80149e0:	a904      	add	r1, sp, #16
 80149e2:	4606      	mov	r6, r0
 80149e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149e6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80149ea:	4798      	blx	r3
 80149ec:	4620      	mov	r0, r4
 80149ee:	f004 fc8d 	bl	801930c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80149f2:	4680      	mov	r8, r0
 80149f4:	4620      	mov	r0, r4
 80149f6:	f004 fcbd 	bl	8019374 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80149fa:	9506      	str	r5, [sp, #24]
 80149fc:	ad06      	add	r5, sp, #24
 80149fe:	f8ad 001e 	strh.w	r0, [sp, #30]
 8014a02:	4639      	mov	r1, r7
 8014a04:	f8ad 801c 	strh.w	r8, [sp, #28]
 8014a08:	4628      	mov	r0, r5
 8014a0a:	f7fe faa1 	bl	8012f50 <_ZN8touchgfx4RectaNERKS0_>
 8014a0e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	dd19      	ble.n	8014a4a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8014a16:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	dd15      	ble.n	8014a4a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8014a1e:	4b0c      	ldr	r3, [pc, #48]	; (8014a50 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8014a26:	b10a      	cbz	r2, 8014a2c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8014a28:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8014a2a:	b900      	cbnz	r0, 8014a2e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8014a2c:	6898      	ldr	r0, [r3, #8]
 8014a2e:	2701      	movs	r7, #1
 8014a30:	6801      	ldr	r1, [r0, #0]
 8014a32:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8014a36:	9702      	str	r7, [sp, #8]
 8014a38:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8014a3c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8014a40:	e9cd 5600 	strd	r5, r6, [sp]
 8014a44:	688d      	ldr	r5, [r1, #8]
 8014a46:	4621      	mov	r1, r4
 8014a48:	47a8      	blx	r5
 8014a4a:	b008      	add	sp, #32
 8014a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a50:	2400b084 	.word	0x2400b084

08014a54 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8014a54:	b510      	push	{r4, lr}
 8014a56:	6803      	ldr	r3, [r0, #0]
 8014a58:	460c      	mov	r4, r1
 8014a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a5c:	4798      	blx	r3
 8014a5e:	1b03      	subs	r3, r0, r4
 8014a60:	4258      	negs	r0, r3
 8014a62:	4158      	adcs	r0, r3
 8014a64:	bd10      	pop	{r4, pc}
	...

08014a68 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8014a68:	4b01      	ldr	r3, [pc, #4]	; (8014a70 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8014a6a:	6019      	str	r1, [r3, #0]
 8014a6c:	4770      	bx	lr
 8014a6e:	bf00      	nop
 8014a70:	2400b08c 	.word	0x2400b08c

08014a74 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8014a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a78:	4696      	mov	lr, r2
 8014a7a:	b097      	sub	sp, #92	; 0x5c
 8014a7c:	4605      	mov	r5, r0
 8014a7e:	4614      	mov	r4, r2
 8014a80:	460e      	mov	r6, r1
 8014a82:	461f      	mov	r7, r3
 8014a84:	f10d 0c1c 	add.w	ip, sp, #28
 8014a88:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8014a8c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8014a90:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8014a94:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014a98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014a9c:	f8de 3000 	ldr.w	r3, [lr]
 8014aa0:	f104 0e14 	add.w	lr, r4, #20
 8014aa4:	f8cc 3000 	str.w	r3, [ip]
 8014aa8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8014aac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014ab0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014ab4:	f8de 3000 	ldr.w	r3, [lr]
 8014ab8:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8014abc:	f8cc 3000 	str.w	r3, [ip]
 8014ac0:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8014ac4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014ac8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014acc:	f8de 3000 	ldr.w	r3, [lr]
 8014ad0:	4631      	mov	r1, r6
 8014ad2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014ad4:	4628      	mov	r0, r5
 8014ad6:	f8cc 3000 	str.w	r3, [ip]
 8014ada:	682b      	ldr	r3, [r5, #0]
 8014adc:	9201      	str	r2, [sp, #4]
 8014ade:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014ae0:	f8cd 8008 	str.w	r8, [sp, #8]
 8014ae4:	9200      	str	r2, [sp, #0]
 8014ae6:	aa07      	add	r2, sp, #28
 8014ae8:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8014aec:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8014af0:	463b      	mov	r3, r7
 8014af2:	47d8      	blx	fp
 8014af4:	46a6      	mov	lr, r4
 8014af6:	f10d 0c1c 	add.w	ip, sp, #28
 8014afa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014afe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014b02:	f8de 3000 	ldr.w	r3, [lr]
 8014b06:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8014b0a:	343c      	adds	r4, #60	; 0x3c
 8014b0c:	f8cc 3000 	str.w	r3, [ip]
 8014b10:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8014b14:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014b18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014b1c:	f8de 3000 	ldr.w	r3, [lr]
 8014b20:	f8cc 3000 	str.w	r3, [ip]
 8014b24:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8014b28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014b2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014b2e:	6823      	ldr	r3, [r4, #0]
 8014b30:	4631      	mov	r1, r6
 8014b32:	4628      	mov	r0, r5
 8014b34:	f8cc 3000 	str.w	r3, [ip]
 8014b38:	682b      	ldr	r3, [r5, #0]
 8014b3a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8014b3e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014b40:	f8cd 8008 	str.w	r8, [sp, #8]
 8014b44:	9201      	str	r2, [sp, #4]
 8014b46:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014b48:	9200      	str	r2, [sp, #0]
 8014b4a:	aa07      	add	r2, sp, #28
 8014b4c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8014b4e:	463b      	mov	r3, r7
 8014b50:	47a0      	blx	r4
 8014b52:	b017      	add	sp, #92	; 0x5c
 8014b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014b58 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8014b58:	2000      	movs	r0, #0
 8014b5a:	4770      	bx	lr

08014b5c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8014b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b60:	b08d      	sub	sp, #52	; 0x34
 8014b62:	4688      	mov	r8, r1
 8014b64:	f8d3 c000 	ldr.w	ip, [r3]
 8014b68:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014b6a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8014b6e:	680f      	ldr	r7, [r1, #0]
 8014b70:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8014b74:	eba7 070c 	sub.w	r7, r7, ip
 8014b78:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8014b7c:	edd3 6a07 	vldr	s13, [r3, #28]
 8014b80:	42bc      	cmp	r4, r7
 8014b82:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014b84:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8014b88:	bfa8      	it	ge
 8014b8a:	463c      	movge	r4, r7
 8014b8c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8014b90:	f9ba 1000 	ldrsh.w	r1, [sl]
 8014b94:	ee07 4a90 	vmov	s15, r4
 8014b98:	eb09 0e0c 	add.w	lr, r9, ip
 8014b9c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8014ba0:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8014ba4:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8014ba8:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8014bac:	4571      	cmp	r1, lr
 8014bae:	ee25 4a04 	vmul.f32	s8, s10, s8
 8014bb2:	ee65 4a24 	vmul.f32	s9, s10, s9
 8014bb6:	ee25 5a27 	vmul.f32	s10, s10, s15
 8014bba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014bbe:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8014bc2:	ee32 1a05 	vadd.f32	s2, s4, s10
 8014bc6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014bca:	ee36 0a84 	vadd.f32	s0, s13, s8
 8014bce:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014bd2:	ee22 2a07 	vmul.f32	s4, s4, s14
 8014bd6:	f340 808c 	ble.w	8014cf2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8014bda:	eba1 060e 	sub.w	r6, r1, lr
 8014bde:	fb96 f5f4 	sdiv	r5, r6, r4
 8014be2:	ee07 5a10 	vmov	s14, r5
 8014be6:	2d00      	cmp	r5, #0
 8014be8:	fb04 6615 	mls	r6, r4, r5, r6
 8014bec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014bf0:	eea7 0a04 	vfma.f32	s0, s14, s8
 8014bf4:	eee7 0a24 	vfma.f32	s1, s14, s9
 8014bf8:	eea7 1a05 	vfma.f32	s2, s14, s10
 8014bfc:	dd12      	ble.n	8014c24 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8014bfe:	ee70 6a44 	vsub.f32	s13, s0, s8
 8014c02:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8014c06:	ee31 2a45 	vsub.f32	s4, s2, s10
 8014c0a:	eef5 6a40 	vcmp.f32	s13, #0.0
 8014c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c12:	bf14      	ite	ne
 8014c14:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8014c18:	eeb0 7a67 	vmoveq.f32	s14, s15
 8014c1c:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014c20:	ee22 2a07 	vmul.f32	s4, s4, s14
 8014c24:	fb05 f204 	mul.w	r2, r5, r4
 8014c28:	1abf      	subs	r7, r7, r2
 8014c2a:	4494      	add	ip, r2
 8014c2c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8014c30:	4411      	add	r1, r2
 8014c32:	eb09 020c 	add.w	r2, r9, ip
 8014c36:	b209      	sxth	r1, r1
 8014c38:	443a      	add	r2, r7
 8014c3a:	428a      	cmp	r2, r1
 8014c3c:	bfc4      	itt	gt
 8014c3e:	eba1 0209 	subgt.w	r2, r1, r9
 8014c42:	eba2 070c 	subgt.w	r7, r2, ip
 8014c46:	2f00      	cmp	r7, #0
 8014c48:	dd50      	ble.n	8014cec <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8014c4a:	fb97 f1f4 	sdiv	r1, r7, r4
 8014c4e:	fb04 7211 	mls	r2, r4, r1, r7
 8014c52:	b90a      	cbnz	r2, 8014c58 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8014c54:	3901      	subs	r1, #1
 8014c56:	4622      	mov	r2, r4
 8014c58:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8014c5c:	6840      	ldr	r0, [r0, #4]
 8014c5e:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8014c62:	44b6      	add	lr, r6
 8014c64:	f8d0 a000 	ldr.w	sl, [r0]
 8014c68:	2900      	cmp	r1, #0
 8014c6a:	bfcc      	ite	gt
 8014c6c:	46a1      	movgt	r9, r4
 8014c6e:	4691      	movle	r9, r2
 8014c70:	900b      	str	r0, [sp, #44]	; 0x2c
 8014c72:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8014c74:	fb04 e505 	mla	r5, r4, r5, lr
 8014c78:	eef0 6a42 	vmov.f32	s13, s4
 8014c7c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8014c80:	9008      	str	r0, [sp, #32]
 8014c82:	eeb0 7a61 	vmov.f32	s14, s3
 8014c86:	9818      	ldr	r0, [sp, #96]	; 0x60
 8014c88:	695b      	ldr	r3, [r3, #20]
 8014c8a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014c8e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8014c92:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8014c96:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014c98:	445b      	add	r3, fp
 8014c9a:	9307      	str	r3, [sp, #28]
 8014c9c:	ee16 3a90 	vmov	r3, s13
 8014ca0:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8014ca4:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8014ca8:	ee21 3a23 	vmul.f32	s6, s2, s7
 8014cac:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8014cb0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014cb4:	ee17 7a90 	vmov	r7, s15
 8014cb8:	ee73 7a42 	vsub.f32	s15, s6, s4
 8014cbc:	fb97 f7f4 	sdiv	r7, r7, r4
 8014cc0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014cc4:	ee17 ca90 	vmov	ip, s15
 8014cc8:	fb9c fcf4 	sdiv	ip, ip, r4
 8014ccc:	fb0c 3306 	mla	r3, ip, r6, r3
 8014cd0:	9302      	str	r3, [sp, #8]
 8014cd2:	ee17 3a10 	vmov	r3, s14
 8014cd6:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8014cda:	fb07 3706 	mla	r7, r7, r6, r3
 8014cde:	eba9 0306 	sub.w	r3, r9, r6
 8014ce2:	e9cd 4700 	strd	r4, r7, [sp]
 8014ce6:	f8da 4008 	ldr.w	r4, [sl, #8]
 8014cea:	47a0      	blx	r4
 8014cec:	b00d      	add	sp, #52	; 0x34
 8014cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cf2:	2500      	movs	r5, #0
 8014cf4:	462e      	mov	r6, r5
 8014cf6:	e799      	b.n	8014c2c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08014cf8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8014cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cfc:	b0db      	sub	sp, #364	; 0x16c
 8014cfe:	461d      	mov	r5, r3
 8014d00:	4614      	mov	r4, r2
 8014d02:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8014d06:	910f      	str	r1, [sp, #60]	; 0x3c
 8014d08:	4629      	mov	r1, r5
 8014d0a:	930a      	str	r3, [sp, #40]	; 0x28
 8014d0c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8014d10:	9009      	str	r0, [sp, #36]	; 0x24
 8014d12:	930b      	str	r3, [sp, #44]	; 0x2c
 8014d14:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8014d18:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8014d1c:	9310      	str	r3, [sp, #64]	; 0x40
 8014d1e:	6803      	ldr	r3, [r0, #0]
 8014d20:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8014d22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014d26:	47b8      	blx	r7
 8014d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d2a:	6058      	str	r0, [r3, #4]
 8014d2c:	2800      	cmp	r0, #0
 8014d2e:	f000 83a1 	beq.w	8015474 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014d32:	682b      	ldr	r3, [r5, #0]
 8014d34:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8014d38:	ed94 7a02 	vldr	s14, [r4, #8]
 8014d3c:	9314      	str	r3, [sp, #80]	; 0x50
 8014d3e:	686b      	ldr	r3, [r5, #4]
 8014d40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014d44:	9315      	str	r3, [sp, #84]	; 0x54
 8014d46:	4bc1      	ldr	r3, [pc, #772]	; (801504c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8014d48:	7819      	ldrb	r1, [r3, #0]
 8014d4a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8014d4e:	2900      	cmp	r1, #0
 8014d50:	bf16      	itet	ne
 8014d52:	4619      	movne	r1, r3
 8014d54:	4611      	moveq	r1, r2
 8014d56:	4613      	movne	r3, r2
 8014d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d5c:	9116      	str	r1, [sp, #88]	; 0x58
 8014d5e:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8014d62:	f240 8387 	bls.w	8015474 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014d66:	ed94 7a07 	vldr	s14, [r4, #28]
 8014d6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d72:	f240 837f 	bls.w	8015474 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014d76:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8014d7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d82:	f240 8377 	bls.w	8015474 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014d86:	6822      	ldr	r2, [r4, #0]
 8014d88:	4bb1      	ldr	r3, [pc, #708]	; (8015050 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8014d8a:	429a      	cmp	r2, r3
 8014d8c:	f2c0 8372 	blt.w	8015474 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014d90:	49b0      	ldr	r1, [pc, #704]	; (8015054 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8014d92:	6963      	ldr	r3, [r4, #20]
 8014d94:	428a      	cmp	r2, r1
 8014d96:	f300 836d 	bgt.w	8015474 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014d9a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8014d9e:	48ae      	ldr	r0, [pc, #696]	; (8015058 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8014da0:	33ff      	adds	r3, #255	; 0xff
 8014da2:	4283      	cmp	r3, r0
 8014da4:	f200 8366 	bhi.w	8015474 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014da8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014daa:	4dac      	ldr	r5, [pc, #688]	; (801505c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8014dac:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8014db0:	33ff      	adds	r3, #255	; 0xff
 8014db2:	42ab      	cmp	r3, r5
 8014db4:	f200 835e 	bhi.w	8015474 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014db8:	6862      	ldr	r2, [r4, #4]
 8014dba:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8014dbe:	33ff      	adds	r3, #255	; 0xff
 8014dc0:	4283      	cmp	r3, r0
 8014dc2:	f200 8357 	bhi.w	8015474 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014dc6:	69a1      	ldr	r1, [r4, #24]
 8014dc8:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8014dcc:	33ff      	adds	r3, #255	; 0xff
 8014dce:	4283      	cmp	r3, r0
 8014dd0:	f200 8350 	bhi.w	8015474 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014dd4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014dd6:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8014dda:	30ff      	adds	r0, #255	; 0xff
 8014ddc:	42a8      	cmp	r0, r5
 8014dde:	f200 8349 	bhi.w	8015474 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014de2:	428a      	cmp	r2, r1
 8014de4:	f280 8110 	bge.w	8015008 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8014de8:	429a      	cmp	r2, r3
 8014dea:	f300 8119 	bgt.w	8015020 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8014dee:	4299      	cmp	r1, r3
 8014df0:	f280 811d 	bge.w	801502e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8014df4:	2502      	movs	r5, #2
 8014df6:	2701      	movs	r7, #1
 8014df8:	46a9      	mov	r9, r5
 8014dfa:	46b8      	mov	r8, r7
 8014dfc:	f04f 0a00 	mov.w	sl, #0
 8014e00:	4621      	mov	r1, r4
 8014e02:	a849      	add	r0, sp, #292	; 0x124
 8014e04:	f003 fc3a 	bl	801867c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8014e08:	4622      	mov	r2, r4
 8014e0a:	4653      	mov	r3, sl
 8014e0c:	a949      	add	r1, sp, #292	; 0x124
 8014e0e:	f8cd 9000 	str.w	r9, [sp]
 8014e12:	a819      	add	r0, sp, #100	; 0x64
 8014e14:	f003 fd62 	bl	80188dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014e18:	4622      	mov	r2, r4
 8014e1a:	4653      	mov	r3, sl
 8014e1c:	a949      	add	r1, sp, #292	; 0x124
 8014e1e:	f8cd 8000 	str.w	r8, [sp]
 8014e22:	a829      	add	r0, sp, #164	; 0xa4
 8014e24:	f003 fd5a 	bl	80188dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014e28:	4643      	mov	r3, r8
 8014e2a:	4622      	mov	r2, r4
 8014e2c:	a949      	add	r1, sp, #292	; 0x124
 8014e2e:	f8cd 9000 	str.w	r9, [sp]
 8014e32:	a839      	add	r0, sp, #228	; 0xe4
 8014e34:	f003 fd52 	bl	80188dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014e38:	42af      	cmp	r7, r5
 8014e3a:	af12      	add	r7, sp, #72	; 0x48
 8014e3c:	bfb7      	itett	lt
 8014e3e:	2300      	movlt	r3, #0
 8014e40:	2301      	movge	r3, #1
 8014e42:	ad29      	addlt	r5, sp, #164	; 0xa4
 8014e44:	ac19      	addlt	r4, sp, #100	; 0x64
 8014e46:	bfb1      	iteee	lt
 8014e48:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014e4a:	ad19      	addge	r5, sp, #100	; 0x64
 8014e4c:	930e      	strge	r3, [sp, #56]	; 0x38
 8014e4e:	ac29      	addge	r4, sp, #164	; 0xa4
 8014e50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014e52:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014e56:	e887 0003 	stmia.w	r7, {r0, r1}
 8014e5a:	b928      	cbnz	r0, 8014e68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8014e5c:	4b80      	ldr	r3, [pc, #512]	; (8015060 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8014e5e:	6818      	ldr	r0, [r3, #0]
 8014e60:	6803      	ldr	r3, [r0, #0]
 8014e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e64:	4798      	blx	r3
 8014e66:	6038      	str	r0, [r7, #0]
 8014e68:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014e6a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8014e6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014e72:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8014e74:	930c      	str	r3, [sp, #48]	; 0x30
 8014e76:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014e78:	6963      	ldr	r3, [r4, #20]
 8014e7a:	440b      	add	r3, r1
 8014e7c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8014e80:	4408      	add	r0, r1
 8014e82:	b200      	sxth	r0, r0
 8014e84:	4283      	cmp	r3, r0
 8014e86:	900d      	str	r0, [sp, #52]	; 0x34
 8014e88:	f280 80dd 	bge.w	8015046 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8014e8c:	428b      	cmp	r3, r1
 8014e8e:	da08      	bge.n	8014ea2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014e90:	2a00      	cmp	r2, #0
 8014e92:	dd06      	ble.n	8014ea2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014e94:	1acb      	subs	r3, r1, r3
 8014e96:	429a      	cmp	r2, r3
 8014e98:	f2c0 80e4 	blt.w	8015064 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	f300 80e2 	bgt.w	8015066 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8014ea2:	6967      	ldr	r7, [r4, #20]
 8014ea4:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8014ea8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014eaa:	443b      	add	r3, r7
 8014eac:	461f      	mov	r7, r3
 8014eae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014eb0:	1bdf      	subs	r7, r3, r7
 8014eb2:	4297      	cmp	r7, r2
 8014eb4:	bfa8      	it	ge
 8014eb6:	4617      	movge	r7, r2
 8014eb8:	2f00      	cmp	r7, #0
 8014eba:	f340 8166 	ble.w	801518a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8014ebe:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014ec0:	6829      	ldr	r1, [r5, #0]
 8014ec2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014ec6:	f9bb 3000 	ldrsh.w	r3, [fp]
 8014eca:	4411      	add	r1, r2
 8014ecc:	6820      	ldr	r0, [r4, #0]
 8014ece:	4299      	cmp	r1, r3
 8014ed0:	dd1a      	ble.n	8014f08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8014ed2:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8014ed6:	4402      	add	r2, r0
 8014ed8:	440b      	add	r3, r1
 8014eda:	b21b      	sxth	r3, r3
 8014edc:	429a      	cmp	r2, r3
 8014ede:	dc13      	bgt.n	8014f08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8014ee0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014ee2:	a912      	add	r1, sp, #72	; 0x48
 8014ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ee6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	9206      	str	r2, [sp, #24]
 8014eec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014eee:	9500      	str	r5, [sp, #0]
 8014ef0:	9205      	str	r2, [sp, #20]
 8014ef2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014ef4:	e9cd b203 	strd	fp, r2, [sp, #12]
 8014ef8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8014efa:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8014efe:	aa49      	add	r2, sp, #292	; 0x124
 8014f00:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8014f04:	4623      	mov	r3, r4
 8014f06:	47c8      	blx	r9
 8014f08:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8014f0c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8014f10:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8014f14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014f18:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8014f1c:	68a1      	ldr	r1, [r4, #8]
 8014f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014f22:	ed94 6a08 	vldr	s12, [r4, #32]
 8014f26:	edd4 6a07 	vldr	s13, [r4, #28]
 8014f2a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8014f2e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014f32:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014f36:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014f3a:	edc4 6a07 	vstr	s13, [r4, #28]
 8014f3e:	441a      	add	r2, r3
 8014f40:	6963      	ldr	r3, [r4, #20]
 8014f42:	3301      	adds	r3, #1
 8014f44:	6022      	str	r2, [r4, #0]
 8014f46:	6163      	str	r3, [r4, #20]
 8014f48:	69a3      	ldr	r3, [r4, #24]
 8014f4a:	3b01      	subs	r3, #1
 8014f4c:	61a3      	str	r3, [r4, #24]
 8014f4e:	6923      	ldr	r3, [r4, #16]
 8014f50:	440b      	add	r3, r1
 8014f52:	68e1      	ldr	r1, [r4, #12]
 8014f54:	428b      	cmp	r3, r1
 8014f56:	6123      	str	r3, [r4, #16]
 8014f58:	db15      	blt.n	8014f86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8014f5a:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8014f5e:	3201      	adds	r2, #1
 8014f60:	1a5b      	subs	r3, r3, r1
 8014f62:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014f66:	6022      	str	r2, [r4, #0]
 8014f68:	6123      	str	r3, [r4, #16]
 8014f6a:	edc4 6a07 	vstr	s13, [r4, #28]
 8014f6e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8014f72:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014f76:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8014f7a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8014f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014f82:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014f86:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8014f8a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8014f8e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8014f92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014f96:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8014f9a:	68a9      	ldr	r1, [r5, #8]
 8014f9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014fa0:	ed95 6a08 	vldr	s12, [r5, #32]
 8014fa4:	edd5 6a07 	vldr	s13, [r5, #28]
 8014fa8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8014fac:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014fb0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8014fb4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014fb8:	edc5 6a07 	vstr	s13, [r5, #28]
 8014fbc:	441a      	add	r2, r3
 8014fbe:	696b      	ldr	r3, [r5, #20]
 8014fc0:	3301      	adds	r3, #1
 8014fc2:	602a      	str	r2, [r5, #0]
 8014fc4:	616b      	str	r3, [r5, #20]
 8014fc6:	69ab      	ldr	r3, [r5, #24]
 8014fc8:	3b01      	subs	r3, #1
 8014fca:	61ab      	str	r3, [r5, #24]
 8014fcc:	692b      	ldr	r3, [r5, #16]
 8014fce:	440b      	add	r3, r1
 8014fd0:	68e9      	ldr	r1, [r5, #12]
 8014fd2:	428b      	cmp	r3, r1
 8014fd4:	612b      	str	r3, [r5, #16]
 8014fd6:	db15      	blt.n	8015004 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8014fd8:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8014fdc:	3201      	adds	r2, #1
 8014fde:	1a5b      	subs	r3, r3, r1
 8014fe0:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014fe4:	602a      	str	r2, [r5, #0]
 8014fe6:	612b      	str	r3, [r5, #16]
 8014fe8:	edc5 6a07 	vstr	s13, [r5, #28]
 8014fec:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8014ff0:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014ff4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8014ff8:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8014ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015000:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8015004:	3f01      	subs	r7, #1
 8015006:	e757      	b.n	8014eb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8015008:	4299      	cmp	r1, r3
 801500a:	dc13      	bgt.n	8015034 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801500c:	429a      	cmp	r2, r3
 801500e:	da14      	bge.n	801503a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8015010:	2502      	movs	r5, #2
 8015012:	2703      	movs	r7, #3
 8015014:	f04f 0800 	mov.w	r8, #0
 8015018:	46a9      	mov	r9, r5
 801501a:	f04f 0a01 	mov.w	sl, #1
 801501e:	e6ef      	b.n	8014e00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8015020:	2501      	movs	r5, #1
 8015022:	2700      	movs	r7, #0
 8015024:	46a9      	mov	r9, r5
 8015026:	46b8      	mov	r8, r7
 8015028:	f04f 0a02 	mov.w	sl, #2
 801502c:	e6e8      	b.n	8014e00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801502e:	2501      	movs	r5, #1
 8015030:	2702      	movs	r7, #2
 8015032:	e6e1      	b.n	8014df8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8015034:	2500      	movs	r5, #0
 8015036:	2701      	movs	r7, #1
 8015038:	e7f4      	b.n	8015024 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801503a:	2702      	movs	r7, #2
 801503c:	2503      	movs	r5, #3
 801503e:	f04f 0900 	mov.w	r9, #0
 8015042:	46b8      	mov	r8, r7
 8015044:	e7e9      	b.n	801501a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8015046:	4613      	mov	r3, r2
 8015048:	e728      	b.n	8014e9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801504a:	bf00      	nop
 801504c:	2400b07c 	.word	0x2400b07c
 8015050:	fffd8f01 	.word	0xfffd8f01
 8015054:	00027100 	.word	0x00027100
 8015058:	0004e1ff 	.word	0x0004e1ff
 801505c:	0004e1fe 	.word	0x0004e1fe
 8015060:	2400b084 	.word	0x2400b084
 8015064:	4613      	mov	r3, r2
 8015066:	992b      	ldr	r1, [sp, #172]	; 0xac
 8015068:	469e      	mov	lr, r3
 801506a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801506c:	469c      	mov	ip, r3
 801506e:	9111      	str	r1, [sp, #68]	; 0x44
 8015070:	f04f 0900 	mov.w	r9, #0
 8015074:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8015078:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801507c:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8015080:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8015084:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8015088:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801508c:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8015090:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8015094:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8015098:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801509c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 80150a0:	f1bc 0f00 	cmp.w	ip, #0
 80150a4:	d147      	bne.n	8015136 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 80150a6:	eb03 0c07 	add.w	ip, r3, r7
 80150aa:	1ad7      	subs	r7, r2, r3
 80150ac:	f1b9 0f00 	cmp.w	r9, #0
 80150b0:	d009      	beq.n	80150c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 80150b2:	9029      	str	r0, [sp, #164]	; 0xa4
 80150b4:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 80150b8:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 80150bc:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 80150c0:	912d      	str	r1, [sp, #180]	; 0xb4
 80150c2:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 80150c6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80150c8:	f04f 0800 	mov.w	r8, #0
 80150cc:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80150d0:	9111      	str	r1, [sp, #68]	; 0x44
 80150d2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80150d6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80150da:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80150de:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80150e2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80150e6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80150ea:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80150ee:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80150f2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80150f6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80150fa:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80150fe:	f1be 0f00 	cmp.w	lr, #0
 8015102:	d031      	beq.n	8015168 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8015104:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015106:	4450      	add	r0, sl
 8015108:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801510c:	4431      	add	r1, r6
 801510e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8015112:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8015116:	4549      	cmp	r1, r9
 8015118:	db08      	blt.n	801512c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801511a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801511e:	3001      	adds	r0, #1
 8015120:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015124:	eba1 0109 	sub.w	r1, r1, r9
 8015128:	ee37 7a06 	vadd.f32	s14, s14, s12
 801512c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015130:	f04f 0801 	mov.w	r8, #1
 8015134:	e7e3      	b.n	80150fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8015136:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015138:	4450      	add	r0, sl
 801513a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801513e:	4431      	add	r1, r6
 8015140:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015144:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015148:	4541      	cmp	r1, r8
 801514a:	db08      	blt.n	801515e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801514c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8015150:	3001      	adds	r0, #1
 8015152:	ee37 7a25 	vadd.f32	s14, s14, s11
 8015156:	eba1 0108 	sub.w	r1, r1, r8
 801515a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801515e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015162:	f04f 0901 	mov.w	r9, #1
 8015166:	e79b      	b.n	80150a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8015168:	449c      	add	ip, r3
 801516a:	1aff      	subs	r7, r7, r3
 801516c:	f1b8 0f00 	cmp.w	r8, #0
 8015170:	d009      	beq.n	8015186 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8015172:	9019      	str	r0, [sp, #100]	; 0x64
 8015174:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8015178:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801517c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8015180:	911d      	str	r1, [sp, #116]	; 0x74
 8015182:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8015186:	1ad2      	subs	r2, r2, r3
 8015188:	e68b      	b.n	8014ea2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801518a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801518c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801518e:	2b00      	cmp	r3, #0
 8015190:	f000 80d1 	beq.w	8015336 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8015194:	ad19      	add	r5, sp, #100	; 0x64
 8015196:	ac39      	add	r4, sp, #228	; 0xe4
 8015198:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801519a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801519e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80151a2:	930c      	str	r3, [sp, #48]	; 0x30
 80151a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80151a6:	6963      	ldr	r3, [r4, #20]
 80151a8:	440b      	add	r3, r1
 80151aa:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80151ae:	4408      	add	r0, r1
 80151b0:	b200      	sxth	r0, r0
 80151b2:	4283      	cmp	r3, r0
 80151b4:	900d      	str	r0, [sp, #52]	; 0x34
 80151b6:	f280 80c1 	bge.w	801533c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80151ba:	428b      	cmp	r3, r1
 80151bc:	da08      	bge.n	80151d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80151be:	2a00      	cmp	r2, #0
 80151c0:	dd06      	ble.n	80151d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80151c2:	1acb      	subs	r3, r1, r3
 80151c4:	429a      	cmp	r2, r3
 80151c6:	f2c0 80bb 	blt.w	8015340 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	f300 80b9 	bgt.w	8015342 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80151d0:	6967      	ldr	r7, [r4, #20]
 80151d2:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80151d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80151d8:	443b      	add	r3, r7
 80151da:	461f      	mov	r7, r3
 80151dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80151de:	1bdf      	subs	r7, r3, r7
 80151e0:	4297      	cmp	r7, r2
 80151e2:	bfa8      	it	ge
 80151e4:	4617      	movge	r7, r2
 80151e6:	2f00      	cmp	r7, #0
 80151e8:	f340 813c 	ble.w	8015464 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 80151ec:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80151ee:	6829      	ldr	r1, [r5, #0]
 80151f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80151f4:	f9bb 3000 	ldrsh.w	r3, [fp]
 80151f8:	4411      	add	r1, r2
 80151fa:	6820      	ldr	r0, [r4, #0]
 80151fc:	4299      	cmp	r1, r3
 80151fe:	dd1a      	ble.n	8015236 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8015200:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8015204:	4402      	add	r2, r0
 8015206:	440b      	add	r3, r1
 8015208:	b21b      	sxth	r3, r3
 801520a:	429a      	cmp	r2, r3
 801520c:	dc13      	bgt.n	8015236 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801520e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015210:	a912      	add	r1, sp, #72	; 0x48
 8015212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015214:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	9206      	str	r2, [sp, #24]
 801521a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801521c:	9500      	str	r5, [sp, #0]
 801521e:	9205      	str	r2, [sp, #20]
 8015220:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015222:	e9cd b203 	strd	fp, r2, [sp, #12]
 8015226:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8015228:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801522c:	aa49      	add	r2, sp, #292	; 0x124
 801522e:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8015232:	4623      	mov	r3, r4
 8015234:	47c8      	blx	r9
 8015236:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801523a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801523e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8015242:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015246:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801524a:	68a1      	ldr	r1, [r4, #8]
 801524c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015250:	ed94 6a08 	vldr	s12, [r4, #32]
 8015254:	edd4 6a07 	vldr	s13, [r4, #28]
 8015258:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801525c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015260:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8015264:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015268:	edc4 6a07 	vstr	s13, [r4, #28]
 801526c:	441a      	add	r2, r3
 801526e:	6963      	ldr	r3, [r4, #20]
 8015270:	3301      	adds	r3, #1
 8015272:	6022      	str	r2, [r4, #0]
 8015274:	6163      	str	r3, [r4, #20]
 8015276:	69a3      	ldr	r3, [r4, #24]
 8015278:	3b01      	subs	r3, #1
 801527a:	61a3      	str	r3, [r4, #24]
 801527c:	6923      	ldr	r3, [r4, #16]
 801527e:	440b      	add	r3, r1
 8015280:	68e1      	ldr	r1, [r4, #12]
 8015282:	428b      	cmp	r3, r1
 8015284:	6123      	str	r3, [r4, #16]
 8015286:	db15      	blt.n	80152b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8015288:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801528c:	3201      	adds	r2, #1
 801528e:	1a5b      	subs	r3, r3, r1
 8015290:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015294:	6022      	str	r2, [r4, #0]
 8015296:	6123      	str	r3, [r4, #16]
 8015298:	edc4 6a07 	vstr	s13, [r4, #28]
 801529c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80152a0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80152a4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80152a8:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80152ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80152b0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80152b4:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80152b8:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80152bc:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80152c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80152c4:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80152c8:	68a9      	ldr	r1, [r5, #8]
 80152ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80152ce:	ed95 6a08 	vldr	s12, [r5, #32]
 80152d2:	edd5 6a07 	vldr	s13, [r5, #28]
 80152d6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80152da:	ee76 6a86 	vadd.f32	s13, s13, s12
 80152de:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80152e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80152e6:	edc5 6a07 	vstr	s13, [r5, #28]
 80152ea:	441a      	add	r2, r3
 80152ec:	696b      	ldr	r3, [r5, #20]
 80152ee:	3301      	adds	r3, #1
 80152f0:	602a      	str	r2, [r5, #0]
 80152f2:	616b      	str	r3, [r5, #20]
 80152f4:	69ab      	ldr	r3, [r5, #24]
 80152f6:	3b01      	subs	r3, #1
 80152f8:	61ab      	str	r3, [r5, #24]
 80152fa:	692b      	ldr	r3, [r5, #16]
 80152fc:	440b      	add	r3, r1
 80152fe:	68e9      	ldr	r1, [r5, #12]
 8015300:	428b      	cmp	r3, r1
 8015302:	612b      	str	r3, [r5, #16]
 8015304:	db15      	blt.n	8015332 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8015306:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801530a:	3201      	adds	r2, #1
 801530c:	1a5b      	subs	r3, r3, r1
 801530e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015312:	602a      	str	r2, [r5, #0]
 8015314:	612b      	str	r3, [r5, #16]
 8015316:	edc5 6a07 	vstr	s13, [r5, #28]
 801531a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801531e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015322:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8015326:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801532a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801532e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8015332:	3f01      	subs	r7, #1
 8015334:	e757      	b.n	80151e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8015336:	ad39      	add	r5, sp, #228	; 0xe4
 8015338:	ac19      	add	r4, sp, #100	; 0x64
 801533a:	e72d      	b.n	8015198 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801533c:	4613      	mov	r3, r2
 801533e:	e744      	b.n	80151ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8015340:	4613      	mov	r3, r2
 8015342:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8015344:	469e      	mov	lr, r3
 8015346:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801534a:	461f      	mov	r7, r3
 801534c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8015350:	f04f 0900 	mov.w	r9, #0
 8015354:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8015358:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801535c:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8015360:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8015364:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8015368:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801536a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801536e:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8015372:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8015376:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801537a:	960e      	str	r6, [sp, #56]	; 0x38
 801537c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8015380:	2f00      	cmp	r7, #0
 8015382:	d146      	bne.n	8015412 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8015384:	449c      	add	ip, r3
 8015386:	1ad7      	subs	r7, r2, r3
 8015388:	f1b9 0f00 	cmp.w	r9, #0
 801538c:	d009      	beq.n	80153a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801538e:	9039      	str	r0, [sp, #228]	; 0xe4
 8015390:	913d      	str	r1, [sp, #244]	; 0xf4
 8015392:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8015396:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801539a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801539e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 80153a2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80153a4:	f04f 0800 	mov.w	r8, #0
 80153a8:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80153ac:	910e      	str	r1, [sp, #56]	; 0x38
 80153ae:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80153b2:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80153b6:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80153ba:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80153be:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80153c2:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80153c6:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80153ca:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80153ce:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80153d2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80153d6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80153da:	f1be 0f00 	cmp.w	lr, #0
 80153de:	d030      	beq.n	8015442 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 80153e0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80153e2:	4450      	add	r0, sl
 80153e4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80153e8:	4431      	add	r1, r6
 80153ea:	ee37 7a04 	vadd.f32	s14, s14, s8
 80153ee:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80153f2:	4549      	cmp	r1, r9
 80153f4:	db08      	blt.n	8015408 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 80153f6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80153fa:	3001      	adds	r0, #1
 80153fc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015400:	eba1 0109 	sub.w	r1, r1, r9
 8015404:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015408:	f10e 3eff 	add.w	lr, lr, #4294967295
 801540c:	f04f 0801 	mov.w	r8, #1
 8015410:	e7e3      	b.n	80153da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8015412:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015414:	4450      	add	r0, sl
 8015416:	ee37 7a24 	vadd.f32	s14, s14, s9
 801541a:	4431      	add	r1, r6
 801541c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015420:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015424:	4541      	cmp	r1, r8
 8015426:	db08      	blt.n	801543a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8015428:	ee76 6a85 	vadd.f32	s13, s13, s10
 801542c:	3001      	adds	r0, #1
 801542e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8015432:	eba1 0108 	sub.w	r1, r1, r8
 8015436:	ee77 7a86 	vadd.f32	s15, s15, s12
 801543a:	3f01      	subs	r7, #1
 801543c:	f04f 0901 	mov.w	r9, #1
 8015440:	e79e      	b.n	8015380 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8015442:	449c      	add	ip, r3
 8015444:	1aff      	subs	r7, r7, r3
 8015446:	f1b8 0f00 	cmp.w	r8, #0
 801544a:	d009      	beq.n	8015460 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801544c:	9019      	str	r0, [sp, #100]	; 0x64
 801544e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8015452:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8015456:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801545a:	911d      	str	r1, [sp, #116]	; 0x74
 801545c:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8015460:	1ad2      	subs	r2, r2, r3
 8015462:	e6b5      	b.n	80151d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015464:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	b923      	cbnz	r3, 8015474 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801546a:	4b04      	ldr	r3, [pc, #16]	; (801547c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801546c:	6818      	ldr	r0, [r3, #0]
 801546e:	6803      	ldr	r3, [r0, #0]
 8015470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015472:	4798      	blx	r3
 8015474:	b05b      	add	sp, #364	; 0x16c
 8015476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801547a:	bf00      	nop
 801547c:	2400b084 	.word	0x2400b084

08015480 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8015480:	b570      	push	{r4, r5, r6, lr}
 8015482:	4604      	mov	r4, r0
 8015484:	2500      	movs	r5, #0
 8015486:	9804      	ldr	r0, [sp, #16]
 8015488:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801548c:	8025      	strh	r5, [r4, #0]
 801548e:	6061      	str	r1, [r4, #4]
 8015490:	7223      	strb	r3, [r4, #8]
 8015492:	7266      	strb	r6, [r4, #9]
 8015494:	60e0      	str	r0, [r4, #12]
 8015496:	8222      	strh	r2, [r4, #16]
 8015498:	8265      	strh	r5, [r4, #18]
 801549a:	82a5      	strh	r5, [r4, #20]
 801549c:	82e5      	strh	r5, [r4, #22]
 801549e:	8325      	strh	r5, [r4, #24]
 80154a0:	8365      	strh	r5, [r4, #26]
 80154a2:	83a5      	strh	r5, [r4, #28]
 80154a4:	77a5      	strb	r5, [r4, #30]
 80154a6:	b32e      	cbz	r6, 80154f4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 80154a8:	6803      	ldr	r3, [r0, #0]
 80154aa:	695b      	ldr	r3, [r3, #20]
 80154ac:	4798      	blx	r3
 80154ae:	4606      	mov	r6, r0
 80154b0:	b300      	cbz	r0, 80154f4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 80154b2:	68e0      	ldr	r0, [r4, #12]
 80154b4:	4631      	mov	r1, r6
 80154b6:	6803      	ldr	r3, [r0, #0]
 80154b8:	68db      	ldr	r3, [r3, #12]
 80154ba:	4798      	blx	r3
 80154bc:	4605      	mov	r5, r0
 80154be:	b1c8      	cbz	r0, 80154f4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 80154c0:	7b43      	ldrb	r3, [r0, #13]
 80154c2:	7a82      	ldrb	r2, [r0, #10]
 80154c4:	005b      	lsls	r3, r3, #1
 80154c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80154ca:	4313      	orrs	r3, r2
 80154cc:	83a3      	strh	r3, [r4, #28]
 80154ce:	7a63      	ldrb	r3, [r4, #9]
 80154d0:	2b04      	cmp	r3, #4
 80154d2:	d10f      	bne.n	80154f4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 80154d4:	68e0      	ldr	r0, [r4, #12]
 80154d6:	462a      	mov	r2, r5
 80154d8:	4631      	mov	r1, r6
 80154da:	6803      	ldr	r3, [r0, #0]
 80154dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80154de:	4798      	blx	r3
 80154e0:	7b6b      	ldrb	r3, [r5, #13]
 80154e2:	005b      	lsls	r3, r3, #1
 80154e4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80154e8:	7aab      	ldrb	r3, [r5, #10]
 80154ea:	4313      	orrs	r3, r2
 80154ec:	4418      	add	r0, r3
 80154ee:	8ba3      	ldrh	r3, [r4, #28]
 80154f0:	4418      	add	r0, r3
 80154f2:	83a0      	strh	r0, [r4, #28]
 80154f4:	4620      	mov	r0, r4
 80154f6:	bd70      	pop	{r4, r5, r6, pc}

080154f8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 80154f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154fc:	2400      	movs	r4, #0
 80154fe:	b085      	sub	sp, #20
 8015500:	4681      	mov	r9, r0
 8015502:	4688      	mov	r8, r1
 8015504:	4692      	mov	sl, r2
 8015506:	469b      	mov	fp, r3
 8015508:	4627      	mov	r7, r4
 801550a:	4625      	mov	r5, r4
 801550c:	4626      	mov	r6, r4
 801550e:	4554      	cmp	r4, sl
 8015510:	da2a      	bge.n	8015568 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015512:	2300      	movs	r3, #0
 8015514:	9303      	str	r3, [sp, #12]
 8015516:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801551a:	429d      	cmp	r5, r3
 801551c:	d004      	beq.n	8015528 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801551e:	f242 030b 	movw	r3, #8203	; 0x200b
 8015522:	429d      	cmp	r5, r3
 8015524:	bf18      	it	ne
 8015526:	462f      	movne	r7, r5
 8015528:	ab03      	add	r3, sp, #12
 801552a:	4642      	mov	r2, r8
 801552c:	4659      	mov	r1, fp
 801552e:	4648      	mov	r0, r9
 8015530:	f002 feba 	bl	80182a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015534:	4605      	mov	r5, r0
 8015536:	b1b8      	cbz	r0, 8015568 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015538:	280a      	cmp	r0, #10
 801553a:	d015      	beq.n	8015568 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801553c:	9a03      	ldr	r2, [sp, #12]
 801553e:	b18a      	cbz	r2, 8015564 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8015540:	7b50      	ldrb	r0, [r2, #13]
 8015542:	4639      	mov	r1, r7
 8015544:	7a93      	ldrb	r3, [r2, #10]
 8015546:	0040      	lsls	r0, r0, #1
 8015548:	8895      	ldrh	r5, [r2, #4]
 801554a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801554e:	4303      	orrs	r3, r0
 8015550:	4640      	mov	r0, r8
 8015552:	9301      	str	r3, [sp, #4]
 8015554:	f8d8 3000 	ldr.w	r3, [r8]
 8015558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801555a:	4798      	blx	r3
 801555c:	9b01      	ldr	r3, [sp, #4]
 801555e:	4418      	add	r0, r3
 8015560:	4406      	add	r6, r0
 8015562:	b2b6      	uxth	r6, r6
 8015564:	3401      	adds	r4, #1
 8015566:	e7d2      	b.n	801550e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8015568:	4630      	mov	r0, r6
 801556a:	b005      	add	sp, #20
 801556c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015570 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8015570:	2a02      	cmp	r2, #2
 8015572:	b530      	push	{r4, r5, lr}
 8015574:	d011      	beq.n	801559a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8015576:	2a03      	cmp	r2, #3
 8015578:	d01c      	beq.n	80155b4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801557a:	2a01      	cmp	r2, #1
 801557c:	d10c      	bne.n	8015598 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801557e:	888b      	ldrh	r3, [r1, #4]
 8015580:	8801      	ldrh	r1, [r0, #0]
 8015582:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8015586:	1a5b      	subs	r3, r3, r1
 8015588:	8844      	ldrh	r4, [r0, #2]
 801558a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801558e:	1a9b      	subs	r3, r3, r2
 8015590:	8004      	strh	r4, [r0, #0]
 8015592:	8081      	strh	r1, [r0, #4]
 8015594:	8043      	strh	r3, [r0, #2]
 8015596:	80c2      	strh	r2, [r0, #6]
 8015598:	bd30      	pop	{r4, r5, pc}
 801559a:	88cb      	ldrh	r3, [r1, #6]
 801559c:	8842      	ldrh	r2, [r0, #2]
 801559e:	1a9b      	subs	r3, r3, r2
 80155a0:	88c2      	ldrh	r2, [r0, #6]
 80155a2:	1a9b      	subs	r3, r3, r2
 80155a4:	888a      	ldrh	r2, [r1, #4]
 80155a6:	8801      	ldrh	r1, [r0, #0]
 80155a8:	8043      	strh	r3, [r0, #2]
 80155aa:	1a52      	subs	r2, r2, r1
 80155ac:	8881      	ldrh	r1, [r0, #4]
 80155ae:	1a52      	subs	r2, r2, r1
 80155b0:	8002      	strh	r2, [r0, #0]
 80155b2:	e7f1      	b.n	8015598 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80155b4:	88cb      	ldrh	r3, [r1, #6]
 80155b6:	8841      	ldrh	r1, [r0, #2]
 80155b8:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80155bc:	1a5b      	subs	r3, r3, r1
 80155be:	f9b0 5000 	ldrsh.w	r5, [r0]
 80155c2:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80155c6:	1a9b      	subs	r3, r3, r2
 80155c8:	8045      	strh	r5, [r0, #2]
 80155ca:	8082      	strh	r2, [r0, #4]
 80155cc:	8003      	strh	r3, [r0, #0]
 80155ce:	80c4      	strh	r4, [r0, #6]
 80155d0:	e7e2      	b.n	8015598 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

080155d2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 80155d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155d6:	b09f      	sub	sp, #124	; 0x7c
 80155d8:	9116      	str	r1, [sp, #88]	; 0x58
 80155da:	9317      	str	r3, [sp, #92]	; 0x5c
 80155dc:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80155de:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80155e0:	8809      	ldrh	r1, [r1, #0]
 80155e2:	889b      	ldrh	r3, [r3, #4]
 80155e4:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 80155e8:	440b      	add	r3, r1
 80155ea:	9212      	str	r2, [sp, #72]	; 0x48
 80155ec:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 80155f0:	b21b      	sxth	r3, r3
 80155f2:	9011      	str	r0, [sp, #68]	; 0x44
 80155f4:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 80155f8:	9310      	str	r3, [sp, #64]	; 0x40
 80155fa:	f8d8 3000 	ldr.w	r3, [r8]
 80155fe:	f9bd 50a0 	ldrsh.w	r5, [sp, #160]	; 0xa0
 8015602:	7a59      	ldrb	r1, [r3, #9]
 8015604:	7a1b      	ldrb	r3, [r3, #8]
 8015606:	9114      	str	r1, [sp, #80]	; 0x50
 8015608:	9315      	str	r3, [sp, #84]	; 0x54
 801560a:	2a00      	cmp	r2, #0
 801560c:	d06a      	beq.n	80156e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801560e:	f898 3010 	ldrb.w	r3, [r8, #16]
 8015612:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8015614:	2b04      	cmp	r3, #4
 8015616:	bf14      	ite	ne
 8015618:	2301      	movne	r3, #1
 801561a:	2302      	moveq	r3, #2
 801561c:	4413      	add	r3, r2
 801561e:	f04f 0900 	mov.w	r9, #0
 8015622:	930f      	str	r3, [sp, #60]	; 0x3c
 8015624:	464c      	mov	r4, r9
 8015626:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801562a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801562e:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8015632:	4293      	cmp	r3, r2
 8015634:	f280 808f 	bge.w	8015756 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8015638:	2300      	movs	r3, #0
 801563a:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 801563e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8015642:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8015646:	429c      	cmp	r4, r3
 8015648:	d006      	beq.n	8015658 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801564a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801564c:	f242 020b 	movw	r2, #8203	; 0x200b
 8015650:	4294      	cmp	r4, r2
 8015652:	bf18      	it	ne
 8015654:	4623      	movne	r3, r4
 8015656:	930d      	str	r3, [sp, #52]	; 0x34
 8015658:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801565a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801565c:	f8d8 2000 	ldr.w	r2, [r8]
 8015660:	428b      	cmp	r3, r1
 8015662:	db41      	blt.n	80156e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8015664:	6813      	ldr	r3, [r2, #0]
 8015666:	4610      	mov	r0, r2
 8015668:	695b      	ldr	r3, [r3, #20]
 801566a:	4798      	blx	r3
 801566c:	4604      	mov	r4, r0
 801566e:	f8d8 0000 	ldr.w	r0, [r8]
 8015672:	aa1d      	add	r2, sp, #116	; 0x74
 8015674:	4621      	mov	r1, r4
 8015676:	6803      	ldr	r3, [r0, #0]
 8015678:	689e      	ldr	r6, [r3, #8]
 801567a:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801567e:	47b0      	blx	r6
 8015680:	901c      	str	r0, [sp, #112]	; 0x70
 8015682:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8015686:	429c      	cmp	r4, r3
 8015688:	f000 80ea 	beq.w	8015860 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801568c:	f242 030b 	movw	r3, #8203	; 0x200b
 8015690:	429c      	cmp	r4, r3
 8015692:	f000 80e5 	beq.w	8015860 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8015696:	2c00      	cmp	r4, #0
 8015698:	f000 80f7 	beq.w	801588a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 801569c:	2c0a      	cmp	r4, #10
 801569e:	d060      	beq.n	8015762 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 80156a0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80156a2:	b36a      	cbz	r2, 8015700 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 80156a4:	8894      	ldrh	r4, [r2, #4]
 80156a6:	f1bb 0f00 	cmp.w	fp, #0
 80156aa:	d03b      	beq.n	8015724 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 80156ac:	f892 900d 	ldrb.w	r9, [r2, #13]
 80156b0:	f1bb 0f01 	cmp.w	fp, #1
 80156b4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80156b8:	f409 7380 	and.w	r3, r9, #256	; 0x100
 80156bc:	f892 900a 	ldrb.w	r9, [r2, #10]
 80156c0:	ea49 0903 	orr.w	r9, r9, r3
 80156c4:	d134      	bne.n	8015730 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 80156c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80156c8:	eba5 0509 	sub.w	r5, r5, r9
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d14f      	bne.n	8015770 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 80156d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80156d2:	eb09 0305 	add.w	r3, r9, r5
 80156d6:	4413      	add	r3, r2
 80156d8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80156da:	f9b2 2000 	ldrsh.w	r2, [r2]
 80156de:	4293      	cmp	r3, r2
 80156e0:	da51      	bge.n	8015786 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 80156e2:	e038      	b.n	8015756 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 80156e4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80156e6:	e79a      	b.n	801561e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 80156e8:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80156ec:	4659      	mov	r1, fp
 80156ee:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80156f0:	9301      	str	r3, [sp, #4]
 80156f2:	ab1d      	add	r3, sp, #116	; 0x74
 80156f4:	9300      	str	r3, [sp, #0]
 80156f6:	ab1c      	add	r3, sp, #112	; 0x70
 80156f8:	f002 fe1f 	bl	801833a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 80156fc:	4604      	mov	r4, r0
 80156fe:	e7c0      	b.n	8015682 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8015700:	f8d8 0000 	ldr.w	r0, [r8]
 8015704:	6803      	ldr	r3, [r0, #0]
 8015706:	691b      	ldr	r3, [r3, #16]
 8015708:	4798      	blx	r3
 801570a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801570e:	4298      	cmp	r0, r3
 8015710:	f000 80a6 	beq.w	8015860 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8015714:	f242 030b 	movw	r3, #8203	; 0x200b
 8015718:	4298      	cmp	r0, r3
 801571a:	f000 80a1 	beq.w	8015860 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801571e:	f1bb 0f00 	cmp.w	fp, #0
 8015722:	d100      	bne.n	8015726 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8015724:	444d      	add	r5, r9
 8015726:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015728:	2a00      	cmp	r2, #0
 801572a:	d1bf      	bne.n	80156ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801572c:	4691      	mov	r9, r2
 801572e:	e097      	b.n	8015860 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8015730:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015732:	2b00      	cmp	r3, #0
 8015734:	f000 80ab 	beq.w	801588e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8015738:	f1bb 0f00 	cmp.w	fp, #0
 801573c:	d118      	bne.n	8015770 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801573e:	f8d8 0000 	ldr.w	r0, [r8]
 8015742:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015744:	6803      	ldr	r3, [r0, #0]
 8015746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015748:	4798      	blx	r3
 801574a:	4405      	add	r5, r0
 801574c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801574e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015750:	1aeb      	subs	r3, r5, r3
 8015752:	4293      	cmp	r3, r2
 8015754:	dd17      	ble.n	8015786 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8015756:	2c00      	cmp	r4, #0
 8015758:	f000 8097 	beq.w	801588a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 801575c:	2c0a      	cmp	r4, #10
 801575e:	f040 8085 	bne.w	801586c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 8015762:	240a      	movs	r4, #10
 8015764:	fab4 f084 	clz	r0, r4
 8015768:	0940      	lsrs	r0, r0, #5
 801576a:	b01f      	add	sp, #124	; 0x7c
 801576c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015770:	f8d8 0000 	ldr.w	r0, [r8]
 8015774:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015776:	6803      	ldr	r3, [r0, #0]
 8015778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801577a:	4798      	blx	r3
 801577c:	f1bb 0f01 	cmp.w	fp, #1
 8015780:	eba5 0500 	sub.w	r5, r5, r0
 8015784:	d0a4      	beq.n	80156d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8015786:	981c      	ldr	r0, [sp, #112]	; 0x70
 8015788:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801578a:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801578e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015792:	7b43      	ldrb	r3, [r0, #13]
 8015794:	4429      	add	r1, r5
 8015796:	015b      	lsls	r3, r3, #5
 8015798:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801579c:	7983      	ldrb	r3, [r0, #6]
 801579e:	4313      	orrs	r3, r2
 80157a0:	440b      	add	r3, r1
 80157a2:	42b3      	cmp	r3, r6
 80157a4:	db5c      	blt.n	8015860 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 80157a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80157a8:	4299      	cmp	r1, r3
 80157aa:	da59      	bge.n	8015860 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 80157ac:	f8d8 0000 	ldr.w	r0, [r8]
 80157b0:	42ae      	cmp	r6, r5
 80157b2:	6803      	ldr	r3, [r0, #0]
 80157b4:	bfcc      	ite	gt
 80157b6:	1b76      	subgt	r6, r6, r5
 80157b8:	2600      	movle	r6, #0
 80157ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157bc:	bfc8      	it	gt
 80157be:	b2b6      	uxthgt	r6, r6
 80157c0:	4798      	blx	r3
 80157c2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80157c4:	7b5a      	ldrb	r2, [r3, #13]
 80157c6:	00d1      	lsls	r1, r2, #3
 80157c8:	f401 7780 	and.w	r7, r1, #256	; 0x100
 80157cc:	7a19      	ldrb	r1, [r3, #8]
 80157ce:	4339      	orrs	r1, r7
 80157d0:	0657      	lsls	r7, r2, #25
 80157d2:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80157d4:	bf48      	it	mi
 80157d6:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 80157da:	4407      	add	r7, r0
 80157dc:	bf48      	it	mi
 80157de:	b209      	sxthmi	r1, r1
 80157e0:	1a7f      	subs	r7, r7, r1
 80157e2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80157e4:	b2bf      	uxth	r7, r7
 80157e6:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80157ea:	fa0f fa87 	sxth.w	sl, r7
 80157ee:	4551      	cmp	r1, sl
 80157f0:	dd3a      	ble.n	8015868 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 80157f2:	0112      	lsls	r2, r2, #4
 80157f4:	79d8      	ldrb	r0, [r3, #7]
 80157f6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80157fa:	4302      	orrs	r2, r0
 80157fc:	4492      	add	sl, r2
 80157fe:	4551      	cmp	r1, sl
 8015800:	dc2e      	bgt.n	8015860 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8015802:	1bcf      	subs	r7, r1, r7
 8015804:	468a      	mov	sl, r1
 8015806:	b2bf      	uxth	r7, r7
 8015808:	9319      	str	r3, [sp, #100]	; 0x64
 801580a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801580c:	f8d8 0000 	ldr.w	r0, [r8]
 8015810:	681a      	ldr	r2, [r3, #0]
 8015812:	6801      	ldr	r1, [r0, #0]
 8015814:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8015816:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015818:	9313      	str	r3, [sp, #76]	; 0x4c
 801581a:	9218      	str	r2, [sp, #96]	; 0x60
 801581c:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801581e:	4788      	blx	r1
 8015820:	f898 1006 	ldrb.w	r1, [r8, #6]
 8015824:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015826:	910b      	str	r1, [sp, #44]	; 0x2c
 8015828:	f898 100e 	ldrb.w	r1, [r8, #14]
 801582c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801582e:	910a      	str	r1, [sp, #40]	; 0x28
 8015830:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8015834:	9109      	str	r1, [sp, #36]	; 0x24
 8015836:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801583a:	9305      	str	r3, [sp, #20]
 801583c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801583e:	9206      	str	r2, [sp, #24]
 8015840:	e9cd a601 	strd	sl, r6, [sp, #4]
 8015844:	442e      	add	r6, r5
 8015846:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801584a:	b236      	sxth	r6, r6
 801584c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801584e:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8015852:	9600      	str	r6, [sp, #0]
 8015854:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015856:	681a      	ldr	r2, [r3, #0]
 8015858:	9811      	ldr	r0, [sp, #68]	; 0x44
 801585a:	685b      	ldr	r3, [r3, #4]
 801585c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801585e:	47b0      	blx	r6
 8015860:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015862:	3301      	adds	r3, #1
 8015864:	930e      	str	r3, [sp, #56]	; 0x38
 8015866:	e6e2      	b.n	801562e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 8015868:	2700      	movs	r7, #0
 801586a:	e7cd      	b.n	8015808 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 801586c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801586e:	3501      	adds	r5, #1
 8015870:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015872:	429d      	cmp	r5, r3
 8015874:	f6bf af76 	bge.w	8015764 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8015878:	4659      	mov	r1, fp
 801587a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801587c:	f7f0 fec4 	bl	8006608 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015880:	4604      	mov	r4, r0
 8015882:	b110      	cbz	r0, 801588a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8015884:	280a      	cmp	r0, #10
 8015886:	d1f2      	bne.n	801586e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8015888:	e76b      	b.n	8015762 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801588a:	2400      	movs	r4, #0
 801588c:	e76a      	b.n	8015764 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801588e:	f1bb 0f00 	cmp.w	fp, #0
 8015892:	f43f af5b 	beq.w	801574c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 8015896:	e776      	b.n	8015786 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

08015898 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8015898:	b530      	push	{r4, r5, lr}
 801589a:	8a44      	ldrh	r4, [r0, #18]
 801589c:	8ac5      	ldrh	r5, [r0, #22]
 801589e:	82c3      	strh	r3, [r0, #22]
 80158a0:	442c      	add	r4, r5
 80158a2:	1ae4      	subs	r4, r4, r3
 80158a4:	8b03      	ldrh	r3, [r0, #24]
 80158a6:	8244      	strh	r4, [r0, #18]
 80158a8:	8a84      	ldrh	r4, [r0, #20]
 80158aa:	4422      	add	r2, r4
 80158ac:	440c      	add	r4, r1
 80158ae:	1a59      	subs	r1, r3, r1
 80158b0:	8342      	strh	r2, [r0, #26]
 80158b2:	8284      	strh	r4, [r0, #20]
 80158b4:	8301      	strh	r1, [r0, #24]
 80158b6:	bd30      	pop	{r4, r5, pc}

080158b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 80158b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158bc:	7a43      	ldrb	r3, [r0, #9]
 80158be:	b087      	sub	sp, #28
 80158c0:	4604      	mov	r4, r0
 80158c2:	460f      	mov	r7, r1
 80158c4:	1eda      	subs	r2, r3, #3
 80158c6:	b2d2      	uxtb	r2, r2
 80158c8:	2900      	cmp	r1, #0
 80158ca:	d036      	beq.n	801593a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 80158cc:	2a01      	cmp	r2, #1
 80158ce:	d932      	bls.n	8015936 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 80158d0:	1e58      	subs	r0, r3, #1
 80158d2:	f1d0 0b00 	rsbs	fp, r0, #0
 80158d6:	eb4b 0b00 	adc.w	fp, fp, r0
 80158da:	1e99      	subs	r1, r3, #2
 80158dc:	424b      	negs	r3, r1
 80158de:	414b      	adcs	r3, r1
 80158e0:	9303      	str	r3, [sp, #12]
 80158e2:	2300      	movs	r3, #0
 80158e4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80158e8:	2500      	movs	r5, #0
 80158ea:	f242 0a0b 	movw	sl, #8203	; 0x200b
 80158ee:	46a9      	mov	r9, r5
 80158f0:	8265      	strh	r5, [r4, #18]
 80158f2:	82a5      	strh	r5, [r4, #20]
 80158f4:	2300      	movs	r3, #0
 80158f6:	9305      	str	r3, [sp, #20]
 80158f8:	8823      	ldrh	r3, [r4, #0]
 80158fa:	2b20      	cmp	r3, #32
 80158fc:	d02b      	beq.n	8015956 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 80158fe:	eba3 020a 	sub.w	r2, r3, sl
 8015902:	4256      	negs	r6, r2
 8015904:	4156      	adcs	r6, r2
 8015906:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801590a:	4293      	cmp	r3, r2
 801590c:	d004      	beq.n	8015918 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801590e:	4553      	cmp	r3, sl
 8015910:	bf16      	itet	ne
 8015912:	4699      	movne	r9, r3
 8015914:	2601      	moveq	r6, #1
 8015916:	2600      	movne	r6, #0
 8015918:	ab05      	add	r3, sp, #20
 801591a:	68e2      	ldr	r2, [r4, #12]
 801591c:	7a21      	ldrb	r1, [r4, #8]
 801591e:	6860      	ldr	r0, [r4, #4]
 8015920:	f002 fcc2 	bl	80182a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015924:	8020      	strh	r0, [r4, #0]
 8015926:	b9c8      	cbnz	r0, 801595c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8015928:	8b22      	ldrh	r2, [r4, #24]
 801592a:	2300      	movs	r3, #0
 801592c:	4611      	mov	r1, r2
 801592e:	4620      	mov	r0, r4
 8015930:	f7ff ffb2 	bl	8015898 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8015934:	e066      	b.n	8015a04 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8015936:	468b      	mov	fp, r1
 8015938:	e7cf      	b.n	80158da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801593a:	3b01      	subs	r3, #1
 801593c:	2a01      	cmp	r2, #1
 801593e:	9103      	str	r1, [sp, #12]
 8015940:	468b      	mov	fp, r1
 8015942:	bf8c      	ite	hi
 8015944:	2200      	movhi	r2, #0
 8015946:	2201      	movls	r2, #1
 8015948:	2b01      	cmp	r3, #1
 801594a:	9202      	str	r2, [sp, #8]
 801594c:	bf8c      	ite	hi
 801594e:	2300      	movhi	r3, #0
 8015950:	2301      	movls	r3, #1
 8015952:	9301      	str	r3, [sp, #4]
 8015954:	e7c8      	b.n	80158e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 8015956:	4699      	mov	r9, r3
 8015958:	2601      	movs	r6, #1
 801595a:	e7dd      	b.n	8015918 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801595c:	8ae3      	ldrh	r3, [r4, #22]
 801595e:	280a      	cmp	r0, #10
 8015960:	f103 0301 	add.w	r3, r3, #1
 8015964:	82e3      	strh	r3, [r4, #22]
 8015966:	d0df      	beq.n	8015928 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 8015968:	9a05      	ldr	r2, [sp, #20]
 801596a:	bb42      	cbnz	r2, 80159be <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801596c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8015970:	4298      	cmp	r0, r3
 8015972:	d001      	beq.n	8015978 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8015974:	4550      	cmp	r0, sl
 8015976:	d1bd      	bne.n	80158f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8015978:	8823      	ldrh	r3, [r4, #0]
 801597a:	8b21      	ldrh	r1, [r4, #24]
 801597c:	2b20      	cmp	r3, #32
 801597e:	d001      	beq.n	8015984 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8015980:	4553      	cmp	r3, sl
 8015982:	d131      	bne.n	80159e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8015984:	2e00      	cmp	r6, #0
 8015986:	bf0a      	itet	eq
 8015988:	460d      	moveq	r5, r1
 801598a:	4630      	movne	r0, r6
 801598c:	2001      	moveq	r0, #1
 801598e:	440a      	add	r2, r1
 8015990:	8aa3      	ldrh	r3, [r4, #20]
 8015992:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8015996:	b292      	uxth	r2, r2
 8015998:	8322      	strh	r2, [r4, #24]
 801599a:	4413      	add	r3, r2
 801599c:	2f00      	cmp	r7, #0
 801599e:	d03a      	beq.n	8015a16 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 80159a0:	f1bb 0f00 	cmp.w	fp, #0
 80159a4:	d102      	bne.n	80159ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 80159a6:	9903      	ldr	r1, [sp, #12]
 80159a8:	b301      	cbz	r1, 80159ec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 80159aa:	b1f8      	cbz	r0, 80159ec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 80159ac:	8ba1      	ldrh	r1, [r4, #28]
 80159ae:	4419      	add	r1, r3
 80159b0:	458c      	cmp	ip, r1
 80159b2:	da2a      	bge.n	8015a0a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 80159b4:	8a61      	ldrh	r1, [r4, #18]
 80159b6:	b341      	cbz	r1, 8015a0a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 80159b8:	4563      	cmp	r3, ip
 80159ba:	dd9b      	ble.n	80158f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80159bc:	e01c      	b.n	80159f8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 80159be:	8893      	ldrh	r3, [r2, #4]
 80159c0:	4649      	mov	r1, r9
 80159c2:	8023      	strh	r3, [r4, #0]
 80159c4:	f892 800d 	ldrb.w	r8, [r2, #13]
 80159c8:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80159cc:	f408 7080 	and.w	r0, r8, #256	; 0x100
 80159d0:	f892 800a 	ldrb.w	r8, [r2, #10]
 80159d4:	ea48 0800 	orr.w	r8, r8, r0
 80159d8:	68e0      	ldr	r0, [r4, #12]
 80159da:	6803      	ldr	r3, [r0, #0]
 80159dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80159de:	4798      	blx	r3
 80159e0:	eb08 0200 	add.w	r2, r8, r0
 80159e4:	b292      	uxth	r2, r2
 80159e6:	e7c7      	b.n	8015978 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 80159e8:	2000      	movs	r0, #0
 80159ea:	e7d0      	b.n	801598e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 80159ec:	4563      	cmp	r3, ip
 80159ee:	dd81      	ble.n	80158f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80159f0:	8a63      	ldrh	r3, [r4, #18]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	f43f af7e 	beq.w	80158f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80159f8:	2301      	movs	r3, #1
 80159fa:	8ba2      	ldrh	r2, [r4, #28]
 80159fc:	77a3      	strb	r3, [r4, #30]
 80159fe:	8b63      	ldrh	r3, [r4, #26]
 8015a00:	4413      	add	r3, r2
 8015a02:	8363      	strh	r3, [r4, #26]
 8015a04:	b007      	add	sp, #28
 8015a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a0a:	2300      	movs	r3, #0
 8015a0c:	4611      	mov	r1, r2
 8015a0e:	4620      	mov	r0, r4
 8015a10:	f7ff ff42 	bl	8015898 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8015a14:	e76e      	b.n	80158f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8015a16:	4563      	cmp	r3, ip
 8015a18:	dd14      	ble.n	8015a44 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8015a1a:	9b02      	ldr	r3, [sp, #8]
 8015a1c:	b113      	cbz	r3, 8015a24 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8015a1e:	2301      	movs	r3, #1
 8015a20:	460a      	mov	r2, r1
 8015a22:	e783      	b.n	801592c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 8015a24:	9b01      	ldr	r3, [sp, #4]
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	f43f af64 	beq.w	80158f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8015a2c:	2800      	cmp	r0, #0
 8015a2e:	f47f af61 	bne.w	80158f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8015a32:	b116      	cbz	r6, 8015a3a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 8015a34:	2301      	movs	r3, #1
 8015a36:	462a      	mov	r2, r5
 8015a38:	e779      	b.n	801592e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 8015a3a:	8a63      	ldrh	r3, [r4, #18]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	f43f af59 	beq.w	80158f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8015a42:	e7df      	b.n	8015a04 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8015a44:	2800      	cmp	r0, #0
 8015a46:	f47f af55 	bne.w	80158f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8015a4a:	2e00      	cmp	r6, #0
 8015a4c:	f43f af52 	beq.w	80158f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8015a50:	2301      	movs	r3, #1
 8015a52:	462a      	mov	r2, r5
 8015a54:	e7db      	b.n	8015a0e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

08015a56 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8015a56:	b530      	push	{r4, r5, lr}
 8015a58:	4605      	mov	r5, r0
 8015a5a:	b08b      	sub	sp, #44	; 0x2c
 8015a5c:	b191      	cbz	r1, 8015a84 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 8015a5e:	2401      	movs	r4, #1
 8015a60:	e9cd 3100 	strd	r3, r1, [sp]
 8015a64:	4613      	mov	r3, r2
 8015a66:	4601      	mov	r1, r0
 8015a68:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8015a6c:	a802      	add	r0, sp, #8
 8015a6e:	f7ff fd07 	bl	8015480 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8015a72:	2100      	movs	r1, #0
 8015a74:	a802      	add	r0, sp, #8
 8015a76:	f7ff ff1f 	bl	80158b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8015a7a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8015a7e:	b163      	cbz	r3, 8015a9a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8015a80:	3401      	adds	r4, #1
 8015a82:	e7f6      	b.n	8015a72 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8015a84:	2401      	movs	r4, #1
 8015a86:	f002 fcdb 	bl	8018440 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015a8a:	280a      	cmp	r0, #10
 8015a8c:	4628      	mov	r0, r5
 8015a8e:	bf08      	it	eq
 8015a90:	3401      	addeq	r4, #1
 8015a92:	f002 fcd5 	bl	8018440 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015a96:	2800      	cmp	r0, #0
 8015a98:	d1f7      	bne.n	8015a8a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8015a9a:	b2a0      	uxth	r0, r4
 8015a9c:	b00b      	add	sp, #44	; 0x2c
 8015a9e:	bd30      	pop	{r4, r5, pc}

08015aa0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8015aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015aa4:	b0e5      	sub	sp, #404	; 0x194
 8015aa6:	4689      	mov	r9, r1
 8015aa8:	461c      	mov	r4, r3
 8015aaa:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 8015aae:	900a      	str	r0, [sp, #40]	; 0x28
 8015ab0:	f1ba 0f00 	cmp.w	sl, #0
 8015ab4:	f000 80b4 	beq.w	8015c20 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	f000 80b0 	beq.w	8015c20 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8015ac0:	7ba3      	ldrb	r3, [r4, #14]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	f000 80ac 	beq.w	8015c20 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8015ac8:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 8015acc:	6810      	ldr	r0, [r2, #0]
 8015ace:	6851      	ldr	r1, [r2, #4]
 8015ad0:	2500      	movs	r5, #0
 8015ad2:	4643      	mov	r3, r8
 8015ad4:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8015ad8:	950f      	str	r5, [sp, #60]	; 0x3c
 8015ada:	af19      	add	r7, sp, #100	; 0x64
 8015adc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8015ae0:	79a2      	ldrb	r2, [r4, #6]
 8015ae2:	c303      	stmia	r3!, {r0, r1}
 8015ae4:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8015ae8:	a90f      	add	r1, sp, #60	; 0x3c
 8015aea:	4640      	mov	r0, r8
 8015aec:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8015af0:	f7ff fd3e 	bl	8015570 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8015af4:	a90f      	add	r1, sp, #60	; 0x3c
 8015af6:	79a2      	ldrb	r2, [r4, #6]
 8015af8:	4608      	mov	r0, r1
 8015afa:	f7ff fd39 	bl	8015570 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8015afe:	4638      	mov	r0, r7
 8015b00:	f002 f872 	bl	8017be8 <_ZN8touchgfx12TextProviderC1Ev>
 8015b04:	6820      	ldr	r0, [r4, #0]
 8015b06:	6803      	ldr	r3, [r0, #0]
 8015b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b0a:	4798      	blx	r3
 8015b0c:	4606      	mov	r6, r0
 8015b0e:	6820      	ldr	r0, [r4, #0]
 8015b10:	6803      	ldr	r3, [r0, #0]
 8015b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015b14:	4798      	blx	r3
 8015b16:	4633      	mov	r3, r6
 8015b18:	9000      	str	r0, [sp, #0]
 8015b1a:	4651      	mov	r1, sl
 8015b1c:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 8015b1e:	4638      	mov	r0, r7
 8015b20:	f002 f8bd 	bl	8017c9e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015b24:	7923      	ldrb	r3, [r4, #4]
 8015b26:	6820      	ldr	r0, [r4, #0]
 8015b28:	9308      	str	r3, [sp, #32]
 8015b2a:	6803      	ldr	r3, [r0, #0]
 8015b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b2e:	4798      	blx	r3
 8015b30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b34:	181e      	adds	r6, r3, r0
 8015b36:	42ae      	cmp	r6, r5
 8015b38:	dd06      	ble.n	8015b48 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 8015b3a:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8015b3e:	4282      	cmp	r2, r0
 8015b40:	bfa4      	itt	ge
 8015b42:	189d      	addge	r5, r3, r2
 8015b44:	fb95 f5f6 	sdivge	r5, r5, r6
 8015b48:	a832      	add	r0, sp, #200	; 0xc8
 8015b4a:	f002 f84d 	bl	8017be8 <_ZN8touchgfx12TextProviderC1Ev>
 8015b4e:	7c23      	ldrb	r3, [r4, #16]
 8015b50:	b17b      	cbz	r3, 8015b72 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 8015b52:	6820      	ldr	r0, [r4, #0]
 8015b54:	6803      	ldr	r3, [r0, #0]
 8015b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b58:	4798      	blx	r3
 8015b5a:	4683      	mov	fp, r0
 8015b5c:	6820      	ldr	r0, [r4, #0]
 8015b5e:	6803      	ldr	r3, [r0, #0]
 8015b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015b62:	4798      	blx	r3
 8015b64:	465b      	mov	r3, fp
 8015b66:	9000      	str	r0, [sp, #0]
 8015b68:	4651      	mov	r1, sl
 8015b6a:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 8015b6c:	a832      	add	r0, sp, #200	; 0xc8
 8015b6e:	f002 f896 	bl	8017c9e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015b72:	7be1      	ldrb	r1, [r4, #15]
 8015b74:	a811      	add	r0, sp, #68	; 0x44
 8015b76:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8015b7a:	7963      	ldrb	r3, [r4, #5]
 8015b7c:	1a52      	subs	r2, r2, r1
 8015b7e:	7c21      	ldrb	r1, [r4, #16]
 8015b80:	9101      	str	r1, [sp, #4]
 8015b82:	b292      	uxth	r2, r2
 8015b84:	6821      	ldr	r1, [r4, #0]
 8015b86:	9100      	str	r1, [sp, #0]
 8015b88:	a932      	add	r1, sp, #200	; 0xc8
 8015b8a:	f7ff fc79 	bl	8015480 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8015b8e:	7c23      	ldrb	r3, [r4, #16]
 8015b90:	b9bb      	cbnz	r3, 8015bc2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 8015b92:	fa1f fa86 	uxth.w	sl, r6
 8015b96:	2d00      	cmp	r5, #0
 8015b98:	dd45      	ble.n	8015c26 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8015b9a:	4638      	mov	r0, r7
 8015b9c:	f002 fc50 	bl	8018440 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015ba0:	2800      	cmp	r0, #0
 8015ba2:	d03d      	beq.n	8015c20 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8015ba4:	280a      	cmp	r0, #10
 8015ba6:	d1f6      	bne.n	8015b96 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8015ba8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8015bac:	3d01      	subs	r5, #1
 8015bae:	4453      	add	r3, sl
 8015bb0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8015bb4:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8015bb8:	eba3 030a 	sub.w	r3, r3, sl
 8015bbc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8015bc0:	e7e9      	b.n	8015b96 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8015bc2:	0073      	lsls	r3, r6, #1
 8015bc4:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8015bc8:	fa1f fa86 	uxth.w	sl, r6
 8015bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8015bce:	2d00      	cmp	r5, #0
 8015bd0:	dd29      	ble.n	8015c26 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8015bd2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8015bd6:	a811      	add	r0, sp, #68	; 0x44
 8015bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bda:	428b      	cmp	r3, r1
 8015bdc:	bfd4      	ite	le
 8015bde:	2100      	movle	r1, #0
 8015be0:	2101      	movgt	r1, #1
 8015be2:	f7ff fe69 	bl	80158b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8015be6:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8015bea:	3b01      	subs	r3, #1
 8015bec:	b29b      	uxth	r3, r3
 8015bee:	455b      	cmp	r3, fp
 8015bf0:	930b      	str	r3, [sp, #44]	; 0x2c
 8015bf2:	d005      	beq.n	8015c00 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 8015bf4:	7961      	ldrb	r1, [r4, #5]
 8015bf6:	4638      	mov	r0, r7
 8015bf8:	f7f0 fd06 	bl	8006608 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015bfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015bfe:	e7f4      	b.n	8015bea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 8015c00:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8015c04:	3d01      	subs	r5, #1
 8015c06:	4453      	add	r3, sl
 8015c08:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8015c0c:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8015c10:	eba3 030a 	sub.w	r3, r3, sl
 8015c14:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8015c18:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d1d6      	bne.n	8015bce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 8015c20:	b065      	add	sp, #404	; 0x194
 8015c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c26:	0075      	lsls	r5, r6, #1
 8015c28:	f04f 0a00 	mov.w	sl, #0
 8015c2c:	7c23      	ldrb	r3, [r4, #16]
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d066      	beq.n	8015d00 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 8015c32:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8015c36:	a811      	add	r0, sp, #68	; 0x44
 8015c38:	428d      	cmp	r5, r1
 8015c3a:	bfd4      	ite	le
 8015c3c:	2100      	movle	r1, #0
 8015c3e:	2101      	movgt	r1, #1
 8015c40:	f7ff fe3a 	bl	80158b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8015c44:	9b08      	ldr	r3, [sp, #32]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d055      	beq.n	8015cf6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8015c4a:	f894 b010 	ldrb.w	fp, [r4, #16]
 8015c4e:	2264      	movs	r2, #100	; 0x64
 8015c50:	4639      	mov	r1, r7
 8015c52:	a84b      	add	r0, sp, #300	; 0x12c
 8015c54:	f00f f9e0 	bl	8025018 <memcpy>
 8015c58:	f1bb 0f00 	cmp.w	fp, #0
 8015c5c:	d058      	beq.n	8015d10 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 8015c5e:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8015c62:	7922      	ldrb	r2, [r4, #4]
 8015c64:	2a01      	cmp	r2, #1
 8015c66:	d13c      	bne.n	8015ce2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 8015c68:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 8015c6c:	1ac0      	subs	r0, r0, r3
 8015c6e:	2302      	movs	r3, #2
 8015c70:	fb90 f0f3 	sdiv	r0, r0, r3
 8015c74:	b200      	sxth	r0, r0
 8015c76:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8015c7a:	4418      	add	r0, r3
 8015c7c:	7c23      	ldrb	r3, [r4, #16]
 8015c7e:	b200      	sxth	r0, r0
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d03a      	beq.n	8015cfa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 8015c84:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 8015c88:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 8015c8c:	9000      	str	r0, [sp, #0]
 8015c8e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8015c92:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015c94:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8015c98:	e9cd a703 	strd	sl, r7, [sp, #12]
 8015c9c:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8015ca0:	464a      	mov	r2, r9
 8015ca2:	2100      	movs	r1, #0
 8015ca4:	f7ff fc95 	bl	80155d2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8015ca8:	2800      	cmp	r0, #0
 8015caa:	d1b9      	bne.n	8015c20 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8015cac:	b2b2      	uxth	r2, r6
 8015cae:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8015cb2:	4611      	mov	r1, r2
 8015cb4:	4413      	add	r3, r2
 8015cb6:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8015cba:	b21b      	sxth	r3, r3
 8015cbc:	1a52      	subs	r2, r2, r1
 8015cbe:	7c21      	ldrb	r1, [r4, #16]
 8015cc0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8015cc4:	b212      	sxth	r2, r2
 8015cc6:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8015cca:	b109      	cbz	r1, 8015cd0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 8015ccc:	42b2      	cmp	r2, r6
 8015cce:	dba7      	blt.n	8015c20 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8015cd0:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8015cd4:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8015cd8:	440a      	add	r2, r1
 8015cda:	b212      	sxth	r2, r2
 8015cdc:	4293      	cmp	r3, r2
 8015cde:	dda5      	ble.n	8015c2c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18c>
 8015ce0:	e79e      	b.n	8015c20 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8015ce2:	2a02      	cmp	r2, #2
 8015ce4:	d105      	bne.n	8015cf2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8015ce6:	7be2      	ldrb	r2, [r4, #15]
 8015ce8:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 8015cec:	1a80      	subs	r0, r0, r2
 8015cee:	1ac0      	subs	r0, r0, r3
 8015cf0:	e7c0      	b.n	8015c74 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 8015cf2:	2000      	movs	r0, #0
 8015cf4:	e7bf      	b.n	8015c76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 8015cf6:	7be0      	ldrb	r0, [r4, #15]
 8015cf8:	e7bd      	b.n	8015c76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 8015cfa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015cfe:	e7c3      	b.n	8015c88 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 8015d00:	9b08      	ldr	r3, [sp, #32]
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d0f7      	beq.n	8015cf6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8015d06:	2264      	movs	r2, #100	; 0x64
 8015d08:	4639      	mov	r1, r7
 8015d0a:	a84b      	add	r0, sp, #300	; 0x12c
 8015d0c:	f00f f984 	bl	8025018 <memcpy>
 8015d10:	2300      	movs	r3, #0
 8015d12:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015d16:	6821      	ldr	r1, [r4, #0]
 8015d18:	a84b      	add	r0, sp, #300	; 0x12c
 8015d1a:	f7ff fbed 	bl	80154f8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8015d1e:	b203      	sxth	r3, r0
 8015d20:	e79f      	b.n	8015c62 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>

08015d22 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8015d22:	2b03      	cmp	r3, #3
 8015d24:	d818      	bhi.n	8015d58 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8015d26:	e8df f003 	tbb	[pc, r3]
 8015d2a:	0602      	.short	0x0602
 8015d2c:	130d      	.short	0x130d
 8015d2e:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015d32:	1850      	adds	r0, r2, r1
 8015d34:	4770      	bx	lr
 8015d36:	8803      	ldrh	r3, [r0, #0]
 8015d38:	8880      	ldrh	r0, [r0, #4]
 8015d3a:	4418      	add	r0, r3
 8015d3c:	b200      	sxth	r0, r0
 8015d3e:	1a80      	subs	r0, r0, r2
 8015d40:	3801      	subs	r0, #1
 8015d42:	4770      	bx	lr
 8015d44:	8803      	ldrh	r3, [r0, #0]
 8015d46:	8880      	ldrh	r0, [r0, #4]
 8015d48:	4418      	add	r0, r3
 8015d4a:	b200      	sxth	r0, r0
 8015d4c:	1a40      	subs	r0, r0, r1
 8015d4e:	e7f7      	b.n	8015d40 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8015d50:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015d54:	4410      	add	r0, r2
 8015d56:	4770      	bx	lr
 8015d58:	2000      	movs	r0, #0
 8015d5a:	4770      	bx	lr

08015d5c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8015d5c:	2b03      	cmp	r3, #3
 8015d5e:	d817      	bhi.n	8015d90 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8015d60:	e8df f003 	tbb	[pc, r3]
 8015d64:	10090602 	.word	0x10090602
 8015d68:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8015d6c:	1850      	adds	r0, r2, r1
 8015d6e:	4770      	bx	lr
 8015d70:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8015d74:	e7fa      	b.n	8015d6c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8015d76:	8843      	ldrh	r3, [r0, #2]
 8015d78:	88c0      	ldrh	r0, [r0, #6]
 8015d7a:	4418      	add	r0, r3
 8015d7c:	b200      	sxth	r0, r0
 8015d7e:	1a80      	subs	r0, r0, r2
 8015d80:	3801      	subs	r0, #1
 8015d82:	4770      	bx	lr
 8015d84:	8843      	ldrh	r3, [r0, #2]
 8015d86:	88c0      	ldrh	r0, [r0, #6]
 8015d88:	4418      	add	r0, r3
 8015d8a:	b200      	sxth	r0, r0
 8015d8c:	1a40      	subs	r0, r0, r1
 8015d8e:	e7f7      	b.n	8015d80 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8015d90:	2000      	movs	r0, #0
 8015d92:	4770      	bx	lr

08015d94 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8015d94:	4b01      	ldr	r3, [pc, #4]	; (8015d9c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8015d96:	2200      	movs	r2, #0
 8015d98:	601a      	str	r2, [r3, #0]
 8015d9a:	4770      	bx	lr
 8015d9c:	2400b08c 	.word	0x2400b08c

08015da0 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8015da0:	4603      	mov	r3, r0
 8015da2:	b1c8      	cbz	r0, 8015dd8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8015da4:	0c02      	lsrs	r2, r0, #16
 8015da6:	0412      	lsls	r2, r2, #16
 8015da8:	b9a2      	cbnz	r2, 8015dd4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8015daa:	0403      	lsls	r3, r0, #16
 8015dac:	2010      	movs	r0, #16
 8015dae:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015db2:	bf04      	itt	eq
 8015db4:	021b      	lsleq	r3, r3, #8
 8015db6:	3008      	addeq	r0, #8
 8015db8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015dbc:	bf04      	itt	eq
 8015dbe:	011b      	lsleq	r3, r3, #4
 8015dc0:	3004      	addeq	r0, #4
 8015dc2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015dc6:	bf04      	itt	eq
 8015dc8:	009b      	lsleq	r3, r3, #2
 8015dca:	3002      	addeq	r0, #2
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	db04      	blt.n	8015dda <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8015dd0:	3001      	adds	r0, #1
 8015dd2:	4770      	bx	lr
 8015dd4:	2000      	movs	r0, #0
 8015dd6:	e7ea      	b.n	8015dae <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8015dd8:	2020      	movs	r0, #32
 8015dda:	4770      	bx	lr

08015ddc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8015ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015de0:	b087      	sub	sp, #28
 8015de2:	4681      	mov	r9, r0
 8015de4:	4698      	mov	r8, r3
 8015de6:	4610      	mov	r0, r2
 8015de8:	460d      	mov	r5, r1
 8015dea:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8015dee:	b981      	cbnz	r1, 8015e12 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8015df0:	b14b      	cbz	r3, 8015e06 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8015df2:	460b      	mov	r3, r1
 8015df4:	464a      	mov	r2, r9
 8015df6:	4641      	mov	r1, r8
 8015df8:	e9cd 4700 	strd	r4, r7, [sp]
 8015dfc:	f7ff ffee 	bl	8015ddc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015e00:	b007      	add	sp, #28
 8015e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e06:	f04f 33ff 	mov.w	r3, #4294967295
 8015e0a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8015e0e:	603b      	str	r3, [r7, #0]
 8015e10:	e7f6      	b.n	8015e00 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8015e12:	fa32 fa01 	lsrs.w	sl, r2, r1
 8015e16:	d107      	bne.n	8015e28 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8015e18:	fb09 f602 	mul.w	r6, r9, r2
 8015e1c:	fbb6 f0f4 	udiv	r0, r6, r4
 8015e20:	fb04 6610 	mls	r6, r4, r0, r6
 8015e24:	603e      	str	r6, [r7, #0]
 8015e26:	e7eb      	b.n	8015e00 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8015e28:	2601      	movs	r6, #1
 8015e2a:	fa09 fb01 	lsl.w	fp, r9, r1
 8015e2e:	408e      	lsls	r6, r1
 8015e30:	fbbb f3f4 	udiv	r3, fp, r4
 8015e34:	3e01      	subs	r6, #1
 8015e36:	9302      	str	r3, [sp, #8]
 8015e38:	fb0a f303 	mul.w	r3, sl, r3
 8015e3c:	4016      	ands	r6, r2
 8015e3e:	9303      	str	r3, [sp, #12]
 8015e40:	4630      	mov	r0, r6
 8015e42:	f7ff ffad 	bl	8015da0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8015e46:	464a      	mov	r2, r9
 8015e48:	460b      	mov	r3, r1
 8015e4a:	4601      	mov	r1, r0
 8015e4c:	4630      	mov	r0, r6
 8015e4e:	e9cd 4700 	strd	r4, r7, [sp]
 8015e52:	f7ff ffc3 	bl	8015ddc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015e56:	9b02      	ldr	r3, [sp, #8]
 8015e58:	4606      	mov	r6, r0
 8015e5a:	eb05 0108 	add.w	r1, r5, r8
 8015e5e:	fb04 bb13 	mls	fp, r4, r3, fp
 8015e62:	4658      	mov	r0, fp
 8015e64:	f7ff ff9c 	bl	8015da0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8015e68:	ab05      	add	r3, sp, #20
 8015e6a:	465a      	mov	r2, fp
 8015e6c:	e9cd 4300 	strd	r4, r3, [sp]
 8015e70:	4603      	mov	r3, r0
 8015e72:	4650      	mov	r0, sl
 8015e74:	f7ff ffb2 	bl	8015ddc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015e78:	6839      	ldr	r1, [r7, #0]
 8015e7a:	9a05      	ldr	r2, [sp, #20]
 8015e7c:	9b03      	ldr	r3, [sp, #12]
 8015e7e:	4411      	add	r1, r2
 8015e80:	fbb1 f2f4 	udiv	r2, r1, r4
 8015e84:	18d3      	adds	r3, r2, r3
 8015e86:	fb04 1412 	mls	r4, r4, r2, r1
 8015e8a:	441e      	add	r6, r3
 8015e8c:	603c      	str	r4, [r7, #0]
 8015e8e:	4430      	add	r0, r6
 8015e90:	e7b6      	b.n	8015e00 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08015e92 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8015e92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015e96:	b085      	sub	sp, #20
 8015e98:	f1b0 0900 	subs.w	r9, r0, #0
 8015e9c:	461d      	mov	r5, r3
 8015e9e:	4617      	mov	r7, r2
 8015ea0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015ea2:	bfbb      	ittet	lt
 8015ea4:	f1c9 0900 	rsblt	r9, r9, #0
 8015ea8:	f04f 36ff 	movlt.w	r6, #4294967295
 8015eac:	2601      	movge	r6, #1
 8015eae:	6823      	ldrlt	r3, [r4, #0]
 8015eb0:	bfbc      	itt	lt
 8015eb2:	425b      	neglt	r3, r3
 8015eb4:	6023      	strlt	r3, [r4, #0]
 8015eb6:	2a00      	cmp	r2, #0
 8015eb8:	da04      	bge.n	8015ec4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8015eba:	6823      	ldr	r3, [r4, #0]
 8015ebc:	4257      	negs	r7, r2
 8015ebe:	4276      	negs	r6, r6
 8015ec0:	425b      	negs	r3, r3
 8015ec2:	6023      	str	r3, [r4, #0]
 8015ec4:	2d00      	cmp	r5, #0
 8015ec6:	4638      	mov	r0, r7
 8015ec8:	bfba      	itte	lt
 8015eca:	426d      	neglt	r5, r5
 8015ecc:	f04f 38ff 	movlt.w	r8, #4294967295
 8015ed0:	f04f 0801 	movge.w	r8, #1
 8015ed4:	f7ff ff64 	bl	8015da0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8015ed8:	ab03      	add	r3, sp, #12
 8015eda:	463a      	mov	r2, r7
 8015edc:	e9cd 5300 	strd	r5, r3, [sp]
 8015ee0:	4603      	mov	r3, r0
 8015ee2:	4648      	mov	r0, r9
 8015ee4:	f7ff ff7a 	bl	8015ddc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015ee8:	6823      	ldr	r3, [r4, #0]
 8015eea:	9a03      	ldr	r2, [sp, #12]
 8015eec:	4546      	cmp	r6, r8
 8015eee:	441a      	add	r2, r3
 8015ef0:	fb92 f3f5 	sdiv	r3, r2, r5
 8015ef4:	4418      	add	r0, r3
 8015ef6:	fb05 2313 	mls	r3, r5, r3, r2
 8015efa:	bf18      	it	ne
 8015efc:	4240      	negne	r0, r0
 8015efe:	1c72      	adds	r2, r6, #1
 8015f00:	6023      	str	r3, [r4, #0]
 8015f02:	d105      	bne.n	8015f10 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	f1c3 0200 	rsb	r2, r3, #0
 8015f0a:	db0b      	blt.n	8015f24 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8015f0c:	6022      	str	r2, [r4, #0]
 8015f0e:	e006      	b.n	8015f1e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8015f10:	2e01      	cmp	r6, #1
 8015f12:	d104      	bne.n	8015f1e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	da02      	bge.n	8015f1e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8015f18:	442b      	add	r3, r5
 8015f1a:	3801      	subs	r0, #1
 8015f1c:	6023      	str	r3, [r4, #0]
 8015f1e:	b005      	add	sp, #20
 8015f20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f24:	3801      	subs	r0, #1
 8015f26:	1b52      	subs	r2, r2, r5
 8015f28:	e7f0      	b.n	8015f0c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08015f2c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8015f2c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8015f30:	4c1c      	ldr	r4, [pc, #112]	; (8015fa4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8015f32:	4605      	mov	r5, r0
 8015f34:	6807      	ldr	r7, [r0, #0]
 8015f36:	69a3      	ldr	r3, [r4, #24]
 8015f38:	b92b      	cbnz	r3, 8015f46 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8015f3a:	6840      	ldr	r0, [r0, #4]
 8015f3c:	e9c5 7000 	strd	r7, r0, [r5]
 8015f40:	b004      	add	sp, #16
 8015f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f46:	f04f 0802 	mov.w	r8, #2
 8015f4a:	68a2      	ldr	r2, [r4, #8]
 8015f4c:	ae04      	add	r6, sp, #16
 8015f4e:	6820      	ldr	r0, [r4, #0]
 8015f50:	fb93 f1f8 	sdiv	r1, r3, r8
 8015f54:	440a      	add	r2, r1
 8015f56:	69e1      	ldr	r1, [r4, #28]
 8015f58:	f846 2d04 	str.w	r2, [r6, #-4]!
 8015f5c:	463a      	mov	r2, r7
 8015f5e:	9600      	str	r6, [sp, #0]
 8015f60:	f7ff ff97 	bl	8015e92 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015f64:	69a3      	ldr	r3, [r4, #24]
 8015f66:	4607      	mov	r7, r0
 8015f68:	686a      	ldr	r2, [r5, #4]
 8015f6a:	6a21      	ldr	r1, [r4, #32]
 8015f6c:	9600      	str	r6, [sp, #0]
 8015f6e:	6860      	ldr	r0, [r4, #4]
 8015f70:	f7ff ff8f 	bl	8015e92 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015f74:	69a3      	ldr	r3, [r4, #24]
 8015f76:	6962      	ldr	r2, [r4, #20]
 8015f78:	4407      	add	r7, r0
 8015f7a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015f7c:	9600      	str	r6, [sp, #0]
 8015f7e:	68e0      	ldr	r0, [r4, #12]
 8015f80:	fb93 f8f8 	sdiv	r8, r3, r8
 8015f84:	4442      	add	r2, r8
 8015f86:	9203      	str	r2, [sp, #12]
 8015f88:	682a      	ldr	r2, [r5, #0]
 8015f8a:	f7ff ff82 	bl	8015e92 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015f8e:	4680      	mov	r8, r0
 8015f90:	9600      	str	r6, [sp, #0]
 8015f92:	69a3      	ldr	r3, [r4, #24]
 8015f94:	686a      	ldr	r2, [r5, #4]
 8015f96:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8015f98:	6920      	ldr	r0, [r4, #16]
 8015f9a:	f7ff ff7a 	bl	8015e92 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015f9e:	4440      	add	r0, r8
 8015fa0:	e7cc      	b.n	8015f3c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8015fa2:	bf00      	nop
 8015fa4:	2400b090 	.word	0x2400b090

08015fa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8015fa8:	4b07      	ldr	r3, [pc, #28]	; (8015fc8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8015faa:	781b      	ldrb	r3, [r3, #0]
 8015fac:	2b01      	cmp	r3, #1
 8015fae:	d109      	bne.n	8015fc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8015fb0:	f9b1 3000 	ldrsh.w	r3, [r1]
 8015fb4:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015fb8:	8003      	strh	r3, [r0, #0]
 8015fba:	4b04      	ldr	r3, [pc, #16]	; (8015fcc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8015fbc:	881b      	ldrh	r3, [r3, #0]
 8015fbe:	3b01      	subs	r3, #1
 8015fc0:	1a9b      	subs	r3, r3, r2
 8015fc2:	800b      	strh	r3, [r1, #0]
 8015fc4:	4770      	bx	lr
 8015fc6:	bf00      	nop
 8015fc8:	2400b07c 	.word	0x2400b07c
 8015fcc:	2400b078 	.word	0x2400b078

08015fd0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8015fd0:	4b07      	ldr	r3, [pc, #28]	; (8015ff0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8015fd2:	b510      	push	{r4, lr}
 8015fd4:	781b      	ldrb	r3, [r3, #0]
 8015fd6:	2b01      	cmp	r3, #1
 8015fd8:	d108      	bne.n	8015fec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8015fda:	4b06      	ldr	r3, [pc, #24]	; (8015ff4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8015fdc:	880c      	ldrh	r4, [r1, #0]
 8015fde:	881b      	ldrh	r3, [r3, #0]
 8015fe0:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015fe4:	3b01      	subs	r3, #1
 8015fe6:	1b1b      	subs	r3, r3, r4
 8015fe8:	8003      	strh	r3, [r0, #0]
 8015fea:	800a      	strh	r2, [r1, #0]
 8015fec:	bd10      	pop	{r4, pc}
 8015fee:	bf00      	nop
 8015ff0:	2400b07c 	.word	0x2400b07c
 8015ff4:	2400b078 	.word	0x2400b078

08015ff8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8015ff8:	4b0a      	ldr	r3, [pc, #40]	; (8016024 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8015ffa:	b510      	push	{r4, lr}
 8015ffc:	781b      	ldrb	r3, [r3, #0]
 8015ffe:	2b01      	cmp	r3, #1
 8016000:	d10e      	bne.n	8016020 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8016002:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8016006:	8843      	ldrh	r3, [r0, #2]
 8016008:	f9b0 4000 	ldrsh.w	r4, [r0]
 801600c:	18ca      	adds	r2, r1, r3
 801600e:	4b06      	ldr	r3, [pc, #24]	; (8016028 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8016010:	8044      	strh	r4, [r0, #2]
 8016012:	881b      	ldrh	r3, [r3, #0]
 8016014:	1a9b      	subs	r3, r3, r2
 8016016:	8003      	strh	r3, [r0, #0]
 8016018:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801601c:	8081      	strh	r1, [r0, #4]
 801601e:	80c3      	strh	r3, [r0, #6]
 8016020:	bd10      	pop	{r4, pc}
 8016022:	bf00      	nop
 8016024:	2400b07c 	.word	0x2400b07c
 8016028:	2400b078 	.word	0x2400b078

0801602c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801602c:	4b08      	ldr	r3, [pc, #32]	; (8016050 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801602e:	781b      	ldrb	r3, [r3, #0]
 8016030:	2b01      	cmp	r3, #1
 8016032:	d10c      	bne.n	801604e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8016034:	8803      	ldrh	r3, [r0, #0]
 8016036:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801603a:	8842      	ldrh	r2, [r0, #2]
 801603c:	8002      	strh	r2, [r0, #0]
 801603e:	185a      	adds	r2, r3, r1
 8016040:	4b04      	ldr	r3, [pc, #16]	; (8016054 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8016042:	881b      	ldrh	r3, [r3, #0]
 8016044:	1a9b      	subs	r3, r3, r2
 8016046:	8043      	strh	r3, [r0, #2]
 8016048:	88c3      	ldrh	r3, [r0, #6]
 801604a:	80c1      	strh	r1, [r0, #6]
 801604c:	8083      	strh	r3, [r0, #4]
 801604e:	4770      	bx	lr
 8016050:	2400b07c 	.word	0x2400b07c
 8016054:	2400b078 	.word	0x2400b078

08016058 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8016058:	4b07      	ldr	r3, [pc, #28]	; (8016078 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801605a:	b510      	push	{r4, lr}
 801605c:	781b      	ldrb	r3, [r3, #0]
 801605e:	2b01      	cmp	r3, #1
 8016060:	d108      	bne.n	8016074 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8016062:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016066:	f9b0 4000 	ldrsh.w	r4, [r0]
 801606a:	8003      	strh	r3, [r0, #0]
 801606c:	8893      	ldrh	r3, [r2, #4]
 801606e:	3b01      	subs	r3, #1
 8016070:	1b1b      	subs	r3, r3, r4
 8016072:	800b      	strh	r3, [r1, #0]
 8016074:	bd10      	pop	{r4, pc}
 8016076:	bf00      	nop
 8016078:	2400b07c 	.word	0x2400b07c

0801607c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801607c:	4b0a      	ldr	r3, [pc, #40]	; (80160a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801607e:	460a      	mov	r2, r1
 8016080:	b510      	push	{r4, lr}
 8016082:	781b      	ldrb	r3, [r3, #0]
 8016084:	2b01      	cmp	r3, #1
 8016086:	d10d      	bne.n	80160a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8016088:	8881      	ldrh	r1, [r0, #4]
 801608a:	8803      	ldrh	r3, [r0, #0]
 801608c:	440b      	add	r3, r1
 801608e:	4601      	mov	r1, r0
 8016090:	3b01      	subs	r3, #1
 8016092:	f821 3b02 	strh.w	r3, [r1], #2
 8016096:	f7ff ffdf 	bl	8016058 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801609a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801609e:	88c2      	ldrh	r2, [r0, #6]
 80160a0:	80c3      	strh	r3, [r0, #6]
 80160a2:	8082      	strh	r2, [r0, #4]
 80160a4:	bd10      	pop	{r4, pc}
 80160a6:	bf00      	nop
 80160a8:	2400b07c 	.word	0x2400b07c

080160ac <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80160ac:	b570      	push	{r4, r5, r6, lr}
 80160ae:	2300      	movs	r3, #0
 80160b0:	4c0a      	ldr	r4, [pc, #40]	; (80160dc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 80160b2:	4605      	mov	r5, r0
 80160b4:	460e      	mov	r6, r1
 80160b6:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80160ba:	6820      	ldr	r0, [r4, #0]
 80160bc:	b110      	cbz	r0, 80160c4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 80160be:	6803      	ldr	r3, [r0, #0]
 80160c0:	695b      	ldr	r3, [r3, #20]
 80160c2:	4798      	blx	r3
 80160c4:	6026      	str	r6, [r4, #0]
 80160c6:	4630      	mov	r0, r6
 80160c8:	6833      	ldr	r3, [r6, #0]
 80160ca:	68db      	ldr	r3, [r3, #12]
 80160cc:	4798      	blx	r3
 80160ce:	682b      	ldr	r3, [r5, #0]
 80160d0:	4628      	mov	r0, r5
 80160d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80160d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80160d8:	4718      	bx	r3
 80160da:	bf00      	nop
 80160dc:	2400b0c0 	.word	0x2400b0c0

080160e0 <_ZN8touchgfx11Application13requestRedrawEv>:
 80160e0:	4b06      	ldr	r3, [pc, #24]	; (80160fc <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80160e2:	2100      	movs	r1, #0
 80160e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80160e8:	4b05      	ldr	r3, [pc, #20]	; (8016100 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80160ea:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 80160ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80160f2:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 80160f6:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 80160fa:	4770      	bx	lr
 80160fc:	2400b078 	.word	0x2400b078
 8016100:	2400b07a 	.word	0x2400b07a

08016104 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8016104:	4b03      	ldr	r3, [pc, #12]	; (8016114 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8016106:	6818      	ldr	r0, [r3, #0]
 8016108:	b110      	cbz	r0, 8016110 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801610a:	6803      	ldr	r3, [r0, #0]
 801610c:	699b      	ldr	r3, [r3, #24]
 801610e:	4718      	bx	r3
 8016110:	4770      	bx	lr
 8016112:	bf00      	nop
 8016114:	2400b0c0 	.word	0x2400b0c0

08016118 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8016118:	4770      	bx	lr
	...

0801611c <_ZN8touchgfx11Application4drawEv>:
 801611c:	4b09      	ldr	r3, [pc, #36]	; (8016144 <_ZN8touchgfx11Application4drawEv+0x28>)
 801611e:	b507      	push	{r0, r1, r2, lr}
 8016120:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016124:	2100      	movs	r1, #0
 8016126:	4b08      	ldr	r3, [pc, #32]	; (8016148 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8016128:	9100      	str	r1, [sp, #0]
 801612a:	4669      	mov	r1, sp
 801612c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016130:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016134:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016138:	6803      	ldr	r3, [r0, #0]
 801613a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801613c:	4798      	blx	r3
 801613e:	b003      	add	sp, #12
 8016140:	f85d fb04 	ldr.w	pc, [sp], #4
 8016144:	2400b078 	.word	0x2400b078
 8016148:	2400b07a 	.word	0x2400b07a

0801614c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801614c:	4b03      	ldr	r3, [pc, #12]	; (801615c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801614e:	6818      	ldr	r0, [r3, #0]
 8016150:	b110      	cbz	r0, 8016158 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8016152:	6803      	ldr	r3, [r0, #0]
 8016154:	69db      	ldr	r3, [r3, #28]
 8016156:	4718      	bx	r3
 8016158:	4770      	bx	lr
 801615a:	bf00      	nop
 801615c:	2400b0c0 	.word	0x2400b0c0

08016160 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8016160:	4b03      	ldr	r3, [pc, #12]	; (8016170 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8016162:	6818      	ldr	r0, [r3, #0]
 8016164:	b110      	cbz	r0, 801616c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8016166:	6803      	ldr	r3, [r0, #0]
 8016168:	6a1b      	ldr	r3, [r3, #32]
 801616a:	4718      	bx	r3
 801616c:	4770      	bx	lr
 801616e:	bf00      	nop
 8016170:	2400b0c0 	.word	0x2400b0c0

08016174 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8016174:	2300      	movs	r3, #0
 8016176:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801617a:	4770      	bx	lr

0801617c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801617c:	4b03      	ldr	r3, [pc, #12]	; (801618c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801617e:	6818      	ldr	r0, [r3, #0]
 8016180:	b110      	cbz	r0, 8016188 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8016182:	6803      	ldr	r3, [r0, #0]
 8016184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016186:	4718      	bx	r3
 8016188:	4770      	bx	lr
 801618a:	bf00      	nop
 801618c:	2400b0c0 	.word	0x2400b0c0

08016190 <_ZN8touchgfx11Application15handleTickEventEv>:
 8016190:	b570      	push	{r4, r5, r6, lr}
 8016192:	4d32      	ldr	r5, [pc, #200]	; (801625c <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 8016194:	4604      	mov	r4, r0
 8016196:	6828      	ldr	r0, [r5, #0]
 8016198:	b140      	cbz	r0, 80161ac <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801619a:	7a03      	ldrb	r3, [r0, #8]
 801619c:	b933      	cbnz	r3, 80161ac <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801619e:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 80161a2:	6803      	ldr	r3, [r0, #0]
 80161a4:	689b      	ldr	r3, [r3, #8]
 80161a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80161aa:	4718      	bx	r3
 80161ac:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 80161b0:	b97b      	cbnz	r3, 80161d2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80161b2:	b170      	cbz	r0, 80161d2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80161b4:	7a03      	ldrb	r3, [r0, #8]
 80161b6:	b163      	cbz	r3, 80161d2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80161b8:	4b29      	ldr	r3, [pc, #164]	; (8016260 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 80161ba:	6818      	ldr	r0, [r3, #0]
 80161bc:	b110      	cbz	r0, 80161c4 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80161be:	6803      	ldr	r3, [r0, #0]
 80161c0:	691b      	ldr	r3, [r3, #16]
 80161c2:	4798      	blx	r3
 80161c4:	6828      	ldr	r0, [r5, #0]
 80161c6:	6803      	ldr	r3, [r0, #0]
 80161c8:	68db      	ldr	r3, [r3, #12]
 80161ca:	4798      	blx	r3
 80161cc:	2301      	movs	r3, #1
 80161ce:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 80161d2:	2500      	movs	r5, #0
 80161d4:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 80161d8:	42a8      	cmp	r0, r5
 80161da:	dd0c      	ble.n	80161f6 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 80161dc:	1963      	adds	r3, r4, r5
 80161de:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80161e2:	b132      	cbz	r2, 80161f2 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 80161e4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80161e8:	4413      	add	r3, r2
 80161ea:	6858      	ldr	r0, [r3, #4]
 80161ec:	6803      	ldr	r3, [r0, #0]
 80161ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80161f0:	4798      	blx	r3
 80161f2:	3501      	adds	r5, #1
 80161f4:	e7ee      	b.n	80161d4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 80161f6:	2300      	movs	r3, #0
 80161f8:	461a      	mov	r2, r3
 80161fa:	4298      	cmp	r0, r3
 80161fc:	d015      	beq.n	801622a <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 80161fe:	18e1      	adds	r1, r4, r3
 8016200:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8016204:	b16d      	cbz	r5, 8016222 <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 8016206:	429a      	cmp	r2, r3
 8016208:	d00a      	beq.n	8016220 <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 801620a:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801620e:	4431      	add	r1, r6
 8016210:	684e      	ldr	r6, [r1, #4]
 8016212:	b291      	uxth	r1, r2
 8016214:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8016218:	604e      	str	r6, [r1, #4]
 801621a:	18a1      	adds	r1, r4, r2
 801621c:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8016220:	3201      	adds	r2, #1
 8016222:	3301      	adds	r3, #1
 8016224:	e7e9      	b.n	80161fa <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8016226:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 801622a:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 801622e:	4295      	cmp	r5, r2
 8016230:	dd0d      	ble.n	801624e <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 8016232:	1e6b      	subs	r3, r5, #1
 8016234:	b29b      	uxth	r3, r3
 8016236:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 801623a:	4618      	mov	r0, r3
 801623c:	3104      	adds	r1, #4
 801623e:	4285      	cmp	r5, r0
 8016240:	ddf1      	ble.n	8016226 <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 8016242:	f851 6f04 	ldr.w	r6, [r1, #4]!
 8016246:	3001      	adds	r0, #1
 8016248:	f841 6c04 	str.w	r6, [r1, #-4]
 801624c:	e7f7      	b.n	801623e <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 801624e:	4b04      	ldr	r3, [pc, #16]	; (8016260 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8016250:	6818      	ldr	r0, [r3, #0]
 8016252:	b110      	cbz	r0, 801625a <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8016254:	6803      	ldr	r3, [r0, #0]
 8016256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016258:	e7a5      	b.n	80161a6 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801625a:	bd70      	pop	{r4, r5, r6, pc}
 801625c:	2400b0c4 	.word	0x2400b0c4
 8016260:	2400b0c0 	.word	0x2400b0c0

08016264 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8016264:	b510      	push	{r4, lr}
 8016266:	f9b1 4000 	ldrsh.w	r4, [r1]
 801626a:	888a      	ldrh	r2, [r1, #4]
 801626c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016270:	4422      	add	r2, r4
 8016272:	b212      	sxth	r2, r2
 8016274:	4293      	cmp	r3, r2
 8016276:	da15      	bge.n	80162a4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016278:	8882      	ldrh	r2, [r0, #4]
 801627a:	4413      	add	r3, r2
 801627c:	b21b      	sxth	r3, r3
 801627e:	429c      	cmp	r4, r3
 8016280:	da10      	bge.n	80162a4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016282:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8016286:	88c9      	ldrh	r1, [r1, #6]
 8016288:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801628c:	4419      	add	r1, r3
 801628e:	b209      	sxth	r1, r1
 8016290:	428a      	cmp	r2, r1
 8016292:	da07      	bge.n	80162a4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016294:	88c0      	ldrh	r0, [r0, #6]
 8016296:	4410      	add	r0, r2
 8016298:	b200      	sxth	r0, r0
 801629a:	4283      	cmp	r3, r0
 801629c:	bfac      	ite	ge
 801629e:	2000      	movge	r0, #0
 80162a0:	2001      	movlt	r0, #1
 80162a2:	bd10      	pop	{r4, pc}
 80162a4:	2000      	movs	r0, #0
 80162a6:	e7fc      	b.n	80162a2 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080162a8 <_ZN8touchgfx4Rect10restrictToEss>:
 80162a8:	f9b0 3000 	ldrsh.w	r3, [r0]
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	b510      	push	{r4, lr}
 80162b0:	da04      	bge.n	80162bc <_ZN8touchgfx4Rect10restrictToEss+0x14>
 80162b2:	8884      	ldrh	r4, [r0, #4]
 80162b4:	4423      	add	r3, r4
 80162b6:	8083      	strh	r3, [r0, #4]
 80162b8:	2300      	movs	r3, #0
 80162ba:	8003      	strh	r3, [r0, #0]
 80162bc:	f9b0 4000 	ldrsh.w	r4, [r0]
 80162c0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80162c4:	1b09      	subs	r1, r1, r4
 80162c6:	428b      	cmp	r3, r1
 80162c8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80162cc:	bfc8      	it	gt
 80162ce:	8081      	strhgt	r1, [r0, #4]
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	da04      	bge.n	80162de <_ZN8touchgfx4Rect10restrictToEss+0x36>
 80162d4:	88c1      	ldrh	r1, [r0, #6]
 80162d6:	440b      	add	r3, r1
 80162d8:	80c3      	strh	r3, [r0, #6]
 80162da:	2300      	movs	r3, #0
 80162dc:	8043      	strh	r3, [r0, #2]
 80162de:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80162e2:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80162e6:	1a52      	subs	r2, r2, r1
 80162e8:	4293      	cmp	r3, r2
 80162ea:	bfc8      	it	gt
 80162ec:	80c2      	strhgt	r2, [r0, #6]
 80162ee:	bd10      	pop	{r4, pc}

080162f0 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80162f0:	4b10      	ldr	r3, [pc, #64]	; (8016334 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 80162f2:	b510      	push	{r4, lr}
 80162f4:	460c      	mov	r4, r1
 80162f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80162fa:	4b0f      	ldr	r3, [pc, #60]	; (8016338 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 80162fc:	4620      	mov	r0, r4
 80162fe:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016302:	f7ff ffd1 	bl	80162a8 <_ZN8touchgfx4Rect10restrictToEss>
 8016306:	4b0d      	ldr	r3, [pc, #52]	; (801633c <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8016308:	6818      	ldr	r0, [r3, #0]
 801630a:	b190      	cbz	r0, 8016332 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801630c:	6803      	ldr	r3, [r0, #0]
 801630e:	4621      	mov	r1, r4
 8016310:	689b      	ldr	r3, [r3, #8]
 8016312:	4798      	blx	r3
 8016314:	4b0a      	ldr	r3, [pc, #40]	; (8016340 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8016316:	6818      	ldr	r0, [r3, #0]
 8016318:	b118      	cbz	r0, 8016322 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801631a:	6803      	ldr	r3, [r0, #0]
 801631c:	4621      	mov	r1, r4
 801631e:	689b      	ldr	r3, [r3, #8]
 8016320:	4798      	blx	r3
 8016322:	4b08      	ldr	r3, [pc, #32]	; (8016344 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8016324:	4621      	mov	r1, r4
 8016326:	6818      	ldr	r0, [r3, #0]
 8016328:	6803      	ldr	r3, [r0, #0]
 801632a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801632e:	69db      	ldr	r3, [r3, #28]
 8016330:	4718      	bx	r3
 8016332:	bd10      	pop	{r4, pc}
 8016334:	2400b07a 	.word	0x2400b07a
 8016338:	2400b078 	.word	0x2400b078
 801633c:	2400b0c0 	.word	0x2400b0c0
 8016340:	2400b0bc 	.word	0x2400b0bc
 8016344:	2400b084 	.word	0x2400b084

08016348 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8016348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801634a:	4606      	mov	r6, r0
 801634c:	4608      	mov	r0, r1
 801634e:	460f      	mov	r7, r1
 8016350:	f7fc fe41 	bl	8012fd6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016354:	b9e8      	cbnz	r0, 8016392 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016356:	f9b7 5000 	ldrsh.w	r5, [r7]
 801635a:	f9b6 4000 	ldrsh.w	r4, [r6]
 801635e:	42a5      	cmp	r5, r4
 8016360:	db17      	blt.n	8016392 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016362:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8016366:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801636a:	429a      	cmp	r2, r3
 801636c:	db11      	blt.n	8016392 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801636e:	88b9      	ldrh	r1, [r7, #4]
 8016370:	440d      	add	r5, r1
 8016372:	88b1      	ldrh	r1, [r6, #4]
 8016374:	440c      	add	r4, r1
 8016376:	b22d      	sxth	r5, r5
 8016378:	b224      	sxth	r4, r4
 801637a:	42a5      	cmp	r5, r4
 801637c:	dc09      	bgt.n	8016392 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801637e:	88f8      	ldrh	r0, [r7, #6]
 8016380:	4410      	add	r0, r2
 8016382:	88f2      	ldrh	r2, [r6, #6]
 8016384:	4413      	add	r3, r2
 8016386:	b200      	sxth	r0, r0
 8016388:	b21b      	sxth	r3, r3
 801638a:	4298      	cmp	r0, r3
 801638c:	bfcc      	ite	gt
 801638e:	2000      	movgt	r0, #0
 8016390:	2001      	movle	r0, #1
 8016392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016394 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8016394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016396:	4604      	mov	r4, r0
 8016398:	4608      	mov	r0, r1
 801639a:	460d      	mov	r5, r1
 801639c:	f7fc fe1b 	bl	8012fd6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80163a0:	b978      	cbnz	r0, 80163c2 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80163a2:	4620      	mov	r0, r4
 80163a4:	f7fc fe17 	bl	8012fd6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80163a8:	f9b5 6000 	ldrsh.w	r6, [r5]
 80163ac:	b150      	cbz	r0, 80163c4 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80163ae:	8026      	strh	r6, [r4, #0]
 80163b0:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80163b4:	8063      	strh	r3, [r4, #2]
 80163b6:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80163ba:	80a3      	strh	r3, [r4, #4]
 80163bc:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80163c0:	80e3      	strh	r3, [r4, #6]
 80163c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80163c4:	f9b4 1000 	ldrsh.w	r1, [r4]
 80163c8:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80163cc:	42b1      	cmp	r1, r6
 80163ce:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80163d2:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80163d6:	460f      	mov	r7, r1
 80163d8:	88ed      	ldrh	r5, [r5, #6]
 80163da:	bfa8      	it	ge
 80163dc:	4637      	movge	r7, r6
 80163de:	4293      	cmp	r3, r2
 80163e0:	4618      	mov	r0, r3
 80163e2:	4466      	add	r6, ip
 80163e4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80163e8:	bfa8      	it	ge
 80163ea:	4610      	movge	r0, r2
 80163ec:	442a      	add	r2, r5
 80163ee:	88e5      	ldrh	r5, [r4, #6]
 80163f0:	4461      	add	r1, ip
 80163f2:	b236      	sxth	r6, r6
 80163f4:	8027      	strh	r7, [r4, #0]
 80163f6:	442b      	add	r3, r5
 80163f8:	b209      	sxth	r1, r1
 80163fa:	b212      	sxth	r2, r2
 80163fc:	8060      	strh	r0, [r4, #2]
 80163fe:	b21b      	sxth	r3, r3
 8016400:	428e      	cmp	r6, r1
 8016402:	bfac      	ite	ge
 8016404:	ebc7 0106 	rsbge	r1, r7, r6
 8016408:	ebc7 0101 	rsblt	r1, r7, r1
 801640c:	429a      	cmp	r2, r3
 801640e:	bfac      	ite	ge
 8016410:	ebc0 0202 	rsbge	r2, r0, r2
 8016414:	ebc0 0203 	rsblt	r2, r0, r3
 8016418:	80a1      	strh	r1, [r4, #4]
 801641a:	80e2      	strh	r2, [r4, #6]
 801641c:	e7d1      	b.n	80163c2 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08016420 <_ZN8touchgfx11Application11getInstanceEv>:
 8016420:	4b01      	ldr	r3, [pc, #4]	; (8016428 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8016422:	6818      	ldr	r0, [r3, #0]
 8016424:	4770      	bx	lr
 8016426:	bf00      	nop
 8016428:	2400b0d0 	.word	0x2400b0d0

0801642c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801642c:	2300      	movs	r3, #0
 801642e:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8016432:	30a8      	adds	r0, #168	; 0xa8
 8016434:	f820 3c24 	strh.w	r3, [r0, #-36]
 8016438:	f802 3b01 	strb.w	r3, [r2], #1
 801643c:	4282      	cmp	r2, r0
 801643e:	d1fb      	bne.n	8016438 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8016440:	4770      	bx	lr

08016442 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8016442:	4603      	mov	r3, r0
 8016444:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8016448:	2200      	movs	r2, #0
 801644a:	801a      	strh	r2, [r3, #0]
 801644c:	3308      	adds	r3, #8
 801644e:	f823 2c06 	strh.w	r2, [r3, #-6]
 8016452:	f823 2c04 	strh.w	r2, [r3, #-4]
 8016456:	f823 2c02 	strh.w	r2, [r3, #-2]
 801645a:	428b      	cmp	r3, r1
 801645c:	d1f5      	bne.n	801644a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801645e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8016462:	4770      	bx	lr

08016464 <_ZN8touchgfx11ApplicationC1Ev>:
 8016464:	b570      	push	{r4, r5, r6, lr}
 8016466:	4b19      	ldr	r3, [pc, #100]	; (80164cc <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 8016468:	2500      	movs	r5, #0
 801646a:	4604      	mov	r4, r0
 801646c:	30a8      	adds	r0, #168	; 0xa8
 801646e:	f840 3ca8 	str.w	r3, [r0, #-168]
 8016472:	f820 5c24 	strh.w	r5, [r0, #-36]
 8016476:	f7ff ffe4 	bl	8016442 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801647a:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801647e:	f7ff ffe0 	bl	8016442 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016482:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8016486:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801648a:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801648e:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8016492:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8016496:	490e      	ldr	r1, [pc, #56]	; (80164d0 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8016498:	480e      	ldr	r0, [pc, #56]	; (80164d4 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801649a:	f00e fc07 	bl	8024cac <CRC_Lock>
 801649e:	4e0e      	ldr	r6, [pc, #56]	; (80164d8 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 80164a0:	4b0e      	ldr	r3, [pc, #56]	; (80164dc <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80164a2:	b158      	cbz	r0, 80164bc <_ZN8touchgfx11ApplicationC1Ev+0x58>
 80164a4:	801d      	strh	r5, [r3, #0]
 80164a6:	2300      	movs	r3, #0
 80164a8:	4a0d      	ldr	r2, [pc, #52]	; (80164e0 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80164aa:	4620      	mov	r0, r4
 80164ac:	6013      	str	r3, [r2, #0]
 80164ae:	4a0d      	ldr	r2, [pc, #52]	; (80164e4 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80164b0:	6033      	str	r3, [r6, #0]
 80164b2:	6013      	str	r3, [r2, #0]
 80164b4:	f7ff ffba 	bl	801642c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 80164b8:	4620      	mov	r0, r4
 80164ba:	bd70      	pop	{r4, r5, r6, pc}
 80164bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80164c0:	2002      	movs	r0, #2
 80164c2:	801a      	strh	r2, [r3, #0]
 80164c4:	6030      	str	r0, [r6, #0]
 80164c6:	f001 fa15 	bl	80178f4 <_ZN8touchgfx6Screen4drawEv>
 80164ca:	e7ec      	b.n	80164a6 <_ZN8touchgfx11ApplicationC1Ev+0x42>
 80164cc:	08027dbc 	.word	0x08027dbc
 80164d0:	b5e8b5cd 	.word	0xb5e8b5cd
 80164d4:	f407a5c2 	.word	0xf407a5c2
 80164d8:	2400b0c0 	.word	0x2400b0c0
 80164dc:	2400004e 	.word	0x2400004e
 80164e0:	2400b0d0 	.word	0x2400b0d0
 80164e4:	2400b0c4 	.word	0x2400b0c4

080164e8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80164e8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80164ec:	3b01      	subs	r3, #1
 80164ee:	b29b      	uxth	r3, r3
 80164f0:	428b      	cmp	r3, r1
 80164f2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 80164f6:	b510      	push	{r4, lr}
 80164f8:	d908      	bls.n	801650c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 80164fa:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80164fe:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8016502:	681a      	ldr	r2, [r3, #0]
 8016504:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8016508:	685a      	ldr	r2, [r3, #4]
 801650a:	6062      	str	r2, [r4, #4]
 801650c:	bd10      	pop	{r4, pc}
	...

08016510 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8016510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016514:	b08f      	sub	sp, #60	; 0x3c
 8016516:	4b94      	ldr	r3, [pc, #592]	; (8016768 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 8016518:	4683      	mov	fp, r0
 801651a:	ac0a      	add	r4, sp, #40	; 0x28
 801651c:	e884 0006 	stmia.w	r4, {r1, r2}
 8016520:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016524:	4620      	mov	r0, r4
 8016526:	4b91      	ldr	r3, [pc, #580]	; (801676c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 8016528:	f9b3 1000 	ldrsh.w	r1, [r3]
 801652c:	f7ff febc 	bl	80162a8 <_ZN8touchgfx4Rect10restrictToEss>
 8016530:	4620      	mov	r0, r4
 8016532:	f7fc fd50 	bl	8012fd6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016536:	2800      	cmp	r0, #0
 8016538:	d16a      	bne.n	8016610 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801653a:	9403      	str	r4, [sp, #12]
 801653c:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8016540:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8016544:	2400      	movs	r4, #0
 8016546:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801654a:	9301      	str	r3, [sp, #4]
 801654c:	36a0      	adds	r6, #160	; 0xa0
 801654e:	42a5      	cmp	r5, r4
 8016550:	d00d      	beq.n	801656e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 8016552:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8016556:	9803      	ldr	r0, [sp, #12]
 8016558:	f7ff fef6 	bl	8016348 <_ZNK8touchgfx4Rect8includesERKS0_>
 801655c:	b128      	cbz	r0, 801656a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801655e:	1e69      	subs	r1, r5, #1
 8016560:	9801      	ldr	r0, [sp, #4]
 8016562:	1b09      	subs	r1, r1, r4
 8016564:	b289      	uxth	r1, r1
 8016566:	f7ff ffbf 	bl	80164e8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801656a:	3401      	adds	r4, #1
 801656c:	e7ef      	b.n	801654e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 801656e:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8016572:	1e7b      	subs	r3, r7, #1
 8016574:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 8016578:	9704      	str	r7, [sp, #16]
 801657a:	9302      	str	r3, [sp, #8]
 801657c:	2400      	movs	r4, #0
 801657e:	4655      	mov	r5, sl
 8016580:	9705      	str	r7, [sp, #20]
 8016582:	4626      	mov	r6, r4
 8016584:	9b05      	ldr	r3, [sp, #20]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d078      	beq.n	801667c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 801658a:	9903      	ldr	r1, [sp, #12]
 801658c:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8016590:	f7ff fe68 	bl	8016264 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016594:	b360      	cbz	r0, 80165f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8016596:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801659a:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801659e:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 80165a2:	45e6      	cmp	lr, ip
 80165a4:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 80165a8:	db35      	blt.n	8016616 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80165aa:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80165ae:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 80165b2:	4472      	add	r2, lr
 80165b4:	4463      	add	r3, ip
 80165b6:	b212      	sxth	r2, r2
 80165b8:	b21b      	sxth	r3, r3
 80165ba:	429a      	cmp	r2, r3
 80165bc:	dc2b      	bgt.n	8016616 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80165be:	fa1f f288 	uxth.w	r2, r8
 80165c2:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 80165c6:	45c1      	cmp	r9, r8
 80165c8:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80165cc:	4413      	add	r3, r2
 80165ce:	fa1f fc89 	uxth.w	ip, r9
 80165d2:	b29b      	uxth	r3, r3
 80165d4:	fa0f fe83 	sxth.w	lr, r3
 80165d8:	db0f      	blt.n	80165fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80165da:	eba3 030c 	sub.w	r3, r3, ip
 80165de:	1ac9      	subs	r1, r1, r3
 80165e0:	b209      	sxth	r1, r1
 80165e2:	2900      	cmp	r1, #0
 80165e4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80165e8:	dd12      	ble.n	8016610 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80165ea:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 80165ee:	4604      	mov	r4, r0
 80165f0:	9b05      	ldr	r3, [sp, #20]
 80165f2:	3d08      	subs	r5, #8
 80165f4:	3b01      	subs	r3, #1
 80165f6:	9305      	str	r3, [sp, #20]
 80165f8:	e7c4      	b.n	8016584 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 80165fa:	4461      	add	r1, ip
 80165fc:	b209      	sxth	r1, r1
 80165fe:	4571      	cmp	r1, lr
 8016600:	dc3a      	bgt.n	8016678 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8016602:	eba2 020c 	sub.w	r2, r2, ip
 8016606:	b212      	sxth	r2, r2
 8016608:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801660c:	2a00      	cmp	r2, #0
 801660e:	dcee      	bgt.n	80165ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8016610:	b00f      	add	sp, #60	; 0x3c
 8016612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016616:	45c1      	cmp	r9, r8
 8016618:	db2e      	blt.n	8016678 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801661a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801661e:	4499      	add	r9, r3
 8016620:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8016624:	4498      	add	r8, r3
 8016626:	fa0f f989 	sxth.w	r9, r9
 801662a:	fa0f f888 	sxth.w	r8, r8
 801662e:	45c1      	cmp	r9, r8
 8016630:	dc22      	bgt.n	8016678 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8016632:	fa1f f28c 	uxth.w	r2, ip
 8016636:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801663a:	45e6      	cmp	lr, ip
 801663c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8016640:	4413      	add	r3, r2
 8016642:	fa1f f88e 	uxth.w	r8, lr
 8016646:	b29b      	uxth	r3, r3
 8016648:	fa0f f983 	sxth.w	r9, r3
 801664c:	db0a      	blt.n	8016664 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 801664e:	eba3 0308 	sub.w	r3, r3, r8
 8016652:	1ac9      	subs	r1, r1, r3
 8016654:	b209      	sxth	r1, r1
 8016656:	2900      	cmp	r1, #0
 8016658:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801665c:	ddd8      	ble.n	8016610 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801665e:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8016662:	e7c4      	b.n	80165ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8016664:	4441      	add	r1, r8
 8016666:	b209      	sxth	r1, r1
 8016668:	4549      	cmp	r1, r9
 801666a:	dc05      	bgt.n	8016678 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801666c:	eba2 0208 	sub.w	r2, r2, r8
 8016670:	b212      	sxth	r2, r2
 8016672:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8016676:	e7c9      	b.n	801660c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8016678:	4606      	mov	r6, r0
 801667a:	e7b9      	b.n	80165f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801667c:	2c00      	cmp	r4, #0
 801667e:	f47f af7d 	bne.w	801657c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 8016682:	2e00      	cmp	r6, #0
 8016684:	f000 81e1 	beq.w	8016a4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8016688:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801668c:	4655      	mov	r5, sl
 801668e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8016692:	b2b9      	uxth	r1, r7
 8016694:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8016698:	b2b3      	uxth	r3, r6
 801669a:	9105      	str	r1, [sp, #20]
 801669c:	9805      	ldr	r0, [sp, #20]
 801669e:	441a      	add	r2, r3
 80166a0:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80166a4:	b292      	uxth	r2, r2
 80166a6:	4401      	add	r1, r0
 80166a8:	fa0f f882 	sxth.w	r8, r2
 80166ac:	b289      	uxth	r1, r1
 80166ae:	9106      	str	r1, [sp, #24]
 80166b0:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 80166b4:	e9cd 2307 	strd	r2, r3, [sp, #28]
 80166b8:	9b04      	ldr	r3, [sp, #16]
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d058      	beq.n	8016770 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 80166be:	9903      	ldr	r1, [sp, #12]
 80166c0:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 80166c4:	f7ff fdce 	bl	8016264 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80166c8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80166cc:	b1d8      	cbz	r0, 8016706 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 80166ce:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 80166d2:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 80166d6:	4576      	cmp	r6, lr
 80166d8:	dc26      	bgt.n	8016728 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 80166da:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 80166de:	44f4      	add	ip, lr
 80166e0:	fa0f fc8c 	sxth.w	ip, ip
 80166e4:	45e0      	cmp	r8, ip
 80166e6:	db1f      	blt.n	8016728 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 80166e8:	428f      	cmp	r7, r1
 80166ea:	fa1f fc81 	uxth.w	ip, r1
 80166ee:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 80166f2:	dc0f      	bgt.n	8016714 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 80166f4:	9806      	ldr	r0, [sp, #24]
 80166f6:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 80166fa:	eba0 0c0c 	sub.w	ip, r0, ip
 80166fe:	eba1 010c 	sub.w	r1, r1, ip
 8016702:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8016706:	4620      	mov	r0, r4
 8016708:	9904      	ldr	r1, [sp, #16]
 801670a:	3d08      	subs	r5, #8
 801670c:	4604      	mov	r4, r0
 801670e:	3901      	subs	r1, #1
 8016710:	9104      	str	r1, [sp, #16]
 8016712:	e7cf      	b.n	80166b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 8016714:	4461      	add	r1, ip
 8016716:	b209      	sxth	r1, r1
 8016718:	4549      	cmp	r1, r9
 801671a:	dcf5      	bgt.n	8016708 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801671c:	9905      	ldr	r1, [sp, #20]
 801671e:	eba1 0c0c 	sub.w	ip, r1, ip
 8016722:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8016726:	e7ee      	b.n	8016706 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8016728:	428f      	cmp	r7, r1
 801672a:	dced      	bgt.n	8016708 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801672c:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8016730:	4461      	add	r1, ip
 8016732:	b209      	sxth	r1, r1
 8016734:	4589      	cmp	r9, r1
 8016736:	dbe7      	blt.n	8016708 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8016738:	4576      	cmp	r6, lr
 801673a:	fa1f fc8e 	uxth.w	ip, lr
 801673e:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8016742:	dc08      	bgt.n	8016756 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8016744:	eba2 0c0c 	sub.w	ip, r2, ip
 8016748:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801674c:	eba1 010c 	sub.w	r1, r1, ip
 8016750:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8016754:	e7d7      	b.n	8016706 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8016756:	4461      	add	r1, ip
 8016758:	b209      	sxth	r1, r1
 801675a:	4588      	cmp	r8, r1
 801675c:	dbd4      	blt.n	8016708 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801675e:	eba3 0c0c 	sub.w	ip, r3, ip
 8016762:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8016766:	e7ce      	b.n	8016706 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8016768:	2400b07a 	.word	0x2400b07a
 801676c:	2400b078 	.word	0x2400b078
 8016770:	2c00      	cmp	r4, #0
 8016772:	f000 816a 	beq.w	8016a4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8016776:	9b02      	ldr	r3, [sp, #8]
 8016778:	3301      	adds	r3, #1
 801677a:	f000 8166 	beq.w	8016a4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801677e:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 8016782:	9803      	ldr	r0, [sp, #12]
 8016784:	4621      	mov	r1, r4
 8016786:	f7ff fddf 	bl	8016348 <_ZNK8touchgfx4Rect8includesERKS0_>
 801678a:	b120      	cbz	r0, 8016796 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 801678c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8016790:	9801      	ldr	r0, [sp, #4]
 8016792:	f7ff fea9 	bl	80164e8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016796:	9903      	ldr	r1, [sp, #12]
 8016798:	4620      	mov	r0, r4
 801679a:	f7ff fd63 	bl	8016264 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801679e:	2800      	cmp	r0, #0
 80167a0:	f000 809b 	beq.w	80168da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 80167a4:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 80167a8:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 80167ac:	b281      	uxth	r1, r0
 80167ae:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 80167b2:	9309      	str	r3, [sp, #36]	; 0x24
 80167b4:	eb01 0c03 	add.w	ip, r1, r3
 80167b8:	b2ab      	uxth	r3, r5
 80167ba:	4285      	cmp	r5, r0
 80167bc:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 80167c0:	fa1f f98c 	uxth.w	r9, ip
 80167c4:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 80167c8:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 80167cc:	eb03 040c 	add.w	r4, r3, ip
 80167d0:	b2a4      	uxth	r4, r4
 80167d2:	9405      	str	r4, [sp, #20]
 80167d4:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 80167d8:	9404      	str	r4, [sp, #16]
 80167da:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 80167de:	f340 809a 	ble.w	8016916 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 80167e2:	1a5b      	subs	r3, r3, r1
 80167e4:	4596      	cmp	lr, r2
 80167e6:	fa0f f589 	sxth.w	r5, r9
 80167ea:	b29b      	uxth	r3, r3
 80167ec:	b21e      	sxth	r6, r3
 80167ee:	dd2e      	ble.n	801684e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 80167f0:	9f02      	ldr	r7, [sp, #8]
 80167f2:	fa1f fe8e 	uxth.w	lr, lr
 80167f6:	b292      	uxth	r2, r2
 80167f8:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 80167fc:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8016800:	9f04      	ldr	r7, [sp, #16]
 8016802:	ebae 0102 	sub.w	r1, lr, r2
 8016806:	4486      	add	lr, r0
 8016808:	1b7f      	subs	r7, r7, r5
 801680a:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 801680e:	b289      	uxth	r1, r1
 8016810:	442a      	add	r2, r5
 8016812:	fa0f fe8e 	sxth.w	lr, lr
 8016816:	b20c      	sxth	r4, r1
 8016818:	b212      	sxth	r2, r2
 801681a:	4367      	muls	r7, r4
 801681c:	ebae 0202 	sub.w	r2, lr, r2
 8016820:	4372      	muls	r2, r6
 8016822:	4297      	cmp	r7, r2
 8016824:	db09      	blt.n	801683a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 8016826:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 801682a:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801682e:	449c      	add	ip, r3
 8016830:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8016834:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8016838:	e680      	b.n	801653c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801683a:	4401      	add	r1, r0
 801683c:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8016840:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 8016844:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8016848:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801684c:	e676      	b.n	801653c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801684e:	9f04      	ldr	r7, [sp, #16]
 8016850:	42bd      	cmp	r5, r7
 8016852:	da27      	bge.n	80168a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 8016854:	9902      	ldr	r1, [sp, #8]
 8016856:	1b7f      	subs	r7, r7, r5
 8016858:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801685c:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 8016860:	eb04 010e 	add.w	r1, r4, lr
 8016864:	fa1f f881 	uxth.w	r8, r1
 8016868:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 801686c:	4411      	add	r1, r2
 801686e:	fa0f f988 	sxth.w	r9, r8
 8016872:	eba2 020e 	sub.w	r2, r2, lr
 8016876:	eba1 0108 	sub.w	r1, r1, r8
 801687a:	4372      	muls	r2, r6
 801687c:	b289      	uxth	r1, r1
 801687e:	fa0f f881 	sxth.w	r8, r1
 8016882:	fb08 f707 	mul.w	r7, r8, r7
 8016886:	42ba      	cmp	r2, r7
 8016888:	dc06      	bgt.n	8016898 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801688a:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 801688e:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 8016892:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 8016896:	e7ca      	b.n	801682e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8016898:	4421      	add	r1, r4
 801689a:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 801689e:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80168a2:	e64b      	b.n	801653c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80168a4:	9d05      	ldr	r5, [sp, #20]
 80168a6:	2c06      	cmp	r4, #6
 80168a8:	eba9 0505 	sub.w	r5, r9, r5
 80168ac:	b2ad      	uxth	r5, r5
 80168ae:	fa0f fe85 	sxth.w	lr, r5
 80168b2:	d818      	bhi.n	80168e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 80168b4:	9b04      	ldr	r3, [sp, #16]
 80168b6:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 80168ba:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 80168be:	1c63      	adds	r3, r4, #1
 80168c0:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 80168c4:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 80168c8:	9b01      	ldr	r3, [sp, #4]
 80168ca:	9d01      	ldr	r5, [sp, #4]
 80168cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80168d0:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 80168d4:	805a      	strh	r2, [r3, #2]
 80168d6:	809e      	strh	r6, [r3, #4]
 80168d8:	80d9      	strh	r1, [r3, #6]
 80168da:	9b02      	ldr	r3, [sp, #8]
 80168dc:	f1aa 0a08 	sub.w	sl, sl, #8
 80168e0:	3b01      	subs	r3, #1
 80168e2:	9302      	str	r3, [sp, #8]
 80168e4:	e747      	b.n	8016776 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 80168e6:	9a02      	ldr	r2, [sp, #8]
 80168e8:	45b6      	cmp	lr, r6
 80168ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80168ee:	db0d      	blt.n	801690c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 80168f0:	449c      	add	ip, r3
 80168f2:	445a      	add	r2, fp
 80168f4:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 80168f8:	fa1f fc8c 	uxth.w	ip, ip
 80168fc:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 8016900:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8016904:	448c      	add	ip, r1
 8016906:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 801690a:	e617      	b.n	801653c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801690c:	445a      	add	r2, fp
 801690e:	44ac      	add	ip, r5
 8016910:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 8016914:	e78e      	b.n	8016834 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8016916:	fa1f f18e 	uxth.w	r1, lr
 801691a:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801691e:	b293      	uxth	r3, r2
 8016920:	4596      	cmp	lr, r2
 8016922:	eb01 0806 	add.w	r8, r1, r6
 8016926:	9306      	str	r3, [sp, #24]
 8016928:	fa1f f888 	uxth.w	r8, r8
 801692c:	9f06      	ldr	r7, [sp, #24]
 801692e:	fa0f f388 	sxth.w	r3, r8
 8016932:	9307      	str	r3, [sp, #28]
 8016934:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 8016938:	443b      	add	r3, r7
 801693a:	b29b      	uxth	r3, r3
 801693c:	9308      	str	r3, [sp, #32]
 801693e:	da25      	bge.n	801698c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 8016940:	9905      	ldr	r1, [sp, #20]
 8016942:	eba3 0308 	sub.w	r3, r3, r8
 8016946:	eba2 020e 	sub.w	r2, r2, lr
 801694a:	1b40      	subs	r0, r0, r5
 801694c:	eba9 0401 	sub.w	r4, r9, r1
 8016950:	b29b      	uxth	r3, r3
 8016952:	b2a4      	uxth	r4, r4
 8016954:	b219      	sxth	r1, r3
 8016956:	fa0f f984 	sxth.w	r9, r4
 801695a:	4348      	muls	r0, r1
 801695c:	fb09 f202 	mul.w	r2, r9, r2
 8016960:	4282      	cmp	r2, r0
 8016962:	9a02      	ldr	r2, [sp, #8]
 8016964:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8016968:	445a      	add	r2, fp
 801696a:	dc06      	bgt.n	801697a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 801696c:	9b07      	ldr	r3, [sp, #28]
 801696e:	44a4      	add	ip, r4
 8016970:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 8016974:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 8016978:	e75c      	b.n	8016834 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801697a:	9904      	ldr	r1, [sp, #16]
 801697c:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 8016980:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 8016984:	4433      	add	r3, r6
 8016986:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801698a:	e5d7      	b.n	801653c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801698c:	9f06      	ldr	r7, [sp, #24]
 801698e:	9b04      	ldr	r3, [sp, #16]
 8016990:	1bc9      	subs	r1, r1, r7
 8016992:	fa0f f789 	sxth.w	r7, r9
 8016996:	b289      	uxth	r1, r1
 8016998:	429f      	cmp	r7, r3
 801699a:	fa0f fe81 	sxth.w	lr, r1
 801699e:	dd22      	ble.n	80169e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 80169a0:	9a05      	ldr	r2, [sp, #20]
 80169a2:	1b40      	subs	r0, r0, r5
 80169a4:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80169a8:	eba9 0202 	sub.w	r2, r9, r2
 80169ac:	9d07      	ldr	r5, [sp, #28]
 80169ae:	fb0e f000 	mul.w	r0, lr, r0
 80169b2:	b292      	uxth	r2, r2
 80169b4:	eba5 0a03 	sub.w	sl, r5, r3
 80169b8:	9b02      	ldr	r3, [sp, #8]
 80169ba:	b214      	sxth	r4, r2
 80169bc:	00db      	lsls	r3, r3, #3
 80169be:	fb04 fa0a 	mul.w	sl, r4, sl
 80169c2:	445b      	add	r3, fp
 80169c4:	4550      	cmp	r0, sl
 80169c6:	db03      	blt.n	80169d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 80169c8:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 80169cc:	4494      	add	ip, r2
 80169ce:	e731      	b.n	8016834 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 80169d0:	9a04      	ldr	r2, [sp, #16]
 80169d2:	4431      	add	r1, r6
 80169d4:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 80169d8:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 80169dc:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80169e0:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80169e4:	e75b      	b.n	801689e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 80169e6:	9b08      	ldr	r3, [sp, #32]
 80169e8:	2c06      	cmp	r4, #6
 80169ea:	eba3 0308 	sub.w	r3, r3, r8
 80169ee:	b29b      	uxth	r3, r3
 80169f0:	b21d      	sxth	r5, r3
 80169f2:	d813      	bhi.n	8016a1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 80169f4:	9b07      	ldr	r3, [sp, #28]
 80169f6:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 80169fa:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 80169fe:	1c63      	adds	r3, r4, #1
 8016a00:	9901      	ldr	r1, [sp, #4]
 8016a02:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 8016a06:	9b01      	ldr	r3, [sp, #4]
 8016a08:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 8016a0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016a10:	805a      	strh	r2, [r3, #2]
 8016a12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016a14:	f8a3 e006 	strh.w	lr, [r3, #6]
 8016a18:	809a      	strh	r2, [r3, #4]
 8016a1a:	e75e      	b.n	80168da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 8016a1c:	9802      	ldr	r0, [sp, #8]
 8016a1e:	4575      	cmp	r5, lr
 8016a20:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8016a24:	db0d      	blt.n	8016a42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 8016a26:	4431      	add	r1, r6
 8016a28:	9b06      	ldr	r3, [sp, #24]
 8016a2a:	4458      	add	r0, fp
 8016a2c:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8016a30:	b289      	uxth	r1, r1
 8016a32:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 8016a36:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8016a3a:	4419      	add	r1, r3
 8016a3c:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 8016a40:	e57c      	b.n	801653c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016a42:	4458      	add	r0, fp
 8016a44:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 8016a48:	e79c      	b.n	8016984 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 8016a4a:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 8016a4e:	2e07      	cmp	r6, #7
 8016a50:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8016a54:	d812      	bhi.n	8016a7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 8016a56:	1c75      	adds	r5, r6, #1
 8016a58:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8016a5c:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8016a60:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 8016a64:	9d01      	ldr	r5, [sp, #4]
 8016a66:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8016a6a:	442c      	add	r4, r5
 8016a6c:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8016a70:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8016a74:	8061      	strh	r1, [r4, #2]
 8016a76:	80a2      	strh	r2, [r4, #4]
 8016a78:	80e3      	strh	r3, [r4, #6]
 8016a7a:	e5c9      	b.n	8016610 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016a7c:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8016a80:	3e01      	subs	r6, #1
 8016a82:	445c      	add	r4, fp
 8016a84:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8016a88:	f04f 37ff 	mov.w	r7, #4294967295
 8016a8c:	2500      	movs	r5, #0
 8016a8e:	9305      	str	r3, [sp, #20]
 8016a90:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 8016a94:	1e72      	subs	r2, r6, #1
 8016a96:	9302      	str	r3, [sp, #8]
 8016a98:	4691      	mov	r9, r2
 8016a9a:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 8016a9e:	9304      	str	r3, [sp, #16]
 8016aa0:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 8016aa4:	f1b9 3fff 	cmp.w	r9, #4294967295
 8016aa8:	6818      	ldr	r0, [r3, #0]
 8016aaa:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8016aae:	9207      	str	r2, [sp, #28]
 8016ab0:	bf16      	itet	ne
 8016ab2:	9905      	ldrne	r1, [sp, #20]
 8016ab4:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8016ab8:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8016abc:	9306      	str	r3, [sp, #24]
 8016abe:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8016ac2:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8016ac6:	fb18 f801 	smulbb	r8, r8, r1
 8016aca:	6859      	ldr	r1, [r3, #4]
 8016acc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8016ad0:	4671      	mov	r1, lr
 8016ad2:	a80c      	add	r0, sp, #48	; 0x30
 8016ad4:	f7ff fc5e 	bl	8016394 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016ad8:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8016adc:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8016ae0:	f04f 0c08 	mov.w	ip, #8
 8016ae4:	9b04      	ldr	r3, [sp, #16]
 8016ae6:	9a02      	ldr	r2, [sp, #8]
 8016ae8:	fb10 f001 	smulbb	r0, r0, r1
 8016aec:	fb02 8803 	mla	r8, r2, r3, r8
 8016af0:	eba0 0108 	sub.w	r1, r0, r8
 8016af4:	fb90 f0fc 	sdiv	r0, r0, ip
 8016af8:	4288      	cmp	r0, r1
 8016afa:	dc20      	bgt.n	8016b3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 8016afc:	4551      	cmp	r1, sl
 8016afe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8016b02:	da03      	bge.n	8016b0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 8016b04:	b1d9      	cbz	r1, 8016b3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 8016b06:	468a      	mov	sl, r1
 8016b08:	464f      	mov	r7, r9
 8016b0a:	4635      	mov	r5, r6
 8016b0c:	f109 39ff 	add.w	r9, r9, #4294967295
 8016b10:	f119 0f02 	cmn.w	r9, #2
 8016b14:	d1c6      	bne.n	8016aa4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8016b16:	4616      	mov	r6, r2
 8016b18:	3201      	adds	r2, #1
 8016b1a:	f1a4 0408 	sub.w	r4, r4, #8
 8016b1e:	d1b7      	bne.n	8016a90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 8016b20:	9b01      	ldr	r3, [sp, #4]
 8016b22:	b2ac      	uxth	r4, r5
 8016b24:	00ed      	lsls	r5, r5, #3
 8016b26:	1958      	adds	r0, r3, r5
 8016b28:	1c7b      	adds	r3, r7, #1
 8016b2a:	d10b      	bne.n	8016b44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 8016b2c:	4601      	mov	r1, r0
 8016b2e:	9803      	ldr	r0, [sp, #12]
 8016b30:	f7ff fc30 	bl	8016394 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016b34:	4621      	mov	r1, r4
 8016b36:	9801      	ldr	r0, [sp, #4]
 8016b38:	f7ff fcd6 	bl	80164e8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016b3c:	e4fe      	b.n	801653c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016b3e:	464f      	mov	r7, r9
 8016b40:	4635      	mov	r5, r6
 8016b42:	e7ed      	b.n	8016b20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8016b44:	9b01      	ldr	r3, [sp, #4]
 8016b46:	00ff      	lsls	r7, r7, #3
 8016b48:	445d      	add	r5, fp
 8016b4a:	19d9      	adds	r1, r3, r7
 8016b4c:	445f      	add	r7, fp
 8016b4e:	f7ff fc21 	bl	8016394 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016b52:	9b03      	ldr	r3, [sp, #12]
 8016b54:	cb03      	ldmia	r3!, {r0, r1}
 8016b56:	9b03      	ldr	r3, [sp, #12]
 8016b58:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8016b5c:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8016b60:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 8016b64:	6869      	ldr	r1, [r5, #4]
 8016b66:	c303      	stmia	r3!, {r0, r1}
 8016b68:	e7e4      	b.n	8016b34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 8016b6a:	bf00      	nop

08016b6c <_ZN8touchgfx11Application10invalidateEv>:
 8016b6c:	4b09      	ldr	r3, [pc, #36]	; (8016b94 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8016b6e:	b082      	sub	sp, #8
 8016b70:	2100      	movs	r1, #0
 8016b72:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016b76:	4b08      	ldr	r3, [pc, #32]	; (8016b98 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8016b78:	9100      	str	r1, [sp, #0]
 8016b7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b7e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016b82:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016b86:	ab02      	add	r3, sp, #8
 8016b88:	e913 0006 	ldmdb	r3, {r1, r2}
 8016b8c:	b002      	add	sp, #8
 8016b8e:	f7ff bcbf 	b.w	8016510 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016b92:	bf00      	nop
 8016b94:	2400b078 	.word	0x2400b078
 8016b98:	2400b07a 	.word	0x2400b07a

08016b9c <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8016b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ba0:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8016ba4:	b09b      	sub	sp, #108	; 0x6c
 8016ba6:	4604      	mov	r4, r0
 8016ba8:	4630      	mov	r0, r6
 8016baa:	f7fc fa14 	bl	8012fd6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016bae:	4605      	mov	r5, r0
 8016bb0:	b940      	cbnz	r0, 8016bc4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 8016bb2:	4620      	mov	r0, r4
 8016bb4:	e896 0006 	ldmia.w	r6, {r1, r2}
 8016bb8:	f7ff fcaa 	bl	8016510 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016bbc:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8016bc0:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8016bc4:	4bc8      	ldr	r3, [pc, #800]	; (8016ee8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d03e      	beq.n	8016c4a <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8016bcc:	4dc7      	ldr	r5, [pc, #796]	; (8016eec <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8016bce:	4628      	mov	r0, r5
 8016bd0:	f7fc fa01 	bl	8012fd6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016bd4:	4606      	mov	r6, r0
 8016bd6:	2800      	cmp	r0, #0
 8016bd8:	d137      	bne.n	8016c4a <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8016bda:	4628      	mov	r0, r5
 8016bdc:	f7ff fa0c 	bl	8015ff8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8016be0:	6829      	ldr	r1, [r5, #0]
 8016be2:	686a      	ldr	r2, [r5, #4]
 8016be4:	4620      	mov	r0, r4
 8016be6:	f7ff fc93 	bl	8016510 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016bea:	802e      	strh	r6, [r5, #0]
 8016bec:	806e      	strh	r6, [r5, #2]
 8016bee:	80ae      	strh	r6, [r5, #4]
 8016bf0:	80ee      	strh	r6, [r5, #6]
 8016bf2:	ae09      	add	r6, sp, #36	; 0x24
 8016bf4:	4630      	mov	r0, r6
 8016bf6:	f7ff fc24 	bl	8016442 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016bfa:	4abd      	ldr	r2, [pc, #756]	; (8016ef0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8016bfc:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 8016c00:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 8016c04:	8815      	ldrh	r5, [r2, #0]
 8016c06:	9202      	str	r2, [sp, #8]
 8016c08:	462b      	mov	r3, r5
 8016c0a:	429f      	cmp	r7, r3
 8016c0c:	d924      	bls.n	8016c58 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 8016c0e:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8016c12:	2907      	cmp	r1, #7
 8016c14:	d816      	bhi.n	8016c44 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 8016c16:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8016c1a:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8016c1e:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 8016c22:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8016c26:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8016c2a:	1c4a      	adds	r2, r1, #1
 8016c2c:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8016c30:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 8016c34:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8016c38:	f8a2 9002 	strh.w	r9, [r2, #2]
 8016c3c:	f8a2 e004 	strh.w	lr, [r2, #4]
 8016c40:	f8a2 c006 	strh.w	ip, [r2, #6]
 8016c44:	3301      	adds	r3, #1
 8016c46:	b29b      	uxth	r3, r3
 8016c48:	e7df      	b.n	8016c0a <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 8016c4a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d1cf      	bne.n	8016bf2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 8016c52:	b01b      	add	sp, #108	; 0x6c
 8016c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c58:	462f      	mov	r7, r5
 8016c5a:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8016c5e:	42bb      	cmp	r3, r7
 8016c60:	d90b      	bls.n	8016c7a <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 8016c62:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 8016c66:	3701      	adds	r7, #1
 8016c68:	4620      	mov	r0, r4
 8016c6a:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8016c6e:	b2bf      	uxth	r7, r7
 8016c70:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8016c74:	f7ff fc4c 	bl	8016510 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016c78:	e7ef      	b.n	8016c5a <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 8016c7a:	4a9e      	ldr	r2, [pc, #632]	; (8016ef4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8016c7c:	6813      	ldr	r3, [r2, #0]
 8016c7e:	4690      	mov	r8, r2
 8016c80:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016c84:	2b01      	cmp	r3, #1
 8016c86:	f040 80e4 	bne.w	8016e52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 8016c8a:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8016c8e:	4629      	mov	r1, r5
 8016c90:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 8016c94:	2500      	movs	r5, #0
 8016c96:	33aa      	adds	r3, #170	; 0xaa
 8016c98:	428f      	cmp	r7, r1
 8016c9a:	f103 0308 	add.w	r3, r3, #8
 8016c9e:	dd0a      	ble.n	8016cb6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 8016ca0:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8016ca4:	3101      	adds	r1, #1
 8016ca6:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 8016caa:	4402      	add	r2, r0
 8016cac:	b212      	sxth	r2, r2
 8016cae:	4295      	cmp	r5, r2
 8016cb0:	bfb8      	it	lt
 8016cb2:	4615      	movlt	r5, r2
 8016cb4:	e7f0      	b.n	8016c98 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 8016cb6:	4b90      	ldr	r3, [pc, #576]	; (8016ef8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8016cb8:	f8df b238 	ldr.w	fp, [pc, #568]	; 8016ef4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 8016cbc:	881b      	ldrh	r3, [r3, #0]
 8016cbe:	46d8      	mov	r8, fp
 8016cc0:	2b0f      	cmp	r3, #15
 8016cc2:	bf8c      	ite	hi
 8016cc4:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 8016cc8:	f04f 0a01 	movls.w	sl, #1
 8016ccc:	2300      	movs	r3, #0
 8016cce:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8016cd2:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 8016cd6:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8016cda:	4438      	add	r0, r7
 8016cdc:	b207      	sxth	r7, r0
 8016cde:	f8db 0000 	ldr.w	r0, [fp]
 8016ce2:	42bd      	cmp	r5, r7
 8016ce4:	6803      	ldr	r3, [r0, #0]
 8016ce6:	f340 8084 	ble.w	8016df2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8016cea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016cee:	4798      	blx	r3
 8016cf0:	eb07 030a 	add.w	r3, r7, sl
 8016cf4:	4298      	cmp	r0, r3
 8016cf6:	da07      	bge.n	8016d08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8016cf8:	4285      	cmp	r5, r0
 8016cfa:	dd05      	ble.n	8016d08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8016cfc:	4287      	cmp	r7, r0
 8016cfe:	dd6d      	ble.n	8016ddc <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8016d00:	2f00      	cmp	r7, #0
 8016d02:	dd6b      	ble.n	8016ddc <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8016d04:	4628      	mov	r0, r5
 8016d06:	e004      	b.n	8016d12 <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 8016d08:	4287      	cmp	r7, r0
 8016d0a:	dcfb      	bgt.n	8016d04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 8016d0c:	42a8      	cmp	r0, r5
 8016d0e:	bfa8      	it	ge
 8016d10:	4628      	movge	r0, r5
 8016d12:	4b7a      	ldr	r3, [pc, #488]	; (8016efc <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8016d14:	1bc0      	subs	r0, r0, r7
 8016d16:	2200      	movs	r2, #0
 8016d18:	f8ad 7016 	strh.w	r7, [sp, #22]
 8016d1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d20:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016d24:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016d28:	9b02      	ldr	r3, [sp, #8]
 8016d2a:	f8ad 001a 	strh.w	r0, [sp, #26]
 8016d2e:	881f      	ldrh	r7, [r3, #0]
 8016d30:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8016d34:	42bb      	cmp	r3, r7
 8016d36:	d9cc      	bls.n	8016cd2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8016d38:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8016d3c:	ab07      	add	r3, sp, #28
 8016d3e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8016d42:	6851      	ldr	r1, [r2, #4]
 8016d44:	c303      	stmia	r3!, {r0, r1}
 8016d46:	a905      	add	r1, sp, #20
 8016d48:	a807      	add	r0, sp, #28
 8016d4a:	f7ff fa8b 	bl	8016264 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016d4e:	2800      	cmp	r0, #0
 8016d50:	d04c      	beq.n	8016dec <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8016d52:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8016d56:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8016d5a:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 8016d5e:	4686      	mov	lr, r0
 8016d60:	4290      	cmp	r0, r2
 8016d62:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8016d66:	4448      	add	r0, r9
 8016d68:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 8016d6c:	bfb8      	it	lt
 8016d6e:	4696      	movlt	lr, r2
 8016d70:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8016d74:	444a      	add	r2, r9
 8016d76:	b280      	uxth	r0, r0
 8016d78:	4299      	cmp	r1, r3
 8016d7a:	468c      	mov	ip, r1
 8016d7c:	b292      	uxth	r2, r2
 8016d7e:	9303      	str	r3, [sp, #12]
 8016d80:	bfb8      	it	lt
 8016d82:	469c      	movlt	ip, r3
 8016d84:	b203      	sxth	r3, r0
 8016d86:	fa0f f982 	sxth.w	r9, r2
 8016d8a:	f8ad e01c 	strh.w	lr, [sp, #28]
 8016d8e:	f8ad c01e 	strh.w	ip, [sp, #30]
 8016d92:	454b      	cmp	r3, r9
 8016d94:	bfb8      	it	lt
 8016d96:	4602      	movlt	r2, r0
 8016d98:	9b03      	ldr	r3, [sp, #12]
 8016d9a:	eba2 020e 	sub.w	r2, r2, lr
 8016d9e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8016da2:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8016da6:	4411      	add	r1, r2
 8016da8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8016dac:	4413      	add	r3, r2
 8016dae:	b289      	uxth	r1, r1
 8016db0:	b29b      	uxth	r3, r3
 8016db2:	b208      	sxth	r0, r1
 8016db4:	b21a      	sxth	r2, r3
 8016db6:	4290      	cmp	r0, r2
 8016db8:	bfb8      	it	lt
 8016dba:	460b      	movlt	r3, r1
 8016dbc:	eba3 030c 	sub.w	r3, r3, ip
 8016dc0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016dc4:	a807      	add	r0, sp, #28
 8016dc6:	f7fc f906 	bl	8012fd6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016dca:	b920      	cbnz	r0, 8016dd6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8016dcc:	6823      	ldr	r3, [r4, #0]
 8016dce:	a907      	add	r1, sp, #28
 8016dd0:	4620      	mov	r0, r4
 8016dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016dd4:	4798      	blx	r3
 8016dd6:	3701      	adds	r7, #1
 8016dd8:	b2bf      	uxth	r7, r7
 8016dda:	e7a9      	b.n	8016d30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8016ddc:	f8d8 0000 	ldr.w	r0, [r8]
 8016de0:	2101      	movs	r1, #1
 8016de2:	6803      	ldr	r3, [r0, #0]
 8016de4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016de8:	4798      	blx	r3
 8016dea:	e772      	b.n	8016cd2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8016dec:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8016df0:	e7e8      	b.n	8016dc4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8016df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016df4:	4798      	blx	r3
 8016df6:	4b42      	ldr	r3, [pc, #264]	; (8016f00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 8016df8:	781b      	ldrb	r3, [r3, #0]
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	f43f af29 	beq.w	8016c52 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8016e00:	2300      	movs	r3, #0
 8016e02:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8016e06:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8016e0a:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 8016e0e:	9b02      	ldr	r3, [sp, #8]
 8016e10:	881b      	ldrh	r3, [r3, #0]
 8016e12:	429d      	cmp	r5, r3
 8016e14:	f67f af1d 	bls.w	8016c52 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8016e18:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 8016e1c:	2907      	cmp	r1, #7
 8016e1e:	d815      	bhi.n	8016e4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 8016e20:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8016e24:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8016e28:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8016e2c:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8016e30:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8016e34:	1c4a      	adds	r2, r1, #1
 8016e36:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 8016e3a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8016e3e:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 8016e42:	f8a2 e002 	strh.w	lr, [r2, #2]
 8016e46:	f8a2 c004 	strh.w	ip, [r2, #4]
 8016e4a:	80d7      	strh	r7, [r2, #6]
 8016e4c:	3301      	adds	r3, #1
 8016e4e:	b29b      	uxth	r3, r3
 8016e50:	e7df      	b.n	8016e12 <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 8016e52:	2b02      	cmp	r3, #2
 8016e54:	f040 8135 	bne.w	80170c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8016e58:	4b2a      	ldr	r3, [pc, #168]	; (8016f04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 8016e5a:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 8016e5e:	781b      	ldrb	r3, [r3, #0]
 8016e60:	2b01      	cmp	r3, #1
 8016e62:	f000 809c 	beq.w	8016f9e <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8016e66:	9b02      	ldr	r3, [sp, #8]
 8016e68:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 8016e6c:	f8b3 b000 	ldrh.w	fp, [r3]
 8016e70:	f10b 0b01 	add.w	fp, fp, #1
 8016e74:	fa1f fb8b 	uxth.w	fp, fp
 8016e78:	2a00      	cmp	r2, #0
 8016e7a:	d0bc      	beq.n	8016df6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8016e7c:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 8016e80:	4659      	mov	r1, fp
 8016e82:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 8016e86:	f04f 0800 	mov.w	r8, #0
 8016e8a:	441d      	add	r5, r3
 8016e8c:	b22d      	sxth	r5, r5
 8016e8e:	b28b      	uxth	r3, r1
 8016e90:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8016e94:	429a      	cmp	r2, r3
 8016e96:	f240 80c0 	bls.w	801701a <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 8016e9a:	4427      	add	r7, r4
 8016e9c:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 8016ea0:	4608      	mov	r0, r1
 8016ea2:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 8016ea6:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 8016eaa:	4563      	cmp	r3, ip
 8016eac:	f340 80a2 	ble.w	8016ff4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 8016eb0:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 8016eb4:	4465      	add	r5, ip
 8016eb6:	b22d      	sxth	r5, r5
 8016eb8:	429d      	cmp	r5, r3
 8016eba:	bfa8      	it	ge
 8016ebc:	461d      	movge	r5, r3
 8016ebe:	3101      	adds	r1, #1
 8016ec0:	4680      	mov	r8, r0
 8016ec2:	e7e4      	b.n	8016e8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 8016ec4:	d10b      	bne.n	8016ede <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 8016ec6:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 8016eca:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8016ece:	458c      	cmp	ip, r1
 8016ed0:	bfb4      	ite	lt
 8016ed2:	469c      	movlt	ip, r3
 8016ed4:	46bc      	movge	ip, r7
 8016ed6:	4572      	cmp	r2, lr
 8016ed8:	bfb8      	it	lt
 8016eda:	4672      	movlt	r2, lr
 8016edc:	e087      	b.n	8016fee <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8016ede:	428a      	cmp	r2, r1
 8016ee0:	46bc      	mov	ip, r7
 8016ee2:	bfb8      	it	lt
 8016ee4:	460a      	movlt	r2, r1
 8016ee6:	e082      	b.n	8016fee <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8016ee8:	2400b0bc 	.word	0x2400b0bc
 8016eec:	2400b0c8 	.word	0x2400b0c8
 8016ef0:	2400004e 	.word	0x2400004e
 8016ef4:	2400b084 	.word	0x2400b084
 8016ef8:	2400b07a 	.word	0x2400b07a
 8016efc:	2400b078 	.word	0x2400b078
 8016f00:	2400b082 	.word	0x2400b082
 8016f04:	2400b07c 	.word	0x2400b07c
 8016f08:	1961      	adds	r1, r4, r5
 8016f0a:	ab07      	add	r3, sp, #28
 8016f0c:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8016f10:	6849      	ldr	r1, [r1, #4]
 8016f12:	c303      	stmia	r3!, {r0, r1}
 8016f14:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8016f18:	a807      	add	r0, sp, #28
 8016f1a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8016f1e:	2b13      	cmp	r3, #19
 8016f20:	440b      	add	r3, r1
 8016f22:	bfd8      	it	le
 8016f24:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8016f28:	1a9b      	subs	r3, r3, r2
 8016f2a:	f8ad 201c 	strh.w	r2, [sp, #28]
 8016f2e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016f32:	f7ff f87b 	bl	801602c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016f36:	a807      	add	r0, sp, #28
 8016f38:	f7fc f84d 	bl	8012fd6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016f3c:	bb78      	cbnz	r0, 8016f9e <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8016f3e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8016f42:	4425      	add	r5, r4
 8016f44:	f8d8 0000 	ldr.w	r0, [r8]
 8016f48:	f1bc 0f14 	cmp.w	ip, #20
 8016f4c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8016f50:	f8d0 e000 	ldr.w	lr, [r0]
 8016f54:	bfa8      	it	ge
 8016f56:	f04f 0c14 	movge.w	ip, #20
 8016f5a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8016f5e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8016f62:	fa1f fc8c 	uxth.w	ip, ip
 8016f66:	f8cd c000 	str.w	ip, [sp]
 8016f6a:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 8016f6e:	47d0      	blx	sl
 8016f70:	4682      	mov	sl, r0
 8016f72:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8016f76:	a807      	add	r0, sp, #28
 8016f78:	f7ff f83e 	bl	8015ff8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8016f7c:	6823      	ldr	r3, [r4, #0]
 8016f7e:	4620      	mov	r0, r4
 8016f80:	a907      	add	r1, sp, #28
 8016f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f84:	4798      	blx	r3
 8016f86:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8016f8a:	eba0 000a 	sub.w	r0, r0, sl
 8016f8e:	b200      	sxth	r0, r0
 8016f90:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 8016f94:	b918      	cbnz	r0, 8016f9e <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8016f96:	b2b9      	uxth	r1, r7
 8016f98:	4648      	mov	r0, r9
 8016f9a:	f7ff faa5 	bl	80164e8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016f9e:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 8016fa2:	f1bb 0f00 	cmp.w	fp, #0
 8016fa6:	f43f af26 	beq.w	8016df6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8016faa:	9b02      	ldr	r3, [sp, #8]
 8016fac:	2700      	movs	r7, #0
 8016fae:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 8016fb2:	881b      	ldrh	r3, [r3, #0]
 8016fb4:	3301      	adds	r3, #1
 8016fb6:	b29b      	uxth	r3, r3
 8016fb8:	b299      	uxth	r1, r3
 8016fba:	00fd      	lsls	r5, r7, #3
 8016fbc:	458b      	cmp	fp, r1
 8016fbe:	d9a3      	bls.n	8016f08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 8016fc0:	4425      	add	r5, r4
 8016fc2:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8016fc6:	469c      	mov	ip, r3
 8016fc8:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 8016fcc:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8016fd0:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 8016fd4:	4408      	add	r0, r1
 8016fd6:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 8016fda:	4471      	add	r1, lr
 8016fdc:	b200      	sxth	r0, r0
 8016fde:	b209      	sxth	r1, r1
 8016fe0:	4288      	cmp	r0, r1
 8016fe2:	f6bf af6f 	bge.w	8016ec4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 8016fe6:	4586      	cmp	lr, r0
 8016fe8:	4672      	mov	r2, lr
 8016fea:	bfb8      	it	lt
 8016fec:	4602      	movlt	r2, r0
 8016fee:	3301      	adds	r3, #1
 8016ff0:	4667      	mov	r7, ip
 8016ff2:	e7e1      	b.n	8016fb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 8016ff4:	d10c      	bne.n	8017010 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 8016ff6:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 8016ffa:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 8016ffe:	4287      	cmp	r7, r0
 8017000:	bfb4      	ite	lt
 8017002:	4608      	movlt	r0, r1
 8017004:	4640      	movge	r0, r8
 8017006:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 801700a:	443b      	add	r3, r7
 801700c:	b21b      	sxth	r3, r3
 801700e:	e753      	b.n	8016eb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8017010:	4565      	cmp	r5, ip
 8017012:	4640      	mov	r0, r8
 8017014:	bfa8      	it	ge
 8017016:	4665      	movge	r5, ip
 8017018:	e751      	b.n	8016ebe <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 801701a:	eb09 0007 	add.w	r0, r9, r7
 801701e:	4427      	add	r7, r4
 8017020:	9203      	str	r2, [sp, #12]
 8017022:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 8017026:	f1ba 0f13 	cmp.w	sl, #19
 801702a:	bfde      	ittt	le
 801702c:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 8017030:	4455      	addle	r5, sl
 8017032:	b22d      	sxthle	r5, r5
 8017034:	f7fb ffcf 	bl	8012fd6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017038:	9a03      	ldr	r2, [sp, #12]
 801703a:	2800      	cmp	r0, #0
 801703c:	f47f af1c 	bne.w	8016e78 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 8017040:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 8017044:	fa1f fa8a 	uxth.w	sl, sl
 8017048:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801704c:	1aad      	subs	r5, r5, r2
 801704e:	4829      	ldr	r0, [pc, #164]	; (80170f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 8017050:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 8017054:	2d14      	cmp	r5, #20
 8017056:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 801705a:	6800      	ldr	r0, [r0, #0]
 801705c:	bfa8      	it	ge
 801705e:	2514      	movge	r5, #20
 8017060:	f8ad 101c 	strh.w	r1, [sp, #28]
 8017064:	f8ad 201e 	strh.w	r2, [sp, #30]
 8017068:	b289      	uxth	r1, r1
 801706a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801706e:	b2ad      	uxth	r5, r5
 8017070:	f8d0 c000 	ldr.w	ip, [r0]
 8017074:	b292      	uxth	r2, r2
 8017076:	4555      	cmp	r5, sl
 8017078:	bf94      	ite	ls
 801707a:	9500      	strls	r5, [sp, #0]
 801707c:	f8cd a000 	strhi.w	sl, [sp]
 8017080:	b29b      	uxth	r3, r3
 8017082:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 8017086:	47a8      	blx	r5
 8017088:	6823      	ldr	r3, [r4, #0]
 801708a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801708e:	a907      	add	r1, sp, #28
 8017090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017092:	4620      	mov	r0, r4
 8017094:	4798      	blx	r3
 8017096:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801709a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801709e:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 80170a2:	1a5b      	subs	r3, r3, r1
 80170a4:	440a      	add	r2, r1
 80170a6:	b21b      	sxth	r3, r3
 80170a8:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 80170ac:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	f47f aed8 	bne.w	8016e66 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 80170b6:	fa1f f188 	uxth.w	r1, r8
 80170ba:	4648      	mov	r0, r9
 80170bc:	f7ff fa14 	bl	80164e8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80170c0:	e6d1      	b.n	8016e66 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 80170c2:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80170c6:	42ab      	cmp	r3, r5
 80170c8:	f67f ae95 	bls.w	8016df6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80170cc:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80170d0:	ab07      	add	r3, sp, #28
 80170d2:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80170d6:	6851      	ldr	r1, [r2, #4]
 80170d8:	c303      	stmia	r3!, {r0, r1}
 80170da:	a807      	add	r0, sp, #28
 80170dc:	f7fb ff7b 	bl	8012fd6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80170e0:	b920      	cbnz	r0, 80170ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 80170e2:	6823      	ldr	r3, [r4, #0]
 80170e4:	a907      	add	r1, sp, #28
 80170e6:	4620      	mov	r0, r4
 80170e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170ea:	4798      	blx	r3
 80170ec:	3501      	adds	r5, #1
 80170ee:	b2ad      	uxth	r5, r5
 80170f0:	e7e7      	b.n	80170c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 80170f2:	bf00      	nop
 80170f4:	2400b084 	.word	0x2400b084

080170f8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80170f8:	4b03      	ldr	r3, [pc, #12]	; (8017108 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80170fa:	2200      	movs	r2, #0
 80170fc:	801a      	strh	r2, [r3, #0]
 80170fe:	805a      	strh	r2, [r3, #2]
 8017100:	809a      	strh	r2, [r3, #4]
 8017102:	80da      	strh	r2, [r3, #6]
 8017104:	4770      	bx	lr
 8017106:	bf00      	nop
 8017108:	2400b0c8 	.word	0x2400b0c8

0801710c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801710c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017110:	b09d      	sub	sp, #116	; 0x74
 8017112:	4606      	mov	r6, r0
 8017114:	4614      	mov	r4, r2
 8017116:	468a      	mov	sl, r1
 8017118:	a803      	add	r0, sp, #12
 801711a:	461d      	mov	r5, r3
 801711c:	f000 fd64 	bl	8017be8 <_ZN8touchgfx12TextProviderC1Ev>
 8017120:	6833      	ldr	r3, [r6, #0]
 8017122:	4630      	mov	r0, r6
 8017124:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8017128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801712a:	4798      	blx	r3
 801712c:	6833      	ldr	r3, [r6, #0]
 801712e:	4607      	mov	r7, r0
 8017130:	4630      	mov	r0, r6
 8017132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017134:	4798      	blx	r3
 8017136:	462a      	mov	r2, r5
 8017138:	2500      	movs	r5, #0
 801713a:	4621      	mov	r1, r4
 801713c:	9000      	str	r0, [sp, #0]
 801713e:	463b      	mov	r3, r7
 8017140:	462c      	mov	r4, r5
 8017142:	46a9      	mov	r9, r5
 8017144:	46a8      	mov	r8, r5
 8017146:	a803      	add	r0, sp, #12
 8017148:	f000 fda9 	bl	8017c9e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801714c:	2300      	movs	r3, #0
 801714e:	9302      	str	r3, [sp, #8]
 8017150:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017154:	429c      	cmp	r4, r3
 8017156:	d002      	beq.n	801715e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8017158:	455c      	cmp	r4, fp
 801715a:	bf18      	it	ne
 801715c:	4625      	movne	r5, r4
 801715e:	ab02      	add	r3, sp, #8
 8017160:	4632      	mov	r2, r6
 8017162:	4651      	mov	r1, sl
 8017164:	a803      	add	r0, sp, #12
 8017166:	f001 f89f 	bl	80182a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801716a:	4604      	mov	r4, r0
 801716c:	b108      	cbz	r0, 8017172 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801716e:	280a      	cmp	r0, #10
 8017170:	d10a      	bne.n	8017188 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8017172:	45c1      	cmp	r9, r8
 8017174:	bf38      	it	cc
 8017176:	46c1      	movcc	r9, r8
 8017178:	f04f 0800 	mov.w	r8, #0
 801717c:	2c00      	cmp	r4, #0
 801717e:	d1e5      	bne.n	801714c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8017180:	4648      	mov	r0, r9
 8017182:	b01d      	add	sp, #116	; 0x74
 8017184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017188:	9a02      	ldr	r2, [sp, #8]
 801718a:	2a00      	cmp	r2, #0
 801718c:	d0de      	beq.n	801714c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801718e:	7b57      	ldrb	r7, [r2, #13]
 8017190:	4629      	mov	r1, r5
 8017192:	6833      	ldr	r3, [r6, #0]
 8017194:	007f      	lsls	r7, r7, #1
 8017196:	8894      	ldrh	r4, [r2, #4]
 8017198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801719a:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801719e:	7a97      	ldrb	r7, [r2, #10]
 80171a0:	4307      	orrs	r7, r0
 80171a2:	4630      	mov	r0, r6
 80171a4:	4798      	blx	r3
 80171a6:	4438      	add	r0, r7
 80171a8:	4480      	add	r8, r0
 80171aa:	fa1f f888 	uxth.w	r8, r8
 80171ae:	e7e5      	b.n	801717c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080171b0 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80171b0:	b508      	push	{r3, lr}
 80171b2:	6803      	ldr	r3, [r0, #0]
 80171b4:	68db      	ldr	r3, [r3, #12]
 80171b6:	4798      	blx	r3
 80171b8:	b128      	cbz	r0, 80171c6 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80171ba:	7b43      	ldrb	r3, [r0, #13]
 80171bc:	7a80      	ldrb	r0, [r0, #10]
 80171be:	005b      	lsls	r3, r3, #1
 80171c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80171c4:	4318      	orrs	r0, r3
 80171c6:	bd08      	pop	{r3, pc}

080171c8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80171c8:	b40e      	push	{r1, r2, r3}
 80171ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171cc:	b09e      	sub	sp, #120	; 0x78
 80171ce:	4605      	mov	r5, r0
 80171d0:	ab23      	add	r3, sp, #140	; 0x8c
 80171d2:	a805      	add	r0, sp, #20
 80171d4:	f853 4b04 	ldr.w	r4, [r3], #4
 80171d8:	9303      	str	r3, [sp, #12]
 80171da:	f000 fd05 	bl	8017be8 <_ZN8touchgfx12TextProviderC1Ev>
 80171de:	682b      	ldr	r3, [r5, #0]
 80171e0:	4628      	mov	r0, r5
 80171e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80171e4:	4798      	blx	r3
 80171e6:	682b      	ldr	r3, [r5, #0]
 80171e8:	4606      	mov	r6, r0
 80171ea:	4628      	mov	r0, r5
 80171ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80171ee:	4798      	blx	r3
 80171f0:	4633      	mov	r3, r6
 80171f2:	4621      	mov	r1, r4
 80171f4:	ae1e      	add	r6, sp, #120	; 0x78
 80171f6:	2400      	movs	r4, #0
 80171f8:	9000      	str	r0, [sp, #0]
 80171fa:	9a03      	ldr	r2, [sp, #12]
 80171fc:	a805      	add	r0, sp, #20
 80171fe:	f000 fd4e 	bl	8017c9e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017202:	f846 4d68 	str.w	r4, [r6, #-104]!
 8017206:	462a      	mov	r2, r5
 8017208:	4633      	mov	r3, r6
 801720a:	4621      	mov	r1, r4
 801720c:	a805      	add	r0, sp, #20
 801720e:	f001 f84b 	bl	80182a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017212:	b300      	cbz	r0, 8017256 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8017214:	280a      	cmp	r0, #10
 8017216:	d01a      	beq.n	801724e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017218:	9f04      	ldr	r7, [sp, #16]
 801721a:	b1c7      	cbz	r7, 801724e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801721c:	7b78      	ldrb	r0, [r7, #13]
 801721e:	7a3b      	ldrb	r3, [r7, #8]
 8017220:	00c1      	lsls	r1, r0, #3
 8017222:	88aa      	ldrh	r2, [r5, #4]
 8017224:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8017228:	4319      	orrs	r1, r3
 801722a:	0643      	lsls	r3, r0, #25
 801722c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8017230:	bf48      	it	mi
 8017232:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8017236:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801723a:	bf48      	it	mi
 801723c:	b219      	sxthmi	r1, r3
 801723e:	79fb      	ldrb	r3, [r7, #7]
 8017240:	4303      	orrs	r3, r0
 8017242:	4413      	add	r3, r2
 8017244:	1a5b      	subs	r3, r3, r1
 8017246:	b29b      	uxth	r3, r3
 8017248:	42a3      	cmp	r3, r4
 801724a:	bfc8      	it	gt
 801724c:	b21c      	sxthgt	r4, r3
 801724e:	4633      	mov	r3, r6
 8017250:	462a      	mov	r2, r5
 8017252:	2100      	movs	r1, #0
 8017254:	e7da      	b.n	801720c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8017256:	b2a0      	uxth	r0, r4
 8017258:	b01e      	add	sp, #120	; 0x78
 801725a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801725e:	b003      	add	sp, #12
 8017260:	4770      	bx	lr

08017262 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8017262:	b40e      	push	{r1, r2, r3}
 8017264:	b570      	push	{r4, r5, r6, lr}
 8017266:	b09d      	sub	sp, #116	; 0x74
 8017268:	4604      	mov	r4, r0
 801726a:	ab21      	add	r3, sp, #132	; 0x84
 801726c:	a803      	add	r0, sp, #12
 801726e:	f853 5b04 	ldr.w	r5, [r3], #4
 8017272:	9302      	str	r3, [sp, #8]
 8017274:	f000 fcb8 	bl	8017be8 <_ZN8touchgfx12TextProviderC1Ev>
 8017278:	6823      	ldr	r3, [r4, #0]
 801727a:	4620      	mov	r0, r4
 801727c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801727e:	4798      	blx	r3
 8017280:	6823      	ldr	r3, [r4, #0]
 8017282:	4606      	mov	r6, r0
 8017284:	4620      	mov	r0, r4
 8017286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017288:	2401      	movs	r4, #1
 801728a:	4798      	blx	r3
 801728c:	4633      	mov	r3, r6
 801728e:	9000      	str	r0, [sp, #0]
 8017290:	4629      	mov	r1, r5
 8017292:	9a02      	ldr	r2, [sp, #8]
 8017294:	a803      	add	r0, sp, #12
 8017296:	f000 fd02 	bl	8017c9e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801729a:	a803      	add	r0, sp, #12
 801729c:	f001 f8d0 	bl	8018440 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80172a0:	b2a3      	uxth	r3, r4
 80172a2:	b138      	cbz	r0, 80172b4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 80172a4:	280a      	cmp	r0, #10
 80172a6:	a803      	add	r0, sp, #12
 80172a8:	bf04      	itt	eq
 80172aa:	3301      	addeq	r3, #1
 80172ac:	b21c      	sxtheq	r4, r3
 80172ae:	f001 f8c7 	bl	8018440 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80172b2:	e7f5      	b.n	80172a0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 80172b4:	4618      	mov	r0, r3
 80172b6:	b01d      	add	sp, #116	; 0x74
 80172b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80172bc:	b003      	add	sp, #12
 80172be:	4770      	bx	lr

080172c0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80172c0:	b40e      	push	{r1, r2, r3}
 80172c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172c4:	b09e      	sub	sp, #120	; 0x78
 80172c6:	4604      	mov	r4, r0
 80172c8:	ab23      	add	r3, sp, #140	; 0x8c
 80172ca:	a805      	add	r0, sp, #20
 80172cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80172d0:	9303      	str	r3, [sp, #12]
 80172d2:	f000 fc89 	bl	8017be8 <_ZN8touchgfx12TextProviderC1Ev>
 80172d6:	6823      	ldr	r3, [r4, #0]
 80172d8:	4620      	mov	r0, r4
 80172da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80172dc:	4798      	blx	r3
 80172de:	6823      	ldr	r3, [r4, #0]
 80172e0:	4606      	mov	r6, r0
 80172e2:	4620      	mov	r0, r4
 80172e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80172e6:	4798      	blx	r3
 80172e8:	4633      	mov	r3, r6
 80172ea:	4629      	mov	r1, r5
 80172ec:	9000      	str	r0, [sp, #0]
 80172ee:	9a03      	ldr	r2, [sp, #12]
 80172f0:	a805      	add	r0, sp, #20
 80172f2:	f000 fcd4 	bl	8017c9e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80172f6:	ad1e      	add	r5, sp, #120	; 0x78
 80172f8:	2100      	movs	r1, #0
 80172fa:	26ff      	movs	r6, #255	; 0xff
 80172fc:	4622      	mov	r2, r4
 80172fe:	a805      	add	r0, sp, #20
 8017300:	f845 1d68 	str.w	r1, [r5, #-104]!
 8017304:	462b      	mov	r3, r5
 8017306:	f000 ffcf 	bl	80182a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801730a:	b1d8      	cbz	r0, 8017344 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801730c:	280a      	cmp	r0, #10
 801730e:	d012      	beq.n	8017336 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8017310:	9804      	ldr	r0, [sp, #16]
 8017312:	b180      	cbz	r0, 8017336 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8017314:	7b47      	ldrb	r7, [r0, #13]
 8017316:	7922      	ldrb	r2, [r4, #4]
 8017318:	00fb      	lsls	r3, r7, #3
 801731a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801731e:	7a03      	ldrb	r3, [r0, #8]
 8017320:	430b      	orrs	r3, r1
 8017322:	0679      	lsls	r1, r7, #25
 8017324:	bf44      	itt	mi
 8017326:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801732a:	b21b      	sxthmi	r3, r3
 801732c:	1ad3      	subs	r3, r2, r3
 801732e:	b2db      	uxtb	r3, r3
 8017330:	429e      	cmp	r6, r3
 8017332:	bf28      	it	cs
 8017334:	461e      	movcs	r6, r3
 8017336:	462b      	mov	r3, r5
 8017338:	4622      	mov	r2, r4
 801733a:	2100      	movs	r1, #0
 801733c:	a805      	add	r0, sp, #20
 801733e:	f000 ffb3 	bl	80182a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017342:	e7e2      	b.n	801730a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 8017344:	4630      	mov	r0, r6
 8017346:	b01e      	add	sp, #120	; 0x78
 8017348:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801734c:	b003      	add	sp, #12
 801734e:	4770      	bx	lr

08017350 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8017350:	b513      	push	{r0, r1, r4, lr}
 8017352:	6803      	ldr	r3, [r0, #0]
 8017354:	2400      	movs	r4, #0
 8017356:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801735a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801735e:	f8ad 1004 	strh.w	r1, [sp, #4]
 8017362:	4669      	mov	r1, sp
 8017364:	691b      	ldr	r3, [r3, #16]
 8017366:	9400      	str	r4, [sp, #0]
 8017368:	f8ad 2006 	strh.w	r2, [sp, #6]
 801736c:	4798      	blx	r3
 801736e:	b002      	add	sp, #8
 8017370:	bd10      	pop	{r4, pc}

08017372 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8017372:	b538      	push	{r3, r4, r5, lr}
 8017374:	680b      	ldr	r3, [r1, #0]
 8017376:	460c      	mov	r4, r1
 8017378:	4605      	mov	r5, r0
 801737a:	68db      	ldr	r3, [r3, #12]
 801737c:	4798      	blx	r3
 801737e:	6823      	ldr	r3, [r4, #0]
 8017380:	4620      	mov	r0, r4
 8017382:	4629      	mov	r1, r5
 8017384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017386:	4798      	blx	r3
 8017388:	4628      	mov	r0, r5
 801738a:	bd38      	pop	{r3, r4, r5, pc}

0801738c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801738c:	b410      	push	{r4}
 801738e:	880a      	ldrh	r2, [r1, #0]
 8017390:	8884      	ldrh	r4, [r0, #4]
 8017392:	4422      	add	r2, r4
 8017394:	800a      	strh	r2, [r1, #0]
 8017396:	884a      	ldrh	r2, [r1, #2]
 8017398:	88c4      	ldrh	r4, [r0, #6]
 801739a:	4422      	add	r2, r4
 801739c:	804a      	strh	r2, [r1, #2]
 801739e:	6940      	ldr	r0, [r0, #20]
 80173a0:	b120      	cbz	r0, 80173ac <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80173a2:	6803      	ldr	r3, [r0, #0]
 80173a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80173a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173aa:	4718      	bx	r3
 80173ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80173b0:	4770      	bx	lr

080173b2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80173b2:	b570      	push	{r4, r5, r6, lr}
 80173b4:	8882      	ldrh	r2, [r0, #4]
 80173b6:	460c      	mov	r4, r1
 80173b8:	880b      	ldrh	r3, [r1, #0]
 80173ba:	4605      	mov	r5, r0
 80173bc:	4413      	add	r3, r2
 80173be:	800b      	strh	r3, [r1, #0]
 80173c0:	884b      	ldrh	r3, [r1, #2]
 80173c2:	88c2      	ldrh	r2, [r0, #6]
 80173c4:	4413      	add	r3, r2
 80173c6:	804b      	strh	r3, [r1, #2]
 80173c8:	1d01      	adds	r1, r0, #4
 80173ca:	4620      	mov	r0, r4
 80173cc:	f7fb fdc0 	bl	8012f50 <_ZN8touchgfx4RectaNERKS0_>
 80173d0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	dd0b      	ble.n	80173f0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80173d8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80173dc:	2b00      	cmp	r3, #0
 80173de:	dd07      	ble.n	80173f0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80173e0:	6968      	ldr	r0, [r5, #20]
 80173e2:	b128      	cbz	r0, 80173f0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80173e4:	6803      	ldr	r3, [r0, #0]
 80173e6:	4621      	mov	r1, r4
 80173e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80173ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80173ee:	4718      	bx	r3
 80173f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080173f4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 80173f4:	b570      	push	{r4, r5, r6, lr}
 80173f6:	8882      	ldrh	r2, [r0, #4]
 80173f8:	460c      	mov	r4, r1
 80173fa:	880b      	ldrh	r3, [r1, #0]
 80173fc:	4605      	mov	r5, r0
 80173fe:	4413      	add	r3, r2
 8017400:	800b      	strh	r3, [r1, #0]
 8017402:	884b      	ldrh	r3, [r1, #2]
 8017404:	88c2      	ldrh	r2, [r0, #6]
 8017406:	4413      	add	r3, r2
 8017408:	804b      	strh	r3, [r1, #2]
 801740a:	1d01      	adds	r1, r0, #4
 801740c:	4620      	mov	r0, r4
 801740e:	f7fb fd9f 	bl	8012f50 <_ZN8touchgfx4RectaNERKS0_>
 8017412:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8017416:	2b00      	cmp	r3, #0
 8017418:	dd18      	ble.n	801744c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801741a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801741e:	2b00      	cmp	r3, #0
 8017420:	dd14      	ble.n	801744c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8017422:	6968      	ldr	r0, [r5, #20]
 8017424:	b128      	cbz	r0, 8017432 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8017426:	6803      	ldr	r3, [r0, #0]
 8017428:	4621      	mov	r1, r4
 801742a:	691b      	ldr	r3, [r3, #16]
 801742c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017430:	4718      	bx	r3
 8017432:	4b07      	ldr	r3, [pc, #28]	; (8017450 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8017434:	681b      	ldr	r3, [r3, #0]
 8017436:	3304      	adds	r3, #4
 8017438:	429d      	cmp	r5, r3
 801743a:	d107      	bne.n	801744c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801743c:	f7fe fff0 	bl	8016420 <_ZN8touchgfx11Application11getInstanceEv>
 8017440:	6821      	ldr	r1, [r4, #0]
 8017442:	6862      	ldr	r2, [r4, #4]
 8017444:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017448:	f7ff b862 	b.w	8016510 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801744c:	bd70      	pop	{r4, r5, r6, pc}
 801744e:	bf00      	nop
 8017450:	2400b0c0 	.word	0x2400b0c0

08017454 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8017454:	b570      	push	{r4, r5, r6, lr}
 8017456:	4604      	mov	r4, r0
 8017458:	4616      	mov	r6, r2
 801745a:	460d      	mov	r5, r1
 801745c:	b901      	cbnz	r1, 8017460 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801745e:	b192      	cbz	r2, 8017486 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8017460:	6823      	ldr	r3, [r4, #0]
 8017462:	4620      	mov	r0, r4
 8017464:	699b      	ldr	r3, [r3, #24]
 8017466:	4798      	blx	r3
 8017468:	88e2      	ldrh	r2, [r4, #6]
 801746a:	88a1      	ldrh	r1, [r4, #4]
 801746c:	4620      	mov	r0, r4
 801746e:	4432      	add	r2, r6
 8017470:	4429      	add	r1, r5
 8017472:	b212      	sxth	r2, r2
 8017474:	b209      	sxth	r1, r1
 8017476:	f7ed f9d6 	bl	8004826 <_ZN8touchgfx8Drawable5setXYEss>
 801747a:	6823      	ldr	r3, [r4, #0]
 801747c:	4620      	mov	r0, r4
 801747e:	699b      	ldr	r3, [r3, #24]
 8017480:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017484:	4718      	bx	r3
 8017486:	bd70      	pop	{r4, r5, r6, pc}

08017488 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8017488:	b510      	push	{r4, lr}
 801748a:	2300      	movs	r3, #0
 801748c:	4604      	mov	r4, r0
 801748e:	4608      	mov	r0, r1
 8017490:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8017494:	8023      	strh	r3, [r4, #0]
 8017496:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801749a:	8063      	strh	r3, [r4, #2]
 801749c:	6803      	ldr	r3, [r0, #0]
 801749e:	80a1      	strh	r1, [r4, #4]
 80174a0:	4621      	mov	r1, r4
 80174a2:	80e2      	strh	r2, [r4, #6]
 80174a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174a6:	4798      	blx	r3
 80174a8:	4620      	mov	r0, r4
 80174aa:	bd10      	pop	{r4, pc}

080174ac <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 80174ac:	b530      	push	{r4, r5, lr}
 80174ae:	8083      	strh	r3, [r0, #4]
 80174b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80174b4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80174b8:	7183      	strb	r3, [r0, #6]
 80174ba:	79c3      	ldrb	r3, [r0, #7]
 80174bc:	6101      	str	r1, [r0, #16]
 80174be:	f365 0306 	bfi	r3, r5, #0, #7
 80174c2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80174c6:	8282      	strh	r2, [r0, #20]
 80174c8:	f365 13c7 	bfi	r3, r5, #7, #1
 80174cc:	71c3      	strb	r3, [r0, #7]
 80174ce:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80174d2:	7203      	strb	r3, [r0, #8]
 80174d4:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80174d8:	7243      	strb	r3, [r0, #9]
 80174da:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80174de:	8143      	strh	r3, [r0, #10]
 80174e0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80174e4:	8183      	strh	r3, [r0, #12]
 80174e6:	4b01      	ldr	r3, [pc, #4]	; (80174ec <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 80174e8:	6003      	str	r3, [r0, #0]
 80174ea:	bd30      	pop	{r4, r5, pc}
 80174ec:	08027e70 	.word	0x08027e70

080174f0 <_ZNK8touchgfx9ConstFont4findEt>:
 80174f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80174f2:	6904      	ldr	r4, [r0, #16]
 80174f4:	b3bc      	cbz	r4, 8017566 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80174f6:	88a3      	ldrh	r3, [r4, #4]
 80174f8:	8a82      	ldrh	r2, [r0, #20]
 80174fa:	1acb      	subs	r3, r1, r3
 80174fc:	f102 32ff 	add.w	r2, r2, #4294967295
 8017500:	d431      	bmi.n	8017566 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017502:	4293      	cmp	r3, r2
 8017504:	dd0c      	ble.n	8017520 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8017506:	230e      	movs	r3, #14
 8017508:	fb03 4302 	mla	r3, r3, r2, r4
 801750c:	889b      	ldrh	r3, [r3, #4]
 801750e:	1a5b      	subs	r3, r3, r1
 8017510:	1ad3      	subs	r3, r2, r3
 8017512:	429a      	cmp	r2, r3
 8017514:	db27      	blt.n	8017566 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017516:	2b00      	cmp	r3, #0
 8017518:	bfbc      	itt	lt
 801751a:	2302      	movlt	r3, #2
 801751c:	fb92 f3f3 	sdivlt	r3, r2, r3
 8017520:	2500      	movs	r5, #0
 8017522:	260e      	movs	r6, #14
 8017524:	4295      	cmp	r5, r2
 8017526:	dc1e      	bgt.n	8017566 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017528:	fb06 4003 	mla	r0, r6, r3, r4
 801752c:	8887      	ldrh	r7, [r0, #4]
 801752e:	42b9      	cmp	r1, r7
 8017530:	d01a      	beq.n	8017568 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8017532:	d20d      	bcs.n	8017550 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8017534:	1e5a      	subs	r2, r3, #1
 8017536:	4295      	cmp	r5, r2
 8017538:	dc15      	bgt.n	8017566 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801753a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801753e:	1a5b      	subs	r3, r3, r1
 8017540:	1ad3      	subs	r3, r2, r3
 8017542:	429a      	cmp	r2, r3
 8017544:	db0f      	blt.n	8017566 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017546:	429d      	cmp	r5, r3
 8017548:	ddec      	ble.n	8017524 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801754a:	1953      	adds	r3, r2, r5
 801754c:	105b      	asrs	r3, r3, #1
 801754e:	e7e9      	b.n	8017524 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8017550:	1c5d      	adds	r5, r3, #1
 8017552:	42aa      	cmp	r2, r5
 8017554:	db07      	blt.n	8017566 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017556:	8a43      	ldrh	r3, [r0, #18]
 8017558:	1acb      	subs	r3, r1, r3
 801755a:	442b      	add	r3, r5
 801755c:	429d      	cmp	r5, r3
 801755e:	dc02      	bgt.n	8017566 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017560:	429a      	cmp	r2, r3
 8017562:	dadf      	bge.n	8017524 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8017564:	e7f1      	b.n	801754a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8017566:	2000      	movs	r0, #0
 8017568:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801756a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801756a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801756c:	4604      	mov	r4, r0
 801756e:	4617      	mov	r7, r2
 8017570:	461e      	mov	r6, r3
 8017572:	b911      	cbnz	r1, 801757a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8017574:	2500      	movs	r5, #0
 8017576:	4628      	mov	r0, r5
 8017578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801757a:	290a      	cmp	r1, #10
 801757c:	d0fa      	beq.n	8017574 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801757e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8017582:	4291      	cmp	r1, r2
 8017584:	d0f6      	beq.n	8017574 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017586:	f242 020b 	movw	r2, #8203	; 0x200b
 801758a:	4291      	cmp	r1, r2
 801758c:	d0f2      	beq.n	8017574 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801758e:	f7ff ffaf 	bl	80174f0 <_ZNK8touchgfx9ConstFont4findEt>
 8017592:	4605      	mov	r5, r0
 8017594:	b950      	cbnz	r0, 80175ac <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8017596:	6823      	ldr	r3, [r4, #0]
 8017598:	4620      	mov	r0, r4
 801759a:	691b      	ldr	r3, [r3, #16]
 801759c:	4798      	blx	r3
 801759e:	4601      	mov	r1, r0
 80175a0:	4620      	mov	r0, r4
 80175a2:	f7ff ffa5 	bl	80174f0 <_ZNK8touchgfx9ConstFont4findEt>
 80175a6:	4605      	mov	r5, r0
 80175a8:	2800      	cmp	r0, #0
 80175aa:	d0e3      	beq.n	8017574 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80175ac:	6823      	ldr	r3, [r4, #0]
 80175ae:	4629      	mov	r1, r5
 80175b0:	4620      	mov	r0, r4
 80175b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80175b4:	4798      	blx	r3
 80175b6:	6038      	str	r0, [r7, #0]
 80175b8:	6823      	ldr	r3, [r4, #0]
 80175ba:	4620      	mov	r0, r4
 80175bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80175be:	4798      	blx	r3
 80175c0:	7030      	strb	r0, [r6, #0]
 80175c2:	e7d8      	b.n	8017576 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080175c4 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 80175c4:	2000      	movs	r0, #0
 80175c6:	4770      	bx	lr

080175c8 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 80175c8:	2001      	movs	r0, #1
 80175ca:	4770      	bx	lr

080175cc <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 80175cc:	2002      	movs	r0, #2
 80175ce:	4770      	bx	lr

080175d0 <_ZN8touchgfx12GestureEventD1Ev>:
 80175d0:	4770      	bx	lr

080175d2 <_ZN8touchgfx9DragEventD1Ev>:
 80175d2:	4770      	bx	lr

080175d4 <_ZN8touchgfx10ClickEventD1Ev>:
 80175d4:	4770      	bx	lr

080175d6 <_ZN8touchgfx10ClickEventD0Ev>:
 80175d6:	b510      	push	{r4, lr}
 80175d8:	4604      	mov	r4, r0
 80175da:	210c      	movs	r1, #12
 80175dc:	f00d fc6f 	bl	8024ebe <_ZdlPvj>
 80175e0:	4620      	mov	r0, r4
 80175e2:	bd10      	pop	{r4, pc}

080175e4 <_ZN8touchgfx9DragEventD0Ev>:
 80175e4:	b510      	push	{r4, lr}
 80175e6:	4604      	mov	r4, r0
 80175e8:	2110      	movs	r1, #16
 80175ea:	f00d fc68 	bl	8024ebe <_ZdlPvj>
 80175ee:	4620      	mov	r0, r4
 80175f0:	bd10      	pop	{r4, pc}

080175f2 <_ZN8touchgfx12GestureEventD0Ev>:
 80175f2:	b510      	push	{r4, lr}
 80175f4:	4604      	mov	r4, r0
 80175f6:	210c      	movs	r1, #12
 80175f8:	f00d fc61 	bl	8024ebe <_ZdlPvj>
 80175fc:	4620      	mov	r0, r4
 80175fe:	bd10      	pop	{r4, pc}

08017600 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8017600:	b530      	push	{r4, r5, lr}
 8017602:	460d      	mov	r5, r1
 8017604:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8017606:	b087      	sub	sp, #28
 8017608:	4604      	mov	r4, r0
 801760a:	b301      	cbz	r1, 801764e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801760c:	a801      	add	r0, sp, #4
 801760e:	f7ff ff3b 	bl	8017488 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017612:	892a      	ldrh	r2, [r5, #8]
 8017614:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017618:	7928      	ldrb	r0, [r5, #4]
 801761a:	1ad2      	subs	r2, r2, r3
 801761c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801761e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8017622:	441a      	add	r2, r3
 8017624:	896b      	ldrh	r3, [r5, #10]
 8017626:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801762a:	f88d 0010 	strb.w	r0, [sp, #16]
 801762e:	1b5b      	subs	r3, r3, r5
 8017630:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8017632:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8017634:	442b      	add	r3, r5
 8017636:	4d07      	ldr	r5, [pc, #28]	; (8017654 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8017638:	f8ad 1012 	strh.w	r1, [sp, #18]
 801763c:	a903      	add	r1, sp, #12
 801763e:	9503      	str	r5, [sp, #12]
 8017640:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017644:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017648:	6803      	ldr	r3, [r0, #0]
 801764a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801764c:	4798      	blx	r3
 801764e:	b007      	add	sp, #28
 8017650:	bd30      	pop	{r4, r5, pc}
 8017652:	bf00      	nop
 8017654:	08027ef0 	.word	0x08027ef0

08017658 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8017658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801765c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801765e:	b08a      	sub	sp, #40	; 0x28
 8017660:	4604      	mov	r4, r0
 8017662:	460d      	mov	r5, r1
 8017664:	b113      	cbz	r3, 801766c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8017666:	790b      	ldrb	r3, [r1, #4]
 8017668:	2b00      	cmp	r3, #0
 801766a:	d044      	beq.n	80176f6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801766c:	f104 0804 	add.w	r8, r4, #4
 8017670:	a803      	add	r0, sp, #12
 8017672:	4641      	mov	r1, r8
 8017674:	f7ff ff08 	bl	8017488 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017678:	792b      	ldrb	r3, [r5, #4]
 801767a:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801767e:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8017682:	b983      	cbnz	r3, 80176a6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8017684:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8017688:	892a      	ldrh	r2, [r5, #8]
 801768a:	88e9      	ldrh	r1, [r5, #6]
 801768c:	4640      	mov	r0, r8
 801768e:	1b92      	subs	r2, r2, r6
 8017690:	9301      	str	r3, [sp, #4]
 8017692:	1bc9      	subs	r1, r1, r7
 8017694:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8017698:	b212      	sxth	r2, r2
 801769a:	9300      	str	r3, [sp, #0]
 801769c:	b209      	sxth	r1, r1
 801769e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80176a2:	f7fb fb73 	bl	8012d8c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 80176a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80176a8:	b329      	cbz	r1, 80176f6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80176aa:	a805      	add	r0, sp, #20
 80176ac:	f7ff feec 	bl	8017488 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80176b0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80176b4:	792b      	ldrb	r3, [r5, #4]
 80176b6:	a907      	add	r1, sp, #28
 80176b8:	1abf      	subs	r7, r7, r2
 80176ba:	88ea      	ldrh	r2, [r5, #6]
 80176bc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80176be:	4417      	add	r7, r2
 80176c0:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 80176c2:	f88d 3020 	strb.w	r3, [sp, #32]
 80176c6:	4417      	add	r7, r2
 80176c8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80176cc:	1ab6      	subs	r6, r6, r2
 80176ce:	892a      	ldrh	r2, [r5, #8]
 80176d0:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 80176d4:	4416      	add	r6, r2
 80176d6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80176d8:	4416      	add	r6, r2
 80176da:	4a08      	ldr	r2, [pc, #32]	; (80176fc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 80176dc:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 80176e0:	2600      	movs	r6, #0
 80176e2:	9207      	str	r2, [sp, #28]
 80176e4:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 80176e8:	6803      	ldr	r3, [r0, #0]
 80176ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80176ec:	4798      	blx	r3
 80176ee:	792b      	ldrb	r3, [r5, #4]
 80176f0:	b10b      	cbz	r3, 80176f6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80176f2:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80176f6:	b00a      	add	sp, #40	; 0x28
 80176f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176fc:	08027ec8 	.word	0x08027ec8

08017700 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8017700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017704:	460c      	mov	r4, r1
 8017706:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8017708:	b088      	sub	sp, #32
 801770a:	4605      	mov	r5, r0
 801770c:	2900      	cmp	r1, #0
 801770e:	d06d      	beq.n	80177ec <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8017710:	4668      	mov	r0, sp
 8017712:	f7ff feb9 	bl	8017488 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017716:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8017718:	88e3      	ldrh	r3, [r4, #6]
 801771a:	f9bd 8000 	ldrsh.w	r8, [sp]
 801771e:	440b      	add	r3, r1
 8017720:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8017724:	b21b      	sxth	r3, r3
 8017726:	4543      	cmp	r3, r8
 8017728:	db31      	blt.n	801778e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801772a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801772e:	44c4      	add	ip, r8
 8017730:	fa0f fc8c 	sxth.w	ip, ip
 8017734:	4563      	cmp	r3, ip
 8017736:	da2a      	bge.n	801778e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017738:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801773a:	8926      	ldrh	r6, [r4, #8]
 801773c:	4416      	add	r6, r2
 801773e:	b236      	sxth	r6, r6
 8017740:	42be      	cmp	r6, r7
 8017742:	db24      	blt.n	801778e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017744:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8017748:	4438      	add	r0, r7
 801774a:	b200      	sxth	r0, r0
 801774c:	4286      	cmp	r6, r0
 801774e:	da1e      	bge.n	801778e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017750:	8963      	ldrh	r3, [r4, #10]
 8017752:	4419      	add	r1, r3
 8017754:	b209      	sxth	r1, r1
 8017756:	4541      	cmp	r1, r8
 8017758:	db08      	blt.n	801776c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801775a:	4561      	cmp	r1, ip
 801775c:	da06      	bge.n	801776c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801775e:	89a3      	ldrh	r3, [r4, #12]
 8017760:	441a      	add	r2, r3
 8017762:	b212      	sxth	r2, r2
 8017764:	42ba      	cmp	r2, r7
 8017766:	db01      	blt.n	801776c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8017768:	4282      	cmp	r2, r0
 801776a:	db10      	blt.n	801778e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801776c:	4b21      	ldr	r3, [pc, #132]	; (80177f4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801776e:	a904      	add	r1, sp, #16
 8017770:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8017772:	9304      	str	r3, [sp, #16]
 8017774:	2302      	movs	r3, #2
 8017776:	f88d 3014 	strb.w	r3, [sp, #20]
 801777a:	2300      	movs	r3, #0
 801777c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017780:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017784:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017788:	6803      	ldr	r3, [r0, #0]
 801778a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801778c:	4798      	blx	r3
 801778e:	1d29      	adds	r1, r5, #4
 8017790:	a802      	add	r0, sp, #8
 8017792:	f7ff fe79 	bl	8017488 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017796:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801779a:	88e0      	ldrh	r0, [r4, #6]
 801779c:	eba3 0808 	sub.w	r8, r3, r8
 80177a0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80177a4:	7921      	ldrb	r1, [r4, #4]
 80177a6:	fa1f f888 	uxth.w	r8, r8
 80177aa:	1bdf      	subs	r7, r3, r7
 80177ac:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 80177b0:	b2bb      	uxth	r3, r7
 80177b2:	4440      	add	r0, r8
 80177b4:	8922      	ldrh	r2, [r4, #8]
 80177b6:	8967      	ldrh	r7, [r4, #10]
 80177b8:	4460      	add	r0, ip
 80177ba:	89a4      	ldrh	r4, [r4, #12]
 80177bc:	441a      	add	r2, r3
 80177be:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80177c0:	44b8      	add	r8, r7
 80177c2:	4423      	add	r3, r4
 80177c4:	f8ad 0016 	strh.w	r0, [sp, #22]
 80177c8:	4432      	add	r2, r6
 80177ca:	44e0      	add	r8, ip
 80177cc:	4433      	add	r3, r6
 80177ce:	4c0a      	ldr	r4, [pc, #40]	; (80177f8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 80177d0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80177d2:	f88d 1014 	strb.w	r1, [sp, #20]
 80177d6:	a904      	add	r1, sp, #16
 80177d8:	9404      	str	r4, [sp, #16]
 80177da:	f8ad 2018 	strh.w	r2, [sp, #24]
 80177de:	f8ad 801a 	strh.w	r8, [sp, #26]
 80177e2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80177e6:	6803      	ldr	r3, [r0, #0]
 80177e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80177ea:	4798      	blx	r3
 80177ec:	b008      	add	sp, #32
 80177ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177f2:	bf00      	nop
 80177f4:	08027ec8 	.word	0x08027ec8
 80177f8:	08027edc 	.word	0x08027edc

080177fc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80177fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80177fe:	4604      	mov	r4, r0
 8017800:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8017804:	3201      	adds	r2, #1
 8017806:	d112      	bne.n	801782e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8017808:	2500      	movs	r5, #0
 801780a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801780e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017812:	6803      	ldr	r3, [r0, #0]
 8017814:	9500      	str	r5, [sp, #0]
 8017816:	466d      	mov	r5, sp
 8017818:	f8ad 1004 	strh.w	r1, [sp, #4]
 801781c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017820:	4629      	mov	r1, r5
 8017822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017824:	4798      	blx	r3
 8017826:	e895 0003 	ldmia.w	r5, {r0, r1}
 801782a:	e884 0003 	stmia.w	r4, {r0, r1}
 801782e:	4620      	mov	r0, r4
 8017830:	b003      	add	sp, #12
 8017832:	bd30      	pop	{r4, r5, pc}

08017834 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8017834:	b513      	push	{r0, r1, r4, lr}
 8017836:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801783a:	4604      	mov	r4, r0
 801783c:	3301      	adds	r3, #1
 801783e:	d109      	bne.n	8017854 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8017840:	4601      	mov	r1, r0
 8017842:	4668      	mov	r0, sp
 8017844:	f7ff fe20 	bl	8017488 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017848:	f8bd 3000 	ldrh.w	r3, [sp]
 801784c:	8423      	strh	r3, [r4, #32]
 801784e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017852:	8463      	strh	r3, [r4, #34]	; 0x22
 8017854:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8017858:	b002      	add	sp, #8
 801785a:	bd10      	pop	{r4, pc}

0801785c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801785c:	b513      	push	{r0, r1, r4, lr}
 801785e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8017862:	4604      	mov	r4, r0
 8017864:	3301      	adds	r3, #1
 8017866:	d109      	bne.n	801787c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8017868:	4601      	mov	r1, r0
 801786a:	4668      	mov	r0, sp
 801786c:	f7ff fe0c 	bl	8017488 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017870:	f8bd 3000 	ldrh.w	r3, [sp]
 8017874:	8423      	strh	r3, [r4, #32]
 8017876:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801787a:	8463      	strh	r3, [r4, #34]	; 0x22
 801787c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8017880:	b002      	add	sp, #8
 8017882:	bd10      	pop	{r4, pc}

08017884 <_ZN8touchgfx6ScreenC1Ev>:
 8017884:	b570      	push	{r4, r5, r6, lr}
 8017886:	4b17      	ldr	r3, [pc, #92]	; (80178e4 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8017888:	4605      	mov	r5, r0
 801788a:	4a17      	ldr	r2, [pc, #92]	; (80178e8 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801788c:	2101      	movs	r1, #1
 801788e:	f845 3b04 	str.w	r3, [r5], #4
 8017892:	2300      	movs	r3, #0
 8017894:	6042      	str	r2, [r0, #4]
 8017896:	4604      	mov	r4, r0
 8017898:	8103      	strh	r3, [r0, #8]
 801789a:	8143      	strh	r3, [r0, #10]
 801789c:	8183      	strh	r3, [r0, #12]
 801789e:	81c3      	strh	r3, [r0, #14]
 80178a0:	8203      	strh	r3, [r0, #16]
 80178a2:	8243      	strh	r3, [r0, #18]
 80178a4:	8283      	strh	r3, [r0, #20]
 80178a6:	82c3      	strh	r3, [r0, #22]
 80178a8:	6203      	str	r3, [r0, #32]
 80178aa:	8483      	strh	r3, [r0, #36]	; 0x24
 80178ac:	84c3      	strh	r3, [r0, #38]	; 0x26
 80178ae:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80178b2:	6343      	str	r3, [r0, #52]	; 0x34
 80178b4:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 80178b8:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80178bc:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80178c0:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 80178c4:	4b09      	ldr	r3, [pc, #36]	; (80178ec <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80178c6:	4628      	mov	r0, r5
 80178c8:	f9b3 6000 	ldrsh.w	r6, [r3]
 80178cc:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80178ce:	4a08      	ldr	r2, [pc, #32]	; (80178f0 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80178d0:	f9b2 1000 	ldrsh.w	r1, [r2]
 80178d4:	4798      	blx	r3
 80178d6:	6863      	ldr	r3, [r4, #4]
 80178d8:	4628      	mov	r0, r5
 80178da:	4631      	mov	r1, r6
 80178dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80178de:	4798      	blx	r3
 80178e0:	4620      	mov	r0, r4
 80178e2:	bd70      	pop	{r4, r5, r6, pc}
 80178e4:	08027f04 	.word	0x08027f04
 80178e8:	08027920 	.word	0x08027920
 80178ec:	2400b07a 	.word	0x2400b07a
 80178f0:	2400b078 	.word	0x2400b078

080178f4 <_ZN8touchgfx6Screen4drawEv>:
 80178f4:	4b09      	ldr	r3, [pc, #36]	; (801791c <_ZN8touchgfx6Screen4drawEv+0x28>)
 80178f6:	b507      	push	{r0, r1, r2, lr}
 80178f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80178fc:	2100      	movs	r1, #0
 80178fe:	4b08      	ldr	r3, [pc, #32]	; (8017920 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8017900:	9100      	str	r1, [sp, #0]
 8017902:	4669      	mov	r1, sp
 8017904:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017908:	f8ad 2004 	strh.w	r2, [sp, #4]
 801790c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017910:	6803      	ldr	r3, [r0, #0]
 8017912:	689b      	ldr	r3, [r3, #8]
 8017914:	4798      	blx	r3
 8017916:	b003      	add	sp, #12
 8017918:	f85d fb04 	ldr.w	pc, [sp], #4
 801791c:	2400b078 	.word	0x2400b078
 8017920:	2400b07a 	.word	0x2400b07a

08017924 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8017924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017928:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801792c:	b089      	sub	sp, #36	; 0x24
 801792e:	4680      	mov	r8, r0
 8017930:	460c      	mov	r4, r1
 8017932:	2b00      	cmp	r3, #0
 8017934:	4615      	mov	r5, r2
 8017936:	dd0e      	ble.n	8017956 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017938:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801793c:	2b00      	cmp	r3, #0
 801793e:	dd0a      	ble.n	8017956 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017940:	4628      	mov	r0, r5
 8017942:	f7ff ff5b 	bl	80177fc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017946:	4621      	mov	r1, r4
 8017948:	f7fe fc8c 	bl	8016264 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801794c:	69eb      	ldr	r3, [r5, #28]
 801794e:	b928      	cbnz	r0, 801795c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8017950:	461d      	mov	r5, r3
 8017952:	2b00      	cmp	r3, #0
 8017954:	d1f4      	bne.n	8017940 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8017956:	b009      	add	sp, #36	; 0x24
 8017958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801795c:	ae04      	add	r6, sp, #16
 801795e:	2b00      	cmp	r3, #0
 8017960:	f000 80b5 	beq.w	8017ace <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017964:	682b      	ldr	r3, [r5, #0]
 8017966:	4629      	mov	r1, r5
 8017968:	a802      	add	r0, sp, #8
 801796a:	68db      	ldr	r3, [r3, #12]
 801796c:	4798      	blx	r3
 801796e:	4628      	mov	r0, r5
 8017970:	f7ff ff60 	bl	8017834 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8017974:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8017978:	4407      	add	r7, r0
 801797a:	4628      	mov	r0, r5
 801797c:	f7ff ff6e 	bl	801785c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8017980:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017984:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8017988:	b23f      	sxth	r7, r7
 801798a:	4418      	add	r0, r3
 801798c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8017990:	4621      	mov	r1, r4
 8017992:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017996:	f8ad 0012 	strh.w	r0, [sp, #18]
 801799a:	4630      	mov	r0, r6
 801799c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80179a0:	f8ad 7010 	strh.w	r7, [sp, #16]
 80179a4:	f7fb fad4 	bl	8012f50 <_ZN8touchgfx4RectaNERKS0_>
 80179a8:	4628      	mov	r0, r5
 80179aa:	f7ff ff27 	bl	80177fc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80179ae:	ab06      	add	r3, sp, #24
 80179b0:	4602      	mov	r2, r0
 80179b2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80179b6:	e883 0003 	stmia.w	r3, {r0, r1}
 80179ba:	4611      	mov	r1, r2
 80179bc:	4618      	mov	r0, r3
 80179be:	f7fb fac7 	bl	8012f50 <_ZN8touchgfx4RectaNERKS0_>
 80179c2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80179c6:	f9b4 1000 	ldrsh.w	r1, [r4]
 80179ca:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80179ce:	4299      	cmp	r1, r3
 80179d0:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80179d4:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80179d8:	d10b      	bne.n	80179f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80179da:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80179de:	4552      	cmp	r2, sl
 80179e0:	d107      	bne.n	80179f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80179e2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80179e6:	455a      	cmp	r2, fp
 80179e8:	d103      	bne.n	80179f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80179ea:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80179ee:	454a      	cmp	r2, r9
 80179f0:	d06d      	beq.n	8017ace <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80179f2:	f1bb 0f00 	cmp.w	fp, #0
 80179f6:	dd65      	ble.n	8017ac4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80179f8:	f1b9 0f00 	cmp.w	r9, #0
 80179fc:	dd62      	ble.n	8017ac4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80179fe:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8017a02:	fa1f f08a 	uxth.w	r0, sl
 8017a06:	4552      	cmp	r2, sl
 8017a08:	9000      	str	r0, [sp, #0]
 8017a0a:	da12      	bge.n	8017a32 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8017a0c:	9301      	str	r3, [sp, #4]
 8017a0e:	9b00      	ldr	r3, [sp, #0]
 8017a10:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8017a14:	f8ad 2012 	strh.w	r2, [sp, #18]
 8017a18:	1a9a      	subs	r2, r3, r2
 8017a1a:	f8ad 1010 	strh.w	r1, [sp, #16]
 8017a1e:	4631      	mov	r1, r6
 8017a20:	f8ad 0014 	strh.w	r0, [sp, #20]
 8017a24:	4640      	mov	r0, r8
 8017a26:	f8ad 2016 	strh.w	r2, [sp, #22]
 8017a2a:	69ea      	ldr	r2, [r5, #28]
 8017a2c:	f7ff ff7a 	bl	8017924 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017a30:	9b01      	ldr	r3, [sp, #4]
 8017a32:	f9b4 2000 	ldrsh.w	r2, [r4]
 8017a36:	b29f      	uxth	r7, r3
 8017a38:	429a      	cmp	r2, r3
 8017a3a:	da0d      	bge.n	8017a58 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8017a3c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017a40:	1aba      	subs	r2, r7, r2
 8017a42:	f8ad a012 	strh.w	sl, [sp, #18]
 8017a46:	4631      	mov	r1, r6
 8017a48:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017a4c:	4640      	mov	r0, r8
 8017a4e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8017a52:	69ea      	ldr	r2, [r5, #28]
 8017a54:	f7ff ff66 	bl	8017924 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017a58:	8822      	ldrh	r2, [r4, #0]
 8017a5a:	445f      	add	r7, fp
 8017a5c:	88a3      	ldrh	r3, [r4, #4]
 8017a5e:	b2bf      	uxth	r7, r7
 8017a60:	4413      	add	r3, r2
 8017a62:	b23a      	sxth	r2, r7
 8017a64:	b29b      	uxth	r3, r3
 8017a66:	b219      	sxth	r1, r3
 8017a68:	4291      	cmp	r1, r2
 8017a6a:	dd0d      	ble.n	8017a88 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8017a6c:	1bdb      	subs	r3, r3, r7
 8017a6e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017a72:	f8ad a012 	strh.w	sl, [sp, #18]
 8017a76:	4631      	mov	r1, r6
 8017a78:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017a7c:	4640      	mov	r0, r8
 8017a7e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8017a82:	69ea      	ldr	r2, [r5, #28]
 8017a84:	f7ff ff4e 	bl	8017924 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017a88:	88e2      	ldrh	r2, [r4, #6]
 8017a8a:	8863      	ldrh	r3, [r4, #2]
 8017a8c:	4413      	add	r3, r2
 8017a8e:	9a00      	ldr	r2, [sp, #0]
 8017a90:	444a      	add	r2, r9
 8017a92:	b29b      	uxth	r3, r3
 8017a94:	fa1f f982 	uxth.w	r9, r2
 8017a98:	b219      	sxth	r1, r3
 8017a9a:	fa0f f289 	sxth.w	r2, r9
 8017a9e:	428a      	cmp	r2, r1
 8017aa0:	da15      	bge.n	8017ace <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017aa2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017aa6:	eba3 0309 	sub.w	r3, r3, r9
 8017aaa:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017aae:	f8ad 1014 	strh.w	r1, [sp, #20]
 8017ab2:	4631      	mov	r1, r6
 8017ab4:	f8ad 0010 	strh.w	r0, [sp, #16]
 8017ab8:	f8ad 2012 	strh.w	r2, [sp, #18]
 8017abc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017ac0:	69ea      	ldr	r2, [r5, #28]
 8017ac2:	e001      	b.n	8017ac8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8017ac4:	69ea      	ldr	r2, [r5, #28]
 8017ac6:	4621      	mov	r1, r4
 8017ac8:	4640      	mov	r0, r8
 8017aca:	f7ff ff2b 	bl	8017924 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017ace:	4628      	mov	r0, r5
 8017ad0:	f7ff fe94 	bl	80177fc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017ad4:	6861      	ldr	r1, [r4, #4]
 8017ad6:	4602      	mov	r2, r0
 8017ad8:	4633      	mov	r3, r6
 8017ada:	6820      	ldr	r0, [r4, #0]
 8017adc:	c303      	stmia	r3!, {r0, r1}
 8017ade:	4611      	mov	r1, r2
 8017ae0:	4630      	mov	r0, r6
 8017ae2:	f7fb fa35 	bl	8012f50 <_ZN8touchgfx4RectaNERKS0_>
 8017ae6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	f77f af33 	ble.w	8017956 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017af0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	f77f af2e 	ble.w	8017956 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017afa:	4628      	mov	r0, r5
 8017afc:	f7ff fe9a 	bl	8017834 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8017b00:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8017b04:	1a18      	subs	r0, r3, r0
 8017b06:	f8ad 0010 	strh.w	r0, [sp, #16]
 8017b0a:	4628      	mov	r0, r5
 8017b0c:	f7ff fea6 	bl	801785c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8017b10:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8017b14:	4631      	mov	r1, r6
 8017b16:	1a18      	subs	r0, r3, r0
 8017b18:	f8ad 0012 	strh.w	r0, [sp, #18]
 8017b1c:	4628      	mov	r0, r5
 8017b1e:	682b      	ldr	r3, [r5, #0]
 8017b20:	689b      	ldr	r3, [r3, #8]
 8017b22:	4798      	blx	r3
 8017b24:	e717      	b.n	8017956 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08017b26 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8017b26:	b570      	push	{r4, r5, r6, lr}
 8017b28:	1d06      	adds	r6, r0, #4
 8017b2a:	b086      	sub	sp, #24
 8017b2c:	460c      	mov	r4, r1
 8017b2e:	2300      	movs	r3, #0
 8017b30:	4631      	mov	r1, r6
 8017b32:	4605      	mov	r5, r0
 8017b34:	a802      	add	r0, sp, #8
 8017b36:	9301      	str	r3, [sp, #4]
 8017b38:	f7ff fca6 	bl	8017488 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017b3c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8017b40:	8822      	ldrh	r2, [r4, #0]
 8017b42:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8017b46:	1ad2      	subs	r2, r2, r3
 8017b48:	8863      	ldrh	r3, [r4, #2]
 8017b4a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8017b4e:	1a5b      	subs	r3, r3, r1
 8017b50:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8017b54:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017b58:	aa01      	add	r2, sp, #4
 8017b5a:	f8ad 0014 	strh.w	r0, [sp, #20]
 8017b5e:	4630      	mov	r0, r6
 8017b60:	f8ad 1016 	strh.w	r1, [sp, #22]
 8017b64:	a904      	add	r1, sp, #16
 8017b66:	f8ad 3012 	strh.w	r3, [sp, #18]
 8017b6a:	f7fb fac9 	bl	8013100 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8017b6e:	9a01      	ldr	r2, [sp, #4]
 8017b70:	b11a      	cbz	r2, 8017b7a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8017b72:	4621      	mov	r1, r4
 8017b74:	4628      	mov	r0, r5
 8017b76:	f7ff fed5 	bl	8017924 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017b7a:	b006      	add	sp, #24
 8017b7c:	bd70      	pop	{r4, r5, r6, pc}

08017b7e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8017b7e:	4602      	mov	r2, r0
 8017b80:	b530      	push	{r4, r5, lr}
 8017b82:	4604      	mov	r4, r0
 8017b84:	b085      	sub	sp, #20
 8017b86:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8017b8a:	460d      	mov	r5, r1
 8017b8c:	466b      	mov	r3, sp
 8017b8e:	6851      	ldr	r1, [r2, #4]
 8017b90:	c303      	stmia	r3!, {r0, r1}
 8017b92:	4629      	mov	r1, r5
 8017b94:	4668      	mov	r0, sp
 8017b96:	f7fb f9db 	bl	8012f50 <_ZN8touchgfx4RectaNERKS0_>
 8017b9a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017b9e:	b12b      	cbz	r3, 8017bac <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8017ba0:	4669      	mov	r1, sp
 8017ba2:	4620      	mov	r0, r4
 8017ba4:	f7ff ffbf 	bl	8017b26 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8017ba8:	b005      	add	sp, #20
 8017baa:	bd30      	pop	{r4, r5, pc}
 8017bac:	3404      	adds	r4, #4
 8017bae:	a802      	add	r0, sp, #8
 8017bb0:	4621      	mov	r1, r4
 8017bb2:	f7ff fc69 	bl	8017488 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017bb6:	f8bd 3000 	ldrh.w	r3, [sp]
 8017bba:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8017bbe:	4669      	mov	r1, sp
 8017bc0:	4620      	mov	r0, r4
 8017bc2:	1a9b      	subs	r3, r3, r2
 8017bc4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8017bc8:	f8ad 3000 	strh.w	r3, [sp]
 8017bcc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017bd0:	1a9b      	subs	r3, r3, r2
 8017bd2:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017bd6:	f7fb fa5a 	bl	801308e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8017bda:	e7e5      	b.n	8017ba8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08017bdc <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8017bdc:	460b      	mov	r3, r1
 8017bde:	680a      	ldr	r2, [r1, #0]
 8017be0:	1d01      	adds	r1, r0, #4
 8017be2:	6992      	ldr	r2, [r2, #24]
 8017be4:	4618      	mov	r0, r3
 8017be6:	4710      	bx	r2

08017be8 <_ZN8touchgfx12TextProviderC1Ev>:
 8017be8:	b538      	push	{r3, r4, r5, lr}
 8017bea:	2500      	movs	r5, #0
 8017bec:	2302      	movs	r3, #2
 8017bee:	4604      	mov	r4, r0
 8017bf0:	220e      	movs	r2, #14
 8017bf2:	7403      	strb	r3, [r0, #16]
 8017bf4:	4629      	mov	r1, r5
 8017bf6:	6145      	str	r5, [r0, #20]
 8017bf8:	7605      	strb	r5, [r0, #24]
 8017bfa:	83c5      	strh	r5, [r0, #30]
 8017bfc:	8405      	strh	r5, [r0, #32]
 8017bfe:	86c5      	strh	r5, [r0, #54]	; 0x36
 8017c00:	8705      	strh	r5, [r0, #56]	; 0x38
 8017c02:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8017c04:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8017c08:	e9c0 5500 	strd	r5, r5, [r0]
 8017c0c:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8017c10:	304c      	adds	r0, #76	; 0x4c
 8017c12:	f00d fa0f 	bl	8025034 <memset>
 8017c16:	2301      	movs	r3, #1
 8017c18:	4620      	mov	r0, r4
 8017c1a:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8017c1e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8017c22:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8017c26:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8017c2a:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8017c2e:	f7ee fd91 	bl	8006754 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8017c32:	4620      	mov	r0, r4
 8017c34:	bd38      	pop	{r3, r4, r5, pc}

08017c36 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 8017c36:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8017c38:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8017c3c:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 8017c3e:	fab0 f080 	clz	r0, r0
 8017c42:	0940      	lsrs	r0, r0, #5
 8017c44:	4770      	bx	lr

08017c46 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8017c46:	b530      	push	{r4, r5, lr}
 8017c48:	2500      	movs	r5, #0
 8017c4a:	2401      	movs	r4, #1
 8017c4c:	6843      	ldr	r3, [r0, #4]
 8017c4e:	b913      	cbnz	r3, 8017c56 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8017c50:	6803      	ldr	r3, [r0, #0]
 8017c52:	b313      	cbz	r3, 8017c9a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8017c54:	6043      	str	r3, [r0, #4]
 8017c56:	7e03      	ldrb	r3, [r0, #24]
 8017c58:	b143      	cbz	r3, 8017c6c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8017c5a:	6943      	ldr	r3, [r0, #20]
 8017c5c:	b12b      	cbz	r3, 8017c6a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8017c5e:	881a      	ldrh	r2, [r3, #0]
 8017c60:	b11a      	cbz	r2, 8017c6a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8017c62:	1c9a      	adds	r2, r3, #2
 8017c64:	6142      	str	r2, [r0, #20]
 8017c66:	8818      	ldrh	r0, [r3, #0]
 8017c68:	bd30      	pop	{r4, r5, pc}
 8017c6a:	7605      	strb	r5, [r0, #24]
 8017c6c:	6843      	ldr	r3, [r0, #4]
 8017c6e:	8819      	ldrh	r1, [r3, #0]
 8017c70:	b199      	cbz	r1, 8017c9a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8017c72:	1c9a      	adds	r2, r3, #2
 8017c74:	2902      	cmp	r1, #2
 8017c76:	6042      	str	r2, [r0, #4]
 8017c78:	d1f5      	bne.n	8017c66 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8017c7a:	7c03      	ldrb	r3, [r0, #16]
 8017c7c:	2b01      	cmp	r3, #1
 8017c7e:	d8e5      	bhi.n	8017c4c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017c80:	1c5a      	adds	r2, r3, #1
 8017c82:	3302      	adds	r3, #2
 8017c84:	7402      	strb	r2, [r0, #16]
 8017c86:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8017c8a:	6143      	str	r3, [r0, #20]
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	d0dd      	beq.n	8017c4c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017c90:	881b      	ldrh	r3, [r3, #0]
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d0da      	beq.n	8017c4c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017c96:	7604      	strb	r4, [r0, #24]
 8017c98:	e7d8      	b.n	8017c4c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017c9a:	2000      	movs	r0, #0
 8017c9c:	e7e4      	b.n	8017c68 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08017c9e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8017c9e:	6001      	str	r1, [r0, #0]
 8017ca0:	2100      	movs	r1, #0
 8017ca2:	b430      	push	{r4, r5}
 8017ca4:	6041      	str	r1, [r0, #4]
 8017ca6:	6815      	ldr	r5, [r2, #0]
 8017ca8:	6085      	str	r5, [r0, #8]
 8017caa:	6852      	ldr	r2, [r2, #4]
 8017cac:	6443      	str	r3, [r0, #68]	; 0x44
 8017cae:	9b02      	ldr	r3, [sp, #8]
 8017cb0:	60c2      	str	r2, [r0, #12]
 8017cb2:	7401      	strb	r1, [r0, #16]
 8017cb4:	6141      	str	r1, [r0, #20]
 8017cb6:	7601      	strb	r1, [r0, #24]
 8017cb8:	8701      	strh	r1, [r0, #56]	; 0x38
 8017cba:	8401      	strh	r1, [r0, #32]
 8017cbc:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8017cc0:	6483      	str	r3, [r0, #72]	; 0x48
 8017cc2:	bc30      	pop	{r4, r5}
 8017cc4:	f7ee bd46 	b.w	8006754 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08017cc8 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 8017cc8:	b408      	push	{r3}
 8017cca:	b510      	push	{r4, lr}
 8017ccc:	b085      	sub	sp, #20
 8017cce:	ac07      	add	r4, sp, #28
 8017cd0:	f854 3b04 	ldr.w	r3, [r4], #4
 8017cd4:	9300      	str	r3, [sp, #0]
 8017cd6:	4613      	mov	r3, r2
 8017cd8:	4622      	mov	r2, r4
 8017cda:	9403      	str	r4, [sp, #12]
 8017cdc:	f7ff ffdf 	bl	8017c9e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017ce0:	b005      	add	sp, #20
 8017ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ce6:	b001      	add	sp, #4
 8017ce8:	4770      	bx	lr

08017cea <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8017cea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017cec:	4605      	mov	r5, r0
 8017cee:	4608      	mov	r0, r1
 8017cf0:	b1f1      	cbz	r1, 8017d30 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8017cf2:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8017cf6:	460b      	mov	r3, r1
 8017cf8:	f101 0708 	add.w	r7, r1, #8
 8017cfc:	4622      	mov	r2, r4
 8017cfe:	6818      	ldr	r0, [r3, #0]
 8017d00:	3308      	adds	r3, #8
 8017d02:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8017d06:	4626      	mov	r6, r4
 8017d08:	42bb      	cmp	r3, r7
 8017d0a:	c603      	stmia	r6!, {r0, r1}
 8017d0c:	4634      	mov	r4, r6
 8017d0e:	d1f6      	bne.n	8017cfe <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8017d10:	6818      	ldr	r0, [r3, #0]
 8017d12:	6030      	str	r0, [r6, #0]
 8017d14:	4610      	mov	r0, r2
 8017d16:	889b      	ldrh	r3, [r3, #4]
 8017d18:	80b3      	strh	r3, [r6, #4]
 8017d1a:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8017d1e:	015b      	lsls	r3, r3, #5
 8017d20:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8017d24:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8017d28:	430b      	orrs	r3, r1
 8017d2a:	425b      	negs	r3, r3
 8017d2c:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8017d30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017d32 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8017d32:	b538      	push	{r3, r4, r5, lr}
 8017d34:	460c      	mov	r4, r1
 8017d36:	6811      	ldr	r1, [r2, #0]
 8017d38:	4610      	mov	r0, r2
 8017d3a:	68cd      	ldr	r5, [r1, #12]
 8017d3c:	4619      	mov	r1, r3
 8017d3e:	47a8      	blx	r5
 8017d40:	2800      	cmp	r0, #0
 8017d42:	bf08      	it	eq
 8017d44:	4620      	moveq	r0, r4
 8017d46:	bd38      	pop	{r3, r4, r5, pc}

08017d48 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8017d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d4a:	4604      	mov	r4, r0
 8017d4c:	4615      	mov	r5, r2
 8017d4e:	4608      	mov	r0, r1
 8017d50:	b93a      	cbnz	r2, 8017d62 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8017d52:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8017d56:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8017d5a:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8017d5e:	4628      	mov	r0, r5
 8017d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d62:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8017d66:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 8017d6a:	8893      	ldrh	r3, [r2, #4]
 8017d6c:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8017d70:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8017d74:	79ee      	ldrb	r6, [r5, #7]
 8017d76:	4316      	orrs	r6, r2
 8017d78:	19da      	adds	r2, r3, r7
 8017d7a:	b291      	uxth	r1, r2
 8017d7c:	b2b7      	uxth	r7, r6
 8017d7e:	291d      	cmp	r1, #29
 8017d80:	d87b      	bhi.n	8017e7a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8017d82:	2201      	movs	r2, #1
 8017d84:	10f6      	asrs	r6, r6, #3
 8017d86:	408a      	lsls	r2, r1
 8017d88:	4974      	ldr	r1, [pc, #464]	; (8017f5c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 8017d8a:	420a      	tst	r2, r1
 8017d8c:	d12e      	bne.n	8017dec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8017d8e:	f412 7f60 	tst.w	r2, #896	; 0x380
 8017d92:	d072      	beq.n	8017e7a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8017d94:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8017d98:	462b      	mov	r3, r5
 8017d9a:	f105 0e08 	add.w	lr, r5, #8
 8017d9e:	4615      	mov	r5, r2
 8017da0:	6818      	ldr	r0, [r3, #0]
 8017da2:	3308      	adds	r3, #8
 8017da4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8017da8:	4694      	mov	ip, r2
 8017daa:	4573      	cmp	r3, lr
 8017dac:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8017db0:	4662      	mov	r2, ip
 8017db2:	d1f5      	bne.n	8017da0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8017db4:	6818      	ldr	r0, [r3, #0]
 8017db6:	f8cc 0000 	str.w	r0, [ip]
 8017dba:	889b      	ldrh	r3, [r3, #4]
 8017dbc:	f8ac 3004 	strh.w	r3, [ip, #4]
 8017dc0:	b2b3      	uxth	r3, r6
 8017dc2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8017dc6:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8017dca:	1aca      	subs	r2, r1, r3
 8017dcc:	1bcf      	subs	r7, r1, r7
 8017dce:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8017dd2:	b292      	uxth	r2, r2
 8017dd4:	1afb      	subs	r3, r7, r3
 8017dd6:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8017dda:	10d2      	asrs	r2, r2, #3
 8017ddc:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8017de0:	4302      	orrs	r2, r0
 8017de2:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8017de6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8017dea:	e7b8      	b.n	8017d5e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8017dec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8017dee:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017df2:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8017df4:	f640 6333 	movw	r3, #3635	; 0xe33
 8017df8:	4299      	cmp	r1, r3
 8017dfa:	d110      	bne.n	8017e1e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 8017dfc:	6803      	ldr	r3, [r0, #0]
 8017dfe:	68db      	ldr	r3, [r3, #12]
 8017e00:	4798      	blx	r3
 8017e02:	7b41      	ldrb	r1, [r0, #13]
 8017e04:	00cb      	lsls	r3, r1, #3
 8017e06:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017e0a:	7a03      	ldrb	r3, [r0, #8]
 8017e0c:	0648      	lsls	r0, r1, #25
 8017e0e:	ea43 0302 	orr.w	r3, r3, r2
 8017e12:	bf44      	itt	mi
 8017e14:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017e18:	b21b      	sxthmi	r3, r3
 8017e1a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017e1e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8017e22:	462a      	mov	r2, r5
 8017e24:	f105 0c08 	add.w	ip, r5, #8
 8017e28:	443b      	add	r3, r7
 8017e2a:	4433      	add	r3, r6
 8017e2c:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8017e30:	b29b      	uxth	r3, r3
 8017e32:	4635      	mov	r5, r6
 8017e34:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017e38:	6810      	ldr	r0, [r2, #0]
 8017e3a:	3208      	adds	r2, #8
 8017e3c:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8017e40:	4637      	mov	r7, r6
 8017e42:	4562      	cmp	r2, ip
 8017e44:	c703      	stmia	r7!, {r0, r1}
 8017e46:	463e      	mov	r6, r7
 8017e48:	d1f6      	bne.n	8017e38 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 8017e4a:	6810      	ldr	r0, [r2, #0]
 8017e4c:	6038      	str	r0, [r7, #0]
 8017e4e:	8892      	ldrh	r2, [r2, #4]
 8017e50:	80ba      	strh	r2, [r7, #4]
 8017e52:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8017e56:	10db      	asrs	r3, r3, #3
 8017e58:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8017e5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017e60:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8017e64:	4313      	orrs	r3, r2
 8017e66:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8017e6a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8017e6e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8017e72:	1a9b      	subs	r3, r3, r2
 8017e74:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8017e78:	e771      	b.n	8017d5e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8017e7a:	f023 0204 	bic.w	r2, r3, #4
 8017e7e:	f640 611b 	movw	r1, #3611	; 0xe1b
 8017e82:	428a      	cmp	r2, r1
 8017e84:	d003      	beq.n	8017e8e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 8017e86:	f640 621d 	movw	r2, #3613	; 0xe1d
 8017e8a:	4293      	cmp	r3, r2
 8017e8c:	d120      	bne.n	8017ed0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 8017e8e:	3b01      	subs	r3, #1
 8017e90:	4602      	mov	r2, r0
 8017e92:	4629      	mov	r1, r5
 8017e94:	4620      	mov	r0, r4
 8017e96:	b29b      	uxth	r3, r3
 8017e98:	f7ff ff4b 	bl	8017d32 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8017e9c:	7b41      	ldrb	r1, [r0, #13]
 8017e9e:	00cb      	lsls	r3, r1, #3
 8017ea0:	0649      	lsls	r1, r1, #25
 8017ea2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017ea6:	7a03      	ldrb	r3, [r0, #8]
 8017ea8:	ea43 0302 	orr.w	r3, r3, r2
 8017eac:	bf44      	itt	mi
 8017eae:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017eb2:	b21b      	sxthmi	r3, r3
 8017eb4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017eb8:	7b6b      	ldrb	r3, [r5, #13]
 8017eba:	7aaa      	ldrb	r2, [r5, #10]
 8017ebc:	005b      	lsls	r3, r3, #1
 8017ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017ec2:	4313      	orrs	r3, r2
 8017ec4:	115a      	asrs	r2, r3, #5
 8017ec6:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8017eca:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8017ece:	e035      	b.n	8017f3c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8017ed0:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8017ed4:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8017ed8:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8017edc:	7a2a      	ldrb	r2, [r5, #8]
 8017ede:	ea42 0201 	orr.w	r2, r2, r1
 8017ee2:	f640 6109 	movw	r1, #3593	; 0xe09
 8017ee6:	bf1c      	itt	ne
 8017ee8:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8017eec:	b212      	sxthne	r2, r2
 8017eee:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8017ef2:	f023 0210 	bic.w	r2, r3, #16
 8017ef6:	428a      	cmp	r2, r1
 8017ef8:	d003      	beq.n	8017f02 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8017efa:	f640 6213 	movw	r2, #3603	; 0xe13
 8017efe:	4293      	cmp	r3, r2
 8017f00:	d129      	bne.n	8017f56 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8017f02:	7b6e      	ldrb	r6, [r5, #13]
 8017f04:	4629      	mov	r1, r5
 8017f06:	0076      	lsls	r6, r6, #1
 8017f08:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8017f0c:	7aae      	ldrb	r6, [r5, #10]
 8017f0e:	4316      	orrs	r6, r2
 8017f10:	f640 6213 	movw	r2, #3603	; 0xe13
 8017f14:	4293      	cmp	r3, r2
 8017f16:	4602      	mov	r2, r0
 8017f18:	4620      	mov	r0, r4
 8017f1a:	bf16      	itet	ne
 8017f1c:	f103 33ff 	addne.w	r3, r3, #4294967295
 8017f20:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8017f24:	b29b      	uxthne	r3, r3
 8017f26:	f7ff ff04 	bl	8017d32 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8017f2a:	7b43      	ldrb	r3, [r0, #13]
 8017f2c:	7a82      	ldrb	r2, [r0, #10]
 8017f2e:	005b      	lsls	r3, r3, #1
 8017f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017f34:	4313      	orrs	r3, r2
 8017f36:	1af6      	subs	r6, r6, r3
 8017f38:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8017f3c:	7b69      	ldrb	r1, [r5, #13]
 8017f3e:	00cb      	lsls	r3, r1, #3
 8017f40:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017f44:	7a2b      	ldrb	r3, [r5, #8]
 8017f46:	4313      	orrs	r3, r2
 8017f48:	064a      	lsls	r2, r1, #25
 8017f4a:	bf44      	itt	mi
 8017f4c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017f50:	b21b      	sxthmi	r3, r3
 8017f52:	1bdb      	subs	r3, r3, r7
 8017f54:	e747      	b.n	8017de6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8017f56:	2300      	movs	r3, #0
 8017f58:	e7b7      	b.n	8017eca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 8017f5a:	bf00      	nop
 8017f5c:	3fc00079 	.word	0x3fc00079

08017f60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8017f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f64:	4604      	mov	r4, r0
 8017f66:	b942      	cbnz	r2, 8017f7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8017f68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017f6c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8017f70:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8017f74:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8017f78:	e047      	b.n	801800a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8017f7a:	7b51      	ldrb	r1, [r2, #13]
 8017f7c:	8893      	ldrh	r3, [r2, #4]
 8017f7e:	010d      	lsls	r5, r1, #4
 8017f80:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8017f84:	79d5      	ldrb	r5, [r2, #7]
 8017f86:	4305      	orrs	r5, r0
 8017f88:	2d04      	cmp	r5, #4
 8017f8a:	bfcc      	ite	gt
 8017f8c:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8017f90:	f04f 0e01 	movle.w	lr, #1
 8017f94:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8017f98:	f200 80ab 	bhi.w	80180f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8017f9c:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8017fa0:	4283      	cmp	r3, r0
 8017fa2:	d216      	bcs.n	8017fd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017fa4:	f240 605b 	movw	r0, #1627	; 0x65b
 8017fa8:	4283      	cmp	r3, r0
 8017faa:	d859      	bhi.n	8018060 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8017fac:	f240 6057 	movw	r0, #1623	; 0x657
 8017fb0:	4283      	cmp	r3, r0
 8017fb2:	d20e      	bcs.n	8017fd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017fb4:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8017fb8:	d24a      	bcs.n	8018050 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8017fba:	f240 604e 	movw	r0, #1614	; 0x64e
 8017fbe:	4283      	cmp	r3, r0
 8017fc0:	d207      	bcs.n	8017fd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017fc2:	f240 601a 	movw	r0, #1562	; 0x61a
 8017fc6:	4283      	cmp	r3, r0
 8017fc8:	d02a      	beq.n	8018020 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017fca:	d821      	bhi.n	8018010 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8017fcc:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8017fd0:	d35b      	bcc.n	801808a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8017fd2:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8017fd6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8017fda:	f040 80d0 	bne.w	801817e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8017fde:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8017fe2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8017fe6:	f040 80ca 	bne.w	801817e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8017fea:	00cb      	lsls	r3, r1, #3
 8017fec:	0649      	lsls	r1, r1, #25
 8017fee:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8017ff2:	7a13      	ldrb	r3, [r2, #8]
 8017ff4:	ea43 0300 	orr.w	r3, r3, r0
 8017ff8:	bf44      	itt	mi
 8017ffa:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017ffe:	b21b      	sxthmi	r3, r3
 8018000:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018004:	1b5d      	subs	r5, r3, r5
 8018006:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801800a:	4610      	mov	r0, r2
 801800c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018010:	f240 604b 	movw	r0, #1611	; 0x64b
 8018014:	4283      	cmp	r3, r0
 8018016:	d338      	bcc.n	801808a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018018:	f240 604c 	movw	r0, #1612	; 0x64c
 801801c:	4283      	cmp	r3, r0
 801801e:	d9d8      	bls.n	8017fd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018020:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8018024:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8018028:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801802c:	f040 80f3 	bne.w	8018216 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8018030:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018034:	f040 80ef 	bne.w	8018216 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8018038:	00cb      	lsls	r3, r1, #3
 801803a:	064e      	lsls	r6, r1, #25
 801803c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8018040:	7a13      	ldrb	r3, [r2, #8]
 8018042:	ea43 0300 	orr.w	r3, r3, r0
 8018046:	bf44      	itt	mi
 8018048:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801804c:	b21b      	sxthmi	r3, r3
 801804e:	e7d9      	b.n	8018004 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8018050:	f240 6054 	movw	r0, #1620	; 0x654
 8018054:	4283      	cmp	r3, r0
 8018056:	d8e3      	bhi.n	8018020 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018058:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801805c:	d9e0      	bls.n	8018020 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801805e:	e7b8      	b.n	8017fd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018060:	f240 6074 	movw	r0, #1652	; 0x674
 8018064:	4283      	cmp	r3, r0
 8018066:	d0b4      	beq.n	8017fd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018068:	d82d      	bhi.n	80180c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801806a:	f240 605e 	movw	r0, #1630	; 0x65e
 801806e:	4283      	cmp	r3, r0
 8018070:	d804      	bhi.n	801807c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8018072:	f240 605d 	movw	r0, #1629	; 0x65d
 8018076:	4283      	cmp	r3, r0
 8018078:	d3d2      	bcc.n	8018020 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801807a:	e7aa      	b.n	8017fd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801807c:	f240 605f 	movw	r0, #1631	; 0x65f
 8018080:	4283      	cmp	r3, r0
 8018082:	d0cd      	beq.n	8018020 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018084:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8018088:	d0a3      	beq.n	8017fd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801808a:	00cb      	lsls	r3, r1, #3
 801808c:	0649      	lsls	r1, r1, #25
 801808e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8018092:	7a13      	ldrb	r3, [r2, #8]
 8018094:	ea43 0300 	orr.w	r3, r3, r0
 8018098:	bf44      	itt	mi
 801809a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801809e:	b21b      	sxthmi	r3, r3
 80180a0:	1b5d      	subs	r5, r3, r5
 80180a2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80180a6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80180aa:	7b53      	ldrb	r3, [r2, #13]
 80180ac:	015b      	lsls	r3, r3, #5
 80180ae:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80180b2:	7993      	ldrb	r3, [r2, #6]
 80180b4:	430b      	orrs	r3, r1
 80180b6:	2105      	movs	r1, #5
 80180b8:	005b      	lsls	r3, r3, #1
 80180ba:	fb93 f3f1 	sdiv	r3, r3, r1
 80180be:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80180c2:	440b      	add	r3, r1
 80180c4:	e756      	b.n	8017f74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80180c6:	f240 60e2 	movw	r0, #1762	; 0x6e2
 80180ca:	4283      	cmp	r3, r0
 80180cc:	d809      	bhi.n	80180e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 80180ce:	f240 60df 	movw	r0, #1759	; 0x6df
 80180d2:	4283      	cmp	r3, r0
 80180d4:	f4bf af7d 	bcs.w	8017fd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80180d8:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 80180dc:	2b05      	cmp	r3, #5
 80180de:	d8d4      	bhi.n	801808a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80180e0:	e777      	b.n	8017fd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80180e2:	f240 60e3 	movw	r0, #1763	; 0x6e3
 80180e6:	4283      	cmp	r3, r0
 80180e8:	d09a      	beq.n	8018020 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80180ea:	f240 60e4 	movw	r0, #1764	; 0x6e4
 80180ee:	4283      	cmp	r3, r0
 80180f0:	e7ca      	b.n	8018088 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80180f2:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 80180f6:	d22b      	bcs.n	8018150 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 80180f8:	f640 00ed 	movw	r0, #2285	; 0x8ed
 80180fc:	4283      	cmp	r3, r0
 80180fe:	d28f      	bcs.n	8018020 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018100:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018104:	4283      	cmp	r3, r0
 8018106:	d816      	bhi.n	8018136 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8018108:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801810c:	4283      	cmp	r3, r0
 801810e:	f4bf af60 	bcs.w	8017fd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018112:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8018116:	4283      	cmp	r3, r0
 8018118:	d80a      	bhi.n	8018130 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801811a:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801811e:	4283      	cmp	r3, r0
 8018120:	f4bf af57 	bcs.w	8017fd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018124:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8018128:	4283      	cmp	r3, r0
 801812a:	f43f af79 	beq.w	8018020 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801812e:	e7ac      	b.n	801808a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018130:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8018134:	e7f8      	b.n	8018128 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8018136:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801813a:	4283      	cmp	r3, r0
 801813c:	d802      	bhi.n	8018144 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801813e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018142:	e798      	b.n	8018076 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8018144:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8018148:	4283      	cmp	r3, r0
 801814a:	f47f af42 	bne.w	8017fd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801814e:	e767      	b.n	8018020 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018150:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8018154:	4283      	cmp	r3, r0
 8018156:	f43f af63 	beq.w	8018020 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801815a:	d802      	bhi.n	8018162 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801815c:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8018160:	e7f2      	b.n	8018148 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8018162:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8018166:	4283      	cmp	r3, r0
 8018168:	d805      	bhi.n	8018176 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801816a:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801816e:	4283      	cmp	r3, r0
 8018170:	f4ff af2f 	bcc.w	8017fd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018174:	e754      	b.n	8018020 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018176:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801817a:	4283      	cmp	r3, r0
 801817c:	e7af      	b.n	80180de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801817e:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8018182:	4617      	mov	r7, r2
 8018184:	f102 0808 	add.w	r8, r2, #8
 8018188:	4666      	mov	r6, ip
 801818a:	6838      	ldr	r0, [r7, #0]
 801818c:	3708      	adds	r7, #8
 801818e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8018192:	46e6      	mov	lr, ip
 8018194:	4547      	cmp	r7, r8
 8018196:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801819a:	46f4      	mov	ip, lr
 801819c:	d1f5      	bne.n	801818a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801819e:	6838      	ldr	r0, [r7, #0]
 80181a0:	f8ce 0000 	str.w	r0, [lr]
 80181a4:	88b9      	ldrh	r1, [r7, #4]
 80181a6:	f8ae 1004 	strh.w	r1, [lr, #4]
 80181aa:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80181ae:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80181b2:	d009      	beq.n	80181c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 80181b4:	7b51      	ldrb	r1, [r2, #13]
 80181b6:	7992      	ldrb	r2, [r2, #6]
 80181b8:	0149      	lsls	r1, r1, #5
 80181ba:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80181be:	4311      	orrs	r1, r2
 80181c0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80181c4:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80181c8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80181cc:	b2ad      	uxth	r5, r5
 80181ce:	d00d      	beq.n	80181ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 80181d0:	442b      	add	r3, r5
 80181d2:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80181d6:	b29b      	uxth	r3, r3
 80181d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80181dc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80181e0:	10db      	asrs	r3, r3, #3
 80181e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80181e6:	4313      	orrs	r3, r2
 80181e8:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80181ec:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80181f0:	00cb      	lsls	r3, r1, #3
 80181f2:	064f      	lsls	r7, r1, #25
 80181f4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80181f8:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80181fc:	ea43 0302 	orr.w	r3, r3, r2
 8018200:	bf44      	itt	mi
 8018202:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018206:	b21b      	sxthmi	r3, r3
 8018208:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801820c:	1b5b      	subs	r3, r3, r5
 801820e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8018212:	4632      	mov	r2, r6
 8018214:	e6f9      	b.n	801800a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8018216:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801821a:	4617      	mov	r7, r2
 801821c:	f102 0908 	add.w	r9, r2, #8
 8018220:	4666      	mov	r6, ip
 8018222:	6838      	ldr	r0, [r7, #0]
 8018224:	3708      	adds	r7, #8
 8018226:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801822a:	46e0      	mov	r8, ip
 801822c:	454f      	cmp	r7, r9
 801822e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8018232:	46c4      	mov	ip, r8
 8018234:	d1f5      	bne.n	8018222 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8018236:	6838      	ldr	r0, [r7, #0]
 8018238:	f8c8 0000 	str.w	r0, [r8]
 801823c:	88b9      	ldrh	r1, [r7, #4]
 801823e:	f8a8 1004 	strh.w	r1, [r8, #4]
 8018242:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8018246:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801824a:	d009      	beq.n	8018260 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801824c:	7b51      	ldrb	r1, [r2, #13]
 801824e:	7992      	ldrb	r2, [r2, #6]
 8018250:	0149      	lsls	r1, r1, #5
 8018252:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018256:	4311      	orrs	r1, r2
 8018258:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801825c:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8018260:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018264:	d00e      	beq.n	8018284 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8018266:	eba3 030e 	sub.w	r3, r3, lr
 801826a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801826e:	b29b      	uxth	r3, r3
 8018270:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018274:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8018278:	10db      	asrs	r3, r3, #3
 801827a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801827e:	4313      	orrs	r3, r2
 8018280:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8018284:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8018288:	00cb      	lsls	r3, r1, #3
 801828a:	0648      	lsls	r0, r1, #25
 801828c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018290:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8018294:	ea43 0302 	orr.w	r3, r3, r2
 8018298:	bf44      	itt	mi
 801829a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801829e:	b21b      	sxthmi	r3, r3
 80182a0:	1b5d      	subs	r5, r3, r5
 80182a2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80182a6:	e7b4      	b.n	8018212 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

080182a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80182a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182ac:	461e      	mov	r6, r3
 80182ae:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80182b0:	4604      	mov	r4, r0
 80182b2:	4617      	mov	r7, r2
 80182b4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80182b8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80182bc:	f7ee f9a4 	bl	8006608 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80182c0:	4605      	mov	r5, r0
 80182c2:	b918      	cbnz	r0, 80182cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 80182c4:	6030      	str	r0, [r6, #0]
 80182c6:	4628      	mov	r0, r5
 80182c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182cc:	683b      	ldr	r3, [r7, #0]
 80182ce:	4601      	mov	r1, r0
 80182d0:	4638      	mov	r0, r7
 80182d2:	68db      	ldr	r3, [r3, #12]
 80182d4:	4798      	blx	r3
 80182d6:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80182da:	4602      	mov	r2, r0
 80182dc:	6030      	str	r0, [r6, #0]
 80182de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80182e2:	d213      	bcs.n	801830c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 80182e4:	4643      	mov	r3, r8
 80182e6:	4639      	mov	r1, r7
 80182e8:	4620      	mov	r0, r4
 80182ea:	f7ff fe39 	bl	8017f60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80182ee:	6030      	str	r0, [r6, #0]
 80182f0:	6833      	ldr	r3, [r6, #0]
 80182f2:	b143      	cbz	r3, 8018306 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 80182f4:	7b5a      	ldrb	r2, [r3, #13]
 80182f6:	7a9b      	ldrb	r3, [r3, #10]
 80182f8:	0052      	lsls	r2, r2, #1
 80182fa:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80182fe:	4313      	orrs	r3, r2
 8018300:	bf0c      	ite	eq
 8018302:	2301      	moveq	r3, #1
 8018304:	2300      	movne	r3, #0
 8018306:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801830a:	e7dc      	b.n	80182c6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801830c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8018310:	b29b      	uxth	r3, r3
 8018312:	2b7f      	cmp	r3, #127	; 0x7f
 8018314:	d804      	bhi.n	8018320 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8018316:	4639      	mov	r1, r7
 8018318:	4620      	mov	r0, r4
 801831a:	f7ff fd15 	bl	8017d48 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801831e:	e7e6      	b.n	80182ee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8018320:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8018324:	2b00      	cmp	r3, #0
 8018326:	d0e3      	beq.n	80182f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8018328:	f640 1302 	movw	r3, #2306	; 0x902
 801832c:	429d      	cmp	r5, r3
 801832e:	d1df      	bne.n	80182f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8018330:	4601      	mov	r1, r0
 8018332:	4620      	mov	r0, r4
 8018334:	f7ff fcd9 	bl	8017cea <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8018338:	e7d9      	b.n	80182ee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801833a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801833a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801833e:	461e      	mov	r6, r3
 8018340:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8018342:	4604      	mov	r4, r0
 8018344:	4617      	mov	r7, r2
 8018346:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801834a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801834e:	f7ee f95b 	bl	8006608 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018352:	4605      	mov	r5, r0
 8018354:	b918      	cbnz	r0, 801835e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8018356:	6030      	str	r0, [r6, #0]
 8018358:	4628      	mov	r0, r5
 801835a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801835e:	683b      	ldr	r3, [r7, #0]
 8018360:	4601      	mov	r1, r0
 8018362:	4638      	mov	r0, r7
 8018364:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8018368:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801836c:	47c8      	blx	r9
 801836e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8018372:	4602      	mov	r2, r0
 8018374:	6030      	str	r0, [r6, #0]
 8018376:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801837a:	d213      	bcs.n	80183a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801837c:	4643      	mov	r3, r8
 801837e:	4639      	mov	r1, r7
 8018380:	4620      	mov	r0, r4
 8018382:	f7ff fded 	bl	8017f60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8018386:	6030      	str	r0, [r6, #0]
 8018388:	6833      	ldr	r3, [r6, #0]
 801838a:	b143      	cbz	r3, 801839e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801838c:	7b5a      	ldrb	r2, [r3, #13]
 801838e:	7a9b      	ldrb	r3, [r3, #10]
 8018390:	0052      	lsls	r2, r2, #1
 8018392:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018396:	4313      	orrs	r3, r2
 8018398:	bf0c      	ite	eq
 801839a:	2301      	moveq	r3, #1
 801839c:	2300      	movne	r3, #0
 801839e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80183a2:	e7d9      	b.n	8018358 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 80183a4:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80183a8:	b29b      	uxth	r3, r3
 80183aa:	2b7f      	cmp	r3, #127	; 0x7f
 80183ac:	d804      	bhi.n	80183b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 80183ae:	4639      	mov	r1, r7
 80183b0:	4620      	mov	r0, r4
 80183b2:	f7ff fcc9 	bl	8017d48 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80183b6:	e7e6      	b.n	8018386 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 80183b8:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 80183bc:	2b00      	cmp	r3, #0
 80183be:	d0e3      	beq.n	8018388 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80183c0:	f640 1302 	movw	r3, #2306	; 0x902
 80183c4:	429d      	cmp	r5, r3
 80183c6:	d1df      	bne.n	8018388 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80183c8:	4601      	mov	r1, r0
 80183ca:	4620      	mov	r0, r4
 80183cc:	f7ff fc8d 	bl	8017cea <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80183d0:	e7d9      	b.n	8018386 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

080183d2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80183d2:	b510      	push	{r4, lr}
 80183d4:	4604      	mov	r4, r0
 80183d6:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 80183da:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80183dc:	b1e1      	cbz	r1, 8018418 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 80183de:	2b0a      	cmp	r3, #10
 80183e0:	d02d      	beq.n	801843e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80183e2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80183e4:	3901      	subs	r1, #1
 80183e6:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80183ea:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 80183ec:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 80183f0:	1c51      	adds	r1, r2, #1
 80183f2:	b289      	uxth	r1, r1
 80183f4:	2901      	cmp	r1, #1
 80183f6:	bf8a      	itet	hi
 80183f8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80183fc:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 80183fe:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8018400:	1c5a      	adds	r2, r3, #1
 8018402:	8722      	strh	r2, [r4, #56]	; 0x38
 8018404:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8018406:	4413      	add	r3, r2
 8018408:	b29b      	uxth	r3, r3
 801840a:	2b09      	cmp	r3, #9
 801840c:	bf88      	it	hi
 801840e:	3b0a      	subhi	r3, #10
 8018410:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018414:	8458      	strh	r0, [r3, #34]	; 0x22
 8018416:	e7de      	b.n	80183d6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8018418:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801841a:	2b0a      	cmp	r3, #10
 801841c:	d00f      	beq.n	801843e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801841e:	4620      	mov	r0, r4
 8018420:	f7ff fc11 	bl	8017c46 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8018424:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8018426:	1c5a      	adds	r2, r3, #1
 8018428:	8722      	strh	r2, [r4, #56]	; 0x38
 801842a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801842c:	4413      	add	r3, r2
 801842e:	b29b      	uxth	r3, r3
 8018430:	2b09      	cmp	r3, #9
 8018432:	bf88      	it	hi
 8018434:	3b0a      	subhi	r3, #10
 8018436:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801843a:	8458      	strh	r0, [r3, #34]	; 0x22
 801843c:	e7ec      	b.n	8018418 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801843e:	bd10      	pop	{r4, pc}

08018440 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8018440:	b538      	push	{r3, r4, r5, lr}
 8018442:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8018444:	4604      	mov	r4, r0
 8018446:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801844a:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801844c:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801844e:	3a01      	subs	r2, #1
 8018450:	8702      	strh	r2, [r0, #56]	; 0x38
 8018452:	1c5a      	adds	r2, r3, #1
 8018454:	b292      	uxth	r2, r2
 8018456:	2a09      	cmp	r2, #9
 8018458:	bf8a      	itet	hi
 801845a:	3b09      	subhi	r3, #9
 801845c:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801845e:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8018460:	f7ff ffb7 	bl	80183d2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8018464:	8c23      	ldrh	r3, [r4, #32]
 8018466:	2b01      	cmp	r3, #1
 8018468:	bf9c      	itt	ls
 801846a:	3301      	addls	r3, #1
 801846c:	8423      	strhls	r3, [r4, #32]
 801846e:	8be3      	ldrh	r3, [r4, #30]
 8018470:	b90b      	cbnz	r3, 8018476 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8018472:	2302      	movs	r3, #2
 8018474:	83e3      	strh	r3, [r4, #30]
 8018476:	8be3      	ldrh	r3, [r4, #30]
 8018478:	4628      	mov	r0, r5
 801847a:	3b01      	subs	r3, #1
 801847c:	b29b      	uxth	r3, r3
 801847e:	83e3      	strh	r3, [r4, #30]
 8018480:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018484:	8365      	strh	r5, [r4, #26]
 8018486:	bd38      	pop	{r3, r4, r5, pc}

08018488 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8018488:	428a      	cmp	r2, r1
 801848a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801848e:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8018490:	d932      	bls.n	80184f8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8018492:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8018494:	1a54      	subs	r4, r2, r1
 8018496:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801849a:	19ee      	adds	r6, r5, r7
 801849c:	fa1f fe84 	uxth.w	lr, r4
 80184a0:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 80184a4:	3e01      	subs	r6, #1
 80184a6:	b2b4      	uxth	r4, r6
 80184a8:	eba4 090e 	sub.w	r9, r4, lr
 80184ac:	fa1f f989 	uxth.w	r9, r9
 80184b0:	2c09      	cmp	r4, #9
 80184b2:	4626      	mov	r6, r4
 80184b4:	bf88      	it	hi
 80184b6:	f1a4 060a 	subhi.w	r6, r4, #10
 80184ba:	f1bc 0f00 	cmp.w	ip, #0
 80184be:	f104 34ff 	add.w	r4, r4, #4294967295
 80184c2:	bf08      	it	eq
 80184c4:	f04f 0c02 	moveq.w	ip, #2
 80184c8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80184cc:	b2a4      	uxth	r4, r4
 80184ce:	f10c 3cff 	add.w	ip, ip, #4294967295
 80184d2:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 80184d6:	454c      	cmp	r4, r9
 80184d8:	fa1f fc8c 	uxth.w	ip, ip
 80184dc:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 80184e0:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 80184e4:	d1e4      	bne.n	80184b0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 80184e6:	eba5 050e 	sub.w	r5, r5, lr
 80184ea:	eb0e 0408 	add.w	r4, lr, r8
 80184ee:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 80184f2:	8705      	strh	r5, [r0, #56]	; 0x38
 80184f4:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 80184f8:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 80184fa:	250a      	movs	r5, #10
 80184fc:	1a64      	subs	r4, r4, r1
 80184fe:	4439      	add	r1, r7
 8018500:	b289      	uxth	r1, r1
 8018502:	8704      	strh	r4, [r0, #56]	; 0x38
 8018504:	2909      	cmp	r1, #9
 8018506:	bf88      	it	hi
 8018508:	390a      	subhi	r1, #10
 801850a:	86c1      	strh	r1, [r0, #54]	; 0x36
 801850c:	b18a      	cbz	r2, 8018532 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801850e:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8018510:	3a01      	subs	r2, #1
 8018512:	3101      	adds	r1, #1
 8018514:	b292      	uxth	r2, r2
 8018516:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801851a:	8701      	strh	r1, [r0, #56]	; 0x38
 801851c:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801851e:	b901      	cbnz	r1, 8018522 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8018520:	86c5      	strh	r5, [r0, #54]	; 0x36
 8018522:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8018524:	3901      	subs	r1, #1
 8018526:	b289      	uxth	r1, r1
 8018528:	86c1      	strh	r1, [r0, #54]	; 0x36
 801852a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801852e:	844c      	strh	r4, [r1, #34]	; 0x22
 8018530:	e7ec      	b.n	801850c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8018532:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018536:	f7ff bf4c 	b.w	80183d2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801853a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801853a:	b570      	push	{r4, r5, r6, lr}
 801853c:	2500      	movs	r5, #0
 801853e:	4295      	cmp	r5, r2
 8018540:	d011      	beq.n	8018566 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8018542:	8bc4      	ldrh	r4, [r0, #30]
 8018544:	f831 6b02 	ldrh.w	r6, [r1], #2
 8018548:	4414      	add	r4, r2
 801854a:	3c01      	subs	r4, #1
 801854c:	1b64      	subs	r4, r4, r5
 801854e:	b2a4      	uxth	r4, r4
 8018550:	2c01      	cmp	r4, #1
 8018552:	bf88      	it	hi
 8018554:	3c02      	subhi	r4, #2
 8018556:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801855a:	8b64      	ldrh	r4, [r4, #26]
 801855c:	42b4      	cmp	r4, r6
 801855e:	d117      	bne.n	8018590 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8018560:	3501      	adds	r5, #1
 8018562:	b2ad      	uxth	r5, r5
 8018564:	e7eb      	b.n	801853e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8018566:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801856a:	2400      	movs	r4, #0
 801856c:	4413      	add	r3, r2
 801856e:	b2a2      	uxth	r2, r4
 8018570:	429a      	cmp	r2, r3
 8018572:	da0f      	bge.n	8018594 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8018574:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8018576:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801857a:	3401      	adds	r4, #1
 801857c:	4432      	add	r2, r6
 801857e:	b292      	uxth	r2, r2
 8018580:	2a09      	cmp	r2, #9
 8018582:	bf88      	it	hi
 8018584:	3a0a      	subhi	r2, #10
 8018586:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801858a:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801858c:	42aa      	cmp	r2, r5
 801858e:	d0ee      	beq.n	801856e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8018590:	2000      	movs	r0, #0
 8018592:	bd70      	pop	{r4, r5, r6, pc}
 8018594:	2001      	movs	r0, #1
 8018596:	e7fc      	b.n	8018592 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08018598 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8018598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801859c:	4605      	mov	r5, r0
 801859e:	4616      	mov	r6, r2
 80185a0:	1c8c      	adds	r4, r1, #2
 80185a2:	8809      	ldrh	r1, [r1, #0]
 80185a4:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80185a8:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80185ac:	42b3      	cmp	r3, r6
 80185ae:	d124      	bne.n	80185fa <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80185b0:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80185b4:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80185b8:	f001 070f 	and.w	r7, r1, #15
 80185bc:	4652      	mov	r2, sl
 80185be:	f8cd 8000 	str.w	r8, [sp]
 80185c2:	464b      	mov	r3, r9
 80185c4:	4621      	mov	r1, r4
 80185c6:	4628      	mov	r0, r5
 80185c8:	f7ff ffb7 	bl	801853a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80185cc:	4683      	mov	fp, r0
 80185ce:	b168      	cbz	r0, 80185ec <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80185d0:	eb0a 0109 	add.w	r1, sl, r9
 80185d4:	463a      	mov	r2, r7
 80185d6:	4628      	mov	r0, r5
 80185d8:	4441      	add	r1, r8
 80185da:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80185de:	4649      	mov	r1, r9
 80185e0:	f7ff ff52 	bl	8018488 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80185e4:	4658      	mov	r0, fp
 80185e6:	b003      	add	sp, #12
 80185e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185ec:	eb07 010a 	add.w	r1, r7, sl
 80185f0:	4449      	add	r1, r9
 80185f2:	4441      	add	r1, r8
 80185f4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80185f8:	e7d2      	b.n	80185a0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80185fa:	f04f 0b00 	mov.w	fp, #0
 80185fe:	e7f1      	b.n	80185e4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08018600 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8018600:	b570      	push	{r4, r5, r6, lr}
 8018602:	8810      	ldrh	r0, [r2, #0]
 8018604:	4298      	cmp	r0, r3
 8018606:	d817      	bhi.n	8018638 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8018608:	1e48      	subs	r0, r1, #1
 801860a:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801860e:	4298      	cmp	r0, r3
 8018610:	d312      	bcc.n	8018638 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8018612:	2400      	movs	r4, #0
 8018614:	428c      	cmp	r4, r1
 8018616:	d20f      	bcs.n	8018638 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8018618:	1860      	adds	r0, r4, r1
 801861a:	1040      	asrs	r0, r0, #1
 801861c:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8018620:	0085      	lsls	r5, r0, #2
 8018622:	42b3      	cmp	r3, r6
 8018624:	d902      	bls.n	801862c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8018626:	3001      	adds	r0, #1
 8018628:	b284      	uxth	r4, r0
 801862a:	e7f3      	b.n	8018614 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801862c:	d201      	bcs.n	8018632 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801862e:	b281      	uxth	r1, r0
 8018630:	e7f0      	b.n	8018614 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8018632:	442a      	add	r2, r5
 8018634:	8850      	ldrh	r0, [r2, #2]
 8018636:	bd70      	pop	{r4, r5, r6, pc}
 8018638:	2000      	movs	r0, #0
 801863a:	e7fc      	b.n	8018636 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801863c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801863c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018640:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8018642:	4604      	mov	r4, r0
 8018644:	260b      	movs	r6, #11
 8018646:	886f      	ldrh	r7, [r5, #2]
 8018648:	087f      	lsrs	r7, r7, #1
 801864a:	3e01      	subs	r6, #1
 801864c:	d013      	beq.n	8018676 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801864e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8018650:	462a      	mov	r2, r5
 8018652:	4639      	mov	r1, r7
 8018654:	4620      	mov	r0, r4
 8018656:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801865a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801865e:	4643      	mov	r3, r8
 8018660:	f7ff ffce 	bl	8018600 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8018664:	b138      	cbz	r0, 8018676 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8018666:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801866a:	4642      	mov	r2, r8
 801866c:	4620      	mov	r0, r4
 801866e:	f7ff ff93 	bl	8018598 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8018672:	2800      	cmp	r0, #0
 8018674:	d1e9      	bne.n	801864a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8018676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801867c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801867c:	b570      	push	{r4, r5, r6, lr}
 801867e:	694a      	ldr	r2, [r1, #20]
 8018680:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8018682:	684b      	ldr	r3, [r1, #4]
 8018684:	1b54      	subs	r4, r2, r5
 8018686:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8018688:	f000 8106 	beq.w	8018898 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801868c:	1b9b      	subs	r3, r3, r6
 801868e:	d003      	beq.n	8018698 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8018690:	4363      	muls	r3, r4
 8018692:	2210      	movs	r2, #16
 8018694:	fb93 f3f2 	sdiv	r3, r3, r2
 8018698:	680c      	ldr	r4, [r1, #0]
 801869a:	698a      	ldr	r2, [r1, #24]
 801869c:	1b65      	subs	r5, r4, r5
 801869e:	f000 80fd 	beq.w	801889c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 80186a2:	1b92      	subs	r2, r2, r6
 80186a4:	d003      	beq.n	80186ae <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80186a6:	436a      	muls	r2, r5
 80186a8:	2410      	movs	r4, #16
 80186aa:	fb92 f2f4 	sdiv	r2, r2, r4
 80186ae:	1a9b      	subs	r3, r3, r2
 80186b0:	ed9f 4a89 	vldr	s8, [pc, #548]	; 80188d8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 80186b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80186b8:	460a      	mov	r2, r1
 80186ba:	ee07 3a90 	vmov	s15, r3
 80186be:	f100 040c 	add.w	r4, r0, #12
 80186c2:	4603      	mov	r3, r0
 80186c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80186c8:	ee67 7a84 	vmul.f32	s15, s15, s8
 80186cc:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80186d0:	eeb1 6a43 	vneg.f32	s12, s6
 80186d4:	edd2 7a02 	vldr	s15, [r2, #8]
 80186d8:	3214      	adds	r2, #20
 80186da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80186de:	ece3 6a01 	vstmia	r3!, {s13}
 80186e2:	429c      	cmp	r4, r3
 80186e4:	ed52 7a02 	vldr	s15, [r2, #-8]
 80186e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80186ec:	edc3 7a02 	vstr	s15, [r3, #8]
 80186f0:	ed52 7a01 	vldr	s15, [r2, #-4]
 80186f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80186f8:	edc3 7a05 	vstr	s15, [r3, #20]
 80186fc:	d1ea      	bne.n	80186d4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80186fe:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8018700:	698b      	ldr	r3, [r1, #24]
 8018702:	edd0 4a02 	vldr	s9, [r0, #8]
 8018706:	1a9b      	subs	r3, r3, r2
 8018708:	edd0 3a00 	vldr	s7, [r0]
 801870c:	edd0 6a01 	vldr	s13, [r0, #4]
 8018710:	ee07 3a90 	vmov	s15, r3
 8018714:	684b      	ldr	r3, [r1, #4]
 8018716:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801871a:	ed90 5a05 	vldr	s10, [r0, #20]
 801871e:	1a9b      	subs	r3, r3, r2
 8018720:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018724:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8018728:	ed90 2a03 	vldr	s4, [r0, #12]
 801872c:	ee07 3a10 	vmov	s14, r3
 8018730:	edd0 5a04 	vldr	s11, [r0, #16]
 8018734:	ee67 7a84 	vmul.f32	s15, s15, s8
 8018738:	ed90 1a07 	vldr	s2, [r0, #28]
 801873c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018740:	edd0 2a06 	vldr	s5, [r0, #24]
 8018744:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8018748:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801874c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018750:	ee32 5a45 	vsub.f32	s10, s4, s10
 8018754:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018758:	ee67 7a83 	vmul.f32	s15, s15, s6
 801875c:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8018760:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8018762:	694a      	ldr	r2, [r1, #20]
 8018764:	1b13      	subs	r3, r2, r4
 8018766:	ee07 3a10 	vmov	s14, r3
 801876a:	680b      	ldr	r3, [r1, #0]
 801876c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018770:	1b1b      	subs	r3, r3, r4
 8018772:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018776:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801877a:	ee07 3a10 	vmov	s14, r3
 801877e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018782:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018786:	eee6 4a87 	vfma.f32	s9, s13, s14
 801878a:	ee64 4a86 	vmul.f32	s9, s9, s12
 801878e:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8018792:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8018794:	698b      	ldr	r3, [r1, #24]
 8018796:	1a9b      	subs	r3, r3, r2
 8018798:	ee06 3a90 	vmov	s13, r3
 801879c:	684b      	ldr	r3, [r1, #4]
 801879e:	1a9b      	subs	r3, r3, r2
 80187a0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80187a4:	ee07 3a10 	vmov	s14, r3
 80187a8:	ee66 6a84 	vmul.f32	s13, s13, s8
 80187ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80187b0:	ee65 6a66 	vnmul.f32	s13, s10, s13
 80187b4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80187b8:	eee5 6a87 	vfma.f32	s13, s11, s14
 80187bc:	ee66 6a83 	vmul.f32	s13, s13, s6
 80187c0:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 80187c4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80187c6:	694a      	ldr	r2, [r1, #20]
 80187c8:	1b13      	subs	r3, r2, r4
 80187ca:	ee07 3a10 	vmov	s14, r3
 80187ce:	680b      	ldr	r3, [r1, #0]
 80187d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80187d4:	1b1b      	subs	r3, r3, r4
 80187d6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80187da:	ee25 5a47 	vnmul.f32	s10, s10, s14
 80187de:	ee07 3a10 	vmov	s14, r3
 80187e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80187e6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80187ea:	eea5 5a87 	vfma.f32	s10, s11, s14
 80187ee:	edd0 5a08 	vldr	s11, [r0, #32]
 80187f2:	ee31 1a65 	vsub.f32	s2, s2, s11
 80187f6:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80187fa:	ee25 5a06 	vmul.f32	s10, s10, s12
 80187fe:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8018802:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8018804:	698b      	ldr	r3, [r1, #24]
 8018806:	1a9b      	subs	r3, r3, r2
 8018808:	ee07 3a10 	vmov	s14, r3
 801880c:	684b      	ldr	r3, [r1, #4]
 801880e:	1a9b      	subs	r3, r3, r2
 8018810:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018814:	ee01 3a90 	vmov	s3, r3
 8018818:	ee27 7a04 	vmul.f32	s14, s14, s8
 801881c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8018820:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8018824:	ee61 1a84 	vmul.f32	s3, s3, s8
 8018828:	eea1 7a21 	vfma.f32	s14, s2, s3
 801882c:	ee27 7a03 	vmul.f32	s14, s14, s6
 8018830:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8018834:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8018836:	694a      	ldr	r2, [r1, #20]
 8018838:	1b13      	subs	r3, r2, r4
 801883a:	ee03 3a10 	vmov	s6, r3
 801883e:	680b      	ldr	r3, [r1, #0]
 8018840:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8018844:	1b1b      	subs	r3, r3, r4
 8018846:	ee23 3a04 	vmul.f32	s6, s6, s8
 801884a:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801884e:	ee03 3a10 	vmov	s6, r3
 8018852:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8018856:	ee23 4a04 	vmul.f32	s8, s6, s8
 801885a:	eee1 5a04 	vfma.f32	s11, s2, s8
 801885e:	ee25 6a86 	vmul.f32	s12, s11, s12
 8018862:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8018866:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801886a:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801886e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8018872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018876:	dd13      	ble.n	80188a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8018878:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801887c:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8018880:	63c3      	str	r3, [r0, #60]	; 0x3c
 8018882:	eee3 7a87 	vfma.f32	s15, s7, s14
 8018886:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801888a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801888e:	dd15      	ble.n	80188bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8018890:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018894:	6403      	str	r3, [r0, #64]	; 0x40
 8018896:	bd70      	pop	{r4, r5, r6, pc}
 8018898:	4623      	mov	r3, r4
 801889a:	e6fd      	b.n	8018698 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801889c:	462a      	mov	r2, r5
 801889e:	e706      	b.n	80186ae <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80188a0:	d502      	bpl.n	80188a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 80188a2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80188a6:	e7e9      	b.n	801887c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 80188a8:	ee22 2a64 	vnmul.f32	s4, s4, s9
 80188ac:	eea3 2a85 	vfma.f32	s4, s7, s10
 80188b0:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 80188b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188b8:	dade      	bge.n	8018878 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 80188ba:	e7f2      	b.n	80188a2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 80188bc:	d502      	bpl.n	80188c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 80188be:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80188c2:	e7e7      	b.n	8018894 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 80188c4:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 80188c8:	eee3 4a86 	vfma.f32	s9, s7, s12
 80188cc:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80188d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188d4:	dadc      	bge.n	8018890 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 80188d6:	e7f2      	b.n	80188be <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 80188d8:	3d800000 	.word	0x3d800000

080188dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 80188dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80188e0:	2714      	movs	r7, #20
 80188e2:	435f      	muls	r7, r3
 80188e4:	eb02 0c07 	add.w	ip, r2, r7
 80188e8:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80188ec:	f115 0e0f 	adds.w	lr, r5, #15
 80188f0:	f100 80a2 	bmi.w	8018a38 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 80188f4:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 80188f8:	9c08      	ldr	r4, [sp, #32]
 80188fa:	2614      	movs	r6, #20
 80188fc:	f8c0 e014 	str.w	lr, [r0, #20]
 8018900:	4366      	muls	r6, r4
 8018902:	eb02 0806 	add.w	r8, r2, r6
 8018906:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801890a:	f115 040f 	adds.w	r4, r5, #15
 801890e:	f100 809f 	bmi.w	8018a50 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8018912:	1124      	asrs	r4, r4, #4
 8018914:	eba4 040e 	sub.w	r4, r4, lr
 8018918:	6184      	str	r4, [r0, #24]
 801891a:	2c00      	cmp	r4, #0
 801891c:	f000 808a 	beq.w	8018a34 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8018920:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8018924:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018928:	5995      	ldr	r5, [r2, r6]
 801892a:	eba4 0809 	sub.w	r8, r4, r9
 801892e:	59d4      	ldr	r4, [r2, r7]
 8018930:	eba5 0a04 	sub.w	sl, r5, r4
 8018934:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8018938:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801893c:	fb0e fe05 	mul.w	lr, lr, r5
 8018940:	fb0a ee19 	mls	lr, sl, r9, lr
 8018944:	fb08 e404 	mla	r4, r8, r4, lr
 8018948:	3c01      	subs	r4, #1
 801894a:	19a4      	adds	r4, r4, r6
 801894c:	f100 808c 	bmi.w	8018a68 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8018950:	fb94 fef6 	sdiv	lr, r4, r6
 8018954:	fb06 441e 	mls	r4, r6, lr, r4
 8018958:	f8c0 e000 	str.w	lr, [r0]
 801895c:	6104      	str	r4, [r0, #16]
 801895e:	2d00      	cmp	r5, #0
 8018960:	f2c0 8095 	blt.w	8018a8e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8018964:	fb95 f4f6 	sdiv	r4, r5, r6
 8018968:	fb06 5514 	mls	r5, r6, r4, r5
 801896c:	6044      	str	r4, [r0, #4]
 801896e:	6085      	str	r5, [r0, #8]
 8018970:	60c6      	str	r6, [r0, #12]
 8018972:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8018976:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801897a:	6945      	ldr	r5, [r0, #20]
 801897c:	59d2      	ldr	r2, [r2, r7]
 801897e:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8018982:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8018ab0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8018986:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801898a:	ee07 4a10 	vmov	s14, r4
 801898e:	6804      	ldr	r4, [r0, #0]
 8018990:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8018994:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018998:	ee07 2a90 	vmov	s15, r2
 801899c:	ee27 7a26 	vmul.f32	s14, s14, s13
 80189a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80189a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80189a8:	edd3 6a00 	vldr	s13, [r3]
 80189ac:	eee6 6a07 	vfma.f32	s13, s12, s14
 80189b0:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 80189b4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80189b8:	edc0 6a07 	vstr	s13, [r0, #28]
 80189bc:	edd0 6a01 	vldr	s13, [r0, #4]
 80189c0:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 80189c4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80189c8:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 80189cc:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80189d0:	ed80 6a08 	vstr	s12, [r0, #32]
 80189d4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80189d6:	6242      	str	r2, [r0, #36]	; 0x24
 80189d8:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 80189dc:	ed93 6a03 	vldr	s12, [r3, #12]
 80189e0:	eea5 6a87 	vfma.f32	s12, s11, s14
 80189e4:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 80189e8:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80189ec:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 80189f0:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 80189f4:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 80189f8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80189fc:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8018a00:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8018a02:	6302      	str	r2, [r0, #48]	; 0x30
 8018a04:	ed93 6a06 	vldr	s12, [r3, #24]
 8018a08:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8018a0c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8018a10:	eeb0 7a46 	vmov.f32	s14, s12
 8018a14:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8018a18:	eea6 7a27 	vfma.f32	s14, s12, s15
 8018a1c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8018a20:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8018a24:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8018a28:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018a2c:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8018a30:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8018a32:	63c3      	str	r3, [r0, #60]	; 0x3c
 8018a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a38:	2410      	movs	r4, #16
 8018a3a:	f1c5 0501 	rsb	r5, r5, #1
 8018a3e:	fb9e fef4 	sdiv	lr, lr, r4
 8018a42:	f015 050f 	ands.w	r5, r5, #15
 8018a46:	bf18      	it	ne
 8018a48:	2501      	movne	r5, #1
 8018a4a:	ebae 0e05 	sub.w	lr, lr, r5
 8018a4e:	e753      	b.n	80188f8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8018a50:	f04f 0910 	mov.w	r9, #16
 8018a54:	f1c5 0501 	rsb	r5, r5, #1
 8018a58:	fb94 f4f9 	sdiv	r4, r4, r9
 8018a5c:	f015 050f 	ands.w	r5, r5, #15
 8018a60:	bf18      	it	ne
 8018a62:	2501      	movne	r5, #1
 8018a64:	1b64      	subs	r4, r4, r5
 8018a66:	e755      	b.n	8018914 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8018a68:	4264      	negs	r4, r4
 8018a6a:	fb94 fef6 	sdiv	lr, r4, r6
 8018a6e:	f1ce 0800 	rsb	r8, lr, #0
 8018a72:	fb06 441e 	mls	r4, r6, lr, r4
 8018a76:	f8c0 8000 	str.w	r8, [r0]
 8018a7a:	6104      	str	r4, [r0, #16]
 8018a7c:	2c00      	cmp	r4, #0
 8018a7e:	f43f af6e 	beq.w	801895e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8018a82:	ea6f 0e0e 	mvn.w	lr, lr
 8018a86:	1b34      	subs	r4, r6, r4
 8018a88:	f8c0 e000 	str.w	lr, [r0]
 8018a8c:	e766      	b.n	801895c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8018a8e:	426d      	negs	r5, r5
 8018a90:	fb95 f4f6 	sdiv	r4, r5, r6
 8018a94:	f1c4 0e00 	rsb	lr, r4, #0
 8018a98:	fb06 5514 	mls	r5, r6, r4, r5
 8018a9c:	f8c0 e004 	str.w	lr, [r0, #4]
 8018aa0:	6085      	str	r5, [r0, #8]
 8018aa2:	2d00      	cmp	r5, #0
 8018aa4:	f43f af64 	beq.w	8018970 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8018aa8:	43e4      	mvns	r4, r4
 8018aaa:	1b75      	subs	r5, r6, r5
 8018aac:	6044      	str	r4, [r0, #4]
 8018aae:	e75e      	b.n	801896e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8018ab0:	3d800000 	.word	0x3d800000

08018ab4 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8018ab4:	4602      	mov	r2, r0
 8018ab6:	b148      	cbz	r0, 8018acc <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8018ab8:	2300      	movs	r3, #0
 8018aba:	b298      	uxth	r0, r3
 8018abc:	3301      	adds	r3, #1
 8018abe:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8018ac2:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8018ac6:	2900      	cmp	r1, #0
 8018ac8:	d1f7      	bne.n	8018aba <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8018aca:	4770      	bx	lr
 8018acc:	4770      	bx	lr

08018ace <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8018ace:	b530      	push	{r4, r5, lr}
 8018ad0:	4604      	mov	r4, r0
 8018ad2:	b159      	cbz	r1, 8018aec <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8018ad4:	b148      	cbz	r0, 8018aea <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8018ad6:	2300      	movs	r3, #0
 8018ad8:	b298      	uxth	r0, r3
 8018ada:	4282      	cmp	r2, r0
 8018adc:	d905      	bls.n	8018aea <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8018ade:	5ccd      	ldrb	r5, [r1, r3]
 8018ae0:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8018ae4:	3301      	adds	r3, #1
 8018ae6:	2d00      	cmp	r5, #0
 8018ae8:	d1f6      	bne.n	8018ad8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8018aea:	bd30      	pop	{r4, r5, pc}
 8018aec:	4608      	mov	r0, r1
 8018aee:	e7fc      	b.n	8018aea <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08018af0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 8018af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018af2:	468c      	mov	ip, r1
 8018af4:	b08b      	sub	sp, #44	; 0x2c
 8018af6:	2100      	movs	r1, #0
 8018af8:	ae01      	add	r6, sp, #4
 8018afa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8018afe:	211f      	movs	r1, #31
 8018b00:	fbb0 f7f3 	udiv	r7, r0, r3
 8018b04:	fb03 0517 	mls	r5, r3, r7, r0
 8018b08:	4638      	mov	r0, r7
 8018b0a:	b2ec      	uxtb	r4, r5
 8018b0c:	2d09      	cmp	r5, #9
 8018b0e:	bfd4      	ite	le
 8018b10:	3430      	addle	r4, #48	; 0x30
 8018b12:	3457      	addgt	r4, #87	; 0x57
 8018b14:	b2e4      	uxtb	r4, r4
 8018b16:	558c      	strb	r4, [r1, r6]
 8018b18:	1e4c      	subs	r4, r1, #1
 8018b1a:	b92f      	cbnz	r7, 8018b28 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 8018b1c:	4431      	add	r1, r6
 8018b1e:	4660      	mov	r0, ip
 8018b20:	f7ff ffd5 	bl	8018ace <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8018b24:	b00b      	add	sp, #44	; 0x2c
 8018b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b28:	4621      	mov	r1, r4
 8018b2a:	e7e9      	b.n	8018b00 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

08018b2c <_ZN8touchgfx7Unicode4itoaElPtti>:
 8018b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b2e:	4607      	mov	r7, r0
 8018b30:	b08b      	sub	sp, #44	; 0x2c
 8018b32:	4608      	mov	r0, r1
 8018b34:	b341      	cbz	r1, 8018b88 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8018b36:	1e99      	subs	r1, r3, #2
 8018b38:	2922      	cmp	r1, #34	; 0x22
 8018b3a:	d825      	bhi.n	8018b88 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8018b3c:	2100      	movs	r1, #0
 8018b3e:	463c      	mov	r4, r7
 8018b40:	261f      	movs	r6, #31
 8018b42:	f10d 0c04 	add.w	ip, sp, #4
 8018b46:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8018b4a:	1e71      	subs	r1, r6, #1
 8018b4c:	fb94 fef3 	sdiv	lr, r4, r3
 8018b50:	fb03 441e 	mls	r4, r3, lr, r4
 8018b54:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8018b58:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8018b5c:	b2ec      	uxtb	r4, r5
 8018b5e:	2d09      	cmp	r5, #9
 8018b60:	bfd4      	ite	le
 8018b62:	3430      	addle	r4, #48	; 0x30
 8018b64:	3457      	addgt	r4, #87	; 0x57
 8018b66:	b2e4      	uxtb	r4, r4
 8018b68:	f80c 4006 	strb.w	r4, [ip, r6]
 8018b6c:	4674      	mov	r4, lr
 8018b6e:	b96c      	cbnz	r4, 8018b8c <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8018b70:	2f00      	cmp	r7, #0
 8018b72:	da05      	bge.n	8018b80 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8018b74:	ab0a      	add	r3, sp, #40	; 0x28
 8018b76:	4419      	add	r1, r3
 8018b78:	232d      	movs	r3, #45	; 0x2d
 8018b7a:	f801 3c24 	strb.w	r3, [r1, #-36]
 8018b7e:	1eb1      	subs	r1, r6, #2
 8018b80:	3101      	adds	r1, #1
 8018b82:	4461      	add	r1, ip
 8018b84:	f7ff ffa3 	bl	8018ace <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8018b88:	b00b      	add	sp, #44	; 0x2c
 8018b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b8c:	460e      	mov	r6, r1
 8018b8e:	e7dc      	b.n	8018b4a <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

08018b90 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8018b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b94:	b085      	sub	sp, #20
 8018b96:	4691      	mov	r9, r2
 8018b98:	6802      	ldr	r2, [r0, #0]
 8018b9a:	4688      	mov	r8, r1
 8018b9c:	461c      	mov	r4, r3
 8018b9e:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8018ba2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8018ba6:	4683      	mov	fp, r0
 8018ba8:	4610      	mov	r0, r2
 8018baa:	9103      	str	r1, [sp, #12]
 8018bac:	9302      	str	r3, [sp, #8]
 8018bae:	9201      	str	r2, [sp, #4]
 8018bb0:	f7ff ff80 	bl	8018ab4 <_ZN8touchgfx7Unicode6strlenEPKt>
 8018bb4:	f1b8 0f00 	cmp.w	r8, #0
 8018bb8:	bf0c      	ite	eq
 8018bba:	4684      	moveq	ip, r0
 8018bbc:	f100 0c01 	addne.w	ip, r0, #1
 8018bc0:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 8018bc4:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8018bc8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8018bca:	fa1f fc8c 	uxth.w	ip, ip
 8018bce:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018bd0:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8018bd4:	9903      	ldr	r1, [sp, #12]
 8018bd6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8018bda:	d041      	beq.n	8018c60 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8018bdc:	d834      	bhi.n	8018c48 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 8018bde:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 8018be2:	d059      	beq.n	8018c98 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8018be4:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8018be8:	d03a      	beq.n	8018c60 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8018bea:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 8018bee:	d034      	beq.n	8018c5a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8018bf0:	2400      	movs	r4, #0
 8018bf2:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8018bf6:	3a01      	subs	r2, #1
 8018bf8:	b169      	cbz	r1, 8018c16 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018bfa:	9911      	ldr	r1, [sp, #68]	; 0x44
 8018bfc:	458c      	cmp	ip, r1
 8018bfe:	da09      	bge.n	8018c14 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8018c00:	eba1 010c 	sub.w	r1, r1, ip
 8018c04:	b289      	uxth	r1, r1
 8018c06:	b933      	cbnz	r3, 8018c16 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018c08:	2e00      	cmp	r6, #0
 8018c0a:	d051      	beq.n	8018cb0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8018c0c:	2800      	cmp	r0, #0
 8018c0e:	d04f      	beq.n	8018cb0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8018c10:	440c      	add	r4, r1
 8018c12:	b2a4      	uxth	r4, r4
 8018c14:	2100      	movs	r1, #0
 8018c16:	682b      	ldr	r3, [r5, #0]
 8018c18:	4293      	cmp	r3, r2
 8018c1a:	da07      	bge.n	8018c2c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8018c1c:	f1b8 0f00 	cmp.w	r8, #0
 8018c20:	d004      	beq.n	8018c2c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8018c22:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 8018c26:	682b      	ldr	r3, [r5, #0]
 8018c28:	3301      	adds	r3, #1
 8018c2a:	602b      	str	r3, [r5, #0]
 8018c2c:	2730      	movs	r7, #48	; 0x30
 8018c2e:	2c00      	cmp	r4, #0
 8018c30:	d04e      	beq.n	8018cd0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8018c32:	682e      	ldr	r6, [r5, #0]
 8018c34:	3c01      	subs	r4, #1
 8018c36:	42b2      	cmp	r2, r6
 8018c38:	b2a4      	uxth	r4, r4
 8018c3a:	dd49      	ble.n	8018cd0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8018c3c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8018c40:	682b      	ldr	r3, [r5, #0]
 8018c42:	3301      	adds	r3, #1
 8018c44:	602b      	str	r3, [r5, #0]
 8018c46:	e7f2      	b.n	8018c2e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8018c48:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 8018c4c:	d01d      	beq.n	8018c8a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 8018c4e:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 8018c52:	d002      	beq.n	8018c5a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8018c54:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 8018c58:	e7c9      	b.n	8018bee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 8018c5a:	4684      	mov	ip, r0
 8018c5c:	f04f 0800 	mov.w	r8, #0
 8018c60:	2c00      	cmp	r4, #0
 8018c62:	d0c6      	beq.n	8018bf2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018c64:	b947      	cbnz	r7, 8018c78 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8018c66:	2801      	cmp	r0, #1
 8018c68:	d106      	bne.n	8018c78 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8018c6a:	8814      	ldrh	r4, [r2, #0]
 8018c6c:	2c30      	cmp	r4, #48	; 0x30
 8018c6e:	bf02      	ittt	eq
 8018c70:	3202      	addeq	r2, #2
 8018c72:	4638      	moveq	r0, r7
 8018c74:	f8cb 2000 	streq.w	r2, [fp]
 8018c78:	45bc      	cmp	ip, r7
 8018c7a:	da14      	bge.n	8018ca6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8018c7c:	b2bf      	uxth	r7, r7
 8018c7e:	eba7 040c 	sub.w	r4, r7, ip
 8018c82:	46bc      	mov	ip, r7
 8018c84:	b2a4      	uxth	r4, r4
 8018c86:	2600      	movs	r6, #0
 8018c88:	e7b3      	b.n	8018bf2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018c8a:	4684      	mov	ip, r0
 8018c8c:	b16c      	cbz	r4, 8018caa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 8018c8e:	42b8      	cmp	r0, r7
 8018c90:	dd00      	ble.n	8018c94 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 8018c92:	b2b8      	uxth	r0, r7
 8018c94:	2400      	movs	r4, #0
 8018c96:	e003      	b.n	8018ca0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8018c98:	f04f 0c01 	mov.w	ip, #1
 8018c9c:	2400      	movs	r4, #0
 8018c9e:	4660      	mov	r0, ip
 8018ca0:	4626      	mov	r6, r4
 8018ca2:	46a0      	mov	r8, r4
 8018ca4:	e7a5      	b.n	8018bf2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018ca6:	2400      	movs	r4, #0
 8018ca8:	e7ed      	b.n	8018c86 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8018caa:	4626      	mov	r6, r4
 8018cac:	46a0      	mov	r8, r4
 8018cae:	e7a0      	b.n	8018bf2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018cb0:	2900      	cmp	r1, #0
 8018cb2:	d0b0      	beq.n	8018c16 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018cb4:	2720      	movs	r7, #32
 8018cb6:	682e      	ldr	r6, [r5, #0]
 8018cb8:	2900      	cmp	r1, #0
 8018cba:	d0ac      	beq.n	8018c16 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018cbc:	3901      	subs	r1, #1
 8018cbe:	4296      	cmp	r6, r2
 8018cc0:	b289      	uxth	r1, r1
 8018cc2:	daa7      	bge.n	8018c14 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8018cc4:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8018cc8:	682b      	ldr	r3, [r5, #0]
 8018cca:	3301      	adds	r3, #1
 8018ccc:	602b      	str	r3, [r5, #0]
 8018cce:	e7f2      	b.n	8018cb6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 8018cd0:	b188      	cbz	r0, 8018cf6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8018cd2:	682b      	ldr	r3, [r5, #0]
 8018cd4:	3801      	subs	r0, #1
 8018cd6:	429a      	cmp	r2, r3
 8018cd8:	b280      	uxth	r0, r0
 8018cda:	dd0c      	ble.n	8018cf6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8018cdc:	f8db 3000 	ldr.w	r3, [fp]
 8018ce0:	1c9c      	adds	r4, r3, #2
 8018ce2:	f8cb 4000 	str.w	r4, [fp]
 8018ce6:	881c      	ldrh	r4, [r3, #0]
 8018ce8:	682b      	ldr	r3, [r5, #0]
 8018cea:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 8018cee:	682b      	ldr	r3, [r5, #0]
 8018cf0:	3301      	adds	r3, #1
 8018cf2:	602b      	str	r3, [r5, #0]
 8018cf4:	e7ec      	b.n	8018cd0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8018cf6:	2620      	movs	r6, #32
 8018cf8:	b151      	cbz	r1, 8018d10 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8018cfa:	6828      	ldr	r0, [r5, #0]
 8018cfc:	3901      	subs	r1, #1
 8018cfe:	4282      	cmp	r2, r0
 8018d00:	b289      	uxth	r1, r1
 8018d02:	dd05      	ble.n	8018d10 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8018d04:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8018d08:	682b      	ldr	r3, [r5, #0]
 8018d0a:	3301      	adds	r3, #1
 8018d0c:	602b      	str	r3, [r5, #0]
 8018d0e:	e7f3      	b.n	8018cf8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 8018d10:	b005      	add	sp, #20
 8018d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018d16 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8018d16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018d1a:	2400      	movs	r4, #0
 8018d1c:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 8018d20:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 8018d24:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 8018d28:	8014      	strh	r4, [r2, #0]
 8018d2a:	701c      	strb	r4, [r3, #0]
 8018d2c:	f888 4000 	strb.w	r4, [r8]
 8018d30:	f88c 4000 	strb.w	r4, [ip]
 8018d34:	f88e 4000 	strb.w	r4, [lr]
 8018d38:	703c      	strb	r4, [r7, #0]
 8018d3a:	6804      	ldr	r4, [r0, #0]
 8018d3c:	b1a4      	cbz	r4, 8018d68 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 8018d3e:	8824      	ldrh	r4, [r4, #0]
 8018d40:	f04f 0901 	mov.w	r9, #1
 8018d44:	b314      	cbz	r4, 8018d8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8018d46:	2c2b      	cmp	r4, #43	; 0x2b
 8018d48:	d001      	beq.n	8018d4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8018d4a:	2c20      	cmp	r4, #32
 8018d4c:	d110      	bne.n	8018d70 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 8018d4e:	8014      	strh	r4, [r2, #0]
 8018d50:	6804      	ldr	r4, [r0, #0]
 8018d52:	b10c      	cbz	r4, 8018d58 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 8018d54:	3402      	adds	r4, #2
 8018d56:	6004      	str	r4, [r0, #0]
 8018d58:	680c      	ldr	r4, [r1, #0]
 8018d5a:	b10c      	cbz	r4, 8018d60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8018d5c:	3401      	adds	r4, #1
 8018d5e:	600c      	str	r4, [r1, #0]
 8018d60:	6804      	ldr	r4, [r0, #0]
 8018d62:	b17c      	cbz	r4, 8018d84 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8018d64:	8824      	ldrh	r4, [r4, #0]
 8018d66:	e7ed      	b.n	8018d44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8018d68:	680c      	ldr	r4, [r1, #0]
 8018d6a:	b17c      	cbz	r4, 8018d8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8018d6c:	7824      	ldrb	r4, [r4, #0]
 8018d6e:	e7e7      	b.n	8018d40 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 8018d70:	2c2d      	cmp	r4, #45	; 0x2d
 8018d72:	d102      	bne.n	8018d7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8018d74:	f883 9000 	strb.w	r9, [r3]
 8018d78:	e7ea      	b.n	8018d50 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8018d7a:	2c23      	cmp	r4, #35	; 0x23
 8018d7c:	d107      	bne.n	8018d8e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 8018d7e:	f888 9000 	strb.w	r9, [r8]
 8018d82:	e7e5      	b.n	8018d50 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8018d84:	680c      	ldr	r4, [r1, #0]
 8018d86:	b10c      	cbz	r4, 8018d8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8018d88:	7824      	ldrb	r4, [r4, #0]
 8018d8a:	e7db      	b.n	8018d44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8018d8c:	2400      	movs	r4, #0
 8018d8e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8018d92:	2b09      	cmp	r3, #9
 8018d94:	d901      	bls.n	8018d9a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8018d96:	2c2a      	cmp	r4, #42	; 0x2a
 8018d98:	d122      	bne.n	8018de0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8018d9a:	2301      	movs	r3, #1
 8018d9c:	2c30      	cmp	r4, #48	; 0x30
 8018d9e:	f88e 3000 	strb.w	r3, [lr]
 8018da2:	d10d      	bne.n	8018dc0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8018da4:	f88c 3000 	strb.w	r3, [ip]
 8018da8:	6803      	ldr	r3, [r0, #0]
 8018daa:	b10b      	cbz	r3, 8018db0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8018dac:	3302      	adds	r3, #2
 8018dae:	6003      	str	r3, [r0, #0]
 8018db0:	680b      	ldr	r3, [r1, #0]
 8018db2:	b10b      	cbz	r3, 8018db8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8018db4:	3301      	adds	r3, #1
 8018db6:	600b      	str	r3, [r1, #0]
 8018db8:	6803      	ldr	r3, [r0, #0]
 8018dba:	2b00      	cmp	r3, #0
 8018dbc:	d02f      	beq.n	8018e1e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 8018dbe:	881c      	ldrh	r4, [r3, #0]
 8018dc0:	2c2a      	cmp	r4, #42	; 0x2a
 8018dc2:	d135      	bne.n	8018e30 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8018dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8018dc8:	6033      	str	r3, [r6, #0]
 8018dca:	6803      	ldr	r3, [r0, #0]
 8018dcc:	b10b      	cbz	r3, 8018dd2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 8018dce:	3302      	adds	r3, #2
 8018dd0:	6003      	str	r3, [r0, #0]
 8018dd2:	680b      	ldr	r3, [r1, #0]
 8018dd4:	b10b      	cbz	r3, 8018dda <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8018dd6:	3301      	adds	r3, #1
 8018dd8:	600b      	str	r3, [r1, #0]
 8018dda:	6803      	ldr	r3, [r0, #0]
 8018ddc:	b31b      	cbz	r3, 8018e26 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 8018dde:	881c      	ldrh	r4, [r3, #0]
 8018de0:	2c2e      	cmp	r4, #46	; 0x2e
 8018de2:	d11a      	bne.n	8018e1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8018de4:	2301      	movs	r3, #1
 8018de6:	703b      	strb	r3, [r7, #0]
 8018de8:	6803      	ldr	r3, [r0, #0]
 8018dea:	b10b      	cbz	r3, 8018df0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8018dec:	3302      	adds	r3, #2
 8018dee:	6003      	str	r3, [r0, #0]
 8018df0:	680b      	ldr	r3, [r1, #0]
 8018df2:	b10b      	cbz	r3, 8018df8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8018df4:	3301      	adds	r3, #1
 8018df6:	600b      	str	r3, [r1, #0]
 8018df8:	6803      	ldr	r3, [r0, #0]
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d036      	beq.n	8018e6c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 8018dfe:	881b      	ldrh	r3, [r3, #0]
 8018e00:	2b2a      	cmp	r3, #42	; 0x2a
 8018e02:	d137      	bne.n	8018e74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8018e04:	f04f 33ff 	mov.w	r3, #4294967295
 8018e08:	602b      	str	r3, [r5, #0]
 8018e0a:	6803      	ldr	r3, [r0, #0]
 8018e0c:	b10b      	cbz	r3, 8018e12 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 8018e0e:	3302      	adds	r3, #2
 8018e10:	6003      	str	r3, [r0, #0]
 8018e12:	680b      	ldr	r3, [r1, #0]
 8018e14:	b10b      	cbz	r3, 8018e1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8018e16:	3301      	adds	r3, #1
 8018e18:	600b      	str	r3, [r1, #0]
 8018e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e1e:	680c      	ldr	r4, [r1, #0]
 8018e20:	b134      	cbz	r4, 8018e30 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8018e22:	7824      	ldrb	r4, [r4, #0]
 8018e24:	e7cc      	b.n	8018dc0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8018e26:	680b      	ldr	r3, [r1, #0]
 8018e28:	2b00      	cmp	r3, #0
 8018e2a:	d0f6      	beq.n	8018e1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8018e2c:	781c      	ldrb	r4, [r3, #0]
 8018e2e:	e7d7      	b.n	8018de0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8018e30:	2300      	movs	r3, #0
 8018e32:	220a      	movs	r2, #10
 8018e34:	6033      	str	r3, [r6, #0]
 8018e36:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8018e3a:	fa1f f38c 	uxth.w	r3, ip
 8018e3e:	2b09      	cmp	r3, #9
 8018e40:	d8ce      	bhi.n	8018de0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8018e42:	6833      	ldr	r3, [r6, #0]
 8018e44:	fb02 c303 	mla	r3, r2, r3, ip
 8018e48:	6033      	str	r3, [r6, #0]
 8018e4a:	6803      	ldr	r3, [r0, #0]
 8018e4c:	b10b      	cbz	r3, 8018e52 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 8018e4e:	3302      	adds	r3, #2
 8018e50:	6003      	str	r3, [r0, #0]
 8018e52:	680b      	ldr	r3, [r1, #0]
 8018e54:	b10b      	cbz	r3, 8018e5a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8018e56:	3301      	adds	r3, #1
 8018e58:	600b      	str	r3, [r1, #0]
 8018e5a:	6803      	ldr	r3, [r0, #0]
 8018e5c:	b10b      	cbz	r3, 8018e62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 8018e5e:	881c      	ldrh	r4, [r3, #0]
 8018e60:	e7e9      	b.n	8018e36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8018e62:	680c      	ldr	r4, [r1, #0]
 8018e64:	2c00      	cmp	r4, #0
 8018e66:	d0e6      	beq.n	8018e36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8018e68:	7824      	ldrb	r4, [r4, #0]
 8018e6a:	e7e4      	b.n	8018e36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8018e6c:	680b      	ldr	r3, [r1, #0]
 8018e6e:	b10b      	cbz	r3, 8018e74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8018e70:	781b      	ldrb	r3, [r3, #0]
 8018e72:	e7c5      	b.n	8018e00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8018e74:	2200      	movs	r2, #0
 8018e76:	240a      	movs	r4, #10
 8018e78:	602a      	str	r2, [r5, #0]
 8018e7a:	3b30      	subs	r3, #48	; 0x30
 8018e7c:	682a      	ldr	r2, [r5, #0]
 8018e7e:	b29e      	uxth	r6, r3
 8018e80:	2e09      	cmp	r6, #9
 8018e82:	d813      	bhi.n	8018eac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8018e84:	fb04 3302 	mla	r3, r4, r2, r3
 8018e88:	602b      	str	r3, [r5, #0]
 8018e8a:	6803      	ldr	r3, [r0, #0]
 8018e8c:	b10b      	cbz	r3, 8018e92 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 8018e8e:	3302      	adds	r3, #2
 8018e90:	6003      	str	r3, [r0, #0]
 8018e92:	680b      	ldr	r3, [r1, #0]
 8018e94:	b10b      	cbz	r3, 8018e9a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8018e96:	3301      	adds	r3, #1
 8018e98:	600b      	str	r3, [r1, #0]
 8018e9a:	6803      	ldr	r3, [r0, #0]
 8018e9c:	b10b      	cbz	r3, 8018ea2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 8018e9e:	881b      	ldrh	r3, [r3, #0]
 8018ea0:	e7eb      	b.n	8018e7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8018ea2:	680b      	ldr	r3, [r1, #0]
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	d0e8      	beq.n	8018e7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8018ea8:	781b      	ldrb	r3, [r3, #0]
 8018eaa:	e7e6      	b.n	8018e7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8018eac:	2a06      	cmp	r2, #6
 8018eae:	bfa8      	it	ge
 8018eb0:	2206      	movge	r2, #6
 8018eb2:	602a      	str	r2, [r5, #0]
 8018eb4:	e7b1      	b.n	8018e1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08018eb6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8018eb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018eba:	b0a3      	sub	sp, #140	; 0x8c
 8018ebc:	2600      	movs	r6, #0
 8018ebe:	4607      	mov	r7, r0
 8018ec0:	4688      	mov	r8, r1
 8018ec2:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8018ec6:	4631      	mov	r1, r6
 8018ec8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8018eca:	4648      	mov	r0, r9
 8018ecc:	960d      	str	r6, [sp, #52]	; 0x34
 8018ece:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8018ed2:	2242      	movs	r2, #66	; 0x42
 8018ed4:	f00c f8ae 	bl	8025034 <memset>
 8018ed8:	b15f      	cbz	r7, 8018ef2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8018eda:	f108 3aff 	add.w	sl, r8, #4294967295
 8018ede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018ee0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018ee2:	b152      	cbz	r2, 8018efa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8018ee4:	8812      	ldrh	r2, [r2, #0]
 8018ee6:	b10a      	cbz	r2, 8018eec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8018ee8:	459a      	cmp	sl, r3
 8018eea:	dc2e      	bgt.n	8018f4a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8018eec:	2200      	movs	r2, #0
 8018eee:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8018ef2:	4638      	mov	r0, r7
 8018ef4:	b023      	add	sp, #140	; 0x8c
 8018ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018efa:	9a08      	ldr	r2, [sp, #32]
 8018efc:	2a00      	cmp	r2, #0
 8018efe:	d0f5      	beq.n	8018eec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8018f00:	7812      	ldrb	r2, [r2, #0]
 8018f02:	e7f0      	b.n	8018ee6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8018f04:	2d00      	cmp	r5, #0
 8018f06:	d0ea      	beq.n	8018ede <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018f08:	782a      	ldrb	r2, [r5, #0]
 8018f0a:	b142      	cbz	r2, 8018f1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8018f0c:	2a25      	cmp	r2, #37	; 0x25
 8018f0e:	d001      	beq.n	8018f14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 8018f10:	459a      	cmp	sl, r3
 8018f12:	dc08      	bgt.n	8018f26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8018f14:	f1bb 0f00 	cmp.w	fp, #0
 8018f18:	d121      	bne.n	8018f5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8018f1a:	2d00      	cmp	r5, #0
 8018f1c:	d0df      	beq.n	8018ede <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018f1e:	782a      	ldrb	r2, [r5, #0]
 8018f20:	f04f 0b00 	mov.w	fp, #0
 8018f24:	e01d      	b.n	8018f62 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8018f26:	f1bb 0f00 	cmp.w	fp, #0
 8018f2a:	d077      	beq.n	801901c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 8018f2c:	f8bb 2000 	ldrh.w	r2, [fp]
 8018f30:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8018f34:	f1bb 0f00 	cmp.w	fp, #0
 8018f38:	d002      	beq.n	8018f40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8018f3a:	f10b 0202 	add.w	r2, fp, #2
 8018f3e:	9209      	str	r2, [sp, #36]	; 0x24
 8018f40:	b10d      	cbz	r5, 8018f46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 8018f42:	3501      	adds	r5, #1
 8018f44:	9508      	str	r5, [sp, #32]
 8018f46:	3301      	adds	r3, #1
 8018f48:	930d      	str	r3, [sp, #52]	; 0x34
 8018f4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018f4c:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 8018f50:	f1bb 0f00 	cmp.w	fp, #0
 8018f54:	d0d6      	beq.n	8018f04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8018f56:	f8bb 2000 	ldrh.w	r2, [fp]
 8018f5a:	2a00      	cmp	r2, #0
 8018f5c:	d1d6      	bne.n	8018f0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 8018f5e:	f8bb 2000 	ldrh.w	r2, [fp]
 8018f62:	2a00      	cmp	r2, #0
 8018f64:	d0bb      	beq.n	8018ede <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018f66:	459a      	cmp	sl, r3
 8018f68:	ddb9      	ble.n	8018ede <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018f6a:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 8018f6e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8018f72:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 8018f76:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 8018f7a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 8018f7e:	960e      	str	r6, [sp, #56]	; 0x38
 8018f80:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 8018f84:	960f      	str	r6, [sp, #60]	; 0x3c
 8018f86:	f1bb 0f00 	cmp.w	fp, #0
 8018f8a:	d002      	beq.n	8018f92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8018f8c:	f10b 0302 	add.w	r3, fp, #2
 8018f90:	9309      	str	r3, [sp, #36]	; 0x24
 8018f92:	b10d      	cbz	r5, 8018f98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8018f94:	1c6b      	adds	r3, r5, #1
 8018f96:	9308      	str	r3, [sp, #32]
 8018f98:	ab0f      	add	r3, sp, #60	; 0x3c
 8018f9a:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8018f9e:	a908      	add	r1, sp, #32
 8018fa0:	a809      	add	r0, sp, #36	; 0x24
 8018fa2:	9305      	str	r3, [sp, #20]
 8018fa4:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8018fa8:	9304      	str	r3, [sp, #16]
 8018faa:	ab0e      	add	r3, sp, #56	; 0x38
 8018fac:	9303      	str	r3, [sp, #12]
 8018fae:	ab0c      	add	r3, sp, #48	; 0x30
 8018fb0:	9302      	str	r3, [sp, #8]
 8018fb2:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8018fb6:	9301      	str	r3, [sp, #4]
 8018fb8:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8018fbc:	9300      	str	r3, [sp, #0]
 8018fbe:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 8018fc2:	f7ff fea8 	bl	8018d16 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8018fc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	bfbf      	itttt	lt
 8018fcc:	6823      	ldrlt	r3, [r4, #0]
 8018fce:	3404      	addlt	r4, #4
 8018fd0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8018fd4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8018fd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	bfbe      	ittt	lt
 8018fdc:	6823      	ldrlt	r3, [r4, #0]
 8018fde:	3404      	addlt	r4, #4
 8018fe0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8018fe4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8018fe8:	bfb8      	it	lt
 8018fea:	930f      	strlt	r3, [sp, #60]	; 0x3c
 8018fec:	b1d9      	cbz	r1, 8019026 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 8018fee:	880b      	ldrh	r3, [r1, #0]
 8018ff0:	2b69      	cmp	r3, #105	; 0x69
 8018ff2:	d01f      	beq.n	8019034 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8018ff4:	d82f      	bhi.n	8019056 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 8018ff6:	2b58      	cmp	r3, #88	; 0x58
 8018ff8:	d01c      	beq.n	8019034 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8018ffa:	d818      	bhi.n	801902e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 8018ffc:	2b25      	cmp	r3, #37	; 0x25
 8018ffe:	d034      	beq.n	801906a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 8019000:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019002:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8019006:	f1bb 0f00 	cmp.w	fp, #0
 801900a:	f000 80b7 	beq.w	801917c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801900e:	f8bb 5000 	ldrh.w	r5, [fp]
 8019012:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8019016:	3301      	adds	r3, #1
 8019018:	930d      	str	r3, [sp, #52]	; 0x34
 801901a:	e029      	b.n	8019070 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801901c:	b10d      	cbz	r5, 8019022 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801901e:	782a      	ldrb	r2, [r5, #0]
 8019020:	e786      	b.n	8018f30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8019022:	462a      	mov	r2, r5
 8019024:	e784      	b.n	8018f30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8019026:	2a00      	cmp	r2, #0
 8019028:	d0ea      	beq.n	8019000 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801902a:	7813      	ldrb	r3, [r2, #0]
 801902c:	e7e0      	b.n	8018ff0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801902e:	3b63      	subs	r3, #99	; 0x63
 8019030:	2b01      	cmp	r3, #1
 8019032:	d8e5      	bhi.n	8019000 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8019034:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8019038:	b329      	cbz	r1, 8019086 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801903a:	880b      	ldrh	r3, [r1, #0]
 801903c:	2b69      	cmp	r3, #105	; 0x69
 801903e:	d063      	beq.n	8019108 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8019040:	d825      	bhi.n	801908e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 8019042:	2b63      	cmp	r3, #99	; 0x63
 8019044:	d038      	beq.n	80190b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 8019046:	2b64      	cmp	r3, #100	; 0x64
 8019048:	d05e      	beq.n	8019108 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801904a:	2b58      	cmp	r3, #88	; 0x58
 801904c:	d07a      	beq.n	8019144 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801904e:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 8019052:	4625      	mov	r5, r4
 8019054:	e036      	b.n	80190c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8019056:	2b73      	cmp	r3, #115	; 0x73
 8019058:	d0ec      	beq.n	8019034 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801905a:	d802      	bhi.n	8019062 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801905c:	2b6f      	cmp	r3, #111	; 0x6f
 801905e:	d1cf      	bne.n	8019000 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8019060:	e7e8      	b.n	8019034 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8019062:	2b75      	cmp	r3, #117	; 0x75
 8019064:	d0e6      	beq.n	8019034 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8019066:	2b78      	cmp	r3, #120	; 0x78
 8019068:	e7f9      	b.n	801905e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801906a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801906c:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 8019070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019072:	b10b      	cbz	r3, 8019078 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 8019074:	3302      	adds	r3, #2
 8019076:	9309      	str	r3, [sp, #36]	; 0x24
 8019078:	9b08      	ldr	r3, [sp, #32]
 801907a:	2b00      	cmp	r3, #0
 801907c:	f43f af2f 	beq.w	8018ede <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8019080:	3301      	adds	r3, #1
 8019082:	9308      	str	r3, [sp, #32]
 8019084:	e72b      	b.n	8018ede <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8019086:	2a00      	cmp	r2, #0
 8019088:	d0e1      	beq.n	801904e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801908a:	7813      	ldrb	r3, [r2, #0]
 801908c:	e7d6      	b.n	801903c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801908e:	2b73      	cmp	r3, #115	; 0x73
 8019090:	d036      	beq.n	8019100 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 8019092:	d807      	bhi.n	80190a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 8019094:	2b6f      	cmp	r3, #111	; 0x6f
 8019096:	d1da      	bne.n	801904e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8019098:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801909a:	1d25      	adds	r5, r4, #4
 801909c:	2308      	movs	r3, #8
 801909e:	eba8 0202 	sub.w	r2, r8, r2
 80190a2:	e049      	b.n	8019138 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 80190a4:	2b75      	cmp	r3, #117	; 0x75
 80190a6:	d042      	beq.n	801912e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 80190a8:	2b78      	cmp	r3, #120	; 0x78
 80190aa:	d1d0      	bne.n	801904e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 80190ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80190ae:	1d25      	adds	r5, r4, #4
 80190b0:	2310      	movs	r3, #16
 80190b2:	eba8 0202 	sub.w	r2, r8, r2
 80190b6:	e03f      	b.n	8019138 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 80190b8:	6823      	ldr	r3, [r4, #0]
 80190ba:	1d25      	adds	r5, r4, #4
 80190bc:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 80190c0:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80190c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80190c6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 80190ca:	2b00      	cmp	r3, #0
 80190cc:	d051      	beq.n	8019172 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 80190ce:	881a      	ldrh	r2, [r3, #0]
 80190d0:	a80d      	add	r0, sp, #52	; 0x34
 80190d2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80190d6:	462c      	mov	r4, r5
 80190d8:	9005      	str	r0, [sp, #20]
 80190da:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 80190de:	9004      	str	r0, [sp, #16]
 80190e0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80190e2:	9003      	str	r0, [sp, #12]
 80190e4:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 80190e8:	9002      	str	r0, [sp, #8]
 80190ea:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80190ec:	9001      	str	r0, [sp, #4]
 80190ee:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 80190f2:	e9cd 8706 	strd	r8, r7, [sp, #24]
 80190f6:	9000      	str	r0, [sp, #0]
 80190f8:	a810      	add	r0, sp, #64	; 0x40
 80190fa:	f7ff fd49 	bl	8018b90 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 80190fe:	e7b7      	b.n	8019070 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8019100:	1d25      	adds	r5, r4, #4
 8019102:	6823      	ldr	r3, [r4, #0]
 8019104:	9310      	str	r3, [sp, #64]	; 0x40
 8019106:	e7dd      	b.n	80190c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8019108:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801910a:	230a      	movs	r3, #10
 801910c:	4649      	mov	r1, r9
 801910e:	6820      	ldr	r0, [r4, #0]
 8019110:	eba8 0202 	sub.w	r2, r8, r2
 8019114:	1d25      	adds	r5, r4, #4
 8019116:	b292      	uxth	r2, r2
 8019118:	f7ff fd08 	bl	8018b2c <_ZN8touchgfx7Unicode4itoaElPtti>
 801911c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8019120:	2b2d      	cmp	r3, #45	; 0x2d
 8019122:	d1cf      	bne.n	80190c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8019124:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8019128:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801912a:	3302      	adds	r3, #2
 801912c:	e7ea      	b.n	8019104 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801912e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019130:	1d25      	adds	r5, r4, #4
 8019132:	230a      	movs	r3, #10
 8019134:	eba8 0202 	sub.w	r2, r8, r2
 8019138:	b292      	uxth	r2, r2
 801913a:	4649      	mov	r1, r9
 801913c:	6820      	ldr	r0, [r4, #0]
 801913e:	f7ff fcd7 	bl	8018af0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8019142:	e7bf      	b.n	80190c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8019144:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019146:	2310      	movs	r3, #16
 8019148:	4649      	mov	r1, r9
 801914a:	6820      	ldr	r0, [r4, #0]
 801914c:	eba8 0202 	sub.w	r2, r8, r2
 8019150:	1d25      	adds	r5, r4, #4
 8019152:	b292      	uxth	r2, r2
 8019154:	f7ff fccc 	bl	8018af0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8019158:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801915c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8019160:	2b00      	cmp	r3, #0
 8019162:	d0af      	beq.n	80190c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8019164:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8019168:	2919      	cmp	r1, #25
 801916a:	d8f7      	bhi.n	801915c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801916c:	3b20      	subs	r3, #32
 801916e:	8013      	strh	r3, [r2, #0]
 8019170:	e7f4      	b.n	801915c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8019172:	9a08      	ldr	r2, [sp, #32]
 8019174:	2a00      	cmp	r2, #0
 8019176:	d0ab      	beq.n	80190d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8019178:	7812      	ldrb	r2, [r2, #0]
 801917a:	e7a9      	b.n	80190d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801917c:	2d00      	cmp	r5, #0
 801917e:	f43f af48 	beq.w	8019012 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 8019182:	782d      	ldrb	r5, [r5, #0]
 8019184:	e745      	b.n	8019012 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

08019186 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8019186:	b507      	push	{r0, r1, r2, lr}
 8019188:	9300      	str	r3, [sp, #0]
 801918a:	4613      	mov	r3, r2
 801918c:	2200      	movs	r2, #0
 801918e:	f7ff fe92 	bl	8018eb6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 8019192:	b003      	add	sp, #12
 8019194:	f85d fb04 	ldr.w	pc, [sp], #4

08019198 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8019198:	b40c      	push	{r2, r3}
 801919a:	b507      	push	{r0, r1, r2, lr}
 801919c:	ab04      	add	r3, sp, #16
 801919e:	f853 2b04 	ldr.w	r2, [r3], #4
 80191a2:	9301      	str	r3, [sp, #4]
 80191a4:	f7ff ffef 	bl	8019186 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 80191a8:	b003      	add	sp, #12
 80191aa:	f85d eb04 	ldr.w	lr, [sp], #4
 80191ae:	b002      	add	sp, #8
 80191b0:	4770      	bx	lr
	...

080191b4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80191b4:	4b01      	ldr	r3, [pc, #4]	; (80191bc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80191b6:	6018      	str	r0, [r3, #0]
 80191b8:	4770      	bx	lr
 80191ba:	bf00      	nop
 80191bc:	2400b0e4 	.word	0x2400b0e4

080191c0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80191c0:	4b06      	ldr	r3, [pc, #24]	; (80191dc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80191c2:	881a      	ldrh	r2, [r3, #0]
 80191c4:	4282      	cmp	r2, r0
 80191c6:	d807      	bhi.n	80191d8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80191c8:	4b05      	ldr	r3, [pc, #20]	; (80191e0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80191ca:	881b      	ldrh	r3, [r3, #0]
 80191cc:	4413      	add	r3, r2
 80191ce:	4298      	cmp	r0, r3
 80191d0:	bfac      	ite	ge
 80191d2:	2000      	movge	r0, #0
 80191d4:	2001      	movlt	r0, #1
 80191d6:	4770      	bx	lr
 80191d8:	2000      	movs	r0, #0
 80191da:	4770      	bx	lr
 80191dc:	2400b104 	.word	0x2400b104
 80191e0:	2400b108 	.word	0x2400b108

080191e4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80191e4:	b508      	push	{r3, lr}
 80191e6:	4601      	mov	r1, r0
 80191e8:	f7ff ffea 	bl	80191c0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80191ec:	b118      	cbz	r0, 80191f6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 80191ee:	4b02      	ldr	r3, [pc, #8]	; (80191f8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80191f0:	681b      	ldr	r3, [r3, #0]
 80191f2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80191f6:	bd08      	pop	{r3, pc}
 80191f8:	2400b0e8 	.word	0x2400b0e8

080191fc <_ZN8touchgfx6Bitmap10clearCacheEv>:
 80191fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80191fe:	4c24      	ldr	r4, [pc, #144]	; (8019290 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8019200:	6823      	ldr	r3, [r4, #0]
 8019202:	2b00      	cmp	r3, #0
 8019204:	d042      	beq.n	801928c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8019206:	4a23      	ldr	r2, [pc, #140]	; (8019294 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8019208:	4d23      	ldr	r5, [pc, #140]	; (8019298 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801920a:	8811      	ldrh	r1, [r2, #0]
 801920c:	f8b5 c000 	ldrh.w	ip, [r5]
 8019210:	4822      	ldr	r0, [pc, #136]	; (801929c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8019212:	4461      	add	r1, ip
 8019214:	1c4a      	adds	r2, r1, #1
 8019216:	008f      	lsls	r7, r1, #2
 8019218:	f022 0201 	bic.w	r2, r2, #1
 801921c:	19de      	adds	r6, r3, r7
 801921e:	0412      	lsls	r2, r2, #16
 8019220:	6006      	str	r6, [r0, #0]
 8019222:	4e1f      	ldr	r6, [pc, #124]	; (80192a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8019224:	0c12      	lsrs	r2, r2, #16
 8019226:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801922a:	19da      	adds	r2, r3, r7
 801922c:	6032      	str	r2, [r6, #0]
 801922e:	220e      	movs	r2, #14
 8019230:	fb02 f20c 	mul.w	r2, r2, ip
 8019234:	3203      	adds	r2, #3
 8019236:	f022 0203 	bic.w	r2, r2, #3
 801923a:	443a      	add	r2, r7
 801923c:	4f19      	ldr	r7, [pc, #100]	; (80192a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801923e:	4413      	add	r3, r2
 8019240:	603b      	str	r3, [r7, #0]
 8019242:	2300      	movs	r3, #0
 8019244:	4f18      	ldr	r7, [pc, #96]	; (80192a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8019246:	469c      	mov	ip, r3
 8019248:	803b      	strh	r3, [r7, #0]
 801924a:	4f18      	ldr	r7, [pc, #96]	; (80192ac <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801924c:	683f      	ldr	r7, [r7, #0]
 801924e:	1aba      	subs	r2, r7, r2
 8019250:	4f17      	ldr	r7, [pc, #92]	; (80192b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8019252:	603a      	str	r2, [r7, #0]
 8019254:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8019258:	4a16      	ldr	r2, [pc, #88]	; (80192b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801925a:	8013      	strh	r3, [r2, #0]
 801925c:	428b      	cmp	r3, r1
 801925e:	d10d      	bne.n	801927c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8019260:	882d      	ldrh	r5, [r5, #0]
 8019262:	2300      	movs	r3, #0
 8019264:	6830      	ldr	r0, [r6, #0]
 8019266:	240e      	movs	r4, #14
 8019268:	429d      	cmp	r5, r3
 801926a:	d90f      	bls.n	801928c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801926c:	fb04 0203 	mla	r2, r4, r3, r0
 8019270:	3301      	adds	r3, #1
 8019272:	7b11      	ldrb	r1, [r2, #12]
 8019274:	f36f 1145 	bfc	r1, #5, #1
 8019278:	7311      	strb	r1, [r2, #12]
 801927a:	e7f5      	b.n	8019268 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801927c:	6822      	ldr	r2, [r4, #0]
 801927e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8019282:	6802      	ldr	r2, [r0, #0]
 8019284:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8019288:	3301      	adds	r3, #1
 801928a:	e7e7      	b.n	801925c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801928c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801928e:	bf00      	nop
 8019290:	2400b0e8 	.word	0x2400b0e8
 8019294:	2400b104 	.word	0x2400b104
 8019298:	2400b108 	.word	0x2400b108
 801929c:	2400b0fc 	.word	0x2400b0fc
 80192a0:	2400b0ec 	.word	0x2400b0ec
 80192a4:	2400b0f4 	.word	0x2400b0f4
 80192a8:	2400b106 	.word	0x2400b106
 80192ac:	2400b0f0 	.word	0x2400b0f0
 80192b0:	2400b100 	.word	0x2400b100
 80192b4:	2400b0f8 	.word	0x2400b0f8

080192b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80192b8:	4b06      	ldr	r3, [pc, #24]	; (80192d4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 80192ba:	681b      	ldr	r3, [r3, #0]
 80192bc:	b943      	cbnz	r3, 80192d0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80192be:	b139      	cbz	r1, 80192d0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80192c0:	4b05      	ldr	r3, [pc, #20]	; (80192d8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 80192c2:	801a      	strh	r2, [r3, #0]
 80192c4:	4b05      	ldr	r3, [pc, #20]	; (80192dc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 80192c6:	6019      	str	r1, [r3, #0]
 80192c8:	4b05      	ldr	r3, [pc, #20]	; (80192e0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 80192ca:	6018      	str	r0, [r3, #0]
 80192cc:	f7ff bf96 	b.w	80191fc <_ZN8touchgfx6Bitmap10clearCacheEv>
 80192d0:	4770      	bx	lr
 80192d2:	bf00      	nop
 80192d4:	2400b0f4 	.word	0x2400b0f4
 80192d8:	2400b108 	.word	0x2400b108
 80192dc:	2400b0f0 	.word	0x2400b0f0
 80192e0:	2400b0e8 	.word	0x2400b0e8

080192e4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80192e4:	b470      	push	{r4, r5, r6}
 80192e6:	4c07      	ldr	r4, [pc, #28]	; (8019304 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80192e8:	4605      	mov	r5, r0
 80192ea:	4610      	mov	r0, r2
 80192ec:	9a03      	ldr	r2, [sp, #12]
 80192ee:	6826      	ldr	r6, [r4, #0]
 80192f0:	b936      	cbnz	r6, 8019300 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 80192f2:	6025      	str	r5, [r4, #0]
 80192f4:	4c04      	ldr	r4, [pc, #16]	; (8019308 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 80192f6:	8021      	strh	r1, [r4, #0]
 80192f8:	4619      	mov	r1, r3
 80192fa:	bc70      	pop	{r4, r5, r6}
 80192fc:	f7ff bfdc 	b.w	80192b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8019300:	bc70      	pop	{r4, r5, r6}
 8019302:	4770      	bx	lr
 8019304:	2400b10c 	.word	0x2400b10c
 8019308:	2400b104 	.word	0x2400b104

0801930c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801930c:	4a12      	ldr	r2, [pc, #72]	; (8019358 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801930e:	8803      	ldrh	r3, [r0, #0]
 8019310:	8812      	ldrh	r2, [r2, #0]
 8019312:	4293      	cmp	r3, r2
 8019314:	d207      	bcs.n	8019326 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8019316:	4a11      	ldr	r2, [pc, #68]	; (801935c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8019318:	2114      	movs	r1, #20
 801931a:	6812      	ldr	r2, [r2, #0]
 801931c:	fb01 2303 	mla	r3, r1, r3, r2
 8019320:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8019324:	4770      	bx	lr
 8019326:	490e      	ldr	r1, [pc, #56]	; (8019360 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8019328:	8809      	ldrh	r1, [r1, #0]
 801932a:	4411      	add	r1, r2
 801932c:	428b      	cmp	r3, r1
 801932e:	da04      	bge.n	801933a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8019330:	1a9b      	subs	r3, r3, r2
 8019332:	4a0c      	ldr	r2, [pc, #48]	; (8019364 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8019334:	210e      	movs	r1, #14
 8019336:	6812      	ldr	r2, [r2, #0]
 8019338:	e7f0      	b.n	801931c <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801933a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801933e:	4293      	cmp	r3, r2
 8019340:	d108      	bne.n	8019354 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8019342:	4b09      	ldr	r3, [pc, #36]	; (8019368 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8019344:	781b      	ldrb	r3, [r3, #0]
 8019346:	b91b      	cbnz	r3, 8019350 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8019348:	4b08      	ldr	r3, [pc, #32]	; (801936c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801934a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801934e:	4770      	bx	lr
 8019350:	4b07      	ldr	r3, [pc, #28]	; (8019370 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8019352:	e7fa      	b.n	801934a <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8019354:	2000      	movs	r0, #0
 8019356:	4770      	bx	lr
 8019358:	2400b104 	.word	0x2400b104
 801935c:	2400b10c 	.word	0x2400b10c
 8019360:	2400b108 	.word	0x2400b108
 8019364:	2400b0ec 	.word	0x2400b0ec
 8019368:	2400b07c 	.word	0x2400b07c
 801936c:	2400b07e 	.word	0x2400b07e
 8019370:	2400b080 	.word	0x2400b080

08019374 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8019374:	4a12      	ldr	r2, [pc, #72]	; (80193c0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8019376:	8803      	ldrh	r3, [r0, #0]
 8019378:	8812      	ldrh	r2, [r2, #0]
 801937a:	4293      	cmp	r3, r2
 801937c:	d207      	bcs.n	801938e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801937e:	4a11      	ldr	r2, [pc, #68]	; (80193c4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8019380:	2114      	movs	r1, #20
 8019382:	6812      	ldr	r2, [r2, #0]
 8019384:	fb01 2303 	mla	r3, r1, r3, r2
 8019388:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801938c:	4770      	bx	lr
 801938e:	490e      	ldr	r1, [pc, #56]	; (80193c8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8019390:	8809      	ldrh	r1, [r1, #0]
 8019392:	4411      	add	r1, r2
 8019394:	428b      	cmp	r3, r1
 8019396:	da04      	bge.n	80193a2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8019398:	1a9b      	subs	r3, r3, r2
 801939a:	4a0c      	ldr	r2, [pc, #48]	; (80193cc <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801939c:	210e      	movs	r1, #14
 801939e:	6812      	ldr	r2, [r2, #0]
 80193a0:	e7f0      	b.n	8019384 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 80193a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80193a6:	4293      	cmp	r3, r2
 80193a8:	d108      	bne.n	80193bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 80193aa:	4b09      	ldr	r3, [pc, #36]	; (80193d0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80193ac:	781b      	ldrb	r3, [r3, #0]
 80193ae:	b91b      	cbnz	r3, 80193b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 80193b0:	4b08      	ldr	r3, [pc, #32]	; (80193d4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80193b2:	f9b3 0000 	ldrsh.w	r0, [r3]
 80193b6:	4770      	bx	lr
 80193b8:	4b07      	ldr	r3, [pc, #28]	; (80193d8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80193ba:	e7fa      	b.n	80193b2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 80193bc:	2000      	movs	r0, #0
 80193be:	4770      	bx	lr
 80193c0:	2400b104 	.word	0x2400b104
 80193c4:	2400b10c 	.word	0x2400b10c
 80193c8:	2400b108 	.word	0x2400b108
 80193cc:	2400b0ec 	.word	0x2400b0ec
 80193d0:	2400b07c 	.word	0x2400b07c
 80193d4:	2400b080 	.word	0x2400b080
 80193d8:	2400b07e 	.word	0x2400b07e

080193dc <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80193dc:	4a1f      	ldr	r2, [pc, #124]	; (801945c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 80193de:	b510      	push	{r4, lr}
 80193e0:	880b      	ldrh	r3, [r1, #0]
 80193e2:	8812      	ldrh	r2, [r2, #0]
 80193e4:	4293      	cmp	r3, r2
 80193e6:	d213      	bcs.n	8019410 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 80193e8:	4a1d      	ldr	r2, [pc, #116]	; (8019460 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 80193ea:	2114      	movs	r1, #20
 80193ec:	6812      	ldr	r2, [r2, #0]
 80193ee:	fb01 2303 	mla	r3, r1, r3, r2
 80193f2:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80193f6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80193fa:	8a1a      	ldrh	r2, [r3, #16]
 80193fc:	8a5b      	ldrh	r3, [r3, #18]
 80193fe:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8019402:	8004      	strh	r4, [r0, #0]
 8019404:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019408:	8041      	strh	r1, [r0, #2]
 801940a:	8082      	strh	r2, [r0, #4]
 801940c:	80c3      	strh	r3, [r0, #6]
 801940e:	e00e      	b.n	801942e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8019410:	4914      	ldr	r1, [pc, #80]	; (8019464 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 8019412:	8809      	ldrh	r1, [r1, #0]
 8019414:	4411      	add	r1, r2
 8019416:	428b      	cmp	r3, r1
 8019418:	da0a      	bge.n	8019430 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801941a:	1a9b      	subs	r3, r3, r2
 801941c:	4a12      	ldr	r2, [pc, #72]	; (8019468 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801941e:	210e      	movs	r1, #14
 8019420:	6812      	ldr	r2, [r2, #0]
 8019422:	fb01 2303 	mla	r3, r1, r3, r2
 8019426:	681a      	ldr	r2, [r3, #0]
 8019428:	6002      	str	r2, [r0, #0]
 801942a:	685a      	ldr	r2, [r3, #4]
 801942c:	6042      	str	r2, [r0, #4]
 801942e:	bd10      	pop	{r4, pc}
 8019430:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019434:	4293      	cmp	r3, r2
 8019436:	d10b      	bne.n	8019450 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8019438:	4b0c      	ldr	r3, [pc, #48]	; (801946c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801943a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801943e:	4b0c      	ldr	r3, [pc, #48]	; (8019470 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8019440:	8081      	strh	r1, [r0, #4]
 8019442:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019446:	2300      	movs	r3, #0
 8019448:	80c2      	strh	r2, [r0, #6]
 801944a:	8003      	strh	r3, [r0, #0]
 801944c:	8043      	strh	r3, [r0, #2]
 801944e:	e7ee      	b.n	801942e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8019450:	2300      	movs	r3, #0
 8019452:	8003      	strh	r3, [r0, #0]
 8019454:	8043      	strh	r3, [r0, #2]
 8019456:	8083      	strh	r3, [r0, #4]
 8019458:	e7d8      	b.n	801940c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801945a:	bf00      	nop
 801945c:	2400b104 	.word	0x2400b104
 8019460:	2400b10c 	.word	0x2400b10c
 8019464:	2400b108 	.word	0x2400b108
 8019468:	2400b0ec 	.word	0x2400b0ec
 801946c:	2400b078 	.word	0x2400b078
 8019470:	2400b07a 	.word	0x2400b07a

08019474 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8019474:	4a17      	ldr	r2, [pc, #92]	; (80194d4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 8019476:	8803      	ldrh	r3, [r0, #0]
 8019478:	8812      	ldrh	r2, [r2, #0]
 801947a:	4293      	cmp	r3, r2
 801947c:	d213      	bcs.n	80194a6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801947e:	4a16      	ldr	r2, [pc, #88]	; (80194d8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8019480:	2114      	movs	r1, #20
 8019482:	6812      	ldr	r2, [r2, #0]
 8019484:	fb01 2303 	mla	r3, r1, r3, r2
 8019488:	8a1a      	ldrh	r2, [r3, #16]
 801948a:	8919      	ldrh	r1, [r3, #8]
 801948c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8019490:	428a      	cmp	r2, r1
 8019492:	db1d      	blt.n	80194d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8019494:	8a58      	ldrh	r0, [r3, #18]
 8019496:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801949a:	895b      	ldrh	r3, [r3, #10]
 801949c:	4298      	cmp	r0, r3
 801949e:	bfac      	ite	ge
 80194a0:	2000      	movge	r0, #0
 80194a2:	2001      	movlt	r0, #1
 80194a4:	4770      	bx	lr
 80194a6:	490d      	ldr	r1, [pc, #52]	; (80194dc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 80194a8:	8809      	ldrh	r1, [r1, #0]
 80194aa:	4411      	add	r1, r2
 80194ac:	428b      	cmp	r3, r1
 80194ae:	da0d      	bge.n	80194cc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 80194b0:	1a9b      	subs	r3, r3, r2
 80194b2:	4a0b      	ldr	r2, [pc, #44]	; (80194e0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 80194b4:	210e      	movs	r1, #14
 80194b6:	6812      	ldr	r2, [r2, #0]
 80194b8:	fb01 2303 	mla	r3, r1, r3, r2
 80194bc:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80194c0:	891a      	ldrh	r2, [r3, #8]
 80194c2:	4291      	cmp	r1, r2
 80194c4:	db04      	blt.n	80194d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 80194c6:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80194ca:	e7e6      	b.n	801949a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 80194cc:	2000      	movs	r0, #0
 80194ce:	4770      	bx	lr
 80194d0:	2001      	movs	r0, #1
 80194d2:	4770      	bx	lr
 80194d4:	2400b104 	.word	0x2400b104
 80194d8:	2400b10c 	.word	0x2400b10c
 80194dc:	2400b108 	.word	0x2400b108
 80194e0:	2400b0ec 	.word	0x2400b0ec

080194e4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 80194e4:	4a12      	ldr	r2, [pc, #72]	; (8019530 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80194e6:	8803      	ldrh	r3, [r0, #0]
 80194e8:	8811      	ldrh	r1, [r2, #0]
 80194ea:	428b      	cmp	r3, r1
 80194ec:	d20b      	bcs.n	8019506 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 80194ee:	4a11      	ldr	r2, [pc, #68]	; (8019534 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80194f0:	6812      	ldr	r2, [r2, #0]
 80194f2:	b112      	cbz	r2, 80194fa <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 80194f4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80194f8:	b9c0      	cbnz	r0, 801952c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 80194fa:	4a0f      	ldr	r2, [pc, #60]	; (8019538 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 80194fc:	6811      	ldr	r1, [r2, #0]
 80194fe:	2214      	movs	r2, #20
 8019500:	4353      	muls	r3, r2
 8019502:	58c8      	ldr	r0, [r1, r3]
 8019504:	4770      	bx	lr
 8019506:	4a0d      	ldr	r2, [pc, #52]	; (801953c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8019508:	8812      	ldrh	r2, [r2, #0]
 801950a:	440a      	add	r2, r1
 801950c:	4293      	cmp	r3, r2
 801950e:	da04      	bge.n	801951a <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8019510:	4a08      	ldr	r2, [pc, #32]	; (8019534 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8019512:	6812      	ldr	r2, [r2, #0]
 8019514:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8019518:	4770      	bx	lr
 801951a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801951e:	4293      	cmp	r3, r2
 8019520:	d103      	bne.n	801952a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8019522:	4b07      	ldr	r3, [pc, #28]	; (8019540 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8019524:	681b      	ldr	r3, [r3, #0]
 8019526:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8019528:	4770      	bx	lr
 801952a:	2000      	movs	r0, #0
 801952c:	4770      	bx	lr
 801952e:	bf00      	nop
 8019530:	2400b104 	.word	0x2400b104
 8019534:	2400b0e8 	.word	0x2400b0e8
 8019538:	2400b10c 	.word	0x2400b10c
 801953c:	2400b108 	.word	0x2400b108
 8019540:	2400b084 	.word	0x2400b084

08019544 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8019544:	4b24      	ldr	r3, [pc, #144]	; (80195d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8019546:	8802      	ldrh	r2, [r0, #0]
 8019548:	8818      	ldrh	r0, [r3, #0]
 801954a:	4282      	cmp	r2, r0
 801954c:	d221      	bcs.n	8019592 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801954e:	4b23      	ldr	r3, [pc, #140]	; (80195dc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8019550:	6819      	ldr	r1, [r3, #0]
 8019552:	2314      	movs	r3, #20
 8019554:	fb03 1302 	mla	r3, r3, r2, r1
 8019558:	6858      	ldr	r0, [r3, #4]
 801955a:	2800      	cmp	r0, #0
 801955c:	d03a      	beq.n	80195d4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801955e:	4920      	ldr	r1, [pc, #128]	; (80195e0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8019560:	6809      	ldr	r1, [r1, #0]
 8019562:	2900      	cmp	r1, #0
 8019564:	d036      	beq.n	80195d4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8019566:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801956a:	2900      	cmp	r1, #0
 801956c:	d032      	beq.n	80195d4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801956e:	891a      	ldrh	r2, [r3, #8]
 8019570:	8958      	ldrh	r0, [r3, #10]
 8019572:	4350      	muls	r0, r2
 8019574:	7c5a      	ldrb	r2, [r3, #17]
 8019576:	7cdb      	ldrb	r3, [r3, #19]
 8019578:	0952      	lsrs	r2, r2, #5
 801957a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801957e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8019582:	2b0b      	cmp	r3, #11
 8019584:	bf18      	it	ne
 8019586:	0040      	lslne	r0, r0, #1
 8019588:	3003      	adds	r0, #3
 801958a:	f020 0003 	bic.w	r0, r0, #3
 801958e:	4408      	add	r0, r1
 8019590:	4770      	bx	lr
 8019592:	4b14      	ldr	r3, [pc, #80]	; (80195e4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8019594:	881b      	ldrh	r3, [r3, #0]
 8019596:	4403      	add	r3, r0
 8019598:	429a      	cmp	r2, r3
 801959a:	da1a      	bge.n	80195d2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801959c:	4b12      	ldr	r3, [pc, #72]	; (80195e8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801959e:	1a10      	subs	r0, r2, r0
 80195a0:	210e      	movs	r1, #14
 80195a2:	681b      	ldr	r3, [r3, #0]
 80195a4:	fb01 3000 	mla	r0, r1, r0, r3
 80195a8:	7b03      	ldrb	r3, [r0, #12]
 80195aa:	f003 031f 	and.w	r3, r3, #31
 80195ae:	2b0b      	cmp	r3, #11
 80195b0:	d10b      	bne.n	80195ca <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 80195b2:	8903      	ldrh	r3, [r0, #8]
 80195b4:	8940      	ldrh	r0, [r0, #10]
 80195b6:	4358      	muls	r0, r3
 80195b8:	4b09      	ldr	r3, [pc, #36]	; (80195e0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80195ba:	3003      	adds	r0, #3
 80195bc:	6819      	ldr	r1, [r3, #0]
 80195be:	f020 0303 	bic.w	r3, r0, #3
 80195c2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80195c6:	4418      	add	r0, r3
 80195c8:	4770      	bx	lr
 80195ca:	2b0d      	cmp	r3, #13
 80195cc:	d101      	bne.n	80195d2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80195ce:	300d      	adds	r0, #13
 80195d0:	4770      	bx	lr
 80195d2:	2000      	movs	r0, #0
 80195d4:	4770      	bx	lr
 80195d6:	bf00      	nop
 80195d8:	2400b104 	.word	0x2400b104
 80195dc:	2400b10c 	.word	0x2400b10c
 80195e0:	2400b0e8 	.word	0x2400b0e8
 80195e4:	2400b108 	.word	0x2400b108
 80195e8:	2400b0ec 	.word	0x2400b0ec

080195ec <_ZNK8touchgfx6Bitmap9getFormatEv>:
 80195ec:	4a17      	ldr	r2, [pc, #92]	; (801964c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 80195ee:	b510      	push	{r4, lr}
 80195f0:	8803      	ldrh	r3, [r0, #0]
 80195f2:	8812      	ldrh	r2, [r2, #0]
 80195f4:	4293      	cmp	r3, r2
 80195f6:	d20c      	bcs.n	8019612 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 80195f8:	4a15      	ldr	r2, [pc, #84]	; (8019650 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 80195fa:	2114      	movs	r1, #20
 80195fc:	6812      	ldr	r2, [r2, #0]
 80195fe:	fb01 2303 	mla	r3, r1, r3, r2
 8019602:	7c58      	ldrb	r0, [r3, #17]
 8019604:	0942      	lsrs	r2, r0, #5
 8019606:	7cd8      	ldrb	r0, [r3, #19]
 8019608:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801960c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8019610:	bd10      	pop	{r4, pc}
 8019612:	4910      	ldr	r1, [pc, #64]	; (8019654 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8019614:	8809      	ldrh	r1, [r1, #0]
 8019616:	4411      	add	r1, r2
 8019618:	428b      	cmp	r3, r1
 801961a:	da09      	bge.n	8019630 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801961c:	1a9b      	subs	r3, r3, r2
 801961e:	4a0e      	ldr	r2, [pc, #56]	; (8019658 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8019620:	210e      	movs	r1, #14
 8019622:	6812      	ldr	r2, [r2, #0]
 8019624:	fb01 2303 	mla	r3, r1, r3, r2
 8019628:	7b18      	ldrb	r0, [r3, #12]
 801962a:	f000 001f 	and.w	r0, r0, #31
 801962e:	e7ef      	b.n	8019610 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8019630:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019634:	4293      	cmp	r3, r2
 8019636:	d106      	bne.n	8019646 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8019638:	f7ea fbd4 	bl	8003de4 <_ZN8touchgfx3HAL3lcdEv>
 801963c:	6803      	ldr	r3, [r0, #0]
 801963e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019644:	4718      	bx	r3
 8019646:	2000      	movs	r0, #0
 8019648:	e7e2      	b.n	8019610 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801964a:	bf00      	nop
 801964c:	2400b104 	.word	0x2400b104
 8019650:	2400b10c 	.word	0x2400b10c
 8019654:	2400b108 	.word	0x2400b108
 8019658:	2400b0ec 	.word	0x2400b0ec

0801965c <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801965c:	2010      	movs	r0, #16
 801965e:	4770      	bx	lr

08019660 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8019660:	2000      	movs	r0, #0
 8019662:	4770      	bx	lr

08019664 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8019664:	4b02      	ldr	r3, [pc, #8]	; (8019670 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 8019666:	8818      	ldrh	r0, [r3, #0]
 8019668:	0040      	lsls	r0, r0, #1
 801966a:	b280      	uxth	r0, r0
 801966c:	4770      	bx	lr
 801966e:	bf00      	nop
 8019670:	2400b07e 	.word	0x2400b07e

08019674 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8019674:	2bff      	cmp	r3, #255	; 0xff
 8019676:	d050      	beq.n	801971a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8019678:	2a0b      	cmp	r2, #11
 801967a:	d04a      	beq.n	8019712 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801967c:	d80e      	bhi.n	801969c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801967e:	2a03      	cmp	r2, #3
 8019680:	d03f      	beq.n	8019702 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8019682:	d804      	bhi.n	801968e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8019684:	2a01      	cmp	r2, #1
 8019686:	d03e      	beq.n	8019706 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8019688:	d93f      	bls.n	801970a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801968a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801968c:	4770      	bx	lr
 801968e:	2a09      	cmp	r2, #9
 8019690:	d03f      	beq.n	8019712 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8019692:	d83c      	bhi.n	801970e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8019694:	2a08      	cmp	r2, #8
 8019696:	d03a      	beq.n	801970e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8019698:	2000      	movs	r0, #0
 801969a:	4770      	bx	lr
 801969c:	2a2f      	cmp	r2, #47	; 0x2f
 801969e:	d024      	beq.n	80196ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 80196a0:	d80d      	bhi.n	80196be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 80196a2:	2a2d      	cmp	r2, #45	; 0x2d
 80196a4:	d014      	beq.n	80196d0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 80196a6:	d826      	bhi.n	80196f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 80196a8:	2a2c      	cmp	r2, #44	; 0x2c
 80196aa:	d1f5      	bne.n	8019698 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80196ac:	684b      	ldr	r3, [r1, #4]
 80196ae:	781b      	ldrb	r3, [r3, #0]
 80196b0:	2b01      	cmp	r3, #1
 80196b2:	d018      	beq.n	80196e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 80196b4:	d323      	bcc.n	80196fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 80196b6:	2b02      	cmp	r3, #2
 80196b8:	d1ee      	bne.n	8019698 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80196ba:	6880      	ldr	r0, [r0, #8]
 80196bc:	4770      	bx	lr
 80196be:	2a31      	cmp	r2, #49	; 0x31
 80196c0:	d004      	beq.n	80196cc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 80196c2:	d328      	bcc.n	8019716 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80196c4:	2a32      	cmp	r2, #50	; 0x32
 80196c6:	d026      	beq.n	8019716 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80196c8:	2a33      	cmp	r2, #51	; 0x33
 80196ca:	d1e5      	bne.n	8019698 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80196cc:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80196ce:	4770      	bx	lr
 80196d0:	684b      	ldr	r3, [r1, #4]
 80196d2:	781b      	ldrb	r3, [r3, #0]
 80196d4:	2b01      	cmp	r3, #1
 80196d6:	d004      	beq.n	80196e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80196d8:	d30b      	bcc.n	80196f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80196da:	2b02      	cmp	r3, #2
 80196dc:	d1dc      	bne.n	8019698 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80196de:	6900      	ldr	r0, [r0, #16]
 80196e0:	4770      	bx	lr
 80196e2:	6a00      	ldr	r0, [r0, #32]
 80196e4:	4770      	bx	lr
 80196e6:	6980      	ldr	r0, [r0, #24]
 80196e8:	4770      	bx	lr
 80196ea:	684b      	ldr	r3, [r1, #4]
 80196ec:	781b      	ldrb	r3, [r3, #0]
 80196ee:	2b00      	cmp	r3, #0
 80196f0:	d1d2      	bne.n	8019698 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80196f2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80196f4:	4770      	bx	lr
 80196f6:	684b      	ldr	r3, [r1, #4]
 80196f8:	781b      	ldrb	r3, [r3, #0]
 80196fa:	2b00      	cmp	r3, #0
 80196fc:	d1cc      	bne.n	8019698 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80196fe:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8019700:	4770      	bx	lr
 8019702:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8019704:	4770      	bx	lr
 8019706:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8019708:	4770      	bx	lr
 801970a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801970c:	4770      	bx	lr
 801970e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8019710:	4770      	bx	lr
 8019712:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8019714:	4770      	bx	lr
 8019716:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8019718:	4770      	bx	lr
 801971a:	2a0b      	cmp	r2, #11
 801971c:	d049      	beq.n	80197b2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801971e:	d80e      	bhi.n	801973e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8019720:	2a03      	cmp	r2, #3
 8019722:	d040      	beq.n	80197a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8019724:	d804      	bhi.n	8019730 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8019726:	2a01      	cmp	r2, #1
 8019728:	d03f      	beq.n	80197aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801972a:	d940      	bls.n	80197ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801972c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801972e:	4770      	bx	lr
 8019730:	2a09      	cmp	r2, #9
 8019732:	d03e      	beq.n	80197b2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8019734:	d801      	bhi.n	801973a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8019736:	2a08      	cmp	r2, #8
 8019738:	d1ae      	bne.n	8019698 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801973a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801973c:	4770      	bx	lr
 801973e:	2a2f      	cmp	r2, #47	; 0x2f
 8019740:	d024      	beq.n	801978c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8019742:	d80d      	bhi.n	8019760 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8019744:	2a2d      	cmp	r2, #45	; 0x2d
 8019746:	d014      	beq.n	8019772 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8019748:	d826      	bhi.n	8019798 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801974a:	2a2c      	cmp	r2, #44	; 0x2c
 801974c:	d1a4      	bne.n	8019698 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801974e:	684b      	ldr	r3, [r1, #4]
 8019750:	781b      	ldrb	r3, [r3, #0]
 8019752:	2b01      	cmp	r3, #1
 8019754:	d018      	beq.n	8019788 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8019756:	d324      	bcc.n	80197a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8019758:	2b02      	cmp	r3, #2
 801975a:	d19d      	bne.n	8019698 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801975c:	68c0      	ldr	r0, [r0, #12]
 801975e:	4770      	bx	lr
 8019760:	2a31      	cmp	r2, #49	; 0x31
 8019762:	d004      	beq.n	801976e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8019764:	d327      	bcc.n	80197b6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8019766:	2a32      	cmp	r2, #50	; 0x32
 8019768:	d025      	beq.n	80197b6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801976a:	2a33      	cmp	r2, #51	; 0x33
 801976c:	d194      	bne.n	8019698 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801976e:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8019770:	4770      	bx	lr
 8019772:	684b      	ldr	r3, [r1, #4]
 8019774:	781b      	ldrb	r3, [r3, #0]
 8019776:	2b01      	cmp	r3, #1
 8019778:	d004      	beq.n	8019784 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801977a:	d30b      	bcc.n	8019794 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801977c:	2b02      	cmp	r3, #2
 801977e:	d18b      	bne.n	8019698 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019780:	6940      	ldr	r0, [r0, #20]
 8019782:	4770      	bx	lr
 8019784:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8019786:	4770      	bx	lr
 8019788:	69c0      	ldr	r0, [r0, #28]
 801978a:	4770      	bx	lr
 801978c:	684b      	ldr	r3, [r1, #4]
 801978e:	781b      	ldrb	r3, [r3, #0]
 8019790:	2b00      	cmp	r3, #0
 8019792:	d181      	bne.n	8019698 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8019794:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8019796:	4770      	bx	lr
 8019798:	684b      	ldr	r3, [r1, #4]
 801979a:	781b      	ldrb	r3, [r3, #0]
 801979c:	2b00      	cmp	r3, #0
 801979e:	f47f af7b 	bne.w	8019698 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80197a2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80197a4:	4770      	bx	lr
 80197a6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80197a8:	4770      	bx	lr
 80197aa:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80197ac:	4770      	bx	lr
 80197ae:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80197b0:	4770      	bx	lr
 80197b2:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80197b4:	4770      	bx	lr
 80197b6:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 80197b8:	4770      	bx	lr

080197ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80197ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197be:	b087      	sub	sp, #28
 80197c0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80197c2:	9205      	str	r2, [sp, #20]
 80197c4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80197c8:	9101      	str	r1, [sp, #4]
 80197ca:	9202      	str	r2, [sp, #8]
 80197cc:	6841      	ldr	r1, [r0, #4]
 80197ce:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 80197d2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80197d6:	fb01 2404 	mla	r4, r1, r4, r2
 80197da:	6802      	ldr	r2, [r0, #0]
 80197dc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80197e0:	f8de 2000 	ldr.w	r2, [lr]
 80197e4:	9203      	str	r2, [sp, #12]
 80197e6:	f8de 2004 	ldr.w	r2, [lr, #4]
 80197ea:	3204      	adds	r2, #4
 80197ec:	9204      	str	r2, [sp, #16]
 80197ee:	9a02      	ldr	r2, [sp, #8]
 80197f0:	43d6      	mvns	r6, r2
 80197f2:	b2f6      	uxtb	r6, r6
 80197f4:	9a01      	ldr	r2, [sp, #4]
 80197f6:	2a00      	cmp	r2, #0
 80197f8:	dc03      	bgt.n	8019802 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80197fa:	9a05      	ldr	r2, [sp, #20]
 80197fc:	2a00      	cmp	r2, #0
 80197fe:	f340 8129 	ble.w	8019a54 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019802:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019804:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8019808:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801980c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801980e:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8019812:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019816:	2b00      	cmp	r3, #0
 8019818:	dd0e      	ble.n	8019838 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801981a:	1408      	asrs	r0, r1, #16
 801981c:	d405      	bmi.n	801982a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801981e:	4560      	cmp	r0, ip
 8019820:	da03      	bge.n	801982a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019822:	1410      	asrs	r0, r2, #16
 8019824:	d401      	bmi.n	801982a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019826:	42b8      	cmp	r0, r7
 8019828:	db07      	blt.n	801983a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801982a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801982c:	3b01      	subs	r3, #1
 801982e:	3402      	adds	r4, #2
 8019830:	4401      	add	r1, r0
 8019832:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019834:	4402      	add	r2, r0
 8019836:	e7ee      	b.n	8019816 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019838:	d071      	beq.n	801991e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801983a:	1e58      	subs	r0, r3, #1
 801983c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801983e:	fb05 1500 	mla	r5, r5, r0, r1
 8019842:	142d      	asrs	r5, r5, #16
 8019844:	d45f      	bmi.n	8019906 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019846:	4565      	cmp	r5, ip
 8019848:	da5d      	bge.n	8019906 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801984a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801984c:	fb05 2000 	mla	r0, r5, r0, r2
 8019850:	1400      	asrs	r0, r0, #16
 8019852:	d458      	bmi.n	8019906 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019854:	42b8      	cmp	r0, r7
 8019856:	da56      	bge.n	8019906 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019858:	4699      	mov	r9, r3
 801985a:	46a2      	mov	sl, r4
 801985c:	f8bd b008 	ldrh.w	fp, [sp, #8]
 8019860:	f1b9 0f00 	cmp.w	r9, #0
 8019864:	dd57      	ble.n	8019916 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8019866:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801986a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801986e:	9803      	ldr	r0, [sp, #12]
 8019870:	140d      	asrs	r5, r1, #16
 8019872:	f109 39ff 	add.w	r9, r9, #4294967295
 8019876:	fb07 000c 	mla	r0, r7, ip, r0
 801987a:	5d40      	ldrb	r0, [r0, r5]
 801987c:	9d04      	ldr	r5, [sp, #16]
 801987e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8019882:	f8ba 5000 	ldrh.w	r5, [sl]
 8019886:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801988a:	122f      	asrs	r7, r5, #8
 801988c:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8019890:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019894:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019898:	00ed      	lsls	r5, r5, #3
 801989a:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801989e:	fb17 f706 	smulbb	r7, r7, r6
 80198a2:	b2ed      	uxtb	r5, r5
 80198a4:	fb18 f806 	smulbb	r8, r8, r6
 80198a8:	fb0c 7c0b 	mla	ip, ip, fp, r7
 80198ac:	10c7      	asrs	r7, r0, #3
 80198ae:	fb15 f506 	smulbb	r5, r5, r6
 80198b2:	00c0      	lsls	r0, r0, #3
 80198b4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80198b8:	fa1f fc8c 	uxth.w	ip, ip
 80198bc:	b2c0      	uxtb	r0, r0
 80198be:	fb07 870b 	mla	r7, r7, fp, r8
 80198c2:	fb00 500b 	mla	r0, r0, fp, r5
 80198c6:	f10c 0501 	add.w	r5, ip, #1
 80198ca:	b2bf      	uxth	r7, r7
 80198cc:	b280      	uxth	r0, r0
 80198ce:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80198d2:	f107 0801 	add.w	r8, r7, #1
 80198d6:	1c45      	adds	r5, r0, #1
 80198d8:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 80198dc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80198e0:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80198e4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80198e6:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80198ea:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80198ee:	4401      	add	r1, r0
 80198f0:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80198f4:	9814      	ldr	r0, [sp, #80]	; 0x50
 80198f6:	ea45 0c0c 	orr.w	ip, r5, ip
 80198fa:	4402      	add	r2, r0
 80198fc:	ea4c 0c08 	orr.w	ip, ip, r8
 8019900:	f82a cb02 	strh.w	ip, [sl], #2
 8019904:	e7ac      	b.n	8019860 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8019906:	f04f 0800 	mov.w	r8, #0
 801990a:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801990e:	eb03 0008 	add.w	r0, r3, r8
 8019912:	2800      	cmp	r0, #0
 8019914:	dc41      	bgt.n	801999a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8019916:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801991a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801991e:	9b01      	ldr	r3, [sp, #4]
 8019920:	2b00      	cmp	r3, #0
 8019922:	f340 8097 	ble.w	8019a54 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019926:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801992a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801992c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019930:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019934:	eef0 6a62 	vmov.f32	s13, s5
 8019938:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801993c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019940:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019944:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8019948:	eef0 6a43 	vmov.f32	s13, s6
 801994c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019950:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8019954:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019958:	ee61 7a27 	vmul.f32	s15, s2, s15
 801995c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019960:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019964:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019968:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801996c:	ee12 2a90 	vmov	r2, s5
 8019970:	eef0 2a47 	vmov.f32	s5, s14
 8019974:	fb92 f3f3 	sdiv	r3, r2, r3
 8019978:	ee13 2a10 	vmov	r2, s6
 801997c:	9313      	str	r3, [sp, #76]	; 0x4c
 801997e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019980:	eeb0 3a67 	vmov.f32	s6, s15
 8019984:	fb92 f3f3 	sdiv	r3, r2, r3
 8019988:	9314      	str	r3, [sp, #80]	; 0x50
 801998a:	9b01      	ldr	r3, [sp, #4]
 801998c:	9a05      	ldr	r2, [sp, #20]
 801998e:	3b01      	subs	r3, #1
 8019990:	9301      	str	r3, [sp, #4]
 8019992:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019994:	bf08      	it	eq
 8019996:	4613      	moveq	r3, r2
 8019998:	e72c      	b.n	80197f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801999a:	140f      	asrs	r7, r1, #16
 801999c:	d453      	bmi.n	8019a46 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801999e:	f8de 5008 	ldr.w	r5, [lr, #8]
 80199a2:	42bd      	cmp	r5, r7
 80199a4:	dd4f      	ble.n	8019a46 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80199a6:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80199aa:	d44c      	bmi.n	8019a46 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80199ac:	f8de 000c 	ldr.w	r0, [lr, #12]
 80199b0:	4560      	cmp	r0, ip
 80199b2:	dd48      	ble.n	8019a46 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80199b4:	9803      	ldr	r0, [sp, #12]
 80199b6:	b22d      	sxth	r5, r5
 80199b8:	fb0c 0505 	mla	r5, ip, r5, r0
 80199bc:	5de8      	ldrb	r0, [r5, r7]
 80199be:	9d04      	ldr	r5, [sp, #16]
 80199c0:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80199c4:	f06f 0501 	mvn.w	r5, #1
 80199c8:	fb05 fb08 	mul.w	fp, r5, r8
 80199cc:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80199d0:	f834 500b 	ldrh.w	r5, [r4, fp]
 80199d4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80199d8:	122f      	asrs	r7, r5, #8
 80199da:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80199de:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80199e2:	00ed      	lsls	r5, r5, #3
 80199e4:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80199e8:	fb17 f706 	smulbb	r7, r7, r6
 80199ec:	b2ed      	uxtb	r5, r5
 80199ee:	fb19 f906 	smulbb	r9, r9, r6
 80199f2:	fb0c 7c0a 	mla	ip, ip, sl, r7
 80199f6:	10c7      	asrs	r7, r0, #3
 80199f8:	fb15 f506 	smulbb	r5, r5, r6
 80199fc:	00c0      	lsls	r0, r0, #3
 80199fe:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019a02:	fa1f fc8c 	uxth.w	ip, ip
 8019a06:	b2c0      	uxtb	r0, r0
 8019a08:	fb07 970a 	mla	r7, r7, sl, r9
 8019a0c:	fb00 500a 	mla	r0, r0, sl, r5
 8019a10:	f10c 0501 	add.w	r5, ip, #1
 8019a14:	b2bf      	uxth	r7, r7
 8019a16:	b280      	uxth	r0, r0
 8019a18:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019a1c:	f107 0901 	add.w	r9, r7, #1
 8019a20:	1c45      	adds	r5, r0, #1
 8019a22:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8019a26:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019a2a:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8019a2e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8019a32:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019a36:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8019a3a:	ea45 0c0c 	orr.w	ip, r5, ip
 8019a3e:	ea4c 0c09 	orr.w	ip, ip, r9
 8019a42:	f824 c00b 	strh.w	ip, [r4, fp]
 8019a46:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019a48:	f108 38ff 	add.w	r8, r8, #4294967295
 8019a4c:	4401      	add	r1, r0
 8019a4e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019a50:	4402      	add	r2, r0
 8019a52:	e75c      	b.n	801990e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8019a54:	b007      	add	sp, #28
 8019a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019a5a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019a5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a5e:	b085      	sub	sp, #20
 8019a60:	4693      	mov	fp, r2
 8019a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019a66:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019a68:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8019a6a:	6870      	ldr	r0, [r6, #4]
 8019a6c:	9100      	str	r1, [sp, #0]
 8019a6e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019a72:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8019a76:	fb00 2404 	mla	r4, r0, r4, r2
 8019a7a:	6832      	ldr	r2, [r6, #0]
 8019a7c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019a80:	682a      	ldr	r2, [r5, #0]
 8019a82:	9201      	str	r2, [sp, #4]
 8019a84:	686a      	ldr	r2, [r5, #4]
 8019a86:	3204      	adds	r2, #4
 8019a88:	9202      	str	r2, [sp, #8]
 8019a8a:	9a00      	ldr	r2, [sp, #0]
 8019a8c:	2a00      	cmp	r2, #0
 8019a8e:	dc03      	bgt.n	8019a98 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8019a90:	f1bb 0f00 	cmp.w	fp, #0
 8019a94:	f340 80a0 	ble.w	8019bd8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8019a98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019a9a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8019a9e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019aa2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019aa4:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8019aa8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019aac:	2b00      	cmp	r3, #0
 8019aae:	dd0c      	ble.n	8019aca <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019ab0:	1406      	asrs	r6, r0, #16
 8019ab2:	d405      	bmi.n	8019ac0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019ab4:	454e      	cmp	r6, r9
 8019ab6:	da03      	bge.n	8019ac0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019ab8:	1416      	asrs	r6, r2, #16
 8019aba:	d401      	bmi.n	8019ac0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019abc:	4546      	cmp	r6, r8
 8019abe:	db05      	blt.n	8019acc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019ac0:	4470      	add	r0, lr
 8019ac2:	4462      	add	r2, ip
 8019ac4:	3b01      	subs	r3, #1
 8019ac6:	3402      	adds	r4, #2
 8019ac8:	e7f0      	b.n	8019aac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8019aca:	d00f      	beq.n	8019aec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8019acc:	1e5e      	subs	r6, r3, #1
 8019ace:	fb0e 0706 	mla	r7, lr, r6, r0
 8019ad2:	143f      	asrs	r7, r7, #16
 8019ad4:	d541      	bpl.n	8019b5a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 8019ad6:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8019ada:	4698      	mov	r8, r3
 8019adc:	9603      	str	r6, [sp, #12]
 8019ade:	f1b8 0f00 	cmp.w	r8, #0
 8019ae2:	dc59      	bgt.n	8019b98 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8019ae4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019ae8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019aec:	9b00      	ldr	r3, [sp, #0]
 8019aee:	2b00      	cmp	r3, #0
 8019af0:	dd72      	ble.n	8019bd8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8019af2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019af6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019af8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019afc:	eeb0 6a62 	vmov.f32	s12, s5
 8019b00:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019b04:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019b08:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019b0c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019b10:	eeb0 6a43 	vmov.f32	s12, s6
 8019b14:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019b18:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019b1c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019b20:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019b24:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019b28:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019b2c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019b30:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019b34:	ee12 2a90 	vmov	r2, s5
 8019b38:	eef0 2a47 	vmov.f32	s5, s14
 8019b3c:	fb92 fef3 	sdiv	lr, r2, r3
 8019b40:	ee13 2a10 	vmov	r2, s6
 8019b44:	eeb0 3a67 	vmov.f32	s6, s15
 8019b48:	fb92 fcf3 	sdiv	ip, r2, r3
 8019b4c:	9b00      	ldr	r3, [sp, #0]
 8019b4e:	3b01      	subs	r3, #1
 8019b50:	9300      	str	r3, [sp, #0]
 8019b52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019b54:	bf08      	it	eq
 8019b56:	465b      	moveq	r3, fp
 8019b58:	e797      	b.n	8019a8a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8019b5a:	454f      	cmp	r7, r9
 8019b5c:	dabb      	bge.n	8019ad6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019b5e:	fb0c 2606 	mla	r6, ip, r6, r2
 8019b62:	1436      	asrs	r6, r6, #16
 8019b64:	d4b7      	bmi.n	8019ad6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019b66:	4546      	cmp	r6, r8
 8019b68:	dab5      	bge.n	8019ad6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019b6a:	461e      	mov	r6, r3
 8019b6c:	46a0      	mov	r8, r4
 8019b6e:	2e00      	cmp	r6, #0
 8019b70:	ddb8      	ble.n	8019ae4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8019b72:	1417      	asrs	r7, r2, #16
 8019b74:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8019b78:	9901      	ldr	r1, [sp, #4]
 8019b7a:	ea4f 4920 	mov.w	r9, r0, asr #16
 8019b7e:	4462      	add	r2, ip
 8019b80:	4470      	add	r0, lr
 8019b82:	fb0a 1707 	mla	r7, sl, r7, r1
 8019b86:	9902      	ldr	r1, [sp, #8]
 8019b88:	3e01      	subs	r6, #1
 8019b8a:	f817 7009 	ldrb.w	r7, [r7, r9]
 8019b8e:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8019b92:	f828 7b02 	strh.w	r7, [r8], #2
 8019b96:	e7ea      	b.n	8019b6e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8019b98:	ea5f 4920 	movs.w	r9, r0, asr #16
 8019b9c:	d417      	bmi.n	8019bce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8019b9e:	68ae      	ldr	r6, [r5, #8]
 8019ba0:	454e      	cmp	r6, r9
 8019ba2:	dd14      	ble.n	8019bce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8019ba4:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8019ba8:	d411      	bmi.n	8019bce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8019baa:	68ef      	ldr	r7, [r5, #12]
 8019bac:	4557      	cmp	r7, sl
 8019bae:	dd0e      	ble.n	8019bce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8019bb0:	9f01      	ldr	r7, [sp, #4]
 8019bb2:	b236      	sxth	r6, r6
 8019bb4:	f06f 0101 	mvn.w	r1, #1
 8019bb8:	fb0a 7606 	mla	r6, sl, r6, r7
 8019bbc:	9f02      	ldr	r7, [sp, #8]
 8019bbe:	f816 6009 	ldrb.w	r6, [r6, r9]
 8019bc2:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8019bc6:	fb01 f608 	mul.w	r6, r1, r8
 8019bca:	9903      	ldr	r1, [sp, #12]
 8019bcc:	538f      	strh	r7, [r1, r6]
 8019bce:	4470      	add	r0, lr
 8019bd0:	4462      	add	r2, ip
 8019bd2:	f108 38ff 	add.w	r8, r8, #4294967295
 8019bd6:	e782      	b.n	8019ade <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8019bd8:	b005      	add	sp, #20
 8019bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019bde <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019bde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019be2:	b087      	sub	sp, #28
 8019be4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019be6:	9205      	str	r2, [sp, #20]
 8019be8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8019bec:	9102      	str	r1, [sp, #8]
 8019bee:	9203      	str	r2, [sp, #12]
 8019bf0:	6861      	ldr	r1, [r4, #4]
 8019bf2:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8019bf6:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8019bfa:	fb01 2000 	mla	r0, r1, r0, r2
 8019bfe:	6822      	ldr	r2, [r4, #0]
 8019c00:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8019c04:	9200      	str	r2, [sp, #0]
 8019c06:	f8dc 2000 	ldr.w	r2, [ip]
 8019c0a:	9204      	str	r2, [sp, #16]
 8019c0c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8019c10:	3204      	adds	r2, #4
 8019c12:	9201      	str	r2, [sp, #4]
 8019c14:	9a03      	ldr	r2, [sp, #12]
 8019c16:	43d5      	mvns	r5, r2
 8019c18:	b2ed      	uxtb	r5, r5
 8019c1a:	9a02      	ldr	r2, [sp, #8]
 8019c1c:	2a00      	cmp	r2, #0
 8019c1e:	dc03      	bgt.n	8019c28 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8019c20:	9a05      	ldr	r2, [sp, #20]
 8019c22:	2a00      	cmp	r2, #0
 8019c24:	f340 812c 	ble.w	8019e80 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8019c28:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019c2a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8019c2e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019c32:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019c34:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8019c38:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	dd10      	ble.n	8019c62 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8019c40:	140c      	asrs	r4, r1, #16
 8019c42:	d405      	bmi.n	8019c50 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019c44:	4574      	cmp	r4, lr
 8019c46:	da03      	bge.n	8019c50 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019c48:	1414      	asrs	r4, r2, #16
 8019c4a:	d401      	bmi.n	8019c50 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019c4c:	42bc      	cmp	r4, r7
 8019c4e:	db09      	blt.n	8019c64 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8019c50:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019c52:	3b01      	subs	r3, #1
 8019c54:	9800      	ldr	r0, [sp, #0]
 8019c56:	4421      	add	r1, r4
 8019c58:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019c5a:	3002      	adds	r0, #2
 8019c5c:	4422      	add	r2, r4
 8019c5e:	9000      	str	r0, [sp, #0]
 8019c60:	e7ec      	b.n	8019c3c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8019c62:	d071      	beq.n	8019d48 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8019c64:	1e5c      	subs	r4, r3, #1
 8019c66:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019c68:	fb06 1604 	mla	r6, r6, r4, r1
 8019c6c:	1436      	asrs	r6, r6, #16
 8019c6e:	d45d      	bmi.n	8019d2c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8019c70:	4576      	cmp	r6, lr
 8019c72:	da5b      	bge.n	8019d2c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8019c74:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8019c76:	fb06 2404 	mla	r4, r6, r4, r2
 8019c7a:	1424      	asrs	r4, r4, #16
 8019c7c:	d456      	bmi.n	8019d2c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8019c7e:	42bc      	cmp	r4, r7
 8019c80:	da54      	bge.n	8019d2c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8019c82:	4698      	mov	r8, r3
 8019c84:	f8dd 9000 	ldr.w	r9, [sp]
 8019c88:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 8019c8c:	f1b8 0f00 	cmp.w	r8, #0
 8019c90:	dd54      	ble.n	8019d3c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8019c92:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8019c96:	1414      	asrs	r4, r2, #16
 8019c98:	9804      	ldr	r0, [sp, #16]
 8019c9a:	140e      	asrs	r6, r1, #16
 8019c9c:	f108 38ff 	add.w	r8, r8, #4294967295
 8019ca0:	fb07 0404 	mla	r4, r7, r4, r0
 8019ca4:	9801      	ldr	r0, [sp, #4]
 8019ca6:	f814 e006 	ldrb.w	lr, [r4, r6]
 8019caa:	f8b9 4000 	ldrh.w	r4, [r9]
 8019cae:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019cb2:	1227      	asrs	r7, r4, #8
 8019cb4:	eb00 0b0e 	add.w	fp, r0, lr
 8019cb8:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8019cbc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019cc0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019cc2:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8019cc6:	f89b b001 	ldrb.w	fp, [fp, #1]
 8019cca:	4401      	add	r1, r0
 8019ccc:	fb16 f60a 	smulbb	r6, r6, sl
 8019cd0:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019cd2:	fb1b fb0a 	smulbb	fp, fp, sl
 8019cd6:	fb07 6705 	mla	r7, r7, r5, r6
 8019cda:	10e6      	asrs	r6, r4, #3
 8019cdc:	00e4      	lsls	r4, r4, #3
 8019cde:	4402      	add	r2, r0
 8019ce0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019ce4:	b2bf      	uxth	r7, r7
 8019ce6:	b2e4      	uxtb	r4, r4
 8019ce8:	fb06 b605 	mla	r6, r6, r5, fp
 8019cec:	fb14 f405 	smulbb	r4, r4, r5
 8019cf0:	b2b6      	uxth	r6, r6
 8019cf2:	fb0e 4e0a 	mla	lr, lr, sl, r4
 8019cf6:	1c7c      	adds	r4, r7, #1
 8019cf8:	f106 0b01 	add.w	fp, r6, #1
 8019cfc:	fa1f fe8e 	uxth.w	lr, lr
 8019d00:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8019d04:	f10e 0401 	add.w	r4, lr, #1
 8019d08:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8019d0c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019d10:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 8019d14:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8019d18:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8019d1c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8019d20:	4327      	orrs	r7, r4
 8019d22:	ea47 070b 	orr.w	r7, r7, fp
 8019d26:	f829 7b02 	strh.w	r7, [r9], #2
 8019d2a:	e7af      	b.n	8019c8c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8019d2c:	f04f 0e00 	mov.w	lr, #0
 8019d30:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 8019d34:	eb03 040e 	add.w	r4, r3, lr
 8019d38:	2c00      	cmp	r4, #0
 8019d3a:	dc43      	bgt.n	8019dc4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8019d3c:	9a00      	ldr	r2, [sp, #0]
 8019d3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019d42:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8019d46:	9300      	str	r3, [sp, #0]
 8019d48:	9b02      	ldr	r3, [sp, #8]
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	f340 8098 	ble.w	8019e80 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8019d50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019d54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019d56:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019d5a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019d5e:	eef0 6a62 	vmov.f32	s13, s5
 8019d62:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019d66:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019d6a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019d6e:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8019d72:	eef0 6a43 	vmov.f32	s13, s6
 8019d76:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019d7a:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8019d7e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019d82:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019d86:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019d8a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019d8e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019d92:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019d96:	ee12 2a90 	vmov	r2, s5
 8019d9a:	eef0 2a47 	vmov.f32	s5, s14
 8019d9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019da2:	ee13 2a10 	vmov	r2, s6
 8019da6:	9313      	str	r3, [sp, #76]	; 0x4c
 8019da8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019daa:	eeb0 3a67 	vmov.f32	s6, s15
 8019dae:	fb92 f3f3 	sdiv	r3, r2, r3
 8019db2:	9314      	str	r3, [sp, #80]	; 0x50
 8019db4:	9b02      	ldr	r3, [sp, #8]
 8019db6:	9a05      	ldr	r2, [sp, #20]
 8019db8:	3b01      	subs	r3, #1
 8019dba:	9302      	str	r3, [sp, #8]
 8019dbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019dbe:	bf08      	it	eq
 8019dc0:	4613      	moveq	r3, r2
 8019dc2:	e72a      	b.n	8019c1a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8019dc4:	140f      	asrs	r7, r1, #16
 8019dc6:	d454      	bmi.n	8019e72 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8019dc8:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8019dcc:	42be      	cmp	r6, r7
 8019dce:	dd50      	ble.n	8019e72 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8019dd0:	ea5f 4822 	movs.w	r8, r2, asr #16
 8019dd4:	d44d      	bmi.n	8019e72 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8019dd6:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8019dda:	4544      	cmp	r4, r8
 8019ddc:	dd49      	ble.n	8019e72 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8019dde:	9c04      	ldr	r4, [sp, #16]
 8019de0:	b236      	sxth	r6, r6
 8019de2:	f06f 0001 	mvn.w	r0, #1
 8019de6:	fb08 4606 	mla	r6, r8, r6, r4
 8019dea:	9c01      	ldr	r4, [sp, #4]
 8019dec:	fb00 fa0e 	mul.w	sl, r0, lr
 8019df0:	9800      	ldr	r0, [sp, #0]
 8019df2:	f816 8007 	ldrb.w	r8, [r6, r7]
 8019df6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019dfa:	eb04 0b08 	add.w	fp, r4, r8
 8019dfe:	f830 400a 	ldrh.w	r4, [r0, sl]
 8019e02:	9801      	ldr	r0, [sp, #4]
 8019e04:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8019e08:	1227      	asrs	r7, r4, #8
 8019e0a:	f89b b001 	ldrb.w	fp, [fp, #1]
 8019e0e:	fb16 f609 	smulbb	r6, r6, r9
 8019e12:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019e16:	f810 8008 	ldrb.w	r8, [r0, r8]
 8019e1a:	fb1b fb09 	smulbb	fp, fp, r9
 8019e1e:	fb07 6705 	mla	r7, r7, r5, r6
 8019e22:	10e6      	asrs	r6, r4, #3
 8019e24:	00e4      	lsls	r4, r4, #3
 8019e26:	9800      	ldr	r0, [sp, #0]
 8019e28:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019e2c:	b2bf      	uxth	r7, r7
 8019e2e:	b2e4      	uxtb	r4, r4
 8019e30:	fb06 b605 	mla	r6, r6, r5, fp
 8019e34:	fb14 f405 	smulbb	r4, r4, r5
 8019e38:	b2b6      	uxth	r6, r6
 8019e3a:	fb08 4809 	mla	r8, r8, r9, r4
 8019e3e:	1c7c      	adds	r4, r7, #1
 8019e40:	f106 0b01 	add.w	fp, r6, #1
 8019e44:	fa1f f888 	uxth.w	r8, r8
 8019e48:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8019e4c:	f108 0401 	add.w	r4, r8, #1
 8019e50:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8019e54:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019e58:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 8019e5c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8019e60:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8019e64:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8019e68:	4327      	orrs	r7, r4
 8019e6a:	ea47 070b 	orr.w	r7, r7, fp
 8019e6e:	f820 700a 	strh.w	r7, [r0, sl]
 8019e72:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019e74:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019e78:	4401      	add	r1, r0
 8019e7a:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019e7c:	4402      	add	r2, r0
 8019e7e:	e759      	b.n	8019d34 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8019e80:	b007      	add	sp, #28
 8019e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08019e88 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e8c:	b085      	sub	sp, #20
 8019e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019e92:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019e94:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8019e96:	9203      	str	r2, [sp, #12]
 8019e98:	6870      	ldr	r0, [r6, #4]
 8019e9a:	686f      	ldr	r7, [r5, #4]
 8019e9c:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 8019ea0:	3704      	adds	r7, #4
 8019ea2:	9101      	str	r1, [sp, #4]
 8019ea4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019ea8:	fb00 2404 	mla	r4, r0, r4, r2
 8019eac:	6832      	ldr	r2, [r6, #0]
 8019eae:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019eb2:	682a      	ldr	r2, [r5, #0]
 8019eb4:	9202      	str	r2, [sp, #8]
 8019eb6:	9a01      	ldr	r2, [sp, #4]
 8019eb8:	2a00      	cmp	r2, #0
 8019eba:	dc03      	bgt.n	8019ec4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8019ebc:	9a03      	ldr	r2, [sp, #12]
 8019ebe:	2a00      	cmp	r2, #0
 8019ec0:	f340 80cc 	ble.w	801a05c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8019ec4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019ec6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8019eca:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019ece:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019ed0:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8019ed4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019ed8:	2b00      	cmp	r3, #0
 8019eda:	dd0d      	ble.n	8019ef8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019edc:	1406      	asrs	r6, r0, #16
 8019ede:	d405      	bmi.n	8019eec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8019ee0:	454e      	cmp	r6, r9
 8019ee2:	da03      	bge.n	8019eec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8019ee4:	1416      	asrs	r6, r2, #16
 8019ee6:	d401      	bmi.n	8019eec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8019ee8:	4546      	cmp	r6, r8
 8019eea:	db06      	blt.n	8019efa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019eec:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8019eee:	4460      	add	r0, ip
 8019ef0:	3b01      	subs	r3, #1
 8019ef2:	3402      	adds	r4, #2
 8019ef4:	4432      	add	r2, r6
 8019ef6:	e7ef      	b.n	8019ed8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8019ef8:	d00f      	beq.n	8019f1a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8019efa:	1e5e      	subs	r6, r3, #1
 8019efc:	fb0c 0e06 	mla	lr, ip, r6, r0
 8019f00:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8019f04:	d543      	bpl.n	8019f8e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8019f06:	4698      	mov	r8, r3
 8019f08:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 8019f0c:	f1b8 0f00 	cmp.w	r8, #0
 8019f10:	dc71      	bgt.n	8019ff6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8019f12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019f16:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019f1a:	9b01      	ldr	r3, [sp, #4]
 8019f1c:	2b00      	cmp	r3, #0
 8019f1e:	f340 809d 	ble.w	801a05c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8019f22:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019f26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019f28:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019f2c:	eeb0 6a62 	vmov.f32	s12, s5
 8019f30:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019f34:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019f38:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019f3c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019f40:	eeb0 6a43 	vmov.f32	s12, s6
 8019f44:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019f48:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019f4c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019f50:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019f54:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019f58:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019f5c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019f60:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019f64:	ee12 2a90 	vmov	r2, s5
 8019f68:	eef0 2a47 	vmov.f32	s5, s14
 8019f6c:	fb92 fcf3 	sdiv	ip, r2, r3
 8019f70:	ee13 2a10 	vmov	r2, s6
 8019f74:	eeb0 3a67 	vmov.f32	s6, s15
 8019f78:	fb92 f3f3 	sdiv	r3, r2, r3
 8019f7c:	9312      	str	r3, [sp, #72]	; 0x48
 8019f7e:	9b01      	ldr	r3, [sp, #4]
 8019f80:	9a03      	ldr	r2, [sp, #12]
 8019f82:	3b01      	subs	r3, #1
 8019f84:	9301      	str	r3, [sp, #4]
 8019f86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019f88:	bf08      	it	eq
 8019f8a:	4613      	moveq	r3, r2
 8019f8c:	e793      	b.n	8019eb6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8019f8e:	45ce      	cmp	lr, r9
 8019f90:	dab9      	bge.n	8019f06 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019f92:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019f94:	fb01 2606 	mla	r6, r1, r6, r2
 8019f98:	1436      	asrs	r6, r6, #16
 8019f9a:	d4b4      	bmi.n	8019f06 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019f9c:	4546      	cmp	r6, r8
 8019f9e:	dab2      	bge.n	8019f06 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019fa0:	4698      	mov	r8, r3
 8019fa2:	46a2      	mov	sl, r4
 8019fa4:	f1b8 0f00 	cmp.w	r8, #0
 8019fa8:	ddb3      	ble.n	8019f12 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8019faa:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8019fae:	1416      	asrs	r6, r2, #16
 8019fb0:	9902      	ldr	r1, [sp, #8]
 8019fb2:	ea4f 4e20 	mov.w	lr, r0, asr #16
 8019fb6:	f108 38ff 	add.w	r8, r8, #4294967295
 8019fba:	4460      	add	r0, ip
 8019fbc:	fb09 1606 	mla	r6, r9, r6, r1
 8019fc0:	4928      	ldr	r1, [pc, #160]	; (801a064 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 8019fc2:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8019fc6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019fca:	eb07 0b0e 	add.w	fp, r7, lr
 8019fce:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8019fd2:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8019fd6:	00f6      	lsls	r6, r6, #3
 8019fd8:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 8019fdc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019fde:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019fe2:	440a      	add	r2, r1
 8019fe4:	ea49 0606 	orr.w	r6, r9, r6
 8019fe8:	f817 900e 	ldrb.w	r9, [r7, lr]
 8019fec:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 8019ff0:	f82a 6b02 	strh.w	r6, [sl], #2
 8019ff4:	e7d6      	b.n	8019fa4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8019ff6:	ea5f 4920 	movs.w	r9, r0, asr #16
 8019ffa:	d429      	bmi.n	801a050 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8019ffc:	68ae      	ldr	r6, [r5, #8]
 8019ffe:	454e      	cmp	r6, r9
 801a000:	dd26      	ble.n	801a050 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a002:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801a006:	d423      	bmi.n	801a050 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a008:	68e9      	ldr	r1, [r5, #12]
 801a00a:	4559      	cmp	r1, fp
 801a00c:	dd20      	ble.n	801a050 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a00e:	fa0f fe86 	sxth.w	lr, r6
 801a012:	9902      	ldr	r1, [sp, #8]
 801a014:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801a018:	f06f 0101 	mvn.w	r1, #1
 801a01c:	f81e e009 	ldrb.w	lr, [lr, r9]
 801a020:	fb01 f908 	mul.w	r9, r1, r8
 801a024:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801a028:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a02c:	eb07 060e 	add.w	r6, r7, lr
 801a030:	f896 b002 	ldrb.w	fp, [r6, #2]
 801a034:	7876      	ldrb	r6, [r6, #1]
 801a036:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801a03a:	00f6      	lsls	r6, r6, #3
 801a03c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a040:	ea4b 0606 	orr.w	r6, fp, r6
 801a044:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801a048:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801a04c:	f82a 6009 	strh.w	r6, [sl, r9]
 801a050:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a052:	4460      	add	r0, ip
 801a054:	f108 38ff 	add.w	r8, r8, #4294967295
 801a058:	440a      	add	r2, r1
 801a05a:	e757      	b.n	8019f0c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a05c:	b005      	add	sp, #20
 801a05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a062:	bf00      	nop
 801a064:	fffff800 	.word	0xfffff800

0801a068 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a06c:	b087      	sub	sp, #28
 801a06e:	468b      	mov	fp, r1
 801a070:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a074:	9815      	ldr	r0, [sp, #84]	; 0x54
 801a076:	9204      	str	r2, [sp, #16]
 801a078:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a07c:	6841      	ldr	r1, [r0, #4]
 801a07e:	9205      	str	r2, [sp, #20]
 801a080:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801a084:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801a088:	fb01 2404 	mla	r4, r1, r4, r2
 801a08c:	6802      	ldr	r2, [r0, #0]
 801a08e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a092:	f8dc 2000 	ldr.w	r2, [ip]
 801a096:	9201      	str	r2, [sp, #4]
 801a098:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801a09c:	3204      	adds	r2, #4
 801a09e:	9202      	str	r2, [sp, #8]
 801a0a0:	f1bb 0f00 	cmp.w	fp, #0
 801a0a4:	dc03      	bgt.n	801a0ae <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801a0a6:	9a04      	ldr	r2, [sp, #16]
 801a0a8:	2a00      	cmp	r2, #0
 801a0aa:	f340 8138 	ble.w	801a31e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801a0ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a0b0:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801a0b4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a0b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a0ba:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801a0be:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	dd0e      	ble.n	801a0e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a0c6:	1402      	asrs	r2, r0, #16
 801a0c8:	d405      	bmi.n	801a0d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a0ca:	42ba      	cmp	r2, r7
 801a0cc:	da03      	bge.n	801a0d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a0ce:	140a      	asrs	r2, r1, #16
 801a0d0:	d401      	bmi.n	801a0d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a0d2:	42b2      	cmp	r2, r6
 801a0d4:	db07      	blt.n	801a0e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a0d6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a0d8:	3b01      	subs	r3, #1
 801a0da:	3402      	adds	r4, #2
 801a0dc:	4410      	add	r0, r2
 801a0de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a0e0:	4411      	add	r1, r2
 801a0e2:	e7ee      	b.n	801a0c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801a0e4:	d019      	beq.n	801a11a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801a0e6:	1e5a      	subs	r2, r3, #1
 801a0e8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a0ea:	fb05 0502 	mla	r5, r5, r2, r0
 801a0ee:	142d      	asrs	r5, r5, #16
 801a0f0:	d409      	bmi.n	801a106 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a0f2:	42bd      	cmp	r5, r7
 801a0f4:	da07      	bge.n	801a106 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a0f6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a0f8:	fb05 1202 	mla	r2, r5, r2, r1
 801a0fc:	1412      	asrs	r2, r2, #16
 801a0fe:	d402      	bmi.n	801a106 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a100:	42b2      	cmp	r2, r6
 801a102:	f2c0 80ac 	blt.w	801a25e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801a106:	f04f 0e00 	mov.w	lr, #0
 801a10a:	eb03 020e 	add.w	r2, r3, lr
 801a10e:	2a00      	cmp	r2, #0
 801a110:	dc3e      	bgt.n	801a190 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801a112:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a116:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a11a:	f1bb 0f00 	cmp.w	fp, #0
 801a11e:	f340 80fe 	ble.w	801a31e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801a122:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a126:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a128:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a12c:	f1bb 0b01 	subs.w	fp, fp, #1
 801a130:	eeb0 6a62 	vmov.f32	s12, s5
 801a134:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a138:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a13c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a140:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801a144:	eeb0 6a43 	vmov.f32	s12, s6
 801a148:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a14c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801a150:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a154:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a158:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a15c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a160:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a164:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a168:	ee12 2a90 	vmov	r2, s5
 801a16c:	eef0 2a47 	vmov.f32	s5, s14
 801a170:	fb92 f3f3 	sdiv	r3, r2, r3
 801a174:	ee13 2a10 	vmov	r2, s6
 801a178:	9313      	str	r3, [sp, #76]	; 0x4c
 801a17a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a17c:	eeb0 3a67 	vmov.f32	s6, s15
 801a180:	fb92 f3f3 	sdiv	r3, r2, r3
 801a184:	9a04      	ldr	r2, [sp, #16]
 801a186:	9314      	str	r3, [sp, #80]	; 0x50
 801a188:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a18a:	bf08      	it	eq
 801a18c:	4613      	moveq	r3, r2
 801a18e:	e787      	b.n	801a0a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801a190:	1406      	asrs	r6, r0, #16
 801a192:	d45d      	bmi.n	801a250 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a194:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801a198:	42b5      	cmp	r5, r6
 801a19a:	dd59      	ble.n	801a250 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a19c:	140f      	asrs	r7, r1, #16
 801a19e:	d457      	bmi.n	801a250 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a1a0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801a1a4:	42ba      	cmp	r2, r7
 801a1a6:	dd53      	ble.n	801a250 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a1a8:	9a01      	ldr	r2, [sp, #4]
 801a1aa:	b22d      	sxth	r5, r5
 801a1ac:	fb07 2505 	mla	r5, r7, r5, r2
 801a1b0:	5daa      	ldrb	r2, [r5, r6]
 801a1b2:	9d02      	ldr	r5, [sp, #8]
 801a1b4:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801a1b8:	0e2e      	lsrs	r6, r5, #24
 801a1ba:	d049      	beq.n	801a250 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a1bc:	f06f 0201 	mvn.w	r2, #1
 801a1c0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a1c4:	fb02 f20e 	mul.w	r2, r2, lr
 801a1c8:	f834 8002 	ldrh.w	r8, [r4, r2]
 801a1cc:	9203      	str	r2, [sp, #12]
 801a1ce:	9a05      	ldr	r2, [sp, #20]
 801a1d0:	ea4f 2728 	mov.w	r7, r8, asr #8
 801a1d4:	4356      	muls	r6, r2
 801a1d6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a1da:	1c72      	adds	r2, r6, #1
 801a1dc:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801a1e0:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801a1e4:	b2ed      	uxtb	r5, r5
 801a1e6:	1212      	asrs	r2, r2, #8
 801a1e8:	fa1f f982 	uxth.w	r9, r2
 801a1ec:	43d2      	mvns	r2, r2
 801a1ee:	fb16 f609 	smulbb	r6, r6, r9
 801a1f2:	b2d2      	uxtb	r2, r2
 801a1f4:	fb15 f509 	smulbb	r5, r5, r9
 801a1f8:	fb07 6702 	mla	r7, r7, r2, r6
 801a1fc:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801a200:	fb1a fa09 	smulbb	sl, sl, r9
 801a204:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801a208:	b2bf      	uxth	r7, r7
 801a20a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a20e:	fa5f f888 	uxtb.w	r8, r8
 801a212:	fb06 a602 	mla	r6, r6, r2, sl
 801a216:	fb08 5502 	mla	r5, r8, r2, r5
 801a21a:	1c7a      	adds	r2, r7, #1
 801a21c:	b2b6      	uxth	r6, r6
 801a21e:	b2ad      	uxth	r5, r5
 801a220:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801a224:	9a03      	ldr	r2, [sp, #12]
 801a226:	f105 0a01 	add.w	sl, r5, #1
 801a22a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a22e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a232:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a236:	ea4a 0707 	orr.w	r7, sl, r7
 801a23a:	f106 0a01 	add.w	sl, r6, #1
 801a23e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a242:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a246:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a24a:	ea47 070a 	orr.w	r7, r7, sl
 801a24e:	52a7      	strh	r7, [r4, r2]
 801a250:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a252:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a256:	4410      	add	r0, r2
 801a258:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a25a:	4411      	add	r1, r2
 801a25c:	e755      	b.n	801a10a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801a25e:	f04f 0800 	mov.w	r8, #0
 801a262:	eba3 0208 	sub.w	r2, r3, r8
 801a266:	2a00      	cmp	r2, #0
 801a268:	f77f af53 	ble.w	801a112 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801a26c:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801a270:	140a      	asrs	r2, r1, #16
 801a272:	9f01      	ldr	r7, [sp, #4]
 801a274:	1405      	asrs	r5, r0, #16
 801a276:	fb06 7202 	mla	r2, r6, r2, r7
 801a27a:	5d52      	ldrb	r2, [r2, r5]
 801a27c:	9d02      	ldr	r5, [sp, #8]
 801a27e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801a282:	0e2e      	lsrs	r6, r5, #24
 801a284:	d044      	beq.n	801a310 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801a286:	9a05      	ldr	r2, [sp, #20]
 801a288:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a28c:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801a290:	4356      	muls	r6, r2
 801a292:	ea4f 272e 	mov.w	r7, lr, asr #8
 801a296:	1c72      	adds	r2, r6, #1
 801a298:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a29c:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801a2a0:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801a2a4:	b2ed      	uxtb	r5, r5
 801a2a6:	1212      	asrs	r2, r2, #8
 801a2a8:	fa1f f982 	uxth.w	r9, r2
 801a2ac:	43d2      	mvns	r2, r2
 801a2ae:	fb16 f609 	smulbb	r6, r6, r9
 801a2b2:	b2d2      	uxtb	r2, r2
 801a2b4:	fb15 f509 	smulbb	r5, r5, r9
 801a2b8:	fb07 6702 	mla	r7, r7, r2, r6
 801a2bc:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801a2c0:	fb1a fa09 	smulbb	sl, sl, r9
 801a2c4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a2c8:	b2bf      	uxth	r7, r7
 801a2ca:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a2ce:	fa5f fe8e 	uxtb.w	lr, lr
 801a2d2:	fb06 a602 	mla	r6, r6, r2, sl
 801a2d6:	fb0e 5502 	mla	r5, lr, r2, r5
 801a2da:	1c7a      	adds	r2, r7, #1
 801a2dc:	b2b6      	uxth	r6, r6
 801a2de:	b2ad      	uxth	r5, r5
 801a2e0:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801a2e4:	f105 0a01 	add.w	sl, r5, #1
 801a2e8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a2ec:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a2f0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a2f4:	ea4a 0707 	orr.w	r7, sl, r7
 801a2f8:	f106 0a01 	add.w	sl, r6, #1
 801a2fc:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a300:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a304:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a308:	ea47 070a 	orr.w	r7, r7, sl
 801a30c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801a310:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a312:	f108 0801 	add.w	r8, r8, #1
 801a316:	4410      	add	r0, r2
 801a318:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a31a:	4411      	add	r1, r2
 801a31c:	e7a1      	b.n	801a262 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801a31e:	b007      	add	sp, #28
 801a320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a324 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a328:	b085      	sub	sp, #20
 801a32a:	468b      	mov	fp, r1
 801a32c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a330:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a332:	9203      	str	r2, [sp, #12]
 801a334:	6841      	ldr	r1, [r0, #4]
 801a336:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801a33a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a33e:	fb01 2404 	mla	r4, r1, r4, r2
 801a342:	6802      	ldr	r2, [r0, #0]
 801a344:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a348:	f8de 2000 	ldr.w	r2, [lr]
 801a34c:	9200      	str	r2, [sp, #0]
 801a34e:	f8de 2004 	ldr.w	r2, [lr, #4]
 801a352:	3204      	adds	r2, #4
 801a354:	9201      	str	r2, [sp, #4]
 801a356:	f1bb 0f00 	cmp.w	fp, #0
 801a35a:	dc03      	bgt.n	801a364 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801a35c:	9a03      	ldr	r2, [sp, #12]
 801a35e:	2a00      	cmp	r2, #0
 801a360:	f340 8153 	ble.w	801a60a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801a364:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a366:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801a36a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a36e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a370:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801a374:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a378:	2b00      	cmp	r3, #0
 801a37a:	dd0e      	ble.n	801a39a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a37c:	1408      	asrs	r0, r1, #16
 801a37e:	d405      	bmi.n	801a38c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a380:	42b8      	cmp	r0, r7
 801a382:	da03      	bge.n	801a38c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a384:	1410      	asrs	r0, r2, #16
 801a386:	d401      	bmi.n	801a38c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a388:	42b0      	cmp	r0, r6
 801a38a:	db07      	blt.n	801a39c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a38c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a38e:	3b01      	subs	r3, #1
 801a390:	3402      	adds	r4, #2
 801a392:	4401      	add	r1, r0
 801a394:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a396:	4402      	add	r2, r0
 801a398:	e7ee      	b.n	801a378 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801a39a:	d017      	beq.n	801a3cc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801a39c:	1e58      	subs	r0, r3, #1
 801a39e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a3a0:	fb05 1500 	mla	r5, r5, r0, r1
 801a3a4:	142d      	asrs	r5, r5, #16
 801a3a6:	d409      	bmi.n	801a3bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a3a8:	42bd      	cmp	r5, r7
 801a3aa:	da07      	bge.n	801a3bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a3ac:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801a3ae:	fb05 2000 	mla	r0, r5, r0, r2
 801a3b2:	1400      	asrs	r0, r0, #16
 801a3b4:	d402      	bmi.n	801a3bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a3b6:	42b0      	cmp	r0, r6
 801a3b8:	f2c0 80bc 	blt.w	801a534 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801a3bc:	2600      	movs	r6, #0
 801a3be:	1998      	adds	r0, r3, r6
 801a3c0:	2800      	cmp	r0, #0
 801a3c2:	dc3e      	bgt.n	801a442 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801a3c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a3c8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a3cc:	f1bb 0f00 	cmp.w	fp, #0
 801a3d0:	f340 811b 	ble.w	801a60a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801a3d4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a3d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a3da:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a3de:	f1bb 0b01 	subs.w	fp, fp, #1
 801a3e2:	eeb0 6a62 	vmov.f32	s12, s5
 801a3e6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a3ea:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a3ee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a3f2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a3f6:	eeb0 6a43 	vmov.f32	s12, s6
 801a3fa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a3fe:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a402:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a406:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a40a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a40e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a412:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a416:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a41a:	ee12 2a90 	vmov	r2, s5
 801a41e:	eef0 2a47 	vmov.f32	s5, s14
 801a422:	fb92 f3f3 	sdiv	r3, r2, r3
 801a426:	ee13 2a10 	vmov	r2, s6
 801a42a:	9311      	str	r3, [sp, #68]	; 0x44
 801a42c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a42e:	eeb0 3a67 	vmov.f32	s6, s15
 801a432:	fb92 f3f3 	sdiv	r3, r2, r3
 801a436:	9a03      	ldr	r2, [sp, #12]
 801a438:	9312      	str	r3, [sp, #72]	; 0x48
 801a43a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a43c:	bf08      	it	eq
 801a43e:	4613      	moveq	r3, r2
 801a440:	e789      	b.n	801a356 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801a442:	140f      	asrs	r7, r1, #16
 801a444:	d426      	bmi.n	801a494 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a446:	f8de 5008 	ldr.w	r5, [lr, #8]
 801a44a:	42bd      	cmp	r5, r7
 801a44c:	dd22      	ble.n	801a494 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a44e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801a452:	d41f      	bmi.n	801a494 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a454:	f8de 000c 	ldr.w	r0, [lr, #12]
 801a458:	4560      	cmp	r0, ip
 801a45a:	dd1b      	ble.n	801a494 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a45c:	9800      	ldr	r0, [sp, #0]
 801a45e:	b22d      	sxth	r5, r5
 801a460:	fb0c 0505 	mla	r5, ip, r5, r0
 801a464:	5de8      	ldrb	r0, [r5, r7]
 801a466:	9d01      	ldr	r5, [sp, #4]
 801a468:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801a46c:	0e07      	lsrs	r7, r0, #24
 801a46e:	2fff      	cmp	r7, #255	; 0xff
 801a470:	d116      	bne.n	801a4a0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a472:	f06f 0501 	mvn.w	r5, #1
 801a476:	fb05 f706 	mul.w	r7, r5, r6
 801a47a:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801a47e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801a482:	0945      	lsrs	r5, r0, #5
 801a484:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801a488:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801a48c:	ea4c 0505 	orr.w	r5, ip, r5
 801a490:	4305      	orrs	r5, r0
 801a492:	53e5      	strh	r5, [r4, r7]
 801a494:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a496:	3e01      	subs	r6, #1
 801a498:	4401      	add	r1, r0
 801a49a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a49c:	4402      	add	r2, r0
 801a49e:	e78e      	b.n	801a3be <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801a4a0:	b2fd      	uxtb	r5, r7
 801a4a2:	2f00      	cmp	r7, #0
 801a4a4:	d0f6      	beq.n	801a494 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a4a6:	f06f 0701 	mvn.w	r7, #1
 801a4aa:	fa1f f985 	uxth.w	r9, r5
 801a4ae:	43ed      	mvns	r5, r5
 801a4b0:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801a4b4:	4377      	muls	r7, r6
 801a4b6:	fb1a fa09 	smulbb	sl, sl, r9
 801a4ba:	b2ed      	uxtb	r5, r5
 801a4bc:	f834 8007 	ldrh.w	r8, [r4, r7]
 801a4c0:	9702      	str	r7, [sp, #8]
 801a4c2:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801a4c6:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801a4ca:	fb17 f709 	smulbb	r7, r7, r9
 801a4ce:	b2c0      	uxtb	r0, r0
 801a4d0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a4d4:	fb10 f009 	smulbb	r0, r0, r9
 801a4d8:	fb0c 7c05 	mla	ip, ip, r5, r7
 801a4dc:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801a4e0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801a4e4:	fa1f fc8c 	uxth.w	ip, ip
 801a4e8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a4ec:	fa5f f888 	uxtb.w	r8, r8
 801a4f0:	fb07 a705 	mla	r7, r7, r5, sl
 801a4f4:	fb08 0005 	mla	r0, r8, r5, r0
 801a4f8:	f10c 0501 	add.w	r5, ip, #1
 801a4fc:	b2bf      	uxth	r7, r7
 801a4fe:	b280      	uxth	r0, r0
 801a500:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801a504:	f100 0a01 	add.w	sl, r0, #1
 801a508:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a50c:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801a510:	9802      	ldr	r0, [sp, #8]
 801a512:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a516:	ea4a 0c0c 	orr.w	ip, sl, ip
 801a51a:	f107 0a01 	add.w	sl, r7, #1
 801a51e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801a522:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a526:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a52a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a52e:	f824 c000 	strh.w	ip, [r4, r0]
 801a532:	e7af      	b.n	801a494 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801a534:	f04f 0800 	mov.w	r8, #0
 801a538:	eba3 0008 	sub.w	r0, r3, r8
 801a53c:	2800      	cmp	r0, #0
 801a53e:	f77f af41 	ble.w	801a3c4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801a542:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801a546:	1410      	asrs	r0, r2, #16
 801a548:	9f00      	ldr	r7, [sp, #0]
 801a54a:	140d      	asrs	r5, r1, #16
 801a54c:	fb06 7000 	mla	r0, r6, r0, r7
 801a550:	5d40      	ldrb	r0, [r0, r5]
 801a552:	9d01      	ldr	r5, [sp, #4]
 801a554:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801a558:	0e2e      	lsrs	r6, r5, #24
 801a55a:	2eff      	cmp	r6, #255	; 0xff
 801a55c:	d112      	bne.n	801a584 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801a55e:	482c      	ldr	r0, [pc, #176]	; (801a610 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801a560:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801a564:	0968      	lsrs	r0, r5, #5
 801a566:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801a56a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801a56e:	4330      	orrs	r0, r6
 801a570:	4328      	orrs	r0, r5
 801a572:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801a576:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a578:	f108 0801 	add.w	r8, r8, #1
 801a57c:	4401      	add	r1, r0
 801a57e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a580:	4402      	add	r2, r0
 801a582:	e7d9      	b.n	801a538 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801a584:	b2f0      	uxtb	r0, r6
 801a586:	2e00      	cmp	r6, #0
 801a588:	d0f5      	beq.n	801a576 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801a58a:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801a58e:	fa1f f980 	uxth.w	r9, r0
 801a592:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801a596:	43c0      	mvns	r0, r0
 801a598:	ea4f 272c 	mov.w	r7, ip, asr #8
 801a59c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a5a0:	fb16 f609 	smulbb	r6, r6, r9
 801a5a4:	b2c0      	uxtb	r0, r0
 801a5a6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a5aa:	b2ed      	uxtb	r5, r5
 801a5ac:	fb1a fa09 	smulbb	sl, sl, r9
 801a5b0:	fb07 6700 	mla	r7, r7, r0, r6
 801a5b4:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801a5b8:	fb15 f509 	smulbb	r5, r5, r9
 801a5bc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801a5c0:	b2bf      	uxth	r7, r7
 801a5c2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a5c6:	fa5f fc8c 	uxtb.w	ip, ip
 801a5ca:	fb06 a600 	mla	r6, r6, r0, sl
 801a5ce:	fb0c 5500 	mla	r5, ip, r0, r5
 801a5d2:	1c78      	adds	r0, r7, #1
 801a5d4:	b2b6      	uxth	r6, r6
 801a5d6:	b2ad      	uxth	r5, r5
 801a5d8:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801a5dc:	f105 0a01 	add.w	sl, r5, #1
 801a5e0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a5e4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a5e8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a5ec:	ea4a 0707 	orr.w	r7, sl, r7
 801a5f0:	f106 0a01 	add.w	sl, r6, #1
 801a5f4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a5f8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a5fc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a600:	ea47 070a 	orr.w	r7, r7, sl
 801a604:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801a608:	e7b5      	b.n	801a576 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801a60a:	b005      	add	sp, #20
 801a60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a610:	fffff800 	.word	0xfffff800

0801a614 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a618:	b087      	sub	sp, #28
 801a61a:	468b      	mov	fp, r1
 801a61c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a620:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a622:	9204      	str	r2, [sp, #16]
 801a624:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a628:	6861      	ldr	r1, [r4, #4]
 801a62a:	9205      	str	r2, [sp, #20]
 801a62c:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801a630:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801a634:	fb01 2000 	mla	r0, r1, r0, r2
 801a638:	6822      	ldr	r2, [r4, #0]
 801a63a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801a63e:	f8de 2000 	ldr.w	r2, [lr]
 801a642:	9201      	str	r2, [sp, #4]
 801a644:	f8de 2004 	ldr.w	r2, [lr, #4]
 801a648:	9202      	str	r2, [sp, #8]
 801a64a:	f1bb 0f00 	cmp.w	fp, #0
 801a64e:	dc03      	bgt.n	801a658 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801a650:	9a04      	ldr	r2, [sp, #16]
 801a652:	2a00      	cmp	r2, #0
 801a654:	f340 8142 	ble.w	801a8dc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801a658:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a65a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801a65e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a662:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a664:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801a668:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	dd0e      	ble.n	801a68e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801a670:	140c      	asrs	r4, r1, #16
 801a672:	d405      	bmi.n	801a680 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801a674:	42bc      	cmp	r4, r7
 801a676:	da03      	bge.n	801a680 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801a678:	1414      	asrs	r4, r2, #16
 801a67a:	d401      	bmi.n	801a680 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801a67c:	42b4      	cmp	r4, r6
 801a67e:	db07      	blt.n	801a690 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a680:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a682:	3b01      	subs	r3, #1
 801a684:	3002      	adds	r0, #2
 801a686:	4421      	add	r1, r4
 801a688:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a68a:	4422      	add	r2, r4
 801a68c:	e7ee      	b.n	801a66c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801a68e:	d019      	beq.n	801a6c4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801a690:	1e5c      	subs	r4, r3, #1
 801a692:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a694:	fb05 1504 	mla	r5, r5, r4, r1
 801a698:	142d      	asrs	r5, r5, #16
 801a69a:	d409      	bmi.n	801a6b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801a69c:	42bd      	cmp	r5, r7
 801a69e:	da07      	bge.n	801a6b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801a6a0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a6a2:	fb05 2404 	mla	r4, r5, r4, r2
 801a6a6:	1424      	asrs	r4, r4, #16
 801a6a8:	d402      	bmi.n	801a6b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801a6aa:	42b4      	cmp	r4, r6
 801a6ac:	f2c0 80b1 	blt.w	801a812 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801a6b0:	f04f 0800 	mov.w	r8, #0
 801a6b4:	eb03 0408 	add.w	r4, r3, r8
 801a6b8:	2c00      	cmp	r4, #0
 801a6ba:	dc3e      	bgt.n	801a73a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801a6bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a6c0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a6c4:	f1bb 0f00 	cmp.w	fp, #0
 801a6c8:	f340 8108 	ble.w	801a8dc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801a6cc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a6d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a6d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a6d6:	f1bb 0b01 	subs.w	fp, fp, #1
 801a6da:	eeb0 6a62 	vmov.f32	s12, s5
 801a6de:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a6e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a6e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a6ea:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801a6ee:	eeb0 6a43 	vmov.f32	s12, s6
 801a6f2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a6f6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801a6fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a6fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a702:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a706:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a70a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a70e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a712:	ee12 2a90 	vmov	r2, s5
 801a716:	eef0 2a47 	vmov.f32	s5, s14
 801a71a:	fb92 f3f3 	sdiv	r3, r2, r3
 801a71e:	ee13 2a10 	vmov	r2, s6
 801a722:	9313      	str	r3, [sp, #76]	; 0x4c
 801a724:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a726:	eeb0 3a67 	vmov.f32	s6, s15
 801a72a:	fb92 f3f3 	sdiv	r3, r2, r3
 801a72e:	9a04      	ldr	r2, [sp, #16]
 801a730:	9314      	str	r3, [sp, #80]	; 0x50
 801a732:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a734:	bf08      	it	eq
 801a736:	4613      	moveq	r3, r2
 801a738:	e787      	b.n	801a64a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801a73a:	140e      	asrs	r6, r1, #16
 801a73c:	d462      	bmi.n	801a804 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801a73e:	f8de 5008 	ldr.w	r5, [lr, #8]
 801a742:	42b5      	cmp	r5, r6
 801a744:	dd5e      	ble.n	801a804 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801a746:	1417      	asrs	r7, r2, #16
 801a748:	d45c      	bmi.n	801a804 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801a74a:	f8de 400c 	ldr.w	r4, [lr, #12]
 801a74e:	42bc      	cmp	r4, r7
 801a750:	dd58      	ble.n	801a804 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801a752:	b22d      	sxth	r5, r5
 801a754:	9c02      	ldr	r4, [sp, #8]
 801a756:	fb07 6505 	mla	r5, r7, r5, r6
 801a75a:	5d66      	ldrb	r6, [r4, r5]
 801a75c:	2e00      	cmp	r6, #0
 801a75e:	d051      	beq.n	801a804 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801a760:	9c01      	ldr	r4, [sp, #4]
 801a762:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801a766:	f06f 0401 	mvn.w	r4, #1
 801a76a:	fb04 f408 	mul.w	r4, r4, r8
 801a76e:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801a772:	5b05      	ldrh	r5, [r0, r4]
 801a774:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a778:	9403      	str	r4, [sp, #12]
 801a77a:	9c05      	ldr	r4, [sp, #20]
 801a77c:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801a780:	4366      	muls	r6, r4
 801a782:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801a786:	1c74      	adds	r4, r6, #1
 801a788:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801a78c:	122e      	asrs	r6, r5, #8
 801a78e:	1224      	asrs	r4, r4, #8
 801a790:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801a794:	00ed      	lsls	r5, r5, #3
 801a796:	b2a7      	uxth	r7, r4
 801a798:	43e4      	mvns	r4, r4
 801a79a:	b2ed      	uxtb	r5, r5
 801a79c:	b2e4      	uxtb	r4, r4
 801a79e:	fb16 f604 	smulbb	r6, r6, r4
 801a7a2:	fb15 f504 	smulbb	r5, r5, r4
 801a7a6:	fb0c 6c07 	mla	ip, ip, r7, r6
 801a7aa:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801a7ae:	fb1a fa04 	smulbb	sl, sl, r4
 801a7b2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801a7b6:	fa1f fc8c 	uxth.w	ip, ip
 801a7ba:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a7be:	fa5f f989 	uxtb.w	r9, r9
 801a7c2:	fb06 a607 	mla	r6, r6, r7, sl
 801a7c6:	f10c 0401 	add.w	r4, ip, #1
 801a7ca:	fb09 5507 	mla	r5, r9, r7, r5
 801a7ce:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801a7d2:	9c03      	ldr	r4, [sp, #12]
 801a7d4:	b2ad      	uxth	r5, r5
 801a7d6:	b2b6      	uxth	r6, r6
 801a7d8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a7dc:	f105 0a01 	add.w	sl, r5, #1
 801a7e0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a7e4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a7e8:	ea4a 0c0c 	orr.w	ip, sl, ip
 801a7ec:	f106 0a01 	add.w	sl, r6, #1
 801a7f0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a7f4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a7f8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a7fc:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a800:	f820 c004 	strh.w	ip, [r0, r4]
 801a804:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a806:	f108 38ff 	add.w	r8, r8, #4294967295
 801a80a:	4421      	add	r1, r4
 801a80c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a80e:	4422      	add	r2, r4
 801a810:	e750      	b.n	801a6b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801a812:	f04f 0900 	mov.w	r9, #0
 801a816:	eba3 0409 	sub.w	r4, r3, r9
 801a81a:	2c00      	cmp	r4, #0
 801a81c:	f77f af4e 	ble.w	801a6bc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801a820:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801a824:	140d      	asrs	r5, r1, #16
 801a826:	1414      	asrs	r4, r2, #16
 801a828:	fb06 5404 	mla	r4, r6, r4, r5
 801a82c:	9d02      	ldr	r5, [sp, #8]
 801a82e:	5d2e      	ldrb	r6, [r5, r4]
 801a830:	2e00      	cmp	r6, #0
 801a832:	d04c      	beq.n	801a8ce <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801a834:	9d01      	ldr	r5, [sp, #4]
 801a836:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801a83a:	9c05      	ldr	r4, [sp, #20]
 801a83c:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801a840:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801a844:	4366      	muls	r6, r4
 801a846:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801a84a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a84e:	1c74      	adds	r4, r6, #1
 801a850:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801a854:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801a858:	122e      	asrs	r6, r5, #8
 801a85a:	1224      	asrs	r4, r4, #8
 801a85c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801a860:	00ed      	lsls	r5, r5, #3
 801a862:	b2a7      	uxth	r7, r4
 801a864:	43e4      	mvns	r4, r4
 801a866:	b2ed      	uxtb	r5, r5
 801a868:	b2e4      	uxtb	r4, r4
 801a86a:	fb16 f604 	smulbb	r6, r6, r4
 801a86e:	fb15 f504 	smulbb	r5, r5, r4
 801a872:	fb0c 6c07 	mla	ip, ip, r7, r6
 801a876:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801a87a:	fb1a fa04 	smulbb	sl, sl, r4
 801a87e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801a882:	fa1f fc8c 	uxth.w	ip, ip
 801a886:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a88a:	fa5f f888 	uxtb.w	r8, r8
 801a88e:	fb06 a607 	mla	r6, r6, r7, sl
 801a892:	f10c 0401 	add.w	r4, ip, #1
 801a896:	fb08 5507 	mla	r5, r8, r7, r5
 801a89a:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801a89e:	b2ad      	uxth	r5, r5
 801a8a0:	b2b6      	uxth	r6, r6
 801a8a2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a8a6:	f105 0a01 	add.w	sl, r5, #1
 801a8aa:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a8ae:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a8b2:	ea4a 0c0c 	orr.w	ip, sl, ip
 801a8b6:	f106 0a01 	add.w	sl, r6, #1
 801a8ba:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a8be:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a8c2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a8c6:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a8ca:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801a8ce:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a8d0:	f109 0901 	add.w	r9, r9, #1
 801a8d4:	4421      	add	r1, r4
 801a8d6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a8d8:	4422      	add	r2, r4
 801a8da:	e79c      	b.n	801a816 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801a8dc:	b007      	add	sp, #28
 801a8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a8e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a8e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8e6:	b085      	sub	sp, #20
 801a8e8:	468b      	mov	fp, r1
 801a8ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a8ee:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a8f0:	9203      	str	r2, [sp, #12]
 801a8f2:	6861      	ldr	r1, [r4, #4]
 801a8f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801a8f8:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801a8fc:	fb01 2000 	mla	r0, r1, r0, r2
 801a900:	6822      	ldr	r2, [r4, #0]
 801a902:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801a906:	f8d8 2000 	ldr.w	r2, [r8]
 801a90a:	9200      	str	r2, [sp, #0]
 801a90c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801a910:	9201      	str	r2, [sp, #4]
 801a912:	f1bb 0f00 	cmp.w	fp, #0
 801a916:	dc03      	bgt.n	801a920 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801a918:	9a03      	ldr	r2, [sp, #12]
 801a91a:	2a00      	cmp	r2, #0
 801a91c:	f340 8146 	ble.w	801abac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801a920:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a922:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801a926:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a92a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a92c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801a930:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a934:	2b00      	cmp	r3, #0
 801a936:	dd0e      	ble.n	801a956 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801a938:	140c      	asrs	r4, r1, #16
 801a93a:	d405      	bmi.n	801a948 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a93c:	42bc      	cmp	r4, r7
 801a93e:	da03      	bge.n	801a948 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a940:	1414      	asrs	r4, r2, #16
 801a942:	d401      	bmi.n	801a948 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a944:	42b4      	cmp	r4, r6
 801a946:	db07      	blt.n	801a958 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a948:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a94a:	3b01      	subs	r3, #1
 801a94c:	3002      	adds	r0, #2
 801a94e:	4421      	add	r1, r4
 801a950:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a952:	4422      	add	r2, r4
 801a954:	e7ee      	b.n	801a934 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801a956:	d017      	beq.n	801a988 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801a958:	1e5c      	subs	r4, r3, #1
 801a95a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a95c:	fb05 1504 	mla	r5, r5, r4, r1
 801a960:	142d      	asrs	r5, r5, #16
 801a962:	d409      	bmi.n	801a978 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a964:	42bd      	cmp	r5, r7
 801a966:	da07      	bge.n	801a978 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a968:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801a96a:	fb05 2404 	mla	r4, r5, r4, r2
 801a96e:	1424      	asrs	r4, r4, #16
 801a970:	d402      	bmi.n	801a978 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a972:	42b4      	cmp	r4, r6
 801a974:	f2c0 80b3 	blt.w	801aade <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801a978:	2600      	movs	r6, #0
 801a97a:	199c      	adds	r4, r3, r6
 801a97c:	2c00      	cmp	r4, #0
 801a97e:	dc3e      	bgt.n	801a9fe <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801a980:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a984:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a988:	f1bb 0f00 	cmp.w	fp, #0
 801a98c:	f340 810e 	ble.w	801abac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801a990:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a994:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a996:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a99a:	f1bb 0b01 	subs.w	fp, fp, #1
 801a99e:	eeb0 6a62 	vmov.f32	s12, s5
 801a9a2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a9a6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a9aa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a9ae:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a9b2:	eeb0 6a43 	vmov.f32	s12, s6
 801a9b6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a9ba:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a9be:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a9c2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a9c6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a9ca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a9ce:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a9d2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a9d6:	ee12 2a90 	vmov	r2, s5
 801a9da:	eef0 2a47 	vmov.f32	s5, s14
 801a9de:	fb92 f3f3 	sdiv	r3, r2, r3
 801a9e2:	ee13 2a10 	vmov	r2, s6
 801a9e6:	9311      	str	r3, [sp, #68]	; 0x44
 801a9e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a9ea:	eeb0 3a67 	vmov.f32	s6, s15
 801a9ee:	fb92 f3f3 	sdiv	r3, r2, r3
 801a9f2:	9a03      	ldr	r2, [sp, #12]
 801a9f4:	9312      	str	r3, [sp, #72]	; 0x48
 801a9f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a9f8:	bf08      	it	eq
 801a9fa:	4613      	moveq	r3, r2
 801a9fc:	e789      	b.n	801a912 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801a9fe:	140f      	asrs	r7, r1, #16
 801aa00:	d418      	bmi.n	801aa34 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801aa02:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801aa06:	42bd      	cmp	r5, r7
 801aa08:	dd14      	ble.n	801aa34 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801aa0a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801aa0e:	d411      	bmi.n	801aa34 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801aa10:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801aa14:	4564      	cmp	r4, ip
 801aa16:	dd0d      	ble.n	801aa34 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801aa18:	b22d      	sxth	r5, r5
 801aa1a:	9c01      	ldr	r4, [sp, #4]
 801aa1c:	fb0c 7505 	mla	r5, ip, r5, r7
 801aa20:	5d64      	ldrb	r4, [r4, r5]
 801aa22:	2cff      	cmp	r4, #255	; 0xff
 801aa24:	d10c      	bne.n	801aa40 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801aa26:	9c00      	ldr	r4, [sp, #0]
 801aa28:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801aa2c:	f06f 0401 	mvn.w	r4, #1
 801aa30:	4374      	muls	r4, r6
 801aa32:	5305      	strh	r5, [r0, r4]
 801aa34:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801aa36:	3e01      	subs	r6, #1
 801aa38:	4421      	add	r1, r4
 801aa3a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801aa3c:	4422      	add	r2, r4
 801aa3e:	e79c      	b.n	801a97a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801aa40:	2c00      	cmp	r4, #0
 801aa42:	d0f7      	beq.n	801aa34 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801aa44:	9f00      	ldr	r7, [sp, #0]
 801aa46:	fa1f fc84 	uxth.w	ip, r4
 801aa4a:	43e4      	mvns	r4, r4
 801aa4c:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801aa50:	f06f 0501 	mvn.w	r5, #1
 801aa54:	b2e4      	uxtb	r4, r4
 801aa56:	4375      	muls	r5, r6
 801aa58:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801aa5c:	9502      	str	r5, [sp, #8]
 801aa5e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801aa62:	5b45      	ldrh	r5, [r0, r5]
 801aa64:	122f      	asrs	r7, r5, #8
 801aa66:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801aa6a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801aa6e:	00ed      	lsls	r5, r5, #3
 801aa70:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801aa74:	fb17 f704 	smulbb	r7, r7, r4
 801aa78:	b2ed      	uxtb	r5, r5
 801aa7a:	fb1a fa04 	smulbb	sl, sl, r4
 801aa7e:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801aa82:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801aa86:	fb15 f504 	smulbb	r5, r5, r4
 801aa8a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801aa8e:	fa1f fe8e 	uxth.w	lr, lr
 801aa92:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801aa96:	fa5f f989 	uxtb.w	r9, r9
 801aa9a:	fb07 a70c 	mla	r7, r7, ip, sl
 801aa9e:	f10e 0401 	add.w	r4, lr, #1
 801aaa2:	fb09 550c 	mla	r5, r9, ip, r5
 801aaa6:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801aaaa:	9c02      	ldr	r4, [sp, #8]
 801aaac:	b2ad      	uxth	r5, r5
 801aaae:	b2bf      	uxth	r7, r7
 801aab0:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801aab4:	f105 0a01 	add.w	sl, r5, #1
 801aab8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801aabc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801aac0:	ea4a 0e0e 	orr.w	lr, sl, lr
 801aac4:	f107 0a01 	add.w	sl, r7, #1
 801aac8:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801aacc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801aad0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801aad4:	ea4e 0e0a 	orr.w	lr, lr, sl
 801aad8:	f820 e004 	strh.w	lr, [r0, r4]
 801aadc:	e7aa      	b.n	801aa34 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801aade:	f04f 0900 	mov.w	r9, #0
 801aae2:	eba3 0409 	sub.w	r4, r3, r9
 801aae6:	2c00      	cmp	r4, #0
 801aae8:	f77f af4a 	ble.w	801a980 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801aaec:	1414      	asrs	r4, r2, #16
 801aaee:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801aaf2:	140d      	asrs	r5, r1, #16
 801aaf4:	fb06 5504 	mla	r5, r6, r4, r5
 801aaf8:	9c01      	ldr	r4, [sp, #4]
 801aafa:	5d64      	ldrb	r4, [r4, r5]
 801aafc:	2cff      	cmp	r4, #255	; 0xff
 801aafe:	d10b      	bne.n	801ab18 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801ab00:	9c00      	ldr	r4, [sp, #0]
 801ab02:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801ab06:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801ab0a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ab0c:	f109 0901 	add.w	r9, r9, #1
 801ab10:	4421      	add	r1, r4
 801ab12:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ab14:	4422      	add	r2, r4
 801ab16:	e7e4      	b.n	801aae2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801ab18:	2c00      	cmp	r4, #0
 801ab1a:	d0f6      	beq.n	801ab0a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801ab1c:	9e00      	ldr	r6, [sp, #0]
 801ab1e:	b2a7      	uxth	r7, r4
 801ab20:	43e4      	mvns	r4, r4
 801ab22:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801ab26:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801ab2a:	b2e4      	uxtb	r4, r4
 801ab2c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801ab30:	122e      	asrs	r6, r5, #8
 801ab32:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801ab36:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ab3a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ab3e:	00ed      	lsls	r5, r5, #3
 801ab40:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801ab44:	fb16 f604 	smulbb	r6, r6, r4
 801ab48:	b2ed      	uxtb	r5, r5
 801ab4a:	fb1a fa04 	smulbb	sl, sl, r4
 801ab4e:	fb0c 6c07 	mla	ip, ip, r7, r6
 801ab52:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801ab56:	fb15 f504 	smulbb	r5, r5, r4
 801ab5a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ab5e:	fa1f fc8c 	uxth.w	ip, ip
 801ab62:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ab66:	fa5f fe8e 	uxtb.w	lr, lr
 801ab6a:	fb06 a607 	mla	r6, r6, r7, sl
 801ab6e:	f10c 0401 	add.w	r4, ip, #1
 801ab72:	fb0e 5507 	mla	r5, lr, r7, r5
 801ab76:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801ab7a:	b2ad      	uxth	r5, r5
 801ab7c:	b2b6      	uxth	r6, r6
 801ab7e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ab82:	f105 0a01 	add.w	sl, r5, #1
 801ab86:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ab8a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ab8e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801ab92:	f106 0a01 	add.w	sl, r6, #1
 801ab96:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ab9a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ab9e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801aba2:	ea4c 0c0a 	orr.w	ip, ip, sl
 801aba6:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801abaa:	e7ae      	b.n	801ab0a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801abac:	b005      	add	sp, #20
 801abae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801abb2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801abb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abb6:	b085      	sub	sp, #20
 801abb8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801abba:	9203      	str	r2, [sp, #12]
 801abbc:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801abc0:	9100      	str	r1, [sp, #0]
 801abc2:	9201      	str	r2, [sp, #4]
 801abc4:	6841      	ldr	r1, [r0, #4]
 801abc6:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801abca:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801abce:	fb01 2404 	mla	r4, r1, r4, r2
 801abd2:	6802      	ldr	r2, [r0, #0]
 801abd4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801abd8:	f8de 2000 	ldr.w	r2, [lr]
 801abdc:	9202      	str	r2, [sp, #8]
 801abde:	9a01      	ldr	r2, [sp, #4]
 801abe0:	43d6      	mvns	r6, r2
 801abe2:	b2f6      	uxtb	r6, r6
 801abe4:	9a00      	ldr	r2, [sp, #0]
 801abe6:	2a00      	cmp	r2, #0
 801abe8:	dc03      	bgt.n	801abf2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801abea:	9a03      	ldr	r2, [sp, #12]
 801abec:	2a00      	cmp	r2, #0
 801abee:	f340 8124 	ble.w	801ae3a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801abf2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801abf4:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801abf8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801abfc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801abfe:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801ac02:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ac06:	2b00      	cmp	r3, #0
 801ac08:	dd0e      	ble.n	801ac28 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ac0a:	1408      	asrs	r0, r1, #16
 801ac0c:	d405      	bmi.n	801ac1a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ac0e:	4560      	cmp	r0, ip
 801ac10:	da03      	bge.n	801ac1a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ac12:	1410      	asrs	r0, r2, #16
 801ac14:	d401      	bmi.n	801ac1a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ac16:	42b8      	cmp	r0, r7
 801ac18:	db07      	blt.n	801ac2a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ac1a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ac1c:	3b01      	subs	r3, #1
 801ac1e:	3402      	adds	r4, #2
 801ac20:	4401      	add	r1, r0
 801ac22:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ac24:	4402      	add	r2, r0
 801ac26:	e7ee      	b.n	801ac06 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801ac28:	d06e      	beq.n	801ad08 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801ac2a:	1e58      	subs	r0, r3, #1
 801ac2c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ac2e:	fb05 1500 	mla	r5, r5, r0, r1
 801ac32:	142d      	asrs	r5, r5, #16
 801ac34:	d45c      	bmi.n	801acf0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801ac36:	4565      	cmp	r5, ip
 801ac38:	da5a      	bge.n	801acf0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801ac3a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ac3c:	fb05 2000 	mla	r0, r5, r0, r2
 801ac40:	1400      	asrs	r0, r0, #16
 801ac42:	d455      	bmi.n	801acf0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801ac44:	42b8      	cmp	r0, r7
 801ac46:	da53      	bge.n	801acf0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801ac48:	4699      	mov	r9, r3
 801ac4a:	46a2      	mov	sl, r4
 801ac4c:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801ac50:	f1b9 0f00 	cmp.w	r9, #0
 801ac54:	dd54      	ble.n	801ad00 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ac56:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801ac5a:	140d      	asrs	r5, r1, #16
 801ac5c:	1410      	asrs	r0, r2, #16
 801ac5e:	f109 39ff 	add.w	r9, r9, #4294967295
 801ac62:	fb07 5000 	mla	r0, r7, r0, r5
 801ac66:	9d02      	ldr	r5, [sp, #8]
 801ac68:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801ac6c:	f8ba 5000 	ldrh.w	r5, [sl]
 801ac70:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801ac74:	122f      	asrs	r7, r5, #8
 801ac76:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801ac7a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ac7e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ac82:	00ed      	lsls	r5, r5, #3
 801ac84:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801ac88:	fb17 f706 	smulbb	r7, r7, r6
 801ac8c:	b2ed      	uxtb	r5, r5
 801ac8e:	fb18 f806 	smulbb	r8, r8, r6
 801ac92:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801ac96:	10c7      	asrs	r7, r0, #3
 801ac98:	fb15 f506 	smulbb	r5, r5, r6
 801ac9c:	00c0      	lsls	r0, r0, #3
 801ac9e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801aca2:	fa1f fc8c 	uxth.w	ip, ip
 801aca6:	b2c0      	uxtb	r0, r0
 801aca8:	fb07 870b 	mla	r7, r7, fp, r8
 801acac:	fb00 500b 	mla	r0, r0, fp, r5
 801acb0:	f10c 0501 	add.w	r5, ip, #1
 801acb4:	b2bf      	uxth	r7, r7
 801acb6:	b280      	uxth	r0, r0
 801acb8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801acbc:	f107 0801 	add.w	r8, r7, #1
 801acc0:	1c45      	adds	r5, r0, #1
 801acc2:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801acc6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801acca:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801acce:	9811      	ldr	r0, [sp, #68]	; 0x44
 801acd0:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801acd4:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801acd8:	4401      	add	r1, r0
 801acda:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801acde:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ace0:	ea45 0c0c 	orr.w	ip, r5, ip
 801ace4:	4402      	add	r2, r0
 801ace6:	ea4c 0c08 	orr.w	ip, ip, r8
 801acea:	f82a cb02 	strh.w	ip, [sl], #2
 801acee:	e7af      	b.n	801ac50 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801acf0:	f04f 0800 	mov.w	r8, #0
 801acf4:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801acf8:	eb03 0008 	add.w	r0, r3, r8
 801acfc:	2800      	cmp	r0, #0
 801acfe:	dc41      	bgt.n	801ad84 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801ad00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ad04:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ad08:	9b00      	ldr	r3, [sp, #0]
 801ad0a:	2b00      	cmp	r3, #0
 801ad0c:	f340 8095 	ble.w	801ae3a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801ad10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ad14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad16:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ad1a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ad1e:	eef0 6a62 	vmov.f32	s13, s5
 801ad22:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ad26:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ad2a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ad2e:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801ad32:	eef0 6a43 	vmov.f32	s13, s6
 801ad36:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ad3a:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801ad3e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ad42:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ad46:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ad4a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ad4e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ad52:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ad56:	ee12 2a90 	vmov	r2, s5
 801ad5a:	eef0 2a47 	vmov.f32	s5, s14
 801ad5e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ad62:	ee13 2a10 	vmov	r2, s6
 801ad66:	9311      	str	r3, [sp, #68]	; 0x44
 801ad68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad6a:	eeb0 3a67 	vmov.f32	s6, s15
 801ad6e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ad72:	9312      	str	r3, [sp, #72]	; 0x48
 801ad74:	9b00      	ldr	r3, [sp, #0]
 801ad76:	9a03      	ldr	r2, [sp, #12]
 801ad78:	3b01      	subs	r3, #1
 801ad7a:	9300      	str	r3, [sp, #0]
 801ad7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad7e:	bf08      	it	eq
 801ad80:	4613      	moveq	r3, r2
 801ad82:	e72f      	b.n	801abe4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801ad84:	140f      	asrs	r7, r1, #16
 801ad86:	d451      	bmi.n	801ae2c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801ad88:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ad8c:	42bd      	cmp	r5, r7
 801ad8e:	dd4d      	ble.n	801ae2c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801ad90:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ad94:	d44a      	bmi.n	801ae2c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801ad96:	f8de 000c 	ldr.w	r0, [lr, #12]
 801ad9a:	4560      	cmp	r0, ip
 801ad9c:	dd46      	ble.n	801ae2c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801ad9e:	b22d      	sxth	r5, r5
 801ada0:	9802      	ldr	r0, [sp, #8]
 801ada2:	fb0c 7505 	mla	r5, ip, r5, r7
 801ada6:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801adaa:	f06f 0501 	mvn.w	r5, #1
 801adae:	fb05 fb08 	mul.w	fp, r5, r8
 801adb2:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801adb6:	f834 500b 	ldrh.w	r5, [r4, fp]
 801adba:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801adbe:	122f      	asrs	r7, r5, #8
 801adc0:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801adc4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801adc8:	00ed      	lsls	r5, r5, #3
 801adca:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801adce:	fb17 f706 	smulbb	r7, r7, r6
 801add2:	b2ed      	uxtb	r5, r5
 801add4:	fb19 f906 	smulbb	r9, r9, r6
 801add8:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801addc:	10c7      	asrs	r7, r0, #3
 801adde:	fb15 f506 	smulbb	r5, r5, r6
 801ade2:	00c0      	lsls	r0, r0, #3
 801ade4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ade8:	fa1f fc8c 	uxth.w	ip, ip
 801adec:	b2c0      	uxtb	r0, r0
 801adee:	fb07 970a 	mla	r7, r7, sl, r9
 801adf2:	fb00 500a 	mla	r0, r0, sl, r5
 801adf6:	f10c 0501 	add.w	r5, ip, #1
 801adfa:	b2bf      	uxth	r7, r7
 801adfc:	b280      	uxth	r0, r0
 801adfe:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801ae02:	f107 0901 	add.w	r9, r7, #1
 801ae06:	1c45      	adds	r5, r0, #1
 801ae08:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801ae0c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ae10:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801ae14:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801ae18:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801ae1c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801ae20:	ea45 0c0c 	orr.w	ip, r5, ip
 801ae24:	ea4c 0c09 	orr.w	ip, ip, r9
 801ae28:	f824 c00b 	strh.w	ip, [r4, fp]
 801ae2c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ae2e:	f108 38ff 	add.w	r8, r8, #4294967295
 801ae32:	4401      	add	r1, r0
 801ae34:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ae36:	4402      	add	r2, r0
 801ae38:	e75e      	b.n	801acf8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801ae3a:	b005      	add	sp, #20
 801ae3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ae40 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ae40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae44:	b085      	sub	sp, #20
 801ae46:	4693      	mov	fp, r2
 801ae48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ae4c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ae4e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801ae50:	6870      	ldr	r0, [r6, #4]
 801ae52:	9101      	str	r1, [sp, #4]
 801ae54:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ae58:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801ae5c:	fb00 2404 	mla	r4, r0, r4, r2
 801ae60:	6832      	ldr	r2, [r6, #0]
 801ae62:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ae66:	682a      	ldr	r2, [r5, #0]
 801ae68:	9202      	str	r2, [sp, #8]
 801ae6a:	9a01      	ldr	r2, [sp, #4]
 801ae6c:	2a00      	cmp	r2, #0
 801ae6e:	dc03      	bgt.n	801ae78 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ae70:	f1bb 0f00 	cmp.w	fp, #0
 801ae74:	f340 809a 	ble.w	801afac <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801ae78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ae7a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801ae7e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ae82:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ae84:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801ae88:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ae8c:	2b00      	cmp	r3, #0
 801ae8e:	dd0c      	ble.n	801aeaa <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ae90:	1406      	asrs	r6, r0, #16
 801ae92:	d405      	bmi.n	801aea0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ae94:	454e      	cmp	r6, r9
 801ae96:	da03      	bge.n	801aea0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ae98:	1416      	asrs	r6, r2, #16
 801ae9a:	d401      	bmi.n	801aea0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ae9c:	4546      	cmp	r6, r8
 801ae9e:	db05      	blt.n	801aeac <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801aea0:	4470      	add	r0, lr
 801aea2:	4462      	add	r2, ip
 801aea4:	3b01      	subs	r3, #1
 801aea6:	3402      	adds	r4, #2
 801aea8:	e7f0      	b.n	801ae8c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801aeaa:	d00f      	beq.n	801aecc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801aeac:	1e5e      	subs	r6, r3, #1
 801aeae:	fb0e 0706 	mla	r7, lr, r6, r0
 801aeb2:	143f      	asrs	r7, r7, #16
 801aeb4:	d541      	bpl.n	801af3a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801aeb6:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801aeba:	4698      	mov	r8, r3
 801aebc:	9603      	str	r6, [sp, #12]
 801aebe:	f1b8 0f00 	cmp.w	r8, #0
 801aec2:	dc56      	bgt.n	801af72 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801aec4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801aec8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801aecc:	9b01      	ldr	r3, [sp, #4]
 801aece:	2b00      	cmp	r3, #0
 801aed0:	dd6c      	ble.n	801afac <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801aed2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801aed6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aed8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801aedc:	eeb0 6a62 	vmov.f32	s12, s5
 801aee0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801aee4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801aee8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aeec:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801aef0:	eeb0 6a43 	vmov.f32	s12, s6
 801aef4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aef8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801aefc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801af00:	ee61 7a27 	vmul.f32	s15, s2, s15
 801af04:	ee77 2a62 	vsub.f32	s5, s14, s5
 801af08:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801af0c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801af10:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801af14:	ee12 2a90 	vmov	r2, s5
 801af18:	eef0 2a47 	vmov.f32	s5, s14
 801af1c:	fb92 fef3 	sdiv	lr, r2, r3
 801af20:	ee13 2a10 	vmov	r2, s6
 801af24:	eeb0 3a67 	vmov.f32	s6, s15
 801af28:	fb92 fcf3 	sdiv	ip, r2, r3
 801af2c:	9b01      	ldr	r3, [sp, #4]
 801af2e:	3b01      	subs	r3, #1
 801af30:	9301      	str	r3, [sp, #4]
 801af32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801af34:	bf08      	it	eq
 801af36:	465b      	moveq	r3, fp
 801af38:	e797      	b.n	801ae6a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801af3a:	454f      	cmp	r7, r9
 801af3c:	dabb      	bge.n	801aeb6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801af3e:	fb0c 2606 	mla	r6, ip, r6, r2
 801af42:	1436      	asrs	r6, r6, #16
 801af44:	d4b7      	bmi.n	801aeb6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801af46:	4546      	cmp	r6, r8
 801af48:	dab5      	bge.n	801aeb6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801af4a:	461e      	mov	r6, r3
 801af4c:	46a0      	mov	r8, r4
 801af4e:	2e00      	cmp	r6, #0
 801af50:	ddb8      	ble.n	801aec4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801af52:	1417      	asrs	r7, r2, #16
 801af54:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801af58:	ea4f 4920 	mov.w	r9, r0, asr #16
 801af5c:	9902      	ldr	r1, [sp, #8]
 801af5e:	4470      	add	r0, lr
 801af60:	4462      	add	r2, ip
 801af62:	fb0a 9707 	mla	r7, sl, r7, r9
 801af66:	3e01      	subs	r6, #1
 801af68:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801af6c:	f828 7b02 	strh.w	r7, [r8], #2
 801af70:	e7ed      	b.n	801af4e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801af72:	ea5f 4920 	movs.w	r9, r0, asr #16
 801af76:	d414      	bmi.n	801afa2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801af78:	68ae      	ldr	r6, [r5, #8]
 801af7a:	454e      	cmp	r6, r9
 801af7c:	dd11      	ble.n	801afa2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801af7e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801af82:	d40e      	bmi.n	801afa2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801af84:	68ef      	ldr	r7, [r5, #12]
 801af86:	4557      	cmp	r7, sl
 801af88:	dd0b      	ble.n	801afa2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801af8a:	b236      	sxth	r6, r6
 801af8c:	f06f 0101 	mvn.w	r1, #1
 801af90:	9f02      	ldr	r7, [sp, #8]
 801af92:	fb0a 9606 	mla	r6, sl, r6, r9
 801af96:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801af9a:	fb01 f608 	mul.w	r6, r1, r8
 801af9e:	9903      	ldr	r1, [sp, #12]
 801afa0:	538f      	strh	r7, [r1, r6]
 801afa2:	4470      	add	r0, lr
 801afa4:	4462      	add	r2, ip
 801afa6:	f108 38ff 	add.w	r8, r8, #4294967295
 801afaa:	e788      	b.n	801aebe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801afac:	b005      	add	sp, #20
 801afae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801afb2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801afb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afb6:	b087      	sub	sp, #28
 801afb8:	468b      	mov	fp, r1
 801afba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801afbe:	9815      	ldr	r0, [sp, #84]	; 0x54
 801afc0:	9203      	str	r2, [sp, #12]
 801afc2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801afc6:	6841      	ldr	r1, [r0, #4]
 801afc8:	9204      	str	r2, [sp, #16]
 801afca:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801afce:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801afd2:	fb01 2505 	mla	r5, r1, r5, r2
 801afd6:	6802      	ldr	r2, [r0, #0]
 801afd8:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801afdc:	f8d9 2000 	ldr.w	r2, [r9]
 801afe0:	9201      	str	r2, [sp, #4]
 801afe2:	f1bb 0f00 	cmp.w	fp, #0
 801afe6:	dc03      	bgt.n	801aff0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801afe8:	9a03      	ldr	r2, [sp, #12]
 801afea:	2a00      	cmp	r2, #0
 801afec:	f340 8158 	ble.w	801b2a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801aff0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801aff2:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801aff6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801affa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801affc:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801b000:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b004:	2b00      	cmp	r3, #0
 801b006:	dd0e      	ble.n	801b026 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801b008:	1402      	asrs	r2, r0, #16
 801b00a:	d405      	bmi.n	801b018 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b00c:	42ba      	cmp	r2, r7
 801b00e:	da03      	bge.n	801b018 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b010:	140a      	asrs	r2, r1, #16
 801b012:	d401      	bmi.n	801b018 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b014:	42b2      	cmp	r2, r6
 801b016:	db07      	blt.n	801b028 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b018:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b01a:	3b01      	subs	r3, #1
 801b01c:	3502      	adds	r5, #2
 801b01e:	4410      	add	r0, r2
 801b020:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b022:	4411      	add	r1, r2
 801b024:	e7ee      	b.n	801b004 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801b026:	d017      	beq.n	801b058 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b028:	1e5a      	subs	r2, r3, #1
 801b02a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b02c:	fb04 0402 	mla	r4, r4, r2, r0
 801b030:	1424      	asrs	r4, r4, #16
 801b032:	d409      	bmi.n	801b048 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b034:	42bc      	cmp	r4, r7
 801b036:	da07      	bge.n	801b048 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b038:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b03a:	fb04 1202 	mla	r2, r4, r2, r1
 801b03e:	1412      	asrs	r2, r2, #16
 801b040:	d402      	bmi.n	801b048 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b042:	42b2      	cmp	r2, r6
 801b044:	f2c0 80bf 	blt.w	801b1c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801b048:	2700      	movs	r7, #0
 801b04a:	19da      	adds	r2, r3, r7
 801b04c:	2a00      	cmp	r2, #0
 801b04e:	dc3e      	bgt.n	801b0ce <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801b050:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b054:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801b058:	f1bb 0f00 	cmp.w	fp, #0
 801b05c:	f340 8120 	ble.w	801b2a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801b060:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b064:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b066:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b06a:	f1bb 0b01 	subs.w	fp, fp, #1
 801b06e:	eeb0 6a62 	vmov.f32	s12, s5
 801b072:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b076:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b07a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b07e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b082:	eeb0 6a43 	vmov.f32	s12, s6
 801b086:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b08a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b08e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b092:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b096:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b09a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b09e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b0a2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b0a6:	ee12 2a90 	vmov	r2, s5
 801b0aa:	eef0 2a47 	vmov.f32	s5, s14
 801b0ae:	fb92 f3f3 	sdiv	r3, r2, r3
 801b0b2:	ee13 2a10 	vmov	r2, s6
 801b0b6:	9313      	str	r3, [sp, #76]	; 0x4c
 801b0b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b0ba:	eeb0 3a67 	vmov.f32	s6, s15
 801b0be:	fb92 f3f3 	sdiv	r3, r2, r3
 801b0c2:	9a03      	ldr	r2, [sp, #12]
 801b0c4:	9314      	str	r3, [sp, #80]	; 0x50
 801b0c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b0c8:	bf08      	it	eq
 801b0ca:	4613      	moveq	r3, r2
 801b0cc:	e789      	b.n	801afe2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801b0ce:	1406      	asrs	r6, r0, #16
 801b0d0:	d42d      	bmi.n	801b12e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b0d2:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801b0d6:	42b4      	cmp	r4, r6
 801b0d8:	dd29      	ble.n	801b12e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b0da:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801b0de:	d426      	bmi.n	801b12e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b0e0:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801b0e4:	4562      	cmp	r2, ip
 801b0e6:	dd22      	ble.n	801b12e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b0e8:	b224      	sxth	r4, r4
 801b0ea:	9a01      	ldr	r2, [sp, #4]
 801b0ec:	fb0c 6404 	mla	r4, ip, r4, r6
 801b0f0:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801b0f4:	0e22      	lsrs	r2, r4, #24
 801b0f6:	d01a      	beq.n	801b12e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b0f8:	9e04      	ldr	r6, [sp, #16]
 801b0fa:	4372      	muls	r2, r6
 801b0fc:	1c56      	adds	r6, r2, #1
 801b0fe:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b102:	0a26      	lsrs	r6, r4, #8
 801b104:	1212      	asrs	r2, r2, #8
 801b106:	9605      	str	r6, [sp, #20]
 801b108:	2aff      	cmp	r2, #255	; 0xff
 801b10a:	d116      	bne.n	801b13a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801b10c:	f06f 0201 	mvn.w	r2, #1
 801b110:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801b114:	fb02 fc07 	mul.w	ip, r2, r7
 801b118:	0962      	lsrs	r2, r4, #5
 801b11a:	f026 0607 	bic.w	r6, r6, #7
 801b11e:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801b122:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b126:	4316      	orrs	r6, r2
 801b128:	4326      	orrs	r6, r4
 801b12a:	f825 600c 	strh.w	r6, [r5, ip]
 801b12e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b130:	3f01      	subs	r7, #1
 801b132:	4410      	add	r0, r2
 801b134:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b136:	4411      	add	r1, r2
 801b138:	e787      	b.n	801b04a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b13a:	f06f 0601 	mvn.w	r6, #1
 801b13e:	fa1f fa82 	uxth.w	sl, r2
 801b142:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801b146:	43d2      	mvns	r2, r2
 801b148:	437e      	muls	r6, r7
 801b14a:	b2e4      	uxtb	r4, r4
 801b14c:	fb1c fc0a 	smulbb	ip, ip, sl
 801b150:	b2d2      	uxtb	r2, r2
 801b152:	f835 8006 	ldrh.w	r8, [r5, r6]
 801b156:	fb14 f40a 	smulbb	r4, r4, sl
 801b15a:	9602      	str	r6, [sp, #8]
 801b15c:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801b160:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801b164:	fb16 f60a 	smulbb	r6, r6, sl
 801b168:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801b16c:	fb0e ce02 	mla	lr, lr, r2, ip
 801b170:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801b174:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801b178:	fa1f fe8e 	uxth.w	lr, lr
 801b17c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801b180:	fa5f f888 	uxtb.w	r8, r8
 801b184:	fb0c 6c02 	mla	ip, ip, r2, r6
 801b188:	fb08 4402 	mla	r4, r8, r2, r4
 801b18c:	f10e 0201 	add.w	r2, lr, #1
 801b190:	fa1f fc8c 	uxth.w	ip, ip
 801b194:	b2a4      	uxth	r4, r4
 801b196:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801b19a:	9a02      	ldr	r2, [sp, #8]
 801b19c:	1c66      	adds	r6, r4, #1
 801b19e:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801b1a2:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801b1a6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801b1aa:	ea46 0e0e 	orr.w	lr, r6, lr
 801b1ae:	f10c 0601 	add.w	r6, ip, #1
 801b1b2:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801b1b6:	0976      	lsrs	r6, r6, #5
 801b1b8:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b1bc:	ea4e 0e06 	orr.w	lr, lr, r6
 801b1c0:	f825 e002 	strh.w	lr, [r5, r2]
 801b1c4:	e7b3      	b.n	801b12e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b1c6:	f04f 0800 	mov.w	r8, #0
 801b1ca:	eba3 0208 	sub.w	r2, r3, r8
 801b1ce:	2a00      	cmp	r2, #0
 801b1d0:	f77f af3e 	ble.w	801b050 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b1d4:	1404      	asrs	r4, r0, #16
 801b1d6:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801b1da:	140a      	asrs	r2, r1, #16
 801b1dc:	fb06 4202 	mla	r2, r6, r2, r4
 801b1e0:	9c01      	ldr	r4, [sp, #4]
 801b1e2:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801b1e6:	0e22      	lsrs	r2, r4, #24
 801b1e8:	d015      	beq.n	801b216 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801b1ea:	9e04      	ldr	r6, [sp, #16]
 801b1ec:	4372      	muls	r2, r6
 801b1ee:	1c56      	adds	r6, r2, #1
 801b1f0:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b1f4:	0a26      	lsrs	r6, r4, #8
 801b1f6:	1212      	asrs	r2, r2, #8
 801b1f8:	2aff      	cmp	r2, #255	; 0xff
 801b1fa:	d113      	bne.n	801b224 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801b1fc:	0962      	lsrs	r2, r4, #5
 801b1fe:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801b202:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801b206:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b20a:	f026 0607 	bic.w	r6, r6, #7
 801b20e:	4316      	orrs	r6, r2
 801b210:	4326      	orrs	r6, r4
 801b212:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801b216:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b218:	f108 0801 	add.w	r8, r8, #1
 801b21c:	4410      	add	r0, r2
 801b21e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b220:	4411      	add	r1, r2
 801b222:	e7d2      	b.n	801b1ca <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801b224:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801b228:	fa1f fa82 	uxth.w	sl, r2
 801b22c:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801b230:	43d2      	mvns	r2, r2
 801b232:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b236:	fb17 f70a 	smulbb	r7, r7, sl
 801b23a:	b2d2      	uxtb	r2, r2
 801b23c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b240:	b2e4      	uxtb	r4, r4
 801b242:	b2f6      	uxtb	r6, r6
 801b244:	fb0c 7c02 	mla	ip, ip, r2, r7
 801b248:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801b24c:	fb14 f40a 	smulbb	r4, r4, sl
 801b250:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b254:	fa1f fc8c 	uxth.w	ip, ip
 801b258:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b25c:	fb16 f60a 	smulbb	r6, r6, sl
 801b260:	fa5f fe8e 	uxtb.w	lr, lr
 801b264:	fb0e 4402 	mla	r4, lr, r2, r4
 801b268:	fb07 6702 	mla	r7, r7, r2, r6
 801b26c:	f10c 0201 	add.w	r2, ip, #1
 801b270:	b2a4      	uxth	r4, r4
 801b272:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801b276:	1c66      	adds	r6, r4, #1
 801b278:	b2bf      	uxth	r7, r7
 801b27a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b27e:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801b282:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801b286:	ea46 0c0c 	orr.w	ip, r6, ip
 801b28a:	1c7e      	adds	r6, r7, #1
 801b28c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801b290:	0976      	lsrs	r6, r6, #5
 801b292:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b296:	ea4c 0c06 	orr.w	ip, ip, r6
 801b29a:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801b29e:	e7ba      	b.n	801b216 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801b2a0:	b007      	add	sp, #28
 801b2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801b2a8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2ac:	b085      	sub	sp, #20
 801b2ae:	468b      	mov	fp, r1
 801b2b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b2b4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b2b6:	9203      	str	r2, [sp, #12]
 801b2b8:	6841      	ldr	r1, [r0, #4]
 801b2ba:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801b2be:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b2c2:	fb01 2404 	mla	r4, r1, r4, r2
 801b2c6:	6802      	ldr	r2, [r0, #0]
 801b2c8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b2cc:	f8d8 2000 	ldr.w	r2, [r8]
 801b2d0:	9201      	str	r2, [sp, #4]
 801b2d2:	f1bb 0f00 	cmp.w	fp, #0
 801b2d6:	dc03      	bgt.n	801b2e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801b2d8:	9a03      	ldr	r2, [sp, #12]
 801b2da:	2a00      	cmp	r2, #0
 801b2dc:	f340 814f 	ble.w	801b57e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801b2e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b2e2:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801b2e6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b2ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b2ec:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801b2f0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	dd0e      	ble.n	801b316 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b2f8:	1408      	asrs	r0, r1, #16
 801b2fa:	d405      	bmi.n	801b308 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b2fc:	42b8      	cmp	r0, r7
 801b2fe:	da03      	bge.n	801b308 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b300:	1410      	asrs	r0, r2, #16
 801b302:	d401      	bmi.n	801b308 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b304:	42b0      	cmp	r0, r6
 801b306:	db07      	blt.n	801b318 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b308:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b30a:	3b01      	subs	r3, #1
 801b30c:	3402      	adds	r4, #2
 801b30e:	4401      	add	r1, r0
 801b310:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b312:	4402      	add	r2, r0
 801b314:	e7ee      	b.n	801b2f4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801b316:	d017      	beq.n	801b348 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b318:	1e58      	subs	r0, r3, #1
 801b31a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b31c:	fb05 1500 	mla	r5, r5, r0, r1
 801b320:	142d      	asrs	r5, r5, #16
 801b322:	d409      	bmi.n	801b338 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b324:	42bd      	cmp	r5, r7
 801b326:	da07      	bge.n	801b338 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b328:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801b32a:	fb05 2000 	mla	r0, r5, r0, r2
 801b32e:	1400      	asrs	r0, r0, #16
 801b330:	d402      	bmi.n	801b338 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b332:	42b0      	cmp	r0, r6
 801b334:	f2c0 80ba 	blt.w	801b4ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801b338:	2600      	movs	r6, #0
 801b33a:	1998      	adds	r0, r3, r6
 801b33c:	2800      	cmp	r0, #0
 801b33e:	dc3e      	bgt.n	801b3be <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801b340:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b344:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b348:	f1bb 0f00 	cmp.w	fp, #0
 801b34c:	f340 8117 	ble.w	801b57e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801b350:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b354:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b356:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b35a:	f1bb 0b01 	subs.w	fp, fp, #1
 801b35e:	eeb0 6a62 	vmov.f32	s12, s5
 801b362:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b366:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b36a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b36e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b372:	eeb0 6a43 	vmov.f32	s12, s6
 801b376:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b37a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b37e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b382:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b386:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b38a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b38e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b392:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b396:	ee12 2a90 	vmov	r2, s5
 801b39a:	eef0 2a47 	vmov.f32	s5, s14
 801b39e:	fb92 f3f3 	sdiv	r3, r2, r3
 801b3a2:	ee13 2a10 	vmov	r2, s6
 801b3a6:	9311      	str	r3, [sp, #68]	; 0x44
 801b3a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b3aa:	eeb0 3a67 	vmov.f32	s6, s15
 801b3ae:	fb92 f3f3 	sdiv	r3, r2, r3
 801b3b2:	9a03      	ldr	r2, [sp, #12]
 801b3b4:	9312      	str	r3, [sp, #72]	; 0x48
 801b3b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b3b8:	bf08      	it	eq
 801b3ba:	4613      	moveq	r3, r2
 801b3bc:	e789      	b.n	801b2d2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801b3be:	140f      	asrs	r7, r1, #16
 801b3c0:	d424      	bmi.n	801b40c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b3c2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801b3c6:	42bd      	cmp	r5, r7
 801b3c8:	dd20      	ble.n	801b40c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b3ca:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b3ce:	d41d      	bmi.n	801b40c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b3d0:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801b3d4:	4560      	cmp	r0, ip
 801b3d6:	dd19      	ble.n	801b40c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b3d8:	b22d      	sxth	r5, r5
 801b3da:	9801      	ldr	r0, [sp, #4]
 801b3dc:	fb0c 7505 	mla	r5, ip, r5, r7
 801b3e0:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801b3e4:	0e07      	lsrs	r7, r0, #24
 801b3e6:	2fff      	cmp	r7, #255	; 0xff
 801b3e8:	d116      	bne.n	801b418 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801b3ea:	f06f 0501 	mvn.w	r5, #1
 801b3ee:	fb05 f706 	mul.w	r7, r5, r6
 801b3f2:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801b3f6:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801b3fa:	0945      	lsrs	r5, r0, #5
 801b3fc:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801b400:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801b404:	ea4c 0505 	orr.w	r5, ip, r5
 801b408:	4305      	orrs	r5, r0
 801b40a:	53e5      	strh	r5, [r4, r7]
 801b40c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b40e:	3e01      	subs	r6, #1
 801b410:	4401      	add	r1, r0
 801b412:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b414:	4402      	add	r2, r0
 801b416:	e790      	b.n	801b33a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801b418:	b2fd      	uxtb	r5, r7
 801b41a:	2f00      	cmp	r7, #0
 801b41c:	d0f6      	beq.n	801b40c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b41e:	f06f 0701 	mvn.w	r7, #1
 801b422:	fa1f f985 	uxth.w	r9, r5
 801b426:	43ed      	mvns	r5, r5
 801b428:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801b42c:	4377      	muls	r7, r6
 801b42e:	fb1a fa09 	smulbb	sl, sl, r9
 801b432:	b2ed      	uxtb	r5, r5
 801b434:	f834 e007 	ldrh.w	lr, [r4, r7]
 801b438:	9702      	str	r7, [sp, #8]
 801b43a:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801b43e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b442:	fb17 f709 	smulbb	r7, r7, r9
 801b446:	b2c0      	uxtb	r0, r0
 801b448:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b44c:	fb10 f009 	smulbb	r0, r0, r9
 801b450:	fb0c 7c05 	mla	ip, ip, r5, r7
 801b454:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801b458:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b45c:	fa1f fc8c 	uxth.w	ip, ip
 801b460:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b464:	fa5f fe8e 	uxtb.w	lr, lr
 801b468:	fb07 a705 	mla	r7, r7, r5, sl
 801b46c:	fb0e 0005 	mla	r0, lr, r5, r0
 801b470:	f10c 0501 	add.w	r5, ip, #1
 801b474:	b2bf      	uxth	r7, r7
 801b476:	b280      	uxth	r0, r0
 801b478:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b47c:	f100 0a01 	add.w	sl, r0, #1
 801b480:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b484:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801b488:	9802      	ldr	r0, [sp, #8]
 801b48a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b48e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801b492:	f107 0a01 	add.w	sl, r7, #1
 801b496:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801b49a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b49e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b4a2:	ea4c 0c0a 	orr.w	ip, ip, sl
 801b4a6:	f824 c000 	strh.w	ip, [r4, r0]
 801b4aa:	e7af      	b.n	801b40c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b4ac:	f04f 0e00 	mov.w	lr, #0
 801b4b0:	eba3 000e 	sub.w	r0, r3, lr
 801b4b4:	2800      	cmp	r0, #0
 801b4b6:	f77f af43 	ble.w	801b340 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b4ba:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801b4be:	140d      	asrs	r5, r1, #16
 801b4c0:	1410      	asrs	r0, r2, #16
 801b4c2:	fb06 5000 	mla	r0, r6, r0, r5
 801b4c6:	9d01      	ldr	r5, [sp, #4]
 801b4c8:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801b4cc:	0e2e      	lsrs	r6, r5, #24
 801b4ce:	2eff      	cmp	r6, #255	; 0xff
 801b4d0:	d112      	bne.n	801b4f8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801b4d2:	482c      	ldr	r0, [pc, #176]	; (801b584 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801b4d4:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801b4d8:	0968      	lsrs	r0, r5, #5
 801b4da:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801b4de:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801b4e2:	4330      	orrs	r0, r6
 801b4e4:	4328      	orrs	r0, r5
 801b4e6:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801b4ea:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b4ec:	f10e 0e01 	add.w	lr, lr, #1
 801b4f0:	4401      	add	r1, r0
 801b4f2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b4f4:	4402      	add	r2, r0
 801b4f6:	e7db      	b.n	801b4b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801b4f8:	b2f0      	uxtb	r0, r6
 801b4fa:	2e00      	cmp	r6, #0
 801b4fc:	d0f5      	beq.n	801b4ea <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801b4fe:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801b502:	fa1f f980 	uxth.w	r9, r0
 801b506:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801b50a:	43c0      	mvns	r0, r0
 801b50c:	ea4f 272c 	mov.w	r7, ip, asr #8
 801b510:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b514:	fb16 f609 	smulbb	r6, r6, r9
 801b518:	b2c0      	uxtb	r0, r0
 801b51a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b51e:	b2ed      	uxtb	r5, r5
 801b520:	fb1a fa09 	smulbb	sl, sl, r9
 801b524:	fb07 6700 	mla	r7, r7, r0, r6
 801b528:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801b52c:	fb15 f509 	smulbb	r5, r5, r9
 801b530:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801b534:	b2bf      	uxth	r7, r7
 801b536:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b53a:	fa5f fc8c 	uxtb.w	ip, ip
 801b53e:	fb06 a600 	mla	r6, r6, r0, sl
 801b542:	fb0c 5500 	mla	r5, ip, r0, r5
 801b546:	1c78      	adds	r0, r7, #1
 801b548:	b2b6      	uxth	r6, r6
 801b54a:	b2ad      	uxth	r5, r5
 801b54c:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801b550:	f105 0a01 	add.w	sl, r5, #1
 801b554:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b558:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b55c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b560:	ea4a 0707 	orr.w	r7, sl, r7
 801b564:	f106 0a01 	add.w	sl, r6, #1
 801b568:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b56c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b570:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b574:	ea47 070a 	orr.w	r7, r7, sl
 801b578:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801b57c:	e7b5      	b.n	801b4ea <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801b57e:	b005      	add	sp, #20
 801b580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b584:	fffff800 	.word	0xfffff800

0801b588 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b58c:	b087      	sub	sp, #28
 801b58e:	468b      	mov	fp, r1
 801b590:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b594:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b596:	9203      	str	r2, [sp, #12]
 801b598:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801b59c:	6841      	ldr	r1, [r0, #4]
 801b59e:	9204      	str	r2, [sp, #16]
 801b5a0:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801b5a4:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801b5a8:	fb01 2404 	mla	r4, r1, r4, r2
 801b5ac:	6802      	ldr	r2, [r0, #0]
 801b5ae:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b5b2:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801b5b6:	3201      	adds	r2, #1
 801b5b8:	f022 0201 	bic.w	r2, r2, #1
 801b5bc:	9200      	str	r2, [sp, #0]
 801b5be:	f8d9 2000 	ldr.w	r2, [r9]
 801b5c2:	9201      	str	r2, [sp, #4]
 801b5c4:	f1bb 0f00 	cmp.w	fp, #0
 801b5c8:	dc03      	bgt.n	801b5d2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801b5ca:	9a03      	ldr	r2, [sp, #12]
 801b5cc:	2a00      	cmp	r2, #0
 801b5ce:	f340 816a 	ble.w	801b8a6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801b5d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b5d4:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801b5d8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b5dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b5de:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801b5e2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b5e6:	2b00      	cmp	r3, #0
 801b5e8:	dd0e      	ble.n	801b608 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801b5ea:	1402      	asrs	r2, r0, #16
 801b5ec:	d405      	bmi.n	801b5fa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b5ee:	42ba      	cmp	r2, r7
 801b5f0:	da03      	bge.n	801b5fa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b5f2:	140a      	asrs	r2, r1, #16
 801b5f4:	d401      	bmi.n	801b5fa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b5f6:	42b2      	cmp	r2, r6
 801b5f8:	db07      	blt.n	801b60a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801b5fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b5fc:	3b01      	subs	r3, #1
 801b5fe:	3402      	adds	r4, #2
 801b600:	4410      	add	r0, r2
 801b602:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b604:	4411      	add	r1, r2
 801b606:	e7ee      	b.n	801b5e6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801b608:	d017      	beq.n	801b63a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801b60a:	1e5a      	subs	r2, r3, #1
 801b60c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b60e:	fb05 0502 	mla	r5, r5, r2, r0
 801b612:	142d      	asrs	r5, r5, #16
 801b614:	d409      	bmi.n	801b62a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801b616:	42bd      	cmp	r5, r7
 801b618:	da07      	bge.n	801b62a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801b61a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b61c:	fb05 1202 	mla	r2, r5, r2, r1
 801b620:	1412      	asrs	r2, r2, #16
 801b622:	d402      	bmi.n	801b62a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801b624:	42b2      	cmp	r2, r6
 801b626:	f2c0 80c8 	blt.w	801b7ba <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801b62a:	2700      	movs	r7, #0
 801b62c:	19da      	adds	r2, r3, r7
 801b62e:	2a00      	cmp	r2, #0
 801b630:	dc3e      	bgt.n	801b6b0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801b632:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b636:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b63a:	f1bb 0f00 	cmp.w	fp, #0
 801b63e:	f340 8132 	ble.w	801b8a6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801b642:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b646:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b648:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b64c:	f1bb 0b01 	subs.w	fp, fp, #1
 801b650:	eeb0 6a62 	vmov.f32	s12, s5
 801b654:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b658:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b65c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b660:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b664:	eeb0 6a43 	vmov.f32	s12, s6
 801b668:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b66c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b670:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b674:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b678:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b67c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b680:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b684:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b688:	ee12 2a90 	vmov	r2, s5
 801b68c:	eef0 2a47 	vmov.f32	s5, s14
 801b690:	fb92 f3f3 	sdiv	r3, r2, r3
 801b694:	ee13 2a10 	vmov	r2, s6
 801b698:	9313      	str	r3, [sp, #76]	; 0x4c
 801b69a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b69c:	eeb0 3a67 	vmov.f32	s6, s15
 801b6a0:	fb92 f3f3 	sdiv	r3, r2, r3
 801b6a4:	9a03      	ldr	r2, [sp, #12]
 801b6a6:	9314      	str	r3, [sp, #80]	; 0x50
 801b6a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b6aa:	bf08      	it	eq
 801b6ac:	4613      	moveq	r3, r2
 801b6ae:	e789      	b.n	801b5c4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b6b0:	1405      	asrs	r5, r0, #16
 801b6b2:	d436      	bmi.n	801b722 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801b6b4:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801b6b8:	42aa      	cmp	r2, r5
 801b6ba:	dd32      	ble.n	801b722 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801b6bc:	140e      	asrs	r6, r1, #16
 801b6be:	d430      	bmi.n	801b722 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801b6c0:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801b6c4:	42b2      	cmp	r2, r6
 801b6c6:	dd2c      	ble.n	801b722 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801b6c8:	9a00      	ldr	r2, [sp, #0]
 801b6ca:	fb06 5502 	mla	r5, r6, r2, r5
 801b6ce:	9e01      	ldr	r6, [sp, #4]
 801b6d0:	086a      	lsrs	r2, r5, #1
 801b6d2:	5cb2      	ldrb	r2, [r6, r2]
 801b6d4:	07ee      	lsls	r6, r5, #31
 801b6d6:	bf54      	ite	pl
 801b6d8:	f002 020f 	andpl.w	r2, r2, #15
 801b6dc:	1112      	asrmi	r2, r2, #4
 801b6de:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b6e2:	b2d2      	uxtb	r2, r2
 801b6e4:	b1ea      	cbz	r2, 801b722 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801b6e6:	9d04      	ldr	r5, [sp, #16]
 801b6e8:	436a      	muls	r2, r5
 801b6ea:	1c55      	adds	r5, r2, #1
 801b6ec:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801b6f0:	4d6e      	ldr	r5, [pc, #440]	; (801b8ac <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801b6f2:	1212      	asrs	r2, r2, #8
 801b6f4:	682d      	ldr	r5, [r5, #0]
 801b6f6:	2aff      	cmp	r2, #255	; 0xff
 801b6f8:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801b6fc:	9605      	str	r6, [sp, #20]
 801b6fe:	d116      	bne.n	801b72e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801b700:	f06f 0201 	mvn.w	r2, #1
 801b704:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801b708:	fb02 fc07 	mul.w	ip, r2, r7
 801b70c:	096a      	lsrs	r2, r5, #5
 801b70e:	f026 0607 	bic.w	r6, r6, #7
 801b712:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801b716:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b71a:	4316      	orrs	r6, r2
 801b71c:	432e      	orrs	r6, r5
 801b71e:	f824 600c 	strh.w	r6, [r4, ip]
 801b722:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b724:	3f01      	subs	r7, #1
 801b726:	4410      	add	r0, r2
 801b728:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b72a:	4411      	add	r1, r2
 801b72c:	e77e      	b.n	801b62c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801b72e:	f06f 0601 	mvn.w	r6, #1
 801b732:	fa1f fa82 	uxth.w	sl, r2
 801b736:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801b73a:	43d2      	mvns	r2, r2
 801b73c:	437e      	muls	r6, r7
 801b73e:	b2ed      	uxtb	r5, r5
 801b740:	fb1c fc0a 	smulbb	ip, ip, sl
 801b744:	b2d2      	uxtb	r2, r2
 801b746:	f834 8006 	ldrh.w	r8, [r4, r6]
 801b74a:	fb15 f50a 	smulbb	r5, r5, sl
 801b74e:	9602      	str	r6, [sp, #8]
 801b750:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801b754:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801b758:	fb16 f60a 	smulbb	r6, r6, sl
 801b75c:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801b760:	fb0e ce02 	mla	lr, lr, r2, ip
 801b764:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801b768:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801b76c:	fa1f fe8e 	uxth.w	lr, lr
 801b770:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801b774:	fa5f f888 	uxtb.w	r8, r8
 801b778:	fb0c 6c02 	mla	ip, ip, r2, r6
 801b77c:	fb08 5502 	mla	r5, r8, r2, r5
 801b780:	f10e 0201 	add.w	r2, lr, #1
 801b784:	fa1f fc8c 	uxth.w	ip, ip
 801b788:	b2ad      	uxth	r5, r5
 801b78a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801b78e:	9a02      	ldr	r2, [sp, #8]
 801b790:	1c6e      	adds	r6, r5, #1
 801b792:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801b796:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801b79a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801b79e:	ea46 0e0e 	orr.w	lr, r6, lr
 801b7a2:	f10c 0601 	add.w	r6, ip, #1
 801b7a6:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801b7aa:	0976      	lsrs	r6, r6, #5
 801b7ac:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b7b0:	ea4e 0e06 	orr.w	lr, lr, r6
 801b7b4:	f824 e002 	strh.w	lr, [r4, r2]
 801b7b8:	e7b3      	b.n	801b722 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801b7ba:	f04f 0800 	mov.w	r8, #0
 801b7be:	eba3 0208 	sub.w	r2, r3, r8
 801b7c2:	2a00      	cmp	r2, #0
 801b7c4:	f77f af35 	ble.w	801b632 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801b7c8:	1402      	asrs	r2, r0, #16
 801b7ca:	9e00      	ldr	r6, [sp, #0]
 801b7cc:	140d      	asrs	r5, r1, #16
 801b7ce:	fb06 2505 	mla	r5, r6, r5, r2
 801b7d2:	9e01      	ldr	r6, [sp, #4]
 801b7d4:	086a      	lsrs	r2, r5, #1
 801b7d6:	07ed      	lsls	r5, r5, #31
 801b7d8:	5cb2      	ldrb	r2, [r6, r2]
 801b7da:	bf54      	ite	pl
 801b7dc:	f002 020f 	andpl.w	r2, r2, #15
 801b7e0:	1112      	asrmi	r2, r2, #4
 801b7e2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b7e6:	b2d2      	uxtb	r2, r2
 801b7e8:	b1c2      	cbz	r2, 801b81c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801b7ea:	9d04      	ldr	r5, [sp, #16]
 801b7ec:	436a      	muls	r2, r5
 801b7ee:	1c55      	adds	r5, r2, #1
 801b7f0:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801b7f4:	4d2d      	ldr	r5, [pc, #180]	; (801b8ac <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801b7f6:	1212      	asrs	r2, r2, #8
 801b7f8:	682e      	ldr	r6, [r5, #0]
 801b7fa:	2aff      	cmp	r2, #255	; 0xff
 801b7fc:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801b800:	d113      	bne.n	801b82a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801b802:	0972      	lsrs	r2, r6, #5
 801b804:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801b808:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801b80c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b810:	f025 0507 	bic.w	r5, r5, #7
 801b814:	4315      	orrs	r5, r2
 801b816:	4335      	orrs	r5, r6
 801b818:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801b81c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b81e:	f108 0801 	add.w	r8, r8, #1
 801b822:	4410      	add	r0, r2
 801b824:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b826:	4411      	add	r1, r2
 801b828:	e7c9      	b.n	801b7be <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801b82a:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801b82e:	fa1f fa82 	uxth.w	sl, r2
 801b832:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801b836:	43d2      	mvns	r2, r2
 801b838:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b83c:	fb17 f70a 	smulbb	r7, r7, sl
 801b840:	b2d2      	uxtb	r2, r2
 801b842:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b846:	b2f6      	uxtb	r6, r6
 801b848:	b2ed      	uxtb	r5, r5
 801b84a:	fb0c 7c02 	mla	ip, ip, r2, r7
 801b84e:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801b852:	fb16 f60a 	smulbb	r6, r6, sl
 801b856:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b85a:	fa1f fc8c 	uxth.w	ip, ip
 801b85e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b862:	fb15 f50a 	smulbb	r5, r5, sl
 801b866:	fa5f fe8e 	uxtb.w	lr, lr
 801b86a:	fb0e 6602 	mla	r6, lr, r2, r6
 801b86e:	fb07 5702 	mla	r7, r7, r2, r5
 801b872:	f10c 0201 	add.w	r2, ip, #1
 801b876:	b2b6      	uxth	r6, r6
 801b878:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801b87c:	1c75      	adds	r5, r6, #1
 801b87e:	b2bf      	uxth	r7, r7
 801b880:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b884:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801b888:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b88c:	ea45 0c0c 	orr.w	ip, r5, ip
 801b890:	1c7d      	adds	r5, r7, #1
 801b892:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801b896:	096d      	lsrs	r5, r5, #5
 801b898:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801b89c:	ea4c 0c05 	orr.w	ip, ip, r5
 801b8a0:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801b8a4:	e7ba      	b.n	801b81c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801b8a6:	b007      	add	sp, #28
 801b8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8ac:	2400b08c 	.word	0x2400b08c

0801b8b0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8b4:	b087      	sub	sp, #28
 801b8b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b8ba:	f8df 8308 	ldr.w	r8, [pc, #776]	; 801bbc4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801b8be:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b8c0:	9101      	str	r1, [sp, #4]
 801b8c2:	9205      	str	r2, [sp, #20]
 801b8c4:	6841      	ldr	r1, [r0, #4]
 801b8c6:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801b8ca:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801b8ce:	fb01 2404 	mla	r4, r1, r4, r2
 801b8d2:	6802      	ldr	r2, [r0, #0]
 801b8d4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b8d8:	f8db 2008 	ldr.w	r2, [fp, #8]
 801b8dc:	3201      	adds	r2, #1
 801b8de:	f022 0201 	bic.w	r2, r2, #1
 801b8e2:	9202      	str	r2, [sp, #8]
 801b8e4:	f8db 2000 	ldr.w	r2, [fp]
 801b8e8:	9203      	str	r2, [sp, #12]
 801b8ea:	9a01      	ldr	r2, [sp, #4]
 801b8ec:	2a00      	cmp	r2, #0
 801b8ee:	dc03      	bgt.n	801b8f8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801b8f0:	9a05      	ldr	r2, [sp, #20]
 801b8f2:	2a00      	cmp	r2, #0
 801b8f4:	f340 8162 	ble.w	801bbbc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801b8f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b8fa:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801b8fe:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b902:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b904:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801b908:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	dd0e      	ble.n	801b92e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b910:	1402      	asrs	r2, r0, #16
 801b912:	d405      	bmi.n	801b920 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b914:	42ba      	cmp	r2, r7
 801b916:	da03      	bge.n	801b920 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b918:	140a      	asrs	r2, r1, #16
 801b91a:	d401      	bmi.n	801b920 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b91c:	42b2      	cmp	r2, r6
 801b91e:	db07      	blt.n	801b930 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801b920:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b922:	3b01      	subs	r3, #1
 801b924:	3402      	adds	r4, #2
 801b926:	4410      	add	r0, r2
 801b928:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b92a:	4411      	add	r1, r2
 801b92c:	e7ee      	b.n	801b90c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b92e:	d017      	beq.n	801b960 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801b930:	1e5a      	subs	r2, r3, #1
 801b932:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b934:	fb05 0502 	mla	r5, r5, r2, r0
 801b938:	142d      	asrs	r5, r5, #16
 801b93a:	d409      	bmi.n	801b950 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b93c:	42bd      	cmp	r5, r7
 801b93e:	da07      	bge.n	801b950 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b940:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b942:	fb05 1202 	mla	r2, r5, r2, r1
 801b946:	1412      	asrs	r2, r2, #16
 801b948:	d402      	bmi.n	801b950 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b94a:	42b2      	cmp	r2, r6
 801b94c:	f2c0 80c3 	blt.w	801bad6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801b950:	2500      	movs	r5, #0
 801b952:	195a      	adds	r2, r3, r5
 801b954:	2a00      	cmp	r2, #0
 801b956:	dc3f      	bgt.n	801b9d8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801b958:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b95c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b960:	9b01      	ldr	r3, [sp, #4]
 801b962:	2b00      	cmp	r3, #0
 801b964:	f340 812a 	ble.w	801bbbc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801b968:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b96c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b96e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b972:	eeb0 6a62 	vmov.f32	s12, s5
 801b976:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b97a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b97e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b982:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b986:	eeb0 6a43 	vmov.f32	s12, s6
 801b98a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b98e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b992:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b996:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b99a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b99e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b9a2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b9a6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b9aa:	ee12 2a90 	vmov	r2, s5
 801b9ae:	eef0 2a47 	vmov.f32	s5, s14
 801b9b2:	fb92 f3f3 	sdiv	r3, r2, r3
 801b9b6:	ee13 2a10 	vmov	r2, s6
 801b9ba:	9313      	str	r3, [sp, #76]	; 0x4c
 801b9bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b9be:	eeb0 3a67 	vmov.f32	s6, s15
 801b9c2:	fb92 f3f3 	sdiv	r3, r2, r3
 801b9c6:	9314      	str	r3, [sp, #80]	; 0x50
 801b9c8:	9b01      	ldr	r3, [sp, #4]
 801b9ca:	9a05      	ldr	r2, [sp, #20]
 801b9cc:	3b01      	subs	r3, #1
 801b9ce:	9301      	str	r3, [sp, #4]
 801b9d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b9d2:	bf08      	it	eq
 801b9d4:	4613      	moveq	r3, r2
 801b9d6:	e788      	b.n	801b8ea <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801b9d8:	1406      	asrs	r6, r0, #16
 801b9da:	d42c      	bmi.n	801ba36 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b9dc:	f8db 2008 	ldr.w	r2, [fp, #8]
 801b9e0:	42b2      	cmp	r2, r6
 801b9e2:	dd28      	ble.n	801ba36 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b9e4:	140f      	asrs	r7, r1, #16
 801b9e6:	d426      	bmi.n	801ba36 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b9e8:	f8db 200c 	ldr.w	r2, [fp, #12]
 801b9ec:	42ba      	cmp	r2, r7
 801b9ee:	dd22      	ble.n	801ba36 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b9f0:	9a02      	ldr	r2, [sp, #8]
 801b9f2:	fb07 6602 	mla	r6, r7, r2, r6
 801b9f6:	9f03      	ldr	r7, [sp, #12]
 801b9f8:	0872      	lsrs	r2, r6, #1
 801b9fa:	07f6      	lsls	r6, r6, #31
 801b9fc:	5cba      	ldrb	r2, [r7, r2]
 801b9fe:	bf54      	ite	pl
 801ba00:	f002 020f 	andpl.w	r2, r2, #15
 801ba04:	1112      	asrmi	r2, r2, #4
 801ba06:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ba0a:	b2d2      	uxtb	r2, r2
 801ba0c:	2aff      	cmp	r2, #255	; 0xff
 801ba0e:	d118      	bne.n	801ba42 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801ba10:	f06f 0601 	mvn.w	r6, #1
 801ba14:	f8d8 2000 	ldr.w	r2, [r8]
 801ba18:	fb06 f705 	mul.w	r7, r6, r5
 801ba1c:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 801ba20:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801ba24:	0956      	lsrs	r6, r2, #5
 801ba26:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801ba2a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ba2e:	ea4c 0606 	orr.w	r6, ip, r6
 801ba32:	4316      	orrs	r6, r2
 801ba34:	53e6      	strh	r6, [r4, r7]
 801ba36:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ba38:	3d01      	subs	r5, #1
 801ba3a:	4410      	add	r0, r2
 801ba3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ba3e:	4411      	add	r1, r2
 801ba40:	e787      	b.n	801b952 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ba42:	2a00      	cmp	r2, #0
 801ba44:	d0f7      	beq.n	801ba36 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ba46:	f06f 0601 	mvn.w	r6, #1
 801ba4a:	f8d8 c000 	ldr.w	ip, [r8]
 801ba4e:	fa1f f982 	uxth.w	r9, r2
 801ba52:	43d2      	mvns	r2, r2
 801ba54:	436e      	muls	r6, r5
 801ba56:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801ba5a:	b2d2      	uxtb	r2, r2
 801ba5c:	f834 e006 	ldrh.w	lr, [r4, r6]
 801ba60:	fb1a fa09 	smulbb	sl, sl, r9
 801ba64:	9604      	str	r6, [sp, #16]
 801ba66:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801ba6a:	ea4f 272e 	mov.w	r7, lr, asr #8
 801ba6e:	fb16 f609 	smulbb	r6, r6, r9
 801ba72:	fa5f fc8c 	uxtb.w	ip, ip
 801ba76:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ba7a:	fb1c fc09 	smulbb	ip, ip, r9
 801ba7e:	fb07 6702 	mla	r7, r7, r2, r6
 801ba82:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801ba86:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ba8a:	b2bf      	uxth	r7, r7
 801ba8c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ba90:	fa5f fe8e 	uxtb.w	lr, lr
 801ba94:	fb06 a602 	mla	r6, r6, r2, sl
 801ba98:	fb0e cc02 	mla	ip, lr, r2, ip
 801ba9c:	1c7a      	adds	r2, r7, #1
 801ba9e:	b2b6      	uxth	r6, r6
 801baa0:	fa1f fc8c 	uxth.w	ip, ip
 801baa4:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801baa8:	9a04      	ldr	r2, [sp, #16]
 801baaa:	f10c 0a01 	add.w	sl, ip, #1
 801baae:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801bab2:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801bab6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801baba:	ea4a 0707 	orr.w	r7, sl, r7
 801babe:	f106 0a01 	add.w	sl, r6, #1
 801bac2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801bac6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801baca:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801bace:	ea47 070a 	orr.w	r7, r7, sl
 801bad2:	52a7      	strh	r7, [r4, r2]
 801bad4:	e7af      	b.n	801ba36 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801bad6:	f04f 0e00 	mov.w	lr, #0
 801bada:	eba3 020e 	sub.w	r2, r3, lr
 801bade:	2a00      	cmp	r2, #0
 801bae0:	f77f af3a 	ble.w	801b958 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801bae4:	1402      	asrs	r2, r0, #16
 801bae6:	9e02      	ldr	r6, [sp, #8]
 801bae8:	140d      	asrs	r5, r1, #16
 801baea:	fb06 2505 	mla	r5, r6, r5, r2
 801baee:	9e03      	ldr	r6, [sp, #12]
 801baf0:	086a      	lsrs	r2, r5, #1
 801baf2:	07ed      	lsls	r5, r5, #31
 801baf4:	5cb2      	ldrb	r2, [r6, r2]
 801baf6:	bf54      	ite	pl
 801baf8:	f002 020f 	andpl.w	r2, r2, #15
 801bafc:	1112      	asrmi	r2, r2, #4
 801bafe:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bb02:	b2d2      	uxtb	r2, r2
 801bb04:	2aff      	cmp	r2, #255	; 0xff
 801bb06:	d115      	bne.n	801bb34 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801bb08:	f8d8 5000 	ldr.w	r5, [r8]
 801bb0c:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 801bb10:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801bb14:	096a      	lsrs	r2, r5, #5
 801bb16:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801bb1a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801bb1e:	4332      	orrs	r2, r6
 801bb20:	432a      	orrs	r2, r5
 801bb22:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801bb26:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bb28:	f10e 0e01 	add.w	lr, lr, #1
 801bb2c:	4410      	add	r0, r2
 801bb2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bb30:	4411      	add	r1, r2
 801bb32:	e7d2      	b.n	801bada <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801bb34:	2a00      	cmp	r2, #0
 801bb36:	d0f6      	beq.n	801bb26 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801bb38:	f8d8 7000 	ldr.w	r7, [r8]
 801bb3c:	fa1f f982 	uxth.w	r9, r2
 801bb40:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801bb44:	43d2      	mvns	r2, r2
 801bb46:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801bb4a:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801bb4e:	ea4f 262c 	mov.w	r6, ip, asr #8
 801bb52:	fb15 f509 	smulbb	r5, r5, r9
 801bb56:	b2d2      	uxtb	r2, r2
 801bb58:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801bb5c:	b2ff      	uxtb	r7, r7
 801bb5e:	fb1a fa09 	smulbb	sl, sl, r9
 801bb62:	fb06 5602 	mla	r6, r6, r2, r5
 801bb66:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801bb6a:	fb17 f709 	smulbb	r7, r7, r9
 801bb6e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801bb72:	b2b6      	uxth	r6, r6
 801bb74:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801bb78:	fa5f fc8c 	uxtb.w	ip, ip
 801bb7c:	fb05 a502 	mla	r5, r5, r2, sl
 801bb80:	fb0c 7702 	mla	r7, ip, r2, r7
 801bb84:	1c72      	adds	r2, r6, #1
 801bb86:	b2ad      	uxth	r5, r5
 801bb88:	b2bf      	uxth	r7, r7
 801bb8a:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801bb8e:	f107 0a01 	add.w	sl, r7, #1
 801bb92:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801bb96:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801bb9a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801bb9e:	ea4a 0606 	orr.w	r6, sl, r6
 801bba2:	f105 0a01 	add.w	sl, r5, #1
 801bba6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801bbaa:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801bbae:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801bbb2:	ea46 060a 	orr.w	r6, r6, sl
 801bbb6:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801bbba:	e7b4      	b.n	801bb26 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801bbbc:	b007      	add	sp, #28
 801bbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbc2:	bf00      	nop
 801bbc4:	2400b08c 	.word	0x2400b08c

0801bbc8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801bbc8:	4770      	bx	lr

0801bbca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801bbca:	4770      	bx	lr

0801bbcc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801bbcc:	4770      	bx	lr

0801bbce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801bbce:	4770      	bx	lr

0801bbd0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801bbd0:	4770      	bx	lr

0801bbd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801bbd2:	4770      	bx	lr

0801bbd4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801bbd4:	4770      	bx	lr

0801bbd6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801bbd6:	4770      	bx	lr

0801bbd8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801bbd8:	4770      	bx	lr

0801bbda <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801bbda:	4770      	bx	lr

0801bbdc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801bbdc:	4770      	bx	lr

0801bbde <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801bbde:	4770      	bx	lr

0801bbe0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801bbe0:	4770      	bx	lr

0801bbe2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801bbe2:	4770      	bx	lr

0801bbe4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801bbe4:	4770      	bx	lr

0801bbe6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801bbe6:	4770      	bx	lr

0801bbe8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801bbe8:	4770      	bx	lr

0801bbea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801bbea:	4770      	bx	lr

0801bbec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801bbec:	4770      	bx	lr

0801bbee <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801bbee:	4770      	bx	lr

0801bbf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801bbf0:	4770      	bx	lr

0801bbf2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801bbf2:	4770      	bx	lr

0801bbf4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801bbf4:	4770      	bx	lr

0801bbf6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801bbf6:	4770      	bx	lr

0801bbf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801bbf8:	4770      	bx	lr

0801bbfa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801bbfa:	4770      	bx	lr

0801bbfc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801bbfc:	4770      	bx	lr

0801bbfe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801bbfe:	4770      	bx	lr

0801bc00 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801bc00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bc04:	b088      	sub	sp, #32
 801bc06:	4606      	mov	r6, r0
 801bc08:	4688      	mov	r8, r1
 801bc0a:	4691      	mov	r9, r2
 801bc0c:	ac08      	add	r4, sp, #32
 801bc0e:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801bc12:	4620      	mov	r0, r4
 801bc14:	f7fd fc66 	bl	80194e4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801bc18:	6833      	ldr	r3, [r6, #0]
 801bc1a:	4605      	mov	r5, r0
 801bc1c:	4620      	mov	r0, r4
 801bc1e:	699f      	ldr	r7, [r3, #24]
 801bc20:	f7fd fb74 	bl	801930c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801bc24:	4682      	mov	sl, r0
 801bc26:	4620      	mov	r0, r4
 801bc28:	f7fd fba4 	bl	8019374 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801bc2c:	9500      	str	r5, [sp, #0]
 801bc2e:	464b      	mov	r3, r9
 801bc30:	4642      	mov	r2, r8
 801bc32:	4631      	mov	r1, r6
 801bc34:	e9cd a001 	strd	sl, r0, [sp, #4]
 801bc38:	a806      	add	r0, sp, #24
 801bc3a:	47b8      	blx	r7
 801bc3c:	4628      	mov	r0, r5
 801bc3e:	b008      	add	sp, #32
 801bc40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801bc44 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801bc44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bc48:	2300      	movs	r3, #0
 801bc4a:	9300      	str	r3, [sp, #0]
 801bc4c:	4b3d      	ldr	r3, [pc, #244]	; (801bd44 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801bc4e:	781b      	ldrb	r3, [r3, #0]
 801bc50:	2b00      	cmp	r3, #0
 801bc52:	d137      	bne.n	801bcc4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801bc54:	4a3c      	ldr	r2, [pc, #240]	; (801bd48 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801bc56:	f9b2 2000 	ldrsh.w	r2, [r2]
 801bc5a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801bc5e:	2b00      	cmp	r3, #0
 801bc60:	d132      	bne.n	801bcc8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801bc62:	4b3a      	ldr	r3, [pc, #232]	; (801bd4c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801bc64:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bc68:	ac02      	add	r4, sp, #8
 801bc6a:	6808      	ldr	r0, [r1, #0]
 801bc6c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bc70:	ab02      	add	r3, sp, #8
 801bc72:	6849      	ldr	r1, [r1, #4]
 801bc74:	4d36      	ldr	r5, [pc, #216]	; (801bd50 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801bc76:	c303      	stmia	r3!, {r0, r1}
 801bc78:	4669      	mov	r1, sp
 801bc7a:	4620      	mov	r0, r4
 801bc7c:	f7fa f9fe 	bl	801607c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bc80:	4668      	mov	r0, sp
 801bc82:	f7fa f9d3 	bl	801602c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bc86:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801bc8a:	f8bd 2000 	ldrh.w	r2, [sp]
 801bc8e:	462f      	mov	r7, r5
 801bc90:	6828      	ldr	r0, [r5, #0]
 801bc92:	4413      	add	r3, r2
 801bc94:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801bc98:	f8ad 3008 	strh.w	r3, [sp, #8]
 801bc9c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801bca0:	4413      	add	r3, r2
 801bca2:	f8ad 300a 	strh.w	r3, [sp, #10]
 801bca6:	6803      	ldr	r3, [r0, #0]
 801bca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bcaa:	4798      	blx	r3
 801bcac:	f010 0f01 	tst.w	r0, #1
 801bcb0:	d00c      	beq.n	801bccc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801bcb2:	6828      	ldr	r0, [r5, #0]
 801bcb4:	6803      	ldr	r3, [r0, #0]
 801bcb6:	e894 0006 	ldmia.w	r4, {r1, r2}
 801bcba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801bcbc:	4798      	blx	r3
 801bcbe:	b004      	add	sp, #16
 801bcc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bcc4:	4a21      	ldr	r2, [pc, #132]	; (801bd4c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801bcc6:	e7c6      	b.n	801bc56 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801bcc8:	4b1f      	ldr	r3, [pc, #124]	; (801bd48 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801bcca:	e7cb      	b.n	801bc64 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801bccc:	6838      	ldr	r0, [r7, #0]
 801bcce:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801bcd2:	6803      	ldr	r3, [r0, #0]
 801bcd4:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801bcd8:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801bcdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bcde:	4798      	blx	r3
 801bce0:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801bce4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801bce8:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801bcec:	fb16 3602 	smlabb	r6, r6, r2, r3
 801bcf0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801bcf4:	6838      	ldr	r0, [r7, #0]
 801bcf6:	6803      	ldr	r3, [r0, #0]
 801bcf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bcfa:	4798      	blx	r3
 801bcfc:	4a12      	ldr	r2, [pc, #72]	; (801bd48 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801bcfe:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801bd02:	8813      	ldrh	r3, [r2, #0]
 801bd04:	4691      	mov	r9, r2
 801bd06:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801bd0a:	435d      	muls	r5, r3
 801bd0c:	fb03 1404 	mla	r4, r3, r4, r1
 801bd10:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801bd14:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801bd18:	6838      	ldr	r0, [r7, #0]
 801bd1a:	42ac      	cmp	r4, r5
 801bd1c:	6803      	ldr	r3, [r0, #0]
 801bd1e:	d20e      	bcs.n	801bd3e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801bd20:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 801bd24:	4632      	mov	r2, r6
 801bd26:	4643      	mov	r3, r8
 801bd28:	4621      	mov	r1, r4
 801bd2a:	47d0      	blx	sl
 801bd2c:	f8b9 3000 	ldrh.w	r3, [r9]
 801bd30:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bd34:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801bd38:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801bd3c:	e7ec      	b.n	801bd18 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801bd3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bd40:	4798      	blx	r3
 801bd42:	e7bc      	b.n	801bcbe <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801bd44:	2400b07c 	.word	0x2400b07c
 801bd48:	2400b07e 	.word	0x2400b07e
 801bd4c:	2400b080 	.word	0x2400b080
 801bd50:	2400b084 	.word	0x2400b084

0801bd54 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801bd54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd58:	b08b      	sub	sp, #44	; 0x2c
 801bd5a:	460f      	mov	r7, r1
 801bd5c:	4616      	mov	r6, r2
 801bd5e:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801bd62:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801bd66:	f1bb 0f00 	cmp.w	fp, #0
 801bd6a:	d049      	beq.n	801be00 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801bd6c:	6810      	ldr	r0, [r2, #0]
 801bd6e:	ad06      	add	r5, sp, #24
 801bd70:	6851      	ldr	r1, [r2, #4]
 801bd72:	c503      	stmia	r5!, {r0, r1}
 801bd74:	6818      	ldr	r0, [r3, #0]
 801bd76:	ad08      	add	r5, sp, #32
 801bd78:	6859      	ldr	r1, [r3, #4]
 801bd7a:	c503      	stmia	r5!, {r0, r1}
 801bd7c:	a806      	add	r0, sp, #24
 801bd7e:	f7fa f955 	bl	801602c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bd82:	4631      	mov	r1, r6
 801bd84:	a808      	add	r0, sp, #32
 801bd86:	f7fa f979 	bl	801607c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bd8a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801bd8e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801bd92:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801bd96:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801bd9a:	fb16 2103 	smlabb	r1, r6, r3, r2
 801bd9e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801bda2:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801bda6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801bdaa:	4f5f      	ldr	r7, [pc, #380]	; (801bf28 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801bdac:	440a      	add	r2, r1
 801bdae:	6838      	ldr	r0, [r7, #0]
 801bdb0:	46b9      	mov	r9, r7
 801bdb2:	f8ad 2020 	strh.w	r2, [sp, #32]
 801bdb6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801bdba:	4413      	add	r3, r2
 801bdbc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801bdc0:	6803      	ldr	r3, [r0, #0]
 801bdc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bdc4:	4798      	blx	r3
 801bdc6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801bdca:	d01c      	beq.n	801be06 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801bdcc:	f010 0f04 	tst.w	r0, #4
 801bdd0:	d01d      	beq.n	801be0e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801bdd2:	f8d9 0000 	ldr.w	r0, [r9]
 801bdd6:	2700      	movs	r7, #0
 801bdd8:	b2ad      	uxth	r5, r5
 801bdda:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801bdde:	6801      	ldr	r1, [r0, #0]
 801bde0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801bde4:	f8cd b00c 	str.w	fp, [sp, #12]
 801bde8:	9501      	str	r5, [sp, #4]
 801bdea:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801bdee:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801bdf2:	9402      	str	r4, [sp, #8]
 801bdf4:	fa1f f488 	uxth.w	r4, r8
 801bdf8:	9400      	str	r4, [sp, #0]
 801bdfa:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801bdfc:	4631      	mov	r1, r6
 801bdfe:	47a0      	blx	r4
 801be00:	b00b      	add	sp, #44	; 0x2c
 801be02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be06:	b914      	cbnz	r4, 801be0e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801be08:	f010 0f01 	tst.w	r0, #1
 801be0c:	e7e0      	b.n	801bdd0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801be0e:	f8d9 0000 	ldr.w	r0, [r9]
 801be12:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801be16:	6803      	ldr	r3, [r0, #0]
 801be18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801be1a:	4798      	blx	r3
 801be1c:	4b43      	ldr	r3, [pc, #268]	; (801bf2c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801be1e:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801be22:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801be26:	881a      	ldrh	r2, [r3, #0]
 801be28:	469a      	mov	sl, r3
 801be2a:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801be2e:	fb05 f502 	mul.w	r5, r5, r2
 801be32:	fb02 1404 	mla	r4, r2, r4, r1
 801be36:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801be3a:	d059      	beq.n	801bef0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801be3c:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801be40:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801be44:	fa1f f28b 	uxth.w	r2, fp
 801be48:	469e      	mov	lr, r3
 801be4a:	fa1f f989 	uxth.w	r9, r9
 801be4e:	42ac      	cmp	r4, r5
 801be50:	d264      	bcs.n	801bf1c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801be52:	eb04 0a07 	add.w	sl, r4, r7
 801be56:	4554      	cmp	r4, sl
 801be58:	d23d      	bcs.n	801bed6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801be5a:	8821      	ldrh	r1, [r4, #0]
 801be5c:	f836 3b02 	ldrh.w	r3, [r6], #2
 801be60:	1208      	asrs	r0, r1, #8
 801be62:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801be66:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801be6a:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801be6e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801be72:	00c9      	lsls	r1, r1, #3
 801be74:	fb10 f009 	smulbb	r0, r0, r9
 801be78:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801be7c:	b2c9      	uxtb	r1, r1
 801be7e:	fb0c 0c02 	mla	ip, ip, r2, r0
 801be82:	10d8      	asrs	r0, r3, #3
 801be84:	fb1b fb09 	smulbb	fp, fp, r9
 801be88:	00db      	lsls	r3, r3, #3
 801be8a:	fa1f fc8c 	uxth.w	ip, ip
 801be8e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801be92:	fb11 f109 	smulbb	r1, r1, r9
 801be96:	b2db      	uxtb	r3, r3
 801be98:	fb00 b002 	mla	r0, r0, r2, fp
 801be9c:	f10c 0b01 	add.w	fp, ip, #1
 801bea0:	fb03 1302 	mla	r3, r3, r2, r1
 801bea4:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bea8:	b29b      	uxth	r3, r3
 801beaa:	b280      	uxth	r0, r0
 801beac:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801beb0:	f103 0c01 	add.w	ip, r3, #1
 801beb4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801beb8:	1c43      	adds	r3, r0, #1
 801beba:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801bebe:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801bec2:	0940      	lsrs	r0, r0, #5
 801bec4:	ea4c 0c0b 	orr.w	ip, ip, fp
 801bec8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801becc:	ea4c 0c00 	orr.w	ip, ip, r0
 801bed0:	f824 cb02 	strh.w	ip, [r4], #2
 801bed4:	e7bf      	b.n	801be56 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801bed6:	f8be 3000 	ldrh.w	r3, [lr]
 801beda:	eba3 0308 	sub.w	r3, r3, r8
 801bede:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bee2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801bee6:	eba3 0308 	sub.w	r3, r3, r8
 801beea:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801beee:	e7ae      	b.n	801be4e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801bef0:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801bef4:	f8d9 0000 	ldr.w	r0, [r9]
 801bef8:	42ac      	cmp	r4, r5
 801befa:	6803      	ldr	r3, [r0, #0]
 801befc:	d20e      	bcs.n	801bf1c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801befe:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801bf02:	4632      	mov	r2, r6
 801bf04:	463b      	mov	r3, r7
 801bf06:	4621      	mov	r1, r4
 801bf08:	47c0      	blx	r8
 801bf0a:	f8ba 3000 	ldrh.w	r3, [sl]
 801bf0e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bf12:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801bf16:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801bf1a:	e7eb      	b.n	801bef4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801bf1c:	4b02      	ldr	r3, [pc, #8]	; (801bf28 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801bf1e:	6818      	ldr	r0, [r3, #0]
 801bf20:	6803      	ldr	r3, [r0, #0]
 801bf22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bf24:	4798      	blx	r3
 801bf26:	e76b      	b.n	801be00 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801bf28:	2400b084 	.word	0x2400b084
 801bf2c:	2400b07e 	.word	0x2400b07e

0801bf30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801bf30:	b510      	push	{r4, lr}
 801bf32:	4604      	mov	r4, r0
 801bf34:	2104      	movs	r1, #4
 801bf36:	f008 ffc2 	bl	8024ebe <_ZdlPvj>
 801bf3a:	4620      	mov	r0, r4
 801bf3c:	bd10      	pop	{r4, pc}

0801bf3e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801bf3e:	b510      	push	{r4, lr}
 801bf40:	4604      	mov	r4, r0
 801bf42:	2104      	movs	r1, #4
 801bf44:	f008 ffbb 	bl	8024ebe <_ZdlPvj>
 801bf48:	4620      	mov	r0, r4
 801bf4a:	bd10      	pop	{r4, pc}

0801bf4c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801bf4c:	b510      	push	{r4, lr}
 801bf4e:	4604      	mov	r4, r0
 801bf50:	2104      	movs	r1, #4
 801bf52:	f008 ffb4 	bl	8024ebe <_ZdlPvj>
 801bf56:	4620      	mov	r0, r4
 801bf58:	bd10      	pop	{r4, pc}

0801bf5a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801bf5a:	b510      	push	{r4, lr}
 801bf5c:	4604      	mov	r4, r0
 801bf5e:	2104      	movs	r1, #4
 801bf60:	f008 ffad 	bl	8024ebe <_ZdlPvj>
 801bf64:	4620      	mov	r0, r4
 801bf66:	bd10      	pop	{r4, pc}

0801bf68 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801bf68:	b510      	push	{r4, lr}
 801bf6a:	4604      	mov	r4, r0
 801bf6c:	2104      	movs	r1, #4
 801bf6e:	f008 ffa6 	bl	8024ebe <_ZdlPvj>
 801bf72:	4620      	mov	r0, r4
 801bf74:	bd10      	pop	{r4, pc}

0801bf76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801bf76:	b510      	push	{r4, lr}
 801bf78:	4604      	mov	r4, r0
 801bf7a:	2104      	movs	r1, #4
 801bf7c:	f008 ff9f 	bl	8024ebe <_ZdlPvj>
 801bf80:	4620      	mov	r0, r4
 801bf82:	bd10      	pop	{r4, pc}

0801bf84 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801bf84:	b510      	push	{r4, lr}
 801bf86:	4604      	mov	r4, r0
 801bf88:	2104      	movs	r1, #4
 801bf8a:	f008 ff98 	bl	8024ebe <_ZdlPvj>
 801bf8e:	4620      	mov	r0, r4
 801bf90:	bd10      	pop	{r4, pc}

0801bf92 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801bf92:	b510      	push	{r4, lr}
 801bf94:	4604      	mov	r4, r0
 801bf96:	2104      	movs	r1, #4
 801bf98:	f008 ff91 	bl	8024ebe <_ZdlPvj>
 801bf9c:	4620      	mov	r0, r4
 801bf9e:	bd10      	pop	{r4, pc}

0801bfa0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801bfa0:	b510      	push	{r4, lr}
 801bfa2:	4604      	mov	r4, r0
 801bfa4:	2104      	movs	r1, #4
 801bfa6:	f008 ff8a 	bl	8024ebe <_ZdlPvj>
 801bfaa:	4620      	mov	r0, r4
 801bfac:	bd10      	pop	{r4, pc}

0801bfae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801bfae:	b510      	push	{r4, lr}
 801bfb0:	4604      	mov	r4, r0
 801bfb2:	2104      	movs	r1, #4
 801bfb4:	f008 ff83 	bl	8024ebe <_ZdlPvj>
 801bfb8:	4620      	mov	r0, r4
 801bfba:	bd10      	pop	{r4, pc}

0801bfbc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801bfbc:	b510      	push	{r4, lr}
 801bfbe:	4604      	mov	r4, r0
 801bfc0:	2104      	movs	r1, #4
 801bfc2:	f008 ff7c 	bl	8024ebe <_ZdlPvj>
 801bfc6:	4620      	mov	r0, r4
 801bfc8:	bd10      	pop	{r4, pc}

0801bfca <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801bfca:	b510      	push	{r4, lr}
 801bfcc:	4604      	mov	r4, r0
 801bfce:	2104      	movs	r1, #4
 801bfd0:	f008 ff75 	bl	8024ebe <_ZdlPvj>
 801bfd4:	4620      	mov	r0, r4
 801bfd6:	bd10      	pop	{r4, pc}

0801bfd8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801bfd8:	b510      	push	{r4, lr}
 801bfda:	4604      	mov	r4, r0
 801bfdc:	2104      	movs	r1, #4
 801bfde:	f008 ff6e 	bl	8024ebe <_ZdlPvj>
 801bfe2:	4620      	mov	r0, r4
 801bfe4:	bd10      	pop	{r4, pc}

0801bfe6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801bfe6:	b510      	push	{r4, lr}
 801bfe8:	4604      	mov	r4, r0
 801bfea:	2104      	movs	r1, #4
 801bfec:	f008 ff67 	bl	8024ebe <_ZdlPvj>
 801bff0:	4620      	mov	r0, r4
 801bff2:	bd10      	pop	{r4, pc}

0801bff4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801bff4:	b510      	push	{r4, lr}
 801bff6:	4604      	mov	r4, r0
 801bff8:	2104      	movs	r1, #4
 801bffa:	f008 ff60 	bl	8024ebe <_ZdlPvj>
 801bffe:	4620      	mov	r0, r4
 801c000:	bd10      	pop	{r4, pc}

0801c002 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c002:	b510      	push	{r4, lr}
 801c004:	4604      	mov	r4, r0
 801c006:	2104      	movs	r1, #4
 801c008:	f008 ff59 	bl	8024ebe <_ZdlPvj>
 801c00c:	4620      	mov	r0, r4
 801c00e:	bd10      	pop	{r4, pc}

0801c010 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c010:	b510      	push	{r4, lr}
 801c012:	4604      	mov	r4, r0
 801c014:	2104      	movs	r1, #4
 801c016:	f008 ff52 	bl	8024ebe <_ZdlPvj>
 801c01a:	4620      	mov	r0, r4
 801c01c:	bd10      	pop	{r4, pc}

0801c01e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801c01e:	b510      	push	{r4, lr}
 801c020:	4604      	mov	r4, r0
 801c022:	2104      	movs	r1, #4
 801c024:	f008 ff4b 	bl	8024ebe <_ZdlPvj>
 801c028:	4620      	mov	r0, r4
 801c02a:	bd10      	pop	{r4, pc}

0801c02c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c02c:	b510      	push	{r4, lr}
 801c02e:	4604      	mov	r4, r0
 801c030:	2104      	movs	r1, #4
 801c032:	f008 ff44 	bl	8024ebe <_ZdlPvj>
 801c036:	4620      	mov	r0, r4
 801c038:	bd10      	pop	{r4, pc}

0801c03a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c03a:	b510      	push	{r4, lr}
 801c03c:	4604      	mov	r4, r0
 801c03e:	2104      	movs	r1, #4
 801c040:	f008 ff3d 	bl	8024ebe <_ZdlPvj>
 801c044:	4620      	mov	r0, r4
 801c046:	bd10      	pop	{r4, pc}

0801c048 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c048:	b510      	push	{r4, lr}
 801c04a:	4604      	mov	r4, r0
 801c04c:	2104      	movs	r1, #4
 801c04e:	f008 ff36 	bl	8024ebe <_ZdlPvj>
 801c052:	4620      	mov	r0, r4
 801c054:	bd10      	pop	{r4, pc}

0801c056 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c056:	b510      	push	{r4, lr}
 801c058:	4604      	mov	r4, r0
 801c05a:	2104      	movs	r1, #4
 801c05c:	f008 ff2f 	bl	8024ebe <_ZdlPvj>
 801c060:	4620      	mov	r0, r4
 801c062:	bd10      	pop	{r4, pc}

0801c064 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c064:	b510      	push	{r4, lr}
 801c066:	4604      	mov	r4, r0
 801c068:	2104      	movs	r1, #4
 801c06a:	f008 ff28 	bl	8024ebe <_ZdlPvj>
 801c06e:	4620      	mov	r0, r4
 801c070:	bd10      	pop	{r4, pc}

0801c072 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c072:	b510      	push	{r4, lr}
 801c074:	4604      	mov	r4, r0
 801c076:	2104      	movs	r1, #4
 801c078:	f008 ff21 	bl	8024ebe <_ZdlPvj>
 801c07c:	4620      	mov	r0, r4
 801c07e:	bd10      	pop	{r4, pc}

0801c080 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801c080:	b510      	push	{r4, lr}
 801c082:	4604      	mov	r4, r0
 801c084:	2104      	movs	r1, #4
 801c086:	f008 ff1a 	bl	8024ebe <_ZdlPvj>
 801c08a:	4620      	mov	r0, r4
 801c08c:	bd10      	pop	{r4, pc}

0801c08e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801c08e:	b510      	push	{r4, lr}
 801c090:	4604      	mov	r4, r0
 801c092:	2104      	movs	r1, #4
 801c094:	f008 ff13 	bl	8024ebe <_ZdlPvj>
 801c098:	4620      	mov	r0, r4
 801c09a:	bd10      	pop	{r4, pc}

0801c09c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801c09c:	b510      	push	{r4, lr}
 801c09e:	4604      	mov	r4, r0
 801c0a0:	2104      	movs	r1, #4
 801c0a2:	f008 ff0c 	bl	8024ebe <_ZdlPvj>
 801c0a6:	4620      	mov	r0, r4
 801c0a8:	bd10      	pop	{r4, pc}

0801c0aa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801c0aa:	b510      	push	{r4, lr}
 801c0ac:	4604      	mov	r4, r0
 801c0ae:	2104      	movs	r1, #4
 801c0b0:	f008 ff05 	bl	8024ebe <_ZdlPvj>
 801c0b4:	4620      	mov	r0, r4
 801c0b6:	bd10      	pop	{r4, pc}

0801c0b8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801c0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0bc:	b091      	sub	sp, #68	; 0x44
 801c0be:	469b      	mov	fp, r3
 801c0c0:	4616      	mov	r6, r2
 801c0c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c0c6:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801c0ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c0ce:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 801c0d2:	4604      	mov	r4, r0
 801c0d4:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801c0d8:	4640      	mov	r0, r8
 801c0da:	460d      	mov	r5, r1
 801c0dc:	4659      	mov	r1, fp
 801c0de:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801c0e2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801c0e6:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 801c0ea:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 801c0ee:	f7f6 ff2f 	bl	8012f50 <_ZN8touchgfx4RectaNERKS0_>
 801c0f2:	4631      	mov	r1, r6
 801c0f4:	4640      	mov	r0, r8
 801c0f6:	f7f6 ff2b 	bl	8012f50 <_ZN8touchgfx4RectaNERKS0_>
 801c0fa:	4b74      	ldr	r3, [pc, #464]	; (801c2cc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801c0fc:	8818      	ldrh	r0, [r3, #0]
 801c0fe:	4b74      	ldr	r3, [pc, #464]	; (801c2d0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801c100:	b202      	sxth	r2, r0
 801c102:	8819      	ldrh	r1, [r3, #0]
 801c104:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801c108:	b20e      	sxth	r6, r1
 801c10a:	2b00      	cmp	r3, #0
 801c10c:	da07      	bge.n	801c11e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801c10e:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801c112:	4463      	add	r3, ip
 801c114:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801c118:	2300      	movs	r3, #0
 801c11a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801c11e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801c122:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801c126:	1ad2      	subs	r2, r2, r3
 801c128:	4594      	cmp	ip, r2
 801c12a:	bfc4      	itt	gt
 801c12c:	1ac2      	subgt	r2, r0, r3
 801c12e:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 801c132:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801c136:	2a00      	cmp	r2, #0
 801c138:	da07      	bge.n	801c14a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801c13a:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 801c13e:	4462      	add	r2, ip
 801c140:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801c144:	2200      	movs	r2, #0
 801c146:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801c14a:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801c14e:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801c152:	eba6 060a 	sub.w	r6, r6, sl
 801c156:	42b2      	cmp	r2, r6
 801c158:	bfc4      	itt	gt
 801c15a:	eba1 020a 	subgt.w	r2, r1, sl
 801c15e:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 801c162:	4a5c      	ldr	r2, [pc, #368]	; (801c2d4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801c164:	7812      	ldrb	r2, [r2, #0]
 801c166:	b9a2      	cbnz	r2, 801c192 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 801c168:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801c16c:	4286      	cmp	r6, r0
 801c16e:	4640      	mov	r0, r8
 801c170:	9303      	str	r3, [sp, #12]
 801c172:	bf14      	ite	ne
 801c174:	2600      	movne	r6, #0
 801c176:	2601      	moveq	r6, #1
 801c178:	f7f6 ff2d 	bl	8012fd6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c17c:	9b03      	ldr	r3, [sp, #12]
 801c17e:	b160      	cbz	r0, 801c19a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 801c180:	2300      	movs	r3, #0
 801c182:	8023      	strh	r3, [r4, #0]
 801c184:	8063      	strh	r3, [r4, #2]
 801c186:	80a3      	strh	r3, [r4, #4]
 801c188:	4620      	mov	r0, r4
 801c18a:	80e3      	strh	r3, [r4, #6]
 801c18c:	b011      	add	sp, #68	; 0x44
 801c18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c192:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801c196:	428e      	cmp	r6, r1
 801c198:	e7e9      	b.n	801c16e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 801c19a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801c19e:	a90e      	add	r1, sp, #56	; 0x38
 801c1a0:	900e      	str	r0, [sp, #56]	; 0x38
 801c1a2:	a80c      	add	r0, sp, #48	; 0x30
 801c1a4:	9205      	str	r2, [sp, #20]
 801c1a6:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801c1aa:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 801c1ae:	9206      	str	r2, [sp, #24]
 801c1b0:	f8bb 2000 	ldrh.w	r2, [fp]
 801c1b4:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 801c1b8:	1a9b      	subs	r3, r3, r2
 801c1ba:	b21b      	sxth	r3, r3
 801c1bc:	9303      	str	r3, [sp, #12]
 801c1be:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801c1c2:	f8df b118 	ldr.w	fp, [pc, #280]	; 801c2dc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801c1c6:	ebaa 0a03 	sub.w	sl, sl, r3
 801c1ca:	fa0f f38a 	sxth.w	r3, sl
 801c1ce:	9304      	str	r3, [sp, #16]
 801c1d0:	9b03      	ldr	r3, [sp, #12]
 801c1d2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801c1d6:	9b04      	ldr	r3, [sp, #16]
 801c1d8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801c1dc:	9b05      	ldr	r3, [sp, #20]
 801c1de:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801c1e2:	9b06      	ldr	r3, [sp, #24]
 801c1e4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801c1e8:	f7f9 ff48 	bl	801607c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c1ec:	4640      	mov	r0, r8
 801c1ee:	f7f9 ff1d 	bl	801602c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c1f2:	a80e      	add	r0, sp, #56	; 0x38
 801c1f4:	f7f9 ff1a 	bl	801602c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c1f8:	4b37      	ldr	r3, [pc, #220]	; (801c2d8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801c1fa:	4628      	mov	r0, r5
 801c1fc:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801c200:	881b      	ldrh	r3, [r3, #0]
 801c202:	9307      	str	r3, [sp, #28]
 801c204:	682b      	ldr	r3, [r5, #0]
 801c206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c208:	4798      	blx	r3
 801c20a:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 801c20e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801c212:	4681      	mov	r9, r0
 801c214:	f8db 0000 	ldr.w	r0, [fp]
 801c218:	fb1a 3305 	smlabb	r3, sl, r5, r3
 801c21c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801c21e:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801c222:	6803      	ldr	r3, [r0, #0]
 801c224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c226:	4798      	blx	r3
 801c228:	4607      	mov	r7, r0
 801c22a:	f8db 0000 	ldr.w	r0, [fp]
 801c22e:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801c232:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801c236:	6803      	ldr	r3, [r0, #0]
 801c238:	9109      	str	r1, [sp, #36]	; 0x24
 801c23a:	9208      	str	r2, [sp, #32]
 801c23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c23e:	4798      	blx	r3
 801c240:	f010 0f01 	tst.w	r0, #1
 801c244:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801c248:	d012      	beq.n	801c270 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801c24a:	f8db 0000 	ldr.w	r0, [fp]
 801c24e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801c252:	6803      	ldr	r3, [r0, #0]
 801c254:	9200      	str	r2, [sp, #0]
 801c256:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801c258:	462b      	mov	r3, r5
 801c25a:	e898 0006 	ldmia.w	r8, {r1, r2}
 801c25e:	47b0      	blx	r6
 801c260:	9b03      	ldr	r3, [sp, #12]
 801c262:	8023      	strh	r3, [r4, #0]
 801c264:	9b04      	ldr	r3, [sp, #16]
 801c266:	8063      	strh	r3, [r4, #2]
 801c268:	9b05      	ldr	r3, [sp, #20]
 801c26a:	80a3      	strh	r3, [r4, #4]
 801c26c:	9b06      	ldr	r3, [sp, #24]
 801c26e:	e78b      	b.n	801c188 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 801c270:	fb09 f202 	mul.w	r2, r9, r2
 801c274:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801c278:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801c27c:	440f      	add	r7, r1
 801c27e:	b166      	cbz	r6, 801c29a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801c280:	9a07      	ldr	r2, [sp, #28]
 801c282:	4592      	cmp	sl, r2
 801c284:	d109      	bne.n	801c29a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801c286:	f8db 0000 	ldr.w	r0, [fp]
 801c28a:	fb09 f303 	mul.w	r3, r9, r3
 801c28e:	4629      	mov	r1, r5
 801c290:	6802      	ldr	r2, [r0, #0]
 801c292:	6b56      	ldr	r6, [r2, #52]	; 0x34
 801c294:	463a      	mov	r2, r7
 801c296:	47b0      	blx	r6
 801c298:	e7e2      	b.n	801c260 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801c29a:	fb0a f303 	mul.w	r3, sl, r3
 801c29e:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801c2a2:	f8df b038 	ldr.w	fp, [pc, #56]	; 801c2dc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801c2a6:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801c2aa:	4545      	cmp	r5, r8
 801c2ac:	d2d8      	bcs.n	801c260 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801c2ae:	f8db 0000 	ldr.w	r0, [fp]
 801c2b2:	4629      	mov	r1, r5
 801c2b4:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801c2b8:	4435      	add	r5, r6
 801c2ba:	6802      	ldr	r2, [r0, #0]
 801c2bc:	005b      	lsls	r3, r3, #1
 801c2be:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801c2c2:	463a      	mov	r2, r7
 801c2c4:	47d0      	blx	sl
 801c2c6:	444f      	add	r7, r9
 801c2c8:	e7ef      	b.n	801c2aa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 801c2ca:	bf00      	nop
 801c2cc:	2400b078 	.word	0x2400b078
 801c2d0:	2400b07a 	.word	0x2400b07a
 801c2d4:	2400b07c 	.word	0x2400b07c
 801c2d8:	2400b07e 	.word	0x2400b07e
 801c2dc:	2400b084 	.word	0x2400b084

0801c2e0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801c2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c2e2:	4606      	mov	r6, r0
 801c2e4:	b087      	sub	sp, #28
 801c2e6:	460c      	mov	r4, r1
 801c2e8:	4617      	mov	r7, r2
 801c2ea:	461d      	mov	r5, r3
 801c2ec:	b333      	cbz	r3, 801c33c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c2ee:	4608      	mov	r0, r1
 801c2f0:	f7f6 fe71 	bl	8012fd6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c2f4:	bb10      	cbnz	r0, 801c33c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c2f6:	6820      	ldr	r0, [r4, #0]
 801c2f8:	ab04      	add	r3, sp, #16
 801c2fa:	6861      	ldr	r1, [r4, #4]
 801c2fc:	4c1b      	ldr	r4, [pc, #108]	; (801c36c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801c2fe:	c303      	stmia	r3!, {r0, r1}
 801c300:	a804      	add	r0, sp, #16
 801c302:	f7f9 fe93 	bl	801602c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c306:	6820      	ldr	r0, [r4, #0]
 801c308:	6803      	ldr	r3, [r0, #0]
 801c30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c30c:	4798      	blx	r3
 801c30e:	2dff      	cmp	r5, #255	; 0xff
 801c310:	d016      	beq.n	801c340 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801c312:	f010 0f08 	tst.w	r0, #8
 801c316:	6820      	ldr	r0, [r4, #0]
 801c318:	d015      	beq.n	801c346 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801c31a:	2400      	movs	r4, #0
 801c31c:	6801      	ldr	r1, [r0, #0]
 801c31e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c322:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c326:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801c32a:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801c32e:	9401      	str	r4, [sp, #4]
 801c330:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801c334:	9400      	str	r4, [sp, #0]
 801c336:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801c338:	4639      	mov	r1, r7
 801c33a:	47a0      	blx	r4
 801c33c:	b007      	add	sp, #28
 801c33e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c340:	f010 0f02 	tst.w	r0, #2
 801c344:	e7e7      	b.n	801c316 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801c346:	6803      	ldr	r3, [r0, #0]
 801c348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c34a:	4798      	blx	r3
 801c34c:	4b08      	ldr	r3, [pc, #32]	; (801c370 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801c34e:	4601      	mov	r1, r0
 801c350:	4630      	mov	r0, r6
 801c352:	881a      	ldrh	r2, [r3, #0]
 801c354:	6833      	ldr	r3, [r6, #0]
 801c356:	e9cd 7500 	strd	r7, r5, [sp]
 801c35a:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801c35c:	ab04      	add	r3, sp, #16
 801c35e:	47a8      	blx	r5
 801c360:	6820      	ldr	r0, [r4, #0]
 801c362:	6803      	ldr	r3, [r0, #0]
 801c364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c366:	4798      	blx	r3
 801c368:	e7e8      	b.n	801c33c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801c36a:	bf00      	nop
 801c36c:	2400b084 	.word	0x2400b084
 801c370:	2400b07e 	.word	0x2400b07e

0801c374 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801c374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c378:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801c37c:	4688      	mov	r8, r1
 801c37e:	4614      	mov	r4, r2
 801c380:	461d      	mov	r5, r3
 801c382:	9e08      	ldr	r6, [sp, #32]
 801c384:	2f00      	cmp	r7, #0
 801c386:	f000 80ab 	beq.w	801c4e0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801c38a:	4618      	mov	r0, r3
 801c38c:	f7f6 fe23 	bl	8012fd6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c390:	2800      	cmp	r0, #0
 801c392:	f040 80a5 	bne.w	801c4e0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801c396:	f9b5 1000 	ldrsh.w	r1, [r5]
 801c39a:	2fff      	cmp	r7, #255	; 0xff
 801c39c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801c3a0:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801c3a4:	fb04 1303 	mla	r3, r4, r3, r1
 801c3a8:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801c3ac:	eba4 0200 	sub.w	r2, r4, r0
 801c3b0:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801c3b4:	fb04 f505 	mul.w	r5, r4, r5
 801c3b8:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801c3bc:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801c3c0:	d04a      	beq.n	801c458 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 801c3c2:	b2bc      	uxth	r4, r7
 801c3c4:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801c3c8:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801c3cc:	fa5f f788 	uxtb.w	r7, r8
 801c3d0:	b2f3      	uxtb	r3, r6
 801c3d2:	0040      	lsls	r0, r0, #1
 801c3d4:	fb0e fe04 	mul.w	lr, lr, r4
 801c3d8:	4367      	muls	r7, r4
 801c3da:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801c3de:	4363      	muls	r3, r4
 801c3e0:	fa1f fc8c 	uxth.w	ip, ip
 801c3e4:	42a9      	cmp	r1, r5
 801c3e6:	d27b      	bcs.n	801c4e0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801c3e8:	eb01 0900 	add.w	r9, r1, r0
 801c3ec:	4549      	cmp	r1, r9
 801c3ee:	d231      	bcs.n	801c454 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 801c3f0:	880a      	ldrh	r2, [r1, #0]
 801c3f2:	1214      	asrs	r4, r2, #8
 801c3f4:	10d6      	asrs	r6, r2, #3
 801c3f6:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801c3fa:	00d2      	lsls	r2, r2, #3
 801c3fc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c400:	b2d2      	uxtb	r2, r2
 801c402:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801c406:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801c40a:	fb14 f40c 	smulbb	r4, r4, ip
 801c40e:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801c412:	fb12 f20c 	smulbb	r2, r2, ip
 801c416:	fb16 f60c 	smulbb	r6, r6, ip
 801c41a:	4474      	add	r4, lr
 801c41c:	441a      	add	r2, r3
 801c41e:	b2a4      	uxth	r4, r4
 801c420:	443e      	add	r6, r7
 801c422:	b292      	uxth	r2, r2
 801c424:	f104 0a01 	add.w	sl, r4, #1
 801c428:	b2b6      	uxth	r6, r6
 801c42a:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801c42e:	f102 0a01 	add.w	sl, r2, #1
 801c432:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801c436:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801c43a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c43e:	4322      	orrs	r2, r4
 801c440:	1c74      	adds	r4, r6, #1
 801c442:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801c446:	0976      	lsrs	r6, r6, #5
 801c448:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801c44c:	4332      	orrs	r2, r6
 801c44e:	f821 2b02 	strh.w	r2, [r1], #2
 801c452:	e7cb      	b.n	801c3ec <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 801c454:	4441      	add	r1, r8
 801c456:	e7c5      	b.n	801c3e4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801c458:	0973      	lsrs	r3, r6, #5
 801c45a:	4f22      	ldr	r7, [pc, #136]	; (801c4e4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 801c45c:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801c460:	ea08 0707 	and.w	r7, r8, r7
 801c464:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c468:	433b      	orrs	r3, r7
 801c46a:	07e7      	lsls	r7, r4, #31
 801c46c:	ea43 0306 	orr.w	r3, r3, r6
 801c470:	b29b      	uxth	r3, r3
 801c472:	d50b      	bpl.n	801c48c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 801c474:	0040      	lsls	r0, r0, #1
 801c476:	0052      	lsls	r2, r2, #1
 801c478:	42a9      	cmp	r1, r5
 801c47a:	d231      	bcs.n	801c4e0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801c47c:	180c      	adds	r4, r1, r0
 801c47e:	42a1      	cmp	r1, r4
 801c480:	d202      	bcs.n	801c488 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801c482:	f821 3b02 	strh.w	r3, [r1], #2
 801c486:	e7fa      	b.n	801c47e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 801c488:	4411      	add	r1, r2
 801c48a:	e7f5      	b.n	801c478 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 801c48c:	078e      	lsls	r6, r1, #30
 801c48e:	d008      	beq.n	801c4a2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 801c490:	0066      	lsls	r6, r4, #1
 801c492:	460a      	mov	r2, r1
 801c494:	42aa      	cmp	r2, r5
 801c496:	d202      	bcs.n	801c49e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801c498:	8013      	strh	r3, [r2, #0]
 801c49a:	4432      	add	r2, r6
 801c49c:	e7fa      	b.n	801c494 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 801c49e:	3102      	adds	r1, #2
 801c4a0:	3801      	subs	r0, #1
 801c4a2:	07c2      	lsls	r2, r0, #31
 801c4a4:	d50b      	bpl.n	801c4be <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801c4a6:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 801c4aa:	0066      	lsls	r6, r4, #1
 801c4ac:	3a01      	subs	r2, #1
 801c4ae:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801c4b2:	42aa      	cmp	r2, r5
 801c4b4:	d202      	bcs.n	801c4bc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 801c4b6:	8013      	strh	r3, [r2, #0]
 801c4b8:	4432      	add	r2, r6
 801c4ba:	e7fa      	b.n	801c4b2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 801c4bc:	3801      	subs	r0, #1
 801c4be:	b178      	cbz	r0, 801c4e0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801c4c0:	1040      	asrs	r0, r0, #1
 801c4c2:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801c4c6:	0080      	lsls	r0, r0, #2
 801c4c8:	0064      	lsls	r4, r4, #1
 801c4ca:	42a9      	cmp	r1, r5
 801c4cc:	d208      	bcs.n	801c4e0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801c4ce:	180e      	adds	r6, r1, r0
 801c4d0:	460a      	mov	r2, r1
 801c4d2:	42b2      	cmp	r2, r6
 801c4d4:	d202      	bcs.n	801c4dc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801c4d6:	f842 3b04 	str.w	r3, [r2], #4
 801c4da:	e7fa      	b.n	801c4d2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 801c4dc:	4421      	add	r1, r4
 801c4de:	e7f4      	b.n	801c4ca <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801c4e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c4e4:	00fff800 	.word	0x00fff800

0801c4e8 <_ZN8touchgfx8LCD16bppC1Ev>:
 801c4e8:	2200      	movs	r2, #0
 801c4ea:	4910      	ldr	r1, [pc, #64]	; (801c52c <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801c4ec:	6042      	str	r2, [r0, #4]
 801c4ee:	6001      	str	r1, [r0, #0]
 801c4f0:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801c4f4:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801c4f8:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801c4fc:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801c500:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801c504:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801c508:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801c50c:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801c510:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801c514:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801c518:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801c51c:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801c520:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801c524:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801c528:	4770      	bx	lr
 801c52a:	bf00      	nop
 801c52c:	08028168 	.word	0x08028168

0801c530 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801c530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c534:	b08d      	sub	sp, #52	; 0x34
 801c536:	460d      	mov	r5, r1
 801c538:	4604      	mov	r4, r0
 801c53a:	4699      	mov	r9, r3
 801c53c:	6808      	ldr	r0, [r1, #0]
 801c53e:	ab08      	add	r3, sp, #32
 801c540:	6849      	ldr	r1, [r1, #4]
 801c542:	c303      	stmia	r3!, {r0, r1}
 801c544:	6810      	ldr	r0, [r2, #0]
 801c546:	ab0a      	add	r3, sp, #40	; 0x28
 801c548:	6851      	ldr	r1, [r2, #4]
 801c54a:	c303      	stmia	r3!, {r0, r1}
 801c54c:	a808      	add	r0, sp, #32
 801c54e:	f7f9 fd6d 	bl	801602c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c552:	4629      	mov	r1, r5
 801c554:	a80a      	add	r0, sp, #40	; 0x28
 801c556:	4d67      	ldr	r5, [pc, #412]	; (801c6f4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801c558:	f7f9 fd90 	bl	801607c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c55c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801c560:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801c564:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801c568:	6828      	ldr	r0, [r5, #0]
 801c56a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c56e:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801c572:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801c576:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801c57a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801c57e:	440a      	add	r2, r1
 801c580:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801c584:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801c588:	4413      	add	r3, r2
 801c58a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801c58e:	6803      	ldr	r3, [r0, #0]
 801c590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c592:	4798      	blx	r3
 801c594:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801c598:	d119      	bne.n	801c5ce <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801c59a:	f010 0f20 	tst.w	r0, #32
 801c59e:	6828      	ldr	r0, [r5, #0]
 801c5a0:	d018      	beq.n	801c5d4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801c5a2:	2500      	movs	r5, #0
 801c5a4:	6801      	ldr	r1, [r0, #0]
 801c5a6:	b2b6      	uxth	r6, r6
 801c5a8:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801c5ac:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801c5b0:	9601      	str	r6, [sp, #4]
 801c5b2:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801c5b6:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801c5ba:	9502      	str	r5, [sp, #8]
 801c5bc:	fa1f f588 	uxth.w	r5, r8
 801c5c0:	9500      	str	r5, [sp, #0]
 801c5c2:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801c5c4:	4621      	mov	r1, r4
 801c5c6:	47a8      	blx	r5
 801c5c8:	b00d      	add	sp, #52	; 0x34
 801c5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 801c5d2:	e7e4      	b.n	801c59e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801c5d4:	6803      	ldr	r3, [r0, #0]
 801c5d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c5d8:	4798      	blx	r3
 801c5da:	4947      	ldr	r1, [pc, #284]	; (801c6f8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801c5dc:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801c5e0:	880b      	ldrh	r3, [r1, #0]
 801c5e2:	468a      	mov	sl, r1
 801c5e4:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801c5e8:	fb03 5202 	mla	r2, r3, r2, r5
 801c5ec:	4373      	muls	r3, r6
 801c5ee:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801c5f2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c5f6:	9307      	str	r3, [sp, #28]
 801c5f8:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801c5fc:	9306      	str	r3, [sp, #24]
 801c5fe:	9b07      	ldr	r3, [sp, #28]
 801c600:	4298      	cmp	r0, r3
 801c602:	d270      	bcs.n	801c6e6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801c604:	9b06      	ldr	r3, [sp, #24]
 801c606:	4621      	mov	r1, r4
 801c608:	eb00 0b03 	add.w	fp, r0, r3
 801c60c:	4558      	cmp	r0, fp
 801c60e:	d25d      	bcs.n	801c6cc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801c610:	f851 4b04 	ldr.w	r4, [r1], #4
 801c614:	0e23      	lsrs	r3, r4, #24
 801c616:	d014      	beq.n	801c642 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801c618:	2bff      	cmp	r3, #255	; 0xff
 801c61a:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801c61e:	d112      	bne.n	801c646 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801c620:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801c624:	d10f      	bne.n	801c646 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801c626:	0963      	lsrs	r3, r4, #5
 801c628:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801c62c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801c630:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c634:	f02c 0c07 	bic.w	ip, ip, #7
 801c638:	ea43 0c0c 	orr.w	ip, r3, ip
 801c63c:	ea4c 0404 	orr.w	r4, ip, r4
 801c640:	8004      	strh	r4, [r0, #0]
 801c642:	3002      	adds	r0, #2
 801c644:	e7e2      	b.n	801c60c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801c646:	fb09 f303 	mul.w	r3, r9, r3
 801c64a:	8807      	ldrh	r7, [r0, #0]
 801c64c:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801c650:	fa5f fc8c 	uxtb.w	ip, ip
 801c654:	1c5a      	adds	r2, r3, #1
 801c656:	123e      	asrs	r6, r7, #8
 801c658:	10fd      	asrs	r5, r7, #3
 801c65a:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801c65e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c662:	00ff      	lsls	r7, r7, #3
 801c664:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801c668:	1212      	asrs	r2, r2, #8
 801c66a:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801c66e:	b293      	uxth	r3, r2
 801c670:	43d2      	mvns	r2, r2
 801c672:	b2ff      	uxtb	r7, r7
 801c674:	fb1e fe03 	smulbb	lr, lr, r3
 801c678:	b2d2      	uxtb	r2, r2
 801c67a:	fb1c fc03 	smulbb	ip, ip, r3
 801c67e:	b2e4      	uxtb	r4, r4
 801c680:	fb06 e602 	mla	r6, r6, r2, lr
 801c684:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801c688:	fb14 f403 	smulbb	r4, r4, r3
 801c68c:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801c690:	b2b6      	uxth	r6, r6
 801c692:	fb05 c502 	mla	r5, r5, r2, ip
 801c696:	fb07 4702 	mla	r7, r7, r2, r4
 801c69a:	f106 0e01 	add.w	lr, r6, #1
 801c69e:	b2ad      	uxth	r5, r5
 801c6a0:	b2bf      	uxth	r7, r7
 801c6a2:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801c6a6:	f105 0c01 	add.w	ip, r5, #1
 801c6aa:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801c6ae:	1c7e      	adds	r6, r7, #1
 801c6b0:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801c6b4:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801c6b8:	096d      	lsrs	r5, r5, #5
 801c6ba:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801c6be:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c6c2:	ea46 060e 	orr.w	r6, r6, lr
 801c6c6:	432e      	orrs	r6, r5
 801c6c8:	8006      	strh	r6, [r0, #0]
 801c6ca:	e7ba      	b.n	801c642 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801c6cc:	f8ba 3000 	ldrh.w	r3, [sl]
 801c6d0:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801c6d4:	eba3 0308 	sub.w	r3, r3, r8
 801c6d8:	eba4 0408 	sub.w	r4, r4, r8
 801c6dc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c6e0:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801c6e4:	e78b      	b.n	801c5fe <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801c6e6:	4b03      	ldr	r3, [pc, #12]	; (801c6f4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801c6e8:	6818      	ldr	r0, [r3, #0]
 801c6ea:	6803      	ldr	r3, [r0, #0]
 801c6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c6ee:	4798      	blx	r3
 801c6f0:	e76a      	b.n	801c5c8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801c6f2:	bf00      	nop
 801c6f4:	2400b084 	.word	0x2400b084
 801c6f8:	2400b07e 	.word	0x2400b07e

0801c6fc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801c6fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c700:	b085      	sub	sp, #20
 801c702:	6810      	ldr	r0, [r2, #0]
 801c704:	460c      	mov	r4, r1
 801c706:	6851      	ldr	r1, [r2, #4]
 801c708:	466d      	mov	r5, sp
 801c70a:	4616      	mov	r6, r2
 801c70c:	c503      	stmia	r5!, {r0, r1}
 801c70e:	6818      	ldr	r0, [r3, #0]
 801c710:	6859      	ldr	r1, [r3, #4]
 801c712:	c503      	stmia	r5!, {r0, r1}
 801c714:	4668      	mov	r0, sp
 801c716:	4d2e      	ldr	r5, [pc, #184]	; (801c7d0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801c718:	f7f9 fc88 	bl	801602c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c71c:	4631      	mov	r1, r6
 801c71e:	a802      	add	r0, sp, #8
 801c720:	4e2c      	ldr	r6, [pc, #176]	; (801c7d4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801c722:	f7f9 fcab 	bl	801607c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c726:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801c72a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801c72e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801c732:	6828      	ldr	r0, [r5, #0]
 801c734:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c738:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801c73c:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801c740:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801c744:	f8bd 1000 	ldrh.w	r1, [sp]
 801c748:	440a      	add	r2, r1
 801c74a:	f8ad 2008 	strh.w	r2, [sp, #8]
 801c74e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801c752:	4413      	add	r3, r2
 801c754:	f8ad 300a 	strh.w	r3, [sp, #10]
 801c758:	6803      	ldr	r3, [r0, #0]
 801c75a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c75c:	4798      	blx	r3
 801c75e:	8833      	ldrh	r3, [r6, #0]
 801c760:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801c764:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801c768:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801c76c:	f8df e068 	ldr.w	lr, [pc, #104]	; 801c7d8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801c770:	fb03 1202 	mla	r2, r3, r2, r1
 801c774:	fb08 f303 	mul.w	r3, r8, r3
 801c778:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801c77c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c780:	4298      	cmp	r0, r3
 801c782:	d21d      	bcs.n	801c7c0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801c784:	eb00 080c 	add.w	r8, r0, ip
 801c788:	4540      	cmp	r0, r8
 801c78a:	d20f      	bcs.n	801c7ac <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801c78c:	f854 1b04 	ldr.w	r1, [r4], #4
 801c790:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801c794:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801c798:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801c79c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801c7a0:	ea42 0209 	orr.w	r2, r2, r9
 801c7a4:	430a      	orrs	r2, r1
 801c7a6:	f820 2b02 	strh.w	r2, [r0], #2
 801c7aa:	e7ed      	b.n	801c788 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801c7ac:	8832      	ldrh	r2, [r6, #0]
 801c7ae:	1bd2      	subs	r2, r2, r7
 801c7b0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801c7b4:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801c7b8:	1bd2      	subs	r2, r2, r7
 801c7ba:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801c7be:	e7df      	b.n	801c780 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801c7c0:	6828      	ldr	r0, [r5, #0]
 801c7c2:	6803      	ldr	r3, [r0, #0]
 801c7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c7c6:	4798      	blx	r3
 801c7c8:	b005      	add	sp, #20
 801c7ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c7ce:	bf00      	nop
 801c7d0:	2400b084 	.word	0x2400b084
 801c7d4:	2400b07e 	.word	0x2400b07e
 801c7d8:	fffff800 	.word	0xfffff800

0801c7dc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801c7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c7e0:	b08e      	sub	sp, #56	; 0x38
 801c7e2:	460e      	mov	r6, r1
 801c7e4:	4604      	mov	r4, r0
 801c7e6:	461d      	mov	r5, r3
 801c7e8:	6808      	ldr	r0, [r1, #0]
 801c7ea:	ab0a      	add	r3, sp, #40	; 0x28
 801c7ec:	6849      	ldr	r1, [r1, #4]
 801c7ee:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 801c9c4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801c7f2:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801c9c8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801c7f6:	c303      	stmia	r3!, {r0, r1}
 801c7f8:	6810      	ldr	r0, [r2, #0]
 801c7fa:	ab0c      	add	r3, sp, #48	; 0x30
 801c7fc:	6851      	ldr	r1, [r2, #4]
 801c7fe:	c303      	stmia	r3!, {r0, r1}
 801c800:	a80a      	add	r0, sp, #40	; 0x28
 801c802:	f7f9 fc13 	bl	801602c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c806:	4631      	mov	r1, r6
 801c808:	a80c      	add	r0, sp, #48	; 0x30
 801c80a:	f7f9 fc37 	bl	801607c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c80e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801c812:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801c816:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801c81a:	f8d8 0000 	ldr.w	r0, [r8]
 801c81e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c822:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801c826:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801c82a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c82e:	440c      	add	r4, r1
 801c830:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801c834:	440a      	add	r2, r1
 801c836:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801c83a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801c83e:	4413      	add	r3, r2
 801c840:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801c844:	6803      	ldr	r3, [r0, #0]
 801c846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c848:	4798      	blx	r3
 801c84a:	2dff      	cmp	r5, #255	; 0xff
 801c84c:	d124      	bne.n	801c898 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801c84e:	f010 0f01 	tst.w	r0, #1
 801c852:	f8d8 0000 	ldr.w	r0, [r8]
 801c856:	d022      	beq.n	801c89e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801c858:	2100      	movs	r1, #0
 801c85a:	f04f 0e01 	mov.w	lr, #1
 801c85e:	f8d0 c000 	ldr.w	ip, [r0]
 801c862:	b2b6      	uxth	r6, r6
 801c864:	f8cd e018 	str.w	lr, [sp, #24]
 801c868:	b2bf      	uxth	r7, r7
 801c86a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801c86e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801c872:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801c876:	f8b9 e000 	ldrh.w	lr, [r9]
 801c87a:	9503      	str	r5, [sp, #12]
 801c87c:	9601      	str	r6, [sp, #4]
 801c87e:	9700      	str	r7, [sp, #0]
 801c880:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801c884:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801c888:	9102      	str	r1, [sp, #8]
 801c88a:	4621      	mov	r1, r4
 801c88c:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801c890:	47a8      	blx	r5
 801c892:	b00e      	add	sp, #56	; 0x38
 801c894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c898:	f010 0f04 	tst.w	r0, #4
 801c89c:	e7d9      	b.n	801c852 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801c89e:	6803      	ldr	r3, [r0, #0]
 801c8a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c8a2:	4798      	blx	r3
 801c8a4:	f8b9 3000 	ldrh.w	r3, [r9]
 801c8a8:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801c8ac:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801c8b0:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801c8b4:	435e      	muls	r6, r3
 801c8b6:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801c8ba:	2dff      	cmp	r5, #255	; 0xff
 801c8bc:	fb03 1202 	mla	r2, r3, r2, r1
 801c8c0:	ebac 0c07 	sub.w	ip, ip, r7
 801c8c4:	eba3 0707 	sub.w	r7, r3, r7
 801c8c8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801c8cc:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801c8d0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801c8d4:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801c8d8:	d049      	beq.n	801c96e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801c8da:	43eb      	mvns	r3, r5
 801c8dc:	fa1f f985 	uxth.w	r9, r5
 801c8e0:	b2db      	uxtb	r3, r3
 801c8e2:	42b0      	cmp	r0, r6
 801c8e4:	d266      	bcs.n	801c9b4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801c8e6:	eb00 0a0e 	add.w	sl, r0, lr
 801c8ea:	4550      	cmp	r0, sl
 801c8ec:	4621      	mov	r1, r4
 801c8ee:	f104 0403 	add.w	r4, r4, #3
 801c8f2:	d25b      	bcs.n	801c9ac <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801c8f4:	8802      	ldrh	r2, [r0, #0]
 801c8f6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801c8fa:	ea4f 2822 	mov.w	r8, r2, asr #8
 801c8fe:	fb11 f109 	smulbb	r1, r1, r9
 801c902:	10d5      	asrs	r5, r2, #3
 801c904:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801c908:	00d2      	lsls	r2, r2, #3
 801c90a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801c90e:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801c912:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801c916:	fb08 1803 	mla	r8, r8, r3, r1
 801c91a:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801c91e:	b2d2      	uxtb	r2, r2
 801c920:	fb11 f109 	smulbb	r1, r1, r9
 801c924:	fa1f f888 	uxth.w	r8, r8
 801c928:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801c92c:	fb05 1503 	mla	r5, r5, r3, r1
 801c930:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801c934:	fb11 f109 	smulbb	r1, r1, r9
 801c938:	b2ad      	uxth	r5, r5
 801c93a:	fb02 1203 	mla	r2, r2, r3, r1
 801c93e:	f108 0101 	add.w	r1, r8, #1
 801c942:	b292      	uxth	r2, r2
 801c944:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801c948:	1c51      	adds	r1, r2, #1
 801c94a:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801c94e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801c952:	1c69      	adds	r1, r5, #1
 801c954:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801c958:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c95c:	096d      	lsrs	r5, r5, #5
 801c95e:	ea42 0208 	orr.w	r2, r2, r8
 801c962:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c966:	432a      	orrs	r2, r5
 801c968:	f820 2b02 	strh.w	r2, [r0], #2
 801c96c:	e7bd      	b.n	801c8ea <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801c96e:	4a14      	ldr	r2, [pc, #80]	; (801c9c0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801c970:	42b0      	cmp	r0, r6
 801c972:	d21f      	bcs.n	801c9b4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801c974:	eb00 050e 	add.w	r5, r0, lr
 801c978:	42a8      	cmp	r0, r5
 801c97a:	4621      	mov	r1, r4
 801c97c:	f104 0403 	add.w	r4, r4, #3
 801c980:	d210      	bcs.n	801c9a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801c982:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801c986:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801c98a:	00db      	lsls	r3, r3, #3
 801c98c:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801c990:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c994:	430b      	orrs	r3, r1
 801c996:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801c99a:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801c99e:	f820 3b02 	strh.w	r3, [r0], #2
 801c9a2:	e7e9      	b.n	801c978 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801c9a4:	4438      	add	r0, r7
 801c9a6:	eb01 040c 	add.w	r4, r1, ip
 801c9aa:	e7e1      	b.n	801c970 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801c9ac:	4438      	add	r0, r7
 801c9ae:	eb01 040c 	add.w	r4, r1, ip
 801c9b2:	e796      	b.n	801c8e2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801c9b4:	4b03      	ldr	r3, [pc, #12]	; (801c9c4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801c9b6:	6818      	ldr	r0, [r3, #0]
 801c9b8:	6803      	ldr	r3, [r0, #0]
 801c9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c9bc:	4798      	blx	r3
 801c9be:	e768      	b.n	801c892 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801c9c0:	fffff800 	.word	0xfffff800
 801c9c4:	2400b084 	.word	0x2400b084
 801c9c8:	2400b07e 	.word	0x2400b07e

0801c9cc <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801c9cc:	b4f0      	push	{r4, r5, r6, r7}
 801c9ce:	4616      	mov	r6, r2
 801c9d0:	461c      	mov	r4, r3
 801c9d2:	460d      	mov	r5, r1
 801c9d4:	9a04      	ldr	r2, [sp, #16]
 801c9d6:	2e01      	cmp	r6, #1
 801c9d8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801c9dc:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801c9e0:	d012      	beq.n	801ca08 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 801c9e2:	d303      	bcc.n	801c9ec <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 801c9e4:	2e02      	cmp	r6, #2
 801c9e6:	d00a      	beq.n	801c9fe <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 801c9e8:	bcf0      	pop	{r4, r5, r6, r7}
 801c9ea:	4770      	bx	lr
 801c9ec:	6805      	ldr	r5, [r0, #0]
 801c9ee:	e9cd 3704 	strd	r3, r7, [sp, #16]
 801c9f2:	68ed      	ldr	r5, [r5, #12]
 801c9f4:	4613      	mov	r3, r2
 801c9f6:	4622      	mov	r2, r4
 801c9f8:	46ac      	mov	ip, r5
 801c9fa:	bcf0      	pop	{r4, r5, r6, r7}
 801c9fc:	4760      	bx	ip
 801c9fe:	4621      	mov	r1, r4
 801ca00:	4628      	mov	r0, r5
 801ca02:	bcf0      	pop	{r4, r5, r6, r7}
 801ca04:	f7ff bd94 	b.w	801c530 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ca08:	4621      	mov	r1, r4
 801ca0a:	4628      	mov	r0, r5
 801ca0c:	bcf0      	pop	{r4, r5, r6, r7}
 801ca0e:	f7ff bee5 	b.w	801c7dc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0801ca14 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801ca14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca18:	b093      	sub	sp, #76	; 0x4c
 801ca1a:	4681      	mov	r9, r0
 801ca1c:	4688      	mov	r8, r1
 801ca1e:	6810      	ldr	r0, [r2, #0]
 801ca20:	6851      	ldr	r1, [r2, #4]
 801ca22:	ac0e      	add	r4, sp, #56	; 0x38
 801ca24:	4616      	mov	r6, r2
 801ca26:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801ca2a:	4f6b      	ldr	r7, [pc, #428]	; (801cbd8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801ca2c:	c403      	stmia	r4!, {r0, r1}
 801ca2e:	6818      	ldr	r0, [r3, #0]
 801ca30:	ac10      	add	r4, sp, #64	; 0x40
 801ca32:	6859      	ldr	r1, [r3, #4]
 801ca34:	c403      	stmia	r4!, {r0, r1}
 801ca36:	a80e      	add	r0, sp, #56	; 0x38
 801ca38:	f7f9 faf8 	bl	801602c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ca3c:	4631      	mov	r1, r6
 801ca3e:	a810      	add	r0, sp, #64	; 0x40
 801ca40:	4e66      	ldr	r6, [pc, #408]	; (801cbdc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801ca42:	f7f9 fb1b 	bl	801607c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ca46:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801ca4a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801ca4e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801ca52:	6830      	ldr	r0, [r6, #0]
 801ca54:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ca58:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801ca5c:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801ca60:	4489      	add	r9, r1
 801ca62:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801ca66:	440a      	add	r2, r1
 801ca68:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801ca6c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801ca70:	4413      	add	r3, r2
 801ca72:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801ca76:	6803      	ldr	r3, [r0, #0]
 801ca78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ca7a:	4798      	blx	r3
 801ca7c:	f010 0f80 	tst.w	r0, #128	; 0x80
 801ca80:	6830      	ldr	r0, [r6, #0]
 801ca82:	d01d      	beq.n	801cac0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801ca84:	2200      	movs	r2, #0
 801ca86:	6801      	ldr	r1, [r0, #0]
 801ca88:	b2a4      	uxth	r4, r4
 801ca8a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801ca8e:	b2ad      	uxth	r5, r5
 801ca90:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801ca94:	220b      	movs	r2, #11
 801ca96:	9207      	str	r2, [sp, #28]
 801ca98:	883a      	ldrh	r2, [r7, #0]
 801ca9a:	9502      	str	r5, [sp, #8]
 801ca9c:	9206      	str	r2, [sp, #24]
 801ca9e:	2201      	movs	r2, #1
 801caa0:	9401      	str	r4, [sp, #4]
 801caa2:	e9cd a204 	strd	sl, r2, [sp, #16]
 801caa6:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801caaa:	9203      	str	r2, [sp, #12]
 801caac:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801cab0:	9200      	str	r2, [sp, #0]
 801cab2:	4642      	mov	r2, r8
 801cab4:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801cab6:	4649      	mov	r1, r9
 801cab8:	47a0      	blx	r4
 801caba:	b013      	add	sp, #76	; 0x4c
 801cabc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cac0:	6803      	ldr	r3, [r0, #0]
 801cac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cac4:	4798      	blx	r3
 801cac6:	883b      	ldrh	r3, [r7, #0]
 801cac8:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801cacc:	f04f 0e04 	mov.w	lr, #4
 801cad0:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801cad4:	435d      	muls	r5, r3
 801cad6:	fb03 1202 	mla	r2, r3, r2, r1
 801cada:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801cade:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801cae2:	920c      	str	r2, [sp, #48]	; 0x30
 801cae4:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801cae8:	1b12      	subs	r2, r2, r4
 801caea:	920d      	str	r2, [sp, #52]	; 0x34
 801caec:	0062      	lsls	r2, r4, #1
 801caee:	1b1c      	subs	r4, r3, r4
 801caf0:	920a      	str	r2, [sp, #40]	; 0x28
 801caf2:	0063      	lsls	r3, r4, #1
 801caf4:	930b      	str	r3, [sp, #44]	; 0x2c
 801caf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801caf8:	4298      	cmp	r0, r3
 801cafa:	d266      	bcs.n	801cbca <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 801cafc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cafe:	eb00 0b03 	add.w	fp, r0, r3
 801cb02:	4558      	cmp	r0, fp
 801cb04:	d25c      	bcs.n	801cbc0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801cb06:	f819 3b01 	ldrb.w	r3, [r9], #1
 801cb0a:	fb1e e303 	smlabb	r3, lr, r3, lr
 801cb0e:	f858 2003 	ldr.w	r2, [r8, r3]
 801cb12:	0e11      	lsrs	r1, r2, #24
 801cb14:	d012      	beq.n	801cb3c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801cb16:	29ff      	cmp	r1, #255	; 0xff
 801cb18:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801cb1c:	d110      	bne.n	801cb40 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801cb1e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801cb22:	d10d      	bne.n	801cb40 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801cb24:	0953      	lsrs	r3, r2, #5
 801cb26:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801cb2a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801cb2e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801cb32:	f027 0707 	bic.w	r7, r7, #7
 801cb36:	431f      	orrs	r7, r3
 801cb38:	433a      	orrs	r2, r7
 801cb3a:	8002      	strh	r2, [r0, #0]
 801cb3c:	3002      	adds	r0, #2
 801cb3e:	e7e0      	b.n	801cb02 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801cb40:	fb0a f101 	mul.w	r1, sl, r1
 801cb44:	8806      	ldrh	r6, [r0, #0]
 801cb46:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801cb4a:	b2d2      	uxtb	r2, r2
 801cb4c:	1c4b      	adds	r3, r1, #1
 801cb4e:	1235      	asrs	r5, r6, #8
 801cb50:	10f4      	asrs	r4, r6, #3
 801cb52:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801cb56:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801cb5a:	00f6      	lsls	r6, r6, #3
 801cb5c:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801cb60:	121b      	asrs	r3, r3, #8
 801cb62:	b2f6      	uxtb	r6, r6
 801cb64:	b299      	uxth	r1, r3
 801cb66:	43db      	mvns	r3, r3
 801cb68:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801cb6c:	fb1c fc01 	smulbb	ip, ip, r1
 801cb70:	b2db      	uxtb	r3, r3
 801cb72:	fb12 f201 	smulbb	r2, r2, r1
 801cb76:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801cb7a:	fb05 c503 	mla	r5, r5, r3, ip
 801cb7e:	b2ff      	uxtb	r7, r7
 801cb80:	fb06 2203 	mla	r2, r6, r3, r2
 801cb84:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801cb88:	fb17 f701 	smulbb	r7, r7, r1
 801cb8c:	b2ad      	uxth	r5, r5
 801cb8e:	b292      	uxth	r2, r2
 801cb90:	fb04 7403 	mla	r4, r4, r3, r7
 801cb94:	f105 0c01 	add.w	ip, r5, #1
 801cb98:	1c57      	adds	r7, r2, #1
 801cb9a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801cb9e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801cba2:	b2a4      	uxth	r4, r4
 801cba4:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801cba8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801cbac:	433d      	orrs	r5, r7
 801cbae:	1c67      	adds	r7, r4, #1
 801cbb0:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801cbb4:	0964      	lsrs	r4, r4, #5
 801cbb6:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801cbba:	4325      	orrs	r5, r4
 801cbbc:	8005      	strh	r5, [r0, #0]
 801cbbe:	e7bd      	b.n	801cb3c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801cbc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cbc2:	4418      	add	r0, r3
 801cbc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cbc6:	4499      	add	r9, r3
 801cbc8:	e795      	b.n	801caf6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801cbca:	4b04      	ldr	r3, [pc, #16]	; (801cbdc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801cbcc:	6818      	ldr	r0, [r3, #0]
 801cbce:	6803      	ldr	r3, [r0, #0]
 801cbd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cbd2:	4798      	blx	r3
 801cbd4:	e771      	b.n	801caba <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 801cbd6:	bf00      	nop
 801cbd8:	2400b07e 	.word	0x2400b07e
 801cbdc:	2400b084 	.word	0x2400b084

0801cbe0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801cbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbe4:	b087      	sub	sp, #28
 801cbe6:	4680      	mov	r8, r0
 801cbe8:	460d      	mov	r5, r1
 801cbea:	4614      	mov	r4, r2
 801cbec:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801cbf0:	2e00      	cmp	r6, #0
 801cbf2:	f000 80b9 	beq.w	801cd68 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 801cbf6:	6810      	ldr	r0, [r2, #0]
 801cbf8:	af02      	add	r7, sp, #8
 801cbfa:	6851      	ldr	r1, [r2, #4]
 801cbfc:	c703      	stmia	r7!, {r0, r1}
 801cbfe:	6818      	ldr	r0, [r3, #0]
 801cc00:	af04      	add	r7, sp, #16
 801cc02:	6859      	ldr	r1, [r3, #4]
 801cc04:	c703      	stmia	r7!, {r0, r1}
 801cc06:	a802      	add	r0, sp, #8
 801cc08:	f7f9 fa10 	bl	801602c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cc0c:	4621      	mov	r1, r4
 801cc0e:	a804      	add	r0, sp, #16
 801cc10:	f7f9 fa34 	bl	801607c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cc14:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801cc18:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801cc1c:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801cc20:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801cc24:	fb14 2103 	smlabb	r1, r4, r3, r2
 801cc28:	eb08 0401 	add.w	r4, r8, r1
 801cc2c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801cc30:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801cc34:	440a      	add	r2, r1
 801cc36:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801cc3a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801cc3e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801cc42:	4413      	add	r3, r2
 801cc44:	f8ad 3012 	strh.w	r3, [sp, #18]
 801cc48:	4b49      	ldr	r3, [pc, #292]	; (801cd70 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801cc4a:	6818      	ldr	r0, [r3, #0]
 801cc4c:	6803      	ldr	r3, [r0, #0]
 801cc4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cc50:	4798      	blx	r3
 801cc52:	4b48      	ldr	r3, [pc, #288]	; (801cd74 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 801cc54:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801cc58:	2eff      	cmp	r6, #255	; 0xff
 801cc5a:	881a      	ldrh	r2, [r3, #0]
 801cc5c:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801cc60:	fb02 c101 	mla	r1, r2, r1, ip
 801cc64:	fb02 f207 	mul.w	r2, r2, r7
 801cc68:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801cc6c:	f105 0104 	add.w	r1, r5, #4
 801cc70:	461d      	mov	r5, r3
 801cc72:	d05a      	beq.n	801cd2a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 801cc74:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801cc78:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801cc7c:	b2b6      	uxth	r6, r6
 801cc7e:	9301      	str	r3, [sp, #4]
 801cc80:	fa1f fe8e 	uxth.w	lr, lr
 801cc84:	4282      	cmp	r2, r0
 801cc86:	d96a      	bls.n	801cd5e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801cc88:	eb00 0b0a 	add.w	fp, r0, sl
 801cc8c:	4583      	cmp	fp, r0
 801cc8e:	d940      	bls.n	801cd12 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 801cc90:	8805      	ldrh	r5, [r0, #0]
 801cc92:	f814 3b01 	ldrb.w	r3, [r4], #1
 801cc96:	122f      	asrs	r7, r5, #8
 801cc98:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801cc9c:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801cca0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801cca4:	00ed      	lsls	r5, r5, #3
 801cca6:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801ccaa:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801ccae:	fb17 f70e 	smulbb	r7, r7, lr
 801ccb2:	b2ed      	uxtb	r5, r5
 801ccb4:	fb19 f90e 	smulbb	r9, r9, lr
 801ccb8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ccbc:	fb15 f50e 	smulbb	r5, r5, lr
 801ccc0:	fb0c 7c06 	mla	ip, ip, r6, r7
 801ccc4:	10df      	asrs	r7, r3, #3
 801ccc6:	00db      	lsls	r3, r3, #3
 801ccc8:	fa1f fc8c 	uxth.w	ip, ip
 801cccc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ccd0:	b2db      	uxtb	r3, r3
 801ccd2:	fb07 9706 	mla	r7, r7, r6, r9
 801ccd6:	f10c 0901 	add.w	r9, ip, #1
 801ccda:	fb03 5306 	mla	r3, r3, r6, r5
 801ccde:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801cce2:	b29b      	uxth	r3, r3
 801cce4:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801cce8:	b2bf      	uxth	r7, r7
 801ccea:	f103 0c01 	add.w	ip, r3, #1
 801ccee:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801ccf2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801ccf6:	ea4c 0c09 	orr.w	ip, ip, r9
 801ccfa:	f107 0901 	add.w	r9, r7, #1
 801ccfe:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801cd02:	097f      	lsrs	r7, r7, #5
 801cd04:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801cd08:	ea4c 0c07 	orr.w	ip, ip, r7
 801cd0c:	f820 cb02 	strh.w	ip, [r0], #2
 801cd10:	e7bc      	b.n	801cc8c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 801cd12:	9b01      	ldr	r3, [sp, #4]
 801cd14:	881b      	ldrh	r3, [r3, #0]
 801cd16:	eba3 0308 	sub.w	r3, r3, r8
 801cd1a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801cd1e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801cd22:	eba3 0308 	sub.w	r3, r3, r8
 801cd26:	441c      	add	r4, r3
 801cd28:	e7ac      	b.n	801cc84 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801cd2a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801cd2e:	4282      	cmp	r2, r0
 801cd30:	d915      	bls.n	801cd5e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801cd32:	eb00 060a 	add.w	r6, r0, sl
 801cd36:	4286      	cmp	r6, r0
 801cd38:	d906      	bls.n	801cd48 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801cd3a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801cd3e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801cd42:	f820 3b02 	strh.w	r3, [r0], #2
 801cd46:	e7f6      	b.n	801cd36 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 801cd48:	882b      	ldrh	r3, [r5, #0]
 801cd4a:	eba3 0308 	sub.w	r3, r3, r8
 801cd4e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801cd52:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801cd56:	eba3 0308 	sub.w	r3, r3, r8
 801cd5a:	441c      	add	r4, r3
 801cd5c:	e7e7      	b.n	801cd2e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801cd5e:	4b04      	ldr	r3, [pc, #16]	; (801cd70 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801cd60:	6818      	ldr	r0, [r3, #0]
 801cd62:	6803      	ldr	r3, [r0, #0]
 801cd64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cd66:	4798      	blx	r3
 801cd68:	b007      	add	sp, #28
 801cd6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd6e:	bf00      	nop
 801cd70:	2400b084 	.word	0x2400b084
 801cd74:	2400b07e 	.word	0x2400b07e

0801cd78 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801cd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd7c:	b091      	sub	sp, #68	; 0x44
 801cd7e:	4680      	mov	r8, r0
 801cd80:	460f      	mov	r7, r1
 801cd82:	4614      	mov	r4, r2
 801cd84:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801cd88:	2d00      	cmp	r5, #0
 801cd8a:	d051      	beq.n	801ce30 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801cd8c:	6810      	ldr	r0, [r2, #0]
 801cd8e:	ae0c      	add	r6, sp, #48	; 0x30
 801cd90:	6851      	ldr	r1, [r2, #4]
 801cd92:	f8df 9200 	ldr.w	r9, [pc, #512]	; 801cf94 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 801cd96:	c603      	stmia	r6!, {r0, r1}
 801cd98:	6818      	ldr	r0, [r3, #0]
 801cd9a:	ae0e      	add	r6, sp, #56	; 0x38
 801cd9c:	6859      	ldr	r1, [r3, #4]
 801cd9e:	c603      	stmia	r6!, {r0, r1}
 801cda0:	a80c      	add	r0, sp, #48	; 0x30
 801cda2:	f7f9 f943 	bl	801602c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cda6:	4621      	mov	r1, r4
 801cda8:	a80e      	add	r0, sp, #56	; 0x38
 801cdaa:	f7f9 f967 	bl	801607c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cdae:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801cdb2:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801cdb6:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801cdba:	f8d9 0000 	ldr.w	r0, [r9]
 801cdbe:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cdc2:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801cdc6:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801cdca:	eb08 0401 	add.w	r4, r8, r1
 801cdce:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801cdd2:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 801cf98 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 801cdd6:	440a      	add	r2, r1
 801cdd8:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801cddc:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801cde0:	4413      	add	r3, r2
 801cde2:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801cde6:	6803      	ldr	r3, [r0, #0]
 801cde8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cdea:	4798      	blx	r3
 801cdec:	f010 0f80 	tst.w	r0, #128	; 0x80
 801cdf0:	f8d9 0000 	ldr.w	r0, [r9]
 801cdf4:	d01f      	beq.n	801ce36 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 801cdf6:	2200      	movs	r2, #0
 801cdf8:	6801      	ldr	r1, [r0, #0]
 801cdfa:	b2b6      	uxth	r6, r6
 801cdfc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801ce00:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801ce04:	220b      	movs	r2, #11
 801ce06:	9207      	str	r2, [sp, #28]
 801ce08:	f8b8 2000 	ldrh.w	r2, [r8]
 801ce0c:	9601      	str	r6, [sp, #4]
 801ce0e:	9206      	str	r2, [sp, #24]
 801ce10:	2201      	movs	r2, #1
 801ce12:	e9cd 5204 	strd	r5, r2, [sp, #16]
 801ce16:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801ce1a:	9203      	str	r2, [sp, #12]
 801ce1c:	fa1f f28a 	uxth.w	r2, sl
 801ce20:	9202      	str	r2, [sp, #8]
 801ce22:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801ce26:	9200      	str	r2, [sp, #0]
 801ce28:	463a      	mov	r2, r7
 801ce2a:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801ce2c:	4621      	mov	r1, r4
 801ce2e:	47a8      	blx	r5
 801ce30:	b011      	add	sp, #68	; 0x44
 801ce32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce36:	6803      	ldr	r3, [r0, #0]
 801ce38:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801ce3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ce3e:	4798      	blx	r3
 801ce40:	f8b8 2000 	ldrh.w	r2, [r8]
 801ce44:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801ce48:	2dff      	cmp	r5, #255	; 0xff
 801ce4a:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801ce4e:	fb0a fa02 	mul.w	sl, sl, r2
 801ce52:	fb02 1303 	mla	r3, r2, r3, r1
 801ce56:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ce5a:	d062      	beq.n	801cf22 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801ce5c:	ea6f 0c05 	mvn.w	ip, r5
 801ce60:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801ce64:	b2ad      	uxth	r5, r5
 801ce66:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801ce6a:	fa5f fc8c 	uxtb.w	ip, ip
 801ce6e:	930a      	str	r3, [sp, #40]	; 0x28
 801ce70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ce72:	4298      	cmp	r0, r3
 801ce74:	f080 8085 	bcs.w	801cf82 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801ce78:	eb00 0b09 	add.w	fp, r0, r9
 801ce7c:	4558      	cmp	r0, fp
 801ce7e:	d246      	bcs.n	801cf0e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801ce80:	f814 eb01 	ldrb.w	lr, [r4], #1
 801ce84:	2303      	movs	r3, #3
 801ce86:	2204      	movs	r2, #4
 801ce88:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801ce8c:	8803      	ldrh	r3, [r0, #0]
 801ce8e:	eb07 0a0e 	add.w	sl, r7, lr
 801ce92:	1219      	asrs	r1, r3, #8
 801ce94:	10da      	asrs	r2, r3, #3
 801ce96:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801ce9a:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801ce9e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801cea2:	00db      	lsls	r3, r3, #3
 801cea4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801cea8:	fb18 f805 	smulbb	r8, r8, r5
 801ceac:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801ceb0:	fb1e fe05 	smulbb	lr, lr, r5
 801ceb4:	b2db      	uxtb	r3, r3
 801ceb6:	fb01 810c 	mla	r1, r1, ip, r8
 801ceba:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801cebe:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801cec2:	fb18 f805 	smulbb	r8, r8, r5
 801cec6:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801ceca:	b289      	uxth	r1, r1
 801cecc:	fb02 820c 	mla	r2, r2, ip, r8
 801ced0:	fb03 e30c 	mla	r3, r3, ip, lr
 801ced4:	f101 0801 	add.w	r8, r1, #1
 801ced8:	b292      	uxth	r2, r2
 801ceda:	b29b      	uxth	r3, r3
 801cedc:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801cee0:	f102 0801 	add.w	r8, r2, #1
 801cee4:	f103 0e01 	add.w	lr, r3, #1
 801cee8:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801ceec:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801cef0:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801cef4:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801cef8:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801cefc:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801cf00:	ea4e 0101 	orr.w	r1, lr, r1
 801cf04:	ea41 0108 	orr.w	r1, r1, r8
 801cf08:	f820 1b02 	strh.w	r1, [r0], #2
 801cf0c:	e7b6      	b.n	801ce7c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 801cf0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cf10:	881b      	ldrh	r3, [r3, #0]
 801cf12:	1b9b      	subs	r3, r3, r6
 801cf14:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801cf18:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801cf1c:	1b9b      	subs	r3, r3, r6
 801cf1e:	441c      	add	r4, r3
 801cf20:	e7a6      	b.n	801ce70 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 801cf22:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801cf26:	2203      	movs	r2, #3
 801cf28:	2504      	movs	r5, #4
 801cf2a:	4919      	ldr	r1, [pc, #100]	; (801cf90 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 801cf2c:	4550      	cmp	r0, sl
 801cf2e:	d228      	bcs.n	801cf82 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801cf30:	eb00 0c09 	add.w	ip, r0, r9
 801cf34:	4560      	cmp	r0, ip
 801cf36:	4623      	mov	r3, r4
 801cf38:	d219      	bcs.n	801cf6e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801cf3a:	f893 e000 	ldrb.w	lr, [r3]
 801cf3e:	3401      	adds	r4, #1
 801cf40:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801cf44:	eb07 0b0e 	add.w	fp, r7, lr
 801cf48:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801cf4c:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801cf50:	f89b b001 	ldrb.w	fp, [fp, #1]
 801cf54:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801cf58:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801cf5c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801cf60:	ea43 030b 	orr.w	r3, r3, fp
 801cf64:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801cf68:	f820 3b02 	strh.w	r3, [r0], #2
 801cf6c:	e7e2      	b.n	801cf34 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801cf6e:	f8b8 3000 	ldrh.w	r3, [r8]
 801cf72:	1b9b      	subs	r3, r3, r6
 801cf74:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801cf78:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801cf7c:	1b9b      	subs	r3, r3, r6
 801cf7e:	441c      	add	r4, r3
 801cf80:	e7d4      	b.n	801cf2c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801cf82:	4b04      	ldr	r3, [pc, #16]	; (801cf94 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801cf84:	6818      	ldr	r0, [r3, #0]
 801cf86:	6803      	ldr	r3, [r0, #0]
 801cf88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cf8a:	4798      	blx	r3
 801cf8c:	e750      	b.n	801ce30 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801cf8e:	bf00      	nop
 801cf90:	fffff800 	.word	0xfffff800
 801cf94:	2400b084 	.word	0x2400b084
 801cf98:	2400b07e 	.word	0x2400b07e

0801cf9c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801cf9c:	b430      	push	{r4, r5}
 801cf9e:	780d      	ldrb	r5, [r1, #0]
 801cfa0:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801cfa4:	2d01      	cmp	r5, #1
 801cfa6:	d00a      	beq.n	801cfbe <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801cfa8:	d305      	bcc.n	801cfb6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801cfaa:	2d02      	cmp	r5, #2
 801cfac:	d10b      	bne.n	801cfc6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801cfae:	9402      	str	r4, [sp, #8]
 801cfb0:	bc30      	pop	{r4, r5}
 801cfb2:	f7ff be15 	b.w	801cbe0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801cfb6:	9402      	str	r4, [sp, #8]
 801cfb8:	bc30      	pop	{r4, r5}
 801cfba:	f7ff bd2b 	b.w	801ca14 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801cfbe:	9402      	str	r4, [sp, #8]
 801cfc0:	bc30      	pop	{r4, r5}
 801cfc2:	f7ff bed9 	b.w	801cd78 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801cfc6:	bc30      	pop	{r4, r5}
 801cfc8:	4770      	bx	lr
	...

0801cfcc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801cfcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfd0:	b087      	sub	sp, #28
 801cfd2:	4604      	mov	r4, r0
 801cfd4:	460e      	mov	r6, r1
 801cfd6:	6810      	ldr	r0, [r2, #0]
 801cfd8:	6851      	ldr	r1, [r2, #4]
 801cfda:	ad02      	add	r5, sp, #8
 801cfdc:	4617      	mov	r7, r2
 801cfde:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801cfe2:	f8df 9230 	ldr.w	r9, [pc, #560]	; 801d214 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801cfe6:	c503      	stmia	r5!, {r0, r1}
 801cfe8:	6818      	ldr	r0, [r3, #0]
 801cfea:	ad04      	add	r5, sp, #16
 801cfec:	6859      	ldr	r1, [r3, #4]
 801cfee:	c503      	stmia	r5!, {r0, r1}
 801cff0:	a802      	add	r0, sp, #8
 801cff2:	f7f9 f81b 	bl	801602c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cff6:	4639      	mov	r1, r7
 801cff8:	a804      	add	r0, sp, #16
 801cffa:	f7f9 f83f 	bl	801607c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cffe:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d002:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d006:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801d00a:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801d00e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d012:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801d016:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801d01a:	440e      	add	r6, r1
 801d01c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801d020:	440a      	add	r2, r1
 801d022:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d026:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d02a:	4413      	add	r3, r2
 801d02c:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d030:	4b77      	ldr	r3, [pc, #476]	; (801d210 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801d032:	6818      	ldr	r0, [r3, #0]
 801d034:	6803      	ldr	r3, [r0, #0]
 801d036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d038:	4798      	blx	r3
 801d03a:	f8b9 b000 	ldrh.w	fp, [r9]
 801d03e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d042:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801d046:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d04a:	fb05 f50b 	mul.w	r5, r5, fp
 801d04e:	fb0b 2303 	mla	r3, fp, r3, r2
 801d052:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d056:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801d05a:	9300      	str	r3, [sp, #0]
 801d05c:	d069      	beq.n	801d132 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801d05e:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801d062:	4558      	cmp	r0, fp
 801d064:	f080 80cc 	bcs.w	801d200 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801d068:	9b00      	ldr	r3, [sp, #0]
 801d06a:	4631      	mov	r1, r6
 801d06c:	18c3      	adds	r3, r0, r3
 801d06e:	9301      	str	r3, [sp, #4]
 801d070:	9b01      	ldr	r3, [sp, #4]
 801d072:	4298      	cmp	r0, r3
 801d074:	d24f      	bcs.n	801d116 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801d076:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d07a:	2a00      	cmp	r2, #0
 801d07c:	d048      	beq.n	801d110 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801d07e:	fb0a f202 	mul.w	r2, sl, r2
 801d082:	1c53      	adds	r3, r2, #1
 801d084:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d088:	121b      	asrs	r3, r3, #8
 801d08a:	d041      	beq.n	801d110 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801d08c:	8802      	ldrh	r2, [r0, #0]
 801d08e:	b29e      	uxth	r6, r3
 801d090:	f8b4 c000 	ldrh.w	ip, [r4]
 801d094:	43db      	mvns	r3, r3
 801d096:	1215      	asrs	r5, r2, #8
 801d098:	b2db      	uxtb	r3, r3
 801d09a:	ea4f 272c 	mov.w	r7, ip, asr #8
 801d09e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801d0a2:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801d0a6:	fb15 f503 	smulbb	r5, r5, r3
 801d0aa:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d0ae:	00d2      	lsls	r2, r2, #3
 801d0b0:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801d0b4:	fb07 5706 	mla	r7, r7, r6, r5
 801d0b8:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801d0bc:	b2d2      	uxtb	r2, r2
 801d0be:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801d0c2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d0c6:	fb1e fe03 	smulbb	lr, lr, r3
 801d0ca:	b2bf      	uxth	r7, r7
 801d0cc:	fb12 f203 	smulbb	r2, r2, r3
 801d0d0:	fa5f fc8c 	uxtb.w	ip, ip
 801d0d4:	fb05 e506 	mla	r5, r5, r6, lr
 801d0d8:	f107 0e01 	add.w	lr, r7, #1
 801d0dc:	fb0c 2c06 	mla	ip, ip, r6, r2
 801d0e0:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801d0e4:	fa1f fc8c 	uxth.w	ip, ip
 801d0e8:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 801d0ec:	b2ad      	uxth	r5, r5
 801d0ee:	f10c 0701 	add.w	r7, ip, #1
 801d0f2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801d0f6:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d0fa:	ea47 070e 	orr.w	r7, r7, lr
 801d0fe:	f105 0e01 	add.w	lr, r5, #1
 801d102:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801d106:	096d      	lsrs	r5, r5, #5
 801d108:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d10c:	432f      	orrs	r7, r5
 801d10e:	8007      	strh	r7, [r0, #0]
 801d110:	3002      	adds	r0, #2
 801d112:	3402      	adds	r4, #2
 801d114:	e7ac      	b.n	801d070 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801d116:	f8b9 3000 	ldrh.w	r3, [r9]
 801d11a:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801d11e:	eba3 0308 	sub.w	r3, r3, r8
 801d122:	eba6 0608 	sub.w	r6, r6, r8
 801d126:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d12a:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801d12e:	440e      	add	r6, r1
 801d130:	e797      	b.n	801d062 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801d132:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801d136:	42a8      	cmp	r0, r5
 801d138:	d262      	bcs.n	801d200 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801d13a:	9b00      	ldr	r3, [sp, #0]
 801d13c:	4631      	mov	r1, r6
 801d13e:	eb00 0b03 	add.w	fp, r0, r3
 801d142:	4558      	cmp	r0, fp
 801d144:	d24e      	bcs.n	801d1e4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801d146:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d14a:	b12b      	cbz	r3, 801d158 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801d14c:	2bff      	cmp	r3, #255	; 0xff
 801d14e:	f8b4 e000 	ldrh.w	lr, [r4]
 801d152:	d104      	bne.n	801d15e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801d154:	f8a0 e000 	strh.w	lr, [r0]
 801d158:	3002      	adds	r0, #2
 801d15a:	3402      	adds	r4, #2
 801d15c:	e7f1      	b.n	801d142 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801d15e:	8802      	ldrh	r2, [r0, #0]
 801d160:	b29f      	uxth	r7, r3
 801d162:	43db      	mvns	r3, r3
 801d164:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801d168:	1216      	asrs	r6, r2, #8
 801d16a:	b2db      	uxtb	r3, r3
 801d16c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d170:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801d174:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801d178:	00d2      	lsls	r2, r2, #3
 801d17a:	fb16 f603 	smulbb	r6, r6, r3
 801d17e:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801d182:	b2d2      	uxtb	r2, r2
 801d184:	fb0c 6c07 	mla	ip, ip, r7, r6
 801d188:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801d18c:	fb1a fa03 	smulbb	sl, sl, r3
 801d190:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d194:	fa1f fc8c 	uxth.w	ip, ip
 801d198:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d19c:	fb12 f303 	smulbb	r3, r2, r3
 801d1a0:	fa5f fe8e 	uxtb.w	lr, lr
 801d1a4:	fb06 a607 	mla	r6, r6, r7, sl
 801d1a8:	f10c 0201 	add.w	r2, ip, #1
 801d1ac:	fb0e 3307 	mla	r3, lr, r7, r3
 801d1b0:	b2b6      	uxth	r6, r6
 801d1b2:	b29b      	uxth	r3, r3
 801d1b4:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801d1b8:	f106 0a01 	add.w	sl, r6, #1
 801d1bc:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 801d1c0:	f103 0c01 	add.w	ip, r3, #1
 801d1c4:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801d1c8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801d1cc:	0976      	lsrs	r6, r6, #5
 801d1ce:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801d1d2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d1d6:	ea4c 0c02 	orr.w	ip, ip, r2
 801d1da:	ea4c 0c06 	orr.w	ip, ip, r6
 801d1de:	f8a0 c000 	strh.w	ip, [r0]
 801d1e2:	e7b9      	b.n	801d158 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801d1e4:	f8b9 3000 	ldrh.w	r3, [r9]
 801d1e8:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801d1ec:	eba3 0308 	sub.w	r3, r3, r8
 801d1f0:	eba6 0608 	sub.w	r6, r6, r8
 801d1f4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d1f8:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801d1fc:	440e      	add	r6, r1
 801d1fe:	e79a      	b.n	801d136 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801d200:	4b03      	ldr	r3, [pc, #12]	; (801d210 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801d202:	6818      	ldr	r0, [r3, #0]
 801d204:	6803      	ldr	r3, [r0, #0]
 801d206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d208:	4798      	blx	r3
 801d20a:	b007      	add	sp, #28
 801d20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d210:	2400b084 	.word	0x2400b084
 801d214:	2400b07e 	.word	0x2400b07e

0801d218 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801d218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d21c:	b089      	sub	sp, #36	; 0x24
 801d21e:	4682      	mov	sl, r0
 801d220:	460f      	mov	r7, r1
 801d222:	4691      	mov	r9, r2
 801d224:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801d228:	4698      	mov	r8, r3
 801d22a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d22c:	2e00      	cmp	r6, #0
 801d22e:	d036      	beq.n	801d29e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d230:	4608      	mov	r0, r1
 801d232:	f7fc f86b 	bl	801930c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d236:	4605      	mov	r5, r0
 801d238:	4638      	mov	r0, r7
 801d23a:	f7fc f89b 	bl	8019374 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d23e:	f8ad 000e 	strh.w	r0, [sp, #14]
 801d242:	4638      	mov	r0, r7
 801d244:	f8ad 9008 	strh.w	r9, [sp, #8]
 801d248:	f8ad 500c 	strh.w	r5, [sp, #12]
 801d24c:	f8ad 800a 	strh.w	r8, [sp, #10]
 801d250:	f7fc f948 	bl	80194e4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d254:	4605      	mov	r5, r0
 801d256:	4638      	mov	r0, r7
 801d258:	f7fc f974 	bl	8019544 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801d25c:	4681      	mov	r9, r0
 801d25e:	4638      	mov	r0, r7
 801d260:	f7fc f9c4 	bl	80195ec <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d264:	280b      	cmp	r0, #11
 801d266:	d81a      	bhi.n	801d29e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d268:	e8df f000 	tbb	[pc, r0]
 801d26c:	1906aebd 	.word	0x1906aebd
 801d270:	19191919 	.word	0x19191919
 801d274:	b5191919 	.word	0xb5191919
 801d278:	4bb0      	ldr	r3, [pc, #704]	; (801d53c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 801d27a:	6818      	ldr	r0, [r3, #0]
 801d27c:	6803      	ldr	r3, [r0, #0]
 801d27e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d280:	4798      	blx	r3
 801d282:	2eff      	cmp	r6, #255	; 0xff
 801d284:	d121      	bne.n	801d2ca <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801d286:	0683      	lsls	r3, r0, #26
 801d288:	d41f      	bmi.n	801d2ca <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801d28a:	4638      	mov	r0, r7
 801d28c:	f7fc f8f2 	bl	8019474 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801d290:	b940      	cbnz	r0, 801d2a4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 801d292:	4623      	mov	r3, r4
 801d294:	aa02      	add	r2, sp, #8
 801d296:	4629      	mov	r1, r5
 801d298:	4650      	mov	r0, sl
 801d29a:	f7ff fa2f 	bl	801c6fc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801d29e:	b009      	add	sp, #36	; 0x24
 801d2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2a4:	f10d 0818 	add.w	r8, sp, #24
 801d2a8:	4639      	mov	r1, r7
 801d2aa:	af04      	add	r7, sp, #16
 801d2ac:	4640      	mov	r0, r8
 801d2ae:	f7fc f895 	bl	80193dc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801d2b2:	e898 0003 	ldmia.w	r8, {r0, r1}
 801d2b6:	e887 0003 	stmia.w	r7, {r0, r1}
 801d2ba:	4638      	mov	r0, r7
 801d2bc:	4621      	mov	r1, r4
 801d2be:	f7f5 fe47 	bl	8012f50 <_ZN8touchgfx4RectaNERKS0_>
 801d2c2:	4638      	mov	r0, r7
 801d2c4:	f7f5 fe87 	bl	8012fd6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801d2c8:	b130      	cbz	r0, 801d2d8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801d2ca:	4633      	mov	r3, r6
 801d2cc:	4622      	mov	r2, r4
 801d2ce:	a902      	add	r1, sp, #8
 801d2d0:	4628      	mov	r0, r5
 801d2d2:	f7ff f92d 	bl	801c530 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d2d6:	e7e2      	b.n	801d29e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d2d8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d2dc:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d2e0:	4293      	cmp	r3, r2
 801d2e2:	dd12      	ble.n	801d30a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 801d2e4:	1a9b      	subs	r3, r3, r2
 801d2e6:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d2ea:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d2ee:	f8ad 0018 	strh.w	r0, [sp, #24]
 801d2f2:	4628      	mov	r0, r5
 801d2f4:	f8ad 201a 	strh.w	r2, [sp, #26]
 801d2f8:	4642      	mov	r2, r8
 801d2fa:	f8ad 101c 	strh.w	r1, [sp, #28]
 801d2fe:	a902      	add	r1, sp, #8
 801d300:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d304:	4633      	mov	r3, r6
 801d306:	f7ff f913 	bl	801c530 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d30a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801d30e:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d312:	4293      	cmp	r3, r2
 801d314:	dd12      	ble.n	801d33c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 801d316:	1a9b      	subs	r3, r3, r2
 801d318:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801d31c:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801d320:	f8ad 2018 	strh.w	r2, [sp, #24]
 801d324:	4642      	mov	r2, r8
 801d326:	f8ad 001a 	strh.w	r0, [sp, #26]
 801d32a:	4628      	mov	r0, r5
 801d32c:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d330:	23ff      	movs	r3, #255	; 0xff
 801d332:	f8ad 101e 	strh.w	r1, [sp, #30]
 801d336:	a902      	add	r1, sp, #8
 801d338:	f7ff f8fa 	bl	801c530 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d33c:	463b      	mov	r3, r7
 801d33e:	aa02      	add	r2, sp, #8
 801d340:	4629      	mov	r1, r5
 801d342:	4650      	mov	r0, sl
 801d344:	f7ff f9da 	bl	801c6fc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801d348:	88a2      	ldrh	r2, [r4, #4]
 801d34a:	8823      	ldrh	r3, [r4, #0]
 801d34c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801d350:	4413      	add	r3, r2
 801d352:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d356:	440a      	add	r2, r1
 801d358:	b29b      	uxth	r3, r3
 801d35a:	b292      	uxth	r2, r2
 801d35c:	b218      	sxth	r0, r3
 801d35e:	b211      	sxth	r1, r2
 801d360:	4288      	cmp	r0, r1
 801d362:	dd12      	ble.n	801d38a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 801d364:	1a9b      	subs	r3, r3, r2
 801d366:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801d36a:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801d36e:	4642      	mov	r2, r8
 801d370:	f8ad 1018 	strh.w	r1, [sp, #24]
 801d374:	a902      	add	r1, sp, #8
 801d376:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d37a:	23ff      	movs	r3, #255	; 0xff
 801d37c:	f8ad 001e 	strh.w	r0, [sp, #30]
 801d380:	4628      	mov	r0, r5
 801d382:	f8ad 601a 	strh.w	r6, [sp, #26]
 801d386:	f7ff f8d3 	bl	801c530 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d38a:	88e2      	ldrh	r2, [r4, #6]
 801d38c:	8863      	ldrh	r3, [r4, #2]
 801d38e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801d392:	4413      	add	r3, r2
 801d394:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801d398:	440a      	add	r2, r1
 801d39a:	b29b      	uxth	r3, r3
 801d39c:	b292      	uxth	r2, r2
 801d39e:	b218      	sxth	r0, r3
 801d3a0:	b211      	sxth	r1, r2
 801d3a2:	4288      	cmp	r0, r1
 801d3a4:	f77f af7b 	ble.w	801d29e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d3a8:	1a9b      	subs	r3, r3, r2
 801d3aa:	f9b4 6000 	ldrsh.w	r6, [r4]
 801d3ae:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d3b2:	4642      	mov	r2, r8
 801d3b4:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d3b8:	23ff      	movs	r3, #255	; 0xff
 801d3ba:	f8ad 6018 	strh.w	r6, [sp, #24]
 801d3be:	f8ad 101a 	strh.w	r1, [sp, #26]
 801d3c2:	f8ad 001c 	strh.w	r0, [sp, #28]
 801d3c6:	e782      	b.n	801d2ce <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 801d3c8:	4633      	mov	r3, r6
 801d3ca:	4622      	mov	r2, r4
 801d3cc:	a902      	add	r1, sp, #8
 801d3ce:	4628      	mov	r0, r5
 801d3d0:	f7ff fa04 	bl	801c7dc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801d3d4:	e763      	b.n	801d29e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d3d6:	9600      	str	r6, [sp, #0]
 801d3d8:	4623      	mov	r3, r4
 801d3da:	aa02      	add	r2, sp, #8
 801d3dc:	4649      	mov	r1, r9
 801d3de:	4628      	mov	r0, r5
 801d3e0:	f7ff fddc 	bl	801cf9c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801d3e4:	e75b      	b.n	801d29e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d3e6:	4638      	mov	r0, r7
 801d3e8:	f7fc f844 	bl	8019474 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801d3ec:	b950      	cbnz	r0, 801d404 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 801d3ee:	f8da 3000 	ldr.w	r3, [sl]
 801d3f2:	aa02      	add	r2, sp, #8
 801d3f4:	4629      	mov	r1, r5
 801d3f6:	e9cd 6000 	strd	r6, r0, [sp]
 801d3fa:	4650      	mov	r0, sl
 801d3fc:	68de      	ldr	r6, [r3, #12]
 801d3fe:	4623      	mov	r3, r4
 801d400:	47b0      	blx	r6
 801d402:	e74c      	b.n	801d29e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d404:	f10d 0818 	add.w	r8, sp, #24
 801d408:	4639      	mov	r1, r7
 801d40a:	af04      	add	r7, sp, #16
 801d40c:	4640      	mov	r0, r8
 801d40e:	f7fb ffe5 	bl	80193dc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801d412:	e898 0003 	ldmia.w	r8, {r0, r1}
 801d416:	e887 0003 	stmia.w	r7, {r0, r1}
 801d41a:	4638      	mov	r0, r7
 801d41c:	4621      	mov	r1, r4
 801d41e:	f7f5 fd97 	bl	8012f50 <_ZN8touchgfx4RectaNERKS0_>
 801d422:	4638      	mov	r0, r7
 801d424:	f7f5 fdd7 	bl	8012fd6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801d428:	b138      	cbz	r0, 801d43a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 801d42a:	4623      	mov	r3, r4
 801d42c:	9600      	str	r6, [sp, #0]
 801d42e:	aa02      	add	r2, sp, #8
 801d430:	4649      	mov	r1, r9
 801d432:	4628      	mov	r0, r5
 801d434:	f7ff fdca 	bl	801cfcc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801d438:	e731      	b.n	801d29e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d43a:	f8da 3000 	ldr.w	r3, [sl]
 801d43e:	aa02      	add	r2, sp, #8
 801d440:	4629      	mov	r1, r5
 801d442:	e9cd 6000 	strd	r6, r0, [sp]
 801d446:	4650      	mov	r0, sl
 801d448:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801d44c:	463b      	mov	r3, r7
 801d44e:	47d8      	blx	fp
 801d450:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d454:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d458:	4293      	cmp	r3, r2
 801d45a:	dd13      	ble.n	801d484 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 801d45c:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d460:	1a9b      	subs	r3, r3, r2
 801d462:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d466:	f8ad 0018 	strh.w	r0, [sp, #24]
 801d46a:	4628      	mov	r0, r5
 801d46c:	f8ad 201a 	strh.w	r2, [sp, #26]
 801d470:	aa02      	add	r2, sp, #8
 801d472:	f8ad 101c 	strh.w	r1, [sp, #28]
 801d476:	4649      	mov	r1, r9
 801d478:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d47c:	4643      	mov	r3, r8
 801d47e:	9600      	str	r6, [sp, #0]
 801d480:	f7ff fda4 	bl	801cfcc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801d484:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801d488:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d48c:	4293      	cmp	r3, r2
 801d48e:	dd13      	ble.n	801d4b8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 801d490:	1a9b      	subs	r3, r3, r2
 801d492:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801d496:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801d49a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801d49e:	aa02      	add	r2, sp, #8
 801d4a0:	f8ad 001a 	strh.w	r0, [sp, #26]
 801d4a4:	4628      	mov	r0, r5
 801d4a6:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d4aa:	4643      	mov	r3, r8
 801d4ac:	f8ad 101e 	strh.w	r1, [sp, #30]
 801d4b0:	4649      	mov	r1, r9
 801d4b2:	9600      	str	r6, [sp, #0]
 801d4b4:	f7ff fd8a 	bl	801cfcc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801d4b8:	88a2      	ldrh	r2, [r4, #4]
 801d4ba:	8823      	ldrh	r3, [r4, #0]
 801d4bc:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801d4c0:	4413      	add	r3, r2
 801d4c2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d4c6:	440a      	add	r2, r1
 801d4c8:	b29b      	uxth	r3, r3
 801d4ca:	b292      	uxth	r2, r2
 801d4cc:	b218      	sxth	r0, r3
 801d4ce:	b211      	sxth	r1, r2
 801d4d0:	4288      	cmp	r0, r1
 801d4d2:	dd13      	ble.n	801d4fc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 801d4d4:	1a9b      	subs	r3, r3, r2
 801d4d6:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801d4da:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801d4de:	aa02      	add	r2, sp, #8
 801d4e0:	f8ad 1018 	strh.w	r1, [sp, #24]
 801d4e4:	4649      	mov	r1, r9
 801d4e6:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d4ea:	4643      	mov	r3, r8
 801d4ec:	f8ad 001e 	strh.w	r0, [sp, #30]
 801d4f0:	4628      	mov	r0, r5
 801d4f2:	9600      	str	r6, [sp, #0]
 801d4f4:	f8ad 701a 	strh.w	r7, [sp, #26]
 801d4f8:	f7ff fd68 	bl	801cfcc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801d4fc:	88e2      	ldrh	r2, [r4, #6]
 801d4fe:	8863      	ldrh	r3, [r4, #2]
 801d500:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801d504:	4413      	add	r3, r2
 801d506:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801d50a:	440a      	add	r2, r1
 801d50c:	b29b      	uxth	r3, r3
 801d50e:	b292      	uxth	r2, r2
 801d510:	b218      	sxth	r0, r3
 801d512:	b211      	sxth	r1, r2
 801d514:	4288      	cmp	r0, r1
 801d516:	f77f aec2 	ble.w	801d29e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801d51a:	f9b4 7000 	ldrsh.w	r7, [r4]
 801d51e:	1a9b      	subs	r3, r3, r2
 801d520:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d524:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d528:	4643      	mov	r3, r8
 801d52a:	f8ad 7018 	strh.w	r7, [sp, #24]
 801d52e:	f8ad 101a 	strh.w	r1, [sp, #26]
 801d532:	f8ad 001c 	strh.w	r0, [sp, #28]
 801d536:	9600      	str	r6, [sp, #0]
 801d538:	e779      	b.n	801d42e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 801d53a:	bf00      	nop
 801d53c:	2400b084 	.word	0x2400b084

0801d540 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801d540:	b180      	cbz	r0, 801d564 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801d542:	2903      	cmp	r1, #3
 801d544:	d81c      	bhi.n	801d580 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801d546:	e8df f001 	tbb	[pc, r1]
 801d54a:	1d02      	.short	0x1d02
 801d54c:	1f08      	.short	0x1f08
 801d54e:	4b10      	ldr	r3, [pc, #64]	; (801d590 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801d550:	8818      	ldrh	r0, [r3, #0]
 801d552:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801d556:	4240      	negs	r0, r0
 801d558:	4770      	bx	lr
 801d55a:	4b0d      	ldr	r3, [pc, #52]	; (801d590 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801d55c:	8818      	ldrh	r0, [r3, #0]
 801d55e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801d562:	4770      	bx	lr
 801d564:	2903      	cmp	r1, #3
 801d566:	d80b      	bhi.n	801d580 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801d568:	a301      	add	r3, pc, #4	; (adr r3, 801d570 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 801d56a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801d56e:	bf00      	nop
 801d570:	0801d585 	.word	0x0801d585
 801d574:	0801d55b 	.word	0x0801d55b
 801d578:	0801d589 	.word	0x0801d589
 801d57c:	0801d54f 	.word	0x0801d54f
 801d580:	2000      	movs	r0, #0
 801d582:	4770      	bx	lr
 801d584:	2001      	movs	r0, #1
 801d586:	4770      	bx	lr
 801d588:	f04f 30ff 	mov.w	r0, #4294967295
 801d58c:	4770      	bx	lr
 801d58e:	bf00      	nop
 801d590:	2400b07e 	.word	0x2400b07e

0801d594 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801d594:	b180      	cbz	r0, 801d5b8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 801d596:	2903      	cmp	r1, #3
 801d598:	d81c      	bhi.n	801d5d4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801d59a:	e8df f001 	tbb	[pc, r1]
 801d59e:	021d      	.short	0x021d
 801d5a0:	071f      	.short	0x071f
 801d5a2:	4b10      	ldr	r3, [pc, #64]	; (801d5e4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801d5a4:	8818      	ldrh	r0, [r3, #0]
 801d5a6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801d5aa:	4770      	bx	lr
 801d5ac:	4b0d      	ldr	r3, [pc, #52]	; (801d5e4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801d5ae:	8818      	ldrh	r0, [r3, #0]
 801d5b0:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801d5b4:	4240      	negs	r0, r0
 801d5b6:	4770      	bx	lr
 801d5b8:	2903      	cmp	r1, #3
 801d5ba:	d80b      	bhi.n	801d5d4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801d5bc:	a301      	add	r3, pc, #4	; (adr r3, 801d5c4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 801d5be:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801d5c2:	bf00      	nop
 801d5c4:	0801d5a3 	.word	0x0801d5a3
 801d5c8:	0801d5dd 	.word	0x0801d5dd
 801d5cc:	0801d5ad 	.word	0x0801d5ad
 801d5d0:	0801d5d9 	.word	0x0801d5d9
 801d5d4:	2000      	movs	r0, #0
 801d5d6:	4770      	bx	lr
 801d5d8:	2001      	movs	r0, #1
 801d5da:	4770      	bx	lr
 801d5dc:	f04f 30ff 	mov.w	r0, #4294967295
 801d5e0:	4770      	bx	lr
 801d5e2:	bf00      	nop
 801d5e4:	2400b07e 	.word	0x2400b07e

0801d5e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801d5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5ec:	b099      	sub	sp, #100	; 0x64
 801d5ee:	910b      	str	r1, [sp, #44]	; 0x2c
 801d5f0:	a914      	add	r1, sp, #80	; 0x50
 801d5f2:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 801d5f6:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 801d5fa:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 801d5fe:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801d602:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801d606:	e881 000c 	stmia.w	r1, {r2, r3}
 801d60a:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801d60e:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801d612:	9309      	str	r3, [sp, #36]	; 0x24
 801d614:	f891 900d 	ldrb.w	r9, [r1, #13]
 801d618:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801d61c:	ea4f 1749 	mov.w	r7, r9, lsl #5
 801d620:	9310      	str	r3, [sp, #64]	; 0x40
 801d622:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801d626:	930c      	str	r3, [sp, #48]	; 0x30
 801d628:	f407 7380 	and.w	r3, r7, #256	; 0x100
 801d62c:	798f      	ldrb	r7, [r1, #6]
 801d62e:	431f      	orrs	r7, r3
 801d630:	f000 8195 	beq.w	801d95e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801d634:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801d638:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801d63c:	f891 9007 	ldrb.w	r9, [r1, #7]
 801d640:	ea59 0903 	orrs.w	r9, r9, r3
 801d644:	f000 818b 	beq.w	801d95e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801d648:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801d64c:	b29b      	uxth	r3, r3
 801d64e:	2d00      	cmp	r5, #0
 801d650:	f000 812e 	beq.w	801d8b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 801d654:	1aed      	subs	r5, r5, r3
 801d656:	b2ad      	uxth	r5, r5
 801d658:	042b      	lsls	r3, r5, #16
 801d65a:	d502      	bpl.n	801d662 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801d65c:	1b64      	subs	r4, r4, r5
 801d65e:	2500      	movs	r5, #0
 801d660:	b224      	sxth	r4, r4
 801d662:	f9b2 1000 	ldrsh.w	r1, [r2]
 801d666:	a814      	add	r0, sp, #80	; 0x50
 801d668:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801d66c:	428c      	cmp	r4, r1
 801d66e:	b28b      	uxth	r3, r1
 801d670:	bfbf      	itttt	lt
 801d672:	18ed      	addlt	r5, r5, r3
 801d674:	1b2c      	sublt	r4, r5, r4
 801d676:	b2a5      	uxthlt	r5, r4
 801d678:	460c      	movlt	r4, r1
 801d67a:	8891      	ldrh	r1, [r2, #4]
 801d67c:	440b      	add	r3, r1
 801d67e:	4621      	mov	r1, r4
 801d680:	b21b      	sxth	r3, r3
 801d682:	930f      	str	r3, [sp, #60]	; 0x3c
 801d684:	88d3      	ldrh	r3, [r2, #6]
 801d686:	8852      	ldrh	r2, [r2, #2]
 801d688:	4413      	add	r3, r2
 801d68a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d68c:	b21b      	sxth	r3, r3
 801d68e:	930d      	str	r3, [sp, #52]	; 0x34
 801d690:	4bbd      	ldr	r3, [pc, #756]	; (801d988 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801d692:	f893 b000 	ldrb.w	fp, [r3]
 801d696:	f10b 3cff 	add.w	ip, fp, #4294967295
 801d69a:	f1dc 0300 	rsbs	r3, ip, #0
 801d69e:	eb43 030c 	adc.w	r3, r3, ip
 801d6a2:	930e      	str	r3, [sp, #56]	; 0x38
 801d6a4:	4653      	mov	r3, sl
 801d6a6:	f7f8 fb3c 	bl	8015d22 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801d6aa:	4621      	mov	r1, r4
 801d6ac:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801d6b0:	4653      	mov	r3, sl
 801d6b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d6b4:	a814      	add	r0, sp, #80	; 0x50
 801d6b6:	f7f8 fb51 	bl	8015d5c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801d6ba:	a918      	add	r1, sp, #96	; 0x60
 801d6bc:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801d6c0:	a817      	add	r0, sp, #92	; 0x5c
 801d6c2:	f7f8 fc71 	bl	8015fa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801d6c6:	f1ba 0f00 	cmp.w	sl, #0
 801d6ca:	f040 80f4 	bne.w	801d8b6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801d6ce:	f1bb 0f01 	cmp.w	fp, #1
 801d6d2:	f040 80f8 	bne.w	801d8c6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 801d6d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d6d8:	2b00      	cmp	r3, #0
 801d6da:	f040 8145 	bne.w	801d968 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801d6de:	b2ba      	uxth	r2, r7
 801d6e0:	b905      	cbnz	r5, 801d6e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 801d6e2:	b16e      	cbz	r6, 801d700 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 801d6e4:	fb06 5302 	mla	r3, r6, r2, r5
 801d6e8:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801d6ea:	4631      	mov	r1, r6
 801d6ec:	fb08 f303 	mul.w	r3, r8, r3
 801d6f0:	f003 0607 	and.w	r6, r3, #7
 801d6f4:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 801d6f8:	9328      	str	r3, [sp, #160]	; 0xa0
 801d6fa:	eba9 0301 	sub.w	r3, r9, r1
 801d6fe:	930a      	str	r3, [sp, #40]	; 0x28
 801d700:	4651      	mov	r1, sl
 801d702:	980e      	ldr	r0, [sp, #56]	; 0x38
 801d704:	f7ff ff1c 	bl	801d540 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801d708:	4681      	mov	r9, r0
 801d70a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801d70c:	f7ff ff42 	bl	801d594 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801d710:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d712:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d714:	4683      	mov	fp, r0
 801d716:	eba3 0a01 	sub.w	sl, r3, r1
 801d71a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d71c:	459a      	cmp	sl, r3
 801d71e:	bfa8      	it	ge
 801d720:	469a      	movge	sl, r3
 801d722:	f1ba 0f00 	cmp.w	sl, #0
 801d726:	f340 811a 	ble.w	801d95e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801d72a:	1b64      	subs	r4, r4, r5
 801d72c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d72e:	1b1c      	subs	r4, r3, r4
 801d730:	42bc      	cmp	r4, r7
 801d732:	bfd4      	ite	le
 801d734:	ebc5 0504 	rsble	r5, r5, r4
 801d738:	ebc5 0507 	rsbgt	r5, r5, r7
 801d73c:	2d00      	cmp	r5, #0
 801d73e:	f340 810e 	ble.w	801d95e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801d742:	1b52      	subs	r2, r2, r5
 801d744:	fb08 f302 	mul.w	r3, r8, r2
 801d748:	930f      	str	r3, [sp, #60]	; 0x3c
 801d74a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d74c:	2b00      	cmp	r3, #0
 801d74e:	f040 8116 	bne.w	801d97e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801d752:	4b8e      	ldr	r3, [pc, #568]	; (801d98c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801d754:	6818      	ldr	r0, [r3, #0]
 801d756:	6803      	ldr	r3, [r0, #0]
 801d758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d75a:	4798      	blx	r3
 801d75c:	2301      	movs	r3, #1
 801d75e:	4a8c      	ldr	r2, [pc, #560]	; (801d990 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801d760:	fa03 f308 	lsl.w	r3, r3, r8
 801d764:	8811      	ldrh	r1, [r2, #0]
 801d766:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801d76a:	3b01      	subs	r3, #1
 801d76c:	b2db      	uxtb	r3, r3
 801d76e:	930e      	str	r3, [sp, #56]	; 0x38
 801d770:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801d774:	fb01 2303 	mla	r3, r1, r3, r2
 801d778:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d77c:	930a      	str	r3, [sp, #40]	; 0x28
 801d77e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d780:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801d784:	9313      	str	r3, [sp, #76]	; 0x4c
 801d786:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d788:	0a19      	lsrs	r1, r3, #8
 801d78a:	b2cb      	uxtb	r3, r1
 801d78c:	9312      	str	r3, [sp, #72]	; 0x48
 801d78e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d790:	b2db      	uxtb	r3, r3
 801d792:	9311      	str	r3, [sp, #68]	; 0x44
 801d794:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d796:	095a      	lsrs	r2, r3, #5
 801d798:	4b7e      	ldr	r3, [pc, #504]	; (801d994 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801d79a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d79e:	400b      	ands	r3, r1
 801d7a0:	4313      	orrs	r3, r2
 801d7a2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801d7a4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801d7a8:	4313      	orrs	r3, r2
 801d7aa:	b29b      	uxth	r3, r3
 801d7ac:	9310      	str	r3, [sp, #64]	; 0x40
 801d7ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d7b0:	781a      	ldrb	r2, [r3, #0]
 801d7b2:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801d7b6:	fb05 b919 	mls	r9, r5, r9, fp
 801d7ba:	4132      	asrs	r2, r6
 801d7bc:	fb03 fb05 	mul.w	fp, r3, r5
 801d7c0:	930d      	str	r3, [sp, #52]	; 0x34
 801d7c2:	b2d2      	uxtb	r2, r2
 801d7c4:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801d7c8:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801d7cc:	f0c0 80f5 	bcc.w	801d9ba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 801d7d0:	46ae      	mov	lr, r5
 801d7d2:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801d7d6:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801d7da:	f0c0 80dd 	bcc.w	801d998 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 801d7de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d7e0:	4013      	ands	r3, r2
 801d7e2:	d055      	beq.n	801d890 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801d7e4:	20ff      	movs	r0, #255	; 0xff
 801d7e6:	990e      	ldr	r1, [sp, #56]	; 0x38
 801d7e8:	fb90 f1f1 	sdiv	r1, r0, r1
 801d7ec:	434b      	muls	r3, r1
 801d7ee:	2bfe      	cmp	r3, #254	; 0xfe
 801d7f0:	dd03      	ble.n	801d7fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 801d7f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d7f4:	4281      	cmp	r1, r0
 801d7f6:	f000 80c4 	beq.w	801d982 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801d7fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d7fc:	f8bc 4000 	ldrh.w	r4, [ip]
 801d800:	fb11 f303 	smulbb	r3, r1, r3
 801d804:	1220      	asrs	r0, r4, #8
 801d806:	b29b      	uxth	r3, r3
 801d808:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801d80c:	1c59      	adds	r1, r3, #1
 801d80e:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801d812:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801d816:	10e1      	asrs	r1, r4, #3
 801d818:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d81c:	00e4      	lsls	r4, r4, #3
 801d81e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801d822:	b29f      	uxth	r7, r3
 801d824:	43db      	mvns	r3, r3
 801d826:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801d82a:	b2db      	uxtb	r3, r3
 801d82c:	b2e4      	uxtb	r4, r4
 801d82e:	9309      	str	r3, [sp, #36]	; 0x24
 801d830:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d832:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801d836:	fb13 f907 	smulbb	r9, r3, r7
 801d83a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d83c:	fb00 9003 	mla	r0, r0, r3, r9
 801d840:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d842:	fb13 f907 	smulbb	r9, r3, r7
 801d846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d848:	b280      	uxth	r0, r0
 801d84a:	fb01 9103 	mla	r1, r1, r3, r9
 801d84e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d850:	fb13 f707 	smulbb	r7, r3, r7
 801d854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d856:	b289      	uxth	r1, r1
 801d858:	fb04 7403 	mla	r4, r4, r3, r7
 801d85c:	1c43      	adds	r3, r0, #1
 801d85e:	b2a4      	uxth	r4, r4
 801d860:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801d864:	f104 0901 	add.w	r9, r4, #1
 801d868:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801d86c:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801d870:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801d874:	ea49 0000 	orr.w	r0, r9, r0
 801d878:	f101 0901 	add.w	r9, r1, #1
 801d87c:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801d880:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801d884:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801d888:	ea40 0009 	orr.w	r0, r0, r9
 801d88c:	f8ac 0000 	strh.w	r0, [ip]
 801d890:	4446      	add	r6, r8
 801d892:	b2b6      	uxth	r6, r6
 801d894:	2e07      	cmp	r6, #7
 801d896:	bf89      	itett	hi
 801d898:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801d89a:	fa42 f208 	asrls.w	r2, r2, r8
 801d89e:	2600      	movhi	r6, #0
 801d8a0:	785a      	ldrbhi	r2, [r3, #1]
 801d8a2:	bf8a      	itet	hi
 801d8a4:	3301      	addhi	r3, #1
 801d8a6:	b2d2      	uxtbls	r2, r2
 801d8a8:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801d8aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d8ac:	449c      	add	ip, r3
 801d8ae:	e792      	b.n	801d7d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801d8b0:	441c      	add	r4, r3
 801d8b2:	b224      	sxth	r4, r4
 801d8b4:	e6d5      	b.n	801d662 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801d8b6:	f1ba 0f01 	cmp.w	sl, #1
 801d8ba:	f47f af0c 	bne.w	801d6d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801d8be:	f1bb 0f01 	cmp.w	fp, #1
 801d8c2:	f47f af08 	bne.w	801d6d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801d8c6:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 801d98c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 801d8ca:	f8db 0000 	ldr.w	r0, [fp]
 801d8ce:	6803      	ldr	r3, [r0, #0]
 801d8d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d8d2:	4798      	blx	r3
 801d8d4:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801d8d8:	465a      	mov	r2, fp
 801d8da:	d006      	beq.n	801d8ea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801d8dc:	f1b8 0f04 	cmp.w	r8, #4
 801d8e0:	d140      	bne.n	801d964 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 801d8e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d8e4:	3300      	adds	r3, #0
 801d8e6:	bf18      	it	ne
 801d8e8:	2301      	movne	r3, #1
 801d8ea:	0580      	lsls	r0, r0, #22
 801d8ec:	d56e      	bpl.n	801d9cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801d8ee:	f1b8 0f08 	cmp.w	r8, #8
 801d8f2:	d16b      	bne.n	801d9cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801d8f4:	2b00      	cmp	r3, #0
 801d8f6:	bf0c      	ite	eq
 801d8f8:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801d8fc:	f44f 7180 	movne.w	r1, #256	; 0x100
 801d900:	2d00      	cmp	r5, #0
 801d902:	f47f aee8 	bne.w	801d6d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801d906:	2e00      	cmp	r6, #0
 801d908:	f47f aee5 	bne.w	801d6d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801d90c:	19e3      	adds	r3, r4, r7
 801d90e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801d910:	4283      	cmp	r3, r0
 801d912:	f73f aee0 	bgt.w	801d6d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801d916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d918:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d91a:	444b      	add	r3, r9
 801d91c:	4283      	cmp	r3, r0
 801d91e:	f73f aeda 	bgt.w	801d6d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801d922:	b2bf      	uxth	r7, r7
 801d924:	f1b8 0f08 	cmp.w	r8, #8
 801d928:	6810      	ldr	r0, [r2, #0]
 801d92a:	f04f 0500 	mov.w	r5, #0
 801d92e:	bf18      	it	ne
 801d930:	3701      	addne	r7, #1
 801d932:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801d936:	6804      	ldr	r4, [r0, #0]
 801d938:	bf18      	it	ne
 801d93a:	f027 0701 	bicne.w	r7, r7, #1
 801d93e:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801d942:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801d946:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d948:	bf18      	it	ne
 801d94a:	b2bf      	uxthne	r7, r7
 801d94c:	9104      	str	r1, [sp, #16]
 801d94e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801d950:	e9cd 7900 	strd	r7, r9, [sp]
 801d954:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801d958:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801d95a:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801d95c:	47a0      	blx	r4
 801d95e:	b019      	add	sp, #100	; 0x64
 801d960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d964:	2300      	movs	r3, #0
 801d966:	e7c0      	b.n	801d8ea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801d968:	2208      	movs	r2, #8
 801d96a:	fb92 f3f8 	sdiv	r3, r2, r8
 801d96e:	1e5a      	subs	r2, r3, #1
 801d970:	443a      	add	r2, r7
 801d972:	fb92 f2f3 	sdiv	r2, r2, r3
 801d976:	fb12 f203 	smulbb	r2, r2, r3
 801d97a:	b292      	uxth	r2, r2
 801d97c:	e6b0      	b.n	801d6e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801d97e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d980:	e6ec      	b.n	801d75c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 801d982:	9810      	ldr	r0, [sp, #64]	; 0x40
 801d984:	e782      	b.n	801d88c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 801d986:	bf00      	nop
 801d988:	2400b07c 	.word	0x2400b07c
 801d98c:	2400b084 	.word	0x2400b084
 801d990:	2400b07e 	.word	0x2400b07e
 801d994:	00fff800 	.word	0x00fff800
 801d998:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d99a:	b153      	cbz	r3, 801d9b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 801d99c:	441e      	add	r6, r3
 801d99e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d9a0:	b2b6      	uxth	r6, r6
 801d9a2:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 801d9a6:	f006 0607 	and.w	r6, r6, #7
 801d9aa:	781a      	ldrb	r2, [r3, #0]
 801d9ac:	9328      	str	r3, [sp, #160]	; 0xa0
 801d9ae:	4132      	asrs	r2, r6
 801d9b0:	b2d2      	uxtb	r2, r2
 801d9b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d9b4:	445b      	add	r3, fp
 801d9b6:	930a      	str	r3, [sp, #40]	; 0x28
 801d9b8:	e706      	b.n	801d7c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801d9ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d9bc:	2b00      	cmp	r3, #0
 801d9be:	d1ce      	bne.n	801d95e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801d9c0:	4b05      	ldr	r3, [pc, #20]	; (801d9d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 801d9c2:	6818      	ldr	r0, [r3, #0]
 801d9c4:	6803      	ldr	r3, [r0, #0]
 801d9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d9c8:	4798      	blx	r3
 801d9ca:	e7c8      	b.n	801d95e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801d9cc:	2b00      	cmp	r3, #0
 801d9ce:	f43f ae82 	beq.w	801d6d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801d9d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 801d9d6:	e793      	b.n	801d900 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 801d9d8:	2400b084 	.word	0x2400b084

0801d9dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801d9dc:	b538      	push	{r3, r4, r5, lr}
 801d9de:	4c15      	ldr	r4, [pc, #84]	; (801da34 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801d9e0:	4605      	mov	r5, r0
 801d9e2:	7823      	ldrb	r3, [r4, #0]
 801d9e4:	f3bf 8f5b 	dmb	ish
 801d9e8:	07da      	lsls	r2, r3, #31
 801d9ea:	d40b      	bmi.n	801da04 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801d9ec:	4620      	mov	r0, r4
 801d9ee:	f007 fa68 	bl	8024ec2 <__cxa_guard_acquire>
 801d9f2:	b138      	cbz	r0, 801da04 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801d9f4:	4620      	mov	r0, r4
 801d9f6:	f007 fa70 	bl	8024eda <__cxa_guard_release>
 801d9fa:	4a0f      	ldr	r2, [pc, #60]	; (801da38 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801d9fc:	490f      	ldr	r1, [pc, #60]	; (801da3c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801d9fe:	4810      	ldr	r0, [pc, #64]	; (801da40 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801da00:	f007 fa58 	bl	8024eb4 <__aeabi_atexit>
 801da04:	4c0f      	ldr	r4, [pc, #60]	; (801da44 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801da06:	7823      	ldrb	r3, [r4, #0]
 801da08:	f3bf 8f5b 	dmb	ish
 801da0c:	07db      	lsls	r3, r3, #31
 801da0e:	d40b      	bmi.n	801da28 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801da10:	4620      	mov	r0, r4
 801da12:	f007 fa56 	bl	8024ec2 <__cxa_guard_acquire>
 801da16:	b138      	cbz	r0, 801da28 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801da18:	4620      	mov	r0, r4
 801da1a:	f007 fa5e 	bl	8024eda <__cxa_guard_release>
 801da1e:	4a06      	ldr	r2, [pc, #24]	; (801da38 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801da20:	4909      	ldr	r1, [pc, #36]	; (801da48 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801da22:	480a      	ldr	r0, [pc, #40]	; (801da4c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801da24:	f007 fa46 	bl	8024eb4 <__aeabi_atexit>
 801da28:	4b05      	ldr	r3, [pc, #20]	; (801da40 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801da2a:	612b      	str	r3, [r5, #16]
 801da2c:	4b07      	ldr	r3, [pc, #28]	; (801da4c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801da2e:	616b      	str	r3, [r5, #20]
 801da30:	bd38      	pop	{r3, r4, r5, pc}
 801da32:	bf00      	nop
 801da34:	2400b150 	.word	0x2400b150
 801da38:	24000000 	.word	0x24000000
 801da3c:	0801bbfb 	.word	0x0801bbfb
 801da40:	24000090 	.word	0x24000090
 801da44:	2400b154 	.word	0x2400b154
 801da48:	0801bbf9 	.word	0x0801bbf9
 801da4c:	24000094 	.word	0x24000094

0801da50 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801da50:	b538      	push	{r3, r4, r5, lr}
 801da52:	4c15      	ldr	r4, [pc, #84]	; (801daa8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801da54:	4605      	mov	r5, r0
 801da56:	7823      	ldrb	r3, [r4, #0]
 801da58:	f3bf 8f5b 	dmb	ish
 801da5c:	07da      	lsls	r2, r3, #31
 801da5e:	d40b      	bmi.n	801da78 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801da60:	4620      	mov	r0, r4
 801da62:	f007 fa2e 	bl	8024ec2 <__cxa_guard_acquire>
 801da66:	b138      	cbz	r0, 801da78 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801da68:	4620      	mov	r0, r4
 801da6a:	f007 fa36 	bl	8024eda <__cxa_guard_release>
 801da6e:	4a0f      	ldr	r2, [pc, #60]	; (801daac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801da70:	490f      	ldr	r1, [pc, #60]	; (801dab0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801da72:	4810      	ldr	r0, [pc, #64]	; (801dab4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801da74:	f007 fa1e 	bl	8024eb4 <__aeabi_atexit>
 801da78:	4c0f      	ldr	r4, [pc, #60]	; (801dab8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801da7a:	7823      	ldrb	r3, [r4, #0]
 801da7c:	f3bf 8f5b 	dmb	ish
 801da80:	07db      	lsls	r3, r3, #31
 801da82:	d40b      	bmi.n	801da9c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801da84:	4620      	mov	r0, r4
 801da86:	f007 fa1c 	bl	8024ec2 <__cxa_guard_acquire>
 801da8a:	b138      	cbz	r0, 801da9c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801da8c:	4620      	mov	r0, r4
 801da8e:	f007 fa24 	bl	8024eda <__cxa_guard_release>
 801da92:	4a06      	ldr	r2, [pc, #24]	; (801daac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801da94:	4909      	ldr	r1, [pc, #36]	; (801dabc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801da96:	480a      	ldr	r0, [pc, #40]	; (801dac0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801da98:	f007 fa0c 	bl	8024eb4 <__aeabi_atexit>
 801da9c:	4b05      	ldr	r3, [pc, #20]	; (801dab4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801da9e:	60ab      	str	r3, [r5, #8]
 801daa0:	4b07      	ldr	r3, [pc, #28]	; (801dac0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801daa2:	60eb      	str	r3, [r5, #12]
 801daa4:	bd38      	pop	{r3, r4, r5, pc}
 801daa6:	bf00      	nop
 801daa8:	2400b128 	.word	0x2400b128
 801daac:	24000000 	.word	0x24000000
 801dab0:	0801bbff 	.word	0x0801bbff
 801dab4:	24000068 	.word	0x24000068
 801dab8:	2400b12c 	.word	0x2400b12c
 801dabc:	0801bbfd 	.word	0x0801bbfd
 801dac0:	2400006c 	.word	0x2400006c

0801dac4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801dac4:	b510      	push	{r4, lr}
 801dac6:	4604      	mov	r4, r0
 801dac8:	f7ff ff88 	bl	801d9dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801dacc:	4620      	mov	r0, r4
 801dace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dad2:	f7ff bfbd 	b.w	801da50 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801dad8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801dad8:	b538      	push	{r3, r4, r5, lr}
 801dada:	4c15      	ldr	r4, [pc, #84]	; (801db30 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801dadc:	4605      	mov	r5, r0
 801dade:	7823      	ldrb	r3, [r4, #0]
 801dae0:	f3bf 8f5b 	dmb	ish
 801dae4:	07da      	lsls	r2, r3, #31
 801dae6:	d40b      	bmi.n	801db00 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801dae8:	4620      	mov	r0, r4
 801daea:	f007 f9ea 	bl	8024ec2 <__cxa_guard_acquire>
 801daee:	b138      	cbz	r0, 801db00 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801daf0:	4620      	mov	r0, r4
 801daf2:	f007 f9f2 	bl	8024eda <__cxa_guard_release>
 801daf6:	4a0f      	ldr	r2, [pc, #60]	; (801db34 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801daf8:	490f      	ldr	r1, [pc, #60]	; (801db38 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801dafa:	4810      	ldr	r0, [pc, #64]	; (801db3c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801dafc:	f007 f9da 	bl	8024eb4 <__aeabi_atexit>
 801db00:	4c0f      	ldr	r4, [pc, #60]	; (801db40 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801db02:	7823      	ldrb	r3, [r4, #0]
 801db04:	f3bf 8f5b 	dmb	ish
 801db08:	07db      	lsls	r3, r3, #31
 801db0a:	d40b      	bmi.n	801db24 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801db0c:	4620      	mov	r0, r4
 801db0e:	f007 f9d8 	bl	8024ec2 <__cxa_guard_acquire>
 801db12:	b138      	cbz	r0, 801db24 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801db14:	4620      	mov	r0, r4
 801db16:	f007 f9e0 	bl	8024eda <__cxa_guard_release>
 801db1a:	4a06      	ldr	r2, [pc, #24]	; (801db34 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801db1c:	4909      	ldr	r1, [pc, #36]	; (801db44 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801db1e:	480a      	ldr	r0, [pc, #40]	; (801db48 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801db20:	f007 f9c8 	bl	8024eb4 <__aeabi_atexit>
 801db24:	4b05      	ldr	r3, [pc, #20]	; (801db3c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801db26:	622b      	str	r3, [r5, #32]
 801db28:	4b07      	ldr	r3, [pc, #28]	; (801db48 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801db2a:	626b      	str	r3, [r5, #36]	; 0x24
 801db2c:	bd38      	pop	{r3, r4, r5, pc}
 801db2e:	bf00      	nop
 801db30:	2400b158 	.word	0x2400b158
 801db34:	24000000 	.word	0x24000000
 801db38:	0801bbf3 	.word	0x0801bbf3
 801db3c:	24000098 	.word	0x24000098
 801db40:	2400b15c 	.word	0x2400b15c
 801db44:	0801bbf1 	.word	0x0801bbf1
 801db48:	2400009c 	.word	0x2400009c

0801db4c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801db4c:	b538      	push	{r3, r4, r5, lr}
 801db4e:	4c15      	ldr	r4, [pc, #84]	; (801dba4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801db50:	4605      	mov	r5, r0
 801db52:	7823      	ldrb	r3, [r4, #0]
 801db54:	f3bf 8f5b 	dmb	ish
 801db58:	07da      	lsls	r2, r3, #31
 801db5a:	d40b      	bmi.n	801db74 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801db5c:	4620      	mov	r0, r4
 801db5e:	f007 f9b0 	bl	8024ec2 <__cxa_guard_acquire>
 801db62:	b138      	cbz	r0, 801db74 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801db64:	4620      	mov	r0, r4
 801db66:	f007 f9b8 	bl	8024eda <__cxa_guard_release>
 801db6a:	4a0f      	ldr	r2, [pc, #60]	; (801dba8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801db6c:	490f      	ldr	r1, [pc, #60]	; (801dbac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801db6e:	4810      	ldr	r0, [pc, #64]	; (801dbb0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801db70:	f007 f9a0 	bl	8024eb4 <__aeabi_atexit>
 801db74:	4c0f      	ldr	r4, [pc, #60]	; (801dbb4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801db76:	7823      	ldrb	r3, [r4, #0]
 801db78:	f3bf 8f5b 	dmb	ish
 801db7c:	07db      	lsls	r3, r3, #31
 801db7e:	d40b      	bmi.n	801db98 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801db80:	4620      	mov	r0, r4
 801db82:	f007 f99e 	bl	8024ec2 <__cxa_guard_acquire>
 801db86:	b138      	cbz	r0, 801db98 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801db88:	4620      	mov	r0, r4
 801db8a:	f007 f9a6 	bl	8024eda <__cxa_guard_release>
 801db8e:	4a06      	ldr	r2, [pc, #24]	; (801dba8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801db90:	4909      	ldr	r1, [pc, #36]	; (801dbb8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801db92:	480a      	ldr	r0, [pc, #40]	; (801dbbc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801db94:	f007 f98e 	bl	8024eb4 <__aeabi_atexit>
 801db98:	4b05      	ldr	r3, [pc, #20]	; (801dbb0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801db9a:	61ab      	str	r3, [r5, #24]
 801db9c:	4b07      	ldr	r3, [pc, #28]	; (801dbbc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801db9e:	61eb      	str	r3, [r5, #28]
 801dba0:	bd38      	pop	{r3, r4, r5, pc}
 801dba2:	bf00      	nop
 801dba4:	2400b130 	.word	0x2400b130
 801dba8:	24000000 	.word	0x24000000
 801dbac:	0801bbf7 	.word	0x0801bbf7
 801dbb0:	24000070 	.word	0x24000070
 801dbb4:	2400b134 	.word	0x2400b134
 801dbb8:	0801bbf5 	.word	0x0801bbf5
 801dbbc:	24000074 	.word	0x24000074

0801dbc0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801dbc0:	b510      	push	{r4, lr}
 801dbc2:	4604      	mov	r4, r0
 801dbc4:	f7ff ff88 	bl	801dad8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801dbc8:	4620      	mov	r0, r4
 801dbca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dbce:	f7ff bfbd 	b.w	801db4c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801dbd4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801dbd4:	b538      	push	{r3, r4, r5, lr}
 801dbd6:	4c15      	ldr	r4, [pc, #84]	; (801dc2c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801dbd8:	4605      	mov	r5, r0
 801dbda:	7823      	ldrb	r3, [r4, #0]
 801dbdc:	f3bf 8f5b 	dmb	ish
 801dbe0:	07da      	lsls	r2, r3, #31
 801dbe2:	d40b      	bmi.n	801dbfc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801dbe4:	4620      	mov	r0, r4
 801dbe6:	f007 f96c 	bl	8024ec2 <__cxa_guard_acquire>
 801dbea:	b138      	cbz	r0, 801dbfc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801dbec:	4620      	mov	r0, r4
 801dbee:	f007 f974 	bl	8024eda <__cxa_guard_release>
 801dbf2:	4a0f      	ldr	r2, [pc, #60]	; (801dc30 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801dbf4:	490f      	ldr	r1, [pc, #60]	; (801dc34 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801dbf6:	4810      	ldr	r0, [pc, #64]	; (801dc38 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801dbf8:	f007 f95c 	bl	8024eb4 <__aeabi_atexit>
 801dbfc:	4c0f      	ldr	r4, [pc, #60]	; (801dc3c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801dbfe:	7823      	ldrb	r3, [r4, #0]
 801dc00:	f3bf 8f5b 	dmb	ish
 801dc04:	07db      	lsls	r3, r3, #31
 801dc06:	d40b      	bmi.n	801dc20 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801dc08:	4620      	mov	r0, r4
 801dc0a:	f007 f95a 	bl	8024ec2 <__cxa_guard_acquire>
 801dc0e:	b138      	cbz	r0, 801dc20 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801dc10:	4620      	mov	r0, r4
 801dc12:	f007 f962 	bl	8024eda <__cxa_guard_release>
 801dc16:	4a06      	ldr	r2, [pc, #24]	; (801dc30 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801dc18:	4909      	ldr	r1, [pc, #36]	; (801dc40 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801dc1a:	480a      	ldr	r0, [pc, #40]	; (801dc44 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801dc1c:	f007 f94a 	bl	8024eb4 <__aeabi_atexit>
 801dc20:	4b05      	ldr	r3, [pc, #20]	; (801dc38 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801dc22:	632b      	str	r3, [r5, #48]	; 0x30
 801dc24:	4b07      	ldr	r3, [pc, #28]	; (801dc44 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801dc26:	636b      	str	r3, [r5, #52]	; 0x34
 801dc28:	bd38      	pop	{r3, r4, r5, pc}
 801dc2a:	bf00      	nop
 801dc2c:	2400b168 	.word	0x2400b168
 801dc30:	24000000 	.word	0x24000000
 801dc34:	0801bbeb 	.word	0x0801bbeb
 801dc38:	240000a8 	.word	0x240000a8
 801dc3c:	2400b16c 	.word	0x2400b16c
 801dc40:	0801bbe9 	.word	0x0801bbe9
 801dc44:	240000ac 	.word	0x240000ac

0801dc48 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801dc48:	b538      	push	{r3, r4, r5, lr}
 801dc4a:	4c15      	ldr	r4, [pc, #84]	; (801dca0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801dc4c:	4605      	mov	r5, r0
 801dc4e:	7823      	ldrb	r3, [r4, #0]
 801dc50:	f3bf 8f5b 	dmb	ish
 801dc54:	07da      	lsls	r2, r3, #31
 801dc56:	d40b      	bmi.n	801dc70 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801dc58:	4620      	mov	r0, r4
 801dc5a:	f007 f932 	bl	8024ec2 <__cxa_guard_acquire>
 801dc5e:	b138      	cbz	r0, 801dc70 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801dc60:	4620      	mov	r0, r4
 801dc62:	f007 f93a 	bl	8024eda <__cxa_guard_release>
 801dc66:	4a0f      	ldr	r2, [pc, #60]	; (801dca4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801dc68:	490f      	ldr	r1, [pc, #60]	; (801dca8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801dc6a:	4810      	ldr	r0, [pc, #64]	; (801dcac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801dc6c:	f007 f922 	bl	8024eb4 <__aeabi_atexit>
 801dc70:	4c0f      	ldr	r4, [pc, #60]	; (801dcb0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801dc72:	7823      	ldrb	r3, [r4, #0]
 801dc74:	f3bf 8f5b 	dmb	ish
 801dc78:	07db      	lsls	r3, r3, #31
 801dc7a:	d40b      	bmi.n	801dc94 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801dc7c:	4620      	mov	r0, r4
 801dc7e:	f007 f920 	bl	8024ec2 <__cxa_guard_acquire>
 801dc82:	b138      	cbz	r0, 801dc94 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801dc84:	4620      	mov	r0, r4
 801dc86:	f007 f928 	bl	8024eda <__cxa_guard_release>
 801dc8a:	4a06      	ldr	r2, [pc, #24]	; (801dca4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801dc8c:	4909      	ldr	r1, [pc, #36]	; (801dcb4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801dc8e:	480a      	ldr	r0, [pc, #40]	; (801dcb8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801dc90:	f007 f910 	bl	8024eb4 <__aeabi_atexit>
 801dc94:	4b05      	ldr	r3, [pc, #20]	; (801dcac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801dc96:	62ab      	str	r3, [r5, #40]	; 0x28
 801dc98:	4b07      	ldr	r3, [pc, #28]	; (801dcb8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801dc9a:	62eb      	str	r3, [r5, #44]	; 0x2c
 801dc9c:	bd38      	pop	{r3, r4, r5, pc}
 801dc9e:	bf00      	nop
 801dca0:	2400b138 	.word	0x2400b138
 801dca4:	24000000 	.word	0x24000000
 801dca8:	0801bbef 	.word	0x0801bbef
 801dcac:	24000078 	.word	0x24000078
 801dcb0:	2400b13c 	.word	0x2400b13c
 801dcb4:	0801bbed 	.word	0x0801bbed
 801dcb8:	2400007c 	.word	0x2400007c

0801dcbc <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801dcbc:	b510      	push	{r4, lr}
 801dcbe:	4604      	mov	r4, r0
 801dcc0:	f7ff ff88 	bl	801dbd4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801dcc4:	4620      	mov	r0, r4
 801dcc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dcca:	f7ff bfbd 	b.w	801dc48 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801dcd0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801dcd0:	b538      	push	{r3, r4, r5, lr}
 801dcd2:	4c15      	ldr	r4, [pc, #84]	; (801dd28 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801dcd4:	4605      	mov	r5, r0
 801dcd6:	7823      	ldrb	r3, [r4, #0]
 801dcd8:	f3bf 8f5b 	dmb	ish
 801dcdc:	07da      	lsls	r2, r3, #31
 801dcde:	d40b      	bmi.n	801dcf8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801dce0:	4620      	mov	r0, r4
 801dce2:	f007 f8ee 	bl	8024ec2 <__cxa_guard_acquire>
 801dce6:	b138      	cbz	r0, 801dcf8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801dce8:	4620      	mov	r0, r4
 801dcea:	f007 f8f6 	bl	8024eda <__cxa_guard_release>
 801dcee:	4a0f      	ldr	r2, [pc, #60]	; (801dd2c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801dcf0:	490f      	ldr	r1, [pc, #60]	; (801dd30 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801dcf2:	4810      	ldr	r0, [pc, #64]	; (801dd34 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801dcf4:	f007 f8de 	bl	8024eb4 <__aeabi_atexit>
 801dcf8:	4c0f      	ldr	r4, [pc, #60]	; (801dd38 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801dcfa:	7823      	ldrb	r3, [r4, #0]
 801dcfc:	f3bf 8f5b 	dmb	ish
 801dd00:	07db      	lsls	r3, r3, #31
 801dd02:	d40b      	bmi.n	801dd1c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801dd04:	4620      	mov	r0, r4
 801dd06:	f007 f8dc 	bl	8024ec2 <__cxa_guard_acquire>
 801dd0a:	b138      	cbz	r0, 801dd1c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801dd0c:	4620      	mov	r0, r4
 801dd0e:	f007 f8e4 	bl	8024eda <__cxa_guard_release>
 801dd12:	4a06      	ldr	r2, [pc, #24]	; (801dd2c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801dd14:	4909      	ldr	r1, [pc, #36]	; (801dd3c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801dd16:	480a      	ldr	r0, [pc, #40]	; (801dd40 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801dd18:	f007 f8cc 	bl	8024eb4 <__aeabi_atexit>
 801dd1c:	4b05      	ldr	r3, [pc, #20]	; (801dd34 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801dd1e:	652b      	str	r3, [r5, #80]	; 0x50
 801dd20:	4b07      	ldr	r3, [pc, #28]	; (801dd40 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801dd22:	656b      	str	r3, [r5, #84]	; 0x54
 801dd24:	bd38      	pop	{r3, r4, r5, pc}
 801dd26:	bf00      	nop
 801dd28:	2400b170 	.word	0x2400b170
 801dd2c:	24000000 	.word	0x24000000
 801dd30:	0801bbdb 	.word	0x0801bbdb
 801dd34:	240000b0 	.word	0x240000b0
 801dd38:	2400b174 	.word	0x2400b174
 801dd3c:	0801bbd9 	.word	0x0801bbd9
 801dd40:	240000b4 	.word	0x240000b4

0801dd44 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801dd44:	b538      	push	{r3, r4, r5, lr}
 801dd46:	4c15      	ldr	r4, [pc, #84]	; (801dd9c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801dd48:	4605      	mov	r5, r0
 801dd4a:	7823      	ldrb	r3, [r4, #0]
 801dd4c:	f3bf 8f5b 	dmb	ish
 801dd50:	07da      	lsls	r2, r3, #31
 801dd52:	d40b      	bmi.n	801dd6c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801dd54:	4620      	mov	r0, r4
 801dd56:	f007 f8b4 	bl	8024ec2 <__cxa_guard_acquire>
 801dd5a:	b138      	cbz	r0, 801dd6c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801dd5c:	4620      	mov	r0, r4
 801dd5e:	f007 f8bc 	bl	8024eda <__cxa_guard_release>
 801dd62:	4a0f      	ldr	r2, [pc, #60]	; (801dda0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801dd64:	490f      	ldr	r1, [pc, #60]	; (801dda4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801dd66:	4810      	ldr	r0, [pc, #64]	; (801dda8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801dd68:	f007 f8a4 	bl	8024eb4 <__aeabi_atexit>
 801dd6c:	4c0f      	ldr	r4, [pc, #60]	; (801ddac <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801dd6e:	7823      	ldrb	r3, [r4, #0]
 801dd70:	f3bf 8f5b 	dmb	ish
 801dd74:	07db      	lsls	r3, r3, #31
 801dd76:	d40b      	bmi.n	801dd90 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801dd78:	4620      	mov	r0, r4
 801dd7a:	f007 f8a2 	bl	8024ec2 <__cxa_guard_acquire>
 801dd7e:	b138      	cbz	r0, 801dd90 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801dd80:	4620      	mov	r0, r4
 801dd82:	f007 f8aa 	bl	8024eda <__cxa_guard_release>
 801dd86:	4a06      	ldr	r2, [pc, #24]	; (801dda0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801dd88:	4909      	ldr	r1, [pc, #36]	; (801ddb0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801dd8a:	480a      	ldr	r0, [pc, #40]	; (801ddb4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801dd8c:	f007 f892 	bl	8024eb4 <__aeabi_atexit>
 801dd90:	4b05      	ldr	r3, [pc, #20]	; (801dda8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801dd92:	64ab      	str	r3, [r5, #72]	; 0x48
 801dd94:	4b07      	ldr	r3, [pc, #28]	; (801ddb4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801dd96:	64eb      	str	r3, [r5, #76]	; 0x4c
 801dd98:	bd38      	pop	{r3, r4, r5, pc}
 801dd9a:	bf00      	nop
 801dd9c:	2400b178 	.word	0x2400b178
 801dda0:	24000000 	.word	0x24000000
 801dda4:	0801bbdf 	.word	0x0801bbdf
 801dda8:	240000b8 	.word	0x240000b8
 801ddac:	2400b17c 	.word	0x2400b17c
 801ddb0:	0801bbdd 	.word	0x0801bbdd
 801ddb4:	240000bc 	.word	0x240000bc

0801ddb8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801ddb8:	b538      	push	{r3, r4, r5, lr}
 801ddba:	4c15      	ldr	r4, [pc, #84]	; (801de10 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801ddbc:	4605      	mov	r5, r0
 801ddbe:	7823      	ldrb	r3, [r4, #0]
 801ddc0:	f3bf 8f5b 	dmb	ish
 801ddc4:	07da      	lsls	r2, r3, #31
 801ddc6:	d40b      	bmi.n	801dde0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801ddc8:	4620      	mov	r0, r4
 801ddca:	f007 f87a 	bl	8024ec2 <__cxa_guard_acquire>
 801ddce:	b138      	cbz	r0, 801dde0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801ddd0:	4620      	mov	r0, r4
 801ddd2:	f007 f882 	bl	8024eda <__cxa_guard_release>
 801ddd6:	4a0f      	ldr	r2, [pc, #60]	; (801de14 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801ddd8:	490f      	ldr	r1, [pc, #60]	; (801de18 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801ddda:	4810      	ldr	r0, [pc, #64]	; (801de1c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801dddc:	f007 f86a 	bl	8024eb4 <__aeabi_atexit>
 801dde0:	4c0f      	ldr	r4, [pc, #60]	; (801de20 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801dde2:	7823      	ldrb	r3, [r4, #0]
 801dde4:	f3bf 8f5b 	dmb	ish
 801dde8:	07db      	lsls	r3, r3, #31
 801ddea:	d40b      	bmi.n	801de04 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801ddec:	4620      	mov	r0, r4
 801ddee:	f007 f868 	bl	8024ec2 <__cxa_guard_acquire>
 801ddf2:	b138      	cbz	r0, 801de04 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801ddf4:	4620      	mov	r0, r4
 801ddf6:	f007 f870 	bl	8024eda <__cxa_guard_release>
 801ddfa:	4a06      	ldr	r2, [pc, #24]	; (801de14 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801ddfc:	4909      	ldr	r1, [pc, #36]	; (801de24 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801ddfe:	480a      	ldr	r0, [pc, #40]	; (801de28 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801de00:	f007 f858 	bl	8024eb4 <__aeabi_atexit>
 801de04:	4b05      	ldr	r3, [pc, #20]	; (801de1c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801de06:	642b      	str	r3, [r5, #64]	; 0x40
 801de08:	4b07      	ldr	r3, [pc, #28]	; (801de28 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801de0a:	646b      	str	r3, [r5, #68]	; 0x44
 801de0c:	bd38      	pop	{r3, r4, r5, pc}
 801de0e:	bf00      	nop
 801de10:	2400b140 	.word	0x2400b140
 801de14:	24000000 	.word	0x24000000
 801de18:	0801bbe3 	.word	0x0801bbe3
 801de1c:	24000080 	.word	0x24000080
 801de20:	2400b144 	.word	0x2400b144
 801de24:	0801bbe1 	.word	0x0801bbe1
 801de28:	24000084 	.word	0x24000084

0801de2c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801de2c:	b538      	push	{r3, r4, r5, lr}
 801de2e:	4c15      	ldr	r4, [pc, #84]	; (801de84 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801de30:	4605      	mov	r5, r0
 801de32:	7823      	ldrb	r3, [r4, #0]
 801de34:	f3bf 8f5b 	dmb	ish
 801de38:	07da      	lsls	r2, r3, #31
 801de3a:	d40b      	bmi.n	801de54 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801de3c:	4620      	mov	r0, r4
 801de3e:	f007 f840 	bl	8024ec2 <__cxa_guard_acquire>
 801de42:	b138      	cbz	r0, 801de54 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801de44:	4620      	mov	r0, r4
 801de46:	f007 f848 	bl	8024eda <__cxa_guard_release>
 801de4a:	4a0f      	ldr	r2, [pc, #60]	; (801de88 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801de4c:	490f      	ldr	r1, [pc, #60]	; (801de8c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801de4e:	4810      	ldr	r0, [pc, #64]	; (801de90 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801de50:	f007 f830 	bl	8024eb4 <__aeabi_atexit>
 801de54:	4c0f      	ldr	r4, [pc, #60]	; (801de94 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801de56:	7823      	ldrb	r3, [r4, #0]
 801de58:	f3bf 8f5b 	dmb	ish
 801de5c:	07db      	lsls	r3, r3, #31
 801de5e:	d40b      	bmi.n	801de78 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801de60:	4620      	mov	r0, r4
 801de62:	f007 f82e 	bl	8024ec2 <__cxa_guard_acquire>
 801de66:	b138      	cbz	r0, 801de78 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801de68:	4620      	mov	r0, r4
 801de6a:	f007 f836 	bl	8024eda <__cxa_guard_release>
 801de6e:	4a06      	ldr	r2, [pc, #24]	; (801de88 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801de70:	4909      	ldr	r1, [pc, #36]	; (801de98 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801de72:	480a      	ldr	r0, [pc, #40]	; (801de9c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801de74:	f007 f81e 	bl	8024eb4 <__aeabi_atexit>
 801de78:	4b05      	ldr	r3, [pc, #20]	; (801de90 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801de7a:	63ab      	str	r3, [r5, #56]	; 0x38
 801de7c:	4b07      	ldr	r3, [pc, #28]	; (801de9c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801de7e:	63eb      	str	r3, [r5, #60]	; 0x3c
 801de80:	bd38      	pop	{r3, r4, r5, pc}
 801de82:	bf00      	nop
 801de84:	2400b160 	.word	0x2400b160
 801de88:	24000000 	.word	0x24000000
 801de8c:	0801bbe7 	.word	0x0801bbe7
 801de90:	240000a0 	.word	0x240000a0
 801de94:	2400b164 	.word	0x2400b164
 801de98:	0801bbe5 	.word	0x0801bbe5
 801de9c:	240000a4 	.word	0x240000a4

0801dea0 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801dea0:	b510      	push	{r4, lr}
 801dea2:	4604      	mov	r4, r0
 801dea4:	f7ff ff14 	bl	801dcd0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801dea8:	4620      	mov	r0, r4
 801deaa:	f7ff ff85 	bl	801ddb8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801deae:	4620      	mov	r0, r4
 801deb0:	f7ff ff48 	bl	801dd44 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801deb4:	4620      	mov	r0, r4
 801deb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801deba:	f7ff bfb7 	b.w	801de2c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801dec0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801dec0:	b538      	push	{r3, r4, r5, lr}
 801dec2:	4c15      	ldr	r4, [pc, #84]	; (801df18 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801dec4:	4605      	mov	r5, r0
 801dec6:	7823      	ldrb	r3, [r4, #0]
 801dec8:	f3bf 8f5b 	dmb	ish
 801decc:	07da      	lsls	r2, r3, #31
 801dece:	d40b      	bmi.n	801dee8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801ded0:	4620      	mov	r0, r4
 801ded2:	f006 fff6 	bl	8024ec2 <__cxa_guard_acquire>
 801ded6:	b138      	cbz	r0, 801dee8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801ded8:	4620      	mov	r0, r4
 801deda:	f006 fffe 	bl	8024eda <__cxa_guard_release>
 801dede:	4a0f      	ldr	r2, [pc, #60]	; (801df1c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801dee0:	490f      	ldr	r1, [pc, #60]	; (801df20 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801dee2:	4810      	ldr	r0, [pc, #64]	; (801df24 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801dee4:	f006 ffe6 	bl	8024eb4 <__aeabi_atexit>
 801dee8:	4c0f      	ldr	r4, [pc, #60]	; (801df28 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801deea:	7823      	ldrb	r3, [r4, #0]
 801deec:	f3bf 8f5b 	dmb	ish
 801def0:	07db      	lsls	r3, r3, #31
 801def2:	d40b      	bmi.n	801df0c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801def4:	4620      	mov	r0, r4
 801def6:	f006 ffe4 	bl	8024ec2 <__cxa_guard_acquire>
 801defa:	b138      	cbz	r0, 801df0c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801defc:	4620      	mov	r0, r4
 801defe:	f006 ffec 	bl	8024eda <__cxa_guard_release>
 801df02:	4a06      	ldr	r2, [pc, #24]	; (801df1c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801df04:	4909      	ldr	r1, [pc, #36]	; (801df2c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801df06:	480a      	ldr	r0, [pc, #40]	; (801df30 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801df08:	f006 ffd4 	bl	8024eb4 <__aeabi_atexit>
 801df0c:	4b05      	ldr	r3, [pc, #20]	; (801df24 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801df0e:	662b      	str	r3, [r5, #96]	; 0x60
 801df10:	4b07      	ldr	r3, [pc, #28]	; (801df30 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801df12:	666b      	str	r3, [r5, #100]	; 0x64
 801df14:	bd38      	pop	{r3, r4, r5, pc}
 801df16:	bf00      	nop
 801df18:	2400b148 	.word	0x2400b148
 801df1c:	24000000 	.word	0x24000000
 801df20:	0801bbd3 	.word	0x0801bbd3
 801df24:	24000088 	.word	0x24000088
 801df28:	2400b14c 	.word	0x2400b14c
 801df2c:	0801bbd1 	.word	0x0801bbd1
 801df30:	2400008c 	.word	0x2400008c

0801df34 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801df34:	b538      	push	{r3, r4, r5, lr}
 801df36:	4c15      	ldr	r4, [pc, #84]	; (801df8c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801df38:	4605      	mov	r5, r0
 801df3a:	7823      	ldrb	r3, [r4, #0]
 801df3c:	f3bf 8f5b 	dmb	ish
 801df40:	07da      	lsls	r2, r3, #31
 801df42:	d40b      	bmi.n	801df5c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801df44:	4620      	mov	r0, r4
 801df46:	f006 ffbc 	bl	8024ec2 <__cxa_guard_acquire>
 801df4a:	b138      	cbz	r0, 801df5c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801df4c:	4620      	mov	r0, r4
 801df4e:	f006 ffc4 	bl	8024eda <__cxa_guard_release>
 801df52:	4a0f      	ldr	r2, [pc, #60]	; (801df90 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801df54:	490f      	ldr	r1, [pc, #60]	; (801df94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801df56:	4810      	ldr	r0, [pc, #64]	; (801df98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801df58:	f006 ffac 	bl	8024eb4 <__aeabi_atexit>
 801df5c:	4c0f      	ldr	r4, [pc, #60]	; (801df9c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801df5e:	7823      	ldrb	r3, [r4, #0]
 801df60:	f3bf 8f5b 	dmb	ish
 801df64:	07db      	lsls	r3, r3, #31
 801df66:	d40b      	bmi.n	801df80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801df68:	4620      	mov	r0, r4
 801df6a:	f006 ffaa 	bl	8024ec2 <__cxa_guard_acquire>
 801df6e:	b138      	cbz	r0, 801df80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801df70:	4620      	mov	r0, r4
 801df72:	f006 ffb2 	bl	8024eda <__cxa_guard_release>
 801df76:	4a06      	ldr	r2, [pc, #24]	; (801df90 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801df78:	4909      	ldr	r1, [pc, #36]	; (801dfa0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801df7a:	480a      	ldr	r0, [pc, #40]	; (801dfa4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801df7c:	f006 ff9a 	bl	8024eb4 <__aeabi_atexit>
 801df80:	4b05      	ldr	r3, [pc, #20]	; (801df98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801df82:	65ab      	str	r3, [r5, #88]	; 0x58
 801df84:	4b07      	ldr	r3, [pc, #28]	; (801dfa4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801df86:	65eb      	str	r3, [r5, #92]	; 0x5c
 801df88:	bd38      	pop	{r3, r4, r5, pc}
 801df8a:	bf00      	nop
 801df8c:	2400b120 	.word	0x2400b120
 801df90:	24000000 	.word	0x24000000
 801df94:	0801bbd7 	.word	0x0801bbd7
 801df98:	24000060 	.word	0x24000060
 801df9c:	2400b124 	.word	0x2400b124
 801dfa0:	0801bbd5 	.word	0x0801bbd5
 801dfa4:	24000064 	.word	0x24000064

0801dfa8 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801dfa8:	b510      	push	{r4, lr}
 801dfaa:	4604      	mov	r4, r0
 801dfac:	f7ff ff88 	bl	801dec0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801dfb0:	4620      	mov	r0, r4
 801dfb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dfb6:	f7ff bfbd 	b.w	801df34 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801dfbc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801dfbc:	b538      	push	{r3, r4, r5, lr}
 801dfbe:	4c15      	ldr	r4, [pc, #84]	; (801e014 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801dfc0:	4605      	mov	r5, r0
 801dfc2:	7823      	ldrb	r3, [r4, #0]
 801dfc4:	f3bf 8f5b 	dmb	ish
 801dfc8:	07da      	lsls	r2, r3, #31
 801dfca:	d40b      	bmi.n	801dfe4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801dfcc:	4620      	mov	r0, r4
 801dfce:	f006 ff78 	bl	8024ec2 <__cxa_guard_acquire>
 801dfd2:	b138      	cbz	r0, 801dfe4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801dfd4:	4620      	mov	r0, r4
 801dfd6:	f006 ff80 	bl	8024eda <__cxa_guard_release>
 801dfda:	4a0f      	ldr	r2, [pc, #60]	; (801e018 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801dfdc:	490f      	ldr	r1, [pc, #60]	; (801e01c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801dfde:	4810      	ldr	r0, [pc, #64]	; (801e020 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801dfe0:	f006 ff68 	bl	8024eb4 <__aeabi_atexit>
 801dfe4:	4c0f      	ldr	r4, [pc, #60]	; (801e024 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801dfe6:	7823      	ldrb	r3, [r4, #0]
 801dfe8:	f3bf 8f5b 	dmb	ish
 801dfec:	07db      	lsls	r3, r3, #31
 801dfee:	d40b      	bmi.n	801e008 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801dff0:	4620      	mov	r0, r4
 801dff2:	f006 ff66 	bl	8024ec2 <__cxa_guard_acquire>
 801dff6:	b138      	cbz	r0, 801e008 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801dff8:	4620      	mov	r0, r4
 801dffa:	f006 ff6e 	bl	8024eda <__cxa_guard_release>
 801dffe:	4a06      	ldr	r2, [pc, #24]	; (801e018 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e000:	4909      	ldr	r1, [pc, #36]	; (801e028 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801e002:	480a      	ldr	r0, [pc, #40]	; (801e02c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e004:	f006 ff56 	bl	8024eb4 <__aeabi_atexit>
 801e008:	4b05      	ldr	r3, [pc, #20]	; (801e020 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e00a:	672b      	str	r3, [r5, #112]	; 0x70
 801e00c:	4b07      	ldr	r3, [pc, #28]	; (801e02c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e00e:	676b      	str	r3, [r5, #116]	; 0x74
 801e010:	bd38      	pop	{r3, r4, r5, pc}
 801e012:	bf00      	nop
 801e014:	2400b118 	.word	0x2400b118
 801e018:	24000000 	.word	0x24000000
 801e01c:	0801bbcb 	.word	0x0801bbcb
 801e020:	24000058 	.word	0x24000058
 801e024:	2400b11c 	.word	0x2400b11c
 801e028:	0801bbc9 	.word	0x0801bbc9
 801e02c:	2400005c 	.word	0x2400005c

0801e030 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801e030:	b538      	push	{r3, r4, r5, lr}
 801e032:	4c15      	ldr	r4, [pc, #84]	; (801e088 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801e034:	4605      	mov	r5, r0
 801e036:	7823      	ldrb	r3, [r4, #0]
 801e038:	f3bf 8f5b 	dmb	ish
 801e03c:	07da      	lsls	r2, r3, #31
 801e03e:	d40b      	bmi.n	801e058 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e040:	4620      	mov	r0, r4
 801e042:	f006 ff3e 	bl	8024ec2 <__cxa_guard_acquire>
 801e046:	b138      	cbz	r0, 801e058 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e048:	4620      	mov	r0, r4
 801e04a:	f006 ff46 	bl	8024eda <__cxa_guard_release>
 801e04e:	4a0f      	ldr	r2, [pc, #60]	; (801e08c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e050:	490f      	ldr	r1, [pc, #60]	; (801e090 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801e052:	4810      	ldr	r0, [pc, #64]	; (801e094 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e054:	f006 ff2e 	bl	8024eb4 <__aeabi_atexit>
 801e058:	4c0f      	ldr	r4, [pc, #60]	; (801e098 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801e05a:	7823      	ldrb	r3, [r4, #0]
 801e05c:	f3bf 8f5b 	dmb	ish
 801e060:	07db      	lsls	r3, r3, #31
 801e062:	d40b      	bmi.n	801e07c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e064:	4620      	mov	r0, r4
 801e066:	f006 ff2c 	bl	8024ec2 <__cxa_guard_acquire>
 801e06a:	b138      	cbz	r0, 801e07c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e06c:	4620      	mov	r0, r4
 801e06e:	f006 ff34 	bl	8024eda <__cxa_guard_release>
 801e072:	4a06      	ldr	r2, [pc, #24]	; (801e08c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e074:	4909      	ldr	r1, [pc, #36]	; (801e09c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801e076:	480a      	ldr	r0, [pc, #40]	; (801e0a0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e078:	f006 ff1c 	bl	8024eb4 <__aeabi_atexit>
 801e07c:	4b05      	ldr	r3, [pc, #20]	; (801e094 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e07e:	66ab      	str	r3, [r5, #104]	; 0x68
 801e080:	4b07      	ldr	r3, [pc, #28]	; (801e0a0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e082:	66eb      	str	r3, [r5, #108]	; 0x6c
 801e084:	bd38      	pop	{r3, r4, r5, pc}
 801e086:	bf00      	nop
 801e088:	2400b110 	.word	0x2400b110
 801e08c:	24000000 	.word	0x24000000
 801e090:	0801bbcf 	.word	0x0801bbcf
 801e094:	24000050 	.word	0x24000050
 801e098:	2400b114 	.word	0x2400b114
 801e09c:	0801bbcd 	.word	0x0801bbcd
 801e0a0:	24000054 	.word	0x24000054

0801e0a4 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801e0a4:	b510      	push	{r4, lr}
 801e0a6:	4604      	mov	r4, r0
 801e0a8:	f7ff ff88 	bl	801dfbc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801e0ac:	4620      	mov	r0, r4
 801e0ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e0b2:	f7ff bfbd 	b.w	801e030 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801e0b6 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801e0b6:	b510      	push	{r4, lr}
 801e0b8:	4604      	mov	r4, r0
 801e0ba:	f7ff fff3 	bl	801e0a4 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801e0be:	4620      	mov	r0, r4
 801e0c0:	f7ff ff72 	bl	801dfa8 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801e0c4:	4620      	mov	r0, r4
 801e0c6:	f7ff fdf9 	bl	801dcbc <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801e0ca:	4620      	mov	r0, r4
 801e0cc:	f7ff fcfa 	bl	801dac4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801e0d0:	4620      	mov	r0, r4
 801e0d2:	f7ff fd75 	bl	801dbc0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801e0d6:	4620      	mov	r0, r4
 801e0d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e0dc:	f7ff bee0 	b.w	801dea0 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801e0e0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801e0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0e4:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 801e0e8:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 801e0ec:	2d00      	cmp	r5, #0
 801e0ee:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 801e0f2:	fb05 4c0e 	mla	ip, r5, lr, r4
 801e0f6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 801e0fa:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801e0fe:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801e102:	eb02 0a0c 	add.w	sl, r2, ip
 801e106:	8808      	ldrh	r0, [r1, #0]
 801e108:	f2c0 80b0 	blt.w	801e26c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801e10c:	45ab      	cmp	fp, r5
 801e10e:	f340 80ad 	ble.w	801e26c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801e112:	2c00      	cmp	r4, #0
 801e114:	f2c0 80a8 	blt.w	801e268 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801e118:	45a6      	cmp	lr, r4
 801e11a:	f340 80a5 	ble.w	801e268 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801e11e:	f812 200c 	ldrb.w	r2, [r2, ip]
 801e122:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 801e126:	1c62      	adds	r2, r4, #1
 801e128:	f100 80a3 	bmi.w	801e272 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801e12c:	4596      	cmp	lr, r2
 801e12e:	f340 80a0 	ble.w	801e272 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801e132:	f1b9 0f00 	cmp.w	r9, #0
 801e136:	f000 809c 	beq.w	801e272 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801e13a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801e13e:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801e142:	3501      	adds	r5, #1
 801e144:	f100 8099 	bmi.w	801e27a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801e148:	45ab      	cmp	fp, r5
 801e14a:	f340 8096 	ble.w	801e27a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801e14e:	2f00      	cmp	r7, #0
 801e150:	f000 8093 	beq.w	801e27a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801e154:	2c00      	cmp	r4, #0
 801e156:	f2c0 808e 	blt.w	801e276 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801e15a:	45a6      	cmp	lr, r4
 801e15c:	f340 808b 	ble.w	801e276 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801e160:	f81a 200e 	ldrb.w	r2, [sl, lr]
 801e164:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 801e168:	3401      	adds	r4, #1
 801e16a:	f100 8089 	bmi.w	801e280 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801e16e:	45a6      	cmp	lr, r4
 801e170:	f340 8086 	ble.w	801e280 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801e174:	f1b9 0f00 	cmp.w	r9, #0
 801e178:	f000 8082 	beq.w	801e280 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801e17c:	44d6      	add	lr, sl
 801e17e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801e182:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801e186:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801e18a:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801e18e:	fb19 fe07 	smulbb	lr, r9, r7
 801e192:	f1c7 0210 	rsb	r2, r7, #16
 801e196:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801e19a:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801e19e:	eba2 0209 	sub.w	r2, r2, r9
 801e1a2:	ea44 0808 	orr.w	r8, r4, r8
 801e1a6:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801e1aa:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801e1ae:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801e1b2:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801e1b6:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801e1ba:	ea44 0c0c 	orr.w	ip, r4, ip
 801e1be:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801e1c2:	fb04 f40c 	mul.w	r4, r4, ip
 801e1c6:	fb02 4808 	mla	r8, r2, r8, r4
 801e1ca:	041a      	lsls	r2, r3, #16
 801e1cc:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e1d0:	b2b4      	uxth	r4, r6
 801e1d2:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801e1d6:	43f6      	mvns	r6, r6
 801e1d8:	4313      	orrs	r3, r2
 801e1da:	042a      	lsls	r2, r5, #16
 801e1dc:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801e1e0:	b2f6      	uxtb	r6, r6
 801e1e2:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801e1e6:	fb0e 8303 	mla	r3, lr, r3, r8
 801e1ea:	432a      	orrs	r2, r5
 801e1ec:	fb07 3202 	mla	r2, r7, r2, r3
 801e1f0:	10c7      	asrs	r7, r0, #3
 801e1f2:	0d53      	lsrs	r3, r2, #21
 801e1f4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e1f8:	0952      	lsrs	r2, r2, #5
 801e1fa:	fb17 f706 	smulbb	r7, r7, r6
 801e1fe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e202:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e206:	431a      	orrs	r2, r3
 801e208:	b293      	uxth	r3, r2
 801e20a:	1202      	asrs	r2, r0, #8
 801e20c:	121d      	asrs	r5, r3, #8
 801e20e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801e212:	00c0      	lsls	r0, r0, #3
 801e214:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801e218:	fb12 f206 	smulbb	r2, r2, r6
 801e21c:	b2c0      	uxtb	r0, r0
 801e21e:	fb05 2504 	mla	r5, r5, r4, r2
 801e222:	10da      	asrs	r2, r3, #3
 801e224:	fb10 f006 	smulbb	r0, r0, r6
 801e228:	00db      	lsls	r3, r3, #3
 801e22a:	b2ad      	uxth	r5, r5
 801e22c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801e230:	b2db      	uxtb	r3, r3
 801e232:	fb02 7204 	mla	r2, r2, r4, r7
 801e236:	fb03 0004 	mla	r0, r3, r4, r0
 801e23a:	1c6b      	adds	r3, r5, #1
 801e23c:	b292      	uxth	r2, r2
 801e23e:	b280      	uxth	r0, r0
 801e240:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801e244:	1c43      	adds	r3, r0, #1
 801e246:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801e24a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801e24e:	1c50      	adds	r0, r2, #1
 801e250:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801e254:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e258:	0952      	lsrs	r2, r2, #5
 801e25a:	432b      	orrs	r3, r5
 801e25c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e260:	4313      	orrs	r3, r2
 801e262:	800b      	strh	r3, [r1, #0]
 801e264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e268:	4680      	mov	r8, r0
 801e26a:	e75c      	b.n	801e126 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 801e26c:	4684      	mov	ip, r0
 801e26e:	4680      	mov	r8, r0
 801e270:	e767      	b.n	801e142 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801e272:	4684      	mov	ip, r0
 801e274:	e765      	b.n	801e142 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801e276:	4605      	mov	r5, r0
 801e278:	e776      	b.n	801e168 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 801e27a:	4603      	mov	r3, r0
 801e27c:	4605      	mov	r5, r0
 801e27e:	e782      	b.n	801e186 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801e280:	4603      	mov	r3, r0
 801e282:	e780      	b.n	801e186 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0801e284 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e288:	b099      	sub	sp, #100	; 0x64
 801e28a:	9215      	str	r2, [sp, #84]	; 0x54
 801e28c:	9309      	str	r3, [sp, #36]	; 0x24
 801e28e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801e290:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 801e294:	9016      	str	r0, [sp, #88]	; 0x58
 801e296:	930d      	str	r3, [sp, #52]	; 0x34
 801e298:	6850      	ldr	r0, [r2, #4]
 801e29a:	910c      	str	r1, [sp, #48]	; 0x30
 801e29c:	6812      	ldr	r2, [r2, #0]
 801e29e:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801e2a2:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 801e2a6:	fb00 1303 	mla	r3, r0, r3, r1
 801e2aa:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801e2ae:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e2b0:	681b      	ldr	r3, [r3, #0]
 801e2b2:	930b      	str	r3, [sp, #44]	; 0x2c
 801e2b4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e2b6:	685e      	ldr	r6, [r3, #4]
 801e2b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e2ba:	3604      	adds	r6, #4
 801e2bc:	43db      	mvns	r3, r3
 801e2be:	b2db      	uxtb	r3, r3
 801e2c0:	930a      	str	r3, [sp, #40]	; 0x28
 801e2c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e2c4:	2b00      	cmp	r3, #0
 801e2c6:	dc03      	bgt.n	801e2d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801e2c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e2ca:	2b00      	cmp	r3, #0
 801e2cc:	f340 8225 	ble.w	801e71a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801e2d0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e2d2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e2d6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e2da:	1e48      	subs	r0, r1, #1
 801e2dc:	1e57      	subs	r7, r2, #1
 801e2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e2e0:	2b00      	cmp	r3, #0
 801e2e2:	f340 80e3 	ble.w	801e4ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801e2e6:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801e2ea:	ea4f 4325 	mov.w	r3, r5, asr #16
 801e2ee:	d406      	bmi.n	801e2fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e2f0:	4584      	cmp	ip, r0
 801e2f2:	da04      	bge.n	801e2fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e2f4:	2b00      	cmp	r3, #0
 801e2f6:	db02      	blt.n	801e2fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e2f8:	42bb      	cmp	r3, r7
 801e2fa:	f2c0 80d8 	blt.w	801e4ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801e2fe:	f11c 0c01 	adds.w	ip, ip, #1
 801e302:	f100 80c9 	bmi.w	801e498 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e306:	4561      	cmp	r1, ip
 801e308:	f2c0 80c6 	blt.w	801e498 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e30c:	3301      	adds	r3, #1
 801e30e:	f100 80c3 	bmi.w	801e498 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e312:	429a      	cmp	r2, r3
 801e314:	f2c0 80c0 	blt.w	801e498 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e318:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801e31c:	4647      	mov	r7, r8
 801e31e:	f1bb 0f00 	cmp.w	fp, #0
 801e322:	f340 80e3 	ble.w	801e4ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801e326:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e328:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801e32c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e32e:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801e332:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801e336:	ea5f 422a 	movs.w	r2, sl, asr #16
 801e33a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801e33e:	689b      	ldr	r3, [r3, #8]
 801e340:	f100 8121 	bmi.w	801e586 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801e344:	f103 39ff 	add.w	r9, r3, #4294967295
 801e348:	454a      	cmp	r2, r9
 801e34a:	f280 811c 	bge.w	801e586 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801e34e:	f1bc 0f00 	cmp.w	ip, #0
 801e352:	f2c0 8118 	blt.w	801e586 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801e356:	f10e 39ff 	add.w	r9, lr, #4294967295
 801e35a:	45cc      	cmp	ip, r9
 801e35c:	f280 8113 	bge.w	801e586 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801e360:	b21b      	sxth	r3, r3
 801e362:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e364:	fb0c 2203 	mla	r2, ip, r3, r2
 801e368:	eb04 0902 	add.w	r9, r4, r2
 801e36c:	5ca2      	ldrb	r2, [r4, r2]
 801e36e:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801e372:	2800      	cmp	r0, #0
 801e374:	f000 80fe 	beq.w	801e574 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801e378:	f899 2001 	ldrb.w	r2, [r9, #1]
 801e37c:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801e380:	9211      	str	r2, [sp, #68]	; 0x44
 801e382:	b151      	cbz	r1, 801e39a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801e384:	eb09 0203 	add.w	r2, r9, r3
 801e388:	f819 3003 	ldrb.w	r3, [r9, r3]
 801e38c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e390:	930f      	str	r3, [sp, #60]	; 0x3c
 801e392:	7853      	ldrb	r3, [r2, #1]
 801e394:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e398:	9312      	str	r3, [sp, #72]	; 0x48
 801e39a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e39c:	fb10 f201 	smulbb	r2, r0, r1
 801e3a0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e3a2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801e3a6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e3aa:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801e3ae:	10d2      	asrs	r2, r2, #3
 801e3b0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e3b4:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801e3b8:	ea4c 0c03 	orr.w	ip, ip, r3
 801e3bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e3be:	041b      	lsls	r3, r3, #16
 801e3c0:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801e3c4:	4323      	orrs	r3, r4
 801e3c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e3c8:	4353      	muls	r3, r2
 801e3ca:	fb09 330c 	mla	r3, r9, ip, r3
 801e3ce:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801e3d2:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801e3d6:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e3da:	ea4c 0e0e 	orr.w	lr, ip, lr
 801e3de:	f1c1 0c10 	rsb	ip, r1, #16
 801e3e2:	ebac 0c00 	sub.w	ip, ip, r0
 801e3e6:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801e3ea:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801e3ee:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801e3f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e3f4:	0418      	lsls	r0, r3, #16
 801e3f6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e3fa:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801e3fe:	4318      	orrs	r0, r3
 801e400:	fb02 c200 	mla	r2, r2, r0, ip
 801e404:	8838      	ldrh	r0, [r7, #0]
 801e406:	0d53      	lsrs	r3, r2, #21
 801e408:	0952      	lsrs	r2, r2, #5
 801e40a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e40e:	1201      	asrs	r1, r0, #8
 801e410:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e414:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801e418:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801e41c:	00c0      	lsls	r0, r0, #3
 801e41e:	431a      	orrs	r2, r3
 801e420:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801e424:	fb11 f104 	smulbb	r1, r1, r4
 801e428:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801e42c:	b292      	uxth	r2, r2
 801e42e:	fb1e fe04 	smulbb	lr, lr, r4
 801e432:	b2c0      	uxtb	r0, r0
 801e434:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801e438:	fb10 f004 	smulbb	r0, r0, r4
 801e43c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e440:	fb0c 1c03 	mla	ip, ip, r3, r1
 801e444:	10d1      	asrs	r1, r2, #3
 801e446:	00d2      	lsls	r2, r2, #3
 801e448:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e44c:	fa1f fc8c 	uxth.w	ip, ip
 801e450:	b2d2      	uxtb	r2, r2
 801e452:	fb01 e103 	mla	r1, r1, r3, lr
 801e456:	fb02 0303 	mla	r3, r2, r3, r0
 801e45a:	b289      	uxth	r1, r1
 801e45c:	b29a      	uxth	r2, r3
 801e45e:	f10c 0301 	add.w	r3, ip, #1
 801e462:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801e466:	1c53      	adds	r3, r2, #1
 801e468:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e46c:	1c4a      	adds	r2, r1, #1
 801e46e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e472:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e476:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e47a:	0949      	lsrs	r1, r1, #5
 801e47c:	ea43 030c 	orr.w	r3, r3, ip
 801e480:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e484:	430b      	orrs	r3, r1
 801e486:	803b      	strh	r3, [r7, #0]
 801e488:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e48a:	3702      	adds	r7, #2
 801e48c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e490:	449a      	add	sl, r3
 801e492:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e494:	441d      	add	r5, r3
 801e496:	e742      	b.n	801e31e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801e498:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e49a:	f108 0802 	add.w	r8, r8, #2
 801e49e:	449a      	add	sl, r3
 801e4a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e4a2:	441d      	add	r5, r3
 801e4a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e4a6:	3b01      	subs	r3, #1
 801e4a8:	9309      	str	r3, [sp, #36]	; 0x24
 801e4aa:	e718      	b.n	801e2de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801e4ac:	d023      	beq.n	801e4f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801e4ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e4b0:	9825      	ldr	r0, [sp, #148]	; 0x94
 801e4b2:	3b01      	subs	r3, #1
 801e4b4:	fb00 a003 	mla	r0, r0, r3, sl
 801e4b8:	1400      	asrs	r0, r0, #16
 801e4ba:	f53f af2d 	bmi.w	801e318 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e4be:	3901      	subs	r1, #1
 801e4c0:	4288      	cmp	r0, r1
 801e4c2:	f6bf af29 	bge.w	801e318 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e4c6:	9926      	ldr	r1, [sp, #152]	; 0x98
 801e4c8:	fb01 5303 	mla	r3, r1, r3, r5
 801e4cc:	141b      	asrs	r3, r3, #16
 801e4ce:	f53f af23 	bmi.w	801e318 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e4d2:	3a01      	subs	r2, #1
 801e4d4:	4293      	cmp	r3, r2
 801e4d6:	f6bf af1f 	bge.w	801e318 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e4da:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801e4de:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801e4e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801e4e6:	f1be 0f00 	cmp.w	lr, #0
 801e4ea:	dc6c      	bgt.n	801e5c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801e4ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e4ee:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e4f2:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801e4f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e4f8:	2b00      	cmp	r3, #0
 801e4fa:	f340 810e 	ble.w	801e71a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801e4fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e502:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e504:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e508:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e50c:	eef0 6a62 	vmov.f32	s13, s5
 801e510:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e514:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e518:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e51c:	ee16 aa90 	vmov	sl, s13
 801e520:	eef0 6a43 	vmov.f32	s13, s6
 801e524:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e528:	ee16 5a90 	vmov	r5, s13
 801e52c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e530:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e534:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e538:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e53c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e540:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e544:	ee12 2a90 	vmov	r2, s5
 801e548:	eef0 2a47 	vmov.f32	s5, s14
 801e54c:	fb92 f3f3 	sdiv	r3, r2, r3
 801e550:	ee13 2a10 	vmov	r2, s6
 801e554:	9325      	str	r3, [sp, #148]	; 0x94
 801e556:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e558:	eeb0 3a67 	vmov.f32	s6, s15
 801e55c:	fb92 f3f3 	sdiv	r3, r2, r3
 801e560:	9326      	str	r3, [sp, #152]	; 0x98
 801e562:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e564:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801e566:	3b01      	subs	r3, #1
 801e568:	930c      	str	r3, [sp, #48]	; 0x30
 801e56a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e56c:	bf08      	it	eq
 801e56e:	4613      	moveq	r3, r2
 801e570:	9309      	str	r3, [sp, #36]	; 0x24
 801e572:	e6a6      	b.n	801e2c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e574:	2900      	cmp	r1, #0
 801e576:	f43f af10 	beq.w	801e39a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801e57a:	f819 3003 	ldrb.w	r3, [r9, r3]
 801e57e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e582:	930f      	str	r3, [sp, #60]	; 0x3c
 801e584:	e709      	b.n	801e39a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801e586:	f112 0901 	adds.w	r9, r2, #1
 801e58a:	f53f af7d 	bmi.w	801e488 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801e58e:	454b      	cmp	r3, r9
 801e590:	f6ff af7a 	blt.w	801e488 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801e594:	f11c 0901 	adds.w	r9, ip, #1
 801e598:	f53f af76 	bmi.w	801e488 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801e59c:	45ce      	cmp	lr, r9
 801e59e:	f6ff af73 	blt.w	801e488 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801e5a2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e5a4:	b21b      	sxth	r3, r3
 801e5a6:	9202      	str	r2, [sp, #8]
 801e5a8:	fa0f f28e 	sxth.w	r2, lr
 801e5ac:	9300      	str	r3, [sp, #0]
 801e5ae:	4633      	mov	r3, r6
 801e5b0:	9201      	str	r2, [sp, #4]
 801e5b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e5b4:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801e5b8:	e9cd c003 	strd	ip, r0, [sp, #12]
 801e5bc:	4639      	mov	r1, r7
 801e5be:	9816      	ldr	r0, [sp, #88]	; 0x58
 801e5c0:	f7ff fd8e 	bl	801e0e0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801e5c4:	e760      	b.n	801e488 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801e5c6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e5c8:	ea4f 422a 	mov.w	r2, sl, asr #16
 801e5cc:	1429      	asrs	r1, r5, #16
 801e5ce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e5d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801e5d4:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801e5d8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e5dc:	fb03 2101 	mla	r1, r3, r1, r2
 801e5e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e5e2:	440a      	add	r2, r1
 801e5e4:	5c61      	ldrb	r1, [r4, r1]
 801e5e6:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801e5ea:	f1bc 0f00 	cmp.w	ip, #0
 801e5ee:	f000 808c 	beq.w	801e70a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801e5f2:	7857      	ldrb	r7, [r2, #1]
 801e5f4:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801e5f8:	9413      	str	r4, [sp, #76]	; 0x4c
 801e5fa:	b140      	cbz	r0, 801e60e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801e5fc:	18d7      	adds	r7, r2, r3
 801e5fe:	5cd3      	ldrb	r3, [r2, r3]
 801e600:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e604:	9310      	str	r3, [sp, #64]	; 0x40
 801e606:	787b      	ldrb	r3, [r7, #1]
 801e608:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e60c:	9314      	str	r3, [sp, #80]	; 0x50
 801e60e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e610:	fb1c f200 	smulbb	r2, ip, r0
 801e614:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e616:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e61a:	041f      	lsls	r7, r3, #16
 801e61c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e620:	10d2      	asrs	r2, r2, #3
 801e622:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801e626:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801e62a:	431f      	orrs	r7, r3
 801e62c:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801e630:	9317      	str	r3, [sp, #92]	; 0x5c
 801e632:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e634:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801e636:	041b      	lsls	r3, r3, #16
 801e638:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801e63c:	ea43 030b 	orr.w	r3, r3, fp
 801e640:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801e644:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801e648:	4353      	muls	r3, r2
 801e64a:	fb04 3707 	mla	r7, r4, r7, r3
 801e64e:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801e652:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e654:	ea43 0b01 	orr.w	fp, r3, r1
 801e658:	f1c0 0110 	rsb	r1, r0, #16
 801e65c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e65e:	eba1 0c0c 	sub.w	ip, r1, ip
 801e662:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801e666:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801e66a:	fb0c 770b 	mla	r7, ip, fp, r7
 801e66e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801e672:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801e676:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e67a:	ea4c 0c0b 	orr.w	ip, ip, fp
 801e67e:	fb02 770c 	mla	r7, r2, ip, r7
 801e682:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e684:	0d79      	lsrs	r1, r7, #21
 801e686:	8812      	ldrh	r2, [r2, #0]
 801e688:	097f      	lsrs	r7, r7, #5
 801e68a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e68e:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801e692:	430f      	orrs	r7, r1
 801e694:	1211      	asrs	r1, r2, #8
 801e696:	b2bb      	uxth	r3, r7
 801e698:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801e69c:	10d7      	asrs	r7, r2, #3
 801e69e:	fb11 f104 	smulbb	r1, r1, r4
 801e6a2:	1218      	asrs	r0, r3, #8
 801e6a4:	00d2      	lsls	r2, r2, #3
 801e6a6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e6aa:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e6ae:	fb17 f704 	smulbb	r7, r7, r4
 801e6b2:	b2d2      	uxtb	r2, r2
 801e6b4:	fb00 1009 	mla	r0, r0, r9, r1
 801e6b8:	10d9      	asrs	r1, r3, #3
 801e6ba:	fb12 f204 	smulbb	r2, r2, r4
 801e6be:	00db      	lsls	r3, r3, #3
 801e6c0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e6c4:	b280      	uxth	r0, r0
 801e6c6:	b2db      	uxtb	r3, r3
 801e6c8:	fb01 7109 	mla	r1, r1, r9, r7
 801e6cc:	fb03 2309 	mla	r3, r3, r9, r2
 801e6d0:	1c42      	adds	r2, r0, #1
 801e6d2:	b289      	uxth	r1, r1
 801e6d4:	b29b      	uxth	r3, r3
 801e6d6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801e6da:	1c4f      	adds	r7, r1, #1
 801e6dc:	1c5a      	adds	r2, r3, #1
 801e6de:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801e6e2:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801e6e6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801e6ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e6ec:	0949      	lsrs	r1, r1, #5
 801e6ee:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e6f2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e6f6:	4310      	orrs	r0, r2
 801e6f8:	4308      	orrs	r0, r1
 801e6fa:	f823 0b02 	strh.w	r0, [r3], #2
 801e6fe:	930e      	str	r3, [sp, #56]	; 0x38
 801e700:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e702:	449a      	add	sl, r3
 801e704:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e706:	441d      	add	r5, r3
 801e708:	e6ed      	b.n	801e4e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801e70a:	2800      	cmp	r0, #0
 801e70c:	f43f af7f 	beq.w	801e60e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801e710:	5cd3      	ldrb	r3, [r2, r3]
 801e712:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801e716:	9310      	str	r3, [sp, #64]	; 0x40
 801e718:	e779      	b.n	801e60e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801e71a:	b019      	add	sp, #100	; 0x64
 801e71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e720 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801e720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e724:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 801e728:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801e72c:	f1b8 0f00 	cmp.w	r8, #0
 801e730:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 801e734:	fb08 470e 	mla	r7, r8, lr, r4
 801e738:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801e73c:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801e740:	eb02 0907 	add.w	r9, r2, r7
 801e744:	8808      	ldrh	r0, [r1, #0]
 801e746:	db67      	blt.n	801e818 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801e748:	45c2      	cmp	sl, r8
 801e74a:	dd65      	ble.n	801e818 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801e74c:	2c00      	cmp	r4, #0
 801e74e:	db61      	blt.n	801e814 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801e750:	45a6      	cmp	lr, r4
 801e752:	dd5f      	ble.n	801e814 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801e754:	5dd2      	ldrb	r2, [r2, r7]
 801e756:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801e75a:	1c62      	adds	r2, r4, #1
 801e75c:	d45f      	bmi.n	801e81e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801e75e:	4596      	cmp	lr, r2
 801e760:	dd5d      	ble.n	801e81e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801e762:	2d00      	cmp	r5, #0
 801e764:	d05b      	beq.n	801e81e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801e766:	f899 2001 	ldrb.w	r2, [r9, #1]
 801e76a:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801e76e:	f118 0801 	adds.w	r8, r8, #1
 801e772:	d458      	bmi.n	801e826 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801e774:	45c2      	cmp	sl, r8
 801e776:	dd56      	ble.n	801e826 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801e778:	2e00      	cmp	r6, #0
 801e77a:	d054      	beq.n	801e826 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801e77c:	2c00      	cmp	r4, #0
 801e77e:	db50      	blt.n	801e822 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801e780:	45a6      	cmp	lr, r4
 801e782:	dd4e      	ble.n	801e822 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801e784:	f819 200e 	ldrb.w	r2, [r9, lr]
 801e788:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801e78c:	3401      	adds	r4, #1
 801e78e:	d407      	bmi.n	801e7a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801e790:	45a6      	cmp	lr, r4
 801e792:	dd05      	ble.n	801e7a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801e794:	b125      	cbz	r5, 801e7a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801e796:	44ce      	add	lr, r9
 801e798:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801e79c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801e7a0:	fb15 f406 	smulbb	r4, r5, r6
 801e7a4:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801e7a8:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801e7ac:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801e7b0:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801e7b4:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801e7b8:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801e7bc:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801e7c0:	ea43 0c0c 	orr.w	ip, r3, ip
 801e7c4:	f1c6 0310 	rsb	r3, r6, #16
 801e7c8:	ea4e 0707 	orr.w	r7, lr, r7
 801e7cc:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801e7d0:	1b5b      	subs	r3, r3, r5
 801e7d2:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801e7d6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e7da:	437d      	muls	r5, r7
 801e7dc:	fb03 5c0c 	mla	ip, r3, ip, r5
 801e7e0:	0403      	lsls	r3, r0, #16
 801e7e2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801e7e6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801e7ea:	4318      	orrs	r0, r3
 801e7ec:	0413      	lsls	r3, r2, #16
 801e7ee:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e7f2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801e7f6:	fb04 c000 	mla	r0, r4, r0, ip
 801e7fa:	4313      	orrs	r3, r2
 801e7fc:	fb06 0003 	mla	r0, r6, r3, r0
 801e800:	0d43      	lsrs	r3, r0, #21
 801e802:	0940      	lsrs	r0, r0, #5
 801e804:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e808:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801e80c:	4318      	orrs	r0, r3
 801e80e:	8008      	strh	r0, [r1, #0]
 801e810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e814:	4684      	mov	ip, r0
 801e816:	e7a0      	b.n	801e75a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 801e818:	4607      	mov	r7, r0
 801e81a:	4684      	mov	ip, r0
 801e81c:	e7a7      	b.n	801e76e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801e81e:	4607      	mov	r7, r0
 801e820:	e7a5      	b.n	801e76e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801e822:	4602      	mov	r2, r0
 801e824:	e7b2      	b.n	801e78c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 801e826:	4602      	mov	r2, r0
 801e828:	e7ba      	b.n	801e7a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0801e82a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e82a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e82e:	b093      	sub	sp, #76	; 0x4c
 801e830:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e834:	920f      	str	r2, [sp, #60]	; 0x3c
 801e836:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801e838:	9010      	str	r0, [sp, #64]	; 0x40
 801e83a:	9108      	str	r1, [sp, #32]
 801e83c:	6850      	ldr	r0, [r2, #4]
 801e83e:	9306      	str	r3, [sp, #24]
 801e840:	6812      	ldr	r2, [r2, #0]
 801e842:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801e846:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 801e84a:	fb00 1303 	mla	r3, r0, r3, r1
 801e84e:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801e852:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e854:	681b      	ldr	r3, [r3, #0]
 801e856:	9307      	str	r3, [sp, #28]
 801e858:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e85a:	685f      	ldr	r7, [r3, #4]
 801e85c:	3704      	adds	r7, #4
 801e85e:	9b08      	ldr	r3, [sp, #32]
 801e860:	2b00      	cmp	r3, #0
 801e862:	dc03      	bgt.n	801e86c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801e864:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e866:	2b00      	cmp	r3, #0
 801e868:	f340 81b2 	ble.w	801ebd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801e86c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e86e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e872:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e876:	1e48      	subs	r0, r1, #1
 801e878:	f102 3cff 	add.w	ip, r2, #4294967295
 801e87c:	9b06      	ldr	r3, [sp, #24]
 801e87e:	2b00      	cmp	r3, #0
 801e880:	f340 80a9 	ble.w	801e9d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801e884:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801e888:	ea4f 4326 	mov.w	r3, r6, asr #16
 801e88c:	d406      	bmi.n	801e89c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e88e:	4586      	cmp	lr, r0
 801e890:	da04      	bge.n	801e89c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e892:	2b00      	cmp	r3, #0
 801e894:	db02      	blt.n	801e89c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e896:	4563      	cmp	r3, ip
 801e898:	f2c0 809e 	blt.w	801e9d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801e89c:	f11e 0e01 	adds.w	lr, lr, #1
 801e8a0:	f100 808f 	bmi.w	801e9c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801e8a4:	4571      	cmp	r1, lr
 801e8a6:	f2c0 808c 	blt.w	801e9c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801e8aa:	3301      	adds	r3, #1
 801e8ac:	f100 8089 	bmi.w	801e9c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801e8b0:	429a      	cmp	r2, r3
 801e8b2:	f2c0 8086 	blt.w	801e9c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801e8b6:	f8dd b018 	ldr.w	fp, [sp, #24]
 801e8ba:	46c8      	mov	r8, r9
 801e8bc:	f1bb 0f00 	cmp.w	fp, #0
 801e8c0:	f340 80a6 	ble.w	801ea10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801e8c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801e8c6:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801e8ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e8cc:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801e8d0:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801e8d4:	1422      	asrs	r2, r4, #16
 801e8d6:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801e8da:	689b      	ldr	r3, [r3, #8]
 801e8dc:	f100 80e3 	bmi.w	801eaa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801e8e0:	f103 3aff 	add.w	sl, r3, #4294967295
 801e8e4:	4552      	cmp	r2, sl
 801e8e6:	f280 80de 	bge.w	801eaa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801e8ea:	f1bc 0f00 	cmp.w	ip, #0
 801e8ee:	f2c0 80da 	blt.w	801eaa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801e8f2:	f10e 3aff 	add.w	sl, lr, #4294967295
 801e8f6:	45d4      	cmp	ip, sl
 801e8f8:	f280 80d5 	bge.w	801eaa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801e8fc:	b21b      	sxth	r3, r3
 801e8fe:	9d07      	ldr	r5, [sp, #28]
 801e900:	fb0c 2203 	mla	r2, ip, r3, r2
 801e904:	eb05 0a02 	add.w	sl, r5, r2
 801e908:	5caa      	ldrb	r2, [r5, r2]
 801e90a:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801e90e:	2800      	cmp	r0, #0
 801e910:	f000 80c0 	beq.w	801ea94 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801e914:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801e918:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801e91c:	920b      	str	r2, [sp, #44]	; 0x2c
 801e91e:	b151      	cbz	r1, 801e936 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801e920:	eb0a 0203 	add.w	r2, sl, r3
 801e924:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801e928:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801e92c:	9309      	str	r3, [sp, #36]	; 0x24
 801e92e:	7853      	ldrb	r3, [r2, #1]
 801e930:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801e934:	930c      	str	r3, [sp, #48]	; 0x30
 801e936:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e938:	fb10 f201 	smulbb	r2, r0, r1
 801e93c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e93e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801e942:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e946:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801e94a:	10d2      	asrs	r2, r2, #3
 801e94c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e950:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801e954:	ea4c 0c03 	orr.w	ip, ip, r3
 801e958:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e95a:	041b      	lsls	r3, r3, #16
 801e95c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801e960:	432b      	orrs	r3, r5
 801e962:	4353      	muls	r3, r2
 801e964:	fb0a 330c 	mla	r3, sl, ip, r3
 801e968:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801e96c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801e970:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e974:	ea4c 0e0e 	orr.w	lr, ip, lr
 801e978:	f1c1 0c10 	rsb	ip, r1, #16
 801e97c:	ebac 0c00 	sub.w	ip, ip, r0
 801e980:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801e984:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801e988:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801e98c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e98e:	0418      	lsls	r0, r3, #16
 801e990:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e994:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801e998:	4318      	orrs	r0, r3
 801e99a:	fb02 c200 	mla	r2, r2, r0, ip
 801e99e:	0d53      	lsrs	r3, r2, #21
 801e9a0:	0952      	lsrs	r2, r2, #5
 801e9a2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e9a6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e9aa:	431a      	orrs	r2, r3
 801e9ac:	f8a8 2000 	strh.w	r2, [r8]
 801e9b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e9b2:	f108 0802 	add.w	r8, r8, #2
 801e9b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e9ba:	441c      	add	r4, r3
 801e9bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e9be:	441e      	add	r6, r3
 801e9c0:	e77c      	b.n	801e8bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e9c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e9c4:	f109 0902 	add.w	r9, r9, #2
 801e9c8:	441c      	add	r4, r3
 801e9ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e9cc:	441e      	add	r6, r3
 801e9ce:	9b06      	ldr	r3, [sp, #24]
 801e9d0:	3b01      	subs	r3, #1
 801e9d2:	9306      	str	r3, [sp, #24]
 801e9d4:	e752      	b.n	801e87c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e9d6:	d020      	beq.n	801ea1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e9d8:	9b06      	ldr	r3, [sp, #24]
 801e9da:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801e9dc:	3b01      	subs	r3, #1
 801e9de:	fb00 4003 	mla	r0, r0, r3, r4
 801e9e2:	1400      	asrs	r0, r0, #16
 801e9e4:	f53f af67 	bmi.w	801e8b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e9e8:	3901      	subs	r1, #1
 801e9ea:	4288      	cmp	r0, r1
 801e9ec:	f6bf af63 	bge.w	801e8b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e9f0:	9920      	ldr	r1, [sp, #128]	; 0x80
 801e9f2:	fb01 6303 	mla	r3, r1, r3, r6
 801e9f6:	141b      	asrs	r3, r3, #16
 801e9f8:	f53f af5d 	bmi.w	801e8b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e9fc:	3a01      	subs	r2, #1
 801e9fe:	4293      	cmp	r3, r2
 801ea00:	f6bf af59 	bge.w	801e8b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ea04:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801ea08:	46ca      	mov	sl, r9
 801ea0a:	f1b8 0f00 	cmp.w	r8, #0
 801ea0e:	dc67      	bgt.n	801eae0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801ea10:	9b06      	ldr	r3, [sp, #24]
 801ea12:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801ea16:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801ea1a:	9b08      	ldr	r3, [sp, #32]
 801ea1c:	2b00      	cmp	r3, #0
 801ea1e:	f340 80d7 	ble.w	801ebd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801ea22:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ea26:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ea28:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ea2c:	eeb0 6a62 	vmov.f32	s12, s5
 801ea30:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ea34:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ea38:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ea3c:	ee16 4a10 	vmov	r4, s12
 801ea40:	eeb0 6a43 	vmov.f32	s12, s6
 801ea44:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ea48:	ee16 6a10 	vmov	r6, s12
 801ea4c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ea50:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ea54:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ea58:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ea5c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ea60:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ea64:	ee12 2a90 	vmov	r2, s5
 801ea68:	eef0 2a47 	vmov.f32	s5, s14
 801ea6c:	fb92 f3f3 	sdiv	r3, r2, r3
 801ea70:	ee13 2a10 	vmov	r2, s6
 801ea74:	931f      	str	r3, [sp, #124]	; 0x7c
 801ea76:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ea78:	eeb0 3a67 	vmov.f32	s6, s15
 801ea7c:	fb92 f3f3 	sdiv	r3, r2, r3
 801ea80:	9320      	str	r3, [sp, #128]	; 0x80
 801ea82:	9b08      	ldr	r3, [sp, #32]
 801ea84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ea86:	3b01      	subs	r3, #1
 801ea88:	9308      	str	r3, [sp, #32]
 801ea8a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ea8c:	bf08      	it	eq
 801ea8e:	4613      	moveq	r3, r2
 801ea90:	9306      	str	r3, [sp, #24]
 801ea92:	e6e4      	b.n	801e85e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801ea94:	2900      	cmp	r1, #0
 801ea96:	f43f af4e 	beq.w	801e936 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801ea9a:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801ea9e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801eaa2:	9309      	str	r3, [sp, #36]	; 0x24
 801eaa4:	e747      	b.n	801e936 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801eaa6:	f112 0a01 	adds.w	sl, r2, #1
 801eaaa:	d481      	bmi.n	801e9b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801eaac:	4553      	cmp	r3, sl
 801eaae:	f6ff af7f 	blt.w	801e9b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801eab2:	f11c 0a01 	adds.w	sl, ip, #1
 801eab6:	f53f af7b 	bmi.w	801e9b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801eaba:	45d6      	cmp	lr, sl
 801eabc:	f6ff af78 	blt.w	801e9b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801eac0:	b21b      	sxth	r3, r3
 801eac2:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801eac6:	fa0f f28e 	sxth.w	r2, lr
 801eaca:	9300      	str	r3, [sp, #0]
 801eacc:	463b      	mov	r3, r7
 801eace:	9201      	str	r2, [sp, #4]
 801ead0:	9a07      	ldr	r2, [sp, #28]
 801ead2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ead6:	4641      	mov	r1, r8
 801ead8:	9810      	ldr	r0, [sp, #64]	; 0x40
 801eada:	f7ff fe21 	bl	801e720 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801eade:	e767      	b.n	801e9b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801eae0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801eae2:	1422      	asrs	r2, r4, #16
 801eae4:	1431      	asrs	r1, r6, #16
 801eae6:	9d07      	ldr	r5, [sp, #28]
 801eae8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801eaec:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801eaf0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801eaf4:	fb03 2101 	mla	r1, r3, r1, r2
 801eaf8:	9a07      	ldr	r2, [sp, #28]
 801eafa:	440a      	add	r2, r1
 801eafc:	5c69      	ldrb	r1, [r5, r1]
 801eafe:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801eb02:	f1be 0f00 	cmp.w	lr, #0
 801eb06:	d05c      	beq.n	801ebc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 801eb08:	f892 c001 	ldrb.w	ip, [r2, #1]
 801eb0c:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801eb10:	950d      	str	r5, [sp, #52]	; 0x34
 801eb12:	b150      	cbz	r0, 801eb2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801eb14:	eb02 0c03 	add.w	ip, r2, r3
 801eb18:	5cd3      	ldrb	r3, [r2, r3]
 801eb1a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801eb1e:	930a      	str	r3, [sp, #40]	; 0x28
 801eb20:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801eb24:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801eb28:	930e      	str	r3, [sp, #56]	; 0x38
 801eb2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801eb2c:	fb1e f200 	smulbb	r2, lr, r0
 801eb30:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801eb32:	f108 38ff 	add.w	r8, r8, #4294967295
 801eb36:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801eb3a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801eb3e:	10d2      	asrs	r2, r2, #3
 801eb40:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801eb44:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801eb48:	ea4c 0c03 	orr.w	ip, ip, r3
 801eb4c:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801eb50:	9311      	str	r3, [sp, #68]	; 0x44
 801eb52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eb54:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801eb56:	041b      	lsls	r3, r3, #16
 801eb58:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801eb5c:	ea43 030b 	orr.w	r3, r3, fp
 801eb60:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801eb64:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801eb68:	4353      	muls	r3, r2
 801eb6a:	fb05 3c0c 	mla	ip, r5, ip, r3
 801eb6e:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801eb72:	ea43 0b01 	orr.w	fp, r3, r1
 801eb76:	f1c0 0110 	rsb	r1, r0, #16
 801eb7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eb7c:	eba1 0e0e 	sub.w	lr, r1, lr
 801eb80:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801eb84:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801eb88:	fb0e cc0b 	mla	ip, lr, fp, ip
 801eb8c:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801eb90:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801eb94:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801eb98:	ea4b 0e0e 	orr.w	lr, fp, lr
 801eb9c:	fb02 cc0e 	mla	ip, r2, lr, ip
 801eba0:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801eba4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801eba8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ebac:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801ebb0:	ea43 0c0c 	orr.w	ip, r3, ip
 801ebb4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ebb6:	441c      	add	r4, r3
 801ebb8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ebba:	f82a cb02 	strh.w	ip, [sl], #2
 801ebbe:	441e      	add	r6, r3
 801ebc0:	e723      	b.n	801ea0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801ebc2:	2800      	cmp	r0, #0
 801ebc4:	d0b1      	beq.n	801eb2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801ebc6:	5cd3      	ldrb	r3, [r2, r3]
 801ebc8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ebcc:	930a      	str	r3, [sp, #40]	; 0x28
 801ebce:	e7ac      	b.n	801eb2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801ebd0:	b013      	add	sp, #76	; 0x4c
 801ebd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ebd6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801ebd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ebda:	880d      	ldrh	r5, [r1, #0]
 801ebdc:	b087      	sub	sp, #28
 801ebde:	10ef      	asrs	r7, r5, #3
 801ebe0:	9103      	str	r1, [sp, #12]
 801ebe2:	ea4f 2a25 	mov.w	sl, r5, asr #8
 801ebe6:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 801ebea:	00ed      	lsls	r5, r5, #3
 801ebec:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ebf0:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 801ebf4:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801ebf8:	b2ed      	uxtb	r5, r5
 801ebfa:	9701      	str	r7, [sp, #4]
 801ebfc:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801ec00:	9502      	str	r5, [sp, #8]
 801ec02:	9d01      	ldr	r5, [sp, #4]
 801ec04:	9902      	ldr	r1, [sp, #8]
 801ec06:	022d      	lsls	r5, r5, #8
 801ec08:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801ec0c:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 801ec10:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 801ec14:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801ec18:	430d      	orrs	r5, r1
 801ec1a:	fb06 0709 	mla	r7, r6, r9, r0
 801ec1e:	2e00      	cmp	r6, #0
 801ec20:	9505      	str	r5, [sp, #20]
 801ec22:	eb02 0c07 	add.w	ip, r2, r7
 801ec26:	f2c0 80b6 	blt.w	801ed96 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801ec2a:	45b3      	cmp	fp, r6
 801ec2c:	f340 80b3 	ble.w	801ed96 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801ec30:	2800      	cmp	r0, #0
 801ec32:	f2c0 80ae 	blt.w	801ed92 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801ec36:	4581      	cmp	r9, r0
 801ec38:	f340 80ab 	ble.w	801ed92 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801ec3c:	5dd7      	ldrb	r7, [r2, r7]
 801ec3e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ec42:	441f      	add	r7, r3
 801ec44:	1c42      	adds	r2, r0, #1
 801ec46:	f100 80a9 	bmi.w	801ed9c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801ec4a:	4591      	cmp	r9, r2
 801ec4c:	f340 80a6 	ble.w	801ed9c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801ec50:	2c00      	cmp	r4, #0
 801ec52:	f000 80a3 	beq.w	801ed9c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801ec56:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801ec5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ec5e:	441d      	add	r5, r3
 801ec60:	3601      	adds	r6, #1
 801ec62:	f100 809f 	bmi.w	801eda4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801ec66:	45b3      	cmp	fp, r6
 801ec68:	f340 809c 	ble.w	801eda4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801ec6c:	f1be 0f00 	cmp.w	lr, #0
 801ec70:	f000 8098 	beq.w	801eda4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801ec74:	2800      	cmp	r0, #0
 801ec76:	f2c0 8093 	blt.w	801eda0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801ec7a:	4581      	cmp	r9, r0
 801ec7c:	f340 8090 	ble.w	801eda0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801ec80:	f81c 6009 	ldrb.w	r6, [ip, r9]
 801ec84:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ec88:	441e      	add	r6, r3
 801ec8a:	3001      	adds	r0, #1
 801ec8c:	f100 808d 	bmi.w	801edaa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801ec90:	4581      	cmp	r9, r0
 801ec92:	f340 808a 	ble.w	801edaa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801ec96:	2c00      	cmp	r4, #0
 801ec98:	f000 8087 	beq.w	801edaa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801ec9c:	44e1      	add	r9, ip
 801ec9e:	f899 2001 	ldrb.w	r2, [r9, #1]
 801eca2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801eca6:	4413      	add	r3, r2
 801eca8:	b2a4      	uxth	r4, r4
 801ecaa:	f897 c002 	ldrb.w	ip, [r7, #2]
 801ecae:	fa1f fe8e 	uxth.w	lr, lr
 801ecb2:	9901      	ldr	r1, [sp, #4]
 801ecb4:	fb04 fb0e 	mul.w	fp, r4, lr
 801ecb8:	0124      	lsls	r4, r4, #4
 801ecba:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 801ecbe:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 801ecc2:	eba4 040b 	sub.w	r4, r4, fp
 801ecc6:	fa1f f08e 	uxth.w	r0, lr
 801ecca:	b2a2      	uxth	r2, r4
 801eccc:	78ac      	ldrb	r4, [r5, #2]
 801ecce:	eba9 0900 	sub.w	r9, r9, r0
 801ecd2:	fa1f fe88 	uxth.w	lr, r8
 801ecd6:	4354      	muls	r4, r2
 801ecd8:	ea6f 0808 	mvn.w	r8, r8
 801ecdc:	fa1f f989 	uxth.w	r9, r9
 801ece0:	fa5f f888 	uxtb.w	r8, r8
 801ece4:	fb09 440c 	mla	r4, r9, ip, r4
 801ece8:	f896 c002 	ldrb.w	ip, [r6, #2]
 801ecec:	fb1a fa08 	smulbb	sl, sl, r8
 801ecf0:	fb00 440c 	mla	r4, r0, ip, r4
 801ecf4:	f893 c002 	ldrb.w	ip, [r3, #2]
 801ecf8:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801ecfc:	787c      	ldrb	r4, [r7, #1]
 801ecfe:	783f      	ldrb	r7, [r7, #0]
 801ed00:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801ed04:	fb0c ac0e 	mla	ip, ip, lr, sl
 801ed08:	f895 a001 	ldrb.w	sl, [r5, #1]
 801ed0c:	782d      	ldrb	r5, [r5, #0]
 801ed0e:	fb02 fa0a 	mul.w	sl, r2, sl
 801ed12:	fa1f fc8c 	uxth.w	ip, ip
 801ed16:	436a      	muls	r2, r5
 801ed18:	7835      	ldrb	r5, [r6, #0]
 801ed1a:	fb09 aa04 	mla	sl, r9, r4, sl
 801ed1e:	7874      	ldrb	r4, [r6, #1]
 801ed20:	fb09 2207 	mla	r2, r9, r7, r2
 801ed24:	fb00 aa04 	mla	sl, r0, r4, sl
 801ed28:	785c      	ldrb	r4, [r3, #1]
 801ed2a:	fb00 2005 	mla	r0, r0, r5, r2
 801ed2e:	781b      	ldrb	r3, [r3, #0]
 801ed30:	fb0b a404 	mla	r4, fp, r4, sl
 801ed34:	fb11 fa08 	smulbb	sl, r1, r8
 801ed38:	fb0b 0b03 	mla	fp, fp, r3, r0
 801ed3c:	9b02      	ldr	r3, [sp, #8]
 801ed3e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801ed42:	fb13 f808 	smulbb	r8, r3, r8
 801ed46:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801ed4a:	fb04 a40e 	mla	r4, r4, lr, sl
 801ed4e:	f10c 0301 	add.w	r3, ip, #1
 801ed52:	fb0b 8e0e 	mla	lr, fp, lr, r8
 801ed56:	b2a4      	uxth	r4, r4
 801ed58:	fa1f fe8e 	uxth.w	lr, lr
 801ed5c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801ed60:	f104 0a01 	add.w	sl, r4, #1
 801ed64:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 801ed68:	f10e 0c01 	add.w	ip, lr, #1
 801ed6c:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801ed70:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801ed74:	0964      	lsrs	r4, r4, #5
 801ed76:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801ed7a:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801ed7e:	ea4c 0c03 	orr.w	ip, ip, r3
 801ed82:	9b03      	ldr	r3, [sp, #12]
 801ed84:	ea4c 0c04 	orr.w	ip, ip, r4
 801ed88:	f8a3 c000 	strh.w	ip, [r3]
 801ed8c:	b007      	add	sp, #28
 801ed8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed92:	af05      	add	r7, sp, #20
 801ed94:	e756      	b.n	801ec44 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 801ed96:	ad05      	add	r5, sp, #20
 801ed98:	462f      	mov	r7, r5
 801ed9a:	e761      	b.n	801ec60 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801ed9c:	ad05      	add	r5, sp, #20
 801ed9e:	e75f      	b.n	801ec60 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801eda0:	ae05      	add	r6, sp, #20
 801eda2:	e772      	b.n	801ec8a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801eda4:	ab05      	add	r3, sp, #20
 801eda6:	461e      	mov	r6, r3
 801eda8:	e77e      	b.n	801eca8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 801edaa:	ab05      	add	r3, sp, #20
 801edac:	e77c      	b.n	801eca8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

0801edae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801edae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edb2:	b095      	sub	sp, #84	; 0x54
 801edb4:	9212      	str	r2, [sp, #72]	; 0x48
 801edb6:	9309      	str	r3, [sp, #36]	; 0x24
 801edb8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801edba:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801edbe:	9013      	str	r0, [sp, #76]	; 0x4c
 801edc0:	930f      	str	r3, [sp, #60]	; 0x3c
 801edc2:	6850      	ldr	r0, [r2, #4]
 801edc4:	910e      	str	r1, [sp, #56]	; 0x38
 801edc6:	6812      	ldr	r2, [r2, #0]
 801edc8:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 801edcc:	fb00 1303 	mla	r3, r0, r3, r1
 801edd0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801edd4:	930a      	str	r3, [sp, #40]	; 0x28
 801edd6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801edd8:	681b      	ldr	r3, [r3, #0]
 801edda:	930d      	str	r3, [sp, #52]	; 0x34
 801eddc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801edde:	685c      	ldr	r4, [r3, #4]
 801ede0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ede2:	3404      	adds	r4, #4
 801ede4:	43db      	mvns	r3, r3
 801ede6:	b2db      	uxtb	r3, r3
 801ede8:	930b      	str	r3, [sp, #44]	; 0x2c
 801edea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801edec:	2b00      	cmp	r3, #0
 801edee:	dc03      	bgt.n	801edf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801edf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801edf2:	2b00      	cmp	r3, #0
 801edf4:	f340 8255 	ble.w	801f2a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801edf8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801edfa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801edfe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ee02:	1e48      	subs	r0, r1, #1
 801ee04:	1e55      	subs	r5, r2, #1
 801ee06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee08:	2b00      	cmp	r3, #0
 801ee0a:	f340 80f9 	ble.w	801f000 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801ee0e:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801ee10:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ee12:	1436      	asrs	r6, r6, #16
 801ee14:	ea4f 4323 	mov.w	r3, r3, asr #16
 801ee18:	d406      	bmi.n	801ee28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801ee1a:	4286      	cmp	r6, r0
 801ee1c:	da04      	bge.n	801ee28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801ee1e:	2b00      	cmp	r3, #0
 801ee20:	db02      	blt.n	801ee28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801ee22:	42ab      	cmp	r3, r5
 801ee24:	f2c0 80ed 	blt.w	801f002 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801ee28:	3601      	adds	r6, #1
 801ee2a:	f100 80da 	bmi.w	801efe2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801ee2e:	42b1      	cmp	r1, r6
 801ee30:	f2c0 80d7 	blt.w	801efe2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801ee34:	3301      	adds	r3, #1
 801ee36:	f100 80d4 	bmi.w	801efe2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801ee3a:	429a      	cmp	r2, r3
 801ee3c:	f2c0 80d1 	blt.w	801efe2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801ee40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee42:	9311      	str	r3, [sp, #68]	; 0x44
 801ee44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ee46:	930c      	str	r3, [sp, #48]	; 0x30
 801ee48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ee4a:	2b00      	cmp	r3, #0
 801ee4c:	f340 80fa 	ble.w	801f044 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801ee50:	9826      	ldr	r0, [sp, #152]	; 0x98
 801ee52:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ee54:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ee56:	68c6      	ldr	r6, [r0, #12]
 801ee58:	141d      	asrs	r5, r3, #16
 801ee5a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801ee5c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ee60:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ee62:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801ee64:	1400      	asrs	r0, r0, #16
 801ee66:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801ee6a:	6892      	ldr	r2, [r2, #8]
 801ee6c:	f100 813e 	bmi.w	801f0ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801ee70:	1e57      	subs	r7, r2, #1
 801ee72:	42b8      	cmp	r0, r7
 801ee74:	f280 813a 	bge.w	801f0ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801ee78:	2d00      	cmp	r5, #0
 801ee7a:	f2c0 8137 	blt.w	801f0ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801ee7e:	1e77      	subs	r7, r6, #1
 801ee80:	42bd      	cmp	r5, r7
 801ee82:	f280 8133 	bge.w	801f0ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801ee86:	b212      	sxth	r2, r2
 801ee88:	fb05 0002 	mla	r0, r5, r2, r0
 801ee8c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801ee8e:	f815 a000 	ldrb.w	sl, [r5, r0]
 801ee92:	182e      	adds	r6, r5, r0
 801ee94:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801ee98:	eb04 050a 	add.w	r5, r4, sl
 801ee9c:	2b00      	cmp	r3, #0
 801ee9e:	f000 8117 	beq.w	801f0d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801eea2:	f896 c001 	ldrb.w	ip, [r6, #1]
 801eea6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801eeaa:	44a4      	add	ip, r4
 801eeac:	2900      	cmp	r1, #0
 801eeae:	f000 8117 	beq.w	801f0e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801eeb2:	18b0      	adds	r0, r6, r2
 801eeb4:	5cb2      	ldrb	r2, [r6, r2]
 801eeb6:	7840      	ldrb	r0, [r0, #1]
 801eeb8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801eebc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801eec0:	4422      	add	r2, r4
 801eec2:	4420      	add	r0, r4
 801eec4:	b29b      	uxth	r3, r3
 801eec6:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801eeca:	b289      	uxth	r1, r1
 801eecc:	f895 b002 	ldrb.w	fp, [r5, #2]
 801eed0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801eed2:	fb03 f901 	mul.w	r9, r3, r1
 801eed6:	011b      	lsls	r3, r3, #4
 801eed8:	f8b6 e000 	ldrh.w	lr, [r6]
 801eedc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801eee0:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801eee4:	eba3 0309 	sub.w	r3, r3, r9
 801eee8:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801eeec:	b289      	uxth	r1, r1
 801eeee:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801eef2:	b29b      	uxth	r3, r3
 801eef4:	eba8 0801 	sub.w	r8, r8, r1
 801eef8:	435f      	muls	r7, r3
 801eefa:	fa1f f888 	uxth.w	r8, r8
 801eefe:	9310      	str	r3, [sp, #64]	; 0x40
 801ef00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ef02:	fb08 770b 	mla	r7, r8, fp, r7
 801ef06:	f892 b002 	ldrb.w	fp, [r2, #2]
 801ef0a:	fb01 770b 	mla	r7, r1, fp, r7
 801ef0e:	f890 b002 	ldrb.w	fp, [r0, #2]
 801ef12:	fb09 770b 	mla	r7, r9, fp, r7
 801ef16:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801ef1a:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801ef1e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801ef22:	fb1b fb03 	smulbb	fp, fp, r3
 801ef26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ef28:	fb07 b706 	mla	r7, r7, r6, fp
 801ef2c:	f895 b001 	ldrb.w	fp, [r5, #1]
 801ef30:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801ef34:	f89c c000 	ldrb.w	ip, [ip]
 801ef38:	b2bf      	uxth	r7, r7
 801ef3a:	435d      	muls	r5, r3
 801ef3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ef3e:	fb08 550b 	mla	r5, r8, fp, r5
 801ef42:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ef46:	fb01 550b 	mla	r5, r1, fp, r5
 801ef4a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ef4e:	fb09 550b 	mla	r5, r9, fp, r5
 801ef52:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801ef56:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ef5a:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801ef5e:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801ef62:	fa5f fe8e 	uxtb.w	lr, lr
 801ef66:	fb1b fb03 	smulbb	fp, fp, r3
 801ef6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ef6c:	fb03 f30c 	mul.w	r3, r3, ip
 801ef70:	f892 c000 	ldrb.w	ip, [r2]
 801ef74:	fb05 b506 	mla	r5, r5, r6, fp
 801ef78:	fb08 330a 	mla	r3, r8, sl, r3
 801ef7c:	b2ad      	uxth	r5, r5
 801ef7e:	fb01 330c 	mla	r3, r1, ip, r3
 801ef82:	f890 c000 	ldrb.w	ip, [r0]
 801ef86:	f105 0b01 	add.w	fp, r5, #1
 801ef8a:	fb09 3c0c 	mla	ip, r9, ip, r3
 801ef8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ef90:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801ef94:	fb1e fe03 	smulbb	lr, lr, r3
 801ef98:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801ef9c:	1c7b      	adds	r3, r7, #1
 801ef9e:	096d      	lsrs	r5, r5, #5
 801efa0:	fb0c e606 	mla	r6, ip, r6, lr
 801efa4:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801efa8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801efac:	b2b6      	uxth	r6, r6
 801efae:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 801efb2:	1c77      	adds	r7, r6, #1
 801efb4:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801efb8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801efbc:	431f      	orrs	r7, r3
 801efbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801efc0:	433d      	orrs	r5, r7
 801efc2:	801d      	strh	r5, [r3, #0]
 801efc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801efc6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801efc8:	3302      	adds	r3, #2
 801efca:	930c      	str	r3, [sp, #48]	; 0x30
 801efcc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801efce:	4413      	add	r3, r2
 801efd0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801efd2:	931f      	str	r3, [sp, #124]	; 0x7c
 801efd4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801efd6:	4413      	add	r3, r2
 801efd8:	9320      	str	r3, [sp, #128]	; 0x80
 801efda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801efdc:	3b01      	subs	r3, #1
 801efde:	9311      	str	r3, [sp, #68]	; 0x44
 801efe0:	e732      	b.n	801ee48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801efe2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801efe4:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801efe6:	4433      	add	r3, r6
 801efe8:	9e22      	ldr	r6, [sp, #136]	; 0x88
 801efea:	931f      	str	r3, [sp, #124]	; 0x7c
 801efec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801efee:	4433      	add	r3, r6
 801eff0:	9320      	str	r3, [sp, #128]	; 0x80
 801eff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eff4:	3b01      	subs	r3, #1
 801eff6:	9309      	str	r3, [sp, #36]	; 0x24
 801eff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801effa:	3302      	adds	r3, #2
 801effc:	930a      	str	r3, [sp, #40]	; 0x28
 801effe:	e702      	b.n	801ee06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801f000:	d027      	beq.n	801f052 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801f002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f004:	9821      	ldr	r0, [sp, #132]	; 0x84
 801f006:	3b01      	subs	r3, #1
 801f008:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801f00a:	fb00 5003 	mla	r0, r0, r3, r5
 801f00e:	1400      	asrs	r0, r0, #16
 801f010:	f53f af16 	bmi.w	801ee40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f014:	3901      	subs	r1, #1
 801f016:	4288      	cmp	r0, r1
 801f018:	f6bf af12 	bge.w	801ee40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f01c:	9922      	ldr	r1, [sp, #136]	; 0x88
 801f01e:	9820      	ldr	r0, [sp, #128]	; 0x80
 801f020:	fb01 0303 	mla	r3, r1, r3, r0
 801f024:	141b      	asrs	r3, r3, #16
 801f026:	f53f af0b 	bmi.w	801ee40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f02a:	3a01      	subs	r2, #1
 801f02c:	4293      	cmp	r3, r2
 801f02e:	f6bf af07 	bge.w	801ee40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f034:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 801f038:	9311      	str	r3, [sp, #68]	; 0x44
 801f03a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f03c:	930c      	str	r3, [sp, #48]	; 0x30
 801f03e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f040:	2b00      	cmp	r3, #0
 801f042:	dc70      	bgt.n	801f126 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 801f044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f046:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f048:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f04c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f050:	930a      	str	r3, [sp, #40]	; 0x28
 801f052:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f054:	2b00      	cmp	r3, #0
 801f056:	f340 8124 	ble.w	801f2a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801f05a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f05e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f060:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f064:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f068:	eef0 6a62 	vmov.f32	s13, s5
 801f06c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f070:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f074:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f078:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801f07c:	eef0 6a43 	vmov.f32	s13, s6
 801f080:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f084:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 801f088:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f08c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f090:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f094:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f098:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f09c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f0a0:	ee12 2a90 	vmov	r2, s5
 801f0a4:	eef0 2a47 	vmov.f32	s5, s14
 801f0a8:	fb92 f3f3 	sdiv	r3, r2, r3
 801f0ac:	ee13 2a10 	vmov	r2, s6
 801f0b0:	9321      	str	r3, [sp, #132]	; 0x84
 801f0b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f0b4:	eeb0 3a67 	vmov.f32	s6, s15
 801f0b8:	fb92 f3f3 	sdiv	r3, r2, r3
 801f0bc:	9322      	str	r3, [sp, #136]	; 0x88
 801f0be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f0c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f0c2:	3b01      	subs	r3, #1
 801f0c4:	930e      	str	r3, [sp, #56]	; 0x38
 801f0c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f0c8:	bf08      	it	eq
 801f0ca:	4613      	moveq	r3, r2
 801f0cc:	9309      	str	r3, [sp, #36]	; 0x24
 801f0ce:	e68c      	b.n	801edea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f0d0:	b149      	cbz	r1, 801f0e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 801f0d2:	5cb2      	ldrb	r2, [r6, r2]
 801f0d4:	4628      	mov	r0, r5
 801f0d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f0da:	4422      	add	r2, r4
 801f0dc:	46ac      	mov	ip, r5
 801f0de:	e6f1      	b.n	801eec4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f0e0:	4628      	mov	r0, r5
 801f0e2:	462a      	mov	r2, r5
 801f0e4:	e6ee      	b.n	801eec4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f0e6:	4628      	mov	r0, r5
 801f0e8:	462a      	mov	r2, r5
 801f0ea:	e7f7      	b.n	801f0dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 801f0ec:	1c47      	adds	r7, r0, #1
 801f0ee:	f53f af69 	bmi.w	801efc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801f0f2:	42ba      	cmp	r2, r7
 801f0f4:	f6ff af66 	blt.w	801efc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801f0f8:	1c6f      	adds	r7, r5, #1
 801f0fa:	f53f af63 	bmi.w	801efc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801f0fe:	42be      	cmp	r6, r7
 801f100:	f6ff af60 	blt.w	801efc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801f104:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f106:	b236      	sxth	r6, r6
 801f108:	b212      	sxth	r2, r2
 801f10a:	9002      	str	r0, [sp, #8]
 801f10c:	9601      	str	r6, [sp, #4]
 801f10e:	9200      	str	r2, [sp, #0]
 801f110:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f112:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801f116:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801f11a:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801f11e:	4623      	mov	r3, r4
 801f120:	f7ff fd59 	bl	801ebd6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801f124:	e74e      	b.n	801efc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801f126:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f128:	9820      	ldr	r0, [sp, #128]	; 0x80
 801f12a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f12e:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801f130:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f132:	1400      	asrs	r0, r0, #16
 801f134:	142d      	asrs	r5, r5, #16
 801f136:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f138:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801f13c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f140:	fb02 5000 	mla	r0, r2, r0, r5
 801f144:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801f146:	f815 9000 	ldrb.w	r9, [r5, r0]
 801f14a:	182e      	adds	r6, r5, r0
 801f14c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801f150:	eb04 0509 	add.w	r5, r4, r9
 801f154:	2b00      	cmp	r3, #0
 801f156:	f000 8096 	beq.w	801f286 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801f15a:	7877      	ldrb	r7, [r6, #1]
 801f15c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f160:	4427      	add	r7, r4
 801f162:	2900      	cmp	r1, #0
 801f164:	f000 8097 	beq.w	801f296 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 801f168:	18b0      	adds	r0, r6, r2
 801f16a:	5cb2      	ldrb	r2, [r6, r2]
 801f16c:	7840      	ldrb	r0, [r0, #1]
 801f16e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f172:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f176:	4422      	add	r2, r4
 801f178:	4420      	add	r0, r4
 801f17a:	b29b      	uxth	r3, r3
 801f17c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f17e:	b289      	uxth	r1, r1
 801f180:	f895 b002 	ldrb.w	fp, [r5, #2]
 801f184:	f8b6 c000 	ldrh.w	ip, [r6]
 801f188:	fb03 f801 	mul.w	r8, r3, r1
 801f18c:	011b      	lsls	r3, r3, #4
 801f18e:	78be      	ldrb	r6, [r7, #2]
 801f190:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801f194:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f198:	eba3 0308 	sub.w	r3, r3, r8
 801f19c:	f814 9009 	ldrb.w	r9, [r4, r9]
 801f1a0:	b289      	uxth	r1, r1
 801f1a2:	b29b      	uxth	r3, r3
 801f1a4:	ebae 0e01 	sub.w	lr, lr, r1
 801f1a8:	435e      	muls	r6, r3
 801f1aa:	fa1f fe8e 	uxth.w	lr, lr
 801f1ae:	9310      	str	r3, [sp, #64]	; 0x40
 801f1b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f1b2:	fb0e 660b 	mla	r6, lr, fp, r6
 801f1b6:	f892 b002 	ldrb.w	fp, [r2, #2]
 801f1ba:	fb01 660b 	mla	r6, r1, fp, r6
 801f1be:	f890 b002 	ldrb.w	fp, [r0, #2]
 801f1c2:	fb08 660b 	mla	r6, r8, fp, r6
 801f1c6:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 801f1ca:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801f1ce:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801f1d2:	fb1b fb03 	smulbb	fp, fp, r3
 801f1d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f1d8:	fb06 b60a 	mla	r6, r6, sl, fp
 801f1dc:	f895 b001 	ldrb.w	fp, [r5, #1]
 801f1e0:	787d      	ldrb	r5, [r7, #1]
 801f1e2:	783f      	ldrb	r7, [r7, #0]
 801f1e4:	b2b6      	uxth	r6, r6
 801f1e6:	435d      	muls	r5, r3
 801f1e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f1ea:	fb0e 550b 	mla	r5, lr, fp, r5
 801f1ee:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f1f2:	fb01 550b 	mla	r5, r1, fp, r5
 801f1f6:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f1fa:	fb08 550b 	mla	r5, r8, fp, r5
 801f1fe:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801f202:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f206:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801f20a:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801f20e:	fa5f fc8c 	uxtb.w	ip, ip
 801f212:	fb1b fb03 	smulbb	fp, fp, r3
 801f216:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f218:	437b      	muls	r3, r7
 801f21a:	7817      	ldrb	r7, [r2, #0]
 801f21c:	fb05 b50a 	mla	r5, r5, sl, fp
 801f220:	fb0e 3309 	mla	r3, lr, r9, r3
 801f224:	b2ad      	uxth	r5, r5
 801f226:	fb01 3307 	mla	r3, r1, r7, r3
 801f22a:	7807      	ldrb	r7, [r0, #0]
 801f22c:	f105 0b01 	add.w	fp, r5, #1
 801f230:	fb08 3707 	mla	r7, r8, r7, r3
 801f234:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f236:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801f23a:	fb1c fc03 	smulbb	ip, ip, r3
 801f23e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801f242:	1c73      	adds	r3, r6, #1
 801f244:	096d      	lsrs	r5, r5, #5
 801f246:	fb07 c70a 	mla	r7, r7, sl, ip
 801f24a:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801f24e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f252:	b2bf      	uxth	r7, r7
 801f254:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f256:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801f25a:	1c7a      	adds	r2, r7, #1
 801f25c:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801f260:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f264:	4316      	orrs	r6, r2
 801f266:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801f268:	432e      	orrs	r6, r5
 801f26a:	f823 6b02 	strh.w	r6, [r3], #2
 801f26e:	930c      	str	r3, [sp, #48]	; 0x30
 801f270:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f272:	4413      	add	r3, r2
 801f274:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801f276:	931f      	str	r3, [sp, #124]	; 0x7c
 801f278:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f27a:	4413      	add	r3, r2
 801f27c:	9320      	str	r3, [sp, #128]	; 0x80
 801f27e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f280:	3b01      	subs	r3, #1
 801f282:	9311      	str	r3, [sp, #68]	; 0x44
 801f284:	e6db      	b.n	801f03e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 801f286:	b149      	cbz	r1, 801f29c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 801f288:	5cb2      	ldrb	r2, [r6, r2]
 801f28a:	4628      	mov	r0, r5
 801f28c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f290:	4422      	add	r2, r4
 801f292:	462f      	mov	r7, r5
 801f294:	e771      	b.n	801f17a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801f296:	4628      	mov	r0, r5
 801f298:	462a      	mov	r2, r5
 801f29a:	e76e      	b.n	801f17a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801f29c:	4628      	mov	r0, r5
 801f29e:	462a      	mov	r2, r5
 801f2a0:	e7f7      	b.n	801f292 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801f2a2:	b015      	add	sp, #84	; 0x54
 801f2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f2a8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801f2a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2ac:	880f      	ldrh	r7, [r1, #0]
 801f2ae:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801f2b2:	023c      	lsls	r4, r7, #8
 801f2b4:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801f2b8:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 801f2bc:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 801f2c0:	017c      	lsls	r4, r7, #5
 801f2c2:	00ff      	lsls	r7, r7, #3
 801f2c4:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 801f2c8:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 801f2cc:	b2ff      	uxtb	r7, r7
 801f2ce:	ea4b 0404 	orr.w	r4, fp, r4
 801f2d2:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 801f2d6:	4327      	orrs	r7, r4
 801f2d8:	fb05 ca0e 	mla	sl, r5, lr, ip
 801f2dc:	2d00      	cmp	r5, #0
 801f2de:	9701      	str	r7, [sp, #4]
 801f2e0:	eb02 080a 	add.w	r8, r2, sl
 801f2e4:	db7e      	blt.n	801f3e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801f2e6:	45a9      	cmp	r9, r5
 801f2e8:	dd7c      	ble.n	801f3e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801f2ea:	f1bc 0f00 	cmp.w	ip, #0
 801f2ee:	db77      	blt.n	801f3e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801f2f0:	45e6      	cmp	lr, ip
 801f2f2:	dd75      	ble.n	801f3e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801f2f4:	f812 700a 	ldrb.w	r7, [r2, sl]
 801f2f8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f2fc:	441f      	add	r7, r3
 801f2fe:	f11c 0201 	adds.w	r2, ip, #1
 801f302:	d472      	bmi.n	801f3ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801f304:	4596      	cmp	lr, r2
 801f306:	dd70      	ble.n	801f3ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801f308:	2800      	cmp	r0, #0
 801f30a:	d06e      	beq.n	801f3ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801f30c:	f898 4001 	ldrb.w	r4, [r8, #1]
 801f310:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f314:	441c      	add	r4, r3
 801f316:	3501      	adds	r5, #1
 801f318:	d46b      	bmi.n	801f3f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801f31a:	45a9      	cmp	r9, r5
 801f31c:	dd69      	ble.n	801f3f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801f31e:	2e00      	cmp	r6, #0
 801f320:	d067      	beq.n	801f3f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801f322:	f1bc 0f00 	cmp.w	ip, #0
 801f326:	db62      	blt.n	801f3ee <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801f328:	45e6      	cmp	lr, ip
 801f32a:	dd60      	ble.n	801f3ee <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801f32c:	f818 500e 	ldrb.w	r5, [r8, lr]
 801f330:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f334:	441d      	add	r5, r3
 801f336:	f11c 0201 	adds.w	r2, ip, #1
 801f33a:	d45d      	bmi.n	801f3f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801f33c:	4596      	cmp	lr, r2
 801f33e:	dd5b      	ble.n	801f3f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801f340:	2800      	cmp	r0, #0
 801f342:	d059      	beq.n	801f3f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801f344:	44c6      	add	lr, r8
 801f346:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801f34a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f34e:	4413      	add	r3, r2
 801f350:	b280      	uxth	r0, r0
 801f352:	f897 e002 	ldrb.w	lr, [r7, #2]
 801f356:	b2b2      	uxth	r2, r6
 801f358:	f897 9000 	ldrb.w	r9, [r7]
 801f35c:	787f      	ldrb	r7, [r7, #1]
 801f35e:	fb00 f602 	mul.w	r6, r0, r2
 801f362:	0100      	lsls	r0, r0, #4
 801f364:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801f368:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 801f36c:	1b80      	subs	r0, r0, r6
 801f36e:	fa1f fc82 	uxth.w	ip, r2
 801f372:	b282      	uxth	r2, r0
 801f374:	78a0      	ldrb	r0, [r4, #2]
 801f376:	eba8 080c 	sub.w	r8, r8, ip
 801f37a:	4350      	muls	r0, r2
 801f37c:	fa1f f888 	uxth.w	r8, r8
 801f380:	fb08 0e0e 	mla	lr, r8, lr, r0
 801f384:	78a8      	ldrb	r0, [r5, #2]
 801f386:	fb0c e000 	mla	r0, ip, r0, lr
 801f38a:	f893 e002 	ldrb.w	lr, [r3, #2]
 801f38e:	fb06 0e0e 	mla	lr, r6, lr, r0
 801f392:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 801f396:	f894 e000 	ldrb.w	lr, [r4]
 801f39a:	fb02 fe0e 	mul.w	lr, r2, lr
 801f39e:	fb08 e909 	mla	r9, r8, r9, lr
 801f3a2:	f895 e000 	ldrb.w	lr, [r5]
 801f3a6:	fb0c 990e 	mla	r9, ip, lr, r9
 801f3aa:	f893 e000 	ldrb.w	lr, [r3]
 801f3ae:	785b      	ldrb	r3, [r3, #1]
 801f3b0:	fb06 9e0e 	mla	lr, r6, lr, r9
 801f3b4:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801f3b8:	ea4e 0e00 	orr.w	lr, lr, r0
 801f3bc:	7860      	ldrb	r0, [r4, #1]
 801f3be:	4350      	muls	r0, r2
 801f3c0:	786a      	ldrb	r2, [r5, #1]
 801f3c2:	fb08 0007 	mla	r0, r8, r7, r0
 801f3c6:	fb0c 0202 	mla	r2, ip, r2, r0
 801f3ca:	fb06 2303 	mla	r3, r6, r3, r2
 801f3ce:	095b      	lsrs	r3, r3, #5
 801f3d0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f3d4:	ea4e 0303 	orr.w	r3, lr, r3
 801f3d8:	800b      	strh	r3, [r1, #0]
 801f3da:	b003      	add	sp, #12
 801f3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3e0:	af01      	add	r7, sp, #4
 801f3e2:	e78c      	b.n	801f2fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 801f3e4:	ac01      	add	r4, sp, #4
 801f3e6:	4627      	mov	r7, r4
 801f3e8:	e795      	b.n	801f316 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801f3ea:	ac01      	add	r4, sp, #4
 801f3ec:	e793      	b.n	801f316 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801f3ee:	ad01      	add	r5, sp, #4
 801f3f0:	e7a1      	b.n	801f336 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 801f3f2:	ab01      	add	r3, sp, #4
 801f3f4:	461d      	mov	r5, r3
 801f3f6:	e7ab      	b.n	801f350 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 801f3f8:	ab01      	add	r3, sp, #4
 801f3fa:	e7a9      	b.n	801f350 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

0801f3fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f400:	b08f      	sub	sp, #60	; 0x3c
 801f402:	920c      	str	r2, [sp, #48]	; 0x30
 801f404:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801f406:	900d      	str	r0, [sp, #52]	; 0x34
 801f408:	910a      	str	r1, [sp, #40]	; 0x28
 801f40a:	6850      	ldr	r0, [r2, #4]
 801f40c:	9306      	str	r3, [sp, #24]
 801f40e:	6812      	ldr	r2, [r2, #0]
 801f410:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 801f414:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 801f418:	fb00 1303 	mla	r3, r0, r3, r1
 801f41c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f420:	9307      	str	r3, [sp, #28]
 801f422:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f424:	681b      	ldr	r3, [r3, #0]
 801f426:	9308      	str	r3, [sp, #32]
 801f428:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f42a:	685c      	ldr	r4, [r3, #4]
 801f42c:	3404      	adds	r4, #4
 801f42e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f430:	2b00      	cmp	r3, #0
 801f432:	dc03      	bgt.n	801f43c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801f434:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f436:	2b00      	cmp	r3, #0
 801f438:	f340 81d5 	ble.w	801f7e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801f43c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f43e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f442:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f446:	1e48      	subs	r0, r1, #1
 801f448:	1e56      	subs	r6, r2, #1
 801f44a:	9b06      	ldr	r3, [sp, #24]
 801f44c:	2b00      	cmp	r3, #0
 801f44e:	f340 80b6 	ble.w	801f5be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801f452:	ea5f 472b 	movs.w	r7, fp, asr #16
 801f456:	ea4f 4325 	mov.w	r3, r5, asr #16
 801f45a:	d406      	bmi.n	801f46a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f45c:	4287      	cmp	r7, r0
 801f45e:	da04      	bge.n	801f46a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f460:	2b00      	cmp	r3, #0
 801f462:	db02      	blt.n	801f46a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f464:	42b3      	cmp	r3, r6
 801f466:	f2c0 80ab 	blt.w	801f5c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801f46a:	3701      	adds	r7, #1
 801f46c:	f100 809c 	bmi.w	801f5a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f470:	42b9      	cmp	r1, r7
 801f472:	f2c0 8099 	blt.w	801f5a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f476:	3301      	adds	r3, #1
 801f478:	f100 8096 	bmi.w	801f5a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f47c:	429a      	cmp	r2, r3
 801f47e:	f2c0 8093 	blt.w	801f5a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f482:	9b06      	ldr	r3, [sp, #24]
 801f484:	930b      	str	r3, [sp, #44]	; 0x2c
 801f486:	9b07      	ldr	r3, [sp, #28]
 801f488:	9309      	str	r3, [sp, #36]	; 0x24
 801f48a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f48c:	2b00      	cmp	r3, #0
 801f48e:	f340 80b4 	ble.w	801f5fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801f492:	9820      	ldr	r0, [sp, #128]	; 0x80
 801f494:	142e      	asrs	r6, r5, #16
 801f496:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f498:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801f49c:	68c7      	ldr	r7, [r0, #12]
 801f49e:	ea5f 402b 	movs.w	r0, fp, asr #16
 801f4a2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f4a6:	6892      	ldr	r2, [r2, #8]
 801f4a8:	f100 80fb 	bmi.w	801f6a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f4ac:	f102 3cff 	add.w	ip, r2, #4294967295
 801f4b0:	4560      	cmp	r0, ip
 801f4b2:	f280 80f6 	bge.w	801f6a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f4b6:	2e00      	cmp	r6, #0
 801f4b8:	f2c0 80f3 	blt.w	801f6a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f4bc:	f107 3cff 	add.w	ip, r7, #4294967295
 801f4c0:	4566      	cmp	r6, ip
 801f4c2:	f280 80ee 	bge.w	801f6a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f4c6:	b212      	sxth	r2, r2
 801f4c8:	fb06 0002 	mla	r0, r6, r2, r0
 801f4cc:	9e08      	ldr	r6, [sp, #32]
 801f4ce:	1837      	adds	r7, r6, r0
 801f4d0:	5c30      	ldrb	r0, [r6, r0]
 801f4d2:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 801f4d6:	eb04 0c08 	add.w	ip, r4, r8
 801f4da:	2b00      	cmp	r3, #0
 801f4dc:	f000 80d3 	beq.w	801f686 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801f4e0:	787e      	ldrb	r6, [r7, #1]
 801f4e2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f4e6:	4426      	add	r6, r4
 801f4e8:	2900      	cmp	r1, #0
 801f4ea:	f000 80d4 	beq.w	801f696 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f4ee:	18b8      	adds	r0, r7, r2
 801f4f0:	5cba      	ldrb	r2, [r7, r2]
 801f4f2:	7840      	ldrb	r0, [r0, #1]
 801f4f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f4f8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f4fc:	4422      	add	r2, r4
 801f4fe:	4420      	add	r0, r4
 801f500:	b29b      	uxth	r3, r3
 801f502:	78b7      	ldrb	r7, [r6, #2]
 801f504:	b289      	uxth	r1, r1
 801f506:	f89c a002 	ldrb.w	sl, [ip, #2]
 801f50a:	f89c c001 	ldrb.w	ip, [ip, #1]
 801f50e:	fb03 f901 	mul.w	r9, r3, r1
 801f512:	011b      	lsls	r3, r3, #4
 801f514:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f518:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f51c:	eba3 0309 	sub.w	r3, r3, r9
 801f520:	b289      	uxth	r1, r1
 801f522:	b29b      	uxth	r3, r3
 801f524:	ebae 0e01 	sub.w	lr, lr, r1
 801f528:	435f      	muls	r7, r3
 801f52a:	fa1f fe8e 	uxth.w	lr, lr
 801f52e:	fb0e 770a 	mla	r7, lr, sl, r7
 801f532:	f892 a002 	ldrb.w	sl, [r2, #2]
 801f536:	fb01 770a 	mla	r7, r1, sl, r7
 801f53a:	f890 a002 	ldrb.w	sl, [r0, #2]
 801f53e:	fb09 7a0a 	mla	sl, r9, sl, r7
 801f542:	f814 7008 	ldrb.w	r7, [r4, r8]
 801f546:	f896 8000 	ldrb.w	r8, [r6]
 801f54a:	7876      	ldrb	r6, [r6, #1]
 801f54c:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801f550:	fb03 f808 	mul.w	r8, r3, r8
 801f554:	4373      	muls	r3, r6
 801f556:	fb0e 8807 	mla	r8, lr, r7, r8
 801f55a:	7817      	ldrb	r7, [r2, #0]
 801f55c:	fb0e 330c 	mla	r3, lr, ip, r3
 801f560:	fb01 8807 	mla	r8, r1, r7, r8
 801f564:	7807      	ldrb	r7, [r0, #0]
 801f566:	fb09 8707 	mla	r7, r9, r7, r8
 801f56a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801f56e:	ea47 070a 	orr.w	r7, r7, sl
 801f572:	f892 a001 	ldrb.w	sl, [r2, #1]
 801f576:	fb01 310a 	mla	r1, r1, sl, r3
 801f57a:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f57e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f580:	fb09 1a0a 	mla	sl, r9, sl, r1
 801f584:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f588:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f58c:	ea47 070a 	orr.w	r7, r7, sl
 801f590:	801f      	strh	r7, [r3, #0]
 801f592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f594:	3302      	adds	r3, #2
 801f596:	9309      	str	r3, [sp, #36]	; 0x24
 801f598:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f59a:	449b      	add	fp, r3
 801f59c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f59e:	441d      	add	r5, r3
 801f5a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f5a2:	3b01      	subs	r3, #1
 801f5a4:	930b      	str	r3, [sp, #44]	; 0x2c
 801f5a6:	e770      	b.n	801f48a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801f5a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f5aa:	449b      	add	fp, r3
 801f5ac:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f5ae:	441d      	add	r5, r3
 801f5b0:	9b06      	ldr	r3, [sp, #24]
 801f5b2:	3b01      	subs	r3, #1
 801f5b4:	9306      	str	r3, [sp, #24]
 801f5b6:	9b07      	ldr	r3, [sp, #28]
 801f5b8:	3302      	adds	r3, #2
 801f5ba:	9307      	str	r3, [sp, #28]
 801f5bc:	e745      	b.n	801f44a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801f5be:	d023      	beq.n	801f608 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801f5c0:	9b06      	ldr	r3, [sp, #24]
 801f5c2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801f5c4:	3b01      	subs	r3, #1
 801f5c6:	fb00 b003 	mla	r0, r0, r3, fp
 801f5ca:	1400      	asrs	r0, r0, #16
 801f5cc:	f53f af59 	bmi.w	801f482 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f5d0:	3901      	subs	r1, #1
 801f5d2:	4288      	cmp	r0, r1
 801f5d4:	f6bf af55 	bge.w	801f482 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f5d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 801f5da:	fb01 5303 	mla	r3, r1, r3, r5
 801f5de:	141b      	asrs	r3, r3, #16
 801f5e0:	f53f af4f 	bmi.w	801f482 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f5e4:	3a01      	subs	r2, #1
 801f5e6:	4293      	cmp	r3, r2
 801f5e8:	f6bf af4b 	bge.w	801f482 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f5ec:	9b06      	ldr	r3, [sp, #24]
 801f5ee:	9309      	str	r3, [sp, #36]	; 0x24
 801f5f0:	9b07      	ldr	r3, [sp, #28]
 801f5f2:	930b      	str	r3, [sp, #44]	; 0x2c
 801f5f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f5f6:	2b00      	cmp	r3, #0
 801f5f8:	dc70      	bgt.n	801f6dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801f5fa:	9b06      	ldr	r3, [sp, #24]
 801f5fc:	9a07      	ldr	r2, [sp, #28]
 801f5fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f602:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f606:	9307      	str	r3, [sp, #28]
 801f608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f60a:	2b00      	cmp	r3, #0
 801f60c:	f340 80eb 	ble.w	801f7e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801f610:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f614:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f616:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f61a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f61e:	eef0 6a62 	vmov.f32	s13, s5
 801f622:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f626:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f62a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f62e:	ee16 ba90 	vmov	fp, s13
 801f632:	eef0 6a43 	vmov.f32	s13, s6
 801f636:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f63a:	ee16 5a90 	vmov	r5, s13
 801f63e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f642:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f646:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f64a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f64e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f652:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f656:	ee12 2a90 	vmov	r2, s5
 801f65a:	eef0 2a47 	vmov.f32	s5, s14
 801f65e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f662:	ee13 2a10 	vmov	r2, s6
 801f666:	931b      	str	r3, [sp, #108]	; 0x6c
 801f668:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f66a:	eeb0 3a67 	vmov.f32	s6, s15
 801f66e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f672:	931c      	str	r3, [sp, #112]	; 0x70
 801f674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f676:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f678:	3b01      	subs	r3, #1
 801f67a:	930a      	str	r3, [sp, #40]	; 0x28
 801f67c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f67e:	bf08      	it	eq
 801f680:	4613      	moveq	r3, r2
 801f682:	9306      	str	r3, [sp, #24]
 801f684:	e6d3      	b.n	801f42e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801f686:	b149      	cbz	r1, 801f69c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801f688:	5cba      	ldrb	r2, [r7, r2]
 801f68a:	4660      	mov	r0, ip
 801f68c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f690:	4422      	add	r2, r4
 801f692:	4666      	mov	r6, ip
 801f694:	e734      	b.n	801f500 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801f696:	4660      	mov	r0, ip
 801f698:	4662      	mov	r2, ip
 801f69a:	e731      	b.n	801f500 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801f69c:	4660      	mov	r0, ip
 801f69e:	4662      	mov	r2, ip
 801f6a0:	e7f7      	b.n	801f692 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801f6a2:	f110 0c01 	adds.w	ip, r0, #1
 801f6a6:	f53f af74 	bmi.w	801f592 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801f6aa:	4562      	cmp	r2, ip
 801f6ac:	f6ff af71 	blt.w	801f592 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801f6b0:	f116 0c01 	adds.w	ip, r6, #1
 801f6b4:	f53f af6d 	bmi.w	801f592 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801f6b8:	4567      	cmp	r7, ip
 801f6ba:	f6ff af6a 	blt.w	801f592 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801f6be:	b23f      	sxth	r7, r7
 801f6c0:	b212      	sxth	r2, r2
 801f6c2:	9701      	str	r7, [sp, #4]
 801f6c4:	9200      	str	r2, [sp, #0]
 801f6c6:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801f6ca:	e9cd 0602 	strd	r0, r6, [sp, #8]
 801f6ce:	4623      	mov	r3, r4
 801f6d0:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f6d2:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801f6d6:	f7ff fde7 	bl	801f2a8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 801f6da:	e75a      	b.n	801f592 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801f6dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f6de:	ea4f 462b 	mov.w	r6, fp, asr #16
 801f6e2:	1428      	asrs	r0, r5, #16
 801f6e4:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801f6e8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801f6ec:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f6f0:	fb02 6000 	mla	r0, r2, r0, r6
 801f6f4:	9e08      	ldr	r6, [sp, #32]
 801f6f6:	f816 8000 	ldrb.w	r8, [r6, r0]
 801f6fa:	1837      	adds	r7, r6, r0
 801f6fc:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f700:	eb04 0c08 	add.w	ip, r4, r8
 801f704:	2b00      	cmp	r3, #0
 801f706:	d060      	beq.n	801f7ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 801f708:	787e      	ldrb	r6, [r7, #1]
 801f70a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f70e:	4426      	add	r6, r4
 801f710:	2900      	cmp	r1, #0
 801f712:	d062      	beq.n	801f7da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 801f714:	18b8      	adds	r0, r7, r2
 801f716:	5cba      	ldrb	r2, [r7, r2]
 801f718:	7840      	ldrb	r0, [r0, #1]
 801f71a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f71e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f722:	4422      	add	r2, r4
 801f724:	4420      	add	r0, r4
 801f726:	b29b      	uxth	r3, r3
 801f728:	78b7      	ldrb	r7, [r6, #2]
 801f72a:	b289      	uxth	r1, r1
 801f72c:	f89c a002 	ldrb.w	sl, [ip, #2]
 801f730:	f89c c001 	ldrb.w	ip, [ip, #1]
 801f734:	fb03 f901 	mul.w	r9, r3, r1
 801f738:	011b      	lsls	r3, r3, #4
 801f73a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f73e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f742:	eba3 0309 	sub.w	r3, r3, r9
 801f746:	b289      	uxth	r1, r1
 801f748:	b29b      	uxth	r3, r3
 801f74a:	ebae 0e01 	sub.w	lr, lr, r1
 801f74e:	435f      	muls	r7, r3
 801f750:	fa1f fe8e 	uxth.w	lr, lr
 801f754:	fb0e 770a 	mla	r7, lr, sl, r7
 801f758:	f892 a002 	ldrb.w	sl, [r2, #2]
 801f75c:	fb01 770a 	mla	r7, r1, sl, r7
 801f760:	f890 a002 	ldrb.w	sl, [r0, #2]
 801f764:	fb09 7a0a 	mla	sl, r9, sl, r7
 801f768:	f814 7008 	ldrb.w	r7, [r4, r8]
 801f76c:	f896 8000 	ldrb.w	r8, [r6]
 801f770:	7876      	ldrb	r6, [r6, #1]
 801f772:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801f776:	fb03 f808 	mul.w	r8, r3, r8
 801f77a:	4373      	muls	r3, r6
 801f77c:	7856      	ldrb	r6, [r2, #1]
 801f77e:	fb0e 8807 	mla	r8, lr, r7, r8
 801f782:	7817      	ldrb	r7, [r2, #0]
 801f784:	fb0e 330c 	mla	r3, lr, ip, r3
 801f788:	fb01 8807 	mla	r8, r1, r7, r8
 801f78c:	7807      	ldrb	r7, [r0, #0]
 801f78e:	fb01 3306 	mla	r3, r1, r6, r3
 801f792:	fb09 8707 	mla	r7, r9, r7, r8
 801f796:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801f79a:	ea47 070a 	orr.w	r7, r7, sl
 801f79e:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f7a2:	fb09 3a0a 	mla	sl, r9, sl, r3
 801f7a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f7a8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f7ac:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f7b0:	ea47 070a 	orr.w	r7, r7, sl
 801f7b4:	f823 7b02 	strh.w	r7, [r3], #2
 801f7b8:	930b      	str	r3, [sp, #44]	; 0x2c
 801f7ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f7bc:	449b      	add	fp, r3
 801f7be:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f7c0:	441d      	add	r5, r3
 801f7c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f7c4:	3b01      	subs	r3, #1
 801f7c6:	9309      	str	r3, [sp, #36]	; 0x24
 801f7c8:	e714      	b.n	801f5f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801f7ca:	b149      	cbz	r1, 801f7e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801f7cc:	5cba      	ldrb	r2, [r7, r2]
 801f7ce:	4660      	mov	r0, ip
 801f7d0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f7d4:	4422      	add	r2, r4
 801f7d6:	4666      	mov	r6, ip
 801f7d8:	e7a5      	b.n	801f726 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 801f7da:	4660      	mov	r0, ip
 801f7dc:	4662      	mov	r2, ip
 801f7de:	e7a2      	b.n	801f726 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 801f7e0:	4660      	mov	r0, ip
 801f7e2:	4662      	mov	r2, ip
 801f7e4:	e7f7      	b.n	801f7d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
 801f7e6:	b00f      	add	sp, #60	; 0x3c
 801f7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f7ec <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 801f7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7f0:	b085      	sub	sp, #20
 801f7f2:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 801f7f6:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801f7fa:	9102      	str	r1, [sp, #8]
 801f7fc:	2c00      	cmp	r4, #0
 801f7fe:	fb04 710c 	mla	r1, r4, ip, r7
 801f802:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801f806:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 801f80a:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801f80e:	eb02 0e01 	add.w	lr, r2, r1
 801f812:	f2c0 8122 	blt.w	801fa5a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801f816:	45a0      	cmp	r8, r4
 801f818:	f340 811f 	ble.w	801fa5a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801f81c:	2f00      	cmp	r7, #0
 801f81e:	f2c0 811a 	blt.w	801fa56 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801f822:	45bc      	cmp	ip, r7
 801f824:	f340 8117 	ble.w	801fa56 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801f828:	5c52      	ldrb	r2, [r2, r1]
 801f82a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801f82e:	1c7a      	adds	r2, r7, #1
 801f830:	f100 8116 	bmi.w	801fa60 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801f834:	4594      	cmp	ip, r2
 801f836:	f340 8113 	ble.w	801fa60 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801f83a:	2e00      	cmp	r6, #0
 801f83c:	f000 8112 	beq.w	801fa64 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 801f840:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801f844:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f848:	3401      	adds	r4, #1
 801f84a:	f100 810f 	bmi.w	801fa6c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801f84e:	45a0      	cmp	r8, r4
 801f850:	f340 810c 	ble.w	801fa6c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801f854:	2800      	cmp	r0, #0
 801f856:	f000 810c 	beq.w	801fa72 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 801f85a:	2f00      	cmp	r7, #0
 801f85c:	f2c0 8104 	blt.w	801fa68 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801f860:	45bc      	cmp	ip, r7
 801f862:	f340 8101 	ble.w	801fa68 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801f866:	f81e 200c 	ldrb.w	r2, [lr, ip]
 801f86a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801f86e:	3701      	adds	r7, #1
 801f870:	f100 8102 	bmi.w	801fa78 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801f874:	45bc      	cmp	ip, r7
 801f876:	f340 80ff 	ble.w	801fa78 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801f87a:	2e00      	cmp	r6, #0
 801f87c:	f000 80fe 	beq.w	801fa7c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 801f880:	44f4      	add	ip, lr
 801f882:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801f886:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801f88a:	b2b6      	uxth	r6, r6
 801f88c:	b280      	uxth	r0, r0
 801f88e:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801f892:	fb00 fe06 	mul.w	lr, r0, r6
 801f896:	0136      	lsls	r6, r6, #4
 801f898:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 801f89c:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801f8a0:	eba6 070e 	sub.w	r7, r6, lr
 801f8a4:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 801f8a8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801f8ac:	b280      	uxth	r0, r0
 801f8ae:	b2bf      	uxth	r7, r7
 801f8b0:	1a1b      	subs	r3, r3, r0
 801f8b2:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801f8b6:	fb0a f607 	mul.w	r6, sl, r7
 801f8ba:	b29b      	uxth	r3, r3
 801f8bc:	fb0b 6603 	mla	r6, fp, r3, r6
 801f8c0:	fb00 6609 	mla	r6, r0, r9, r6
 801f8c4:	fb0e 6608 	mla	r6, lr, r8, r6
 801f8c8:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801f8cc:	9600      	str	r6, [sp, #0]
 801f8ce:	2e00      	cmp	r6, #0
 801f8d0:	f000 80be 	beq.w	801fa50 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 801f8d4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801f8d8:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f8dc:	9e02      	ldr	r6, [sp, #8]
 801f8de:	fb0b fc0c 	mul.w	ip, fp, ip
 801f8e2:	fb0b f505 	mul.w	r5, fp, r5
 801f8e6:	8836      	ldrh	r6, [r6, #0]
 801f8e8:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801f8ec:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f8f0:	9501      	str	r5, [sp, #4]
 801f8f2:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801f8f6:	44dc      	add	ip, fp
 801f8f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f8fc:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801f900:	9503      	str	r5, [sp, #12]
 801f902:	9d01      	ldr	r5, [sp, #4]
 801f904:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801f908:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801f90c:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 801f910:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801f914:	fb0a fc0c 	mul.w	ip, sl, ip
 801f918:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 801f91c:	fb0a fa01 	mul.w	sl, sl, r1
 801f920:	ea4f 251c 	mov.w	r5, ip, lsr #8
 801f924:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f928:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 801f92c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f930:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 801f934:	4465      	add	r5, ip
 801f936:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f93a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801f93e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f942:	fb09 fc0c 	mul.w	ip, r9, ip
 801f946:	0a2d      	lsrs	r5, r5, #8
 801f948:	fb09 f904 	mul.w	r9, r9, r4
 801f94c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f950:	ea4f 211c 	mov.w	r1, ip, lsr #8
 801f954:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f958:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801f95c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f960:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801f964:	437d      	muls	r5, r7
 801f966:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801f96a:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 801f96e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f972:	4461      	add	r1, ip
 801f974:	fb08 f404 	mul.w	r4, r8, r4
 801f978:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f97c:	fb08 f802 	mul.w	r8, r8, r2
 801f980:	0a09      	lsrs	r1, r1, #8
 801f982:	0a22      	lsrs	r2, r4, #8
 801f984:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801f988:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801f98c:	fb07 f70a 	mul.w	r7, r7, sl
 801f990:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f994:	4414      	add	r4, r2
 801f996:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801f99a:	0a24      	lsrs	r4, r4, #8
 801f99c:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801f9a0:	9a03      	ldr	r2, [sp, #12]
 801f9a2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f9a6:	fb02 5503 	mla	r5, r2, r3, r5
 801f9aa:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801f9ae:	9a00      	ldr	r2, [sp, #0]
 801f9b0:	fb04 540e 	mla	r4, r4, lr, r5
 801f9b4:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801f9b8:	1235      	asrs	r5, r6, #8
 801f9ba:	fb01 4100 	mla	r1, r1, r0, r4
 801f9be:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801f9c2:	0a09      	lsrs	r1, r1, #8
 801f9c4:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 801f9c8:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 801f9cc:	fb03 7101 	mla	r1, r3, r1, r7
 801f9d0:	fb0e 1e08 	mla	lr, lr, r8, r1
 801f9d4:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 801f9d8:	fb00 e101 	mla	r1, r0, r1, lr
 801f9dc:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801f9e0:	b287      	uxth	r7, r0
 801f9e2:	0a09      	lsrs	r1, r1, #8
 801f9e4:	437a      	muls	r2, r7
 801f9e6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801f9ea:	1c53      	adds	r3, r2, #1
 801f9ec:	4321      	orrs	r1, r4
 801f9ee:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f9f2:	0c0a      	lsrs	r2, r1, #16
 801f9f4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801f9f8:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801f9fc:	b2c8      	uxtb	r0, r1
 801f9fe:	fb12 f207 	smulbb	r2, r2, r7
 801fa02:	fb14 f407 	smulbb	r4, r4, r7
 801fa06:	b2db      	uxtb	r3, r3
 801fa08:	fb10 f007 	smulbb	r0, r0, r7
 801fa0c:	fb05 2503 	mla	r5, r5, r3, r2
 801fa10:	10f2      	asrs	r2, r6, #3
 801fa12:	00f6      	lsls	r6, r6, #3
 801fa14:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801fa18:	b2ad      	uxth	r5, r5
 801fa1a:	b2f6      	uxtb	r6, r6
 801fa1c:	fb02 4203 	mla	r2, r2, r3, r4
 801fa20:	fb06 0303 	mla	r3, r6, r3, r0
 801fa24:	b294      	uxth	r4, r2
 801fa26:	b299      	uxth	r1, r3
 801fa28:	1c6b      	adds	r3, r5, #1
 801fa2a:	1c62      	adds	r2, r4, #1
 801fa2c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801fa30:	1c4b      	adds	r3, r1, #1
 801fa32:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801fa36:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801fa3a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801fa3e:	0952      	lsrs	r2, r2, #5
 801fa40:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801fa44:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fa48:	432b      	orrs	r3, r5
 801fa4a:	4313      	orrs	r3, r2
 801fa4c:	9a02      	ldr	r2, [sp, #8]
 801fa4e:	8013      	strh	r3, [r2, #0]
 801fa50:	b005      	add	sp, #20
 801fa52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa56:	2500      	movs	r5, #0
 801fa58:	e6e9      	b.n	801f82e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 801fa5a:	2100      	movs	r1, #0
 801fa5c:	460d      	mov	r5, r1
 801fa5e:	e6f3      	b.n	801f848 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801fa60:	2100      	movs	r1, #0
 801fa62:	e6f1      	b.n	801f848 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801fa64:	4631      	mov	r1, r6
 801fa66:	e6ef      	b.n	801f848 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801fa68:	2400      	movs	r4, #0
 801fa6a:	e700      	b.n	801f86e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 801fa6c:	2200      	movs	r2, #0
 801fa6e:	4614      	mov	r4, r2
 801fa70:	e70b      	b.n	801f88a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801fa72:	4602      	mov	r2, r0
 801fa74:	4604      	mov	r4, r0
 801fa76:	e708      	b.n	801f88a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801fa78:	2200      	movs	r2, #0
 801fa7a:	e706      	b.n	801f88a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801fa7c:	4632      	mov	r2, r6
 801fa7e:	e704      	b.n	801f88a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

0801fa80 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fa80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa84:	b09f      	sub	sp, #124	; 0x7c
 801fa86:	921b      	str	r2, [sp, #108]	; 0x6c
 801fa88:	9309      	str	r3, [sp, #36]	; 0x24
 801fa8a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801fa8c:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801fa90:	901d      	str	r0, [sp, #116]	; 0x74
 801fa92:	931c      	str	r3, [sp, #112]	; 0x70
 801fa94:	6850      	ldr	r0, [r2, #4]
 801fa96:	9119      	str	r1, [sp, #100]	; 0x64
 801fa98:	6812      	ldr	r2, [r2, #0]
 801fa9a:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801fa9c:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801faa0:	fb00 1303 	mla	r3, r0, r3, r1
 801faa4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801faa8:	930c      	str	r3, [sp, #48]	; 0x30
 801faaa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801faac:	681b      	ldr	r3, [r3, #0]
 801faae:	9312      	str	r3, [sp, #72]	; 0x48
 801fab0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801fab2:	685e      	ldr	r6, [r3, #4]
 801fab4:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801fab8:	3604      	adds	r6, #4
 801faba:	930d      	str	r3, [sp, #52]	; 0x34
 801fabc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801fabe:	2b00      	cmp	r3, #0
 801fac0:	dc03      	bgt.n	801faca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801fac2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801fac4:	2b00      	cmp	r3, #0
 801fac6:	f340 8387 	ble.w	80201d8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801faca:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801facc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fad0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fad4:	1e48      	subs	r0, r1, #1
 801fad6:	1e57      	subs	r7, r2, #1
 801fad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fada:	2b00      	cmp	r3, #0
 801fadc:	f340 8194 	ble.w	801fe08 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 801fae0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801fae2:	142b      	asrs	r3, r5, #16
 801fae4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801fae8:	d406      	bmi.n	801faf8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801faea:	4584      	cmp	ip, r0
 801faec:	da04      	bge.n	801faf8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801faee:	2b00      	cmp	r3, #0
 801faf0:	db02      	blt.n	801faf8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801faf2:	42bb      	cmp	r3, r7
 801faf4:	f2c0 8189 	blt.w	801fe0a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801faf8:	f11c 0c01 	adds.w	ip, ip, #1
 801fafc:	f100 8177 	bmi.w	801fdee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801fb00:	4561      	cmp	r1, ip
 801fb02:	f2c0 8174 	blt.w	801fdee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801fb06:	3301      	adds	r3, #1
 801fb08:	f100 8171 	bmi.w	801fdee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801fb0c:	429a      	cmp	r2, r3
 801fb0e:	f2c0 816e 	blt.w	801fdee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801fb12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fb14:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801fb16:	931a      	str	r3, [sp, #104]	; 0x68
 801fb18:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801fb1a:	2b00      	cmp	r3, #0
 801fb1c:	f340 8193 	ble.w	801fe46 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801fb20:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fb22:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801fb26:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801fb2a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801fb2e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801fb30:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801fb34:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fb36:	141b      	asrs	r3, r3, #16
 801fb38:	f100 81d6 	bmi.w	801fee8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801fb3c:	f100 38ff 	add.w	r8, r0, #4294967295
 801fb40:	4543      	cmp	r3, r8
 801fb42:	f280 81d1 	bge.w	801fee8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801fb46:	f1bc 0f00 	cmp.w	ip, #0
 801fb4a:	f2c0 81cd 	blt.w	801fee8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801fb4e:	f10e 38ff 	add.w	r8, lr, #4294967295
 801fb52:	45c4      	cmp	ip, r8
 801fb54:	f280 81c8 	bge.w	801fee8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801fb58:	b200      	sxth	r0, r0
 801fb5a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fb5c:	fb0c 3300 	mla	r3, ip, r0, r3
 801fb60:	eb04 0803 	add.w	r8, r4, r3
 801fb64:	5ce3      	ldrb	r3, [r4, r3]
 801fb66:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801fb6a:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801fb6e:	2a00      	cmp	r2, #0
 801fb70:	f000 81af 	beq.w	801fed2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801fb74:	f898 c001 	ldrb.w	ip, [r8, #1]
 801fb78:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801fb7c:	940e      	str	r4, [sp, #56]	; 0x38
 801fb7e:	0e24      	lsrs	r4, r4, #24
 801fb80:	9415      	str	r4, [sp, #84]	; 0x54
 801fb82:	b179      	cbz	r1, 801fba4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801fb84:	eb08 0c00 	add.w	ip, r8, r0
 801fb88:	f818 0000 	ldrb.w	r0, [r8, r0]
 801fb8c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801fb90:	900a      	str	r0, [sp, #40]	; 0x28
 801fb92:	0e00      	lsrs	r0, r0, #24
 801fb94:	9013      	str	r0, [sp, #76]	; 0x4c
 801fb96:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801fb9a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801fb9e:	900f      	str	r0, [sp, #60]	; 0x3c
 801fba0:	0e00      	lsrs	r0, r0, #24
 801fba2:	9016      	str	r0, [sp, #88]	; 0x58
 801fba4:	b292      	uxth	r2, r2
 801fba6:	9815      	ldr	r0, [sp, #84]	; 0x54
 801fba8:	b289      	uxth	r1, r1
 801fbaa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fbac:	fb02 f901 	mul.w	r9, r2, r1
 801fbb0:	0112      	lsls	r2, r2, #4
 801fbb2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fbb6:	eba2 0809 	sub.w	r8, r2, r9
 801fbba:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801fbbe:	b289      	uxth	r1, r1
 801fbc0:	fa1f f888 	uxth.w	r8, r8
 801fbc4:	1a52      	subs	r2, r2, r1
 801fbc6:	fb08 f000 	mul.w	r0, r8, r0
 801fbca:	b292      	uxth	r2, r2
 801fbcc:	fb02 000e 	mla	r0, r2, lr, r0
 801fbd0:	fb01 0004 	mla	r0, r1, r4, r0
 801fbd4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801fbd6:	fb09 0004 	mla	r0, r9, r4, r0
 801fbda:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801fbde:	2800      	cmp	r0, #0
 801fbe0:	f000 80fa 	beq.w	801fdd8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801fbe4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801fbe8:	d01b      	beq.n	801fc22 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801fbea:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801fbee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fbf2:	fb0e fa0a 	mul.w	sl, lr, sl
 801fbf6:	fb0e fe03 	mul.w	lr, lr, r3
 801fbfa:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801fbfe:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801fc02:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801fc06:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fc0a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801fc0e:	4453      	add	r3, sl
 801fc10:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fc14:	0a1b      	lsrs	r3, r3, #8
 801fc16:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fc1a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fc1e:	ea43 030c 	orr.w	r3, r3, ip
 801fc22:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801fc24:	2cff      	cmp	r4, #255	; 0xff
 801fc26:	d021      	beq.n	801fc6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801fc28:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801fc2a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801fc2e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801fc30:	fb04 fb0b 	mul.w	fp, r4, fp
 801fc34:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801fc36:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fc3a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801fc3c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fc40:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fc44:	fb04 fa0a 	mul.w	sl, r4, sl
 801fc48:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fc4c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801fc50:	44de      	add	lr, fp
 801fc52:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fc56:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fc5a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fc5e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fc62:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fc66:	ea4e 040a 	orr.w	r4, lr, sl
 801fc6a:	940e      	str	r4, [sp, #56]	; 0x38
 801fc6c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fc6e:	2cff      	cmp	r4, #255	; 0xff
 801fc70:	d021      	beq.n	801fcb6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801fc72:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fc74:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801fc78:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fc7a:	fb04 fb0b 	mul.w	fp, r4, fp
 801fc7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fc80:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fc84:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fc86:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fc8a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fc8e:	fb04 fa0a 	mul.w	sl, r4, sl
 801fc92:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fc96:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801fc9a:	44de      	add	lr, fp
 801fc9c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fca0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fca4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fca8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fcac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fcb0:	ea4e 040a 	orr.w	r4, lr, sl
 801fcb4:	940a      	str	r4, [sp, #40]	; 0x28
 801fcb6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801fcb8:	2cff      	cmp	r4, #255	; 0xff
 801fcba:	d021      	beq.n	801fd00 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 801fcbc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801fcbe:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801fcc2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801fcc4:	fb04 fb0b 	mul.w	fp, r4, fp
 801fcc8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801fcca:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fcce:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801fcd0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fcd4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fcd8:	fb04 fa0a 	mul.w	sl, r4, sl
 801fcdc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fce0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801fce4:	44de      	add	lr, fp
 801fce6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fcea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fcee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fcf2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fcf6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fcfa:	ea4e 040a 	orr.w	r4, lr, sl
 801fcfe:	940f      	str	r4, [sp, #60]	; 0x3c
 801fd00:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801fd02:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801fd06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fd0a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fd0e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fd10:	fb08 fc0c 	mul.w	ip, r8, ip
 801fd14:	fb02 cc0e 	mla	ip, r2, lr, ip
 801fd18:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801fd1c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801fd1e:	fb01 cc0e 	mla	ip, r1, lr, ip
 801fd22:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801fd26:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801fd28:	fb09 cc0e 	mla	ip, r9, lr, ip
 801fd2c:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801fd30:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801fd32:	fb08 f80e 	mul.w	r8, r8, lr
 801fd36:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fd3a:	fb02 8303 	mla	r3, r2, r3, r8
 801fd3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fd40:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fd44:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801fd48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fd4a:	fb01 330a 	mla	r3, r1, sl, r3
 801fd4e:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801fd52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fd54:	fb09 3901 	mla	r9, r9, r1, r3
 801fd58:	883b      	ldrh	r3, [r7, #0]
 801fd5a:	4342      	muls	r2, r0
 801fd5c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fd60:	1c50      	adds	r0, r2, #1
 801fd62:	1219      	asrs	r1, r3, #8
 801fd64:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801fd68:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801fd6c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801fd70:	ea4c 0c09 	orr.w	ip, ip, r9
 801fd74:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801fd78:	ea4f 421c 	mov.w	r2, ip, lsr #16
 801fd7c:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 801fd80:	b2c0      	uxtb	r0, r0
 801fd82:	fb12 f204 	smulbb	r2, r2, r4
 801fd86:	fa5f fc8c 	uxtb.w	ip, ip
 801fd8a:	fb1e fe04 	smulbb	lr, lr, r4
 801fd8e:	fb01 2100 	mla	r1, r1, r0, r2
 801fd92:	10da      	asrs	r2, r3, #3
 801fd94:	fb1c fc04 	smulbb	ip, ip, r4
 801fd98:	00db      	lsls	r3, r3, #3
 801fd9a:	b289      	uxth	r1, r1
 801fd9c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801fda0:	b2db      	uxtb	r3, r3
 801fda2:	fb02 e200 	mla	r2, r2, r0, lr
 801fda6:	fb03 c300 	mla	r3, r3, r0, ip
 801fdaa:	b292      	uxth	r2, r2
 801fdac:	fa1f fc83 	uxth.w	ip, r3
 801fdb0:	1c4b      	adds	r3, r1, #1
 801fdb2:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801fdb6:	f10c 0301 	add.w	r3, ip, #1
 801fdba:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801fdbe:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801fdc2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801fdc6:	430b      	orrs	r3, r1
 801fdc8:	1c51      	adds	r1, r2, #1
 801fdca:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801fdce:	0952      	lsrs	r2, r2, #5
 801fdd0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fdd4:	4313      	orrs	r3, r2
 801fdd6:	803b      	strh	r3, [r7, #0]
 801fdd8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801fdda:	3702      	adds	r7, #2
 801fddc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801fdde:	441a      	add	r2, r3
 801fde0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fde2:	441d      	add	r5, r3
 801fde4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801fde6:	9229      	str	r2, [sp, #164]	; 0xa4
 801fde8:	3b01      	subs	r3, #1
 801fdea:	931a      	str	r3, [sp, #104]	; 0x68
 801fdec:	e694      	b.n	801fb18 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fdee:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801fdf0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801fdf2:	441c      	add	r4, r3
 801fdf4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fdf6:	441d      	add	r5, r3
 801fdf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fdfa:	9429      	str	r4, [sp, #164]	; 0xa4
 801fdfc:	3b01      	subs	r3, #1
 801fdfe:	9309      	str	r3, [sp, #36]	; 0x24
 801fe00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fe02:	3302      	adds	r3, #2
 801fe04:	930c      	str	r3, [sp, #48]	; 0x30
 801fe06:	e667      	b.n	801fad8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801fe08:	d024      	beq.n	801fe54 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 801fe0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fe0c:	982b      	ldr	r0, [sp, #172]	; 0xac
 801fe0e:	3b01      	subs	r3, #1
 801fe10:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801fe12:	fb00 4003 	mla	r0, r0, r3, r4
 801fe16:	1400      	asrs	r0, r0, #16
 801fe18:	f53f ae7b 	bmi.w	801fb12 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fe1c:	3901      	subs	r1, #1
 801fe1e:	4288      	cmp	r0, r1
 801fe20:	f6bf ae77 	bge.w	801fb12 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fe24:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801fe26:	fb01 5303 	mla	r3, r1, r3, r5
 801fe2a:	141b      	asrs	r3, r3, #16
 801fe2c:	f53f ae71 	bmi.w	801fb12 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fe30:	3a01      	subs	r2, #1
 801fe32:	4293      	cmp	r3, r2
 801fe34:	f6bf ae6d 	bge.w	801fb12 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fe38:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801fe3c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801fe40:	f1bb 0f00 	cmp.w	fp, #0
 801fe44:	dc70      	bgt.n	801ff28 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 801fe46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fe48:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801fe4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fe4e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801fe52:	930c      	str	r3, [sp, #48]	; 0x30
 801fe54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801fe56:	2b00      	cmp	r3, #0
 801fe58:	f340 81be 	ble.w	80201d8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801fe5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fe60:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fe62:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fe66:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fe6a:	eef0 6a62 	vmov.f32	s13, s5
 801fe6e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fe72:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fe76:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fe7a:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801fe7e:	eef0 6a43 	vmov.f32	s13, s6
 801fe82:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fe86:	ee16 5a90 	vmov	r5, s13
 801fe8a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fe8e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fe92:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fe96:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fe9a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fe9e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fea2:	ee12 2a90 	vmov	r2, s5
 801fea6:	eef0 2a47 	vmov.f32	s5, s14
 801feaa:	fb92 f3f3 	sdiv	r3, r2, r3
 801feae:	ee13 2a10 	vmov	r2, s6
 801feb2:	932b      	str	r3, [sp, #172]	; 0xac
 801feb4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801feb6:	eeb0 3a67 	vmov.f32	s6, s15
 801feba:	fb92 f3f3 	sdiv	r3, r2, r3
 801febe:	932c      	str	r3, [sp, #176]	; 0xb0
 801fec0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801fec2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801fec4:	3b01      	subs	r3, #1
 801fec6:	9319      	str	r3, [sp, #100]	; 0x64
 801fec8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801feca:	bf08      	it	eq
 801fecc:	4613      	moveq	r3, r2
 801fece:	9309      	str	r3, [sp, #36]	; 0x24
 801fed0:	e5f4      	b.n	801fabc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801fed2:	2900      	cmp	r1, #0
 801fed4:	f43f ae66 	beq.w	801fba4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801fed8:	f818 0000 	ldrb.w	r0, [r8, r0]
 801fedc:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801fee0:	900a      	str	r0, [sp, #40]	; 0x28
 801fee2:	0e00      	lsrs	r0, r0, #24
 801fee4:	9013      	str	r0, [sp, #76]	; 0x4c
 801fee6:	e65d      	b.n	801fba4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801fee8:	f113 0801 	adds.w	r8, r3, #1
 801feec:	f53f af74 	bmi.w	801fdd8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801fef0:	4540      	cmp	r0, r8
 801fef2:	f6ff af71 	blt.w	801fdd8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801fef6:	f11c 0801 	adds.w	r8, ip, #1
 801fefa:	f53f af6d 	bmi.w	801fdd8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801fefe:	45c6      	cmp	lr, r8
 801ff00:	f6ff af6a 	blt.w	801fdd8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801ff04:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801ff06:	b200      	sxth	r0, r0
 801ff08:	9302      	str	r3, [sp, #8]
 801ff0a:	fa0f f38e 	sxth.w	r3, lr
 801ff0e:	9000      	str	r0, [sp, #0]
 801ff10:	9301      	str	r3, [sp, #4]
 801ff12:	4633      	mov	r3, r6
 801ff14:	981d      	ldr	r0, [sp, #116]	; 0x74
 801ff16:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801ff1a:	e9cd c203 	strd	ip, r2, [sp, #12]
 801ff1e:	4639      	mov	r1, r7
 801ff20:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ff22:	f7ff fc63 	bl	801f7ec <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 801ff26:	e757      	b.n	801fdd8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801ff28:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ff2a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801ff2e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801ff30:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ff34:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ff36:	1427      	asrs	r7, r4, #16
 801ff38:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ff3a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ff3e:	142b      	asrs	r3, r5, #16
 801ff40:	fb01 7303 	mla	r3, r1, r3, r7
 801ff44:	18e7      	adds	r7, r4, r3
 801ff46:	5ce3      	ldrb	r3, [r4, r3]
 801ff48:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ff4c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801ff50:	2a00      	cmp	r2, #0
 801ff52:	f000 8137 	beq.w	80201c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 801ff56:	f897 e001 	ldrb.w	lr, [r7, #1]
 801ff5a:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801ff5e:	9410      	str	r4, [sp, #64]	; 0x40
 801ff60:	0e24      	lsrs	r4, r4, #24
 801ff62:	9417      	str	r4, [sp, #92]	; 0x5c
 801ff64:	b170      	cbz	r0, 801ff84 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801ff66:	eb07 0e01 	add.w	lr, r7, r1
 801ff6a:	5c79      	ldrb	r1, [r7, r1]
 801ff6c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ff70:	910b      	str	r1, [sp, #44]	; 0x2c
 801ff72:	0e09      	lsrs	r1, r1, #24
 801ff74:	9114      	str	r1, [sp, #80]	; 0x50
 801ff76:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801ff7a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ff7e:	9111      	str	r1, [sp, #68]	; 0x44
 801ff80:	0e09      	lsrs	r1, r1, #24
 801ff82:	9118      	str	r1, [sp, #96]	; 0x60
 801ff84:	b292      	uxth	r2, r2
 801ff86:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801ff88:	b280      	uxth	r0, r0
 801ff8a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ff8c:	fb02 f800 	mul.w	r8, r2, r0
 801ff90:	0112      	lsls	r2, r2, #4
 801ff92:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801ff96:	eba2 0e08 	sub.w	lr, r2, r8
 801ff9a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801ff9e:	b280      	uxth	r0, r0
 801ffa0:	fa1f fe8e 	uxth.w	lr, lr
 801ffa4:	1a12      	subs	r2, r2, r0
 801ffa6:	fb0e f101 	mul.w	r1, lr, r1
 801ffaa:	b292      	uxth	r2, r2
 801ffac:	fb02 110c 	mla	r1, r2, ip, r1
 801ffb0:	fb00 1104 	mla	r1, r0, r4, r1
 801ffb4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801ffb6:	fb08 1104 	mla	r1, r8, r4, r1
 801ffba:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801ffbe:	2900      	cmp	r1, #0
 801ffc0:	f000 80f5 	beq.w	80201ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 801ffc4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801ffc8:	d019      	beq.n	801fffe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 801ffca:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801ffce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ffd2:	fb0c fa0a 	mul.w	sl, ip, sl
 801ffd6:	fb0c fc03 	mul.w	ip, ip, r3
 801ffda:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ffde:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801ffe2:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801ffe6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ffea:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801ffee:	4453      	add	r3, sl
 801fff0:	0a3f      	lsrs	r7, r7, #8
 801fff2:	0a1b      	lsrs	r3, r3, #8
 801fff4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fff8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fffc:	433b      	orrs	r3, r7
 801fffe:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020000:	2cff      	cmp	r4, #255	; 0xff
 8020002:	d020      	beq.n	8020046 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8020004:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020006:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802000a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802000c:	4367      	muls	r7, r4
 802000e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020010:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020014:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020018:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802001a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802001e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020022:	fb04 fa0a 	mul.w	sl, r4, sl
 8020026:	44bc      	add	ip, r7
 8020028:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802002c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020030:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020034:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020038:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802003c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020040:	ea4c 040a 	orr.w	r4, ip, sl
 8020044:	9410      	str	r4, [sp, #64]	; 0x40
 8020046:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020048:	2cff      	cmp	r4, #255	; 0xff
 802004a:	d020      	beq.n	802008e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 802004c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802004e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020052:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020054:	4367      	muls	r7, r4
 8020056:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020058:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802005c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020060:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020062:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020066:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802006a:	fb04 fa0a 	mul.w	sl, r4, sl
 802006e:	44bc      	add	ip, r7
 8020070:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020074:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020078:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802007c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020080:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020084:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020088:	ea4c 040a 	orr.w	r4, ip, sl
 802008c:	940b      	str	r4, [sp, #44]	; 0x2c
 802008e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020090:	2cff      	cmp	r4, #255	; 0xff
 8020092:	d020      	beq.n	80200d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 8020094:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020096:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802009a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802009c:	4367      	muls	r7, r4
 802009e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80200a0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80200a4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80200a8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80200aa:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80200ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80200b2:	fb04 fa0a 	mul.w	sl, r4, sl
 80200b6:	44bc      	add	ip, r7
 80200b8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80200bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80200c0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80200c4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80200c8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80200cc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80200d0:	ea4c 040a 	orr.w	r4, ip, sl
 80200d4:	9411      	str	r4, [sp, #68]	; 0x44
 80200d6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80200d8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80200dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80200e0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80200e4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80200e6:	fb0e f707 	mul.w	r7, lr, r7
 80200ea:	fb02 770c 	mla	r7, r2, ip, r7
 80200ee:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80200f2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80200f4:	fb00 770c 	mla	r7, r0, ip, r7
 80200f8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80200fc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80200fe:	fb08 770c 	mla	r7, r8, ip, r7
 8020102:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8020106:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020108:	fb0e fe0c 	mul.w	lr, lr, ip
 802010c:	0a3f      	lsrs	r7, r7, #8
 802010e:	fb02 e303 	mla	r3, r2, r3, lr
 8020112:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020114:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020118:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802011c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802011e:	fb00 330a 	mla	r3, r0, sl, r3
 8020122:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020126:	f8b9 0000 	ldrh.w	r0, [r9]
 802012a:	fb08 3c0c 	mla	ip, r8, ip, r3
 802012e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020130:	1202      	asrs	r2, r0, #8
 8020132:	434b      	muls	r3, r1
 8020134:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020138:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802013c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020140:	1c59      	adds	r1, r3, #1
 8020142:	ea47 070c 	orr.w	r7, r7, ip
 8020146:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802014a:	0c3b      	lsrs	r3, r7, #16
 802014c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8020150:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8020154:	b2ff      	uxtb	r7, r7
 8020156:	fb13 f304 	smulbb	r3, r3, r4
 802015a:	b2c9      	uxtb	r1, r1
 802015c:	fb1c fc04 	smulbb	ip, ip, r4
 8020160:	fb02 3201 	mla	r2, r2, r1, r3
 8020164:	10c3      	asrs	r3, r0, #3
 8020166:	fb17 f704 	smulbb	r7, r7, r4
 802016a:	00c0      	lsls	r0, r0, #3
 802016c:	b292      	uxth	r2, r2
 802016e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8020172:	b2c0      	uxtb	r0, r0
 8020174:	fb03 c301 	mla	r3, r3, r1, ip
 8020178:	f102 0c01 	add.w	ip, r2, #1
 802017c:	fb00 7001 	mla	r0, r0, r1, r7
 8020180:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020184:	b280      	uxth	r0, r0
 8020186:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 802018a:	b29b      	uxth	r3, r3
 802018c:	1c42      	adds	r2, r0, #1
 802018e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8020192:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020196:	ea42 020c 	orr.w	r2, r2, ip
 802019a:	f103 0c01 	add.w	ip, r3, #1
 802019e:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80201a2:	095b      	lsrs	r3, r3, #5
 80201a4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80201a8:	431a      	orrs	r2, r3
 80201aa:	f8a9 2000 	strh.w	r2, [r9]
 80201ae:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80201b0:	f109 0902 	add.w	r9, r9, #2
 80201b4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80201b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80201ba:	441a      	add	r2, r3
 80201bc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80201be:	9229      	str	r2, [sp, #164]	; 0xa4
 80201c0:	441d      	add	r5, r3
 80201c2:	e63d      	b.n	801fe40 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80201c4:	2800      	cmp	r0, #0
 80201c6:	f43f aedd 	beq.w	801ff84 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80201ca:	5c79      	ldrb	r1, [r7, r1]
 80201cc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80201d0:	910b      	str	r1, [sp, #44]	; 0x2c
 80201d2:	0e09      	lsrs	r1, r1, #24
 80201d4:	9114      	str	r1, [sp, #80]	; 0x50
 80201d6:	e6d5      	b.n	801ff84 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80201d8:	b01f      	add	sp, #124	; 0x7c
 80201da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080201de <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 80201de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201e2:	b089      	sub	sp, #36	; 0x24
 80201e4:	9101      	str	r1, [sp, #4]
 80201e6:	9801      	ldr	r0, [sp, #4]
 80201e8:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 80201ec:	8800      	ldrh	r0, [r0, #0]
 80201ee:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 80201f2:	1206      	asrs	r6, r0, #8
 80201f4:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80201f8:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 80201fc:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020200:	9602      	str	r6, [sp, #8]
 8020202:	10c6      	asrs	r6, r0, #3
 8020204:	00c0      	lsls	r0, r0, #3
 8020206:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802020a:	b2c0      	uxtb	r0, r0
 802020c:	9603      	str	r6, [sp, #12]
 802020e:	9004      	str	r0, [sp, #16]
 8020210:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 8020214:	fb07 100c 	mla	r0, r7, ip, r1
 8020218:	2f00      	cmp	r7, #0
 802021a:	eb02 0e00 	add.w	lr, r2, r0
 802021e:	f2c0 810a 	blt.w	8020436 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8020222:	45b8      	cmp	r8, r7
 8020224:	f340 8107 	ble.w	8020436 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8020228:	2900      	cmp	r1, #0
 802022a:	f2c0 8102 	blt.w	8020432 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 802022e:	458c      	cmp	ip, r1
 8020230:	f340 80ff 	ble.w	8020432 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8020234:	5c12      	ldrb	r2, [r2, r0]
 8020236:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802023a:	1c4a      	adds	r2, r1, #1
 802023c:	f100 80fe 	bmi.w	802043c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8020240:	4594      	cmp	ip, r2
 8020242:	f340 80fb 	ble.w	802043c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8020246:	2d00      	cmp	r5, #0
 8020248:	f000 80fa 	beq.w	8020440 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 802024c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8020250:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8020254:	3701      	adds	r7, #1
 8020256:	f100 80f7 	bmi.w	8020448 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 802025a:	45b8      	cmp	r8, r7
 802025c:	f340 80f4 	ble.w	8020448 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8020260:	2c00      	cmp	r4, #0
 8020262:	f000 80f4 	beq.w	802044e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8020266:	2900      	cmp	r1, #0
 8020268:	eb0e 020c 	add.w	r2, lr, ip
 802026c:	f2c0 80ea 	blt.w	8020444 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8020270:	458c      	cmp	ip, r1
 8020272:	f340 80e7 	ble.w	8020444 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8020276:	f81e 700c 	ldrb.w	r7, [lr, ip]
 802027a:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 802027e:	3101      	adds	r1, #1
 8020280:	f100 80e8 	bmi.w	8020454 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8020284:	458c      	cmp	ip, r1
 8020286:	f340 80e5 	ble.w	8020454 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 802028a:	2d00      	cmp	r5, #0
 802028c:	f000 80e4 	beq.w	8020458 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8020290:	7852      	ldrb	r2, [r2, #1]
 8020292:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020296:	0e0b      	lsrs	r3, r1, #24
 8020298:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 802029c:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 80202a0:	9300      	str	r3, [sp, #0]
 80202a2:	b2a4      	uxth	r4, r4
 80202a4:	b2ab      	uxth	r3, r5
 80202a6:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 80202aa:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 80202ae:	fb03 f904 	mul.w	r9, r3, r4
 80202b2:	011b      	lsls	r3, r3, #4
 80202b4:	fb0a f505 	mul.w	r5, sl, r5
 80202b8:	ea4f 6817 	mov.w	r8, r7, lsr #24
 80202bc:	eba3 0e09 	sub.w	lr, r3, r9
 80202c0:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 80202c4:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 80202c8:	0a28      	lsrs	r0, r5, #8
 80202ca:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 80202ce:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80202d2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80202d6:	fb0a f303 	mul.w	r3, sl, r3
 80202da:	fb08 f707 	mul.w	r7, r8, r7
 80202de:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 80202e2:	4405      	add	r5, r0
 80202e4:	fb08 fc0c 	mul.w	ip, r8, ip
 80202e8:	b2a4      	uxth	r4, r4
 80202ea:	0a2d      	lsrs	r5, r5, #8
 80202ec:	fa1f fe8e 	uxth.w	lr, lr
 80202f0:	1b12      	subs	r2, r2, r4
 80202f2:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 80202f6:	b292      	uxth	r2, r2
 80202f8:	9005      	str	r0, [sp, #20]
 80202fa:	f503 7080 	add.w	r0, r3, #256	; 0x100
 80202fe:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8020302:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8020306:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802030a:	0a1b      	lsrs	r3, r3, #8
 802030c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020310:	9306      	str	r3, [sp, #24]
 8020312:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 8020316:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802031a:	4460      	add	r0, ip
 802031c:	fb0b f303 	mul.w	r3, fp, r3
 8020320:	fb0b f606 	mul.w	r6, fp, r6
 8020324:	0a00      	lsrs	r0, r0, #8
 8020326:	0a1d      	lsrs	r5, r3, #8
 8020328:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 802032c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020330:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020334:	441d      	add	r5, r3
 8020336:	f506 7380 	add.w	r3, r6, #256	; 0x100
 802033a:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 802033e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020342:	0a2d      	lsrs	r5, r5, #8
 8020344:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8020348:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 802034c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020350:	0a36      	lsrs	r6, r6, #8
 8020352:	0a1b      	lsrs	r3, r3, #8
 8020354:	fb05 f50e 	mul.w	r5, r5, lr
 8020358:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802035c:	9307      	str	r3, [sp, #28]
 802035e:	0e0b      	lsrs	r3, r1, #24
 8020360:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8020364:	fb0e f606 	mul.w	r6, lr, r6
 8020368:	435f      	muls	r7, r3
 802036a:	4359      	muls	r1, r3
 802036c:	9b05      	ldr	r3, [sp, #20]
 802036e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020372:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020376:	fb03 5502 	mla	r5, r3, r2, r5
 802037a:	9b06      	ldr	r3, [sp, #24]
 802037c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020380:	fb0e fe0b 	mul.w	lr, lr, fp
 8020384:	44bc      	add	ip, r7
 8020386:	f501 7780 	add.w	r7, r1, #256	; 0x100
 802038a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802038e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8020392:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020396:	0a09      	lsrs	r1, r1, #8
 8020398:	fb0c 5509 	mla	r5, ip, r9, r5
 802039c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80203a0:	fb00 5504 	mla	r5, r0, r4, r5
 80203a4:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 80203a8:	9b07      	ldr	r3, [sp, #28]
 80203aa:	fb02 6000 	mla	r0, r2, r0, r6
 80203ae:	0a2d      	lsrs	r5, r5, #8
 80203b0:	fb02 e20a 	mla	r2, r2, sl, lr
 80203b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80203b8:	fb09 0001 	mla	r0, r9, r1, r0
 80203bc:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80203c0:	fb04 0003 	mla	r0, r4, r3, r0
 80203c4:	9b00      	ldr	r3, [sp, #0]
 80203c6:	fb04 2408 	mla	r4, r4, r8, r2
 80203ca:	9a04      	ldr	r2, [sp, #16]
 80203cc:	0a00      	lsrs	r0, r0, #8
 80203ce:	fb09 4903 	mla	r9, r9, r3, r4
 80203d2:	9b02      	ldr	r3, [sp, #8]
 80203d4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80203d8:	ea6f 2929 	mvn.w	r9, r9, asr #8
 80203dc:	4305      	orrs	r5, r0
 80203de:	fa5f f989 	uxtb.w	r9, r9
 80203e2:	fb03 f109 	mul.w	r1, r3, r9
 80203e6:	9b03      	ldr	r3, [sp, #12]
 80203e8:	fb03 f309 	mul.w	r3, r3, r9
 80203ec:	fb02 f909 	mul.w	r9, r2, r9
 80203f0:	1c4a      	adds	r2, r1, #1
 80203f2:	1c58      	adds	r0, r3, #1
 80203f4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80203f8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80203fc:	0c2a      	lsrs	r2, r5, #16
 80203fe:	0a2b      	lsrs	r3, r5, #8
 8020400:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8020404:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020408:	0212      	lsls	r2, r2, #8
 802040a:	00db      	lsls	r3, r3, #3
 802040c:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8020410:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020414:	4313      	orrs	r3, r2
 8020416:	f109 0201 	add.w	r2, r9, #1
 802041a:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 802041e:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8020422:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020426:	431d      	orrs	r5, r3
 8020428:	9b01      	ldr	r3, [sp, #4]
 802042a:	801d      	strh	r5, [r3, #0]
 802042c:	b009      	add	sp, #36	; 0x24
 802042e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020432:	2000      	movs	r0, #0
 8020434:	e701      	b.n	802023a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 8020436:	2600      	movs	r6, #0
 8020438:	4630      	mov	r0, r6
 802043a:	e70b      	b.n	8020254 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 802043c:	2600      	movs	r6, #0
 802043e:	e709      	b.n	8020254 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8020440:	462e      	mov	r6, r5
 8020442:	e707      	b.n	8020254 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8020444:	2700      	movs	r7, #0
 8020446:	e71a      	b.n	802027e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 8020448:	2100      	movs	r1, #0
 802044a:	460f      	mov	r7, r1
 802044c:	e723      	b.n	8020296 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 802044e:	4621      	mov	r1, r4
 8020450:	4627      	mov	r7, r4
 8020452:	e720      	b.n	8020296 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8020454:	2100      	movs	r1, #0
 8020456:	e71e      	b.n	8020296 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8020458:	4629      	mov	r1, r5
 802045a:	e71c      	b.n	8020296 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

0802045c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802045c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020460:	b09b      	sub	sp, #108	; 0x6c
 8020462:	9218      	str	r2, [sp, #96]	; 0x60
 8020464:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020466:	9019      	str	r0, [sp, #100]	; 0x64
 8020468:	9116      	str	r1, [sp, #88]	; 0x58
 802046a:	6850      	ldr	r0, [r2, #4]
 802046c:	9307      	str	r3, [sp, #28]
 802046e:	6812      	ldr	r2, [r2, #0]
 8020470:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8020472:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8020476:	fb00 1303 	mla	r3, r0, r3, r1
 802047a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802047e:	930a      	str	r3, [sp, #40]	; 0x28
 8020480:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020482:	681b      	ldr	r3, [r3, #0]
 8020484:	930f      	str	r3, [sp, #60]	; 0x3c
 8020486:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020488:	685e      	ldr	r6, [r3, #4]
 802048a:	3604      	adds	r6, #4
 802048c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802048e:	2b00      	cmp	r3, #0
 8020490:	dc03      	bgt.n	802049a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020492:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020494:	2b00      	cmp	r3, #0
 8020496:	f340 8373 	ble.w	8020b80 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 802049a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802049c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80204a0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80204a4:	1e48      	subs	r0, r1, #1
 80204a6:	1e57      	subs	r7, r2, #1
 80204a8:	9b07      	ldr	r3, [sp, #28]
 80204aa:	2b00      	cmp	r3, #0
 80204ac:	f340 818f 	ble.w	80207ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 80204b0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80204b2:	142b      	asrs	r3, r5, #16
 80204b4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80204b8:	d406      	bmi.n	80204c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80204ba:	4584      	cmp	ip, r0
 80204bc:	da04      	bge.n	80204c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80204be:	2b00      	cmp	r3, #0
 80204c0:	db02      	blt.n	80204c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80204c2:	42bb      	cmp	r3, r7
 80204c4:	f2c0 8184 	blt.w	80207d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80204c8:	f11c 0c01 	adds.w	ip, ip, #1
 80204cc:	f100 8172 	bmi.w	80207b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80204d0:	4561      	cmp	r1, ip
 80204d2:	f2c0 816f 	blt.w	80207b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80204d6:	3301      	adds	r3, #1
 80204d8:	f100 816c 	bmi.w	80207b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80204dc:	429a      	cmp	r2, r3
 80204de:	f2c0 8169 	blt.w	80207b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80204e2:	9b07      	ldr	r3, [sp, #28]
 80204e4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80204e6:	9317      	str	r3, [sp, #92]	; 0x5c
 80204e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80204ea:	2b00      	cmp	r3, #0
 80204ec:	f340 818e 	ble.w	802080c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 80204f0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80204f2:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80204f6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80204fa:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80204fe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020500:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8020504:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020506:	141b      	asrs	r3, r3, #16
 8020508:	f100 81d1 	bmi.w	80208ae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802050c:	f101 38ff 	add.w	r8, r1, #4294967295
 8020510:	4543      	cmp	r3, r8
 8020512:	f280 81cc 	bge.w	80208ae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8020516:	f1bc 0f00 	cmp.w	ip, #0
 802051a:	f2c0 81c8 	blt.w	80208ae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802051e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8020522:	45c4      	cmp	ip, r8
 8020524:	f280 81c3 	bge.w	80208ae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8020528:	b209      	sxth	r1, r1
 802052a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802052c:	fb0c 3301 	mla	r3, ip, r1, r3
 8020530:	eb04 0803 	add.w	r8, r4, r3
 8020534:	5ce3      	ldrb	r3, [r4, r3]
 8020536:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802053a:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802053e:	2a00      	cmp	r2, #0
 8020540:	f000 81aa 	beq.w	8020898 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8020544:	f898 c001 	ldrb.w	ip, [r8, #1]
 8020548:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 802054c:	940b      	str	r4, [sp, #44]	; 0x2c
 802054e:	0e24      	lsrs	r4, r4, #24
 8020550:	9412      	str	r4, [sp, #72]	; 0x48
 8020552:	b178      	cbz	r0, 8020574 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8020554:	eb08 0c01 	add.w	ip, r8, r1
 8020558:	f818 1001 	ldrb.w	r1, [r8, r1]
 802055c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020560:	9108      	str	r1, [sp, #32]
 8020562:	0e09      	lsrs	r1, r1, #24
 8020564:	9110      	str	r1, [sp, #64]	; 0x40
 8020566:	f89c 1001 	ldrb.w	r1, [ip, #1]
 802056a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802056e:	910c      	str	r1, [sp, #48]	; 0x30
 8020570:	0e09      	lsrs	r1, r1, #24
 8020572:	9113      	str	r1, [sp, #76]	; 0x4c
 8020574:	b292      	uxth	r2, r2
 8020576:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020578:	b280      	uxth	r0, r0
 802057a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802057c:	fb02 f900 	mul.w	r9, r2, r0
 8020580:	0112      	lsls	r2, r2, #4
 8020582:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020586:	eba2 0809 	sub.w	r8, r2, r9
 802058a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802058e:	b280      	uxth	r0, r0
 8020590:	fa1f f888 	uxth.w	r8, r8
 8020594:	1a12      	subs	r2, r2, r0
 8020596:	fb08 f101 	mul.w	r1, r8, r1
 802059a:	b292      	uxth	r2, r2
 802059c:	fb02 110e 	mla	r1, r2, lr, r1
 80205a0:	fb00 1104 	mla	r1, r0, r4, r1
 80205a4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80205a6:	fb09 1104 	mla	r1, r9, r4, r1
 80205aa:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80205ae:	2900      	cmp	r1, #0
 80205b0:	f000 80f5 	beq.w	802079e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80205b4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80205b8:	d01b      	beq.n	80205f2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80205ba:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80205be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80205c2:	fb0e fa0a 	mul.w	sl, lr, sl
 80205c6:	fb0e fe03 	mul.w	lr, lr, r3
 80205ca:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80205ce:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80205d2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80205d6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80205da:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80205de:	4453      	add	r3, sl
 80205e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80205e4:	0a1b      	lsrs	r3, r3, #8
 80205e6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80205ea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80205ee:	ea43 030c 	orr.w	r3, r3, ip
 80205f2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80205f4:	2cff      	cmp	r4, #255	; 0xff
 80205f6:	d021      	beq.n	802063c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 80205f8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80205fa:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80205fe:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020600:	fb04 fb0b 	mul.w	fp, r4, fp
 8020604:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020606:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802060a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802060c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020610:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020614:	fb04 fa0a 	mul.w	sl, r4, sl
 8020618:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802061c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020620:	44de      	add	lr, fp
 8020622:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020626:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802062a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802062e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020632:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020636:	ea4e 040a 	orr.w	r4, lr, sl
 802063a:	940b      	str	r4, [sp, #44]	; 0x2c
 802063c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802063e:	2cff      	cmp	r4, #255	; 0xff
 8020640:	d021      	beq.n	8020686 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8020642:	9c08      	ldr	r4, [sp, #32]
 8020644:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020648:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802064a:	fb04 fb0b 	mul.w	fp, r4, fp
 802064e:	9c08      	ldr	r4, [sp, #32]
 8020650:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020654:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020656:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802065a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802065e:	fb04 fa0a 	mul.w	sl, r4, sl
 8020662:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020666:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802066a:	44de      	add	lr, fp
 802066c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020670:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020674:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020678:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802067c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020680:	ea4e 040a 	orr.w	r4, lr, sl
 8020684:	9408      	str	r4, [sp, #32]
 8020686:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020688:	2cff      	cmp	r4, #255	; 0xff
 802068a:	d021      	beq.n	80206d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 802068c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802068e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020692:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020694:	fb04 fb0b 	mul.w	fp, r4, fp
 8020698:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802069a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802069e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80206a0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80206a4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80206a8:	fb04 fa0a 	mul.w	sl, r4, sl
 80206ac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80206b0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80206b4:	44de      	add	lr, fp
 80206b6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80206ba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80206be:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80206c2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80206c6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80206ca:	ea4e 040a 	orr.w	r4, lr, sl
 80206ce:	940c      	str	r4, [sp, #48]	; 0x30
 80206d0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80206d2:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80206d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80206da:	43c9      	mvns	r1, r1
 80206dc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80206e0:	9c08      	ldr	r4, [sp, #32]
 80206e2:	fb08 fc0c 	mul.w	ip, r8, ip
 80206e6:	fb02 cc0e 	mla	ip, r2, lr, ip
 80206ea:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80206ee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80206f0:	fb00 cc0e 	mla	ip, r0, lr, ip
 80206f4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80206f8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80206fa:	fb09 cc0e 	mla	ip, r9, lr, ip
 80206fe:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8020702:	fb08 f80e 	mul.w	r8, r8, lr
 8020706:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802070a:	fa5f fe81 	uxtb.w	lr, r1
 802070e:	fb02 8303 	mla	r3, r2, r3, r8
 8020712:	9a08      	ldr	r2, [sp, #32]
 8020714:	f8b7 8000 	ldrh.w	r8, [r7]
 8020718:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802071c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020720:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020722:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8020726:	fb00 330a 	mla	r3, r0, sl, r3
 802072a:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 802072e:	ea4f 2228 	mov.w	r2, r8, asr #8
 8020732:	fb09 3900 	mla	r9, r9, r0, r3
 8020736:	ea4f 00e8 	mov.w	r0, r8, asr #3
 802073a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802073e:	b2c9      	uxtb	r1, r1
 8020740:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020744:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020748:	fb02 f20e 	mul.w	r2, r2, lr
 802074c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020750:	fb00 f00e 	mul.w	r0, r0, lr
 8020754:	1c53      	adds	r3, r2, #1
 8020756:	fb01 f10e 	mul.w	r1, r1, lr
 802075a:	ea4c 0c09 	orr.w	ip, ip, r9
 802075e:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8020762:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8020766:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802076a:	4a60      	ldr	r2, [pc, #384]	; (80208ec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 802076c:	b2db      	uxtb	r3, r3
 802076e:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8020772:	1c43      	adds	r3, r0, #1
 8020774:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8020778:	ea4f 231c 	mov.w	r3, ip, lsr #8
 802077c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020780:	00db      	lsls	r3, r3, #3
 8020782:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020786:	4313      	orrs	r3, r2
 8020788:	1c4a      	adds	r2, r1, #1
 802078a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802078e:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8020792:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8020796:	ea4c 0c03 	orr.w	ip, ip, r3
 802079a:	f8a7 c000 	strh.w	ip, [r7]
 802079e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80207a0:	3702      	adds	r7, #2
 80207a2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80207a4:	441a      	add	r2, r3
 80207a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80207a8:	441d      	add	r5, r3
 80207aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80207ac:	9225      	str	r2, [sp, #148]	; 0x94
 80207ae:	3b01      	subs	r3, #1
 80207b0:	9317      	str	r3, [sp, #92]	; 0x5c
 80207b2:	e699      	b.n	80204e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80207b4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80207b6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80207b8:	441c      	add	r4, r3
 80207ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80207bc:	441d      	add	r5, r3
 80207be:	9b07      	ldr	r3, [sp, #28]
 80207c0:	9425      	str	r4, [sp, #148]	; 0x94
 80207c2:	3b01      	subs	r3, #1
 80207c4:	9307      	str	r3, [sp, #28]
 80207c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80207c8:	3302      	adds	r3, #2
 80207ca:	930a      	str	r3, [sp, #40]	; 0x28
 80207cc:	e66c      	b.n	80204a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80207ce:	d024      	beq.n	802081a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 80207d0:	9b07      	ldr	r3, [sp, #28]
 80207d2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80207d4:	3b01      	subs	r3, #1
 80207d6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80207d8:	fb00 4003 	mla	r0, r0, r3, r4
 80207dc:	1400      	asrs	r0, r0, #16
 80207de:	f53f ae80 	bmi.w	80204e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80207e2:	3901      	subs	r1, #1
 80207e4:	4288      	cmp	r0, r1
 80207e6:	f6bf ae7c 	bge.w	80204e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80207ea:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80207ec:	fb01 5303 	mla	r3, r1, r3, r5
 80207f0:	141b      	asrs	r3, r3, #16
 80207f2:	f53f ae76 	bmi.w	80204e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80207f6:	3a01      	subs	r2, #1
 80207f8:	4293      	cmp	r3, r2
 80207fa:	f6bf ae72 	bge.w	80204e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80207fe:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8020802:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8020806:	f1bb 0f00 	cmp.w	fp, #0
 802080a:	dc71      	bgt.n	80208f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 802080c:	9b07      	ldr	r3, [sp, #28]
 802080e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020814:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8020818:	930a      	str	r3, [sp, #40]	; 0x28
 802081a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802081c:	2b00      	cmp	r3, #0
 802081e:	f340 81af 	ble.w	8020b80 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8020822:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020826:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020828:	ee30 0a04 	vadd.f32	s0, s0, s8
 802082c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020830:	eef0 6a62 	vmov.f32	s13, s5
 8020834:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020838:	ee31 1a05 	vadd.f32	s2, s2, s10
 802083c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020840:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8020844:	eef0 6a43 	vmov.f32	s13, s6
 8020848:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802084c:	ee16 5a90 	vmov	r5, s13
 8020850:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020854:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020858:	ee77 2a62 	vsub.f32	s5, s14, s5
 802085c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020860:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020864:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020868:	ee12 2a90 	vmov	r2, s5
 802086c:	eef0 2a47 	vmov.f32	s5, s14
 8020870:	fb92 f3f3 	sdiv	r3, r2, r3
 8020874:	ee13 2a10 	vmov	r2, s6
 8020878:	9327      	str	r3, [sp, #156]	; 0x9c
 802087a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802087c:	eeb0 3a67 	vmov.f32	s6, s15
 8020880:	fb92 f3f3 	sdiv	r3, r2, r3
 8020884:	9328      	str	r3, [sp, #160]	; 0xa0
 8020886:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020888:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802088a:	3b01      	subs	r3, #1
 802088c:	9316      	str	r3, [sp, #88]	; 0x58
 802088e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020890:	bf08      	it	eq
 8020892:	4613      	moveq	r3, r2
 8020894:	9307      	str	r3, [sp, #28]
 8020896:	e5f9      	b.n	802048c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8020898:	2800      	cmp	r0, #0
 802089a:	f43f ae6b 	beq.w	8020574 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 802089e:	f818 1001 	ldrb.w	r1, [r8, r1]
 80208a2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80208a6:	9108      	str	r1, [sp, #32]
 80208a8:	0e09      	lsrs	r1, r1, #24
 80208aa:	9110      	str	r1, [sp, #64]	; 0x40
 80208ac:	e662      	b.n	8020574 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80208ae:	f113 0801 	adds.w	r8, r3, #1
 80208b2:	f53f af74 	bmi.w	802079e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80208b6:	4541      	cmp	r1, r8
 80208b8:	f6ff af71 	blt.w	802079e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80208bc:	f11c 0801 	adds.w	r8, ip, #1
 80208c0:	f53f af6d 	bmi.w	802079e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80208c4:	45c6      	cmp	lr, r8
 80208c6:	f6ff af6a 	blt.w	802079e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80208ca:	b209      	sxth	r1, r1
 80208cc:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80208d0:	fa0f f38e 	sxth.w	r3, lr
 80208d4:	9100      	str	r1, [sp, #0]
 80208d6:	4639      	mov	r1, r7
 80208d8:	9301      	str	r3, [sp, #4]
 80208da:	4633      	mov	r3, r6
 80208dc:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80208e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80208e2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80208e4:	f7ff fc7b 	bl	80201de <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 80208e8:	e759      	b.n	802079e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80208ea:	bf00      	nop
 80208ec:	fffff800 	.word	0xfffff800
 80208f0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80208f2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80208f6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80208f8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80208fc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80208fe:	1427      	asrs	r7, r4, #16
 8020900:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020902:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020906:	142b      	asrs	r3, r5, #16
 8020908:	fb01 7303 	mla	r3, r1, r3, r7
 802090c:	18e7      	adds	r7, r4, r3
 802090e:	5ce3      	ldrb	r3, [r4, r3]
 8020910:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020914:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020918:	2a00      	cmp	r2, #0
 802091a:	f000 8127 	beq.w	8020b6c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 802091e:	f897 e001 	ldrb.w	lr, [r7, #1]
 8020922:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8020926:	940d      	str	r4, [sp, #52]	; 0x34
 8020928:	0e24      	lsrs	r4, r4, #24
 802092a:	9414      	str	r4, [sp, #80]	; 0x50
 802092c:	b170      	cbz	r0, 802094c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 802092e:	eb07 0e01 	add.w	lr, r7, r1
 8020932:	5c79      	ldrb	r1, [r7, r1]
 8020934:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020938:	9109      	str	r1, [sp, #36]	; 0x24
 802093a:	0e09      	lsrs	r1, r1, #24
 802093c:	9111      	str	r1, [sp, #68]	; 0x44
 802093e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8020942:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020946:	910e      	str	r1, [sp, #56]	; 0x38
 8020948:	0e09      	lsrs	r1, r1, #24
 802094a:	9115      	str	r1, [sp, #84]	; 0x54
 802094c:	b292      	uxth	r2, r2
 802094e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020950:	b280      	uxth	r0, r0
 8020952:	fb02 f800 	mul.w	r8, r2, r0
 8020956:	0112      	lsls	r2, r2, #4
 8020958:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802095c:	eba2 0e08 	sub.w	lr, r2, r8
 8020960:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8020964:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020966:	b280      	uxth	r0, r0
 8020968:	fa1f fe8e 	uxth.w	lr, lr
 802096c:	1a09      	subs	r1, r1, r0
 802096e:	fb0e f202 	mul.w	r2, lr, r2
 8020972:	b289      	uxth	r1, r1
 8020974:	fb01 220c 	mla	r2, r1, ip, r2
 8020978:	fb00 2204 	mla	r2, r0, r4, r2
 802097c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802097e:	fb08 2204 	mla	r2, r8, r4, r2
 8020982:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020986:	2a00      	cmp	r2, #0
 8020988:	f000 80e5 	beq.w	8020b56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 802098c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020990:	d019      	beq.n	80209c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 8020992:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020996:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802099a:	fb0c fa0a 	mul.w	sl, ip, sl
 802099e:	fb0c fc03 	mul.w	ip, ip, r3
 80209a2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80209a6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80209aa:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80209ae:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80209b2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80209b6:	4453      	add	r3, sl
 80209b8:	0a3f      	lsrs	r7, r7, #8
 80209ba:	0a1b      	lsrs	r3, r3, #8
 80209bc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80209c0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80209c4:	433b      	orrs	r3, r7
 80209c6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80209c8:	2cff      	cmp	r4, #255	; 0xff
 80209ca:	d020      	beq.n	8020a0e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 80209cc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80209ce:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80209d2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80209d4:	4367      	muls	r7, r4
 80209d6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80209d8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80209dc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80209e0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80209e2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80209e6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80209ea:	fb04 fa0a 	mul.w	sl, r4, sl
 80209ee:	44bc      	add	ip, r7
 80209f0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80209f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80209f8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80209fc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020a00:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020a04:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020a08:	ea4c 040a 	orr.w	r4, ip, sl
 8020a0c:	940d      	str	r4, [sp, #52]	; 0x34
 8020a0e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020a10:	2cff      	cmp	r4, #255	; 0xff
 8020a12:	d020      	beq.n	8020a56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 8020a14:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020a16:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020a1a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020a1c:	4367      	muls	r7, r4
 8020a1e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020a20:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020a24:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020a28:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020a2a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020a2e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020a32:	fb04 fa0a 	mul.w	sl, r4, sl
 8020a36:	44bc      	add	ip, r7
 8020a38:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020a3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020a40:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020a44:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020a48:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020a4c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020a50:	ea4c 040a 	orr.w	r4, ip, sl
 8020a54:	9409      	str	r4, [sp, #36]	; 0x24
 8020a56:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020a58:	2cff      	cmp	r4, #255	; 0xff
 8020a5a:	d020      	beq.n	8020a9e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 8020a5c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020a5e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020a62:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020a64:	4367      	muls	r7, r4
 8020a66:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020a68:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020a6c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020a70:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020a72:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020a76:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020a7a:	fb04 fa0a 	mul.w	sl, r4, sl
 8020a7e:	44bc      	add	ip, r7
 8020a80:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020a84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020a88:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020a8c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020a90:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020a94:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020a98:	ea4c 040a 	orr.w	r4, ip, sl
 8020a9c:	940e      	str	r4, [sp, #56]	; 0x38
 8020a9e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020aa0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020aa4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020aa8:	43d2      	mvns	r2, r2
 8020aaa:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020aae:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020ab0:	b2d2      	uxtb	r2, r2
 8020ab2:	fb0e f707 	mul.w	r7, lr, r7
 8020ab6:	fb01 770c 	mla	r7, r1, ip, r7
 8020aba:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020abe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020ac0:	fb00 770c 	mla	r7, r0, ip, r7
 8020ac4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020ac8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020aca:	fb08 770c 	mla	r7, r8, ip, r7
 8020ace:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8020ad2:	fb0e fe0c 	mul.w	lr, lr, ip
 8020ad6:	0a3f      	lsrs	r7, r7, #8
 8020ad8:	fb01 e303 	mla	r3, r1, r3, lr
 8020adc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020ade:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020ae2:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8020ae6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8020ae8:	fb00 330a 	mla	r3, r0, sl, r3
 8020aec:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8020af0:	fb08 3c0c 	mla	ip, r8, ip, r3
 8020af4:	f8b9 3000 	ldrh.w	r3, [r9]
 8020af8:	1218      	asrs	r0, r3, #8
 8020afa:	10d9      	asrs	r1, r3, #3
 8020afc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020b00:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020b04:	00db      	lsls	r3, r3, #3
 8020b06:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020b0a:	4350      	muls	r0, r2
 8020b0c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020b10:	b2db      	uxtb	r3, r3
 8020b12:	4351      	muls	r1, r2
 8020b14:	ea47 070c 	orr.w	r7, r7, ip
 8020b18:	4353      	muls	r3, r2
 8020b1a:	1c42      	adds	r2, r0, #1
 8020b1c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020b20:	0c3a      	lsrs	r2, r7, #16
 8020b22:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020b26:	4a18      	ldr	r2, [pc, #96]	; (8020b88 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8020b28:	b2c0      	uxtb	r0, r0
 8020b2a:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8020b2e:	1c4a      	adds	r2, r1, #1
 8020b30:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020b34:	0a3a      	lsrs	r2, r7, #8
 8020b36:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020b3a:	00c9      	lsls	r1, r1, #3
 8020b3c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020b40:	4301      	orrs	r1, r0
 8020b42:	1c58      	adds	r0, r3, #1
 8020b44:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020b48:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8020b4c:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8020b50:	4308      	orrs	r0, r1
 8020b52:	f8a9 0000 	strh.w	r0, [r9]
 8020b56:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020b58:	f109 0902 	add.w	r9, r9, #2
 8020b5c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020b5e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020b62:	441a      	add	r2, r3
 8020b64:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020b66:	9225      	str	r2, [sp, #148]	; 0x94
 8020b68:	441d      	add	r5, r3
 8020b6a:	e64c      	b.n	8020806 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8020b6c:	2800      	cmp	r0, #0
 8020b6e:	f43f aeed 	beq.w	802094c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8020b72:	5c79      	ldrb	r1, [r7, r1]
 8020b74:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020b78:	9109      	str	r1, [sp, #36]	; 0x24
 8020b7a:	0e09      	lsrs	r1, r1, #24
 8020b7c:	9111      	str	r1, [sp, #68]	; 0x44
 8020b7e:	e6e5      	b.n	802094c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8020b80:	b01b      	add	sp, #108	; 0x6c
 8020b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b86:	bf00      	nop
 8020b88:	fffff800 	.word	0xfffff800

08020b8c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8020b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b90:	b085      	sub	sp, #20
 8020b92:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8020b96:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8020b9a:	2800      	cmp	r0, #0
 8020b9c:	9103      	str	r1, [sp, #12]
 8020b9e:	fb00 7406 	mla	r4, r0, r6, r7
 8020ba2:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8020ba6:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8020baa:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8020bae:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8020bb2:	eb03 0904 	add.w	r9, r3, r4
 8020bb6:	9501      	str	r5, [sp, #4]
 8020bb8:	f2c0 8150 	blt.w	8020e5c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8020bbc:	4583      	cmp	fp, r0
 8020bbe:	f340 814d 	ble.w	8020e5c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8020bc2:	2f00      	cmp	r7, #0
 8020bc4:	f2c0 8146 	blt.w	8020e54 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8020bc8:	42be      	cmp	r6, r7
 8020bca:	f340 8143 	ble.w	8020e54 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8020bce:	f813 c004 	ldrb.w	ip, [r3, r4]
 8020bd2:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8020bd6:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8020bda:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8020bde:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8020be2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020be6:	4355      	muls	r5, r2
 8020be8:	fb0c f203 	mul.w	r2, ip, r3
 8020bec:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8020bf0:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8020bf4:	441d      	add	r5, r3
 8020bf6:	f102 0320 	add.w	r3, r2, #32
 8020bfa:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020bfe:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8020c02:	0a1b      	lsrs	r3, r3, #8
 8020c04:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020c08:	431c      	orrs	r4, r3
 8020c0a:	1c7b      	adds	r3, r7, #1
 8020c0c:	f100 812b 	bmi.w	8020e66 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8020c10:	429e      	cmp	r6, r3
 8020c12:	f340 8128 	ble.w	8020e66 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8020c16:	2900      	cmp	r1, #0
 8020c18:	f000 8128 	beq.w	8020e6c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 8020c1c:	9a01      	ldr	r2, [sp, #4]
 8020c1e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8020c22:	8855      	ldrh	r5, [r2, #2]
 8020c24:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8020c28:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8020c2c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020c30:	fb08 f802 	mul.w	r8, r8, r2
 8020c34:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8020c38:	435d      	muls	r5, r3
 8020c3a:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8020c3e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8020c42:	44d0      	add	r8, sl
 8020c44:	f105 0a20 	add.w	sl, r5, #32
 8020c48:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8020c4c:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8020c50:	0a2d      	lsrs	r5, r5, #8
 8020c52:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020c56:	432a      	orrs	r2, r5
 8020c58:	3001      	adds	r0, #1
 8020c5a:	f100 810d 	bmi.w	8020e78 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8020c5e:	4583      	cmp	fp, r0
 8020c60:	f340 810a 	ble.w	8020e78 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8020c64:	f1be 0f00 	cmp.w	lr, #0
 8020c68:	f000 810b 	beq.w	8020e82 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 8020c6c:	2f00      	cmp	r7, #0
 8020c6e:	f2c0 8100 	blt.w	8020e72 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8020c72:	42be      	cmp	r6, r7
 8020c74:	f340 80fd 	ble.w	8020e72 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8020c78:	9801      	ldr	r0, [sp, #4]
 8020c7a:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8020c7e:	f819 5006 	ldrb.w	r5, [r9, r6]
 8020c82:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8020c86:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8020c8a:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8020c8e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8020c92:	fb0a fa00 	mul.w	sl, sl, r0
 8020c96:	fb05 f808 	mul.w	r8, r5, r8
 8020c9a:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8020c9e:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8020ca2:	4482      	add	sl, r0
 8020ca4:	f108 0020 	add.w	r0, r8, #32
 8020ca8:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8020cac:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8020cb0:	0a00      	lsrs	r0, r0, #8
 8020cb2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020cb6:	ea4b 0b00 	orr.w	fp, fp, r0
 8020cba:	3701      	adds	r7, #1
 8020cbc:	f100 80e6 	bmi.w	8020e8c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8020cc0:	42be      	cmp	r6, r7
 8020cc2:	f340 80e3 	ble.w	8020e8c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8020cc6:	2900      	cmp	r1, #0
 8020cc8:	f000 80e3 	beq.w	8020e92 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8020ccc:	3601      	adds	r6, #1
 8020cce:	9801      	ldr	r0, [sp, #4]
 8020cd0:	f819 7006 	ldrb.w	r7, [r9, r6]
 8020cd4:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8020cd8:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8020cdc:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8020ce0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020ce4:	fb09 f906 	mul.w	r9, r9, r6
 8020ce8:	fb07 f800 	mul.w	r8, r7, r0
 8020cec:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8020cf0:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8020cf4:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8020cf8:	44d1      	add	r9, sl
 8020cfa:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8020cfe:	f108 0020 	add.w	r0, r8, #32
 8020d02:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8020d06:	0a00      	lsrs	r0, r0, #8
 8020d08:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020d0c:	4330      	orrs	r0, r6
 8020d0e:	b28e      	uxth	r6, r1
 8020d10:	fa1f f98e 	uxth.w	r9, lr
 8020d14:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8020d18:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8020d1c:	fb06 f809 	mul.w	r8, r6, r9
 8020d20:	0136      	lsls	r6, r6, #4
 8020d22:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8020d26:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8020d2a:	9601      	str	r6, [sp, #4]
 8020d2c:	ea4a 0404 	orr.w	r4, sl, r4
 8020d30:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8020d34:	fa1f f689 	uxth.w	r6, r9
 8020d38:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020d3c:	fb11 f90e 	smulbb	r9, r1, lr
 8020d40:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8020d44:	9602      	str	r6, [sp, #8]
 8020d46:	4626      	mov	r6, r4
 8020d48:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8020d4c:	f1ce 0410 	rsb	r4, lr, #16
 8020d50:	ea4a 0202 	orr.w	r2, sl, r2
 8020d54:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8020d58:	1a64      	subs	r4, r4, r1
 8020d5a:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8020d5e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8020d62:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020d66:	434a      	muls	r2, r1
 8020d68:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8020d6c:	ea4a 0000 	orr.w	r0, sl, r0
 8020d70:	9903      	ldr	r1, [sp, #12]
 8020d72:	fb04 2406 	mla	r4, r4, r6, r2
 8020d76:	9e02      	ldr	r6, [sp, #8]
 8020d78:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8020d7c:	fb09 4200 	mla	r2, r9, r0, r4
 8020d80:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8020d84:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8020d88:	8808      	ldrh	r0, [r1, #0]
 8020d8a:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8020d8e:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 8020d92:	ea44 0b0b 	orr.w	fp, r4, fp
 8020d96:	9c01      	ldr	r4, [sp, #4]
 8020d98:	b289      	uxth	r1, r1
 8020d9a:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 8020d9e:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8020da2:	1ba4      	subs	r4, r4, r6
 8020da4:	9e01      	ldr	r6, [sp, #4]
 8020da6:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8020daa:	eba6 0608 	sub.w	r6, r6, r8
 8020dae:	b2a4      	uxth	r4, r4
 8020db0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8020db4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020db8:	b2b6      	uxth	r6, r6
 8020dba:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8020dbe:	4373      	muls	r3, r6
 8020dc0:	ea42 0e0e 	orr.w	lr, r2, lr
 8020dc4:	fb0c 3304 	mla	r3, ip, r4, r3
 8020dc8:	9c02      	ldr	r4, [sp, #8]
 8020dca:	fa1f f28e 	uxth.w	r2, lr
 8020dce:	fb04 3505 	mla	r5, r4, r5, r3
 8020dd2:	10d4      	asrs	r4, r2, #3
 8020dd4:	fb08 5707 	mla	r7, r8, r7, r5
 8020dd8:	1215      	asrs	r5, r2, #8
 8020dda:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8020dde:	00d2      	lsls	r2, r2, #3
 8020de0:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8020de4:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8020de8:	b2d2      	uxtb	r2, r2
 8020dea:	434f      	muls	r7, r1
 8020dec:	1c7b      	adds	r3, r7, #1
 8020dee:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8020df2:	1203      	asrs	r3, r0, #8
 8020df4:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8020df8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8020dfc:	b2ff      	uxtb	r7, r7
 8020dfe:	fb13 f307 	smulbb	r3, r3, r7
 8020e02:	fb05 3501 	mla	r5, r5, r1, r3
 8020e06:	10c3      	asrs	r3, r0, #3
 8020e08:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8020e0c:	b2ad      	uxth	r5, r5
 8020e0e:	fb13 f307 	smulbb	r3, r3, r7
 8020e12:	fb04 3401 	mla	r4, r4, r1, r3
 8020e16:	00c3      	lsls	r3, r0, #3
 8020e18:	b2db      	uxtb	r3, r3
 8020e1a:	b2a4      	uxth	r4, r4
 8020e1c:	fb13 f307 	smulbb	r3, r3, r7
 8020e20:	fb02 3101 	mla	r1, r2, r1, r3
 8020e24:	1c6b      	adds	r3, r5, #1
 8020e26:	1c62      	adds	r2, r4, #1
 8020e28:	b289      	uxth	r1, r1
 8020e2a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020e2e:	1c4b      	adds	r3, r1, #1
 8020e30:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8020e34:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8020e38:	9a03      	ldr	r2, [sp, #12]
 8020e3a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8020e3e:	0964      	lsrs	r4, r4, #5
 8020e40:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020e44:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8020e48:	432b      	orrs	r3, r5
 8020e4a:	4323      	orrs	r3, r4
 8020e4c:	8013      	strh	r3, [r2, #0]
 8020e4e:	b005      	add	sp, #20
 8020e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e54:	f04f 0c00 	mov.w	ip, #0
 8020e58:	4664      	mov	r4, ip
 8020e5a:	e6d6      	b.n	8020c0a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8020e5c:	2300      	movs	r3, #0
 8020e5e:	469c      	mov	ip, r3
 8020e60:	461a      	mov	r2, r3
 8020e62:	461c      	mov	r4, r3
 8020e64:	e6f8      	b.n	8020c58 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8020e66:	2300      	movs	r3, #0
 8020e68:	461a      	mov	r2, r3
 8020e6a:	e6f5      	b.n	8020c58 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8020e6c:	460b      	mov	r3, r1
 8020e6e:	460a      	mov	r2, r1
 8020e70:	e6f2      	b.n	8020c58 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8020e72:	2500      	movs	r5, #0
 8020e74:	46ab      	mov	fp, r5
 8020e76:	e720      	b.n	8020cba <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8020e78:	2700      	movs	r7, #0
 8020e7a:	463d      	mov	r5, r7
 8020e7c:	4638      	mov	r0, r7
 8020e7e:	46bb      	mov	fp, r7
 8020e80:	e745      	b.n	8020d0e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8020e82:	4677      	mov	r7, lr
 8020e84:	4675      	mov	r5, lr
 8020e86:	4670      	mov	r0, lr
 8020e88:	46f3      	mov	fp, lr
 8020e8a:	e740      	b.n	8020d0e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8020e8c:	2700      	movs	r7, #0
 8020e8e:	4638      	mov	r0, r7
 8020e90:	e73d      	b.n	8020d0e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8020e92:	460f      	mov	r7, r1
 8020e94:	4608      	mov	r0, r1
 8020e96:	e73a      	b.n	8020d0e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

08020e98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e9c:	b097      	sub	sp, #92	; 0x5c
 8020e9e:	9214      	str	r2, [sp, #80]	; 0x50
 8020ea0:	9308      	str	r3, [sp, #32]
 8020ea2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020ea4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8020ea8:	9015      	str	r0, [sp, #84]	; 0x54
 8020eaa:	9312      	str	r3, [sp, #72]	; 0x48
 8020eac:	6850      	ldr	r0, [r2, #4]
 8020eae:	9111      	str	r1, [sp, #68]	; 0x44
 8020eb0:	6812      	ldr	r2, [r2, #0]
 8020eb2:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8020eb6:	fb00 1303 	mla	r3, r0, r3, r1
 8020eba:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8020ec0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020ec2:	681b      	ldr	r3, [r3, #0]
 8020ec4:	930b      	str	r3, [sp, #44]	; 0x2c
 8020ec6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020ec8:	685b      	ldr	r3, [r3, #4]
 8020eca:	930c      	str	r3, [sp, #48]	; 0x30
 8020ecc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8020ed0:	930a      	str	r3, [sp, #40]	; 0x28
 8020ed2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020ed4:	2b00      	cmp	r3, #0
 8020ed6:	dc03      	bgt.n	8020ee0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020ed8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020eda:	2b00      	cmp	r3, #0
 8020edc:	f340 83cd 	ble.w	802167a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 8020ee0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020ee2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020ee6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020eea:	1e48      	subs	r0, r1, #1
 8020eec:	1e55      	subs	r5, r2, #1
 8020eee:	9b08      	ldr	r3, [sp, #32]
 8020ef0:	2b00      	cmp	r3, #0
 8020ef2:	f340 81a5 	ble.w	8021240 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8020ef6:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8020ef8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020efa:	1436      	asrs	r6, r6, #16
 8020efc:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020f00:	d406      	bmi.n	8020f10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020f02:	4286      	cmp	r6, r0
 8020f04:	da04      	bge.n	8020f10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020f06:	2b00      	cmp	r3, #0
 8020f08:	db02      	blt.n	8020f10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020f0a:	42ab      	cmp	r3, r5
 8020f0c:	f2c0 8199 	blt.w	8021242 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8020f10:	3601      	adds	r6, #1
 8020f12:	f100 8186 	bmi.w	8021222 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8020f16:	42b1      	cmp	r1, r6
 8020f18:	f2c0 8183 	blt.w	8021222 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8020f1c:	3301      	adds	r3, #1
 8020f1e:	f100 8180 	bmi.w	8021222 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8020f22:	429a      	cmp	r2, r3
 8020f24:	f2c0 817d 	blt.w	8021222 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8020f28:	9b08      	ldr	r3, [sp, #32]
 8020f2a:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8020f2e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020f30:	9313      	str	r3, [sp, #76]	; 0x4c
 8020f32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020f34:	2b00      	cmp	r3, #0
 8020f36:	f340 81a6 	ble.w	8021286 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8020f3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020f3c:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8020f3e:	1418      	asrs	r0, r3, #16
 8020f40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020f42:	142d      	asrs	r5, r5, #16
 8020f44:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8020f48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020f4a:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8020f4e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020f50:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8020f54:	f100 81fa 	bmi.w	802134c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8020f58:	f102 3eff 	add.w	lr, r2, #4294967295
 8020f5c:	4575      	cmp	r5, lr
 8020f5e:	f280 81f5 	bge.w	802134c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8020f62:	2800      	cmp	r0, #0
 8020f64:	f2c0 81f2 	blt.w	802134c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8020f68:	f103 3eff 	add.w	lr, r3, #4294967295
 8020f6c:	4570      	cmp	r0, lr
 8020f6e:	f280 81ed 	bge.w	802134c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8020f72:	b212      	sxth	r2, r2
 8020f74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020f76:	fa1f fe81 	uxth.w	lr, r1
 8020f7a:	fb00 5002 	mla	r0, r0, r2, r5
 8020f7e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8020f82:	eb03 0a00 	add.w	sl, r3, r0
 8020f86:	f813 9000 	ldrb.w	r9, [r3, r0]
 8020f8a:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8020f8e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8020f92:	b29b      	uxth	r3, r3
 8020f94:	f1bc 0f00 	cmp.w	ip, #0
 8020f98:	f000 81bb 	beq.w	8021312 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8020f9c:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8020fa0:	eb0a 0b02 	add.w	fp, sl, r2
 8020fa4:	fa1f fa8c 	uxth.w	sl, ip
 8020fa8:	940d      	str	r4, [sp, #52]	; 0x34
 8020faa:	fb0a fe0e 	mul.w	lr, sl, lr
 8020fae:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8020fb2:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8020fb6:	eba5 050e 	sub.w	r5, r5, lr
 8020fba:	940e      	str	r4, [sp, #56]	; 0x38
 8020fbc:	fa1f fa8a 	uxth.w	sl, sl
 8020fc0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020fc2:	b2ad      	uxth	r5, r5
 8020fc4:	eba3 030a 	sub.w	r3, r3, sl
 8020fc8:	fb08 f505 	mul.w	r5, r8, r5
 8020fcc:	b29b      	uxth	r3, r3
 8020fce:	fb09 5303 	mla	r3, r9, r3, r5
 8020fd2:	fb0a 3304 	mla	r3, sl, r4, r3
 8020fd6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020fd8:	fb0e 3304 	mla	r3, lr, r4, r3
 8020fdc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020fe0:	2b00      	cmp	r3, #0
 8020fe2:	f000 8111 	beq.w	8021208 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020fe6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020fe8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020fec:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8020ff0:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8020ff4:	f000 8192 	beq.w	802131c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8020ff8:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8020ffc:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8021000:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021004:	fb0a fe0e 	mul.w	lr, sl, lr
 8021008:	fb09 f000 	mul.w	r0, r9, r0
 802100c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8021010:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021014:	f100 0b20 	add.w	fp, r0, #32
 8021018:	44ce      	add	lr, r9
 802101a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 802101e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021022:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021026:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802102a:	ea4e 0909 	orr.w	r9, lr, r9
 802102e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021032:	8868      	ldrh	r0, [r5, #2]
 8021034:	d019      	beq.n	802106a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8021036:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802103a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802103e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021042:	fb0a fe0e 	mul.w	lr, sl, lr
 8021046:	fb08 f800 	mul.w	r8, r8, r0
 802104a:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 802104e:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021052:	f108 0b20 	add.w	fp, r8, #32
 8021056:	4486      	add	lr, r0
 8021058:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 802105c:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021060:	0a00      	lsrs	r0, r0, #8
 8021062:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021066:	ea4e 0000 	orr.w	r0, lr, r0
 802106a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802106e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021072:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8021076:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802107a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802107e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021082:	ea4e 0909 	orr.w	r9, lr, r9
 8021086:	ea4a 0000 	orr.w	r0, sl, r0
 802108a:	f1bc 0f00 	cmp.w	ip, #0
 802108e:	f000 8147 	beq.w	8021320 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8021092:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8021096:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021098:	3a01      	subs	r2, #1
 802109a:	2cff      	cmp	r4, #255	; 0xff
 802109c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80210a0:	f102 0202 	add.w	r2, r2, #2
 80210a4:	eb05 0e02 	add.w	lr, r5, r2
 80210a8:	5aaa      	ldrh	r2, [r5, r2]
 80210aa:	d018      	beq.n	80210de <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80210ac:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 80210b0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80210b4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80210b8:	fb04 fa02 	mul.w	sl, r4, r2
 80210bc:	fb08 f805 	mul.w	r8, r8, r5
 80210c0:	f10a 0520 	add.w	r5, sl, #32
 80210c4:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80210c8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80210cc:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80210d0:	4442      	add	r2, r8
 80210d2:	0a2d      	lsrs	r5, r5, #8
 80210d4:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80210d8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80210dc:	432a      	orrs	r2, r5
 80210de:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80210e0:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80210e4:	2cff      	cmp	r4, #255	; 0xff
 80210e6:	d01a      	beq.n	802111e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 80210e8:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 80210ec:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80210f0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80210f4:	fb04 fa05 	mul.w	sl, r4, r5
 80210f8:	fb08 f80e 	mul.w	r8, r8, lr
 80210fc:	f10a 0e20 	add.w	lr, sl, #32
 8021100:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8021104:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021108:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 802110c:	4445      	add	r5, r8
 802110e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021112:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8021116:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 802111a:	ea45 050e 	orr.w	r5, r5, lr
 802111e:	fb1c fe01 	smulbb	lr, ip, r1
 8021122:	f1cc 0810 	rsb	r8, ip, #16
 8021126:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802112a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802112e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8021132:	eba8 0801 	sub.w	r8, r8, r1
 8021136:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 802113a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802113e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8021142:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8021146:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802114a:	ea4a 0202 	orr.w	r2, sl, r2
 802114e:	4341      	muls	r1, r0
 8021150:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8021154:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021158:	fb09 1108 	mla	r1, r9, r8, r1
 802115c:	ea4b 0505 	orr.w	r5, fp, r5
 8021160:	fb0c 1102 	mla	r1, ip, r2, r1
 8021164:	fb0e 1e05 	mla	lr, lr, r5, r1
 8021168:	ea4f 525e 	mov.w	r2, lr, lsr #21
 802116c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8021170:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021174:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021178:	ea42 0e0e 	orr.w	lr, r2, lr
 802117c:	fa1f f28e 	uxth.w	r2, lr
 8021180:	2bff      	cmp	r3, #255	; 0xff
 8021182:	d103      	bne.n	802118c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8021184:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021186:	29ff      	cmp	r1, #255	; 0xff
 8021188:	f000 80de 	beq.w	8021348 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802118c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802118e:	1215      	asrs	r5, r2, #8
 8021190:	8838      	ldrh	r0, [r7, #0]
 8021192:	434b      	muls	r3, r1
 8021194:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021198:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802119a:	f103 0c01 	add.w	ip, r3, #1
 802119e:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 80211a2:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80211a6:	fa5f fc83 	uxtb.w	ip, r3
 80211aa:	1203      	asrs	r3, r0, #8
 80211ac:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80211b0:	fb13 f30c 	smulbb	r3, r3, ip
 80211b4:	fb05 3501 	mla	r5, r5, r1, r3
 80211b8:	10c3      	asrs	r3, r0, #3
 80211ba:	10d1      	asrs	r1, r2, #3
 80211bc:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80211c0:	00d2      	lsls	r2, r2, #3
 80211c2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80211c6:	b2ad      	uxth	r5, r5
 80211c8:	fb13 f30c 	smulbb	r3, r3, ip
 80211cc:	b2d2      	uxtb	r2, r2
 80211ce:	fb01 3104 	mla	r1, r1, r4, r3
 80211d2:	00c3      	lsls	r3, r0, #3
 80211d4:	b2db      	uxtb	r3, r3
 80211d6:	b289      	uxth	r1, r1
 80211d8:	fb13 f30c 	smulbb	r3, r3, ip
 80211dc:	fb02 3304 	mla	r3, r2, r4, r3
 80211e0:	b29a      	uxth	r2, r3
 80211e2:	1c6b      	adds	r3, r5, #1
 80211e4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80211e8:	1c53      	adds	r3, r2, #1
 80211ea:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80211ee:	1c4a      	adds	r2, r1, #1
 80211f0:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80211f4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80211f8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80211fc:	0949      	lsrs	r1, r1, #5
 80211fe:	432b      	orrs	r3, r5
 8021200:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021204:	430b      	orrs	r3, r1
 8021206:	803b      	strh	r3, [r7, #0]
 8021208:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802120a:	3702      	adds	r7, #2
 802120c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 802120e:	4413      	add	r3, r2
 8021210:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8021212:	9321      	str	r3, [sp, #132]	; 0x84
 8021214:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021216:	441a      	add	r2, r3
 8021218:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802121a:	3b01      	subs	r3, #1
 802121c:	9222      	str	r2, [sp, #136]	; 0x88
 802121e:	9313      	str	r3, [sp, #76]	; 0x4c
 8021220:	e687      	b.n	8020f32 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8021222:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021224:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8021226:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8021228:	4433      	add	r3, r6
 802122a:	9321      	str	r3, [sp, #132]	; 0x84
 802122c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802122e:	441c      	add	r4, r3
 8021230:	9b08      	ldr	r3, [sp, #32]
 8021232:	3b01      	subs	r3, #1
 8021234:	9422      	str	r4, [sp, #136]	; 0x88
 8021236:	9308      	str	r3, [sp, #32]
 8021238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802123a:	3302      	adds	r3, #2
 802123c:	9309      	str	r3, [sp, #36]	; 0x24
 802123e:	e656      	b.n	8020eee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8021240:	d028      	beq.n	8021294 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8021242:	9b08      	ldr	r3, [sp, #32]
 8021244:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8021246:	3b01      	subs	r3, #1
 8021248:	9d21      	ldr	r5, [sp, #132]	; 0x84
 802124a:	fb00 5003 	mla	r0, r0, r3, r5
 802124e:	1400      	asrs	r0, r0, #16
 8021250:	f53f ae6a 	bmi.w	8020f28 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021254:	3901      	subs	r1, #1
 8021256:	4288      	cmp	r0, r1
 8021258:	f6bf ae66 	bge.w	8020f28 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802125c:	9924      	ldr	r1, [sp, #144]	; 0x90
 802125e:	9822      	ldr	r0, [sp, #136]	; 0x88
 8021260:	fb01 0303 	mla	r3, r1, r3, r0
 8021264:	141b      	asrs	r3, r3, #16
 8021266:	f53f ae5f 	bmi.w	8020f28 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802126a:	3a01      	subs	r2, #1
 802126c:	4293      	cmp	r3, r2
 802126e:	f6bf ae5b 	bge.w	8020f28 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021272:	9b08      	ldr	r3, [sp, #32]
 8021274:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8021278:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 802127c:	9313      	str	r3, [sp, #76]	; 0x4c
 802127e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021280:	2b00      	cmp	r3, #0
 8021282:	f300 8082 	bgt.w	802138a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 8021286:	9b08      	ldr	r3, [sp, #32]
 8021288:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802128c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802128e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8021292:	9309      	str	r3, [sp, #36]	; 0x24
 8021294:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021296:	2b00      	cmp	r3, #0
 8021298:	f340 81ef 	ble.w	802167a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 802129c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80212a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80212a2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80212a6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80212aa:	eef0 6a62 	vmov.f32	s13, s5
 80212ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80212b2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80212b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80212ba:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 80212be:	eef0 6a43 	vmov.f32	s13, s6
 80212c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80212c6:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 80212ca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80212ce:	ee61 7a27 	vmul.f32	s15, s2, s15
 80212d2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80212d6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80212da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80212de:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80212e2:	ee12 2a90 	vmov	r2, s5
 80212e6:	eef0 2a47 	vmov.f32	s5, s14
 80212ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80212ee:	ee13 2a10 	vmov	r2, s6
 80212f2:	9323      	str	r3, [sp, #140]	; 0x8c
 80212f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80212f6:	eeb0 3a67 	vmov.f32	s6, s15
 80212fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80212fe:	9324      	str	r3, [sp, #144]	; 0x90
 8021300:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021302:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021304:	3b01      	subs	r3, #1
 8021306:	9311      	str	r3, [sp, #68]	; 0x44
 8021308:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802130a:	bf08      	it	eq
 802130c:	4613      	moveq	r3, r2
 802130e:	9308      	str	r3, [sp, #32]
 8021310:	e5df      	b.n	8020ed2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021312:	fb08 f505 	mul.w	r5, r8, r5
 8021316:	fb09 5303 	mla	r3, r9, r3, r5
 802131a:	e65f      	b.n	8020fdc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 802131c:	4681      	mov	r9, r0
 802131e:	e686      	b.n	802102e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8021320:	f1c1 0210 	rsb	r2, r1, #16
 8021324:	4341      	muls	r1, r0
 8021326:	fb09 1902 	mla	r9, r9, r2, r1
 802132a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802132e:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8021332:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8021336:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802133a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802133e:	ea42 0909 	orr.w	r9, r2, r9
 8021342:	fa1f f289 	uxth.w	r2, r9
 8021346:	e71b      	b.n	8021180 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8021348:	803a      	strh	r2, [r7, #0]
 802134a:	e75d      	b.n	8021208 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802134c:	f115 0e01 	adds.w	lr, r5, #1
 8021350:	f53f af5a 	bmi.w	8021208 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021354:	4572      	cmp	r2, lr
 8021356:	f6ff af57 	blt.w	8021208 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802135a:	f110 0e01 	adds.w	lr, r0, #1
 802135e:	f53f af53 	bmi.w	8021208 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021362:	4573      	cmp	r3, lr
 8021364:	f6ff af50 	blt.w	8021208 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021368:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802136a:	b21b      	sxth	r3, r3
 802136c:	b212      	sxth	r2, r2
 802136e:	9502      	str	r5, [sp, #8]
 8021370:	9301      	str	r3, [sp, #4]
 8021372:	9200      	str	r2, [sp, #0]
 8021374:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8021378:	e9cd c405 	strd	ip, r4, [sp, #20]
 802137c:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8021380:	4639      	mov	r1, r7
 8021382:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021384:	f7ff fc02 	bl	8020b8c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8021388:	e73e      	b.n	8021208 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802138a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802138c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021390:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021392:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8021396:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021398:	fa1f fc82 	uxth.w	ip, r2
 802139c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80213a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80213a2:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80213a6:	141f      	asrs	r7, r3, #16
 80213a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80213aa:	141b      	asrs	r3, r3, #16
 80213ac:	fb01 3707 	mla	r7, r1, r7, r3
 80213b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80213b2:	eb03 0a07 	add.w	sl, r3, r7
 80213b6:	f813 9007 	ldrb.w	r9, [r3, r7]
 80213ba:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80213be:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80213c2:	b29b      	uxth	r3, r3
 80213c4:	2d00      	cmp	r5, #0
 80213c6:	f000 813d 	beq.w	8021644 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
 80213ca:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80213ce:	eb0a 0b01 	add.w	fp, sl, r1
 80213d2:	fa1f fa85 	uxth.w	sl, r5
 80213d6:	940f      	str	r4, [sp, #60]	; 0x3c
 80213d8:	fb0a fc0c 	mul.w	ip, sl, ip
 80213dc:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80213e0:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80213e4:	eba0 000c 	sub.w	r0, r0, ip
 80213e8:	9410      	str	r4, [sp, #64]	; 0x40
 80213ea:	fa1f fa8a 	uxth.w	sl, sl
 80213ee:	b280      	uxth	r0, r0
 80213f0:	eba3 030a 	sub.w	r3, r3, sl
 80213f4:	fb08 f000 	mul.w	r0, r8, r0
 80213f8:	b29b      	uxth	r3, r3
 80213fa:	fb09 0303 	mla	r3, r9, r3, r0
 80213fe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8021400:	fb0a 3300 	mla	r3, sl, r0, r3
 8021404:	fb0c 3304 	mla	r3, ip, r4, r3
 8021408:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802140c:	2b00      	cmp	r3, #0
 802140e:	f000 810b 	beq.w	8021628 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 8021412:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8021414:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021418:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802141a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802141e:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8021422:	f000 8114 	beq.w	802164e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 8021426:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802142a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802142e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021432:	fb0a fc0c 	mul.w	ip, sl, ip
 8021436:	fb09 f707 	mul.w	r7, r9, r7
 802143a:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802143e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8021442:	f107 0b20 	add.w	fp, r7, #32
 8021446:	44cc      	add	ip, r9
 8021448:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 802144c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8021450:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021454:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021458:	ea4c 0909 	orr.w	r9, ip, r9
 802145c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021460:	8847      	ldrh	r7, [r0, #2]
 8021462:	d019      	beq.n	8021498 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 8021464:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8021468:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802146c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021470:	fb0a fc0c 	mul.w	ip, sl, ip
 8021474:	fb08 f807 	mul.w	r8, r8, r7
 8021478:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 802147c:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8021480:	f108 0b20 	add.w	fp, r8, #32
 8021484:	44bc      	add	ip, r7
 8021486:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 802148a:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802148e:	0a3f      	lsrs	r7, r7, #8
 8021490:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021494:	ea4c 0707 	orr.w	r7, ip, r7
 8021498:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 802149c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80214a0:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80214a4:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80214a8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80214ac:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80214b0:	ea4c 0909 	orr.w	r9, ip, r9
 80214b4:	ea4a 0707 	orr.w	r7, sl, r7
 80214b8:	2d00      	cmp	r5, #0
 80214ba:	f000 80ca 	beq.w	8021652 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
 80214be:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80214c2:	3901      	subs	r1, #1
 80214c4:	0049      	lsls	r1, r1, #1
 80214c6:	3102      	adds	r1, #2
 80214c8:	eb00 0c01 	add.w	ip, r0, r1
 80214cc:	5a41      	ldrh	r1, [r0, r1]
 80214ce:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80214d0:	28ff      	cmp	r0, #255	; 0xff
 80214d2:	d019      	beq.n	8021508 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 80214d4:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 80214d8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80214da:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80214de:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80214e2:	fb04 fa01 	mul.w	sl, r4, r1
 80214e6:	fb08 f800 	mul.w	r8, r8, r0
 80214ea:	f10a 0020 	add.w	r0, sl, #32
 80214ee:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80214f2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80214f6:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80214fa:	4441      	add	r1, r8
 80214fc:	0a00      	lsrs	r0, r0, #8
 80214fe:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8021502:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021506:	4301      	orrs	r1, r0
 8021508:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802150a:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 802150e:	2cff      	cmp	r4, #255	; 0xff
 8021510:	d01a      	beq.n	8021548 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 8021512:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8021516:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802151a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802151e:	fb04 fa00 	mul.w	sl, r4, r0
 8021522:	fb08 f80c 	mul.w	r8, r8, ip
 8021526:	f10a 0c20 	add.w	ip, sl, #32
 802152a:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 802152e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021532:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8021536:	4440      	add	r0, r8
 8021538:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802153c:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8021540:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8021544:	ea40 000c 	orr.w	r0, r0, ip
 8021548:	fb15 fc02 	smulbb	ip, r5, r2
 802154c:	f1c5 0810 	rsb	r8, r5, #16
 8021550:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8021554:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8021558:	ea4f 0cec 	mov.w	ip, ip, asr #3
 802155c:	eba8 0802 	sub.w	r8, r8, r2
 8021560:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8021564:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021568:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 802156c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021570:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8021574:	ea4a 0101 	orr.w	r1, sl, r1
 8021578:	437a      	muls	r2, r7
 802157a:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 802157e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021582:	fb09 2208 	mla	r2, r9, r8, r2
 8021586:	ea4b 0000 	orr.w	r0, fp, r0
 802158a:	fb05 2201 	mla	r2, r5, r1, r2
 802158e:	fb0c 2200 	mla	r2, ip, r0, r2
 8021592:	0d57      	lsrs	r7, r2, #21
 8021594:	0952      	lsrs	r2, r2, #5
 8021596:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802159a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802159e:	433a      	orrs	r2, r7
 80215a0:	2bff      	cmp	r3, #255	; 0xff
 80215a2:	b292      	uxth	r2, r2
 80215a4:	d102      	bne.n	80215ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 80215a6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80215a8:	29ff      	cmp	r1, #255	; 0xff
 80215aa:	d063      	beq.n	8021674 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
 80215ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 80215ae:	1215      	asrs	r5, r2, #8
 80215b0:	f8be 1000 	ldrh.w	r1, [lr]
 80215b4:	4343      	muls	r3, r0
 80215b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80215b8:	10cf      	asrs	r7, r1, #3
 80215ba:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80215be:	1c58      	adds	r0, r3, #1
 80215c0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80215c4:	eb00 2323 	add.w	r3, r0, r3, asr #8
 80215c8:	1208      	asrs	r0, r1, #8
 80215ca:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80215ce:	00c9      	lsls	r1, r1, #3
 80215d0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80215d4:	b2db      	uxtb	r3, r3
 80215d6:	b2c9      	uxtb	r1, r1
 80215d8:	fb10 f003 	smulbb	r0, r0, r3
 80215dc:	fb11 f103 	smulbb	r1, r1, r3
 80215e0:	fb05 0504 	mla	r5, r5, r4, r0
 80215e4:	10d0      	asrs	r0, r2, #3
 80215e6:	fb17 f703 	smulbb	r7, r7, r3
 80215ea:	00d2      	lsls	r2, r2, #3
 80215ec:	b2ad      	uxth	r5, r5
 80215ee:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80215f2:	b2d2      	uxtb	r2, r2
 80215f4:	fb00 7004 	mla	r0, r0, r4, r7
 80215f8:	1c6b      	adds	r3, r5, #1
 80215fa:	fb02 1204 	mla	r2, r2, r4, r1
 80215fe:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021602:	b292      	uxth	r2, r2
 8021604:	b280      	uxth	r0, r0
 8021606:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802160a:	1c57      	adds	r7, r2, #1
 802160c:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8021610:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8021614:	433d      	orrs	r5, r7
 8021616:	1c47      	adds	r7, r0, #1
 8021618:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 802161c:	097f      	lsrs	r7, r7, #5
 802161e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021622:	433d      	orrs	r5, r7
 8021624:	f8ae 5000 	strh.w	r5, [lr]
 8021628:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802162a:	f10e 0e02 	add.w	lr, lr, #2
 802162e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8021630:	4413      	add	r3, r2
 8021632:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8021634:	9321      	str	r3, [sp, #132]	; 0x84
 8021636:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021638:	441a      	add	r2, r3
 802163a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802163c:	3b01      	subs	r3, #1
 802163e:	9222      	str	r2, [sp, #136]	; 0x88
 8021640:	9313      	str	r3, [sp, #76]	; 0x4c
 8021642:	e61c      	b.n	802127e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8021644:	fb08 f000 	mul.w	r0, r8, r0
 8021648:	fb09 0303 	mla	r3, r9, r3, r0
 802164c:	e6dc      	b.n	8021408 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 802164e:	46b9      	mov	r9, r7
 8021650:	e704      	b.n	802145c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 8021652:	f1c2 0110 	rsb	r1, r2, #16
 8021656:	437a      	muls	r2, r7
 8021658:	fb09 2901 	mla	r9, r9, r1, r2
 802165c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8021660:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8021664:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8021668:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802166c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021670:	4302      	orrs	r2, r0
 8021672:	e795      	b.n	80215a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 8021674:	f8ae 2000 	strh.w	r2, [lr]
 8021678:	e7d6      	b.n	8021628 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 802167a:	b017      	add	sp, #92	; 0x5c
 802167c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021680 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8021680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021684:	b085      	sub	sp, #20
 8021686:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 802168a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 802168e:	2800      	cmp	r0, #0
 8021690:	9103      	str	r1, [sp, #12]
 8021692:	fb00 7406 	mla	r4, r0, r6, r7
 8021696:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 802169a:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 802169e:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 80216a2:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80216a6:	eb02 0904 	add.w	r9, r2, r4
 80216aa:	9501      	str	r5, [sp, #4]
 80216ac:	f2c0 8141 	blt.w	8021932 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 80216b0:	4583      	cmp	fp, r0
 80216b2:	f340 813e 	ble.w	8021932 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 80216b6:	2f00      	cmp	r7, #0
 80216b8:	f2c0 8137 	blt.w	802192a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 80216bc:	42be      	cmp	r6, r7
 80216be:	f340 8134 	ble.w	802192a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 80216c2:	f812 c004 	ldrb.w	ip, [r2, r4]
 80216c6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80216ca:	f64f 041f 	movw	r4, #63519	; 0xf81f
 80216ce:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80216d2:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 80216d6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80216da:	4355      	muls	r5, r2
 80216dc:	fb0c f203 	mul.w	r2, ip, r3
 80216e0:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 80216e4:	f605 0501 	addw	r5, r5, #2049	; 0x801
 80216e8:	441d      	add	r5, r3
 80216ea:	f102 0320 	add.w	r3, r2, #32
 80216ee:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80216f2:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 80216f6:	0a1b      	lsrs	r3, r3, #8
 80216f8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80216fc:	431c      	orrs	r4, r3
 80216fe:	1c7b      	adds	r3, r7, #1
 8021700:	f100 811c 	bmi.w	802193c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8021704:	429e      	cmp	r6, r3
 8021706:	f340 8119 	ble.w	802193c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 802170a:	2900      	cmp	r1, #0
 802170c:	f000 8119 	beq.w	8021942 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 8021710:	9a01      	ldr	r2, [sp, #4]
 8021712:	f899 3001 	ldrb.w	r3, [r9, #1]
 8021716:	8855      	ldrh	r5, [r2, #2]
 8021718:	ea4f 08e3 	mov.w	r8, r3, asr #3
 802171c:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8021720:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021724:	fb08 f802 	mul.w	r8, r8, r2
 8021728:	f64f 021f 	movw	r2, #63519	; 0xf81f
 802172c:	435d      	muls	r5, r3
 802172e:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8021732:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021736:	44d0      	add	r8, sl
 8021738:	f105 0a20 	add.w	sl, r5, #32
 802173c:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8021740:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8021744:	0a2d      	lsrs	r5, r5, #8
 8021746:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802174a:	432a      	orrs	r2, r5
 802174c:	3001      	adds	r0, #1
 802174e:	f100 80fe 	bmi.w	802194e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8021752:	4583      	cmp	fp, r0
 8021754:	f340 80fb 	ble.w	802194e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8021758:	f1be 0f00 	cmp.w	lr, #0
 802175c:	f000 80fc 	beq.w	8021958 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8021760:	2f00      	cmp	r7, #0
 8021762:	f2c0 80f1 	blt.w	8021948 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8021766:	42be      	cmp	r6, r7
 8021768:	f340 80ee 	ble.w	8021948 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 802176c:	9801      	ldr	r0, [sp, #4]
 802176e:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8021772:	f819 5006 	ldrb.w	r5, [r9, r6]
 8021776:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 802177a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802177e:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8021782:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8021786:	fb0a fa00 	mul.w	sl, sl, r0
 802178a:	fb05 f808 	mul.w	r8, r5, r8
 802178e:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8021792:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8021796:	4482      	add	sl, r0
 8021798:	f108 0020 	add.w	r0, r8, #32
 802179c:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80217a0:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 80217a4:	0a00      	lsrs	r0, r0, #8
 80217a6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80217aa:	ea4b 0b00 	orr.w	fp, fp, r0
 80217ae:	3701      	adds	r7, #1
 80217b0:	f100 80d7 	bmi.w	8021962 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 80217b4:	42be      	cmp	r6, r7
 80217b6:	f340 80d4 	ble.w	8021962 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 80217ba:	2900      	cmp	r1, #0
 80217bc:	f000 80d4 	beq.w	8021968 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 80217c0:	3601      	adds	r6, #1
 80217c2:	9801      	ldr	r0, [sp, #4]
 80217c4:	f819 7006 	ldrb.w	r7, [r9, r6]
 80217c8:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 80217cc:	ea4f 09e7 	mov.w	r9, r7, asr #3
 80217d0:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 80217d4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80217d8:	fb09 f906 	mul.w	r9, r9, r6
 80217dc:	fb07 f800 	mul.w	r8, r7, r0
 80217e0:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80217e4:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 80217e8:	f609 0901 	addw	r9, r9, #2049	; 0x801
 80217ec:	44d1      	add	r9, sl
 80217ee:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 80217f2:	f108 0020 	add.w	r0, r8, #32
 80217f6:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80217fa:	0a00      	lsrs	r0, r0, #8
 80217fc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021800:	4330      	orrs	r0, r6
 8021802:	b28e      	uxth	r6, r1
 8021804:	fa1f f98e 	uxth.w	r9, lr
 8021808:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 802180c:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8021810:	fb06 f809 	mul.w	r8, r6, r9
 8021814:	0136      	lsls	r6, r6, #4
 8021816:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802181a:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 802181e:	9601      	str	r6, [sp, #4]
 8021820:	ea4a 0404 	orr.w	r4, sl, r4
 8021824:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8021828:	fa1f f689 	uxth.w	r6, r9
 802182c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021830:	fb11 f90e 	smulbb	r9, r1, lr
 8021834:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021838:	9602      	str	r6, [sp, #8]
 802183a:	4626      	mov	r6, r4
 802183c:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8021840:	f1ce 0410 	rsb	r4, lr, #16
 8021844:	ea4a 0202 	orr.w	r2, sl, r2
 8021848:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802184c:	1a64      	subs	r4, r4, r1
 802184e:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8021852:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021856:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802185a:	434a      	muls	r2, r1
 802185c:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8021860:	ea4a 0000 	orr.w	r0, sl, r0
 8021864:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8021868:	fb04 2406 	mla	r4, r4, r6, r2
 802186c:	9903      	ldr	r1, [sp, #12]
 802186e:	fb09 4200 	mla	r2, r9, r0, r4
 8021872:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8021876:	9801      	ldr	r0, [sp, #4]
 8021878:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 802187c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8021880:	8809      	ldrh	r1, [r1, #0]
 8021882:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8021886:	ea44 0b0b 	orr.w	fp, r4, fp
 802188a:	9c02      	ldr	r4, [sp, #8]
 802188c:	1b00      	subs	r0, r0, r4
 802188e:	9c01      	ldr	r4, [sp, #4]
 8021890:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8021894:	eba4 0608 	sub.w	r6, r4, r8
 8021898:	b280      	uxth	r0, r0
 802189a:	ea4f 525e 	mov.w	r2, lr, lsr #21
 802189e:	b2b6      	uxth	r6, r6
 80218a0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80218a4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80218a8:	4373      	muls	r3, r6
 80218aa:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80218ae:	fb0c 3300 	mla	r3, ip, r0, r3
 80218b2:	9802      	ldr	r0, [sp, #8]
 80218b4:	ea42 0e0e 	orr.w	lr, r2, lr
 80218b8:	fb00 3505 	mla	r5, r0, r5, r3
 80218bc:	120b      	asrs	r3, r1, #8
 80218be:	10c8      	asrs	r0, r1, #3
 80218c0:	fb08 5707 	mla	r7, r8, r7, r5
 80218c4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80218c8:	00c9      	lsls	r1, r1, #3
 80218ca:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80218ce:	ea6f 2727 	mvn.w	r7, r7, asr #8
 80218d2:	fa1f f28e 	uxth.w	r2, lr
 80218d6:	b2c9      	uxtb	r1, r1
 80218d8:	b2ff      	uxtb	r7, r7
 80218da:	437b      	muls	r3, r7
 80218dc:	4378      	muls	r0, r7
 80218de:	434f      	muls	r7, r1
 80218e0:	1c59      	adds	r1, r3, #1
 80218e2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80218e6:	1213      	asrs	r3, r2, #8
 80218e8:	f023 0307 	bic.w	r3, r3, #7
 80218ec:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80218f0:	1c41      	adds	r1, r0, #1
 80218f2:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80218f6:	10d1      	asrs	r1, r2, #3
 80218f8:	021b      	lsls	r3, r3, #8
 80218fa:	f021 0103 	bic.w	r1, r1, #3
 80218fe:	00d2      	lsls	r2, r2, #3
 8021900:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8021904:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8021908:	00c9      	lsls	r1, r1, #3
 802190a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802190e:	430b      	orrs	r3, r1
 8021910:	1c79      	adds	r1, r7, #1
 8021912:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8021916:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 802191a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802191e:	431a      	orrs	r2, r3
 8021920:	9b03      	ldr	r3, [sp, #12]
 8021922:	801a      	strh	r2, [r3, #0]
 8021924:	b005      	add	sp, #20
 8021926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802192a:	f04f 0c00 	mov.w	ip, #0
 802192e:	4664      	mov	r4, ip
 8021930:	e6e5      	b.n	80216fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 8021932:	2300      	movs	r3, #0
 8021934:	469c      	mov	ip, r3
 8021936:	461a      	mov	r2, r3
 8021938:	461c      	mov	r4, r3
 802193a:	e707      	b.n	802174c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 802193c:	2300      	movs	r3, #0
 802193e:	461a      	mov	r2, r3
 8021940:	e704      	b.n	802174c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8021942:	460b      	mov	r3, r1
 8021944:	460a      	mov	r2, r1
 8021946:	e701      	b.n	802174c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8021948:	2500      	movs	r5, #0
 802194a:	46ab      	mov	fp, r5
 802194c:	e72f      	b.n	80217ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 802194e:	2700      	movs	r7, #0
 8021950:	463d      	mov	r5, r7
 8021952:	4638      	mov	r0, r7
 8021954:	46bb      	mov	fp, r7
 8021956:	e754      	b.n	8021802 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8021958:	4677      	mov	r7, lr
 802195a:	4675      	mov	r5, lr
 802195c:	4670      	mov	r0, lr
 802195e:	46f3      	mov	fp, lr
 8021960:	e74f      	b.n	8021802 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8021962:	2700      	movs	r7, #0
 8021964:	4638      	mov	r0, r7
 8021966:	e74c      	b.n	8021802 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8021968:	460f      	mov	r7, r1
 802196a:	4608      	mov	r0, r1
 802196c:	e749      	b.n	8021802 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

08021970 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021974:	b093      	sub	sp, #76	; 0x4c
 8021976:	9210      	str	r2, [sp, #64]	; 0x40
 8021978:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802197a:	9011      	str	r0, [sp, #68]	; 0x44
 802197c:	910e      	str	r1, [sp, #56]	; 0x38
 802197e:	6850      	ldr	r0, [r2, #4]
 8021980:	9306      	str	r3, [sp, #24]
 8021982:	6812      	ldr	r2, [r2, #0]
 8021984:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8021988:	fb00 1303 	mla	r3, r0, r3, r1
 802198c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021990:	9307      	str	r3, [sp, #28]
 8021992:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021994:	681b      	ldr	r3, [r3, #0]
 8021996:	9308      	str	r3, [sp, #32]
 8021998:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802199a:	685b      	ldr	r3, [r3, #4]
 802199c:	9309      	str	r3, [sp, #36]	; 0x24
 802199e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80219a0:	2b00      	cmp	r3, #0
 80219a2:	dc03      	bgt.n	80219ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80219a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80219a6:	2b00      	cmp	r3, #0
 80219a8:	f340 83b6 	ble.w	8022118 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 80219ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80219ae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80219b2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80219b6:	1e48      	subs	r0, r1, #1
 80219b8:	1e55      	subs	r5, r2, #1
 80219ba:	9b06      	ldr	r3, [sp, #24]
 80219bc:	2b00      	cmp	r3, #0
 80219be:	f340 8165 	ble.w	8021c8c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80219c2:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80219c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80219c6:	1436      	asrs	r6, r6, #16
 80219c8:	ea4f 4323 	mov.w	r3, r3, asr #16
 80219cc:	d406      	bmi.n	80219dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80219ce:	4286      	cmp	r6, r0
 80219d0:	da04      	bge.n	80219dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80219d2:	2b00      	cmp	r3, #0
 80219d4:	db02      	blt.n	80219dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80219d6:	42ab      	cmp	r3, r5
 80219d8:	f2c0 8159 	blt.w	8021c8e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80219dc:	3601      	adds	r6, #1
 80219de:	f100 8146 	bmi.w	8021c6e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80219e2:	42b1      	cmp	r1, r6
 80219e4:	f2c0 8143 	blt.w	8021c6e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80219e8:	3301      	adds	r3, #1
 80219ea:	f100 8140 	bmi.w	8021c6e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80219ee:	429a      	cmp	r2, r3
 80219f0:	f2c0 813d 	blt.w	8021c6e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80219f4:	9b06      	ldr	r3, [sp, #24]
 80219f6:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80219fa:	9f07      	ldr	r7, [sp, #28]
 80219fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80219fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021a00:	2b00      	cmp	r3, #0
 8021a02:	f340 8166 	ble.w	8021cd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8021a06:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021a08:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8021a0a:	1418      	asrs	r0, r3, #16
 8021a0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021a0e:	142d      	asrs	r5, r5, #16
 8021a10:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8021a14:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021a16:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8021a1a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021a1c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8021a20:	f100 81f0 	bmi.w	8021e04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8021a24:	f102 3eff 	add.w	lr, r2, #4294967295
 8021a28:	4575      	cmp	r5, lr
 8021a2a:	f280 81eb 	bge.w	8021e04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8021a2e:	2800      	cmp	r0, #0
 8021a30:	f2c0 81e8 	blt.w	8021e04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8021a34:	f103 3eff 	add.w	lr, r3, #4294967295
 8021a38:	4570      	cmp	r0, lr
 8021a3a:	f280 81e3 	bge.w	8021e04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8021a3e:	b212      	sxth	r2, r2
 8021a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021a42:	fa1f fe81 	uxth.w	lr, r1
 8021a46:	fb00 5002 	mla	r0, r0, r2, r5
 8021a4a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8021a4e:	eb03 0a00 	add.w	sl, r3, r0
 8021a52:	f813 9000 	ldrb.w	r9, [r3, r0]
 8021a56:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8021a5a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8021a5e:	b29b      	uxth	r3, r3
 8021a60:	f1bc 0f00 	cmp.w	ip, #0
 8021a64:	f000 817b 	beq.w	8021d5e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8021a68:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8021a6c:	eb0a 0b02 	add.w	fp, sl, r2
 8021a70:	fa1f fa8c 	uxth.w	sl, ip
 8021a74:	940a      	str	r4, [sp, #40]	; 0x28
 8021a76:	fb0a fe0e 	mul.w	lr, sl, lr
 8021a7a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8021a7e:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8021a82:	eba5 050e 	sub.w	r5, r5, lr
 8021a86:	940b      	str	r4, [sp, #44]	; 0x2c
 8021a88:	fa1f fa8a 	uxth.w	sl, sl
 8021a8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021a8e:	b2ad      	uxth	r5, r5
 8021a90:	eba3 030a 	sub.w	r3, r3, sl
 8021a94:	fb08 f505 	mul.w	r5, r8, r5
 8021a98:	b29b      	uxth	r3, r3
 8021a9a:	fb09 5303 	mla	r3, r9, r3, r5
 8021a9e:	fb0a 3304 	mla	r3, sl, r4, r3
 8021aa2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021aa4:	fb0e 3304 	mla	r3, lr, r4, r3
 8021aa8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021aac:	2b00      	cmp	r3, #0
 8021aae:	f000 80d1 	beq.w	8021c54 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8021ab2:	9c08      	ldr	r4, [sp, #32]
 8021ab4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021ab8:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8021abc:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8021ac0:	f000 8152 	beq.w	8021d68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8021ac4:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8021ac8:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8021acc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021ad0:	fb0a fe0e 	mul.w	lr, sl, lr
 8021ad4:	fb09 f000 	mul.w	r0, r9, r0
 8021ad8:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8021adc:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021ae0:	f100 0b20 	add.w	fp, r0, #32
 8021ae4:	44ce      	add	lr, r9
 8021ae6:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8021aea:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021aee:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021af2:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021af6:	ea4e 0909 	orr.w	r9, lr, r9
 8021afa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021afe:	8868      	ldrh	r0, [r5, #2]
 8021b00:	d019      	beq.n	8021b36 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8021b02:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8021b06:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8021b0a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021b0e:	fb0a fe0e 	mul.w	lr, sl, lr
 8021b12:	fb08 f800 	mul.w	r8, r8, r0
 8021b16:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8021b1a:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021b1e:	f108 0b20 	add.w	fp, r8, #32
 8021b22:	4486      	add	lr, r0
 8021b24:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8021b28:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021b2c:	0a00      	lsrs	r0, r0, #8
 8021b2e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021b32:	ea4e 0000 	orr.w	r0, lr, r0
 8021b36:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8021b3a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021b3e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8021b42:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021b46:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8021b4a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021b4e:	ea4e 0909 	orr.w	r9, lr, r9
 8021b52:	ea4a 0000 	orr.w	r0, sl, r0
 8021b56:	f1bc 0f00 	cmp.w	ip, #0
 8021b5a:	f000 8107 	beq.w	8021d6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8021b5e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8021b62:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021b64:	3a01      	subs	r2, #1
 8021b66:	2cff      	cmp	r4, #255	; 0xff
 8021b68:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8021b6c:	f102 0202 	add.w	r2, r2, #2
 8021b70:	eb05 0e02 	add.w	lr, r5, r2
 8021b74:	5aaa      	ldrh	r2, [r5, r2]
 8021b76:	d018      	beq.n	8021baa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8021b78:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8021b7c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021b80:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021b84:	fb04 fa02 	mul.w	sl, r4, r2
 8021b88:	fb08 f805 	mul.w	r8, r8, r5
 8021b8c:	f10a 0520 	add.w	r5, sl, #32
 8021b90:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8021b94:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021b98:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8021b9c:	4442      	add	r2, r8
 8021b9e:	0a2d      	lsrs	r5, r5, #8
 8021ba0:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8021ba4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021ba8:	432a      	orrs	r2, r5
 8021baa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021bac:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8021bb0:	2cff      	cmp	r4, #255	; 0xff
 8021bb2:	d01a      	beq.n	8021bea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8021bb4:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8021bb8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021bbc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021bc0:	fb04 fa05 	mul.w	sl, r4, r5
 8021bc4:	fb08 f80e 	mul.w	r8, r8, lr
 8021bc8:	f10a 0e20 	add.w	lr, sl, #32
 8021bcc:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8021bd0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021bd4:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8021bd8:	4445      	add	r5, r8
 8021bda:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021bde:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8021be2:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8021be6:	ea45 050e 	orr.w	r5, r5, lr
 8021bea:	fb1c fe01 	smulbb	lr, ip, r1
 8021bee:	f1cc 0810 	rsb	r8, ip, #16
 8021bf2:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8021bf6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021bfa:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8021bfe:	eba8 0801 	sub.w	r8, r8, r1
 8021c02:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8021c06:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021c0a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8021c0e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8021c12:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8021c16:	ea4a 0202 	orr.w	r2, sl, r2
 8021c1a:	4341      	muls	r1, r0
 8021c1c:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8021c20:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021c24:	fb09 1108 	mla	r1, r9, r8, r1
 8021c28:	ea4b 0505 	orr.w	r5, fp, r5
 8021c2c:	fb0c 1102 	mla	r1, ip, r2, r1
 8021c30:	fb0e 1e05 	mla	lr, lr, r5, r1
 8021c34:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8021c38:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8021c3c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021c40:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021c44:	ea42 0e0e 	orr.w	lr, r2, lr
 8021c48:	fa1f f28e 	uxth.w	r2, lr
 8021c4c:	2bff      	cmp	r3, #255	; 0xff
 8021c4e:	f040 80a1 	bne.w	8021d94 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8021c52:	803a      	strh	r2, [r7, #0]
 8021c54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021c56:	3702      	adds	r7, #2
 8021c58:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8021c5a:	4413      	add	r3, r2
 8021c5c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8021c5e:	931d      	str	r3, [sp, #116]	; 0x74
 8021c60:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021c62:	441a      	add	r2, r3
 8021c64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021c66:	3b01      	subs	r3, #1
 8021c68:	921e      	str	r2, [sp, #120]	; 0x78
 8021c6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8021c6c:	e6c7      	b.n	80219fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021c6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021c70:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8021c72:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8021c74:	4433      	add	r3, r6
 8021c76:	931d      	str	r3, [sp, #116]	; 0x74
 8021c78:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021c7a:	441c      	add	r4, r3
 8021c7c:	9b06      	ldr	r3, [sp, #24]
 8021c7e:	3b01      	subs	r3, #1
 8021c80:	941e      	str	r4, [sp, #120]	; 0x78
 8021c82:	9306      	str	r3, [sp, #24]
 8021c84:	9b07      	ldr	r3, [sp, #28]
 8021c86:	3302      	adds	r3, #2
 8021c88:	9307      	str	r3, [sp, #28]
 8021c8a:	e696      	b.n	80219ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8021c8c:	d028      	beq.n	8021ce0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021c8e:	9b06      	ldr	r3, [sp, #24]
 8021c90:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8021c92:	3b01      	subs	r3, #1
 8021c94:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8021c96:	fb00 5003 	mla	r0, r0, r3, r5
 8021c9a:	1400      	asrs	r0, r0, #16
 8021c9c:	f53f aeaa 	bmi.w	80219f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8021ca0:	3901      	subs	r1, #1
 8021ca2:	4288      	cmp	r0, r1
 8021ca4:	f6bf aea6 	bge.w	80219f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8021ca8:	9920      	ldr	r1, [sp, #128]	; 0x80
 8021caa:	981e      	ldr	r0, [sp, #120]	; 0x78
 8021cac:	fb01 0303 	mla	r3, r1, r3, r0
 8021cb0:	141b      	asrs	r3, r3, #16
 8021cb2:	f53f ae9f 	bmi.w	80219f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8021cb6:	3a01      	subs	r2, #1
 8021cb8:	4293      	cmp	r3, r2
 8021cba:	f6bf ae9b 	bge.w	80219f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8021cbe:	9b06      	ldr	r3, [sp, #24]
 8021cc0:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8021cc4:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8021cc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8021cca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021ccc:	2b00      	cmp	r3, #0
 8021cce:	f300 80b6 	bgt.w	8021e3e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8021cd2:	9b06      	ldr	r3, [sp, #24]
 8021cd4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021cd8:	9b07      	ldr	r3, [sp, #28]
 8021cda:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8021cde:	9307      	str	r3, [sp, #28]
 8021ce0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021ce2:	2b00      	cmp	r3, #0
 8021ce4:	f340 8218 	ble.w	8022118 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8021ce8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021cec:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021cee:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021cf2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021cf6:	eef0 6a62 	vmov.f32	s13, s5
 8021cfa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021cfe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021d02:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021d06:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8021d0a:	eef0 6a43 	vmov.f32	s13, s6
 8021d0e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021d12:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8021d16:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021d1a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021d1e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021d22:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021d26:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021d2a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021d2e:	ee12 2a90 	vmov	r2, s5
 8021d32:	eef0 2a47 	vmov.f32	s5, s14
 8021d36:	fb92 f3f3 	sdiv	r3, r2, r3
 8021d3a:	ee13 2a10 	vmov	r2, s6
 8021d3e:	931f      	str	r3, [sp, #124]	; 0x7c
 8021d40:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021d42:	eeb0 3a67 	vmov.f32	s6, s15
 8021d46:	fb92 f3f3 	sdiv	r3, r2, r3
 8021d4a:	9320      	str	r3, [sp, #128]	; 0x80
 8021d4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021d4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021d50:	3b01      	subs	r3, #1
 8021d52:	930e      	str	r3, [sp, #56]	; 0x38
 8021d54:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021d56:	bf08      	it	eq
 8021d58:	4613      	moveq	r3, r2
 8021d5a:	9306      	str	r3, [sp, #24]
 8021d5c:	e61f      	b.n	802199e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8021d5e:	fb08 f505 	mul.w	r5, r8, r5
 8021d62:	fb09 5303 	mla	r3, r9, r3, r5
 8021d66:	e69f      	b.n	8021aa8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8021d68:	4681      	mov	r9, r0
 8021d6a:	e6c6      	b.n	8021afa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8021d6c:	f1c1 0210 	rsb	r2, r1, #16
 8021d70:	4341      	muls	r1, r0
 8021d72:	fb09 1902 	mla	r9, r9, r2, r1
 8021d76:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8021d7a:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8021d7e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8021d82:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021d86:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021d8a:	ea42 0909 	orr.w	r9, r2, r9
 8021d8e:	fa1f f289 	uxth.w	r2, r9
 8021d92:	e75b      	b.n	8021c4c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 8021d94:	f8b7 c000 	ldrh.w	ip, [r7]
 8021d98:	43db      	mvns	r3, r3
 8021d9a:	ea4f 202c 	mov.w	r0, ip, asr #8
 8021d9e:	fa5f fe83 	uxtb.w	lr, r3
 8021da2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021da6:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8021daa:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8021dae:	fb00 f00e 	mul.w	r0, r0, lr
 8021db2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8021db6:	b2db      	uxtb	r3, r3
 8021db8:	1c41      	adds	r1, r0, #1
 8021dba:	fb05 f50e 	mul.w	r5, r5, lr
 8021dbe:	fb03 f30e 	mul.w	r3, r3, lr
 8021dc2:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8021dc6:	1211      	asrs	r1, r2, #8
 8021dc8:	f021 0107 	bic.w	r1, r1, #7
 8021dcc:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8021dd0:	48d3      	ldr	r0, [pc, #844]	; (8022120 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 8021dd2:	b2c9      	uxtb	r1, r1
 8021dd4:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8021dd8:	1c69      	adds	r1, r5, #1
 8021dda:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8021dde:	10d1      	asrs	r1, r2, #3
 8021de0:	00d2      	lsls	r2, r2, #3
 8021de2:	f021 0103 	bic.w	r1, r1, #3
 8021de6:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8021dea:	00c9      	lsls	r1, r1, #3
 8021dec:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021df0:	4301      	orrs	r1, r0
 8021df2:	1c58      	adds	r0, r3, #1
 8021df4:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8021df8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021dfc:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021e00:	430a      	orrs	r2, r1
 8021e02:	e726      	b.n	8021c52 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8021e04:	f115 0e01 	adds.w	lr, r5, #1
 8021e08:	f53f af24 	bmi.w	8021c54 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8021e0c:	4572      	cmp	r2, lr
 8021e0e:	f6ff af21 	blt.w	8021c54 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8021e12:	f110 0e01 	adds.w	lr, r0, #1
 8021e16:	f53f af1d 	bmi.w	8021c54 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8021e1a:	4573      	cmp	r3, lr
 8021e1c:	f6ff af1a 	blt.w	8021c54 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8021e20:	b21b      	sxth	r3, r3
 8021e22:	b212      	sxth	r2, r2
 8021e24:	9301      	str	r3, [sp, #4]
 8021e26:	9200      	str	r2, [sp, #0]
 8021e28:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8021e2c:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8021e30:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8021e34:	4639      	mov	r1, r7
 8021e36:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021e38:	f7ff fc22 	bl	8021680 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8021e3c:	e70a      	b.n	8021c54 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8021e3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021e40:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021e44:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021e46:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8021e4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021e4c:	fa1f fc82 	uxth.w	ip, r2
 8021e50:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021e54:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021e56:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8021e5a:	141f      	asrs	r7, r3, #16
 8021e5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021e5e:	141b      	asrs	r3, r3, #16
 8021e60:	fb01 3707 	mla	r7, r1, r7, r3
 8021e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021e66:	eb03 0a07 	add.w	sl, r3, r7
 8021e6a:	f813 9007 	ldrb.w	r9, [r3, r7]
 8021e6e:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8021e72:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8021e76:	b29b      	uxth	r3, r3
 8021e78:	2d00      	cmp	r5, #0
 8021e7a:	f000 80fe 	beq.w	802207a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 8021e7e:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8021e82:	eb0a 0b01 	add.w	fp, sl, r1
 8021e86:	fa1f fa85 	uxth.w	sl, r5
 8021e8a:	940c      	str	r4, [sp, #48]	; 0x30
 8021e8c:	fb0a fc0c 	mul.w	ip, sl, ip
 8021e90:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8021e94:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8021e98:	eba0 000c 	sub.w	r0, r0, ip
 8021e9c:	940d      	str	r4, [sp, #52]	; 0x34
 8021e9e:	fa1f fa8a 	uxth.w	sl, sl
 8021ea2:	b280      	uxth	r0, r0
 8021ea4:	eba3 030a 	sub.w	r3, r3, sl
 8021ea8:	fb08 f000 	mul.w	r0, r8, r0
 8021eac:	b29b      	uxth	r3, r3
 8021eae:	fb09 0303 	mla	r3, r9, r3, r0
 8021eb2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021eb4:	fb0a 3300 	mla	r3, sl, r0, r3
 8021eb8:	fb0c 3304 	mla	r3, ip, r4, r3
 8021ebc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021ec0:	2b00      	cmp	r3, #0
 8021ec2:	f000 80cc 	beq.w	802205e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8021ec6:	9808      	ldr	r0, [sp, #32]
 8021ec8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021ecc:	9c08      	ldr	r4, [sp, #32]
 8021ece:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8021ed2:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8021ed6:	f000 80d5 	beq.w	8022084 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8021eda:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8021ede:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8021ee2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021ee6:	fb0a fc0c 	mul.w	ip, sl, ip
 8021eea:	fb09 f707 	mul.w	r7, r9, r7
 8021eee:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8021ef2:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8021ef6:	f107 0b20 	add.w	fp, r7, #32
 8021efa:	44cc      	add	ip, r9
 8021efc:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8021f00:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8021f04:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021f08:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021f0c:	ea4c 0909 	orr.w	r9, ip, r9
 8021f10:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021f14:	8847      	ldrh	r7, [r0, #2]
 8021f16:	d019      	beq.n	8021f4c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 8021f18:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8021f1c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8021f20:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021f24:	fb0a fc0c 	mul.w	ip, sl, ip
 8021f28:	fb08 f807 	mul.w	r8, r8, r7
 8021f2c:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8021f30:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8021f34:	f108 0b20 	add.w	fp, r8, #32
 8021f38:	44bc      	add	ip, r7
 8021f3a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8021f3e:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8021f42:	0a3f      	lsrs	r7, r7, #8
 8021f44:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021f48:	ea4c 0707 	orr.w	r7, ip, r7
 8021f4c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8021f50:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021f54:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8021f58:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8021f5c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8021f60:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021f64:	ea4c 0909 	orr.w	r9, ip, r9
 8021f68:	ea4a 0707 	orr.w	r7, sl, r7
 8021f6c:	2d00      	cmp	r5, #0
 8021f6e:	f000 808b 	beq.w	8022088 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8021f72:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8021f76:	3901      	subs	r1, #1
 8021f78:	0049      	lsls	r1, r1, #1
 8021f7a:	3102      	adds	r1, #2
 8021f7c:	eb00 0c01 	add.w	ip, r0, r1
 8021f80:	5a41      	ldrh	r1, [r0, r1]
 8021f82:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021f84:	28ff      	cmp	r0, #255	; 0xff
 8021f86:	d019      	beq.n	8021fbc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8021f88:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8021f8c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021f8e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021f92:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021f96:	fb04 fa01 	mul.w	sl, r4, r1
 8021f9a:	fb08 f800 	mul.w	r8, r8, r0
 8021f9e:	f10a 0020 	add.w	r0, sl, #32
 8021fa2:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8021fa6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021faa:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8021fae:	4441      	add	r1, r8
 8021fb0:	0a00      	lsrs	r0, r0, #8
 8021fb2:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8021fb6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021fba:	4301      	orrs	r1, r0
 8021fbc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021fbe:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8021fc2:	2cff      	cmp	r4, #255	; 0xff
 8021fc4:	d01a      	beq.n	8021ffc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
 8021fc6:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8021fca:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021fce:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021fd2:	fb04 fa00 	mul.w	sl, r4, r0
 8021fd6:	fb08 f80c 	mul.w	r8, r8, ip
 8021fda:	f10a 0c20 	add.w	ip, sl, #32
 8021fde:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8021fe2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021fe6:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8021fea:	4440      	add	r0, r8
 8021fec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021ff0:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8021ff4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8021ff8:	ea40 000c 	orr.w	r0, r0, ip
 8021ffc:	fb15 fc02 	smulbb	ip, r5, r2
 8022000:	f1c5 0810 	rsb	r8, r5, #16
 8022004:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8022008:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802200c:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8022010:	eba8 0802 	sub.w	r8, r8, r2
 8022014:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8022018:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802201c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8022020:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022024:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8022028:	ea4a 0101 	orr.w	r1, sl, r1
 802202c:	437a      	muls	r2, r7
 802202e:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8022032:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022036:	fb09 2208 	mla	r2, r9, r8, r2
 802203a:	ea4b 0000 	orr.w	r0, fp, r0
 802203e:	fb05 2201 	mla	r2, r5, r1, r2
 8022042:	fb0c 2200 	mla	r2, ip, r0, r2
 8022046:	0d57      	lsrs	r7, r2, #21
 8022048:	0952      	lsrs	r2, r2, #5
 802204a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802204e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022052:	433a      	orrs	r2, r7
 8022054:	2bff      	cmp	r3, #255	; 0xff
 8022056:	b292      	uxth	r2, r2
 8022058:	d127      	bne.n	80220aa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 802205a:	f8ae 2000 	strh.w	r2, [lr]
 802205e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022060:	f10e 0e02 	add.w	lr, lr, #2
 8022064:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8022066:	4413      	add	r3, r2
 8022068:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 802206a:	931d      	str	r3, [sp, #116]	; 0x74
 802206c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802206e:	441a      	add	r2, r3
 8022070:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022072:	3b01      	subs	r3, #1
 8022074:	921e      	str	r2, [sp, #120]	; 0x78
 8022076:	930f      	str	r3, [sp, #60]	; 0x3c
 8022078:	e627      	b.n	8021cca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802207a:	fb08 f000 	mul.w	r0, r8, r0
 802207e:	fb09 0303 	mla	r3, r9, r3, r0
 8022082:	e71b      	b.n	8021ebc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
 8022084:	46b9      	mov	r9, r7
 8022086:	e743      	b.n	8021f10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
 8022088:	f1c2 0110 	rsb	r1, r2, #16
 802208c:	437a      	muls	r2, r7
 802208e:	fb09 2901 	mla	r9, r9, r1, r2
 8022092:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8022096:	ea4f 5059 	mov.w	r0, r9, lsr #21
 802209a:	ea4f 1259 	mov.w	r2, r9, lsr #5
 802209e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80220a2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80220a6:	4302      	orrs	r2, r0
 80220a8:	e7d4      	b.n	8022054 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
 80220aa:	f8be 7000 	ldrh.w	r7, [lr]
 80220ae:	43db      	mvns	r3, r3
 80220b0:	4c1b      	ldr	r4, [pc, #108]	; (8022120 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 80220b2:	1238      	asrs	r0, r7, #8
 80220b4:	fa5f fc83 	uxtb.w	ip, r3
 80220b8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80220bc:	10fd      	asrs	r5, r7, #3
 80220be:	00fb      	lsls	r3, r7, #3
 80220c0:	fb00 f00c 	mul.w	r0, r0, ip
 80220c4:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80220c8:	b2db      	uxtb	r3, r3
 80220ca:	fb05 f10c 	mul.w	r1, r5, ip
 80220ce:	1c45      	adds	r5, r0, #1
 80220d0:	fb03 f30c 	mul.w	r3, r3, ip
 80220d4:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80220d8:	1215      	asrs	r5, r2, #8
 80220da:	f025 0507 	bic.w	r5, r5, #7
 80220de:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80220e2:	1c4d      	adds	r5, r1, #1
 80220e4:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 80220e8:	10d1      	asrs	r1, r2, #3
 80220ea:	b2c0      	uxtb	r0, r0
 80220ec:	f021 0103 	bic.w	r1, r1, #3
 80220f0:	00d2      	lsls	r2, r2, #3
 80220f2:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 80220f6:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80220fa:	00c9      	lsls	r1, r1, #3
 80220fc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022100:	4308      	orrs	r0, r1
 8022102:	1c59      	adds	r1, r3, #1
 8022104:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022108:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802210c:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8022110:	4318      	orrs	r0, r3
 8022112:	f8ae 0000 	strh.w	r0, [lr]
 8022116:	e7a2      	b.n	802205e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8022118:	b013      	add	sp, #76	; 0x4c
 802211a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802211e:	bf00      	nop
 8022120:	fffff800 	.word	0xfffff800

08022124 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8022124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022128:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 802212c:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8022130:	fb05 4c03 	mla	ip, r5, r3, r4
 8022134:	2d00      	cmp	r5, #0
 8022136:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 802213a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 802213e:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8022142:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8022146:	8808      	ldrh	r0, [r1, #0]
 8022148:	f2c0 80a7 	blt.w	802229a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 802214c:	45aa      	cmp	sl, r5
 802214e:	f340 80a4 	ble.w	802229a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8022152:	2c00      	cmp	r4, #0
 8022154:	f2c0 809f 	blt.w	8022296 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8022158:	42a3      	cmp	r3, r4
 802215a:	f340 809c 	ble.w	8022296 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 802215e:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 8022162:	1c62      	adds	r2, r4, #1
 8022164:	f100 809c 	bmi.w	80222a0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8022168:	4293      	cmp	r3, r2
 802216a:	f340 8099 	ble.w	80222a0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 802216e:	f1b9 0f00 	cmp.w	r9, #0
 8022172:	f000 8095 	beq.w	80222a0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8022176:	f8be c002 	ldrh.w	ip, [lr, #2]
 802217a:	3501      	adds	r5, #1
 802217c:	f100 8094 	bmi.w	80222a8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8022180:	45aa      	cmp	sl, r5
 8022182:	f340 8091 	ble.w	80222a8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8022186:	2f00      	cmp	r7, #0
 8022188:	f000 808e 	beq.w	80222a8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 802218c:	2c00      	cmp	r4, #0
 802218e:	f2c0 8089 	blt.w	80222a4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8022192:	42a3      	cmp	r3, r4
 8022194:	f340 8086 	ble.w	80222a4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8022198:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 802219c:	3401      	adds	r4, #1
 802219e:	f100 8086 	bmi.w	80222ae <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80221a2:	42a3      	cmp	r3, r4
 80221a4:	f340 8083 	ble.w	80222ae <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80221a8:	f1b9 0f00 	cmp.w	r9, #0
 80221ac:	d07f      	beq.n	80222ae <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80221ae:	3301      	adds	r3, #1
 80221b0:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 80221b4:	ea4f 4408 	mov.w	r4, r8, lsl #16
 80221b8:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 80221bc:	fb19 fe07 	smulbb	lr, r9, r7
 80221c0:	f1c7 0210 	rsb	r2, r7, #16
 80221c4:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80221c8:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 80221cc:	eba2 0209 	sub.w	r2, r2, r9
 80221d0:	ea44 0808 	orr.w	r8, r4, r8
 80221d4:	ea4f 440c 	mov.w	r4, ip, lsl #16
 80221d8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80221dc:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 80221e0:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80221e4:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 80221e8:	ea44 0c0c 	orr.w	ip, r4, ip
 80221ec:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 80221f0:	fb04 f40c 	mul.w	r4, r4, ip
 80221f4:	fb02 4808 	mla	r8, r2, r8, r4
 80221f8:	041a      	lsls	r2, r3, #16
 80221fa:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80221fe:	b2b4      	uxth	r4, r6
 8022200:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022204:	43f6      	mvns	r6, r6
 8022206:	4313      	orrs	r3, r2
 8022208:	042a      	lsls	r2, r5, #16
 802220a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 802220e:	b2f6      	uxtb	r6, r6
 8022210:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022214:	fb0e 8303 	mla	r3, lr, r3, r8
 8022218:	432a      	orrs	r2, r5
 802221a:	fb07 3202 	mla	r2, r7, r2, r3
 802221e:	10c7      	asrs	r7, r0, #3
 8022220:	0d53      	lsrs	r3, r2, #21
 8022222:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022226:	0952      	lsrs	r2, r2, #5
 8022228:	fb17 f706 	smulbb	r7, r7, r6
 802222c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022230:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022234:	431a      	orrs	r2, r3
 8022236:	b293      	uxth	r3, r2
 8022238:	1202      	asrs	r2, r0, #8
 802223a:	121d      	asrs	r5, r3, #8
 802223c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8022240:	00c0      	lsls	r0, r0, #3
 8022242:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022246:	fb12 f206 	smulbb	r2, r2, r6
 802224a:	b2c0      	uxtb	r0, r0
 802224c:	fb05 2504 	mla	r5, r5, r4, r2
 8022250:	10da      	asrs	r2, r3, #3
 8022252:	fb10 f006 	smulbb	r0, r0, r6
 8022256:	00db      	lsls	r3, r3, #3
 8022258:	b2ad      	uxth	r5, r5
 802225a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802225e:	b2db      	uxtb	r3, r3
 8022260:	fb02 7204 	mla	r2, r2, r4, r7
 8022264:	fb03 0004 	mla	r0, r3, r4, r0
 8022268:	1c6b      	adds	r3, r5, #1
 802226a:	b292      	uxth	r2, r2
 802226c:	b280      	uxth	r0, r0
 802226e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022272:	1c43      	adds	r3, r0, #1
 8022274:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022278:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802227c:	1c50      	adds	r0, r2, #1
 802227e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8022282:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022286:	0952      	lsrs	r2, r2, #5
 8022288:	432b      	orrs	r3, r5
 802228a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802228e:	4313      	orrs	r3, r2
 8022290:	800b      	strh	r3, [r1, #0]
 8022292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022296:	4680      	mov	r8, r0
 8022298:	e763      	b.n	8022162 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 802229a:	4684      	mov	ip, r0
 802229c:	4680      	mov	r8, r0
 802229e:	e76c      	b.n	802217a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 80222a0:	4684      	mov	ip, r0
 80222a2:	e76a      	b.n	802217a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 80222a4:	4605      	mov	r5, r0
 80222a6:	e779      	b.n	802219c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 80222a8:	4603      	mov	r3, r0
 80222aa:	4605      	mov	r5, r0
 80222ac:	e782      	b.n	80221b4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 80222ae:	4603      	mov	r3, r0
 80222b0:	e780      	b.n	80221b4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

080222b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80222b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80222b6:	b093      	sub	sp, #76	; 0x4c
 80222b8:	461d      	mov	r5, r3
 80222ba:	9210      	str	r2, [sp, #64]	; 0x40
 80222bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80222be:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 80222c2:	910a      	str	r1, [sp, #40]	; 0x28
 80222c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80222c6:	6859      	ldr	r1, [r3, #4]
 80222c8:	681b      	ldr	r3, [r3, #0]
 80222ca:	9011      	str	r0, [sp, #68]	; 0x44
 80222cc:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 80222d0:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 80222d4:	fb01 2707 	mla	r7, r1, r7, r2
 80222d8:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 80222dc:	9307      	str	r3, [sp, #28]
 80222de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80222e0:	681b      	ldr	r3, [r3, #0]
 80222e2:	9309      	str	r3, [sp, #36]	; 0x24
 80222e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80222e6:	43db      	mvns	r3, r3
 80222e8:	b2db      	uxtb	r3, r3
 80222ea:	9308      	str	r3, [sp, #32]
 80222ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80222ee:	2b00      	cmp	r3, #0
 80222f0:	dc03      	bgt.n	80222fa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80222f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80222f4:	2b00      	cmp	r3, #0
 80222f6:	f340 8205 	ble.w	8022704 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80222fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80222fc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022300:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022304:	1e48      	subs	r0, r1, #1
 8022306:	f102 3cff 	add.w	ip, r2, #4294967295
 802230a:	2d00      	cmp	r5, #0
 802230c:	f340 80da 	ble.w	80224c4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8022310:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8022314:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022318:	d406      	bmi.n	8022328 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802231a:	4586      	cmp	lr, r0
 802231c:	da04      	bge.n	8022328 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802231e:	2b00      	cmp	r3, #0
 8022320:	db02      	blt.n	8022328 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022322:	4563      	cmp	r3, ip
 8022324:	f2c0 80cf 	blt.w	80224c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022328:	f11e 0e01 	adds.w	lr, lr, #1
 802232c:	f100 80c1 	bmi.w	80224b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8022330:	4571      	cmp	r1, lr
 8022332:	f2c0 80be 	blt.w	80224b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8022336:	3301      	adds	r3, #1
 8022338:	f100 80bb 	bmi.w	80224b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802233c:	429a      	cmp	r2, r3
 802233e:	f2c0 80b8 	blt.w	80224b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8022342:	46a9      	mov	r9, r5
 8022344:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8022348:	f1b9 0f00 	cmp.w	r9, #0
 802234c:	f340 80d8 	ble.w	8022500 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8022350:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022352:	1421      	asrs	r1, r4, #16
 8022354:	ea4f 4026 	mov.w	r0, r6, asr #16
 8022358:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802235c:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022360:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8022364:	f100 8112 	bmi.w	802258c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8022368:	f10e 3aff 	add.w	sl, lr, #4294967295
 802236c:	4551      	cmp	r1, sl
 802236e:	f280 810d 	bge.w	802258c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8022372:	2800      	cmp	r0, #0
 8022374:	f2c0 810a 	blt.w	802258c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8022378:	f103 3aff 	add.w	sl, r3, #4294967295
 802237c:	4550      	cmp	r0, sl
 802237e:	f280 8105 	bge.w	802258c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8022382:	fa0f f38e 	sxth.w	r3, lr
 8022386:	fb00 1103 	mla	r1, r0, r3, r1
 802238a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802238c:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8022390:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8022394:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8022398:	f1bc 0f00 	cmp.w	ip, #0
 802239c:	d007      	beq.n	80223ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 802239e:	005b      	lsls	r3, r3, #1
 80223a0:	eb0a 0003 	add.w	r0, sl, r3
 80223a4:	f83a 3003 	ldrh.w	r3, [sl, r3]
 80223a8:	930c      	str	r3, [sp, #48]	; 0x30
 80223aa:	8843      	ldrh	r3, [r0, #2]
 80223ac:	930d      	str	r3, [sp, #52]	; 0x34
 80223ae:	ea4f 400e 	mov.w	r0, lr, lsl #16
 80223b2:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80223b6:	fb12 f30c 	smulbb	r3, r2, ip
 80223ba:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80223be:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80223c2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80223c6:	10db      	asrs	r3, r3, #3
 80223c8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80223cc:	ea40 000e 	orr.w	r0, r0, lr
 80223d0:	f1cc 0e10 	rsb	lr, ip, #16
 80223d4:	ea4a 0101 	orr.w	r1, sl, r1
 80223d8:	9f08      	ldr	r7, [sp, #32]
 80223da:	ebae 0e02 	sub.w	lr, lr, r2
 80223de:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80223e2:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80223e6:	4351      	muls	r1, r2
 80223e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80223ea:	fb0e 1e00 	mla	lr, lr, r0, r1
 80223ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80223f0:	0410      	lsls	r0, r2, #16
 80223f2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80223f6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80223fa:	4310      	orrs	r0, r2
 80223fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80223fe:	0412      	lsls	r2, r2, #16
 8022400:	fb03 e000 	mla	r0, r3, r0, lr
 8022404:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8022408:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802240c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022410:	ea42 020e 	orr.w	r2, r2, lr
 8022414:	fb03 0302 	mla	r3, r3, r2, r0
 8022418:	f8b8 0000 	ldrh.w	r0, [r8]
 802241c:	0d5a      	lsrs	r2, r3, #21
 802241e:	095b      	lsrs	r3, r3, #5
 8022420:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022424:	1201      	asrs	r1, r0, #8
 8022426:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802242a:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 802242e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022432:	00c0      	lsls	r0, r0, #3
 8022434:	4313      	orrs	r3, r2
 8022436:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 802243a:	fb11 f107 	smulbb	r1, r1, r7
 802243e:	b2c0      	uxtb	r0, r0
 8022440:	b29b      	uxth	r3, r3
 8022442:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8022446:	fb10 f007 	smulbb	r0, r0, r7
 802244a:	fb1e fe07 	smulbb	lr, lr, r7
 802244e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8022452:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022456:	fb0c 1c02 	mla	ip, ip, r2, r1
 802245a:	10d9      	asrs	r1, r3, #3
 802245c:	00db      	lsls	r3, r3, #3
 802245e:	fa1f fc8c 	uxth.w	ip, ip
 8022462:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022466:	b2db      	uxtb	r3, r3
 8022468:	fb01 e102 	mla	r1, r1, r2, lr
 802246c:	fb03 0302 	mla	r3, r3, r2, r0
 8022470:	b289      	uxth	r1, r1
 8022472:	b29a      	uxth	r2, r3
 8022474:	f10c 0301 	add.w	r3, ip, #1
 8022478:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802247c:	1c53      	adds	r3, r2, #1
 802247e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022482:	1c4a      	adds	r2, r1, #1
 8022484:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8022488:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802248c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022490:	0949      	lsrs	r1, r1, #5
 8022492:	ea43 030c 	orr.w	r3, r3, ip
 8022496:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802249a:	430b      	orrs	r3, r1
 802249c:	f8a8 3000 	strh.w	r3, [r8]
 80224a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80224a2:	f108 0802 	add.w	r8, r8, #2
 80224a6:	f109 39ff 	add.w	r9, r9, #4294967295
 80224aa:	441c      	add	r4, r3
 80224ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80224ae:	441e      	add	r6, r3
 80224b0:	e74a      	b.n	8022348 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80224b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80224b4:	3d01      	subs	r5, #1
 80224b6:	441c      	add	r4, r3
 80224b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80224ba:	441e      	add	r6, r3
 80224bc:	9b07      	ldr	r3, [sp, #28]
 80224be:	3302      	adds	r3, #2
 80224c0:	9307      	str	r3, [sp, #28]
 80224c2:	e722      	b.n	802230a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80224c4:	d022      	beq.n	802250c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80224c6:	1e6b      	subs	r3, r5, #1
 80224c8:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80224ca:	fb00 4003 	mla	r0, r0, r3, r4
 80224ce:	1400      	asrs	r0, r0, #16
 80224d0:	f53f af37 	bmi.w	8022342 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80224d4:	3901      	subs	r1, #1
 80224d6:	4288      	cmp	r0, r1
 80224d8:	f6bf af33 	bge.w	8022342 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80224dc:	9920      	ldr	r1, [sp, #128]	; 0x80
 80224de:	fb01 6303 	mla	r3, r1, r3, r6
 80224e2:	141b      	asrs	r3, r3, #16
 80224e4:	f53f af2d 	bmi.w	8022342 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80224e8:	3a01      	subs	r2, #1
 80224ea:	4293      	cmp	r3, r2
 80224ec:	f6bf af29 	bge.w	8022342 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80224f0:	46a8      	mov	r8, r5
 80224f2:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80224f6:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 80224fa:	f1b8 0f00 	cmp.w	r8, #0
 80224fe:	dc60      	bgt.n	80225c2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8022500:	9b07      	ldr	r3, [sp, #28]
 8022502:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8022506:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802250a:	9307      	str	r3, [sp, #28]
 802250c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802250e:	2b00      	cmp	r3, #0
 8022510:	f340 80f8 	ble.w	8022704 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8022514:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022518:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802251a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802251e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022522:	eef0 6a62 	vmov.f32	s13, s5
 8022526:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802252a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802252e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022532:	ee16 4a90 	vmov	r4, s13
 8022536:	eef0 6a43 	vmov.f32	s13, s6
 802253a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802253e:	ee16 6a90 	vmov	r6, s13
 8022542:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022546:	ee61 7a27 	vmul.f32	s15, s2, s15
 802254a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802254e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022552:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022556:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802255a:	ee12 2a90 	vmov	r2, s5
 802255e:	eef0 2a47 	vmov.f32	s5, s14
 8022562:	fb92 f3f3 	sdiv	r3, r2, r3
 8022566:	ee13 2a10 	vmov	r2, s6
 802256a:	931f      	str	r3, [sp, #124]	; 0x7c
 802256c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802256e:	eeb0 3a67 	vmov.f32	s6, s15
 8022572:	fb92 f3f3 	sdiv	r3, r2, r3
 8022576:	9320      	str	r3, [sp, #128]	; 0x80
 8022578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802257a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802257c:	3b01      	subs	r3, #1
 802257e:	930a      	str	r3, [sp, #40]	; 0x28
 8022580:	bf08      	it	eq
 8022582:	4615      	moveq	r5, r2
 8022584:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022586:	bf18      	it	ne
 8022588:	461d      	movne	r5, r3
 802258a:	e6af      	b.n	80222ec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802258c:	f111 0a01 	adds.w	sl, r1, #1
 8022590:	d486      	bmi.n	80224a0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8022592:	45d6      	cmp	lr, sl
 8022594:	db84      	blt.n	80224a0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8022596:	f110 0a01 	adds.w	sl, r0, #1
 802259a:	d481      	bmi.n	80224a0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802259c:	4553      	cmp	r3, sl
 802259e:	f6ff af7f 	blt.w	80224a0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80225a2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80225a4:	b21b      	sxth	r3, r3
 80225a6:	9101      	str	r1, [sp, #4]
 80225a8:	4641      	mov	r1, r8
 80225aa:	9300      	str	r3, [sp, #0]
 80225ac:	fa0f f38e 	sxth.w	r3, lr
 80225b0:	e9cd 0202 	strd	r0, r2, [sp, #8]
 80225b4:	e9cd c704 	strd	ip, r7, [sp, #16]
 80225b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80225ba:	9811      	ldr	r0, [sp, #68]	; 0x44
 80225bc:	f7ff fdb2 	bl	8022124 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 80225c0:	e76e      	b.n	80224a0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80225c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80225c4:	1430      	asrs	r0, r6, #16
 80225c6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80225c8:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80225cc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80225d0:	1423      	asrs	r3, r4, #16
 80225d2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80225d6:	fb01 3000 	mla	r0, r1, r0, r3
 80225da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80225dc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80225e0:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 80225e4:	8858      	ldrh	r0, [r3, #2]
 80225e6:	f1be 0f00 	cmp.w	lr, #0
 80225ea:	d00b      	beq.n	8022604 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 80225ec:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80225f0:	3901      	subs	r1, #1
 80225f2:	0049      	lsls	r1, r1, #1
 80225f4:	3102      	adds	r1, #2
 80225f6:	eb03 0b01 	add.w	fp, r3, r1
 80225fa:	5a5b      	ldrh	r3, [r3, r1]
 80225fc:	930e      	str	r3, [sp, #56]	; 0x38
 80225fe:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8022602:	930f      	str	r3, [sp, #60]	; 0x3c
 8022604:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8022608:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802260c:	fb12 f30e 	smulbb	r3, r2, lr
 8022610:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8022614:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8022618:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802261c:	10db      	asrs	r3, r3, #3
 802261e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022622:	ea41 010c 	orr.w	r1, r1, ip
 8022626:	f1ce 0c10 	rsb	ip, lr, #16
 802262a:	ea4b 0000 	orr.w	r0, fp, r0
 802262e:	9f08      	ldr	r7, [sp, #32]
 8022630:	ebac 0c02 	sub.w	ip, ip, r2
 8022634:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8022638:	f108 38ff 	add.w	r8, r8, #4294967295
 802263c:	4350      	muls	r0, r2
 802263e:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8022642:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022644:	fb0c 0c01 	mla	ip, ip, r1, r0
 8022648:	980e      	ldr	r0, [sp, #56]	; 0x38
 802264a:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802264e:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8022652:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022654:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022658:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802265c:	0412      	lsls	r2, r2, #16
 802265e:	ea4b 0101 	orr.w	r1, fp, r1
 8022662:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022666:	fb03 c101 	mla	r1, r3, r1, ip
 802266a:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 802266e:	4302      	orrs	r2, r0
 8022670:	fb03 1202 	mla	r2, r3, r2, r1
 8022674:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8022678:	0952      	lsrs	r2, r2, #5
 802267a:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 802267e:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8022682:	f8b9 2000 	ldrh.w	r2, [r9]
 8022686:	ea4b 0303 	orr.w	r3, fp, r3
 802268a:	1211      	asrs	r1, r2, #8
 802268c:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8022690:	b29b      	uxth	r3, r3
 8022692:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022696:	00d2      	lsls	r2, r2, #3
 8022698:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 802269c:	fb11 f107 	smulbb	r1, r1, r7
 80226a0:	1218      	asrs	r0, r3, #8
 80226a2:	fb1c fc07 	smulbb	ip, ip, r7
 80226a6:	b2d2      	uxtb	r2, r2
 80226a8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80226ac:	fb12 f207 	smulbb	r2, r2, r7
 80226b0:	fb00 100a 	mla	r0, r0, sl, r1
 80226b4:	10d9      	asrs	r1, r3, #3
 80226b6:	00db      	lsls	r3, r3, #3
 80226b8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80226bc:	b280      	uxth	r0, r0
 80226be:	b2db      	uxtb	r3, r3
 80226c0:	fb01 c10a 	mla	r1, r1, sl, ip
 80226c4:	fb03 230a 	mla	r3, r3, sl, r2
 80226c8:	1c42      	adds	r2, r0, #1
 80226ca:	b289      	uxth	r1, r1
 80226cc:	b29b      	uxth	r3, r3
 80226ce:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80226d2:	f101 0c01 	add.w	ip, r1, #1
 80226d6:	1c5a      	adds	r2, r3, #1
 80226d8:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80226dc:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80226e0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80226e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80226e6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80226ea:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80226ee:	441c      	add	r4, r3
 80226f0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80226f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80226f6:	4310      	orrs	r0, r2
 80226f8:	441e      	add	r6, r3
 80226fa:	ea40 000c 	orr.w	r0, r0, ip
 80226fe:	f829 0b02 	strh.w	r0, [r9], #2
 8022702:	e6fa      	b.n	80224fa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8022704:	b013      	add	sp, #76	; 0x4c
 8022706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802270a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 802270a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802270e:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 8022712:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 8022716:	fb0e 4703 	mla	r7, lr, r3, r4
 802271a:	f1be 0f00 	cmp.w	lr, #0
 802271e:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8022722:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8022726:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 802272a:	8808      	ldrh	r0, [r1, #0]
 802272c:	db60      	blt.n	80227f0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 802272e:	45f1      	cmp	r9, lr
 8022730:	dd5e      	ble.n	80227f0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8022732:	2c00      	cmp	r4, #0
 8022734:	db5a      	blt.n	80227ec <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8022736:	42a3      	cmp	r3, r4
 8022738:	dd58      	ble.n	80227ec <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 802273a:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 802273e:	1c62      	adds	r2, r4, #1
 8022740:	d459      	bmi.n	80227f6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8022742:	4293      	cmp	r3, r2
 8022744:	dd57      	ble.n	80227f6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8022746:	2d00      	cmp	r5, #0
 8022748:	d055      	beq.n	80227f6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802274a:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 802274e:	f11e 0e01 	adds.w	lr, lr, #1
 8022752:	d454      	bmi.n	80227fe <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8022754:	45f1      	cmp	r9, lr
 8022756:	dd52      	ble.n	80227fe <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8022758:	2e00      	cmp	r6, #0
 802275a:	d050      	beq.n	80227fe <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 802275c:	2c00      	cmp	r4, #0
 802275e:	db4c      	blt.n	80227fa <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8022760:	42a3      	cmp	r3, r4
 8022762:	dd4a      	ble.n	80227fa <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8022764:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8022768:	3401      	adds	r4, #1
 802276a:	d405      	bmi.n	8022778 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802276c:	42a3      	cmp	r3, r4
 802276e:	dd03      	ble.n	8022778 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8022770:	b115      	cbz	r5, 8022778 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8022772:	3301      	adds	r3, #1
 8022774:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8022778:	fb15 f406 	smulbb	r4, r5, r6
 802277c:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8022780:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8022784:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022788:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802278c:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8022790:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8022794:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8022798:	ea43 0c0c 	orr.w	ip, r3, ip
 802279c:	f1c6 0310 	rsb	r3, r6, #16
 80227a0:	ea4e 0707 	orr.w	r7, lr, r7
 80227a4:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 80227a8:	1b5b      	subs	r3, r3, r5
 80227aa:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 80227ae:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80227b2:	437d      	muls	r5, r7
 80227b4:	fb03 5c0c 	mla	ip, r3, ip, r5
 80227b8:	0403      	lsls	r3, r0, #16
 80227ba:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80227be:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80227c2:	4318      	orrs	r0, r3
 80227c4:	0413      	lsls	r3, r2, #16
 80227c6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80227ca:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80227ce:	fb04 c000 	mla	r0, r4, r0, ip
 80227d2:	4313      	orrs	r3, r2
 80227d4:	fb06 0003 	mla	r0, r6, r3, r0
 80227d8:	0d43      	lsrs	r3, r0, #21
 80227da:	0940      	lsrs	r0, r0, #5
 80227dc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80227e0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80227e4:	4318      	orrs	r0, r3
 80227e6:	8008      	strh	r0, [r1, #0]
 80227e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80227ec:	4684      	mov	ip, r0
 80227ee:	e7a6      	b.n	802273e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 80227f0:	4607      	mov	r7, r0
 80227f2:	4684      	mov	ip, r0
 80227f4:	e7ab      	b.n	802274e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 80227f6:	4607      	mov	r7, r0
 80227f8:	e7a9      	b.n	802274e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 80227fa:	4602      	mov	r2, r0
 80227fc:	e7b4      	b.n	8022768 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 80227fe:	4602      	mov	r2, r0
 8022800:	e7ba      	b.n	8022778 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

08022802 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022802:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022806:	b08f      	sub	sp, #60	; 0x3c
 8022808:	461d      	mov	r5, r3
 802280a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802280c:	9107      	str	r1, [sp, #28]
 802280e:	920c      	str	r2, [sp, #48]	; 0x30
 8022810:	6859      	ldr	r1, [r3, #4]
 8022812:	681b      	ldr	r3, [r3, #0]
 8022814:	900d      	str	r0, [sp, #52]	; 0x34
 8022816:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 802281a:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 802281e:	fb01 2707 	mla	r7, r1, r7, r2
 8022822:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8022826:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022828:	f8d3 8000 	ldr.w	r8, [r3]
 802282c:	9b07      	ldr	r3, [sp, #28]
 802282e:	2b00      	cmp	r3, #0
 8022830:	dc03      	bgt.n	802283a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8022832:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022834:	2b00      	cmp	r3, #0
 8022836:	f340 8182 	ble.w	8022b3e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 802283a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802283c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022840:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022844:	1e48      	subs	r0, r1, #1
 8022846:	f102 3cff 	add.w	ip, r2, #4294967295
 802284a:	2d00      	cmp	r5, #0
 802284c:	f340 809b 	ble.w	8022986 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8022850:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8022854:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022858:	d406      	bmi.n	8022868 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802285a:	4586      	cmp	lr, r0
 802285c:	da04      	bge.n	8022868 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802285e:	2b00      	cmp	r3, #0
 8022860:	db02      	blt.n	8022868 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022862:	4563      	cmp	r3, ip
 8022864:	f2c0 8090 	blt.w	8022988 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022868:	f11e 0e01 	adds.w	lr, lr, #1
 802286c:	f100 8084 	bmi.w	8022978 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8022870:	4571      	cmp	r1, lr
 8022872:	f2c0 8081 	blt.w	8022978 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8022876:	3301      	adds	r3, #1
 8022878:	d47e      	bmi.n	8022978 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802287a:	429a      	cmp	r2, r3
 802287c:	db7c      	blt.n	8022978 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802287e:	46aa      	mov	sl, r5
 8022880:	46b9      	mov	r9, r7
 8022882:	f1ba 0f00 	cmp.w	sl, #0
 8022886:	f340 8099 	ble.w	80229bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802288a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802288c:	1421      	asrs	r1, r4, #16
 802288e:	ea4f 4026 	mov.w	r0, r6, asr #16
 8022892:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022896:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802289a:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802289e:	f100 80d1 	bmi.w	8022a44 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80228a2:	f10e 3bff 	add.w	fp, lr, #4294967295
 80228a6:	4559      	cmp	r1, fp
 80228a8:	f280 80cc 	bge.w	8022a44 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80228ac:	2800      	cmp	r0, #0
 80228ae:	f2c0 80c9 	blt.w	8022a44 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80228b2:	f103 3bff 	add.w	fp, r3, #4294967295
 80228b6:	4558      	cmp	r0, fp
 80228b8:	f280 80c4 	bge.w	8022a44 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80228bc:	fa0f fe8e 	sxth.w	lr, lr
 80228c0:	fb00 110e 	mla	r1, r0, lr, r1
 80228c4:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80228c8:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 80228cc:	8841      	ldrh	r1, [r0, #2]
 80228ce:	f1bc 0f00 	cmp.w	ip, #0
 80228d2:	d00b      	beq.n	80228ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 80228d4:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 80228d8:	3b01      	subs	r3, #1
 80228da:	005b      	lsls	r3, r3, #1
 80228dc:	3302      	adds	r3, #2
 80228de:	eb00 0e03 	add.w	lr, r0, r3
 80228e2:	5ac3      	ldrh	r3, [r0, r3]
 80228e4:	9308      	str	r3, [sp, #32]
 80228e6:	f8be 3002 	ldrh.w	r3, [lr, #2]
 80228ea:	9309      	str	r3, [sp, #36]	; 0x24
 80228ec:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80228f0:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80228f4:	fb12 f30c 	smulbb	r3, r2, ip
 80228f8:	f1cc 0e10 	rsb	lr, ip, #16
 80228fc:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022900:	10db      	asrs	r3, r3, #3
 8022902:	ebae 0e02 	sub.w	lr, lr, r2
 8022906:	ea40 000b 	orr.w	r0, r0, fp
 802290a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802290e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022912:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8022916:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802291a:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 802291e:	ea4b 0101 	orr.w	r1, fp, r1
 8022922:	4351      	muls	r1, r2
 8022924:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022926:	fb0e 1e00 	mla	lr, lr, r0, r1
 802292a:	0410      	lsls	r0, r2, #16
 802292c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022930:	9908      	ldr	r1, [sp, #32]
 8022932:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022936:	4310      	orrs	r0, r2
 8022938:	9a08      	ldr	r2, [sp, #32]
 802293a:	0412      	lsls	r2, r2, #16
 802293c:	fb03 e000 	mla	r0, r3, r0, lr
 8022940:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8022944:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8022948:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802294c:	ea42 020e 	orr.w	r2, r2, lr
 8022950:	fb03 0302 	mla	r3, r3, r2, r0
 8022954:	0d5a      	lsrs	r2, r3, #21
 8022956:	095b      	lsrs	r3, r3, #5
 8022958:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802295c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022960:	4313      	orrs	r3, r2
 8022962:	f8a9 3000 	strh.w	r3, [r9]
 8022966:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022968:	f109 0902 	add.w	r9, r9, #2
 802296c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022970:	441c      	add	r4, r3
 8022972:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022974:	441e      	add	r6, r3
 8022976:	e784      	b.n	8022882 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8022978:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802297a:	3d01      	subs	r5, #1
 802297c:	3702      	adds	r7, #2
 802297e:	441c      	add	r4, r3
 8022980:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022982:	441e      	add	r6, r3
 8022984:	e761      	b.n	802284a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8022986:	d01d      	beq.n	80229c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8022988:	1e6b      	subs	r3, r5, #1
 802298a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802298c:	fb00 4003 	mla	r0, r0, r3, r4
 8022990:	1400      	asrs	r0, r0, #16
 8022992:	f53f af74 	bmi.w	802287e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022996:	3901      	subs	r1, #1
 8022998:	4288      	cmp	r0, r1
 802299a:	f6bf af70 	bge.w	802287e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802299e:	991c      	ldr	r1, [sp, #112]	; 0x70
 80229a0:	fb01 6303 	mla	r3, r1, r3, r6
 80229a4:	141b      	asrs	r3, r3, #16
 80229a6:	f53f af6a 	bmi.w	802287e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80229aa:	3a01      	subs	r2, #1
 80229ac:	4293      	cmp	r3, r2
 80229ae:	f6bf af66 	bge.w	802287e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80229b2:	46a9      	mov	r9, r5
 80229b4:	46ba      	mov	sl, r7
 80229b6:	f1b9 0f00 	cmp.w	r9, #0
 80229ba:	dc5b      	bgt.n	8022a74 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 80229bc:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80229c0:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 80229c4:	9b07      	ldr	r3, [sp, #28]
 80229c6:	2b00      	cmp	r3, #0
 80229c8:	f340 80b9 	ble.w	8022b3e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 80229cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80229d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80229d2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80229d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80229da:	eef0 6a62 	vmov.f32	s13, s5
 80229de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80229e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80229e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80229ea:	ee16 4a90 	vmov	r4, s13
 80229ee:	eef0 6a43 	vmov.f32	s13, s6
 80229f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80229f6:	ee16 6a90 	vmov	r6, s13
 80229fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80229fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022a02:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022a06:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022a0a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022a0e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022a12:	ee12 2a90 	vmov	r2, s5
 8022a16:	eef0 2a47 	vmov.f32	s5, s14
 8022a1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8022a1e:	ee13 2a10 	vmov	r2, s6
 8022a22:	931b      	str	r3, [sp, #108]	; 0x6c
 8022a24:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022a26:	eeb0 3a67 	vmov.f32	s6, s15
 8022a2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8022a2e:	931c      	str	r3, [sp, #112]	; 0x70
 8022a30:	9b07      	ldr	r3, [sp, #28]
 8022a32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022a34:	3b01      	subs	r3, #1
 8022a36:	9307      	str	r3, [sp, #28]
 8022a38:	bf08      	it	eq
 8022a3a:	4615      	moveq	r5, r2
 8022a3c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022a3e:	bf18      	it	ne
 8022a40:	461d      	movne	r5, r3
 8022a42:	e6f3      	b.n	802282c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8022a44:	f111 0b01 	adds.w	fp, r1, #1
 8022a48:	d48d      	bmi.n	8022966 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022a4a:	45de      	cmp	lr, fp
 8022a4c:	db8b      	blt.n	8022966 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022a4e:	f110 0b01 	adds.w	fp, r0, #1
 8022a52:	d488      	bmi.n	8022966 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022a54:	455b      	cmp	r3, fp
 8022a56:	db86      	blt.n	8022966 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022a58:	b21b      	sxth	r3, r3
 8022a5a:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8022a5e:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8022a62:	9300      	str	r3, [sp, #0]
 8022a64:	4642      	mov	r2, r8
 8022a66:	fa0f f38e 	sxth.w	r3, lr
 8022a6a:	4649      	mov	r1, r9
 8022a6c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022a6e:	f7ff fe4c 	bl	802270a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8022a72:	e778      	b.n	8022966 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022a74:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022a76:	1420      	asrs	r0, r4, #16
 8022a78:	1431      	asrs	r1, r6, #16
 8022a7a:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8022a7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8022a82:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022a86:	fb03 0101 	mla	r1, r3, r1, r0
 8022a8a:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8022a8e:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8022a92:	8841      	ldrh	r1, [r0, #2]
 8022a94:	f1be 0f00 	cmp.w	lr, #0
 8022a98:	d00b      	beq.n	8022ab2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8022a9a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8022a9e:	3b01      	subs	r3, #1
 8022aa0:	005b      	lsls	r3, r3, #1
 8022aa2:	3302      	adds	r3, #2
 8022aa4:	eb00 0b03 	add.w	fp, r0, r3
 8022aa8:	5ac3      	ldrh	r3, [r0, r3]
 8022aaa:	930a      	str	r3, [sp, #40]	; 0x28
 8022aac:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8022ab0:	930b      	str	r3, [sp, #44]	; 0x2c
 8022ab2:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8022ab6:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022aba:	fb12 f30e 	smulbb	r3, r2, lr
 8022abe:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8022ac2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022ac6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022aca:	10db      	asrs	r3, r3, #3
 8022acc:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022ad0:	ea40 000c 	orr.w	r0, r0, ip
 8022ad4:	f1ce 0c10 	rsb	ip, lr, #16
 8022ad8:	ea4b 0101 	orr.w	r1, fp, r1
 8022adc:	f109 39ff 	add.w	r9, r9, #4294967295
 8022ae0:	ebac 0c02 	sub.w	ip, ip, r2
 8022ae4:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8022ae8:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8022aec:	4351      	muls	r1, r2
 8022aee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022af0:	fb0c 1c00 	mla	ip, ip, r0, r1
 8022af4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022af6:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8022afa:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8022afe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022b00:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022b04:	0412      	lsls	r2, r2, #16
 8022b06:	ea4b 0000 	orr.w	r0, fp, r0
 8022b0a:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8022b0e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022b12:	fb03 c000 	mla	r0, r3, r0, ip
 8022b16:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8022b1a:	ea42 0b0b 	orr.w	fp, r2, fp
 8022b1e:	fb03 000b 	mla	r0, r3, fp, r0
 8022b22:	0d43      	lsrs	r3, r0, #21
 8022b24:	0940      	lsrs	r0, r0, #5
 8022b26:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022b2a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022b2e:	4318      	orrs	r0, r3
 8022b30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022b32:	441c      	add	r4, r3
 8022b34:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022b36:	f82a 0b02 	strh.w	r0, [sl], #2
 8022b3a:	441e      	add	r6, r3
 8022b3c:	e73b      	b.n	80229b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8022b3e:	b00f      	add	sp, #60	; 0x3c
 8022b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022b44 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8022b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b48:	b085      	sub	sp, #20
 8022b4a:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8022b4e:	9102      	str	r1, [sp, #8]
 8022b50:	2c00      	cmp	r4, #0
 8022b52:	fb04 7103 	mla	r1, r4, r3, r7
 8022b56:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8022b5a:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8022b5e:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8022b62:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8022b66:	f2c0 811b 	blt.w	8022da0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8022b6a:	45a6      	cmp	lr, r4
 8022b6c:	f340 8118 	ble.w	8022da0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8022b70:	2f00      	cmp	r7, #0
 8022b72:	f2c0 8113 	blt.w	8022d9c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8022b76:	42bb      	cmp	r3, r7
 8022b78:	f340 8110 	ble.w	8022d9c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8022b7c:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8022b80:	1c7a      	adds	r2, r7, #1
 8022b82:	f100 8110 	bmi.w	8022da6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8022b86:	4293      	cmp	r3, r2
 8022b88:	f340 810d 	ble.w	8022da6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8022b8c:	2e00      	cmp	r6, #0
 8022b8e:	f000 810c 	beq.w	8022daa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 8022b92:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8022b96:	3401      	adds	r4, #1
 8022b98:	f100 810b 	bmi.w	8022db2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8022b9c:	45a6      	cmp	lr, r4
 8022b9e:	f340 8108 	ble.w	8022db2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8022ba2:	2800      	cmp	r0, #0
 8022ba4:	f000 8108 	beq.w	8022db8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 8022ba8:	2f00      	cmp	r7, #0
 8022baa:	f2c0 8100 	blt.w	8022dae <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8022bae:	42bb      	cmp	r3, r7
 8022bb0:	f340 80fd 	ble.w	8022dae <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8022bb4:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8022bb8:	3701      	adds	r7, #1
 8022bba:	f100 8100 	bmi.w	8022dbe <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8022bbe:	42bb      	cmp	r3, r7
 8022bc0:	f340 80fd 	ble.w	8022dbe <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8022bc4:	2e00      	cmp	r6, #0
 8022bc6:	f000 80fc 	beq.w	8022dc2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 8022bca:	3301      	adds	r3, #1
 8022bcc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8022bd0:	b2b6      	uxth	r6, r6
 8022bd2:	b280      	uxth	r0, r0
 8022bd4:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8022bd8:	fb00 fe06 	mul.w	lr, r0, r6
 8022bdc:	0136      	lsls	r6, r6, #4
 8022bde:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8022be2:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8022be6:	eba6 070e 	sub.w	r7, r6, lr
 8022bea:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8022bee:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022bf2:	b280      	uxth	r0, r0
 8022bf4:	b2bf      	uxth	r7, r7
 8022bf6:	1a1b      	subs	r3, r3, r0
 8022bf8:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8022bfc:	fb0a f607 	mul.w	r6, sl, r7
 8022c00:	b29b      	uxth	r3, r3
 8022c02:	fb0b 6603 	mla	r6, fp, r3, r6
 8022c06:	fb00 6609 	mla	r6, r0, r9, r6
 8022c0a:	fb0e 6608 	mla	r6, lr, r8, r6
 8022c0e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8022c12:	9600      	str	r6, [sp, #0]
 8022c14:	2e00      	cmp	r6, #0
 8022c16:	f000 80be 	beq.w	8022d96 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 8022c1a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8022c1e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8022c22:	9e02      	ldr	r6, [sp, #8]
 8022c24:	fb0b fc0c 	mul.w	ip, fp, ip
 8022c28:	fb0b f505 	mul.w	r5, fp, r5
 8022c2c:	8836      	ldrh	r6, [r6, #0]
 8022c2e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8022c32:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022c36:	9501      	str	r5, [sp, #4]
 8022c38:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8022c3c:	44dc      	add	ip, fp
 8022c3e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022c42:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8022c46:	9503      	str	r5, [sp, #12]
 8022c48:	9d01      	ldr	r5, [sp, #4]
 8022c4a:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8022c4e:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8022c52:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8022c56:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8022c5a:	fb0a fc0c 	mul.w	ip, sl, ip
 8022c5e:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8022c62:	fb0a fa01 	mul.w	sl, sl, r1
 8022c66:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8022c6a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022c6e:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8022c72:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022c76:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8022c7a:	4465      	add	r5, ip
 8022c7c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022c80:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022c84:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022c88:	fb09 fc0c 	mul.w	ip, r9, ip
 8022c8c:	0a2d      	lsrs	r5, r5, #8
 8022c8e:	fb09 f904 	mul.w	r9, r9, r4
 8022c92:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022c96:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8022c9a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022c9e:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8022ca2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022ca6:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8022caa:	437d      	muls	r5, r7
 8022cac:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8022cb0:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8022cb4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022cb8:	4461      	add	r1, ip
 8022cba:	fb08 f404 	mul.w	r4, r8, r4
 8022cbe:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022cc2:	fb08 f802 	mul.w	r8, r8, r2
 8022cc6:	0a09      	lsrs	r1, r1, #8
 8022cc8:	0a22      	lsrs	r2, r4, #8
 8022cca:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8022cce:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8022cd2:	fb07 f70a 	mul.w	r7, r7, sl
 8022cd6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022cda:	4414      	add	r4, r2
 8022cdc:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8022ce0:	0a24      	lsrs	r4, r4, #8
 8022ce2:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8022ce6:	9a03      	ldr	r2, [sp, #12]
 8022ce8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022cec:	fb02 5503 	mla	r5, r2, r3, r5
 8022cf0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8022cf4:	9a00      	ldr	r2, [sp, #0]
 8022cf6:	fb04 540e 	mla	r4, r4, lr, r5
 8022cfa:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8022cfe:	1235      	asrs	r5, r6, #8
 8022d00:	fb01 4100 	mla	r1, r1, r0, r4
 8022d04:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022d08:	0a09      	lsrs	r1, r1, #8
 8022d0a:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8022d0e:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8022d12:	fb03 7101 	mla	r1, r3, r1, r7
 8022d16:	fb0e 1e08 	mla	lr, lr, r8, r1
 8022d1a:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8022d1e:	fb00 e101 	mla	r1, r0, r1, lr
 8022d22:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8022d26:	b287      	uxth	r7, r0
 8022d28:	0a09      	lsrs	r1, r1, #8
 8022d2a:	437a      	muls	r2, r7
 8022d2c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8022d30:	1c53      	adds	r3, r2, #1
 8022d32:	4321      	orrs	r1, r4
 8022d34:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022d38:	0c0a      	lsrs	r2, r1, #16
 8022d3a:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8022d3e:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8022d42:	b2c8      	uxtb	r0, r1
 8022d44:	fb12 f207 	smulbb	r2, r2, r7
 8022d48:	fb14 f407 	smulbb	r4, r4, r7
 8022d4c:	b2db      	uxtb	r3, r3
 8022d4e:	fb10 f007 	smulbb	r0, r0, r7
 8022d52:	fb05 2503 	mla	r5, r5, r3, r2
 8022d56:	10f2      	asrs	r2, r6, #3
 8022d58:	00f6      	lsls	r6, r6, #3
 8022d5a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022d5e:	b2ad      	uxth	r5, r5
 8022d60:	b2f6      	uxtb	r6, r6
 8022d62:	fb02 4203 	mla	r2, r2, r3, r4
 8022d66:	fb06 0303 	mla	r3, r6, r3, r0
 8022d6a:	b294      	uxth	r4, r2
 8022d6c:	b299      	uxth	r1, r3
 8022d6e:	1c6b      	adds	r3, r5, #1
 8022d70:	1c62      	adds	r2, r4, #1
 8022d72:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022d76:	1c4b      	adds	r3, r1, #1
 8022d78:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8022d7c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8022d80:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022d84:	0952      	lsrs	r2, r2, #5
 8022d86:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022d8a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022d8e:	432b      	orrs	r3, r5
 8022d90:	4313      	orrs	r3, r2
 8022d92:	9a02      	ldr	r2, [sp, #8]
 8022d94:	8013      	strh	r3, [r2, #0]
 8022d96:	b005      	add	sp, #20
 8022d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d9c:	2500      	movs	r5, #0
 8022d9e:	e6ef      	b.n	8022b80 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 8022da0:	2100      	movs	r1, #0
 8022da2:	460d      	mov	r5, r1
 8022da4:	e6f7      	b.n	8022b96 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8022da6:	2100      	movs	r1, #0
 8022da8:	e6f5      	b.n	8022b96 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8022daa:	4631      	mov	r1, r6
 8022dac:	e6f3      	b.n	8022b96 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8022dae:	2400      	movs	r4, #0
 8022db0:	e702      	b.n	8022bb8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8022db2:	2200      	movs	r2, #0
 8022db4:	4614      	mov	r4, r2
 8022db6:	e70b      	b.n	8022bd0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8022db8:	4602      	mov	r2, r0
 8022dba:	4604      	mov	r4, r0
 8022dbc:	e708      	b.n	8022bd0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8022dbe:	2200      	movs	r2, #0
 8022dc0:	e706      	b.n	8022bd0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8022dc2:	4632      	mov	r2, r6
 8022dc4:	e704      	b.n	8022bd0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

08022dc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022dc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022dca:	b09d      	sub	sp, #116	; 0x74
 8022dcc:	9219      	str	r2, [sp, #100]	; 0x64
 8022dce:	9307      	str	r3, [sp, #28]
 8022dd0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022dd2:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8022dd6:	901b      	str	r0, [sp, #108]	; 0x6c
 8022dd8:	931a      	str	r3, [sp, #104]	; 0x68
 8022dda:	6850      	ldr	r0, [r2, #4]
 8022ddc:	9117      	str	r1, [sp, #92]	; 0x5c
 8022dde:	6812      	ldr	r2, [r2, #0]
 8022de0:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8022de4:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8022de8:	fb00 1303 	mla	r3, r0, r3, r1
 8022dec:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022df0:	930a      	str	r3, [sp, #40]	; 0x28
 8022df2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022df4:	681b      	ldr	r3, [r3, #0]
 8022df6:	9310      	str	r3, [sp, #64]	; 0x40
 8022df8:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8022dfc:	930b      	str	r3, [sp, #44]	; 0x2c
 8022dfe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022e00:	2b00      	cmp	r3, #0
 8022e02:	dc03      	bgt.n	8022e0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8022e04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022e06:	2b00      	cmp	r3, #0
 8022e08:	f340 8375 	ble.w	80234f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8022e0c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022e0e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022e12:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022e16:	1e48      	subs	r0, r1, #1
 8022e18:	1e57      	subs	r7, r2, #1
 8022e1a:	9b07      	ldr	r3, [sp, #28]
 8022e1c:	2b00      	cmp	r3, #0
 8022e1e:	f340 818e 	ble.w	802313e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8022e22:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8022e26:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022e2a:	d406      	bmi.n	8022e3a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8022e2c:	4584      	cmp	ip, r0
 8022e2e:	da04      	bge.n	8022e3a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8022e30:	2b00      	cmp	r3, #0
 8022e32:	db02      	blt.n	8022e3a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8022e34:	42bb      	cmp	r3, r7
 8022e36:	f2c0 8183 	blt.w	8023140 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8022e3a:	f11c 0c01 	adds.w	ip, ip, #1
 8022e3e:	f100 8173 	bmi.w	8023128 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8022e42:	4561      	cmp	r1, ip
 8022e44:	f2c0 8170 	blt.w	8023128 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8022e48:	3301      	adds	r3, #1
 8022e4a:	f100 816d 	bmi.w	8023128 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8022e4e:	429a      	cmp	r2, r3
 8022e50:	f2c0 816a 	blt.w	8023128 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8022e54:	9b07      	ldr	r3, [sp, #28]
 8022e56:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8022e58:	9318      	str	r3, [sp, #96]	; 0x60
 8022e5a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022e5c:	2b00      	cmp	r3, #0
 8022e5e:	f340 818c 	ble.w	802317a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8022e62:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8022e64:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8022e68:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022e6a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022e6e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8022e72:	1422      	asrs	r2, r4, #16
 8022e74:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022e78:	689b      	ldr	r3, [r3, #8]
 8022e7a:	f100 81cd 	bmi.w	8023218 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8022e7e:	f103 38ff 	add.w	r8, r3, #4294967295
 8022e82:	4542      	cmp	r2, r8
 8022e84:	f280 81c8 	bge.w	8023218 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8022e88:	f1bc 0f00 	cmp.w	ip, #0
 8022e8c:	f2c0 81c4 	blt.w	8023218 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8022e90:	f10e 38ff 	add.w	r8, lr, #4294967295
 8022e94:	45c4      	cmp	ip, r8
 8022e96:	f280 81bf 	bge.w	8023218 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8022e9a:	b21b      	sxth	r3, r3
 8022e9c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8022e9e:	fb0c 2203 	mla	r2, ip, r3, r2
 8022ea2:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8022ea6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8022eaa:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8022eae:	2800      	cmp	r0, #0
 8022eb0:	f000 81a9 	beq.w	8023206 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8022eb4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8022eb8:	950c      	str	r5, [sp, #48]	; 0x30
 8022eba:	0e2d      	lsrs	r5, r5, #24
 8022ebc:	9513      	str	r5, [sp, #76]	; 0x4c
 8022ebe:	b181      	cbz	r1, 8022ee2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8022ec0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8022ec4:	3b01      	subs	r3, #1
 8022ec6:	009b      	lsls	r3, r3, #2
 8022ec8:	3304      	adds	r3, #4
 8022eca:	eb08 0c03 	add.w	ip, r8, r3
 8022ece:	f858 3003 	ldr.w	r3, [r8, r3]
 8022ed2:	9308      	str	r3, [sp, #32]
 8022ed4:	0e1b      	lsrs	r3, r3, #24
 8022ed6:	9311      	str	r3, [sp, #68]	; 0x44
 8022ed8:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8022edc:	930d      	str	r3, [sp, #52]	; 0x34
 8022ede:	0e1b      	lsrs	r3, r3, #24
 8022ee0:	9314      	str	r3, [sp, #80]	; 0x50
 8022ee2:	b280      	uxth	r0, r0
 8022ee4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8022ee6:	b289      	uxth	r1, r1
 8022ee8:	fb00 f901 	mul.w	r9, r0, r1
 8022eec:	0100      	lsls	r0, r0, #4
 8022eee:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022ef2:	eba0 0809 	sub.w	r8, r0, r9
 8022ef6:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8022efa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022efc:	b289      	uxth	r1, r1
 8022efe:	fa1f f888 	uxth.w	r8, r8
 8022f02:	1a5b      	subs	r3, r3, r1
 8022f04:	fb08 f000 	mul.w	r0, r8, r0
 8022f08:	b29b      	uxth	r3, r3
 8022f0a:	fb03 000e 	mla	r0, r3, lr, r0
 8022f0e:	fb01 0005 	mla	r0, r1, r5, r0
 8022f12:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8022f14:	fb09 0005 	mla	r0, r9, r5, r0
 8022f18:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022f1c:	2800      	cmp	r0, #0
 8022f1e:	f000 80fa 	beq.w	8023116 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8022f22:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022f26:	d01b      	beq.n	8022f60 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8022f28:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8022f2c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022f30:	fb0e fa0a 	mul.w	sl, lr, sl
 8022f34:	fb0e fe02 	mul.w	lr, lr, r2
 8022f38:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8022f3c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022f40:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8022f44:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022f48:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022f4c:	4452      	add	r2, sl
 8022f4e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022f52:	0a12      	lsrs	r2, r2, #8
 8022f54:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022f58:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022f5c:	ea42 020c 	orr.w	r2, r2, ip
 8022f60:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8022f62:	2dff      	cmp	r5, #255	; 0xff
 8022f64:	d021      	beq.n	8022faa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8022f66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022f68:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8022f6c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8022f6e:	fb05 fb0b 	mul.w	fp, r5, fp
 8022f72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022f74:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8022f78:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8022f7a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022f7e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022f82:	fb05 fa0a 	mul.w	sl, r5, sl
 8022f86:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022f8a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022f8e:	44de      	add	lr, fp
 8022f90:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022f94:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022f98:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022f9c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022fa0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022fa4:	ea4e 050a 	orr.w	r5, lr, sl
 8022fa8:	950c      	str	r5, [sp, #48]	; 0x30
 8022faa:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8022fac:	2dff      	cmp	r5, #255	; 0xff
 8022fae:	d021      	beq.n	8022ff4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8022fb0:	9d08      	ldr	r5, [sp, #32]
 8022fb2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8022fb6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8022fb8:	fb05 fb0b 	mul.w	fp, r5, fp
 8022fbc:	9d08      	ldr	r5, [sp, #32]
 8022fbe:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8022fc2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8022fc4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022fc8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022fcc:	fb05 fa0a 	mul.w	sl, r5, sl
 8022fd0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022fd4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022fd8:	44de      	add	lr, fp
 8022fda:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022fde:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022fe2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022fe6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022fea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022fee:	ea4e 050a 	orr.w	r5, lr, sl
 8022ff2:	9508      	str	r5, [sp, #32]
 8022ff4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8022ff6:	2dff      	cmp	r5, #255	; 0xff
 8022ff8:	d021      	beq.n	802303e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8022ffa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022ffc:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023000:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023002:	fb05 fb0b 	mul.w	fp, r5, fp
 8023006:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023008:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802300c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802300e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023012:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023016:	fb05 fa0a 	mul.w	sl, r5, sl
 802301a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802301e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023022:	44de      	add	lr, fp
 8023024:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023028:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802302c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023030:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023034:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023038:	ea4e 050a 	orr.w	r5, lr, sl
 802303c:	950d      	str	r5, [sp, #52]	; 0x34
 802303e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023040:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8023044:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023048:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802304c:	9d08      	ldr	r5, [sp, #32]
 802304e:	fb08 fc0c 	mul.w	ip, r8, ip
 8023052:	fb03 cc0e 	mla	ip, r3, lr, ip
 8023056:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802305a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802305c:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023060:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023064:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023066:	fb09 cc0e 	mla	ip, r9, lr, ip
 802306a:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802306e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023070:	fb08 f80e 	mul.w	r8, r8, lr
 8023074:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023078:	fb03 8202 	mla	r2, r3, r2, r8
 802307c:	9b08      	ldr	r3, [sp, #32]
 802307e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023082:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8023086:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023088:	fb01 220a 	mla	r2, r1, sl, r2
 802308c:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8023090:	883b      	ldrh	r3, [r7, #0]
 8023092:	fb09 2901 	mla	r9, r9, r1, r2
 8023096:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023098:	1219      	asrs	r1, r3, #8
 802309a:	4342      	muls	r2, r0
 802309c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80230a0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80230a4:	1c50      	adds	r0, r2, #1
 80230a6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80230aa:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80230ae:	ea4c 0c09 	orr.w	ip, ip, r9
 80230b2:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80230b6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80230ba:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 80230be:	fa5f fc8c 	uxtb.w	ip, ip
 80230c2:	fb12 f205 	smulbb	r2, r2, r5
 80230c6:	b2c0      	uxtb	r0, r0
 80230c8:	fb1c fc05 	smulbb	ip, ip, r5
 80230cc:	fb01 2100 	mla	r1, r1, r0, r2
 80230d0:	10da      	asrs	r2, r3, #3
 80230d2:	fb1e fe05 	smulbb	lr, lr, r5
 80230d6:	00db      	lsls	r3, r3, #3
 80230d8:	b289      	uxth	r1, r1
 80230da:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80230de:	b2db      	uxtb	r3, r3
 80230e0:	fb02 e200 	mla	r2, r2, r0, lr
 80230e4:	fb03 c300 	mla	r3, r3, r0, ip
 80230e8:	b292      	uxth	r2, r2
 80230ea:	fa1f fc83 	uxth.w	ip, r3
 80230ee:	1c4b      	adds	r3, r1, #1
 80230f0:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80230f4:	f10c 0301 	add.w	r3, ip, #1
 80230f8:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80230fc:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8023100:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023104:	430b      	orrs	r3, r1
 8023106:	1c51      	adds	r1, r2, #1
 8023108:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802310c:	0952      	lsrs	r2, r2, #5
 802310e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023112:	4313      	orrs	r3, r2
 8023114:	803b      	strh	r3, [r7, #0]
 8023116:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023118:	3702      	adds	r7, #2
 802311a:	441c      	add	r4, r3
 802311c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802311e:	441e      	add	r6, r3
 8023120:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023122:	3b01      	subs	r3, #1
 8023124:	9318      	str	r3, [sp, #96]	; 0x60
 8023126:	e698      	b.n	8022e5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023128:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802312a:	441c      	add	r4, r3
 802312c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802312e:	441e      	add	r6, r3
 8023130:	9b07      	ldr	r3, [sp, #28]
 8023132:	3b01      	subs	r3, #1
 8023134:	9307      	str	r3, [sp, #28]
 8023136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023138:	3302      	adds	r3, #2
 802313a:	930a      	str	r3, [sp, #40]	; 0x28
 802313c:	e66d      	b.n	8022e1a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 802313e:	d023      	beq.n	8023188 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8023140:	9b07      	ldr	r3, [sp, #28]
 8023142:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8023144:	3b01      	subs	r3, #1
 8023146:	fb00 4003 	mla	r0, r0, r3, r4
 802314a:	1400      	asrs	r0, r0, #16
 802314c:	f53f ae82 	bmi.w	8022e54 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023150:	3901      	subs	r1, #1
 8023152:	4288      	cmp	r0, r1
 8023154:	f6bf ae7e 	bge.w	8022e54 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023158:	992a      	ldr	r1, [sp, #168]	; 0xa8
 802315a:	fb01 6303 	mla	r3, r1, r3, r6
 802315e:	141b      	asrs	r3, r3, #16
 8023160:	f53f ae78 	bmi.w	8022e54 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023164:	3a01      	subs	r2, #1
 8023166:	4293      	cmp	r3, r2
 8023168:	f6bf ae74 	bge.w	8022e54 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802316c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8023170:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8023174:	f1bb 0f00 	cmp.w	fp, #0
 8023178:	dc6c      	bgt.n	8023254 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 802317a:	9b07      	ldr	r3, [sp, #28]
 802317c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8023180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023182:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8023186:	930a      	str	r3, [sp, #40]	; 0x28
 8023188:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802318a:	2b00      	cmp	r3, #0
 802318c:	f340 81b3 	ble.w	80234f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8023190:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023194:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023196:	ee30 0a04 	vadd.f32	s0, s0, s8
 802319a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802319e:	eef0 6a62 	vmov.f32	s13, s5
 80231a2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80231a6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80231aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80231ae:	ee16 4a90 	vmov	r4, s13
 80231b2:	eef0 6a43 	vmov.f32	s13, s6
 80231b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80231ba:	ee16 6a90 	vmov	r6, s13
 80231be:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80231c2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80231c6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80231ca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80231ce:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80231d2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80231d6:	ee12 2a90 	vmov	r2, s5
 80231da:	eef0 2a47 	vmov.f32	s5, s14
 80231de:	fb92 f3f3 	sdiv	r3, r2, r3
 80231e2:	ee13 2a10 	vmov	r2, s6
 80231e6:	9329      	str	r3, [sp, #164]	; 0xa4
 80231e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80231ea:	eeb0 3a67 	vmov.f32	s6, s15
 80231ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80231f2:	932a      	str	r3, [sp, #168]	; 0xa8
 80231f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80231f6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80231f8:	3b01      	subs	r3, #1
 80231fa:	9317      	str	r3, [sp, #92]	; 0x5c
 80231fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80231fe:	bf08      	it	eq
 8023200:	4613      	moveq	r3, r2
 8023202:	9307      	str	r3, [sp, #28]
 8023204:	e5fb      	b.n	8022dfe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8023206:	2900      	cmp	r1, #0
 8023208:	f43f ae6b 	beq.w	8022ee2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802320c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8023210:	9308      	str	r3, [sp, #32]
 8023212:	0e1b      	lsrs	r3, r3, #24
 8023214:	9311      	str	r3, [sp, #68]	; 0x44
 8023216:	e664      	b.n	8022ee2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8023218:	f112 0801 	adds.w	r8, r2, #1
 802321c:	f53f af7b 	bmi.w	8023116 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023220:	4543      	cmp	r3, r8
 8023222:	f6ff af78 	blt.w	8023116 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023226:	f11c 0801 	adds.w	r8, ip, #1
 802322a:	f53f af74 	bmi.w	8023116 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802322e:	45c6      	cmp	lr, r8
 8023230:	f6ff af71 	blt.w	8023116 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023234:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8023236:	b21b      	sxth	r3, r3
 8023238:	9201      	str	r2, [sp, #4]
 802323a:	fa0f f28e 	sxth.w	r2, lr
 802323e:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8023242:	e9cd c002 	strd	ip, r0, [sp, #8]
 8023246:	9200      	str	r2, [sp, #0]
 8023248:	4639      	mov	r1, r7
 802324a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802324c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802324e:	f7ff fc79 	bl	8022b44 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8023252:	e760      	b.n	8023116 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023254:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023256:	1427      	asrs	r7, r4, #16
 8023258:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802325a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802325e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023262:	1433      	asrs	r3, r6, #16
 8023264:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023268:	fb01 7303 	mla	r3, r1, r3, r7
 802326c:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8023270:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8023274:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023278:	2a00      	cmp	r2, #0
 802327a:	f000 8133 	beq.w	80234e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 802327e:	687d      	ldr	r5, [r7, #4]
 8023280:	950e      	str	r5, [sp, #56]	; 0x38
 8023282:	0e2d      	lsrs	r5, r5, #24
 8023284:	9515      	str	r5, [sp, #84]	; 0x54
 8023286:	b178      	cbz	r0, 80232a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8023288:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 802328c:	3901      	subs	r1, #1
 802328e:	0089      	lsls	r1, r1, #2
 8023290:	3104      	adds	r1, #4
 8023292:	eb07 0e01 	add.w	lr, r7, r1
 8023296:	5879      	ldr	r1, [r7, r1]
 8023298:	9109      	str	r1, [sp, #36]	; 0x24
 802329a:	0e09      	lsrs	r1, r1, #24
 802329c:	9112      	str	r1, [sp, #72]	; 0x48
 802329e:	f8de 1004 	ldr.w	r1, [lr, #4]
 80232a2:	910f      	str	r1, [sp, #60]	; 0x3c
 80232a4:	0e09      	lsrs	r1, r1, #24
 80232a6:	9116      	str	r1, [sp, #88]	; 0x58
 80232a8:	b292      	uxth	r2, r2
 80232aa:	9915      	ldr	r1, [sp, #84]	; 0x54
 80232ac:	b280      	uxth	r0, r0
 80232ae:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80232b0:	fb02 f800 	mul.w	r8, r2, r0
 80232b4:	0112      	lsls	r2, r2, #4
 80232b6:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80232ba:	eba2 0e08 	sub.w	lr, r2, r8
 80232be:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80232c2:	b280      	uxth	r0, r0
 80232c4:	fa1f fe8e 	uxth.w	lr, lr
 80232c8:	1a12      	subs	r2, r2, r0
 80232ca:	fb0e f101 	mul.w	r1, lr, r1
 80232ce:	b292      	uxth	r2, r2
 80232d0:	fb02 110c 	mla	r1, r2, ip, r1
 80232d4:	fb00 1105 	mla	r1, r0, r5, r1
 80232d8:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80232da:	fb08 1105 	mla	r1, r8, r5, r1
 80232de:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80232e2:	2900      	cmp	r1, #0
 80232e4:	f000 80f5 	beq.w	80234d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 80232e8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80232ec:	d019      	beq.n	8023322 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 80232ee:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80232f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80232f6:	fb0c fa0a 	mul.w	sl, ip, sl
 80232fa:	fb0c fc03 	mul.w	ip, ip, r3
 80232fe:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023302:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023306:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802330a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802330e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023312:	4453      	add	r3, sl
 8023314:	0a3f      	lsrs	r7, r7, #8
 8023316:	0a1b      	lsrs	r3, r3, #8
 8023318:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802331c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023320:	433b      	orrs	r3, r7
 8023322:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023324:	2dff      	cmp	r5, #255	; 0xff
 8023326:	d020      	beq.n	802336a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8023328:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802332a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802332e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023330:	436f      	muls	r7, r5
 8023332:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023334:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023338:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802333c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802333e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023342:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023346:	fb05 fa0a 	mul.w	sl, r5, sl
 802334a:	44bc      	add	ip, r7
 802334c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023350:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023354:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023358:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802335c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023360:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023364:	ea4c 050a 	orr.w	r5, ip, sl
 8023368:	950e      	str	r5, [sp, #56]	; 0x38
 802336a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802336c:	2dff      	cmp	r5, #255	; 0xff
 802336e:	d020      	beq.n	80233b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8023370:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023372:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8023376:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023378:	436f      	muls	r7, r5
 802337a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802337c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023380:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023384:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023386:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802338a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802338e:	fb05 fa0a 	mul.w	sl, r5, sl
 8023392:	44bc      	add	ip, r7
 8023394:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023398:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802339c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80233a0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80233a4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80233a8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80233ac:	ea4c 050a 	orr.w	r5, ip, sl
 80233b0:	9509      	str	r5, [sp, #36]	; 0x24
 80233b2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80233b4:	2dff      	cmp	r5, #255	; 0xff
 80233b6:	d020      	beq.n	80233fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 80233b8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80233ba:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80233be:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80233c0:	436f      	muls	r7, r5
 80233c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80233c4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80233c8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80233cc:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80233ce:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80233d2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80233d6:	fb05 fa0a 	mul.w	sl, r5, sl
 80233da:	44bc      	add	ip, r7
 80233dc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80233e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80233e4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80233e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80233ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80233f0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80233f4:	ea4c 050a 	orr.w	r5, ip, sl
 80233f8:	950f      	str	r5, [sp, #60]	; 0x3c
 80233fa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80233fc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023400:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023404:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8023408:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802340a:	fb0e f707 	mul.w	r7, lr, r7
 802340e:	fb02 770c 	mla	r7, r2, ip, r7
 8023412:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023416:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023418:	fb00 770c 	mla	r7, r0, ip, r7
 802341c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023420:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023422:	fb08 770c 	mla	r7, r8, ip, r7
 8023426:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802342a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802342c:	fb0e fe0c 	mul.w	lr, lr, ip
 8023430:	0a3f      	lsrs	r7, r7, #8
 8023432:	fb02 e303 	mla	r3, r2, r3, lr
 8023436:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023438:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802343c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8023440:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023442:	fb00 330a 	mla	r3, r0, sl, r3
 8023446:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802344a:	f8b9 0000 	ldrh.w	r0, [r9]
 802344e:	fb08 3c0c 	mla	ip, r8, ip, r3
 8023452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023454:	1202      	asrs	r2, r0, #8
 8023456:	4359      	muls	r1, r3
 8023458:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802345c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8023460:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023464:	1c4b      	adds	r3, r1, #1
 8023466:	ea47 070c 	orr.w	r7, r7, ip
 802346a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802346e:	0c3b      	lsrs	r3, r7, #16
 8023470:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8023474:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8023478:	b2ff      	uxtb	r7, r7
 802347a:	fb13 f305 	smulbb	r3, r3, r5
 802347e:	b2c9      	uxtb	r1, r1
 8023480:	fb17 f705 	smulbb	r7, r7, r5
 8023484:	fb02 3201 	mla	r2, r2, r1, r3
 8023488:	10c3      	asrs	r3, r0, #3
 802348a:	fb1c fc05 	smulbb	ip, ip, r5
 802348e:	00c0      	lsls	r0, r0, #3
 8023490:	b292      	uxth	r2, r2
 8023492:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8023496:	b2c0      	uxtb	r0, r0
 8023498:	fb03 c301 	mla	r3, r3, r1, ip
 802349c:	fb00 7001 	mla	r0, r0, r1, r7
 80234a0:	1c51      	adds	r1, r2, #1
 80234a2:	b29b      	uxth	r3, r3
 80234a4:	b280      	uxth	r0, r0
 80234a6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80234aa:	f100 0c01 	add.w	ip, r0, #1
 80234ae:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80234b2:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 80234b6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80234ba:	ea4c 0202 	orr.w	r2, ip, r2
 80234be:	f103 0c01 	add.w	ip, r3, #1
 80234c2:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80234c6:	095b      	lsrs	r3, r3, #5
 80234c8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80234cc:	431a      	orrs	r2, r3
 80234ce:	f8a9 2000 	strh.w	r2, [r9]
 80234d2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80234d4:	f109 0902 	add.w	r9, r9, #2
 80234d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80234dc:	441c      	add	r4, r3
 80234de:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80234e0:	441e      	add	r6, r3
 80234e2:	e647      	b.n	8023174 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80234e4:	2800      	cmp	r0, #0
 80234e6:	f43f aedf 	beq.w	80232a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80234ea:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80234ee:	9109      	str	r1, [sp, #36]	; 0x24
 80234f0:	0e09      	lsrs	r1, r1, #24
 80234f2:	9112      	str	r1, [sp, #72]	; 0x48
 80234f4:	e6d8      	b.n	80232a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80234f6:	b01d      	add	sp, #116	; 0x74
 80234f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080234fc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 80234fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023500:	b085      	sub	sp, #20
 8023502:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8023506:	9102      	str	r1, [sp, #8]
 8023508:	2c00      	cmp	r4, #0
 802350a:	fb04 7103 	mla	r1, r4, r3, r7
 802350e:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8023512:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8023516:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 802351a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 802351e:	f2c0 810c 	blt.w	802373a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8023522:	45a6      	cmp	lr, r4
 8023524:	f340 8109 	ble.w	802373a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8023528:	2f00      	cmp	r7, #0
 802352a:	f2c0 8104 	blt.w	8023736 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 802352e:	42bb      	cmp	r3, r7
 8023530:	f340 8101 	ble.w	8023736 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8023534:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8023538:	1c7a      	adds	r2, r7, #1
 802353a:	f100 8101 	bmi.w	8023740 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 802353e:	4293      	cmp	r3, r2
 8023540:	f340 80fe 	ble.w	8023740 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8023544:	2e00      	cmp	r6, #0
 8023546:	f000 80fd 	beq.w	8023744 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 802354a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 802354e:	3401      	adds	r4, #1
 8023550:	f100 80fc 	bmi.w	802374c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8023554:	45a6      	cmp	lr, r4
 8023556:	f340 80f9 	ble.w	802374c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 802355a:	2800      	cmp	r0, #0
 802355c:	f000 80f9 	beq.w	8023752 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8023560:	2f00      	cmp	r7, #0
 8023562:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8023566:	f2c0 80ef 	blt.w	8023748 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 802356a:	42bb      	cmp	r3, r7
 802356c:	f340 80ec 	ble.w	8023748 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8023570:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8023574:	3701      	adds	r7, #1
 8023576:	f100 80ef 	bmi.w	8023758 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 802357a:	42bb      	cmp	r3, r7
 802357c:	f340 80ec 	ble.w	8023758 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8023580:	2e00      	cmp	r6, #0
 8023582:	f000 80eb 	beq.w	802375c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 8023586:	6852      	ldr	r2, [r2, #4]
 8023588:	b2b6      	uxth	r6, r6
 802358a:	b280      	uxth	r0, r0
 802358c:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8023590:	fb00 fe06 	mul.w	lr, r0, r6
 8023594:	0136      	lsls	r6, r6, #4
 8023596:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802359a:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 802359e:	eba6 070e 	sub.w	r7, r6, lr
 80235a2:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 80235a6:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80235aa:	b280      	uxth	r0, r0
 80235ac:	b2bf      	uxth	r7, r7
 80235ae:	1a1b      	subs	r3, r3, r0
 80235b0:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80235b4:	fb07 f60a 	mul.w	r6, r7, sl
 80235b8:	b29b      	uxth	r3, r3
 80235ba:	fb0b 6603 	mla	r6, fp, r3, r6
 80235be:	fb00 6609 	mla	r6, r0, r9, r6
 80235c2:	fb0e 6608 	mla	r6, lr, r8, r6
 80235c6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80235ca:	9600      	str	r6, [sp, #0]
 80235cc:	2e00      	cmp	r6, #0
 80235ce:	f000 80af 	beq.w	8023730 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 80235d2:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80235d6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80235da:	9e02      	ldr	r6, [sp, #8]
 80235dc:	fb0b fc0c 	mul.w	ip, fp, ip
 80235e0:	fb0b f505 	mul.w	r5, fp, r5
 80235e4:	8836      	ldrh	r6, [r6, #0]
 80235e6:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80235ea:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80235ee:	9501      	str	r5, [sp, #4]
 80235f0:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80235f4:	44dc      	add	ip, fp
 80235f6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80235fa:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 80235fe:	9503      	str	r5, [sp, #12]
 8023600:	9d01      	ldr	r5, [sp, #4]
 8023602:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8023606:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802360a:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 802360e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8023612:	fb0a fc0c 	mul.w	ip, sl, ip
 8023616:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802361a:	fb0a fa01 	mul.w	sl, sl, r1
 802361e:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8023622:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023626:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 802362a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802362e:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8023632:	4465      	add	r5, ip
 8023634:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023638:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802363c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023640:	fb09 fc0c 	mul.w	ip, r9, ip
 8023644:	0a2d      	lsrs	r5, r5, #8
 8023646:	fb09 f904 	mul.w	r9, r9, r4
 802364a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802364e:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8023652:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023656:	f509 7480 	add.w	r4, r9, #256	; 0x100
 802365a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802365e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8023662:	437d      	muls	r5, r7
 8023664:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8023668:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 802366c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023670:	4461      	add	r1, ip
 8023672:	fb08 f404 	mul.w	r4, r8, r4
 8023676:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802367a:	fb08 f802 	mul.w	r8, r8, r2
 802367e:	0a09      	lsrs	r1, r1, #8
 8023680:	0a22      	lsrs	r2, r4, #8
 8023682:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8023686:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802368a:	fb07 f70a 	mul.w	r7, r7, sl
 802368e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023692:	4414      	add	r4, r2
 8023694:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8023698:	0a24      	lsrs	r4, r4, #8
 802369a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802369e:	9a03      	ldr	r2, [sp, #12]
 80236a0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80236a4:	fb02 5503 	mla	r5, r2, r3, r5
 80236a8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80236ac:	fb04 540e 	mla	r4, r4, lr, r5
 80236b0:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80236b4:	fb01 4100 	mla	r1, r1, r0, r4
 80236b8:	0a09      	lsrs	r1, r1, #8
 80236ba:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 80236be:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 80236c2:	fb03 7101 	mla	r1, r3, r1, r7
 80236c6:	9b00      	ldr	r3, [sp, #0]
 80236c8:	fb0e 1e08 	mla	lr, lr, r8, r1
 80236cc:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80236d0:	43da      	mvns	r2, r3
 80236d2:	1233      	asrs	r3, r6, #8
 80236d4:	fb00 e101 	mla	r1, r0, r1, lr
 80236d8:	10f0      	asrs	r0, r6, #3
 80236da:	b2d2      	uxtb	r2, r2
 80236dc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80236e0:	0a09      	lsrs	r1, r1, #8
 80236e2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80236e6:	00f6      	lsls	r6, r6, #3
 80236e8:	4353      	muls	r3, r2
 80236ea:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80236ee:	4350      	muls	r0, r2
 80236f0:	b2f6      	uxtb	r6, r6
 80236f2:	4321      	orrs	r1, r4
 80236f4:	4356      	muls	r6, r2
 80236f6:	1c5a      	adds	r2, r3, #1
 80236f8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80236fc:	0c0b      	lsrs	r3, r1, #16
 80236fe:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023702:	1c42      	adds	r2, r0, #1
 8023704:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023708:	0a0a      	lsrs	r2, r1, #8
 802370a:	021b      	lsls	r3, r3, #8
 802370c:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023710:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8023714:	00d2      	lsls	r2, r2, #3
 8023716:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802371a:	4313      	orrs	r3, r2
 802371c:	1c72      	adds	r2, r6, #1
 802371e:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8023722:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8023726:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802372a:	4319      	orrs	r1, r3
 802372c:	9b02      	ldr	r3, [sp, #8]
 802372e:	8019      	strh	r1, [r3, #0]
 8023730:	b005      	add	sp, #20
 8023732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023736:	2500      	movs	r5, #0
 8023738:	e6fe      	b.n	8023538 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 802373a:	2100      	movs	r1, #0
 802373c:	460d      	mov	r5, r1
 802373e:	e706      	b.n	802354e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8023740:	2100      	movs	r1, #0
 8023742:	e704      	b.n	802354e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8023744:	4631      	mov	r1, r6
 8023746:	e702      	b.n	802354e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8023748:	2400      	movs	r4, #0
 802374a:	e713      	b.n	8023574 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 802374c:	2200      	movs	r2, #0
 802374e:	4614      	mov	r4, r2
 8023750:	e71a      	b.n	8023588 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8023752:	4602      	mov	r2, r0
 8023754:	4604      	mov	r4, r0
 8023756:	e717      	b.n	8023588 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8023758:	2200      	movs	r2, #0
 802375a:	e715      	b.n	8023588 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802375c:	4632      	mov	r2, r6
 802375e:	e713      	b.n	8023588 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

08023760 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023764:	b09b      	sub	sp, #108	; 0x6c
 8023766:	9218      	str	r2, [sp, #96]	; 0x60
 8023768:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802376a:	9019      	str	r0, [sp, #100]	; 0x64
 802376c:	9116      	str	r1, [sp, #88]	; 0x58
 802376e:	6850      	ldr	r0, [r2, #4]
 8023770:	9307      	str	r3, [sp, #28]
 8023772:	6812      	ldr	r2, [r2, #0]
 8023774:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8023778:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 802377c:	fb00 1303 	mla	r3, r0, r3, r1
 8023780:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023784:	930a      	str	r3, [sp, #40]	; 0x28
 8023786:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023788:	681b      	ldr	r3, [r3, #0]
 802378a:	930f      	str	r3, [sp, #60]	; 0x3c
 802378c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802378e:	2b00      	cmp	r3, #0
 8023790:	dc03      	bgt.n	802379a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8023792:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023794:	2b00      	cmp	r3, #0
 8023796:	f340 8387 	ble.w	8023ea8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 802379a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802379c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80237a0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80237a4:	1e48      	subs	r0, r1, #1
 80237a6:	1e57      	subs	r7, r2, #1
 80237a8:	9b07      	ldr	r3, [sp, #28]
 80237aa:	2b00      	cmp	r3, #0
 80237ac:	f340 8166 	ble.w	8023a7c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80237b0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80237b4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80237b8:	d406      	bmi.n	80237c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80237ba:	4584      	cmp	ip, r0
 80237bc:	da04      	bge.n	80237c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80237be:	2b00      	cmp	r3, #0
 80237c0:	db02      	blt.n	80237c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80237c2:	42bb      	cmp	r3, r7
 80237c4:	f2c0 815b 	blt.w	8023a7e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80237c8:	f11c 0c01 	adds.w	ip, ip, #1
 80237cc:	f100 814b 	bmi.w	8023a66 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80237d0:	4561      	cmp	r1, ip
 80237d2:	f2c0 8148 	blt.w	8023a66 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80237d6:	3301      	adds	r3, #1
 80237d8:	f100 8145 	bmi.w	8023a66 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80237dc:	429a      	cmp	r2, r3
 80237de:	f2c0 8142 	blt.w	8023a66 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80237e2:	9b07      	ldr	r3, [sp, #28]
 80237e4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80237e6:	9317      	str	r3, [sp, #92]	; 0x5c
 80237e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80237ea:	2b00      	cmp	r3, #0
 80237ec:	f340 8165 	ble.w	8023aba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80237f0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80237f2:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80237f6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80237f8:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80237fc:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023800:	1422      	asrs	r2, r4, #16
 8023802:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023806:	689b      	ldr	r3, [r3, #8]
 8023808:	f100 81d5 	bmi.w	8023bb6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802380c:	f103 38ff 	add.w	r8, r3, #4294967295
 8023810:	4542      	cmp	r2, r8
 8023812:	f280 81d0 	bge.w	8023bb6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8023816:	f1bc 0f00 	cmp.w	ip, #0
 802381a:	f2c0 81cc 	blt.w	8023bb6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802381e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8023822:	45c4      	cmp	ip, r8
 8023824:	f280 81c7 	bge.w	8023bb6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8023828:	b21b      	sxth	r3, r3
 802382a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802382c:	fb0c 2203 	mla	r2, ip, r3, r2
 8023830:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8023834:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8023838:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802383c:	2900      	cmp	r1, #0
 802383e:	f000 8182 	beq.w	8023b46 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8023842:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8023846:	950b      	str	r5, [sp, #44]	; 0x2c
 8023848:	0e2d      	lsrs	r5, r5, #24
 802384a:	9512      	str	r5, [sp, #72]	; 0x48
 802384c:	b180      	cbz	r0, 8023870 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802384e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8023852:	3b01      	subs	r3, #1
 8023854:	009b      	lsls	r3, r3, #2
 8023856:	3304      	adds	r3, #4
 8023858:	eb08 0c03 	add.w	ip, r8, r3
 802385c:	f858 3003 	ldr.w	r3, [r8, r3]
 8023860:	9308      	str	r3, [sp, #32]
 8023862:	0e1b      	lsrs	r3, r3, #24
 8023864:	9310      	str	r3, [sp, #64]	; 0x40
 8023866:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802386a:	930c      	str	r3, [sp, #48]	; 0x30
 802386c:	0e1b      	lsrs	r3, r3, #24
 802386e:	9313      	str	r3, [sp, #76]	; 0x4c
 8023870:	b289      	uxth	r1, r1
 8023872:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023874:	b280      	uxth	r0, r0
 8023876:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023878:	fb01 f900 	mul.w	r9, r1, r0
 802387c:	0109      	lsls	r1, r1, #4
 802387e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023882:	eba1 0809 	sub.w	r8, r1, r9
 8023886:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 802388a:	b280      	uxth	r0, r0
 802388c:	fa1f f888 	uxth.w	r8, r8
 8023890:	1a09      	subs	r1, r1, r0
 8023892:	fb08 f303 	mul.w	r3, r8, r3
 8023896:	b289      	uxth	r1, r1
 8023898:	fb01 330e 	mla	r3, r1, lr, r3
 802389c:	fb00 3305 	mla	r3, r0, r5, r3
 80238a0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80238a2:	fb09 3305 	mla	r3, r9, r5, r3
 80238a6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80238aa:	2b00      	cmp	r3, #0
 80238ac:	f000 80d2 	beq.w	8023a54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80238b0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80238b4:	d01b      	beq.n	80238ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 80238b6:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80238ba:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80238be:	fb0e fa0a 	mul.w	sl, lr, sl
 80238c2:	fb0e fe02 	mul.w	lr, lr, r2
 80238c6:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80238ca:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80238ce:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80238d2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80238d6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80238da:	4452      	add	r2, sl
 80238dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80238e0:	0a12      	lsrs	r2, r2, #8
 80238e2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80238e6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80238ea:	ea42 020c 	orr.w	r2, r2, ip
 80238ee:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80238f0:	2dff      	cmp	r5, #255	; 0xff
 80238f2:	d021      	beq.n	8023938 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80238f4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80238f6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80238fa:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80238fc:	fb05 fb0b 	mul.w	fp, r5, fp
 8023900:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023902:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023906:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023908:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802390c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023910:	fb05 fa0a 	mul.w	sl, r5, sl
 8023914:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023918:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802391c:	44de      	add	lr, fp
 802391e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023922:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023926:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802392a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802392e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023932:	ea4e 050a 	orr.w	r5, lr, sl
 8023936:	950b      	str	r5, [sp, #44]	; 0x2c
 8023938:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802393a:	2dff      	cmp	r5, #255	; 0xff
 802393c:	d021      	beq.n	8023982 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 802393e:	9d08      	ldr	r5, [sp, #32]
 8023940:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023944:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023946:	fb05 fb0b 	mul.w	fp, r5, fp
 802394a:	9d08      	ldr	r5, [sp, #32]
 802394c:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8023950:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023952:	fb05 fa0e 	mul.w	sl, r5, lr
 8023956:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802395a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802395e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023962:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023966:	44de      	add	lr, fp
 8023968:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802396c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023970:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023974:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023978:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802397c:	ea4e 050a 	orr.w	r5, lr, sl
 8023980:	9508      	str	r5, [sp, #32]
 8023982:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023984:	2dff      	cmp	r5, #255	; 0xff
 8023986:	d021      	beq.n	80239cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8023988:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802398a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802398e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023990:	fb05 fb0b 	mul.w	fp, r5, fp
 8023994:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023996:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802399a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802399c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80239a0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80239a4:	fb05 fa0a 	mul.w	sl, r5, sl
 80239a8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80239ac:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80239b0:	44de      	add	lr, fp
 80239b2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80239b6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80239ba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80239be:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80239c2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80239c6:	ea4e 050a 	orr.w	r5, lr, sl
 80239ca:	950c      	str	r5, [sp, #48]	; 0x30
 80239cc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80239ce:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80239d2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80239d6:	2bff      	cmp	r3, #255	; 0xff
 80239d8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80239dc:	9d08      	ldr	r5, [sp, #32]
 80239de:	fb08 fc0c 	mul.w	ip, r8, ip
 80239e2:	fb01 cc0e 	mla	ip, r1, lr, ip
 80239e6:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80239ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80239ec:	fb00 cc0e 	mla	ip, r0, lr, ip
 80239f0:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80239f4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80239f6:	fb09 cc0e 	mla	ip, r9, lr, ip
 80239fa:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80239fe:	fb08 f80e 	mul.w	r8, r8, lr
 8023a02:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023a06:	fb01 8202 	mla	r2, r1, r2, r8
 8023a0a:	9908      	ldr	r1, [sp, #32]
 8023a0c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023a10:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8023a14:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023a16:	fb00 220a 	mla	r2, r0, sl, r2
 8023a1a:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8023a1e:	fb09 2900 	mla	r9, r9, r0, r2
 8023a22:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023a26:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023a2a:	ea4c 0c09 	orr.w	ip, ip, r9
 8023a2e:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8023a32:	f040 8091 	bne.w	8023b58 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8023a36:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8023a3a:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8023a3e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023a42:	f022 0207 	bic.w	r2, r2, #7
 8023a46:	431a      	orrs	r2, r3
 8023a48:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8023a4c:	ea4c 0c02 	orr.w	ip, ip, r2
 8023a50:	f8a7 c000 	strh.w	ip, [r7]
 8023a54:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023a56:	3702      	adds	r7, #2
 8023a58:	441c      	add	r4, r3
 8023a5a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023a5c:	441e      	add	r6, r3
 8023a5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023a60:	3b01      	subs	r3, #1
 8023a62:	9317      	str	r3, [sp, #92]	; 0x5c
 8023a64:	e6c0      	b.n	80237e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8023a66:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023a68:	441c      	add	r4, r3
 8023a6a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023a6c:	441e      	add	r6, r3
 8023a6e:	9b07      	ldr	r3, [sp, #28]
 8023a70:	3b01      	subs	r3, #1
 8023a72:	9307      	str	r3, [sp, #28]
 8023a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023a76:	3302      	adds	r3, #2
 8023a78:	930a      	str	r3, [sp, #40]	; 0x28
 8023a7a:	e695      	b.n	80237a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8023a7c:	d024      	beq.n	8023ac8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8023a7e:	9b07      	ldr	r3, [sp, #28]
 8023a80:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8023a82:	3b01      	subs	r3, #1
 8023a84:	fb00 4003 	mla	r0, r0, r3, r4
 8023a88:	1400      	asrs	r0, r0, #16
 8023a8a:	f53f aeaa 	bmi.w	80237e2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8023a8e:	3901      	subs	r1, #1
 8023a90:	4288      	cmp	r0, r1
 8023a92:	f6bf aea6 	bge.w	80237e2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8023a96:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8023a98:	fb01 6303 	mla	r3, r1, r3, r6
 8023a9c:	141b      	asrs	r3, r3, #16
 8023a9e:	f53f aea0 	bmi.w	80237e2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8023aa2:	3a01      	subs	r2, #1
 8023aa4:	4293      	cmp	r3, r2
 8023aa6:	f6bf ae9c 	bge.w	80237e2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8023aaa:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8023aae:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8023ab2:	f1bb 0f00 	cmp.w	fp, #0
 8023ab6:	f300 809a 	bgt.w	8023bee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8023aba:	9b07      	ldr	r3, [sp, #28]
 8023abc:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8023ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023ac2:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8023ac6:	930a      	str	r3, [sp, #40]	; 0x28
 8023ac8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023aca:	2b00      	cmp	r3, #0
 8023acc:	f340 81ec 	ble.w	8023ea8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8023ad0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023ad4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023ad6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023ada:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023ade:	eef0 6a62 	vmov.f32	s13, s5
 8023ae2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023ae6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023aea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023aee:	ee16 4a90 	vmov	r4, s13
 8023af2:	eef0 6a43 	vmov.f32	s13, s6
 8023af6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023afa:	ee16 6a90 	vmov	r6, s13
 8023afe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023b02:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023b06:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023b0a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023b0e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023b12:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023b16:	ee12 2a90 	vmov	r2, s5
 8023b1a:	eef0 2a47 	vmov.f32	s5, s14
 8023b1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023b22:	ee13 2a10 	vmov	r2, s6
 8023b26:	9327      	str	r3, [sp, #156]	; 0x9c
 8023b28:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023b2a:	eeb0 3a67 	vmov.f32	s6, s15
 8023b2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023b32:	9328      	str	r3, [sp, #160]	; 0xa0
 8023b34:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023b36:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8023b38:	3b01      	subs	r3, #1
 8023b3a:	9316      	str	r3, [sp, #88]	; 0x58
 8023b3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023b3e:	bf08      	it	eq
 8023b40:	4613      	moveq	r3, r2
 8023b42:	9307      	str	r3, [sp, #28]
 8023b44:	e622      	b.n	802378c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8023b46:	2800      	cmp	r0, #0
 8023b48:	f43f ae92 	beq.w	8023870 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8023b4c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8023b50:	9308      	str	r3, [sp, #32]
 8023b52:	0e1b      	lsrs	r3, r3, #24
 8023b54:	9310      	str	r3, [sp, #64]	; 0x40
 8023b56:	e68b      	b.n	8023870 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8023b58:	8839      	ldrh	r1, [r7, #0]
 8023b5a:	43db      	mvns	r3, r3
 8023b5c:	4dd4      	ldr	r5, [pc, #848]	; (8023eb0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8023b5e:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8023b62:	fa5f f883 	uxtb.w	r8, r3
 8023b66:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8023b6a:	10c8      	asrs	r0, r1, #3
 8023b6c:	00cb      	lsls	r3, r1, #3
 8023b6e:	fb0e fe08 	mul.w	lr, lr, r8
 8023b72:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8023b76:	b2db      	uxtb	r3, r3
 8023b78:	f10e 0101 	add.w	r1, lr, #1
 8023b7c:	fb00 f008 	mul.w	r0, r0, r8
 8023b80:	fb03 f308 	mul.w	r3, r3, r8
 8023b84:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8023b88:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8023b8c:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8023b90:	f100 0e01 	add.w	lr, r0, #1
 8023b94:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8023b98:	b2c9      	uxtb	r1, r1
 8023b9a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023b9e:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8023ba2:	00d2      	lsls	r2, r2, #3
 8023ba4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023ba8:	430a      	orrs	r2, r1
 8023baa:	1c59      	adds	r1, r3, #1
 8023bac:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8023bb0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8023bb4:	e748      	b.n	8023a48 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8023bb6:	f112 0801 	adds.w	r8, r2, #1
 8023bba:	f53f af4b 	bmi.w	8023a54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023bbe:	4543      	cmp	r3, r8
 8023bc0:	f6ff af48 	blt.w	8023a54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023bc4:	f11c 0801 	adds.w	r8, ip, #1
 8023bc8:	f53f af44 	bmi.w	8023a54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023bcc:	45c6      	cmp	lr, r8
 8023bce:	f6ff af41 	blt.w	8023a54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023bd2:	b21b      	sxth	r3, r3
 8023bd4:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8023bd8:	fa0f f28e 	sxth.w	r2, lr
 8023bdc:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8023be0:	9200      	str	r2, [sp, #0]
 8023be2:	4639      	mov	r1, r7
 8023be4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023be6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8023be8:	f7ff fc88 	bl	80234fc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8023bec:	e732      	b.n	8023a54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023bee:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023bf0:	1421      	asrs	r1, r4, #16
 8023bf2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023bf4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023bf8:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8023bfc:	1433      	asrs	r3, r6, #16
 8023bfe:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023c02:	fb07 1303 	mla	r3, r7, r3, r1
 8023c06:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8023c08:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8023c0c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8023c10:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023c14:	2a00      	cmp	r2, #0
 8023c16:	f000 8108 	beq.w	8023e2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8023c1a:	684d      	ldr	r5, [r1, #4]
 8023c1c:	950d      	str	r5, [sp, #52]	; 0x34
 8023c1e:	0e2d      	lsrs	r5, r5, #24
 8023c20:	9514      	str	r5, [sp, #80]	; 0x50
 8023c22:	b178      	cbz	r0, 8023c44 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8023c24:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8023c28:	3f01      	subs	r7, #1
 8023c2a:	00bf      	lsls	r7, r7, #2
 8023c2c:	3704      	adds	r7, #4
 8023c2e:	eb01 0e07 	add.w	lr, r1, r7
 8023c32:	59c9      	ldr	r1, [r1, r7]
 8023c34:	9109      	str	r1, [sp, #36]	; 0x24
 8023c36:	0e09      	lsrs	r1, r1, #24
 8023c38:	9111      	str	r1, [sp, #68]	; 0x44
 8023c3a:	f8de 1004 	ldr.w	r1, [lr, #4]
 8023c3e:	910e      	str	r1, [sp, #56]	; 0x38
 8023c40:	0e09      	lsrs	r1, r1, #24
 8023c42:	9115      	str	r1, [sp, #84]	; 0x54
 8023c44:	b292      	uxth	r2, r2
 8023c46:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023c48:	b280      	uxth	r0, r0
 8023c4a:	fb02 f900 	mul.w	r9, r2, r0
 8023c4e:	0112      	lsls	r2, r2, #4
 8023c50:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023c54:	eba2 0e09 	sub.w	lr, r2, r9
 8023c58:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8023c5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023c5e:	b280      	uxth	r0, r0
 8023c60:	fa1f fe8e 	uxth.w	lr, lr
 8023c64:	1a09      	subs	r1, r1, r0
 8023c66:	fb0e f202 	mul.w	r2, lr, r2
 8023c6a:	b289      	uxth	r1, r1
 8023c6c:	fb01 220c 	mla	r2, r1, ip, r2
 8023c70:	fb00 2205 	mla	r2, r0, r5, r2
 8023c74:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023c76:	fb09 2205 	mla	r2, r9, r5, r2
 8023c7a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023c7e:	2a00      	cmp	r2, #0
 8023c80:	f000 80ca 	beq.w	8023e18 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8023c84:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023c88:	d019      	beq.n	8023cbe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 8023c8a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023c8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023c92:	fb0c fa0a 	mul.w	sl, ip, sl
 8023c96:	fb0c fc03 	mul.w	ip, ip, r3
 8023c9a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023c9e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023ca2:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8023ca6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023caa:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023cae:	4453      	add	r3, sl
 8023cb0:	0a3f      	lsrs	r7, r7, #8
 8023cb2:	0a1b      	lsrs	r3, r3, #8
 8023cb4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023cb8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023cbc:	433b      	orrs	r3, r7
 8023cbe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023cc0:	2dff      	cmp	r5, #255	; 0xff
 8023cc2:	d020      	beq.n	8023d06 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8023cc4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023cc6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8023cca:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023ccc:	436f      	muls	r7, r5
 8023cce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023cd0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023cd4:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023cd8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023cda:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023cde:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023ce2:	fb05 fa0a 	mul.w	sl, r5, sl
 8023ce6:	44bc      	add	ip, r7
 8023ce8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023cec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023cf0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023cf4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023cf8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023cfc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023d00:	ea4c 050a 	orr.w	r5, ip, sl
 8023d04:	950d      	str	r5, [sp, #52]	; 0x34
 8023d06:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023d08:	2dff      	cmp	r5, #255	; 0xff
 8023d0a:	d020      	beq.n	8023d4e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8023d0c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023d0e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8023d12:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023d14:	436f      	muls	r7, r5
 8023d16:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023d18:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8023d1c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023d1e:	fb05 fa0c 	mul.w	sl, r5, ip
 8023d22:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023d26:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023d2a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023d2e:	44bc      	add	ip, r7
 8023d30:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023d34:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023d38:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023d3c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023d40:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023d44:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023d48:	ea4c 050a 	orr.w	r5, ip, sl
 8023d4c:	9509      	str	r5, [sp, #36]	; 0x24
 8023d4e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023d50:	2dff      	cmp	r5, #255	; 0xff
 8023d52:	d020      	beq.n	8023d96 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 8023d54:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023d56:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8023d5a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023d5c:	436f      	muls	r7, r5
 8023d5e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023d60:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023d64:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023d68:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023d6a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023d6e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023d72:	fb05 fa0a 	mul.w	sl, r5, sl
 8023d76:	44bc      	add	ip, r7
 8023d78:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023d7c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023d80:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023d84:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023d88:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023d8c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023d90:	ea4c 050a 	orr.w	r5, ip, sl
 8023d94:	950e      	str	r5, [sp, #56]	; 0x38
 8023d96:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023d98:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023d9c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023da0:	2aff      	cmp	r2, #255	; 0xff
 8023da2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8023da6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023da8:	fb0e f707 	mul.w	r7, lr, r7
 8023dac:	fb01 770c 	mla	r7, r1, ip, r7
 8023db0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023db4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023db6:	fb00 770c 	mla	r7, r0, ip, r7
 8023dba:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023dbe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023dc0:	fb09 770c 	mla	r7, r9, ip, r7
 8023dc4:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8023dc8:	fb0e fe0c 	mul.w	lr, lr, ip
 8023dcc:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8023dd0:	fb01 e303 	mla	r3, r1, r3, lr
 8023dd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023dd6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023dda:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8023dde:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023de0:	fb00 330a 	mla	r3, r0, sl, r3
 8023de4:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8023de8:	fb09 3c0c 	mla	ip, r9, ip, r3
 8023dec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023df0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023df4:	ea47 070c 	orr.w	r7, r7, ip
 8023df8:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8023dfc:	d11e      	bne.n	8023e3c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8023dfe:	097a      	lsrs	r2, r7, #5
 8023e00:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8023e04:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8023e08:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023e0c:	f023 0307 	bic.w	r3, r3, #7
 8023e10:	4313      	orrs	r3, r2
 8023e12:	431f      	orrs	r7, r3
 8023e14:	f8a8 7000 	strh.w	r7, [r8]
 8023e18:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023e1a:	f108 0802 	add.w	r8, r8, #2
 8023e1e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023e22:	441c      	add	r4, r3
 8023e24:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023e26:	441e      	add	r6, r3
 8023e28:	e643      	b.n	8023ab2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8023e2a:	2800      	cmp	r0, #0
 8023e2c:	f43f af0a 	beq.w	8023c44 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8023e30:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8023e34:	9109      	str	r1, [sp, #36]	; 0x24
 8023e36:	0e09      	lsrs	r1, r1, #24
 8023e38:	9111      	str	r1, [sp, #68]	; 0x44
 8023e3a:	e703      	b.n	8023c44 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8023e3c:	f8b8 1000 	ldrh.w	r1, [r8]
 8023e40:	43d2      	mvns	r2, r2
 8023e42:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8023e46:	fa5f fe82 	uxtb.w	lr, r2
 8023e4a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023e4e:	10c8      	asrs	r0, r1, #3
 8023e50:	00ca      	lsls	r2, r1, #3
 8023e52:	fb0c fc0e 	mul.w	ip, ip, lr
 8023e56:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8023e5a:	b2d2      	uxtb	r2, r2
 8023e5c:	f10c 0101 	add.w	r1, ip, #1
 8023e60:	fb00 f00e 	mul.w	r0, r0, lr
 8023e64:	fb02 f20e 	mul.w	r2, r2, lr
 8023e68:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8023e6c:	0c39      	lsrs	r1, r7, #16
 8023e6e:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8023e72:	490f      	ldr	r1, [pc, #60]	; (8023eb0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8023e74:	fa5f fc8c 	uxtb.w	ip, ip
 8023e78:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8023e7c:	1c41      	adds	r1, r0, #1
 8023e7e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8023e82:	1c51      	adds	r1, r2, #1
 8023e84:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8023e88:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023e8c:	00c0      	lsls	r0, r0, #3
 8023e8e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8023e92:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023e96:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8023e9a:	ea4c 0c00 	orr.w	ip, ip, r0
 8023e9e:	ea47 0c0c 	orr.w	ip, r7, ip
 8023ea2:	f8a8 c000 	strh.w	ip, [r8]
 8023ea6:	e7b7      	b.n	8023e18 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8023ea8:	b01b      	add	sp, #108	; 0x6c
 8023eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023eae:	bf00      	nop
 8023eb0:	fffff800 	.word	0xfffff800

08023eb4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8023eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023eb8:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8023ebc:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8023ec0:	2d00      	cmp	r5, #0
 8023ec2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8023ec6:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8023eca:	fb05 0e03 	mla	lr, r5, r3, r0
 8023ece:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8023ed2:	f2c0 808c 	blt.w	8023fee <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8023ed6:	45a9      	cmp	r9, r5
 8023ed8:	f340 8089 	ble.w	8023fee <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8023edc:	2800      	cmp	r0, #0
 8023ede:	f2c0 8084 	blt.w	8023fea <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8023ee2:	4580      	cmp	r8, r0
 8023ee4:	f340 8081 	ble.w	8023fea <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8023ee8:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8023eec:	f01e 0f01 	tst.w	lr, #1
 8023ef0:	5d16      	ldrb	r6, [r2, r4]
 8023ef2:	bf0c      	ite	eq
 8023ef4:	f006 060f 	andeq.w	r6, r6, #15
 8023ef8:	1136      	asrne	r6, r6, #4
 8023efa:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8023efe:	b2f6      	uxtb	r6, r6
 8023f00:	1c44      	adds	r4, r0, #1
 8023f02:	d477      	bmi.n	8023ff4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8023f04:	45a0      	cmp	r8, r4
 8023f06:	dd75      	ble.n	8023ff4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8023f08:	2f00      	cmp	r7, #0
 8023f0a:	d075      	beq.n	8023ff8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8023f0c:	f10e 0a01 	add.w	sl, lr, #1
 8023f10:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8023f14:	f01a 0f01 	tst.w	sl, #1
 8023f18:	5d14      	ldrb	r4, [r2, r4]
 8023f1a:	bf0c      	ite	eq
 8023f1c:	f004 040f 	andeq.w	r4, r4, #15
 8023f20:	1124      	asrne	r4, r4, #4
 8023f22:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8023f26:	b2e4      	uxtb	r4, r4
 8023f28:	3501      	adds	r5, #1
 8023f2a:	d469      	bmi.n	8024000 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8023f2c:	45a9      	cmp	r9, r5
 8023f2e:	dd67      	ble.n	8024000 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8023f30:	f1bc 0f00 	cmp.w	ip, #0
 8023f34:	d067      	beq.n	8024006 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 8023f36:	2800      	cmp	r0, #0
 8023f38:	db60      	blt.n	8023ffc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8023f3a:	4580      	cmp	r8, r0
 8023f3c:	dd5e      	ble.n	8023ffc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8023f3e:	eb03 090e 	add.w	r9, r3, lr
 8023f42:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8023f46:	f019 0f01 	tst.w	r9, #1
 8023f4a:	5d55      	ldrb	r5, [r2, r5]
 8023f4c:	bf0c      	ite	eq
 8023f4e:	f005 050f 	andeq.w	r5, r5, #15
 8023f52:	112d      	asrne	r5, r5, #4
 8023f54:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8023f58:	b2ed      	uxtb	r5, r5
 8023f5a:	3001      	adds	r0, #1
 8023f5c:	d456      	bmi.n	802400c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8023f5e:	4580      	cmp	r8, r0
 8023f60:	dd54      	ble.n	802400c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8023f62:	2f00      	cmp	r7, #0
 8023f64:	d054      	beq.n	8024010 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 8023f66:	3301      	adds	r3, #1
 8023f68:	449e      	add	lr, r3
 8023f6a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8023f6e:	f01e 0f01 	tst.w	lr, #1
 8023f72:	5cd0      	ldrb	r0, [r2, r3]
 8023f74:	bf0c      	ite	eq
 8023f76:	f000 000f 	andeq.w	r0, r0, #15
 8023f7a:	1100      	asrne	r0, r0, #4
 8023f7c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023f80:	b2c3      	uxtb	r3, r0
 8023f82:	b2ba      	uxth	r2, r7
 8023f84:	fa1f fc8c 	uxth.w	ip, ip
 8023f88:	fb02 f00c 	mul.w	r0, r2, ip
 8023f8c:	0112      	lsls	r2, r2, #4
 8023f8e:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8023f92:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8023f96:	1a12      	subs	r2, r2, r0
 8023f98:	fa1f fc8c 	uxth.w	ip, ip
 8023f9c:	b292      	uxth	r2, r2
 8023f9e:	eba7 070c 	sub.w	r7, r7, ip
 8023fa2:	4362      	muls	r2, r4
 8023fa4:	b2bf      	uxth	r7, r7
 8023fa6:	fb06 2207 	mla	r2, r6, r7, r2
 8023faa:	fb0c 2505 	mla	r5, ip, r5, r2
 8023fae:	fb00 5303 	mla	r3, r0, r3, r5
 8023fb2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023fb6:	b1b3      	cbz	r3, 8023fe6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8023fb8:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8023fbc:	435a      	muls	r2, r3
 8023fbe:	1c53      	adds	r3, r2, #1
 8023fc0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023fc4:	4a2d      	ldr	r2, [pc, #180]	; (802407c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8023fc6:	121b      	asrs	r3, r3, #8
 8023fc8:	6812      	ldr	r2, [r2, #0]
 8023fca:	2bff      	cmp	r3, #255	; 0xff
 8023fcc:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8023fd0:	d120      	bne.n	8024014 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 8023fd2:	0950      	lsrs	r0, r2, #5
 8023fd4:	4b2a      	ldr	r3, [pc, #168]	; (8024080 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8023fd6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8023fda:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023fde:	4033      	ands	r3, r6
 8023fe0:	4318      	orrs	r0, r3
 8023fe2:	4302      	orrs	r2, r0
 8023fe4:	800a      	strh	r2, [r1, #0]
 8023fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023fea:	2600      	movs	r6, #0
 8023fec:	e788      	b.n	8023f00 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8023fee:	2400      	movs	r4, #0
 8023ff0:	4626      	mov	r6, r4
 8023ff2:	e799      	b.n	8023f28 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8023ff4:	2400      	movs	r4, #0
 8023ff6:	e797      	b.n	8023f28 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8023ff8:	463c      	mov	r4, r7
 8023ffa:	e795      	b.n	8023f28 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8023ffc:	2500      	movs	r5, #0
 8023ffe:	e7ac      	b.n	8023f5a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8024000:	2300      	movs	r3, #0
 8024002:	461d      	mov	r5, r3
 8024004:	e7bd      	b.n	8023f82 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024006:	4663      	mov	r3, ip
 8024008:	4665      	mov	r5, ip
 802400a:	e7ba      	b.n	8023f82 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802400c:	2300      	movs	r3, #0
 802400e:	e7b8      	b.n	8023f82 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024010:	463b      	mov	r3, r7
 8024012:	e7b6      	b.n	8023f82 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024014:	880d      	ldrh	r5, [r1, #0]
 8024016:	b29f      	uxth	r7, r3
 8024018:	f3c2 4007 	ubfx	r0, r2, #16, #8
 802401c:	43db      	mvns	r3, r3
 802401e:	122c      	asrs	r4, r5, #8
 8024020:	fb10 f007 	smulbb	r0, r0, r7
 8024024:	b2db      	uxtb	r3, r3
 8024026:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802402a:	b2f6      	uxtb	r6, r6
 802402c:	b2d2      	uxtb	r2, r2
 802402e:	fb04 0403 	mla	r4, r4, r3, r0
 8024032:	10e8      	asrs	r0, r5, #3
 8024034:	fb12 f207 	smulbb	r2, r2, r7
 8024038:	00ed      	lsls	r5, r5, #3
 802403a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802403e:	b2a4      	uxth	r4, r4
 8024040:	fb16 f607 	smulbb	r6, r6, r7
 8024044:	b2ed      	uxtb	r5, r5
 8024046:	fb00 6603 	mla	r6, r0, r3, r6
 802404a:	fb05 2303 	mla	r3, r5, r3, r2
 802404e:	b2b0      	uxth	r0, r6
 8024050:	b29a      	uxth	r2, r3
 8024052:	1c63      	adds	r3, r4, #1
 8024054:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8024058:	1c53      	adds	r3, r2, #1
 802405a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802405e:	1c42      	adds	r2, r0, #1
 8024060:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8024064:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024068:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802406c:	0940      	lsrs	r0, r0, #5
 802406e:	4323      	orrs	r3, r4
 8024070:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024074:	4303      	orrs	r3, r0
 8024076:	800b      	strh	r3, [r1, #0]
 8024078:	e7b5      	b.n	8023fe6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 802407a:	bf00      	nop
 802407c:	2400b08c 	.word	0x2400b08c
 8024080:	00fff800 	.word	0x00fff800

08024084 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024088:	b097      	sub	sp, #92	; 0x5c
 802408a:	9214      	str	r2, [sp, #80]	; 0x50
 802408c:	9309      	str	r3, [sp, #36]	; 0x24
 802408e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8024090:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8024094:	9015      	str	r0, [sp, #84]	; 0x54
 8024096:	910d      	str	r1, [sp, #52]	; 0x34
 8024098:	6850      	ldr	r0, [r2, #4]
 802409a:	930f      	str	r3, [sp, #60]	; 0x3c
 802409c:	6812      	ldr	r2, [r2, #0]
 802409e:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80240a2:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 80240a6:	fb00 1303 	mla	r3, r0, r3, r1
 80240aa:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80240ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80240b0:	689b      	ldr	r3, [r3, #8]
 80240b2:	3301      	adds	r3, #1
 80240b4:	f023 0301 	bic.w	r3, r3, #1
 80240b8:	930a      	str	r3, [sp, #40]	; 0x28
 80240ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80240bc:	681f      	ldr	r7, [r3, #0]
 80240be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80240c0:	2b00      	cmp	r3, #0
 80240c2:	dc03      	bgt.n	80240cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80240c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80240c6:	2b00      	cmp	r3, #0
 80240c8:	f340 8289 	ble.w	80245de <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 80240cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80240ce:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80240d2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80240d6:	1e48      	subs	r0, r1, #1
 80240d8:	f102 3cff 	add.w	ip, r2, #4294967295
 80240dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80240de:	2b00      	cmp	r3, #0
 80240e0:	f340 80c5 	ble.w	802426e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80240e4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80240e8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80240ec:	d406      	bmi.n	80240fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80240ee:	4586      	cmp	lr, r0
 80240f0:	da04      	bge.n	80240fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80240f2:	2b00      	cmp	r3, #0
 80240f4:	db02      	blt.n	80240fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80240f6:	4563      	cmp	r3, ip
 80240f8:	f2c0 80ba 	blt.w	8024270 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 80240fc:	f11e 0e01 	adds.w	lr, lr, #1
 8024100:	f100 80ab 	bmi.w	802425a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8024104:	4571      	cmp	r1, lr
 8024106:	f2c0 80a8 	blt.w	802425a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 802410a:	3301      	adds	r3, #1
 802410c:	f100 80a5 	bmi.w	802425a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8024110:	429a      	cmp	r2, r3
 8024112:	f2c0 80a2 	blt.w	802425a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8024116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024118:	46c8      	mov	r8, r9
 802411a:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 802411e:	930e      	str	r3, [sp, #56]	; 0x38
 8024120:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024122:	2b00      	cmp	r3, #0
 8024124:	f340 80c4 	ble.w	80242b0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8024128:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802412a:	1430      	asrs	r0, r6, #16
 802412c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024130:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024134:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8024138:	1423      	asrs	r3, r4, #16
 802413a:	f100 814f 	bmi.w	80243dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802413e:	f10c 3bff 	add.w	fp, ip, #4294967295
 8024142:	455b      	cmp	r3, fp
 8024144:	f280 814a 	bge.w	80243dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024148:	2800      	cmp	r0, #0
 802414a:	f2c0 8147 	blt.w	80243dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802414e:	f10e 3bff 	add.w	fp, lr, #4294967295
 8024152:	4558      	cmp	r0, fp
 8024154:	f280 8142 	bge.w	80243dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024158:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802415a:	fb00 3305 	mla	r3, r0, r5, r3
 802415e:	0858      	lsrs	r0, r3, #1
 8024160:	07dd      	lsls	r5, r3, #31
 8024162:	f817 c000 	ldrb.w	ip, [r7, r0]
 8024166:	bf54      	ite	pl
 8024168:	f00c 0c0f 	andpl.w	ip, ip, #15
 802416c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024170:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024174:	fa5f fc8c 	uxtb.w	ip, ip
 8024178:	2a00      	cmp	r2, #0
 802417a:	f000 80dd 	beq.w	8024338 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 802417e:	1c58      	adds	r0, r3, #1
 8024180:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8024184:	07c0      	lsls	r0, r0, #31
 8024186:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802418a:	bf54      	ite	pl
 802418c:	f00e 0e0f 	andpl.w	lr, lr, #15
 8024190:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8024194:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8024198:	fa5f f08e 	uxtb.w	r0, lr
 802419c:	9010      	str	r0, [sp, #64]	; 0x40
 802419e:	b1d9      	cbz	r1, 80241d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80241a0:	4453      	add	r3, sl
 80241a2:	0858      	lsrs	r0, r3, #1
 80241a4:	07dd      	lsls	r5, r3, #31
 80241a6:	f103 0301 	add.w	r3, r3, #1
 80241aa:	5c38      	ldrb	r0, [r7, r0]
 80241ac:	bf54      	ite	pl
 80241ae:	f000 000f 	andpl.w	r0, r0, #15
 80241b2:	1100      	asrmi	r0, r0, #4
 80241b4:	07dd      	lsls	r5, r3, #31
 80241b6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80241ba:	b2c0      	uxtb	r0, r0
 80241bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80241be:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80241c2:	f817 e000 	ldrb.w	lr, [r7, r0]
 80241c6:	bf54      	ite	pl
 80241c8:	f00e 030f 	andpl.w	r3, lr, #15
 80241cc:	ea4f 132e 	movmi.w	r3, lr, asr #4
 80241d0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80241d4:	b2db      	uxtb	r3, r3
 80241d6:	9311      	str	r3, [sp, #68]	; 0x44
 80241d8:	b292      	uxth	r2, r2
 80241da:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80241dc:	b289      	uxth	r1, r1
 80241de:	fb02 f301 	mul.w	r3, r2, r1
 80241e2:	0112      	lsls	r2, r2, #4
 80241e4:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80241e8:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80241ec:	1ad2      	subs	r2, r2, r3
 80241ee:	b289      	uxth	r1, r1
 80241f0:	b292      	uxth	r2, r2
 80241f2:	1a40      	subs	r0, r0, r1
 80241f4:	436a      	muls	r2, r5
 80241f6:	b280      	uxth	r0, r0
 80241f8:	fb0c 2c00 	mla	ip, ip, r0, r2
 80241fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80241fe:	fb01 c102 	mla	r1, r1, r2, ip
 8024202:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024204:	fb03 1302 	mla	r3, r3, r2, r1
 8024208:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802420c:	b1db      	cbz	r3, 8024246 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802420e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024210:	4353      	muls	r3, r2
 8024212:	1c5a      	adds	r2, r3, #1
 8024214:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024218:	4ac6      	ldr	r2, [pc, #792]	; (8024534 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 802421a:	121b      	asrs	r3, r3, #8
 802421c:	6812      	ldr	r2, [r2, #0]
 802421e:	2bff      	cmp	r3, #255	; 0xff
 8024220:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8024224:	f040 8099 	bne.w	802435a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8024228:	0953      	lsrs	r3, r2, #5
 802422a:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802422e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024232:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024236:	f02c 0c07 	bic.w	ip, ip, #7
 802423a:	ea43 0c0c 	orr.w	ip, r3, ip
 802423e:	ea4c 0202 	orr.w	r2, ip, r2
 8024242:	f8a8 2000 	strh.w	r2, [r8]
 8024246:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024248:	f108 0802 	add.w	r8, r8, #2
 802424c:	441c      	add	r4, r3
 802424e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024250:	441e      	add	r6, r3
 8024252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024254:	3b01      	subs	r3, #1
 8024256:	930e      	str	r3, [sp, #56]	; 0x38
 8024258:	e762      	b.n	8024120 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802425a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802425c:	f109 0902 	add.w	r9, r9, #2
 8024260:	441c      	add	r4, r3
 8024262:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024264:	441e      	add	r6, r3
 8024266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024268:	3b01      	subs	r3, #1
 802426a:	9309      	str	r3, [sp, #36]	; 0x24
 802426c:	e736      	b.n	80240dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802426e:	d024      	beq.n	80242ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8024270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024272:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8024274:	3b01      	subs	r3, #1
 8024276:	fb00 4003 	mla	r0, r0, r3, r4
 802427a:	1400      	asrs	r0, r0, #16
 802427c:	f53f af4b 	bmi.w	8024116 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024280:	3901      	subs	r1, #1
 8024282:	4288      	cmp	r0, r1
 8024284:	f6bf af47 	bge.w	8024116 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024288:	9924      	ldr	r1, [sp, #144]	; 0x90
 802428a:	fb01 6303 	mla	r3, r1, r3, r6
 802428e:	141b      	asrs	r3, r3, #16
 8024290:	f53f af41 	bmi.w	8024116 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024294:	3a01      	subs	r2, #1
 8024296:	4293      	cmp	r3, r2
 8024298:	f6bf af3d 	bge.w	8024116 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802429c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80242a0:	46c8      	mov	r8, r9
 80242a2:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80242a6:	930e      	str	r3, [sp, #56]	; 0x38
 80242a8:	f1bb 0f00 	cmp.w	fp, #0
 80242ac:	f300 80b7 	bgt.w	802441e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 80242b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80242b2:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80242b6:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80242ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80242bc:	2b00      	cmp	r3, #0
 80242be:	f340 818e 	ble.w	80245de <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 80242c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80242c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80242c8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80242cc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80242d0:	eef0 6a62 	vmov.f32	s13, s5
 80242d4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80242d8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80242dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80242e0:	ee16 4a90 	vmov	r4, s13
 80242e4:	eef0 6a43 	vmov.f32	s13, s6
 80242e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80242ec:	ee16 6a90 	vmov	r6, s13
 80242f0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80242f4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80242f8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80242fc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024300:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024304:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024308:	ee12 2a90 	vmov	r2, s5
 802430c:	eef0 2a47 	vmov.f32	s5, s14
 8024310:	fb92 f3f3 	sdiv	r3, r2, r3
 8024314:	ee13 2a10 	vmov	r2, s6
 8024318:	9323      	str	r3, [sp, #140]	; 0x8c
 802431a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802431c:	eeb0 3a67 	vmov.f32	s6, s15
 8024320:	fb92 f3f3 	sdiv	r3, r2, r3
 8024324:	9324      	str	r3, [sp, #144]	; 0x90
 8024326:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024328:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802432a:	3b01      	subs	r3, #1
 802432c:	930d      	str	r3, [sp, #52]	; 0x34
 802432e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024330:	bf08      	it	eq
 8024332:	4613      	moveq	r3, r2
 8024334:	9309      	str	r3, [sp, #36]	; 0x24
 8024336:	e6c2      	b.n	80240be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8024338:	2900      	cmp	r1, #0
 802433a:	f43f af4d 	beq.w	80241d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 802433e:	eb0a 0003 	add.w	r0, sl, r3
 8024342:	0843      	lsrs	r3, r0, #1
 8024344:	07c0      	lsls	r0, r0, #31
 8024346:	5cfb      	ldrb	r3, [r7, r3]
 8024348:	bf54      	ite	pl
 802434a:	f003 030f 	andpl.w	r3, r3, #15
 802434e:	111b      	asrmi	r3, r3, #4
 8024350:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024354:	b2db      	uxtb	r3, r3
 8024356:	930b      	str	r3, [sp, #44]	; 0x2c
 8024358:	e73e      	b.n	80241d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 802435a:	f8b8 e000 	ldrh.w	lr, [r8]
 802435e:	fa1f fb83 	uxth.w	fp, r3
 8024362:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8024366:	43db      	mvns	r3, r3
 8024368:	ea4f 202e 	mov.w	r0, lr, asr #8
 802436c:	fb11 f10b 	smulbb	r1, r1, fp
 8024370:	b2db      	uxtb	r3, r3
 8024372:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024376:	fa5f fc8c 	uxtb.w	ip, ip
 802437a:	b2d2      	uxtb	r2, r2
 802437c:	fb00 1003 	mla	r0, r0, r3, r1
 8024380:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8024384:	fb1c fc0b 	smulbb	ip, ip, fp
 8024388:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802438c:	b280      	uxth	r0, r0
 802438e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024392:	fb12 fb0b 	smulbb	fp, r2, fp
 8024396:	fa5f fe8e 	uxtb.w	lr, lr
 802439a:	fb01 cc03 	mla	ip, r1, r3, ip
 802439e:	fb0e bb03 	mla	fp, lr, r3, fp
 80243a2:	1c43      	adds	r3, r0, #1
 80243a4:	fa1f fc8c 	uxth.w	ip, ip
 80243a8:	fa1f fb8b 	uxth.w	fp, fp
 80243ac:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80243b0:	f10c 0101 	add.w	r1, ip, #1
 80243b4:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 80243b8:	f10b 0001 	add.w	r0, fp, #1
 80243bc:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80243c0:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80243c4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80243c8:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80243cc:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80243d0:	4318      	orrs	r0, r3
 80243d2:	ea40 000c 	orr.w	r0, r0, ip
 80243d6:	f8a8 0000 	strh.w	r0, [r8]
 80243da:	e734      	b.n	8024246 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80243dc:	f113 0b01 	adds.w	fp, r3, #1
 80243e0:	f53f af31 	bmi.w	8024246 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80243e4:	45dc      	cmp	ip, fp
 80243e6:	f6ff af2e 	blt.w	8024246 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80243ea:	f110 0b01 	adds.w	fp, r0, #1
 80243ee:	f53f af2a 	bmi.w	8024246 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80243f2:	45de      	cmp	lr, fp
 80243f4:	f6ff af27 	blt.w	8024246 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80243f8:	9302      	str	r3, [sp, #8]
 80243fa:	fa0f f38e 	sxth.w	r3, lr
 80243fe:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024400:	9301      	str	r3, [sp, #4]
 8024402:	fa0f f38c 	sxth.w	r3, ip
 8024406:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802440a:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802440e:	9300      	str	r3, [sp, #0]
 8024410:	463a      	mov	r2, r7
 8024412:	4653      	mov	r3, sl
 8024414:	4641      	mov	r1, r8
 8024416:	9815      	ldr	r0, [sp, #84]	; 0x54
 8024418:	f7ff fd4c 	bl	8023eb4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 802441c:	e713      	b.n	8024246 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802441e:	1422      	asrs	r2, r4, #16
 8024420:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8024422:	1433      	asrs	r3, r6, #16
 8024424:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8024428:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802442c:	fb05 2303 	mla	r3, r5, r3, r2
 8024430:	085a      	lsrs	r2, r3, #1
 8024432:	07dd      	lsls	r5, r3, #31
 8024434:	5cba      	ldrb	r2, [r7, r2]
 8024436:	bf54      	ite	pl
 8024438:	f002 020f 	andpl.w	r2, r2, #15
 802443c:	1112      	asrmi	r2, r2, #4
 802443e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8024442:	b2d2      	uxtb	r2, r2
 8024444:	2900      	cmp	r1, #0
 8024446:	d077      	beq.n	8024538 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8024448:	f103 0e01 	add.w	lr, r3, #1
 802444c:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8024450:	f01e 0f01 	tst.w	lr, #1
 8024454:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024458:	bf0c      	ite	eq
 802445a:	f00c 0c0f 	andeq.w	ip, ip, #15
 802445e:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8024462:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024466:	fa5f f58c 	uxtb.w	r5, ip
 802446a:	9512      	str	r5, [sp, #72]	; 0x48
 802446c:	b308      	cbz	r0, 80244b2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 802446e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024470:	442b      	add	r3, r5
 8024472:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024476:	07dd      	lsls	r5, r3, #31
 8024478:	f103 0301 	add.w	r3, r3, #1
 802447c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024480:	bf54      	ite	pl
 8024482:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024486:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802448a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802448e:	fa5f f58c 	uxtb.w	r5, ip
 8024492:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024496:	950c      	str	r5, [sp, #48]	; 0x30
 8024498:	07dd      	lsls	r5, r3, #31
 802449a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802449e:	bf54      	ite	pl
 80244a0:	f00c 0c0f 	andpl.w	ip, ip, #15
 80244a4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80244a8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80244ac:	fa5f f38c 	uxtb.w	r3, ip
 80244b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80244b2:	b289      	uxth	r1, r1
 80244b4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80244b6:	b280      	uxth	r0, r0
 80244b8:	fb01 f300 	mul.w	r3, r1, r0
 80244bc:	0109      	lsls	r1, r1, #4
 80244be:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80244c2:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80244c6:	1ac9      	subs	r1, r1, r3
 80244c8:	b280      	uxth	r0, r0
 80244ca:	b289      	uxth	r1, r1
 80244cc:	ebac 0c00 	sub.w	ip, ip, r0
 80244d0:	4369      	muls	r1, r5
 80244d2:	fa1f fc8c 	uxth.w	ip, ip
 80244d6:	fb02 120c 	mla	r2, r2, ip, r1
 80244da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80244dc:	fb00 2001 	mla	r0, r0, r1, r2
 80244e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80244e2:	fb03 0302 	mla	r3, r3, r2, r0
 80244e6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80244ea:	b1d3      	cbz	r3, 8024522 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80244ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80244ee:	4353      	muls	r3, r2
 80244f0:	1c5a      	adds	r2, r3, #1
 80244f2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80244f6:	4a0f      	ldr	r2, [pc, #60]	; (8024534 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 80244f8:	121b      	asrs	r3, r3, #8
 80244fa:	6812      	ldr	r2, [r2, #0]
 80244fc:	2bff      	cmp	r3, #255	; 0xff
 80244fe:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8024502:	d12d      	bne.n	8024560 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8024504:	0953      	lsrs	r3, r2, #5
 8024506:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802450a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802450e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024512:	f02c 0c07 	bic.w	ip, ip, #7
 8024516:	ea43 0c0c 	orr.w	ip, r3, ip
 802451a:	ea4c 0202 	orr.w	r2, ip, r2
 802451e:	f8a8 2000 	strh.w	r2, [r8]
 8024522:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024524:	f108 0802 	add.w	r8, r8, #2
 8024528:	f10b 3bff 	add.w	fp, fp, #4294967295
 802452c:	441c      	add	r4, r3
 802452e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024530:	441e      	add	r6, r3
 8024532:	e6b9      	b.n	80242a8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8024534:	2400b08c 	.word	0x2400b08c
 8024538:	2800      	cmp	r0, #0
 802453a:	d0ba      	beq.n	80244b2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 802453c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802453e:	442b      	add	r3, r5
 8024540:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024544:	07db      	lsls	r3, r3, #31
 8024546:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802454a:	bf54      	ite	pl
 802454c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024550:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024554:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024558:	fa5f f38c 	uxtb.w	r3, ip
 802455c:	930c      	str	r3, [sp, #48]	; 0x30
 802455e:	e7a8      	b.n	80244b2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8024560:	f8b8 e000 	ldrh.w	lr, [r8]
 8024564:	fa1f fa83 	uxth.w	sl, r3
 8024568:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802456c:	43db      	mvns	r3, r3
 802456e:	ea4f 202e 	mov.w	r0, lr, asr #8
 8024572:	fb11 f10a 	smulbb	r1, r1, sl
 8024576:	b2db      	uxtb	r3, r3
 8024578:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802457c:	b2d2      	uxtb	r2, r2
 802457e:	fa5f fc8c 	uxtb.w	ip, ip
 8024582:	fb00 1003 	mla	r0, r0, r3, r1
 8024586:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802458a:	fb12 f20a 	smulbb	r2, r2, sl
 802458e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8024592:	b280      	uxth	r0, r0
 8024594:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024598:	fb1c fc0a 	smulbb	ip, ip, sl
 802459c:	fa5f fe8e 	uxtb.w	lr, lr
 80245a0:	fb0e 2203 	mla	r2, lr, r3, r2
 80245a4:	fb01 cc03 	mla	ip, r1, r3, ip
 80245a8:	1c43      	adds	r3, r0, #1
 80245aa:	b292      	uxth	r2, r2
 80245ac:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80245b0:	1c51      	adds	r1, r2, #1
 80245b2:	fa1f fc8c 	uxth.w	ip, ip
 80245b6:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80245ba:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80245be:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80245c2:	4308      	orrs	r0, r1
 80245c4:	f10c 0101 	add.w	r1, ip, #1
 80245c8:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80245cc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80245d0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80245d4:	ea40 000c 	orr.w	r0, r0, ip
 80245d8:	f8a8 0000 	strh.w	r0, [r8]
 80245dc:	e7a1      	b.n	8024522 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80245de:	b017      	add	sp, #92	; 0x5c
 80245e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080245e4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 80245e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80245e8:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 80245ec:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80245f0:	2d00      	cmp	r5, #0
 80245f2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80245f6:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80245fa:	fb05 0e03 	mla	lr, r5, r3, r0
 80245fe:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8024602:	f2c0 80b0 	blt.w	8024766 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8024606:	45a9      	cmp	r9, r5
 8024608:	f340 80ad 	ble.w	8024766 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802460c:	2800      	cmp	r0, #0
 802460e:	f2c0 80a8 	blt.w	8024762 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8024612:	4580      	cmp	r8, r0
 8024614:	f340 80a5 	ble.w	8024762 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8024618:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802461c:	f01e 0f01 	tst.w	lr, #1
 8024620:	5d16      	ldrb	r6, [r2, r4]
 8024622:	bf0c      	ite	eq
 8024624:	f006 060f 	andeq.w	r6, r6, #15
 8024628:	1136      	asrne	r6, r6, #4
 802462a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802462e:	b2f6      	uxtb	r6, r6
 8024630:	1c44      	adds	r4, r0, #1
 8024632:	f100 809b 	bmi.w	802476c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8024636:	45a0      	cmp	r8, r4
 8024638:	f340 8098 	ble.w	802476c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802463c:	2f00      	cmp	r7, #0
 802463e:	f000 8097 	beq.w	8024770 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 8024642:	f10e 0a01 	add.w	sl, lr, #1
 8024646:	ea4f 045a 	mov.w	r4, sl, lsr #1
 802464a:	f01a 0f01 	tst.w	sl, #1
 802464e:	5d14      	ldrb	r4, [r2, r4]
 8024650:	bf0c      	ite	eq
 8024652:	f004 040f 	andeq.w	r4, r4, #15
 8024656:	1124      	asrne	r4, r4, #4
 8024658:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802465c:	b2e4      	uxtb	r4, r4
 802465e:	3501      	adds	r5, #1
 8024660:	f100 808a 	bmi.w	8024778 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8024664:	45a9      	cmp	r9, r5
 8024666:	f340 8087 	ble.w	8024778 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802466a:	f1bc 0f00 	cmp.w	ip, #0
 802466e:	f000 8086 	beq.w	802477e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 8024672:	2800      	cmp	r0, #0
 8024674:	db7e      	blt.n	8024774 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8024676:	4580      	cmp	r8, r0
 8024678:	dd7c      	ble.n	8024774 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802467a:	eb03 090e 	add.w	r9, r3, lr
 802467e:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8024682:	f019 0f01 	tst.w	r9, #1
 8024686:	5d55      	ldrb	r5, [r2, r5]
 8024688:	bf0c      	ite	eq
 802468a:	f005 050f 	andeq.w	r5, r5, #15
 802468e:	112d      	asrne	r5, r5, #4
 8024690:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8024694:	b2ed      	uxtb	r5, r5
 8024696:	3001      	adds	r0, #1
 8024698:	d474      	bmi.n	8024784 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802469a:	4580      	cmp	r8, r0
 802469c:	dd72      	ble.n	8024784 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802469e:	2f00      	cmp	r7, #0
 80246a0:	d072      	beq.n	8024788 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 80246a2:	3301      	adds	r3, #1
 80246a4:	449e      	add	lr, r3
 80246a6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80246aa:	f01e 0f01 	tst.w	lr, #1
 80246ae:	5cd0      	ldrb	r0, [r2, r3]
 80246b0:	bf0c      	ite	eq
 80246b2:	f000 000f 	andeq.w	r0, r0, #15
 80246b6:	1100      	asrne	r0, r0, #4
 80246b8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80246bc:	b2c3      	uxtb	r3, r0
 80246be:	b2ba      	uxth	r2, r7
 80246c0:	fa1f fc8c 	uxth.w	ip, ip
 80246c4:	fb02 f00c 	mul.w	r0, r2, ip
 80246c8:	0112      	lsls	r2, r2, #4
 80246ca:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80246ce:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80246d2:	1a12      	subs	r2, r2, r0
 80246d4:	fa1f fc8c 	uxth.w	ip, ip
 80246d8:	b292      	uxth	r2, r2
 80246da:	eba7 070c 	sub.w	r7, r7, ip
 80246de:	4362      	muls	r2, r4
 80246e0:	b2bf      	uxth	r7, r7
 80246e2:	fb06 2207 	mla	r2, r6, r7, r2
 80246e6:	fb0c 2505 	mla	r5, ip, r5, r2
 80246ea:	fb00 5303 	mla	r3, r0, r3, r5
 80246ee:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80246f2:	b3a3      	cbz	r3, 802475e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 80246f4:	4a25      	ldr	r2, [pc, #148]	; (802478c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 80246f6:	880e      	ldrh	r6, [r1, #0]
 80246f8:	6815      	ldr	r5, [r2, #0]
 80246fa:	b29a      	uxth	r2, r3
 80246fc:	1234      	asrs	r4, r6, #8
 80246fe:	43db      	mvns	r3, r3
 8024700:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8024704:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8024708:	b2db      	uxtb	r3, r3
 802470a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802470e:	fb10 f002 	smulbb	r0, r0, r2
 8024712:	b2ed      	uxtb	r5, r5
 8024714:	fb17 f702 	smulbb	r7, r7, r2
 8024718:	fb04 0403 	mla	r4, r4, r3, r0
 802471c:	10f0      	asrs	r0, r6, #3
 802471e:	fb15 f202 	smulbb	r2, r5, r2
 8024722:	00f6      	lsls	r6, r6, #3
 8024724:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024728:	b2a4      	uxth	r4, r4
 802472a:	b2f6      	uxtb	r6, r6
 802472c:	fb00 7003 	mla	r0, r0, r3, r7
 8024730:	fb06 2303 	mla	r3, r6, r3, r2
 8024734:	b280      	uxth	r0, r0
 8024736:	b29a      	uxth	r2, r3
 8024738:	1c63      	adds	r3, r4, #1
 802473a:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802473e:	1c53      	adds	r3, r2, #1
 8024740:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024744:	1c42      	adds	r2, r0, #1
 8024746:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802474a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802474e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024752:	0940      	lsrs	r0, r0, #5
 8024754:	4323      	orrs	r3, r4
 8024756:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802475a:	4303      	orrs	r3, r0
 802475c:	800b      	strh	r3, [r1, #0]
 802475e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024762:	2600      	movs	r6, #0
 8024764:	e764      	b.n	8024630 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 8024766:	2400      	movs	r4, #0
 8024768:	4626      	mov	r6, r4
 802476a:	e778      	b.n	802465e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802476c:	2400      	movs	r4, #0
 802476e:	e776      	b.n	802465e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8024770:	463c      	mov	r4, r7
 8024772:	e774      	b.n	802465e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8024774:	2500      	movs	r5, #0
 8024776:	e78e      	b.n	8024696 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8024778:	2300      	movs	r3, #0
 802477a:	461d      	mov	r5, r3
 802477c:	e79f      	b.n	80246be <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802477e:	4663      	mov	r3, ip
 8024780:	4665      	mov	r5, ip
 8024782:	e79c      	b.n	80246be <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8024784:	2300      	movs	r3, #0
 8024786:	e79a      	b.n	80246be <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8024788:	463b      	mov	r3, r7
 802478a:	e798      	b.n	80246be <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802478c:	2400b08c 	.word	0x2400b08c

08024790 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024794:	b093      	sub	sp, #76	; 0x4c
 8024796:	461d      	mov	r5, r3
 8024798:	920c      	str	r2, [sp, #48]	; 0x30
 802479a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802479c:	9011      	str	r0, [sp, #68]	; 0x44
 802479e:	9107      	str	r1, [sp, #28]
 80247a0:	6850      	ldr	r0, [r2, #4]
 80247a2:	6812      	ldr	r2, [r2, #0]
 80247a4:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 80247a8:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 80247ac:	fb00 1303 	mla	r3, r0, r3, r1
 80247b0:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80247b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80247b6:	689b      	ldr	r3, [r3, #8]
 80247b8:	3301      	adds	r3, #1
 80247ba:	f023 0301 	bic.w	r3, r3, #1
 80247be:	9306      	str	r3, [sp, #24]
 80247c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80247c2:	681f      	ldr	r7, [r3, #0]
 80247c4:	9b07      	ldr	r3, [sp, #28]
 80247c6:	2b00      	cmp	r3, #0
 80247c8:	dc03      	bgt.n	80247d2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80247ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80247cc:	2b00      	cmp	r3, #0
 80247ce:	f340 8267 	ble.w	8024ca0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 80247d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80247d4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80247d8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80247dc:	1e48      	subs	r0, r1, #1
 80247de:	f102 3cff 	add.w	ip, r2, #4294967295
 80247e2:	2d00      	cmp	r5, #0
 80247e4:	f340 80b7 	ble.w	8024956 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80247e8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80247ec:	ea4f 4326 	mov.w	r3, r6, asr #16
 80247f0:	d406      	bmi.n	8024800 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80247f2:	4586      	cmp	lr, r0
 80247f4:	da04      	bge.n	8024800 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80247f6:	2b00      	cmp	r3, #0
 80247f8:	db02      	blt.n	8024800 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80247fa:	4563      	cmp	r3, ip
 80247fc:	f2c0 80ac 	blt.w	8024958 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8024800:	f11e 0e01 	adds.w	lr, lr, #1
 8024804:	f100 809f 	bmi.w	8024946 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8024808:	4571      	cmp	r1, lr
 802480a:	f2c0 809c 	blt.w	8024946 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802480e:	3301      	adds	r3, #1
 8024810:	f100 8099 	bmi.w	8024946 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8024814:	429a      	cmp	r2, r3
 8024816:	f2c0 8096 	blt.w	8024946 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802481a:	46c8      	mov	r8, r9
 802481c:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8024820:	9509      	str	r5, [sp, #36]	; 0x24
 8024822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024824:	2b00      	cmp	r3, #0
 8024826:	f340 80b5 	ble.w	8024994 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802482a:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802482e:	1430      	asrs	r0, r6, #16
 8024830:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024834:	9308      	str	r3, [sp, #32]
 8024836:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024838:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802483c:	1423      	asrs	r3, r4, #16
 802483e:	f100 813f 	bmi.w	8024ac0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8024842:	f10c 3bff 	add.w	fp, ip, #4294967295
 8024846:	455b      	cmp	r3, fp
 8024848:	f280 813a 	bge.w	8024ac0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802484c:	2800      	cmp	r0, #0
 802484e:	f2c0 8137 	blt.w	8024ac0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8024852:	f10e 3bff 	add.w	fp, lr, #4294967295
 8024856:	4558      	cmp	r0, fp
 8024858:	f280 8132 	bge.w	8024ac0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802485c:	9a06      	ldr	r2, [sp, #24]
 802485e:	fb00 3302 	mla	r3, r0, r2, r3
 8024862:	0858      	lsrs	r0, r3, #1
 8024864:	07da      	lsls	r2, r3, #31
 8024866:	9a08      	ldr	r2, [sp, #32]
 8024868:	f817 c000 	ldrb.w	ip, [r7, r0]
 802486c:	bf54      	ite	pl
 802486e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024872:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024876:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802487a:	fa5f fc8c 	uxtb.w	ip, ip
 802487e:	2a00      	cmp	r2, #0
 8024880:	f000 80cc 	beq.w	8024a1c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8024884:	1c58      	adds	r0, r3, #1
 8024886:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802488a:	07c0      	lsls	r0, r0, #31
 802488c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8024890:	bf54      	ite	pl
 8024892:	f00e 0e0f 	andpl.w	lr, lr, #15
 8024896:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802489a:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802489e:	fa5f fe8e 	uxtb.w	lr, lr
 80248a2:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80248a6:	b1b9      	cbz	r1, 80248d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80248a8:	4453      	add	r3, sl
 80248aa:	0858      	lsrs	r0, r3, #1
 80248ac:	07da      	lsls	r2, r3, #31
 80248ae:	5c38      	ldrb	r0, [r7, r0]
 80248b0:	bf54      	ite	pl
 80248b2:	f000 000f 	andpl.w	r0, r0, #15
 80248b6:	1100      	asrmi	r0, r0, #4
 80248b8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80248bc:	b2c0      	uxtb	r0, r0
 80248be:	900a      	str	r0, [sp, #40]	; 0x28
 80248c0:	1c58      	adds	r0, r3, #1
 80248c2:	0843      	lsrs	r3, r0, #1
 80248c4:	07c2      	lsls	r2, r0, #31
 80248c6:	5cfb      	ldrb	r3, [r7, r3]
 80248c8:	bf54      	ite	pl
 80248ca:	f003 030f 	andpl.w	r3, r3, #15
 80248ce:	111b      	asrmi	r3, r3, #4
 80248d0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80248d4:	b2db      	uxtb	r3, r3
 80248d6:	930e      	str	r3, [sp, #56]	; 0x38
 80248d8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80248dc:	b289      	uxth	r1, r1
 80248de:	fb02 f301 	mul.w	r3, r2, r1
 80248e2:	0112      	lsls	r2, r2, #4
 80248e4:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80248e8:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80248ec:	1ad2      	subs	r2, r2, r3
 80248ee:	b289      	uxth	r1, r1
 80248f0:	b292      	uxth	r2, r2
 80248f2:	1a40      	subs	r0, r0, r1
 80248f4:	fa1f fe80 	uxth.w	lr, r0
 80248f8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80248fa:	4342      	muls	r2, r0
 80248fc:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8024900:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024902:	fb01 c102 	mla	r1, r1, r2, ip
 8024906:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024908:	fb03 1302 	mla	r3, r3, r2, r1
 802490c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024910:	2bff      	cmp	r3, #255	; 0xff
 8024912:	f040 8094 	bne.w	8024a3e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8024916:	4bbf      	ldr	r3, [pc, #764]	; (8024c14 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8024918:	681a      	ldr	r2, [r3, #0]
 802491a:	4bbf      	ldr	r3, [pc, #764]	; (8024c18 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 802491c:	0951      	lsrs	r1, r2, #5
 802491e:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8024922:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024926:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802492a:	430b      	orrs	r3, r1
 802492c:	4313      	orrs	r3, r2
 802492e:	f8a8 3000 	strh.w	r3, [r8]
 8024932:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024934:	f108 0802 	add.w	r8, r8, #2
 8024938:	441c      	add	r4, r3
 802493a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802493c:	441e      	add	r6, r3
 802493e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024940:	3b01      	subs	r3, #1
 8024942:	9309      	str	r3, [sp, #36]	; 0x24
 8024944:	e76d      	b.n	8024822 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024946:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024948:	3d01      	subs	r5, #1
 802494a:	f109 0902 	add.w	r9, r9, #2
 802494e:	441c      	add	r4, r3
 8024950:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024952:	441e      	add	r6, r3
 8024954:	e745      	b.n	80247e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8024956:	d021      	beq.n	802499c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8024958:	1e6b      	subs	r3, r5, #1
 802495a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802495c:	fb00 4003 	mla	r0, r0, r3, r4
 8024960:	1400      	asrs	r0, r0, #16
 8024962:	f53f af5a 	bmi.w	802481a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024966:	3901      	subs	r1, #1
 8024968:	4288      	cmp	r0, r1
 802496a:	f6bf af56 	bge.w	802481a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802496e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8024970:	fb01 6303 	mla	r3, r1, r3, r6
 8024974:	141b      	asrs	r3, r3, #16
 8024976:	f53f af50 	bmi.w	802481a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802497a:	3a01      	subs	r2, #1
 802497c:	4293      	cmp	r3, r2
 802497e:	f6bf af4c 	bge.w	802481a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024982:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8024986:	46a8      	mov	r8, r5
 8024988:	46ce      	mov	lr, r9
 802498a:	9308      	str	r3, [sp, #32]
 802498c:	f1b8 0f00 	cmp.w	r8, #0
 8024990:	f300 80b6 	bgt.w	8024b00 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024994:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8024998:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802499c:	9b07      	ldr	r3, [sp, #28]
 802499e:	2b00      	cmp	r3, #0
 80249a0:	f340 817e 	ble.w	8024ca0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 80249a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80249a8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80249aa:	ee30 0a04 	vadd.f32	s0, s0, s8
 80249ae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80249b2:	eef0 6a62 	vmov.f32	s13, s5
 80249b6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80249ba:	ee31 1a05 	vadd.f32	s2, s2, s10
 80249be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80249c2:	ee16 4a90 	vmov	r4, s13
 80249c6:	eef0 6a43 	vmov.f32	s13, s6
 80249ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80249ce:	ee16 6a90 	vmov	r6, s13
 80249d2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80249d6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80249da:	ee77 2a62 	vsub.f32	s5, s14, s5
 80249de:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80249e2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80249e6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80249ea:	ee12 2a90 	vmov	r2, s5
 80249ee:	eef0 2a47 	vmov.f32	s5, s14
 80249f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80249f6:	ee13 2a10 	vmov	r2, s6
 80249fa:	931f      	str	r3, [sp, #124]	; 0x7c
 80249fc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80249fe:	eeb0 3a67 	vmov.f32	s6, s15
 8024a02:	fb92 f3f3 	sdiv	r3, r2, r3
 8024a06:	9320      	str	r3, [sp, #128]	; 0x80
 8024a08:	9b07      	ldr	r3, [sp, #28]
 8024a0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024a0c:	3b01      	subs	r3, #1
 8024a0e:	9307      	str	r3, [sp, #28]
 8024a10:	bf08      	it	eq
 8024a12:	4615      	moveq	r5, r2
 8024a14:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024a16:	bf18      	it	ne
 8024a18:	461d      	movne	r5, r3
 8024a1a:	e6d3      	b.n	80247c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8024a1c:	2900      	cmp	r1, #0
 8024a1e:	f43f af5b 	beq.w	80248d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8024a22:	eb0a 0003 	add.w	r0, sl, r3
 8024a26:	0843      	lsrs	r3, r0, #1
 8024a28:	07c0      	lsls	r0, r0, #31
 8024a2a:	5cfb      	ldrb	r3, [r7, r3]
 8024a2c:	bf54      	ite	pl
 8024a2e:	f003 030f 	andpl.w	r3, r3, #15
 8024a32:	111b      	asrmi	r3, r3, #4
 8024a34:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024a38:	b2db      	uxtb	r3, r3
 8024a3a:	930a      	str	r3, [sp, #40]	; 0x28
 8024a3c:	e74c      	b.n	80248d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8024a3e:	2b00      	cmp	r3, #0
 8024a40:	f43f af77 	beq.w	8024932 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024a44:	4a73      	ldr	r2, [pc, #460]	; (8024c14 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8024a46:	fa1f fe83 	uxth.w	lr, r3
 8024a4a:	f8b8 c000 	ldrh.w	ip, [r8]
 8024a4e:	43db      	mvns	r3, r3
 8024a50:	6810      	ldr	r0, [r2, #0]
 8024a52:	ea4f 212c 	mov.w	r1, ip, asr #8
 8024a56:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8024a5a:	b2db      	uxtb	r3, r3
 8024a5c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024a60:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8024a64:	fb12 f20e 	smulbb	r2, r2, lr
 8024a68:	b2c0      	uxtb	r0, r0
 8024a6a:	fb1b fb0e 	smulbb	fp, fp, lr
 8024a6e:	fb01 2103 	mla	r1, r1, r3, r2
 8024a72:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8024a76:	fb10 fe0e 	smulbb	lr, r0, lr
 8024a7a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8024a7e:	b289      	uxth	r1, r1
 8024a80:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024a84:	fa5f fc8c 	uxtb.w	ip, ip
 8024a88:	fb02 b203 	mla	r2, r2, r3, fp
 8024a8c:	1c48      	adds	r0, r1, #1
 8024a8e:	fb0c e303 	mla	r3, ip, r3, lr
 8024a92:	b292      	uxth	r2, r2
 8024a94:	b29b      	uxth	r3, r3
 8024a96:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8024a9a:	f102 0b01 	add.w	fp, r2, #1
 8024a9e:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8024aa2:	1c59      	adds	r1, r3, #1
 8024aa4:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8024aa8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024aac:	0952      	lsrs	r2, r2, #5
 8024aae:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8024ab2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024ab6:	4301      	orrs	r1, r0
 8024ab8:	4311      	orrs	r1, r2
 8024aba:	f8a8 1000 	strh.w	r1, [r8]
 8024abe:	e738      	b.n	8024932 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024ac0:	f113 0b01 	adds.w	fp, r3, #1
 8024ac4:	f53f af35 	bmi.w	8024932 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024ac8:	45dc      	cmp	ip, fp
 8024aca:	f6ff af32 	blt.w	8024932 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024ace:	f110 0b01 	adds.w	fp, r0, #1
 8024ad2:	f53f af2e 	bmi.w	8024932 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024ad6:	45de      	cmp	lr, fp
 8024ad8:	f6ff af2b 	blt.w	8024932 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024adc:	9302      	str	r3, [sp, #8]
 8024ade:	fa0f f38e 	sxth.w	r3, lr
 8024ae2:	9a08      	ldr	r2, [sp, #32]
 8024ae4:	9301      	str	r3, [sp, #4]
 8024ae6:	fa0f f38c 	sxth.w	r3, ip
 8024aea:	9105      	str	r1, [sp, #20]
 8024aec:	4641      	mov	r1, r8
 8024aee:	9300      	str	r3, [sp, #0]
 8024af0:	4653      	mov	r3, sl
 8024af2:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8024af6:	463a      	mov	r2, r7
 8024af8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024afa:	f7ff fd73 	bl	80245e4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8024afe:	e718      	b.n	8024932 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024b00:	1422      	asrs	r2, r4, #16
 8024b02:	9906      	ldr	r1, [sp, #24]
 8024b04:	1433      	asrs	r3, r6, #16
 8024b06:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8024b0a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8024b0e:	fb01 2303 	mla	r3, r1, r3, r2
 8024b12:	085a      	lsrs	r2, r3, #1
 8024b14:	07d9      	lsls	r1, r3, #31
 8024b16:	5cba      	ldrb	r2, [r7, r2]
 8024b18:	bf54      	ite	pl
 8024b1a:	f002 020f 	andpl.w	r2, r2, #15
 8024b1e:	1112      	asrmi	r2, r2, #4
 8024b20:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8024b24:	b2d2      	uxtb	r2, r2
 8024b26:	2800      	cmp	r0, #0
 8024b28:	d063      	beq.n	8024bf2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8024b2a:	f103 0a01 	add.w	sl, r3, #1
 8024b2e:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8024b32:	f01a 0f01 	tst.w	sl, #1
 8024b36:	5c79      	ldrb	r1, [r7, r1]
 8024b38:	bf0c      	ite	eq
 8024b3a:	f001 010f 	andeq.w	r1, r1, #15
 8024b3e:	1109      	asrne	r1, r1, #4
 8024b40:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024b44:	b2c9      	uxtb	r1, r1
 8024b46:	910f      	str	r1, [sp, #60]	; 0x3c
 8024b48:	f1bc 0f00 	cmp.w	ip, #0
 8024b4c:	d01a      	beq.n	8024b84 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8024b4e:	9908      	ldr	r1, [sp, #32]
 8024b50:	440b      	add	r3, r1
 8024b52:	0859      	lsrs	r1, r3, #1
 8024b54:	f013 0f01 	tst.w	r3, #1
 8024b58:	f103 0301 	add.w	r3, r3, #1
 8024b5c:	5c79      	ldrb	r1, [r7, r1]
 8024b5e:	bf0c      	ite	eq
 8024b60:	f001 010f 	andeq.w	r1, r1, #15
 8024b64:	1109      	asrne	r1, r1, #4
 8024b66:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024b6a:	b2c9      	uxtb	r1, r1
 8024b6c:	910b      	str	r1, [sp, #44]	; 0x2c
 8024b6e:	0859      	lsrs	r1, r3, #1
 8024b70:	07db      	lsls	r3, r3, #31
 8024b72:	5c79      	ldrb	r1, [r7, r1]
 8024b74:	bf54      	ite	pl
 8024b76:	f001 010f 	andpl.w	r1, r1, #15
 8024b7a:	1109      	asrmi	r1, r1, #4
 8024b7c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024b80:	b2c9      	uxtb	r1, r1
 8024b82:	9110      	str	r1, [sp, #64]	; 0x40
 8024b84:	b280      	uxth	r0, r0
 8024b86:	fa1f fc8c 	uxth.w	ip, ip
 8024b8a:	fb00 f30c 	mul.w	r3, r0, ip
 8024b8e:	0100      	lsls	r0, r0, #4
 8024b90:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8024b94:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8024b98:	1ac0      	subs	r0, r0, r3
 8024b9a:	fa1f fc8c 	uxth.w	ip, ip
 8024b9e:	b280      	uxth	r0, r0
 8024ba0:	eba1 010c 	sub.w	r1, r1, ip
 8024ba4:	fa1f fa81 	uxth.w	sl, r1
 8024ba8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024baa:	4348      	muls	r0, r1
 8024bac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024bae:	fb02 020a 	mla	r2, r2, sl, r0
 8024bb2:	fb0c 2c01 	mla	ip, ip, r1, r2
 8024bb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024bb8:	fb03 c302 	mla	r3, r3, r2, ip
 8024bbc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024bc0:	2bff      	cmp	r3, #255	; 0xff
 8024bc2:	d12b      	bne.n	8024c1c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8024bc4:	4b13      	ldr	r3, [pc, #76]	; (8024c14 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8024bc6:	681a      	ldr	r2, [r3, #0]
 8024bc8:	4b13      	ldr	r3, [pc, #76]	; (8024c18 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8024bca:	0951      	lsrs	r1, r2, #5
 8024bcc:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8024bd0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024bd4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024bd8:	430b      	orrs	r3, r1
 8024bda:	4313      	orrs	r3, r2
 8024bdc:	f8ae 3000 	strh.w	r3, [lr]
 8024be0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024be2:	f10e 0e02 	add.w	lr, lr, #2
 8024be6:	f108 38ff 	add.w	r8, r8, #4294967295
 8024bea:	441c      	add	r4, r3
 8024bec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024bee:	441e      	add	r6, r3
 8024bf0:	e6cc      	b.n	802498c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8024bf2:	f1bc 0f00 	cmp.w	ip, #0
 8024bf6:	d0c5      	beq.n	8024b84 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8024bf8:	9908      	ldr	r1, [sp, #32]
 8024bfa:	440b      	add	r3, r1
 8024bfc:	0859      	lsrs	r1, r3, #1
 8024bfe:	07db      	lsls	r3, r3, #31
 8024c00:	5c79      	ldrb	r1, [r7, r1]
 8024c02:	bf54      	ite	pl
 8024c04:	f001 010f 	andpl.w	r1, r1, #15
 8024c08:	1109      	asrmi	r1, r1, #4
 8024c0a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024c0e:	b2c9      	uxtb	r1, r1
 8024c10:	910b      	str	r1, [sp, #44]	; 0x2c
 8024c12:	e7b7      	b.n	8024b84 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8024c14:	2400b08c 	.word	0x2400b08c
 8024c18:	fffff800 	.word	0xfffff800
 8024c1c:	2b00      	cmp	r3, #0
 8024c1e:	d0df      	beq.n	8024be0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8024c20:	4a21      	ldr	r2, [pc, #132]	; (8024ca8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 8024c22:	fa1f fa83 	uxth.w	sl, r3
 8024c26:	f8be c000 	ldrh.w	ip, [lr]
 8024c2a:	43db      	mvns	r3, r3
 8024c2c:	6810      	ldr	r0, [r2, #0]
 8024c2e:	ea4f 212c 	mov.w	r1, ip, asr #8
 8024c32:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8024c36:	b2db      	uxtb	r3, r3
 8024c38:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024c3c:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8024c40:	fb12 f20a 	smulbb	r2, r2, sl
 8024c44:	b2c0      	uxtb	r0, r0
 8024c46:	fb1b fb0a 	smulbb	fp, fp, sl
 8024c4a:	fb01 2103 	mla	r1, r1, r3, r2
 8024c4e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8024c52:	fb10 f00a 	smulbb	r0, r0, sl
 8024c56:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8024c5a:	b289      	uxth	r1, r1
 8024c5c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024c60:	fa5f fc8c 	uxtb.w	ip, ip
 8024c64:	fb02 b203 	mla	r2, r2, r3, fp
 8024c68:	fb0c 0003 	mla	r0, ip, r3, r0
 8024c6c:	1c4b      	adds	r3, r1, #1
 8024c6e:	b292      	uxth	r2, r2
 8024c70:	b280      	uxth	r0, r0
 8024c72:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8024c76:	f100 0b01 	add.w	fp, r0, #1
 8024c7a:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8024c7e:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8024c82:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8024c86:	ea4b 0101 	orr.w	r1, fp, r1
 8024c8a:	f102 0b01 	add.w	fp, r2, #1
 8024c8e:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8024c92:	0952      	lsrs	r2, r2, #5
 8024c94:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024c98:	4311      	orrs	r1, r2
 8024c9a:	f8ae 1000 	strh.w	r1, [lr]
 8024c9e:	e79f      	b.n	8024be0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8024ca0:	b013      	add	sp, #76	; 0x4c
 8024ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024ca6:	bf00      	nop
 8024ca8:	2400b08c 	.word	0x2400b08c

08024cac <CRC_Lock>:
 8024cac:	4a20      	ldr	r2, [pc, #128]	; (8024d30 <CRC_Lock+0x84>)
 8024cae:	b530      	push	{r4, r5, lr}
 8024cb0:	6813      	ldr	r3, [r2, #0]
 8024cb2:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8024cb6:	f24c 2540 	movw	r5, #49728	; 0xc240
 8024cba:	f023 0301 	bic.w	r3, r3, #1
 8024cbe:	6013      	str	r3, [r2, #0]
 8024cc0:	4b1c      	ldr	r3, [pc, #112]	; (8024d34 <CRC_Lock+0x88>)
 8024cc2:	681a      	ldr	r2, [r3, #0]
 8024cc4:	4022      	ands	r2, r4
 8024cc6:	42aa      	cmp	r2, r5
 8024cc8:	d005      	beq.n	8024cd6 <CRC_Lock+0x2a>
 8024cca:	681b      	ldr	r3, [r3, #0]
 8024ccc:	f24c 2270 	movw	r2, #49776	; 0xc270
 8024cd0:	4023      	ands	r3, r4
 8024cd2:	4293      	cmp	r3, r2
 8024cd4:	d124      	bne.n	8024d20 <CRC_Lock+0x74>
 8024cd6:	4b18      	ldr	r3, [pc, #96]	; (8024d38 <CRC_Lock+0x8c>)
 8024cd8:	681b      	ldr	r3, [r3, #0]
 8024cda:	bb0b      	cbnz	r3, 8024d20 <CRC_Lock+0x74>
 8024cdc:	4b17      	ldr	r3, [pc, #92]	; (8024d3c <CRC_Lock+0x90>)
 8024cde:	681a      	ldr	r2, [r3, #0]
 8024ce0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8024ce4:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8024ce8:	d00d      	beq.n	8024d06 <CRC_Lock+0x5a>
 8024cea:	681a      	ldr	r2, [r3, #0]
 8024cec:	f240 4483 	movw	r4, #1155	; 0x483
 8024cf0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8024cf4:	42a2      	cmp	r2, r4
 8024cf6:	d006      	beq.n	8024d06 <CRC_Lock+0x5a>
 8024cf8:	681b      	ldr	r3, [r3, #0]
 8024cfa:	f240 4285 	movw	r2, #1157	; 0x485
 8024cfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024d02:	4293      	cmp	r3, r2
 8024d04:	d10c      	bne.n	8024d20 <CRC_Lock+0x74>
 8024d06:	4b0e      	ldr	r3, [pc, #56]	; (8024d40 <CRC_Lock+0x94>)
 8024d08:	2201      	movs	r2, #1
 8024d0a:	601a      	str	r2, [r3, #0]
 8024d0c:	681a      	ldr	r2, [r3, #0]
 8024d0e:	2a00      	cmp	r2, #0
 8024d10:	d1fc      	bne.n	8024d0c <CRC_Lock+0x60>
 8024d12:	4b0c      	ldr	r3, [pc, #48]	; (8024d44 <CRC_Lock+0x98>)
 8024d14:	6018      	str	r0, [r3, #0]
 8024d16:	6818      	ldr	r0, [r3, #0]
 8024d18:	1a43      	subs	r3, r0, r1
 8024d1a:	4258      	negs	r0, r3
 8024d1c:	4158      	adcs	r0, r3
 8024d1e:	bd30      	pop	{r4, r5, pc}
 8024d20:	4b09      	ldr	r3, [pc, #36]	; (8024d48 <CRC_Lock+0x9c>)
 8024d22:	2201      	movs	r2, #1
 8024d24:	601a      	str	r2, [r3, #0]
 8024d26:	681a      	ldr	r2, [r3, #0]
 8024d28:	2a00      	cmp	r2, #0
 8024d2a:	d1fc      	bne.n	8024d26 <CRC_Lock+0x7a>
 8024d2c:	4b07      	ldr	r3, [pc, #28]	; (8024d4c <CRC_Lock+0xa0>)
 8024d2e:	e7f1      	b.n	8024d14 <CRC_Lock+0x68>
 8024d30:	e0002000 	.word	0xe0002000
 8024d34:	e000ed00 	.word	0xe000ed00
 8024d38:	e0042000 	.word	0xe0042000
 8024d3c:	5c001000 	.word	0x5c001000
 8024d40:	58024c08 	.word	0x58024c08
 8024d44:	58024c00 	.word	0x58024c00
 8024d48:	40023008 	.word	0x40023008
 8024d4c:	40023000 	.word	0x40023000

08024d50 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8024d50:	6101      	str	r1, [r0, #16]
 8024d52:	4770      	bx	lr

08024d54 <_ZN8touchgfx8Gestures4tickEv>:
 8024d54:	7b83      	ldrb	r3, [r0, #14]
 8024d56:	b14b      	cbz	r3, 8024d6c <_ZN8touchgfx8Gestures4tickEv+0x18>
 8024d58:	8903      	ldrh	r3, [r0, #8]
 8024d5a:	3301      	adds	r3, #1
 8024d5c:	b29b      	uxth	r3, r3
 8024d5e:	2b07      	cmp	r3, #7
 8024d60:	8103      	strh	r3, [r0, #8]
 8024d62:	bf81      	itttt	hi
 8024d64:	2300      	movhi	r3, #0
 8024d66:	8143      	strhhi	r3, [r0, #10]
 8024d68:	8183      	strhhi	r3, [r0, #12]
 8024d6a:	7383      	strbhi	r3, [r0, #14]
 8024d6c:	4770      	bx	lr
	...

08024d70 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8024d70:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8024d74:	4698      	mov	r8, r3
 8024d76:	8883      	ldrh	r3, [r0, #4]
 8024d78:	4604      	mov	r4, r0
 8024d7a:	4617      	mov	r7, r2
 8024d7c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8024d80:	eba8 0303 	sub.w	r3, r8, r3
 8024d84:	4a19      	ldr	r2, [pc, #100]	; (8024dec <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8024d86:	460e      	mov	r6, r1
 8024d88:	b21b      	sxth	r3, r3
 8024d8a:	88c1      	ldrh	r1, [r0, #6]
 8024d8c:	9200      	str	r2, [sp, #0]
 8024d8e:	2000      	movs	r0, #0
 8024d90:	2b00      	cmp	r3, #0
 8024d92:	8aa2      	ldrh	r2, [r4, #20]
 8024d94:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8024d98:	bfb8      	it	lt
 8024d9a:	425b      	neglt	r3, r3
 8024d9c:	f88d 0004 	strb.w	r0, [sp, #4]
 8024da0:	f8ad 1008 	strh.w	r1, [sp, #8]
 8024da4:	b21b      	sxth	r3, r3
 8024da6:	f8ad 800a 	strh.w	r8, [sp, #10]
 8024daa:	f8ad 500c 	strh.w	r5, [sp, #12]
 8024dae:	4293      	cmp	r3, r2
 8024db0:	dc07      	bgt.n	8024dc2 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8024db2:	1a69      	subs	r1, r5, r1
 8024db4:	b209      	sxth	r1, r1
 8024db6:	2900      	cmp	r1, #0
 8024db8:	bfb8      	it	lt
 8024dba:	4249      	neglt	r1, r1
 8024dbc:	b209      	sxth	r1, r1
 8024dbe:	428a      	cmp	r2, r1
 8024dc0:	da10      	bge.n	8024de4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8024dc2:	6920      	ldr	r0, [r4, #16]
 8024dc4:	4669      	mov	r1, sp
 8024dc6:	eba8 0606 	sub.w	r6, r8, r6
 8024dca:	1bef      	subs	r7, r5, r7
 8024dcc:	6803      	ldr	r3, [r0, #0]
 8024dce:	685b      	ldr	r3, [r3, #4]
 8024dd0:	4798      	blx	r3
 8024dd2:	2300      	movs	r3, #0
 8024dd4:	2001      	movs	r0, #1
 8024dd6:	8166      	strh	r6, [r4, #10]
 8024dd8:	8123      	strh	r3, [r4, #8]
 8024dda:	81a7      	strh	r7, [r4, #12]
 8024ddc:	f8a4 8004 	strh.w	r8, [r4, #4]
 8024de0:	80e5      	strh	r5, [r4, #6]
 8024de2:	73a0      	strb	r0, [r4, #14]
 8024de4:	b004      	add	sp, #16
 8024de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024dea:	bf00      	nop
 8024dec:	08027edc 	.word	0x08027edc

08024df0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8024df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024df2:	461e      	mov	r6, r3
 8024df4:	1e4b      	subs	r3, r1, #1
 8024df6:	b085      	sub	sp, #20
 8024df8:	4604      	mov	r4, r0
 8024dfa:	2b01      	cmp	r3, #1
 8024dfc:	460d      	mov	r5, r1
 8024dfe:	4617      	mov	r7, r2
 8024e00:	d84b      	bhi.n	8024e9a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8024e02:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8024e06:	1cd3      	adds	r3, r2, #3
 8024e08:	b29b      	uxth	r3, r3
 8024e0a:	2b06      	cmp	r3, #6
 8024e0c:	d916      	bls.n	8024e3c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8024e0e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8024eb0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8024e12:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8024e16:	f8cd c004 	str.w	ip, [sp, #4]
 8024e1a:	f04f 0c00 	mov.w	ip, #0
 8024e1e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8024e22:	6900      	ldr	r0, [r0, #16]
 8024e24:	f8ad 100c 	strh.w	r1, [sp, #12]
 8024e28:	a901      	add	r1, sp, #4
 8024e2a:	f88d c008 	strb.w	ip, [sp, #8]
 8024e2e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8024e32:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024e36:	6803      	ldr	r3, [r0, #0]
 8024e38:	689b      	ldr	r3, [r3, #8]
 8024e3a:	4798      	blx	r3
 8024e3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024e40:	1cd3      	adds	r3, r2, #3
 8024e42:	b29b      	uxth	r3, r3
 8024e44:	2b06      	cmp	r3, #6
 8024e46:	d916      	bls.n	8024e76 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024e48:	f8df c064 	ldr.w	ip, [pc, #100]	; 8024eb0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8024e4c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8024e50:	f8cd c004 	str.w	ip, [sp, #4]
 8024e54:	f04f 0c01 	mov.w	ip, #1
 8024e58:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8024e5c:	6920      	ldr	r0, [r4, #16]
 8024e5e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8024e62:	a901      	add	r1, sp, #4
 8024e64:	f88d c008 	strb.w	ip, [sp, #8]
 8024e68:	f8ad 200a 	strh.w	r2, [sp, #10]
 8024e6c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024e70:	6803      	ldr	r3, [r0, #0]
 8024e72:	689b      	ldr	r3, [r3, #8]
 8024e74:	4798      	blx	r3
 8024e76:	4b0d      	ldr	r3, [pc, #52]	; (8024eac <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8024e78:	a901      	add	r1, sp, #4
 8024e7a:	6920      	ldr	r0, [r4, #16]
 8024e7c:	9301      	str	r3, [sp, #4]
 8024e7e:	2300      	movs	r3, #0
 8024e80:	f88d 5008 	strb.w	r5, [sp, #8]
 8024e84:	f8ad 700a 	strh.w	r7, [sp, #10]
 8024e88:	f8ad 600c 	strh.w	r6, [sp, #12]
 8024e8c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024e90:	6803      	ldr	r3, [r0, #0]
 8024e92:	681b      	ldr	r3, [r3, #0]
 8024e94:	4798      	blx	r3
 8024e96:	b005      	add	sp, #20
 8024e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024e9a:	2900      	cmp	r1, #0
 8024e9c:	d1eb      	bne.n	8024e76 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024e9e:	80a2      	strh	r2, [r4, #4]
 8024ea0:	80c6      	strh	r6, [r0, #6]
 8024ea2:	60a1      	str	r1, [r4, #8]
 8024ea4:	81a1      	strh	r1, [r4, #12]
 8024ea6:	73a1      	strb	r1, [r4, #14]
 8024ea8:	e7e5      	b.n	8024e76 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024eaa:	bf00      	nop
 8024eac:	08027ec8 	.word	0x08027ec8
 8024eb0:	08027ef0 	.word	0x08027ef0

08024eb4 <__aeabi_atexit>:
 8024eb4:	460b      	mov	r3, r1
 8024eb6:	4601      	mov	r1, r0
 8024eb8:	4618      	mov	r0, r3
 8024eba:	f000 b853 	b.w	8024f64 <__cxa_atexit>

08024ebe <_ZdlPvj>:
 8024ebe:	f000 b812 	b.w	8024ee6 <_ZdlPv>

08024ec2 <__cxa_guard_acquire>:
 8024ec2:	6803      	ldr	r3, [r0, #0]
 8024ec4:	07db      	lsls	r3, r3, #31
 8024ec6:	d406      	bmi.n	8024ed6 <__cxa_guard_acquire+0x14>
 8024ec8:	7843      	ldrb	r3, [r0, #1]
 8024eca:	b103      	cbz	r3, 8024ece <__cxa_guard_acquire+0xc>
 8024ecc:	deff      	udf	#255	; 0xff
 8024ece:	2301      	movs	r3, #1
 8024ed0:	7043      	strb	r3, [r0, #1]
 8024ed2:	4618      	mov	r0, r3
 8024ed4:	4770      	bx	lr
 8024ed6:	2000      	movs	r0, #0
 8024ed8:	4770      	bx	lr

08024eda <__cxa_guard_release>:
 8024eda:	2301      	movs	r3, #1
 8024edc:	6003      	str	r3, [r0, #0]
 8024ede:	4770      	bx	lr

08024ee0 <__cxa_pure_virtual>:
 8024ee0:	b508      	push	{r3, lr}
 8024ee2:	f000 f80f 	bl	8024f04 <_ZSt9terminatev>

08024ee6 <_ZdlPv>:
 8024ee6:	f000 b88f 	b.w	8025008 <free>

08024eea <_ZN10__cxxabiv111__terminateEPFvvE>:
 8024eea:	b508      	push	{r3, lr}
 8024eec:	4780      	blx	r0
 8024eee:	f000 f80e 	bl	8024f0e <abort>
	...

08024ef4 <_ZSt13get_terminatev>:
 8024ef4:	4b02      	ldr	r3, [pc, #8]	; (8024f00 <_ZSt13get_terminatev+0xc>)
 8024ef6:	6818      	ldr	r0, [r3, #0]
 8024ef8:	f3bf 8f5b 	dmb	ish
 8024efc:	4770      	bx	lr
 8024efe:	bf00      	nop
 8024f00:	240000c0 	.word	0x240000c0

08024f04 <_ZSt9terminatev>:
 8024f04:	b508      	push	{r3, lr}
 8024f06:	f7ff fff5 	bl	8024ef4 <_ZSt13get_terminatev>
 8024f0a:	f7ff ffee 	bl	8024eea <_ZN10__cxxabiv111__terminateEPFvvE>

08024f0e <abort>:
 8024f0e:	b508      	push	{r3, lr}
 8024f10:	2006      	movs	r0, #6
 8024f12:	f000 fc9d 	bl	8025850 <raise>
 8024f16:	2001      	movs	r0, #1
 8024f18:	f7dc fade 	bl	80014d8 <_exit>

08024f1c <__assert_func>:
 8024f1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024f1e:	4614      	mov	r4, r2
 8024f20:	461a      	mov	r2, r3
 8024f22:	4b09      	ldr	r3, [pc, #36]	; (8024f48 <__assert_func+0x2c>)
 8024f24:	681b      	ldr	r3, [r3, #0]
 8024f26:	4605      	mov	r5, r0
 8024f28:	68d8      	ldr	r0, [r3, #12]
 8024f2a:	b14c      	cbz	r4, 8024f40 <__assert_func+0x24>
 8024f2c:	4b07      	ldr	r3, [pc, #28]	; (8024f4c <__assert_func+0x30>)
 8024f2e:	9100      	str	r1, [sp, #0]
 8024f30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8024f34:	4906      	ldr	r1, [pc, #24]	; (8024f50 <__assert_func+0x34>)
 8024f36:	462b      	mov	r3, r5
 8024f38:	f000 f828 	bl	8024f8c <fiprintf>
 8024f3c:	f7ff ffe7 	bl	8024f0e <abort>
 8024f40:	4b04      	ldr	r3, [pc, #16]	; (8024f54 <__assert_func+0x38>)
 8024f42:	461c      	mov	r4, r3
 8024f44:	e7f3      	b.n	8024f2e <__assert_func+0x12>
 8024f46:	bf00      	nop
 8024f48:	240000c4 	.word	0x240000c4
 8024f4c:	080281b8 	.word	0x080281b8
 8024f50:	080281c5 	.word	0x080281c5
 8024f54:	080281f3 	.word	0x080281f3

08024f58 <atexit>:
 8024f58:	2300      	movs	r3, #0
 8024f5a:	4601      	mov	r1, r0
 8024f5c:	461a      	mov	r2, r3
 8024f5e:	4618      	mov	r0, r3
 8024f60:	f000 bd52 	b.w	8025a08 <__register_exitproc>

08024f64 <__cxa_atexit>:
 8024f64:	b510      	push	{r4, lr}
 8024f66:	4c05      	ldr	r4, [pc, #20]	; (8024f7c <__cxa_atexit+0x18>)
 8024f68:	4613      	mov	r3, r2
 8024f6a:	b12c      	cbz	r4, 8024f78 <__cxa_atexit+0x14>
 8024f6c:	460a      	mov	r2, r1
 8024f6e:	4601      	mov	r1, r0
 8024f70:	2002      	movs	r0, #2
 8024f72:	f000 fd49 	bl	8025a08 <__register_exitproc>
 8024f76:	bd10      	pop	{r4, pc}
 8024f78:	4620      	mov	r0, r4
 8024f7a:	e7fc      	b.n	8024f76 <__cxa_atexit+0x12>
 8024f7c:	08025a09 	.word	0x08025a09

08024f80 <__errno>:
 8024f80:	4b01      	ldr	r3, [pc, #4]	; (8024f88 <__errno+0x8>)
 8024f82:	6818      	ldr	r0, [r3, #0]
 8024f84:	4770      	bx	lr
 8024f86:	bf00      	nop
 8024f88:	240000c4 	.word	0x240000c4

08024f8c <fiprintf>:
 8024f8c:	b40e      	push	{r1, r2, r3}
 8024f8e:	b503      	push	{r0, r1, lr}
 8024f90:	4601      	mov	r1, r0
 8024f92:	ab03      	add	r3, sp, #12
 8024f94:	4805      	ldr	r0, [pc, #20]	; (8024fac <fiprintf+0x20>)
 8024f96:	f853 2b04 	ldr.w	r2, [r3], #4
 8024f9a:	6800      	ldr	r0, [r0, #0]
 8024f9c:	9301      	str	r3, [sp, #4]
 8024f9e:	f000 f95b 	bl	8025258 <_vfiprintf_r>
 8024fa2:	b002      	add	sp, #8
 8024fa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8024fa8:	b003      	add	sp, #12
 8024faa:	4770      	bx	lr
 8024fac:	240000c4 	.word	0x240000c4

08024fb0 <__libc_init_array>:
 8024fb0:	b570      	push	{r4, r5, r6, lr}
 8024fb2:	4d0d      	ldr	r5, [pc, #52]	; (8024fe8 <__libc_init_array+0x38>)
 8024fb4:	4c0d      	ldr	r4, [pc, #52]	; (8024fec <__libc_init_array+0x3c>)
 8024fb6:	1b64      	subs	r4, r4, r5
 8024fb8:	10a4      	asrs	r4, r4, #2
 8024fba:	2600      	movs	r6, #0
 8024fbc:	42a6      	cmp	r6, r4
 8024fbe:	d109      	bne.n	8024fd4 <__libc_init_array+0x24>
 8024fc0:	4d0b      	ldr	r5, [pc, #44]	; (8024ff0 <__libc_init_array+0x40>)
 8024fc2:	4c0c      	ldr	r4, [pc, #48]	; (8024ff4 <__libc_init_array+0x44>)
 8024fc4:	f001 f85a 	bl	802607c <_init>
 8024fc8:	1b64      	subs	r4, r4, r5
 8024fca:	10a4      	asrs	r4, r4, #2
 8024fcc:	2600      	movs	r6, #0
 8024fce:	42a6      	cmp	r6, r4
 8024fd0:	d105      	bne.n	8024fde <__libc_init_array+0x2e>
 8024fd2:	bd70      	pop	{r4, r5, r6, pc}
 8024fd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8024fd8:	4798      	blx	r3
 8024fda:	3601      	adds	r6, #1
 8024fdc:	e7ee      	b.n	8024fbc <__libc_init_array+0xc>
 8024fde:	f855 3b04 	ldr.w	r3, [r5], #4
 8024fe2:	4798      	blx	r3
 8024fe4:	3601      	adds	r6, #1
 8024fe6:	e7f2      	b.n	8024fce <__libc_init_array+0x1e>
 8024fe8:	080282a8 	.word	0x080282a8
 8024fec:	080282a8 	.word	0x080282a8
 8024ff0:	080282a8 	.word	0x080282a8
 8024ff4:	080282bc 	.word	0x080282bc

08024ff8 <malloc>:
 8024ff8:	4b02      	ldr	r3, [pc, #8]	; (8025004 <malloc+0xc>)
 8024ffa:	4601      	mov	r1, r0
 8024ffc:	6818      	ldr	r0, [r3, #0]
 8024ffe:	f000 b88d 	b.w	802511c <_malloc_r>
 8025002:	bf00      	nop
 8025004:	240000c4 	.word	0x240000c4

08025008 <free>:
 8025008:	4b02      	ldr	r3, [pc, #8]	; (8025014 <free+0xc>)
 802500a:	4601      	mov	r1, r0
 802500c:	6818      	ldr	r0, [r3, #0]
 802500e:	f000 b819 	b.w	8025044 <_free_r>
 8025012:	bf00      	nop
 8025014:	240000c4 	.word	0x240000c4

08025018 <memcpy>:
 8025018:	440a      	add	r2, r1
 802501a:	4291      	cmp	r1, r2
 802501c:	f100 33ff 	add.w	r3, r0, #4294967295
 8025020:	d100      	bne.n	8025024 <memcpy+0xc>
 8025022:	4770      	bx	lr
 8025024:	b510      	push	{r4, lr}
 8025026:	f811 4b01 	ldrb.w	r4, [r1], #1
 802502a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802502e:	4291      	cmp	r1, r2
 8025030:	d1f9      	bne.n	8025026 <memcpy+0xe>
 8025032:	bd10      	pop	{r4, pc}

08025034 <memset>:
 8025034:	4402      	add	r2, r0
 8025036:	4603      	mov	r3, r0
 8025038:	4293      	cmp	r3, r2
 802503a:	d100      	bne.n	802503e <memset+0xa>
 802503c:	4770      	bx	lr
 802503e:	f803 1b01 	strb.w	r1, [r3], #1
 8025042:	e7f9      	b.n	8025038 <memset+0x4>

08025044 <_free_r>:
 8025044:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025046:	2900      	cmp	r1, #0
 8025048:	d044      	beq.n	80250d4 <_free_r+0x90>
 802504a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802504e:	9001      	str	r0, [sp, #4]
 8025050:	2b00      	cmp	r3, #0
 8025052:	f1a1 0404 	sub.w	r4, r1, #4
 8025056:	bfb8      	it	lt
 8025058:	18e4      	addlt	r4, r4, r3
 802505a:	f000 ff57 	bl	8025f0c <__malloc_lock>
 802505e:	4a1e      	ldr	r2, [pc, #120]	; (80250d8 <_free_r+0x94>)
 8025060:	9801      	ldr	r0, [sp, #4]
 8025062:	6813      	ldr	r3, [r2, #0]
 8025064:	b933      	cbnz	r3, 8025074 <_free_r+0x30>
 8025066:	6063      	str	r3, [r4, #4]
 8025068:	6014      	str	r4, [r2, #0]
 802506a:	b003      	add	sp, #12
 802506c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025070:	f000 bf52 	b.w	8025f18 <__malloc_unlock>
 8025074:	42a3      	cmp	r3, r4
 8025076:	d908      	bls.n	802508a <_free_r+0x46>
 8025078:	6825      	ldr	r5, [r4, #0]
 802507a:	1961      	adds	r1, r4, r5
 802507c:	428b      	cmp	r3, r1
 802507e:	bf01      	itttt	eq
 8025080:	6819      	ldreq	r1, [r3, #0]
 8025082:	685b      	ldreq	r3, [r3, #4]
 8025084:	1949      	addeq	r1, r1, r5
 8025086:	6021      	streq	r1, [r4, #0]
 8025088:	e7ed      	b.n	8025066 <_free_r+0x22>
 802508a:	461a      	mov	r2, r3
 802508c:	685b      	ldr	r3, [r3, #4]
 802508e:	b10b      	cbz	r3, 8025094 <_free_r+0x50>
 8025090:	42a3      	cmp	r3, r4
 8025092:	d9fa      	bls.n	802508a <_free_r+0x46>
 8025094:	6811      	ldr	r1, [r2, #0]
 8025096:	1855      	adds	r5, r2, r1
 8025098:	42a5      	cmp	r5, r4
 802509a:	d10b      	bne.n	80250b4 <_free_r+0x70>
 802509c:	6824      	ldr	r4, [r4, #0]
 802509e:	4421      	add	r1, r4
 80250a0:	1854      	adds	r4, r2, r1
 80250a2:	42a3      	cmp	r3, r4
 80250a4:	6011      	str	r1, [r2, #0]
 80250a6:	d1e0      	bne.n	802506a <_free_r+0x26>
 80250a8:	681c      	ldr	r4, [r3, #0]
 80250aa:	685b      	ldr	r3, [r3, #4]
 80250ac:	6053      	str	r3, [r2, #4]
 80250ae:	4421      	add	r1, r4
 80250b0:	6011      	str	r1, [r2, #0]
 80250b2:	e7da      	b.n	802506a <_free_r+0x26>
 80250b4:	d902      	bls.n	80250bc <_free_r+0x78>
 80250b6:	230c      	movs	r3, #12
 80250b8:	6003      	str	r3, [r0, #0]
 80250ba:	e7d6      	b.n	802506a <_free_r+0x26>
 80250bc:	6825      	ldr	r5, [r4, #0]
 80250be:	1961      	adds	r1, r4, r5
 80250c0:	428b      	cmp	r3, r1
 80250c2:	bf04      	itt	eq
 80250c4:	6819      	ldreq	r1, [r3, #0]
 80250c6:	685b      	ldreq	r3, [r3, #4]
 80250c8:	6063      	str	r3, [r4, #4]
 80250ca:	bf04      	itt	eq
 80250cc:	1949      	addeq	r1, r1, r5
 80250ce:	6021      	streq	r1, [r4, #0]
 80250d0:	6054      	str	r4, [r2, #4]
 80250d2:	e7ca      	b.n	802506a <_free_r+0x26>
 80250d4:	b003      	add	sp, #12
 80250d6:	bd30      	pop	{r4, r5, pc}
 80250d8:	2400b180 	.word	0x2400b180

080250dc <sbrk_aligned>:
 80250dc:	b570      	push	{r4, r5, r6, lr}
 80250de:	4e0e      	ldr	r6, [pc, #56]	; (8025118 <sbrk_aligned+0x3c>)
 80250e0:	460c      	mov	r4, r1
 80250e2:	6831      	ldr	r1, [r6, #0]
 80250e4:	4605      	mov	r5, r0
 80250e6:	b911      	cbnz	r1, 80250ee <sbrk_aligned+0x12>
 80250e8:	f000 fb7a 	bl	80257e0 <_sbrk_r>
 80250ec:	6030      	str	r0, [r6, #0]
 80250ee:	4621      	mov	r1, r4
 80250f0:	4628      	mov	r0, r5
 80250f2:	f000 fb75 	bl	80257e0 <_sbrk_r>
 80250f6:	1c43      	adds	r3, r0, #1
 80250f8:	d00a      	beq.n	8025110 <sbrk_aligned+0x34>
 80250fa:	1cc4      	adds	r4, r0, #3
 80250fc:	f024 0403 	bic.w	r4, r4, #3
 8025100:	42a0      	cmp	r0, r4
 8025102:	d007      	beq.n	8025114 <sbrk_aligned+0x38>
 8025104:	1a21      	subs	r1, r4, r0
 8025106:	4628      	mov	r0, r5
 8025108:	f000 fb6a 	bl	80257e0 <_sbrk_r>
 802510c:	3001      	adds	r0, #1
 802510e:	d101      	bne.n	8025114 <sbrk_aligned+0x38>
 8025110:	f04f 34ff 	mov.w	r4, #4294967295
 8025114:	4620      	mov	r0, r4
 8025116:	bd70      	pop	{r4, r5, r6, pc}
 8025118:	2400b184 	.word	0x2400b184

0802511c <_malloc_r>:
 802511c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025120:	1ccd      	adds	r5, r1, #3
 8025122:	f025 0503 	bic.w	r5, r5, #3
 8025126:	3508      	adds	r5, #8
 8025128:	2d0c      	cmp	r5, #12
 802512a:	bf38      	it	cc
 802512c:	250c      	movcc	r5, #12
 802512e:	2d00      	cmp	r5, #0
 8025130:	4607      	mov	r7, r0
 8025132:	db01      	blt.n	8025138 <_malloc_r+0x1c>
 8025134:	42a9      	cmp	r1, r5
 8025136:	d905      	bls.n	8025144 <_malloc_r+0x28>
 8025138:	230c      	movs	r3, #12
 802513a:	603b      	str	r3, [r7, #0]
 802513c:	2600      	movs	r6, #0
 802513e:	4630      	mov	r0, r6
 8025140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025144:	4e2e      	ldr	r6, [pc, #184]	; (8025200 <_malloc_r+0xe4>)
 8025146:	f000 fee1 	bl	8025f0c <__malloc_lock>
 802514a:	6833      	ldr	r3, [r6, #0]
 802514c:	461c      	mov	r4, r3
 802514e:	bb34      	cbnz	r4, 802519e <_malloc_r+0x82>
 8025150:	4629      	mov	r1, r5
 8025152:	4638      	mov	r0, r7
 8025154:	f7ff ffc2 	bl	80250dc <sbrk_aligned>
 8025158:	1c43      	adds	r3, r0, #1
 802515a:	4604      	mov	r4, r0
 802515c:	d14d      	bne.n	80251fa <_malloc_r+0xde>
 802515e:	6834      	ldr	r4, [r6, #0]
 8025160:	4626      	mov	r6, r4
 8025162:	2e00      	cmp	r6, #0
 8025164:	d140      	bne.n	80251e8 <_malloc_r+0xcc>
 8025166:	6823      	ldr	r3, [r4, #0]
 8025168:	4631      	mov	r1, r6
 802516a:	4638      	mov	r0, r7
 802516c:	eb04 0803 	add.w	r8, r4, r3
 8025170:	f000 fb36 	bl	80257e0 <_sbrk_r>
 8025174:	4580      	cmp	r8, r0
 8025176:	d13a      	bne.n	80251ee <_malloc_r+0xd2>
 8025178:	6821      	ldr	r1, [r4, #0]
 802517a:	3503      	adds	r5, #3
 802517c:	1a6d      	subs	r5, r5, r1
 802517e:	f025 0503 	bic.w	r5, r5, #3
 8025182:	3508      	adds	r5, #8
 8025184:	2d0c      	cmp	r5, #12
 8025186:	bf38      	it	cc
 8025188:	250c      	movcc	r5, #12
 802518a:	4629      	mov	r1, r5
 802518c:	4638      	mov	r0, r7
 802518e:	f7ff ffa5 	bl	80250dc <sbrk_aligned>
 8025192:	3001      	adds	r0, #1
 8025194:	d02b      	beq.n	80251ee <_malloc_r+0xd2>
 8025196:	6823      	ldr	r3, [r4, #0]
 8025198:	442b      	add	r3, r5
 802519a:	6023      	str	r3, [r4, #0]
 802519c:	e00e      	b.n	80251bc <_malloc_r+0xa0>
 802519e:	6822      	ldr	r2, [r4, #0]
 80251a0:	1b52      	subs	r2, r2, r5
 80251a2:	d41e      	bmi.n	80251e2 <_malloc_r+0xc6>
 80251a4:	2a0b      	cmp	r2, #11
 80251a6:	d916      	bls.n	80251d6 <_malloc_r+0xba>
 80251a8:	1961      	adds	r1, r4, r5
 80251aa:	42a3      	cmp	r3, r4
 80251ac:	6025      	str	r5, [r4, #0]
 80251ae:	bf18      	it	ne
 80251b0:	6059      	strne	r1, [r3, #4]
 80251b2:	6863      	ldr	r3, [r4, #4]
 80251b4:	bf08      	it	eq
 80251b6:	6031      	streq	r1, [r6, #0]
 80251b8:	5162      	str	r2, [r4, r5]
 80251ba:	604b      	str	r3, [r1, #4]
 80251bc:	4638      	mov	r0, r7
 80251be:	f104 060b 	add.w	r6, r4, #11
 80251c2:	f000 fea9 	bl	8025f18 <__malloc_unlock>
 80251c6:	f026 0607 	bic.w	r6, r6, #7
 80251ca:	1d23      	adds	r3, r4, #4
 80251cc:	1af2      	subs	r2, r6, r3
 80251ce:	d0b6      	beq.n	802513e <_malloc_r+0x22>
 80251d0:	1b9b      	subs	r3, r3, r6
 80251d2:	50a3      	str	r3, [r4, r2]
 80251d4:	e7b3      	b.n	802513e <_malloc_r+0x22>
 80251d6:	6862      	ldr	r2, [r4, #4]
 80251d8:	42a3      	cmp	r3, r4
 80251da:	bf0c      	ite	eq
 80251dc:	6032      	streq	r2, [r6, #0]
 80251de:	605a      	strne	r2, [r3, #4]
 80251e0:	e7ec      	b.n	80251bc <_malloc_r+0xa0>
 80251e2:	4623      	mov	r3, r4
 80251e4:	6864      	ldr	r4, [r4, #4]
 80251e6:	e7b2      	b.n	802514e <_malloc_r+0x32>
 80251e8:	4634      	mov	r4, r6
 80251ea:	6876      	ldr	r6, [r6, #4]
 80251ec:	e7b9      	b.n	8025162 <_malloc_r+0x46>
 80251ee:	230c      	movs	r3, #12
 80251f0:	603b      	str	r3, [r7, #0]
 80251f2:	4638      	mov	r0, r7
 80251f4:	f000 fe90 	bl	8025f18 <__malloc_unlock>
 80251f8:	e7a1      	b.n	802513e <_malloc_r+0x22>
 80251fa:	6025      	str	r5, [r4, #0]
 80251fc:	e7de      	b.n	80251bc <_malloc_r+0xa0>
 80251fe:	bf00      	nop
 8025200:	2400b180 	.word	0x2400b180

08025204 <__sfputc_r>:
 8025204:	6893      	ldr	r3, [r2, #8]
 8025206:	3b01      	subs	r3, #1
 8025208:	2b00      	cmp	r3, #0
 802520a:	b410      	push	{r4}
 802520c:	6093      	str	r3, [r2, #8]
 802520e:	da08      	bge.n	8025222 <__sfputc_r+0x1e>
 8025210:	6994      	ldr	r4, [r2, #24]
 8025212:	42a3      	cmp	r3, r4
 8025214:	db01      	blt.n	802521a <__sfputc_r+0x16>
 8025216:	290a      	cmp	r1, #10
 8025218:	d103      	bne.n	8025222 <__sfputc_r+0x1e>
 802521a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802521e:	f000 bb33 	b.w	8025888 <__swbuf_r>
 8025222:	6813      	ldr	r3, [r2, #0]
 8025224:	1c58      	adds	r0, r3, #1
 8025226:	6010      	str	r0, [r2, #0]
 8025228:	7019      	strb	r1, [r3, #0]
 802522a:	4608      	mov	r0, r1
 802522c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025230:	4770      	bx	lr

08025232 <__sfputs_r>:
 8025232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025234:	4606      	mov	r6, r0
 8025236:	460f      	mov	r7, r1
 8025238:	4614      	mov	r4, r2
 802523a:	18d5      	adds	r5, r2, r3
 802523c:	42ac      	cmp	r4, r5
 802523e:	d101      	bne.n	8025244 <__sfputs_r+0x12>
 8025240:	2000      	movs	r0, #0
 8025242:	e007      	b.n	8025254 <__sfputs_r+0x22>
 8025244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025248:	463a      	mov	r2, r7
 802524a:	4630      	mov	r0, r6
 802524c:	f7ff ffda 	bl	8025204 <__sfputc_r>
 8025250:	1c43      	adds	r3, r0, #1
 8025252:	d1f3      	bne.n	802523c <__sfputs_r+0xa>
 8025254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025258 <_vfiprintf_r>:
 8025258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802525c:	460d      	mov	r5, r1
 802525e:	b09d      	sub	sp, #116	; 0x74
 8025260:	4614      	mov	r4, r2
 8025262:	4698      	mov	r8, r3
 8025264:	4606      	mov	r6, r0
 8025266:	b118      	cbz	r0, 8025270 <_vfiprintf_r+0x18>
 8025268:	6983      	ldr	r3, [r0, #24]
 802526a:	b90b      	cbnz	r3, 8025270 <_vfiprintf_r+0x18>
 802526c:	f000 fd48 	bl	8025d00 <__sinit>
 8025270:	4b89      	ldr	r3, [pc, #548]	; (8025498 <_vfiprintf_r+0x240>)
 8025272:	429d      	cmp	r5, r3
 8025274:	d11b      	bne.n	80252ae <_vfiprintf_r+0x56>
 8025276:	6875      	ldr	r5, [r6, #4]
 8025278:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802527a:	07d9      	lsls	r1, r3, #31
 802527c:	d405      	bmi.n	802528a <_vfiprintf_r+0x32>
 802527e:	89ab      	ldrh	r3, [r5, #12]
 8025280:	059a      	lsls	r2, r3, #22
 8025282:	d402      	bmi.n	802528a <_vfiprintf_r+0x32>
 8025284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025286:	f000 fdd9 	bl	8025e3c <__retarget_lock_acquire_recursive>
 802528a:	89ab      	ldrh	r3, [r5, #12]
 802528c:	071b      	lsls	r3, r3, #28
 802528e:	d501      	bpl.n	8025294 <_vfiprintf_r+0x3c>
 8025290:	692b      	ldr	r3, [r5, #16]
 8025292:	b9eb      	cbnz	r3, 80252d0 <_vfiprintf_r+0x78>
 8025294:	4629      	mov	r1, r5
 8025296:	4630      	mov	r0, r6
 8025298:	f000 fb48 	bl	802592c <__swsetup_r>
 802529c:	b1c0      	cbz	r0, 80252d0 <_vfiprintf_r+0x78>
 802529e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80252a0:	07dc      	lsls	r4, r3, #31
 80252a2:	d50e      	bpl.n	80252c2 <_vfiprintf_r+0x6a>
 80252a4:	f04f 30ff 	mov.w	r0, #4294967295
 80252a8:	b01d      	add	sp, #116	; 0x74
 80252aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80252ae:	4b7b      	ldr	r3, [pc, #492]	; (802549c <_vfiprintf_r+0x244>)
 80252b0:	429d      	cmp	r5, r3
 80252b2:	d101      	bne.n	80252b8 <_vfiprintf_r+0x60>
 80252b4:	68b5      	ldr	r5, [r6, #8]
 80252b6:	e7df      	b.n	8025278 <_vfiprintf_r+0x20>
 80252b8:	4b79      	ldr	r3, [pc, #484]	; (80254a0 <_vfiprintf_r+0x248>)
 80252ba:	429d      	cmp	r5, r3
 80252bc:	bf08      	it	eq
 80252be:	68f5      	ldreq	r5, [r6, #12]
 80252c0:	e7da      	b.n	8025278 <_vfiprintf_r+0x20>
 80252c2:	89ab      	ldrh	r3, [r5, #12]
 80252c4:	0598      	lsls	r0, r3, #22
 80252c6:	d4ed      	bmi.n	80252a4 <_vfiprintf_r+0x4c>
 80252c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80252ca:	f000 fdb9 	bl	8025e40 <__retarget_lock_release_recursive>
 80252ce:	e7e9      	b.n	80252a4 <_vfiprintf_r+0x4c>
 80252d0:	2300      	movs	r3, #0
 80252d2:	9309      	str	r3, [sp, #36]	; 0x24
 80252d4:	2320      	movs	r3, #32
 80252d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80252da:	f8cd 800c 	str.w	r8, [sp, #12]
 80252de:	2330      	movs	r3, #48	; 0x30
 80252e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80254a4 <_vfiprintf_r+0x24c>
 80252e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80252e8:	f04f 0901 	mov.w	r9, #1
 80252ec:	4623      	mov	r3, r4
 80252ee:	469a      	mov	sl, r3
 80252f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80252f4:	b10a      	cbz	r2, 80252fa <_vfiprintf_r+0xa2>
 80252f6:	2a25      	cmp	r2, #37	; 0x25
 80252f8:	d1f9      	bne.n	80252ee <_vfiprintf_r+0x96>
 80252fa:	ebba 0b04 	subs.w	fp, sl, r4
 80252fe:	d00b      	beq.n	8025318 <_vfiprintf_r+0xc0>
 8025300:	465b      	mov	r3, fp
 8025302:	4622      	mov	r2, r4
 8025304:	4629      	mov	r1, r5
 8025306:	4630      	mov	r0, r6
 8025308:	f7ff ff93 	bl	8025232 <__sfputs_r>
 802530c:	3001      	adds	r0, #1
 802530e:	f000 80aa 	beq.w	8025466 <_vfiprintf_r+0x20e>
 8025312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025314:	445a      	add	r2, fp
 8025316:	9209      	str	r2, [sp, #36]	; 0x24
 8025318:	f89a 3000 	ldrb.w	r3, [sl]
 802531c:	2b00      	cmp	r3, #0
 802531e:	f000 80a2 	beq.w	8025466 <_vfiprintf_r+0x20e>
 8025322:	2300      	movs	r3, #0
 8025324:	f04f 32ff 	mov.w	r2, #4294967295
 8025328:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802532c:	f10a 0a01 	add.w	sl, sl, #1
 8025330:	9304      	str	r3, [sp, #16]
 8025332:	9307      	str	r3, [sp, #28]
 8025334:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025338:	931a      	str	r3, [sp, #104]	; 0x68
 802533a:	4654      	mov	r4, sl
 802533c:	2205      	movs	r2, #5
 802533e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025342:	4858      	ldr	r0, [pc, #352]	; (80254a4 <_vfiprintf_r+0x24c>)
 8025344:	f7da ffcc 	bl	80002e0 <memchr>
 8025348:	9a04      	ldr	r2, [sp, #16]
 802534a:	b9d8      	cbnz	r0, 8025384 <_vfiprintf_r+0x12c>
 802534c:	06d1      	lsls	r1, r2, #27
 802534e:	bf44      	itt	mi
 8025350:	2320      	movmi	r3, #32
 8025352:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025356:	0713      	lsls	r3, r2, #28
 8025358:	bf44      	itt	mi
 802535a:	232b      	movmi	r3, #43	; 0x2b
 802535c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025360:	f89a 3000 	ldrb.w	r3, [sl]
 8025364:	2b2a      	cmp	r3, #42	; 0x2a
 8025366:	d015      	beq.n	8025394 <_vfiprintf_r+0x13c>
 8025368:	9a07      	ldr	r2, [sp, #28]
 802536a:	4654      	mov	r4, sl
 802536c:	2000      	movs	r0, #0
 802536e:	f04f 0c0a 	mov.w	ip, #10
 8025372:	4621      	mov	r1, r4
 8025374:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025378:	3b30      	subs	r3, #48	; 0x30
 802537a:	2b09      	cmp	r3, #9
 802537c:	d94e      	bls.n	802541c <_vfiprintf_r+0x1c4>
 802537e:	b1b0      	cbz	r0, 80253ae <_vfiprintf_r+0x156>
 8025380:	9207      	str	r2, [sp, #28]
 8025382:	e014      	b.n	80253ae <_vfiprintf_r+0x156>
 8025384:	eba0 0308 	sub.w	r3, r0, r8
 8025388:	fa09 f303 	lsl.w	r3, r9, r3
 802538c:	4313      	orrs	r3, r2
 802538e:	9304      	str	r3, [sp, #16]
 8025390:	46a2      	mov	sl, r4
 8025392:	e7d2      	b.n	802533a <_vfiprintf_r+0xe2>
 8025394:	9b03      	ldr	r3, [sp, #12]
 8025396:	1d19      	adds	r1, r3, #4
 8025398:	681b      	ldr	r3, [r3, #0]
 802539a:	9103      	str	r1, [sp, #12]
 802539c:	2b00      	cmp	r3, #0
 802539e:	bfbb      	ittet	lt
 80253a0:	425b      	neglt	r3, r3
 80253a2:	f042 0202 	orrlt.w	r2, r2, #2
 80253a6:	9307      	strge	r3, [sp, #28]
 80253a8:	9307      	strlt	r3, [sp, #28]
 80253aa:	bfb8      	it	lt
 80253ac:	9204      	strlt	r2, [sp, #16]
 80253ae:	7823      	ldrb	r3, [r4, #0]
 80253b0:	2b2e      	cmp	r3, #46	; 0x2e
 80253b2:	d10c      	bne.n	80253ce <_vfiprintf_r+0x176>
 80253b4:	7863      	ldrb	r3, [r4, #1]
 80253b6:	2b2a      	cmp	r3, #42	; 0x2a
 80253b8:	d135      	bne.n	8025426 <_vfiprintf_r+0x1ce>
 80253ba:	9b03      	ldr	r3, [sp, #12]
 80253bc:	1d1a      	adds	r2, r3, #4
 80253be:	681b      	ldr	r3, [r3, #0]
 80253c0:	9203      	str	r2, [sp, #12]
 80253c2:	2b00      	cmp	r3, #0
 80253c4:	bfb8      	it	lt
 80253c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80253ca:	3402      	adds	r4, #2
 80253cc:	9305      	str	r3, [sp, #20]
 80253ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80254b4 <_vfiprintf_r+0x25c>
 80253d2:	7821      	ldrb	r1, [r4, #0]
 80253d4:	2203      	movs	r2, #3
 80253d6:	4650      	mov	r0, sl
 80253d8:	f7da ff82 	bl	80002e0 <memchr>
 80253dc:	b140      	cbz	r0, 80253f0 <_vfiprintf_r+0x198>
 80253de:	2340      	movs	r3, #64	; 0x40
 80253e0:	eba0 000a 	sub.w	r0, r0, sl
 80253e4:	fa03 f000 	lsl.w	r0, r3, r0
 80253e8:	9b04      	ldr	r3, [sp, #16]
 80253ea:	4303      	orrs	r3, r0
 80253ec:	3401      	adds	r4, #1
 80253ee:	9304      	str	r3, [sp, #16]
 80253f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80253f4:	482c      	ldr	r0, [pc, #176]	; (80254a8 <_vfiprintf_r+0x250>)
 80253f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80253fa:	2206      	movs	r2, #6
 80253fc:	f7da ff70 	bl	80002e0 <memchr>
 8025400:	2800      	cmp	r0, #0
 8025402:	d03f      	beq.n	8025484 <_vfiprintf_r+0x22c>
 8025404:	4b29      	ldr	r3, [pc, #164]	; (80254ac <_vfiprintf_r+0x254>)
 8025406:	bb1b      	cbnz	r3, 8025450 <_vfiprintf_r+0x1f8>
 8025408:	9b03      	ldr	r3, [sp, #12]
 802540a:	3307      	adds	r3, #7
 802540c:	f023 0307 	bic.w	r3, r3, #7
 8025410:	3308      	adds	r3, #8
 8025412:	9303      	str	r3, [sp, #12]
 8025414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025416:	443b      	add	r3, r7
 8025418:	9309      	str	r3, [sp, #36]	; 0x24
 802541a:	e767      	b.n	80252ec <_vfiprintf_r+0x94>
 802541c:	fb0c 3202 	mla	r2, ip, r2, r3
 8025420:	460c      	mov	r4, r1
 8025422:	2001      	movs	r0, #1
 8025424:	e7a5      	b.n	8025372 <_vfiprintf_r+0x11a>
 8025426:	2300      	movs	r3, #0
 8025428:	3401      	adds	r4, #1
 802542a:	9305      	str	r3, [sp, #20]
 802542c:	4619      	mov	r1, r3
 802542e:	f04f 0c0a 	mov.w	ip, #10
 8025432:	4620      	mov	r0, r4
 8025434:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025438:	3a30      	subs	r2, #48	; 0x30
 802543a:	2a09      	cmp	r2, #9
 802543c:	d903      	bls.n	8025446 <_vfiprintf_r+0x1ee>
 802543e:	2b00      	cmp	r3, #0
 8025440:	d0c5      	beq.n	80253ce <_vfiprintf_r+0x176>
 8025442:	9105      	str	r1, [sp, #20]
 8025444:	e7c3      	b.n	80253ce <_vfiprintf_r+0x176>
 8025446:	fb0c 2101 	mla	r1, ip, r1, r2
 802544a:	4604      	mov	r4, r0
 802544c:	2301      	movs	r3, #1
 802544e:	e7f0      	b.n	8025432 <_vfiprintf_r+0x1da>
 8025450:	ab03      	add	r3, sp, #12
 8025452:	9300      	str	r3, [sp, #0]
 8025454:	462a      	mov	r2, r5
 8025456:	4b16      	ldr	r3, [pc, #88]	; (80254b0 <_vfiprintf_r+0x258>)
 8025458:	a904      	add	r1, sp, #16
 802545a:	4630      	mov	r0, r6
 802545c:	f3af 8000 	nop.w
 8025460:	4607      	mov	r7, r0
 8025462:	1c78      	adds	r0, r7, #1
 8025464:	d1d6      	bne.n	8025414 <_vfiprintf_r+0x1bc>
 8025466:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025468:	07d9      	lsls	r1, r3, #31
 802546a:	d405      	bmi.n	8025478 <_vfiprintf_r+0x220>
 802546c:	89ab      	ldrh	r3, [r5, #12]
 802546e:	059a      	lsls	r2, r3, #22
 8025470:	d402      	bmi.n	8025478 <_vfiprintf_r+0x220>
 8025472:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025474:	f000 fce4 	bl	8025e40 <__retarget_lock_release_recursive>
 8025478:	89ab      	ldrh	r3, [r5, #12]
 802547a:	065b      	lsls	r3, r3, #25
 802547c:	f53f af12 	bmi.w	80252a4 <_vfiprintf_r+0x4c>
 8025480:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025482:	e711      	b.n	80252a8 <_vfiprintf_r+0x50>
 8025484:	ab03      	add	r3, sp, #12
 8025486:	9300      	str	r3, [sp, #0]
 8025488:	462a      	mov	r2, r5
 802548a:	4b09      	ldr	r3, [pc, #36]	; (80254b0 <_vfiprintf_r+0x258>)
 802548c:	a904      	add	r1, sp, #16
 802548e:	4630      	mov	r0, r6
 8025490:	f000 f880 	bl	8025594 <_printf_i>
 8025494:	e7e4      	b.n	8025460 <_vfiprintf_r+0x208>
 8025496:	bf00      	nop
 8025498:	08028250 	.word	0x08028250
 802549c:	08028270 	.word	0x08028270
 80254a0:	08028230 	.word	0x08028230
 80254a4:	080281f8 	.word	0x080281f8
 80254a8:	08028202 	.word	0x08028202
 80254ac:	00000000 	.word	0x00000000
 80254b0:	08025233 	.word	0x08025233
 80254b4:	080281fe 	.word	0x080281fe

080254b8 <_printf_common>:
 80254b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80254bc:	4616      	mov	r6, r2
 80254be:	4699      	mov	r9, r3
 80254c0:	688a      	ldr	r2, [r1, #8]
 80254c2:	690b      	ldr	r3, [r1, #16]
 80254c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80254c8:	4293      	cmp	r3, r2
 80254ca:	bfb8      	it	lt
 80254cc:	4613      	movlt	r3, r2
 80254ce:	6033      	str	r3, [r6, #0]
 80254d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80254d4:	4607      	mov	r7, r0
 80254d6:	460c      	mov	r4, r1
 80254d8:	b10a      	cbz	r2, 80254de <_printf_common+0x26>
 80254da:	3301      	adds	r3, #1
 80254dc:	6033      	str	r3, [r6, #0]
 80254de:	6823      	ldr	r3, [r4, #0]
 80254e0:	0699      	lsls	r1, r3, #26
 80254e2:	bf42      	ittt	mi
 80254e4:	6833      	ldrmi	r3, [r6, #0]
 80254e6:	3302      	addmi	r3, #2
 80254e8:	6033      	strmi	r3, [r6, #0]
 80254ea:	6825      	ldr	r5, [r4, #0]
 80254ec:	f015 0506 	ands.w	r5, r5, #6
 80254f0:	d106      	bne.n	8025500 <_printf_common+0x48>
 80254f2:	f104 0a19 	add.w	sl, r4, #25
 80254f6:	68e3      	ldr	r3, [r4, #12]
 80254f8:	6832      	ldr	r2, [r6, #0]
 80254fa:	1a9b      	subs	r3, r3, r2
 80254fc:	42ab      	cmp	r3, r5
 80254fe:	dc26      	bgt.n	802554e <_printf_common+0x96>
 8025500:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8025504:	1e13      	subs	r3, r2, #0
 8025506:	6822      	ldr	r2, [r4, #0]
 8025508:	bf18      	it	ne
 802550a:	2301      	movne	r3, #1
 802550c:	0692      	lsls	r2, r2, #26
 802550e:	d42b      	bmi.n	8025568 <_printf_common+0xb0>
 8025510:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025514:	4649      	mov	r1, r9
 8025516:	4638      	mov	r0, r7
 8025518:	47c0      	blx	r8
 802551a:	3001      	adds	r0, #1
 802551c:	d01e      	beq.n	802555c <_printf_common+0xa4>
 802551e:	6823      	ldr	r3, [r4, #0]
 8025520:	68e5      	ldr	r5, [r4, #12]
 8025522:	6832      	ldr	r2, [r6, #0]
 8025524:	f003 0306 	and.w	r3, r3, #6
 8025528:	2b04      	cmp	r3, #4
 802552a:	bf08      	it	eq
 802552c:	1aad      	subeq	r5, r5, r2
 802552e:	68a3      	ldr	r3, [r4, #8]
 8025530:	6922      	ldr	r2, [r4, #16]
 8025532:	bf0c      	ite	eq
 8025534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025538:	2500      	movne	r5, #0
 802553a:	4293      	cmp	r3, r2
 802553c:	bfc4      	itt	gt
 802553e:	1a9b      	subgt	r3, r3, r2
 8025540:	18ed      	addgt	r5, r5, r3
 8025542:	2600      	movs	r6, #0
 8025544:	341a      	adds	r4, #26
 8025546:	42b5      	cmp	r5, r6
 8025548:	d11a      	bne.n	8025580 <_printf_common+0xc8>
 802554a:	2000      	movs	r0, #0
 802554c:	e008      	b.n	8025560 <_printf_common+0xa8>
 802554e:	2301      	movs	r3, #1
 8025550:	4652      	mov	r2, sl
 8025552:	4649      	mov	r1, r9
 8025554:	4638      	mov	r0, r7
 8025556:	47c0      	blx	r8
 8025558:	3001      	adds	r0, #1
 802555a:	d103      	bne.n	8025564 <_printf_common+0xac>
 802555c:	f04f 30ff 	mov.w	r0, #4294967295
 8025560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025564:	3501      	adds	r5, #1
 8025566:	e7c6      	b.n	80254f6 <_printf_common+0x3e>
 8025568:	18e1      	adds	r1, r4, r3
 802556a:	1c5a      	adds	r2, r3, #1
 802556c:	2030      	movs	r0, #48	; 0x30
 802556e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8025572:	4422      	add	r2, r4
 8025574:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8025578:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802557c:	3302      	adds	r3, #2
 802557e:	e7c7      	b.n	8025510 <_printf_common+0x58>
 8025580:	2301      	movs	r3, #1
 8025582:	4622      	mov	r2, r4
 8025584:	4649      	mov	r1, r9
 8025586:	4638      	mov	r0, r7
 8025588:	47c0      	blx	r8
 802558a:	3001      	adds	r0, #1
 802558c:	d0e6      	beq.n	802555c <_printf_common+0xa4>
 802558e:	3601      	adds	r6, #1
 8025590:	e7d9      	b.n	8025546 <_printf_common+0x8e>
	...

08025594 <_printf_i>:
 8025594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8025598:	7e0f      	ldrb	r7, [r1, #24]
 802559a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802559c:	2f78      	cmp	r7, #120	; 0x78
 802559e:	4691      	mov	r9, r2
 80255a0:	4680      	mov	r8, r0
 80255a2:	460c      	mov	r4, r1
 80255a4:	469a      	mov	sl, r3
 80255a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80255aa:	d807      	bhi.n	80255bc <_printf_i+0x28>
 80255ac:	2f62      	cmp	r7, #98	; 0x62
 80255ae:	d80a      	bhi.n	80255c6 <_printf_i+0x32>
 80255b0:	2f00      	cmp	r7, #0
 80255b2:	f000 80d8 	beq.w	8025766 <_printf_i+0x1d2>
 80255b6:	2f58      	cmp	r7, #88	; 0x58
 80255b8:	f000 80a3 	beq.w	8025702 <_printf_i+0x16e>
 80255bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80255c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80255c4:	e03a      	b.n	802563c <_printf_i+0xa8>
 80255c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80255ca:	2b15      	cmp	r3, #21
 80255cc:	d8f6      	bhi.n	80255bc <_printf_i+0x28>
 80255ce:	a101      	add	r1, pc, #4	; (adr r1, 80255d4 <_printf_i+0x40>)
 80255d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80255d4:	0802562d 	.word	0x0802562d
 80255d8:	08025641 	.word	0x08025641
 80255dc:	080255bd 	.word	0x080255bd
 80255e0:	080255bd 	.word	0x080255bd
 80255e4:	080255bd 	.word	0x080255bd
 80255e8:	080255bd 	.word	0x080255bd
 80255ec:	08025641 	.word	0x08025641
 80255f0:	080255bd 	.word	0x080255bd
 80255f4:	080255bd 	.word	0x080255bd
 80255f8:	080255bd 	.word	0x080255bd
 80255fc:	080255bd 	.word	0x080255bd
 8025600:	0802574d 	.word	0x0802574d
 8025604:	08025671 	.word	0x08025671
 8025608:	0802572f 	.word	0x0802572f
 802560c:	080255bd 	.word	0x080255bd
 8025610:	080255bd 	.word	0x080255bd
 8025614:	0802576f 	.word	0x0802576f
 8025618:	080255bd 	.word	0x080255bd
 802561c:	08025671 	.word	0x08025671
 8025620:	080255bd 	.word	0x080255bd
 8025624:	080255bd 	.word	0x080255bd
 8025628:	08025737 	.word	0x08025737
 802562c:	682b      	ldr	r3, [r5, #0]
 802562e:	1d1a      	adds	r2, r3, #4
 8025630:	681b      	ldr	r3, [r3, #0]
 8025632:	602a      	str	r2, [r5, #0]
 8025634:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025638:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802563c:	2301      	movs	r3, #1
 802563e:	e0a3      	b.n	8025788 <_printf_i+0x1f4>
 8025640:	6820      	ldr	r0, [r4, #0]
 8025642:	6829      	ldr	r1, [r5, #0]
 8025644:	0606      	lsls	r6, r0, #24
 8025646:	f101 0304 	add.w	r3, r1, #4
 802564a:	d50a      	bpl.n	8025662 <_printf_i+0xce>
 802564c:	680e      	ldr	r6, [r1, #0]
 802564e:	602b      	str	r3, [r5, #0]
 8025650:	2e00      	cmp	r6, #0
 8025652:	da03      	bge.n	802565c <_printf_i+0xc8>
 8025654:	232d      	movs	r3, #45	; 0x2d
 8025656:	4276      	negs	r6, r6
 8025658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802565c:	485e      	ldr	r0, [pc, #376]	; (80257d8 <_printf_i+0x244>)
 802565e:	230a      	movs	r3, #10
 8025660:	e019      	b.n	8025696 <_printf_i+0x102>
 8025662:	680e      	ldr	r6, [r1, #0]
 8025664:	602b      	str	r3, [r5, #0]
 8025666:	f010 0f40 	tst.w	r0, #64	; 0x40
 802566a:	bf18      	it	ne
 802566c:	b236      	sxthne	r6, r6
 802566e:	e7ef      	b.n	8025650 <_printf_i+0xbc>
 8025670:	682b      	ldr	r3, [r5, #0]
 8025672:	6820      	ldr	r0, [r4, #0]
 8025674:	1d19      	adds	r1, r3, #4
 8025676:	6029      	str	r1, [r5, #0]
 8025678:	0601      	lsls	r1, r0, #24
 802567a:	d501      	bpl.n	8025680 <_printf_i+0xec>
 802567c:	681e      	ldr	r6, [r3, #0]
 802567e:	e002      	b.n	8025686 <_printf_i+0xf2>
 8025680:	0646      	lsls	r6, r0, #25
 8025682:	d5fb      	bpl.n	802567c <_printf_i+0xe8>
 8025684:	881e      	ldrh	r6, [r3, #0]
 8025686:	4854      	ldr	r0, [pc, #336]	; (80257d8 <_printf_i+0x244>)
 8025688:	2f6f      	cmp	r7, #111	; 0x6f
 802568a:	bf0c      	ite	eq
 802568c:	2308      	moveq	r3, #8
 802568e:	230a      	movne	r3, #10
 8025690:	2100      	movs	r1, #0
 8025692:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8025696:	6865      	ldr	r5, [r4, #4]
 8025698:	60a5      	str	r5, [r4, #8]
 802569a:	2d00      	cmp	r5, #0
 802569c:	bfa2      	ittt	ge
 802569e:	6821      	ldrge	r1, [r4, #0]
 80256a0:	f021 0104 	bicge.w	r1, r1, #4
 80256a4:	6021      	strge	r1, [r4, #0]
 80256a6:	b90e      	cbnz	r6, 80256ac <_printf_i+0x118>
 80256a8:	2d00      	cmp	r5, #0
 80256aa:	d04d      	beq.n	8025748 <_printf_i+0x1b4>
 80256ac:	4615      	mov	r5, r2
 80256ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80256b2:	fb03 6711 	mls	r7, r3, r1, r6
 80256b6:	5dc7      	ldrb	r7, [r0, r7]
 80256b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80256bc:	4637      	mov	r7, r6
 80256be:	42bb      	cmp	r3, r7
 80256c0:	460e      	mov	r6, r1
 80256c2:	d9f4      	bls.n	80256ae <_printf_i+0x11a>
 80256c4:	2b08      	cmp	r3, #8
 80256c6:	d10b      	bne.n	80256e0 <_printf_i+0x14c>
 80256c8:	6823      	ldr	r3, [r4, #0]
 80256ca:	07de      	lsls	r6, r3, #31
 80256cc:	d508      	bpl.n	80256e0 <_printf_i+0x14c>
 80256ce:	6923      	ldr	r3, [r4, #16]
 80256d0:	6861      	ldr	r1, [r4, #4]
 80256d2:	4299      	cmp	r1, r3
 80256d4:	bfde      	ittt	le
 80256d6:	2330      	movle	r3, #48	; 0x30
 80256d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80256dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80256e0:	1b52      	subs	r2, r2, r5
 80256e2:	6122      	str	r2, [r4, #16]
 80256e4:	f8cd a000 	str.w	sl, [sp]
 80256e8:	464b      	mov	r3, r9
 80256ea:	aa03      	add	r2, sp, #12
 80256ec:	4621      	mov	r1, r4
 80256ee:	4640      	mov	r0, r8
 80256f0:	f7ff fee2 	bl	80254b8 <_printf_common>
 80256f4:	3001      	adds	r0, #1
 80256f6:	d14c      	bne.n	8025792 <_printf_i+0x1fe>
 80256f8:	f04f 30ff 	mov.w	r0, #4294967295
 80256fc:	b004      	add	sp, #16
 80256fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025702:	4835      	ldr	r0, [pc, #212]	; (80257d8 <_printf_i+0x244>)
 8025704:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8025708:	6829      	ldr	r1, [r5, #0]
 802570a:	6823      	ldr	r3, [r4, #0]
 802570c:	f851 6b04 	ldr.w	r6, [r1], #4
 8025710:	6029      	str	r1, [r5, #0]
 8025712:	061d      	lsls	r5, r3, #24
 8025714:	d514      	bpl.n	8025740 <_printf_i+0x1ac>
 8025716:	07df      	lsls	r7, r3, #31
 8025718:	bf44      	itt	mi
 802571a:	f043 0320 	orrmi.w	r3, r3, #32
 802571e:	6023      	strmi	r3, [r4, #0]
 8025720:	b91e      	cbnz	r6, 802572a <_printf_i+0x196>
 8025722:	6823      	ldr	r3, [r4, #0]
 8025724:	f023 0320 	bic.w	r3, r3, #32
 8025728:	6023      	str	r3, [r4, #0]
 802572a:	2310      	movs	r3, #16
 802572c:	e7b0      	b.n	8025690 <_printf_i+0xfc>
 802572e:	6823      	ldr	r3, [r4, #0]
 8025730:	f043 0320 	orr.w	r3, r3, #32
 8025734:	6023      	str	r3, [r4, #0]
 8025736:	2378      	movs	r3, #120	; 0x78
 8025738:	4828      	ldr	r0, [pc, #160]	; (80257dc <_printf_i+0x248>)
 802573a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802573e:	e7e3      	b.n	8025708 <_printf_i+0x174>
 8025740:	0659      	lsls	r1, r3, #25
 8025742:	bf48      	it	mi
 8025744:	b2b6      	uxthmi	r6, r6
 8025746:	e7e6      	b.n	8025716 <_printf_i+0x182>
 8025748:	4615      	mov	r5, r2
 802574a:	e7bb      	b.n	80256c4 <_printf_i+0x130>
 802574c:	682b      	ldr	r3, [r5, #0]
 802574e:	6826      	ldr	r6, [r4, #0]
 8025750:	6961      	ldr	r1, [r4, #20]
 8025752:	1d18      	adds	r0, r3, #4
 8025754:	6028      	str	r0, [r5, #0]
 8025756:	0635      	lsls	r5, r6, #24
 8025758:	681b      	ldr	r3, [r3, #0]
 802575a:	d501      	bpl.n	8025760 <_printf_i+0x1cc>
 802575c:	6019      	str	r1, [r3, #0]
 802575e:	e002      	b.n	8025766 <_printf_i+0x1d2>
 8025760:	0670      	lsls	r0, r6, #25
 8025762:	d5fb      	bpl.n	802575c <_printf_i+0x1c8>
 8025764:	8019      	strh	r1, [r3, #0]
 8025766:	2300      	movs	r3, #0
 8025768:	6123      	str	r3, [r4, #16]
 802576a:	4615      	mov	r5, r2
 802576c:	e7ba      	b.n	80256e4 <_printf_i+0x150>
 802576e:	682b      	ldr	r3, [r5, #0]
 8025770:	1d1a      	adds	r2, r3, #4
 8025772:	602a      	str	r2, [r5, #0]
 8025774:	681d      	ldr	r5, [r3, #0]
 8025776:	6862      	ldr	r2, [r4, #4]
 8025778:	2100      	movs	r1, #0
 802577a:	4628      	mov	r0, r5
 802577c:	f7da fdb0 	bl	80002e0 <memchr>
 8025780:	b108      	cbz	r0, 8025786 <_printf_i+0x1f2>
 8025782:	1b40      	subs	r0, r0, r5
 8025784:	6060      	str	r0, [r4, #4]
 8025786:	6863      	ldr	r3, [r4, #4]
 8025788:	6123      	str	r3, [r4, #16]
 802578a:	2300      	movs	r3, #0
 802578c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025790:	e7a8      	b.n	80256e4 <_printf_i+0x150>
 8025792:	6923      	ldr	r3, [r4, #16]
 8025794:	462a      	mov	r2, r5
 8025796:	4649      	mov	r1, r9
 8025798:	4640      	mov	r0, r8
 802579a:	47d0      	blx	sl
 802579c:	3001      	adds	r0, #1
 802579e:	d0ab      	beq.n	80256f8 <_printf_i+0x164>
 80257a0:	6823      	ldr	r3, [r4, #0]
 80257a2:	079b      	lsls	r3, r3, #30
 80257a4:	d413      	bmi.n	80257ce <_printf_i+0x23a>
 80257a6:	68e0      	ldr	r0, [r4, #12]
 80257a8:	9b03      	ldr	r3, [sp, #12]
 80257aa:	4298      	cmp	r0, r3
 80257ac:	bfb8      	it	lt
 80257ae:	4618      	movlt	r0, r3
 80257b0:	e7a4      	b.n	80256fc <_printf_i+0x168>
 80257b2:	2301      	movs	r3, #1
 80257b4:	4632      	mov	r2, r6
 80257b6:	4649      	mov	r1, r9
 80257b8:	4640      	mov	r0, r8
 80257ba:	47d0      	blx	sl
 80257bc:	3001      	adds	r0, #1
 80257be:	d09b      	beq.n	80256f8 <_printf_i+0x164>
 80257c0:	3501      	adds	r5, #1
 80257c2:	68e3      	ldr	r3, [r4, #12]
 80257c4:	9903      	ldr	r1, [sp, #12]
 80257c6:	1a5b      	subs	r3, r3, r1
 80257c8:	42ab      	cmp	r3, r5
 80257ca:	dcf2      	bgt.n	80257b2 <_printf_i+0x21e>
 80257cc:	e7eb      	b.n	80257a6 <_printf_i+0x212>
 80257ce:	2500      	movs	r5, #0
 80257d0:	f104 0619 	add.w	r6, r4, #25
 80257d4:	e7f5      	b.n	80257c2 <_printf_i+0x22e>
 80257d6:	bf00      	nop
 80257d8:	08028209 	.word	0x08028209
 80257dc:	0802821a 	.word	0x0802821a

080257e0 <_sbrk_r>:
 80257e0:	b538      	push	{r3, r4, r5, lr}
 80257e2:	4d06      	ldr	r5, [pc, #24]	; (80257fc <_sbrk_r+0x1c>)
 80257e4:	2300      	movs	r3, #0
 80257e6:	4604      	mov	r4, r0
 80257e8:	4608      	mov	r0, r1
 80257ea:	602b      	str	r3, [r5, #0]
 80257ec:	f7db feec 	bl	80015c8 <_sbrk>
 80257f0:	1c43      	adds	r3, r0, #1
 80257f2:	d102      	bne.n	80257fa <_sbrk_r+0x1a>
 80257f4:	682b      	ldr	r3, [r5, #0]
 80257f6:	b103      	cbz	r3, 80257fa <_sbrk_r+0x1a>
 80257f8:	6023      	str	r3, [r4, #0]
 80257fa:	bd38      	pop	{r3, r4, r5, pc}
 80257fc:	2400b324 	.word	0x2400b324

08025800 <_raise_r>:
 8025800:	291f      	cmp	r1, #31
 8025802:	b538      	push	{r3, r4, r5, lr}
 8025804:	4604      	mov	r4, r0
 8025806:	460d      	mov	r5, r1
 8025808:	d904      	bls.n	8025814 <_raise_r+0x14>
 802580a:	2316      	movs	r3, #22
 802580c:	6003      	str	r3, [r0, #0]
 802580e:	f04f 30ff 	mov.w	r0, #4294967295
 8025812:	bd38      	pop	{r3, r4, r5, pc}
 8025814:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8025816:	b112      	cbz	r2, 802581e <_raise_r+0x1e>
 8025818:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802581c:	b94b      	cbnz	r3, 8025832 <_raise_r+0x32>
 802581e:	4620      	mov	r0, r4
 8025820:	f000 f830 	bl	8025884 <_getpid_r>
 8025824:	462a      	mov	r2, r5
 8025826:	4601      	mov	r1, r0
 8025828:	4620      	mov	r0, r4
 802582a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802582e:	f000 b817 	b.w	8025860 <_kill_r>
 8025832:	2b01      	cmp	r3, #1
 8025834:	d00a      	beq.n	802584c <_raise_r+0x4c>
 8025836:	1c59      	adds	r1, r3, #1
 8025838:	d103      	bne.n	8025842 <_raise_r+0x42>
 802583a:	2316      	movs	r3, #22
 802583c:	6003      	str	r3, [r0, #0]
 802583e:	2001      	movs	r0, #1
 8025840:	e7e7      	b.n	8025812 <_raise_r+0x12>
 8025842:	2400      	movs	r4, #0
 8025844:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8025848:	4628      	mov	r0, r5
 802584a:	4798      	blx	r3
 802584c:	2000      	movs	r0, #0
 802584e:	e7e0      	b.n	8025812 <_raise_r+0x12>

08025850 <raise>:
 8025850:	4b02      	ldr	r3, [pc, #8]	; (802585c <raise+0xc>)
 8025852:	4601      	mov	r1, r0
 8025854:	6818      	ldr	r0, [r3, #0]
 8025856:	f7ff bfd3 	b.w	8025800 <_raise_r>
 802585a:	bf00      	nop
 802585c:	240000c4 	.word	0x240000c4

08025860 <_kill_r>:
 8025860:	b538      	push	{r3, r4, r5, lr}
 8025862:	4d07      	ldr	r5, [pc, #28]	; (8025880 <_kill_r+0x20>)
 8025864:	2300      	movs	r3, #0
 8025866:	4604      	mov	r4, r0
 8025868:	4608      	mov	r0, r1
 802586a:	4611      	mov	r1, r2
 802586c:	602b      	str	r3, [r5, #0]
 802586e:	f7db fe23 	bl	80014b8 <_kill>
 8025872:	1c43      	adds	r3, r0, #1
 8025874:	d102      	bne.n	802587c <_kill_r+0x1c>
 8025876:	682b      	ldr	r3, [r5, #0]
 8025878:	b103      	cbz	r3, 802587c <_kill_r+0x1c>
 802587a:	6023      	str	r3, [r4, #0]
 802587c:	bd38      	pop	{r3, r4, r5, pc}
 802587e:	bf00      	nop
 8025880:	2400b324 	.word	0x2400b324

08025884 <_getpid_r>:
 8025884:	f7db be10 	b.w	80014a8 <_getpid>

08025888 <__swbuf_r>:
 8025888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802588a:	460e      	mov	r6, r1
 802588c:	4614      	mov	r4, r2
 802588e:	4605      	mov	r5, r0
 8025890:	b118      	cbz	r0, 802589a <__swbuf_r+0x12>
 8025892:	6983      	ldr	r3, [r0, #24]
 8025894:	b90b      	cbnz	r3, 802589a <__swbuf_r+0x12>
 8025896:	f000 fa33 	bl	8025d00 <__sinit>
 802589a:	4b21      	ldr	r3, [pc, #132]	; (8025920 <__swbuf_r+0x98>)
 802589c:	429c      	cmp	r4, r3
 802589e:	d12b      	bne.n	80258f8 <__swbuf_r+0x70>
 80258a0:	686c      	ldr	r4, [r5, #4]
 80258a2:	69a3      	ldr	r3, [r4, #24]
 80258a4:	60a3      	str	r3, [r4, #8]
 80258a6:	89a3      	ldrh	r3, [r4, #12]
 80258a8:	071a      	lsls	r2, r3, #28
 80258aa:	d52f      	bpl.n	802590c <__swbuf_r+0x84>
 80258ac:	6923      	ldr	r3, [r4, #16]
 80258ae:	b36b      	cbz	r3, 802590c <__swbuf_r+0x84>
 80258b0:	6923      	ldr	r3, [r4, #16]
 80258b2:	6820      	ldr	r0, [r4, #0]
 80258b4:	1ac0      	subs	r0, r0, r3
 80258b6:	6963      	ldr	r3, [r4, #20]
 80258b8:	b2f6      	uxtb	r6, r6
 80258ba:	4283      	cmp	r3, r0
 80258bc:	4637      	mov	r7, r6
 80258be:	dc04      	bgt.n	80258ca <__swbuf_r+0x42>
 80258c0:	4621      	mov	r1, r4
 80258c2:	4628      	mov	r0, r5
 80258c4:	f000 f988 	bl	8025bd8 <_fflush_r>
 80258c8:	bb30      	cbnz	r0, 8025918 <__swbuf_r+0x90>
 80258ca:	68a3      	ldr	r3, [r4, #8]
 80258cc:	3b01      	subs	r3, #1
 80258ce:	60a3      	str	r3, [r4, #8]
 80258d0:	6823      	ldr	r3, [r4, #0]
 80258d2:	1c5a      	adds	r2, r3, #1
 80258d4:	6022      	str	r2, [r4, #0]
 80258d6:	701e      	strb	r6, [r3, #0]
 80258d8:	6963      	ldr	r3, [r4, #20]
 80258da:	3001      	adds	r0, #1
 80258dc:	4283      	cmp	r3, r0
 80258de:	d004      	beq.n	80258ea <__swbuf_r+0x62>
 80258e0:	89a3      	ldrh	r3, [r4, #12]
 80258e2:	07db      	lsls	r3, r3, #31
 80258e4:	d506      	bpl.n	80258f4 <__swbuf_r+0x6c>
 80258e6:	2e0a      	cmp	r6, #10
 80258e8:	d104      	bne.n	80258f4 <__swbuf_r+0x6c>
 80258ea:	4621      	mov	r1, r4
 80258ec:	4628      	mov	r0, r5
 80258ee:	f000 f973 	bl	8025bd8 <_fflush_r>
 80258f2:	b988      	cbnz	r0, 8025918 <__swbuf_r+0x90>
 80258f4:	4638      	mov	r0, r7
 80258f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80258f8:	4b0a      	ldr	r3, [pc, #40]	; (8025924 <__swbuf_r+0x9c>)
 80258fa:	429c      	cmp	r4, r3
 80258fc:	d101      	bne.n	8025902 <__swbuf_r+0x7a>
 80258fe:	68ac      	ldr	r4, [r5, #8]
 8025900:	e7cf      	b.n	80258a2 <__swbuf_r+0x1a>
 8025902:	4b09      	ldr	r3, [pc, #36]	; (8025928 <__swbuf_r+0xa0>)
 8025904:	429c      	cmp	r4, r3
 8025906:	bf08      	it	eq
 8025908:	68ec      	ldreq	r4, [r5, #12]
 802590a:	e7ca      	b.n	80258a2 <__swbuf_r+0x1a>
 802590c:	4621      	mov	r1, r4
 802590e:	4628      	mov	r0, r5
 8025910:	f000 f80c 	bl	802592c <__swsetup_r>
 8025914:	2800      	cmp	r0, #0
 8025916:	d0cb      	beq.n	80258b0 <__swbuf_r+0x28>
 8025918:	f04f 37ff 	mov.w	r7, #4294967295
 802591c:	e7ea      	b.n	80258f4 <__swbuf_r+0x6c>
 802591e:	bf00      	nop
 8025920:	08028250 	.word	0x08028250
 8025924:	08028270 	.word	0x08028270
 8025928:	08028230 	.word	0x08028230

0802592c <__swsetup_r>:
 802592c:	4b32      	ldr	r3, [pc, #200]	; (80259f8 <__swsetup_r+0xcc>)
 802592e:	b570      	push	{r4, r5, r6, lr}
 8025930:	681d      	ldr	r5, [r3, #0]
 8025932:	4606      	mov	r6, r0
 8025934:	460c      	mov	r4, r1
 8025936:	b125      	cbz	r5, 8025942 <__swsetup_r+0x16>
 8025938:	69ab      	ldr	r3, [r5, #24]
 802593a:	b913      	cbnz	r3, 8025942 <__swsetup_r+0x16>
 802593c:	4628      	mov	r0, r5
 802593e:	f000 f9df 	bl	8025d00 <__sinit>
 8025942:	4b2e      	ldr	r3, [pc, #184]	; (80259fc <__swsetup_r+0xd0>)
 8025944:	429c      	cmp	r4, r3
 8025946:	d10f      	bne.n	8025968 <__swsetup_r+0x3c>
 8025948:	686c      	ldr	r4, [r5, #4]
 802594a:	89a3      	ldrh	r3, [r4, #12]
 802594c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025950:	0719      	lsls	r1, r3, #28
 8025952:	d42c      	bmi.n	80259ae <__swsetup_r+0x82>
 8025954:	06dd      	lsls	r5, r3, #27
 8025956:	d411      	bmi.n	802597c <__swsetup_r+0x50>
 8025958:	2309      	movs	r3, #9
 802595a:	6033      	str	r3, [r6, #0]
 802595c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8025960:	81a3      	strh	r3, [r4, #12]
 8025962:	f04f 30ff 	mov.w	r0, #4294967295
 8025966:	e03e      	b.n	80259e6 <__swsetup_r+0xba>
 8025968:	4b25      	ldr	r3, [pc, #148]	; (8025a00 <__swsetup_r+0xd4>)
 802596a:	429c      	cmp	r4, r3
 802596c:	d101      	bne.n	8025972 <__swsetup_r+0x46>
 802596e:	68ac      	ldr	r4, [r5, #8]
 8025970:	e7eb      	b.n	802594a <__swsetup_r+0x1e>
 8025972:	4b24      	ldr	r3, [pc, #144]	; (8025a04 <__swsetup_r+0xd8>)
 8025974:	429c      	cmp	r4, r3
 8025976:	bf08      	it	eq
 8025978:	68ec      	ldreq	r4, [r5, #12]
 802597a:	e7e6      	b.n	802594a <__swsetup_r+0x1e>
 802597c:	0758      	lsls	r0, r3, #29
 802597e:	d512      	bpl.n	80259a6 <__swsetup_r+0x7a>
 8025980:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025982:	b141      	cbz	r1, 8025996 <__swsetup_r+0x6a>
 8025984:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025988:	4299      	cmp	r1, r3
 802598a:	d002      	beq.n	8025992 <__swsetup_r+0x66>
 802598c:	4630      	mov	r0, r6
 802598e:	f7ff fb59 	bl	8025044 <_free_r>
 8025992:	2300      	movs	r3, #0
 8025994:	6363      	str	r3, [r4, #52]	; 0x34
 8025996:	89a3      	ldrh	r3, [r4, #12]
 8025998:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802599c:	81a3      	strh	r3, [r4, #12]
 802599e:	2300      	movs	r3, #0
 80259a0:	6063      	str	r3, [r4, #4]
 80259a2:	6923      	ldr	r3, [r4, #16]
 80259a4:	6023      	str	r3, [r4, #0]
 80259a6:	89a3      	ldrh	r3, [r4, #12]
 80259a8:	f043 0308 	orr.w	r3, r3, #8
 80259ac:	81a3      	strh	r3, [r4, #12]
 80259ae:	6923      	ldr	r3, [r4, #16]
 80259b0:	b94b      	cbnz	r3, 80259c6 <__swsetup_r+0x9a>
 80259b2:	89a3      	ldrh	r3, [r4, #12]
 80259b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80259b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80259bc:	d003      	beq.n	80259c6 <__swsetup_r+0x9a>
 80259be:	4621      	mov	r1, r4
 80259c0:	4630      	mov	r0, r6
 80259c2:	f000 fa63 	bl	8025e8c <__smakebuf_r>
 80259c6:	89a0      	ldrh	r0, [r4, #12]
 80259c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80259cc:	f010 0301 	ands.w	r3, r0, #1
 80259d0:	d00a      	beq.n	80259e8 <__swsetup_r+0xbc>
 80259d2:	2300      	movs	r3, #0
 80259d4:	60a3      	str	r3, [r4, #8]
 80259d6:	6963      	ldr	r3, [r4, #20]
 80259d8:	425b      	negs	r3, r3
 80259da:	61a3      	str	r3, [r4, #24]
 80259dc:	6923      	ldr	r3, [r4, #16]
 80259de:	b943      	cbnz	r3, 80259f2 <__swsetup_r+0xc6>
 80259e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80259e4:	d1ba      	bne.n	802595c <__swsetup_r+0x30>
 80259e6:	bd70      	pop	{r4, r5, r6, pc}
 80259e8:	0781      	lsls	r1, r0, #30
 80259ea:	bf58      	it	pl
 80259ec:	6963      	ldrpl	r3, [r4, #20]
 80259ee:	60a3      	str	r3, [r4, #8]
 80259f0:	e7f4      	b.n	80259dc <__swsetup_r+0xb0>
 80259f2:	2000      	movs	r0, #0
 80259f4:	e7f7      	b.n	80259e6 <__swsetup_r+0xba>
 80259f6:	bf00      	nop
 80259f8:	240000c4 	.word	0x240000c4
 80259fc:	08028250 	.word	0x08028250
 8025a00:	08028270 	.word	0x08028270
 8025a04:	08028230 	.word	0x08028230

08025a08 <__register_exitproc>:
 8025a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025a0c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8025ac8 <__register_exitproc+0xc0>
 8025a10:	4606      	mov	r6, r0
 8025a12:	f8d8 0000 	ldr.w	r0, [r8]
 8025a16:	461f      	mov	r7, r3
 8025a18:	460d      	mov	r5, r1
 8025a1a:	4691      	mov	r9, r2
 8025a1c:	f000 fa0e 	bl	8025e3c <__retarget_lock_acquire_recursive>
 8025a20:	4b25      	ldr	r3, [pc, #148]	; (8025ab8 <__register_exitproc+0xb0>)
 8025a22:	681c      	ldr	r4, [r3, #0]
 8025a24:	b934      	cbnz	r4, 8025a34 <__register_exitproc+0x2c>
 8025a26:	4c25      	ldr	r4, [pc, #148]	; (8025abc <__register_exitproc+0xb4>)
 8025a28:	601c      	str	r4, [r3, #0]
 8025a2a:	4b25      	ldr	r3, [pc, #148]	; (8025ac0 <__register_exitproc+0xb8>)
 8025a2c:	b113      	cbz	r3, 8025a34 <__register_exitproc+0x2c>
 8025a2e:	681b      	ldr	r3, [r3, #0]
 8025a30:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8025a34:	6863      	ldr	r3, [r4, #4]
 8025a36:	2b1f      	cmp	r3, #31
 8025a38:	dd07      	ble.n	8025a4a <__register_exitproc+0x42>
 8025a3a:	f8d8 0000 	ldr.w	r0, [r8]
 8025a3e:	f000 f9ff 	bl	8025e40 <__retarget_lock_release_recursive>
 8025a42:	f04f 30ff 	mov.w	r0, #4294967295
 8025a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025a4a:	b34e      	cbz	r6, 8025aa0 <__register_exitproc+0x98>
 8025a4c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8025a50:	b988      	cbnz	r0, 8025a76 <__register_exitproc+0x6e>
 8025a52:	4b1c      	ldr	r3, [pc, #112]	; (8025ac4 <__register_exitproc+0xbc>)
 8025a54:	b923      	cbnz	r3, 8025a60 <__register_exitproc+0x58>
 8025a56:	f8d8 0000 	ldr.w	r0, [r8]
 8025a5a:	f000 f9f0 	bl	8025e3e <__retarget_lock_release>
 8025a5e:	e7f0      	b.n	8025a42 <__register_exitproc+0x3a>
 8025a60:	f44f 7084 	mov.w	r0, #264	; 0x108
 8025a64:	f7ff fac8 	bl	8024ff8 <malloc>
 8025a68:	2800      	cmp	r0, #0
 8025a6a:	d0f4      	beq.n	8025a56 <__register_exitproc+0x4e>
 8025a6c:	2300      	movs	r3, #0
 8025a6e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8025a72:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8025a76:	6863      	ldr	r3, [r4, #4]
 8025a78:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8025a7c:	2201      	movs	r2, #1
 8025a7e:	409a      	lsls	r2, r3
 8025a80:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8025a84:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8025a88:	4313      	orrs	r3, r2
 8025a8a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8025a8e:	2e02      	cmp	r6, #2
 8025a90:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8025a94:	bf02      	ittt	eq
 8025a96:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8025a9a:	4313      	orreq	r3, r2
 8025a9c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8025aa0:	6863      	ldr	r3, [r4, #4]
 8025aa2:	f8d8 0000 	ldr.w	r0, [r8]
 8025aa6:	1c5a      	adds	r2, r3, #1
 8025aa8:	3302      	adds	r3, #2
 8025aaa:	6062      	str	r2, [r4, #4]
 8025aac:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8025ab0:	f000 f9c6 	bl	8025e40 <__retarget_lock_release_recursive>
 8025ab4:	2000      	movs	r0, #0
 8025ab6:	e7c6      	b.n	8025a46 <__register_exitproc+0x3e>
 8025ab8:	2400b31c 	.word	0x2400b31c
 8025abc:	2400b290 	.word	0x2400b290
 8025ac0:	0802822c 	.word	0x0802822c
 8025ac4:	08024ff9 	.word	0x08024ff9
 8025ac8:	24000128 	.word	0x24000128

08025acc <__sflush_r>:
 8025acc:	898a      	ldrh	r2, [r1, #12]
 8025ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025ad2:	4605      	mov	r5, r0
 8025ad4:	0710      	lsls	r0, r2, #28
 8025ad6:	460c      	mov	r4, r1
 8025ad8:	d458      	bmi.n	8025b8c <__sflush_r+0xc0>
 8025ada:	684b      	ldr	r3, [r1, #4]
 8025adc:	2b00      	cmp	r3, #0
 8025ade:	dc05      	bgt.n	8025aec <__sflush_r+0x20>
 8025ae0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8025ae2:	2b00      	cmp	r3, #0
 8025ae4:	dc02      	bgt.n	8025aec <__sflush_r+0x20>
 8025ae6:	2000      	movs	r0, #0
 8025ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025aec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025aee:	2e00      	cmp	r6, #0
 8025af0:	d0f9      	beq.n	8025ae6 <__sflush_r+0x1a>
 8025af2:	2300      	movs	r3, #0
 8025af4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8025af8:	682f      	ldr	r7, [r5, #0]
 8025afa:	602b      	str	r3, [r5, #0]
 8025afc:	d032      	beq.n	8025b64 <__sflush_r+0x98>
 8025afe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8025b00:	89a3      	ldrh	r3, [r4, #12]
 8025b02:	075a      	lsls	r2, r3, #29
 8025b04:	d505      	bpl.n	8025b12 <__sflush_r+0x46>
 8025b06:	6863      	ldr	r3, [r4, #4]
 8025b08:	1ac0      	subs	r0, r0, r3
 8025b0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025b0c:	b10b      	cbz	r3, 8025b12 <__sflush_r+0x46>
 8025b0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025b10:	1ac0      	subs	r0, r0, r3
 8025b12:	2300      	movs	r3, #0
 8025b14:	4602      	mov	r2, r0
 8025b16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025b18:	6a21      	ldr	r1, [r4, #32]
 8025b1a:	4628      	mov	r0, r5
 8025b1c:	47b0      	blx	r6
 8025b1e:	1c43      	adds	r3, r0, #1
 8025b20:	89a3      	ldrh	r3, [r4, #12]
 8025b22:	d106      	bne.n	8025b32 <__sflush_r+0x66>
 8025b24:	6829      	ldr	r1, [r5, #0]
 8025b26:	291d      	cmp	r1, #29
 8025b28:	d82c      	bhi.n	8025b84 <__sflush_r+0xb8>
 8025b2a:	4a2a      	ldr	r2, [pc, #168]	; (8025bd4 <__sflush_r+0x108>)
 8025b2c:	40ca      	lsrs	r2, r1
 8025b2e:	07d6      	lsls	r6, r2, #31
 8025b30:	d528      	bpl.n	8025b84 <__sflush_r+0xb8>
 8025b32:	2200      	movs	r2, #0
 8025b34:	6062      	str	r2, [r4, #4]
 8025b36:	04d9      	lsls	r1, r3, #19
 8025b38:	6922      	ldr	r2, [r4, #16]
 8025b3a:	6022      	str	r2, [r4, #0]
 8025b3c:	d504      	bpl.n	8025b48 <__sflush_r+0x7c>
 8025b3e:	1c42      	adds	r2, r0, #1
 8025b40:	d101      	bne.n	8025b46 <__sflush_r+0x7a>
 8025b42:	682b      	ldr	r3, [r5, #0]
 8025b44:	b903      	cbnz	r3, 8025b48 <__sflush_r+0x7c>
 8025b46:	6560      	str	r0, [r4, #84]	; 0x54
 8025b48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025b4a:	602f      	str	r7, [r5, #0]
 8025b4c:	2900      	cmp	r1, #0
 8025b4e:	d0ca      	beq.n	8025ae6 <__sflush_r+0x1a>
 8025b50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025b54:	4299      	cmp	r1, r3
 8025b56:	d002      	beq.n	8025b5e <__sflush_r+0x92>
 8025b58:	4628      	mov	r0, r5
 8025b5a:	f7ff fa73 	bl	8025044 <_free_r>
 8025b5e:	2000      	movs	r0, #0
 8025b60:	6360      	str	r0, [r4, #52]	; 0x34
 8025b62:	e7c1      	b.n	8025ae8 <__sflush_r+0x1c>
 8025b64:	6a21      	ldr	r1, [r4, #32]
 8025b66:	2301      	movs	r3, #1
 8025b68:	4628      	mov	r0, r5
 8025b6a:	47b0      	blx	r6
 8025b6c:	1c41      	adds	r1, r0, #1
 8025b6e:	d1c7      	bne.n	8025b00 <__sflush_r+0x34>
 8025b70:	682b      	ldr	r3, [r5, #0]
 8025b72:	2b00      	cmp	r3, #0
 8025b74:	d0c4      	beq.n	8025b00 <__sflush_r+0x34>
 8025b76:	2b1d      	cmp	r3, #29
 8025b78:	d001      	beq.n	8025b7e <__sflush_r+0xb2>
 8025b7a:	2b16      	cmp	r3, #22
 8025b7c:	d101      	bne.n	8025b82 <__sflush_r+0xb6>
 8025b7e:	602f      	str	r7, [r5, #0]
 8025b80:	e7b1      	b.n	8025ae6 <__sflush_r+0x1a>
 8025b82:	89a3      	ldrh	r3, [r4, #12]
 8025b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025b88:	81a3      	strh	r3, [r4, #12]
 8025b8a:	e7ad      	b.n	8025ae8 <__sflush_r+0x1c>
 8025b8c:	690f      	ldr	r7, [r1, #16]
 8025b8e:	2f00      	cmp	r7, #0
 8025b90:	d0a9      	beq.n	8025ae6 <__sflush_r+0x1a>
 8025b92:	0793      	lsls	r3, r2, #30
 8025b94:	680e      	ldr	r6, [r1, #0]
 8025b96:	bf08      	it	eq
 8025b98:	694b      	ldreq	r3, [r1, #20]
 8025b9a:	600f      	str	r7, [r1, #0]
 8025b9c:	bf18      	it	ne
 8025b9e:	2300      	movne	r3, #0
 8025ba0:	eba6 0807 	sub.w	r8, r6, r7
 8025ba4:	608b      	str	r3, [r1, #8]
 8025ba6:	f1b8 0f00 	cmp.w	r8, #0
 8025baa:	dd9c      	ble.n	8025ae6 <__sflush_r+0x1a>
 8025bac:	6a21      	ldr	r1, [r4, #32]
 8025bae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025bb0:	4643      	mov	r3, r8
 8025bb2:	463a      	mov	r2, r7
 8025bb4:	4628      	mov	r0, r5
 8025bb6:	47b0      	blx	r6
 8025bb8:	2800      	cmp	r0, #0
 8025bba:	dc06      	bgt.n	8025bca <__sflush_r+0xfe>
 8025bbc:	89a3      	ldrh	r3, [r4, #12]
 8025bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025bc2:	81a3      	strh	r3, [r4, #12]
 8025bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8025bc8:	e78e      	b.n	8025ae8 <__sflush_r+0x1c>
 8025bca:	4407      	add	r7, r0
 8025bcc:	eba8 0800 	sub.w	r8, r8, r0
 8025bd0:	e7e9      	b.n	8025ba6 <__sflush_r+0xda>
 8025bd2:	bf00      	nop
 8025bd4:	20400001 	.word	0x20400001

08025bd8 <_fflush_r>:
 8025bd8:	b538      	push	{r3, r4, r5, lr}
 8025bda:	690b      	ldr	r3, [r1, #16]
 8025bdc:	4605      	mov	r5, r0
 8025bde:	460c      	mov	r4, r1
 8025be0:	b913      	cbnz	r3, 8025be8 <_fflush_r+0x10>
 8025be2:	2500      	movs	r5, #0
 8025be4:	4628      	mov	r0, r5
 8025be6:	bd38      	pop	{r3, r4, r5, pc}
 8025be8:	b118      	cbz	r0, 8025bf2 <_fflush_r+0x1a>
 8025bea:	6983      	ldr	r3, [r0, #24]
 8025bec:	b90b      	cbnz	r3, 8025bf2 <_fflush_r+0x1a>
 8025bee:	f000 f887 	bl	8025d00 <__sinit>
 8025bf2:	4b14      	ldr	r3, [pc, #80]	; (8025c44 <_fflush_r+0x6c>)
 8025bf4:	429c      	cmp	r4, r3
 8025bf6:	d11b      	bne.n	8025c30 <_fflush_r+0x58>
 8025bf8:	686c      	ldr	r4, [r5, #4]
 8025bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025bfe:	2b00      	cmp	r3, #0
 8025c00:	d0ef      	beq.n	8025be2 <_fflush_r+0xa>
 8025c02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8025c04:	07d0      	lsls	r0, r2, #31
 8025c06:	d404      	bmi.n	8025c12 <_fflush_r+0x3a>
 8025c08:	0599      	lsls	r1, r3, #22
 8025c0a:	d402      	bmi.n	8025c12 <_fflush_r+0x3a>
 8025c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025c0e:	f000 f915 	bl	8025e3c <__retarget_lock_acquire_recursive>
 8025c12:	4628      	mov	r0, r5
 8025c14:	4621      	mov	r1, r4
 8025c16:	f7ff ff59 	bl	8025acc <__sflush_r>
 8025c1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025c1c:	07da      	lsls	r2, r3, #31
 8025c1e:	4605      	mov	r5, r0
 8025c20:	d4e0      	bmi.n	8025be4 <_fflush_r+0xc>
 8025c22:	89a3      	ldrh	r3, [r4, #12]
 8025c24:	059b      	lsls	r3, r3, #22
 8025c26:	d4dd      	bmi.n	8025be4 <_fflush_r+0xc>
 8025c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025c2a:	f000 f909 	bl	8025e40 <__retarget_lock_release_recursive>
 8025c2e:	e7d9      	b.n	8025be4 <_fflush_r+0xc>
 8025c30:	4b05      	ldr	r3, [pc, #20]	; (8025c48 <_fflush_r+0x70>)
 8025c32:	429c      	cmp	r4, r3
 8025c34:	d101      	bne.n	8025c3a <_fflush_r+0x62>
 8025c36:	68ac      	ldr	r4, [r5, #8]
 8025c38:	e7df      	b.n	8025bfa <_fflush_r+0x22>
 8025c3a:	4b04      	ldr	r3, [pc, #16]	; (8025c4c <_fflush_r+0x74>)
 8025c3c:	429c      	cmp	r4, r3
 8025c3e:	bf08      	it	eq
 8025c40:	68ec      	ldreq	r4, [r5, #12]
 8025c42:	e7da      	b.n	8025bfa <_fflush_r+0x22>
 8025c44:	08028250 	.word	0x08028250
 8025c48:	08028270 	.word	0x08028270
 8025c4c:	08028230 	.word	0x08028230

08025c50 <std>:
 8025c50:	2300      	movs	r3, #0
 8025c52:	b510      	push	{r4, lr}
 8025c54:	4604      	mov	r4, r0
 8025c56:	e9c0 3300 	strd	r3, r3, [r0]
 8025c5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025c5e:	6083      	str	r3, [r0, #8]
 8025c60:	8181      	strh	r1, [r0, #12]
 8025c62:	6643      	str	r3, [r0, #100]	; 0x64
 8025c64:	81c2      	strh	r2, [r0, #14]
 8025c66:	6183      	str	r3, [r0, #24]
 8025c68:	4619      	mov	r1, r3
 8025c6a:	2208      	movs	r2, #8
 8025c6c:	305c      	adds	r0, #92	; 0x5c
 8025c6e:	f7ff f9e1 	bl	8025034 <memset>
 8025c72:	4b05      	ldr	r3, [pc, #20]	; (8025c88 <std+0x38>)
 8025c74:	6263      	str	r3, [r4, #36]	; 0x24
 8025c76:	4b05      	ldr	r3, [pc, #20]	; (8025c8c <std+0x3c>)
 8025c78:	62a3      	str	r3, [r4, #40]	; 0x28
 8025c7a:	4b05      	ldr	r3, [pc, #20]	; (8025c90 <std+0x40>)
 8025c7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025c7e:	4b05      	ldr	r3, [pc, #20]	; (8025c94 <std+0x44>)
 8025c80:	6224      	str	r4, [r4, #32]
 8025c82:	6323      	str	r3, [r4, #48]	; 0x30
 8025c84:	bd10      	pop	{r4, pc}
 8025c86:	bf00      	nop
 8025c88:	08025f25 	.word	0x08025f25
 8025c8c:	08025f47 	.word	0x08025f47
 8025c90:	08025f7f 	.word	0x08025f7f
 8025c94:	08025fa3 	.word	0x08025fa3

08025c98 <_cleanup_r>:
 8025c98:	4901      	ldr	r1, [pc, #4]	; (8025ca0 <_cleanup_r+0x8>)
 8025c9a:	f000 b8af 	b.w	8025dfc <_fwalk_reent>
 8025c9e:	bf00      	nop
 8025ca0:	08025bd9 	.word	0x08025bd9

08025ca4 <__sfmoreglue>:
 8025ca4:	b570      	push	{r4, r5, r6, lr}
 8025ca6:	2268      	movs	r2, #104	; 0x68
 8025ca8:	1e4d      	subs	r5, r1, #1
 8025caa:	4355      	muls	r5, r2
 8025cac:	460e      	mov	r6, r1
 8025cae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8025cb2:	f7ff fa33 	bl	802511c <_malloc_r>
 8025cb6:	4604      	mov	r4, r0
 8025cb8:	b140      	cbz	r0, 8025ccc <__sfmoreglue+0x28>
 8025cba:	2100      	movs	r1, #0
 8025cbc:	e9c0 1600 	strd	r1, r6, [r0]
 8025cc0:	300c      	adds	r0, #12
 8025cc2:	60a0      	str	r0, [r4, #8]
 8025cc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8025cc8:	f7ff f9b4 	bl	8025034 <memset>
 8025ccc:	4620      	mov	r0, r4
 8025cce:	bd70      	pop	{r4, r5, r6, pc}

08025cd0 <__sfp_lock_acquire>:
 8025cd0:	4801      	ldr	r0, [pc, #4]	; (8025cd8 <__sfp_lock_acquire+0x8>)
 8025cd2:	f000 b8b3 	b.w	8025e3c <__retarget_lock_acquire_recursive>
 8025cd6:	bf00      	nop
 8025cd8:	2400b322 	.word	0x2400b322

08025cdc <__sfp_lock_release>:
 8025cdc:	4801      	ldr	r0, [pc, #4]	; (8025ce4 <__sfp_lock_release+0x8>)
 8025cde:	f000 b8af 	b.w	8025e40 <__retarget_lock_release_recursive>
 8025ce2:	bf00      	nop
 8025ce4:	2400b322 	.word	0x2400b322

08025ce8 <__sinit_lock_acquire>:
 8025ce8:	4801      	ldr	r0, [pc, #4]	; (8025cf0 <__sinit_lock_acquire+0x8>)
 8025cea:	f000 b8a7 	b.w	8025e3c <__retarget_lock_acquire_recursive>
 8025cee:	bf00      	nop
 8025cf0:	2400b323 	.word	0x2400b323

08025cf4 <__sinit_lock_release>:
 8025cf4:	4801      	ldr	r0, [pc, #4]	; (8025cfc <__sinit_lock_release+0x8>)
 8025cf6:	f000 b8a3 	b.w	8025e40 <__retarget_lock_release_recursive>
 8025cfa:	bf00      	nop
 8025cfc:	2400b323 	.word	0x2400b323

08025d00 <__sinit>:
 8025d00:	b510      	push	{r4, lr}
 8025d02:	4604      	mov	r4, r0
 8025d04:	f7ff fff0 	bl	8025ce8 <__sinit_lock_acquire>
 8025d08:	69a3      	ldr	r3, [r4, #24]
 8025d0a:	b11b      	cbz	r3, 8025d14 <__sinit+0x14>
 8025d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025d10:	f7ff bff0 	b.w	8025cf4 <__sinit_lock_release>
 8025d14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8025d18:	6523      	str	r3, [r4, #80]	; 0x50
 8025d1a:	4b13      	ldr	r3, [pc, #76]	; (8025d68 <__sinit+0x68>)
 8025d1c:	4a13      	ldr	r2, [pc, #76]	; (8025d6c <__sinit+0x6c>)
 8025d1e:	681b      	ldr	r3, [r3, #0]
 8025d20:	62a2      	str	r2, [r4, #40]	; 0x28
 8025d22:	42a3      	cmp	r3, r4
 8025d24:	bf04      	itt	eq
 8025d26:	2301      	moveq	r3, #1
 8025d28:	61a3      	streq	r3, [r4, #24]
 8025d2a:	4620      	mov	r0, r4
 8025d2c:	f000 f820 	bl	8025d70 <__sfp>
 8025d30:	6060      	str	r0, [r4, #4]
 8025d32:	4620      	mov	r0, r4
 8025d34:	f000 f81c 	bl	8025d70 <__sfp>
 8025d38:	60a0      	str	r0, [r4, #8]
 8025d3a:	4620      	mov	r0, r4
 8025d3c:	f000 f818 	bl	8025d70 <__sfp>
 8025d40:	2200      	movs	r2, #0
 8025d42:	60e0      	str	r0, [r4, #12]
 8025d44:	2104      	movs	r1, #4
 8025d46:	6860      	ldr	r0, [r4, #4]
 8025d48:	f7ff ff82 	bl	8025c50 <std>
 8025d4c:	68a0      	ldr	r0, [r4, #8]
 8025d4e:	2201      	movs	r2, #1
 8025d50:	2109      	movs	r1, #9
 8025d52:	f7ff ff7d 	bl	8025c50 <std>
 8025d56:	68e0      	ldr	r0, [r4, #12]
 8025d58:	2202      	movs	r2, #2
 8025d5a:	2112      	movs	r1, #18
 8025d5c:	f7ff ff78 	bl	8025c50 <std>
 8025d60:	2301      	movs	r3, #1
 8025d62:	61a3      	str	r3, [r4, #24]
 8025d64:	e7d2      	b.n	8025d0c <__sinit+0xc>
 8025d66:	bf00      	nop
 8025d68:	080281f4 	.word	0x080281f4
 8025d6c:	08025c99 	.word	0x08025c99

08025d70 <__sfp>:
 8025d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025d72:	4607      	mov	r7, r0
 8025d74:	f7ff ffac 	bl	8025cd0 <__sfp_lock_acquire>
 8025d78:	4b1e      	ldr	r3, [pc, #120]	; (8025df4 <__sfp+0x84>)
 8025d7a:	681e      	ldr	r6, [r3, #0]
 8025d7c:	69b3      	ldr	r3, [r6, #24]
 8025d7e:	b913      	cbnz	r3, 8025d86 <__sfp+0x16>
 8025d80:	4630      	mov	r0, r6
 8025d82:	f7ff ffbd 	bl	8025d00 <__sinit>
 8025d86:	3648      	adds	r6, #72	; 0x48
 8025d88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025d8c:	3b01      	subs	r3, #1
 8025d8e:	d503      	bpl.n	8025d98 <__sfp+0x28>
 8025d90:	6833      	ldr	r3, [r6, #0]
 8025d92:	b30b      	cbz	r3, 8025dd8 <__sfp+0x68>
 8025d94:	6836      	ldr	r6, [r6, #0]
 8025d96:	e7f7      	b.n	8025d88 <__sfp+0x18>
 8025d98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8025d9c:	b9d5      	cbnz	r5, 8025dd4 <__sfp+0x64>
 8025d9e:	4b16      	ldr	r3, [pc, #88]	; (8025df8 <__sfp+0x88>)
 8025da0:	60e3      	str	r3, [r4, #12]
 8025da2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8025da6:	6665      	str	r5, [r4, #100]	; 0x64
 8025da8:	f000 f847 	bl	8025e3a <__retarget_lock_init_recursive>
 8025dac:	f7ff ff96 	bl	8025cdc <__sfp_lock_release>
 8025db0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8025db4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8025db8:	6025      	str	r5, [r4, #0]
 8025dba:	61a5      	str	r5, [r4, #24]
 8025dbc:	2208      	movs	r2, #8
 8025dbe:	4629      	mov	r1, r5
 8025dc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8025dc4:	f7ff f936 	bl	8025034 <memset>
 8025dc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8025dcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8025dd0:	4620      	mov	r0, r4
 8025dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025dd4:	3468      	adds	r4, #104	; 0x68
 8025dd6:	e7d9      	b.n	8025d8c <__sfp+0x1c>
 8025dd8:	2104      	movs	r1, #4
 8025dda:	4638      	mov	r0, r7
 8025ddc:	f7ff ff62 	bl	8025ca4 <__sfmoreglue>
 8025de0:	4604      	mov	r4, r0
 8025de2:	6030      	str	r0, [r6, #0]
 8025de4:	2800      	cmp	r0, #0
 8025de6:	d1d5      	bne.n	8025d94 <__sfp+0x24>
 8025de8:	f7ff ff78 	bl	8025cdc <__sfp_lock_release>
 8025dec:	230c      	movs	r3, #12
 8025dee:	603b      	str	r3, [r7, #0]
 8025df0:	e7ee      	b.n	8025dd0 <__sfp+0x60>
 8025df2:	bf00      	nop
 8025df4:	080281f4 	.word	0x080281f4
 8025df8:	ffff0001 	.word	0xffff0001

08025dfc <_fwalk_reent>:
 8025dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025e00:	4606      	mov	r6, r0
 8025e02:	4688      	mov	r8, r1
 8025e04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8025e08:	2700      	movs	r7, #0
 8025e0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025e0e:	f1b9 0901 	subs.w	r9, r9, #1
 8025e12:	d505      	bpl.n	8025e20 <_fwalk_reent+0x24>
 8025e14:	6824      	ldr	r4, [r4, #0]
 8025e16:	2c00      	cmp	r4, #0
 8025e18:	d1f7      	bne.n	8025e0a <_fwalk_reent+0xe>
 8025e1a:	4638      	mov	r0, r7
 8025e1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025e20:	89ab      	ldrh	r3, [r5, #12]
 8025e22:	2b01      	cmp	r3, #1
 8025e24:	d907      	bls.n	8025e36 <_fwalk_reent+0x3a>
 8025e26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025e2a:	3301      	adds	r3, #1
 8025e2c:	d003      	beq.n	8025e36 <_fwalk_reent+0x3a>
 8025e2e:	4629      	mov	r1, r5
 8025e30:	4630      	mov	r0, r6
 8025e32:	47c0      	blx	r8
 8025e34:	4307      	orrs	r7, r0
 8025e36:	3568      	adds	r5, #104	; 0x68
 8025e38:	e7e9      	b.n	8025e0e <_fwalk_reent+0x12>

08025e3a <__retarget_lock_init_recursive>:
 8025e3a:	4770      	bx	lr

08025e3c <__retarget_lock_acquire_recursive>:
 8025e3c:	4770      	bx	lr

08025e3e <__retarget_lock_release>:
 8025e3e:	4770      	bx	lr

08025e40 <__retarget_lock_release_recursive>:
 8025e40:	4770      	bx	lr

08025e42 <__swhatbuf_r>:
 8025e42:	b570      	push	{r4, r5, r6, lr}
 8025e44:	460e      	mov	r6, r1
 8025e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025e4a:	2900      	cmp	r1, #0
 8025e4c:	b096      	sub	sp, #88	; 0x58
 8025e4e:	4614      	mov	r4, r2
 8025e50:	461d      	mov	r5, r3
 8025e52:	da08      	bge.n	8025e66 <__swhatbuf_r+0x24>
 8025e54:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8025e58:	2200      	movs	r2, #0
 8025e5a:	602a      	str	r2, [r5, #0]
 8025e5c:	061a      	lsls	r2, r3, #24
 8025e5e:	d410      	bmi.n	8025e82 <__swhatbuf_r+0x40>
 8025e60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025e64:	e00e      	b.n	8025e84 <__swhatbuf_r+0x42>
 8025e66:	466a      	mov	r2, sp
 8025e68:	f000 f8c2 	bl	8025ff0 <_fstat_r>
 8025e6c:	2800      	cmp	r0, #0
 8025e6e:	dbf1      	blt.n	8025e54 <__swhatbuf_r+0x12>
 8025e70:	9a01      	ldr	r2, [sp, #4]
 8025e72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8025e76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8025e7a:	425a      	negs	r2, r3
 8025e7c:	415a      	adcs	r2, r3
 8025e7e:	602a      	str	r2, [r5, #0]
 8025e80:	e7ee      	b.n	8025e60 <__swhatbuf_r+0x1e>
 8025e82:	2340      	movs	r3, #64	; 0x40
 8025e84:	2000      	movs	r0, #0
 8025e86:	6023      	str	r3, [r4, #0]
 8025e88:	b016      	add	sp, #88	; 0x58
 8025e8a:	bd70      	pop	{r4, r5, r6, pc}

08025e8c <__smakebuf_r>:
 8025e8c:	898b      	ldrh	r3, [r1, #12]
 8025e8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025e90:	079d      	lsls	r5, r3, #30
 8025e92:	4606      	mov	r6, r0
 8025e94:	460c      	mov	r4, r1
 8025e96:	d507      	bpl.n	8025ea8 <__smakebuf_r+0x1c>
 8025e98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8025e9c:	6023      	str	r3, [r4, #0]
 8025e9e:	6123      	str	r3, [r4, #16]
 8025ea0:	2301      	movs	r3, #1
 8025ea2:	6163      	str	r3, [r4, #20]
 8025ea4:	b002      	add	sp, #8
 8025ea6:	bd70      	pop	{r4, r5, r6, pc}
 8025ea8:	ab01      	add	r3, sp, #4
 8025eaa:	466a      	mov	r2, sp
 8025eac:	f7ff ffc9 	bl	8025e42 <__swhatbuf_r>
 8025eb0:	9900      	ldr	r1, [sp, #0]
 8025eb2:	4605      	mov	r5, r0
 8025eb4:	4630      	mov	r0, r6
 8025eb6:	f7ff f931 	bl	802511c <_malloc_r>
 8025eba:	b948      	cbnz	r0, 8025ed0 <__smakebuf_r+0x44>
 8025ebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025ec0:	059a      	lsls	r2, r3, #22
 8025ec2:	d4ef      	bmi.n	8025ea4 <__smakebuf_r+0x18>
 8025ec4:	f023 0303 	bic.w	r3, r3, #3
 8025ec8:	f043 0302 	orr.w	r3, r3, #2
 8025ecc:	81a3      	strh	r3, [r4, #12]
 8025ece:	e7e3      	b.n	8025e98 <__smakebuf_r+0xc>
 8025ed0:	4b0d      	ldr	r3, [pc, #52]	; (8025f08 <__smakebuf_r+0x7c>)
 8025ed2:	62b3      	str	r3, [r6, #40]	; 0x28
 8025ed4:	89a3      	ldrh	r3, [r4, #12]
 8025ed6:	6020      	str	r0, [r4, #0]
 8025ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025edc:	81a3      	strh	r3, [r4, #12]
 8025ede:	9b00      	ldr	r3, [sp, #0]
 8025ee0:	6163      	str	r3, [r4, #20]
 8025ee2:	9b01      	ldr	r3, [sp, #4]
 8025ee4:	6120      	str	r0, [r4, #16]
 8025ee6:	b15b      	cbz	r3, 8025f00 <__smakebuf_r+0x74>
 8025ee8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025eec:	4630      	mov	r0, r6
 8025eee:	f000 f891 	bl	8026014 <_isatty_r>
 8025ef2:	b128      	cbz	r0, 8025f00 <__smakebuf_r+0x74>
 8025ef4:	89a3      	ldrh	r3, [r4, #12]
 8025ef6:	f023 0303 	bic.w	r3, r3, #3
 8025efa:	f043 0301 	orr.w	r3, r3, #1
 8025efe:	81a3      	strh	r3, [r4, #12]
 8025f00:	89a0      	ldrh	r0, [r4, #12]
 8025f02:	4305      	orrs	r5, r0
 8025f04:	81a5      	strh	r5, [r4, #12]
 8025f06:	e7cd      	b.n	8025ea4 <__smakebuf_r+0x18>
 8025f08:	08025c99 	.word	0x08025c99

08025f0c <__malloc_lock>:
 8025f0c:	4801      	ldr	r0, [pc, #4]	; (8025f14 <__malloc_lock+0x8>)
 8025f0e:	f7ff bf95 	b.w	8025e3c <__retarget_lock_acquire_recursive>
 8025f12:	bf00      	nop
 8025f14:	2400b321 	.word	0x2400b321

08025f18 <__malloc_unlock>:
 8025f18:	4801      	ldr	r0, [pc, #4]	; (8025f20 <__malloc_unlock+0x8>)
 8025f1a:	f7ff bf91 	b.w	8025e40 <__retarget_lock_release_recursive>
 8025f1e:	bf00      	nop
 8025f20:	2400b321 	.word	0x2400b321

08025f24 <__sread>:
 8025f24:	b510      	push	{r4, lr}
 8025f26:	460c      	mov	r4, r1
 8025f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025f2c:	f000 f894 	bl	8026058 <_read_r>
 8025f30:	2800      	cmp	r0, #0
 8025f32:	bfab      	itete	ge
 8025f34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8025f36:	89a3      	ldrhlt	r3, [r4, #12]
 8025f38:	181b      	addge	r3, r3, r0
 8025f3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8025f3e:	bfac      	ite	ge
 8025f40:	6563      	strge	r3, [r4, #84]	; 0x54
 8025f42:	81a3      	strhlt	r3, [r4, #12]
 8025f44:	bd10      	pop	{r4, pc}

08025f46 <__swrite>:
 8025f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025f4a:	461f      	mov	r7, r3
 8025f4c:	898b      	ldrh	r3, [r1, #12]
 8025f4e:	05db      	lsls	r3, r3, #23
 8025f50:	4605      	mov	r5, r0
 8025f52:	460c      	mov	r4, r1
 8025f54:	4616      	mov	r6, r2
 8025f56:	d505      	bpl.n	8025f64 <__swrite+0x1e>
 8025f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025f5c:	2302      	movs	r3, #2
 8025f5e:	2200      	movs	r2, #0
 8025f60:	f000 f868 	bl	8026034 <_lseek_r>
 8025f64:	89a3      	ldrh	r3, [r4, #12]
 8025f66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025f6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8025f6e:	81a3      	strh	r3, [r4, #12]
 8025f70:	4632      	mov	r2, r6
 8025f72:	463b      	mov	r3, r7
 8025f74:	4628      	mov	r0, r5
 8025f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025f7a:	f000 b817 	b.w	8025fac <_write_r>

08025f7e <__sseek>:
 8025f7e:	b510      	push	{r4, lr}
 8025f80:	460c      	mov	r4, r1
 8025f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025f86:	f000 f855 	bl	8026034 <_lseek_r>
 8025f8a:	1c43      	adds	r3, r0, #1
 8025f8c:	89a3      	ldrh	r3, [r4, #12]
 8025f8e:	bf15      	itete	ne
 8025f90:	6560      	strne	r0, [r4, #84]	; 0x54
 8025f92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8025f96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8025f9a:	81a3      	strheq	r3, [r4, #12]
 8025f9c:	bf18      	it	ne
 8025f9e:	81a3      	strhne	r3, [r4, #12]
 8025fa0:	bd10      	pop	{r4, pc}

08025fa2 <__sclose>:
 8025fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025fa6:	f000 b813 	b.w	8025fd0 <_close_r>
	...

08025fac <_write_r>:
 8025fac:	b538      	push	{r3, r4, r5, lr}
 8025fae:	4d07      	ldr	r5, [pc, #28]	; (8025fcc <_write_r+0x20>)
 8025fb0:	4604      	mov	r4, r0
 8025fb2:	4608      	mov	r0, r1
 8025fb4:	4611      	mov	r1, r2
 8025fb6:	2200      	movs	r2, #0
 8025fb8:	602a      	str	r2, [r5, #0]
 8025fba:	461a      	mov	r2, r3
 8025fbc:	f7db fab3 	bl	8001526 <_write>
 8025fc0:	1c43      	adds	r3, r0, #1
 8025fc2:	d102      	bne.n	8025fca <_write_r+0x1e>
 8025fc4:	682b      	ldr	r3, [r5, #0]
 8025fc6:	b103      	cbz	r3, 8025fca <_write_r+0x1e>
 8025fc8:	6023      	str	r3, [r4, #0]
 8025fca:	bd38      	pop	{r3, r4, r5, pc}
 8025fcc:	2400b324 	.word	0x2400b324

08025fd0 <_close_r>:
 8025fd0:	b538      	push	{r3, r4, r5, lr}
 8025fd2:	4d06      	ldr	r5, [pc, #24]	; (8025fec <_close_r+0x1c>)
 8025fd4:	2300      	movs	r3, #0
 8025fd6:	4604      	mov	r4, r0
 8025fd8:	4608      	mov	r0, r1
 8025fda:	602b      	str	r3, [r5, #0]
 8025fdc:	f7db fabf 	bl	800155e <_close>
 8025fe0:	1c43      	adds	r3, r0, #1
 8025fe2:	d102      	bne.n	8025fea <_close_r+0x1a>
 8025fe4:	682b      	ldr	r3, [r5, #0]
 8025fe6:	b103      	cbz	r3, 8025fea <_close_r+0x1a>
 8025fe8:	6023      	str	r3, [r4, #0]
 8025fea:	bd38      	pop	{r3, r4, r5, pc}
 8025fec:	2400b324 	.word	0x2400b324

08025ff0 <_fstat_r>:
 8025ff0:	b538      	push	{r3, r4, r5, lr}
 8025ff2:	4d07      	ldr	r5, [pc, #28]	; (8026010 <_fstat_r+0x20>)
 8025ff4:	2300      	movs	r3, #0
 8025ff6:	4604      	mov	r4, r0
 8025ff8:	4608      	mov	r0, r1
 8025ffa:	4611      	mov	r1, r2
 8025ffc:	602b      	str	r3, [r5, #0]
 8025ffe:	f7db faba 	bl	8001576 <_fstat>
 8026002:	1c43      	adds	r3, r0, #1
 8026004:	d102      	bne.n	802600c <_fstat_r+0x1c>
 8026006:	682b      	ldr	r3, [r5, #0]
 8026008:	b103      	cbz	r3, 802600c <_fstat_r+0x1c>
 802600a:	6023      	str	r3, [r4, #0]
 802600c:	bd38      	pop	{r3, r4, r5, pc}
 802600e:	bf00      	nop
 8026010:	2400b324 	.word	0x2400b324

08026014 <_isatty_r>:
 8026014:	b538      	push	{r3, r4, r5, lr}
 8026016:	4d06      	ldr	r5, [pc, #24]	; (8026030 <_isatty_r+0x1c>)
 8026018:	2300      	movs	r3, #0
 802601a:	4604      	mov	r4, r0
 802601c:	4608      	mov	r0, r1
 802601e:	602b      	str	r3, [r5, #0]
 8026020:	f7db fab9 	bl	8001596 <_isatty>
 8026024:	1c43      	adds	r3, r0, #1
 8026026:	d102      	bne.n	802602e <_isatty_r+0x1a>
 8026028:	682b      	ldr	r3, [r5, #0]
 802602a:	b103      	cbz	r3, 802602e <_isatty_r+0x1a>
 802602c:	6023      	str	r3, [r4, #0]
 802602e:	bd38      	pop	{r3, r4, r5, pc}
 8026030:	2400b324 	.word	0x2400b324

08026034 <_lseek_r>:
 8026034:	b538      	push	{r3, r4, r5, lr}
 8026036:	4d07      	ldr	r5, [pc, #28]	; (8026054 <_lseek_r+0x20>)
 8026038:	4604      	mov	r4, r0
 802603a:	4608      	mov	r0, r1
 802603c:	4611      	mov	r1, r2
 802603e:	2200      	movs	r2, #0
 8026040:	602a      	str	r2, [r5, #0]
 8026042:	461a      	mov	r2, r3
 8026044:	f7db fab2 	bl	80015ac <_lseek>
 8026048:	1c43      	adds	r3, r0, #1
 802604a:	d102      	bne.n	8026052 <_lseek_r+0x1e>
 802604c:	682b      	ldr	r3, [r5, #0]
 802604e:	b103      	cbz	r3, 8026052 <_lseek_r+0x1e>
 8026050:	6023      	str	r3, [r4, #0]
 8026052:	bd38      	pop	{r3, r4, r5, pc}
 8026054:	2400b324 	.word	0x2400b324

08026058 <_read_r>:
 8026058:	b538      	push	{r3, r4, r5, lr}
 802605a:	4d07      	ldr	r5, [pc, #28]	; (8026078 <_read_r+0x20>)
 802605c:	4604      	mov	r4, r0
 802605e:	4608      	mov	r0, r1
 8026060:	4611      	mov	r1, r2
 8026062:	2200      	movs	r2, #0
 8026064:	602a      	str	r2, [r5, #0]
 8026066:	461a      	mov	r2, r3
 8026068:	f7db fa40 	bl	80014ec <_read>
 802606c:	1c43      	adds	r3, r0, #1
 802606e:	d102      	bne.n	8026076 <_read_r+0x1e>
 8026070:	682b      	ldr	r3, [r5, #0]
 8026072:	b103      	cbz	r3, 8026076 <_read_r+0x1e>
 8026074:	6023      	str	r3, [r4, #0]
 8026076:	bd38      	pop	{r3, r4, r5, pc}
 8026078:	2400b324 	.word	0x2400b324

0802607c <_init>:
 802607c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802607e:	bf00      	nop
 8026080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026082:	bc08      	pop	{r3}
 8026084:	469e      	mov	lr, r3
 8026086:	4770      	bx	lr

08026088 <_fini>:
 8026088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802608a:	bf00      	nop
 802608c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802608e:	bc08      	pop	{r3}
 8026090:	469e      	mov	lr, r3
 8026092:	4770      	bx	lr
