
stm32h745i_disco_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023550  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d1c  080237f0  080237f0  000337f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  0802550c  0802550c  0003550c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08025524  08025524  000995b8  2**0
                  CONTENTS
  5 .ARM          00000000  08025524  08025524  000995b8  2**0
                  CONTENTS
  6 .preinit_array 00000000  08025524  08025524  000995b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  08025524  08025524  00035524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  08025538  08025538  00035538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000012c  24000000  08025540  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000b01c  2400012c  0802566c  0004012c  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  2400b148  0802566c  0004b148  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000995b8  2**0
                  CONTENTS, READONLY
 13 FontFlashSection 000001a8  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 TextFlashSection 00000010  900001a8  900001a8  000501a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 ExtFlashSection 00049400  900001b8  900001b8  000501b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .debug_info   0008ffa0  00000000  00000000  000995e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000106d0  00000000  00000000  00129586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003b80  00000000  00000000  00139c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 000036b0  00000000  00000000  0013d7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000497d6  00000000  00000000  00140e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00046db4  00000000  00000000  0018a65e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001b2b58  00000000  00000000  001d1412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000cf  00000000  00000000  00383f6a  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00010268  00000000  00000000  0038403c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400012c 	.word	0x2400012c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080237d8 	.word	0x080237d8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000130 	.word	0x24000130
 80002dc:	080237d8 	.word	0x080237d8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	6039      	str	r1, [r7, #0]
 800038a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800038c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000390:	2b00      	cmp	r3, #0
 8000392:	db0a      	blt.n	80003aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	b2da      	uxtb	r2, r3
 8000398:	490c      	ldr	r1, [pc, #48]	; (80003cc <__NVIC_SetPriority+0x4c>)
 800039a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800039e:	0112      	lsls	r2, r2, #4
 80003a0:	b2d2      	uxtb	r2, r2
 80003a2:	440b      	add	r3, r1
 80003a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003a8:	e00a      	b.n	80003c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	b2da      	uxtb	r2, r3
 80003ae:	4908      	ldr	r1, [pc, #32]	; (80003d0 <__NVIC_SetPriority+0x50>)
 80003b0:	88fb      	ldrh	r3, [r7, #6]
 80003b2:	f003 030f 	and.w	r3, r3, #15
 80003b6:	3b04      	subs	r3, #4
 80003b8:	0112      	lsls	r2, r2, #4
 80003ba:	b2d2      	uxtb	r2, r2
 80003bc:	440b      	add	r3, r1
 80003be:	761a      	strb	r2, [r3, #24]
}
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr
 80003cc:	e000e100 	.word	0xe000e100
 80003d0:	e000ed00 	.word	0xe000ed00

080003d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80003d8:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <SysTick_Handler+0x1c>)
 80003da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80003dc:	f002 fea8 	bl	8003130 <xTaskGetSchedulerState>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b01      	cmp	r3, #1
 80003e4:	d001      	beq.n	80003ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80003e6:	f000 ffe7 	bl	80013b8 <xPortSysTickHandler>
  }
}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	e000e010 	.word	0xe000e010

080003f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80003f8:	2100      	movs	r1, #0
 80003fa:	f06f 0004 	mvn.w	r0, #4
 80003fe:	f7ff ffbf 	bl	8000380 <__NVIC_SetPriority>
#endif
}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
	...

08000408 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800040e:	f3ef 8305 	mrs	r3, IPSR
 8000412:	603b      	str	r3, [r7, #0]
  return(result);
 8000414:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8000416:	2b00      	cmp	r3, #0
 8000418:	d003      	beq.n	8000422 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800041a:	f06f 0305 	mvn.w	r3, #5
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	e00c      	b.n	800043c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8000422:	4b0a      	ldr	r3, [pc, #40]	; (800044c <osKernelInitialize+0x44>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d105      	bne.n	8000436 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800042a:	4b08      	ldr	r3, [pc, #32]	; (800044c <osKernelInitialize+0x44>)
 800042c:	2201      	movs	r2, #1
 800042e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8000430:	2300      	movs	r3, #0
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	e002      	b.n	800043c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8000436:	f04f 33ff 	mov.w	r3, #4294967295
 800043a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800043c:	687b      	ldr	r3, [r7, #4]
}
 800043e:	4618      	mov	r0, r3
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	24000148 	.word	0x24000148

08000450 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000456:	f3ef 8305 	mrs	r3, IPSR
 800045a:	603b      	str	r3, [r7, #0]
  return(result);
 800045c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800045e:	2b00      	cmp	r3, #0
 8000460:	d003      	beq.n	800046a <osKernelStart+0x1a>
    stat = osErrorISR;
 8000462:	f06f 0305 	mvn.w	r3, #5
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	e010      	b.n	800048c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800046a:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <osKernelStart+0x48>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	2b01      	cmp	r3, #1
 8000470:	d109      	bne.n	8000486 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8000472:	f7ff ffbf 	bl	80003f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8000476:	4b08      	ldr	r3, [pc, #32]	; (8000498 <osKernelStart+0x48>)
 8000478:	2202      	movs	r2, #2
 800047a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800047c:	f002 fa10 	bl	80028a0 <vTaskStartScheduler>
      stat = osOK;
 8000480:	2300      	movs	r3, #0
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	e002      	b.n	800048c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8000486:	f04f 33ff 	mov.w	r3, #4294967295
 800048a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800048c:	687b      	ldr	r3, [r7, #4]
}
 800048e:	4618      	mov	r0, r3
 8000490:	3708      	adds	r7, #8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	24000148 	.word	0x24000148

0800049c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800049c:	b580      	push	{r7, lr}
 800049e:	b08e      	sub	sp, #56	; 0x38
 80004a0:	af04      	add	r7, sp, #16
 80004a2:	60f8      	str	r0, [r7, #12]
 80004a4:	60b9      	str	r1, [r7, #8]
 80004a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80004a8:	2300      	movs	r3, #0
 80004aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80004ac:	f3ef 8305 	mrs	r3, IPSR
 80004b0:	617b      	str	r3, [r7, #20]
  return(result);
 80004b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d17e      	bne.n	80005b6 <osThreadNew+0x11a>
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d07b      	beq.n	80005b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80004be:	2380      	movs	r3, #128	; 0x80
 80004c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80004c2:	2318      	movs	r3, #24
 80004c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80004c6:	2300      	movs	r3, #0
 80004c8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80004ca:	f04f 33ff 	mov.w	r3, #4294967295
 80004ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d045      	beq.n	8000562 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d002      	beq.n	80004e4 <osThreadNew+0x48>
        name = attr->name;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d002      	beq.n	80004f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80004f2:	69fb      	ldr	r3, [r7, #28]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d008      	beq.n	800050a <osThreadNew+0x6e>
 80004f8:	69fb      	ldr	r3, [r7, #28]
 80004fa:	2b38      	cmp	r3, #56	; 0x38
 80004fc:	d805      	bhi.n	800050a <osThreadNew+0x6e>
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	685b      	ldr	r3, [r3, #4]
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <osThreadNew+0x72>
        return (NULL);
 800050a:	2300      	movs	r3, #0
 800050c:	e054      	b.n	80005b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d003      	beq.n	800051e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	089b      	lsrs	r3, r3, #2
 800051c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d00e      	beq.n	8000544 <osThreadNew+0xa8>
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	68db      	ldr	r3, [r3, #12]
 800052a:	2b5b      	cmp	r3, #91	; 0x5b
 800052c:	d90a      	bls.n	8000544 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8000532:	2b00      	cmp	r3, #0
 8000534:	d006      	beq.n	8000544 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d002      	beq.n	8000544 <osThreadNew+0xa8>
        mem = 1;
 800053e:	2301      	movs	r3, #1
 8000540:	61bb      	str	r3, [r7, #24]
 8000542:	e010      	b.n	8000566 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	689b      	ldr	r3, [r3, #8]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d10c      	bne.n	8000566 <osThreadNew+0xca>
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d108      	bne.n	8000566 <osThreadNew+0xca>
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	691b      	ldr	r3, [r3, #16]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d104      	bne.n	8000566 <osThreadNew+0xca>
          mem = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	61bb      	str	r3, [r7, #24]
 8000560:	e001      	b.n	8000566 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8000566:	69bb      	ldr	r3, [r7, #24]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d110      	bne.n	800058e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8000574:	9202      	str	r2, [sp, #8]
 8000576:	9301      	str	r3, [sp, #4]
 8000578:	69fb      	ldr	r3, [r7, #28]
 800057a:	9300      	str	r3, [sp, #0]
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	6a3a      	ldr	r2, [r7, #32]
 8000580:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000582:	68f8      	ldr	r0, [r7, #12]
 8000584:	f001 ffb6 	bl	80024f4 <xTaskCreateStatic>
 8000588:	4603      	mov	r3, r0
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	e013      	b.n	80005b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800058e:	69bb      	ldr	r3, [r7, #24]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d110      	bne.n	80005b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8000594:	6a3b      	ldr	r3, [r7, #32]
 8000596:	b29a      	uxth	r2, r3
 8000598:	f107 0310 	add.w	r3, r7, #16
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	69fb      	ldr	r3, [r7, #28]
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80005a6:	68f8      	ldr	r0, [r7, #12]
 80005a8:	f002 f801 	bl	80025ae <xTaskCreate>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d001      	beq.n	80005b6 <osThreadNew+0x11a>
            hTask = NULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80005b6:	693b      	ldr	r3, [r7, #16]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3728      	adds	r7, #40	; 0x28
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80005c8:	f3ef 8305 	mrs	r3, IPSR
 80005cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80005ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d003      	beq.n	80005dc <osDelay+0x1c>
    stat = osErrorISR;
 80005d4:	f06f 0305 	mvn.w	r3, #5
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	e007      	b.n	80005ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d002      	beq.n	80005ec <osDelay+0x2c>
      vTaskDelay(ticks);
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f002 f926 	bl	8002838 <vTaskDelay>
    }
  }

  return (stat);
 80005ec:	68fb      	ldr	r3, [r7, #12]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b08a      	sub	sp, #40	; 0x28
 80005fa:	af02      	add	r7, sp, #8
 80005fc:	60f8      	str	r0, [r7, #12]
 80005fe:	60b9      	str	r1, [r7, #8]
 8000600:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000606:	f3ef 8305 	mrs	r3, IPSR
 800060a:	613b      	str	r3, [r7, #16]
  return(result);
 800060c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800060e:	2b00      	cmp	r3, #0
 8000610:	d175      	bne.n	80006fe <osSemaphoreNew+0x108>
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d072      	beq.n	80006fe <osSemaphoreNew+0x108>
 8000618:	68ba      	ldr	r2, [r7, #8]
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	429a      	cmp	r2, r3
 800061e:	d86e      	bhi.n	80006fe <osSemaphoreNew+0x108>
    mem = -1;
 8000620:	f04f 33ff 	mov.w	r3, #4294967295
 8000624:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d015      	beq.n	8000658 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d006      	beq.n	8000642 <osSemaphoreNew+0x4c>
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	2b4f      	cmp	r3, #79	; 0x4f
 800063a:	d902      	bls.n	8000642 <osSemaphoreNew+0x4c>
        mem = 1;
 800063c:	2301      	movs	r3, #1
 800063e:	61bb      	str	r3, [r7, #24]
 8000640:	e00c      	b.n	800065c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d108      	bne.n	800065c <osSemaphoreNew+0x66>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	68db      	ldr	r3, [r3, #12]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d104      	bne.n	800065c <osSemaphoreNew+0x66>
          mem = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	61bb      	str	r3, [r7, #24]
 8000656:	e001      	b.n	800065c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800065c:	69bb      	ldr	r3, [r7, #24]
 800065e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000662:	d04c      	beq.n	80006fe <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d128      	bne.n	80006bc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800066a:	69bb      	ldr	r3, [r7, #24]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d10a      	bne.n	8000686 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	2203      	movs	r2, #3
 8000676:	9200      	str	r2, [sp, #0]
 8000678:	2200      	movs	r2, #0
 800067a:	2100      	movs	r1, #0
 800067c:	2001      	movs	r0, #1
 800067e:	f000 ff93 	bl	80015a8 <xQueueGenericCreateStatic>
 8000682:	61f8      	str	r0, [r7, #28]
 8000684:	e005      	b.n	8000692 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8000686:	2203      	movs	r2, #3
 8000688:	2100      	movs	r1, #0
 800068a:	2001      	movs	r0, #1
 800068c:	f001 f804 	bl	8001698 <xQueueGenericCreate>
 8000690:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8000692:	69fb      	ldr	r3, [r7, #28]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d022      	beq.n	80006de <osSemaphoreNew+0xe8>
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d01f      	beq.n	80006de <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800069e:	2300      	movs	r3, #0
 80006a0:	2200      	movs	r2, #0
 80006a2:	2100      	movs	r1, #0
 80006a4:	69f8      	ldr	r0, [r7, #28]
 80006a6:	f001 f8bf 	bl	8001828 <xQueueGenericSend>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d016      	beq.n	80006de <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80006b0:	69f8      	ldr	r0, [r7, #28]
 80006b2:	f001 fd4b 	bl	800214c <vQueueDelete>
            hSemaphore = NULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
 80006ba:	e010      	b.n	80006de <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80006bc:	69bb      	ldr	r3, [r7, #24]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d108      	bne.n	80006d4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	689b      	ldr	r3, [r3, #8]
 80006c6:	461a      	mov	r2, r3
 80006c8:	68b9      	ldr	r1, [r7, #8]
 80006ca:	68f8      	ldr	r0, [r7, #12]
 80006cc:	f001 f841 	bl	8001752 <xQueueCreateCountingSemaphoreStatic>
 80006d0:	61f8      	str	r0, [r7, #28]
 80006d2:	e004      	b.n	80006de <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80006d4:	68b9      	ldr	r1, [r7, #8]
 80006d6:	68f8      	ldr	r0, [r7, #12]
 80006d8:	f001 f872 	bl	80017c0 <xQueueCreateCountingSemaphore>
 80006dc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d00c      	beq.n	80006fe <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d003      	beq.n	80006f2 <osSemaphoreNew+0xfc>
          name = attr->name;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	617b      	str	r3, [r7, #20]
 80006f0:	e001      	b.n	80006f6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80006f6:	6979      	ldr	r1, [r7, #20]
 80006f8:	69f8      	ldr	r0, [r7, #28]
 80006fa:	f001 fe73 	bl	80023e4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80006fe:	69fb      	ldr	r3, [r7, #28]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3720      	adds	r7, #32
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800071a:	693b      	ldr	r3, [r7, #16]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d103      	bne.n	8000728 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8000720:	f06f 0303 	mvn.w	r3, #3
 8000724:	617b      	str	r3, [r7, #20]
 8000726:	e039      	b.n	800079c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000728:	f3ef 8305 	mrs	r3, IPSR
 800072c:	60fb      	str	r3, [r7, #12]
  return(result);
 800072e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8000730:	2b00      	cmp	r3, #0
 8000732:	d022      	beq.n	800077a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d003      	beq.n	8000742 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800073a:	f06f 0303 	mvn.w	r3, #3
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	e02c      	b.n	800079c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8000746:	f107 0308 	add.w	r3, r7, #8
 800074a:	461a      	mov	r2, r3
 800074c:	2100      	movs	r1, #0
 800074e:	6938      	ldr	r0, [r7, #16]
 8000750:	f001 fc7c 	bl	800204c <xQueueReceiveFromISR>
 8000754:	4603      	mov	r3, r0
 8000756:	2b01      	cmp	r3, #1
 8000758:	d003      	beq.n	8000762 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800075a:	f06f 0302 	mvn.w	r3, #2
 800075e:	617b      	str	r3, [r7, #20]
 8000760:	e01c      	b.n	800079c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d019      	beq.n	800079c <osSemaphoreAcquire+0x94>
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <osSemaphoreAcquire+0xa0>)
 800076a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	f3bf 8f4f 	dsb	sy
 8000774:	f3bf 8f6f 	isb	sy
 8000778:	e010      	b.n	800079c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800077a:	6839      	ldr	r1, [r7, #0]
 800077c:	6938      	ldr	r0, [r7, #16]
 800077e:	f001 fb59 	bl	8001e34 <xQueueSemaphoreTake>
 8000782:	4603      	mov	r3, r0
 8000784:	2b01      	cmp	r3, #1
 8000786:	d009      	beq.n	800079c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d003      	beq.n	8000796 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800078e:	f06f 0301 	mvn.w	r3, #1
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	e002      	b.n	800079c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8000796:	f06f 0302 	mvn.w	r3, #2
 800079a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800079c:	697b      	ldr	r3, [r7, #20]
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	e000ed04 	.word	0xe000ed04

080007ac <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80007bc:	693b      	ldr	r3, [r7, #16]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d103      	bne.n	80007ca <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80007c2:	f06f 0303 	mvn.w	r3, #3
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	e02c      	b.n	8000824 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80007ca:	f3ef 8305 	mrs	r3, IPSR
 80007ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80007d0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d01a      	beq.n	800080c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80007da:	f107 0308 	add.w	r3, r7, #8
 80007de:	4619      	mov	r1, r3
 80007e0:	6938      	ldr	r0, [r7, #16]
 80007e2:	f001 f9ba 	bl	8001b5a <xQueueGiveFromISR>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d003      	beq.n	80007f4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80007ec:	f06f 0302 	mvn.w	r3, #2
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	e017      	b.n	8000824 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d014      	beq.n	8000824 <osSemaphoreRelease+0x78>
 80007fa:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <osSemaphoreRelease+0x84>)
 80007fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	f3bf 8f4f 	dsb	sy
 8000806:	f3bf 8f6f 	isb	sy
 800080a:	e00b      	b.n	8000824 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800080c:	2300      	movs	r3, #0
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	6938      	ldr	r0, [r7, #16]
 8000814:	f001 f808 	bl	8001828 <xQueueGenericSend>
 8000818:	4603      	mov	r3, r0
 800081a:	2b01      	cmp	r3, #1
 800081c:	d002      	beq.n	8000824 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800081e:	f06f 0302 	mvn.w	r3, #2
 8000822:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8000824:	697b      	ldr	r3, [r7, #20]
}
 8000826:	4618      	mov	r0, r3
 8000828:	3718      	adds	r7, #24
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	e000ed04 	.word	0xe000ed04

08000834 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af02      	add	r7, sp, #8
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000844:	f3ef 8305 	mrs	r3, IPSR
 8000848:	613b      	str	r3, [r7, #16]
  return(result);
 800084a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800084c:	2b00      	cmp	r3, #0
 800084e:	d15f      	bne.n	8000910 <osMessageQueueNew+0xdc>
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d05c      	beq.n	8000910 <osMessageQueueNew+0xdc>
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d059      	beq.n	8000910 <osMessageQueueNew+0xdc>
    mem = -1;
 800085c:	f04f 33ff 	mov.w	r3, #4294967295
 8000860:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d029      	beq.n	80008bc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d012      	beq.n	8000896 <osMessageQueueNew+0x62>
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	2b4f      	cmp	r3, #79	; 0x4f
 8000876:	d90e      	bls.n	8000896 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800087c:	2b00      	cmp	r3, #0
 800087e:	d00a      	beq.n	8000896 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	695a      	ldr	r2, [r3, #20]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	68b9      	ldr	r1, [r7, #8]
 8000888:	fb01 f303 	mul.w	r3, r1, r3
 800088c:	429a      	cmp	r2, r3
 800088e:	d302      	bcc.n	8000896 <osMessageQueueNew+0x62>
        mem = 1;
 8000890:	2301      	movs	r3, #1
 8000892:	61bb      	str	r3, [r7, #24]
 8000894:	e014      	b.n	80008c0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	689b      	ldr	r3, [r3, #8]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d110      	bne.n	80008c0 <osMessageQueueNew+0x8c>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	68db      	ldr	r3, [r3, #12]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d10c      	bne.n	80008c0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d108      	bne.n	80008c0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d104      	bne.n	80008c0 <osMessageQueueNew+0x8c>
          mem = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61bb      	str	r3, [r7, #24]
 80008ba:	e001      	b.n	80008c0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d10b      	bne.n	80008de <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	691a      	ldr	r2, [r3, #16]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	689b      	ldr	r3, [r3, #8]
 80008ce:	2100      	movs	r1, #0
 80008d0:	9100      	str	r1, [sp, #0]
 80008d2:	68b9      	ldr	r1, [r7, #8]
 80008d4:	68f8      	ldr	r0, [r7, #12]
 80008d6:	f000 fe67 	bl	80015a8 <xQueueGenericCreateStatic>
 80008da:	61f8      	str	r0, [r7, #28]
 80008dc:	e008      	b.n	80008f0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80008de:	69bb      	ldr	r3, [r7, #24]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d105      	bne.n	80008f0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80008e4:	2200      	movs	r2, #0
 80008e6:	68b9      	ldr	r1, [r7, #8]
 80008e8:	68f8      	ldr	r0, [r7, #12]
 80008ea:	f000 fed5 	bl	8001698 <xQueueGenericCreate>
 80008ee:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d00c      	beq.n	8000910 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d003      	beq.n	8000904 <osMessageQueueNew+0xd0>
        name = attr->name;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	617b      	str	r3, [r7, #20]
 8000902:	e001      	b.n	8000908 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8000908:	6979      	ldr	r1, [r7, #20]
 800090a:	69f8      	ldr	r0, [r7, #28]
 800090c:	f001 fd6a 	bl	80023e4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8000910:	69fb      	ldr	r3, [r7, #28]
}
 8000912:	4618      	mov	r0, r3
 8000914:	3720      	adds	r7, #32
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	4613      	mov	r3, r2
 800092a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000934:	f3ef 8305 	mrs	r3, IPSR
 8000938:	617b      	str	r3, [r7, #20]
  return(result);
 800093a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800093c:	2b00      	cmp	r3, #0
 800093e:	d028      	beq.n	8000992 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d005      	beq.n	8000952 <osMessageQueuePut+0x36>
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d002      	beq.n	8000952 <osMessageQueuePut+0x36>
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d003      	beq.n	800095a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8000952:	f06f 0303 	mvn.w	r3, #3
 8000956:	61fb      	str	r3, [r7, #28]
 8000958:	e038      	b.n	80009cc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800095e:	f107 0210 	add.w	r2, r7, #16
 8000962:	2300      	movs	r3, #0
 8000964:	68b9      	ldr	r1, [r7, #8]
 8000966:	69b8      	ldr	r0, [r7, #24]
 8000968:	f001 f85c 	bl	8001a24 <xQueueGenericSendFromISR>
 800096c:	4603      	mov	r3, r0
 800096e:	2b01      	cmp	r3, #1
 8000970:	d003      	beq.n	800097a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8000972:	f06f 0302 	mvn.w	r3, #2
 8000976:	61fb      	str	r3, [r7, #28]
 8000978:	e028      	b.n	80009cc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d025      	beq.n	80009cc <osMessageQueuePut+0xb0>
 8000980:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <osMessageQueuePut+0xbc>)
 8000982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	f3bf 8f4f 	dsb	sy
 800098c:	f3bf 8f6f 	isb	sy
 8000990:	e01c      	b.n	80009cc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d002      	beq.n	800099e <osMessageQueuePut+0x82>
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d103      	bne.n	80009a6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800099e:	f06f 0303 	mvn.w	r3, #3
 80009a2:	61fb      	str	r3, [r7, #28]
 80009a4:	e012      	b.n	80009cc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80009a6:	2300      	movs	r3, #0
 80009a8:	683a      	ldr	r2, [r7, #0]
 80009aa:	68b9      	ldr	r1, [r7, #8]
 80009ac:	69b8      	ldr	r0, [r7, #24]
 80009ae:	f000 ff3b 	bl	8001828 <xQueueGenericSend>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d009      	beq.n	80009cc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d003      	beq.n	80009c6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80009be:	f06f 0301 	mvn.w	r3, #1
 80009c2:	61fb      	str	r3, [r7, #28]
 80009c4:	e002      	b.n	80009cc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80009c6:	f06f 0302 	mvn.w	r3, #2
 80009ca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80009cc:	69fb      	ldr	r3, [r7, #28]
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3720      	adds	r7, #32
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	e000ed04 	.word	0xe000ed04

080009dc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
 80009e8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80009f2:	f3ef 8305 	mrs	r3, IPSR
 80009f6:	617b      	str	r3, [r7, #20]
  return(result);
 80009f8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d028      	beq.n	8000a50 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80009fe:	69bb      	ldr	r3, [r7, #24]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d005      	beq.n	8000a10 <osMessageQueueGet+0x34>
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d002      	beq.n	8000a10 <osMessageQueueGet+0x34>
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d003      	beq.n	8000a18 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8000a10:	f06f 0303 	mvn.w	r3, #3
 8000a14:	61fb      	str	r3, [r7, #28]
 8000a16:	e037      	b.n	8000a88 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8000a1c:	f107 0310 	add.w	r3, r7, #16
 8000a20:	461a      	mov	r2, r3
 8000a22:	68b9      	ldr	r1, [r7, #8]
 8000a24:	69b8      	ldr	r0, [r7, #24]
 8000a26:	f001 fb11 	bl	800204c <xQueueReceiveFromISR>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d003      	beq.n	8000a38 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8000a30:	f06f 0302 	mvn.w	r3, #2
 8000a34:	61fb      	str	r3, [r7, #28]
 8000a36:	e027      	b.n	8000a88 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d024      	beq.n	8000a88 <osMessageQueueGet+0xac>
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <osMessageQueueGet+0xb8>)
 8000a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	f3bf 8f4f 	dsb	sy
 8000a4a:	f3bf 8f6f 	isb	sy
 8000a4e:	e01b      	b.n	8000a88 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d002      	beq.n	8000a5c <osMessageQueueGet+0x80>
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d103      	bne.n	8000a64 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8000a5c:	f06f 0303 	mvn.w	r3, #3
 8000a60:	61fb      	str	r3, [r7, #28]
 8000a62:	e011      	b.n	8000a88 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8000a64:	683a      	ldr	r2, [r7, #0]
 8000a66:	68b9      	ldr	r1, [r7, #8]
 8000a68:	69b8      	ldr	r0, [r7, #24]
 8000a6a:	f001 f903 	bl	8001c74 <xQueueReceive>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d009      	beq.n	8000a88 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d003      	beq.n	8000a82 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8000a7a:	f06f 0301 	mvn.w	r3, #1
 8000a7e:	61fb      	str	r3, [r7, #28]
 8000a80:	e002      	b.n	8000a88 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8000a82:	f06f 0302 	mvn.w	r3, #2
 8000a86:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8000a88:	69fb      	ldr	r3, [r7, #28]
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3720      	adds	r7, #32
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	e000ed04 	.word	0xe000ed04

08000a98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	4a07      	ldr	r2, [pc, #28]	; (8000ac4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000aa8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	4a06      	ldr	r2, [pc, #24]	; (8000ac8 <vApplicationGetIdleTaskMemory+0x30>)
 8000aae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2280      	movs	r2, #128	; 0x80
 8000ab4:	601a      	str	r2, [r3, #0]
}
 8000ab6:	bf00      	nop
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	2400014c 	.word	0x2400014c
 8000ac8:	240001a8 	.word	0x240001a8

08000acc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <vApplicationGetTimerTaskMemory+0x2c>)
 8000adc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	4a06      	ldr	r2, [pc, #24]	; (8000afc <vApplicationGetTimerTaskMemory+0x30>)
 8000ae2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aea:	601a      	str	r2, [r3, #0]
}
 8000aec:	bf00      	nop
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	240003a8 	.word	0x240003a8
 8000afc:	24000404 	.word	0x24000404

08000b00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000b0c:	f001 ff2e 	bl	800296c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000b10:	4b5b      	ldr	r3, [pc, #364]	; (8000c80 <pvPortMalloc+0x180>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d101      	bne.n	8000b1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8000b18:	f000 f920 	bl	8000d5c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000b1c:	4b59      	ldr	r3, [pc, #356]	; (8000c84 <pvPortMalloc+0x184>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4013      	ands	r3, r2
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	f040 8093 	bne.w	8000c50 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d01d      	beq.n	8000b6c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8000b30:	2208      	movs	r2, #8
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d014      	beq.n	8000b6c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f023 0307 	bic.w	r3, r3, #7
 8000b48:	3308      	adds	r3, #8
 8000b4a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d00a      	beq.n	8000b6c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b5a:	f383 8811 	msr	BASEPRI, r3
 8000b5e:	f3bf 8f6f 	isb	sy
 8000b62:	f3bf 8f4f 	dsb	sy
 8000b66:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000b68:	bf00      	nop
 8000b6a:	e7fe      	b.n	8000b6a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d06e      	beq.n	8000c50 <pvPortMalloc+0x150>
 8000b72:	4b45      	ldr	r3, [pc, #276]	; (8000c88 <pvPortMalloc+0x188>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d869      	bhi.n	8000c50 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000b7c:	4b43      	ldr	r3, [pc, #268]	; (8000c8c <pvPortMalloc+0x18c>)
 8000b7e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000b80:	4b42      	ldr	r3, [pc, #264]	; (8000c8c <pvPortMalloc+0x18c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000b86:	e004      	b.n	8000b92 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8000b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d903      	bls.n	8000ba4 <pvPortMalloc+0xa4>
 8000b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d1f1      	bne.n	8000b88 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000ba4:	4b36      	ldr	r3, [pc, #216]	; (8000c80 <pvPortMalloc+0x180>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d050      	beq.n	8000c50 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000bae:	6a3b      	ldr	r3, [r7, #32]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2208      	movs	r2, #8
 8000bb4:	4413      	add	r3, r2
 8000bb6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	6a3b      	ldr	r3, [r7, #32]
 8000bbe:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc2:	685a      	ldr	r2, [r3, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	1ad2      	subs	r2, r2, r3
 8000bc8:	2308      	movs	r3, #8
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d91f      	bls.n	8000c10 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d00a      	beq.n	8000bf8 <pvPortMalloc+0xf8>
	__asm volatile
 8000be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000be6:	f383 8811 	msr	BASEPRI, r3
 8000bea:	f3bf 8f6f 	isb	sy
 8000bee:	f3bf 8f4f 	dsb	sy
 8000bf2:	613b      	str	r3, [r7, #16]
}
 8000bf4:	bf00      	nop
 8000bf6:	e7fe      	b.n	8000bf6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfa:	685a      	ldr	r2, [r3, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	1ad2      	subs	r2, r2, r3
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000c0a:	69b8      	ldr	r0, [r7, #24]
 8000c0c:	f000 f908 	bl	8000e20 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000c10:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <pvPortMalloc+0x188>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	4a1b      	ldr	r2, [pc, #108]	; (8000c88 <pvPortMalloc+0x188>)
 8000c1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <pvPortMalloc+0x188>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <pvPortMalloc+0x190>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d203      	bcs.n	8000c32 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000c2a:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <pvPortMalloc+0x188>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a18      	ldr	r2, [pc, #96]	; (8000c90 <pvPortMalloc+0x190>)
 8000c30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c34:	685a      	ldr	r2, [r3, #4]
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <pvPortMalloc+0x184>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	431a      	orrs	r2, r3
 8000c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <pvPortMalloc+0x194>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	4a11      	ldr	r2, [pc, #68]	; (8000c94 <pvPortMalloc+0x194>)
 8000c4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000c50:	f001 fe9a 	bl	8002988 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d00a      	beq.n	8000c74 <pvPortMalloc+0x174>
	__asm volatile
 8000c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c62:	f383 8811 	msr	BASEPRI, r3
 8000c66:	f3bf 8f6f 	isb	sy
 8000c6a:	f3bf 8f4f 	dsb	sy
 8000c6e:	60fb      	str	r3, [r7, #12]
}
 8000c70:	bf00      	nop
 8000c72:	e7fe      	b.n	8000c72 <pvPortMalloc+0x172>
	return pvReturn;
 8000c74:	69fb      	ldr	r3, [r7, #28]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3728      	adds	r7, #40	; 0x28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	2400880c 	.word	0x2400880c
 8000c84:	24008820 	.word	0x24008820
 8000c88:	24008810 	.word	0x24008810
 8000c8c:	24008804 	.word	0x24008804
 8000c90:	24008814 	.word	0x24008814
 8000c94:	24008818 	.word	0x24008818

08000c98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d04d      	beq.n	8000d46 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000caa:	2308      	movs	r3, #8
 8000cac:	425b      	negs	r3, r3
 8000cae:	697a      	ldr	r2, [r7, #20]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	4b24      	ldr	r3, [pc, #144]	; (8000d50 <vPortFree+0xb8>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d10a      	bne.n	8000cdc <vPortFree+0x44>
	__asm volatile
 8000cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cca:	f383 8811 	msr	BASEPRI, r3
 8000cce:	f3bf 8f6f 	isb	sy
 8000cd2:	f3bf 8f4f 	dsb	sy
 8000cd6:	60fb      	str	r3, [r7, #12]
}
 8000cd8:	bf00      	nop
 8000cda:	e7fe      	b.n	8000cda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d00a      	beq.n	8000cfa <vPortFree+0x62>
	__asm volatile
 8000ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ce8:	f383 8811 	msr	BASEPRI, r3
 8000cec:	f3bf 8f6f 	isb	sy
 8000cf0:	f3bf 8f4f 	dsb	sy
 8000cf4:	60bb      	str	r3, [r7, #8]
}
 8000cf6:	bf00      	nop
 8000cf8:	e7fe      	b.n	8000cf8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	685a      	ldr	r2, [r3, #4]
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <vPortFree+0xb8>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4013      	ands	r3, r2
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d01e      	beq.n	8000d46 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d11a      	bne.n	8000d46 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	685a      	ldr	r2, [r3, #4]
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <vPortFree+0xb8>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000d20:	f001 fe24 	bl	800296c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	685a      	ldr	r2, [r3, #4]
 8000d28:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <vPortFree+0xbc>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a09      	ldr	r2, [pc, #36]	; (8000d54 <vPortFree+0xbc>)
 8000d30:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000d32:	6938      	ldr	r0, [r7, #16]
 8000d34:	f000 f874 	bl	8000e20 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8000d38:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <vPortFree+0xc0>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	4a06      	ldr	r2, [pc, #24]	; (8000d58 <vPortFree+0xc0>)
 8000d40:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8000d42:	f001 fe21 	bl	8002988 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000d46:	bf00      	nop
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	24008820 	.word	0x24008820
 8000d54:	24008810 	.word	0x24008810
 8000d58:	2400881c 	.word	0x2400881c

08000d5c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d66:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000d68:	4b27      	ldr	r3, [pc, #156]	; (8000e08 <prvHeapInit+0xac>)
 8000d6a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d00c      	beq.n	8000d90 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	3307      	adds	r3, #7
 8000d7a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f023 0307 	bic.w	r3, r3, #7
 8000d82:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000d84:	68ba      	ldr	r2, [r7, #8]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	4a1f      	ldr	r2, [pc, #124]	; (8000e08 <prvHeapInit+0xac>)
 8000d8c:	4413      	add	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000d94:	4a1d      	ldr	r2, [pc, #116]	; (8000e0c <prvHeapInit+0xb0>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <prvHeapInit+0xb0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	4413      	add	r3, r2
 8000da6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000da8:	2208      	movs	r2, #8
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	1a9b      	subs	r3, r3, r2
 8000dae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f023 0307 	bic.w	r3, r3, #7
 8000db6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4a15      	ldr	r2, [pc, #84]	; (8000e10 <prvHeapInit+0xb4>)
 8000dbc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000dbe:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <prvHeapInit+0xb4>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000dc6:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <prvHeapInit+0xb4>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	1ad2      	subs	r2, r2, r3
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <prvHeapInit+0xb4>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <prvHeapInit+0xb8>)
 8000dea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	4a09      	ldr	r2, [pc, #36]	; (8000e18 <prvHeapInit+0xbc>)
 8000df2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000df4:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <prvHeapInit+0xc0>)
 8000df6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000dfa:	601a      	str	r2, [r3, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	24000804 	.word	0x24000804
 8000e0c:	24008804 	.word	0x24008804
 8000e10:	2400880c 	.word	0x2400880c
 8000e14:	24008814 	.word	0x24008814
 8000e18:	24008810 	.word	0x24008810
 8000e1c:	24008820 	.word	0x24008820

08000e20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000e28:	4b28      	ldr	r3, [pc, #160]	; (8000ecc <prvInsertBlockIntoFreeList+0xac>)
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	e002      	b.n	8000e34 <prvInsertBlockIntoFreeList+0x14>
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d8f7      	bhi.n	8000e2e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	4413      	add	r3, r2
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d108      	bne.n	8000e62 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	685a      	ldr	r2, [r3, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	441a      	add	r2, r3
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	441a      	add	r2, r3
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d118      	bne.n	8000ea8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <prvInsertBlockIntoFreeList+0xb0>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d00d      	beq.n	8000e9e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685a      	ldr	r2, [r3, #4]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	441a      	add	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	e008      	b.n	8000eb0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <prvInsertBlockIntoFreeList+0xb0>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	e003      	b.n	8000eb0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000eb0:	68fa      	ldr	r2, [r7, #12]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d002      	beq.n	8000ebe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000ebe:	bf00      	nop
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	24008804 	.word	0x24008804
 8000ed0:	2400880c 	.word	0x2400880c

08000ed4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f103 0208 	add.w	r2, r3, #8
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f103 0208 	add.w	r2, r3, #8
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f103 0208 	add.w	r2, r3, #8
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b085      	sub	sp, #20
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	683a      	ldr	r2, [r7, #0]
 8000f52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	683a      	ldr	r2, [r7, #0]
 8000f58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	1c5a      	adds	r2, r3, #1
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	601a      	str	r2, [r3, #0]
}
 8000f6a:	bf00      	nop
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000f76:	b480      	push	{r7}
 8000f78:	b085      	sub	sp, #20
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f8c:	d103      	bne.n	8000f96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	e00c      	b.n	8000fb0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3308      	adds	r3, #8
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	e002      	b.n	8000fa4 <vListInsert+0x2e>
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d2f6      	bcs.n	8000f9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	685a      	ldr	r2, [r3, #4]
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	683a      	ldr	r2, [r7, #0]
 8000fbe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	1c5a      	adds	r2, r3, #1
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	601a      	str	r2, [r3, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	691b      	ldr	r3, [r3, #16]
 8000ff4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	6892      	ldr	r2, [r2, #8]
 8000ffe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	6852      	ldr	r2, [r2, #4]
 8001008:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	429a      	cmp	r2, r3
 8001012:	d103      	bne.n	800101c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	1e5a      	subs	r2, r3, #1
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	3b04      	subs	r3, #4
 800104c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001054:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	3b04      	subs	r3, #4
 800105a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	f023 0201 	bic.w	r2, r3, #1
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	3b04      	subs	r3, #4
 800106a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800106c:	4a0c      	ldr	r2, [pc, #48]	; (80010a0 <pxPortInitialiseStack+0x64>)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	3b14      	subs	r3, #20
 8001076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	3b04      	subs	r3, #4
 8001082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f06f 0202 	mvn.w	r2, #2
 800108a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	3b20      	subs	r3, #32
 8001090:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001092:	68fb      	ldr	r3, [r7, #12]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	080010a5 	.word	0x080010a5

080010a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80010ae:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <prvTaskExitError+0x54>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b6:	d00a      	beq.n	80010ce <prvTaskExitError+0x2a>
	__asm volatile
 80010b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010bc:	f383 8811 	msr	BASEPRI, r3
 80010c0:	f3bf 8f6f 	isb	sy
 80010c4:	f3bf 8f4f 	dsb	sy
 80010c8:	60fb      	str	r3, [r7, #12]
}
 80010ca:	bf00      	nop
 80010cc:	e7fe      	b.n	80010cc <prvTaskExitError+0x28>
	__asm volatile
 80010ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010d2:	f383 8811 	msr	BASEPRI, r3
 80010d6:	f3bf 8f6f 	isb	sy
 80010da:	f3bf 8f4f 	dsb	sy
 80010de:	60bb      	str	r3, [r7, #8]
}
 80010e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80010e2:	bf00      	nop
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0fc      	beq.n	80010e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80010ea:	bf00      	nop
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	24000004 	.word	0x24000004
 80010fc:	00000000 	.word	0x00000000

08001100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <pxCurrentTCBConst2>)
 8001102:	6819      	ldr	r1, [r3, #0]
 8001104:	6808      	ldr	r0, [r1, #0]
 8001106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800110a:	f380 8809 	msr	PSP, r0
 800110e:	f3bf 8f6f 	isb	sy
 8001112:	f04f 0000 	mov.w	r0, #0
 8001116:	f380 8811 	msr	BASEPRI, r0
 800111a:	4770      	bx	lr
 800111c:	f3af 8000 	nop.w

08001120 <pxCurrentTCBConst2>:
 8001120:	2400886c 	.word	0x2400886c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop

08001128 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001128:	4808      	ldr	r0, [pc, #32]	; (800114c <prvPortStartFirstTask+0x24>)
 800112a:	6800      	ldr	r0, [r0, #0]
 800112c:	6800      	ldr	r0, [r0, #0]
 800112e:	f380 8808 	msr	MSP, r0
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	f380 8814 	msr	CONTROL, r0
 800113a:	b662      	cpsie	i
 800113c:	b661      	cpsie	f
 800113e:	f3bf 8f4f 	dsb	sy
 8001142:	f3bf 8f6f 	isb	sy
 8001146:	df00      	svc	0
 8001148:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800114a:	bf00      	nop
 800114c:	e000ed08 	.word	0xe000ed08

08001150 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001156:	4b46      	ldr	r3, [pc, #280]	; (8001270 <xPortStartScheduler+0x120>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a46      	ldr	r2, [pc, #280]	; (8001274 <xPortStartScheduler+0x124>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d10a      	bne.n	8001176 <xPortStartScheduler+0x26>
	__asm volatile
 8001160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001164:	f383 8811 	msr	BASEPRI, r3
 8001168:	f3bf 8f6f 	isb	sy
 800116c:	f3bf 8f4f 	dsb	sy
 8001170:	613b      	str	r3, [r7, #16]
}
 8001172:	bf00      	nop
 8001174:	e7fe      	b.n	8001174 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001176:	4b3e      	ldr	r3, [pc, #248]	; (8001270 <xPortStartScheduler+0x120>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a3f      	ldr	r2, [pc, #252]	; (8001278 <xPortStartScheduler+0x128>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d10a      	bne.n	8001196 <xPortStartScheduler+0x46>
	__asm volatile
 8001180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001184:	f383 8811 	msr	BASEPRI, r3
 8001188:	f3bf 8f6f 	isb	sy
 800118c:	f3bf 8f4f 	dsb	sy
 8001190:	60fb      	str	r3, [r7, #12]
}
 8001192:	bf00      	nop
 8001194:	e7fe      	b.n	8001194 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001196:	4b39      	ldr	r3, [pc, #228]	; (800127c <xPortStartScheduler+0x12c>)
 8001198:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	22ff      	movs	r2, #255	; 0xff
 80011a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80011b0:	78fb      	ldrb	r3, [r7, #3]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4b31      	ldr	r3, [pc, #196]	; (8001280 <xPortStartScheduler+0x130>)
 80011bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80011be:	4b31      	ldr	r3, [pc, #196]	; (8001284 <xPortStartScheduler+0x134>)
 80011c0:	2207      	movs	r2, #7
 80011c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80011c4:	e009      	b.n	80011da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80011c6:	4b2f      	ldr	r3, [pc, #188]	; (8001284 <xPortStartScheduler+0x134>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	4a2d      	ldr	r2, [pc, #180]	; (8001284 <xPortStartScheduler+0x134>)
 80011ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80011d0:	78fb      	ldrb	r3, [r7, #3]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80011da:	78fb      	ldrb	r3, [r7, #3]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e2:	2b80      	cmp	r3, #128	; 0x80
 80011e4:	d0ef      	beq.n	80011c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80011e6:	4b27      	ldr	r3, [pc, #156]	; (8001284 <xPortStartScheduler+0x134>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f1c3 0307 	rsb	r3, r3, #7
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	d00a      	beq.n	8001208 <xPortStartScheduler+0xb8>
	__asm volatile
 80011f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011f6:	f383 8811 	msr	BASEPRI, r3
 80011fa:	f3bf 8f6f 	isb	sy
 80011fe:	f3bf 8f4f 	dsb	sy
 8001202:	60bb      	str	r3, [r7, #8]
}
 8001204:	bf00      	nop
 8001206:	e7fe      	b.n	8001206 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001208:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <xPortStartScheduler+0x134>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	021b      	lsls	r3, r3, #8
 800120e:	4a1d      	ldr	r2, [pc, #116]	; (8001284 <xPortStartScheduler+0x134>)
 8001210:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001212:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <xPortStartScheduler+0x134>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800121a:	4a1a      	ldr	r2, [pc, #104]	; (8001284 <xPortStartScheduler+0x134>)
 800121c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <xPortStartScheduler+0x138>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a17      	ldr	r2, [pc, #92]	; (8001288 <xPortStartScheduler+0x138>)
 800122c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001230:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <xPortStartScheduler+0x138>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a14      	ldr	r2, [pc, #80]	; (8001288 <xPortStartScheduler+0x138>)
 8001238:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800123c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800123e:	f000 f8dd 	bl	80013fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001242:	4b12      	ldr	r3, [pc, #72]	; (800128c <xPortStartScheduler+0x13c>)
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8001248:	f000 f8fc 	bl	8001444 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800124c:	4b10      	ldr	r3, [pc, #64]	; (8001290 <xPortStartScheduler+0x140>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0f      	ldr	r2, [pc, #60]	; (8001290 <xPortStartScheduler+0x140>)
 8001252:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001256:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001258:	f7ff ff66 	bl	8001128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800125c:	f001 fcfc 	bl	8002c58 <vTaskSwitchContext>
	prvTaskExitError();
 8001260:	f7ff ff20 	bl	80010a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	e000ed00 	.word	0xe000ed00
 8001274:	410fc271 	.word	0x410fc271
 8001278:	410fc270 	.word	0x410fc270
 800127c:	e000e400 	.word	0xe000e400
 8001280:	24008824 	.word	0x24008824
 8001284:	24008828 	.word	0x24008828
 8001288:	e000ed20 	.word	0xe000ed20
 800128c:	24000004 	.word	0x24000004
 8001290:	e000ef34 	.word	0xe000ef34

08001294 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
	__asm volatile
 800129a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800129e:	f383 8811 	msr	BASEPRI, r3
 80012a2:	f3bf 8f6f 	isb	sy
 80012a6:	f3bf 8f4f 	dsb	sy
 80012aa:	607b      	str	r3, [r7, #4]
}
 80012ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80012ae:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <vPortEnterCritical+0x58>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	3301      	adds	r3, #1
 80012b4:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <vPortEnterCritical+0x58>)
 80012b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <vPortEnterCritical+0x58>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d10f      	bne.n	80012e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <vPortEnterCritical+0x5c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00a      	beq.n	80012e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80012ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012ce:	f383 8811 	msr	BASEPRI, r3
 80012d2:	f3bf 8f6f 	isb	sy
 80012d6:	f3bf 8f4f 	dsb	sy
 80012da:	603b      	str	r3, [r7, #0]
}
 80012dc:	bf00      	nop
 80012de:	e7fe      	b.n	80012de <vPortEnterCritical+0x4a>
	}
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	24000004 	.word	0x24000004
 80012f0:	e000ed04 	.word	0xe000ed04

080012f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <vPortExitCritical+0x50>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10a      	bne.n	8001318 <vPortExitCritical+0x24>
	__asm volatile
 8001302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001306:	f383 8811 	msr	BASEPRI, r3
 800130a:	f3bf 8f6f 	isb	sy
 800130e:	f3bf 8f4f 	dsb	sy
 8001312:	607b      	str	r3, [r7, #4]
}
 8001314:	bf00      	nop
 8001316:	e7fe      	b.n	8001316 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8001318:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <vPortExitCritical+0x50>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	3b01      	subs	r3, #1
 800131e:	4a09      	ldr	r2, [pc, #36]	; (8001344 <vPortExitCritical+0x50>)
 8001320:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <vPortExitCritical+0x50>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d105      	bne.n	8001336 <vPortExitCritical+0x42>
 800132a:	2300      	movs	r3, #0
 800132c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001334:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	24000004 	.word	0x24000004
	...

08001350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001350:	f3ef 8009 	mrs	r0, PSP
 8001354:	f3bf 8f6f 	isb	sy
 8001358:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <pxCurrentTCBConst>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	f01e 0f10 	tst.w	lr, #16
 8001360:	bf08      	it	eq
 8001362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800136a:	6010      	str	r0, [r2, #0]
 800136c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001370:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001374:	f380 8811 	msr	BASEPRI, r0
 8001378:	f3bf 8f4f 	dsb	sy
 800137c:	f3bf 8f6f 	isb	sy
 8001380:	f001 fc6a 	bl	8002c58 <vTaskSwitchContext>
 8001384:	f04f 0000 	mov.w	r0, #0
 8001388:	f380 8811 	msr	BASEPRI, r0
 800138c:	bc09      	pop	{r0, r3}
 800138e:	6819      	ldr	r1, [r3, #0]
 8001390:	6808      	ldr	r0, [r1, #0]
 8001392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001396:	f01e 0f10 	tst.w	lr, #16
 800139a:	bf08      	it	eq
 800139c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80013a0:	f380 8809 	msr	PSP, r0
 80013a4:	f3bf 8f6f 	isb	sy
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	f3af 8000 	nop.w

080013b0 <pxCurrentTCBConst>:
 80013b0:	2400886c 	.word	0x2400886c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop

080013b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
	__asm volatile
 80013be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013c2:	f383 8811 	msr	BASEPRI, r3
 80013c6:	f3bf 8f6f 	isb	sy
 80013ca:	f3bf 8f4f 	dsb	sy
 80013ce:	607b      	str	r3, [r7, #4]
}
 80013d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80013d2:	f001 fb87 	bl	8002ae4 <xTaskIncrementTick>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <xPortSysTickHandler+0x40>)
 80013de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	2300      	movs	r3, #0
 80013e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	f383 8811 	msr	BASEPRI, r3
}
 80013ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	e000ed04 	.word	0xe000ed04

080013fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001400:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <vPortSetupTimerInterrupt+0x34>)
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <vPortSetupTimerInterrupt+0x38>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <vPortSetupTimerInterrupt+0x3c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a0a      	ldr	r2, [pc, #40]	; (800143c <vPortSetupTimerInterrupt+0x40>)
 8001412:	fba2 2303 	umull	r2, r3, r2, r3
 8001416:	099b      	lsrs	r3, r3, #6
 8001418:	4a09      	ldr	r2, [pc, #36]	; (8001440 <vPortSetupTimerInterrupt+0x44>)
 800141a:	3b01      	subs	r3, #1
 800141c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <vPortSetupTimerInterrupt+0x34>)
 8001420:	2207      	movs	r2, #7
 8001422:	601a      	str	r2, [r3, #0]
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000e010 	.word	0xe000e010
 8001434:	e000e018 	.word	0xe000e018
 8001438:	24000010 	.word	0x24000010
 800143c:	10624dd3 	.word	0x10624dd3
 8001440:	e000e014 	.word	0xe000e014

08001444 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001444:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001454 <vPortEnableVFP+0x10>
 8001448:	6801      	ldr	r1, [r0, #0]
 800144a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800144e:	6001      	str	r1, [r0, #0]
 8001450:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8001452:	bf00      	nop
 8001454:	e000ed88 	.word	0xe000ed88

08001458 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800145e:	f3ef 8305 	mrs	r3, IPSR
 8001462:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2b0f      	cmp	r3, #15
 8001468:	d914      	bls.n	8001494 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800146a:	4a17      	ldr	r2, [pc, #92]	; (80014c8 <vPortValidateInterruptPriority+0x70>)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4413      	add	r3, r2
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001474:	4b15      	ldr	r3, [pc, #84]	; (80014cc <vPortValidateInterruptPriority+0x74>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	7afa      	ldrb	r2, [r7, #11]
 800147a:	429a      	cmp	r2, r3
 800147c:	d20a      	bcs.n	8001494 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800147e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001482:	f383 8811 	msr	BASEPRI, r3
 8001486:	f3bf 8f6f 	isb	sy
 800148a:	f3bf 8f4f 	dsb	sy
 800148e:	607b      	str	r3, [r7, #4]
}
 8001490:	bf00      	nop
 8001492:	e7fe      	b.n	8001492 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <vPortValidateInterruptPriority+0x78>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800149c:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <vPortValidateInterruptPriority+0x7c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d90a      	bls.n	80014ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80014a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014a8:	f383 8811 	msr	BASEPRI, r3
 80014ac:	f3bf 8f6f 	isb	sy
 80014b0:	f3bf 8f4f 	dsb	sy
 80014b4:	603b      	str	r3, [r7, #0]
}
 80014b6:	bf00      	nop
 80014b8:	e7fe      	b.n	80014b8 <vPortValidateInterruptPriority+0x60>
	}
 80014ba:	bf00      	nop
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000e3f0 	.word	0xe000e3f0
 80014cc:	24008824 	.word	0x24008824
 80014d0:	e000ed0c 	.word	0xe000ed0c
 80014d4:	24008828 	.word	0x24008828

080014d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d10a      	bne.n	8001502 <xQueueGenericReset+0x2a>
	__asm volatile
 80014ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014f0:	f383 8811 	msr	BASEPRI, r3
 80014f4:	f3bf 8f6f 	isb	sy
 80014f8:	f3bf 8f4f 	dsb	sy
 80014fc:	60bb      	str	r3, [r7, #8]
}
 80014fe:	bf00      	nop
 8001500:	e7fe      	b.n	8001500 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001502:	f7ff fec7 	bl	8001294 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800150e:	68f9      	ldr	r1, [r7, #12]
 8001510:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001512:	fb01 f303 	mul.w	r3, r1, r3
 8001516:	441a      	add	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2200      	movs	r2, #0
 8001520:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001532:	3b01      	subs	r3, #1
 8001534:	68f9      	ldr	r1, [r7, #12]
 8001536:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001538:	fb01 f303 	mul.w	r3, r1, r3
 800153c:	441a      	add	r2, r3
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	22ff      	movs	r2, #255	; 0xff
 8001546:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	22ff      	movs	r2, #255	; 0xff
 800154e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d114      	bne.n	8001582 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d01a      	beq.n	8001596 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	3310      	adds	r3, #16
 8001564:	4618      	mov	r0, r3
 8001566:	f001 fc25 	bl	8002db4 <xTaskRemoveFromEventList>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d012      	beq.n	8001596 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <xQueueGenericReset+0xcc>)
 8001572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	f3bf 8f4f 	dsb	sy
 800157c:	f3bf 8f6f 	isb	sy
 8001580:	e009      	b.n	8001596 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	3310      	adds	r3, #16
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fca4 	bl	8000ed4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	3324      	adds	r3, #36	; 0x24
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fc9f 	bl	8000ed4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001596:	f7ff fead 	bl	80012f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800159a:	2301      	movs	r3, #1
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	e000ed04 	.word	0xe000ed04

080015a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08e      	sub	sp, #56	; 0x38
 80015ac:	af02      	add	r7, sp, #8
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
 80015b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d10a      	bne.n	80015d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80015bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015c0:	f383 8811 	msr	BASEPRI, r3
 80015c4:	f3bf 8f6f 	isb	sy
 80015c8:	f3bf 8f4f 	dsb	sy
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80015ce:	bf00      	nop
 80015d0:	e7fe      	b.n	80015d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d10a      	bne.n	80015ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80015d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015dc:	f383 8811 	msr	BASEPRI, r3
 80015e0:	f3bf 8f6f 	isb	sy
 80015e4:	f3bf 8f4f 	dsb	sy
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80015ea:	bf00      	nop
 80015ec:	e7fe      	b.n	80015ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d002      	beq.n	80015fa <xQueueGenericCreateStatic+0x52>
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <xQueueGenericCreateStatic+0x56>
 80015fa:	2301      	movs	r3, #1
 80015fc:	e000      	b.n	8001600 <xQueueGenericCreateStatic+0x58>
 80015fe:	2300      	movs	r3, #0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d10a      	bne.n	800161a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001608:	f383 8811 	msr	BASEPRI, r3
 800160c:	f3bf 8f6f 	isb	sy
 8001610:	f3bf 8f4f 	dsb	sy
 8001614:	623b      	str	r3, [r7, #32]
}
 8001616:	bf00      	nop
 8001618:	e7fe      	b.n	8001618 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <xQueueGenericCreateStatic+0x7e>
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <xQueueGenericCreateStatic+0x82>
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <xQueueGenericCreateStatic+0x84>
 800162a:	2300      	movs	r3, #0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d10a      	bne.n	8001646 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001634:	f383 8811 	msr	BASEPRI, r3
 8001638:	f3bf 8f6f 	isb	sy
 800163c:	f3bf 8f4f 	dsb	sy
 8001640:	61fb      	str	r3, [r7, #28]
}
 8001642:	bf00      	nop
 8001644:	e7fe      	b.n	8001644 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001646:	2350      	movs	r3, #80	; 0x50
 8001648:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	2b50      	cmp	r3, #80	; 0x50
 800164e:	d00a      	beq.n	8001666 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001654:	f383 8811 	msr	BASEPRI, r3
 8001658:	f3bf 8f6f 	isb	sy
 800165c:	f3bf 8f4f 	dsb	sy
 8001660:	61bb      	str	r3, [r7, #24]
}
 8001662:	bf00      	nop
 8001664:	e7fe      	b.n	8001664 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001666:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800166c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800166e:	2b00      	cmp	r3, #0
 8001670:	d00d      	beq.n	800168e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001674:	2201      	movs	r2, #1
 8001676:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800167a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800167e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	4613      	mov	r3, r2
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	68b9      	ldr	r1, [r7, #8]
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f000 f83f 	bl	800170c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800168e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001690:	4618      	mov	r0, r3
 8001692:	3730      	adds	r7, #48	; 0x30
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af02      	add	r7, sp, #8
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	4613      	mov	r3, r2
 80016a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10a      	bne.n	80016c2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80016ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016b0:	f383 8811 	msr	BASEPRI, r3
 80016b4:	f3bf 8f6f 	isb	sy
 80016b8:	f3bf 8f4f 	dsb	sy
 80016bc:	613b      	str	r3, [r7, #16]
}
 80016be:	bf00      	nop
 80016c0:	e7fe      	b.n	80016c0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	68ba      	ldr	r2, [r7, #8]
 80016c6:	fb02 f303 	mul.w	r3, r2, r3
 80016ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	3350      	adds	r3, #80	; 0x50
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fa15 	bl	8000b00 <pvPortMalloc>
 80016d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d011      	beq.n	8001702 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	3350      	adds	r3, #80	; 0x50
 80016e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80016f0:	79fa      	ldrb	r2, [r7, #7]
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	4613      	mov	r3, r2
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	68b9      	ldr	r1, [r7, #8]
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f000 f805 	bl	800170c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001702:	69bb      	ldr	r3, [r7, #24]
	}
 8001704:	4618      	mov	r0, r3
 8001706:	3720      	adds	r7, #32
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
 8001718:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d103      	bne.n	8001728 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	e002      	b.n	800172e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800173a:	2101      	movs	r1, #1
 800173c:	69b8      	ldr	r0, [r7, #24]
 800173e:	f7ff fecb 	bl	80014d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	78fa      	ldrb	r2, [r7, #3]
 8001746:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8001752:	b580      	push	{r7, lr}
 8001754:	b08a      	sub	sp, #40	; 0x28
 8001756:	af02      	add	r7, sp, #8
 8001758:	60f8      	str	r0, [r7, #12]
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10a      	bne.n	800177a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8001764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001768:	f383 8811 	msr	BASEPRI, r3
 800176c:	f3bf 8f6f 	isb	sy
 8001770:	f3bf 8f4f 	dsb	sy
 8001774:	61bb      	str	r3, [r7, #24]
}
 8001776:	bf00      	nop
 8001778:	e7fe      	b.n	8001778 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	429a      	cmp	r2, r3
 8001780:	d90a      	bls.n	8001798 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8001782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001786:	f383 8811 	msr	BASEPRI, r3
 800178a:	f3bf 8f6f 	isb	sy
 800178e:	f3bf 8f4f 	dsb	sy
 8001792:	617b      	str	r3, [r7, #20]
}
 8001794:	bf00      	nop
 8001796:	e7fe      	b.n	8001796 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8001798:	2302      	movs	r3, #2
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	2100      	movs	r1, #0
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f7ff ff00 	bl	80015a8 <xQueueGenericCreateStatic>
 80017a8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d002      	beq.n	80017b6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80017b6:	69fb      	ldr	r3, [r7, #28]
	}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3720      	adds	r7, #32
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d10a      	bne.n	80017e6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80017d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017d4:	f383 8811 	msr	BASEPRI, r3
 80017d8:	f3bf 8f6f 	isb	sy
 80017dc:	f3bf 8f4f 	dsb	sy
 80017e0:	613b      	str	r3, [r7, #16]
}
 80017e2:	bf00      	nop
 80017e4:	e7fe      	b.n	80017e4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d90a      	bls.n	8001804 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80017ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017f2:	f383 8811 	msr	BASEPRI, r3
 80017f6:	f3bf 8f6f 	isb	sy
 80017fa:	f3bf 8f4f 	dsb	sy
 80017fe:	60fb      	str	r3, [r7, #12]
}
 8001800:	bf00      	nop
 8001802:	e7fe      	b.n	8001802 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8001804:	2202      	movs	r2, #2
 8001806:	2100      	movs	r1, #0
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff ff45 	bl	8001698 <xQueueGenericCreate>
 800180e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d002      	beq.n	800181c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800181c:	697b      	ldr	r3, [r7, #20]
	}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08e      	sub	sp, #56	; 0x38
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
 8001834:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001836:	2300      	movs	r3, #0
 8001838:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800183e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001840:	2b00      	cmp	r3, #0
 8001842:	d10a      	bne.n	800185a <xQueueGenericSend+0x32>
	__asm volatile
 8001844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001848:	f383 8811 	msr	BASEPRI, r3
 800184c:	f3bf 8f6f 	isb	sy
 8001850:	f3bf 8f4f 	dsb	sy
 8001854:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001856:	bf00      	nop
 8001858:	e7fe      	b.n	8001858 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d103      	bne.n	8001868 <xQueueGenericSend+0x40>
 8001860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <xQueueGenericSend+0x44>
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <xQueueGenericSend+0x46>
 800186c:	2300      	movs	r3, #0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10a      	bne.n	8001888 <xQueueGenericSend+0x60>
	__asm volatile
 8001872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001876:	f383 8811 	msr	BASEPRI, r3
 800187a:	f3bf 8f6f 	isb	sy
 800187e:	f3bf 8f4f 	dsb	sy
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001884:	bf00      	nop
 8001886:	e7fe      	b.n	8001886 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d103      	bne.n	8001896 <xQueueGenericSend+0x6e>
 800188e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001892:	2b01      	cmp	r3, #1
 8001894:	d101      	bne.n	800189a <xQueueGenericSend+0x72>
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <xQueueGenericSend+0x74>
 800189a:	2300      	movs	r3, #0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d10a      	bne.n	80018b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80018a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018a4:	f383 8811 	msr	BASEPRI, r3
 80018a8:	f3bf 8f6f 	isb	sy
 80018ac:	f3bf 8f4f 	dsb	sy
 80018b0:	623b      	str	r3, [r7, #32]
}
 80018b2:	bf00      	nop
 80018b4:	e7fe      	b.n	80018b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80018b6:	f001 fc3b 	bl	8003130 <xTaskGetSchedulerState>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d102      	bne.n	80018c6 <xQueueGenericSend+0x9e>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <xQueueGenericSend+0xa2>
 80018c6:	2301      	movs	r3, #1
 80018c8:	e000      	b.n	80018cc <xQueueGenericSend+0xa4>
 80018ca:	2300      	movs	r3, #0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d10a      	bne.n	80018e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80018d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018d4:	f383 8811 	msr	BASEPRI, r3
 80018d8:	f3bf 8f6f 	isb	sy
 80018dc:	f3bf 8f4f 	dsb	sy
 80018e0:	61fb      	str	r3, [r7, #28]
}
 80018e2:	bf00      	nop
 80018e4:	e7fe      	b.n	80018e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80018e6:	f7ff fcd5 	bl	8001294 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80018ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d302      	bcc.n	80018fc <xQueueGenericSend+0xd4>
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d129      	bne.n	8001950 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	68b9      	ldr	r1, [r7, #8]
 8001900:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001902:	f000 fc5e 	bl	80021c2 <prvCopyDataToQueue>
 8001906:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	2b00      	cmp	r3, #0
 800190e:	d010      	beq.n	8001932 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001912:	3324      	adds	r3, #36	; 0x24
 8001914:	4618      	mov	r0, r3
 8001916:	f001 fa4d 	bl	8002db4 <xTaskRemoveFromEventList>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d013      	beq.n	8001948 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001920:	4b3f      	ldr	r3, [pc, #252]	; (8001a20 <xQueueGenericSend+0x1f8>)
 8001922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	f3bf 8f4f 	dsb	sy
 800192c:	f3bf 8f6f 	isb	sy
 8001930:	e00a      	b.n	8001948 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001934:	2b00      	cmp	r3, #0
 8001936:	d007      	beq.n	8001948 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001938:	4b39      	ldr	r3, [pc, #228]	; (8001a20 <xQueueGenericSend+0x1f8>)
 800193a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	f3bf 8f4f 	dsb	sy
 8001944:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001948:	f7ff fcd4 	bl	80012f4 <vPortExitCritical>
				return pdPASS;
 800194c:	2301      	movs	r3, #1
 800194e:	e063      	b.n	8001a18 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d103      	bne.n	800195e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001956:	f7ff fccd 	bl	80012f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800195a:	2300      	movs	r3, #0
 800195c:	e05c      	b.n	8001a18 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800195e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001960:	2b00      	cmp	r3, #0
 8001962:	d106      	bne.n	8001972 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	4618      	mov	r0, r3
 800196a:	f001 fa87 	bl	8002e7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800196e:	2301      	movs	r3, #1
 8001970:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001972:	f7ff fcbf 	bl	80012f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001976:	f000 fff9 	bl	800296c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800197a:	f7ff fc8b 	bl	8001294 <vPortEnterCritical>
 800197e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001980:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001984:	b25b      	sxtb	r3, r3
 8001986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800198a:	d103      	bne.n	8001994 <xQueueGenericSend+0x16c>
 800198c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001996:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800199a:	b25b      	sxtb	r3, r3
 800199c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a0:	d103      	bne.n	80019aa <xQueueGenericSend+0x182>
 80019a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80019aa:	f7ff fca3 	bl	80012f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80019ae:	1d3a      	adds	r2, r7, #4
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	4611      	mov	r1, r2
 80019b6:	4618      	mov	r0, r3
 80019b8:	f001 fa76 	bl	8002ea8 <xTaskCheckForTimeOut>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d124      	bne.n	8001a0c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80019c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80019c4:	f000 fcf5 	bl	80023b2 <prvIsQueueFull>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d018      	beq.n	8001a00 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80019ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d0:	3310      	adds	r3, #16
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	4611      	mov	r1, r2
 80019d6:	4618      	mov	r0, r3
 80019d8:	f001 f99c 	bl	8002d14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80019dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80019de:	f000 fc80 	bl	80022e2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80019e2:	f000 ffd1 	bl	8002988 <xTaskResumeAll>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f47f af7c 	bne.w	80018e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <xQueueGenericSend+0x1f8>)
 80019f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	f3bf 8f4f 	dsb	sy
 80019fa:	f3bf 8f6f 	isb	sy
 80019fe:	e772      	b.n	80018e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001a00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a02:	f000 fc6e 	bl	80022e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001a06:	f000 ffbf 	bl	8002988 <xTaskResumeAll>
 8001a0a:	e76c      	b.n	80018e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001a0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a0e:	f000 fc68 	bl	80022e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001a12:	f000 ffb9 	bl	8002988 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001a16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3738      	adds	r7, #56	; 0x38
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	e000ed04 	.word	0xe000ed04

08001a24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b090      	sub	sp, #64	; 0x40
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
 8001a30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8001a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d10a      	bne.n	8001a52 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8001a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a40:	f383 8811 	msr	BASEPRI, r3
 8001a44:	f3bf 8f6f 	isb	sy
 8001a48:	f3bf 8f4f 	dsb	sy
 8001a4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001a4e:	bf00      	nop
 8001a50:	e7fe      	b.n	8001a50 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d103      	bne.n	8001a60 <xQueueGenericSendFromISR+0x3c>
 8001a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <xQueueGenericSendFromISR+0x40>
 8001a60:	2301      	movs	r3, #1
 8001a62:	e000      	b.n	8001a66 <xQueueGenericSendFromISR+0x42>
 8001a64:	2300      	movs	r3, #0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10a      	bne.n	8001a80 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8001a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a6e:	f383 8811 	msr	BASEPRI, r3
 8001a72:	f3bf 8f6f 	isb	sy
 8001a76:	f3bf 8f4f 	dsb	sy
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001a7c:	bf00      	nop
 8001a7e:	e7fe      	b.n	8001a7e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d103      	bne.n	8001a8e <xQueueGenericSendFromISR+0x6a>
 8001a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d101      	bne.n	8001a92 <xQueueGenericSendFromISR+0x6e>
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <xQueueGenericSendFromISR+0x70>
 8001a92:	2300      	movs	r3, #0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d10a      	bne.n	8001aae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8001a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a9c:	f383 8811 	msr	BASEPRI, r3
 8001aa0:	f3bf 8f6f 	isb	sy
 8001aa4:	f3bf 8f4f 	dsb	sy
 8001aa8:	623b      	str	r3, [r7, #32]
}
 8001aaa:	bf00      	nop
 8001aac:	e7fe      	b.n	8001aac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001aae:	f7ff fcd3 	bl	8001458 <vPortValidateInterruptPriority>
	__asm volatile
 8001ab2:	f3ef 8211 	mrs	r2, BASEPRI
 8001ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aba:	f383 8811 	msr	BASEPRI, r3
 8001abe:	f3bf 8f6f 	isb	sy
 8001ac2:	f3bf 8f4f 	dsb	sy
 8001ac6:	61fa      	str	r2, [r7, #28]
 8001ac8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8001aca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001acc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d302      	bcc.n	8001ae0 <xQueueGenericSendFromISR+0xbc>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d12f      	bne.n	8001b40 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ae2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	68b9      	ldr	r1, [r7, #8]
 8001af4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001af6:	f000 fb64 	bl	80021c2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001afa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b02:	d112      	bne.n	8001b2a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d016      	beq.n	8001b3a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b0e:	3324      	adds	r3, #36	; 0x24
 8001b10:	4618      	mov	r0, r3
 8001b12:	f001 f94f 	bl	8002db4 <xTaskRemoveFromEventList>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00e      	beq.n	8001b3a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00b      	beq.n	8001b3a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	e007      	b.n	8001b3a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001b2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b2e:	3301      	adds	r3, #1
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	b25a      	sxtb	r2, r3
 8001b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8001b3e:	e001      	b.n	8001b44 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b46:	617b      	str	r3, [r7, #20]
	__asm volatile
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	f383 8811 	msr	BASEPRI, r3
}
 8001b4e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3740      	adds	r7, #64	; 0x40
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b08e      	sub	sp, #56	; 0x38
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8001b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10a      	bne.n	8001b84 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8001b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b72:	f383 8811 	msr	BASEPRI, r3
 8001b76:	f3bf 8f6f 	isb	sy
 8001b7a:	f3bf 8f4f 	dsb	sy
 8001b7e:	623b      	str	r3, [r7, #32]
}
 8001b80:	bf00      	nop
 8001b82:	e7fe      	b.n	8001b82 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8001b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d00a      	beq.n	8001ba2 <xQueueGiveFromISR+0x48>
	__asm volatile
 8001b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b90:	f383 8811 	msr	BASEPRI, r3
 8001b94:	f3bf 8f6f 	isb	sy
 8001b98:	f3bf 8f4f 	dsb	sy
 8001b9c:	61fb      	str	r3, [r7, #28]
}
 8001b9e:	bf00      	nop
 8001ba0:	e7fe      	b.n	8001ba0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8001ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d103      	bne.n	8001bb2 <xQueueGiveFromISR+0x58>
 8001baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <xQueueGiveFromISR+0x5c>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <xQueueGiveFromISR+0x5e>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10a      	bne.n	8001bd2 <xQueueGiveFromISR+0x78>
	__asm volatile
 8001bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bc0:	f383 8811 	msr	BASEPRI, r3
 8001bc4:	f3bf 8f6f 	isb	sy
 8001bc8:	f3bf 8f4f 	dsb	sy
 8001bcc:	61bb      	str	r3, [r7, #24]
}
 8001bce:	bf00      	nop
 8001bd0:	e7fe      	b.n	8001bd0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001bd2:	f7ff fc41 	bl	8001458 <vPortValidateInterruptPriority>
	__asm volatile
 8001bd6:	f3ef 8211 	mrs	r2, BASEPRI
 8001bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bde:	f383 8811 	msr	BASEPRI, r3
 8001be2:	f3bf 8f6f 	isb	sy
 8001be6:	f3bf 8f4f 	dsb	sy
 8001bea:	617a      	str	r2, [r7, #20]
 8001bec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8001bee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8001bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d22b      	bcs.n	8001c5a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c12:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001c14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c1c:	d112      	bne.n	8001c44 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d016      	beq.n	8001c54 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c28:	3324      	adds	r3, #36	; 0x24
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f001 f8c2 	bl	8002db4 <xTaskRemoveFromEventList>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00e      	beq.n	8001c54 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00b      	beq.n	8001c54 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	e007      	b.n	8001c54 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001c44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c48:	3301      	adds	r3, #1
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	b25a      	sxtb	r2, r3
 8001c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001c54:	2301      	movs	r3, #1
 8001c56:	637b      	str	r3, [r7, #52]	; 0x34
 8001c58:	e001      	b.n	8001c5e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	637b      	str	r3, [r7, #52]	; 0x34
 8001c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c60:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f383 8811 	msr	BASEPRI, r3
}
 8001c68:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3738      	adds	r7, #56	; 0x38
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08c      	sub	sp, #48	; 0x30
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10a      	bne.n	8001ca4 <xQueueReceive+0x30>
	__asm volatile
 8001c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c92:	f383 8811 	msr	BASEPRI, r3
 8001c96:	f3bf 8f6f 	isb	sy
 8001c9a:	f3bf 8f4f 	dsb	sy
 8001c9e:	623b      	str	r3, [r7, #32]
}
 8001ca0:	bf00      	nop
 8001ca2:	e7fe      	b.n	8001ca2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d103      	bne.n	8001cb2 <xQueueReceive+0x3e>
 8001caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <xQueueReceive+0x42>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <xQueueReceive+0x44>
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10a      	bne.n	8001cd2 <xQueueReceive+0x5e>
	__asm volatile
 8001cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cc0:	f383 8811 	msr	BASEPRI, r3
 8001cc4:	f3bf 8f6f 	isb	sy
 8001cc8:	f3bf 8f4f 	dsb	sy
 8001ccc:	61fb      	str	r3, [r7, #28]
}
 8001cce:	bf00      	nop
 8001cd0:	e7fe      	b.n	8001cd0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001cd2:	f001 fa2d 	bl	8003130 <xTaskGetSchedulerState>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d102      	bne.n	8001ce2 <xQueueReceive+0x6e>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <xQueueReceive+0x72>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <xQueueReceive+0x74>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10a      	bne.n	8001d02 <xQueueReceive+0x8e>
	__asm volatile
 8001cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cf0:	f383 8811 	msr	BASEPRI, r3
 8001cf4:	f3bf 8f6f 	isb	sy
 8001cf8:	f3bf 8f4f 	dsb	sy
 8001cfc:	61bb      	str	r3, [r7, #24]
}
 8001cfe:	bf00      	nop
 8001d00:	e7fe      	b.n	8001d00 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001d02:	f7ff fac7 	bl	8001294 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d01f      	beq.n	8001d52 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001d12:	68b9      	ldr	r1, [r7, #8]
 8001d14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d16:	f000 fabe 	bl	8002296 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	1e5a      	subs	r2, r3, #1
 8001d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d20:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00f      	beq.n	8001d4a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d2c:	3310      	adds	r3, #16
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f001 f840 	bl	8002db4 <xTaskRemoveFromEventList>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d007      	beq.n	8001d4a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001d3a:	4b3d      	ldr	r3, [pc, #244]	; (8001e30 <xQueueReceive+0x1bc>)
 8001d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	f3bf 8f4f 	dsb	sy
 8001d46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001d4a:	f7ff fad3 	bl	80012f4 <vPortExitCritical>
				return pdPASS;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e069      	b.n	8001e26 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d103      	bne.n	8001d60 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001d58:	f7ff facc 	bl	80012f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	e062      	b.n	8001e26 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d106      	bne.n	8001d74 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001d66:	f107 0310 	add.w	r3, r7, #16
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f001 f886 	bl	8002e7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001d70:	2301      	movs	r3, #1
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001d74:	f7ff fabe 	bl	80012f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001d78:	f000 fdf8 	bl	800296c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001d7c:	f7ff fa8a 	bl	8001294 <vPortEnterCritical>
 8001d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d86:	b25b      	sxtb	r3, r3
 8001d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d8c:	d103      	bne.n	8001d96 <xQueueReceive+0x122>
 8001d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d9c:	b25b      	sxtb	r3, r3
 8001d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da2:	d103      	bne.n	8001dac <xQueueReceive+0x138>
 8001da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001dac:	f7ff faa2 	bl	80012f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001db0:	1d3a      	adds	r2, r7, #4
 8001db2:	f107 0310 	add.w	r3, r7, #16
 8001db6:	4611      	mov	r1, r2
 8001db8:	4618      	mov	r0, r3
 8001dba:	f001 f875 	bl	8002ea8 <xTaskCheckForTimeOut>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d123      	bne.n	8001e0c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001dc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001dc6:	f000 fade 	bl	8002386 <prvIsQueueEmpty>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d017      	beq.n	8001e00 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd2:	3324      	adds	r3, #36	; 0x24
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f000 ff9b 	bl	8002d14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001dde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001de0:	f000 fa7f 	bl	80022e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001de4:	f000 fdd0 	bl	8002988 <xTaskResumeAll>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d189      	bne.n	8001d02 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8001dee:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <xQueueReceive+0x1bc>)
 8001df0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	f3bf 8f4f 	dsb	sy
 8001dfa:	f3bf 8f6f 	isb	sy
 8001dfe:	e780      	b.n	8001d02 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e02:	f000 fa6e 	bl	80022e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001e06:	f000 fdbf 	bl	8002988 <xTaskResumeAll>
 8001e0a:	e77a      	b.n	8001d02 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e0e:	f000 fa68 	bl	80022e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001e12:	f000 fdb9 	bl	8002988 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001e16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e18:	f000 fab5 	bl	8002386 <prvIsQueueEmpty>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f43f af6f 	beq.w	8001d02 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001e24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3730      	adds	r7, #48	; 0x30
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	e000ed04 	.word	0xe000ed04

08001e34 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08e      	sub	sp, #56	; 0x38
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10a      	bne.n	8001e66 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8001e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e54:	f383 8811 	msr	BASEPRI, r3
 8001e58:	f3bf 8f6f 	isb	sy
 8001e5c:	f3bf 8f4f 	dsb	sy
 8001e60:	623b      	str	r3, [r7, #32]
}
 8001e62:	bf00      	nop
 8001e64:	e7fe      	b.n	8001e64 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8001e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00a      	beq.n	8001e84 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8001e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e72:	f383 8811 	msr	BASEPRI, r3
 8001e76:	f3bf 8f6f 	isb	sy
 8001e7a:	f3bf 8f4f 	dsb	sy
 8001e7e:	61fb      	str	r3, [r7, #28]
}
 8001e80:	bf00      	nop
 8001e82:	e7fe      	b.n	8001e82 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e84:	f001 f954 	bl	8003130 <xTaskGetSchedulerState>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d102      	bne.n	8001e94 <xQueueSemaphoreTake+0x60>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <xQueueSemaphoreTake+0x64>
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <xQueueSemaphoreTake+0x66>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10a      	bne.n	8001eb4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8001e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ea2:	f383 8811 	msr	BASEPRI, r3
 8001ea6:	f3bf 8f6f 	isb	sy
 8001eaa:	f3bf 8f4f 	dsb	sy
 8001eae:	61bb      	str	r3, [r7, #24]
}
 8001eb0:	bf00      	nop
 8001eb2:	e7fe      	b.n	8001eb2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001eb4:	f7ff f9ee 	bl	8001294 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d024      	beq.n	8001f0e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8001ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec6:	1e5a      	subs	r2, r3, #1
 8001ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d104      	bne.n	8001ede <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8001ed4:	f001 faa2 	bl	800341c <pvTaskIncrementMutexHeldCount>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001edc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00f      	beq.n	8001f06 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee8:	3310      	adds	r3, #16
 8001eea:	4618      	mov	r0, r3
 8001eec:	f000 ff62 	bl	8002db4 <xTaskRemoveFromEventList>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d007      	beq.n	8001f06 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001ef6:	4b54      	ldr	r3, [pc, #336]	; (8002048 <xQueueSemaphoreTake+0x214>)
 8001ef8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	f3bf 8f4f 	dsb	sy
 8001f02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001f06:	f7ff f9f5 	bl	80012f4 <vPortExitCritical>
				return pdPASS;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e097      	b.n	800203e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d111      	bne.n	8001f38 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8001f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00a      	beq.n	8001f30 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8001f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f1e:	f383 8811 	msr	BASEPRI, r3
 8001f22:	f3bf 8f6f 	isb	sy
 8001f26:	f3bf 8f4f 	dsb	sy
 8001f2a:	617b      	str	r3, [r7, #20]
}
 8001f2c:	bf00      	nop
 8001f2e:	e7fe      	b.n	8001f2e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8001f30:	f7ff f9e0 	bl	80012f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001f34:	2300      	movs	r3, #0
 8001f36:	e082      	b.n	800203e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d106      	bne.n	8001f4c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001f3e:	f107 030c 	add.w	r3, r7, #12
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 ff9a 	bl	8002e7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001f4c:	f7ff f9d2 	bl	80012f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001f50:	f000 fd0c 	bl	800296c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001f54:	f7ff f99e 	bl	8001294 <vPortEnterCritical>
 8001f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f5e:	b25b      	sxtb	r3, r3
 8001f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f64:	d103      	bne.n	8001f6e <xQueueSemaphoreTake+0x13a>
 8001f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f74:	b25b      	sxtb	r3, r3
 8001f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7a:	d103      	bne.n	8001f84 <xQueueSemaphoreTake+0x150>
 8001f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f84:	f7ff f9b6 	bl	80012f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f88:	463a      	mov	r2, r7
 8001f8a:	f107 030c 	add.w	r3, r7, #12
 8001f8e:	4611      	mov	r1, r2
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 ff89 	bl	8002ea8 <xTaskCheckForTimeOut>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d132      	bne.n	8002002 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001f9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f9e:	f000 f9f2 	bl	8002386 <prvIsQueueEmpty>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d026      	beq.n	8001ff6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d109      	bne.n	8001fc4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8001fb0:	f7ff f970 	bl	8001294 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f001 f8d7 	bl	800316c <xTaskPriorityInherit>
 8001fbe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8001fc0:	f7ff f998 	bl	80012f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc6:	3324      	adds	r3, #36	; 0x24
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	4611      	mov	r1, r2
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f000 fea1 	bl	8002d14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001fd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001fd4:	f000 f985 	bl	80022e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001fd8:	f000 fcd6 	bl	8002988 <xTaskResumeAll>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f47f af68 	bne.w	8001eb4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8001fe4:	4b18      	ldr	r3, [pc, #96]	; (8002048 <xQueueSemaphoreTake+0x214>)
 8001fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	f3bf 8f4f 	dsb	sy
 8001ff0:	f3bf 8f6f 	isb	sy
 8001ff4:	e75e      	b.n	8001eb4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8001ff6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ff8:	f000 f973 	bl	80022e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001ffc:	f000 fcc4 	bl	8002988 <xTaskResumeAll>
 8002000:	e758      	b.n	8001eb4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002002:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002004:	f000 f96d 	bl	80022e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002008:	f000 fcbe 	bl	8002988 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800200c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800200e:	f000 f9ba 	bl	8002386 <prvIsQueueEmpty>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	f43f af4d 	beq.w	8001eb4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800201a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00d      	beq.n	800203c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8002020:	f7ff f938 	bl	8001294 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002024:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002026:	f000 f8b4 	bl	8002192 <prvGetDisinheritPriorityAfterTimeout>
 800202a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800202c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002032:	4618      	mov	r0, r3
 8002034:	f001 f970 	bl	8003318 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002038:	f7ff f95c 	bl	80012f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800203c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800203e:	4618      	mov	r0, r3
 8002040:	3738      	adds	r7, #56	; 0x38
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	e000ed04 	.word	0xe000ed04

0800204c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08e      	sub	sp, #56	; 0x38
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800205c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10a      	bne.n	8002078 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8002062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002066:	f383 8811 	msr	BASEPRI, r3
 800206a:	f3bf 8f6f 	isb	sy
 800206e:	f3bf 8f4f 	dsb	sy
 8002072:	623b      	str	r3, [r7, #32]
}
 8002074:	bf00      	nop
 8002076:	e7fe      	b.n	8002076 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d103      	bne.n	8002086 <xQueueReceiveFromISR+0x3a>
 800207e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <xQueueReceiveFromISR+0x3e>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <xQueueReceiveFromISR+0x40>
 800208a:	2300      	movs	r3, #0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10a      	bne.n	80020a6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8002090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002094:	f383 8811 	msr	BASEPRI, r3
 8002098:	f3bf 8f6f 	isb	sy
 800209c:	f3bf 8f4f 	dsb	sy
 80020a0:	61fb      	str	r3, [r7, #28]
}
 80020a2:	bf00      	nop
 80020a4:	e7fe      	b.n	80020a4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80020a6:	f7ff f9d7 	bl	8001458 <vPortValidateInterruptPriority>
	__asm volatile
 80020aa:	f3ef 8211 	mrs	r2, BASEPRI
 80020ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b2:	f383 8811 	msr	BASEPRI, r3
 80020b6:	f3bf 8f6f 	isb	sy
 80020ba:	f3bf 8f4f 	dsb	sy
 80020be:	61ba      	str	r2, [r7, #24]
 80020c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80020c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80020c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80020cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d02f      	beq.n	8002132 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80020d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80020d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020e0:	f000 f8d9 	bl	8002296 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80020e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e6:	1e5a      	subs	r2, r3, #1
 80020e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80020ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80020f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f4:	d112      	bne.n	800211c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d016      	beq.n	800212c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002100:	3310      	adds	r3, #16
 8002102:	4618      	mov	r0, r3
 8002104:	f000 fe56 	bl	8002db4 <xTaskRemoveFromEventList>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00e      	beq.n	800212c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00b      	beq.n	800212c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	e007      	b.n	800212c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800211c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002120:	3301      	adds	r3, #1
 8002122:	b2db      	uxtb	r3, r3
 8002124:	b25a      	sxtb	r2, r3
 8002126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800212c:	2301      	movs	r3, #1
 800212e:	637b      	str	r3, [r7, #52]	; 0x34
 8002130:	e001      	b.n	8002136 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8002132:	2300      	movs	r3, #0
 8002134:	637b      	str	r3, [r7, #52]	; 0x34
 8002136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002138:	613b      	str	r3, [r7, #16]
	__asm volatile
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	f383 8811 	msr	BASEPRI, r3
}
 8002140:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002144:	4618      	mov	r0, r3
 8002146:	3738      	adds	r7, #56	; 0x38
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10a      	bne.n	8002174 <vQueueDelete+0x28>
	__asm volatile
 800215e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002162:	f383 8811 	msr	BASEPRI, r3
 8002166:	f3bf 8f6f 	isb	sy
 800216a:	f3bf 8f4f 	dsb	sy
 800216e:	60bb      	str	r3, [r7, #8]
}
 8002170:	bf00      	nop
 8002172:	e7fe      	b.n	8002172 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 f95f 	bl	8002438 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002180:	2b00      	cmp	r3, #0
 8002182:	d102      	bne.n	800218a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f7fe fd87 	bl	8000c98 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800218a:	bf00      	nop
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002192:	b480      	push	{r7}
 8002194:	b085      	sub	sp, #20
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d006      	beq.n	80021b0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	e001      	b.n	80021b4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80021b4:	68fb      	ldr	r3, [r7, #12]
	}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b086      	sub	sp, #24
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10d      	bne.n	80021fc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d14d      	bne.n	8002284 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f001 f825 	bl	800323c <xTaskPriorityDisinherit>
 80021f2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	e043      	b.n	8002284 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d119      	bne.n	8002236 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6858      	ldr	r0, [r3, #4]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	461a      	mov	r2, r3
 800220c:	68b9      	ldr	r1, [r7, #8]
 800220e:	f020 fab1 	bl	8022774 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	441a      	add	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	429a      	cmp	r2, r3
 800222a:	d32b      	bcc.n	8002284 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	605a      	str	r2, [r3, #4]
 8002234:	e026      	b.n	8002284 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	68d8      	ldr	r0, [r3, #12]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	461a      	mov	r2, r3
 8002240:	68b9      	ldr	r1, [r7, #8]
 8002242:	f020 fa97 	bl	8022774 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	425b      	negs	r3, r3
 8002250:	441a      	add	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d207      	bcs.n	8002272 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	689a      	ldr	r2, [r3, #8]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	425b      	negs	r3, r3
 800226c:	441a      	add	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b02      	cmp	r3, #2
 8002276:	d105      	bne.n	8002284 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	3b01      	subs	r3, #1
 8002282:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800228c:	697b      	ldr	r3, [r7, #20]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d018      	beq.n	80022da <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68da      	ldr	r2, [r3, #12]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	441a      	add	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d303      	bcc.n	80022ca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68d9      	ldr	r1, [r3, #12]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	461a      	mov	r2, r3
 80022d4:	6838      	ldr	r0, [r7, #0]
 80022d6:	f020 fa4d 	bl	8022774 <memcpy>
	}
}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b084      	sub	sp, #16
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80022ea:	f7fe ffd3 	bl	8001294 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022f4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80022f6:	e011      	b.n	800231c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d012      	beq.n	8002326 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3324      	adds	r3, #36	; 0x24
 8002304:	4618      	mov	r0, r3
 8002306:	f000 fd55 	bl	8002db4 <xTaskRemoveFromEventList>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002310:	f000 fe2c 	bl	8002f6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002314:	7bfb      	ldrb	r3, [r7, #15]
 8002316:	3b01      	subs	r3, #1
 8002318:	b2db      	uxtb	r3, r3
 800231a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800231c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002320:	2b00      	cmp	r3, #0
 8002322:	dce9      	bgt.n	80022f8 <prvUnlockQueue+0x16>
 8002324:	e000      	b.n	8002328 <prvUnlockQueue+0x46>
					break;
 8002326:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	22ff      	movs	r2, #255	; 0xff
 800232c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002330:	f7fe ffe0 	bl	80012f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002334:	f7fe ffae 	bl	8001294 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800233e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002340:	e011      	b.n	8002366 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d012      	beq.n	8002370 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3310      	adds	r3, #16
 800234e:	4618      	mov	r0, r3
 8002350:	f000 fd30 	bl	8002db4 <xTaskRemoveFromEventList>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800235a:	f000 fe07 	bl	8002f6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800235e:	7bbb      	ldrb	r3, [r7, #14]
 8002360:	3b01      	subs	r3, #1
 8002362:	b2db      	uxtb	r3, r3
 8002364:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002366:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800236a:	2b00      	cmp	r3, #0
 800236c:	dce9      	bgt.n	8002342 <prvUnlockQueue+0x60>
 800236e:	e000      	b.n	8002372 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002370:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	22ff      	movs	r2, #255	; 0xff
 8002376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800237a:	f7fe ffbb 	bl	80012f4 <vPortExitCritical>
}
 800237e:	bf00      	nop
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800238e:	f7fe ff81 	bl	8001294 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002396:	2b00      	cmp	r3, #0
 8002398:	d102      	bne.n	80023a0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800239a:	2301      	movs	r3, #1
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	e001      	b.n	80023a4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80023a4:	f7fe ffa6 	bl	80012f4 <vPortExitCritical>

	return xReturn;
 80023a8:	68fb      	ldr	r3, [r7, #12]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b084      	sub	sp, #16
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80023ba:	f7fe ff6b 	bl	8001294 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d102      	bne.n	80023d0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80023ca:	2301      	movs	r3, #1
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	e001      	b.n	80023d4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80023d4:	f7fe ff8e 	bl	80012f4 <vPortExitCritical>

	return xReturn;
 80023d8:	68fb      	ldr	r3, [r7, #12]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	e014      	b.n	800241e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80023f4:	4a0f      	ldr	r2, [pc, #60]	; (8002434 <vQueueAddToRegistry+0x50>)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10b      	bne.n	8002418 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002400:	490c      	ldr	r1, [pc, #48]	; (8002434 <vQueueAddToRegistry+0x50>)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800240a:	4a0a      	ldr	r2, [pc, #40]	; (8002434 <vQueueAddToRegistry+0x50>)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4413      	add	r3, r2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002416:	e006      	b.n	8002426 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	3301      	adds	r3, #1
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2b07      	cmp	r3, #7
 8002422:	d9e7      	bls.n	80023f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002424:	bf00      	nop
 8002426:	bf00      	nop
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	2400882c 	.word	0x2400882c

08002438 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002440:	2300      	movs	r3, #0
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	e016      	b.n	8002474 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8002446:	4a10      	ldr	r2, [pc, #64]	; (8002488 <vQueueUnregisterQueue+0x50>)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4413      	add	r3, r2
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	429a      	cmp	r2, r3
 8002454:	d10b      	bne.n	800246e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8002456:	4a0c      	ldr	r2, [pc, #48]	; (8002488 <vQueueUnregisterQueue+0x50>)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2100      	movs	r1, #0
 800245c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8002460:	4a09      	ldr	r2, [pc, #36]	; (8002488 <vQueueUnregisterQueue+0x50>)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4413      	add	r3, r2
 8002468:	2200      	movs	r2, #0
 800246a:	605a      	str	r2, [r3, #4]
				break;
 800246c:	e006      	b.n	800247c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	3301      	adds	r3, #1
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2b07      	cmp	r3, #7
 8002478:	d9e5      	bls.n	8002446 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800247a:	bf00      	nop
 800247c:	bf00      	nop
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	2400882c 	.word	0x2400882c

0800248c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800249c:	f7fe fefa 	bl	8001294 <vPortEnterCritical>
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024a6:	b25b      	sxtb	r3, r3
 80024a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ac:	d103      	bne.n	80024b6 <vQueueWaitForMessageRestricted+0x2a>
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024bc:	b25b      	sxtb	r3, r3
 80024be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c2:	d103      	bne.n	80024cc <vQueueWaitForMessageRestricted+0x40>
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024cc:	f7fe ff12 	bl	80012f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d106      	bne.n	80024e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	3324      	adds	r3, #36	; 0x24
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	68b9      	ldr	r1, [r7, #8]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 fc3b 	bl	8002d5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80024e6:	6978      	ldr	r0, [r7, #20]
 80024e8:	f7ff fefb 	bl	80022e2 <prvUnlockQueue>
	}
 80024ec:	bf00      	nop
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08e      	sub	sp, #56	; 0x38
 80024f8:	af04      	add	r7, sp, #16
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10a      	bne.n	800251e <xTaskCreateStatic+0x2a>
	__asm volatile
 8002508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800250c:	f383 8811 	msr	BASEPRI, r3
 8002510:	f3bf 8f6f 	isb	sy
 8002514:	f3bf 8f4f 	dsb	sy
 8002518:	623b      	str	r3, [r7, #32]
}
 800251a:	bf00      	nop
 800251c:	e7fe      	b.n	800251c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800251e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10a      	bne.n	800253a <xTaskCreateStatic+0x46>
	__asm volatile
 8002524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002528:	f383 8811 	msr	BASEPRI, r3
 800252c:	f3bf 8f6f 	isb	sy
 8002530:	f3bf 8f4f 	dsb	sy
 8002534:	61fb      	str	r3, [r7, #28]
}
 8002536:	bf00      	nop
 8002538:	e7fe      	b.n	8002538 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800253a:	235c      	movs	r3, #92	; 0x5c
 800253c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	2b5c      	cmp	r3, #92	; 0x5c
 8002542:	d00a      	beq.n	800255a <xTaskCreateStatic+0x66>
	__asm volatile
 8002544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002548:	f383 8811 	msr	BASEPRI, r3
 800254c:	f3bf 8f6f 	isb	sy
 8002550:	f3bf 8f4f 	dsb	sy
 8002554:	61bb      	str	r3, [r7, #24]
}
 8002556:	bf00      	nop
 8002558:	e7fe      	b.n	8002558 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800255a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800255c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800255e:	2b00      	cmp	r3, #0
 8002560:	d01e      	beq.n	80025a0 <xTaskCreateStatic+0xac>
 8002562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002564:	2b00      	cmp	r3, #0
 8002566:	d01b      	beq.n	80025a0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002570:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	2202      	movs	r2, #2
 8002576:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800257a:	2300      	movs	r3, #0
 800257c:	9303      	str	r3, [sp, #12]
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	9302      	str	r3, [sp, #8]
 8002582:	f107 0314 	add.w	r3, r7, #20
 8002586:	9301      	str	r3, [sp, #4]
 8002588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68b9      	ldr	r1, [r7, #8]
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 f850 	bl	8002638 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002598:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800259a:	f000 f8dd 	bl	8002758 <prvAddNewTaskToReadyList>
 800259e:	e001      	b.n	80025a4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80025a4:	697b      	ldr	r3, [r7, #20]
	}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3728      	adds	r7, #40	; 0x28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b08c      	sub	sp, #48	; 0x30
 80025b2:	af04      	add	r7, sp, #16
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	603b      	str	r3, [r7, #0]
 80025ba:	4613      	mov	r3, r2
 80025bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80025be:	88fb      	ldrh	r3, [r7, #6]
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fa9c 	bl	8000b00 <pvPortMalloc>
 80025c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00e      	beq.n	80025ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80025d0:	205c      	movs	r0, #92	; 0x5c
 80025d2:	f7fe fa95 	bl	8000b00 <pvPortMalloc>
 80025d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	631a      	str	r2, [r3, #48]	; 0x30
 80025e4:	e005      	b.n	80025f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80025e6:	6978      	ldr	r0, [r7, #20]
 80025e8:	f7fe fb56 	bl	8000c98 <vPortFree>
 80025ec:	e001      	b.n	80025f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d017      	beq.n	8002628 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002600:	88fa      	ldrh	r2, [r7, #6]
 8002602:	2300      	movs	r3, #0
 8002604:	9303      	str	r3, [sp, #12]
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	9302      	str	r3, [sp, #8]
 800260a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260c:	9301      	str	r3, [sp, #4]
 800260e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	68b9      	ldr	r1, [r7, #8]
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 f80e 	bl	8002638 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800261c:	69f8      	ldr	r0, [r7, #28]
 800261e:	f000 f89b 	bl	8002758 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002622:	2301      	movs	r3, #1
 8002624:	61bb      	str	r3, [r7, #24]
 8002626:	e002      	b.n	800262e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002628:	f04f 33ff 	mov.w	r3, #4294967295
 800262c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800262e:	69bb      	ldr	r3, [r7, #24]
	}
 8002630:	4618      	mov	r0, r3
 8002632:	3720      	adds	r7, #32
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
 8002644:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002648:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	461a      	mov	r2, r3
 8002650:	21a5      	movs	r1, #165	; 0xa5
 8002652:	f020 f89d 	bl	8022790 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002660:	440b      	add	r3, r1
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	f023 0307 	bic.w	r3, r3, #7
 800266e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <prvInitialiseNewTask+0x58>
	__asm volatile
 800267a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800267e:	f383 8811 	msr	BASEPRI, r3
 8002682:	f3bf 8f6f 	isb	sy
 8002686:	f3bf 8f4f 	dsb	sy
 800268a:	617b      	str	r3, [r7, #20]
}
 800268c:	bf00      	nop
 800268e:	e7fe      	b.n	800268e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d01f      	beq.n	80026d6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]
 800269a:	e012      	b.n	80026c2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	4413      	add	r3, r2
 80026a2:	7819      	ldrb	r1, [r3, #0]
 80026a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	4413      	add	r3, r2
 80026aa:	3334      	adds	r3, #52	; 0x34
 80026ac:	460a      	mov	r2, r1
 80026ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	4413      	add	r3, r2
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d006      	beq.n	80026ca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	3301      	adds	r3, #1
 80026c0:	61fb      	str	r3, [r7, #28]
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	2b0f      	cmp	r3, #15
 80026c6:	d9e9      	bls.n	800269c <prvInitialiseNewTask+0x64>
 80026c8:	e000      	b.n	80026cc <prvInitialiseNewTask+0x94>
			{
				break;
 80026ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80026cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026d4:	e003      	b.n	80026de <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80026d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80026de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e0:	2b37      	cmp	r3, #55	; 0x37
 80026e2:	d901      	bls.n	80026e8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80026e4:	2337      	movs	r3, #55	; 0x37
 80026e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80026e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80026ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80026f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f6:	2200      	movs	r2, #0
 80026f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80026fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fc:	3304      	adds	r3, #4
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fe fc08 	bl	8000f14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002706:	3318      	adds	r3, #24
 8002708:	4618      	mov	r0, r3
 800270a:	f7fe fc03 	bl	8000f14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800270e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002712:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002716:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800271a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800271e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002722:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002726:	2200      	movs	r2, #0
 8002728:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800272a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	68f9      	ldr	r1, [r7, #12]
 8002736:	69b8      	ldr	r0, [r7, #24]
 8002738:	f7fe fc80 	bl	800103c <pxPortInitialiseStack>
 800273c:	4602      	mov	r2, r0
 800273e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002740:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002744:	2b00      	cmp	r3, #0
 8002746:	d002      	beq.n	800274e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800274c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800274e:	bf00      	nop
 8002750:	3720      	adds	r7, #32
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002760:	f7fe fd98 	bl	8001294 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002764:	4b2d      	ldr	r3, [pc, #180]	; (800281c <prvAddNewTaskToReadyList+0xc4>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	3301      	adds	r3, #1
 800276a:	4a2c      	ldr	r2, [pc, #176]	; (800281c <prvAddNewTaskToReadyList+0xc4>)
 800276c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800276e:	4b2c      	ldr	r3, [pc, #176]	; (8002820 <prvAddNewTaskToReadyList+0xc8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002776:	4a2a      	ldr	r2, [pc, #168]	; (8002820 <prvAddNewTaskToReadyList+0xc8>)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800277c:	4b27      	ldr	r3, [pc, #156]	; (800281c <prvAddNewTaskToReadyList+0xc4>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d110      	bne.n	80027a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002784:	f000 fc16 	bl	8002fb4 <prvInitialiseTaskLists>
 8002788:	e00d      	b.n	80027a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800278a:	4b26      	ldr	r3, [pc, #152]	; (8002824 <prvAddNewTaskToReadyList+0xcc>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d109      	bne.n	80027a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002792:	4b23      	ldr	r3, [pc, #140]	; (8002820 <prvAddNewTaskToReadyList+0xc8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	429a      	cmp	r2, r3
 800279e:	d802      	bhi.n	80027a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80027a0:	4a1f      	ldr	r2, [pc, #124]	; (8002820 <prvAddNewTaskToReadyList+0xc8>)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80027a6:	4b20      	ldr	r3, [pc, #128]	; (8002828 <prvAddNewTaskToReadyList+0xd0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	3301      	adds	r3, #1
 80027ac:	4a1e      	ldr	r2, [pc, #120]	; (8002828 <prvAddNewTaskToReadyList+0xd0>)
 80027ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80027b0:	4b1d      	ldr	r3, [pc, #116]	; (8002828 <prvAddNewTaskToReadyList+0xd0>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027bc:	4b1b      	ldr	r3, [pc, #108]	; (800282c <prvAddNewTaskToReadyList+0xd4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d903      	bls.n	80027cc <prvAddNewTaskToReadyList+0x74>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c8:	4a18      	ldr	r2, [pc, #96]	; (800282c <prvAddNewTaskToReadyList+0xd4>)
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4a15      	ldr	r2, [pc, #84]	; (8002830 <prvAddNewTaskToReadyList+0xd8>)
 80027da:	441a      	add	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3304      	adds	r3, #4
 80027e0:	4619      	mov	r1, r3
 80027e2:	4610      	mov	r0, r2
 80027e4:	f7fe fba3 	bl	8000f2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80027e8:	f7fe fd84 	bl	80012f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80027ec:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <prvAddNewTaskToReadyList+0xcc>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00e      	beq.n	8002812 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80027f4:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <prvAddNewTaskToReadyList+0xc8>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fe:	429a      	cmp	r2, r3
 8002800:	d207      	bcs.n	8002812 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002802:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <prvAddNewTaskToReadyList+0xdc>)
 8002804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	f3bf 8f4f 	dsb	sy
 800280e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	24008d40 	.word	0x24008d40
 8002820:	2400886c 	.word	0x2400886c
 8002824:	24008d4c 	.word	0x24008d4c
 8002828:	24008d5c 	.word	0x24008d5c
 800282c:	24008d48 	.word	0x24008d48
 8002830:	24008870 	.word	0x24008870
 8002834:	e000ed04 	.word	0xe000ed04

08002838 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d017      	beq.n	800287a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800284a:	4b13      	ldr	r3, [pc, #76]	; (8002898 <vTaskDelay+0x60>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00a      	beq.n	8002868 <vTaskDelay+0x30>
	__asm volatile
 8002852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002856:	f383 8811 	msr	BASEPRI, r3
 800285a:	f3bf 8f6f 	isb	sy
 800285e:	f3bf 8f4f 	dsb	sy
 8002862:	60bb      	str	r3, [r7, #8]
}
 8002864:	bf00      	nop
 8002866:	e7fe      	b.n	8002866 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002868:	f000 f880 	bl	800296c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800286c:	2100      	movs	r1, #0
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 fde8 	bl	8003444 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002874:	f000 f888 	bl	8002988 <xTaskResumeAll>
 8002878:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d107      	bne.n	8002890 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002880:	4b06      	ldr	r3, [pc, #24]	; (800289c <vTaskDelay+0x64>)
 8002882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	f3bf 8f4f 	dsb	sy
 800288c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002890:	bf00      	nop
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	24008d68 	.word	0x24008d68
 800289c:	e000ed04 	.word	0xe000ed04

080028a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08a      	sub	sp, #40	; 0x28
 80028a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80028ae:	463a      	mov	r2, r7
 80028b0:	1d39      	adds	r1, r7, #4
 80028b2:	f107 0308 	add.w	r3, r7, #8
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe f8ee 	bl	8000a98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80028bc:	6839      	ldr	r1, [r7, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	9202      	str	r2, [sp, #8]
 80028c4:	9301      	str	r3, [sp, #4]
 80028c6:	2300      	movs	r3, #0
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	2300      	movs	r3, #0
 80028cc:	460a      	mov	r2, r1
 80028ce:	4921      	ldr	r1, [pc, #132]	; (8002954 <vTaskStartScheduler+0xb4>)
 80028d0:	4821      	ldr	r0, [pc, #132]	; (8002958 <vTaskStartScheduler+0xb8>)
 80028d2:	f7ff fe0f 	bl	80024f4 <xTaskCreateStatic>
 80028d6:	4603      	mov	r3, r0
 80028d8:	4a20      	ldr	r2, [pc, #128]	; (800295c <vTaskStartScheduler+0xbc>)
 80028da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80028dc:	4b1f      	ldr	r3, [pc, #124]	; (800295c <vTaskStartScheduler+0xbc>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80028e4:	2301      	movs	r3, #1
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	e001      	b.n	80028ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d102      	bne.n	80028fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80028f4:	f000 fdfa 	bl	80034ec <xTimerCreateTimerTask>
 80028f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d116      	bne.n	800292e <vTaskStartScheduler+0x8e>
	__asm volatile
 8002900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002904:	f383 8811 	msr	BASEPRI, r3
 8002908:	f3bf 8f6f 	isb	sy
 800290c:	f3bf 8f4f 	dsb	sy
 8002910:	613b      	str	r3, [r7, #16]
}
 8002912:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002914:	4b12      	ldr	r3, [pc, #72]	; (8002960 <vTaskStartScheduler+0xc0>)
 8002916:	f04f 32ff 	mov.w	r2, #4294967295
 800291a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800291c:	4b11      	ldr	r3, [pc, #68]	; (8002964 <vTaskStartScheduler+0xc4>)
 800291e:	2201      	movs	r2, #1
 8002920:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002922:	4b11      	ldr	r3, [pc, #68]	; (8002968 <vTaskStartScheduler+0xc8>)
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002928:	f7fe fc12 	bl	8001150 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800292c:	e00e      	b.n	800294c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002934:	d10a      	bne.n	800294c <vTaskStartScheduler+0xac>
	__asm volatile
 8002936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293a:	f383 8811 	msr	BASEPRI, r3
 800293e:	f3bf 8f6f 	isb	sy
 8002942:	f3bf 8f4f 	dsb	sy
 8002946:	60fb      	str	r3, [r7, #12]
}
 8002948:	bf00      	nop
 800294a:	e7fe      	b.n	800294a <vTaskStartScheduler+0xaa>
}
 800294c:	bf00      	nop
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	080237f0 	.word	0x080237f0
 8002958:	08002f85 	.word	0x08002f85
 800295c:	24008d64 	.word	0x24008d64
 8002960:	24008d60 	.word	0x24008d60
 8002964:	24008d4c 	.word	0x24008d4c
 8002968:	24008d44 	.word	0x24008d44

0800296c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002970:	4b04      	ldr	r3, [pc, #16]	; (8002984 <vTaskSuspendAll+0x18>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	3301      	adds	r3, #1
 8002976:	4a03      	ldr	r2, [pc, #12]	; (8002984 <vTaskSuspendAll+0x18>)
 8002978:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800297a:	bf00      	nop
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	24008d68 	.word	0x24008d68

08002988 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002992:	2300      	movs	r3, #0
 8002994:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002996:	4b42      	ldr	r3, [pc, #264]	; (8002aa0 <xTaskResumeAll+0x118>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10a      	bne.n	80029b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800299e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a2:	f383 8811 	msr	BASEPRI, r3
 80029a6:	f3bf 8f6f 	isb	sy
 80029aa:	f3bf 8f4f 	dsb	sy
 80029ae:	603b      	str	r3, [r7, #0]
}
 80029b0:	bf00      	nop
 80029b2:	e7fe      	b.n	80029b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80029b4:	f7fe fc6e 	bl	8001294 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80029b8:	4b39      	ldr	r3, [pc, #228]	; (8002aa0 <xTaskResumeAll+0x118>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	3b01      	subs	r3, #1
 80029be:	4a38      	ldr	r2, [pc, #224]	; (8002aa0 <xTaskResumeAll+0x118>)
 80029c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029c2:	4b37      	ldr	r3, [pc, #220]	; (8002aa0 <xTaskResumeAll+0x118>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d162      	bne.n	8002a90 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80029ca:	4b36      	ldr	r3, [pc, #216]	; (8002aa4 <xTaskResumeAll+0x11c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d05e      	beq.n	8002a90 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029d2:	e02f      	b.n	8002a34 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029d4:	4b34      	ldr	r3, [pc, #208]	; (8002aa8 <xTaskResumeAll+0x120>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	3318      	adds	r3, #24
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fe fb01 	bl	8000fe8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	3304      	adds	r3, #4
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe fafc 	bl	8000fe8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f4:	4b2d      	ldr	r3, [pc, #180]	; (8002aac <xTaskResumeAll+0x124>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d903      	bls.n	8002a04 <xTaskResumeAll+0x7c>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a00:	4a2a      	ldr	r2, [pc, #168]	; (8002aac <xTaskResumeAll+0x124>)
 8002a02:	6013      	str	r3, [r2, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4a27      	ldr	r2, [pc, #156]	; (8002ab0 <xTaskResumeAll+0x128>)
 8002a12:	441a      	add	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	3304      	adds	r3, #4
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	f7fe fa87 	bl	8000f2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a24:	4b23      	ldr	r3, [pc, #140]	; (8002ab4 <xTaskResumeAll+0x12c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d302      	bcc.n	8002a34 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002a2e:	4b22      	ldr	r3, [pc, #136]	; (8002ab8 <xTaskResumeAll+0x130>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a34:	4b1c      	ldr	r3, [pc, #112]	; (8002aa8 <xTaskResumeAll+0x120>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1cb      	bne.n	80029d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002a42:	f000 fb55 	bl	80030f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002a46:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <xTaskResumeAll+0x134>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d010      	beq.n	8002a74 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002a52:	f000 f847 	bl	8002ae4 <xTaskIncrementTick>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d002      	beq.n	8002a62 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002a5c:	4b16      	ldr	r3, [pc, #88]	; (8002ab8 <xTaskResumeAll+0x130>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f1      	bne.n	8002a52 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002a6e:	4b13      	ldr	r3, [pc, #76]	; (8002abc <xTaskResumeAll+0x134>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002a74:	4b10      	ldr	r3, [pc, #64]	; (8002ab8 <xTaskResumeAll+0x130>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d009      	beq.n	8002a90 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002a80:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <xTaskResumeAll+0x138>)
 8002a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	f3bf 8f4f 	dsb	sy
 8002a8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002a90:	f7fe fc30 	bl	80012f4 <vPortExitCritical>

	return xAlreadyYielded;
 8002a94:	68bb      	ldr	r3, [r7, #8]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	24008d68 	.word	0x24008d68
 8002aa4:	24008d40 	.word	0x24008d40
 8002aa8:	24008d00 	.word	0x24008d00
 8002aac:	24008d48 	.word	0x24008d48
 8002ab0:	24008870 	.word	0x24008870
 8002ab4:	2400886c 	.word	0x2400886c
 8002ab8:	24008d54 	.word	0x24008d54
 8002abc:	24008d50 	.word	0x24008d50
 8002ac0:	e000ed04 	.word	0xe000ed04

08002ac4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002aca:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <xTaskGetTickCount+0x1c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002ad0:	687b      	ldr	r3, [r7, #4]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	24008d44 	.word	0x24008d44

08002ae4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002aee:	4b4f      	ldr	r3, [pc, #316]	; (8002c2c <xTaskIncrementTick+0x148>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f040 808f 	bne.w	8002c16 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002af8:	4b4d      	ldr	r3, [pc, #308]	; (8002c30 <xTaskIncrementTick+0x14c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	3301      	adds	r3, #1
 8002afe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002b00:	4a4b      	ldr	r2, [pc, #300]	; (8002c30 <xTaskIncrementTick+0x14c>)
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d120      	bne.n	8002b4e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002b0c:	4b49      	ldr	r3, [pc, #292]	; (8002c34 <xTaskIncrementTick+0x150>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <xTaskIncrementTick+0x48>
	__asm volatile
 8002b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b1a:	f383 8811 	msr	BASEPRI, r3
 8002b1e:	f3bf 8f6f 	isb	sy
 8002b22:	f3bf 8f4f 	dsb	sy
 8002b26:	603b      	str	r3, [r7, #0]
}
 8002b28:	bf00      	nop
 8002b2a:	e7fe      	b.n	8002b2a <xTaskIncrementTick+0x46>
 8002b2c:	4b41      	ldr	r3, [pc, #260]	; (8002c34 <xTaskIncrementTick+0x150>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	4b41      	ldr	r3, [pc, #260]	; (8002c38 <xTaskIncrementTick+0x154>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a3f      	ldr	r2, [pc, #252]	; (8002c34 <xTaskIncrementTick+0x150>)
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	4a3f      	ldr	r2, [pc, #252]	; (8002c38 <xTaskIncrementTick+0x154>)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	4b3e      	ldr	r3, [pc, #248]	; (8002c3c <xTaskIncrementTick+0x158>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	3301      	adds	r3, #1
 8002b46:	4a3d      	ldr	r2, [pc, #244]	; (8002c3c <xTaskIncrementTick+0x158>)
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	f000 fad1 	bl	80030f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002b4e:	4b3c      	ldr	r3, [pc, #240]	; (8002c40 <xTaskIncrementTick+0x15c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d349      	bcc.n	8002bec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b58:	4b36      	ldr	r3, [pc, #216]	; (8002c34 <xTaskIncrementTick+0x150>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d104      	bne.n	8002b6c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b62:	4b37      	ldr	r3, [pc, #220]	; (8002c40 <xTaskIncrementTick+0x15c>)
 8002b64:	f04f 32ff 	mov.w	r2, #4294967295
 8002b68:	601a      	str	r2, [r3, #0]
					break;
 8002b6a:	e03f      	b.n	8002bec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b6c:	4b31      	ldr	r3, [pc, #196]	; (8002c34 <xTaskIncrementTick+0x150>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d203      	bcs.n	8002b8c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002b84:	4a2e      	ldr	r2, [pc, #184]	; (8002c40 <xTaskIncrementTick+0x15c>)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002b8a:	e02f      	b.n	8002bec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	3304      	adds	r3, #4
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fe fa29 	bl	8000fe8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d004      	beq.n	8002ba8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	3318      	adds	r3, #24
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe fa20 	bl	8000fe8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bac:	4b25      	ldr	r3, [pc, #148]	; (8002c44 <xTaskIncrementTick+0x160>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d903      	bls.n	8002bbc <xTaskIncrementTick+0xd8>
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb8:	4a22      	ldr	r2, [pc, #136]	; (8002c44 <xTaskIncrementTick+0x160>)
 8002bba:	6013      	str	r3, [r2, #0]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4a1f      	ldr	r2, [pc, #124]	; (8002c48 <xTaskIncrementTick+0x164>)
 8002bca:	441a      	add	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	3304      	adds	r3, #4
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	f7fe f9ab 	bl	8000f2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bdc:	4b1b      	ldr	r3, [pc, #108]	; (8002c4c <xTaskIncrementTick+0x168>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d3b8      	bcc.n	8002b58 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002be6:	2301      	movs	r3, #1
 8002be8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bea:	e7b5      	b.n	8002b58 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002bec:	4b17      	ldr	r3, [pc, #92]	; (8002c4c <xTaskIncrementTick+0x168>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf2:	4915      	ldr	r1, [pc, #84]	; (8002c48 <xTaskIncrementTick+0x164>)
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d901      	bls.n	8002c08 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002c04:	2301      	movs	r3, #1
 8002c06:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002c08:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <xTaskIncrementTick+0x16c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d007      	beq.n	8002c20 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002c10:	2301      	movs	r3, #1
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	e004      	b.n	8002c20 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002c16:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <xTaskIncrementTick+0x170>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	4a0d      	ldr	r2, [pc, #52]	; (8002c54 <xTaskIncrementTick+0x170>)
 8002c1e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002c20:	697b      	ldr	r3, [r7, #20]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	24008d68 	.word	0x24008d68
 8002c30:	24008d44 	.word	0x24008d44
 8002c34:	24008cf8 	.word	0x24008cf8
 8002c38:	24008cfc 	.word	0x24008cfc
 8002c3c:	24008d58 	.word	0x24008d58
 8002c40:	24008d60 	.word	0x24008d60
 8002c44:	24008d48 	.word	0x24008d48
 8002c48:	24008870 	.word	0x24008870
 8002c4c:	2400886c 	.word	0x2400886c
 8002c50:	24008d54 	.word	0x24008d54
 8002c54:	24008d50 	.word	0x24008d50

08002c58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c5e:	4b28      	ldr	r3, [pc, #160]	; (8002d00 <vTaskSwitchContext+0xa8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002c66:	4b27      	ldr	r3, [pc, #156]	; (8002d04 <vTaskSwitchContext+0xac>)
 8002c68:	2201      	movs	r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002c6c:	e041      	b.n	8002cf2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8002c6e:	4b25      	ldr	r3, [pc, #148]	; (8002d04 <vTaskSwitchContext+0xac>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c74:	4b24      	ldr	r3, [pc, #144]	; (8002d08 <vTaskSwitchContext+0xb0>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	e010      	b.n	8002c9e <vTaskSwitchContext+0x46>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10a      	bne.n	8002c98 <vTaskSwitchContext+0x40>
	__asm volatile
 8002c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c86:	f383 8811 	msr	BASEPRI, r3
 8002c8a:	f3bf 8f6f 	isb	sy
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	607b      	str	r3, [r7, #4]
}
 8002c94:	bf00      	nop
 8002c96:	e7fe      	b.n	8002c96 <vTaskSwitchContext+0x3e>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	491b      	ldr	r1, [pc, #108]	; (8002d0c <vTaskSwitchContext+0xb4>)
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0e4      	beq.n	8002c7c <vTaskSwitchContext+0x24>
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4a13      	ldr	r2, [pc, #76]	; (8002d0c <vTaskSwitchContext+0xb4>)
 8002cbe:	4413      	add	r3, r2
 8002cc0:	60bb      	str	r3, [r7, #8]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	605a      	str	r2, [r3, #4]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	3308      	adds	r3, #8
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d104      	bne.n	8002ce2 <vTaskSwitchContext+0x8a>
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	4a09      	ldr	r2, [pc, #36]	; (8002d10 <vTaskSwitchContext+0xb8>)
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	4a06      	ldr	r2, [pc, #24]	; (8002d08 <vTaskSwitchContext+0xb0>)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6013      	str	r3, [r2, #0]
}
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	24008d68 	.word	0x24008d68
 8002d04:	24008d54 	.word	0x24008d54
 8002d08:	24008d48 	.word	0x24008d48
 8002d0c:	24008870 	.word	0x24008870
 8002d10:	2400886c 	.word	0x2400886c

08002d14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10a      	bne.n	8002d3a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d28:	f383 8811 	msr	BASEPRI, r3
 8002d2c:	f3bf 8f6f 	isb	sy
 8002d30:	f3bf 8f4f 	dsb	sy
 8002d34:	60fb      	str	r3, [r7, #12]
}
 8002d36:	bf00      	nop
 8002d38:	e7fe      	b.n	8002d38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d3a:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <vTaskPlaceOnEventList+0x44>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	3318      	adds	r3, #24
 8002d40:	4619      	mov	r1, r3
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7fe f917 	bl	8000f76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002d48:	2101      	movs	r1, #1
 8002d4a:	6838      	ldr	r0, [r7, #0]
 8002d4c:	f000 fb7a 	bl	8003444 <prvAddCurrentTaskToDelayedList>
}
 8002d50:	bf00      	nop
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	2400886c 	.word	0x2400886c

08002d5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10a      	bne.n	8002d84 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8002d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d72:	f383 8811 	msr	BASEPRI, r3
 8002d76:	f3bf 8f6f 	isb	sy
 8002d7a:	f3bf 8f4f 	dsb	sy
 8002d7e:	617b      	str	r3, [r7, #20]
}
 8002d80:	bf00      	nop
 8002d82:	e7fe      	b.n	8002d82 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d84:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <vTaskPlaceOnEventListRestricted+0x54>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	3318      	adds	r3, #24
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f7fe f8ce 	bl	8000f2e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d002      	beq.n	8002d9e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8002d98:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	68b8      	ldr	r0, [r7, #8]
 8002da2:	f000 fb4f 	bl	8003444 <prvAddCurrentTaskToDelayedList>
	}
 8002da6:	bf00      	nop
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	2400886c 	.word	0x2400886c

08002db4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10a      	bne.n	8002de0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dce:	f383 8811 	msr	BASEPRI, r3
 8002dd2:	f3bf 8f6f 	isb	sy
 8002dd6:	f3bf 8f4f 	dsb	sy
 8002dda:	60fb      	str	r3, [r7, #12]
}
 8002ddc:	bf00      	nop
 8002dde:	e7fe      	b.n	8002dde <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	3318      	adds	r3, #24
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7fe f8ff 	bl	8000fe8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002dea:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <xTaskRemoveFromEventList+0xb0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d11d      	bne.n	8002e2e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	3304      	adds	r3, #4
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe f8f6 	bl	8000fe8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e00:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <xTaskRemoveFromEventList+0xb4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d903      	bls.n	8002e10 <xTaskRemoveFromEventList+0x5c>
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0c:	4a16      	ldr	r2, [pc, #88]	; (8002e68 <xTaskRemoveFromEventList+0xb4>)
 8002e0e:	6013      	str	r3, [r2, #0]
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e14:	4613      	mov	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4a13      	ldr	r2, [pc, #76]	; (8002e6c <xTaskRemoveFromEventList+0xb8>)
 8002e1e:	441a      	add	r2, r3
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	3304      	adds	r3, #4
 8002e24:	4619      	mov	r1, r3
 8002e26:	4610      	mov	r0, r2
 8002e28:	f7fe f881 	bl	8000f2e <vListInsertEnd>
 8002e2c:	e005      	b.n	8002e3a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	3318      	adds	r3, #24
 8002e32:	4619      	mov	r1, r3
 8002e34:	480e      	ldr	r0, [pc, #56]	; (8002e70 <xTaskRemoveFromEventList+0xbc>)
 8002e36:	f7fe f87a 	bl	8000f2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e3e:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <xTaskRemoveFromEventList+0xc0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d905      	bls.n	8002e54 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002e4c:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <xTaskRemoveFromEventList+0xc4>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	e001      	b.n	8002e58 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002e58:	697b      	ldr	r3, [r7, #20]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	24008d68 	.word	0x24008d68
 8002e68:	24008d48 	.word	0x24008d48
 8002e6c:	24008870 	.word	0x24008870
 8002e70:	24008d00 	.word	0x24008d00
 8002e74:	2400886c 	.word	0x2400886c
 8002e78:	24008d54 	.word	0x24008d54

08002e7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002e84:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <vTaskInternalSetTimeOutState+0x24>)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002e8c:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <vTaskInternalSetTimeOutState+0x28>)
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	605a      	str	r2, [r3, #4]
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	24008d58 	.word	0x24008d58
 8002ea4:	24008d44 	.word	0x24008d44

08002ea8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10a      	bne.n	8002ece <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ebc:	f383 8811 	msr	BASEPRI, r3
 8002ec0:	f3bf 8f6f 	isb	sy
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	613b      	str	r3, [r7, #16]
}
 8002eca:	bf00      	nop
 8002ecc:	e7fe      	b.n	8002ecc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10a      	bne.n	8002eea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed8:	f383 8811 	msr	BASEPRI, r3
 8002edc:	f3bf 8f6f 	isb	sy
 8002ee0:	f3bf 8f4f 	dsb	sy
 8002ee4:	60fb      	str	r3, [r7, #12]
}
 8002ee6:	bf00      	nop
 8002ee8:	e7fe      	b.n	8002ee8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002eea:	f7fe f9d3 	bl	8001294 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002eee:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <xTaskCheckForTimeOut+0xbc>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f06:	d102      	bne.n	8002f0e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	61fb      	str	r3, [r7, #28]
 8002f0c:	e023      	b.n	8002f56 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	4b15      	ldr	r3, [pc, #84]	; (8002f68 <xTaskCheckForTimeOut+0xc0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d007      	beq.n	8002f2a <xTaskCheckForTimeOut+0x82>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d302      	bcc.n	8002f2a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002f24:	2301      	movs	r3, #1
 8002f26:	61fb      	str	r3, [r7, #28]
 8002f28:	e015      	b.n	8002f56 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d20b      	bcs.n	8002f4c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	1ad2      	subs	r2, r2, r3
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7ff ff9b 	bl	8002e7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002f46:	2300      	movs	r3, #0
 8002f48:	61fb      	str	r3, [r7, #28]
 8002f4a:	e004      	b.n	8002f56 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002f52:	2301      	movs	r3, #1
 8002f54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002f56:	f7fe f9cd 	bl	80012f4 <vPortExitCritical>

	return xReturn;
 8002f5a:	69fb      	ldr	r3, [r7, #28]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3720      	adds	r7, #32
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	24008d44 	.word	0x24008d44
 8002f68:	24008d58 	.word	0x24008d58

08002f6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002f70:	4b03      	ldr	r3, [pc, #12]	; (8002f80 <vTaskMissedYield+0x14>)
 8002f72:	2201      	movs	r2, #1
 8002f74:	601a      	str	r2, [r3, #0]
}
 8002f76:	bf00      	nop
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	24008d54 	.word	0x24008d54

08002f84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002f8c:	f000 f852 	bl	8003034 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f90:	4b06      	ldr	r3, [pc, #24]	; (8002fac <prvIdleTask+0x28>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d9f9      	bls.n	8002f8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002f98:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <prvIdleTask+0x2c>)
 8002f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	f3bf 8f4f 	dsb	sy
 8002fa4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002fa8:	e7f0      	b.n	8002f8c <prvIdleTask+0x8>
 8002faa:	bf00      	nop
 8002fac:	24008870 	.word	0x24008870
 8002fb0:	e000ed04 	.word	0xe000ed04

08002fb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fba:	2300      	movs	r3, #0
 8002fbc:	607b      	str	r3, [r7, #4]
 8002fbe:	e00c      	b.n	8002fda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4a12      	ldr	r2, [pc, #72]	; (8003014 <prvInitialiseTaskLists+0x60>)
 8002fcc:	4413      	add	r3, r2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fd ff80 	bl	8000ed4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	607b      	str	r3, [r7, #4]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b37      	cmp	r3, #55	; 0x37
 8002fde:	d9ef      	bls.n	8002fc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002fe0:	480d      	ldr	r0, [pc, #52]	; (8003018 <prvInitialiseTaskLists+0x64>)
 8002fe2:	f7fd ff77 	bl	8000ed4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002fe6:	480d      	ldr	r0, [pc, #52]	; (800301c <prvInitialiseTaskLists+0x68>)
 8002fe8:	f7fd ff74 	bl	8000ed4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002fec:	480c      	ldr	r0, [pc, #48]	; (8003020 <prvInitialiseTaskLists+0x6c>)
 8002fee:	f7fd ff71 	bl	8000ed4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002ff2:	480c      	ldr	r0, [pc, #48]	; (8003024 <prvInitialiseTaskLists+0x70>)
 8002ff4:	f7fd ff6e 	bl	8000ed4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002ff8:	480b      	ldr	r0, [pc, #44]	; (8003028 <prvInitialiseTaskLists+0x74>)
 8002ffa:	f7fd ff6b 	bl	8000ed4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002ffe:	4b0b      	ldr	r3, [pc, #44]	; (800302c <prvInitialiseTaskLists+0x78>)
 8003000:	4a05      	ldr	r2, [pc, #20]	; (8003018 <prvInitialiseTaskLists+0x64>)
 8003002:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003004:	4b0a      	ldr	r3, [pc, #40]	; (8003030 <prvInitialiseTaskLists+0x7c>)
 8003006:	4a05      	ldr	r2, [pc, #20]	; (800301c <prvInitialiseTaskLists+0x68>)
 8003008:	601a      	str	r2, [r3, #0]
}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	24008870 	.word	0x24008870
 8003018:	24008cd0 	.word	0x24008cd0
 800301c:	24008ce4 	.word	0x24008ce4
 8003020:	24008d00 	.word	0x24008d00
 8003024:	24008d14 	.word	0x24008d14
 8003028:	24008d2c 	.word	0x24008d2c
 800302c:	24008cf8 	.word	0x24008cf8
 8003030:	24008cfc 	.word	0x24008cfc

08003034 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800303a:	e019      	b.n	8003070 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800303c:	f7fe f92a 	bl	8001294 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003040:	4b10      	ldr	r3, [pc, #64]	; (8003084 <prvCheckTasksWaitingTermination+0x50>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3304      	adds	r3, #4
 800304c:	4618      	mov	r0, r3
 800304e:	f7fd ffcb 	bl	8000fe8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003052:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <prvCheckTasksWaitingTermination+0x54>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	3b01      	subs	r3, #1
 8003058:	4a0b      	ldr	r2, [pc, #44]	; (8003088 <prvCheckTasksWaitingTermination+0x54>)
 800305a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800305c:	4b0b      	ldr	r3, [pc, #44]	; (800308c <prvCheckTasksWaitingTermination+0x58>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	3b01      	subs	r3, #1
 8003062:	4a0a      	ldr	r2, [pc, #40]	; (800308c <prvCheckTasksWaitingTermination+0x58>)
 8003064:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003066:	f7fe f945 	bl	80012f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f810 	bl	8003090 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003070:	4b06      	ldr	r3, [pc, #24]	; (800308c <prvCheckTasksWaitingTermination+0x58>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1e1      	bne.n	800303c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003078:	bf00      	nop
 800307a:	bf00      	nop
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	24008d14 	.word	0x24008d14
 8003088:	24008d40 	.word	0x24008d40
 800308c:	24008d28 	.word	0x24008d28

08003090 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d108      	bne.n	80030b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fd fdf6 	bl	8000c98 <vPortFree>
				vPortFree( pxTCB );
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7fd fdf3 	bl	8000c98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80030b2:	e018      	b.n	80030e6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d103      	bne.n	80030c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7fd fdea 	bl	8000c98 <vPortFree>
	}
 80030c4:	e00f      	b.n	80030e6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d00a      	beq.n	80030e6 <prvDeleteTCB+0x56>
	__asm volatile
 80030d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d4:	f383 8811 	msr	BASEPRI, r3
 80030d8:	f3bf 8f6f 	isb	sy
 80030dc:	f3bf 8f4f 	dsb	sy
 80030e0:	60fb      	str	r3, [r7, #12]
}
 80030e2:	bf00      	nop
 80030e4:	e7fe      	b.n	80030e4 <prvDeleteTCB+0x54>
	}
 80030e6:	bf00      	nop
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
	...

080030f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030f6:	4b0c      	ldr	r3, [pc, #48]	; (8003128 <prvResetNextTaskUnblockTime+0x38>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d104      	bne.n	800310a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003100:	4b0a      	ldr	r3, [pc, #40]	; (800312c <prvResetNextTaskUnblockTime+0x3c>)
 8003102:	f04f 32ff 	mov.w	r2, #4294967295
 8003106:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003108:	e008      	b.n	800311c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800310a:	4b07      	ldr	r3, [pc, #28]	; (8003128 <prvResetNextTaskUnblockTime+0x38>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	4a04      	ldr	r2, [pc, #16]	; (800312c <prvResetNextTaskUnblockTime+0x3c>)
 800311a:	6013      	str	r3, [r2, #0]
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	24008cf8 	.word	0x24008cf8
 800312c:	24008d60 	.word	0x24008d60

08003130 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003136:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <xTaskGetSchedulerState+0x34>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d102      	bne.n	8003144 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800313e:	2301      	movs	r3, #1
 8003140:	607b      	str	r3, [r7, #4]
 8003142:	e008      	b.n	8003156 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003144:	4b08      	ldr	r3, [pc, #32]	; (8003168 <xTaskGetSchedulerState+0x38>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d102      	bne.n	8003152 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800314c:	2302      	movs	r3, #2
 800314e:	607b      	str	r3, [r7, #4]
 8003150:	e001      	b.n	8003156 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003152:	2300      	movs	r3, #0
 8003154:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003156:	687b      	ldr	r3, [r7, #4]
	}
 8003158:	4618      	mov	r0, r3
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	24008d4c 	.word	0x24008d4c
 8003168:	24008d68 	.word	0x24008d68

0800316c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003178:	2300      	movs	r3, #0
 800317a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d051      	beq.n	8003226 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003186:	4b2a      	ldr	r3, [pc, #168]	; (8003230 <xTaskPriorityInherit+0xc4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318c:	429a      	cmp	r2, r3
 800318e:	d241      	bcs.n	8003214 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	2b00      	cmp	r3, #0
 8003196:	db06      	blt.n	80031a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003198:	4b25      	ldr	r3, [pc, #148]	; (8003230 <xTaskPriorityInherit+0xc4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	6959      	ldr	r1, [r3, #20]
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ae:	4613      	mov	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4a1f      	ldr	r2, [pc, #124]	; (8003234 <xTaskPriorityInherit+0xc8>)
 80031b8:	4413      	add	r3, r2
 80031ba:	4299      	cmp	r1, r3
 80031bc:	d122      	bne.n	8003204 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	3304      	adds	r3, #4
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fd ff10 	bl	8000fe8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80031c8:	4b19      	ldr	r3, [pc, #100]	; (8003230 <xTaskPriorityInherit+0xc4>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d6:	4b18      	ldr	r3, [pc, #96]	; (8003238 <xTaskPriorityInherit+0xcc>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d903      	bls.n	80031e6 <xTaskPriorityInherit+0x7a>
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e2:	4a15      	ldr	r2, [pc, #84]	; (8003238 <xTaskPriorityInherit+0xcc>)
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4a10      	ldr	r2, [pc, #64]	; (8003234 <xTaskPriorityInherit+0xc8>)
 80031f4:	441a      	add	r2, r3
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	3304      	adds	r3, #4
 80031fa:	4619      	mov	r1, r3
 80031fc:	4610      	mov	r0, r2
 80031fe:	f7fd fe96 	bl	8000f2e <vListInsertEnd>
 8003202:	e004      	b.n	800320e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003204:	4b0a      	ldr	r3, [pc, #40]	; (8003230 <xTaskPriorityInherit+0xc4>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800320e:	2301      	movs	r3, #1
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	e008      	b.n	8003226 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003218:	4b05      	ldr	r3, [pc, #20]	; (8003230 <xTaskPriorityInherit+0xc4>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321e:	429a      	cmp	r2, r3
 8003220:	d201      	bcs.n	8003226 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003222:	2301      	movs	r3, #1
 8003224:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003226:	68fb      	ldr	r3, [r7, #12]
	}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	2400886c 	.word	0x2400886c
 8003234:	24008870 	.word	0x24008870
 8003238:	24008d48 	.word	0x24008d48

0800323c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d056      	beq.n	8003300 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003252:	4b2e      	ldr	r3, [pc, #184]	; (800330c <xTaskPriorityDisinherit+0xd0>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	429a      	cmp	r2, r3
 800325a:	d00a      	beq.n	8003272 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800325c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003260:	f383 8811 	msr	BASEPRI, r3
 8003264:	f3bf 8f6f 	isb	sy
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	60fb      	str	r3, [r7, #12]
}
 800326e:	bf00      	nop
 8003270:	e7fe      	b.n	8003270 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10a      	bne.n	8003290 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800327a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327e:	f383 8811 	msr	BASEPRI, r3
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	60bb      	str	r3, [r7, #8]
}
 800328c:	bf00      	nop
 800328e:	e7fe      	b.n	800328e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003294:	1e5a      	subs	r2, r3, #1
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d02c      	beq.n	8003300 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d128      	bne.n	8003300 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	3304      	adds	r3, #4
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fd fe98 	bl	8000fe8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d0:	4b0f      	ldr	r3, [pc, #60]	; (8003310 <xTaskPriorityDisinherit+0xd4>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d903      	bls.n	80032e0 <xTaskPriorityDisinherit+0xa4>
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032dc:	4a0c      	ldr	r2, [pc, #48]	; (8003310 <xTaskPriorityDisinherit+0xd4>)
 80032de:	6013      	str	r3, [r2, #0]
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4a09      	ldr	r2, [pc, #36]	; (8003314 <xTaskPriorityDisinherit+0xd8>)
 80032ee:	441a      	add	r2, r3
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	3304      	adds	r3, #4
 80032f4:	4619      	mov	r1, r3
 80032f6:	4610      	mov	r0, r2
 80032f8:	f7fd fe19 	bl	8000f2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80032fc:	2301      	movs	r3, #1
 80032fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003300:	697b      	ldr	r3, [r7, #20]
	}
 8003302:	4618      	mov	r0, r3
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	2400886c 	.word	0x2400886c
 8003310:	24008d48 	.word	0x24008d48
 8003314:	24008870 	.word	0x24008870

08003318 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003318:	b580      	push	{r7, lr}
 800331a:	b088      	sub	sp, #32
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003326:	2301      	movs	r3, #1
 8003328:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d06a      	beq.n	8003406 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10a      	bne.n	800334e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8003338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	60fb      	str	r3, [r7, #12]
}
 800334a:	bf00      	nop
 800334c:	e7fe      	b.n	800334c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	429a      	cmp	r2, r3
 8003356:	d902      	bls.n	800335e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	61fb      	str	r3, [r7, #28]
 800335c:	e002      	b.n	8003364 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003362:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003368:	69fa      	ldr	r2, [r7, #28]
 800336a:	429a      	cmp	r2, r3
 800336c:	d04b      	beq.n	8003406 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	429a      	cmp	r2, r3
 8003376:	d146      	bne.n	8003406 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003378:	4b25      	ldr	r3, [pc, #148]	; (8003410 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	429a      	cmp	r2, r3
 8003380:	d10a      	bne.n	8003398 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8003382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003386:	f383 8811 	msr	BASEPRI, r3
 800338a:	f3bf 8f6f 	isb	sy
 800338e:	f3bf 8f4f 	dsb	sy
 8003392:	60bb      	str	r3, [r7, #8]
}
 8003394:	bf00      	nop
 8003396:	e7fe      	b.n	8003396 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	69fa      	ldr	r2, [r7, #28]
 80033a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	db04      	blt.n	80033b6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	6959      	ldr	r1, [r3, #20]
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4a13      	ldr	r2, [pc, #76]	; (8003414 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80033c6:	4413      	add	r3, r2
 80033c8:	4299      	cmp	r1, r3
 80033ca:	d11c      	bne.n	8003406 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	3304      	adds	r3, #4
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fd fe09 	bl	8000fe8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033da:	4b0f      	ldr	r3, [pc, #60]	; (8003418 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d903      	bls.n	80033ea <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e6:	4a0c      	ldr	r2, [pc, #48]	; (8003418 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4a07      	ldr	r2, [pc, #28]	; (8003414 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80033f8:	441a      	add	r2, r3
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	3304      	adds	r3, #4
 80033fe:	4619      	mov	r1, r3
 8003400:	4610      	mov	r0, r2
 8003402:	f7fd fd94 	bl	8000f2e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003406:	bf00      	nop
 8003408:	3720      	adds	r7, #32
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	2400886c 	.word	0x2400886c
 8003414:	24008870 	.word	0x24008870
 8003418:	24008d48 	.word	0x24008d48

0800341c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003420:	4b07      	ldr	r3, [pc, #28]	; (8003440 <pvTaskIncrementMutexHeldCount+0x24>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d004      	beq.n	8003432 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003428:	4b05      	ldr	r3, [pc, #20]	; (8003440 <pvTaskIncrementMutexHeldCount+0x24>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800342e:	3201      	adds	r2, #1
 8003430:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8003432:	4b03      	ldr	r3, [pc, #12]	; (8003440 <pvTaskIncrementMutexHeldCount+0x24>)
 8003434:	681b      	ldr	r3, [r3, #0]
	}
 8003436:	4618      	mov	r0, r3
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	2400886c 	.word	0x2400886c

08003444 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800344e:	4b21      	ldr	r3, [pc, #132]	; (80034d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003454:	4b20      	ldr	r3, [pc, #128]	; (80034d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	3304      	adds	r3, #4
 800345a:	4618      	mov	r0, r3
 800345c:	f7fd fdc4 	bl	8000fe8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003466:	d10a      	bne.n	800347e <prvAddCurrentTaskToDelayedList+0x3a>
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d007      	beq.n	800347e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800346e:	4b1a      	ldr	r3, [pc, #104]	; (80034d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	3304      	adds	r3, #4
 8003474:	4619      	mov	r1, r3
 8003476:	4819      	ldr	r0, [pc, #100]	; (80034dc <prvAddCurrentTaskToDelayedList+0x98>)
 8003478:	f7fd fd59 	bl	8000f2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800347c:	e026      	b.n	80034cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4413      	add	r3, r2
 8003484:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003486:	4b14      	ldr	r3, [pc, #80]	; (80034d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	429a      	cmp	r2, r3
 8003494:	d209      	bcs.n	80034aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003496:	4b12      	ldr	r3, [pc, #72]	; (80034e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3304      	adds	r3, #4
 80034a0:	4619      	mov	r1, r3
 80034a2:	4610      	mov	r0, r2
 80034a4:	f7fd fd67 	bl	8000f76 <vListInsert>
}
 80034a8:	e010      	b.n	80034cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034aa:	4b0e      	ldr	r3, [pc, #56]	; (80034e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	3304      	adds	r3, #4
 80034b4:	4619      	mov	r1, r3
 80034b6:	4610      	mov	r0, r2
 80034b8:	f7fd fd5d 	bl	8000f76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80034bc:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d202      	bcs.n	80034cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80034c6:	4a08      	ldr	r2, [pc, #32]	; (80034e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	6013      	str	r3, [r2, #0]
}
 80034cc:	bf00      	nop
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	24008d44 	.word	0x24008d44
 80034d8:	2400886c 	.word	0x2400886c
 80034dc:	24008d2c 	.word	0x24008d2c
 80034e0:	24008cfc 	.word	0x24008cfc
 80034e4:	24008cf8 	.word	0x24008cf8
 80034e8:	24008d60 	.word	0x24008d60

080034ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b08a      	sub	sp, #40	; 0x28
 80034f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80034f6:	f000 fb07 	bl	8003b08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80034fa:	4b1c      	ldr	r3, [pc, #112]	; (800356c <xTimerCreateTimerTask+0x80>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d021      	beq.n	8003546 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003502:	2300      	movs	r3, #0
 8003504:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003506:	2300      	movs	r3, #0
 8003508:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800350a:	1d3a      	adds	r2, r7, #4
 800350c:	f107 0108 	add.w	r1, r7, #8
 8003510:	f107 030c 	add.w	r3, r7, #12
 8003514:	4618      	mov	r0, r3
 8003516:	f7fd fad9 	bl	8000acc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	9202      	str	r2, [sp, #8]
 8003522:	9301      	str	r3, [sp, #4]
 8003524:	2302      	movs	r3, #2
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	2300      	movs	r3, #0
 800352a:	460a      	mov	r2, r1
 800352c:	4910      	ldr	r1, [pc, #64]	; (8003570 <xTimerCreateTimerTask+0x84>)
 800352e:	4811      	ldr	r0, [pc, #68]	; (8003574 <xTimerCreateTimerTask+0x88>)
 8003530:	f7fe ffe0 	bl	80024f4 <xTaskCreateStatic>
 8003534:	4603      	mov	r3, r0
 8003536:	4a10      	ldr	r2, [pc, #64]	; (8003578 <xTimerCreateTimerTask+0x8c>)
 8003538:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800353a:	4b0f      	ldr	r3, [pc, #60]	; (8003578 <xTimerCreateTimerTask+0x8c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003542:	2301      	movs	r3, #1
 8003544:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10a      	bne.n	8003562 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800354c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003550:	f383 8811 	msr	BASEPRI, r3
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	613b      	str	r3, [r7, #16]
}
 800355e:	bf00      	nop
 8003560:	e7fe      	b.n	8003560 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003562:	697b      	ldr	r3, [r7, #20]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	24008d9c 	.word	0x24008d9c
 8003570:	080237f8 	.word	0x080237f8
 8003574:	080036b1 	.word	0x080036b1
 8003578:	24008da0 	.word	0x24008da0

0800357c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08a      	sub	sp, #40	; 0x28
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
 8003588:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800358a:	2300      	movs	r3, #0
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10a      	bne.n	80035aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8003594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003598:	f383 8811 	msr	BASEPRI, r3
 800359c:	f3bf 8f6f 	isb	sy
 80035a0:	f3bf 8f4f 	dsb	sy
 80035a4:	623b      	str	r3, [r7, #32]
}
 80035a6:	bf00      	nop
 80035a8:	e7fe      	b.n	80035a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80035aa:	4b1a      	ldr	r3, [pc, #104]	; (8003614 <xTimerGenericCommand+0x98>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d02a      	beq.n	8003608 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	2b05      	cmp	r3, #5
 80035c2:	dc18      	bgt.n	80035f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80035c4:	f7ff fdb4 	bl	8003130 <xTaskGetSchedulerState>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d109      	bne.n	80035e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80035ce:	4b11      	ldr	r3, [pc, #68]	; (8003614 <xTimerGenericCommand+0x98>)
 80035d0:	6818      	ldr	r0, [r3, #0]
 80035d2:	f107 0110 	add.w	r1, r7, #16
 80035d6:	2300      	movs	r3, #0
 80035d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035da:	f7fe f925 	bl	8001828 <xQueueGenericSend>
 80035de:	6278      	str	r0, [r7, #36]	; 0x24
 80035e0:	e012      	b.n	8003608 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80035e2:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <xTimerGenericCommand+0x98>)
 80035e4:	6818      	ldr	r0, [r3, #0]
 80035e6:	f107 0110 	add.w	r1, r7, #16
 80035ea:	2300      	movs	r3, #0
 80035ec:	2200      	movs	r2, #0
 80035ee:	f7fe f91b 	bl	8001828 <xQueueGenericSend>
 80035f2:	6278      	str	r0, [r7, #36]	; 0x24
 80035f4:	e008      	b.n	8003608 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80035f6:	4b07      	ldr	r3, [pc, #28]	; (8003614 <xTimerGenericCommand+0x98>)
 80035f8:	6818      	ldr	r0, [r3, #0]
 80035fa:	f107 0110 	add.w	r1, r7, #16
 80035fe:	2300      	movs	r3, #0
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	f7fe fa0f 	bl	8001a24 <xQueueGenericSendFromISR>
 8003606:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800360a:	4618      	mov	r0, r3
 800360c:	3728      	adds	r7, #40	; 0x28
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	24008d9c 	.word	0x24008d9c

08003618 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b088      	sub	sp, #32
 800361c:	af02      	add	r7, sp, #8
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003622:	4b22      	ldr	r3, [pc, #136]	; (80036ac <prvProcessExpiredTimer+0x94>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	3304      	adds	r3, #4
 8003630:	4618      	mov	r0, r3
 8003632:	f7fd fcd9 	bl	8000fe8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	d022      	beq.n	800368a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	699a      	ldr	r2, [r3, #24]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	18d1      	adds	r1, r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	6978      	ldr	r0, [r7, #20]
 8003652:	f000 f8d1 	bl	80037f8 <prvInsertTimerInActiveList>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d01f      	beq.n	800369c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800365c:	2300      	movs	r3, #0
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	2300      	movs	r3, #0
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	2100      	movs	r1, #0
 8003666:	6978      	ldr	r0, [r7, #20]
 8003668:	f7ff ff88 	bl	800357c <xTimerGenericCommand>
 800366c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d113      	bne.n	800369c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003678:	f383 8811 	msr	BASEPRI, r3
 800367c:	f3bf 8f6f 	isb	sy
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	60fb      	str	r3, [r7, #12]
}
 8003686:	bf00      	nop
 8003688:	e7fe      	b.n	8003688 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003690:	f023 0301 	bic.w	r3, r3, #1
 8003694:	b2da      	uxtb	r2, r3
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	6978      	ldr	r0, [r7, #20]
 80036a2:	4798      	blx	r3
}
 80036a4:	bf00      	nop
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	24008d94 	.word	0x24008d94

080036b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036b8:	f107 0308 	add.w	r3, r7, #8
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 f857 	bl	8003770 <prvGetNextExpireTime>
 80036c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4619      	mov	r1, r3
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 f803 	bl	80036d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80036ce:	f000 f8d5 	bl	800387c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036d2:	e7f1      	b.n	80036b8 <prvTimerTask+0x8>

080036d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80036de:	f7ff f945 	bl	800296c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80036e2:	f107 0308 	add.w	r3, r7, #8
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 f866 	bl	80037b8 <prvSampleTimeNow>
 80036ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d130      	bne.n	8003756 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10a      	bne.n	8003710 <prvProcessTimerOrBlockTask+0x3c>
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d806      	bhi.n	8003710 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003702:	f7ff f941 	bl	8002988 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003706:	68f9      	ldr	r1, [r7, #12]
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7ff ff85 	bl	8003618 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800370e:	e024      	b.n	800375a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d008      	beq.n	8003728 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003716:	4b13      	ldr	r3, [pc, #76]	; (8003764 <prvProcessTimerOrBlockTask+0x90>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <prvProcessTimerOrBlockTask+0x50>
 8003720:	2301      	movs	r3, #1
 8003722:	e000      	b.n	8003726 <prvProcessTimerOrBlockTask+0x52>
 8003724:	2300      	movs	r3, #0
 8003726:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003728:	4b0f      	ldr	r3, [pc, #60]	; (8003768 <prvProcessTimerOrBlockTask+0x94>)
 800372a:	6818      	ldr	r0, [r3, #0]
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	4619      	mov	r1, r3
 8003736:	f7fe fea9 	bl	800248c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800373a:	f7ff f925 	bl	8002988 <xTaskResumeAll>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10a      	bne.n	800375a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003744:	4b09      	ldr	r3, [pc, #36]	; (800376c <prvProcessTimerOrBlockTask+0x98>)
 8003746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	f3bf 8f6f 	isb	sy
}
 8003754:	e001      	b.n	800375a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003756:	f7ff f917 	bl	8002988 <xTaskResumeAll>
}
 800375a:	bf00      	nop
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	24008d98 	.word	0x24008d98
 8003768:	24008d9c 	.word	0x24008d9c
 800376c:	e000ed04 	.word	0xe000ed04

08003770 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003778:	4b0e      	ldr	r3, [pc, #56]	; (80037b4 <prvGetNextExpireTime+0x44>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <prvGetNextExpireTime+0x16>
 8003782:	2201      	movs	r2, #1
 8003784:	e000      	b.n	8003788 <prvGetNextExpireTime+0x18>
 8003786:	2200      	movs	r2, #0
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d105      	bne.n	80037a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003794:	4b07      	ldr	r3, [pc, #28]	; (80037b4 <prvGetNextExpireTime+0x44>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	e001      	b.n	80037a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80037a4:	68fb      	ldr	r3, [r7, #12]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	24008d94 	.word	0x24008d94

080037b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80037c0:	f7ff f980 	bl	8002ac4 <xTaskGetTickCount>
 80037c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80037c6:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <prvSampleTimeNow+0x3c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d205      	bcs.n	80037dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80037d0:	f000 f936 	bl	8003a40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	e002      	b.n	80037e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80037e2:	4a04      	ldr	r2, [pc, #16]	; (80037f4 <prvSampleTimeNow+0x3c>)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80037e8:	68fb      	ldr	r3, [r7, #12]
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	24008da4 	.word	0x24008da4

080037f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
 8003804:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	429a      	cmp	r2, r3
 800381c:	d812      	bhi.n	8003844 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	1ad2      	subs	r2, r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	429a      	cmp	r2, r3
 800382a:	d302      	bcc.n	8003832 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800382c:	2301      	movs	r3, #1
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	e01b      	b.n	800386a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003832:	4b10      	ldr	r3, [pc, #64]	; (8003874 <prvInsertTimerInActiveList+0x7c>)
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	3304      	adds	r3, #4
 800383a:	4619      	mov	r1, r3
 800383c:	4610      	mov	r0, r2
 800383e:	f7fd fb9a 	bl	8000f76 <vListInsert>
 8003842:	e012      	b.n	800386a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d206      	bcs.n	800385a <prvInsertTimerInActiveList+0x62>
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	d302      	bcc.n	800385a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003854:	2301      	movs	r3, #1
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	e007      	b.n	800386a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800385a:	4b07      	ldr	r3, [pc, #28]	; (8003878 <prvInsertTimerInActiveList+0x80>)
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	3304      	adds	r3, #4
 8003862:	4619      	mov	r1, r3
 8003864:	4610      	mov	r0, r2
 8003866:	f7fd fb86 	bl	8000f76 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800386a:	697b      	ldr	r3, [r7, #20]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	24008d98 	.word	0x24008d98
 8003878:	24008d94 	.word	0x24008d94

0800387c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b08e      	sub	sp, #56	; 0x38
 8003880:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003882:	e0ca      	b.n	8003a1a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	da18      	bge.n	80038bc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800388a:	1d3b      	adds	r3, r7, #4
 800388c:	3304      	adds	r3, #4
 800388e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10a      	bne.n	80038ac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389a:	f383 8811 	msr	BASEPRI, r3
 800389e:	f3bf 8f6f 	isb	sy
 80038a2:	f3bf 8f4f 	dsb	sy
 80038a6:	61fb      	str	r3, [r7, #28]
}
 80038a8:	bf00      	nop
 80038aa:	e7fe      	b.n	80038aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80038ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038b2:	6850      	ldr	r0, [r2, #4]
 80038b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038b6:	6892      	ldr	r2, [r2, #8]
 80038b8:	4611      	mov	r1, r2
 80038ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f2c0 80aa 	blt.w	8003a18 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80038c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d004      	beq.n	80038da <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d2:	3304      	adds	r3, #4
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fd fb87 	bl	8000fe8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80038da:	463b      	mov	r3, r7
 80038dc:	4618      	mov	r0, r3
 80038de:	f7ff ff6b 	bl	80037b8 <prvSampleTimeNow>
 80038e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b09      	cmp	r3, #9
 80038e8:	f200 8097 	bhi.w	8003a1a <prvProcessReceivedCommands+0x19e>
 80038ec:	a201      	add	r2, pc, #4	; (adr r2, 80038f4 <prvProcessReceivedCommands+0x78>)
 80038ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f2:	bf00      	nop
 80038f4:	0800391d 	.word	0x0800391d
 80038f8:	0800391d 	.word	0x0800391d
 80038fc:	0800391d 	.word	0x0800391d
 8003900:	08003991 	.word	0x08003991
 8003904:	080039a5 	.word	0x080039a5
 8003908:	080039ef 	.word	0x080039ef
 800390c:	0800391d 	.word	0x0800391d
 8003910:	0800391d 	.word	0x0800391d
 8003914:	08003991 	.word	0x08003991
 8003918:	080039a5 	.word	0x080039a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800391c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	b2da      	uxtb	r2, r3
 8003928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	18d1      	adds	r1, r2, r3
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800393c:	f7ff ff5c 	bl	80037f8 <prvInsertTimerInActiveList>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d069      	beq.n	8003a1a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800394c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800394e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003950:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d05e      	beq.n	8003a1a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	441a      	add	r2, r3
 8003964:	2300      	movs	r3, #0
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	2300      	movs	r3, #0
 800396a:	2100      	movs	r1, #0
 800396c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800396e:	f7ff fe05 	bl	800357c <xTimerGenericCommand>
 8003972:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d14f      	bne.n	8003a1a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800397a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397e:	f383 8811 	msr	BASEPRI, r3
 8003982:	f3bf 8f6f 	isb	sy
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	61bb      	str	r3, [r7, #24]
}
 800398c:	bf00      	nop
 800398e:	e7fe      	b.n	800398e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003992:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003996:	f023 0301 	bic.w	r3, r3, #1
 800399a:	b2da      	uxtb	r2, r3
 800399c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80039a2:	e03a      	b.n	8003a1a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80039a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80039bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10a      	bne.n	80039da <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80039c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c8:	f383 8811 	msr	BASEPRI, r3
 80039cc:	f3bf 8f6f 	isb	sy
 80039d0:	f3bf 8f4f 	dsb	sy
 80039d4:	617b      	str	r3, [r7, #20]
}
 80039d6:	bf00      	nop
 80039d8:	e7fe      	b.n	80039d8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80039da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039dc:	699a      	ldr	r2, [r3, #24]
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	18d1      	adds	r1, r2, r3
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039e8:	f7ff ff06 	bl	80037f8 <prvInsertTimerInActiveList>
					break;
 80039ec:	e015      	b.n	8003a1a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80039ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d103      	bne.n	8003a04 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80039fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039fe:	f7fd f94b 	bl	8000c98 <vPortFree>
 8003a02:	e00a      	b.n	8003a1a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a0a:	f023 0301 	bic.w	r3, r3, #1
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003a16:	e000      	b.n	8003a1a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003a18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a1a:	4b08      	ldr	r3, [pc, #32]	; (8003a3c <prvProcessReceivedCommands+0x1c0>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	1d39      	adds	r1, r7, #4
 8003a20:	2200      	movs	r2, #0
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fe f926 	bl	8001c74 <xQueueReceive>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f47f af2a 	bne.w	8003884 <prvProcessReceivedCommands+0x8>
	}
}
 8003a30:	bf00      	nop
 8003a32:	bf00      	nop
 8003a34:	3730      	adds	r7, #48	; 0x30
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	24008d9c 	.word	0x24008d9c

08003a40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b088      	sub	sp, #32
 8003a44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a46:	e048      	b.n	8003ada <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a48:	4b2d      	ldr	r3, [pc, #180]	; (8003b00 <prvSwitchTimerLists+0xc0>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a52:	4b2b      	ldr	r3, [pc, #172]	; (8003b00 <prvSwitchTimerLists+0xc0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	3304      	adds	r3, #4
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fd fac1 	bl	8000fe8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d02e      	beq.n	8003ada <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4413      	add	r3, r2
 8003a84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d90e      	bls.n	8003aac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a9a:	4b19      	ldr	r3, [pc, #100]	; (8003b00 <prvSwitchTimerLists+0xc0>)
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	4610      	mov	r0, r2
 8003aa6:	f7fd fa66 	bl	8000f76 <vListInsert>
 8003aaa:	e016      	b.n	8003ada <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003aac:	2300      	movs	r3, #0
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f7ff fd60 	bl	800357c <xTimerGenericCommand>
 8003abc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10a      	bne.n	8003ada <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac8:	f383 8811 	msr	BASEPRI, r3
 8003acc:	f3bf 8f6f 	isb	sy
 8003ad0:	f3bf 8f4f 	dsb	sy
 8003ad4:	603b      	str	r3, [r7, #0]
}
 8003ad6:	bf00      	nop
 8003ad8:	e7fe      	b.n	8003ad8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ada:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <prvSwitchTimerLists+0xc0>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1b1      	bne.n	8003a48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003ae4:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <prvSwitchTimerLists+0xc0>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003aea:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <prvSwitchTimerLists+0xc4>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a04      	ldr	r2, [pc, #16]	; (8003b00 <prvSwitchTimerLists+0xc0>)
 8003af0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003af2:	4a04      	ldr	r2, [pc, #16]	; (8003b04 <prvSwitchTimerLists+0xc4>)
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	6013      	str	r3, [r2, #0]
}
 8003af8:	bf00      	nop
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	24008d94 	.word	0x24008d94
 8003b04:	24008d98 	.word	0x24008d98

08003b08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003b0e:	f7fd fbc1 	bl	8001294 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003b12:	4b15      	ldr	r3, [pc, #84]	; (8003b68 <prvCheckForValidListAndQueue+0x60>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d120      	bne.n	8003b5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003b1a:	4814      	ldr	r0, [pc, #80]	; (8003b6c <prvCheckForValidListAndQueue+0x64>)
 8003b1c:	f7fd f9da 	bl	8000ed4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003b20:	4813      	ldr	r0, [pc, #76]	; (8003b70 <prvCheckForValidListAndQueue+0x68>)
 8003b22:	f7fd f9d7 	bl	8000ed4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003b26:	4b13      	ldr	r3, [pc, #76]	; (8003b74 <prvCheckForValidListAndQueue+0x6c>)
 8003b28:	4a10      	ldr	r2, [pc, #64]	; (8003b6c <prvCheckForValidListAndQueue+0x64>)
 8003b2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003b2c:	4b12      	ldr	r3, [pc, #72]	; (8003b78 <prvCheckForValidListAndQueue+0x70>)
 8003b2e:	4a10      	ldr	r2, [pc, #64]	; (8003b70 <prvCheckForValidListAndQueue+0x68>)
 8003b30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003b32:	2300      	movs	r3, #0
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	4b11      	ldr	r3, [pc, #68]	; (8003b7c <prvCheckForValidListAndQueue+0x74>)
 8003b38:	4a11      	ldr	r2, [pc, #68]	; (8003b80 <prvCheckForValidListAndQueue+0x78>)
 8003b3a:	2110      	movs	r1, #16
 8003b3c:	200a      	movs	r0, #10
 8003b3e:	f7fd fd33 	bl	80015a8 <xQueueGenericCreateStatic>
 8003b42:	4603      	mov	r3, r0
 8003b44:	4a08      	ldr	r2, [pc, #32]	; (8003b68 <prvCheckForValidListAndQueue+0x60>)
 8003b46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003b48:	4b07      	ldr	r3, [pc, #28]	; (8003b68 <prvCheckForValidListAndQueue+0x60>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d005      	beq.n	8003b5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003b50:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <prvCheckForValidListAndQueue+0x60>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	490b      	ldr	r1, [pc, #44]	; (8003b84 <prvCheckForValidListAndQueue+0x7c>)
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fe fc44 	bl	80023e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b5c:	f7fd fbca 	bl	80012f4 <vPortExitCritical>
}
 8003b60:	bf00      	nop
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	24008d9c 	.word	0x24008d9c
 8003b6c:	24008d6c 	.word	0x24008d6c
 8003b70:	24008d80 	.word	0x24008d80
 8003b74:	24008d94 	.word	0x24008d94
 8003b78:	24008d98 	.word	0x24008d98
 8003b7c:	24008e48 	.word	0x24008e48
 8003b80:	24008da8 	.word	0x24008da8
 8003b84:	08023800 	.word	0x08023800

08003b88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8003b8e:	f000 fbaf 	bl	80042f0 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8003b92:	4b5a      	ldr	r3, [pc, #360]	; (8003cfc <main+0x174>)
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d11b      	bne.n	8003bd6 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003b9e:	f3bf 8f4f 	dsb	sy
}
 8003ba2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003ba4:	f3bf 8f6f 	isb	sy
}
 8003ba8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003baa:	4b54      	ldr	r3, [pc, #336]	; (8003cfc <main+0x174>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003bb2:	f3bf 8f4f 	dsb	sy
}
 8003bb6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003bb8:	f3bf 8f6f 	isb	sy
}
 8003bbc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003bbe:	4b4f      	ldr	r3, [pc, #316]	; (8003cfc <main+0x174>)
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	4a4e      	ldr	r2, [pc, #312]	; (8003cfc <main+0x174>)
 8003bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bc8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003bca:	f3bf 8f4f 	dsb	sy
}
 8003bce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003bd0:	f3bf 8f6f 	isb	sy
}
 8003bd4:	e000      	b.n	8003bd8 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8003bd6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8003bd8:	4b48      	ldr	r3, [pc, #288]	; (8003cfc <main+0x174>)
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d138      	bne.n	8003c56 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003be4:	4b45      	ldr	r3, [pc, #276]	; (8003cfc <main+0x174>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003bec:	f3bf 8f4f 	dsb	sy
}
 8003bf0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8003bf2:	4b42      	ldr	r3, [pc, #264]	; (8003cfc <main+0x174>)
 8003bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bf8:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	0b5b      	lsrs	r3, r3, #13
 8003bfe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003c02:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	08db      	lsrs	r3, r3, #3
 8003c08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c0c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003c16:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003c1c:	4937      	ldr	r1, [pc, #220]	; (8003cfc <main+0x174>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	1e5a      	subs	r2, r3, #1
 8003c28:	60ba      	str	r2, [r7, #8]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1ef      	bne.n	8003c0e <main+0x86>
    } while(sets-- != 0U);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	1e5a      	subs	r2, r3, #1
 8003c32:	60fa      	str	r2, [r7, #12]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1e5      	bne.n	8003c04 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8003c38:	f3bf 8f4f 	dsb	sy
}
 8003c3c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003c3e:	4b2f      	ldr	r3, [pc, #188]	; (8003cfc <main+0x174>)
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	4a2e      	ldr	r2, [pc, #184]	; (8003cfc <main+0x174>)
 8003c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c48:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003c4a:	f3bf 8f4f 	dsb	sy
}
 8003c4e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c50:	f3bf 8f6f 	isb	sy
}
 8003c54:	e000      	b.n	8003c58 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8003c56:	bf00      	nop
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c58:	f007 ffba 	bl	800bbd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c5c:	f000 f85e 	bl	8003d1c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8003c60:	4b27      	ldr	r3, [pc, #156]	; (8003d00 <main+0x178>)
 8003c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c66:	4a26      	ldr	r2, [pc, #152]	; (8003d00 <main+0x178>)
 8003c68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c70:	4b23      	ldr	r3, [pc, #140]	; (8003d00 <main+0x178>)
 8003c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7a:	607b      	str	r3, [r7, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8003c7e:	2000      	movs	r0, #0
 8003c80:	f008 fee8 	bl	800ca54 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8003c84:	2100      	movs	r1, #0
 8003c86:	2000      	movs	r0, #0
 8003c88:	f008 fefe 	bl	800ca88 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8003c8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c90:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8003c92:	bf00      	nop
 8003c94:	4b1a      	ldr	r3, [pc, #104]	; (8003d00 <main+0x178>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d104      	bne.n	8003caa <main+0x122>
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	1e5a      	subs	r2, r3, #1
 8003ca4:	617a      	str	r2, [r7, #20]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	dcf4      	bgt.n	8003c94 <main+0x10c>
if ( timeout < 0 )
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	da01      	bge.n	8003cb4 <main+0x12c>
{
Error_Handler();
 8003cb0:	f000 fb68 	bl	8004384 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003cb4:	f000 fa08 	bl	80040c8 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 8003cb8:	f000 f982 	bl	8003fc0 <MX_QUADSPI_Init>
  MX_FMC_Init();
 8003cbc:	f000 f9ae 	bl	800401c <MX_FMC_Init>
  MX_LTDC_Init();
 8003cc0:	f000 f8fa 	bl	8003eb8 <MX_LTDC_Init>
  MX_CRC_Init();
 8003cc4:	f000 f8b8 	bl	8003e38 <MX_CRC_Init>
  MX_DMA2D_Init();
 8003cc8:	f000 f8d8 	bl	8003e7c <MX_DMA2D_Init>
  MX_TouchGFX_Init();
 8003ccc:	f001 f90f 	bl	8004eee <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003cd0:	f7fc fb9a 	bl	8000408 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003cd4:	4a0b      	ldr	r2, [pc, #44]	; (8003d04 <main+0x17c>)
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	480b      	ldr	r0, [pc, #44]	; (8003d08 <main+0x180>)
 8003cda:	f7fc fbdf 	bl	800049c <osThreadNew>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	4a0a      	ldr	r2, [pc, #40]	; (8003d0c <main+0x184>)
 8003ce2:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8003ce4:	4a0a      	ldr	r2, [pc, #40]	; (8003d10 <main+0x188>)
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	480a      	ldr	r0, [pc, #40]	; (8003d14 <main+0x18c>)
 8003cea:	f7fc fbd7 	bl	800049c <osThreadNew>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	4a09      	ldr	r2, [pc, #36]	; (8003d18 <main+0x190>)
 8003cf2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003cf4:	f7fc fbac 	bl	8000450 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003cf8:	e7fe      	b.n	8003cf8 <main+0x170>
 8003cfa:	bf00      	nop
 8003cfc:	e000ed00 	.word	0xe000ed00
 8003d00:	58024400 	.word	0x58024400
 8003d04:	08024364 	.word	0x08024364
 8003d08:	080042e1 	.word	0x080042e1
 8003d0c:	2400904c 	.word	0x2400904c
 8003d10:	08024388 	.word	0x08024388
 8003d14:	08004efb 	.word	0x08004efb
 8003d18:	24009050 	.word	0x24009050

08003d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b09c      	sub	sp, #112	; 0x70
 8003d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d26:	224c      	movs	r2, #76	; 0x4c
 8003d28:	2100      	movs	r1, #0
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f01e fd30 	bl	8022790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d30:	1d3b      	adds	r3, r7, #4
 8003d32:	2220      	movs	r2, #32
 8003d34:	2100      	movs	r1, #0
 8003d36:	4618      	mov	r0, r3
 8003d38:	f01e fd2a 	bl	8022790 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8003d3c:	2004      	movs	r0, #4
 8003d3e:	f00a fa0d 	bl	800e15c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d42:	2300      	movs	r3, #0
 8003d44:	603b      	str	r3, [r7, #0]
 8003d46:	4b39      	ldr	r3, [pc, #228]	; (8003e2c <SystemClock_Config+0x110>)
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	4a38      	ldr	r2, [pc, #224]	; (8003e2c <SystemClock_Config+0x110>)
 8003d4c:	f023 0301 	bic.w	r3, r3, #1
 8003d50:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d52:	4b36      	ldr	r3, [pc, #216]	; (8003e2c <SystemClock_Config+0x110>)
 8003d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	603b      	str	r3, [r7, #0]
 8003d5c:	4b34      	ldr	r3, [pc, #208]	; (8003e30 <SystemClock_Config+0x114>)
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	4a33      	ldr	r2, [pc, #204]	; (8003e30 <SystemClock_Config+0x114>)
 8003d62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d66:	6193      	str	r3, [r2, #24]
 8003d68:	4b31      	ldr	r3, [pc, #196]	; (8003e30 <SystemClock_Config+0x114>)
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d70:	603b      	str	r3, [r7, #0]
 8003d72:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003d74:	bf00      	nop
 8003d76:	4b2e      	ldr	r3, [pc, #184]	; (8003e30 <SystemClock_Config+0x114>)
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d82:	d1f8      	bne.n	8003d76 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8003d84:	4b2b      	ldr	r3, [pc, #172]	; (8003e34 <SystemClock_Config+0x118>)
 8003d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d88:	f023 0303 	bic.w	r3, r3, #3
 8003d8c:	4a29      	ldr	r2, [pc, #164]	; (8003e34 <SystemClock_Config+0x118>)
 8003d8e:	f043 0302 	orr.w	r3, r3, #2
 8003d92:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003d94:	2303      	movs	r3, #3
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003da2:	2340      	movs	r3, #64	; 0x40
 8003da4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003da6:	2302      	movs	r3, #2
 8003da8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003daa:	2302      	movs	r3, #2
 8003dac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8003dae:	2305      	movs	r3, #5
 8003db0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8003db2:	23a0      	movs	r3, #160	; 0xa0
 8003db4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003db6:	2302      	movs	r3, #2
 8003db8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003dba:	2304      	movs	r3, #4
 8003dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8003dc2:	2308      	movs	r3, #8
 8003dc4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f00b f8fe 	bl	800efd4 <HAL_RCC_OscConfig>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003dde:	f000 fad1 	bl	8004384 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003de2:	233f      	movs	r3, #63	; 0x3f
 8003de4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003de6:	2303      	movs	r3, #3
 8003de8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003dee:	2308      	movs	r3, #8
 8003df0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003df2:	2340      	movs	r3, #64	; 0x40
 8003df4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003df6:	2340      	movs	r3, #64	; 0x40
 8003df8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003dfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dfe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003e00:	2340      	movs	r3, #64	; 0x40
 8003e02:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003e04:	1d3b      	adds	r3, r7, #4
 8003e06:	2102      	movs	r1, #2
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f00b fd11 	bl	800f830 <HAL_RCC_ClockConfig>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8003e14:	f000 fab6 	bl	8004384 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8003e18:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	2000      	movs	r0, #0
 8003e20:	f00b febc 	bl	800fb9c <HAL_RCC_MCOConfig>
}
 8003e24:	bf00      	nop
 8003e26:	3770      	adds	r7, #112	; 0x70
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	58000400 	.word	0x58000400
 8003e30:	58024800 	.word	0x58024800
 8003e34:	58024400 	.word	0x58024400

08003e38 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003e3c:	4b0d      	ldr	r3, [pc, #52]	; (8003e74 <MX_CRC_Init+0x3c>)
 8003e3e:	4a0e      	ldr	r2, [pc, #56]	; (8003e78 <MX_CRC_Init+0x40>)
 8003e40:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003e42:	4b0c      	ldr	r3, [pc, #48]	; (8003e74 <MX_CRC_Init+0x3c>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003e48:	4b0a      	ldr	r3, [pc, #40]	; (8003e74 <MX_CRC_Init+0x3c>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8003e4e:	4b09      	ldr	r3, [pc, #36]	; (8003e74 <MX_CRC_Init+0x3c>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003e54:	4b07      	ldr	r3, [pc, #28]	; (8003e74 <MX_CRC_Init+0x3c>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003e5a:	4b06      	ldr	r3, [pc, #24]	; (8003e74 <MX_CRC_Init+0x3c>)
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003e60:	4804      	ldr	r0, [pc, #16]	; (8003e74 <MX_CRC_Init+0x3c>)
 8003e62:	f008 f8ab 	bl	800bfbc <HAL_CRC_Init>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8003e6c:	f000 fa8a 	bl	8004384 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003e70:	bf00      	nop
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	24008e98 	.word	0x24008e98
 8003e78:	58024c00 	.word	0x58024c00

08003e7c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8003e80:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <MX_DMA2D_Init+0x34>)
 8003e82:	4a0c      	ldr	r2, [pc, #48]	; (8003eb4 <MX_DMA2D_Init+0x38>)
 8003e84:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 8003e86:	4b0a      	ldr	r3, [pc, #40]	; (8003eb0 <MX_DMA2D_Init+0x34>)
 8003e88:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003e8c:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8003e8e:	4b08      	ldr	r3, [pc, #32]	; (8003eb0 <MX_DMA2D_Init+0x34>)
 8003e90:	2202      	movs	r2, #2
 8003e92:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8003e94:	4b06      	ldr	r3, [pc, #24]	; (8003eb0 <MX_DMA2D_Init+0x34>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8003e9a:	4805      	ldr	r0, [pc, #20]	; (8003eb0 <MX_DMA2D_Init+0x34>)
 8003e9c:	f008 f978 	bl	800c190 <HAL_DMA2D_Init>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 8003ea6:	f000 fa6d 	bl	8004384 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8003eaa:	bf00      	nop
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	24008ebc 	.word	0x24008ebc
 8003eb4:	52001000 	.word	0x52001000

08003eb8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08e      	sub	sp, #56	; 0x38
 8003ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */
  initLtdcClocks();
 8003ebe:	f000 fa67 	bl	8004390 <initLtdcClocks>
  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8003ec2:	1d3b      	adds	r3, r7, #4
 8003ec4:	2234      	movs	r2, #52	; 0x34
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f01e fc61 	bl	8022790 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8003ece:	4b3a      	ldr	r3, [pc, #232]	; (8003fb8 <MX_LTDC_Init+0x100>)
 8003ed0:	4a3a      	ldr	r2, [pc, #232]	; (8003fbc <MX_LTDC_Init+0x104>)
 8003ed2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003ed4:	4b38      	ldr	r3, [pc, #224]	; (8003fb8 <MX_LTDC_Init+0x100>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003eda:	4b37      	ldr	r3, [pc, #220]	; (8003fb8 <MX_LTDC_Init+0x100>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003ee0:	4b35      	ldr	r3, [pc, #212]	; (8003fb8 <MX_LTDC_Init+0x100>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003ee6:	4b34      	ldr	r3, [pc, #208]	; (8003fb8 <MX_LTDC_Init+0x100>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8003eec:	4b32      	ldr	r3, [pc, #200]	; (8003fb8 <MX_LTDC_Init+0x100>)
 8003eee:	2228      	movs	r2, #40	; 0x28
 8003ef0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8003ef2:	4b31      	ldr	r3, [pc, #196]	; (8003fb8 <MX_LTDC_Init+0x100>)
 8003ef4:	2209      	movs	r2, #9
 8003ef6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8003ef8:	4b2f      	ldr	r3, [pc, #188]	; (8003fb8 <MX_LTDC_Init+0x100>)
 8003efa:	2235      	movs	r2, #53	; 0x35
 8003efc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8003efe:	4b2e      	ldr	r3, [pc, #184]	; (8003fb8 <MX_LTDC_Init+0x100>)
 8003f00:	220b      	movs	r2, #11
 8003f02:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8003f04:	4b2c      	ldr	r3, [pc, #176]	; (8003fb8 <MX_LTDC_Init+0x100>)
 8003f06:	f240 2215 	movw	r2, #533	; 0x215
 8003f0a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8003f0c:	4b2a      	ldr	r3, [pc, #168]	; (8003fb8 <MX_LTDC_Init+0x100>)
 8003f0e:	f240 121b 	movw	r2, #283	; 0x11b
 8003f12:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8003f14:	4b28      	ldr	r3, [pc, #160]	; (8003fb8 <MX_LTDC_Init+0x100>)
 8003f16:	f240 2235 	movw	r2, #565	; 0x235
 8003f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8003f1c:	4b26      	ldr	r3, [pc, #152]	; (8003fb8 <MX_LTDC_Init+0x100>)
 8003f1e:	f240 121d 	movw	r2, #285	; 0x11d
 8003f22:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8003f24:	4b24      	ldr	r3, [pc, #144]	; (8003fb8 <MX_LTDC_Init+0x100>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8003f2c:	4b22      	ldr	r3, [pc, #136]	; (8003fb8 <MX_LTDC_Init+0x100>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8003f34:	4b20      	ldr	r3, [pc, #128]	; (8003fb8 <MX_LTDC_Init+0x100>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003f3c:	481e      	ldr	r0, [pc, #120]	; (8003fb8 <MX_LTDC_Init+0x100>)
 8003f3e:	f009 fc11 	bl	800d764 <HAL_LTDC_Init>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 8003f48:	f000 fa1c 	bl	8004384 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8003f50:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003f54:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8003f56:	2300      	movs	r3, #0
 8003f58:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8003f5a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003f5e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8003f60:	2302      	movs	r3, #2
 8003f62:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8003f64:	23ff      	movs	r3, #255	; 0xff
 8003f66:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003f6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f70:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003f72:	2305      	movs	r3, #5
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8003f76:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8003f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8003f7c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8003f82:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003f86:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8003f94:	2300      	movs	r3, #0
 8003f96:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003f9a:	1d3b      	adds	r3, r7, #4
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4805      	ldr	r0, [pc, #20]	; (8003fb8 <MX_LTDC_Init+0x100>)
 8003fa2:	f009 fd67 	bl	800da74 <HAL_LTDC_ConfigLayer>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8003fac:	f000 f9ea 	bl	8004384 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8003fb0:	bf00      	nop
 8003fb2:	3738      	adds	r7, #56	; 0x38
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	24008f24 	.word	0x24008f24
 8003fbc:	50001000 	.word	0x50001000

08003fc0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8003fc4:	4b12      	ldr	r3, [pc, #72]	; (8004010 <MX_QUADSPI_Init+0x50>)
 8003fc6:	4a13      	ldr	r2, [pc, #76]	; (8004014 <MX_QUADSPI_Init+0x54>)
 8003fc8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8003fca:	4b11      	ldr	r3, [pc, #68]	; (8004010 <MX_QUADSPI_Init+0x50>)
 8003fcc:	2201      	movs	r2, #1
 8003fce:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8003fd0:	4b0f      	ldr	r3, [pc, #60]	; (8004010 <MX_QUADSPI_Init+0x50>)
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8003fd6:	4b0e      	ldr	r3, [pc, #56]	; (8004010 <MX_QUADSPI_Init+0x50>)
 8003fd8:	2210      	movs	r2, #16
 8003fda:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 8003fdc:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <MX_QUADSPI_Init+0x50>)
 8003fde:	221a      	movs	r2, #26
 8003fe0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_3_CYCLE;
 8003fe2:	4b0b      	ldr	r3, [pc, #44]	; (8004010 <MX_QUADSPI_Init+0x50>)
 8003fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fe8:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8003fea:	4b09      	ldr	r3, [pc, #36]	; (8004010 <MX_QUADSPI_Init+0x50>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8003ff0:	4b07      	ldr	r3, [pc, #28]	; (8004010 <MX_QUADSPI_Init+0x50>)
 8003ff2:	2240      	movs	r2, #64	; 0x40
 8003ff4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8003ff6:	4806      	ldr	r0, [pc, #24]	; (8004010 <MX_QUADSPI_Init+0x50>)
 8003ff8:	f00a f90a 	bl	800e210 <HAL_QSPI_Init>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <MX_QUADSPI_Init+0x46>
  {
    Error_Handler();
 8004002:	f000 f9bf 	bl	8004384 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  initBspQuadSpi(&Error_Handler);
 8004006:	4804      	ldr	r0, [pc, #16]	; (8004018 <MX_QUADSPI_Init+0x58>)
 8004008:	f000 fa36 	bl	8004478 <initBspQuadSpi>
  /* USER CODE END QUADSPI_Init 2 */

}
 800400c:	bf00      	nop
 800400e:	bd80      	pop	{r7, pc}
 8004010:	24008fcc 	.word	0x24008fcc
 8004014:	52005000 	.word	0x52005000
 8004018:	08004385 	.word	0x08004385

0800401c <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b088      	sub	sp, #32
 8004020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8004022:	1d3b      	adds	r3, r7, #4
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	605a      	str	r2, [r3, #4]
 800402a:	609a      	str	r2, [r3, #8]
 800402c:	60da      	str	r2, [r3, #12]
 800402e:	611a      	str	r2, [r3, #16]
 8004030:	615a      	str	r2, [r3, #20]
 8004032:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 8004034:	4b21      	ldr	r3, [pc, #132]	; (80040bc <MX_FMC_Init+0xa0>)
 8004036:	4a22      	ldr	r2, [pc, #136]	; (80040c0 <MX_FMC_Init+0xa4>)
 8004038:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 800403a:	4b20      	ldr	r3, [pc, #128]	; (80040bc <MX_FMC_Init+0xa0>)
 800403c:	2201      	movs	r2, #1
 800403e:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004040:	4b1e      	ldr	r3, [pc, #120]	; (80040bc <MX_FMC_Init+0xa0>)
 8004042:	2200      	movs	r2, #0
 8004044:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8004046:	4b1d      	ldr	r3, [pc, #116]	; (80040bc <MX_FMC_Init+0xa0>)
 8004048:	2204      	movs	r2, #4
 800404a:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800404c:	4b1b      	ldr	r3, [pc, #108]	; (80040bc <MX_FMC_Init+0xa0>)
 800404e:	2210      	movs	r2, #16
 8004050:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004052:	4b1a      	ldr	r3, [pc, #104]	; (80040bc <MX_FMC_Init+0xa0>)
 8004054:	2240      	movs	r2, #64	; 0x40
 8004056:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8004058:	4b18      	ldr	r3, [pc, #96]	; (80040bc <MX_FMC_Init+0xa0>)
 800405a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800405e:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004060:	4b16      	ldr	r3, [pc, #88]	; (80040bc <MX_FMC_Init+0xa0>)
 8004062:	2200      	movs	r2, #0
 8004064:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8004066:	4b15      	ldr	r3, [pc, #84]	; (80040bc <MX_FMC_Init+0xa0>)
 8004068:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800406c:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800406e:	4b13      	ldr	r3, [pc, #76]	; (80040bc <MX_FMC_Init+0xa0>)
 8004070:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004074:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8004076:	4b11      	ldr	r3, [pc, #68]	; (80040bc <MX_FMC_Init+0xa0>)
 8004078:	2200      	movs	r2, #0
 800407a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800407c:	2302      	movs	r3, #2
 800407e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8004080:	2306      	movs	r3, #6
 8004082:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8004084:	2304      	movs	r3, #4
 8004086:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8004088:	2306      	movs	r3, #6
 800408a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 800408c:	2302      	movs	r3, #2
 800408e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8004090:	2302      	movs	r3, #2
 8004092:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8004094:	2302      	movs	r3, #2
 8004096:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8004098:	1d3b      	adds	r3, r7, #4
 800409a:	4619      	mov	r1, r3
 800409c:	4807      	ldr	r0, [pc, #28]	; (80040bc <MX_FMC_Init+0xa0>)
 800409e:	f00d f8a9 	bl	80111f4 <HAL_SDRAM_Init>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80040a8:	f000 f96c 	bl	8004384 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  initBspSdRam(&Error_Handler);
 80040ac:	4805      	ldr	r0, [pc, #20]	; (80040c4 <MX_FMC_Init+0xa8>)
 80040ae:	f000 fa04 	bl	80044ba <initBspSdRam>
  /* USER CODE END FMC_Init 2 */
}
 80040b2:	bf00      	nop
 80040b4:	3720      	adds	r7, #32
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	24009018 	.word	0x24009018
 80040c0:	52004140 	.word	0x52004140
 80040c4:	08004385 	.word	0x08004385

080040c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b090      	sub	sp, #64	; 0x40
 80040cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	605a      	str	r2, [r3, #4]
 80040d8:	609a      	str	r2, [r3, #8]
 80040da:	60da      	str	r2, [r3, #12]
 80040dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80040de:	4b7b      	ldr	r3, [pc, #492]	; (80042cc <MX_GPIO_Init+0x204>)
 80040e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040e4:	4a79      	ldr	r2, [pc, #484]	; (80042cc <MX_GPIO_Init+0x204>)
 80040e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040ee:	4b77      	ldr	r3, [pc, #476]	; (80042cc <MX_GPIO_Init+0x204>)
 80040f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80040fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80040fc:	4b73      	ldr	r3, [pc, #460]	; (80042cc <MX_GPIO_Init+0x204>)
 80040fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004102:	4a72      	ldr	r2, [pc, #456]	; (80042cc <MX_GPIO_Init+0x204>)
 8004104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004108:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800410c:	4b6f      	ldr	r3, [pc, #444]	; (80042cc <MX_GPIO_Init+0x204>)
 800410e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004116:	627b      	str	r3, [r7, #36]	; 0x24
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800411a:	4b6c      	ldr	r3, [pc, #432]	; (80042cc <MX_GPIO_Init+0x204>)
 800411c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004120:	4a6a      	ldr	r2, [pc, #424]	; (80042cc <MX_GPIO_Init+0x204>)
 8004122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004126:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800412a:	4b68      	ldr	r3, [pc, #416]	; (80042cc <MX_GPIO_Init+0x204>)
 800412c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004134:	623b      	str	r3, [r7, #32]
 8004136:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004138:	4b64      	ldr	r3, [pc, #400]	; (80042cc <MX_GPIO_Init+0x204>)
 800413a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800413e:	4a63      	ldr	r2, [pc, #396]	; (80042cc <MX_GPIO_Init+0x204>)
 8004140:	f043 0310 	orr.w	r3, r3, #16
 8004144:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004148:	4b60      	ldr	r3, [pc, #384]	; (80042cc <MX_GPIO_Init+0x204>)
 800414a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800414e:	f003 0310 	and.w	r3, r3, #16
 8004152:	61fb      	str	r3, [r7, #28]
 8004154:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004156:	4b5d      	ldr	r3, [pc, #372]	; (80042cc <MX_GPIO_Init+0x204>)
 8004158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800415c:	4a5b      	ldr	r2, [pc, #364]	; (80042cc <MX_GPIO_Init+0x204>)
 800415e:	f043 0302 	orr.w	r3, r3, #2
 8004162:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004166:	4b59      	ldr	r3, [pc, #356]	; (80042cc <MX_GPIO_Init+0x204>)
 8004168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	61bb      	str	r3, [r7, #24]
 8004172:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004174:	4b55      	ldr	r3, [pc, #340]	; (80042cc <MX_GPIO_Init+0x204>)
 8004176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800417a:	4a54      	ldr	r2, [pc, #336]	; (80042cc <MX_GPIO_Init+0x204>)
 800417c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004180:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004184:	4b51      	ldr	r3, [pc, #324]	; (80042cc <MX_GPIO_Init+0x204>)
 8004186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800418a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800418e:	617b      	str	r3, [r7, #20]
 8004190:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004192:	4b4e      	ldr	r3, [pc, #312]	; (80042cc <MX_GPIO_Init+0x204>)
 8004194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004198:	4a4c      	ldr	r2, [pc, #304]	; (80042cc <MX_GPIO_Init+0x204>)
 800419a:	f043 0308 	orr.w	r3, r3, #8
 800419e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041a2:	4b4a      	ldr	r3, [pc, #296]	; (80042cc <MX_GPIO_Init+0x204>)
 80041a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041a8:	f003 0308 	and.w	r3, r3, #8
 80041ac:	613b      	str	r3, [r7, #16]
 80041ae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041b0:	4b46      	ldr	r3, [pc, #280]	; (80042cc <MX_GPIO_Init+0x204>)
 80041b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041b6:	4a45      	ldr	r2, [pc, #276]	; (80042cc <MX_GPIO_Init+0x204>)
 80041b8:	f043 0301 	orr.w	r3, r3, #1
 80041bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041c0:	4b42      	ldr	r3, [pc, #264]	; (80042cc <MX_GPIO_Init+0x204>)
 80041c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80041ce:	4b3f      	ldr	r3, [pc, #252]	; (80042cc <MX_GPIO_Init+0x204>)
 80041d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041d4:	4a3d      	ldr	r2, [pc, #244]	; (80042cc <MX_GPIO_Init+0x204>)
 80041d6:	f043 0320 	orr.w	r3, r3, #32
 80041da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041de:	4b3b      	ldr	r3, [pc, #236]	; (80042cc <MX_GPIO_Init+0x204>)
 80041e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041e4:	f003 0320 	and.w	r3, r3, #32
 80041e8:	60bb      	str	r3, [r7, #8]
 80041ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80041ec:	4b37      	ldr	r3, [pc, #220]	; (80042cc <MX_GPIO_Init+0x204>)
 80041ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041f2:	4a36      	ldr	r2, [pc, #216]	; (80042cc <MX_GPIO_Init+0x204>)
 80041f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041fc:	4b33      	ldr	r3, [pc, #204]	; (80042cc <MX_GPIO_Init+0x204>)
 80041fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004206:	607b      	str	r3, [r7, #4]
 8004208:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VSYNC_FREQ_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 800420a:	2200      	movs	r2, #0
 800420c:	21c0      	movs	r1, #192	; 0xc0
 800420e:	4830      	ldr	r0, [pc, #192]	; (80042d0 <MX_GPIO_Init+0x208>)
 8004210:	f008 fbec 	bl	800c9ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 8004214:	2200      	movs	r2, #0
 8004216:	2108      	movs	r1, #8
 8004218:	482e      	ldr	r0, [pc, #184]	; (80042d4 <MX_GPIO_Init+0x20c>)
 800421a:	f008 fbe7 	bl	800c9ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 800421e:	2200      	movs	r2, #0
 8004220:	2140      	movs	r1, #64	; 0x40
 8004222:	482d      	ldr	r0, [pc, #180]	; (80042d8 <MX_GPIO_Init+0x210>)
 8004224:	f008 fbe2 	bl	800c9ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8004228:	2200      	movs	r2, #0
 800422a:	2104      	movs	r1, #4
 800422c:	482b      	ldr	r0, [pc, #172]	; (80042dc <MX_GPIO_Init+0x214>)
 800422e:	f008 fbdd 	bl	800c9ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VSYNC_FREQ_Pin RENDER_TIME_Pin */
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|RENDER_TIME_Pin;
 8004232:	23c0      	movs	r3, #192	; 0xc0
 8004234:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004236:	2301      	movs	r3, #1
 8004238:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800423a:	2300      	movs	r3, #0
 800423c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800423e:	2303      	movs	r3, #3
 8004240:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004242:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004246:	4619      	mov	r1, r3
 8004248:	4821      	ldr	r0, [pc, #132]	; (80042d0 <MX_GPIO_Init+0x208>)
 800424a:	f008 f915 	bl	800c478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800424e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004252:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004254:	2302      	movs	r3, #2
 8004256:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004258:	2300      	movs	r3, #0
 800425a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800425c:	2300      	movs	r3, #0
 800425e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004260:	2300      	movs	r3, #0
 8004262:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004264:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004268:	4619      	mov	r1, r3
 800426a:	481b      	ldr	r0, [pc, #108]	; (80042d8 <MX_GPIO_Init+0x210>)
 800426c:	f008 f904 	bl	800c478 <HAL_GPIO_Init>

  /*Configure GPIO pin : FRAME_RATE_Pin */
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 8004270:	2308      	movs	r3, #8
 8004272:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004274:	2301      	movs	r3, #1
 8004276:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004278:	2300      	movs	r3, #0
 800427a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800427c:	2303      	movs	r3, #3
 800427e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 8004280:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004284:	4619      	mov	r1, r3
 8004286:	4813      	ldr	r0, [pc, #76]	; (80042d4 <MX_GPIO_Init+0x20c>)
 8004288:	f008 f8f6 	bl	800c478 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_ACTIVE_Pin */
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 800428c:	2340      	movs	r3, #64	; 0x40
 800428e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004290:	2301      	movs	r3, #1
 8004292:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004294:	2300      	movs	r3, #0
 8004296:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004298:	2303      	movs	r3, #3
 800429a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 800429c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042a0:	4619      	mov	r1, r3
 80042a2:	480d      	ldr	r0, [pc, #52]	; (80042d8 <MX_GPIO_Init+0x210>)
 80042a4:	f008 f8e8 	bl	800c478 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80042a8:	2304      	movs	r3, #4
 80042aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042ac:	2301      	movs	r3, #1
 80042ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b0:	2300      	movs	r3, #0
 80042b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042b4:	2300      	movs	r3, #0
 80042b6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80042b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042bc:	4619      	mov	r1, r3
 80042be:	4807      	ldr	r0, [pc, #28]	; (80042dc <MX_GPIO_Init+0x214>)
 80042c0:	f008 f8da 	bl	800c478 <HAL_GPIO_Init>

}
 80042c4:	bf00      	nop
 80042c6:	3740      	adds	r7, #64	; 0x40
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	58024400 	.word	0x58024400
 80042d0:	58020400 	.word	0x58020400
 80042d4:	58021800 	.word	0x58021800
 80042d8:	58020000 	.word	0x58020000
 80042dc:	58022400 	.word	0x58022400

080042e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80042e8:	2001      	movs	r0, #1
 80042ea:	f7fc f969 	bl	80005c0 <osDelay>
 80042ee:	e7fb      	b.n	80042e8 <StartDefaultTask+0x8>

080042f0 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80042f6:	463b      	mov	r3, r7
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	605a      	str	r2, [r3, #4]
 80042fe:	609a      	str	r2, [r3, #8]
 8004300:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8004302:	f007 fddf 	bl	800bec4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004306:	2301      	movs	r3, #1
 8004308:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800430a:	2300      	movs	r3, #0
 800430c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xD0000000;
 800430e:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8004312:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8004314:	2313      	movs	r3, #19
 8004316:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8004318:	2300      	movs	r3, #0
 800431a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800431c:	2300      	movs	r3, #0
 800431e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8004320:	2303      	movs	r3, #3
 8004322:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8004324:	2301      	movs	r3, #1
 8004326:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8004328:	2300      	movs	r3, #0
 800432a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800432c:	2301      	movs	r3, #1
 800432e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8004330:	2301      	movs	r3, #1
 8004332:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004334:	463b      	mov	r3, r7
 8004336:	4618      	mov	r0, r3
 8004338:	f007 fdfc 	bl	800bf34 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800433c:	2301      	movs	r3, #1
 800433e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8004340:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8004344:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8004346:	231a      	movs	r3, #26
 8004348:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800434a:	463b      	mov	r3, r7
 800434c:	4618      	mov	r0, r3
 800434e:	f007 fdf1 	bl	800bf34 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8004352:	2004      	movs	r0, #4
 8004354:	f007 fdce 	bl	800bef4 <HAL_MPU_Enable>

}
 8004358:	bf00      	nop
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a04      	ldr	r2, [pc, #16]	; (8004380 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d101      	bne.n	8004376 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004372:	f007 fc69 	bl	800bc48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40001000 	.word	0x40001000

08004384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004388:	b672      	cpsid	i
}
 800438a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800438c:	e7fe      	b.n	800438c <Error_Handler+0x8>
	...

08004390 <initLtdcClocks>:

/**
 * @brief initLtdcClocks initialize LTDC clocks
 */
void initLtdcClocks(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b08c      	sub	sp, #48	; 0x30
 8004394:	af00      	add	r7, sp, #0
   // enable the LTDC and DMA2D clocks
   __HAL_RCC_LTDC_CLK_ENABLE();
 8004396:	4b36      	ldr	r3, [pc, #216]	; (8004470 <initLtdcClocks+0xe0>)
 8004398:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800439c:	4a34      	ldr	r2, [pc, #208]	; (8004470 <initLtdcClocks+0xe0>)
 800439e:	f043 0308 	orr.w	r3, r3, #8
 80043a2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80043a6:	4b32      	ldr	r3, [pc, #200]	; (8004470 <initLtdcClocks+0xe0>)
 80043a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	69bb      	ldr	r3, [r7, #24]

   // enable GPIOs clock
   __HAL_RCC_GPIOI_CLK_ENABLE();
 80043b4:	4b2e      	ldr	r3, [pc, #184]	; (8004470 <initLtdcClocks+0xe0>)
 80043b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043ba:	4a2d      	ldr	r2, [pc, #180]	; (8004470 <initLtdcClocks+0xe0>)
 80043bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043c4:	4b2a      	ldr	r3, [pc, #168]	; (8004470 <initLtdcClocks+0xe0>)
 80043c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	697b      	ldr	r3, [r7, #20]
   __HAL_RCC_GPIOJ_CLK_ENABLE();
 80043d2:	4b27      	ldr	r3, [pc, #156]	; (8004470 <initLtdcClocks+0xe0>)
 80043d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043d8:	4a25      	ldr	r2, [pc, #148]	; (8004470 <initLtdcClocks+0xe0>)
 80043da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043e2:	4b23      	ldr	r3, [pc, #140]	; (8004470 <initLtdcClocks+0xe0>)
 80043e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043ec:	613b      	str	r3, [r7, #16]
 80043ee:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOK_CLK_ENABLE();
 80043f0:	4b1f      	ldr	r3, [pc, #124]	; (8004470 <initLtdcClocks+0xe0>)
 80043f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043f6:	4a1e      	ldr	r2, [pc, #120]	; (8004470 <initLtdcClocks+0xe0>)
 80043f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004400:	4b1b      	ldr	r3, [pc, #108]	; (8004470 <initLtdcClocks+0xe0>)
 8004402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOH_CLK_ENABLE();
 800440e:	4b18      	ldr	r3, [pc, #96]	; (8004470 <initLtdcClocks+0xe0>)
 8004410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004414:	4a16      	ldr	r2, [pc, #88]	; (8004470 <initLtdcClocks+0xe0>)
 8004416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800441a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800441e:	4b14      	ldr	r3, [pc, #80]	; (8004470 <initLtdcClocks+0xe0>)
 8004420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004428:	60bb      	str	r3, [r7, #8]
 800442a:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_GPIOD_CLK_ENABLE();
 800442c:	4b10      	ldr	r3, [pc, #64]	; (8004470 <initLtdcClocks+0xe0>)
 800442e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004432:	4a0f      	ldr	r2, [pc, #60]	; (8004470 <initLtdcClocks+0xe0>)
 8004434:	f043 0308 	orr.w	r3, r3, #8
 8004438:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800443c:	4b0c      	ldr	r3, [pc, #48]	; (8004470 <initLtdcClocks+0xe0>)
 800443e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	607b      	str	r3, [r7, #4]
 8004448:	687b      	ldr	r3, [r7, #4]

   // LCD_DISP pin has to be manually controlled
   GPIO_InitTypeDef gpio_init_structure;
   gpio_init_structure.Pin = GPIO_PIN_7;
 800444a:	2380      	movs	r3, #128	; 0x80
 800444c:	61fb      	str	r3, [r7, #28]
   gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800444e:	2301      	movs	r3, #1
 8004450:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8004452:	f107 031c 	add.w	r3, r7, #28
 8004456:	4619      	mov	r1, r3
 8004458:	4806      	ldr	r0, [pc, #24]	; (8004474 <initLtdcClocks+0xe4>)
 800445a:	f008 f80d 	bl	800c478 <HAL_GPIO_Init>

   // assert display enable LCD_DISP pin
   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 800445e:	2201      	movs	r2, #1
 8004460:	2180      	movs	r1, #128	; 0x80
 8004462:	4804      	ldr	r0, [pc, #16]	; (8004474 <initLtdcClocks+0xe4>)
 8004464:	f008 fac2 	bl	800c9ec <HAL_GPIO_WritePin>
}
 8004468:	bf00      	nop
 800446a:	3730      	adds	r7, #48	; 0x30
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	58024400 	.word	0x58024400
 8004474:	58020c00 	.word	0x58020c00

08004478 <initBspQuadSpi>:
/**
 * @brief initBspQuadSpi initialize QSPI via BSP
 * @param error_handler callback to error handler
 */
void initBspQuadSpi(void (*error_handler)())
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
   BSP_QSPI_Init_t init;

   init.InterfaceMode = MT25TL01G_QPI_MODE;
 8004480:	2303      	movs	r3, #3
 8004482:	733b      	strb	r3, [r7, #12]
   init.TransferRate = MT25TL01G_DTR_TRANSFER;
 8004484:	2301      	movs	r3, #1
 8004486:	737b      	strb	r3, [r7, #13]
   init.DualFlashMode = MT25TL01G_DUALFLASH_ENABLE;
 8004488:	2340      	movs	r3, #64	; 0x40
 800448a:	73bb      	strb	r3, [r7, #14]

   if (BSP_QSPI_Init(0, &init) != BSP_ERROR_NONE)
 800448c:	f107 030c 	add.w	r3, r7, #12
 8004490:	4619      	mov	r1, r3
 8004492:	2000      	movs	r0, #0
 8004494:	f006 fb56 	bl	800ab44 <BSP_QSPI_Init>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <initBspQuadSpi+0x2a>
   {
      error_handler();
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4798      	blx	r3
   }

   if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 80044a2:	2000      	movs	r0, #0
 80044a4:	f006 fc28 	bl	800acf8 <BSP_QSPI_EnableMemoryMappedMode>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <initBspQuadSpi+0x3a>
   {
      error_handler();
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4798      	blx	r3
   }
}
 80044b2:	bf00      	nop
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <initBspSdRam>:
/**
 * @brief initBspSdRam initialize SDRAM/FMC via BSP
 * @param error_handler callback to error handler
 */
void initBspSdRam(void (*error_handler)())
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b082      	sub	sp, #8
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
   BSP_SDRAM_DeInit(0);
 80044c2:	2000      	movs	r0, #0
 80044c4:	f006 ff86 	bl	800b3d4 <BSP_SDRAM_DeInit>

   if (BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 80044c8:	2000      	movs	r0, #0
 80044ca:	f006 ff27 	bl	800b31c <BSP_SDRAM_Init>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <initBspSdRam+0x1e>
   {
      error_handler();
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4798      	blx	r3
   }
}
 80044d8:	bf00      	nop
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044e6:	4b0c      	ldr	r3, [pc, #48]	; (8004518 <HAL_MspInit+0x38>)
 80044e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044ec:	4a0a      	ldr	r2, [pc, #40]	; (8004518 <HAL_MspInit+0x38>)
 80044ee:	f043 0302 	orr.w	r3, r3, #2
 80044f2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80044f6:	4b08      	ldr	r3, [pc, #32]	; (8004518 <HAL_MspInit+0x38>)
 80044f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	607b      	str	r3, [r7, #4]
 8004502:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004504:	2200      	movs	r2, #0
 8004506:	210f      	movs	r1, #15
 8004508:	f06f 0001 	mvn.w	r0, #1
 800450c:	f007 fca4 	bl	800be58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004510:	bf00      	nop
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	58024400 	.word	0x58024400

0800451c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a0b      	ldr	r2, [pc, #44]	; (8004558 <HAL_CRC_MspInit+0x3c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d10e      	bne.n	800454c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800452e:	4b0b      	ldr	r3, [pc, #44]	; (800455c <HAL_CRC_MspInit+0x40>)
 8004530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004534:	4a09      	ldr	r2, [pc, #36]	; (800455c <HAL_CRC_MspInit+0x40>)
 8004536:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800453a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800453e:	4b07      	ldr	r3, [pc, #28]	; (800455c <HAL_CRC_MspInit+0x40>)
 8004540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004544:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800454c:	bf00      	nop
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	58024c00 	.word	0x58024c00
 800455c:	58024400 	.word	0x58024400

08004560 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a0e      	ldr	r2, [pc, #56]	; (80045a8 <HAL_DMA2D_MspInit+0x48>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d116      	bne.n	80045a0 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004572:	4b0e      	ldr	r3, [pc, #56]	; (80045ac <HAL_DMA2D_MspInit+0x4c>)
 8004574:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004578:	4a0c      	ldr	r2, [pc, #48]	; (80045ac <HAL_DMA2D_MspInit+0x4c>)
 800457a:	f043 0310 	orr.w	r3, r3, #16
 800457e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8004582:	4b0a      	ldr	r3, [pc, #40]	; (80045ac <HAL_DMA2D_MspInit+0x4c>)
 8004584:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004588:	f003 0310 	and.w	r3, r3, #16
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8004590:	2200      	movs	r2, #0
 8004592:	2105      	movs	r1, #5
 8004594:	205a      	movs	r0, #90	; 0x5a
 8004596:	f007 fc5f 	bl	800be58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800459a:	205a      	movs	r0, #90	; 0x5a
 800459c:	f007 fc76 	bl	800be8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80045a0:	bf00      	nop
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	52001000 	.word	0x52001000
 80045ac:	58024400 	.word	0x58024400

080045b0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b0bc      	sub	sp, #240	; 0xf0
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045b8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	605a      	str	r2, [r3, #4]
 80045c2:	609a      	str	r2, [r3, #8]
 80045c4:	60da      	str	r2, [r3, #12]
 80045c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80045c8:	f107 0320 	add.w	r3, r7, #32
 80045cc:	22bc      	movs	r2, #188	; 0xbc
 80045ce:	2100      	movs	r1, #0
 80045d0:	4618      	mov	r0, r3
 80045d2:	f01e f8dd 	bl	8022790 <memset>
  if(hltdc->Instance==LTDC)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a68      	ldr	r2, [pc, #416]	; (800477c <HAL_LTDC_MspInit+0x1cc>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	f040 80c8 	bne.w	8004772 <HAL_LTDC_MspInit+0x1c2>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80045e2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80045e6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 5;
 80045e8:	2305      	movs	r3, #5
 80045ea:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3N = 160;
 80045ec:	23a0      	movs	r3, #160	; 0xa0
 80045ee:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80045f0:	2302      	movs	r3, #2
 80045f2:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80045f4:	2302      	movs	r3, #2
 80045f6:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3R = 83;
 80045f8:	2353      	movs	r3, #83	; 0x53
 80045fa:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80045fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004600:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8004602:	2300      	movs	r3, #0
 8004604:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8004606:	2300      	movs	r3, #0
 8004608:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800460a:	f107 0320 	add.w	r3, r7, #32
 800460e:	4618      	mov	r0, r3
 8004610:	f00b fd46 	bl	80100a0 <HAL_RCCEx_PeriphCLKConfig>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 800461a:	f7ff feb3 	bl	8004384 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800461e:	4b58      	ldr	r3, [pc, #352]	; (8004780 <HAL_LTDC_MspInit+0x1d0>)
 8004620:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004624:	4a56      	ldr	r2, [pc, #344]	; (8004780 <HAL_LTDC_MspInit+0x1d0>)
 8004626:	f043 0308 	orr.w	r3, r3, #8
 800462a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800462e:	4b54      	ldr	r3, [pc, #336]	; (8004780 <HAL_LTDC_MspInit+0x1d0>)
 8004630:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004634:	f003 0308 	and.w	r3, r3, #8
 8004638:	61fb      	str	r3, [r7, #28]
 800463a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 800463c:	4b50      	ldr	r3, [pc, #320]	; (8004780 <HAL_LTDC_MspInit+0x1d0>)
 800463e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004642:	4a4f      	ldr	r2, [pc, #316]	; (8004780 <HAL_LTDC_MspInit+0x1d0>)
 8004644:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004648:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800464c:	4b4c      	ldr	r3, [pc, #304]	; (8004780 <HAL_LTDC_MspInit+0x1d0>)
 800464e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004656:	61bb      	str	r3, [r7, #24]
 8004658:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800465a:	4b49      	ldr	r3, [pc, #292]	; (8004780 <HAL_LTDC_MspInit+0x1d0>)
 800465c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004660:	4a47      	ldr	r2, [pc, #284]	; (8004780 <HAL_LTDC_MspInit+0x1d0>)
 8004662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004666:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800466a:	4b45      	ldr	r3, [pc, #276]	; (8004780 <HAL_LTDC_MspInit+0x1d0>)
 800466c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004674:	617b      	str	r3, [r7, #20]
 8004676:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004678:	4b41      	ldr	r3, [pc, #260]	; (8004780 <HAL_LTDC_MspInit+0x1d0>)
 800467a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800467e:	4a40      	ldr	r2, [pc, #256]	; (8004780 <HAL_LTDC_MspInit+0x1d0>)
 8004680:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004684:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004688:	4b3d      	ldr	r3, [pc, #244]	; (8004780 <HAL_LTDC_MspInit+0x1d0>)
 800468a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800468e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004692:	613b      	str	r3, [r7, #16]
 8004694:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004696:	4b3a      	ldr	r3, [pc, #232]	; (8004780 <HAL_LTDC_MspInit+0x1d0>)
 8004698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800469c:	4a38      	ldr	r2, [pc, #224]	; (8004780 <HAL_LTDC_MspInit+0x1d0>)
 800469e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046a6:	4b36      	ldr	r3, [pc, #216]	; (8004780 <HAL_LTDC_MspInit+0x1d0>)
 80046a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 80046b4:	23fc      	movs	r3, #252	; 0xfc
 80046b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ba:	2302      	movs	r3, #2
 80046bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c0:	2300      	movs	r3, #0
 80046c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046c6:	2302      	movs	r3, #2
 80046c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80046cc:	230e      	movs	r3, #14
 80046ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80046d2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80046d6:	4619      	mov	r1, r3
 80046d8:	482a      	ldr	r0, [pc, #168]	; (8004784 <HAL_LTDC_MspInit+0x1d4>)
 80046da:	f007 fecd 	bl	800c478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 80046de:	f24d 2303 	movw	r3, #53763	; 0xd203
 80046e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e6:	2302      	movs	r3, #2
 80046e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ec:	2300      	movs	r3, #0
 80046ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046f2:	2302      	movs	r3, #2
 80046f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80046f8:	230e      	movs	r3, #14
 80046fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80046fe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004702:	4619      	mov	r1, r3
 8004704:	4820      	ldr	r0, [pc, #128]	; (8004788 <HAL_LTDC_MspInit+0x1d8>)
 8004706:	f007 feb7 	bl	800c478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 800470a:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800470e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004712:	2302      	movs	r3, #2
 8004714:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004718:	2300      	movs	r3, #0
 800471a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800471e:	2302      	movs	r3, #2
 8004720:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004724:	230e      	movs	r3, #14
 8004726:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800472a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800472e:	4619      	mov	r1, r3
 8004730:	4816      	ldr	r0, [pc, #88]	; (800478c <HAL_LTDC_MspInit+0x1dc>)
 8004732:	f007 fea1 	bl	800c478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004736:	f44f 7300 	mov.w	r3, #512	; 0x200
 800473a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800473e:	2302      	movs	r3, #2
 8004740:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004744:	2300      	movs	r3, #0
 8004746:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800474a:	2302      	movs	r3, #2
 800474c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004750:	230e      	movs	r3, #14
 8004752:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004756:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800475a:	4619      	mov	r1, r3
 800475c:	480c      	ldr	r0, [pc, #48]	; (8004790 <HAL_LTDC_MspInit+0x1e0>)
 800475e:	f007 fe8b 	bl	800c478 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8004762:	2200      	movs	r2, #0
 8004764:	2105      	movs	r1, #5
 8004766:	2058      	movs	r0, #88	; 0x58
 8004768:	f007 fb76 	bl	800be58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800476c:	2058      	movs	r0, #88	; 0x58
 800476e:	f007 fb8d 	bl	800be8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8004772:	bf00      	nop
 8004774:	37f0      	adds	r7, #240	; 0xf0
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	50001000 	.word	0x50001000
 8004780:	58024400 	.word	0x58024400
 8004784:	58022800 	.word	0x58022800
 8004788:	58022000 	.word	0x58022000
 800478c:	58022400 	.word	0x58022400
 8004790:	58021c00 	.word	0x58021c00

08004794 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b0bc      	sub	sp, #240	; 0xf0
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800479c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	605a      	str	r2, [r3, #4]
 80047a6:	609a      	str	r2, [r3, #8]
 80047a8:	60da      	str	r2, [r3, #12]
 80047aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80047ac:	f107 0320 	add.w	r3, r7, #32
 80047b0:	22bc      	movs	r2, #188	; 0xbc
 80047b2:	2100      	movs	r1, #0
 80047b4:	4618      	mov	r0, r3
 80047b6:	f01d ffeb 	bl	8022790 <memset>
  if(hqspi->Instance==QUADSPI)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a76      	ldr	r2, [pc, #472]	; (8004998 <HAL_QSPI_MspInit+0x204>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	f040 80e4 	bne.w	800498e <HAL_QSPI_MspInit+0x1fa>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80047c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047ca:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80047cc:	2300      	movs	r3, #0
 80047ce:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80047d0:	f107 0320 	add.w	r3, r7, #32
 80047d4:	4618      	mov	r0, r3
 80047d6:	f00b fc63 	bl	80100a0 <HAL_RCCEx_PeriphCLKConfig>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 80047e0:	f7ff fdd0 	bl	8004384 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80047e4:	4b6d      	ldr	r3, [pc, #436]	; (800499c <HAL_QSPI_MspInit+0x208>)
 80047e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80047ea:	4a6c      	ldr	r2, [pc, #432]	; (800499c <HAL_QSPI_MspInit+0x208>)
 80047ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047f0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80047f4:	4b69      	ldr	r3, [pc, #420]	; (800499c <HAL_QSPI_MspInit+0x208>)
 80047f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80047fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047fe:	61fb      	str	r3, [r7, #28]
 8004800:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004802:	4b66      	ldr	r3, [pc, #408]	; (800499c <HAL_QSPI_MspInit+0x208>)
 8004804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004808:	4a64      	ldr	r2, [pc, #400]	; (800499c <HAL_QSPI_MspInit+0x208>)
 800480a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800480e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004812:	4b62      	ldr	r3, [pc, #392]	; (800499c <HAL_QSPI_MspInit+0x208>)
 8004814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481c:	61bb      	str	r3, [r7, #24]
 800481e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004820:	4b5e      	ldr	r3, [pc, #376]	; (800499c <HAL_QSPI_MspInit+0x208>)
 8004822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004826:	4a5d      	ldr	r2, [pc, #372]	; (800499c <HAL_QSPI_MspInit+0x208>)
 8004828:	f043 0320 	orr.w	r3, r3, #32
 800482c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004830:	4b5a      	ldr	r3, [pc, #360]	; (800499c <HAL_QSPI_MspInit+0x208>)
 8004832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004836:	f003 0320 	and.w	r3, r3, #32
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800483e:	4b57      	ldr	r3, [pc, #348]	; (800499c <HAL_QSPI_MspInit+0x208>)
 8004840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004844:	4a55      	ldr	r2, [pc, #340]	; (800499c <HAL_QSPI_MspInit+0x208>)
 8004846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800484a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800484e:	4b53      	ldr	r3, [pc, #332]	; (800499c <HAL_QSPI_MspInit+0x208>)
 8004850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004858:	613b      	str	r3, [r7, #16]
 800485a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800485c:	4b4f      	ldr	r3, [pc, #316]	; (800499c <HAL_QSPI_MspInit+0x208>)
 800485e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004862:	4a4e      	ldr	r2, [pc, #312]	; (800499c <HAL_QSPI_MspInit+0x208>)
 8004864:	f043 0308 	orr.w	r3, r3, #8
 8004868:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800486c:	4b4b      	ldr	r3, [pc, #300]	; (800499c <HAL_QSPI_MspInit+0x208>)
 800486e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 800487a:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800487e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004882:	2302      	movs	r3, #2
 8004884:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004888:	2300      	movs	r3, #0
 800488a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800488e:	2303      	movs	r3, #3
 8004890:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004894:	2309      	movs	r3, #9
 8004896:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800489a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800489e:	4619      	mov	r1, r3
 80048a0:	483f      	ldr	r0, [pc, #252]	; (80049a0 <HAL_QSPI_MspInit+0x20c>)
 80048a2:	f007 fde9 	bl	800c478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80048a6:	2340      	movs	r3, #64	; 0x40
 80048a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ac:	2302      	movs	r3, #2
 80048ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048b2:	2301      	movs	r3, #1
 80048b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048b8:	2303      	movs	r3, #3
 80048ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80048be:	230a      	movs	r3, #10
 80048c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80048c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80048c8:	4619      	mov	r1, r3
 80048ca:	4835      	ldr	r0, [pc, #212]	; (80049a0 <HAL_QSPI_MspInit+0x20c>)
 80048cc:	f007 fdd4 	bl	800c478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 80048d0:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80048d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d8:	2302      	movs	r3, #2
 80048da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048de:	2300      	movs	r3, #0
 80048e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048e4:	2303      	movs	r3, #3
 80048e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80048ea:	2309      	movs	r3, #9
 80048ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80048f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80048f4:	4619      	mov	r1, r3
 80048f6:	482b      	ldr	r0, [pc, #172]	; (80049a4 <HAL_QSPI_MspInit+0x210>)
 80048f8:	f007 fdbe 	bl	800c478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80048fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004900:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004904:	2302      	movs	r3, #2
 8004906:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800490a:	2300      	movs	r3, #0
 800490c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004910:	2303      	movs	r3, #3
 8004912:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004916:	230a      	movs	r3, #10
 8004918:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800491c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004920:	4619      	mov	r1, r3
 8004922:	4820      	ldr	r0, [pc, #128]	; (80049a4 <HAL_QSPI_MspInit+0x210>)
 8004924:	f007 fda8 	bl	800c478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004928:	230c      	movs	r3, #12
 800492a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800492e:	2302      	movs	r3, #2
 8004930:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004934:	2300      	movs	r3, #0
 8004936:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800493a:	2303      	movs	r3, #3
 800493c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004940:	2309      	movs	r3, #9
 8004942:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004946:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800494a:	4619      	mov	r1, r3
 800494c:	4816      	ldr	r0, [pc, #88]	; (80049a8 <HAL_QSPI_MspInit+0x214>)
 800494e:	f007 fd93 	bl	800c478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004952:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004956:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800495a:	2302      	movs	r3, #2
 800495c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004960:	2300      	movs	r3, #0
 8004962:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004966:	2303      	movs	r3, #3
 8004968:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800496c:	2309      	movs	r3, #9
 800496e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004972:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004976:	4619      	mov	r1, r3
 8004978:	480c      	ldr	r0, [pc, #48]	; (80049ac <HAL_QSPI_MspInit+0x218>)
 800497a:	f007 fd7d 	bl	800c478 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 800497e:	2200      	movs	r2, #0
 8004980:	2105      	movs	r1, #5
 8004982:	205c      	movs	r0, #92	; 0x5c
 8004984:	f007 fa68 	bl	800be58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8004988:	205c      	movs	r0, #92	; 0x5c
 800498a:	f007 fa7f 	bl	800be8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800498e:	bf00      	nop
 8004990:	37f0      	adds	r7, #240	; 0xf0
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	52005000 	.word	0x52005000
 800499c:	58024400 	.word	0x58024400
 80049a0:	58021800 	.word	0x58021800
 80049a4:	58021400 	.word	0x58021400
 80049a8:	58021c00 	.word	0x58021c00
 80049ac:	58020c00 	.word	0x58020c00

080049b0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b0b6      	sub	sp, #216	; 0xd8
 80049b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80049b6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80049ba:	2200      	movs	r2, #0
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	605a      	str	r2, [r3, #4]
 80049c0:	609a      	str	r2, [r3, #8]
 80049c2:	60da      	str	r2, [r3, #12]
 80049c4:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80049c6:	4b4f      	ldr	r3, [pc, #316]	; (8004b04 <HAL_FMC_MspInit+0x154>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f040 8096 	bne.w	8004afc <HAL_FMC_MspInit+0x14c>
    return;
  }
  FMC_Initialized = 1;
 80049d0:	4b4c      	ldr	r3, [pc, #304]	; (8004b04 <HAL_FMC_MspInit+0x154>)
 80049d2:	2201      	movs	r2, #1
 80049d4:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80049d6:	f107 0308 	add.w	r3, r7, #8
 80049da:	22bc      	movs	r2, #188	; 0xbc
 80049dc:	2100      	movs	r1, #0
 80049de:	4618      	mov	r0, r3
 80049e0:	f01d fed6 	bl	8022790 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80049e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049e8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80049ee:	f107 0308 	add.w	r3, r7, #8
 80049f2:	4618      	mov	r0, r3
 80049f4:	f00b fb54 	bl	80100a0 <HAL_RCCEx_PeriphCLKConfig>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <HAL_FMC_MspInit+0x52>
    {
      Error_Handler();
 80049fe:	f7ff fcc1 	bl	8004384 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004a02:	4b41      	ldr	r3, [pc, #260]	; (8004b08 <HAL_FMC_MspInit+0x158>)
 8004a04:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004a08:	4a3f      	ldr	r2, [pc, #252]	; (8004b08 <HAL_FMC_MspInit+0x158>)
 8004a0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a0e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8004a12:	4b3d      	ldr	r3, [pc, #244]	; (8004b08 <HAL_FMC_MspInit+0x158>)
 8004a14:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004a18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a1c:	607b      	str	r3, [r7, #4]
 8004a1e:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8004a20:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004a24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a28:	2302      	movs	r3, #2
 8004a2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a34:	2303      	movs	r3, #3
 8004a36:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004a3a:	230c      	movs	r3, #12
 8004a3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a40:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004a44:	4619      	mov	r1, r3
 8004a46:	4831      	ldr	r0, [pc, #196]	; (8004b0c <HAL_FMC_MspInit+0x15c>)
 8004a48:	f007 fd16 	bl	800c478 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8004a4c:	f248 1333 	movw	r3, #33075	; 0x8133
 8004a50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a54:	2302      	movs	r3, #2
 8004a56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a60:	2303      	movs	r3, #3
 8004a62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004a66:	230c      	movs	r3, #12
 8004a68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004a6c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004a70:	4619      	mov	r1, r3
 8004a72:	4827      	ldr	r0, [pc, #156]	; (8004b10 <HAL_FMC_MspInit+0x160>)
 8004a74:	f007 fd00 	bl	800c478 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8004a78:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004a7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a80:	2302      	movs	r3, #2
 8004a82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004a92:	230c      	movs	r3, #12
 8004a94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a98:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	481d      	ldr	r0, [pc, #116]	; (8004b14 <HAL_FMC_MspInit+0x164>)
 8004aa0:	f007 fcea 	bl	800c478 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8004aa4:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004aa8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aac:	2302      	movs	r3, #2
 8004aae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004abe:	230c      	movs	r3, #12
 8004ac0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004ac4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004ac8:	4619      	mov	r1, r3
 8004aca:	4813      	ldr	r0, [pc, #76]	; (8004b18 <HAL_FMC_MspInit+0x168>)
 8004acc:	f007 fcd4 	bl	800c478 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004ad0:	23e0      	movs	r3, #224	; 0xe0
 8004ad2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004adc:	2300      	movs	r3, #0
 8004ade:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004ae8:	230c      	movs	r3, #12
 8004aea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004aee:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004af2:	4619      	mov	r1, r3
 8004af4:	4809      	ldr	r0, [pc, #36]	; (8004b1c <HAL_FMC_MspInit+0x16c>)
 8004af6:	f007 fcbf 	bl	800c478 <HAL_GPIO_Init>
 8004afa:	e000      	b.n	8004afe <HAL_FMC_MspInit+0x14e>
    return;
 8004afc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8004afe:	37d8      	adds	r7, #216	; 0xd8
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	24009054 	.word	0x24009054
 8004b08:	58024400 	.word	0x58024400
 8004b0c:	58021000 	.word	0x58021000
 8004b10:	58021800 	.word	0x58021800
 8004b14:	58020c00 	.word	0x58020c00
 8004b18:	58021400 	.word	0x58021400
 8004b1c:	58021c00 	.word	0x58021c00

08004b20 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004b28:	f7ff ff42 	bl	80049b0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8004b2c:	bf00      	nop
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_FMC_MspDeInit>:

static uint32_t FMC_DeInitialized = 0;

static void HAL_FMC_MspDeInit(void){
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 8004b38:	4b14      	ldr	r3, [pc, #80]	; (8004b8c <HAL_FMC_MspDeInit+0x58>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d123      	bne.n	8004b88 <HAL_FMC_MspDeInit+0x54>
    return;
  }
  FMC_DeInitialized = 1;
 8004b40:	4b12      	ldr	r3, [pc, #72]	; (8004b8c <HAL_FMC_MspDeInit+0x58>)
 8004b42:	2201      	movs	r2, #1
 8004b44:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_DISABLE();
 8004b46:	4b12      	ldr	r3, [pc, #72]	; (8004b90 <HAL_FMC_MspDeInit+0x5c>)
 8004b48:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004b4c:	4a10      	ldr	r2, [pc, #64]	; (8004b90 <HAL_FMC_MspDeInit+0x5c>)
 8004b4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b52:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8004b56:	f64f 7183 	movw	r1, #65411	; 0xff83
 8004b5a:	480e      	ldr	r0, [pc, #56]	; (8004b94 <HAL_FMC_MspDeInit+0x60>)
 8004b5c:	f007 fe3c 	bl	800c7d8 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14);

  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8004b60:	f248 1133 	movw	r1, #33075	; 0x8133
 8004b64:	480c      	ldr	r0, [pc, #48]	; (8004b98 <HAL_FMC_MspDeInit+0x64>)
 8004b66:	f007 fe37 	bl	800c7d8 <HAL_GPIO_DeInit>
                          |GPIO_PIN_0|GPIO_PIN_1);

  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8004b6a:	f24c 7103 	movw	r1, #50947	; 0xc703
 8004b6e:	480b      	ldr	r0, [pc, #44]	; (8004b9c <HAL_FMC_MspDeInit+0x68>)
 8004b70:	f007 fe32 	bl	800c7d8 <HAL_GPIO_DeInit>
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8);

  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8004b74:	f64f 013f 	movw	r1, #63551	; 0xf83f
 8004b78:	4809      	ldr	r0, [pc, #36]	; (8004ba0 <HAL_FMC_MspDeInit+0x6c>)
 8004b7a:	f007 fe2d 	bl	800c7d8 <HAL_GPIO_DeInit>
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11);

  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8004b7e:	21e0      	movs	r1, #224	; 0xe0
 8004b80:	4808      	ldr	r0, [pc, #32]	; (8004ba4 <HAL_FMC_MspDeInit+0x70>)
 8004b82:	f007 fe29 	bl	800c7d8 <HAL_GPIO_DeInit>
 8004b86:	e000      	b.n	8004b8a <HAL_FMC_MspDeInit+0x56>
    return;
 8004b88:	bf00      	nop

  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	24009058 	.word	0x24009058
 8004b90:	58024400 	.word	0x58024400
 8004b94:	58021000 	.word	0x58021000
 8004b98:	58021800 	.word	0x58021800
 8004b9c:	58020c00 	.word	0x58020c00
 8004ba0:	58021400 	.word	0x58021400
 8004ba4:	58021c00 	.word	0x58021c00

08004ba8 <HAL_SDRAM_MspDeInit>:

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspDeInit 0 */

  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
 8004bb0:	f7ff ffc0 	bl	8004b34 <HAL_FMC_MspDeInit>
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 8004bb4:	bf00      	nop
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b090      	sub	sp, #64	; 0x40
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b0f      	cmp	r3, #15
 8004bc8:	d827      	bhi.n	8004c1a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8004bca:	2200      	movs	r2, #0
 8004bcc:	6879      	ldr	r1, [r7, #4]
 8004bce:	2036      	movs	r0, #54	; 0x36
 8004bd0:	f007 f942 	bl	800be58 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004bd4:	2036      	movs	r0, #54	; 0x36
 8004bd6:	f007 f959 	bl	800be8c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8004bda:	4a29      	ldr	r2, [pc, #164]	; (8004c80 <HAL_InitTick+0xc4>)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004be0:	4b28      	ldr	r3, [pc, #160]	; (8004c84 <HAL_InitTick+0xc8>)
 8004be2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004be6:	4a27      	ldr	r2, [pc, #156]	; (8004c84 <HAL_InitTick+0xc8>)
 8004be8:	f043 0310 	orr.w	r3, r3, #16
 8004bec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004bf0:	4b24      	ldr	r3, [pc, #144]	; (8004c84 <HAL_InitTick+0xc8>)
 8004bf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004bf6:	f003 0310 	and.w	r3, r3, #16
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004bfe:	f107 0210 	add.w	r2, r7, #16
 8004c02:	f107 0314 	add.w	r3, r7, #20
 8004c06:	4611      	mov	r1, r2
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f00b fa07 	bl	801001c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c10:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d106      	bne.n	8004c26 <HAL_InitTick+0x6a>
 8004c18:	e001      	b.n	8004c1e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e02b      	b.n	8004c76 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004c1e:	f00b f9d1 	bl	800ffc4 <HAL_RCC_GetPCLK1Freq>
 8004c22:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004c24:	e004      	b.n	8004c30 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004c26:	f00b f9cd 	bl	800ffc4 <HAL_RCC_GetPCLK1Freq>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c32:	4a15      	ldr	r2, [pc, #84]	; (8004c88 <HAL_InitTick+0xcc>)
 8004c34:	fba2 2303 	umull	r2, r3, r2, r3
 8004c38:	0c9b      	lsrs	r3, r3, #18
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004c3e:	4b13      	ldr	r3, [pc, #76]	; (8004c8c <HAL_InitTick+0xd0>)
 8004c40:	4a13      	ldr	r2, [pc, #76]	; (8004c90 <HAL_InitTick+0xd4>)
 8004c42:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004c44:	4b11      	ldr	r3, [pc, #68]	; (8004c8c <HAL_InitTick+0xd0>)
 8004c46:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004c4a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004c4c:	4a0f      	ldr	r2, [pc, #60]	; (8004c8c <HAL_InitTick+0xd0>)
 8004c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c50:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004c52:	4b0e      	ldr	r3, [pc, #56]	; (8004c8c <HAL_InitTick+0xd0>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c58:	4b0c      	ldr	r3, [pc, #48]	; (8004c8c <HAL_InitTick+0xd0>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004c5e:	480b      	ldr	r0, [pc, #44]	; (8004c8c <HAL_InitTick+0xd0>)
 8004c60:	f00c fb7d 	bl	801135e <HAL_TIM_Base_Init>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d104      	bne.n	8004c74 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004c6a:	4808      	ldr	r0, [pc, #32]	; (8004c8c <HAL_InitTick+0xd0>)
 8004c6c:	f00c fbd8 	bl	8011420 <HAL_TIM_Base_Start_IT>
 8004c70:	4603      	mov	r3, r0
 8004c72:	e000      	b.n	8004c76 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3740      	adds	r7, #64	; 0x40
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	24000048 	.word	0x24000048
 8004c84:	58024400 	.word	0x58024400
 8004c88:	431bde83 	.word	0x431bde83
 8004c8c:	2400905c 	.word	0x2400905c
 8004c90:	40001000 	.word	0x40001000

08004c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c94:	b480      	push	{r7}
 8004c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004c98:	e7fe      	b.n	8004c98 <NMI_Handler+0x4>

08004c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c9e:	e7fe      	b.n	8004c9e <HardFault_Handler+0x4>

08004ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ca4:	e7fe      	b.n	8004ca4 <MemManage_Handler+0x4>

08004ca6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004caa:	e7fe      	b.n	8004caa <BusFault_Handler+0x4>

08004cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004cb0:	e7fe      	b.n	8004cb0 <UsageFault_Handler+0x4>

08004cb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004cb6:	bf00      	nop
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004cc4:	4802      	ldr	r0, [pc, #8]	; (8004cd0 <TIM6_DAC_IRQHandler+0x10>)
 8004cc6:	f00c fc23 	bl	8011510 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004cca:	bf00      	nop
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	2400905c 	.word	0x2400905c

08004cd4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004cd8:	4802      	ldr	r0, [pc, #8]	; (8004ce4 <LTDC_IRQHandler+0x10>)
 8004cda:	f008 fe13 	bl	800d904 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004cde:	bf00      	nop
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	24008f24 	.word	0x24008f24

08004ce8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004cec:	4802      	ldr	r0, [pc, #8]	; (8004cf8 <DMA2D_IRQHandler+0x10>)
 8004cee:	f007 fab3 	bl	800c258 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004cf2:	bf00      	nop
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	24008ebc 	.word	0x24008ebc

08004cfc <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8004d00:	4802      	ldr	r0, [pc, #8]	; (8004d0c <QUADSPI_IRQHandler+0x10>)
 8004d02:	f009 faf9 	bl	800e2f8 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8004d06:	bf00      	nop
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	24008fcc 	.word	0x24008fcc

08004d10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
	return 1;
 8004d14:	2301      	movs	r3, #1
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <_kill>:

int _kill(int pid, int sig)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004d2a:	f01d fcd7 	bl	80226dc <__errno>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2216      	movs	r2, #22
 8004d32:	601a      	str	r2, [r3, #0]
	return -1;
 8004d34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <_exit>:

void _exit (int status)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004d48:	f04f 31ff 	mov.w	r1, #4294967295
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7ff ffe7 	bl	8004d20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004d52:	e7fe      	b.n	8004d52 <_exit+0x12>

08004d54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d60:	2300      	movs	r3, #0
 8004d62:	617b      	str	r3, [r7, #20]
 8004d64:	e00a      	b.n	8004d7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004d66:	f3af 8000 	nop.w
 8004d6a:	4601      	mov	r1, r0
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	1c5a      	adds	r2, r3, #1
 8004d70:	60ba      	str	r2, [r7, #8]
 8004d72:	b2ca      	uxtb	r2, r1
 8004d74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	dbf0      	blt.n	8004d66 <_read+0x12>
	}

return len;
 8004d84:	687b      	ldr	r3, [r7, #4]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b086      	sub	sp, #24
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	60f8      	str	r0, [r7, #12]
 8004d96:	60b9      	str	r1, [r7, #8]
 8004d98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	617b      	str	r3, [r7, #20]
 8004d9e:	e009      	b.n	8004db4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	60ba      	str	r2, [r7, #8]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	3301      	adds	r3, #1
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	dbf1      	blt.n	8004da0 <_write+0x12>
	}
	return len;
 8004dbc:	687b      	ldr	r3, [r7, #4]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3718      	adds	r7, #24
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <_close>:

int _close(int file)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b083      	sub	sp, #12
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
	return -1;
 8004dce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b083      	sub	sp, #12
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
 8004de6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004dee:	605a      	str	r2, [r3, #4]
	return 0;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <_isatty>:

int _isatty(int file)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
	return 1;
 8004e06:	2301      	movs	r3, #1
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
	return 0;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
	...

08004e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e38:	4a14      	ldr	r2, [pc, #80]	; (8004e8c <_sbrk+0x5c>)
 8004e3a:	4b15      	ldr	r3, [pc, #84]	; (8004e90 <_sbrk+0x60>)
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e44:	4b13      	ldr	r3, [pc, #76]	; (8004e94 <_sbrk+0x64>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d102      	bne.n	8004e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e4c:	4b11      	ldr	r3, [pc, #68]	; (8004e94 <_sbrk+0x64>)
 8004e4e:	4a12      	ldr	r2, [pc, #72]	; (8004e98 <_sbrk+0x68>)
 8004e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e52:	4b10      	ldr	r3, [pc, #64]	; (8004e94 <_sbrk+0x64>)
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4413      	add	r3, r2
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d207      	bcs.n	8004e70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e60:	f01d fc3c 	bl	80226dc <__errno>
 8004e64:	4603      	mov	r3, r0
 8004e66:	220c      	movs	r2, #12
 8004e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e6e:	e009      	b.n	8004e84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004e70:	4b08      	ldr	r3, [pc, #32]	; (8004e94 <_sbrk+0x64>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004e76:	4b07      	ldr	r3, [pc, #28]	; (8004e94 <_sbrk+0x64>)
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	4a05      	ldr	r2, [pc, #20]	; (8004e94 <_sbrk+0x64>)
 8004e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004e82:	68fb      	ldr	r3, [r7, #12]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3718      	adds	r7, #24
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	24080000 	.word	0x24080000
 8004e90:	00001000 	.word	0x00001000
 8004e94:	240090a8 	.word	0x240090a8
 8004e98:	2400b148 	.word	0x2400b148

08004e9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004e9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ed4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004ea0:	f004 fa64 	bl	800936c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004ea4:	480c      	ldr	r0, [pc, #48]	; (8004ed8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004ea6:	490d      	ldr	r1, [pc, #52]	; (8004edc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004ea8:	4a0d      	ldr	r2, [pc, #52]	; (8004ee0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004eac:	e002      	b.n	8004eb4 <LoopCopyDataInit>

08004eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004eb2:	3304      	adds	r3, #4

08004eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004eb8:	d3f9      	bcc.n	8004eae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004eba:	4a0a      	ldr	r2, [pc, #40]	; (8004ee4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004ebc:	4c0a      	ldr	r4, [pc, #40]	; (8004ee8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ec0:	e001      	b.n	8004ec6 <LoopFillZerobss>

08004ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ec4:	3204      	adds	r2, #4

08004ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ec8:	d3fb      	bcc.n	8004ec2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004eca:	f01d fc1f 	bl	802270c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ece:	f7fe fe5b 	bl	8003b88 <main>
  bx  lr
 8004ed2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004ed4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004ed8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004edc:	2400012c 	.word	0x2400012c
  ldr r2, =_sidata
 8004ee0:	08025540 	.word	0x08025540
  ldr r2, =_sbss
 8004ee4:	2400012c 	.word	0x2400012c
  ldr r4, =_ebss
 8004ee8:	2400b148 	.word	0x2400b148

08004eec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004eec:	e7fe      	b.n	8004eec <ADC3_IRQHandler>

08004eee <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8004ef2:	f001 fd29 	bl	8006948 <touchgfx_init>
}
 8004ef6:	bf00      	nop
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b082      	sub	sp, #8
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8004f02:	f001 fd4b 	bl	800699c <touchgfx_taskEntry>
}
 8004f06:	bf00      	nop
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
	...

08004f10 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
    {
 8004f18:	4a04      	ldr	r2, [pc, #16]	; (8004f2c <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	601a      	str	r2, [r3, #0]
    }
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4618      	mov	r0, r3
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	080243cc 	.word	0x080243cc

08004f30 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
    }
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7ff ffe9 	bl	8004f10 <_ZN8touchgfx15TouchControllerD1Ev>
 8004f3e:	2104      	movs	r1, #4
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f01d fb6a 	bl	802261a <_ZdlPvj>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3708      	adds	r7, #8
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "stm32h745i_touchcontroller.hpp"

void STM32TouchController::init()
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
    STM32H745ITouchController::init();
 8004f58:	f000 fb50 	bl	80055fc <_ZN25STM32H745ITouchController4initEv>
}
 8004f5c:	bf00      	nop
 8004f5e:	3708      	adds	r7, #8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return STM32H745ITouchController::sampleTouch(x, y);
 8004f70:	6879      	ldr	r1, [r7, #4]
 8004f72:	68b8      	ldr	r0, [r7, #8]
 8004f74:	f000 fb66 	bl	8005644 <_ZN25STM32H745ITouchController11sampleTouchERlS0_>
 8004f78:	4603      	mov	r3, r0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
	...

08004f84 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	4a05      	ldr	r2, [pc, #20]	; (8004fa4 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7ff ffbb 	bl	8004f10 <_ZN8touchgfx15TouchControllerD1Ev>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	080243b4 	.word	0x080243b4

08004fa8 <_ZN20STM32TouchControllerD0Ev>:
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7ff ffe7 	bl	8004f84 <_ZN20STM32TouchControllerD1Ev>
 8004fb6:	2104      	movs	r1, #4
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f01d fb2e 	bl	802261a <_ZdlPvj>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	4603      	mov	r3, r0
 8004fd0:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8004fd2:	79fb      	ldrb	r3, [r7, #7]
 8004fd4:	2b03      	cmp	r3, #3
 8004fd6:	d847      	bhi.n	8005068 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa0>
 8004fd8:	a201      	add	r2, pc, #4	; (adr r2, 8004fe0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8004fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fde:	bf00      	nop
 8004fe0:	08004ff1 	.word	0x08004ff1
 8004fe4:	0800500f 	.word	0x0800500f
 8004fe8:	0800502d 	.word	0x0800502d
 8004fec:	0800504b 	.word	0x0800504b
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8004ff0:	79fb      	ldrb	r3, [r7, #7]
 8004ff2:	4a1f      	ldr	r2, [pc, #124]	; (8005070 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>)
 8004ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	bf0c      	ite	eq
 8004ffc:	2301      	moveq	r3, #1
 8004ffe:	2300      	movne	r3, #0
 8005000:	b2db      	uxtb	r3, r3
 8005002:	461a      	mov	r2, r3
 8005004:	2140      	movs	r1, #64	; 0x40
 8005006:	481b      	ldr	r0, [pc, #108]	; (8005074 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xac>)
 8005008:	f007 fcf0 	bl	800c9ec <HAL_GPIO_WritePin>
#endif
        break;
 800500c:	e02c      	b.n	8005068 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa0>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 800500e:	79fb      	ldrb	r3, [r7, #7]
 8005010:	4a17      	ldr	r2, [pc, #92]	; (8005070 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>)
 8005012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005016:	2b00      	cmp	r3, #0
 8005018:	bf0c      	ite	eq
 800501a:	2301      	moveq	r3, #1
 800501c:	2300      	movne	r3, #0
 800501e:	b2db      	uxtb	r3, r3
 8005020:	461a      	mov	r2, r3
 8005022:	2180      	movs	r1, #128	; 0x80
 8005024:	4813      	ldr	r0, [pc, #76]	; (8005074 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xac>)
 8005026:	f007 fce1 	bl	800c9ec <HAL_GPIO_WritePin>
#endif
        break;
 800502a:	e01d      	b.n	8005068 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa0>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 800502c:	79fb      	ldrb	r3, [r7, #7]
 800502e:	4a10      	ldr	r2, [pc, #64]	; (8005070 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>)
 8005030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005034:	2b00      	cmp	r3, #0
 8005036:	bf0c      	ite	eq
 8005038:	2301      	moveq	r3, #1
 800503a:	2300      	movne	r3, #0
 800503c:	b2db      	uxtb	r3, r3
 800503e:	461a      	mov	r2, r3
 8005040:	2108      	movs	r1, #8
 8005042:	480d      	ldr	r0, [pc, #52]	; (8005078 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb0>)
 8005044:	f007 fcd2 	bl	800c9ec <HAL_GPIO_WritePin>
#endif
        break;
 8005048:	e00e      	b.n	8005068 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa0>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800504a:	79fb      	ldrb	r3, [r7, #7]
 800504c:	4a08      	ldr	r2, [pc, #32]	; (8005070 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>)
 800504e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005052:	2b00      	cmp	r3, #0
 8005054:	bf0c      	ite	eq
 8005056:	2301      	moveq	r3, #1
 8005058:	2300      	movne	r3, #0
 800505a:	b2db      	uxtb	r3, r3
 800505c:	461a      	mov	r2, r3
 800505e:	2140      	movs	r1, #64	; 0x40
 8005060:	4806      	ldr	r0, [pc, #24]	; (800507c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb4>)
 8005062:	f007 fcc3 	bl	800c9ec <HAL_GPIO_WritePin>
#endif
        break;
 8005066:	bf00      	nop
    }
}
 8005068:	bf00      	nop
 800506a:	3708      	adds	r7, #8
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	240090ac 	.word	0x240090ac
 8005074:	58020400 	.word	0x58020400
 8005078:	58021800 	.word	0x58021800
 800507c:	58020000 	.word	0x58020000

08005080 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	4603      	mov	r3, r0
 8005088:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800508a:	79fb      	ldrb	r3, [r7, #7]
 800508c:	2b03      	cmp	r3, #3
 800508e:	d847      	bhi.n	8005120 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa0>
 8005090:	a201      	add	r2, pc, #4	; (adr r2, 8005098 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8005092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005096:	bf00      	nop
 8005098:	080050a9 	.word	0x080050a9
 800509c:	080050c7 	.word	0x080050c7
 80050a0:	080050e5 	.word	0x080050e5
 80050a4:	08005103 	.word	0x08005103
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 80050a8:	79fb      	ldrb	r3, [r7, #7]
 80050aa:	4a1f      	ldr	r2, [pc, #124]	; (8005128 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>)
 80050ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x38>
 80050b4:	2301      	movs	r3, #1
 80050b6:	e000      	b.n	80050ba <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x3a>
 80050b8:	2300      	movs	r3, #0
 80050ba:	461a      	mov	r2, r3
 80050bc:	2140      	movs	r1, #64	; 0x40
 80050be:	481b      	ldr	r0, [pc, #108]	; (800512c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xac>)
 80050c0:	f007 fc94 	bl	800c9ec <HAL_GPIO_WritePin>
#endif
        break;
 80050c4:	e02c      	b.n	8005120 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa0>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 80050c6:	79fb      	ldrb	r3, [r7, #7]
 80050c8:	4a17      	ldr	r2, [pc, #92]	; (8005128 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>)
 80050ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x56>
 80050d2:	2301      	movs	r3, #1
 80050d4:	e000      	b.n	80050d8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>
 80050d6:	2300      	movs	r3, #0
 80050d8:	461a      	mov	r2, r3
 80050da:	2180      	movs	r1, #128	; 0x80
 80050dc:	4813      	ldr	r0, [pc, #76]	; (800512c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xac>)
 80050de:	f007 fc85 	bl	800c9ec <HAL_GPIO_WritePin>
#endif
        break;
 80050e2:	e01d      	b.n	8005120 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa0>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 80050e4:	79fb      	ldrb	r3, [r7, #7]
 80050e6:	4a10      	ldr	r2, [pc, #64]	; (8005128 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>)
 80050e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>
 80050f0:	2301      	movs	r3, #1
 80050f2:	e000      	b.n	80050f6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x76>
 80050f4:	2300      	movs	r3, #0
 80050f6:	461a      	mov	r2, r3
 80050f8:	2108      	movs	r1, #8
 80050fa:	480d      	ldr	r0, [pc, #52]	; (8005130 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb0>)
 80050fc:	f007 fc76 	bl	800c9ec <HAL_GPIO_WritePin>
#endif
        break;
 8005100:	e00e      	b.n	8005120 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa0>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8005102:	79fb      	ldrb	r3, [r7, #7]
 8005104:	4a08      	ldr	r2, [pc, #32]	; (8005128 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>)
 8005106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x92>
 800510e:	2301      	movs	r3, #1
 8005110:	e000      	b.n	8005114 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x94>
 8005112:	2300      	movs	r3, #0
 8005114:	461a      	mov	r2, r3
 8005116:	2140      	movs	r1, #64	; 0x40
 8005118:	4806      	ldr	r0, [pc, #24]	; (8005134 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb4>)
 800511a:	f007 fc67 	bl	800c9ec <HAL_GPIO_WritePin>
#endif
        break;
 800511e:	bf00      	nop
    }
}
 8005120:	bf00      	nop
 8005122:	3708      	adds	r7, #8
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	240090ac 	.word	0x240090ac
 800512c:	58020400 	.word	0x58020400
 8005130:	58021800 	.word	0x58021800
 8005134:	58020000 	.word	0x58020000

08005138 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	4603      	mov	r3, r0
 8005140:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8005142:	79fb      	ldrb	r3, [r7, #7]
 8005144:	2b03      	cmp	r3, #3
 8005146:	d81f      	bhi.n	8005188 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x50>
 8005148:	a201      	add	r2, pc, #4	; (adr r2, 8005150 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 800514a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514e:	bf00      	nop
 8005150:	08005161 	.word	0x08005161
 8005154:	0800516b 	.word	0x0800516b
 8005158:	08005175 	.word	0x08005175
 800515c:	0800517f 	.word	0x0800517f
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8005160:	2140      	movs	r1, #64	; 0x40
 8005162:	480b      	ldr	r0, [pc, #44]	; (8005190 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>)
 8005164:	f007 fc5b 	bl	800ca1e <HAL_GPIO_TogglePin>
#endif
        break;
 8005168:	e00e      	b.n	8005188 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x50>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 800516a:	2180      	movs	r1, #128	; 0x80
 800516c:	4808      	ldr	r0, [pc, #32]	; (8005190 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>)
 800516e:	f007 fc56 	bl	800ca1e <HAL_GPIO_TogglePin>
#endif
        break;
 8005172:	e009      	b.n	8005188 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x50>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8005174:	2108      	movs	r1, #8
 8005176:	4807      	ldr	r0, [pc, #28]	; (8005194 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x5c>)
 8005178:	f007 fc51 	bl	800ca1e <HAL_GPIO_TogglePin>
#endif
        break;
 800517c:	e004      	b.n	8005188 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x50>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800517e:	2140      	movs	r1, #64	; 0x40
 8005180:	4805      	ldr	r0, [pc, #20]	; (8005198 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 8005182:	f007 fc4c 	bl	800ca1e <HAL_GPIO_TogglePin>
#endif
        break;
 8005186:	bf00      	nop
    }
}
 8005188:	bf00      	nop
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	58020400 	.word	0x58020400
 8005194:	58021800 	.word	0x58021800
 8005198:	58020000 	.word	0x58020000

0800519c <_ZN8touchgfx3HALD1Ev>:
        DISPLAY_ROTATION = rotate0;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
    {
 80051a4:	4a04      	ldr	r2, [pc, #16]	; (80051b8 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	601a      	str	r2, [r3, #0]
    }
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4618      	mov	r0, r3
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	08024c68 	.word	0x08024c68

080051bc <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
    }
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7ff ffe9 	bl	800519c <_ZN8touchgfx3HALD1Ev>
 80051ca:	217c      	movs	r1, #124	; 0x7c
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f01d fa24 	bl	802261a <_ZdlPvj>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4618      	mov	r0, r3
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	460b      	mov	r3, r1
 80051e6:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	78fa      	ldrb	r2, [r7, #3]
 80051ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	460b      	mov	r3, r1
 800520e:	807b      	strh	r3, [r7, #2]
 8005210:	4613      	mov	r3, r2
 8005212:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8005214:	4b0c      	ldr	r3, [pc, #48]	; (8005248 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8005216:	881b      	ldrh	r3, [r3, #0]
 8005218:	887a      	ldrh	r2, [r7, #2]
 800521a:	429a      	cmp	r2, r3
 800521c:	d304      	bcc.n	8005228 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 800521e:	4b0b      	ldr	r3, [pc, #44]	; (800524c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8005220:	881b      	ldrh	r3, [r3, #0]
 8005222:	883a      	ldrh	r2, [r7, #0]
 8005224:	429a      	cmp	r2, r3
 8005226:	d205      	bcs.n	8005234 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8005228:	4b09      	ldr	r3, [pc, #36]	; (8005250 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 800522a:	4a0a      	ldr	r2, [pc, #40]	; (8005254 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 800522c:	219e      	movs	r1, #158	; 0x9e
 800522e:	480a      	ldr	r0, [pc, #40]	; (8005258 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8005230:	f01d fa22 	bl	8022678 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8005234:	4a09      	ldr	r2, [pc, #36]	; (800525c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8005236:	887b      	ldrh	r3, [r7, #2]
 8005238:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 800523a:	4a09      	ldr	r2, [pc, #36]	; (8005260 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 800523c:	883b      	ldrh	r3, [r7, #0]
 800523e:	8013      	strh	r3, [r2, #0]
    }
 8005240:	bf00      	nop
 8005242:	3708      	adds	r7, #8
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	2400ae98 	.word	0x2400ae98
 800524c:	2400ae9a 	.word	0x2400ae9a
 8005250:	08023824 	.word	0x08023824
 8005254:	08023888 	.word	0x08023888
 8005258:	080238cc 	.word	0x080238cc
 800525c:	2400ae9e 	.word	0x2400ae9e
 8005260:	2400aea0 	.word	0x2400aea0

08005264 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8005272:	2b00      	cmp	r3, #0
 8005274:	d009      	beq.n	800528a <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4610      	mov	r0, r2
 8005284:	4798      	blx	r3
 8005286:	4603      	mov	r3, r0
 8005288:	e000      	b.n	800528c <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 800528a:	2300      	movs	r3, #0
    }
 800528c:	4618      	mov	r0, r3
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f00d fcc5 	bl	8012c2c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	33ac      	adds	r3, #172	; 0xac
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	4798      	blx	r3
    }
 80052ae:	bf00      	nop
 80052b0:	3708      	adds	r7, #8
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 80052c0:	2300      	movs	r3, #0
    }
 80052c2:	4618      	mov	r0, r3
 80052c4:	370c      	adds	r7, #12
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
	...

080052d0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
 80052dc:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d106      	bne.n	80052f2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 80052e4:	4b0f      	ldr	r3, [pc, #60]	; (8005324 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 80052e6:	4a10      	ldr	r2, [pc, #64]	; (8005328 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 80052e8:	f240 21d2 	movw	r1, #722	; 0x2d2
 80052ec:	480f      	ldr	r0, [pc, #60]	; (800532c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 80052ee:	f01d f9c3 	bl	8022678 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	bf14      	ite	ne
 8005304:	2301      	movne	r3, #1
 8005306:	2300      	moveq	r3, #0
 8005308:	b2da      	uxtb	r2, r3
 800530a:	4b09      	ldr	r3, [pc, #36]	; (8005330 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800530c:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	338c      	adds	r3, #140	; 0x8c
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6839      	ldr	r1, [r7, #0]
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	4798      	blx	r3
    }
 800531c:	bf00      	nop
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	08023920 	.word	0x08023920
 8005328:	08023958 	.word	0x08023958
 800532c:	080238cc 	.word	0x080238cc
 8005330:	2400aea2 	.word	0x2400aea2

08005334 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	bf14      	ite	ne
 800534a:	2301      	movne	r3, #1
 800534c:	2300      	moveq	r3, #0
 800534e:	b2da      	uxtb	r2, r3
 8005350:	4b03      	ldr	r3, [pc, #12]	; (8005360 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 8005352:	701a      	strb	r2, [r3, #0]
    }
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	2400aea3 	.word	0x2400aea3

08005364 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800536c:	2300      	movs	r3, #0
    }
 800536e:	4618      	mov	r0, r3
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800537a:	b580      	push	{r7, lr}
 800537c:	b082      	sub	sp, #8
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	460b      	mov	r3, r1
 8005384:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538a:	2b00      	cmp	r3, #0
 800538c:	d004      	beq.n	8005398 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005392:	887a      	ldrh	r2, [r7, #2]
 8005394:	4610      	mov	r0, r2
 8005396:	4798      	blx	r3
        }
    }
 8005398:	bf00      	nop
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 80053a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 80053ac:	4618      	mov	r0, r3
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3318      	adds	r3, #24
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4610      	mov	r0, r2
 80053d0:	4798      	blx	r3
 80053d2:	4603      	mov	r3, r0
    }
 80053d4:	4618      	mov	r0, r3
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d011      	beq.n	8005418 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 80053f4:	4b14      	ldr	r3, [pc, #80]	; (8005448 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d11e      	bne.n	800543a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80053fc:	4b13      	ldr	r3, [pc, #76]	; (800544c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80053fe:	881b      	ldrh	r3, [r3, #0]
 8005400:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8005402:	4b13      	ldr	r3, [pc, #76]	; (8005450 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8005404:	881a      	ldrh	r2, [r3, #0]
 8005406:	4b11      	ldr	r3, [pc, #68]	; (800544c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8005408:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 800540a:	4a11      	ldr	r2, [pc, #68]	; (8005450 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800540c:	89bb      	ldrh	r3, [r7, #12]
 800540e:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8005410:	4b0d      	ldr	r3, [pc, #52]	; (8005448 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8005412:	2201      	movs	r2, #1
 8005414:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8005416:	e010      	b.n	800543a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8005418:	4b0b      	ldr	r3, [pc, #44]	; (8005448 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00c      	beq.n	800543a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8005420:	4b0a      	ldr	r3, [pc, #40]	; (800544c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8005422:	881b      	ldrh	r3, [r3, #0]
 8005424:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8005426:	4b0a      	ldr	r3, [pc, #40]	; (8005450 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8005428:	881a      	ldrh	r2, [r3, #0]
 800542a:	4b08      	ldr	r3, [pc, #32]	; (800544c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800542c:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 800542e:	4a08      	ldr	r2, [pc, #32]	; (8005450 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8005430:	89fb      	ldrh	r3, [r7, #14]
 8005432:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8005434:	4b04      	ldr	r3, [pc, #16]	; (8005448 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8005436:	2200      	movs	r2, #0
 8005438:	701a      	strb	r2, [r3, #0]
    }
 800543a:	bf00      	nop
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	2400ae9c 	.word	0x2400ae9c
 800544c:	2400ae9a 	.word	0x2400ae9a
 8005450:	2400ae98 	.word	0x2400ae98

08005454 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4618      	mov	r0, r3
 8005460:	f00c fe4a 	bl	80120f8 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8005464:	bf00      	nop
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	4a05      	ldr	r2, [pc, #20]	; (800548c <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4618      	mov	r0, r3
 800547e:	f7ff fe8d 	bl	800519c <_ZN8touchgfx3HALD1Ev>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4618      	mov	r0, r3
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	08024754 	.word	0x08024754

08005490 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f7ff ffe7 	bl	800546c <_ZN20TouchGFXGeneratedHALD1Ev>
 800549e:	217c      	movs	r1, #124	; 0x7c
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f01d f8ba 	bl	802261a <_ZdlPvj>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4618      	mov	r0, r3
 80054aa:	3708      	adds	r7, #8
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7ff ffca 	bl	8005454 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80054c0:	bf00      	nop
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f001 fd4e 	bl	8006f74 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80054d8:	bf00      	nop
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f001 fde4 	bl	80070b8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80054f0:	4603      	mov	r3, r0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b082      	sub	sp, #8
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6839      	ldr	r1, [r7, #0]
 8005508:	4618      	mov	r0, r3
 800550a:	f001 fde3 	bl	80070d4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800550e:	bf00      	nop
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b082      	sub	sp, #8
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
 800551e:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6839      	ldr	r1, [r7, #0]
 8005524:	4618      	mov	r0, r3
 8005526:	f001 fdeb 	bl	8007100 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 800552a:	bf00      	nop
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b084      	sub	sp, #16
 8005536:	af00      	add	r7, sp, #0
 8005538:	60f8      	str	r0, [r7, #12]
 800553a:	60b9      	str	r1, [r7, #8]
 800553c:	607a      	str	r2, [r7, #4]
 800553e:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	68b9      	ldr	r1, [r7, #8]
 8005548:	f001 fe32 	bl	80071b0 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 800554c:	4603      	mov	r3, r0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b082      	sub	sp, #8
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4618      	mov	r0, r3
 8005562:	f001 fd2b 	bl	8006fbc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8005566:	bf00      	nop
 8005568:	3708      	adds	r7, #8
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b082      	sub	sp, #8
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4618      	mov	r0, r3
 800557a:	f001 fd2f 	bl	8006fdc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800557e:	bf00      	nop
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b082      	sub	sp, #8
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4618      	mov	r0, r3
 8005592:	f001 fd31 	bl	8006ff8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8005596:	bf00      	nop
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b082      	sub	sp, #8
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4618      	mov	r0, r3
 80055aa:	f001 fd33 	bl	8007014 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80055ae:	bf00      	nop
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
	...

080055b8 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	4a05      	ldr	r2, [pc, #20]	; (80055d8 <_ZN11TouchGFXHALD1Ev+0x20>)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7ff ff4f 	bl	800546c <_ZN20TouchGFXGeneratedHALD1Ev>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4618      	mov	r0, r3
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	080243e4 	.word	0x080243e4

080055dc <_ZN11TouchGFXHALD0Ev>:
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7ff ffe7 	bl	80055b8 <_ZN11TouchGFXHALD1Ev>
 80055ea:	217c      	movs	r1, #124	; 0x7c
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f01d f814 	bl	802261a <_ZdlPvj>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4618      	mov	r0, r3
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <_ZN25STM32H745ITouchController4initEv>:

/**
 * @brief initializes the touch controller
 */
void STM32H745ITouchController::init()
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
    static const uint32_t width = 480;
    static const uint32_t height = 272;

    TS_Init_t config;
    config.Width = width;
 8005602:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005606:	603b      	str	r3, [r7, #0]
    config.Height = height;
 8005608:	f44f 7388 	mov.w	r3, #272	; 0x110
 800560c:	607b      	str	r3, [r7, #4]
    config.Orientation = TS_SWAP_XY;
 800560e:	2308      	movs	r3, #8
 8005610:	60bb      	str	r3, [r7, #8]
    config.Accuracy = 0;
 8005612:	2300      	movs	r3, #0
 8005614:	60fb      	str	r3, [r7, #12]

    if (BSP_TS_Init(0, &config) != BSP_ERROR_NONE)
 8005616:	463b      	mov	r3, r7
 8005618:	4619      	mov	r1, r3
 800561a:	2000      	movs	r0, #0
 800561c:	f006 f860 	bl	800b6e0 <BSP_TS_Init>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	bf14      	ite	ne
 8005626:	2301      	movne	r3, #1
 8005628:	2300      	moveq	r3, #0
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	d103      	bne.n	8005638 <_ZN25STM32H745ITouchController4initEv+0x3c>
    {
        return;
    }

    _bsp_ts_initialized = true;
 8005630:	4b03      	ldr	r3, [pc, #12]	; (8005640 <_ZN25STM32H745ITouchController4initEv+0x44>)
 8005632:	2201      	movs	r2, #1
 8005634:	701a      	strb	r2, [r3, #0]
 8005636:	e000      	b.n	800563a <_ZN25STM32H745ITouchController4initEv+0x3e>
        return;
 8005638:	bf00      	nop
}
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	240090bc 	.word	0x240090bc

08005644 <_ZN25STM32H745ITouchController11sampleTouchERlS0_>:
 * @param x touch x coordinate
 * @param y touch y coordinate
 * @return \c true if a touch event was detected, else \c false
 */
bool STM32H745ITouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
    static TS_State_t state;

    if (!_bsp_ts_initialized)
 800564e:	4b11      	ldr	r3, [pc, #68]	; (8005694 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x50>)
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	f083 0301 	eor.w	r3, r3, #1
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x1c>
    {
        return false;
 800565c:	2300      	movs	r3, #0
 800565e:	e014      	b.n	800568a <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    BSP_TS_GetState(0, &state);
 8005660:	490d      	ldr	r1, [pc, #52]	; (8005698 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8005662:	2000      	movs	r0, #0
 8005664:	f006 f8f8 	bl	800b858 <BSP_TS_GetState>

    if (!state.TouchDetected)
 8005668:	4b0b      	ldr	r3, [pc, #44]	; (8005698 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x30>
    {
        return false;
 8005670:	2300      	movs	r3, #0
 8005672:	e00a      	b.n	800568a <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    x = state.TouchX;
 8005674:	4b08      	ldr	r3, [pc, #32]	; (8005698 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	461a      	mov	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	601a      	str	r2, [r3, #0]
    y = state.TouchY;
 800567e:	4b06      	ldr	r3, [pc, #24]	; (8005698 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	461a      	mov	r2, r3
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	601a      	str	r2, [r3, #0]
    return true;
 8005688:	2301      	movs	r3, #1
}
 800568a:	4618      	mov	r0, r3
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	240090bc 	.word	0x240090bc
 8005698:	240090c0 	.word	0x240090c0

0800569c <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 800569c:	b580      	push	{r7, lr}
 800569e:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 80056a0:	2200      	movs	r2, #0
 80056a2:	2101      	movs	r1, #1
 80056a4:	2001      	movs	r0, #1
 80056a6:	f7fa ffa6 	bl	80005f6 <osSemaphoreNew>
 80056aa:	4603      	mov	r3, r0
 80056ac:	4a0f      	ldr	r2, [pc, #60]	; (80056ec <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80056ae:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80056b0:	4b0e      	ldr	r3, [pc, #56]	; (80056ec <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d105      	bne.n	80056c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 80056b8:	4b0d      	ldr	r3, [pc, #52]	; (80056f0 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 80056ba:	4a0e      	ldr	r2, [pc, #56]	; (80056f4 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80056bc:	2128      	movs	r1, #40	; 0x28
 80056be:	480e      	ldr	r0, [pc, #56]	; (80056f8 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80056c0:	f01c ffda 	bl	8022678 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 80056c4:	2200      	movs	r2, #0
 80056c6:	2104      	movs	r1, #4
 80056c8:	2001      	movs	r0, #1
 80056ca:	f7fb f8b3 	bl	8000834 <osMessageQueueNew>
 80056ce:	4603      	mov	r3, r0
 80056d0:	4a0a      	ldr	r2, [pc, #40]	; (80056fc <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80056d2:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80056d4:	4b09      	ldr	r3, [pc, #36]	; (80056fc <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d105      	bne.n	80056e8 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 80056dc:	4b08      	ldr	r3, [pc, #32]	; (8005700 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 80056de:	4a05      	ldr	r2, [pc, #20]	; (80056f4 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80056e0:	212c      	movs	r1, #44	; 0x2c
 80056e2:	4805      	ldr	r0, [pc, #20]	; (80056f8 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80056e4:	f01c ffc8 	bl	8022678 <__assert_func>
}
 80056e8:	bf00      	nop
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	240090cc 	.word	0x240090cc
 80056f0:	080239a8 	.word	0x080239a8
 80056f4:	080239f4 	.word	0x080239f4
 80056f8:	08023a24 	.word	0x08023a24
 80056fc:	240090d0 	.word	0x240090d0
 8005700:	08023aa4 	.word	0x08023aa4

08005704 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8005704:	b580      	push	{r7, lr}
 8005706:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8005708:	4b04      	ldr	r3, [pc, #16]	; (800571c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f04f 31ff 	mov.w	r1, #4294967295
 8005710:	4618      	mov	r0, r3
 8005712:	f7fa fff9 	bl	8000708 <osSemaphoreAcquire>
}
 8005716:	bf00      	nop
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	240090cc 	.word	0x240090cc

08005720 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8005720:	b580      	push	{r7, lr}
 8005722:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8005724:	4b03      	ldr	r3, [pc, #12]	; (8005734 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4618      	mov	r0, r3
 800572a:	f7fb f83f 	bl	80007ac <osSemaphoreRelease>
}
 800572e:	bf00      	nop
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	240090cc 	.word	0x240090cc

08005738 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8005738:	b580      	push	{r7, lr}
 800573a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 800573c:	4b03      	ldr	r3, [pc, #12]	; (800574c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2100      	movs	r1, #0
 8005742:	4618      	mov	r0, r3
 8005744:	f7fa ffe0 	bl	8000708 <osSemaphoreAcquire>
}
 8005748:	bf00      	nop
 800574a:	bd80      	pop	{r7, pc}
 800574c:	240090cc 	.word	0x240090cc

08005750 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8005750:	b580      	push	{r7, lr}
 8005752:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8005754:	4b03      	ldr	r3, [pc, #12]	; (8005764 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4618      	mov	r0, r3
 800575a:	f7fb f827 	bl	80007ac <osSemaphoreRelease>
}
 800575e:	bf00      	nop
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	240090cc 	.word	0x240090cc

08005768 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8005768:	b580      	push	{r7, lr}
 800576a:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 800576c:	4b04      	ldr	r3, [pc, #16]	; (8005780 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 800576e:	6818      	ldr	r0, [r3, #0]
 8005770:	2300      	movs	r3, #0
 8005772:	2200      	movs	r2, #0
 8005774:	4903      	ldr	r1, [pc, #12]	; (8005784 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8005776:	f7fb f8d1 	bl	800091c <osMessageQueuePut>
}
 800577a:	bf00      	nop
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	240090d0 	.word	0x240090d0
 8005784:	24000008 	.word	0x24000008

08005788 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 800578e:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8005790:	6818      	ldr	r0, [r3, #0]
 8005792:	1d39      	adds	r1, r7, #4
 8005794:	2300      	movs	r3, #0
 8005796:	2200      	movs	r2, #0
 8005798:	f7fb f920 	bl	80009dc <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 800579c:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800579e:	6818      	ldr	r0, [r3, #0]
 80057a0:	1d39      	adds	r1, r7, #4
 80057a2:	f04f 33ff 	mov.w	r3, #4294967295
 80057a6:	2200      	movs	r2, #0
 80057a8:	f7fb f918 	bl	80009dc <osMessageQueueGet>
}
 80057ac:	bf00      	nop
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	240090d0 	.word	0x240090d0

080057b8 <__NVIC_EnableIRQ>:
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	4603      	mov	r3, r0
 80057c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80057c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	db0b      	blt.n	80057e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057ca:	88fb      	ldrh	r3, [r7, #6]
 80057cc:	f003 021f 	and.w	r2, r3, #31
 80057d0:	4907      	ldr	r1, [pc, #28]	; (80057f0 <__NVIC_EnableIRQ+0x38>)
 80057d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057d6:	095b      	lsrs	r3, r3, #5
 80057d8:	2001      	movs	r0, #1
 80057da:	fa00 f202 	lsl.w	r2, r0, r2
 80057de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	e000e100 	.word	0xe000e100

080057f4 <__NVIC_DisableIRQ>:
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	4603      	mov	r3, r0
 80057fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80057fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005802:	2b00      	cmp	r3, #0
 8005804:	db12      	blt.n	800582c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005806:	88fb      	ldrh	r3, [r7, #6]
 8005808:	f003 021f 	and.w	r2, r3, #31
 800580c:	490a      	ldr	r1, [pc, #40]	; (8005838 <__NVIC_DisableIRQ+0x44>)
 800580e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005812:	095b      	lsrs	r3, r3, #5
 8005814:	2001      	movs	r0, #1
 8005816:	fa00 f202 	lsl.w	r2, r0, r2
 800581a:	3320      	adds	r3, #32
 800581c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005820:	f3bf 8f4f 	dsb	sy
}
 8005824:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005826:	f3bf 8f6f 	isb	sy
}
 800582a:	bf00      	nop
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	e000e100 	.word	0xe000e100

0800583c <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
        : color(0)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	601a      	str	r2, [r3, #0]
    {
    }
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4618      	mov	r0, r3
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
    {
        return color;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
    }
 8005864:	4618      	mov	r0, r3
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
    {
 8005878:	4a04      	ldr	r2, [pc, #16]	; (800588c <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	601a      	str	r2, [r3, #0]
    }
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4618      	mov	r0, r3
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	0802450c 	.word	0x0802450c

08005890 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
    }
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f7ff ffe9 	bl	8005870 <_ZN8touchgfx9DMA_QueueD1Ev>
 800589e:	2104      	movs	r1, #4
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f01c feba 	bl	802261a <_ZdlPvj>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4618      	mov	r0, r3
 80058aa:	3708      	adds	r7, #8
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	3344      	adds	r3, #68	; 0x44
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	4798      	blx	r3
    }
 80058c4:	bf00      	nop
 80058c6:	3708      	adds	r7, #8
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
    {
 80058d4:	4a04      	ldr	r2, [pc, #16]	; (80058e8 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	601a      	str	r2, [r3, #0]
    }
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4618      	mov	r0, r3
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	08024d40 	.word	0x08024d40

080058ec <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
    }
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7ff ffe9 	bl	80058cc <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80058fa:	210c      	movs	r1, #12
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f01c fe8c 	bl	802261a <_ZdlPvj>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4618      	mov	r0, r3
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8005916:	4a09      	ldr	r2, [pc, #36]	; (800593c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	601a      	str	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	605a      	str	r2, [r3, #4]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	721a      	strb	r2, [r3, #8]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	725a      	strb	r2, [r3, #9]
    {
    }
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4618      	mov	r0, r3
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr
 800593c:	08024d40 	.word	0x08024d40

08005940 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8005948:	2301      	movs	r3, #1
    }
 800594a:	4618      	mov	r0, r3
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8005956:	b580      	push	{r7, lr}
 8005958:	b082      	sub	sp, #8
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3328      	adds	r3, #40	; 0x28
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4610      	mov	r0, r2
 800596a:	4798      	blx	r3
    }
 800596c:	bf00      	nop
 800596e:	3708      	adds	r7, #8
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 8005974:	b480      	push	{r7}
 8005976:	af00      	add	r7, sp, #0
        return instance;
 8005978:	4b03      	ldr	r3, [pc, #12]	; (8005988 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800597a:	681b      	ldr	r3, [r3, #0]
    }
 800597c:	4618      	mov	r0, r3
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	2400aea4 	.word	0x2400aea4

0800598c <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3314      	adds	r3, #20
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4610      	mov	r0, r2
 80059a4:	4798      	blx	r3
    }
 80059a6:	bf00      	nop
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b082      	sub	sp, #8
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 80059b6:	f7ff ffdd 	bl	8005974 <_ZN8touchgfx3HAL11getInstanceEv>
 80059ba:	4603      	mov	r3, r0
 80059bc:	4618      	mov	r0, r3
 80059be:	f7ff ffe5 	bl	800598c <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 80059c2:	bf00      	nop
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b082      	sub	sp, #8
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	330c      	adds	r3, #12
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7ff ff30 	bl	800583c <_ZN8touchgfx9colortypeC1Ev>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4618      	mov	r0, r3
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
	...

080059e8 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 80059e8:	b5b0      	push	{r4, r5, r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	330c      	adds	r3, #12
 80059f6:	4619      	mov	r1, r3
 80059f8:	4610      	mov	r0, r2
 80059fa:	f7ff ff87 	bl	800590c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80059fe:	4a0e      	ldr	r2, [pc, #56]	; (8005a38 <_ZN8STM32DMAC1Ev+0x50>)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f103 000c 	add.w	r0, r3, #12
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	3320      	adds	r3, #32
 8005a0e:	2260      	movs	r2, #96	; 0x60
 8005a10:	4619      	mov	r1, r3
 8005a12:	f00d fa45 	bl	8012ea0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	3320      	adds	r3, #32
 8005a1a:	245f      	movs	r4, #95	; 0x5f
 8005a1c:	461d      	mov	r5, r3
 8005a1e:	2c00      	cmp	r4, #0
 8005a20:	db05      	blt.n	8005a2e <_ZN8STM32DMAC1Ev+0x46>
 8005a22:	4628      	mov	r0, r5
 8005a24:	f7ff ffd1 	bl	80059ca <_ZN8touchgfx6BlitOpC1Ev>
 8005a28:	3524      	adds	r5, #36	; 0x24
 8005a2a:	3c01      	subs	r4, #1
 8005a2c:	e7f7      	b.n	8005a1e <_ZN8STM32DMAC1Ev+0x36>
{
}
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4618      	mov	r0, r3
 8005a32:	3708      	adds	r7, #8
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bdb0      	pop	{r4, r5, r7, pc}
 8005a38:	080244bc 	.word	0x080244bc

08005a3c <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	4a09      	ldr	r2, [pc, #36]	; (8005a6c <_ZN8STM32DMAD1Ev+0x30>)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8005a4a:	205a      	movs	r0, #90	; 0x5a
 8005a4c:	f7ff fed2 	bl	80057f4 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	330c      	adds	r3, #12
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 facb 	bl	8005ff0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7ff ff35 	bl	80058cc <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4618      	mov	r0, r3
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	080244bc 	.word	0x080244bc

08005a70 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
}
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f7ff ffdf 	bl	8005a3c <_ZN8STM32DMAD1Ev>
 8005a7e:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f01c fdc9 	bl	802261a <_ZdlPvj>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3708      	adds	r7, #8
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
	...

08005a94 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8005a9c:	4b12      	ldr	r3, [pc, #72]	; (8005ae8 <_ZN8STM32DMA10initializeEv+0x54>)
 8005a9e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005aa2:	4a11      	ldr	r2, [pc, #68]	; (8005ae8 <_ZN8STM32DMA10initializeEv+0x54>)
 8005aa4:	f043 0310 	orr.w	r3, r3, #16
 8005aa8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8005aac:	4b0e      	ldr	r3, [pc, #56]	; (8005ae8 <_ZN8STM32DMA10initializeEv+0x54>)
 8005aae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005ab2:	f003 0310 	and.w	r3, r3, #16
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8005aba:	4b0b      	ldr	r3, [pc, #44]	; (8005ae8 <_ZN8STM32DMA10initializeEv+0x54>)
 8005abc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005abe:	4a0a      	ldr	r2, [pc, #40]	; (8005ae8 <_ZN8STM32DMA10initializeEv+0x54>)
 8005ac0:	f043 0310 	orr.w	r3, r3, #16
 8005ac4:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8005ac6:	4b08      	ldr	r3, [pc, #32]	; (8005ae8 <_ZN8STM32DMA10initializeEv+0x54>)
 8005ac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aca:	4a07      	ldr	r2, [pc, #28]	; (8005ae8 <_ZN8STM32DMA10initializeEv+0x54>)
 8005acc:	f023 0310 	bic.w	r3, r3, #16
 8005ad0:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8005ad2:	4b06      	ldr	r3, [pc, #24]	; (8005aec <_ZN8STM32DMA10initializeEv+0x58>)
 8005ad4:	4a06      	ldr	r2, [pc, #24]	; (8005af0 <_ZN8STM32DMA10initializeEv+0x5c>)
 8005ad6:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8005ad8:	205a      	movs	r0, #90	; 0x5a
 8005ada:	f7ff fe6d 	bl	80057b8 <__NVIC_EnableIRQ>
}
 8005ade:	bf00      	nop
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	58024400 	.word	0x58024400
 8005aec:	24008ebc 	.word	0x24008ebc
 8005af0:	080059af 	.word	0x080059af

08005af4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	460b      	mov	r3, r1
 8005afe:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8005b00:	2300      	movs	r3, #0
 8005b02:	60fb      	str	r3, [r7, #12]

    switch (format)
 8005b04:	78fb      	ldrb	r3, [r7, #3]
 8005b06:	2b0b      	cmp	r3, #11
 8005b08:	d826      	bhi.n	8005b58 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8005b0a:	a201      	add	r2, pc, #4	; (adr r2, 8005b10 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8005b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b10:	08005b4d 	.word	0x08005b4d
 8005b14:	08005b47 	.word	0x08005b47
 8005b18:	08005b41 	.word	0x08005b41
 8005b1c:	08005b59 	.word	0x08005b59
 8005b20:	08005b59 	.word	0x08005b59
 8005b24:	08005b59 	.word	0x08005b59
 8005b28:	08005b59 	.word	0x08005b59
 8005b2c:	08005b53 	.word	0x08005b53
 8005b30:	08005b53 	.word	0x08005b53
 8005b34:	08005b53 	.word	0x08005b53
 8005b38:	08005b53 	.word	0x08005b53
 8005b3c:	08005b53 	.word	0x08005b53
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8005b40:	2300      	movs	r3, #0
 8005b42:	60fb      	str	r3, [r7, #12]
        break;
 8005b44:	e00e      	b.n	8005b64 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8005b46:	2301      	movs	r3, #1
 8005b48:	60fb      	str	r3, [r7, #12]
        break;
 8005b4a:	e00b      	b.n	8005b64 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	60fb      	str	r3, [r7, #12]
        break;
 8005b50:	e008      	b.n	8005b64 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8005b52:	2305      	movs	r3, #5
 8005b54:	60fb      	str	r3, [r7, #12]
        break;
 8005b56:	e005      	b.n	8005b64 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8005b58:	4b05      	ldr	r3, [pc, #20]	; (8005b70 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8005b5a:	4a06      	ldr	r2, [pc, #24]	; (8005b74 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8005b5c:	2166      	movs	r1, #102	; 0x66
 8005b5e:	4806      	ldr	r0, [pc, #24]	; (8005b78 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8005b60:	f01c fd8a 	bl	8022678 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8005b64:	68fb      	ldr	r3, [r7, #12]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	08023ae8 	.word	0x08023ae8
 8005b74:	08023b04 	.word	0x08023b04
 8005b78:	08023b50 	.word	0x08023b50

08005b7c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	460b      	mov	r3, r1
 8005b86:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60fb      	str	r3, [r7, #12]

    switch (format)
 8005b8c:	78fb      	ldrb	r3, [r7, #3]
 8005b8e:	2b0a      	cmp	r3, #10
 8005b90:	d821      	bhi.n	8005bd6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8005b92:	a201      	add	r2, pc, #4	; (adr r2, 8005b98 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8005b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b98:	08005bd1 	.word	0x08005bd1
 8005b9c:	08005bcb 	.word	0x08005bcb
 8005ba0:	08005bc5 	.word	0x08005bc5
 8005ba4:	08005bd7 	.word	0x08005bd7
 8005ba8:	08005bd7 	.word	0x08005bd7
 8005bac:	08005bd7 	.word	0x08005bd7
 8005bb0:	08005bd7 	.word	0x08005bd7
 8005bb4:	08005bcb 	.word	0x08005bcb
 8005bb8:	08005bcb 	.word	0x08005bcb
 8005bbc:	08005bcb 	.word	0x08005bcb
 8005bc0:	08005bcb 	.word	0x08005bcb
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	60fb      	str	r3, [r7, #12]
        break;
 8005bc8:	e00b      	b.n	8005be2 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	60fb      	str	r3, [r7, #12]
        break;
 8005bce:	e008      	b.n	8005be2 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	60fb      	str	r3, [r7, #12]
        break;
 8005bd4:	e005      	b.n	8005be2 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8005bd6:	4b05      	ldr	r3, [pc, #20]	; (8005bec <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8005bd8:	4a05      	ldr	r2, [pc, #20]	; (8005bf0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8005bda:	2187      	movs	r1, #135	; 0x87
 8005bdc:	4805      	ldr	r0, [pc, #20]	; (8005bf4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8005bde:	f01c fd4b 	bl	8022678 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8005be2:	68fb      	ldr	r3, [r7, #12]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	08023ae8 	.word	0x08023ae8
 8005bf0:	08023bd0 	.word	0x08023bd0
 8005bf4:	08023b50 	.word	0x08023b50

08005bf8 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8005c00:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8005c10:	b590      	push	{r4, r7, lr}
 8005c12:	b089      	sub	sp, #36	; 0x24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	7f5b      	ldrb	r3, [r3, #29]
 8005c1e:	4619      	mov	r1, r3
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7ff ff67 	bl	8005af4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8005c26:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	7f9b      	ldrb	r3, [r3, #30]
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7ff ff60 	bl	8005af4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8005c34:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	7f9b      	ldrb	r3, [r3, #30]
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f7ff ff9d 	bl	8005b7c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8005c42:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	8b5b      	ldrh	r3, [r3, #26]
 8005c48:	461a      	mov	r2, r3
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	8a9b      	ldrh	r3, [r3, #20]
 8005c4e:	1ad2      	subs	r2, r2, r3
 8005c50:	4b92      	ldr	r3, [pc, #584]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005c52:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	8b5b      	ldrh	r3, [r3, #26]
 8005c58:	461a      	mov	r2, r3
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	8a9b      	ldrh	r3, [r3, #20]
 8005c5e:	1ad2      	subs	r2, r2, r3
 8005c60:	4b8e      	ldr	r3, [pc, #568]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005c62:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	8b1b      	ldrh	r3, [r3, #24]
 8005c68:	461a      	mov	r2, r3
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	8a9b      	ldrh	r3, [r3, #20]
 8005c6e:	1ad2      	subs	r2, r2, r3
 8005c70:	4b8a      	ldr	r3, [pc, #552]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005c72:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8005c74:	4a89      	ldr	r2, [pc, #548]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	8adb      	ldrh	r3, [r3, #22]
 8005c7e:	461a      	mov	r2, r3
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	8a9b      	ldrh	r3, [r3, #20]
 8005c84:	041b      	lsls	r3, r3, #16
 8005c86:	431a      	orrs	r2, r3
 8005c88:	4b84      	ldr	r3, [pc, #528]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005c8a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	691a      	ldr	r2, [r3, #16]
 8005c90:	4b82      	ldr	r3, [pc, #520]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005c92:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	4b80      	ldr	r3, [pc, #512]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005c9a:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ca4:	d036      	beq.n	8005d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
 8005ca6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005caa:	f200 80e2 	bhi.w	8005e72 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8005cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cb2:	d014      	beq.n	8005cde <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8005cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cb8:	f200 80db 	bhi.w	8005e72 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8005cbc:	2b80      	cmp	r3, #128	; 0x80
 8005cbe:	d059      	beq.n	8005d74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>
 8005cc0:	2b80      	cmp	r3, #128	; 0x80
 8005cc2:	f200 80d6 	bhi.w	8005e72 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8005cc6:	2b40      	cmp	r3, #64	; 0x40
 8005cc8:	f000 80be 	beq.w	8005e48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 8005ccc:	2b40      	cmp	r3, #64	; 0x40
 8005cce:	f200 80d0 	bhi.w	8005e72 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8005cd2:	2b04      	cmp	r3, #4
 8005cd4:	d039      	beq.n	8005d4a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13a>
 8005cd6:	2b20      	cmp	r3, #32
 8005cd8:	f000 80b6 	beq.w	8005e48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 8005cdc:	e0c9      	b.n	8005e72 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	7f1b      	ldrb	r3, [r3, #28]
 8005ce2:	061b      	lsls	r3, r3, #24
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	4a6d      	ldr	r2, [pc, #436]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005ce8:	4b6d      	ldr	r3, [pc, #436]	; (8005ea0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8005cea:	430b      	orrs	r3, r1
 8005cec:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	330c      	adds	r3, #12
 8005cf2:	4c6a      	ldr	r4, [pc, #424]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7ff fdaf 	bl	8005858 <_ZNK8touchgfx9colortypecvmEv>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8005cfe:	4a67      	ldr	r2, [pc, #412]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	691a      	ldr	r2, [r3, #16]
 8005d08:	4b64      	ldr	r3, [pc, #400]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005d0a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8005d0c:	4b63      	ldr	r3, [pc, #396]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005d0e:	4a65      	ldr	r2, [pc, #404]	; (8005ea4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8005d10:	601a      	str	r2, [r3, #0]
        break;
 8005d12:	e0da      	b.n	8005eca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	7f1b      	ldrb	r3, [r3, #28]
 8005d18:	061b      	lsls	r3, r3, #24
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	4a5f      	ldr	r2, [pc, #380]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005d1e:	4b62      	ldr	r3, [pc, #392]	; (8005ea8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8005d20:	430b      	orrs	r3, r1
 8005d22:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	330c      	adds	r3, #12
 8005d28:	4c5c      	ldr	r4, [pc, #368]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7ff fd94 	bl	8005858 <_ZNK8touchgfx9colortypecvmEv>
 8005d30:	4603      	mov	r3, r0
 8005d32:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8005d34:	4a59      	ldr	r2, [pc, #356]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	691a      	ldr	r2, [r3, #16]
 8005d3e:	4b57      	ldr	r3, [pc, #348]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005d40:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8005d42:	4b56      	ldr	r3, [pc, #344]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005d44:	4a57      	ldr	r2, [pc, #348]	; (8005ea4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8005d46:	601a      	str	r2, [r3, #0]
        break;
 8005d48:	e0bf      	b.n	8005eca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	7f1b      	ldrb	r3, [r3, #28]
 8005d4e:	061b      	lsls	r3, r3, #24
 8005d50:	461a      	mov	r2, r3
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	4a51      	ldr	r2, [pc, #324]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d5c:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8005d5e:	4a4f      	ldr	r2, [pc, #316]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	691a      	ldr	r2, [r3, #16]
 8005d68:	4b4c      	ldr	r3, [pc, #304]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005d6a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8005d6c:	4b4b      	ldr	r3, [pc, #300]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005d6e:	4a4d      	ldr	r2, [pc, #308]	; (8005ea4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8005d70:	601a      	str	r2, [r3, #0]
        break;
 8005d72:	e0aa      	b.n	8005eca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8005d74:	2301      	movs	r3, #1
 8005d76:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	1d1a      	adds	r2, r3, #4
 8005d82:	4b46      	ldr	r3, [pc, #280]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005d84:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	7f1b      	ldrb	r3, [r3, #28]
 8005d8a:	061b      	lsls	r3, r3, #24
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	4a42      	ldr	r2, [pc, #264]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d98:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8005d9a:	4a40      	ldr	r2, [pc, #256]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	691a      	ldr	r2, [r3, #16]
 8005da4:	4b3d      	ldr	r3, [pc, #244]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005da6:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	881b      	ldrh	r3, [r3, #0]
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d002      	beq.n	8005db8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d00d      	beq.n	8005dd2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
 8005db6:	e020      	b.n	8005dfa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ea>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8005db8:	4b38      	ldr	r3, [pc, #224]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005dba:	69da      	ldr	r2, [r3, #28]
 8005dbc:	4b3b      	ldr	r3, [pc, #236]	; (8005eac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	8852      	ldrh	r2, [r2, #2]
 8005dc4:	3a01      	subs	r2, #1
 8005dc6:	0212      	lsls	r2, r2, #8
 8005dc8:	4611      	mov	r1, r2
 8005dca:	4a34      	ldr	r2, [pc, #208]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005dcc:	430b      	orrs	r3, r1
 8005dce:	61d3      	str	r3, [r2, #28]
                break;
 8005dd0:	e01a      	b.n	8005e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	7f1b      	ldrb	r3, [r3, #28]
 8005dd6:	2bff      	cmp	r3, #255	; 0xff
 8005dd8:	d101      	bne.n	8005dde <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
                {
                    blend = false;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8005dde:	4b2f      	ldr	r3, [pc, #188]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005de0:	69da      	ldr	r2, [r3, #28]
 8005de2:	4b32      	ldr	r3, [pc, #200]	; (8005eac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8005de4:	4013      	ands	r3, r2
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	8852      	ldrh	r2, [r2, #2]
 8005dea:	3a01      	subs	r2, #1
 8005dec:	0212      	lsls	r2, r2, #8
 8005dee:	4313      	orrs	r3, r2
 8005df0:	4a2a      	ldr	r2, [pc, #168]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005df2:	f043 0310 	orr.w	r3, r3, #16
 8005df6:	61d3      	str	r3, [r2, #28]
                break;
 8005df8:	e006      	b.n	8005e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8005dfa:	4b2d      	ldr	r3, [pc, #180]	; (8005eb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8005dfc:	4a2d      	ldr	r2, [pc, #180]	; (8005eb4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8005dfe:	f240 1111 	movw	r1, #273	; 0x111
 8005e02:	482d      	ldr	r0, [pc, #180]	; (8005eb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8005e04:	f01c fc38 	bl	8022678 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8005e08:	4b24      	ldr	r3, [pc, #144]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005e0a:	69db      	ldr	r3, [r3, #28]
 8005e0c:	4a23      	ldr	r2, [pc, #140]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005e0e:	f043 0320 	orr.w	r3, r3, #32
 8005e12:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8005e14:	4b21      	ldr	r3, [pc, #132]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005e16:	69db      	ldr	r3, [r3, #28]
 8005e18:	f003 0320 	and.w	r3, r3, #32
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	bf14      	ite	ne
 8005e20:	2301      	movne	r3, #1
 8005e22:	2300      	moveq	r3, #0
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d000      	beq.n	8005e2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>
 8005e2a:	e7f3      	b.n	8005e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8005e2c:	4b1b      	ldr	r3, [pc, #108]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005e2e:	2210      	movs	r2, #16
 8005e30:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 8005e32:	7ffb      	ldrb	r3, [r7, #31]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8005e38:	4b18      	ldr	r3, [pc, #96]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005e3a:	4a1a      	ldr	r2, [pc, #104]	; (8005ea4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8005e3c:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 8005e3e:	e044      	b.n	8005eca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8005e40:	4b16      	ldr	r3, [pc, #88]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005e42:	4a1e      	ldr	r2, [pc, #120]	; (8005ebc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8005e44:	601a      	str	r2, [r3, #0]
        break;
 8005e46:	e040      	b.n	8005eca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	7f1b      	ldrb	r3, [r3, #28]
 8005e4c:	061b      	lsls	r3, r3, #24
 8005e4e:	461a      	mov	r2, r3
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	4a11      	ldr	r2, [pc, #68]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e5a:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8005e5c:	4a0f      	ldr	r2, [pc, #60]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	691a      	ldr	r2, [r3, #16]
 8005e66:	4b0d      	ldr	r3, [pc, #52]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005e68:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8005e6a:	4b0c      	ldr	r3, [pc, #48]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005e6c:	4a0d      	ldr	r2, [pc, #52]	; (8005ea4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8005e6e:	601a      	str	r2, [r3, #0]
        break;
 8005e70:	e02b      	b.n	8005eca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	7f1b      	ldrb	r3, [r3, #28]
 8005e76:	061b      	lsls	r3, r3, #24
 8005e78:	461a      	mov	r2, r3
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	4a07      	ldr	r2, [pc, #28]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e84:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	7f5a      	ldrb	r2, [r3, #29]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	7f9b      	ldrb	r3, [r3, #30]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d016      	beq.n	8005ec0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8005e92:	4b02      	ldr	r3, [pc, #8]	; (8005e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005e94:	4a09      	ldr	r2, [pc, #36]	; (8005ebc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8005e96:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 8005e98:	e016      	b.n	8005ec8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 8005e9a:	bf00      	nop
 8005e9c:	52001000 	.word	0x52001000
 8005ea0:	0002000a 	.word	0x0002000a
 8005ea4:	00020201 	.word	0x00020201
 8005ea8:	00020009 	.word	0x00020009
 8005eac:	ffff00ef 	.word	0xffff00ef
 8005eb0:	08023c1c 	.word	0x08023c1c
 8005eb4:	08023c38 	.word	0x08023c38
 8005eb8:	08023b50 	.word	0x08023b50
 8005ebc:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8005ec0:	4b04      	ldr	r3, [pc, #16]	; (8005ed4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 8005ec2:	f240 2201 	movw	r2, #513	; 0x201
 8005ec6:	601a      	str	r2, [r3, #0]
        break;
 8005ec8:	bf00      	nop
    }
}
 8005eca:	bf00      	nop
 8005ecc:	3724      	adds	r7, #36	; 0x24
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd90      	pop	{r4, r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	52001000 	.word	0x52001000

08005ed8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8005ed8:	b590      	push	{r4, r7, lr}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	7f9b      	ldrb	r3, [r3, #30]
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f7ff fe47 	bl	8005b7c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8005eee:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8005ef0:	4a3b      	ldr	r2, [pc, #236]	; (8005fe0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	8adb      	ldrh	r3, [r3, #22]
 8005efa:	461a      	mov	r2, r3
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	8a9b      	ldrh	r3, [r3, #20]
 8005f00:	041b      	lsls	r3, r3, #16
 8005f02:	431a      	orrs	r2, r3
 8005f04:	4b36      	ldr	r3, [pc, #216]	; (8005fe0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8005f06:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	691a      	ldr	r2, [r3, #16]
 8005f0c:	4b34      	ldr	r3, [pc, #208]	; (8005fe0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8005f0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	8b5b      	ldrh	r3, [r3, #26]
 8005f14:	461a      	mov	r2, r3
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	8a9b      	ldrh	r3, [r3, #20]
 8005f1a:	1ad2      	subs	r2, r2, r3
 8005f1c:	4b30      	ldr	r3, [pc, #192]	; (8005fe0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8005f1e:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b08      	cmp	r3, #8
 8005f26:	d12e      	bne.n	8005f86 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	8b5b      	ldrh	r3, [r3, #26]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	8a9b      	ldrh	r3, [r3, #20]
 8005f32:	1ad2      	subs	r2, r2, r3
 8005f34:	4b2a      	ldr	r3, [pc, #168]	; (8005fe0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8005f36:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	8b5b      	ldrh	r3, [r3, #26]
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	8a9b      	ldrh	r3, [r3, #20]
 8005f42:	1ad2      	subs	r2, r2, r3
 8005f44:	4b26      	ldr	r3, [pc, #152]	; (8005fe0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8005f46:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8005f48:	4a25      	ldr	r2, [pc, #148]	; (8005fe0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	7f1b      	ldrb	r3, [r3, #28]
 8005f52:	061b      	lsls	r3, r3, #24
 8005f54:	4619      	mov	r1, r3
 8005f56:	4a22      	ldr	r2, [pc, #136]	; (8005fe0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8005f58:	4b22      	ldr	r3, [pc, #136]	; (8005fe4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8005f5a:	430b      	orrs	r3, r1
 8005f5c:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	330c      	adds	r3, #12
 8005f62:	4c1f      	ldr	r4, [pc, #124]	; (8005fe0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7ff fc77 	bl	8005858 <_ZNK8touchgfx9colortypecvmEv>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	691a      	ldr	r2, [r3, #16]
 8005f72:	4b1b      	ldr	r3, [pc, #108]	; (8005fe0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8005f74:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	691a      	ldr	r2, [r3, #16]
 8005f7a:	4b19      	ldr	r3, [pc, #100]	; (8005fe0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8005f7c:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8005f7e:	4b18      	ldr	r3, [pc, #96]	; (8005fe0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8005f80:	4a19      	ldr	r2, [pc, #100]	; (8005fe8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 8005f82:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8005f84:	e027      	b.n	8005fd6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8005f86:	4a16      	ldr	r2, [pc, #88]	; (8005fe0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8005f8c:	4b14      	ldr	r3, [pc, #80]	; (8005fe0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	330c      	adds	r3, #12
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7ff fc5e 	bl	8005858 <_ZNK8touchgfx9colortypecvmEv>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	0a1b      	lsrs	r3, r3, #8
 8005fa0:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	330c      	adds	r3, #12
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7ff fc55 	bl	8005858 <_ZNK8touchgfx9colortypecvmEv>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	095b      	lsrs	r3, r3, #5
 8005fb2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8005fb6:	431c      	orrs	r4, r3
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	330c      	adds	r3, #12
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7ff fc4b 	bl	8005858 <_ZNK8touchgfx9colortypecvmEv>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	08db      	lsrs	r3, r3, #3
 8005fc6:	f003 031f 	and.w	r3, r3, #31
 8005fca:	4a05      	ldr	r2, [pc, #20]	; (8005fe0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8005fcc:	4323      	orrs	r3, r4
 8005fce:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8005fd0:	4b03      	ldr	r3, [pc, #12]	; (8005fe0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8005fd2:	4a06      	ldr	r2, [pc, #24]	; (8005fec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x114>)
 8005fd4:	601a      	str	r2, [r3, #0]
}
 8005fd6:	bf00      	nop
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd90      	pop	{r4, r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	52001000 	.word	0x52001000
 8005fe4:	00010009 	.word	0x00010009
 8005fe8:	00020201 	.word	0x00020201
 8005fec:	00030201 	.word	0x00030201

08005ff0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	4a05      	ldr	r2, [pc, #20]	; (8006010 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	601a      	str	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4618      	mov	r0, r3
 8006002:	f7ff fc35 	bl	8005870 <_ZN8touchgfx9DMA_QueueD1Ev>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4618      	mov	r0, r3
 800600a:	3708      	adds	r7, #8
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	08024d90 	.word	0x08024d90

08006014 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f7ff ffe7 	bl	8005ff0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8006022:	2114      	movs	r1, #20
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f01c faf8 	bl	802261a <_ZdlPvj>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4618      	mov	r0, r3
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	801a      	strh	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	805a      	strh	r2, [r3, #2]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	809a      	strh	r2, [r3, #4]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	80da      	strh	r2, [r3, #6]
    {
    }
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4618      	mov	r0, r3
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
	...

08006064 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 800606c:	4a04      	ldr	r2, [pc, #16]	; (8006080 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6013      	str	r3, [r2, #0]
    }
 8006072:	bf00      	nop
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	2400af00 	.word	0x2400af00

08006084 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
    {
 800608c:	4a04      	ldr	r2, [pc, #16]	; (80060a0 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	601a      	str	r2, [r3, #0]
    }
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4618      	mov	r0, r3
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr
 80060a0:	08024740 	.word	0x08024740

080060a4 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
    }
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f7ff ffe9 	bl	8006084 <_ZN8touchgfx12FontProviderD1Ev>
 80060b2:	2104      	movs	r1, #4
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f01c fab0 	bl	802261a <_ZdlPvj>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4618      	mov	r0, r3
 80060be:	3708      	adds	r7, #8
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
 80060d0:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80060d2:	4a0b      	ldr	r2, [pc, #44]	; (8006100 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	601a      	str	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	605a      	str	r2, [r3, #4]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	609a      	str	r2, [r3, #8]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	60da      	str	r2, [r3, #12]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	611a      	str	r2, [r3, #16]
    {
    }
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	4618      	mov	r0, r3
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	08024730 	.word	0x08024730

08006104 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
    {
 800610c:	4a04      	ldr	r2, [pc, #16]	; (8006120 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	601a      	str	r2, [r3, #0]
    }
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4618      	mov	r0, r3
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	08024730 	.word	0x08024730

08006124 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
    }
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7ff ffe9 	bl	8006104 <_ZN8touchgfx7MVPHeapD1Ev>
 8006132:	2114      	movs	r1, #20
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f01c fa70 	bl	802261a <_ZdlPvj>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4618      	mov	r0, r3
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800614e:	bf00      	nop
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
 8006162:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800617a:	bf00      	nop
 800617c:	370c      	adds	r7, #12
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr

08006186 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8006186:	b480      	push	{r7}
 8006188:	b083      	sub	sp, #12
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
 800618e:	460b      	mov	r3, r1
 8006190:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 8006192:	bf00      	nop
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800619e:	b480      	push	{r7}
 80061a0:	b083      	sub	sp, #12
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
    {
    }
 80061a6:	bf00      	nop
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 80061b2:	b480      	push	{r7}
 80061b4:	b083      	sub	sp, #12
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
    {
    }
 80061ba:	bf00      	nop
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
	...

080061c8 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
    {
 80061d0:	4a04      	ldr	r2, [pc, #16]	; (80061e4 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	601a      	str	r2, [r3, #0]
    }
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4618      	mov	r0, r3
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr
 80061e4:	08024708 	.word	0x08024708

080061e8 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
    }
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f7ff ffe9 	bl	80061c8 <_ZN8touchgfx15UIEventListenerD1Ev>
 80061f6:	2104      	movs	r1, #4
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f01c fa0e 	bl	802261a <_ZdlPvj>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4618      	mov	r0, r3
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
    {
 8006210:	4a04      	ldr	r2, [pc, #16]	; (8006224 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	601a      	str	r2, [r3, #0]
    }
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4618      	mov	r0, r3
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	08024fe0 	.word	0x08024fe0

08006228 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
    }
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f7ff ffe9 	bl	8006208 <_ZN8touchgfx3LCDD1Ev>
 8006236:	2108      	movs	r1, #8
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f01c f9ee 	bl	802261a <_ZdlPvj>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4618      	mov	r0, r3
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
    {
    }
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	460b      	mov	r3, r1
 8006266:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	683a      	ldr	r2, [r7, #0]
 8006282:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8006286:	6810      	ldr	r0, [r2, #0]
 8006288:	6851      	ldr	r1, [r2, #4]
 800628a:	c303      	stmia	r3!, {r0, r1}
    }
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
    {
 80062a0:	4a04      	ldr	r2, [pc, #16]	; (80062b4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	601a      	str	r2, [r3, #0]
    }
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4618      	mov	r0, r3
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr
 80062b4:	080246f0 	.word	0x080246f0

080062b8 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
    }
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f7ff ffe9 	bl	8006298 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80062c6:	2104      	movs	r1, #4
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f01c f9a6 	bl	802261a <_ZdlPvj>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4618      	mov	r0, r3
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	801a      	strh	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	805a      	strh	r2, [r3, #2]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	809a      	strh	r2, [r3, #4]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	80da      	strh	r2, [r3, #6]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	811a      	strh	r2, [r3, #8]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	815a      	strh	r2, [r3, #10]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	819a      	strh	r2, [r3, #12]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	739a      	strb	r2, [r3, #14]
        {
        }
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4618      	mov	r0, r3
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 800631e:	b580      	push	{r7, lr}
 8006320:	b082      	sub	sp, #8
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4618      	mov	r0, r3
 800632a:	f7ff ffd5 	bl	80062d8 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	611a      	str	r2, [r3, #16]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	829a      	strh	r2, [r3, #20]
    {
    }
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4618      	mov	r0, r3
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
 8006350:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8006352:	4a55      	ldr	r2, [pc, #340]	; (80064a8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	601a      	str	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	605a      	str	r2, [r3, #4]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	609a      	str	r2, [r3, #8]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	60da      	str	r2, [r3, #12]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	611a      	str	r2, [r3, #16]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	615a      	str	r2, [r3, #20]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	619a      	str	r2, [r3, #24]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	331c      	adds	r3, #28
 8006380:	4618      	mov	r0, r3
 8006382:	f7ff ffcc 	bl	800631e <_ZN8touchgfx8GesturesC1Ev>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	639a      	str	r2, [r3, #56]	; 0x38
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	63da      	str	r2, [r3, #60]	; 0x3c
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	641a      	str	r2, [r3, #64]	; 0x40
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	645a      	str	r2, [r3, #68]	; 0x44
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	64da      	str	r2, [r3, #76]	; 0x4c
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3350      	adds	r3, #80	; 0x50
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7ff fe2f 	bl	8006034 <_ZN8touchgfx4RectC1Ev>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	659a      	str	r2, [r3, #88]	; 0x58
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	661a      	str	r2, [r3, #96]	; 0x60
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	671a      	str	r2, [r3, #112]	; 0x70
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 800645e:	4a13      	ldr	r2, [pc, #76]	; (80064ac <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8006464:	4a12      	ldr	r2, [pc, #72]	; (80064b0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8006466:	8b3b      	ldrh	r3, [r7, #24]
 8006468:	8013      	strh	r3, [r2, #0]
 800646a:	4b11      	ldr	r3, [pc, #68]	; (80064b0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800646c:	881a      	ldrh	r2, [r3, #0]
 800646e:	4b11      	ldr	r3, [pc, #68]	; (80064b4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8006470:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8006472:	4a11      	ldr	r2, [pc, #68]	; (80064b8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8006474:	8bbb      	ldrh	r3, [r7, #28]
 8006476:	8013      	strh	r3, [r2, #0]
 8006478:	4b0f      	ldr	r3, [pc, #60]	; (80064b8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800647a:	881a      	ldrh	r2, [r3, #0]
 800647c:	4b0f      	ldr	r3, [pc, #60]	; (80064bc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 800647e:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8006480:	4b0f      	ldr	r3, [pc, #60]	; (80064c0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8006482:	2200      	movs	r2, #0
 8006484:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8006486:	8b3a      	ldrh	r2, [r7, #24]
 8006488:	8bbb      	ldrh	r3, [r7, #28]
 800648a:	429a      	cmp	r2, r3
 800648c:	bf34      	ite	cc
 800648e:	2301      	movcc	r3, #1
 8006490:	2300      	movcs	r3, #0
 8006492:	b2db      	uxtb	r3, r3
 8006494:	461a      	mov	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	08024c68 	.word	0x08024c68
 80064ac:	2400aea4 	.word	0x2400aea4
 80064b0:	2400ae98 	.word	0x2400ae98
 80064b4:	2400ae9e 	.word	0x2400ae9e
 80064b8:	2400ae9a 	.word	0x2400ae9a
 80064bc:	2400aea0 	.word	0x2400aea0
 80064c0:	2400ae9c 	.word	0x2400ae9c

080064c4 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	4a05      	ldr	r2, [pc, #20]	; (80064e4 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	601a      	str	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7ff fe77 	bl	80061c8 <_ZN8touchgfx15UIEventListenerD1Ev>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4618      	mov	r0, r3
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	08025038 	.word	0x08025038

080064e8 <_ZN8touchgfx11ApplicationD0Ev>:
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7ff ffe7 	bl	80064c4 <_ZN8touchgfx11ApplicationD1Ev>
 80064f6:	f44f 719c 	mov.w	r1, #312	; 0x138
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f01c f88d 	bl	802261a <_ZdlPvj>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4618      	mov	r0, r3
 8006504:	3708      	adds	r7, #8
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800650a:	b580      	push	{r7, lr}
 800650c:	b082      	sub	sp, #8
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f804 	bl	8006520 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8006518:	bf00      	nop
 800651a:	3708      	adds	r7, #8
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00f      	beq.n	8006552 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	330c      	adds	r3, #12
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4610      	mov	r0, r2
 8006546:	4798      	blx	r3
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800654e:	2301      	movs	r3, #1
 8006550:	e000      	b.n	8006554 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8006552:	2300      	movs	r3, #0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00e      	beq.n	8006576 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3308      	adds	r3, #8
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4610      	mov	r0, r2
 800656c:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 8006576:	bf00      	nop
 8006578:	3708      	adds	r7, #8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
	...

08006580 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	4a05      	ldr	r2, [pc, #20]	; (80065a0 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	601a      	str	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4618      	mov	r0, r3
 8006592:	f7ff ff97 	bl	80064c4 <_ZN8touchgfx11ApplicationD1Ev>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4618      	mov	r0, r3
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	080246a4 	.word	0x080246a4

080065a4 <_ZN8touchgfx14MVPApplicationD0Ev>:
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7ff ffe7 	bl	8006580 <_ZN8touchgfx14MVPApplicationD1Ev>
 80065b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f01c f82f 	bl	802261a <_ZdlPvj>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4618      	mov	r0, r3
 80065c0:	3708      	adds	r7, #8
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
	...

080065c8 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	4a08      	ldr	r2, [pc, #32]	; (80065f4 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80065dc:	4618      	mov	r0, r3
 80065de:	f000 fb13 	bl	8006c08 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7ff ffcb 	bl	8006580 <_ZN8touchgfx14MVPApplicationD1Ev>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4618      	mov	r0, r3
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	08024640 	.word	0x08024640

080065f8 <_ZN23FrontendApplicationBaseD0Ev>:
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f7ff ffe1 	bl	80065c8 <_ZN23FrontendApplicationBaseD1Ev>
 8006606:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f01c f805 	bl	802261a <_ZdlPvj>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4618      	mov	r0, r3
 8006614:	3708      	adds	r7, #8
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800661a:	b580      	push	{r7, lr}
 800661c:	b082      	sub	sp, #8
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f001 f914 	bl	8007850 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8006628:	bf00      	nop
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	4a05      	ldr	r2, [pc, #20]	; (8006650 <_ZN19FrontendApplicationD1Ev+0x20>)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4618      	mov	r0, r3
 8006642:	f7ff ffc1 	bl	80065c8 <_ZN23FrontendApplicationBaseD1Ev>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4618      	mov	r0, r3
 800664a:	3708      	adds	r7, #8
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	080245f4 	.word	0x080245f4

08006654 <_ZN19FrontendApplicationD0Ev>:
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f7ff ffe7 	bl	8006630 <_ZN19FrontendApplicationD1Ev>
 8006662:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f01b ffd7 	bl	802261a <_ZdlPvj>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4618      	mov	r0, r3
 8006670:	3708      	adds	r7, #8
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8006676:	b580      	push	{r7, lr}
 8006678:	b082      	sub	sp, #8
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006684:	4618      	mov	r0, r3
 8006686:	f002 fce7 	bl	8009058 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4618      	mov	r0, r3
 800668e:	f00d fd11 	bl	80140b4 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8006692:	bf00      	nop
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 800669a:	b580      	push	{r7, lr}
 800669c:	b082      	sub	sp, #8
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f001 f8d2 	bl	8007850 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 80066ac:	bf00      	nop
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af02      	add	r7, sp, #8
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
 80066c0:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	68b9      	ldr	r1, [r7, #8]
 80066ce:	f7ff fcf9 	bl	80060c4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80066d2:	4a04      	ldr	r2, [pc, #16]	; (80066e4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	601a      	str	r2, [r3, #0]
    {

    }
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	080245e0 	.word	0x080245e0

080066e8 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80066e8:	b580      	push	{r7, lr}
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	4801      	ldr	r0, [pc, #4]	; (80066f4 <__tcf_0+0xc>)
 80066ee:	f000 f95f 	bl	80069b0 <_ZN12FrontendHeapD1Ev>
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	240090d4 	.word	0x240090d4

080066f8 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80066f8:	b580      	push	{r7, lr}
 80066fa:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80066fc:	4b12      	ldr	r3, [pc, #72]	; (8006748 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	f3bf 8f5b 	dmb	ish
 8006704:	b2db      	uxtb	r3, r3
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	bf0c      	ite	eq
 800670e:	2301      	moveq	r3, #1
 8006710:	2300      	movne	r3, #0
 8006712:	b2db      	uxtb	r3, r3
 8006714:	2b00      	cmp	r3, #0
 8006716:	d013      	beq.n	8006740 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8006718:	480b      	ldr	r0, [pc, #44]	; (8006748 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800671a:	f01b ff80 	bl	802261e <__cxa_guard_acquire>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	bf14      	ite	ne
 8006724:	2301      	movne	r3, #1
 8006726:	2300      	moveq	r3, #0
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d008      	beq.n	8006740 <_ZN12FrontendHeap11getInstanceEv+0x48>
 800672e:	4807      	ldr	r0, [pc, #28]	; (800674c <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8006730:	f000 f868 	bl	8006804 <_ZN12FrontendHeapC1Ev>
 8006734:	4806      	ldr	r0, [pc, #24]	; (8006750 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8006736:	f01b ffbd 	bl	80226b4 <atexit>
 800673a:	4803      	ldr	r0, [pc, #12]	; (8006748 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800673c:	f01b ff7b 	bl	8022636 <__cxa_guard_release>
        return instance;
 8006740:	4b02      	ldr	r3, [pc, #8]	; (800674c <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8006742:	4618      	mov	r0, r3
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	24009358 	.word	0x24009358
 800674c:	240090d4 	.word	0x240090d4
 8006750:	080066e9 	.word	0x080066e9

08006754 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	4a05      	ldr	r2, [pc, #20]	; (8006774 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	601a      	str	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4618      	mov	r0, r3
 8006766:	f7ff fccd 	bl	8006104 <_ZN8touchgfx7MVPHeapD1Ev>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4618      	mov	r0, r3
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	080245e0 	.word	0x080245e0

08006778 <_ZN16FrontendHeapBaseD0Ev>:
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f7ff ffe7 	bl	8006754 <_ZN16FrontendHeapBaseD1Ev>
 8006786:	2114      	movs	r1, #20
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f01b ff46 	bl	802261a <_ZdlPvj>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4618      	mov	r0, r3
 8006792:	3708      	adds	r7, #8
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f00b f9fc 	bl	8011ba0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80067a8:	4a03      	ldr	r2, [pc, #12]	; (80067b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	601a      	str	r2, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4618      	mov	r0, r3
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	080245ac 	.word	0x080245ac

080067bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4618      	mov	r0, r3
 80067c8:	f00b f9ea 	bl	8011ba0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80067cc:	4a03      	ldr	r2, [pc, #12]	; (80067dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	601a      	str	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4618      	mov	r0, r3
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	08024578 	.word	0x08024578

080067e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f00b f9d8 	bl	8011ba0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80067f0:	4a03      	ldr	r2, [pc, #12]	; (8006800 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	601a      	str	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4618      	mov	r0, r3
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	08024544 	.word	0x08024544

08006804 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8006804:	b590      	push	{r4, r7, lr}
 8006806:	b085      	sub	sp, #20
 8006808:	af02      	add	r7, sp, #8
 800680a:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f103 0114 	add.w	r1, r3, #20
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f503 748a 	add.w	r4, r3, #276	; 0x114
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f503 7396 	add.w	r3, r3, #300	; 0x12c
                     app(model, *this)
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	4623      	mov	r3, r4
 800682a:	f7ff ff43 	bl	80066b4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800682e:	4a18      	ldr	r2, [pc, #96]	; (8006890 <_ZN12FrontendHeapC1Ev+0x8c>)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	601a      	str	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	3314      	adds	r3, #20
 8006838:	4618      	mov	r0, r3
 800683a:	f7ff ffad 	bl	8006798 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	332c      	adds	r3, #44	; 0x2c
 8006842:	4618      	mov	r0, r3
 8006844:	f7ff ffba 	bl	80067bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800684e:	4618      	mov	r0, r3
 8006850:	f7ff ffc6 	bl	80067e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800685a:	4618      	mov	r0, r3
 800685c:	f002 fbee 	bl	800903c <_ZN5ModelC1Ev>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f503 7096 	add.w	r0, r3, #300	; 0x12c
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	4619      	mov	r1, r3
 8006870:	f002 fbce 	bl	8009010 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800687c:	4619      	mov	r1, r3
 800687e:	4610      	mov	r0, r2
 8006880:	f7ff ff0b 	bl	800669a <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4618      	mov	r0, r3
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	bd90      	pop	{r4, r7, pc}
 800688e:	bf00      	nop
 8006890:	08024530 	.word	0x08024530

08006894 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af02      	add	r7, sp, #8
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
 80068a0:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	8bbb      	ldrh	r3, [r7, #28]
 80068a6:	9301      	str	r3, [sp, #4]
 80068a8:	8b3b      	ldrh	r3, [r7, #24]
 80068aa:	9300      	str	r3, [sp, #0]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	68b9      	ldr	r1, [r7, #8]
 80068b2:	f7ff fd47 	bl	8006344 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80068b6:	4a04      	ldr	r2, [pc, #16]	; (80068c8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	601a      	str	r2, [r3, #0]
    }
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	08024754 	.word	0x08024754

080068cc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af02      	add	r7, sp, #8
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
 80068d8:	603b      	str	r3, [r7, #0]
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	8bbb      	ldrh	r3, [r7, #28]
 80068de:	9301      	str	r3, [sp, #4]
 80068e0:	8b3b      	ldrh	r3, [r7, #24]
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	68b9      	ldr	r1, [r7, #8]
 80068ea:	f7ff ffd3 	bl	8006894 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80068ee:	4a04      	ldr	r2, [pc, #16]	; (8006900 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	601a      	str	r2, [r3, #0]
    }
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	080243e4 	.word	0x080243e4

08006904 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	4a04      	ldr	r2, [pc, #16]	; (8006920 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	601a      	str	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4618      	mov	r0, r3
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	080243cc 	.word	0x080243cc

08006924 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4618      	mov	r0, r3
 8006930:	f7ff ffe8 	bl	8006904 <_ZN8touchgfx15TouchControllerC1Ev>
 8006934:	4a03      	ldr	r2, [pc, #12]	; (8006944 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	601a      	str	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4618      	mov	r0, r3
 800693e:	3708      	adds	r7, #8
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	080243b4 	.word	0x080243b4

08006948 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8006948:	b590      	push	{r4, r7, lr}
 800694a:	b085      	sub	sp, #20
 800694c:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800694e:	f000 fd59 	bl	8007404 <_ZN14BitmapDatabase11getInstanceEv>
 8006952:	4604      	mov	r4, r0
 8006954:	f000 fd60 	bl	8007418 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8006958:	4603      	mov	r3, r0
 800695a:	4619      	mov	r1, r3
 800695c:	2300      	movs	r3, #0
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	2300      	movs	r3, #0
 8006962:	2200      	movs	r2, #0
 8006964:	4620      	mov	r0, r4
 8006966:	f010 f86b 	bl	8016a40 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 800696a:	4809      	ldr	r0, [pc, #36]	; (8006990 <touchgfx_init+0x48>)
 800696c:	f7ff fb7a 	bl	8006064 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8006970:	2000      	movs	r0, #0
 8006972:	f002 fabb 	bl	8008eec <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8006976:	4807      	ldr	r0, [pc, #28]	; (8006994 <touchgfx_init+0x4c>)
 8006978:	f00f ffca 	bl	8016910 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 800697c:	f7ff febc 	bl	80066f8 <_ZN12FrontendHeap11getInstanceEv>
 8006980:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8006982:	4805      	ldr	r0, [pc, #20]	; (8006998 <touchgfx_init+0x50>)
 8006984:	f7fe fda0 	bl	80054c8 <_ZN11TouchGFXHAL10initializeEv>
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	bd90      	pop	{r4, r7, pc}
 8006990:	2400a178 	.word	0x2400a178
 8006994:	2400000c 	.word	0x2400000c
 8006998:	2400a17c 	.word	0x2400a17c

0800699c <touchgfx_taskEntry>:
void touchgfx_components_init()
{
}

void touchgfx_taskEntry()
{
 800699c:	b580      	push	{r7, lr}
 800699e:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80069a0:	4802      	ldr	r0, [pc, #8]	; (80069ac <touchgfx_taskEntry+0x10>)
 80069a2:	f00b fc10 	bl	80121c6 <_ZN8touchgfx3HAL9taskEntryEv>
}
 80069a6:	bf00      	nop
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	2400a17c 	.word	0x2400a17c

080069b0 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	4a10      	ldr	r2, [pc, #64]	; (80069fc <_ZN12FrontendHeapD1Ev+0x4c>)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	601a      	str	r2, [r3, #0]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7ff fe33 	bl	8006630 <_ZN19FrontendApplicationD1Ev>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80069d0:	4618      	mov	r0, r3
 80069d2:	f000 f827 	bl	8006a24 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	332c      	adds	r3, #44	; 0x2c
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 f844 	bl	8006a68 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	3314      	adds	r3, #20
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 f861 	bl	8006aac <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7ff feb1 	bl	8006754 <_ZN16FrontendHeapBaseD1Ev>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4618      	mov	r0, r3
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	08024530 	.word	0x08024530

08006a00 <_ZN12FrontendHeapD0Ev>:
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7ff ffd1 	bl	80069b0 <_ZN12FrontendHeapD1Ev>
 8006a0e:	f44f 7121 	mov.w	r1, #644	; 0x284
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f01b fe01 	bl	802261a <_ZdlPvj>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
	...

08006a24 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	4a05      	ldr	r2, [pc, #20]	; (8006a44 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	601a      	str	r2, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4618      	mov	r0, r3
 8006a36:	f00b f8b2 	bl	8011b9e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	08024544 	.word	0x08024544

08006a48 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f7ff ffe7 	bl	8006a24 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8006a56:	2114      	movs	r1, #20
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f01b fdde 	bl	802261a <_ZdlPvj>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4618      	mov	r0, r3
 8006a62:	3708      	adds	r7, #8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	4a05      	ldr	r2, [pc, #20]	; (8006a88 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	601a      	str	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f00b f890 	bl	8011b9e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4618      	mov	r0, r3
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	08024578 	.word	0x08024578

08006a8c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7ff ffe7 	bl	8006a68 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8006a9a:	21e8      	movs	r1, #232	; 0xe8
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f01b fdbc 	bl	802261a <_ZdlPvj>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3708      	adds	r7, #8
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	4a05      	ldr	r2, [pc, #20]	; (8006acc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4618      	mov	r0, r3
 8006abe:	f00b f86e 	bl	8011b9e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	080245ac 	.word	0x080245ac

08006ad0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f7ff ffe7 	bl	8006aac <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8006ade:	2118      	movs	r1, #24
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f01b fd9a 	bl	802261a <_ZdlPvj>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3708      	adds	r7, #8
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	4a05      	ldr	r2, [pc, #20]	; (8006b10 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	601a      	str	r2, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7ff fabf 	bl	8006084 <_ZN8touchgfx12FontProviderD1Ev>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3708      	adds	r7, #8
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	0802482c 	.word	0x0802482c

08006b14 <_ZN23ApplicationFontProviderD0Ev>:
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f7ff ffe7 	bl	8006af0 <_ZN23ApplicationFontProviderD1Ev>
 8006b22:	2104      	movs	r1, #4
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f01b fd78 	bl	802261a <_ZdlPvj>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	4a05      	ldr	r2, [pc, #20]	; (8006b54 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	601a      	str	r2, [r3, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7ff fb5f 	bl	8006208 <_ZN8touchgfx3LCDD1Ev>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	080253e4 	.word	0x080253e4

08006b58 <_ZN8touchgfx8LCD16bppD0Ev>:
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f7ff ffe7 	bl	8006b34 <_ZN8touchgfx8LCD16bppD1Ev>
 8006b66:	2178      	movs	r1, #120	; 0x78
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f01b fd56 	bl	802261a <_ZdlPvj>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4618      	mov	r0, r3
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <_Z41__static_initialization_and_destruction_0ii>:
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af02      	add	r7, sp, #8
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d119      	bne.n	8006bbc <_Z41__static_initialization_and_destruction_0ii+0x44>
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d114      	bne.n	8006bbc <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8006b92:	4818      	ldr	r0, [pc, #96]	; (8006bf4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8006b94:	f7ff fec6 	bl	8006924 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8006b98:	4817      	ldr	r0, [pc, #92]	; (8006bf8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8006b9a:	f7fe ff25 	bl	80059e8 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8006b9e:	4817      	ldr	r0, [pc, #92]	; (8006bfc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8006ba0:	f013 f850 	bl	8019c44 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8006ba4:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006ba8:	9301      	str	r3, [sp, #4]
 8006baa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	4b10      	ldr	r3, [pc, #64]	; (8006bf4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8006bb2:	4a12      	ldr	r2, [pc, #72]	; (8006bfc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8006bb4:	4910      	ldr	r1, [pc, #64]	; (8006bf8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8006bb6:	4812      	ldr	r0, [pc, #72]	; (8006c00 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8006bb8:	f7ff fe88 	bl	80068cc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d113      	bne.n	8006bea <_Z41__static_initialization_and_destruction_0ii+0x72>
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d10e      	bne.n	8006bea <_Z41__static_initialization_and_destruction_0ii+0x72>
 8006bcc:	480c      	ldr	r0, [pc, #48]	; (8006c00 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8006bce:	f7fe fcf3 	bl	80055b8 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8006bd2:	480c      	ldr	r0, [pc, #48]	; (8006c04 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006bd4:	f7ff ff8c 	bl	8006af0 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8006bd8:	4808      	ldr	r0, [pc, #32]	; (8006bfc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8006bda:	f7ff ffab 	bl	8006b34 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 8006bde:	4806      	ldr	r0, [pc, #24]	; (8006bf8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8006be0:	f7fe ff2c 	bl	8005a3c <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8006be4:	4803      	ldr	r0, [pc, #12]	; (8006bf4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8006be6:	f7fe f9cd 	bl	8004f84 <_ZN20STM32TouchControllerD1Ev>
}
 8006bea:	bf00      	nop
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	2400935c 	.word	0x2400935c
 8006bf8:	24009360 	.word	0x24009360
 8006bfc:	2400a100 	.word	0x2400a100
 8006c00:	2400a17c 	.word	0x2400a17c
 8006c04:	2400000c 	.word	0x2400000c

08006c08 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	4a05      	ldr	r2, [pc, #20]	; (8006c28 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	601a      	str	r2, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7ff fb3d 	bl	8006298 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4618      	mov	r0, r3
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	0802468c 	.word	0x0802468c

08006c2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f7ff ffe7 	bl	8006c08 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8006c3a:	2110      	movs	r1, #16
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f01b fcec 	bl	802261a <_ZdlPvj>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4618      	mov	r0, r3
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8006c54:	2301      	movs	r3, #1
    }
 8006c56:	4618      	mov	r0, r3
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8006c62:	b480      	push	{r7}
 8006c64:	b083      	sub	sp, #12
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8006c6a:	230c      	movs	r3, #12
    }
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	460b      	mov	r3, r1
 8006c82:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8006c84:	887a      	ldrh	r2, [r7, #2]
 8006c86:	4613      	mov	r3, r2
 8006c88:	005b      	lsls	r3, r3, #1
 8006c8a:	4413      	add	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	3308      	adds	r3, #8
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	4413      	add	r3, r2
    }
 8006c94:	4618      	mov	r0, r3
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	460b      	mov	r3, r1
 8006caa:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8006cac:	887a      	ldrh	r2, [r7, #2]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	005b      	lsls	r3, r3, #1
 8006cb2:	4413      	add	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	3308      	adds	r3, #8
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	4413      	add	r3, r2
    }
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8006cd0:	2301      	movs	r3, #1
    }
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	370c      	adds	r7, #12
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8006cde:	b480      	push	{r7}
 8006ce0:	b083      	sub	sp, #12
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8006ce6:	23e0      	movs	r3, #224	; 0xe0
    }
 8006ce8:	4618      	mov	r0, r3
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8006d00:	887a      	ldrh	r2, [r7, #2]
 8006d02:	4613      	mov	r3, r2
 8006d04:	00db      	lsls	r3, r3, #3
 8006d06:	1a9b      	subs	r3, r3, r2
 8006d08:	015b      	lsls	r3, r3, #5
 8006d0a:	3308      	adds	r3, #8
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	4413      	add	r3, r2
    }
 8006d10:	4618      	mov	r0, r3
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	460b      	mov	r3, r1
 8006d26:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8006d28:	887a      	ldrh	r2, [r7, #2]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	00db      	lsls	r3, r3, #3
 8006d2e:	1a9b      	subs	r3, r3, r2
 8006d30:	015b      	lsls	r3, r3, #5
 8006d32:	3308      	adds	r3, #8
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	4413      	add	r3, r2
    }
 8006d38:	4618      	mov	r0, r3
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8006d4c:	2301      	movs	r3, #1
    }
 8006d4e:	4618      	mov	r0, r3
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8006d5a:	b480      	push	{r7}
 8006d5c:	b083      	sub	sp, #12
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8006d62:	2310      	movs	r3, #16
    }
 8006d64:	4618      	mov	r0, r3
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	460b      	mov	r3, r1
 8006d7a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8006d7c:	887b      	ldrh	r3, [r7, #2]
 8006d7e:	011b      	lsls	r3, r3, #4
 8006d80:	3308      	adds	r3, #8
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	4413      	add	r3, r2
    }
 8006d86:	4618      	mov	r0, r3
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8006d92:	b480      	push	{r7}
 8006d94:	b083      	sub	sp, #12
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8006d9e:	887b      	ldrh	r3, [r7, #2]
 8006da0:	011b      	lsls	r3, r3, #4
 8006da2:	3308      	adds	r3, #8
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	4413      	add	r3, r2
    }
 8006da8:	4618      	mov	r0, r3
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	68d2      	ldr	r2, [r2, #12]
 8006dc4:	1052      	asrs	r2, r2, #1
 8006dc6:	1899      	adds	r1, r3, r2
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	f003 0301 	and.w	r3, r3, #1
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d102      	bne.n	8006dda <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	e00a      	b.n	8006df0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	68d2      	ldr	r2, [r2, #12]
 8006de2:	1052      	asrs	r2, r2, #1
 8006de4:	4413      	add	r3, r2
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	6892      	ldr	r2, [r2, #8]
 8006dec:	4413      	add	r3, r2
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4608      	mov	r0, r1
 8006df2:	4798      	blx	r3
    }
 8006df4:	bf00      	nop
 8006df6:	3708      	adds	r7, #8
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d010      	beq.n	8006e2e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d107      	bne.n	8006e24 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	f003 0301 	and.w	r3, r3, #1
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8006e20:	2301      	movs	r3, #1
 8006e22:	e000      	b.n	8006e26 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8006e24:	2300      	movs	r3, #0
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d001      	beq.n	8006e2e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e000      	b.n	8006e30 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8006e2e:	2300      	movs	r3, #0
    }
 8006e30:	4618      	mov	r0, r3
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <_GLOBAL__sub_I_touchgfx_init>:
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006e44:	2001      	movs	r0, #1
 8006e46:	f7ff fe97 	bl	8006b78 <_Z41__static_initialization_and_destruction_0ii>
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <_GLOBAL__sub_D_touchgfx_init>:
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006e54:	2000      	movs	r0, #0
 8006e56:	f7ff fe8f 	bl	8006b78 <_Z41__static_initialization_and_destruction_0ii>
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	3320      	adds	r3, #32
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	4798      	blx	r3
    }
 8006e70:	bf00      	nop
 8006e72:	3708      	adds	r7, #8
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8006e86:	3301      	adds	r3, #1
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <__NVIC_EnableIRQ>:
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006ea6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	db0b      	blt.n	8006ec6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006eae:	88fb      	ldrh	r3, [r7, #6]
 8006eb0:	f003 021f 	and.w	r2, r3, #31
 8006eb4:	4907      	ldr	r1, [pc, #28]	; (8006ed4 <__NVIC_EnableIRQ+0x38>)
 8006eb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006eba:	095b      	lsrs	r3, r3, #5
 8006ebc:	2001      	movs	r0, #1
 8006ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8006ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006ec6:	bf00      	nop
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	e000e100 	.word	0xe000e100

08006ed8 <__NVIC_DisableIRQ>:
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	4603      	mov	r3, r0
 8006ee0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006ee2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	db12      	blt.n	8006f10 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006eea:	88fb      	ldrh	r3, [r7, #6]
 8006eec:	f003 021f 	and.w	r2, r3, #31
 8006ef0:	490a      	ldr	r1, [pc, #40]	; (8006f1c <__NVIC_DisableIRQ+0x44>)
 8006ef2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ef6:	095b      	lsrs	r3, r3, #5
 8006ef8:	2001      	movs	r0, #1
 8006efa:	fa00 f202 	lsl.w	r2, r0, r2
 8006efe:	3320      	adds	r3, #32
 8006f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006f04:	f3bf 8f4f 	dsb	sy
}
 8006f08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006f0a:	f3bf 8f6f 	isb	sy
}
 8006f0e:	bf00      	nop
}
 8006f10:	bf00      	nop
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr
 8006f1c:	e000e100 	.word	0xe000e100

08006f20 <__NVIC_SetPriority>:
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	4603      	mov	r3, r0
 8006f28:	6039      	str	r1, [r7, #0]
 8006f2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006f2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	db0a      	blt.n	8006f4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	b2da      	uxtb	r2, r3
 8006f38:	490c      	ldr	r1, [pc, #48]	; (8006f6c <__NVIC_SetPriority+0x4c>)
 8006f3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f3e:	0112      	lsls	r2, r2, #4
 8006f40:	b2d2      	uxtb	r2, r2
 8006f42:	440b      	add	r3, r1
 8006f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006f48:	e00a      	b.n	8006f60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	4908      	ldr	r1, [pc, #32]	; (8006f70 <__NVIC_SetPriority+0x50>)
 8006f50:	88fb      	ldrh	r3, [r7, #6]
 8006f52:	f003 030f 	and.w	r3, r3, #15
 8006f56:	3b04      	subs	r3, #4
 8006f58:	0112      	lsls	r2, r2, #4
 8006f5a:	b2d2      	uxtb	r2, r2
 8006f5c:	440b      	add	r3, r1
 8006f5e:	761a      	strb	r2, [r3, #24]
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	e000e100 	.word	0xe000e100
 8006f70:	e000ed00 	.word	0xe000ed00

08006f74 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8006f74:	b5b0      	push	{r4, r5, r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f00b f90f 	bl	80121a2 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8006f84:	687d      	ldr	r5, [r7, #4]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3364      	adds	r3, #100	; 0x64
 8006f8c:	681c      	ldr	r4, [r3, #0]
 8006f8e:	f00d f9d9 	bl	8014344 <_ZN8touchgfx11Application11getInstanceEv>
 8006f92:	4603      	mov	r3, r0
 8006f94:	4619      	mov	r1, r3
 8006f96:	4628      	mov	r0, r5
 8006f98:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0xD0200000, (void*)0);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3388      	adds	r3, #136	; 0x88
 8006fa2:	681c      	ldr	r4, [r3, #0]
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	4a04      	ldr	r2, [pc, #16]	; (8006fb8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8006fa8:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8006fac:	47a0      	blx	r4
}
 8006fae:	bf00      	nop
 8006fb0:	3708      	adds	r7, #8
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	d0200000 	.word	0xd0200000

08006fbc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8006fc4:	2109      	movs	r1, #9
 8006fc6:	205a      	movs	r0, #90	; 0x5a
 8006fc8:	f7ff ffaa 	bl	8006f20 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8006fcc:	2109      	movs	r1, #9
 8006fce:	2058      	movs	r0, #88	; 0x58
 8006fd0:	f7ff ffa6 	bl	8006f20 <__NVIC_SetPriority>
}
 8006fd4:	bf00      	nop
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8006fe4:	205a      	movs	r0, #90	; 0x5a
 8006fe6:	f7ff ff59 	bl	8006e9c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8006fea:	2058      	movs	r0, #88	; 0x58
 8006fec:	f7ff ff56 	bl	8006e9c <__NVIC_EnableIRQ>
}
 8006ff0:	bf00      	nop
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8007000:	205a      	movs	r0, #90	; 0x5a
 8007002:	f7ff ff69 	bl	8006ed8 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8007006:	2058      	movs	r0, #88	; 0x58
 8007008:	f7ff ff66 	bl	8006ed8 <__NVIC_DisableIRQ>
}
 800700c:	bf00      	nop
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800701c:	4b11      	ldr	r3, [pc, #68]	; (8007064 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	b29b      	uxth	r3, r3
 8007022:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007026:	b29b      	uxth	r3, r3
 8007028:	3b01      	subs	r3, #1
 800702a:	b29a      	uxth	r2, r3
 800702c:	4b0e      	ldr	r3, [pc, #56]	; (8007068 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800702e:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8007030:	4b0c      	ldr	r3, [pc, #48]	; (8007064 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	b29b      	uxth	r3, r3
 8007036:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800703a:	b29b      	uxth	r3, r3
 800703c:	3b01      	subs	r3, #1
 800703e:	b29a      	uxth	r2, r3
 8007040:	4b0a      	ldr	r3, [pc, #40]	; (800706c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8007042:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8007044:	4b08      	ldr	r3, [pc, #32]	; (8007068 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8007046:	881a      	ldrh	r2, [r3, #0]
 8007048:	4b06      	ldr	r3, [pc, #24]	; (8007064 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800704a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800704c:	4b05      	ldr	r3, [pc, #20]	; (8007064 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800704e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007050:	4a04      	ldr	r2, [pc, #16]	; (8007064 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8007052:	f043 0301 	orr.w	r3, r3, #1
 8007056:	6353      	str	r3, [r2, #52]	; 0x34
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr
 8007064:	50001000 	.word	0x50001000
 8007068:	2400a1fa 	.word	0x2400a1fa
 800706c:	2400a1fc 	.word	0x2400a1fc

08007070 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4618      	mov	r0, r3
 800707c:	f00b f878 	bl	8012170 <_ZN8touchgfx3HAL10beginFrameEv>
 8007080:	4603      	mov	r3, r0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3708      	adds	r7, #8
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
	...

0800708c <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
    if (frameBufferUpdatedThisFrame)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800709a:	2b00      	cmp	r3, #0
 800709c:	d002      	beq.n	80070a4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x18>
    {
        refreshRequested = true;
 800709e:	4b05      	ldr	r3, [pc, #20]	; (80070b4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x28>)
 80070a0:	2201      	movs	r2, #1
 80070a2:	701a      	strb	r2, [r3, #0]
    }
    HAL::endFrame();
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4618      	mov	r0, r3
 80070a8:	f00b f86e 	bl	8012188 <_ZN8touchgfx3HAL8endFrameEv>
}
 80070ac:	bf00      	nop
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	2400a1f8 	.word	0x2400a1f8

080070b8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80070c0:	4b03      	ldr	r3, [pc, #12]	; (80070d0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 80070c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr
 80070d0:	50001084 	.word	0x50001084

080070d4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80070de:	4a06      	ldr	r2, [pc, #24]	; (80070f8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80070e4:	4b05      	ldr	r3, [pc, #20]	; (80070fc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 80070e6:	2201      	movs	r2, #1
 80070e8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80070ea:	bf00      	nop
 80070ec:	370c      	adds	r7, #12
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	50001084 	.word	0x50001084
 80070fc:	50001000 	.word	0x50001000

08007100 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b086      	sub	sp, #24
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	4618      	mov	r0, r3
 8007110:	f00a fff8 	bl	8012104 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8007114:	4b25      	ldr	r3, [pc, #148]	; (80071ac <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8007116:	695b      	ldr	r3, [r3, #20]
 8007118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800711c:	2b00      	cmp	r3, #0
 800711e:	bf14      	ite	ne
 8007120:	2301      	movne	r3, #1
 8007122:	2300      	moveq	r3, #0
 8007124:	b2db      	uxtb	r3, r3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d03c      	beq.n	80071a4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa4>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800712a:	4b20      	ldr	r3, [pc, #128]	; (80071ac <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 800712c:	2200      	movs	r2, #0
 800712e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8007132:	f3bf 8f4f 	dsb	sy
}
 8007136:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8007138:	4b1c      	ldr	r3, [pc, #112]	; (80071ac <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 800713a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800713e:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	0b5b      	lsrs	r3, r3, #13
 8007144:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007148:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	08db      	lsrs	r3, r3, #3
 800714e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007152:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	015a      	lsls	r2, r3, #5
 8007158:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800715c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8007162:	4912      	ldr	r1, [pc, #72]	; (80071ac <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8007164:	4313      	orrs	r3, r2
 8007166:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	1e5a      	subs	r2, r3, #1
 800716e:	60fa      	str	r2, [r7, #12]
 8007170:	2b00      	cmp	r3, #0
 8007172:	bf14      	ite	ne
 8007174:	2301      	movne	r3, #1
 8007176:	2300      	moveq	r3, #0
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d000      	beq.n	8007180 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
      do {
 800717e:	e7e9      	b.n	8007154 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    } while(sets-- != 0U);
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	1e5a      	subs	r2, r3, #1
 8007184:	613a      	str	r2, [r7, #16]
 8007186:	2b00      	cmp	r3, #0
 8007188:	bf14      	ite	ne
 800718a:	2301      	movne	r3, #1
 800718c:	2300      	moveq	r3, #0
 800718e:	b2db      	uxtb	r3, r3
 8007190:	2b00      	cmp	r3, #0
 8007192:	d000      	beq.n	8007196 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x96>
    do {
 8007194:	e7d9      	b.n	800714a <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8007196:	f3bf 8f4f 	dsb	sy
}
 800719a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800719c:	f3bf 8f6f 	isb	sy
}
 80071a0:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80071a2:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 80071a4:	bf00      	nop
 80071a6:	3718      	adds	r7, #24
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	e000ed00 	.word	0xe000ed00

080071b0 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]
 80071bc:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	68b9      	ldr	r1, [r7, #8]
 80071c6:	f00b f906 	bl	80123d6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 80071ca:	4603      	mov	r3, r0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 80071d4:	b480      	push	{r7}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80071dc:	4b26      	ldr	r3, [pc, #152]	; (8007278 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80071de:	695b      	ldr	r3, [r3, #20]
 80071e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	bf14      	ite	ne
 80071e8:	2301      	movne	r3, #1
 80071ea:	2300      	moveq	r3, #0
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d03c      	beq.n	800726c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80071f2:	4b21      	ldr	r3, [pc, #132]	; (8007278 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80071fa:	f3bf 8f4f 	dsb	sy
}
 80071fe:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8007200:	4b1d      	ldr	r3, [pc, #116]	; (8007278 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8007202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007206:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	0b5b      	lsrs	r3, r3, #13
 800720c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007210:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	08db      	lsrs	r3, r3, #3
 8007216:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800721a:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	015a      	lsls	r2, r3, #5
 8007220:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8007224:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800722a:	4913      	ldr	r1, [pc, #76]	; (8007278 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 800722c:	4313      	orrs	r3, r2
 800722e:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	1e5a      	subs	r2, r3, #1
 8007236:	60fa      	str	r2, [r7, #12]
 8007238:	2b00      	cmp	r3, #0
 800723a:	bf14      	ite	ne
 800723c:	2301      	movne	r3, #1
 800723e:	2300      	moveq	r3, #0
 8007240:	b2db      	uxtb	r3, r3
 8007242:	2b00      	cmp	r3, #0
 8007244:	d000      	beq.n	8007248 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x74>
      do {
 8007246:	e7e9      	b.n	800721c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	1e5a      	subs	r2, r3, #1
 800724c:	613a      	str	r2, [r7, #16]
 800724e:	2b00      	cmp	r3, #0
 8007250:	bf14      	ite	ne
 8007252:	2301      	movne	r3, #1
 8007254:	2300      	moveq	r3, #0
 8007256:	b2db      	uxtb	r3, r3
 8007258:	2b00      	cmp	r3, #0
 800725a:	d000      	beq.n	800725e <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x8a>
    do {
 800725c:	e7d9      	b.n	8007212 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 800725e:	f3bf 8f4f 	dsb	sy
}
 8007262:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007264:	f3bf 8f6f 	isb	sy
}
 8007268:	bf00      	nop
}
 800726a:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 800726c:	bf00      	nop
 800726e:	371c      	adds	r7, #28
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr
 8007278:	e000ed00 	.word	0xe000ed00

0800727c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 800727c:	b480      	push	{r7}
 800727e:	b087      	sub	sp, #28
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8007284:	4b26      	ldr	r3, [pc, #152]	; (8007320 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8007286:	695b      	ldr	r3, [r3, #20]
 8007288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800728c:	2b00      	cmp	r3, #0
 800728e:	bf14      	ite	ne
 8007290:	2301      	movne	r3, #1
 8007292:	2300      	moveq	r3, #0
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d03c      	beq.n	8007314 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800729a:	4b21      	ldr	r3, [pc, #132]	; (8007320 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 800729c:	2200      	movs	r2, #0
 800729e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80072a2:	f3bf 8f4f 	dsb	sy
}
 80072a6:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80072a8:	4b1d      	ldr	r3, [pc, #116]	; (8007320 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 80072aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072ae:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	0b5b      	lsrs	r3, r3, #13
 80072b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80072b8:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	08db      	lsrs	r3, r3, #3
 80072be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072c2:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	015a      	lsls	r2, r3, #5
 80072c8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80072cc:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80072d2:	4913      	ldr	r1, [pc, #76]	; (8007320 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 80072d4:	4313      	orrs	r3, r2
 80072d6:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	1e5a      	subs	r2, r3, #1
 80072de:	60fa      	str	r2, [r7, #12]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	bf14      	ite	ne
 80072e4:	2301      	movne	r3, #1
 80072e6:	2300      	moveq	r3, #0
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d000      	beq.n	80072f0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x74>
      do {
 80072ee:	e7e9      	b.n	80072c4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	1e5a      	subs	r2, r3, #1
 80072f4:	613a      	str	r2, [r7, #16]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	bf14      	ite	ne
 80072fa:	2301      	movne	r3, #1
 80072fc:	2300      	moveq	r3, #0
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b00      	cmp	r3, #0
 8007302:	d000      	beq.n	8007306 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x8a>
    do {
 8007304:	e7d9      	b.n	80072ba <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8007306:	f3bf 8f4f 	dsb	sy
}
 800730a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800730c:	f3bf 8f6f 	isb	sy
}
 8007310:	bf00      	nop
}
 8007312:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8007314:	bf00      	nop
 8007316:	371c      	adds	r7, #28
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr
 8007320:	e000ed00 	.word	0xe000ed00

08007324 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 800732c:	f7fe fb22 	bl	8005974 <_ZN8touchgfx3HAL11getInstanceEv>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	bf0c      	ite	eq
 8007336:	2301      	moveq	r3, #1
 8007338:	2300      	movne	r3, #0
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b00      	cmp	r3, #0
 800733e:	d132      	bne.n	80073a6 <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8007340:	4b1b      	ldr	r3, [pc, #108]	; (80073b0 <HAL_LTDC_LineEventCallback+0x8c>)
 8007342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007344:	4a1b      	ldr	r2, [pc, #108]	; (80073b4 <HAL_LTDC_LineEventCallback+0x90>)
 8007346:	8812      	ldrh	r2, [r2, #0]
 8007348:	4293      	cmp	r3, r2
 800734a:	bf0c      	ite	eq
 800734c:	2301      	moveq	r3, #1
 800734e:	2300      	movne	r3, #0
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b00      	cmp	r3, #0
 8007354:	d017      	beq.n	8007386 <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8007356:	4b18      	ldr	r3, [pc, #96]	; (80073b8 <HAL_LTDC_LineEventCallback+0x94>)
 8007358:	881b      	ldrh	r3, [r3, #0]
 800735a:	4619      	mov	r1, r3
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f006 fbc7 	bl	800daf0 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8007362:	f7fe fb07 	bl	8005974 <_ZN8touchgfx3HAL11getInstanceEv>
 8007366:	4603      	mov	r3, r0
 8007368:	4618      	mov	r0, r3
 800736a:	f7ff fd85 	bl	8006e78 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 800736e:	f7fe f9fb 	bl	8005768 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8007372:	f7fe faff 	bl	8005974 <_ZN8touchgfx3HAL11getInstanceEv>
 8007376:	4603      	mov	r3, r0
 8007378:	4618      	mov	r0, r3
 800737a:	f00b fc57 	bl	8012c2c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 800737e:	2000      	movs	r0, #0
 8007380:	f7fd fe22 	bl	8004fc8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8007384:	e010      	b.n	80073a8 <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8007386:	4b0b      	ldr	r3, [pc, #44]	; (80073b4 <HAL_LTDC_LineEventCallback+0x90>)
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	4619      	mov	r1, r3
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f006 fbaf 	bl	800daf0 <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 8007392:	f7fe faef 	bl	8005974 <_ZN8touchgfx3HAL11getInstanceEv>
 8007396:	4603      	mov	r3, r0
 8007398:	4618      	mov	r0, r3
 800739a:	f7ff fd5f 	bl	8006e5c <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 800739e:	2000      	movs	r0, #0
 80073a0:	f7fd fe6e 	bl	8005080 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80073a4:	e000      	b.n	80073a8 <HAL_LTDC_LineEventCallback+0x84>
            return;
 80073a6:	bf00      	nop
        }
    }
 80073a8:	3708      	adds	r7, #8
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	50001000 	.word	0x50001000
 80073b4:	2400a1fa 	.word	0x2400a1fa
 80073b8:	2400a1fc 	.word	0x2400a1fc

080073bc <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	460b      	mov	r3, r1
 80073c6:	807b      	strh	r3, [r7, #2]
    switch (typography)
 80073c8:	887b      	ldrh	r3, [r7, #2]
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d010      	beq.n	80073f0 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	dc13      	bgt.n	80073fa <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d002      	beq.n	80073dc <_ZN23ApplicationFontProvider7getFontEt+0x20>
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d005      	beq.n	80073e6 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 80073da:	e00e      	b.n	80073fa <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80073dc:	f001 fde4 	bl	8008fa8 <_ZN17TypedTextDatabase8getFontsEv>
 80073e0:	4603      	mov	r3, r0
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	e00a      	b.n	80073fc <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80073e6:	f001 fddf 	bl	8008fa8 <_ZN17TypedTextDatabase8getFontsEv>
 80073ea:	4603      	mov	r3, r0
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	e005      	b.n	80073fc <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80073f0:	f001 fdda 	bl	8008fa8 <_ZN17TypedTextDatabase8getFontsEv>
 80073f4:	4603      	mov	r3, r0
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	e000      	b.n	80073fc <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 80073fa:	2300      	movs	r3, #0
    }
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8007404:	b480      	push	{r7}
 8007406:	af00      	add	r7, sp, #0
    return bitmap_database;
 8007408:	4b02      	ldr	r3, [pc, #8]	; (8007414 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800740a:	4618      	mov	r0, r3
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	08024838 	.word	0x08024838

08007418 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8007418:	b480      	push	{r7}
 800741a:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800741c:	2303      	movs	r3, #3
}
 800741e:	4618      	mov	r0, r3
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
    {
 8007430:	4a04      	ldr	r2, [pc, #16]	; (8007444 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	601a      	str	r2, [r3, #0]
    }
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4618      	mov	r0, r3
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr
 8007444:	08024a20 	.word	0x08024a20

08007448 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
    }
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f7ff ffe9 	bl	8007428 <_ZN8touchgfx4FontD1Ev>
 8007456:	2110      	movs	r1, #16
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f01b f8de 	bl	802261a <_ZdlPvj>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4618      	mov	r0, r3
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8007468:	b590      	push	{r4, r7, lr}
 800746a:	b087      	sub	sp, #28
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	460b      	mov	r3, r1
 8007472:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8007474:	887b      	ldrh	r3, [r7, #2]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d101      	bne.n	800747e <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800747a:	2300      	movs	r3, #0
 800747c:	e010      	b.n	80074a0 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800747e:	2300      	movs	r3, #0
 8007480:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8007482:	2300      	movs	r3, #0
 8007484:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	3308      	adds	r3, #8
 800748c:	681c      	ldr	r4, [r3, #0]
 800748e:	f107 030f 	add.w	r3, r7, #15
 8007492:	f107 0210 	add.w	r2, r7, #16
 8007496:	8879      	ldrh	r1, [r7, #2]
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	47a0      	blx	r4
 800749c:	6178      	str	r0, [r7, #20]
        return glyph;
 800749e:	697b      	ldr	r3, [r7, #20]
    }
 80074a0:	4618      	mov	r0, r3
 80074a2:	371c      	adds	r7, #28
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd90      	pop	{r4, r7, pc}

080074a8 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	895b      	ldrh	r3, [r3, #10]
    }
 80074b4:	4618      	mov	r0, r3
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	899b      	ldrh	r3, [r3, #12]
    }
 80074cc:	4618      	mov	r0, r3
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	889b      	ldrh	r3, [r3, #4]
    }
 80074e4:	4618      	mov	r0, r3
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	889a      	ldrh	r2, [r3, #4]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	799b      	ldrb	r3, [r3, #6]
 8007500:	b29b      	uxth	r3, r3
 8007502:	4413      	add	r3, r2
 8007504:	b29b      	uxth	r3, r3
    }
 8007506:	4618      	mov	r0, r3
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8007512:	b480      	push	{r7}
 8007514:	b083      	sub	sp, #12
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	79db      	ldrb	r3, [r3, #7]
 800751e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8007522:	b2db      	uxtb	r3, r3
    }
 8007524:	4618      	mov	r0, r3
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	79db      	ldrb	r3, [r3, #7]
 800753c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007540:	b2db      	uxtb	r3, r3
    }
 8007542:	4618      	mov	r0, r3
 8007544:	370c      	adds	r7, #12
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
	...

08007550 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	4a05      	ldr	r2, [pc, #20]	; (8007570 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	601a      	str	r2, [r3, #0]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4618      	mov	r0, r3
 8007562:	f7ff ff61 	bl	8007428 <_ZN8touchgfx4FontD1Ev>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4618      	mov	r0, r3
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	080250ec 	.word	0x080250ec

08007574 <_ZN8touchgfx9ConstFontD0Ev>:
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f7ff ffe7 	bl	8007550 <_ZN8touchgfx9ConstFontD1Ev>
 8007582:	2118      	movs	r1, #24
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f01b f848 	bl	802261a <_ZdlPvj>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4618      	mov	r0, r3
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	4a05      	ldr	r2, [pc, #20]	; (80075b4 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	601a      	str	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7ff ffd3 	bl	8007550 <_ZN8touchgfx9ConstFontD1Ev>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4618      	mov	r0, r3
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	080248c4 	.word	0x080248c4

080075b8 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f7ff ffe7 	bl	8007594 <_ZN8touchgfx13GeneratedFontD1Ev>
 80075c6:	2128      	movs	r1, #40	; 0x28
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f01b f826 	bl	802261a <_ZdlPvj>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4618      	mov	r0, r3
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	4618      	mov	r0, r3
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 80075f0:	b480      	push	{r7}
 80075f2:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80075f4:	4b0b      	ldr	r3, [pc, #44]	; (8007624 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d008      	beq.n	8007612 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8007600:	4b08      	ldr	r3, [pc, #32]	; (8007624 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007606:	2b00      	cmp	r3, #0
 8007608:	d003      	beq.n	8007612 <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 800760a:	4b06      	ldr	r3, [pc, #24]	; (8007624 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007610:	e002      	b.n	8007618 <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 8007612:	4b04      	ldr	r3, [pc, #16]	; (8007624 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	689b      	ldr	r3, [r3, #8]
    }
 8007618:	4618      	mov	r0, r3
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	2400aea4 	.word	0x2400aea4

08007628 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8007630:	4a07      	ldr	r2, [pc, #28]	; (8007650 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	601a      	str	r2, [r3, #0]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	605a      	str	r2, [r3, #4]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	721a      	strb	r2, [r3, #8]
    {
    }
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4618      	mov	r0, r3
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr
 8007650:	080248a0 	.word	0x080248a0

08007654 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
    {
 800765c:	4a04      	ldr	r2, [pc, #16]	; (8007670 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	601a      	str	r2, [r3, #0]
    }
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4618      	mov	r0, r3
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	080248a0 	.word	0x080248a0

08007674 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
    }
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f7ff ffe9 	bl	8007654 <_ZN8touchgfx10TransitionD1Ev>
 8007682:	210c      	movs	r1, #12
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f01a ffc8 	bl	802261a <_ZdlPvj>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4618      	mov	r0, r3
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
    {
    }
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
    {
    }
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
    {
    }
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 80076d8:	f00c fe34 	bl	8014344 <_ZN8touchgfx11Application11getInstanceEv>
 80076dc:	4603      	mov	r3, r0
 80076de:	4618      	mov	r0, r3
 80076e0:	f00d f9d6 	bl	8014a90 <_ZN8touchgfx11Application10invalidateEv>
    }
 80076e4:	bf00      	nop
 80076e6:	3708      	adds	r7, #8
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	683a      	ldr	r2, [r7, #0]
 80076fa:	605a      	str	r2, [r3, #4]
    }
 80076fc:	bf00      	nop
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4618      	mov	r0, r3
 8007714:	f00c fe38 	bl	8014388 <_ZN8touchgfx11ApplicationC1Ev>
 8007718:	4a09      	ldr	r2, [pc, #36]	; (8007740 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	601a      	str	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        instance = this;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a04      	ldr	r2, [pc, #16]	; (8007744 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8007732:	6013      	str	r3, [r2, #0]
    }
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4618      	mov	r0, r3
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	080246a4 	.word	0x080246a4
 8007744:	2400aef0 	.word	0x2400aef0

08007748 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	683a      	ldr	r2, [r7, #0]
 8007756:	601a      	str	r2, [r3, #0]
    }
 8007758:	bf00      	nop
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	721a      	strb	r2, [r3, #8]
    }
 8007772:	bf00      	nop
 8007774:	370c      	adds	r7, #12
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800777e:	b480      	push	{r7}
 8007780:	b083      	sub	sp, #12
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
 8007786:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	605a      	str	r2, [r3, #4]
    }
 800778e:	bf00      	nop
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
	...

0800779c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7ff ffac 	bl	8007708 <_ZN8touchgfx14MVPApplicationC1Ev>
 80077b0:	4a12      	ldr	r2, [pc, #72]	; (80077fc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	601a      	str	r2, [r3, #0]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80077bc:	4618      	mov	r0, r3
 80077be:	f000 f89d 	bl	80078fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80077d2:	f7fe f8cf 	bl	8005974 <_ZN8touchgfx3HAL11getInstanceEv>
 80077d6:	4603      	mov	r3, r0
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	3208      	adds	r2, #8
 80077dc:	6812      	ldr	r2, [r2, #0]
 80077de:	2100      	movs	r1, #0
 80077e0:	4618      	mov	r0, r3
 80077e2:	4790      	blx	r2
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80077e4:	f7ff ff04 	bl	80075f0 <_ZN8touchgfx3HAL3lcdEv>
 80077e8:	4603      	mov	r3, r0
 80077ea:	4618      	mov	r0, r3
 80077ec:	f014 f811 	bl	801b812 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	08024640 	.word	0x08024640

08007800 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4618      	mov	r0, r3
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	683a      	ldr	r2, [r7, #0]
 8007826:	4611      	mov	r1, r2
 8007828:	4618      	mov	r0, r3
 800782a:	f7ff ffe9 	bl	8007800 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	685a      	ldr	r2, [r3, #4]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	605a      	str	r2, [r3, #4]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	683a      	ldr	r2, [r7, #0]
 800783a:	3308      	adds	r3, #8
 800783c:	3208      	adds	r2, #8
 800783e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007842:	e883 0003 	stmia.w	r3, {r0, r1}
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4618      	mov	r0, r3
 800784a:	3708      	adds	r7, #8
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8007850:	b590      	push	{r4, r7, lr}
 8007852:	b089      	sub	sp, #36	; 0x24
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800785e:	4b10      	ldr	r3, [pc, #64]	; (80078a0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8007860:	61bb      	str	r3, [r7, #24]
 8007862:	2300      	movs	r3, #0
 8007864:	61fb      	str	r3, [r7, #28]
 8007866:	f107 0008 	add.w	r0, r7, #8
 800786a:	f107 0318 	add.w	r3, r7, #24
 800786e:	cb0c      	ldmia	r3, {r2, r3}
 8007870:	6879      	ldr	r1, [r7, #4]
 8007872:	f000 f85f 	bl	8007934 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8007876:	f107 0308 	add.w	r3, r7, #8
 800787a:	4619      	mov	r1, r3
 800787c:	4620      	mov	r0, r4
 800787e:	f7ff ffcb 	bl	8007818 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8007882:	f107 0308 	add.w	r3, r7, #8
 8007886:	4618      	mov	r0, r3
 8007888:	f7ff f9be 	bl	8006c08 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8007898:	bf00      	nop
 800789a:	3724      	adds	r7, #36	; 0x24
 800789c:	46bd      	mov	sp, r7
 800789e:	bd90      	pop	{r4, r7, pc}
 80078a0:	080078a5 	.word	0x080078a5

080078a4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af02      	add	r7, sp, #8
 80078aa:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f503 719c 	add.w	r1, r3, #312	; 0x138
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80078b8:	461a      	mov	r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	4b04      	ldr	r3, [pc, #16]	; (80078d4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 80078c4:	4804      	ldr	r0, [pc, #16]	; (80078d8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 80078c6:	f000 f867 	bl	8007998 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80078ca:	bf00      	nop
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	2400aee4 	.word	0x2400aee4
 80078d8:	2400aee0 	.word	0x2400aee0

080078dc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	4a04      	ldr	r2, [pc, #16]	; (80078f8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	601a      	str	r2, [r3, #0]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4618      	mov	r0, r3
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr
 80078f8:	080246f0 	.word	0x080246f0

080078fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4618      	mov	r0, r3
 8007908:	f7ff ffe8 	bl	80078dc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800790c:	4a08      	ldr	r2, [pc, #32]	; (8007930 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	601a      	str	r2, [r3, #0]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	605a      	str	r2, [r3, #4]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	609a      	str	r2, [r3, #8]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	60da      	str	r2, [r3, #12]
    }
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4618      	mov	r0, r3
 8007928:	3708      	adds	r7, #8
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	0802468c 	.word	0x0802468c

08007934 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	4639      	mov	r1, r7
 8007940:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	4618      	mov	r0, r3
 8007948:	f7ff ffc8 	bl	80078dc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800794c:	4a08      	ldr	r2, [pc, #32]	; (8007970 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	601a      	str	r2, [r3, #0]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	605a      	str	r2, [r3, #4]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	3308      	adds	r3, #8
 800795c:	463a      	mov	r2, r7
 800795e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007962:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	4618      	mov	r0, r3
 800796a:	3710      	adds	r7, #16
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}
 8007970:	0802468c 	.word	0x0802468c

08007974 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4618      	mov	r0, r3
 8007980:	f7ff fe52 	bl	8007628 <_ZN8touchgfx10TransitionC1Ev>
 8007984:	4a03      	ldr	r2, [pc, #12]	; (8007994 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	601a      	str	r2, [r3, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4618      	mov	r0, r3
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	0802487c 	.word	0x0802487c

08007998 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8007998:	b590      	push	{r4, r7, lr}
 800799a:	b08f      	sub	sp, #60	; 0x3c
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]
 80079a4:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	689a      	ldr	r2, [r3, #8]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	3320      	adds	r3, #32
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4610      	mov	r0, r2
 80079b6:	4798      	blx	r3
 80079b8:	4603      	mov	r3, r0
 80079ba:	2bdf      	cmp	r3, #223	; 0xdf
 80079bc:	d805      	bhi.n	80079ca <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 80079be:	4b7e      	ldr	r3, [pc, #504]	; (8007bb8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 80079c0:	4a7e      	ldr	r2, [pc, #504]	; (8007bbc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80079c2:	21a3      	movs	r1, #163	; 0xa3
 80079c4:	487e      	ldr	r0, [pc, #504]	; (8007bc0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80079c6:	f01a fe57 	bl	8022678 <__assert_func>
 80079ca:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685a      	ldr	r2, [r3, #4]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	3320      	adds	r3, #32
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4610      	mov	r0, r2
 80079dc:	4798      	blx	r3
 80079de:	4603      	mov	r3, r0
 80079e0:	2b0f      	cmp	r3, #15
 80079e2:	d805      	bhi.n	80079f0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 80079e4:	4b77      	ldr	r3, [pc, #476]	; (8007bc4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80079e6:	4a75      	ldr	r2, [pc, #468]	; (8007bbc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80079e8:	21a4      	movs	r1, #164	; 0xa4
 80079ea:	4875      	ldr	r0, [pc, #468]	; (8007bc0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80079ec:	f01a fe44 	bl	8022678 <__assert_func>
 80079f0:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68da      	ldr	r2, [r3, #12]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3320      	adds	r3, #32
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4610      	mov	r0, r2
 8007a02:	4798      	blx	r3
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b0b      	cmp	r3, #11
 8007a08:	d805      	bhi.n	8007a16 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 8007a0a:	4b6f      	ldr	r3, [pc, #444]	; (8007bc8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8007a0c:	4a6b      	ldr	r2, [pc, #428]	; (8007bbc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8007a0e:	21a5      	movs	r1, #165	; 0xa5
 8007a10:	486b      	ldr	r0, [pc, #428]	; (8007bc0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8007a12:	f01a fe31 	bl	8022678 <__assert_func>
 8007a16:	bf00      	nop
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8007a24:	f00c fc8e 	bl	8014344 <_ZN8touchgfx11Application11getInstanceEv>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f00c fc90 	bl	8014350 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8007a30:	6a3b      	ldr	r3, [r7, #32]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d008      	beq.n	8007a4a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
        (*currentTrans)->tearDown();
 8007a38:	6a3b      	ldr	r3, [r7, #32]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	6a3b      	ldr	r3, [r7, #32]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	330c      	adds	r3, #12
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4610      	mov	r0, r2
 8007a48:	4798      	blx	r3
    if (*currentTrans)
 8007a4a:	6a3b      	ldr	r3, [r7, #32]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d007      	beq.n	8007a62 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xca>
        (*currentTrans)->~Transition();
 8007a52:	6a3b      	ldr	r3, [r7, #32]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	6a3b      	ldr	r3, [r7, #32]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4610      	mov	r0, r2
 8007a60:	4798      	blx	r3
    if (*currentScreen)
 8007a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d008      	beq.n	8007a7c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
        (*currentScreen)->tearDownScreen();
 8007a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3314      	adds	r3, #20
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4610      	mov	r0, r2
 8007a7a:	4798      	blx	r3
    if (*currentPresenter)
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d008      	beq.n	8007a96 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfe>
        (*currentPresenter)->deactivate();
 8007a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	3304      	adds	r3, #4
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4610      	mov	r0, r2
 8007a94:	4798      	blx	r3
    if (*currentScreen)
 8007a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d007      	beq.n	8007aae <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
        (*currentScreen)->~Screen();
 8007a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4610      	mov	r0, r2
 8007aac:	4798      	blx	r3
    if (*currentPresenter)
 8007aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d008      	beq.n	8007ac8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
        (*currentPresenter)->~Presenter();
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	3308      	adds	r3, #8
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4610      	mov	r0, r2
 8007ac6:	4798      	blx	r3
}
 8007ac8:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	2100      	movs	r1, #0
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f000 f87b 	bl	8007bcc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	4619      	mov	r1, r3
 8007ada:	200c      	movs	r0, #12
 8007adc:	f7ff fd7c 	bl	80075d8 <_ZnwjPv>
 8007ae0:	4604      	mov	r4, r0
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f7ff ff46 	bl	8007974 <_ZN8touchgfx12NoTransitionC1Ev>
 8007ae8:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	2100      	movs	r1, #0
 8007af0:	4618      	mov	r0, r3
 8007af2:	f000 f87e 	bl	8007bf2 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8007af6:	4603      	mov	r3, r0
 8007af8:	4619      	mov	r1, r3
 8007afa:	20e0      	movs	r0, #224	; 0xe0
 8007afc:	f7ff fd6c 	bl	80075d8 <_ZnwjPv>
 8007b00:	4604      	mov	r4, r0
 8007b02:	4620      	mov	r0, r4
 8007b04:	f001 fbea 	bl	80092dc <_ZN11Screen1ViewC1Ev>
 8007b08:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	2100      	movs	r1, #0
 8007b10:	4618      	mov	r0, r3
 8007b12:	f000 f881 	bl	8007c18 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8007b16:	4603      	mov	r3, r0
 8007b18:	4619      	mov	r1, r3
 8007b1a:	2010      	movs	r0, #16
 8007b1c:	f7ff fd5c 	bl	80075d8 <_ZnwjPv>
 8007b20:	4604      	mov	r4, r0
 8007b22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b24:	4620      	mov	r0, r4
 8007b26:	f001 fb4d 	bl	80091c4 <_ZN16Screen1PresenterC1ER11Screen1View>
 8007b2a:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b30:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b36:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b3c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8007b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d002      	beq.n	8007b4a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8007b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b46:	3304      	adds	r3, #4
 8007b48:	e000      	b.n	8007b4c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007b50:	f7ff fdfa 	bl	8007748 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8007b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b56:	3304      	adds	r3, #4
 8007b58:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7ff fe0f 	bl	800777e <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8007b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b64:	4618      	mov	r0, r3
 8007b66:	f000 f86a 	bl	8007c3e <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8007b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6c:	61fb      	str	r3, [r7, #28]
 8007b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b70:	61bb      	str	r3, [r7, #24]
 8007b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b74:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	330c      	adds	r3, #12
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	69f8      	ldr	r0, [r7, #28]
 8007b80:	4798      	blx	r3
    newPresenter->activate();
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	69b8      	ldr	r0, [r7, #24]
 8007b8a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8007b8c:	6979      	ldr	r1, [r7, #20]
 8007b8e:	69f8      	ldr	r0, [r7, #28]
 8007b90:	f00d ffb6 	bl	8015b00 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	3310      	adds	r3, #16
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	6978      	ldr	r0, [r7, #20]
 8007b9e:	4798      	blx	r3
    newTransition->invalidate();
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3314      	adds	r3, #20
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	6978      	ldr	r0, [r7, #20]
 8007baa:	4798      	blx	r3
}
 8007bac:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8007bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	373c      	adds	r7, #60	; 0x3c
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd90      	pop	{r4, r7, pc}
 8007bb8:	08023c78 	.word	0x08023c78
 8007bbc:	08023d08 	.word	0x08023d08
 8007bc0:	08023e0c 	.word	0x08023e0c
 8007bc4:	08023e64 	.word	0x08023e64
 8007bc8:	08023f08 	.word	0x08023f08

08007bcc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	3324      	adds	r3, #36	; 0x24
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	887a      	ldrh	r2, [r7, #2]
 8007be2:	4611      	mov	r1, r2
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	4798      	blx	r3
 8007be8:	4603      	mov	r3, r0
    }
 8007bea:	4618      	mov	r0, r3
 8007bec:	3708      	adds	r7, #8
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b082      	sub	sp, #8
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	3324      	adds	r3, #36	; 0x24
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	887a      	ldrh	r2, [r7, #2]
 8007c08:	4611      	mov	r1, r2
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	4798      	blx	r3
 8007c0e:	4603      	mov	r3, r0
    }
 8007c10:	4618      	mov	r0, r3
 8007c12:	3708      	adds	r7, #8
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	460b      	mov	r3, r1
 8007c22:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	3324      	adds	r3, #36	; 0x24
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	887a      	ldrh	r2, [r7, #2]
 8007c2e:	4611      	mov	r1, r2
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	4798      	blx	r3
 8007c34:	4603      	mov	r3, r0
    }
 8007c36:	4618      	mov	r0, r3
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 8007c3e:	b480      	push	{r7}
 8007c40:	b083      	sub	sp, #12
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
 8007c46:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8007c4e:	bf00      	nop
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
	...

08007c5c <_ZN8touchgfx12NoTransitionD1Ev>:
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	4a05      	ldr	r2, [pc, #20]	; (8007c7c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	601a      	str	r2, [r3, #0]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7ff fcf1 	bl	8007654 <_ZN8touchgfx10TransitionD1Ev>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4618      	mov	r0, r3
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	0802487c 	.word	0x0802487c

08007c80 <_ZN8touchgfx12NoTransitionD0Ev>:
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f7ff ffe7 	bl	8007c5c <_ZN8touchgfx12NoTransitionD1Ev>
 8007c8e:	210c      	movs	r1, #12
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f01a fcc2 	bl	802261a <_ZdlPvj>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3708      	adds	r7, #8
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6a1b      	ldr	r3, [r3, #32]
    }
 8007cac:	4618      	mov	r0, r3
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b08c      	sub	sp, #48	; 0x30
 8007cd4:	af08      	add	r7, sp, #32
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	4611      	mov	r1, r2
 8007cdc:	461a      	mov	r2, r3
 8007cde:	460b      	mov	r3, r1
 8007ce0:	80fb      	strh	r3, [r7, #6]
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	88b9      	ldrh	r1, [r7, #4]
 8007cea:	88fa      	ldrh	r2, [r7, #6]
 8007cec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007cee:	9306      	str	r3, [sp, #24]
 8007cf0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007cf2:	9305      	str	r3, [sp, #20]
 8007cf4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007cf8:	9304      	str	r3, [sp, #16]
 8007cfa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007cfe:	9303      	str	r3, [sp, #12]
 8007d00:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007d04:	9302      	str	r3, [sp, #8]
 8007d06:	7f3b      	ldrb	r3, [r7, #28]
 8007d08:	9301      	str	r3, [sp, #4]
 8007d0a:	7e3b      	ldrb	r3, [r7, #24]
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	460b      	mov	r3, r1
 8007d10:	68b9      	ldr	r1, [r7, #8]
 8007d12:	f00d fb5d 	bl	80153d0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8007d16:	4a0a      	ldr	r2, [pc, #40]	; (8007d40 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	601a      	str	r2, [r3, #0]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d20:	619a      	str	r2, [r3, #24]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d26:	61da      	str	r2, [r3, #28]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d2c:	621a      	str	r2, [r3, #32]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d32:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	080248c4 	.word	0x080248c4

08007d44 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	889b      	ldrh	r3, [r3, #4]
 8007d58:	0adb      	lsrs	r3, r3, #11
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	4413      	add	r3, r2
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4413      	add	r3, r2
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3714      	adds	r7, #20
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr

08007d76 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8007d76:	b480      	push	{r7}
 8007d78:	b089      	sub	sp, #36	; 0x24
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	60f8      	str	r0, [r7, #12]
 8007d7e:	460b      	mov	r3, r1
 8007d80:	607a      	str	r2, [r7, #4]
 8007d82:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d003      	beq.n	8007d92 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	7b1b      	ldrb	r3, [r3, #12]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d101      	bne.n	8007d96 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8007d92:	2300      	movs	r3, #0
 8007d94:	e030      	b.n	8007df8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	69da      	ldr	r2, [r3, #28]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	7b5b      	ldrb	r3, [r3, #13]
 8007da2:	021b      	lsls	r3, r3, #8
 8007da4:	b21b      	sxth	r3, r3
 8007da6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007daa:	b219      	sxth	r1, r3
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	7adb      	ldrb	r3, [r3, #11]
 8007db0:	b21b      	sxth	r3, r3
 8007db2:	430b      	orrs	r3, r1
 8007db4:	b21b      	sxth	r3, r3
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	4413      	add	r3, r2
 8007dbc:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	7b1b      	ldrb	r3, [r3, #12]
 8007dc2:	837b      	strh	r3, [r7, #26]
 8007dc4:	8b7b      	ldrh	r3, [r7, #26]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d015      	beq.n	8007df6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	881b      	ldrh	r3, [r3, #0]
 8007dce:	897a      	ldrh	r2, [r7, #10]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d103      	bne.n	8007ddc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8007dda:	e00d      	b.n	8007df8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	881b      	ldrh	r3, [r3, #0]
 8007de0:	897a      	ldrh	r2, [r7, #10]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d306      	bcc.n	8007df4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8007de6:	8b7b      	ldrh	r3, [r7, #26]
 8007de8:	3b01      	subs	r3, #1
 8007dea:	837b      	strh	r3, [r7, #26]
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	3304      	adds	r3, #4
 8007df0:	61fb      	str	r3, [r7, #28]
 8007df2:	e7e7      	b.n	8007dc4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 8007df4:	bf00      	nop
        }
    }
    return 0;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3724      	adds	r7, #36	; 0x24
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
        : color(col)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	683a      	ldr	r2, [r7, #0]
 8007e12:	601a      	str	r2, [r3, #0]
    }
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4618      	mov	r0, r3
 8007e18:	370c      	adds	r7, #12
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8007e22:	b480      	push	{r7}
 8007e24:	b083      	sub	sp, #12
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	887a      	ldrh	r2, [r7, #2]
 8007e32:	801a      	strh	r2, [r3, #0]
    {
    }
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4618      	mov	r0, r3
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
	...

08007e44 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8007e4c:	4a14      	ldr	r2, [pc, #80]	; (8007ea0 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	601a      	str	r2, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	3304      	adds	r3, #4
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fe f8ec 	bl	8006034 <_ZN8touchgfx4RectC1Ev>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	330c      	adds	r3, #12
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7fe f8e7 	bl	8006034 <_ZN8touchgfx4RectC1Ev>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	615a      	str	r2, [r3, #20]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	619a      	str	r2, [r3, #24]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	61da      	str	r2, [r3, #28]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	841a      	strh	r2, [r3, #32]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	845a      	strh	r2, [r3, #34]	; 0x22
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4618      	mov	r0, r3
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	08025084 	.word	0x08025084

08007ea4 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
    {
 8007eac:	4a04      	ldr	r2, [pc, #16]	; (8007ec0 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	601a      	str	r2, [r3, #0]
    }
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	08025084 	.word	0x08025084

08007ec4 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
    }
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f7ff ffe9 	bl	8007ea4 <_ZN8touchgfx8DrawableD1Ev>
 8007ed2:	2128      	movs	r1, #40	; 0x28
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f01a fba0 	bl	802261a <_ZdlPvj>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4618      	mov	r0, r3
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d005      	beq.n	8007f02 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	3314      	adds	r3, #20
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	4798      	blx	r3
        }
    }
 8007f02:	bf00      	nop
 8007f04:	3708      	adds	r7, #8
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8007f0a:	b480      	push	{r7}
 8007f0c:	b083      	sub	sp, #12
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8007f12:	2300      	movs	r3, #0
    }
 8007f14:	4618      	mov	r0, r3
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	4608      	mov	r0, r1
 8007f2a:	4611      	mov	r1, r2
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	4603      	mov	r3, r0
 8007f30:	817b      	strh	r3, [r7, #10]
 8007f32:	460b      	mov	r3, r1
 8007f34:	813b      	strh	r3, [r7, #8]
 8007f36:	4613      	mov	r3, r2
 8007f38:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8007f3a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007f3e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007f42:	4619      	mov	r1, r3
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f000 f82a 	bl	8007f9e <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8007f4a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8007f4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007f52:	4619      	mov	r1, r3
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f000 f87e 	bl	8008056 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8007f5a:	bf00      	nop
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8007f62:	b480      	push	{r7}
 8007f64:	b083      	sub	sp, #12
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	887a      	ldrh	r2, [r7, #2]
 8007f72:	809a      	strh	r2, [r3, #4]
    }
 8007f74:	bf00      	nop
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	887a      	ldrh	r2, [r7, #2]
 8007f90:	80da      	strh	r2, [r3, #6]
    }
 8007f92:	bf00      	nop
 8007f94:	370c      	adds	r7, #12
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr

08007f9e <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b082      	sub	sp, #8
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	807b      	strh	r3, [r7, #2]
 8007faa:	4613      	mov	r3, r2
 8007fac:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	3330      	adds	r3, #48	; 0x30
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8007fba:	4611      	mov	r1, r2
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	4798      	blx	r3
        setY(y);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	3334      	adds	r3, #52	; 0x34
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f9b7 2000 	ldrsh.w	r2, [r7]
 8007fcc:	4611      	mov	r1, r2
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	4798      	blx	r3
    }
 8007fd2:	bf00      	nop
 8007fd4:	3708      	adds	r7, #8
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8007fda:	b480      	push	{r7}
 8007fdc:	b083      	sub	sp, #12
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	887a      	ldrh	r2, [r7, #2]
 8007fea:	811a      	strh	r2, [r3, #8]
    }
 8007fec:	bf00      	nop
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	460b      	mov	r3, r1
 8008002:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	887a      	ldrh	r2, [r7, #2]
 8008008:	815a      	strh	r2, [r3, #10]
    }
 800800a:	bf00      	nop
 800800c:	370c      	adds	r7, #12
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr

08008016 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8008016:	b480      	push	{r7}
 8008018:	b083      	sub	sp, #12
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
    {
    }
 800801e:	bf00      	nop
 8008020:	370c      	adds	r7, #12
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr

0800802a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800802a:	b480      	push	{r7}
 800802c:	b083      	sub	sp, #12
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
 8008032:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8008034:	bf00      	nop
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800804a:	bf00      	nop
 800804c:	370c      	adds	r7, #12
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr

08008056 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8008056:	b580      	push	{r7, lr}
 8008058:	b082      	sub	sp, #8
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
 800805e:	460b      	mov	r3, r1
 8008060:	807b      	strh	r3, [r7, #2]
 8008062:	4613      	mov	r3, r2
 8008064:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	3338      	adds	r3, #56	; 0x38
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8008072:	4611      	mov	r1, r2
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	4798      	blx	r3
        setHeight(height);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	333c      	adds	r3, #60	; 0x3c
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f9b7 2000 	ldrsh.w	r2, [r7]
 8008084:	4611      	mov	r1, r2
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	4798      	blx	r3
    }
 800808a:	bf00      	nop
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8008092:	b480      	push	{r7}
 8008094:	b083      	sub	sp, #12
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
 800809a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
    {
    }
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	460b      	mov	r3, r1
 80080c6:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	78fa      	ldrb	r2, [r7, #3]
 80080cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
    {
        return visible;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 80080ea:	4618      	mov	r0, r3
 80080ec:	370c      	adds	r7, #12
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr

080080f6 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 80080f6:	b480      	push	{r7}
 80080f8:	b083      	sub	sp, #12
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8008104:	4618      	mov	r0, r3
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	460b      	mov	r3, r1
 800811a:	807b      	strh	r3, [r7, #2]
 800811c:	4613      	mov	r3, r2
 800811e:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	3354      	adds	r3, #84	; 0x54
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	8879      	ldrh	r1, [r7, #2]
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8008130:	b292      	uxth	r2, r2
 8008132:	1a8a      	subs	r2, r1, r2
 8008134:	b292      	uxth	r2, r2
 8008136:	b210      	sxth	r0, r2
 8008138:	8839      	ldrh	r1, [r7, #0]
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8008140:	b292      	uxth	r2, r2
 8008142:	1a8a      	subs	r2, r1, r2
 8008144:	b292      	uxth	r2, r2
 8008146:	b212      	sxth	r2, r2
 8008148:	4601      	mov	r1, r0
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	4798      	blx	r3
    }
 800814e:	bf00      	nop
 8008150:	3708      	adds	r7, #8
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8008156:	b480      	push	{r7}
 8008158:	b083      	sub	sp, #12
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008164:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800816c:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008174:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8008176:	bf00      	nop
 8008178:	370c      	adds	r7, #12
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr

08008182 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8008182:	b580      	push	{r7, lr}
 8008184:	b084      	sub	sp, #16
 8008186:	af00      	add	r7, sp, #0
 8008188:	60f8      	str	r0, [r7, #12]
 800818a:	60b9      	str	r1, [r7, #8]
 800818c:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	f7ff ffe1 	bl	8008156 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	601a      	str	r2, [r3, #0]
    }
 80081a2:	bf00      	nop
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
	...

080081ac <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
    {
 80081b4:	4a06      	ldr	r2, [pc, #24]	; (80081d0 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	601a      	str	r2, [r3, #0]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	3304      	adds	r3, #4
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 fba0 	bl	8008904 <_ZN8touchgfx9ContainerD1Ev>
    }
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4618      	mov	r0, r3
 80081c8:	3708      	adds	r7, #8
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	08025180 	.word	0x08025180

080081d4 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
    }
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f7ff ffe5 	bl	80081ac <_ZN8touchgfx6ScreenD1Ev>
 80081e2:	213c      	movs	r1, #60	; 0x3c
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f01a fa18 	bl	802261a <_ZdlPvj>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4618      	mov	r0, r3
 80081ee:	3708      	adds	r7, #8
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
    {
    }
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
    {
    }
 8008210:	bf00      	nop
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
    {
    }
 8008224:	bf00      	nop
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
    {
    }
 8008238:	bf00      	nop
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	460b      	mov	r3, r1
 800824e:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	3304      	adds	r3, #4
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	4618      	mov	r0, r3
 800826e:	f009 fcab 	bl	8011bc8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8008272:	bf00      	nop
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800827a:	b580      	push	{r7, lr}
 800827c:	b084      	sub	sp, #16
 800827e:	af00      	add	r7, sp, #0
 8008280:	60f8      	str	r0, [r7, #12]
 8008282:	607b      	str	r3, [r7, #4]
 8008284:	460b      	mov	r3, r1
 8008286:	817b      	strh	r3, [r7, #10]
 8008288:	4613      	mov	r3, r2
 800828a:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	4618      	mov	r0, r3
 8008290:	f7ff ff24 	bl	80080dc <_ZNK8touchgfx8Drawable9isVisibleEv>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d008      	beq.n	80082ac <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	4618      	mov	r0, r3
 800829e:	f7ff ff2a 	bl	80080f6 <_ZNK8touchgfx8Drawable11isTouchableEv>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d001      	beq.n	80082ac <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80082a8:	2301      	movs	r3, #1
 80082aa:	e000      	b.n	80082ae <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 80082ac:	2300      	movs	r3, #0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d002      	beq.n	80082b8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	601a      	str	r2, [r3, #0]
        }
    }
 80082b8:	bf00      	nop
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7ff fdba 	bl	8007e44 <_ZN8touchgfx8DrawableC1Ev>
 80082d0:	4a03      	ldr	r2, [pc, #12]	; (80082e0 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	601a      	str	r2, [r3, #0]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4618      	mov	r0, r3
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	080249b8 	.word	0x080249b8

080082e4 <_ZN8touchgfx6WidgetD1Ev>:
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	4a05      	ldr	r2, [pc, #20]	; (8008304 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7ff fdd5 	bl	8007ea4 <_ZN8touchgfx8DrawableD1Ev>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4618      	mov	r0, r3
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	080249b8 	.word	0x080249b8

08008308 <_ZN8touchgfx6WidgetD0Ev>:
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f7ff ffe7 	bl	80082e4 <_ZN8touchgfx6WidgetD1Ev>
 8008316:	2128      	movs	r1, #40	; 0x28
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f01a f97e 	bl	802261a <_ZdlPvj>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4618      	mov	r0, r3
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4618      	mov	r0, r3
 8008334:	2326      	movs	r3, #38	; 0x26
 8008336:	461a      	mov	r2, r3
 8008338:	2100      	movs	r1, #0
 800833a:	f01a fa29 	bl	8022790 <memset>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4618      	mov	r0, r3
 8008342:	f7ff ffbd 	bl	80082c0 <_ZN8touchgfx6WidgetC1Ev>
 8008346:	4a09      	ldr	r2, [pc, #36]	; (800836c <_ZN8touchgfx3BoxC1Ev+0x44>)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	601a      	str	r2, [r3, #0]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	22ff      	movs	r2, #255	; 0xff
 8008350:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	3328      	adds	r3, #40	; 0x28
 8008358:	2100      	movs	r1, #0
 800835a:	4618      	mov	r0, r3
 800835c:	f7ff fd52 	bl	8007e04 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4618      	mov	r0, r3
 8008364:	3708      	adds	r7, #8
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	08024e98 	.word	0x08024e98

08008370 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	683a      	ldr	r2, [r7, #0]
 800837e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8008380:	bf00      	nop
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4618      	mov	r0, r3
 800839a:	2326      	movs	r3, #38	; 0x26
 800839c:	461a      	mov	r2, r3
 800839e:	2100      	movs	r1, #0
 80083a0:	f01a f9f6 	bl	8022790 <memset>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7ff ff8a 	bl	80082c0 <_ZN8touchgfx6WidgetC1Ev>
 80083ac:	4a09      	ldr	r2, [pc, #36]	; (80083d4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	601a      	str	r2, [r3, #0]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	683a      	ldr	r2, [r7, #0]
 80083b6:	8812      	ldrh	r2, [r2, #0]
 80083b8:	84da      	strh	r2, [r3, #38]	; 0x26
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	22ff      	movs	r2, #255	; 0xff
 80083be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 80083c2:	6839      	ldr	r1, [r7, #0]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f00a feb1 	bl	801312c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4618      	mov	r0, r3
 80083ce:	3708      	adds	r7, #8
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	08024f74 	.word	0x08024f74

080083d8 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4618      	mov	r0, r3
 80083e4:	2326      	movs	r3, #38	; 0x26
 80083e6:	461a      	mov	r2, r3
 80083e8:	2100      	movs	r1, #0
 80083ea:	f01a f9d1 	bl	8022790 <memset>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7ff ff65 	bl	80082c0 <_ZN8touchgfx6WidgetC1Ev>
 80083f6:	4a0a      	ldr	r2, [pc, #40]	; (8008420 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	601a      	str	r2, [r3, #0]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	629a      	str	r2, [r3, #40]	; 0x28
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2101      	movs	r1, #1
 800840e:	4618      	mov	r0, r3
 8008410:	f7ff fe54 	bl	80080bc <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4618      	mov	r0, r3
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	08024db4 	.word	0x08024db4

08008424 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	683a      	ldr	r2, [r7, #0]
 8008432:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8008434:	bf00      	nop
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	4a05      	ldr	r2, [pc, #20]	; (8008460 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	601a      	str	r2, [r3, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4618      	mov	r0, r3
 8008452:	f7ff ff47 	bl	80082e4 <_ZN8touchgfx6WidgetD1Ev>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4618      	mov	r0, r3
 800845a:	3708      	adds	r7, #8
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}
 8008460:	08024db4 	.word	0x08024db4

08008464 <_ZN8touchgfx14AbstractButtonD0Ev>:
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f7ff ffe7 	bl	8008440 <_ZN8touchgfx14AbstractButtonD1Ev>
 8008472:	2130      	movs	r1, #48	; 0x30
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f01a f8d0 	bl	802261a <_ZdlPvj>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4618      	mov	r0, r3
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4618      	mov	r0, r3
 8008490:	f7ff ffa2 	bl	80083d8 <_ZN8touchgfx14AbstractButtonC1Ev>
 8008494:	4a0c      	ldr	r2, [pc, #48]	; (80084c8 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	601a      	str	r2, [r3, #0]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	332e      	adds	r3, #46	; 0x2e
 800849e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7ff fcbd 	bl	8007e22 <_ZN8touchgfx6BitmapC1Et>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	3330      	adds	r3, #48	; 0x30
 80084ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7ff fcb6 	bl	8007e22 <_ZN8touchgfx6BitmapC1Et>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	22ff      	movs	r2, #255	; 0xff
 80084ba:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4618      	mov	r0, r3
 80084c2:	3708      	adds	r7, #8
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	08024f00 	.word	0x08024f00

080084cc <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bitmapPressed;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	8812      	ldrh	r2, [r2, #0]
 80084de:	869a      	strh	r2, [r3, #52]	; 0x34
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	68b9      	ldr	r1, [r7, #8]
 80084e6:	4618      	mov	r0, r3
 80084e8:	f00a fd76 	bl	8012fd8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 80084ec:	bf00      	nop
 80084ee:	3710      	adds	r7, #16
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	4a05      	ldr	r2, [pc, #20]	; (8008514 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	601a      	str	r2, [r3, #0]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4618      	mov	r0, r3
 8008506:	f7ff fe51 	bl	80081ac <_ZN8touchgfx6ScreenD1Ev>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4618      	mov	r0, r3
 800850e:	3708      	adds	r7, #8
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}
 8008514:	0802496c 	.word	0x0802496c

08008518 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f7ff ffe7 	bl	80084f4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8008526:	2140      	movs	r1, #64	; 0x40
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f01a f876 	bl	802261a <_ZdlPvj>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4618      	mov	r0, r3
 8008532:	3708      	adds	r7, #8
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	4a0f      	ldr	r2, [pc, #60]	; (8008580 <_ZN15Screen1ViewBaseD1Ev+0x48>)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	601a      	str	r2, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	33d0      	adds	r3, #208	; 0xd0
 800854a:	4618      	mov	r0, r3
 800854c:	f000 f9b8 	bl	80088c0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	3398      	adds	r3, #152	; 0x98
 8008554:	4618      	mov	r0, r3
 8008556:	f000 fa3b 	bl	80089d0 <_ZN8touchgfx12ToggleButtonD1Ev>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	336c      	adds	r3, #108	; 0x6c
 800855e:	4618      	mov	r0, r3
 8008560:	f000 fa14 	bl	800898c <_ZN8touchgfx5ImageD1Ev>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	3340      	adds	r3, #64	; 0x40
 8008568:	4618      	mov	r0, r3
 800856a:	f000 f9ed 	bl	8008948 <_ZN8touchgfx3BoxD1Ev>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4618      	mov	r0, r3
 8008572:	f7ff ffbf 	bl	80084f4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4618      	mov	r0, r3
 800857a:	3708      	adds	r7, #8
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	0802491c 	.word	0x0802491c

08008584 <_ZN15Screen1ViewBaseD0Ev>:
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f7ff ffd3 	bl	8008538 <_ZN15Screen1ViewBaseD1Ev>
 8008592:	21e0      	movs	r1, #224	; 0xe0
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f01a f840 	bl	802261a <_ZdlPvj>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4618      	mov	r0, r3
 800859e:	3708      	adds	r7, #8
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <_ZN15Screen1ViewBase9ToggleLEDEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void ToggleLED()
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 80085ac:	bf00      	nop
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	4a05      	ldr	r2, [pc, #20]	; (80085d8 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	601a      	str	r2, [r3, #0]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7ff ff39 	bl	8008440 <_ZN8touchgfx14AbstractButtonD1Ev>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4618      	mov	r0, r3
 80085d2:	3708      	adds	r7, #8
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	08024f00 	.word	0x08024f00

080085dc <_ZN8touchgfx6ButtonD0Ev>:
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f7ff ffe7 	bl	80085b8 <_ZN8touchgfx6ButtonD1Ev>
 80085ea:	2134      	movs	r1, #52	; 0x34
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f01a f814 	bl	802261a <_ZdlPvj>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4618      	mov	r0, r3
 80085f6:	3708      	adds	r7, #8
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <_ZN8touchgfx12ToggleButtonC1Ev>:
class ToggleButton : public Button
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4618      	mov	r0, r3
 8008608:	f7ff ff3c 	bl	8008484 <_ZN8touchgfx6ButtonC1Ev>
 800860c:	4a07      	ldr	r2, [pc, #28]	; (800862c <_ZN8touchgfx12ToggleButtonC1Ev+0x30>)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	601a      	str	r2, [r3, #0]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	3334      	adds	r3, #52	; 0x34
 8008616:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800861a:	4618      	mov	r0, r3
 800861c:	f7ff fc01 	bl	8007e22 <_ZN8touchgfx6BitmapC1Et>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4618      	mov	r0, r3
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	08024e24 	.word	0x08024e24

08008630 <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>

Screen1ViewBase::Screen1ViewBase() :
 8008630:	b590      	push	{r4, r7, lr}
 8008632:	b08d      	sub	sp, #52	; 0x34
 8008634:	af02      	add	r7, sp, #8
 8008636:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4618      	mov	r0, r3
 800863c:	f000 f8da 	bl	80087f4 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8008640:	4a5b      	ldr	r2, [pc, #364]	; (80087b0 <_ZN15Screen1ViewBaseC1Ev+0x180>)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	601a      	str	r2, [r3, #0]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	3340      	adds	r3, #64	; 0x40
 800864a:	4618      	mov	r0, r3
 800864c:	f7ff fe6c 	bl	8008328 <_ZN8touchgfx3BoxC1Ev>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8008656:	f107 0308 	add.w	r3, r7, #8
 800865a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800865e:	4618      	mov	r0, r3
 8008660:	f7ff fbdf 	bl	8007e22 <_ZN8touchgfx6BitmapC1Et>
 8008664:	f107 0308 	add.w	r3, r7, #8
 8008668:	4619      	mov	r1, r3
 800866a:	4620      	mov	r0, r4
 800866c:	f7ff fe8e 	bl	800838c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	3398      	adds	r3, #152	; 0x98
 8008674:	4618      	mov	r0, r3
 8008676:	f7ff ffc1 	bl	80085fc <_ZN8touchgfx12ToggleButtonC1Ev>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f103 00d0 	add.w	r0, r3, #208	; 0xd0
 8008680:	4b4c      	ldr	r3, [pc, #304]	; (80087b4 <_ZN15Screen1ViewBaseC1Ev+0x184>)
 8008682:	60fb      	str	r3, [r7, #12]
 8008684:	2300      	movs	r3, #0
 8008686:	613b      	str	r3, [r7, #16]
 8008688:	f107 030c 	add.w	r3, r7, #12
 800868c:	cb0c      	ldmia	r3, {r2, r3}
 800868e:	6879      	ldr	r1, [r7, #4]
 8008690:	f000 f8d6 	bl	8008840 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800869a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800869e:	9300      	str	r3, [sp, #0]
 80086a0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80086a4:	2200      	movs	r2, #0
 80086a6:	2100      	movs	r1, #0
 80086a8:	f7ff fc3a 	bl	8007f20 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80086b2:	2300      	movs	r3, #0
 80086b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80086b8:	2300      	movs	r3, #0
 80086ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80086be:	2300      	movs	r3, #0
 80086c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80086c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086c8:	041b      	lsls	r3, r3, #16
 80086ca:	461a      	mov	r2, r3
 80086cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80086d0:	021b      	lsls	r3, r3, #8
 80086d2:	431a      	orrs	r2, r3
 80086d4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80086d8:	4313      	orrs	r3, r2
 80086da:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80086de:	f107 0320 	add.w	r3, r7, #32
 80086e2:	4611      	mov	r1, r2
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7ff fb8d 	bl	8007e04 <_ZN8touchgfx9colortypeC1Em>
 80086ea:	6a3b      	ldr	r3, [r7, #32]
 80086ec:	4619      	mov	r1, r3
 80086ee:	4620      	mov	r0, r4
 80086f0:	f7ff fe3e 	bl	8008370 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    image1.setXY(0, 0);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	336c      	adds	r3, #108	; 0x6c
 80086f8:	2200      	movs	r2, #0
 80086fa:	2100      	movs	r1, #0
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7ff fc4e 	bl	8007f9e <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_DARK_BACKGROUNDS_MAIN_BG_TEXTURE_480X272PX_ID));
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8008708:	f107 0314 	add.w	r3, r7, #20
 800870c:	2102      	movs	r1, #2
 800870e:	4618      	mov	r0, r3
 8008710:	f7ff fb87 	bl	8007e22 <_ZN8touchgfx6BitmapC1Et>
 8008714:	f107 0314 	add.w	r3, r7, #20
 8008718:	4619      	mov	r1, r3
 800871a:	4620      	mov	r0, r4
 800871c:	f00a fd06 	bl	801312c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    toggleButton1.setXY(176, 117);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	3398      	adds	r3, #152	; 0x98
 8008724:	2275      	movs	r2, #117	; 0x75
 8008726:	21b0      	movs	r1, #176	; 0xb0
 8008728:	4618      	mov	r0, r3
 800872a:	f7ff fc38 	bl	8007f9e <_ZN8touchgfx8Drawable5setXYEss>
    toggleButton1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_OFF_ID), touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_ON_ID));
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8008734:	f107 0318 	add.w	r3, r7, #24
 8008738:	2100      	movs	r1, #0
 800873a:	4618      	mov	r0, r3
 800873c:	f7ff fb71 	bl	8007e22 <_ZN8touchgfx6BitmapC1Et>
 8008740:	f107 031c 	add.w	r3, r7, #28
 8008744:	2101      	movs	r1, #1
 8008746:	4618      	mov	r0, r3
 8008748:	f7ff fb6b 	bl	8007e22 <_ZN8touchgfx6BitmapC1Et>
 800874c:	f107 021c 	add.w	r2, r7, #28
 8008750:	f107 0318 	add.w	r3, r7, #24
 8008754:	4619      	mov	r1, r3
 8008756:	4620      	mov	r0, r4
 8008758:	f7ff feb8 	bl	80084cc <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    toggleButton1.forceState(true);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	3398      	adds	r3, #152	; 0x98
 8008760:	2101      	movs	r1, #1
 8008762:	4618      	mov	r0, r3
 8008764:	f00a fbf4 	bl	8012f50 <_ZN8touchgfx12ToggleButton10forceStateEb>
    toggleButton1.setAction(buttonCallback);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f103 0298 	add.w	r2, r3, #152	; 0x98
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	33d0      	adds	r3, #208	; 0xd0
 8008772:	4619      	mov	r1, r3
 8008774:	4610      	mov	r0, r2
 8008776:	f7ff fe55 	bl	8008424 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(__background);
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	3340      	adds	r3, #64	; 0x40
 8008780:	4619      	mov	r1, r3
 8008782:	4610      	mov	r0, r2
 8008784:	f7ff fd6a 	bl	800825c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	336c      	adds	r3, #108	; 0x6c
 800878e:	4619      	mov	r1, r3
 8008790:	4610      	mov	r0, r2
 8008792:	f7ff fd63 	bl	800825c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(toggleButton1);
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	3398      	adds	r3, #152	; 0x98
 800879c:	4619      	mov	r1, r3
 800879e:	4610      	mov	r0, r2
 80087a0:	f7ff fd5c 	bl	800825c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4618      	mov	r0, r3
 80087a8:	372c      	adds	r7, #44	; 0x2c
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd90      	pop	{r4, r7, pc}
 80087ae:	bf00      	nop
 80087b0:	0802491c 	.word	0x0802491c
 80087b4:	080087cd 	.word	0x080087cd

080087b8 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]

}
 80087c0:	bf00      	nop
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
    if (&src == &toggleButton1)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	3398      	adds	r3, #152	; 0x98
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d105      	bne.n	80087ec <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x20>
    {
        //Interaction1
        //When toggleButton1 clicked call virtual function
        //Call ToggleLED
        ToggleLED();
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	332c      	adds	r3, #44	; 0x2c
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	4798      	blx	r3
    }
}
 80087ec:	bf00      	nop
 80087ee:	3708      	adds	r7, #8
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4618      	mov	r0, r3
 8008800:	f00c ffd2 	bl	80157a8 <_ZN8touchgfx6ScreenC1Ev>
 8008804:	4a05      	ldr	r2, [pc, #20]	; (800881c <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	601a      	str	r2, [r3, #0]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4618      	mov	r0, r3
 8008814:	3708      	adds	r7, #8
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	0802496c 	.word	0x0802496c

08008820 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	4a04      	ldr	r2, [pc, #16]	; (800883c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	601a      	str	r2, [r3, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4618      	mov	r0, r3
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr
 800883c:	080249a0 	.word	0x080249a0

08008840 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	4639      	mov	r1, r7
 800884c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	4618      	mov	r0, r3
 8008854:	f7ff ffe4 	bl	8008820 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8008858:	4a08      	ldr	r2, [pc, #32]	; (800887c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	601a      	str	r2, [r3, #0]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	68ba      	ldr	r2, [r7, #8]
 8008862:	605a      	str	r2, [r3, #4]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	3308      	adds	r3, #8
 8008868:	463a      	mov	r2, r7
 800886a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800886e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	4618      	mov	r0, r3
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	08024954 	.word	0x08024954

08008880 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
    }
 8008888:	4a04      	ldr	r2, [pc, #16]	; (800889c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	601a      	str	r2, [r3, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4618      	mov	r0, r3
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr
 800889c:	080249a0 	.word	0x080249a0

080088a0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
    }
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f7ff ffe9 	bl	8008880 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80088ae:	2104      	movs	r1, #4
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f019 feb2 	bl	802261a <_ZdlPvj>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	4618      	mov	r0, r3
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	4a05      	ldr	r2, [pc, #20]	; (80088e0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	601a      	str	r2, [r3, #0]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7ff ffd5 	bl	8008880 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4618      	mov	r0, r3
 80088da:	3708      	adds	r7, #8
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	08024954 	.word	0x08024954

080088e4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f7ff ffe7 	bl	80088c0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80088f2:	2110      	movs	r1, #16
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f019 fe90 	bl	802261a <_ZdlPvj>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4618      	mov	r0, r3
 80088fe:	3708      	adds	r7, #8
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	4a05      	ldr	r2, [pc, #20]	; (8008924 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	601a      	str	r2, [r3, #0]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4618      	mov	r0, r3
 8008916:	f7ff fac5 	bl	8007ea4 <_ZN8touchgfx8DrawableD1Ev>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4618      	mov	r0, r3
 800891e:	3708      	adds	r7, #8
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	08024bcc 	.word	0x08024bcc

08008928 <_ZN8touchgfx9ContainerD0Ev>:
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f7ff ffe7 	bl	8008904 <_ZN8touchgfx9ContainerD1Ev>
 8008936:	212c      	movs	r1, #44	; 0x2c
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f019 fe6e 	bl	802261a <_ZdlPvj>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4618      	mov	r0, r3
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	4a05      	ldr	r2, [pc, #20]	; (8008968 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	601a      	str	r2, [r3, #0]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4618      	mov	r0, r3
 800895a:	f7ff fcc3 	bl	80082e4 <_ZN8touchgfx6WidgetD1Ev>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4618      	mov	r0, r3
 8008962:	3708      	adds	r7, #8
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	08024e98 	.word	0x08024e98

0800896c <_ZN8touchgfx3BoxD0Ev>:
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f7ff ffe7 	bl	8008948 <_ZN8touchgfx3BoxD1Ev>
 800897a:	212c      	movs	r1, #44	; 0x2c
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f019 fe4c 	bl	802261a <_ZdlPvj>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4618      	mov	r0, r3
 8008986:	3708      	adds	r7, #8
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	4a05      	ldr	r2, [pc, #20]	; (80089ac <_ZN8touchgfx5ImageD1Ev+0x20>)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	601a      	str	r2, [r3, #0]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4618      	mov	r0, r3
 800899e:	f7ff fca1 	bl	80082e4 <_ZN8touchgfx6WidgetD1Ev>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4618      	mov	r0, r3
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	08024f74 	.word	0x08024f74

080089b0 <_ZN8touchgfx5ImageD0Ev>:
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f7ff ffe7 	bl	800898c <_ZN8touchgfx5ImageD1Ev>
 80089be:	212c      	movs	r1, #44	; 0x2c
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f019 fe2a 	bl	802261a <_ZdlPvj>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4618      	mov	r0, r3
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <_ZN8touchgfx12ToggleButtonD1Ev>:
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	4a05      	ldr	r2, [pc, #20]	; (80089f0 <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	601a      	str	r2, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7ff fde9 	bl	80085b8 <_ZN8touchgfx6ButtonD1Ev>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4618      	mov	r0, r3
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	08024e24 	.word	0x08024e24

080089f4 <_ZN8touchgfx12ToggleButtonD0Ev>:
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f7ff ffe7 	bl	80089d0 <_ZN8touchgfx12ToggleButtonD1Ev>
 8008a02:	2138      	movs	r1, #56	; 0x38
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f019 fe08 	bl	802261a <_ZdlPvj>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3708      	adds	r7, #8
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	68d2      	ldr	r2, [r2, #12]
 8008a26:	1052      	asrs	r2, r2, #1
 8008a28:	1898      	adds	r0, r3, r2
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	f003 0301 	and.w	r3, r3, #1
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d102      	bne.n	8008a3c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	e00a      	b.n	8008a52 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	68d2      	ldr	r2, [r2, #12]
 8008a44:	1052      	asrs	r2, r2, #1
 8008a46:	4413      	add	r3, r2
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	6892      	ldr	r2, [r2, #8]
 8008a4e:	4413      	add	r3, r2
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	6839      	ldr	r1, [r7, #0]
 8008a54:	4798      	blx	r3
    }
 8008a56:	bf00      	nop
 8008a58:	3708      	adds	r7, #8
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8008a5e:	b480      	push	{r7}
 8008a60:	b083      	sub	sp, #12
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d010      	beq.n	8008a90 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d107      	bne.n	8008a86 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	f003 0301 	and.w	r3, r3, #1
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d101      	bne.n	8008a86 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8008a82:	2301      	movs	r3, #1
 8008a84:	e000      	b.n	8008a88 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8008a86:	2300      	movs	r3, #0
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d001      	beq.n	8008a90 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e000      	b.n	8008a92 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8008a90:	2300      	movs	r3, #0
    }
 8008a92:	4618      	mov	r0, r3
 8008a94:	370c      	adds	r7, #12
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
	...

08008aa0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	4801      	ldr	r0, [pc, #4]	; (8008aac <__tcf_0+0xc>)
 8008aa6:	f7fe fd75 	bl	8007594 <_ZN8touchgfx13GeneratedFontD1Ev>
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	2400a200 	.word	0x2400a200

08008ab0 <_Z23getFont_verdana_10_4bppv>:
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b08c      	sub	sp, #48	; 0x30
 8008ab4:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8008ab6:	4b1f      	ldr	r3, [pc, #124]	; (8008b34 <_Z23getFont_verdana_10_4bppv+0x84>)
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	f3bf 8f5b 	dmb	ish
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	f003 0301 	and.w	r3, r3, #1
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	bf0c      	ite	eq
 8008ac8:	2301      	moveq	r3, #1
 8008aca:	2300      	movne	r3, #0
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d02c      	beq.n	8008b2c <_Z23getFont_verdana_10_4bppv+0x7c>
 8008ad2:	4818      	ldr	r0, [pc, #96]	; (8008b34 <_Z23getFont_verdana_10_4bppv+0x84>)
 8008ad4:	f019 fda3 	bl	802261e <__cxa_guard_acquire>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	bf14      	ite	ne
 8008ade:	2301      	movne	r3, #1
 8008ae0:	2300      	moveq	r3, #0
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d021      	beq.n	8008b2c <_Z23getFont_verdana_10_4bppv+0x7c>
 8008ae8:	2300      	movs	r3, #0
 8008aea:	930a      	str	r3, [sp, #40]	; 0x28
 8008aec:	2300      	movs	r3, #0
 8008aee:	9309      	str	r3, [sp, #36]	; 0x24
 8008af0:	2300      	movs	r3, #0
 8008af2:	9308      	str	r3, [sp, #32]
 8008af4:	233f      	movs	r3, #63	; 0x3f
 8008af6:	9307      	str	r3, [sp, #28]
 8008af8:	4b0f      	ldr	r3, [pc, #60]	; (8008b38 <_Z23getFont_verdana_10_4bppv+0x88>)
 8008afa:	9306      	str	r3, [sp, #24]
 8008afc:	4b0f      	ldr	r3, [pc, #60]	; (8008b3c <_Z23getFont_verdana_10_4bppv+0x8c>)
 8008afe:	9305      	str	r3, [sp, #20]
 8008b00:	2300      	movs	r3, #0
 8008b02:	9304      	str	r3, [sp, #16]
 8008b04:	2300      	movs	r3, #0
 8008b06:	9303      	str	r3, [sp, #12]
 8008b08:	2301      	movs	r3, #1
 8008b0a:	9302      	str	r3, [sp, #8]
 8008b0c:	2304      	movs	r3, #4
 8008b0e:	9301      	str	r3, [sp, #4]
 8008b10:	2300      	movs	r3, #0
 8008b12:	9300      	str	r3, [sp, #0]
 8008b14:	230a      	movs	r3, #10
 8008b16:	2201      	movs	r2, #1
 8008b18:	4909      	ldr	r1, [pc, #36]	; (8008b40 <_Z23getFont_verdana_10_4bppv+0x90>)
 8008b1a:	480a      	ldr	r0, [pc, #40]	; (8008b44 <_Z23getFont_verdana_10_4bppv+0x94>)
 8008b1c:	f7ff f8d8 	bl	8007cd0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008b20:	4809      	ldr	r0, [pc, #36]	; (8008b48 <_Z23getFont_verdana_10_4bppv+0x98>)
 8008b22:	f019 fdc7 	bl	80226b4 <atexit>
 8008b26:	4803      	ldr	r0, [pc, #12]	; (8008b34 <_Z23getFont_verdana_10_4bppv+0x84>)
 8008b28:	f019 fd85 	bl	8022636 <__cxa_guard_release>
    return verdana_10_4bpp;
 8008b2c:	4b05      	ldr	r3, [pc, #20]	; (8008b44 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	2400a228 	.word	0x2400a228
 8008b38:	0802550c 	.word	0x0802550c
 8008b3c:	08025518 	.word	0x08025518
 8008b40:	90000178 	.word	0x90000178
 8008b44:	2400a200 	.word	0x2400a200
 8008b48:	08008aa1 	.word	0x08008aa1

08008b4c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	4801      	ldr	r0, [pc, #4]	; (8008b58 <__tcf_0+0xc>)
 8008b52:	f7fe fd1f 	bl	8007594 <_ZN8touchgfx13GeneratedFontD1Ev>
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	2400a22c 	.word	0x2400a22c

08008b5c <_Z23getFont_verdana_20_4bppv>:
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b08c      	sub	sp, #48	; 0x30
 8008b60:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8008b62:	4b1f      	ldr	r3, [pc, #124]	; (8008be0 <_Z23getFont_verdana_20_4bppv+0x84>)
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	f3bf 8f5b 	dmb	ish
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	f003 0301 	and.w	r3, r3, #1
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	bf0c      	ite	eq
 8008b74:	2301      	moveq	r3, #1
 8008b76:	2300      	movne	r3, #0
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d02c      	beq.n	8008bd8 <_Z23getFont_verdana_20_4bppv+0x7c>
 8008b7e:	4818      	ldr	r0, [pc, #96]	; (8008be0 <_Z23getFont_verdana_20_4bppv+0x84>)
 8008b80:	f019 fd4d 	bl	802261e <__cxa_guard_acquire>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	bf14      	ite	ne
 8008b8a:	2301      	movne	r3, #1
 8008b8c:	2300      	moveq	r3, #0
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d021      	beq.n	8008bd8 <_Z23getFont_verdana_20_4bppv+0x7c>
 8008b94:	2300      	movs	r3, #0
 8008b96:	930a      	str	r3, [sp, #40]	; 0x28
 8008b98:	2300      	movs	r3, #0
 8008b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	9308      	str	r3, [sp, #32]
 8008ba0:	233f      	movs	r3, #63	; 0x3f
 8008ba2:	9307      	str	r3, [sp, #28]
 8008ba4:	4b0f      	ldr	r3, [pc, #60]	; (8008be4 <_Z23getFont_verdana_20_4bppv+0x88>)
 8008ba6:	9306      	str	r3, [sp, #24]
 8008ba8:	4b0f      	ldr	r3, [pc, #60]	; (8008be8 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8008baa:	9305      	str	r3, [sp, #20]
 8008bac:	2300      	movs	r3, #0
 8008bae:	9304      	str	r3, [sp, #16]
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	9303      	str	r3, [sp, #12]
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	9302      	str	r3, [sp, #8]
 8008bb8:	2304      	movs	r3, #4
 8008bba:	9301      	str	r3, [sp, #4]
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	9300      	str	r3, [sp, #0]
 8008bc0:	2314      	movs	r3, #20
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	4909      	ldr	r1, [pc, #36]	; (8008bec <_Z23getFont_verdana_20_4bppv+0x90>)
 8008bc6:	480a      	ldr	r0, [pc, #40]	; (8008bf0 <_Z23getFont_verdana_20_4bppv+0x94>)
 8008bc8:	f7ff f882 	bl	8007cd0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008bcc:	4809      	ldr	r0, [pc, #36]	; (8008bf4 <_Z23getFont_verdana_20_4bppv+0x98>)
 8008bce:	f019 fd71 	bl	80226b4 <atexit>
 8008bd2:	4803      	ldr	r0, [pc, #12]	; (8008be0 <_Z23getFont_verdana_20_4bppv+0x84>)
 8008bd4:	f019 fd2f 	bl	8022636 <__cxa_guard_release>
    return verdana_20_4bpp;
 8008bd8:	4b05      	ldr	r3, [pc, #20]	; (8008bf0 <_Z23getFont_verdana_20_4bppv+0x94>)
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	2400a254 	.word	0x2400a254
 8008be4:	08025510 	.word	0x08025510
 8008be8:	0802551c 	.word	0x0802551c
 8008bec:	90000188 	.word	0x90000188
 8008bf0:	2400a22c 	.word	0x2400a22c
 8008bf4:	08008b4d 	.word	0x08008b4d

08008bf8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	4801      	ldr	r0, [pc, #4]	; (8008c04 <__tcf_0+0xc>)
 8008bfe:	f7fe fcc9 	bl	8007594 <_ZN8touchgfx13GeneratedFontD1Ev>
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	2400a258 	.word	0x2400a258

08008c08 <_Z23getFont_verdana_40_4bppv>:
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b08c      	sub	sp, #48	; 0x30
 8008c0c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8008c0e:	4b1f      	ldr	r3, [pc, #124]	; (8008c8c <_Z23getFont_verdana_40_4bppv+0x84>)
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	f3bf 8f5b 	dmb	ish
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	f003 0301 	and.w	r3, r3, #1
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	bf0c      	ite	eq
 8008c20:	2301      	moveq	r3, #1
 8008c22:	2300      	movne	r3, #0
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d02c      	beq.n	8008c84 <_Z23getFont_verdana_40_4bppv+0x7c>
 8008c2a:	4818      	ldr	r0, [pc, #96]	; (8008c8c <_Z23getFont_verdana_40_4bppv+0x84>)
 8008c2c:	f019 fcf7 	bl	802261e <__cxa_guard_acquire>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	bf14      	ite	ne
 8008c36:	2301      	movne	r3, #1
 8008c38:	2300      	moveq	r3, #0
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d021      	beq.n	8008c84 <_Z23getFont_verdana_40_4bppv+0x7c>
 8008c40:	2300      	movs	r3, #0
 8008c42:	930a      	str	r3, [sp, #40]	; 0x28
 8008c44:	2300      	movs	r3, #0
 8008c46:	9309      	str	r3, [sp, #36]	; 0x24
 8008c48:	2300      	movs	r3, #0
 8008c4a:	9308      	str	r3, [sp, #32]
 8008c4c:	233f      	movs	r3, #63	; 0x3f
 8008c4e:	9307      	str	r3, [sp, #28]
 8008c50:	4b0f      	ldr	r3, [pc, #60]	; (8008c90 <_Z23getFont_verdana_40_4bppv+0x88>)
 8008c52:	9306      	str	r3, [sp, #24]
 8008c54:	4b0f      	ldr	r3, [pc, #60]	; (8008c94 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8008c56:	9305      	str	r3, [sp, #20]
 8008c58:	2300      	movs	r3, #0
 8008c5a:	9304      	str	r3, [sp, #16]
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	9303      	str	r3, [sp, #12]
 8008c60:	2301      	movs	r3, #1
 8008c62:	9302      	str	r3, [sp, #8]
 8008c64:	2304      	movs	r3, #4
 8008c66:	9301      	str	r3, [sp, #4]
 8008c68:	2300      	movs	r3, #0
 8008c6a:	9300      	str	r3, [sp, #0]
 8008c6c:	2328      	movs	r3, #40	; 0x28
 8008c6e:	2201      	movs	r2, #1
 8008c70:	4909      	ldr	r1, [pc, #36]	; (8008c98 <_Z23getFont_verdana_40_4bppv+0x90>)
 8008c72:	480a      	ldr	r0, [pc, #40]	; (8008c9c <_Z23getFont_verdana_40_4bppv+0x94>)
 8008c74:	f7ff f82c 	bl	8007cd0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008c78:	4809      	ldr	r0, [pc, #36]	; (8008ca0 <_Z23getFont_verdana_40_4bppv+0x98>)
 8008c7a:	f019 fd1b 	bl	80226b4 <atexit>
 8008c7e:	4803      	ldr	r0, [pc, #12]	; (8008c8c <_Z23getFont_verdana_40_4bppv+0x84>)
 8008c80:	f019 fcd9 	bl	8022636 <__cxa_guard_release>
    return verdana_40_4bpp;
 8008c84:	4b05      	ldr	r3, [pc, #20]	; (8008c9c <_Z23getFont_verdana_40_4bppv+0x94>)
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	2400a280 	.word	0x2400a280
 8008c90:	08025514 	.word	0x08025514
 8008c94:	08025520 	.word	0x08025520
 8008c98:	90000198 	.word	0x90000198
 8008c9c:	2400a258 	.word	0x2400a258
 8008ca0:	08008bf9 	.word	0x08008bf9

08008ca4 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	460b      	mov	r3, r1
 8008cae:	607a      	str	r2, [r7, #4]
 8008cb0:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 8008cb2:	2300      	movs	r3, #0
    }
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3714      	adds	r7, #20
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8008cc8:	2300      	movs	r3, #0
    }
 8008cca:	4618      	mov	r0, r3
 8008ccc:	370c      	adds	r7, #12
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr

08008cd6 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8008cd6:	b480      	push	{r7}
 8008cd8:	b083      	sub	sp, #12
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8008cde:	2300      	movs	r3, #0
    }
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8008cec:	b480      	push	{r7}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8008cfa:	4a07      	ldr	r2, [pc, #28]	; (8008d18 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6013      	str	r3, [r2, #0]
        fonts = f;
 8008d00:	4a06      	ldr	r2, [pc, #24]	; (8008d1c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8008d06:	4a06      	ldr	r2, [pc, #24]	; (8008d20 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8008d08:	88fb      	ldrh	r3, [r7, #6]
 8008d0a:	8013      	strh	r3, [r2, #0]
    }
 8008d0c:	bf00      	nop
 8008d0e:	3714      	adds	r7, #20
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr
 8008d18:	2400aef4 	.word	0x2400aef4
 8008d1c:	2400aefc 	.word	0x2400aefc
 8008d20:	2400aef8 	.word	0x2400aef8

08008d24 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8008d24:	b40e      	push	{r1, r2, r3}
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b085      	sub	sp, #20
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8008d2e:	f107 0320 	add.w	r3, r7, #32
 8008d32:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	69fa      	ldr	r2, [r7, #28]
 8008d38:	2100      	movs	r1, #0
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f00c f978 	bl	8015030 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8008d40:	4603      	mov	r3, r0
 8008d42:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8008d44:	89fb      	ldrh	r3, [r7, #14]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3714      	adds	r7, #20
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d50:	b003      	add	sp, #12
 8008d52:	4770      	bx	lr

08008d54 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8008d54:	b40c      	push	{r2, r3}
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b084      	sub	sp, #16
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
 8008d5e:	460b      	mov	r3, r1
 8008d60:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8008d62:	f107 031c 	add.w	r3, r7, #28
 8008d66:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8008d68:	78f9      	ldrb	r1, [r7, #3]
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	69ba      	ldr	r2, [r7, #24]
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f00c f95e 	bl	8015030 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8008d74:	4603      	mov	r3, r0
 8008d76:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8008d78:	89fb      	ldrh	r3, [r7, #14]
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d84:	b002      	add	sp, #8
 8008d86:	4770      	bx	lr

08008d88 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b08a      	sub	sp, #40	; 0x28
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	460b      	mov	r3, r1
 8008d92:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d016      	beq.n	8008dca <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	3322      	adds	r3, #34	; 0x22
 8008da0:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8008da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da4:	8adb      	ldrh	r3, [r3, #22]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d105      	bne.n	8008db6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8008daa:	4b43      	ldr	r3, [pc, #268]	; (8008eb8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8008dac:	4a43      	ldr	r2, [pc, #268]	; (8008ebc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8008dae:	21c0      	movs	r1, #192	; 0xc0
 8008db0:	4843      	ldr	r0, [pc, #268]	; (8008ec0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008db2:	f019 fc61 	bl	8022678 <__assert_func>
            return buffer[pos];
 8008db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db8:	8a9b      	ldrh	r3, [r3, #20]
 8008dba:	461a      	mov	r2, r3
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d001      	beq.n	8008dca <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e000      	b.n	8008dcc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8008dca:	2300      	movs	r3, #0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d06a      	beq.n	8008ea6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f00d fb61 	bl	8016498 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	3322      	adds	r3, #34	; 0x22
 8008dda:	623b      	str	r3, [r7, #32]
 8008ddc:	2301      	movs	r3, #1
 8008dde:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8008de0:	6a3b      	ldr	r3, [r7, #32]
 8008de2:	8adb      	ldrh	r3, [r3, #22]
 8008de4:	8bfa      	ldrh	r2, [r7, #30]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d305      	bcc.n	8008df6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8008dea:	4b36      	ldr	r3, [pc, #216]	; (8008ec4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8008dec:	4a36      	ldr	r2, [pc, #216]	; (8008ec8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8008dee:	21c5      	movs	r1, #197	; 0xc5
 8008df0:	4833      	ldr	r0, [pc, #204]	; (8008ec0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008df2:	f019 fc41 	bl	8022678 <__assert_func>
            const uint16_t index = pos + offset;
 8008df6:	6a3b      	ldr	r3, [r7, #32]
 8008df8:	8a9a      	ldrh	r2, [r3, #20]
 8008dfa:	8bfb      	ldrh	r3, [r7, #30]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8008e00:	8bbb      	ldrh	r3, [r7, #28]
 8008e02:	2b09      	cmp	r3, #9
 8008e04:	d801      	bhi.n	8008e0a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8008e06:	8bbb      	ldrh	r3, [r7, #28]
 8008e08:	e001      	b.n	8008e0e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8008e0a:	8bbb      	ldrh	r3, [r7, #28]
 8008e0c:	3b0a      	subs	r3, #10
 8008e0e:	6a3a      	ldr	r2, [r7, #32]
 8008e10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e14:	f640 123f 	movw	r2, #2367	; 0x93f
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	bf0c      	ite	eq
 8008e1c:	2301      	moveq	r3, #1
 8008e1e:	2300      	movne	r3, #0
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d03f      	beq.n	8008ea6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	3322      	adds	r3, #34	; 0x22
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	3222      	adds	r2, #34	; 0x22
 8008e2e:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8008e30:	68ba      	ldr	r2, [r7, #8]
 8008e32:	8ad2      	ldrh	r2, [r2, #22]
 8008e34:	2a00      	cmp	r2, #0
 8008e36:	d105      	bne.n	8008e44 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8008e38:	4b1f      	ldr	r3, [pc, #124]	; (8008eb8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8008e3a:	4a20      	ldr	r2, [pc, #128]	; (8008ebc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8008e3c:	21c0      	movs	r1, #192	; 0xc0
 8008e3e:	4820      	ldr	r0, [pc, #128]	; (8008ec0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008e40:	f019 fc1a 	bl	8022678 <__assert_func>
            return buffer[pos];
 8008e44:	68ba      	ldr	r2, [r7, #8]
 8008e46:	8a92      	ldrh	r2, [r2, #20]
 8008e48:	4611      	mov	r1, r2
 8008e4a:	68ba      	ldr	r2, [r7, #8]
 8008e4c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8008e50:	613b      	str	r3, [r7, #16]
 8008e52:	4613      	mov	r3, r2
 8008e54:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	8adb      	ldrh	r3, [r3, #22]
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d806      	bhi.n	8008e6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8008e5e:	4b1b      	ldr	r3, [pc, #108]	; (8008ecc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8008e60:	4a1b      	ldr	r2, [pc, #108]	; (8008ed0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8008e62:	f240 110d 	movw	r1, #269	; 0x10d
 8008e66:	4816      	ldr	r0, [pc, #88]	; (8008ec0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008e68:	f019 fc06 	bl	8022678 <__assert_func>
            const uint16_t index = pos + 1;
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	8a9b      	ldrh	r3, [r3, #20]
 8008e70:	3301      	adds	r3, #1
 8008e72:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8008e74:	89bb      	ldrh	r3, [r7, #12]
 8008e76:	2b09      	cmp	r3, #9
 8008e78:	d801      	bhi.n	8008e7e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8008e7a:	89bb      	ldrh	r3, [r7, #12]
 8008e7c:	e000      	b.n	8008e80 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	693a      	ldr	r2, [r7, #16]
 8008e82:	89f9      	ldrh	r1, [r7, #14]
 8008e84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8008e88:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	3322      	adds	r3, #34	; 0x22
 8008e8e:	61bb      	str	r3, [r7, #24]
 8008e90:	f640 133f 	movw	r3, #2367	; 0x93f
 8008e94:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	8a9b      	ldrh	r3, [r3, #20]
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	8afa      	ldrh	r2, [r7, #22]
 8008ea0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8008ea4:	bf00      	nop
        }
    }
    return getNextChar();
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f00d f9f8 	bl	801629c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8008eac:	4603      	mov	r3, r0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3728      	adds	r7, #40	; 0x28
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	08023fac 	.word	0x08023fac
 8008ebc:	08023fb8 	.word	0x08023fb8
 8008ec0:	08024064 	.word	0x08024064
 8008ec4:	080240bc 	.word	0x080240bc
 8008ec8:	080240cc 	.word	0x080240cc
 8008ecc:	080241a0 	.word	0x080241a0
 8008ed0:	080241ac 	.word	0x080241ac

08008ed4 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f00d f9a6 	bl	801622e <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8008ee2:	bf00      	nop
 8008ee4:	3708      	adds	r7, #8
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
	...

08008eec <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8008eec:	b590      	push	{r4, r7, lr}
 8008eee:	b085      	sub	sp, #20
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8008efa:	88fb      	ldrh	r3, [r7, #6]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d127      	bne.n	8008f50 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8008f00:	88fb      	ldrh	r3, [r7, #6]
 8008f02:	4a1e      	ldr	r2, [pc, #120]	; (8008f7c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8008f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d016      	beq.n	8008f3a <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8008f0c:	88fb      	ldrh	r3, [r7, #6]
 8008f0e:	4a1b      	ldr	r2, [pc, #108]	; (8008f7c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8008f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f14:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	4a18      	ldr	r2, [pc, #96]	; (8008f80 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8008f20:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	4413      	add	r3, r2
 8008f2a:	4a16      	ldr	r2, [pc, #88]	; (8008f84 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8008f2c:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	68ba      	ldr	r2, [r7, #8]
 8008f34:	4413      	add	r3, r2
 8008f36:	60fb      	str	r3, [r7, #12]
 8008f38:	e00a      	b.n	8008f50 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8008f3a:	4b11      	ldr	r3, [pc, #68]	; (8008f80 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8008f3c:	4a12      	ldr	r2, [pc, #72]	; (8008f88 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8008f3e:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8008f40:	4a12      	ldr	r2, [pc, #72]	; (8008f8c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8008f42:	4b10      	ldr	r3, [pc, #64]	; (8008f84 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8008f44:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8008f46:	88fb      	ldrh	r3, [r7, #6]
 8008f48:	4a11      	ldr	r2, [pc, #68]	; (8008f90 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8008f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f4e:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00d      	beq.n	8008f72 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8008f56:	4a0f      	ldr	r2, [pc, #60]	; (8008f94 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8008f58:	88fb      	ldrh	r3, [r7, #6]
 8008f5a:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8008f5c:	f000 f824 	bl	8008fa8 <_ZN17TypedTextDatabase8getFontsEv>
 8008f60:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8008f62:	f000 f819 	bl	8008f98 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8008f66:	4603      	mov	r3, r0
 8008f68:	461a      	mov	r2, r3
 8008f6a:	4621      	mov	r1, r4
 8008f6c:	68f8      	ldr	r0, [r7, #12]
 8008f6e:	f7ff febd 	bl	8008cec <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8008f72:	bf00      	nop
 8008f74:	3714      	adds	r7, #20
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd90      	pop	{r4, r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	2400a284 	.word	0x2400a284
 8008f80:	2400a28c 	.word	0x2400a28c
 8008f84:	2400a290 	.word	0x2400a290
 8008f88:	900001ac 	.word	0x900001ac
 8008f8c:	900001a8 	.word	0x900001a8
 8008f90:	900001b4 	.word	0x900001b4
 8008f94:	2400a288 	.word	0x2400a288

08008f98 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8008f98:	b480      	push	{r7}
 8008f9a:	af00      	add	r7, sp, #0
    return 0;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8008fa8:	b480      	push	{r7}
 8008faa:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8008fac:	4b02      	ldr	r3, [pc, #8]	; (8008fb8 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr
 8008fb8:	2400a294 	.word	0x2400a294

08008fbc <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d113      	bne.n	8008ff4 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d10e      	bne.n	8008ff4 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 8008fd6:	f7ff fdc1 	bl	8008b5c <_Z23getFont_verdana_20_4bppv>
 8008fda:	4603      	mov	r3, r0
};
 8008fdc:	4a07      	ldr	r2, [pc, #28]	; (8008ffc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008fde:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8008fe0:	f7ff fe12 	bl	8008c08 <_Z23getFont_verdana_40_4bppv>
 8008fe4:	4603      	mov	r3, r0
};
 8008fe6:	4a05      	ldr	r2, [pc, #20]	; (8008ffc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008fe8:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 8008fea:	f7ff fd61 	bl	8008ab0 <_Z23getFont_verdana_10_4bppv>
 8008fee:	4603      	mov	r3, r0
};
 8008ff0:	4a02      	ldr	r2, [pc, #8]	; (8008ffc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008ff2:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 8008ff4:	bf00      	nop
 8008ff6:	3708      	adds	r7, #8
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	2400a294 	.word	0x2400a294

08009000 <_GLOBAL__sub_I_touchgfx_fonts>:
 8009000:	b580      	push	{r7, lr}
 8009002:	af00      	add	r7, sp, #0
 8009004:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009008:	2001      	movs	r0, #1
 800900a:	f7ff ffd7 	bl	8008fbc <_Z41__static_initialization_and_destruction_0ii>
 800900e:	bd80      	pop	{r7, pc}

08009010 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	68b9      	ldr	r1, [r7, #8]
 8009022:	4618      	mov	r0, r3
 8009024:	f7fe fbba 	bl	800779c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8009028:	4a03      	ldr	r2, [pc, #12]	; (8009038 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	601a      	str	r2, [r3, #0]
{

}
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	4618      	mov	r0, r3
 8009032:	3710      	adds	r7, #16
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	080245f4 	.word	0x080245f4

0800903c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	601a      	str	r2, [r3, #0]
{

}
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4618      	mov	r0, r3
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <_ZN5Model4tickEv>:

void Model::tick()
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]

}
 8009060:	bf00      	nop
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
    {
    }
 8009074:	bf00      	nop
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
    {
    }
 8009088:	bf00      	nop
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
    {
 800909c:	4a04      	ldr	r2, [pc, #16]	; (80090b0 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	601a      	str	r2, [r3, #0]
    }
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4618      	mov	r0, r3
 80090a6:	370c      	adds	r7, #12
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr
 80090b0:	08024aac 	.word	0x08024aac

080090b4 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
    }
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f7ff ffe9 	bl	8009094 <_ZN8touchgfx9PresenterD1Ev>
 80090c2:	2104      	movs	r1, #4
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f019 faa8 	bl	802261a <_ZdlPvj>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4618      	mov	r0, r3
 80090ce:	3708      	adds	r7, #8
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
    {
 80090dc:	4a04      	ldr	r2, [pc, #16]	; (80090f0 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	601a      	str	r2, [r3, #0]
    }
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	4618      	mov	r0, r3
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr
 80090f0:	08024aac 	.word	0x08024aac

080090f4 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	4a06      	ldr	r2, [pc, #24]	; (8009118 <_ZN13ModelListenerC1Ev+0x24>)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	601a      	str	r2, [r3, #0]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	605a      	str	r2, [r3, #4]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4618      	mov	r0, r3
 800910c:	370c      	adds	r7, #12
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop
 8009118:	08024a9c 	.word	0x08024a9c

0800911c <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	4a04      	ldr	r2, [pc, #16]	; (8009138 <_ZN13ModelListenerD1Ev+0x1c>)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	601a      	str	r2, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4618      	mov	r0, r3
 800912e:	370c      	adds	r7, #12
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr
 8009138:	08024a9c 	.word	0x08024a9c

0800913c <_ZN13ModelListenerD0Ev>:
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f7ff ffe9 	bl	800911c <_ZN13ModelListenerD1Ev>
 800914a:	2108      	movs	r1, #8
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f019 fa64 	bl	802261a <_ZdlPvj>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4618      	mov	r0, r3
 8009156:	3708      	adds	r7, #8
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	4a09      	ldr	r2, [pc, #36]	; (800918c <_ZN16Screen1PresenterD1Ev+0x30>)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	601a      	str	r2, [r3, #0]
 800916a:	4a09      	ldr	r2, [pc, #36]	; (8009190 <_ZN16Screen1PresenterD1Ev+0x34>)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	605a      	str	r2, [r3, #4]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	3304      	adds	r3, #4
 8009174:	4618      	mov	r0, r3
 8009176:	f7ff ffd1 	bl	800911c <_ZN13ModelListenerD1Ev>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4618      	mov	r0, r3
 800917e:	f7ff ff89 	bl	8009094 <_ZN8touchgfx9PresenterD1Ev>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4618      	mov	r0, r3
 8009186:	3708      	adds	r7, #8
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	08024a74 	.word	0x08024a74
 8009190:	08024a8c 	.word	0x08024a8c

08009194 <_ZThn4_N16Screen1PresenterD1Ev>:
 8009194:	f1a0 0004 	sub.w	r0, r0, #4
 8009198:	e7e0      	b.n	800915c <_ZN16Screen1PresenterD1Ev>
 800919a:	bf00      	nop

0800919c <_ZN16Screen1PresenterD0Ev>:
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f7ff ffd9 	bl	800915c <_ZN16Screen1PresenterD1Ev>
 80091aa:	2110      	movs	r1, #16
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f019 fa34 	bl	802261a <_ZdlPvj>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4618      	mov	r0, r3
 80091b6:	3708      	adds	r7, #8
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <_ZThn4_N16Screen1PresenterD0Ev>:
 80091bc:	f1a0 0004 	sub.w	r0, r0, #4
 80091c0:	e7ec      	b.n	800919c <_ZN16Screen1PresenterD0Ev>
	...

080091c4 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
    : view(v)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7ff ff7f 	bl	80090d4 <_ZN8touchgfx9PresenterC1Ev>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	3304      	adds	r3, #4
 80091da:	4618      	mov	r0, r3
 80091dc:	f7ff ff8a 	bl	80090f4 <_ZN13ModelListenerC1Ev>
 80091e0:	4a06      	ldr	r2, [pc, #24]	; (80091fc <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	601a      	str	r2, [r3, #0]
 80091e6:	4a06      	ldr	r2, [pc, #24]	; (8009200 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	605a      	str	r2, [r3, #4]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	683a      	ldr	r2, [r7, #0]
 80091f0:	60da      	str	r2, [r3, #12]
{

}
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4618      	mov	r0, r3
 80091f6:	3708      	adds	r7, #8
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	08024a74 	.word	0x08024a74
 8009200:	08024a8c 	.word	0x08024a8c

08009204 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]

}
 800920c:	bf00      	nop
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]

}
 8009220:	bf00      	nop
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <_ZNK8touchgfx6Bitmap5getIdEv>:
    /**
     * Gets the id of this Bitmap.
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 8009234:	4b07      	ldr	r3, [pc, #28]	; (8009254 <_ZNK8touchgfx6Bitmap5getIdEv+0x28>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d105      	bne.n	8009248 <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>
 800923c:	4b06      	ldr	r3, [pc, #24]	; (8009258 <_ZNK8touchgfx6Bitmap5getIdEv+0x2c>)
 800923e:	4a07      	ldr	r2, [pc, #28]	; (800925c <_ZNK8touchgfx6Bitmap5getIdEv+0x30>)
 8009240:	2187      	movs	r1, #135	; 0x87
 8009242:	4807      	ldr	r0, [pc, #28]	; (8009260 <_ZNK8touchgfx6Bitmap5getIdEv+0x34>)
 8009244:	f019 fa18 	bl	8022678 <__assert_func>
        return bitmapId;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	881b      	ldrh	r3, [r3, #0]
    }
 800924c:	4618      	mov	r0, r3
 800924e:	3708      	adds	r7, #8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	2400af2c 	.word	0x2400af2c
 8009258:	08024260 	.word	0x08024260
 800925c:	0802429c 	.word	0x0802429c
 8009260:	080242d0 	.word	0x080242d0

08009264 <_ZNK8touchgfx12ToggleButton8getStateEv>:
     * Gets the state of the ToggleButton as set with forceState.
     *
     * @return True if the button has been toggled, i.e. the pressed state is shown when the
     *         button is not pressed.
     */
    bool getState() const
 8009264:	b590      	push	{r4, r7, lr}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
    {
        return up.getId() == originalPressed.getId();
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	332e      	adds	r3, #46	; 0x2e
 8009270:	4618      	mov	r0, r3
 8009272:	f7ff ffdb 	bl	800922c <_ZNK8touchgfx6Bitmap5getIdEv>
 8009276:	4603      	mov	r3, r0
 8009278:	461c      	mov	r4, r3
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	3334      	adds	r3, #52	; 0x34
 800927e:	4618      	mov	r0, r3
 8009280:	f7ff ffd4 	bl	800922c <_ZNK8touchgfx6Bitmap5getIdEv>
 8009284:	4603      	mov	r3, r0
 8009286:	429c      	cmp	r4, r3
 8009288:	bf0c      	ite	eq
 800928a:	2301      	moveq	r3, #1
 800928c:	2300      	movne	r3, #0
 800928e:	b2db      	uxtb	r3, r3
    }
 8009290:	4618      	mov	r0, r3
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	bd90      	pop	{r4, r7, pc}

08009298 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	4a05      	ldr	r2, [pc, #20]	; (80092b8 <_ZN11Screen1ViewD1Ev+0x20>)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	601a      	str	r2, [r3, #0]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7ff f945 	bl	8008538 <_ZN15Screen1ViewBaseD1Ev>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4618      	mov	r0, r3
 80092b2:	3708      	adds	r7, #8
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}
 80092b8:	08024ac4 	.word	0x08024ac4

080092bc <_ZN11Screen1ViewD0Ev>:
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f7ff ffe7 	bl	8009298 <_ZN11Screen1ViewD1Ev>
 80092ca:	21e0      	movs	r1, #224	; 0xe0
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f019 f9a4 	bl	802261a <_ZdlPvj>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	4618      	mov	r0, r3
 80092d6:	3708      	adds	r7, #8
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

#include "stm32h7xx_hal.h"

Screen1View::Screen1View()
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7ff f9a2 	bl	8008630 <_ZN15Screen1ViewBaseC1Ev>
 80092ec:	4a03      	ldr	r2, [pc, #12]	; (80092fc <_ZN11Screen1ViewC1Ev+0x20>)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	601a      	str	r2, [r3, #0]
{

}
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4618      	mov	r0, r3
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	08024ac4 	.word	0x08024ac4

08009300 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	4618      	mov	r0, r3
 800930c:	f7ff fa54 	bl	80087b8 <_ZN15Screen1ViewBase11setupScreenEv>
}
 8009310:	bf00      	nop
 8009312:	3708      	adds	r7, #8
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	4618      	mov	r0, r3
 8009324:	f7fe ff7a 	bl	800821c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8009328:	bf00      	nop
 800932a:	3708      	adds	r7, #8
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <_ZN11Screen1View9ToggleLEDEv>:

void Screen1View::ToggleLED()
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
	if(toggleButton1.getState()) HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_2, GPIO_PIN_SET);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	3398      	adds	r3, #152	; 0x98
 800933c:	4618      	mov	r0, r3
 800933e:	f7ff ff91 	bl	8009264 <_ZNK8touchgfx12ToggleButton8getStateEv>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d005      	beq.n	8009354 <_ZN11Screen1View9ToggleLEDEv+0x24>
 8009348:	2201      	movs	r2, #1
 800934a:	2104      	movs	r1, #4
 800934c:	4806      	ldr	r0, [pc, #24]	; (8009368 <_ZN11Screen1View9ToggleLEDEv+0x38>)
 800934e:	f003 fb4d 	bl	800c9ec <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_2, GPIO_PIN_RESET);
}
 8009352:	e004      	b.n	800935e <_ZN11Screen1View9ToggleLEDEv+0x2e>
	else HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_2, GPIO_PIN_RESET);
 8009354:	2200      	movs	r2, #0
 8009356:	2104      	movs	r1, #4
 8009358:	4803      	ldr	r0, [pc, #12]	; (8009368 <_ZN11Screen1View9ToggleLEDEv+0x38>)
 800935a:	f003 fb47 	bl	800c9ec <HAL_GPIO_WritePin>
}
 800935e:	bf00      	nop
 8009360:	3708      	adds	r7, #8
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
 8009366:	bf00      	nop
 8009368:	58022400 	.word	0x58022400

0800936c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800936c:	b480      	push	{r7}
 800936e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009370:	4b3f      	ldr	r3, [pc, #252]	; (8009470 <SystemInit+0x104>)
 8009372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009376:	4a3e      	ldr	r2, [pc, #248]	; (8009470 <SystemInit+0x104>)
 8009378:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800937c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8009380:	4b3b      	ldr	r3, [pc, #236]	; (8009470 <SystemInit+0x104>)
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	4a3a      	ldr	r2, [pc, #232]	; (8009470 <SystemInit+0x104>)
 8009386:	f043 0310 	orr.w	r3, r3, #16
 800938a:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800938c:	4b39      	ldr	r3, [pc, #228]	; (8009474 <SystemInit+0x108>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f003 030f 	and.w	r3, r3, #15
 8009394:	2b06      	cmp	r3, #6
 8009396:	d807      	bhi.n	80093a8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8009398:	4b36      	ldr	r3, [pc, #216]	; (8009474 <SystemInit+0x108>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f023 030f 	bic.w	r3, r3, #15
 80093a0:	4a34      	ldr	r2, [pc, #208]	; (8009474 <SystemInit+0x108>)
 80093a2:	f043 0307 	orr.w	r3, r3, #7
 80093a6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80093a8:	4b33      	ldr	r3, [pc, #204]	; (8009478 <SystemInit+0x10c>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a32      	ldr	r2, [pc, #200]	; (8009478 <SystemInit+0x10c>)
 80093ae:	f043 0301 	orr.w	r3, r3, #1
 80093b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80093b4:	4b30      	ldr	r3, [pc, #192]	; (8009478 <SystemInit+0x10c>)
 80093b6:	2200      	movs	r2, #0
 80093b8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80093ba:	4b2f      	ldr	r3, [pc, #188]	; (8009478 <SystemInit+0x10c>)
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	492e      	ldr	r1, [pc, #184]	; (8009478 <SystemInit+0x10c>)
 80093c0:	4b2e      	ldr	r3, [pc, #184]	; (800947c <SystemInit+0x110>)
 80093c2:	4013      	ands	r3, r2
 80093c4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80093c6:	4b2b      	ldr	r3, [pc, #172]	; (8009474 <SystemInit+0x108>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f003 0308 	and.w	r3, r3, #8
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d007      	beq.n	80093e2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80093d2:	4b28      	ldr	r3, [pc, #160]	; (8009474 <SystemInit+0x108>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f023 030f 	bic.w	r3, r3, #15
 80093da:	4a26      	ldr	r2, [pc, #152]	; (8009474 <SystemInit+0x108>)
 80093dc:	f043 0307 	orr.w	r3, r3, #7
 80093e0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80093e2:	4b25      	ldr	r3, [pc, #148]	; (8009478 <SystemInit+0x10c>)
 80093e4:	2200      	movs	r2, #0
 80093e6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80093e8:	4b23      	ldr	r3, [pc, #140]	; (8009478 <SystemInit+0x10c>)
 80093ea:	2200      	movs	r2, #0
 80093ec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80093ee:	4b22      	ldr	r3, [pc, #136]	; (8009478 <SystemInit+0x10c>)
 80093f0:	2200      	movs	r2, #0
 80093f2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80093f4:	4b20      	ldr	r3, [pc, #128]	; (8009478 <SystemInit+0x10c>)
 80093f6:	4a22      	ldr	r2, [pc, #136]	; (8009480 <SystemInit+0x114>)
 80093f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80093fa:	4b1f      	ldr	r3, [pc, #124]	; (8009478 <SystemInit+0x10c>)
 80093fc:	4a21      	ldr	r2, [pc, #132]	; (8009484 <SystemInit+0x118>)
 80093fe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8009400:	4b1d      	ldr	r3, [pc, #116]	; (8009478 <SystemInit+0x10c>)
 8009402:	4a21      	ldr	r2, [pc, #132]	; (8009488 <SystemInit+0x11c>)
 8009404:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8009406:	4b1c      	ldr	r3, [pc, #112]	; (8009478 <SystemInit+0x10c>)
 8009408:	2200      	movs	r2, #0
 800940a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800940c:	4b1a      	ldr	r3, [pc, #104]	; (8009478 <SystemInit+0x10c>)
 800940e:	4a1e      	ldr	r2, [pc, #120]	; (8009488 <SystemInit+0x11c>)
 8009410:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8009412:	4b19      	ldr	r3, [pc, #100]	; (8009478 <SystemInit+0x10c>)
 8009414:	2200      	movs	r2, #0
 8009416:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8009418:	4b17      	ldr	r3, [pc, #92]	; (8009478 <SystemInit+0x10c>)
 800941a:	4a1b      	ldr	r2, [pc, #108]	; (8009488 <SystemInit+0x11c>)
 800941c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800941e:	4b16      	ldr	r3, [pc, #88]	; (8009478 <SystemInit+0x10c>)
 8009420:	2200      	movs	r2, #0
 8009422:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8009424:	4b14      	ldr	r3, [pc, #80]	; (8009478 <SystemInit+0x10c>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a13      	ldr	r2, [pc, #76]	; (8009478 <SystemInit+0x10c>)
 800942a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800942e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8009430:	4b11      	ldr	r3, [pc, #68]	; (8009478 <SystemInit+0x10c>)
 8009432:	2200      	movs	r2, #0
 8009434:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8009436:	4b15      	ldr	r3, [pc, #84]	; (800948c <SystemInit+0x120>)
 8009438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943a:	4a14      	ldr	r2, [pc, #80]	; (800948c <SystemInit+0x120>)
 800943c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009440:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8009442:	4b13      	ldr	r3, [pc, #76]	; (8009490 <SystemInit+0x124>)
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	4b13      	ldr	r3, [pc, #76]	; (8009494 <SystemInit+0x128>)
 8009448:	4013      	ands	r3, r2
 800944a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800944e:	d202      	bcs.n	8009456 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8009450:	4b11      	ldr	r3, [pc, #68]	; (8009498 <SystemInit+0x12c>)
 8009452:	2201      	movs	r2, #1
 8009454:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8009456:	4b11      	ldr	r3, [pc, #68]	; (800949c <SystemInit+0x130>)
 8009458:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800945c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800945e:	4b04      	ldr	r3, [pc, #16]	; (8009470 <SystemInit+0x104>)
 8009460:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009464:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8009466:	bf00      	nop
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr
 8009470:	e000ed00 	.word	0xe000ed00
 8009474:	52002000 	.word	0x52002000
 8009478:	58024400 	.word	0x58024400
 800947c:	eaf6ed7f 	.word	0xeaf6ed7f
 8009480:	02020200 	.word	0x02020200
 8009484:	01ff0000 	.word	0x01ff0000
 8009488:	01010280 	.word	0x01010280
 800948c:	580000c0 	.word	0x580000c0
 8009490:	5c001000 	.word	0x5c001000
 8009494:	ffff0000 	.word	0xffff0000
 8009498:	51008108 	.word	0x51008108
 800949c:	52004000 	.word	0x52004000

080094a0 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d103      	bne.n	80094b8 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 80094b0:	f04f 33ff 	mov.w	r3, #4294967295
 80094b4:	60fb      	str	r3, [r7, #12]
 80094b6:	e02c      	b.n	8009512 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	685a      	ldr	r2, [r3, #4]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	891a      	ldrh	r2, [r3, #8]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	68da      	ldr	r2, [r3, #12]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	691a      	ldr	r2, [r3, #16]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	695a      	ldr	r2, [r3, #20]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4a0c      	ldr	r2, [pc, #48]	; (800951c <FT5336_RegisterBusIO+0x7c>)
 80094ec:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	4a0b      	ldr	r2, [pc, #44]	; (8009520 <FT5336_RegisterBusIO+0x80>)
 80094f2:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d004      	beq.n	800950c <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4798      	blx	r3
 8009508:	60f8      	str	r0, [r7, #12]
 800950a:	e002      	b.n	8009512 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 800950c:	f04f 33ff 	mov.w	r3, #4294967295
 8009510:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8009512:	68fb      	ldr	r3, [r7, #12]
}
 8009514:	4618      	mov	r0, r3
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}
 800951c:	08009919 	.word	0x08009919
 8009520:	0800994d 	.word	0x0800994d

08009524 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	2201      	movs	r2, #1
 8009532:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	2201      	movs	r2, #1
 8009538:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	2205      	movs	r2, #5
 800953e:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009546:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800954e:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	370c      	adds	r7, #12
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr

0800955e <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b084      	sub	sp, #16
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8009566:	2300      	movs	r3, #0
 8009568:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10d      	bne.n	8009590 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 f987 	bl	800988e <FT5336_DisableIT>
 8009580:	4602      	mov	r2, r0
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	4413      	add	r3, r2
 8009586:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d002      	beq.n	800959c <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 8009596:	f04f 33ff 	mov.w	r3, #4294967295
 800959a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800959c:	68fb      	ldr	r3, [r7, #12]
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 80095a6:	b480      	push	{r7}
 80095a8:	b085      	sub	sp, #20
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 80095ae:	2300      	movs	r3, #0
 80095b0:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d103      	bne.n	80095c4 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 80095c4:	68fb      	ldr	r3, [r7, #12]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3714      	adds	r7, #20
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr

080095d2 <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b084      	sub	sp, #16
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
 80095da:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f103 0218 	add.w	r2, r3, #24
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	4619      	mov	r1, r3
 80095ea:	4610      	mov	r0, r2
 80095ec:	f000 fa25 	bl	8009a3a <ft5336_radian_value>
 80095f0:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f103 0218 	add.w	r2, r3, #24
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	4619      	mov	r1, r3
 8009600:	4610      	mov	r0, r2
 8009602:	f000 fa2b 	bl	8009a5c <ft5336_offset_left_right>
 8009606:	4602      	mov	r2, r0
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	4413      	add	r3, r2
 800960c:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f103 0218 	add.w	r2, r3, #24
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	b2db      	uxtb	r3, r3
 800961a:	4619      	mov	r1, r3
 800961c:	4610      	mov	r0, r2
 800961e:	f000 fa2e 	bl	8009a7e <ft5336_offset_up_down>
 8009622:	4602      	mov	r2, r0
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	4413      	add	r3, r2
 8009628:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f103 0218 	add.w	r2, r3, #24
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	b2db      	uxtb	r3, r3
 8009636:	4619      	mov	r1, r3
 8009638:	4610      	mov	r0, r2
 800963a:	f000 fa31 	bl	8009aa0 <ft5336_disatnce_left_right>
 800963e:	4602      	mov	r2, r0
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	4413      	add	r3, r2
 8009644:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f103 0218 	add.w	r2, r3, #24
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	691b      	ldr	r3, [r3, #16]
 8009650:	b2db      	uxtb	r3, r3
 8009652:	4619      	mov	r1, r3
 8009654:	4610      	mov	r0, r2
 8009656:	f000 fa34 	bl	8009ac2 <ft5336_distance_up_down>
 800965a:	4602      	mov	r2, r0
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	4413      	add	r3, r2
 8009660:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f103 0218 	add.w	r2, r3, #24
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	695b      	ldr	r3, [r3, #20]
 800966c:	b2db      	uxtb	r3, r3
 800966e:	4619      	mov	r1, r3
 8009670:	4610      	mov	r0, r2
 8009672:	f000 fa37 	bl	8009ae4 <ft5336_distance_zoom>
 8009676:	4602      	mov	r2, r0
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	4413      	add	r3, r2
 800967c:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d002      	beq.n	800968a <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 8009684:	f04f 33ff 	mov.w	r3, #4294967295
 8009688:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800968a:	68fb      	ldr	r3, [r7, #12]
}
 800968c:	4618      	mov	r0, r3
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	3318      	adds	r3, #24
 80096a2:	6839      	ldr	r1, [r7, #0]
 80096a4:	4618      	mov	r0, r3
 80096a6:	f000 fa3f 	bl	8009b28 <ft5336_chip_id>
 80096aa:	4603      	mov	r3, r0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3708      	adds	r7, #8
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 80096be:	2300      	movs	r3, #0
 80096c0:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 f908 	bl	80098d8 <FT5336_DetectTouch>
 80096c8:	4603      	mov	r3, r0
 80096ca:	461a      	mov	r2, r3
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f103 0018 	add.w	r0, r3, #24
 80096d6:	f107 0208 	add.w	r2, r7, #8
 80096da:	2304      	movs	r3, #4
 80096dc:	2103      	movs	r1, #3
 80096de:	f000 f94f 	bl	8009980 <ft5336_read_reg>
 80096e2:	4603      	mov	r3, r0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d003      	beq.n	80096f0 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 80096e8:	f04f 33ff 	mov.w	r3, #4294967295
 80096ec:	60fb      	str	r3, [r7, #12]
 80096ee:	e00f      	b.n	8009710 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 80096f0:	7a3b      	ldrb	r3, [r7, #8]
 80096f2:	021b      	lsls	r3, r3, #8
 80096f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80096f8:	7a7a      	ldrb	r2, [r7, #9]
 80096fa:	431a      	orrs	r2, r3
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8009700:	7abb      	ldrb	r3, [r7, #10]
 8009702:	021b      	lsls	r3, r3, #8
 8009704:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009708:	7afa      	ldrb	r2, [r7, #11]
 800970a:	431a      	orrs	r2, r3
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009710:	68fb      	ldr	r3, [r7, #12]
}
 8009712:	4618      	mov	r0, r3
 8009714:	3710      	adds	r7, #16
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b08c      	sub	sp, #48	; 0x30
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
 8009722:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 8009724:	2300      	movs	r3, #0
 8009726:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 f8d5 	bl	80098d8 <FT5336_DetectTouch>
 800972e:	4603      	mov	r3, r0
 8009730:	461a      	mov	r2, r3
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f103 0018 	add.w	r0, r3, #24
 800973c:	f107 0208 	add.w	r2, r7, #8
 8009740:	231e      	movs	r3, #30
 8009742:	2103      	movs	r1, #3
 8009744:	f000 f91c 	bl	8009980 <ft5336_read_reg>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d003      	beq.n	8009756 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 800974e:	f04f 33ff 	mov.w	r3, #4294967295
 8009752:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009754:	e077      	b.n	8009846 <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8009756:	2300      	movs	r3, #0
 8009758:	62bb      	str	r3, [r7, #40]	; 0x28
 800975a:	e071      	b.n	8009840 <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800975c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800975e:	4613      	mov	r3, r2
 8009760:	005b      	lsls	r3, r3, #1
 8009762:	4413      	add	r3, r2
 8009764:	005b      	lsls	r3, r3, #1
 8009766:	3330      	adds	r3, #48	; 0x30
 8009768:	443b      	add	r3, r7
 800976a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800976e:	021b      	lsls	r3, r3, #8
 8009770:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 8009774:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009776:	4613      	mov	r3, r2
 8009778:	005b      	lsls	r3, r3, #1
 800977a:	4413      	add	r3, r2
 800977c:	005b      	lsls	r3, r3, #1
 800977e:	3301      	adds	r3, #1
 8009780:	3330      	adds	r3, #48	; 0x30
 8009782:	443b      	add	r3, r7
 8009784:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009788:	ea41 0203 	orr.w	r2, r1, r3
 800978c:	6839      	ldr	r1, [r7, #0]
 800978e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	440b      	add	r3, r1
 8009794:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8009796:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009798:	4613      	mov	r3, r2
 800979a:	005b      	lsls	r3, r3, #1
 800979c:	4413      	add	r3, r2
 800979e:	005b      	lsls	r3, r3, #1
 80097a0:	3302      	adds	r3, #2
 80097a2:	3330      	adds	r3, #48	; 0x30
 80097a4:	443b      	add	r3, r7
 80097a6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80097aa:	021b      	lsls	r3, r3, #8
 80097ac:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 80097b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097b2:	4613      	mov	r3, r2
 80097b4:	005b      	lsls	r3, r3, #1
 80097b6:	4413      	add	r3, r2
 80097b8:	005b      	lsls	r3, r3, #1
 80097ba:	3303      	adds	r3, #3
 80097bc:	3330      	adds	r3, #48	; 0x30
 80097be:	443b      	add	r3, r7
 80097c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80097c4:	4319      	orrs	r1, r3
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097ca:	3206      	adds	r2, #6
 80097cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 80097d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097d2:	4613      	mov	r3, r2
 80097d4:	005b      	lsls	r3, r3, #1
 80097d6:	4413      	add	r3, r2
 80097d8:	005b      	lsls	r3, r3, #1
 80097da:	3330      	adds	r3, #48	; 0x30
 80097dc:	443b      	add	r3, r7
 80097de:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80097e2:	099b      	lsrs	r3, r3, #6
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	4619      	mov	r1, r3
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097ec:	3210      	adds	r2, #16
 80097ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 80097f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097f4:	4613      	mov	r3, r2
 80097f6:	005b      	lsls	r3, r3, #1
 80097f8:	4413      	add	r3, r2
 80097fa:	005b      	lsls	r3, r3, #1
 80097fc:	3304      	adds	r3, #4
 80097fe:	3330      	adds	r3, #48	; 0x30
 8009800:	443b      	add	r3, r7
 8009802:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009806:	4619      	mov	r1, r3
 8009808:	683a      	ldr	r2, [r7, #0]
 800980a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980c:	330a      	adds	r3, #10
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	4413      	add	r3, r2
 8009812:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8009814:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009816:	4613      	mov	r3, r2
 8009818:	005b      	lsls	r3, r3, #1
 800981a:	4413      	add	r3, r2
 800981c:	005b      	lsls	r3, r3, #1
 800981e:	3305      	adds	r3, #5
 8009820:	3330      	adds	r3, #48	; 0x30
 8009822:	443b      	add	r3, r7
 8009824:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009828:	091b      	lsrs	r3, r3, #4
 800982a:	b2db      	uxtb	r3, r3
 800982c:	4619      	mov	r1, r3
 800982e:	683a      	ldr	r2, [r7, #0]
 8009830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009832:	3314      	adds	r3, #20
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	4413      	add	r3, r2
 8009838:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800983a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983c:	3301      	adds	r3, #1
 800983e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009842:	2b04      	cmp	r3, #4
 8009844:	d98a      	bls.n	800975c <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 8009846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009848:	4618      	mov	r0, r3
 800984a:	3730      	adds	r7, #48	; 0x30
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	3318      	adds	r3, #24
 800985e:	6839      	ldr	r1, [r7, #0]
 8009860:	4618      	mov	r0, r3
 8009862:	f000 f8bb 	bl	80099dc <ft5336_gest_id>
 8009866:	4603      	mov	r3, r0
}
 8009868:	4618      	mov	r0, r3
 800986a:	3708      	adds	r7, #8
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	3318      	adds	r3, #24
 800987c:	2101      	movs	r1, #1
 800987e:	4618      	mov	r0, r3
 8009880:	f000 f941 	bl	8009b06 <ft5336_g_mode>
 8009884:	4603      	mov	r3, r0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3708      	adds	r7, #8
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b082      	sub	sp, #8
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	3318      	adds	r3, #24
 800989a:	2100      	movs	r1, #0
 800989c:	4618      	mov	r0, r3
 800989e:	f000 f932 	bl	8009b06 <ft5336_g_mode>
 80098a2:	4603      	mov	r3, r0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3708      	adds	r7, #8
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 80098b4:	2300      	movs	r3, #0
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	370c      	adds	r7, #12
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr

080098c2 <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 80098c2:	b480      	push	{r7}
 80098c4:	b083      	sub	sp, #12
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 80098ca:	2300      	movs	r3, #0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	3318      	adds	r3, #24
 80098e4:	f107 020b 	add.w	r2, r7, #11
 80098e8:	4611      	mov	r1, r2
 80098ea:	4618      	mov	r0, r3
 80098ec:	f000 f886 	bl	80099fc <ft5336_td_status>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d003      	beq.n	80098fe <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 80098f6:	f04f 33ff 	mov.w	r3, #4294967295
 80098fa:	60fb      	str	r3, [r7, #12]
 80098fc:	e007      	b.n	800990e <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 80098fe:	7afb      	ldrb	r3, [r7, #11]
 8009900:	2b05      	cmp	r3, #5
 8009902:	d902      	bls.n	800990a <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 8009904:	2300      	movs	r3, #0
 8009906:	60fb      	str	r3, [r7, #12]
 8009908:	e001      	b.n	800990e <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 800990a:	7afb      	ldrb	r3, [r7, #11]
 800990c:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800990e:	68fb      	ldr	r3, [r7, #12]
}
 8009910:	4618      	mov	r0, r3
 8009912:	3710      	adds	r7, #16
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8009918:	b590      	push	{r4, r7, lr}
 800991a:	b087      	sub	sp, #28
 800991c:	af00      	add	r7, sp, #0
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	607a      	str	r2, [r7, #4]
 8009922:	461a      	mov	r2, r3
 8009924:	460b      	mov	r3, r1
 8009926:	72fb      	strb	r3, [r7, #11]
 8009928:	4613      	mov	r3, r2
 800992a:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	691c      	ldr	r4, [r3, #16]
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	8918      	ldrh	r0, [r3, #8]
 8009938:	7afb      	ldrb	r3, [r7, #11]
 800993a:	b299      	uxth	r1, r3
 800993c:	893b      	ldrh	r3, [r7, #8]
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	47a0      	blx	r4
 8009942:	4603      	mov	r3, r0
}
 8009944:	4618      	mov	r0, r3
 8009946:	371c      	adds	r7, #28
 8009948:	46bd      	mov	sp, r7
 800994a:	bd90      	pop	{r4, r7, pc}

0800994c <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800994c:	b590      	push	{r4, r7, lr}
 800994e:	b087      	sub	sp, #28
 8009950:	af00      	add	r7, sp, #0
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	607a      	str	r2, [r7, #4]
 8009956:	461a      	mov	r2, r3
 8009958:	460b      	mov	r3, r1
 800995a:	72fb      	strb	r3, [r7, #11]
 800995c:	4613      	mov	r3, r2
 800995e:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	68dc      	ldr	r4, [r3, #12]
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	8918      	ldrh	r0, [r3, #8]
 800996c:	7afb      	ldrb	r3, [r7, #11]
 800996e:	b299      	uxth	r1, r3
 8009970:	893b      	ldrh	r3, [r7, #8]
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	47a0      	blx	r4
 8009976:	4603      	mov	r3, r0
}
 8009978:	4618      	mov	r0, r3
 800997a:	371c      	adds	r7, #28
 800997c:	46bd      	mov	sp, r7
 800997e:	bd90      	pop	{r4, r7, pc}

08009980 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8009980:	b590      	push	{r4, r7, lr}
 8009982:	b085      	sub	sp, #20
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	607a      	str	r2, [r7, #4]
 800998a:	461a      	mov	r2, r3
 800998c:	460b      	mov	r3, r1
 800998e:	72fb      	strb	r3, [r7, #11]
 8009990:	4613      	mov	r3, r2
 8009992:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	685c      	ldr	r4, [r3, #4]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	6898      	ldr	r0, [r3, #8]
 800999c:	893b      	ldrh	r3, [r7, #8]
 800999e:	7af9      	ldrb	r1, [r7, #11]
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	47a0      	blx	r4
 80099a4:	4603      	mov	r3, r0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3714      	adds	r7, #20
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd90      	pop	{r4, r7, pc}

080099ae <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 80099ae:	b590      	push	{r4, r7, lr}
 80099b0:	b085      	sub	sp, #20
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	60f8      	str	r0, [r7, #12]
 80099b6:	607a      	str	r2, [r7, #4]
 80099b8:	461a      	mov	r2, r3
 80099ba:	460b      	mov	r3, r1
 80099bc:	72fb      	strb	r3, [r7, #11]
 80099be:	4613      	mov	r3, r2
 80099c0:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681c      	ldr	r4, [r3, #0]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6898      	ldr	r0, [r3, #8]
 80099ca:	893b      	ldrh	r3, [r7, #8]
 80099cc:	7af9      	ldrb	r1, [r7, #11]
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	47a0      	blx	r4
 80099d2:	4603      	mov	r3, r0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3714      	adds	r7, #20
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd90      	pop	{r4, r7, pc}

080099dc <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 80099e6:	2301      	movs	r3, #1
 80099e8:	683a      	ldr	r2, [r7, #0]
 80099ea:	2101      	movs	r1, #1
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f7ff ffc7 	bl	8009980 <ft5336_read_reg>
 80099f2:	4603      	mov	r3, r0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3708      	adds	r7, #8
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8009a06:	2301      	movs	r3, #1
 8009a08:	683a      	ldr	r2, [r7, #0]
 8009a0a:	2102      	movs	r1, #2
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f7ff ffb7 	bl	8009980 <ft5336_read_reg>
 8009a12:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d10a      	bne.n	8009a30 <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	f003 030f 	and.w	r3, r3, #15
 8009a22:	b2da      	uxtb	r2, r3
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	781a      	ldrb	r2, [r3, #0]
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8009a30:	68fb      	ldr	r3, [r7, #12]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b082      	sub	sp, #8
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
 8009a42:	460b      	mov	r3, r1
 8009a44:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8009a46:	1cfa      	adds	r2, r7, #3
 8009a48:	2301      	movs	r3, #1
 8009a4a:	2191      	movs	r1, #145	; 0x91
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f7ff ffae 	bl	80099ae <ft5336_write_reg>
 8009a52:	4603      	mov	r3, r0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	460b      	mov	r3, r1
 8009a66:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8009a68:	1cfa      	adds	r2, r7, #3
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	2192      	movs	r1, #146	; 0x92
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f7ff ff9d 	bl	80099ae <ft5336_write_reg>
 8009a74:	4603      	mov	r3, r0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3708      	adds	r7, #8
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b082      	sub	sp, #8
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
 8009a86:	460b      	mov	r3, r1
 8009a88:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8009a8a:	1cfa      	adds	r2, r7, #3
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	2193      	movs	r1, #147	; 0x93
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f7ff ff8c 	bl	80099ae <ft5336_write_reg>
 8009a96:	4603      	mov	r3, r0
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3708      	adds	r7, #8
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8009aac:	1cfa      	adds	r2, r7, #3
 8009aae:	2301      	movs	r3, #1
 8009ab0:	2194      	movs	r1, #148	; 0x94
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f7ff ff7b 	bl	80099ae <ft5336_write_reg>
 8009ab8:	4603      	mov	r3, r0
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3708      	adds	r7, #8
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}

08009ac2 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b082      	sub	sp, #8
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
 8009aca:	460b      	mov	r3, r1
 8009acc:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8009ace:	1cfa      	adds	r2, r7, #3
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	2195      	movs	r1, #149	; 0x95
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f7ff ff6a 	bl	80099ae <ft5336_write_reg>
 8009ada:	4603      	mov	r3, r0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3708      	adds	r7, #8
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	460b      	mov	r3, r1
 8009aee:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8009af0:	1cfa      	adds	r2, r7, #3
 8009af2:	2301      	movs	r3, #1
 8009af4:	2196      	movs	r1, #150	; 0x96
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f7ff ff59 	bl	80099ae <ft5336_write_reg>
 8009afc:	4603      	mov	r3, r0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3708      	adds	r7, #8
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b082      	sub	sp, #8
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
 8009b0e:	460b      	mov	r3, r1
 8009b10:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8009b12:	1cfa      	adds	r2, r7, #3
 8009b14:	2301      	movs	r3, #1
 8009b16:	21a4      	movs	r1, #164	; 0xa4
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f7ff ff48 	bl	80099ae <ft5336_write_reg>
 8009b1e:	4603      	mov	r3, r0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3708      	adds	r7, #8
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8009b32:	2301      	movs	r3, #1
 8009b34:	683a      	ldr	r2, [r7, #0]
 8009b36:	21a8      	movs	r1, #168	; 0xa8
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f7ff ff21 	bl	8009980 <ft5336_read_reg>
 8009b3e:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d107      	bne.n	8009b56 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	781a      	ldrb	r2, [r3, #0]
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	781a      	ldrb	r2, [r3, #0]
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8009b56:	68fb      	ldr	r3, [r7, #12]
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3710      	adds	r7, #16
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <MT25TL01G_GetFlashInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo pointer on the configuration structure
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009b6e:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009b76:	605a      	str	r2, [r3, #4]
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b7e:	60da      	str	r2, [r3, #12]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009b88:	fbb2 f2f3 	udiv	r2, r2, r3
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	609a      	str	r2, [r3, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009b98:	fbb2 f2f3 	udiv	r2, r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	611a      	str	r2, [r3, #16]
  return MT25TL01G_OK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	370c      	adds	r7, #12
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr

08009bae <MT25TL01G_Enter4BytesAddressMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_Enter4BytesAddressMode(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b090      	sub	sp, #64	; 0x40
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009bba:	78fb      	ldrb	r3, [r7, #3]
 8009bbc:	2b03      	cmp	r3, #3
 8009bbe:	d102      	bne.n	8009bc6 <MT25TL01G_Enter4BytesAddressMode+0x18>
 8009bc0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009bc4:	e001      	b.n	8009bca <MT25TL01G_Enter4BytesAddressMode+0x1c>
 8009bc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bca:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8009bcc:	23b7      	movs	r3, #183	; 0xb7
 8009bce:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8009be0:	2300      	movs	r3, #0
 8009be2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009be4:	2300      	movs	r3, #0
 8009be6:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009be8:	2300      	movs	r3, #0
 8009bea:	63fb      	str	r3, [r7, #60]	; 0x3c

  /*write enable */
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 8009bec:	78fb      	ldrb	r3, [r7, #3]
 8009bee:	4619      	mov	r1, r3
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 f860 	bl	8009cb6 <MT25TL01G_WriteEnable>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d002      	beq.n	8009c02 <MT25TL01G_Enter4BytesAddressMode+0x54>
  {
    return MT25TL01G_ERROR_COMMAND;
 8009bfc:	f06f 0301 	mvn.w	r3, #1
 8009c00:	e019      	b.n	8009c36 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }
  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009c02:	f107 0308 	add.w	r3, r7, #8
 8009c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f004 fd2d 	bl	800e66c <HAL_QSPI_Command>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d002      	beq.n	8009c1e <MT25TL01G_Enter4BytesAddressMode+0x70>
  {
    return MT25TL01G_ERROR_COMMAND;
 8009c18:	f06f 0301 	mvn.w	r3, #1
 8009c1c:	e00b      	b.n	8009c36 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8009c1e:	78fb      	ldrb	r3, [r7, #3]
 8009c20:	4619      	mov	r1, r3
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 f80b 	bl	8009c3e <MT25TL01G_AutoPollingMemReady>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d002      	beq.n	8009c34 <MT25TL01G_Enter4BytesAddressMode+0x86>
  {
    return MT25TL01G_ERROR_COMMAND;
 8009c2e:	f06f 0301 	mvn.w	r3, #1
 8009c32:	e000      	b.n	8009c36 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  return MT25TL01G_OK;
 8009c34:	2300      	movs	r3, #0
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3740      	adds	r7, #64	; 0x40
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b096      	sub	sp, #88	; 0x58
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
 8009c46:	460b      	mov	r3, r1
 8009c48:	70fb      	strb	r3, [r7, #3]

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8009c4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009c4e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8009c50:	2305      	movs	r3, #5
 8009c52:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009c54:	2300      	movs	r3, #0
 8009c56:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8009c5c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8009c60:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 2;
 8009c62:	2302      	movs	r3, #2
 8009c64:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8009c66:	2300      	movs	r3, #0
 8009c68:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8009c72:	2300      	movs	r3, #0
 8009c74:	60bb      	str	r3, [r7, #8]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8009c76:	2300      	movs	r3, #0
 8009c78:	61bb      	str	r3, [r7, #24]
  s_config.Interval        = 0x10;
 8009c7a:	2310      	movs	r3, #16
 8009c7c:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8009c7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009c82:	61fb      	str	r3, [r7, #28]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8009c84:	f240 1301 	movw	r3, #257	; 0x101
 8009c88:	60fb      	str	r3, [r7, #12]
  s_config.StatusBytesSize = 2;
 8009c8a:	2302      	movs	r3, #2
 8009c8c:	617b      	str	r3, [r7, #20]

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009c8e:	f107 0208 	add.w	r2, r7, #8
 8009c92:	f107 0120 	add.w	r1, r7, #32
 8009c96:	f241 3388 	movw	r3, #5000	; 0x1388
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f004 fe73 	bl	800e986 <HAL_QSPI_AutoPolling>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d002      	beq.n	8009cac <MT25TL01G_AutoPollingMemReady+0x6e>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 8009ca6:	f06f 0304 	mvn.w	r3, #4
 8009caa:	e000      	b.n	8009cae <MT25TL01G_AutoPollingMemReady+0x70>
  }

  return MT25TL01G_OK;
 8009cac:	2300      	movs	r3, #0

}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3758      	adds	r7, #88	; 0x58
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}

08009cb6 <MT25TL01G_WriteEnable>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_WriteEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b096      	sub	sp, #88	; 0x58
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009cc2:	78fb      	ldrb	r3, [r7, #3]
 8009cc4:	2b03      	cmp	r3, #3
 8009cc6:	d102      	bne.n	8009cce <MT25TL01G_WriteEnable+0x18>
 8009cc8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009ccc:	e001      	b.n	8009cd2 <MT25TL01G_WriteEnable+0x1c>
 8009cce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cd2:	63bb      	str	r3, [r7, #56]	; 0x38

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8009cd4:	2306      	movs	r3, #6
 8009cd6:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009cec:	2300      	movs	r3, #0
 8009cee:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009cf4:	f107 0320 	add.w	r3, r7, #32
 8009cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f004 fcb4 	bl	800e66c <HAL_QSPI_Command>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d002      	beq.n	8009d10 <MT25TL01G_WriteEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8009d0a:	f06f 0301 	mvn.w	r3, #1
 8009d0e:	e029      	b.n	8009d64 <MT25TL01G_WriteEnable+0xae>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8009d10:	f240 2302 	movw	r3, #514	; 0x202
 8009d14:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8009d16:	f240 2302 	movw	r3, #514	; 0x202
 8009d1a:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 2;
 8009d20:	2302      	movs	r3, #2
 8009d22:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8009d24:	2310      	movs	r3, #16
 8009d26:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8009d28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009d2c:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8009d2e:	2305      	movs	r3, #5
 8009d30:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8009d32:	78fb      	ldrb	r3, [r7, #3]
 8009d34:	2b03      	cmp	r3, #3
 8009d36:	d102      	bne.n	8009d3e <MT25TL01G_WriteEnable+0x88>
 8009d38:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8009d3c:	e001      	b.n	8009d42 <MT25TL01G_WriteEnable+0x8c>
 8009d3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d42:	647b      	str	r3, [r7, #68]	; 0x44


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009d44:	f107 0208 	add.w	r2, r7, #8
 8009d48:	f107 0120 	add.w	r1, r7, #32
 8009d4c:	f241 3388 	movw	r3, #5000	; 0x1388
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f004 fe18 	bl	800e986 <HAL_QSPI_AutoPolling>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d002      	beq.n	8009d62 <MT25TL01G_WriteEnable+0xac>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 8009d5c:	f06f 0304 	mvn.w	r3, #4
 8009d60:	e000      	b.n	8009d64 <MT25TL01G_WriteEnable+0xae>
  }

  return MT25TL01G_OK;
 8009d62:	2300      	movs	r3, #0
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3758      	adds	r7, #88	; 0x58
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b090      	sub	sp, #64	; 0x40
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009d74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d78:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8009d7a:	2335      	movs	r3, #53	; 0x35
 8009d7c:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009d82:	2300      	movs	r3, #0
 8009d84:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8009d86:	2300      	movs	r3, #0
 8009d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009d92:	2300      	movs	r3, #0
 8009d94:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009d96:	2300      	movs	r3, #0
 8009d98:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009d9a:	f107 0308 	add.w	r3, r7, #8
 8009d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009da2:	4619      	mov	r1, r3
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f004 fc61 	bl	800e66c <HAL_QSPI_Command>
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d002      	beq.n	8009db6 <MT25TL01G_EnterQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8009db0:	f06f 0301 	mvn.w	r3, #1
 8009db4:	e000      	b.n	8009db8 <MT25TL01G_EnterQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3740      	adds	r7, #64	; 0x40
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b090      	sub	sp, #64	; 0x40
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009dc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009dcc:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8009dce:	23f5      	movs	r3, #245	; 0xf5
 8009dd0:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8009dde:	2300      	movs	r3, #0
 8009de0:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8009de2:	2300      	movs	r3, #0
 8009de4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009de6:	2300      	movs	r3, #0
 8009de8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009dea:	2300      	movs	r3, #0
 8009dec:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009dee:	f107 0308 	add.w	r3, r7, #8
 8009df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009df6:	4619      	mov	r1, r3
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f004 fc37 	bl	800e66c <HAL_QSPI_Command>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d002      	beq.n	8009e0a <MT25TL01G_ExitQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8009e04:	f06f 0301 	mvn.w	r3, #1
 8009e08:	e000      	b.n	8009e0c <MT25TL01G_ExitQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 8009e0a:	2300      	movs	r3, #0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3740      	adds	r7, #64	; 0x40
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b092      	sub	sp, #72	; 0x48
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8009e20:	78fb      	ldrb	r3, [r7, #3]
 8009e22:	2b03      	cmp	r3, #3
 8009e24:	d83a      	bhi.n	8009e9c <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
 8009e26:	a201      	add	r2, pc, #4	; (adr r2, 8009e2c <MT25TL01G_EnableMemoryMappedModeDTR+0x18>)
 8009e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e2c:	08009e3d 	.word	0x08009e3d
 8009e30:	08009e55 	.word	0x08009e55
 8009e34:	08009e6d 	.word	0x08009e6d
 8009e38:	08009e85 	.word	0x08009e85
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009e3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e40:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8009e42:	230e      	movs	r3, #14
 8009e44:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8009e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8009e4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009e50:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8009e52:	e023      	b.n	8009e9c <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-1-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009e54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e58:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8009e5a:	233d      	movs	r3, #61	; 0x3d
 8009e5c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8009e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8009e64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009e68:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8009e6a:	e017      	b.n	8009e9c <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009e6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e70:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8009e72:	23ee      	movs	r3, #238	; 0xee
 8009e74:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8009e76:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8009e7c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8009e80:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8009e82:	e00b      	b.n	8009e9c <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8009e84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009e88:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8009e8a:	23ed      	movs	r3, #237	; 0xed
 8009e8c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8009e8e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009e92:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8009e94:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8009e98:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8009e9a:	bf00      	nop
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8009e9c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009ea0:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8009ea6:	2308      	movs	r3, #8
 8009ea8:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 8009eaa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009eae:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8009eb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009eb4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8009ec2:	f107 0208 	add.w	r2, r7, #8
 8009ec6:	f107 0310 	add.w	r3, r7, #16
 8009eca:	4619      	mov	r1, r3
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f004 fdd1 	bl	800ea74 <HAL_QSPI_MemoryMapped>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d002      	beq.n	8009ede <MT25TL01G_EnableMemoryMappedModeDTR+0xca>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 8009ed8:	f06f 0305 	mvn.w	r3, #5
 8009edc:	e000      	b.n	8009ee0 <MT25TL01G_EnableMemoryMappedModeDTR+0xcc>
  }

  return MT25TL01G_OK;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3748      	adds	r7, #72	; 0x48
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b092      	sub	sp, #72	; 0x48
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8009ef4:	78fb      	ldrb	r3, [r7, #3]
 8009ef6:	2b03      	cmp	r3, #3
 8009ef8:	d83a      	bhi.n	8009f70 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
 8009efa:	a201      	add	r2, pc, #4	; (adr r2, 8009f00 <MT25TL01G_EnableMemoryMappedModeSTR+0x18>)
 8009efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f00:	08009f11 	.word	0x08009f11
 8009f04:	08009f29 	.word	0x08009f29
 8009f08:	08009f41 	.word	0x08009f41
 8009f0c:	08009f59 	.word	0x08009f59
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009f10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f14:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8009f16:	230c      	movs	r3, #12
 8009f18:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8009f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8009f20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009f24:	637b      	str	r3, [r7, #52]	; 0x34


    break;
 8009f26:	e023      	b.n	8009f70 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-2-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009f28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f2c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8009f2e:	23bc      	movs	r3, #188	; 0xbc
 8009f30:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 8009f32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8009f38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f3c:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8009f3e:	e017      	b.n	8009f70 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009f40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f44:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8009f46:	23ec      	movs	r3, #236	; 0xec
 8009f48:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8009f4a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8009f50:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8009f54:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8009f56:	e00b      	b.n	8009f70 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8009f58:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009f5c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8009f5e:	23eb      	movs	r3, #235	; 0xeb
 8009f60:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8009f62:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009f66:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8009f68:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8009f6c:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8009f6e:	bf00      	nop

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8009f70:	2308      	movs	r3, #8
 8009f72:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8009f74:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009f78:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009f82:	2300      	movs	r3, #0
 8009f84:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009f86:	2300      	movs	r3, #0
 8009f88:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8009f92:	f107 0208 	add.w	r2, r7, #8
 8009f96:	f107 0310 	add.w	r3, r7, #16
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f004 fd69 	bl	800ea74 <HAL_QSPI_MemoryMapped>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d002      	beq.n	8009fae <MT25TL01G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 8009fa8:	f06f 0305 	mvn.w	r3, #5
 8009fac:	e000      	b.n	8009fb0 <MT25TL01G_EnableMemoryMappedModeSTR+0xc8>
  }

  return MT25TL01G_OK;
 8009fae:	2300      	movs	r3, #0
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3748      	adds	r7, #72	; 0x48
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <MT25TL01G_ResetEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b090      	sub	sp, #64	; 0x40
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009fc4:	78fb      	ldrb	r3, [r7, #3]
 8009fc6:	2b03      	cmp	r3, #3
 8009fc8:	d102      	bne.n	8009fd0 <MT25TL01G_ResetEnable+0x18>
 8009fca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009fce:	e001      	b.n	8009fd4 <MT25TL01G_ResetEnable+0x1c>
 8009fd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fd4:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8009fd6:	2366      	movs	r3, #102	; 0x66
 8009fd8:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8009fea:	2300      	movs	r3, #0
 8009fec:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009ff6:	f107 0308 	add.w	r3, r7, #8
 8009ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ffe:	4619      	mov	r1, r3
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f004 fb33 	bl	800e66c <HAL_QSPI_Command>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d002      	beq.n	800a012 <MT25TL01G_ResetEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800a00c:	f06f 0301 	mvn.w	r3, #1
 800a010:	e000      	b.n	800a014 <MT25TL01G_ResetEnable+0x5c>
  }

  return MT25TL01G_OK;
 800a012:	2300      	movs	r3, #0
}
 800a014:	4618      	mov	r0, r3
 800a016:	3740      	adds	r7, #64	; 0x40
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <MT25TL01G_ResetMemory>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b090      	sub	sp, #64	; 0x40
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	460b      	mov	r3, r1
 800a026:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800a028:	78fb      	ldrb	r3, [r7, #3]
 800a02a:	2b03      	cmp	r3, #3
 800a02c:	d102      	bne.n	800a034 <MT25TL01G_ResetMemory+0x18>
 800a02e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a032:	e001      	b.n	800a038 <MT25TL01G_ResetMemory+0x1c>
 800a034:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a038:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 800a03a:	2399      	movs	r3, #153	; 0x99
 800a03c:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800a03e:	2300      	movs	r3, #0
 800a040:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a042:	2300      	movs	r3, #0
 800a044:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800a046:	2300      	movs	r3, #0
 800a048:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800a04a:	2300      	movs	r3, #0
 800a04c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800a04e:	2300      	movs	r3, #0
 800a050:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800a052:	2300      	movs	r3, #0
 800a054:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a056:	2300      	movs	r3, #0
 800a058:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a05a:	f107 0308 	add.w	r3, r7, #8
 800a05e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a062:	4619      	mov	r1, r3
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f004 fb01 	bl	800e66c <HAL_QSPI_Command>
 800a06a:	4603      	mov	r3, r0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d002      	beq.n	800a076 <MT25TL01G_ResetMemory+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800a070:	f06f 0301 	mvn.w	r3, #1
 800a074:	e000      	b.n	800a078 <MT25TL01G_ResetMemory+0x5c>
  }

  return MT25TL01G_OK;
 800a076:	2300      	movs	r3, #0
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3740      	adds	r7, #64	; 0x40
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 800a08a:	f04f 33ff 	mov.w	r3, #4294967295
 800a08e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4619      	mov	r1, r3
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 f832 	bl	800a100 <MT48LC4M32B2_ClockEnable>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d128      	bne.n	800a0f4 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 800a0a2:	2001      	movs	r0, #1
 800a0a4:	f000 f8e2 	bl	800a26c <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 f84a 	bl	800a148 <MT48LC4M32B2_Precharge>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d11c      	bne.n	800a0f4 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	6819      	ldr	r1, [r3, #0]
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 f897 	bl	800a1f8 <MT48LC4M32B2_RefreshMode>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d111      	bne.n	800a0f4 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 800a0d0:	6839      	ldr	r1, [r7, #0]
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 f85c 	bl	800a190 <MT48LC4M32B2_ModeRegConfig>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d10a      	bne.n	800a0f4 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f000 f8ad 	bl	800a244 <MT48LC4M32B2_RefreshRate>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d101      	bne.n	800a0f4 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
	...

0800a100 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b082      	sub	sp, #8
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 800a10a:	4b0e      	ldr	r3, [pc, #56]	; (800a144 <MT48LC4M32B2_ClockEnable+0x44>)
 800a10c:	2201      	movs	r2, #1
 800a10e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800a110:	4a0c      	ldr	r2, [pc, #48]	; (800a144 <MT48LC4M32B2_ClockEnable+0x44>)
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800a116:	4b0b      	ldr	r3, [pc, #44]	; (800a144 <MT48LC4M32B2_ClockEnable+0x44>)
 800a118:	2201      	movs	r2, #1
 800a11a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800a11c:	4b09      	ldr	r3, [pc, #36]	; (800a144 <MT48LC4M32B2_ClockEnable+0x44>)
 800a11e:	2200      	movs	r2, #0
 800a120:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800a122:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a126:	4907      	ldr	r1, [pc, #28]	; (800a144 <MT48LC4M32B2_ClockEnable+0x44>)
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f007 f8bb 	bl	80112a4 <HAL_SDRAM_SendCommand>
 800a12e:	4603      	mov	r3, r0
 800a130:	2b00      	cmp	r3, #0
 800a132:	d002      	beq.n	800a13a <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800a134:	f04f 33ff 	mov.w	r3, #4294967295
 800a138:	e000      	b.n	800a13c <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800a13a:	2300      	movs	r3, #0
  }
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	2400a2a0 	.word	0x2400a2a0

0800a148 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 800a152:	4b0e      	ldr	r3, [pc, #56]	; (800a18c <MT48LC4M32B2_Precharge+0x44>)
 800a154:	2202      	movs	r2, #2
 800a156:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800a158:	4a0c      	ldr	r2, [pc, #48]	; (800a18c <MT48LC4M32B2_Precharge+0x44>)
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800a15e:	4b0b      	ldr	r3, [pc, #44]	; (800a18c <MT48LC4M32B2_Precharge+0x44>)
 800a160:	2201      	movs	r2, #1
 800a162:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800a164:	4b09      	ldr	r3, [pc, #36]	; (800a18c <MT48LC4M32B2_Precharge+0x44>)
 800a166:	2200      	movs	r2, #0
 800a168:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800a16a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a16e:	4907      	ldr	r1, [pc, #28]	; (800a18c <MT48LC4M32B2_Precharge+0x44>)
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f007 f897 	bl	80112a4 <HAL_SDRAM_SendCommand>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d002      	beq.n	800a182 <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800a17c:	f04f 33ff 	mov.w	r3, #4294967295
 800a180:	e000      	b.n	800a184 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800a182:	2300      	movs	r3, #0
  }
}
 800a184:	4618      	mov	r0, r3
 800a186:	3708      	adds	r7, #8
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	2400a2a0 	.word	0x2400a2a0

0800a190 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800a1a2:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 800a1a8:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 800a1ae:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 800a1b8:	4b0e      	ldr	r3, [pc, #56]	; (800a1f4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800a1ba:	2204      	movs	r2, #4
 800a1bc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a0c      	ldr	r2, [pc, #48]	; (800a1f4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800a1c4:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800a1c6:	4b0b      	ldr	r3, [pc, #44]	; (800a1f4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800a1cc:	4a09      	ldr	r2, [pc, #36]	; (800a1f4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800a1d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a1d6:	4907      	ldr	r1, [pc, #28]	; (800a1f4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f007 f863 	bl	80112a4 <HAL_SDRAM_SendCommand>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d002      	beq.n	800a1ea <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 800a1e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a1e8:	e000      	b.n	800a1ec <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800a1ea:	2300      	movs	r3, #0
  }
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3710      	adds	r7, #16
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}
 800a1f4:	2400a2a0 	.word	0x2400a2a0

0800a1f8 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b084      	sub	sp, #16
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	60b9      	str	r1, [r7, #8]
 800a202:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 800a204:	4a0e      	ldr	r2, [pc, #56]	; (800a240 <MT48LC4M32B2_RefreshMode+0x48>)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 800a20a:	4a0d      	ldr	r2, [pc, #52]	; (800a240 <MT48LC4M32B2_RefreshMode+0x48>)
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 800a210:	4b0b      	ldr	r3, [pc, #44]	; (800a240 <MT48LC4M32B2_RefreshMode+0x48>)
 800a212:	2208      	movs	r2, #8
 800a214:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800a216:	4b0a      	ldr	r3, [pc, #40]	; (800a240 <MT48LC4M32B2_RefreshMode+0x48>)
 800a218:	2200      	movs	r2, #0
 800a21a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800a21c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a220:	4907      	ldr	r1, [pc, #28]	; (800a240 <MT48LC4M32B2_RefreshMode+0x48>)
 800a222:	68f8      	ldr	r0, [r7, #12]
 800a224:	f007 f83e 	bl	80112a4 <HAL_SDRAM_SendCommand>
 800a228:	4603      	mov	r3, r0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d002      	beq.n	800a234 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 800a22e:	f04f 33ff 	mov.w	r3, #4294967295
 800a232:	e000      	b.n	800a236 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800a234:	2300      	movs	r3, #0
  }
}
 800a236:	4618      	mov	r0, r3
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	2400a2a0 	.word	0x2400a2a0

0800a244 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b082      	sub	sp, #8
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800a24e:	6839      	ldr	r1, [r7, #0]
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f007 f85c 	bl	801130e <HAL_SDRAM_ProgramRefreshRate>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d002      	beq.n	800a262 <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 800a25c:	f04f 33ff 	mov.w	r3, #4294967295
 800a260:	e000      	b.n	800a264 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800a262:	2300      	movs	r3, #0
  }
}
 800a264:	4618      	mov	r0, r3
 800a266:	3708      	adds	r7, #8
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 800a274:	f001 fcfc 	bl	800bc70 <HAL_GetTick>
 800a278:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800a27a:	bf00      	nop
 800a27c:	f001 fcf8 	bl	800bc70 <HAL_GetTick>
 800a280:	4602      	mov	r2, r0
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	1ad3      	subs	r3, r2, r3
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	429a      	cmp	r2, r3
 800a28a:	d8f7      	bhi.n	800a27c <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 800a28c:	2300      	movs	r3, #0
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3710      	adds	r7, #16
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
	...

0800a298 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800a2a2:	4b16      	ldr	r3, [pc, #88]	; (800a2fc <BSP_I2C4_Init+0x64>)
 800a2a4:	4a16      	ldr	r2, [pc, #88]	; (800a300 <BSP_I2C4_Init+0x68>)
 800a2a6:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 800a2a8:	4b16      	ldr	r3, [pc, #88]	; (800a304 <BSP_I2C4_Init+0x6c>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d11f      	bne.n	800a2f0 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 800a2b0:	4b14      	ldr	r3, [pc, #80]	; (800a304 <BSP_I2C4_Init+0x6c>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	4a13      	ldr	r2, [pc, #76]	; (800a304 <BSP_I2C4_Init+0x6c>)
 800a2b8:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800a2ba:	4810      	ldr	r0, [pc, #64]	; (800a2fc <BSP_I2C4_Init+0x64>)
 800a2bc:	f002 fefa 	bl	800d0b4 <HAL_I2C_GetState>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d114      	bne.n	800a2f0 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800a2c6:	480d      	ldr	r0, [pc, #52]	; (800a2fc <BSP_I2C4_Init+0x64>)
 800a2c8:	f000 fb60 	bl	800a98c <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800a2cc:	f005 fe90 	bl	800fff0 <HAL_RCC_GetPCLK2Freq>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	490d      	ldr	r1, [pc, #52]	; (800a308 <BSP_I2C4_Init+0x70>)
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f000 f8e3 	bl	800a4a0 <I2C_GetTiming>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	4619      	mov	r1, r3
 800a2de:	4807      	ldr	r0, [pc, #28]	; (800a2fc <BSP_I2C4_Init+0x64>)
 800a2e0:	f000 f838 	bl	800a354 <MX_I2C4_Init>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d002      	beq.n	800a2f0 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800a2ea:	f06f 0307 	mvn.w	r3, #7
 800a2ee:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 800a2f0:	687b      	ldr	r3, [r7, #4]
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3708      	adds	r7, #8
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	2400acb8 	.word	0x2400acb8
 800a300:	58001c00 	.word	0x58001c00
 800a304:	2400a2b0 	.word	0x2400a2b0
 800a308:	000186a0 	.word	0x000186a0

0800a30c <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800a312:	2300      	movs	r3, #0
 800a314:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800a316:	4b0d      	ldr	r3, [pc, #52]	; (800a34c <BSP_I2C4_DeInit+0x40>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	3b01      	subs	r3, #1
 800a31c:	4a0b      	ldr	r2, [pc, #44]	; (800a34c <BSP_I2C4_DeInit+0x40>)
 800a31e:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 800a320:	4b0a      	ldr	r3, [pc, #40]	; (800a34c <BSP_I2C4_DeInit+0x40>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d10b      	bne.n	800a340 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 800a328:	4809      	ldr	r0, [pc, #36]	; (800a350 <BSP_I2C4_DeInit+0x44>)
 800a32a:	f000 fb9b 	bl	800aa64 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800a32e:	4808      	ldr	r0, [pc, #32]	; (800a350 <BSP_I2C4_DeInit+0x44>)
 800a330:	f002 fc4e 	bl	800cbd0 <HAL_I2C_DeInit>
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d002      	beq.n	800a340 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800a33a:	f06f 0307 	mvn.w	r3, #7
 800a33e:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800a340:	687b      	ldr	r3, [r7, #4]
}
 800a342:	4618      	mov	r0, r3
 800a344:	3708      	adds	r7, #8
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	2400a2b0 	.word	0x2400a2b0
 800a350:	2400acb8 	.word	0x2400acb8

0800a354 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a35e:	2300      	movs	r3, #0
 800a360:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	683a      	ldr	r2, [r7, #0]
 800a366:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2201      	movs	r2, #1
 800a372:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2200      	movs	r2, #0
 800a378:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2200      	movs	r2, #0
 800a37e:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2200      	movs	r2, #0
 800a390:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f002 fb8c 	bl	800cab0 <HAL_I2C_Init>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d002      	beq.n	800a3a4 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	73fb      	strb	r3, [r7, #15]
 800a3a2:	e014      	b.n	800a3ce <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800a3a8:	68b9      	ldr	r1, [r7, #8]
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f003 f942 	bl	800d634 <HAL_I2CEx_ConfigAnalogFilter>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d002      	beq.n	800a3bc <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	73fb      	strb	r3, [r7, #15]
 800a3ba:	e008      	b.n	800a3ce <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800a3bc:	2100      	movs	r1, #0
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f003 f983 	bl	800d6ca <HAL_I2CEx_ConfigDigitalFilter>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d001      	beq.n	800a3ce <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800a3ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3710      	adds	r7, #16
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b088      	sub	sp, #32
 800a3dc:	af02      	add	r7, sp, #8
 800a3de:	60ba      	str	r2, [r7, #8]
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	81fb      	strh	r3, [r7, #14]
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	81bb      	strh	r3, [r7, #12]
 800a3ea:	4613      	mov	r3, r2
 800a3ec:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800a3ee:	89b9      	ldrh	r1, [r7, #12]
 800a3f0:	89f8      	ldrh	r0, [r7, #14]
 800a3f2:	88fb      	ldrh	r3, [r7, #6]
 800a3f4:	9300      	str	r3, [sp, #0]
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	f000 fb57 	bl	800aaac <I2C4_WriteReg>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	d102      	bne.n	800a40a <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800a404:	2300      	movs	r3, #0
 800a406:	617b      	str	r3, [r7, #20]
 800a408:	e00c      	b.n	800a424 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800a40a:	4809      	ldr	r0, [pc, #36]	; (800a430 <BSP_I2C4_WriteReg+0x58>)
 800a40c:	f002 fe60 	bl	800d0d0 <HAL_I2C_GetError>
 800a410:	4603      	mov	r3, r0
 800a412:	2b04      	cmp	r3, #4
 800a414:	d103      	bne.n	800a41e <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800a416:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800a41a:	617b      	str	r3, [r7, #20]
 800a41c:	e002      	b.n	800a424 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800a41e:	f06f 0303 	mvn.w	r3, #3
 800a422:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800a424:	697b      	ldr	r3, [r7, #20]
}
 800a426:	4618      	mov	r0, r3
 800a428:	3718      	adds	r7, #24
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	2400acb8 	.word	0x2400acb8

0800a434 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b088      	sub	sp, #32
 800a438:	af02      	add	r7, sp, #8
 800a43a:	60ba      	str	r2, [r7, #8]
 800a43c:	461a      	mov	r2, r3
 800a43e:	4603      	mov	r3, r0
 800a440:	81fb      	strh	r3, [r7, #14]
 800a442:	460b      	mov	r3, r1
 800a444:	81bb      	strh	r3, [r7, #12]
 800a446:	4613      	mov	r3, r2
 800a448:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800a44a:	89b9      	ldrh	r1, [r7, #12]
 800a44c:	89f8      	ldrh	r0, [r7, #14]
 800a44e:	88fb      	ldrh	r3, [r7, #6]
 800a450:	9300      	str	r3, [sp, #0]
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	2201      	movs	r2, #1
 800a456:	f000 fb4f 	bl	800aaf8 <I2C4_ReadReg>
 800a45a:	4603      	mov	r3, r0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d102      	bne.n	800a466 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800a460:	2300      	movs	r3, #0
 800a462:	617b      	str	r3, [r7, #20]
 800a464:	e00c      	b.n	800a480 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800a466:	4809      	ldr	r0, [pc, #36]	; (800a48c <BSP_I2C4_ReadReg+0x58>)
 800a468:	f002 fe32 	bl	800d0d0 <HAL_I2C_GetError>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b04      	cmp	r3, #4
 800a470:	d103      	bne.n	800a47a <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800a472:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800a476:	617b      	str	r3, [r7, #20]
 800a478:	e002      	b.n	800a480 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800a47a:	f06f 0303 	mvn.w	r3, #3
 800a47e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800a480:	697b      	ldr	r3, [r7, #20]
}
 800a482:	4618      	mov	r0, r3
 800a484:	3718      	adds	r7, #24
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
 800a48a:	bf00      	nop
 800a48c:	2400acb8 	.word	0x2400acb8

0800a490 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800a494:	f001 fbec 	bl	800bc70 <HAL_GetTick>
 800a498:	4603      	mov	r3, r0
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	bd80      	pop	{r7, pc}
	...

0800a4a0 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b086      	sub	sp, #24
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d06b      	beq.n	800a58c <I2C_GetTiming+0xec>
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d068      	beq.n	800a58c <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	613b      	str	r3, [r7, #16]
 800a4be:	e060      	b.n	800a582 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800a4c0:	4a35      	ldr	r2, [pc, #212]	; (800a598 <I2C_GetTiming+0xf8>)
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	212c      	movs	r1, #44	; 0x2c
 800a4c6:	fb01 f303 	mul.w	r3, r1, r3
 800a4ca:	4413      	add	r3, r2
 800a4cc:	3304      	adds	r3, #4
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	683a      	ldr	r2, [r7, #0]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d352      	bcc.n	800a57c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800a4d6:	4a30      	ldr	r2, [pc, #192]	; (800a598 <I2C_GetTiming+0xf8>)
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	212c      	movs	r1, #44	; 0x2c
 800a4dc:	fb01 f303 	mul.w	r3, r1, r3
 800a4e0:	4413      	add	r3, r2
 800a4e2:	3308      	adds	r3, #8
 800a4e4:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800a4e6:	683a      	ldr	r2, [r7, #0]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d847      	bhi.n	800a57c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800a4ec:	6939      	ldr	r1, [r7, #16]
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 f856 	bl	800a5a0 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800a4f4:	6939      	ldr	r1, [r7, #16]
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 f940 	bl	800a77c <I2C_Compute_SCLL_SCLH>
 800a4fc:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2b7f      	cmp	r3, #127	; 0x7f
 800a502:	d842      	bhi.n	800a58a <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800a504:	4925      	ldr	r1, [pc, #148]	; (800a59c <I2C_GetTiming+0xfc>)
 800a506:	68fa      	ldr	r2, [r7, #12]
 800a508:	4613      	mov	r3, r2
 800a50a:	009b      	lsls	r3, r3, #2
 800a50c:	4413      	add	r3, r2
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	440b      	add	r3, r1
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800a516:	4821      	ldr	r0, [pc, #132]	; (800a59c <I2C_GetTiming+0xfc>)
 800a518:	68fa      	ldr	r2, [r7, #12]
 800a51a:	4613      	mov	r3, r2
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	4413      	add	r3, r2
 800a520:	009b      	lsls	r3, r3, #2
 800a522:	4403      	add	r3, r0
 800a524:	3304      	adds	r3, #4
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	051b      	lsls	r3, r3, #20
 800a52a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800a52e:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800a530:	481a      	ldr	r0, [pc, #104]	; (800a59c <I2C_GetTiming+0xfc>)
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	4613      	mov	r3, r2
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	4413      	add	r3, r2
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	4403      	add	r3, r0
 800a53e:	3308      	adds	r3, #8
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	041b      	lsls	r3, r3, #16
 800a544:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800a548:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800a54a:	4814      	ldr	r0, [pc, #80]	; (800a59c <I2C_GetTiming+0xfc>)
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	4613      	mov	r3, r2
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	4413      	add	r3, r2
 800a554:	009b      	lsls	r3, r3, #2
 800a556:	4403      	add	r3, r0
 800a558:	330c      	adds	r3, #12
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	021b      	lsls	r3, r3, #8
 800a55e:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800a560:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800a562:	480e      	ldr	r0, [pc, #56]	; (800a59c <I2C_GetTiming+0xfc>)
 800a564:	68fa      	ldr	r2, [r7, #12]
 800a566:	4613      	mov	r3, r2
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	4413      	add	r3, r2
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	4403      	add	r3, r0
 800a570:	3310      	adds	r3, #16
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800a576:	430b      	orrs	r3, r1
 800a578:	617b      	str	r3, [r7, #20]
        }
        break;
 800a57a:	e006      	b.n	800a58a <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	3301      	adds	r3, #1
 800a580:	613b      	str	r3, [r7, #16]
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	2b02      	cmp	r3, #2
 800a586:	d99b      	bls.n	800a4c0 <I2C_GetTiming+0x20>
 800a588:	e000      	b.n	800a58c <I2C_GetTiming+0xec>
        break;
 800a58a:	bf00      	nop
      }
    }
  }

  return ret;
 800a58c:	697b      	ldr	r3, [r7, #20]
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3718      	adds	r7, #24
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	08024b04 	.word	0x08024b04
 800a59c:	2400a2b4 	.word	0x2400a2b4

0800a5a0 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b08f      	sub	sp, #60	; 0x3c
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800a5aa:	2310      	movs	r3, #16
 800a5ac:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	085a      	lsrs	r2, r3, #1
 800a5b2:	4b6e      	ldr	r3, [pc, #440]	; (800a76c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800a5b4:	4413      	add	r3, r2
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5bc:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800a5be:	2332      	movs	r3, #50	; 0x32
 800a5c0:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800a5c2:	f44f 7382 	mov.w	r3, #260	; 0x104
 800a5c6:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800a5c8:	4a69      	ldr	r2, [pc, #420]	; (800a770 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	212c      	movs	r1, #44	; 0x2c
 800a5ce:	fb01 f303 	mul.w	r3, r1, r3
 800a5d2:	4413      	add	r3, r2
 800a5d4:	3324      	adds	r3, #36	; 0x24
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4618      	mov	r0, r3
 800a5da:	4a65      	ldr	r2, [pc, #404]	; (800a770 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	212c      	movs	r1, #44	; 0x2c
 800a5e0:	fb01 f303 	mul.w	r3, r1, r3
 800a5e4:	4413      	add	r3, r2
 800a5e6:	330c      	adds	r3, #12
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800a5ec:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800a5ee:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800a5f0:	495f      	ldr	r1, [pc, #380]	; (800a770 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	202c      	movs	r0, #44	; 0x2c
 800a5f6:	fb00 f303 	mul.w	r3, r0, r3
 800a5fa:	440b      	add	r3, r1
 800a5fc:	3328      	adds	r3, #40	; 0x28
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	3303      	adds	r3, #3
 800a602:	69f9      	ldr	r1, [r7, #28]
 800a604:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800a608:	1ad3      	subs	r3, r2, r3
 800a60a:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800a60c:	4a58      	ldr	r2, [pc, #352]	; (800a770 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	212c      	movs	r1, #44	; 0x2c
 800a612:	fb01 f303 	mul.w	r3, r1, r3
 800a616:	4413      	add	r3, r2
 800a618:	3310      	adds	r3, #16
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4618      	mov	r0, r3
 800a61e:	4a54      	ldr	r2, [pc, #336]	; (800a770 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	212c      	movs	r1, #44	; 0x2c
 800a624:	fb01 f303 	mul.w	r3, r1, r3
 800a628:	4413      	add	r3, r2
 800a62a:	3320      	adds	r3, #32
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800a630:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800a632:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800a634:	494e      	ldr	r1, [pc, #312]	; (800a770 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	202c      	movs	r0, #44	; 0x2c
 800a63a:	fb00 f303 	mul.w	r3, r0, r3
 800a63e:	440b      	add	r3, r1
 800a640:	3328      	adds	r3, #40	; 0x28
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	3304      	adds	r3, #4
 800a646:	69f9      	ldr	r1, [r7, #28]
 800a648:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800a64c:	1ad3      	subs	r3, r2, r3
 800a64e:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800a650:	4a47      	ldr	r2, [pc, #284]	; (800a770 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	212c      	movs	r1, #44	; 0x2c
 800a656:	fb01 f303 	mul.w	r3, r1, r3
 800a65a:	4413      	add	r3, r2
 800a65c:	3320      	adds	r3, #32
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4618      	mov	r0, r3
 800a662:	4a43      	ldr	r2, [pc, #268]	; (800a770 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	212c      	movs	r1, #44	; 0x2c
 800a668:	fb01 f303 	mul.w	r3, r1, r3
 800a66c:	4413      	add	r3, r2
 800a66e:	3314      	adds	r3, #20
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4403      	add	r3, r0
 800a674:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800a676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a678:	2b00      	cmp	r3, #0
 800a67a:	dc01      	bgt.n	800a680 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800a67c:	2300      	movs	r3, #0
 800a67e:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 800a680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a682:	2b00      	cmp	r3, #0
 800a684:	dc01      	bgt.n	800a68a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800a686:	2300      	movs	r3, #0
 800a688:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800a68a:	2300      	movs	r3, #0
 800a68c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a68e:	e062      	b.n	800a756 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800a690:	2300      	movs	r3, #0
 800a692:	627b      	str	r3, [r7, #36]	; 0x24
 800a694:	e059      	b.n	800a74a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800a696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a698:	3301      	adds	r3, #1
 800a69a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a69c:	3201      	adds	r2, #1
 800a69e:	fb03 f202 	mul.w	r2, r3, r2
 800a6a2:	69fb      	ldr	r3, [r7, #28]
 800a6a4:	fb02 f303 	mul.w	r3, r2, r3
 800a6a8:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	68fa      	ldr	r2, [r7, #12]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d348      	bcc.n	800a744 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	623b      	str	r3, [r7, #32]
 800a6b6:	e042      	b.n	800a73e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800a6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	6a3a      	ldr	r2, [r7, #32]
 800a6be:	fb03 f202 	mul.w	r2, r3, r2
 800a6c2:	69fb      	ldr	r3, [r7, #28]
 800a6c4:	fb02 f303 	mul.w	r3, r2, r3
 800a6c8:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800a6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6cc:	68ba      	ldr	r2, [r7, #8]
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d332      	bcc.n	800a738 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800a6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d4:	68ba      	ldr	r2, [r7, #8]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d82e      	bhi.n	800a738 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800a6da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d02a      	beq.n	800a738 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800a6e2:	4b24      	ldr	r3, [pc, #144]	; (800a774 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	4924      	ldr	r1, [pc, #144]	; (800a778 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800a6e8:	4613      	mov	r3, r2
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	4413      	add	r3, r2
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	440b      	add	r3, r1
 800a6f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6f4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800a6f6:	4b1f      	ldr	r3, [pc, #124]	; (800a774 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	491f      	ldr	r1, [pc, #124]	; (800a778 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800a6fc:	4613      	mov	r3, r2
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	4413      	add	r3, r2
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	440b      	add	r3, r1
 800a706:	3304      	adds	r3, #4
 800a708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a70a:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800a70c:	4b19      	ldr	r3, [pc, #100]	; (800a774 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800a70e:	681a      	ldr	r2, [r3, #0]
 800a710:	4919      	ldr	r1, [pc, #100]	; (800a778 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800a712:	4613      	mov	r3, r2
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	4413      	add	r3, r2
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	440b      	add	r3, r1
 800a71c:	3308      	adds	r3, #8
 800a71e:	6a3a      	ldr	r2, [r7, #32]
 800a720:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800a722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a724:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 800a726:	4b13      	ldr	r3, [pc, #76]	; (800a774 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	3301      	adds	r3, #1
 800a72c:	4a11      	ldr	r2, [pc, #68]	; (800a774 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800a72e:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800a730:	4b10      	ldr	r3, [pc, #64]	; (800a774 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2b7f      	cmp	r3, #127	; 0x7f
 800a736:	d812      	bhi.n	800a75e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800a738:	6a3b      	ldr	r3, [r7, #32]
 800a73a:	3301      	adds	r3, #1
 800a73c:	623b      	str	r3, [r7, #32]
 800a73e:	6a3b      	ldr	r3, [r7, #32]
 800a740:	2b0f      	cmp	r3, #15
 800a742:	d9b9      	bls.n	800a6b8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800a744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a746:	3301      	adds	r3, #1
 800a748:	627b      	str	r3, [r7, #36]	; 0x24
 800a74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74c:	2b0f      	cmp	r3, #15
 800a74e:	d9a2      	bls.n	800a696 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800a750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a752:	3301      	adds	r3, #1
 800a754:	62bb      	str	r3, [r7, #40]	; 0x28
 800a756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a758:	2b0f      	cmp	r3, #15
 800a75a:	d999      	bls.n	800a690 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800a75c:	e000      	b.n	800a760 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800a75e:	bf00      	nop
          }
        }
      }
    }
  }
}
 800a760:	373c      	adds	r7, #60	; 0x3c
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr
 800a76a:	bf00      	nop
 800a76c:	3b9aca00 	.word	0x3b9aca00
 800a770:	08024b04 	.word	0x08024b04
 800a774:	2400acb4 	.word	0x2400acb4
 800a778:	2400a2b4 	.word	0x2400a2b4

0800a77c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b093      	sub	sp, #76	; 0x4c
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800a786:	f04f 33ff 	mov.w	r3, #4294967295
 800a78a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	085a      	lsrs	r2, r3, #1
 800a790:	4b7a      	ldr	r3, [pc, #488]	; (800a97c <I2C_Compute_SCLL_SCLH+0x200>)
 800a792:	4413      	add	r3, r2
 800a794:	687a      	ldr	r2, [r7, #4]
 800a796:	fbb3 f3f2 	udiv	r3, r3, r2
 800a79a:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 800a79c:	4a78      	ldr	r2, [pc, #480]	; (800a980 <I2C_Compute_SCLL_SCLH+0x204>)
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	212c      	movs	r1, #44	; 0x2c
 800a7a2:	fb01 f303 	mul.w	r3, r1, r3
 800a7a6:	4413      	add	r3, r2
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	085a      	lsrs	r2, r3, #1
 800a7ac:	4b73      	ldr	r3, [pc, #460]	; (800a97c <I2C_Compute_SCLL_SCLH+0x200>)
 800a7ae:	4413      	add	r3, r2
 800a7b0:	4973      	ldr	r1, [pc, #460]	; (800a980 <I2C_Compute_SCLL_SCLH+0x204>)
 800a7b2:	683a      	ldr	r2, [r7, #0]
 800a7b4:	202c      	movs	r0, #44	; 0x2c
 800a7b6:	fb00 f202 	mul.w	r2, r0, r2
 800a7ba:	440a      	add	r2, r1
 800a7bc:	6812      	ldr	r2, [r2, #0]
 800a7be:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7c2:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800a7c4:	2332      	movs	r3, #50	; 0x32
 800a7c6:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800a7c8:	4a6d      	ldr	r2, [pc, #436]	; (800a980 <I2C_Compute_SCLL_SCLH+0x204>)
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	212c      	movs	r1, #44	; 0x2c
 800a7ce:	fb01 f303 	mul.w	r3, r1, r3
 800a7d2:	4413      	add	r3, r2
 800a7d4:	3328      	adds	r3, #40	; 0x28
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7da:	fb02 f303 	mul.w	r3, r2, r3
 800a7de:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800a7e0:	4a67      	ldr	r2, [pc, #412]	; (800a980 <I2C_Compute_SCLL_SCLH+0x204>)
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	212c      	movs	r1, #44	; 0x2c
 800a7e6:	fb01 f303 	mul.w	r3, r1, r3
 800a7ea:	4413      	add	r3, r2
 800a7ec:	3304      	adds	r3, #4
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a62      	ldr	r2, [pc, #392]	; (800a97c <I2C_Compute_SCLL_SCLH+0x200>)
 800a7f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7f6:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 800a7f8:	4a61      	ldr	r2, [pc, #388]	; (800a980 <I2C_Compute_SCLL_SCLH+0x204>)
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	212c      	movs	r1, #44	; 0x2c
 800a7fe:	fb01 f303 	mul.w	r3, r1, r3
 800a802:	4413      	add	r3, r2
 800a804:	3308      	adds	r3, #8
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a5c      	ldr	r2, [pc, #368]	; (800a97c <I2C_Compute_SCLL_SCLH+0x200>)
 800a80a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a80e:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800a810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a812:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800a814:	2300      	movs	r3, #0
 800a816:	637b      	str	r3, [r7, #52]	; 0x34
 800a818:	e0a3      	b.n	800a962 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800a81a:	495a      	ldr	r1, [pc, #360]	; (800a984 <I2C_Compute_SCLL_SCLH+0x208>)
 800a81c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a81e:	4613      	mov	r3, r2
 800a820:	009b      	lsls	r3, r3, #2
 800a822:	4413      	add	r3, r2
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	440b      	add	r3, r1
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	1c5a      	adds	r2, r3, #1
 800a82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a82e:	fb02 f303 	mul.w	r3, r2, r3
 800a832:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800a834:	2300      	movs	r3, #0
 800a836:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a838:	e08c      	b.n	800a954 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800a83a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a83c:	6a3b      	ldr	r3, [r7, #32]
 800a83e:	441a      	add	r2, r3
 800a840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a842:	3301      	adds	r3, #1
 800a844:	6979      	ldr	r1, [r7, #20]
 800a846:	fb03 f101 	mul.w	r1, r3, r1
 800a84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a84c:	005b      	lsls	r3, r3, #1
 800a84e:	440b      	add	r3, r1
 800a850:	4413      	add	r3, r2
 800a852:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800a854:	4a4a      	ldr	r2, [pc, #296]	; (800a980 <I2C_Compute_SCLL_SCLH+0x204>)
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	212c      	movs	r1, #44	; 0x2c
 800a85a:	fb01 f303 	mul.w	r3, r1, r3
 800a85e:	4413      	add	r3, r2
 800a860:	3318      	adds	r3, #24
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	693a      	ldr	r2, [r7, #16]
 800a866:	429a      	cmp	r2, r3
 800a868:	d971      	bls.n	800a94e <I2C_Compute_SCLL_SCLH+0x1d2>
 800a86a:	693a      	ldr	r2, [r7, #16]
 800a86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86e:	1ad2      	subs	r2, r2, r3
 800a870:	6a3b      	ldr	r3, [r7, #32]
 800a872:	1ad3      	subs	r3, r2, r3
 800a874:	089b      	lsrs	r3, r3, #2
 800a876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a878:	429a      	cmp	r2, r3
 800a87a:	d268      	bcs.n	800a94e <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800a87c:	2300      	movs	r3, #0
 800a87e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a880:	e062      	b.n	800a948 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800a882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a884:	6a3b      	ldr	r3, [r7, #32]
 800a886:	441a      	add	r2, r3
 800a888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a88a:	3301      	adds	r3, #1
 800a88c:	6979      	ldr	r1, [r7, #20]
 800a88e:	fb03 f101 	mul.w	r1, r3, r1
 800a892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a894:	005b      	lsls	r3, r3, #1
 800a896:	440b      	add	r3, r1
 800a898:	4413      	add	r3, r2
 800a89a:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800a89c:	693a      	ldr	r2, [r7, #16]
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	441a      	add	r2, r3
 800a8a2:	4937      	ldr	r1, [pc, #220]	; (800a980 <I2C_Compute_SCLL_SCLH+0x204>)
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	202c      	movs	r0, #44	; 0x2c
 800a8a8:	fb00 f303 	mul.w	r3, r0, r3
 800a8ac:	440b      	add	r3, r1
 800a8ae:	3320      	adds	r3, #32
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	441a      	add	r2, r3
 800a8b4:	4932      	ldr	r1, [pc, #200]	; (800a980 <I2C_Compute_SCLL_SCLH+0x204>)
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	202c      	movs	r0, #44	; 0x2c
 800a8ba:	fb00 f303 	mul.w	r3, r0, r3
 800a8be:	440b      	add	r3, r1
 800a8c0:	3324      	adds	r3, #36	; 0x24
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4413      	add	r3, r2
 800a8c6:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800a8c8:	68ba      	ldr	r2, [r7, #8]
 800a8ca:	69bb      	ldr	r3, [r7, #24]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d338      	bcc.n	800a942 <I2C_Compute_SCLL_SCLH+0x1c6>
 800a8d0:	68ba      	ldr	r2, [r7, #8]
 800a8d2:	69fb      	ldr	r3, [r7, #28]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d834      	bhi.n	800a942 <I2C_Compute_SCLL_SCLH+0x1c6>
 800a8d8:	4a29      	ldr	r2, [pc, #164]	; (800a980 <I2C_Compute_SCLL_SCLH+0x204>)
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	212c      	movs	r1, #44	; 0x2c
 800a8de:	fb01 f303 	mul.w	r3, r1, r3
 800a8e2:	4413      	add	r3, r2
 800a8e4:	331c      	adds	r3, #28
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	68fa      	ldr	r2, [r7, #12]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d329      	bcc.n	800a942 <I2C_Compute_SCLL_SCLH+0x1c6>
 800a8ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d225      	bcs.n	800a942 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800a8f6:	68ba      	ldr	r2, [r7, #8]
 800a8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fa:	1ad3      	subs	r3, r2, r3
 800a8fc:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800a8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a900:	2b00      	cmp	r3, #0
 800a902:	da02      	bge.n	800a90a <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 800a904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a906:	425b      	negs	r3, r3
 800a908:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800a90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a90e:	429a      	cmp	r2, r3
 800a910:	d917      	bls.n	800a942 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800a912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a914:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 800a916:	491b      	ldr	r1, [pc, #108]	; (800a984 <I2C_Compute_SCLL_SCLH+0x208>)
 800a918:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a91a:	4613      	mov	r3, r2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	4413      	add	r3, r2
 800a920:	009b      	lsls	r3, r3, #2
 800a922:	440b      	add	r3, r1
 800a924:	3310      	adds	r3, #16
 800a926:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a928:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800a92a:	4916      	ldr	r1, [pc, #88]	; (800a984 <I2C_Compute_SCLL_SCLH+0x208>)
 800a92c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a92e:	4613      	mov	r3, r2
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	4413      	add	r3, r2
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	440b      	add	r3, r1
 800a938:	330c      	adds	r3, #12
 800a93a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a93c:	601a      	str	r2, [r3, #0]
              ret = count;
 800a93e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a940:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800a942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a944:	3301      	adds	r3, #1
 800a946:	63bb      	str	r3, [r7, #56]	; 0x38
 800a948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a94a:	2bff      	cmp	r3, #255	; 0xff
 800a94c:	d999      	bls.n	800a882 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800a94e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a950:	3301      	adds	r3, #1
 800a952:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a956:	2bff      	cmp	r3, #255	; 0xff
 800a958:	f67f af6f 	bls.w	800a83a <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800a95c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a95e:	3301      	adds	r3, #1
 800a960:	637b      	str	r3, [r7, #52]	; 0x34
 800a962:	4b09      	ldr	r3, [pc, #36]	; (800a988 <I2C_Compute_SCLL_SCLH+0x20c>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a968:	429a      	cmp	r2, r3
 800a96a:	f4ff af56 	bcc.w	800a81a <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800a96e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800a970:	4618      	mov	r0, r3
 800a972:	374c      	adds	r7, #76	; 0x4c
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr
 800a97c:	3b9aca00 	.word	0x3b9aca00
 800a980:	08024b04 	.word	0x08024b04
 800a984:	2400a2b4 	.word	0x2400a2b4
 800a988:	2400acb4 	.word	0x2400acb4

0800a98c <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b08a      	sub	sp, #40	; 0x28
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800a994:	4b31      	ldr	r3, [pc, #196]	; (800aa5c <I2C4_MspInit+0xd0>)
 800a996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a99a:	4a30      	ldr	r2, [pc, #192]	; (800aa5c <I2C4_MspInit+0xd0>)
 800a99c:	f043 0308 	orr.w	r3, r3, #8
 800a9a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a9a4:	4b2d      	ldr	r3, [pc, #180]	; (800aa5c <I2C4_MspInit+0xd0>)
 800a9a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a9aa:	f003 0308 	and.w	r3, r3, #8
 800a9ae:	613b      	str	r3, [r7, #16]
 800a9b0:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800a9b2:	4b2a      	ldr	r3, [pc, #168]	; (800aa5c <I2C4_MspInit+0xd0>)
 800a9b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a9b8:	4a28      	ldr	r2, [pc, #160]	; (800aa5c <I2C4_MspInit+0xd0>)
 800a9ba:	f043 0308 	orr.w	r3, r3, #8
 800a9be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a9c2:	4b26      	ldr	r3, [pc, #152]	; (800aa5c <I2C4_MspInit+0xd0>)
 800a9c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a9c8:	f003 0308 	and.w	r3, r3, #8
 800a9cc:	60fb      	str	r3, [r7, #12]
 800a9ce:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800a9d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9d4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800a9d6:	2312      	movs	r3, #18
 800a9d8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800a9de:	2302      	movs	r3, #2
 800a9e0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800a9e2:	2304      	movs	r3, #4
 800a9e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800a9e6:	f107 0314 	add.w	r3, r7, #20
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	481c      	ldr	r0, [pc, #112]	; (800aa60 <I2C4_MspInit+0xd4>)
 800a9ee:	f001 fd43 	bl	800c478 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800a9f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a9f6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800a9f8:	2312      	movs	r3, #18
 800a9fa:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800aa00:	2302      	movs	r3, #2
 800aa02:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800aa04:	2304      	movs	r3, #4
 800aa06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800aa08:	f107 0314 	add.w	r3, r7, #20
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	4814      	ldr	r0, [pc, #80]	; (800aa60 <I2C4_MspInit+0xd4>)
 800aa10:	f001 fd32 	bl	800c478 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800aa14:	4b11      	ldr	r3, [pc, #68]	; (800aa5c <I2C4_MspInit+0xd0>)
 800aa16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800aa1a:	4a10      	ldr	r2, [pc, #64]	; (800aa5c <I2C4_MspInit+0xd0>)
 800aa1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa20:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800aa24:	4b0d      	ldr	r3, [pc, #52]	; (800aa5c <I2C4_MspInit+0xd0>)
 800aa26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800aa2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa2e:	60bb      	str	r3, [r7, #8]
 800aa30:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800aa32:	4b0a      	ldr	r3, [pc, #40]	; (800aa5c <I2C4_MspInit+0xd0>)
 800aa34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aa38:	4a08      	ldr	r2, [pc, #32]	; (800aa5c <I2C4_MspInit+0xd0>)
 800aa3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa3e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800aa42:	4b06      	ldr	r3, [pc, #24]	; (800aa5c <I2C4_MspInit+0xd0>)
 800aa44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aa48:	4a04      	ldr	r2, [pc, #16]	; (800aa5c <I2C4_MspInit+0xd0>)
 800aa4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa4e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 800aa52:	bf00      	nop
 800aa54:	3728      	adds	r7, #40	; 0x28
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	bf00      	nop
 800aa5c:	58024400 	.word	0x58024400
 800aa60:	58020c00 	.word	0x58020c00

0800aa64 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b088      	sub	sp, #32
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800aa6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa70:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	4619      	mov	r1, r3
 800aa76:	480b      	ldr	r0, [pc, #44]	; (800aaa4 <I2C4_MspDeInit+0x40>)
 800aa78:	f001 feae 	bl	800c7d8 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800aa7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aa80:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	4619      	mov	r1, r3
 800aa86:	4807      	ldr	r0, [pc, #28]	; (800aaa4 <I2C4_MspDeInit+0x40>)
 800aa88:	f001 fea6 	bl	800c7d8 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800aa8c:	4b06      	ldr	r3, [pc, #24]	; (800aaa8 <I2C4_MspDeInit+0x44>)
 800aa8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800aa92:	4a05      	ldr	r2, [pc, #20]	; (800aaa8 <I2C4_MspDeInit+0x44>)
 800aa94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa98:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 800aa9c:	bf00      	nop
 800aa9e:	3720      	adds	r7, #32
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	58020c00 	.word	0x58020c00
 800aaa8:	58024400 	.word	0x58024400

0800aaac <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b088      	sub	sp, #32
 800aab0:	af04      	add	r7, sp, #16
 800aab2:	607b      	str	r3, [r7, #4]
 800aab4:	4603      	mov	r3, r0
 800aab6:	81fb      	strh	r3, [r7, #14]
 800aab8:	460b      	mov	r3, r1
 800aaba:	81bb      	strh	r3, [r7, #12]
 800aabc:	4613      	mov	r3, r2
 800aabe:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800aac0:	8978      	ldrh	r0, [r7, #10]
 800aac2:	89ba      	ldrh	r2, [r7, #12]
 800aac4:	89f9      	ldrh	r1, [r7, #14]
 800aac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800aaca:	9302      	str	r3, [sp, #8]
 800aacc:	8b3b      	ldrh	r3, [r7, #24]
 800aace:	9301      	str	r3, [sp, #4]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	9300      	str	r3, [sp, #0]
 800aad4:	4603      	mov	r3, r0
 800aad6:	4807      	ldr	r0, [pc, #28]	; (800aaf4 <I2C4_WriteReg+0x48>)
 800aad8:	f002 f8be 	bl	800cc58 <HAL_I2C_Mem_Write>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d101      	bne.n	800aae6 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800aae2:	2300      	movs	r3, #0
 800aae4:	e001      	b.n	800aaea <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800aae6:	f06f 0307 	mvn.w	r3, #7
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3710      	adds	r7, #16
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	2400acb8 	.word	0x2400acb8

0800aaf8 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b088      	sub	sp, #32
 800aafc:	af04      	add	r7, sp, #16
 800aafe:	607b      	str	r3, [r7, #4]
 800ab00:	4603      	mov	r3, r0
 800ab02:	81fb      	strh	r3, [r7, #14]
 800ab04:	460b      	mov	r3, r1
 800ab06:	81bb      	strh	r3, [r7, #12]
 800ab08:	4613      	mov	r3, r2
 800ab0a:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800ab0c:	8978      	ldrh	r0, [r7, #10]
 800ab0e:	89ba      	ldrh	r2, [r7, #12]
 800ab10:	89f9      	ldrh	r1, [r7, #14]
 800ab12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ab16:	9302      	str	r3, [sp, #8]
 800ab18:	8b3b      	ldrh	r3, [r7, #24]
 800ab1a:	9301      	str	r3, [sp, #4]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	9300      	str	r3, [sp, #0]
 800ab20:	4603      	mov	r3, r0
 800ab22:	4807      	ldr	r0, [pc, #28]	; (800ab40 <I2C4_ReadReg+0x48>)
 800ab24:	f002 f9ac 	bl	800ce80 <HAL_I2C_Mem_Read>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d101      	bne.n	800ab32 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	e001      	b.n	800ab36 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800ab32:	f06f 0307 	mvn.w	r3, #7
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3710      	adds	r7, #16
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	2400acb8 	.word	0x2400acb8

0800ab44 <BSP_QSPI_Init>:
  * @param  Instance   QSPI Instance
  * @param  Init       QSPI Init structure
  * @retval BSP status
  */
int32_t BSP_QSPI_Init(uint32_t Instance, BSP_QSPI_Init_t *Init)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b090      	sub	sp, #64	; 0x40
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	63fb      	str	r3, [r7, #60]	; 0x3c
  3: For DTR mode to reach max 54Mhz
  */
  static const uint32_t PrescalerTab[2] = {1, 3};

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d003      	beq.n	800ab60 <BSP_QSPI_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ab58:	f06f 0301 	mvn.w	r3, #1
 800ab5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab5e:	e090      	b.n	800ac82 <BSP_QSPI_Init+0x13e>
  }
  else
  {
    /* Check if instance is already initialized */
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 800ab60:	494a      	ldr	r1, [pc, #296]	; (800ac8c <BSP_QSPI_Init+0x148>)
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	4613      	mov	r3, r2
 800ab66:	005b      	lsls	r3, r3, #1
 800ab68:	4413      	add	r3, r2
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	440b      	add	r3, r1
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	f040 8086 	bne.w	800ac82 <BSP_QSPI_Init+0x13e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp QSPI initialization */
      QSPI_MspInit(&hqspi);
 800ab76:	4846      	ldr	r0, [pc, #280]	; (800ac90 <BSP_QSPI_Init+0x14c>)
 800ab78:	f000 f99c 	bl	800aeb4 <QSPI_MspInit>
#endif /* USE_HAL_QSPI_REGISTER_CALLBACKS */

      if(ret == BSP_ERROR_NONE)
 800ab7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d17f      	bne.n	800ac82 <BSP_QSPI_Init+0x13e>
      {
        /* STM32 QSPI interface initialization */
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 800ab82:	f107 031c 	add.w	r3, r7, #28
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7fe ffea 	bl	8009b60 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	785b      	ldrb	r3, [r3, #1]
 800ab90:	461a      	mov	r2, r3
 800ab92:	4b40      	ldr	r3, [pc, #256]	; (800ac94 <BSP_QSPI_Init+0x150>)
 800ab94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab98:	613b      	str	r3, [r7, #16]
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 800ab9a:	2340      	movs	r3, #64	; 0x40
 800ab9c:	61bb      	str	r3, [r7, #24]
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aba4:	fa93 f3a3 	rbit	r3, r3
 800aba8:	633b      	str	r3, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800abaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abac:	63bb      	str	r3, [r7, #56]	; 0x38
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800abae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d101      	bne.n	800abb8 <BSP_QSPI_Init+0x74>
  {
    return 32U;
 800abb4:	2320      	movs	r3, #32
 800abb6:	e003      	b.n	800abc0 <BSP_QSPI_Init+0x7c>
  }
  return __builtin_clz(value);
 800abb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abba:	fab3 f383 	clz	r3, r3
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	3b01      	subs	r3, #1
 800abc2:	60fb      	str	r3, [r7, #12]
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	785b      	ldrb	r3, [r3, #1]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d101      	bne.n	800abd0 <BSP_QSPI_Init+0x8c>
 800abcc:	2310      	movs	r3, #16
 800abce:	e000      	b.n	800abd2 <BSP_QSPI_Init+0x8e>
 800abd0:	2300      	movs	r3, #0
 800abd2:	617b      	str	r3, [r7, #20]

        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800abd4:	f107 030c 	add.w	r3, r7, #12
 800abd8:	4619      	mov	r1, r3
 800abda:	482d      	ldr	r0, [pc, #180]	; (800ac90 <BSP_QSPI_Init+0x14c>)
 800abdc:	f000 f85c 	bl	800ac98 <MX_QSPI_Init>
 800abe0:	4603      	mov	r3, r0
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d003      	beq.n	800abee <BSP_QSPI_Init+0xaa>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800abe6:	f06f 0303 	mvn.w	r3, #3
 800abea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abec:	e049      	b.n	800ac82 <BSP_QSPI_Init+0x13e>
        }/* QSPI memory reset */
        else if(QSPI_ResetMemory(Instance) != BSP_ERROR_NONE)
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 faa8 	bl	800b144 <QSPI_ResetMemory>
 800abf4:	4603      	mov	r3, r0
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d003      	beq.n	800ac02 <BSP_QSPI_Init+0xbe>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800abfa:	f06f 0304 	mvn.w	r3, #4
 800abfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac00:	e03f      	b.n	800ac82 <BSP_QSPI_Init+0x13e>
        }/* Force Flash enter 4 Byte address mode */
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800ac02:	4922      	ldr	r1, [pc, #136]	; (800ac8c <BSP_QSPI_Init+0x148>)
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	4613      	mov	r3, r2
 800ac08:	005b      	lsls	r3, r3, #1
 800ac0a:	4413      	add	r3, r2
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	440b      	add	r3, r1
 800ac10:	3301      	adds	r3, #1
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	4619      	mov	r1, r3
 800ac16:	481e      	ldr	r0, [pc, #120]	; (800ac90 <BSP_QSPI_Init+0x14c>)
 800ac18:	f7ff f811 	bl	8009c3e <MT25TL01G_AutoPollingMemReady>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d003      	beq.n	800ac2a <BSP_QSPI_Init+0xe6>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800ac22:	f06f 0304 	mvn.w	r3, #4
 800ac26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac28:	e02b      	b.n	800ac82 <BSP_QSPI_Init+0x13e>
        }
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800ac2a:	4918      	ldr	r1, [pc, #96]	; (800ac8c <BSP_QSPI_Init+0x148>)
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	4613      	mov	r3, r2
 800ac30:	005b      	lsls	r3, r3, #1
 800ac32:	4413      	add	r3, r2
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	440b      	add	r3, r1
 800ac38:	3301      	adds	r3, #1
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	4814      	ldr	r0, [pc, #80]	; (800ac90 <BSP_QSPI_Init+0x14c>)
 800ac40:	f7fe ffb5 	bl	8009bae <MT25TL01G_Enter4BytesAddressMode>
 800ac44:	4603      	mov	r3, r0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d003      	beq.n	800ac52 <BSP_QSPI_Init+0x10e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800ac4a:	f06f 0304 	mvn.w	r3, #4
 800ac4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac50:	e017      	b.n	800ac82 <BSP_QSPI_Init+0x13e>
        }/* Configuration of the dummy cycles on QSPI memory side */
        else if(QSPI_DummyCyclesCfg(Instance) != BSP_ERROR_NONE)
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 fae2 	bl	800b21c <QSPI_DummyCyclesCfg>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d003      	beq.n	800ac66 <BSP_QSPI_Init+0x122>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800ac5e:	f06f 0304 	mvn.w	r3, #4
 800ac62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac64:	e00d      	b.n	800ac82 <BSP_QSPI_Init+0x13e>
        }
        else
        {
          /* Configure Flash to desired mode */
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	7819      	ldrb	r1, [r3, #0]
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	785b      	ldrb	r3, [r3, #1]
 800ac6e:	461a      	mov	r2, r3
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 f89d 	bl	800adb0 <BSP_QSPI_ConfigFlash>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d002      	beq.n	800ac82 <BSP_QSPI_Init+0x13e>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800ac7c:	f06f 0304 	mvn.w	r3, #4
 800ac80:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
  }

  /* Return BSP status */
  return ret;
 800ac82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3740      	adds	r7, #64	; 0x40
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}
 800ac8c:	2400ad04 	.word	0x2400ad04
 800ac90:	24008fcc 	.word	0x24008fcc
 800ac94:	08024b88 	.word	0x08024b88

0800ac98 <MX_QSPI_Init>:
  * @param  hQspi       QSPI handle
  * @param  Config      QSPI configuration structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	4a13      	ldr	r2, [pc, #76]	; (800acf4 <MX_QSPI_Init+0x5c>)
 800aca6:	601a      	str	r2, [r3, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	685a      	ldr	r2, [r3, #4]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	605a      	str	r2, [r3, #4]
  hQspi->Init.FifoThreshold      = 1;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2201      	movs	r2, #1
 800acb4:	609a      	str	r2, [r3, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	689a      	ldr	r2, [r3, #8]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	60da      	str	r2, [r3, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	681a      	ldr	r2, [r3, #0]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	611a      	str	r2, [r3, #16]
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f44f 7240 	mov.w	r2, #768	; 0x300
 800accc:	615a      	str	r2, [r3, #20]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2200      	movs	r2, #0
 800acd2:	619a      	str	r2, [r3, #24]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2200      	movs	r2, #0
 800acd8:	61da      	str	r2, [r3, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	68da      	ldr	r2, [r3, #12]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	621a      	str	r2, [r3, #32]

  return HAL_QSPI_Init(hQspi);
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f003 fa94 	bl	800e210 <HAL_QSPI_Init>
 800ace8:	4603      	mov	r3, r0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3708      	adds	r7, #8
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	bf00      	nop
 800acf4:	52005000 	.word	0x52005000

0800acf8 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800ad00:	2300      	movs	r3, #0
 800ad02:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d003      	beq.n	800ad12 <BSP_QSPI_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ad0a:	f06f 0301 	mvn.w	r3, #1
 800ad0e:	60fb      	str	r3, [r7, #12]
 800ad10:	e045      	b.n	800ad9e <BSP_QSPI_EnableMemoryMappedMode+0xa6>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800ad12:	4925      	ldr	r1, [pc, #148]	; (800ada8 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	4613      	mov	r3, r2
 800ad18:	005b      	lsls	r3, r3, #1
 800ad1a:	4413      	add	r3, r2
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	440b      	add	r3, r1
 800ad20:	3302      	adds	r3, #2
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d11d      	bne.n	800ad64 <BSP_QSPI_EnableMemoryMappedMode+0x6c>
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800ad28:	491f      	ldr	r1, [pc, #124]	; (800ada8 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	4613      	mov	r3, r2
 800ad2e:	005b      	lsls	r3, r3, #1
 800ad30:	4413      	add	r3, r2
 800ad32:	009b      	lsls	r3, r3, #2
 800ad34:	440b      	add	r3, r1
 800ad36:	3301      	adds	r3, #1
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	481b      	ldr	r0, [pc, #108]	; (800adac <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 800ad3e:	f7ff f8d3 	bl	8009ee8 <MT25TL01G_EnableMemoryMappedModeSTR>
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d003      	beq.n	800ad50 <BSP_QSPI_EnableMemoryMappedMode+0x58>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ad48:	f06f 0304 	mvn.w	r3, #4
 800ad4c:	60fb      	str	r3, [r7, #12]
 800ad4e:	e026      	b.n	800ad9e <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800ad50:	4915      	ldr	r1, [pc, #84]	; (800ada8 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800ad52:	687a      	ldr	r2, [r7, #4]
 800ad54:	4613      	mov	r3, r2
 800ad56:	005b      	lsls	r3, r3, #1
 800ad58:	4413      	add	r3, r2
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	440b      	add	r3, r1
 800ad5e:	2202      	movs	r2, #2
 800ad60:	701a      	strb	r2, [r3, #0]
 800ad62:	e01c      	b.n	800ad9e <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800ad64:	4910      	ldr	r1, [pc, #64]	; (800ada8 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800ad66:	687a      	ldr	r2, [r7, #4]
 800ad68:	4613      	mov	r3, r2
 800ad6a:	005b      	lsls	r3, r3, #1
 800ad6c:	4413      	add	r3, r2
 800ad6e:	009b      	lsls	r3, r3, #2
 800ad70:	440b      	add	r3, r1
 800ad72:	3301      	adds	r3, #1
 800ad74:	781b      	ldrb	r3, [r3, #0]
 800ad76:	4619      	mov	r1, r3
 800ad78:	480c      	ldr	r0, [pc, #48]	; (800adac <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 800ad7a:	f7ff f84b 	bl	8009e14 <MT25TL01G_EnableMemoryMappedModeDTR>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d003      	beq.n	800ad8c <BSP_QSPI_EnableMemoryMappedMode+0x94>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ad84:	f06f 0304 	mvn.w	r3, #4
 800ad88:	60fb      	str	r3, [r7, #12]
 800ad8a:	e008      	b.n	800ad9e <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800ad8c:	4906      	ldr	r1, [pc, #24]	; (800ada8 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	4613      	mov	r3, r2
 800ad92:	005b      	lsls	r3, r3, #1
 800ad94:	4413      	add	r3, r2
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	440b      	add	r3, r1
 800ad9a:	2202      	movs	r2, #2
 800ad9c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3710      	adds	r7, #16
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}
 800ada8:	2400ad04 	.word	0x2400ad04
 800adac:	24008fcc 	.word	0x24008fcc

0800adb0 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	460b      	mov	r3, r1
 800adba:	70fb      	strb	r3, [r7, #3]
 800adbc:	4613      	mov	r3, r2
 800adbe:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 800adc0:	2300      	movs	r3, #0
 800adc2:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d003      	beq.n	800add2 <BSP_QSPI_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800adca:	f06f 0301 	mvn.w	r3, #1
 800adce:	60fb      	str	r3, [r7, #12]
 800add0:	e067      	b.n	800aea2 <BSP_QSPI_ConfigFlash+0xf2>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 800add2:	4936      	ldr	r1, [pc, #216]	; (800aeac <BSP_QSPI_ConfigFlash+0xfc>)
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	4613      	mov	r3, r2
 800add8:	005b      	lsls	r3, r3, #1
 800adda:	4413      	add	r3, r2
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	440b      	add	r3, r1
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	2b02      	cmp	r3, #2
 800ade4:	d103      	bne.n	800adee <BSP_QSPI_ConfigFlash+0x3e>
    {
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 800ade6:	f06f 0319 	mvn.w	r3, #25
 800adea:	60fb      	str	r3, [r7, #12]
 800adec:	e059      	b.n	800aea2 <BSP_QSPI_ConfigFlash+0xf2>
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800adee:	78bb      	ldrb	r3, [r7, #2]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d101      	bne.n	800adf8 <BSP_QSPI_ConfigFlash+0x48>
 800adf4:	2310      	movs	r3, #16
 800adf6:	e000      	b.n	800adfa <BSP_QSPI_ConfigFlash+0x4a>
 800adf8:	2300      	movs	r3, #0
 800adfa:	4a2d      	ldr	r2, [pc, #180]	; (800aeb0 <BSP_QSPI_ConfigFlash+0x100>)
 800adfc:	60d3      	str	r3, [r2, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800adfe:	482c      	ldr	r0, [pc, #176]	; (800aeb0 <BSP_QSPI_ConfigFlash+0x100>)
 800ae00:	f003 fa06 	bl	800e210 <HAL_QSPI_Init>
 800ae04:	4603      	mov	r3, r0
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d003      	beq.n	800ae12 <BSP_QSPI_ConfigFlash+0x62>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800ae0a:	f06f 0303 	mvn.w	r3, #3
 800ae0e:	60fb      	str	r3, [r7, #12]
 800ae10:	e047      	b.n	800aea2 <BSP_QSPI_ConfigFlash+0xf2>
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 800ae12:	4926      	ldr	r1, [pc, #152]	; (800aeac <BSP_QSPI_ConfigFlash+0xfc>)
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	4613      	mov	r3, r2
 800ae18:	005b      	lsls	r3, r3, #1
 800ae1a:	4413      	add	r3, r2
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	440b      	add	r3, r1
 800ae20:	3301      	adds	r3, #1
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	2b03      	cmp	r3, #3
 800ae26:	d10c      	bne.n	800ae42 <BSP_QSPI_ConfigFlash+0x92>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 800ae28:	78fb      	ldrb	r3, [r7, #3]
 800ae2a:	2b03      	cmp	r3, #3
 800ae2c:	d016      	beq.n	800ae5c <BSP_QSPI_ConfigFlash+0xac>
          {
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 800ae2e:	4820      	ldr	r0, [pc, #128]	; (800aeb0 <BSP_QSPI_ConfigFlash+0x100>)
 800ae30:	f7fe ffc6 	bl	8009dc0 <MT25TL01G_ExitQPIMode>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d010      	beq.n	800ae5c <BSP_QSPI_ConfigFlash+0xac>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800ae3a:	f06f 0304 	mvn.w	r3, #4
 800ae3e:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 800ae40:	e00c      	b.n	800ae5c <BSP_QSPI_ConfigFlash+0xac>

        case BSP_QSPI_SPI_MODE :               /* 1-1-1 commands, Power on H/W default setting */
        case BSP_QSPI_SPI_2IO_MODE :           /* 1-2-2 read commands */
        case BSP_QSPI_SPI_4IO_MODE :           /* 1-4-4 read commands */
        default :
          if(Mode == MT25TL01G_QPI_MODE)
 800ae42:	78fb      	ldrb	r3, [r7, #3]
 800ae44:	2b03      	cmp	r3, #3
 800ae46:	d10b      	bne.n	800ae60 <BSP_QSPI_ConfigFlash+0xb0>
          {
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 800ae48:	4819      	ldr	r0, [pc, #100]	; (800aeb0 <BSP_QSPI_ConfigFlash+0x100>)
 800ae4a:	f7fe ff8f 	bl	8009d6c <MT25TL01G_EnterQPIMode>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d005      	beq.n	800ae60 <BSP_QSPI_ConfigFlash+0xb0>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800ae54:	f06f 0304 	mvn.w	r3, #4
 800ae58:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 800ae5a:	e001      	b.n	800ae60 <BSP_QSPI_ConfigFlash+0xb0>
          break;
 800ae5c:	bf00      	nop
 800ae5e:	e000      	b.n	800ae62 <BSP_QSPI_ConfigFlash+0xb2>
          break;
 800ae60:	bf00      	nop
        }

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d11c      	bne.n	800aea2 <BSP_QSPI_ConfigFlash+0xf2>
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800ae68:	4910      	ldr	r1, [pc, #64]	; (800aeac <BSP_QSPI_ConfigFlash+0xfc>)
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	4613      	mov	r3, r2
 800ae6e:	005b      	lsls	r3, r3, #1
 800ae70:	4413      	add	r3, r2
 800ae72:	009b      	lsls	r3, r3, #2
 800ae74:	440b      	add	r3, r1
 800ae76:	2201      	movs	r2, #1
 800ae78:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 800ae7a:	490c      	ldr	r1, [pc, #48]	; (800aeac <BSP_QSPI_ConfigFlash+0xfc>)
 800ae7c:	687a      	ldr	r2, [r7, #4]
 800ae7e:	4613      	mov	r3, r2
 800ae80:	005b      	lsls	r3, r3, #1
 800ae82:	4413      	add	r3, r2
 800ae84:	009b      	lsls	r3, r3, #2
 800ae86:	440b      	add	r3, r1
 800ae88:	3301      	adds	r3, #1
 800ae8a:	78fa      	ldrb	r2, [r7, #3]
 800ae8c:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 800ae8e:	4907      	ldr	r1, [pc, #28]	; (800aeac <BSP_QSPI_ConfigFlash+0xfc>)
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	4613      	mov	r3, r2
 800ae94:	005b      	lsls	r3, r3, #1
 800ae96:	4413      	add	r3, r2
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	440b      	add	r3, r1
 800ae9c:	3302      	adds	r3, #2
 800ae9e:	78ba      	ldrb	r2, [r7, #2]
 800aea0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800aea2:	68fb      	ldr	r3, [r7, #12]
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3710      	adds	r7, #16
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	2400ad04 	.word	0x2400ad04
 800aeb0:	24008fcc 	.word	0x24008fcc

0800aeb4 <QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
static void QSPI_MspInit(QSPI_HandleTypeDef *hQspi)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b094      	sub	sp, #80	; 0x50
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hQspi);

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 800aebc:	4b9c      	ldr	r3, [pc, #624]	; (800b130 <QSPI_MspInit+0x27c>)
 800aebe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800aec2:	4a9b      	ldr	r2, [pc, #620]	; (800b130 <QSPI_MspInit+0x27c>)
 800aec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aec8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800aecc:	4b98      	ldr	r3, [pc, #608]	; (800b130 <QSPI_MspInit+0x27c>)
 800aece:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800aed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aed6:	63bb      	str	r3, [r7, #56]	; 0x38
 800aed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 800aeda:	4b95      	ldr	r3, [pc, #596]	; (800b130 <QSPI_MspInit+0x27c>)
 800aedc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aede:	4a94      	ldr	r2, [pc, #592]	; (800b130 <QSPI_MspInit+0x27c>)
 800aee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aee4:	67d3      	str	r3, [r2, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 800aee6:	4b92      	ldr	r3, [pc, #584]	; (800b130 <QSPI_MspInit+0x27c>)
 800aee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aeea:	4a91      	ldr	r2, [pc, #580]	; (800b130 <QSPI_MspInit+0x27c>)
 800aeec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aef0:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* Enable GPIO clocks */
  QSPI_CLK_GPIO_CLK_ENABLE();
 800aef2:	4b8f      	ldr	r3, [pc, #572]	; (800b130 <QSPI_MspInit+0x27c>)
 800aef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aef8:	4a8d      	ldr	r2, [pc, #564]	; (800b130 <QSPI_MspInit+0x27c>)
 800aefa:	f043 0320 	orr.w	r3, r3, #32
 800aefe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800af02:	4b8b      	ldr	r3, [pc, #556]	; (800b130 <QSPI_MspInit+0x27c>)
 800af04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800af08:	f003 0320 	and.w	r3, r3, #32
 800af0c:	637b      	str	r3, [r7, #52]	; 0x34
 800af0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 800af10:	4b87      	ldr	r3, [pc, #540]	; (800b130 <QSPI_MspInit+0x27c>)
 800af12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800af16:	4a86      	ldr	r2, [pc, #536]	; (800b130 <QSPI_MspInit+0x27c>)
 800af18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800af20:	4b83      	ldr	r3, [pc, #524]	; (800b130 <QSPI_MspInit+0x27c>)
 800af22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800af26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af2a:	633b      	str	r3, [r7, #48]	; 0x30
 800af2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 800af2e:	4b80      	ldr	r3, [pc, #512]	; (800b130 <QSPI_MspInit+0x27c>)
 800af30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800af34:	4a7e      	ldr	r2, [pc, #504]	; (800b130 <QSPI_MspInit+0x27c>)
 800af36:	f043 0308 	orr.w	r3, r3, #8
 800af3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800af3e:	4b7c      	ldr	r3, [pc, #496]	; (800b130 <QSPI_MspInit+0x27c>)
 800af40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800af44:	f003 0308 	and.w	r3, r3, #8
 800af48:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 800af4c:	4b78      	ldr	r3, [pc, #480]	; (800b130 <QSPI_MspInit+0x27c>)
 800af4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800af52:	4a77      	ldr	r2, [pc, #476]	; (800b130 <QSPI_MspInit+0x27c>)
 800af54:	f043 0320 	orr.w	r3, r3, #32
 800af58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800af5c:	4b74      	ldr	r3, [pc, #464]	; (800b130 <QSPI_MspInit+0x27c>)
 800af5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800af62:	f003 0320 	and.w	r3, r3, #32
 800af66:	62bb      	str	r3, [r7, #40]	; 0x28
 800af68:	6abb      	ldr	r3, [r7, #40]	; 0x28
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 800af6a:	4b71      	ldr	r3, [pc, #452]	; (800b130 <QSPI_MspInit+0x27c>)
 800af6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800af70:	4a6f      	ldr	r2, [pc, #444]	; (800b130 <QSPI_MspInit+0x27c>)
 800af72:	f043 0320 	orr.w	r3, r3, #32
 800af76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800af7a:	4b6d      	ldr	r3, [pc, #436]	; (800b130 <QSPI_MspInit+0x27c>)
 800af7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800af80:	f003 0320 	and.w	r3, r3, #32
 800af84:	627b      	str	r3, [r7, #36]	; 0x24
 800af86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 800af88:	4b69      	ldr	r3, [pc, #420]	; (800b130 <QSPI_MspInit+0x27c>)
 800af8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800af8e:	4a68      	ldr	r2, [pc, #416]	; (800b130 <QSPI_MspInit+0x27c>)
 800af90:	f043 0320 	orr.w	r3, r3, #32
 800af94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800af98:	4b65      	ldr	r3, [pc, #404]	; (800b130 <QSPI_MspInit+0x27c>)
 800af9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800af9e:	f003 0320 	and.w	r3, r3, #32
 800afa2:	623b      	str	r3, [r7, #32]
 800afa4:	6a3b      	ldr	r3, [r7, #32]

  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 800afa6:	4b62      	ldr	r3, [pc, #392]	; (800b130 <QSPI_MspInit+0x27c>)
 800afa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800afac:	4a60      	ldr	r2, [pc, #384]	; (800b130 <QSPI_MspInit+0x27c>)
 800afae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800afb6:	4b5e      	ldr	r3, [pc, #376]	; (800b130 <QSPI_MspInit+0x27c>)
 800afb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800afbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afc0:	61fb      	str	r3, [r7, #28]
 800afc2:	69fb      	ldr	r3, [r7, #28]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 800afc4:	4b5a      	ldr	r3, [pc, #360]	; (800b130 <QSPI_MspInit+0x27c>)
 800afc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800afca:	4a59      	ldr	r2, [pc, #356]	; (800b130 <QSPI_MspInit+0x27c>)
 800afcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800afd4:	4b56      	ldr	r3, [pc, #344]	; (800b130 <QSPI_MspInit+0x27c>)
 800afd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800afda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afde:	61bb      	str	r3, [r7, #24]
 800afe0:	69bb      	ldr	r3, [r7, #24]
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 800afe2:	4b53      	ldr	r3, [pc, #332]	; (800b130 <QSPI_MspInit+0x27c>)
 800afe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800afe8:	4a51      	ldr	r2, [pc, #324]	; (800b130 <QSPI_MspInit+0x27c>)
 800afea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800aff2:	4b4f      	ldr	r3, [pc, #316]	; (800b130 <QSPI_MspInit+0x27c>)
 800aff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800affc:	617b      	str	r3, [r7, #20]
 800affe:	697b      	ldr	r3, [r7, #20]
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 800b000:	4b4b      	ldr	r3, [pc, #300]	; (800b130 <QSPI_MspInit+0x27c>)
 800b002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b006:	4a4a      	ldr	r2, [pc, #296]	; (800b130 <QSPI_MspInit+0x27c>)
 800b008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b00c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b010:	4b47      	ldr	r3, [pc, #284]	; (800b130 <QSPI_MspInit+0x27c>)
 800b012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b01a:	613b      	str	r3, [r7, #16]
 800b01c:	693b      	ldr	r3, [r7, #16]
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800b01e:	4b44      	ldr	r3, [pc, #272]	; (800b130 <QSPI_MspInit+0x27c>)
 800b020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b024:	4a42      	ldr	r2, [pc, #264]	; (800b130 <QSPI_MspInit+0x27c>)
 800b026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b02a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b02e:	4b40      	ldr	r3, [pc, #256]	; (800b130 <QSPI_MspInit+0x27c>)
 800b030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b038:	60fb      	str	r3, [r7, #12]
 800b03a:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 800b03c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b040:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800b042:	2302      	movs	r3, #2
 800b044:	643b      	str	r3, [r7, #64]	; 0x40
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800b046:	2303      	movs	r3, #3
 800b048:	64bb      	str	r3, [r7, #72]	; 0x48
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800b04a:	2300      	movs	r3, #0
 800b04c:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800b04e:	2309      	movs	r3, #9
 800b050:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800b052:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b056:	4619      	mov	r1, r3
 800b058:	4836      	ldr	r0, [pc, #216]	; (800b134 <QSPI_MspInit+0x280>)
 800b05a:	f001 fa0d 	bl	800c478 <HAL_GPIO_Init>

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800b05e:	2340      	movs	r3, #64	; 0x40
 800b060:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800b062:	2301      	movs	r3, #1
 800b064:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800b066:	230a      	movs	r3, #10
 800b068:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800b06a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b06e:	4619      	mov	r1, r3
 800b070:	4831      	ldr	r0, [pc, #196]	; (800b138 <QSPI_MspInit+0x284>)
 800b072:	f001 fa01 	bl	800c478 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800b076:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b07a:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800b07c:	2300      	movs	r3, #0
 800b07e:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800b080:	2309      	movs	r3, #9
 800b082:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800b084:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b088:	4619      	mov	r1, r3
 800b08a:	482c      	ldr	r0, [pc, #176]	; (800b13c <QSPI_MspInit+0x288>)
 800b08c:	f001 f9f4 	bl	800c478 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 800b090:	2304      	movs	r3, #4
 800b092:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800b094:	2309      	movs	r3, #9
 800b096:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800b098:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b09c:	4619      	mov	r1, r3
 800b09e:	4828      	ldr	r0, [pc, #160]	; (800b140 <QSPI_MspInit+0x28c>)
 800b0a0:	f001 f9ea 	bl	800c478 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800b0a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800b0aa:	230a      	movs	r3, #10
 800b0ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800b0ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	481f      	ldr	r0, [pc, #124]	; (800b134 <QSPI_MspInit+0x280>)
 800b0b6:	f001 f9df 	bl	800c478 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800b0ba:	2308      	movs	r3, #8
 800b0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800b0be:	2309      	movs	r3, #9
 800b0c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800b0c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	481d      	ldr	r0, [pc, #116]	; (800b140 <QSPI_MspInit+0x28c>)
 800b0ca:	f001 f9d5 	bl	800c478 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800b0ce:	2380      	movs	r3, #128	; 0x80
 800b0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800b0d2:	2309      	movs	r3, #9
 800b0d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800b0d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b0da:	4619      	mov	r1, r3
 800b0dc:	4815      	ldr	r0, [pc, #84]	; (800b134 <QSPI_MspInit+0x280>)
 800b0de:	f001 f9cb 	bl	800c478 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 800b0e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800b0e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	4812      	ldr	r0, [pc, #72]	; (800b138 <QSPI_MspInit+0x284>)
 800b0f0:	f001 f9c2 	bl	800c478 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 800b0f4:	2340      	movs	r3, #64	; 0x40
 800b0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800b0f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	480d      	ldr	r0, [pc, #52]	; (800b134 <QSPI_MspInit+0x280>)
 800b100:	f001 f9ba 	bl	800c478 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800b104:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b108:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800b10a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b10e:	4619      	mov	r1, r3
 800b110:	4809      	ldr	r0, [pc, #36]	; (800b138 <QSPI_MspInit+0x284>)
 800b112:	f001 f9b1 	bl	800c478 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 800b116:	2200      	movs	r2, #0
 800b118:	210f      	movs	r1, #15
 800b11a:	205c      	movs	r0, #92	; 0x5c
 800b11c:	f000 fe9c 	bl	800be58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800b120:	205c      	movs	r0, #92	; 0x5c
 800b122:	f000 feb3 	bl	800be8c <HAL_NVIC_EnableIRQ>
}
 800b126:	bf00      	nop
 800b128:	3750      	adds	r7, #80	; 0x50
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	58024400 	.word	0x58024400
 800b134:	58021400 	.word	0x58021400
 800b138:	58021800 	.word	0x58021800
 800b13c:	58020c00 	.word	0x58020c00
 800b140:	58021c00 	.word	0x58021c00

0800b144 <QSPI_ResetMemory>:
  *         Flash accept 1-1-1, 1-1-2, 1-2-2 commands after reset.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b084      	sub	sp, #16
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800b14c:	2300      	movs	r3, #0
 800b14e:	60fb      	str	r3, [r7, #12]

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800b150:	2103      	movs	r1, #3
 800b152:	4830      	ldr	r0, [pc, #192]	; (800b214 <QSPI_ResetMemory+0xd0>)
 800b154:	f7fe ff30 	bl	8009fb8 <MT25TL01G_ResetEnable>
 800b158:	4603      	mov	r3, r0
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d003      	beq.n	800b166 <QSPI_ResetMemory+0x22>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
 800b15e:	f06f 0304 	mvn.w	r3, #4
 800b162:	60fb      	str	r3, [r7, #12]
 800b164:	e051      	b.n	800b20a <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800b166:	2103      	movs	r1, #3
 800b168:	482a      	ldr	r0, [pc, #168]	; (800b214 <QSPI_ResetMemory+0xd0>)
 800b16a:	f7fe ff57 	bl	800a01c <MT25TL01G_ResetMemory>
 800b16e:	4603      	mov	r3, r0
 800b170:	2b00      	cmp	r3, #0
 800b172:	d003      	beq.n	800b17c <QSPI_ResetMemory+0x38>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b174:	f06f 0304 	mvn.w	r3, #4
 800b178:	60fb      	str	r3, [r7, #12]
 800b17a:	e046      	b.n	800b20a <QSPI_ResetMemory+0xc6>
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800b17c:	4926      	ldr	r1, [pc, #152]	; (800b218 <QSPI_ResetMemory+0xd4>)
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	4613      	mov	r3, r2
 800b182:	005b      	lsls	r3, r3, #1
 800b184:	4413      	add	r3, r2
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	440b      	add	r3, r1
 800b18a:	3301      	adds	r3, #1
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	4619      	mov	r1, r3
 800b190:	4820      	ldr	r0, [pc, #128]	; (800b214 <QSPI_ResetMemory+0xd0>)
 800b192:	f7fe fd54 	bl	8009c3e <MT25TL01G_AutoPollingMemReady>
 800b196:	4603      	mov	r3, r0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d003      	beq.n	800b1a4 <QSPI_ResetMemory+0x60>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b19c:	f06f 0304 	mvn.w	r3, #4
 800b1a0:	60fb      	str	r3, [r7, #12]
 800b1a2:	e032      	b.n	800b20a <QSPI_ResetMemory+0xc6>
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800b1a4:	2100      	movs	r1, #0
 800b1a6:	481b      	ldr	r0, [pc, #108]	; (800b214 <QSPI_ResetMemory+0xd0>)
 800b1a8:	f7fe ff06 	bl	8009fb8 <MT25TL01G_ResetEnable>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d003      	beq.n	800b1ba <QSPI_ResetMemory+0x76>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b1b2:	f06f 0304 	mvn.w	r3, #4
 800b1b6:	60fb      	str	r3, [r7, #12]
 800b1b8:	e027      	b.n	800b20a <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800b1ba:	2100      	movs	r1, #0
 800b1bc:	4815      	ldr	r0, [pc, #84]	; (800b214 <QSPI_ResetMemory+0xd0>)
 800b1be:	f7fe ff2d 	bl	800a01c <MT25TL01G_ResetMemory>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d003      	beq.n	800b1d0 <QSPI_ResetMemory+0x8c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b1c8:	f06f 0304 	mvn.w	r3, #4
 800b1cc:	60fb      	str	r3, [r7, #12]
 800b1ce:	e01c      	b.n	800b20a <QSPI_ResetMemory+0xc6>
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 800b1d0:	4911      	ldr	r1, [pc, #68]	; (800b218 <QSPI_ResetMemory+0xd4>)
 800b1d2:	687a      	ldr	r2, [r7, #4]
 800b1d4:	4613      	mov	r3, r2
 800b1d6:	005b      	lsls	r3, r3, #1
 800b1d8:	4413      	add	r3, r2
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	440b      	add	r3, r1
 800b1de:	2201      	movs	r2, #1
 800b1e0:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
 800b1e2:	490d      	ldr	r1, [pc, #52]	; (800b218 <QSPI_ResetMemory+0xd4>)
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	005b      	lsls	r3, r3, #1
 800b1ea:	4413      	add	r3, r2
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	440b      	add	r3, r1
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 800b1f6:	4908      	ldr	r1, [pc, #32]	; (800b218 <QSPI_ResetMemory+0xd4>)
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	4613      	mov	r3, r2
 800b1fc:	005b      	lsls	r3, r3, #1
 800b1fe:	4413      	add	r3, r2
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	440b      	add	r3, r1
 800b204:	3302      	adds	r3, #2
 800b206:	2200      	movs	r2, #0
 800b208:	701a      	strb	r2, [r3, #0]

  }

  /* Return BSP status */
  return ret;
 800b20a:	68fb      	ldr	r3, [r7, #12]
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3710      	adds	r7, #16
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}
 800b214:	24008fcc 	.word	0x24008fcc
 800b218:	2400ad04 	.word	0x2400ad04

0800b21c <QSPI_DummyCyclesCfg>:
  *         Dummy cycle bit locate in Configuration Register[7:6]
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_DummyCyclesCfg(uint32_t Instance)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b092      	sub	sp, #72	; 0x48
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
    int32_t ret= BSP_ERROR_NONE;
 800b224:	2300      	movs	r3, #0
 800b226:	647b      	str	r3, [r7, #68]	; 0x44
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;
 800b228:	2300      	movs	r3, #0
 800b22a:	817b      	strh	r3, [r7, #10]

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800b22c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b230:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800b232:	2385      	movs	r3, #133	; 0x85
 800b234:	60fb      	str	r3, [r7, #12]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800b236:	2300      	movs	r3, #0
 800b238:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b23a:	2300      	movs	r3, #0
 800b23c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800b23e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800b242:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = 0;
 800b244:	2300      	movs	r3, #0
 800b246:	623b      	str	r3, [r7, #32]
  s_command.NbData            = 2;
 800b248:	2302      	movs	r3, #2
 800b24a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800b24c:	2300      	movs	r3, #0
 800b24e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800b250:	2300      	movs	r3, #0
 800b252:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b254:	2300      	movs	r3, #0
 800b256:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b258:	f107 030c 	add.w	r3, r7, #12
 800b25c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b260:	4619      	mov	r1, r3
 800b262:	482b      	ldr	r0, [pc, #172]	; (800b310 <QSPI_DummyCyclesCfg+0xf4>)
 800b264:	f003 fa02 	bl	800e66c <HAL_QSPI_Command>
 800b268:	4603      	mov	r3, r0
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d002      	beq.n	800b274 <QSPI_DummyCyclesCfg+0x58>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800b26e:	f06f 0304 	mvn.w	r3, #4
 800b272:	e048      	b.n	800b306 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b274:	f107 030a 	add.w	r3, r7, #10
 800b278:	f241 3288 	movw	r2, #5000	; 0x1388
 800b27c:	4619      	mov	r1, r3
 800b27e:	4824      	ldr	r0, [pc, #144]	; (800b310 <QSPI_DummyCyclesCfg+0xf4>)
 800b280:	f003 fae4 	bl	800e84c <HAL_QSPI_Receive>
 800b284:	4603      	mov	r3, r0
 800b286:	2b00      	cmp	r3, #0
 800b288:	d002      	beq.n	800b290 <QSPI_DummyCyclesCfg+0x74>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800b28a:	f06f 0304 	mvn.w	r3, #4
 800b28e:	e03a      	b.n	800b306 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800b290:	4920      	ldr	r1, [pc, #128]	; (800b314 <QSPI_DummyCyclesCfg+0xf8>)
 800b292:	687a      	ldr	r2, [r7, #4]
 800b294:	4613      	mov	r3, r2
 800b296:	005b      	lsls	r3, r3, #1
 800b298:	4413      	add	r3, r2
 800b29a:	009b      	lsls	r3, r3, #2
 800b29c:	440b      	add	r3, r1
 800b29e:	3301      	adds	r3, #1
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	481a      	ldr	r0, [pc, #104]	; (800b310 <QSPI_DummyCyclesCfg+0xf4>)
 800b2a6:	f7fe fd06 	bl	8009cb6 <MT25TL01G_WriteEnable>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d002      	beq.n	800b2b6 <QSPI_DummyCyclesCfg+0x9a>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800b2b0:	f06f 0304 	mvn.w	r3, #4
 800b2b4:	e027      	b.n	800b306 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800b2b6:	2381      	movs	r3, #129	; 0x81
 800b2b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800b2ba:	897a      	ldrh	r2, [r7, #10]
 800b2bc:	f640 730f 	movw	r3, #3855	; 0xf0f
 800b2c0:	4013      	ands	r3, r2
 800b2c2:	b29a      	uxth	r2, r3
 800b2c4:	4b14      	ldr	r3, [pc, #80]	; (800b318 <QSPI_DummyCyclesCfg+0xfc>)
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	817b      	strh	r3, [r7, #10]
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b2cc:	f107 030c 	add.w	r3, r7, #12
 800b2d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2d4:	4619      	mov	r1, r3
 800b2d6:	480e      	ldr	r0, [pc, #56]	; (800b310 <QSPI_DummyCyclesCfg+0xf4>)
 800b2d8:	f003 f9c8 	bl	800e66c <HAL_QSPI_Command>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d002      	beq.n	800b2e8 <QSPI_DummyCyclesCfg+0xcc>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800b2e2:	f06f 0304 	mvn.w	r3, #4
 800b2e6:	e00e      	b.n	800b306 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b2e8:	f107 030a 	add.w	r3, r7, #10
 800b2ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	4807      	ldr	r0, [pc, #28]	; (800b310 <QSPI_DummyCyclesCfg+0xf4>)
 800b2f4:	f003 fa18 	bl	800e728 <HAL_QSPI_Transmit>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d002      	beq.n	800b304 <QSPI_DummyCyclesCfg+0xe8>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800b2fe:	f06f 0304 	mvn.w	r3, #4
 800b302:	e000      	b.n	800b306 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Return BSP status */
  return ret;
 800b304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800b306:	4618      	mov	r0, r3
 800b308:	3748      	adds	r7, #72	; 0x48
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
 800b30e:	bf00      	nop
 800b310:	24008fcc 	.word	0x24008fcc
 800b314:	2400ad04 	.word	0x2400ad04
 800b318:	ffff8080 	.word	0xffff8080

0800b31c <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800b324:	2300      	movs	r3, #0
 800b326:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d003      	beq.n	800b336 <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 800b32e:	f06f 0301 	mvn.w	r3, #1
 800b332:	60fb      	str	r3, [r7, #12]
 800b334:	e044      	b.n	800b3c0 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2234      	movs	r2, #52	; 0x34
 800b33a:	fb02 f303 	mul.w	r3, r2, r3
 800b33e:	4a23      	ldr	r2, [pc, #140]	; (800b3cc <BSP_SDRAM_Init+0xb0>)
 800b340:	4413      	add	r3, r2
 800b342:	4618      	mov	r0, r3
 800b344:	f000 f8b8 	bl	800b4b8 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2234      	movs	r2, #52	; 0x34
 800b34c:	fb02 f303 	mul.w	r3, r2, r3
 800b350:	4a1e      	ldr	r2, [pc, #120]	; (800b3cc <BSP_SDRAM_Init+0xb0>)
 800b352:	4413      	add	r3, r2
 800b354:	2210      	movs	r2, #16
 800b356:	2104      	movs	r1, #4
 800b358:	4618      	mov	r0, r3
 800b35a:	f000 f861 	bl	800b420 <MX_SDRAM_BANK2_Init>
 800b35e:	4603      	mov	r3, r0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d003      	beq.n	800b36c <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 800b364:	f04f 33ff 	mov.w	r3, #4294967295
 800b368:	60fb      	str	r3, [r7, #12]
 800b36a:	e029      	b.n	800b3c0 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800b36c:	4b18      	ldr	r3, [pc, #96]	; (800b3d0 <BSP_SDRAM_Init+0xb4>)
 800b36e:	2208      	movs	r2, #8
 800b370:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 800b372:	4b17      	ldr	r3, [pc, #92]	; (800b3d0 <BSP_SDRAM_Init+0xb4>)
 800b374:	2203      	movs	r2, #3
 800b376:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800b378:	4b15      	ldr	r3, [pc, #84]	; (800b3d0 <BSP_SDRAM_Init+0xb4>)
 800b37a:	f240 6203 	movw	r2, #1539	; 0x603
 800b37e:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 800b380:	4b13      	ldr	r3, [pc, #76]	; (800b3d0 <BSP_SDRAM_Init+0xb4>)
 800b382:	2200      	movs	r2, #0
 800b384:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 800b386:	4b12      	ldr	r3, [pc, #72]	; (800b3d0 <BSP_SDRAM_Init+0xb4>)
 800b388:	2200      	movs	r2, #0
 800b38a:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 800b38c:	4b10      	ldr	r3, [pc, #64]	; (800b3d0 <BSP_SDRAM_Init+0xb4>)
 800b38e:	2230      	movs	r2, #48	; 0x30
 800b390:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 800b392:	4b0f      	ldr	r3, [pc, #60]	; (800b3d0 <BSP_SDRAM_Init+0xb4>)
 800b394:	2200      	movs	r2, #0
 800b396:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 800b398:	4b0d      	ldr	r3, [pc, #52]	; (800b3d0 <BSP_SDRAM_Init+0xb4>)
 800b39a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b39e:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2234      	movs	r2, #52	; 0x34
 800b3a4:	fb02 f303 	mul.w	r3, r2, r3
 800b3a8:	4a08      	ldr	r2, [pc, #32]	; (800b3cc <BSP_SDRAM_Init+0xb0>)
 800b3aa:	4413      	add	r3, r2
 800b3ac:	4908      	ldr	r1, [pc, #32]	; (800b3d0 <BSP_SDRAM_Init+0xb4>)
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7fe fe66 	bl	800a080 <MT48LC4M32B2_Init>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d002      	beq.n	800b3c0 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 800b3ba:	f06f 0304 	mvn.w	r3, #4
 800b3be:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3710      	adds	r7, #16
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	2400ad10 	.word	0x2400ad10
 800b3d0:	2400ad44 	.word	0x2400ad44

0800b3d4 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param  Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	60fb      	str	r3, [r7, #12]

  if(Instance >= SDRAM_INSTANCES_NBR)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d003      	beq.n	800b3ee <BSP_SDRAM_DeInit+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 800b3e6:	f06f 0301 	mvn.w	r3, #1
 800b3ea:	60fb      	str	r3, [r7, #12]
 800b3ec:	e011      	b.n	800b412 <BSP_SDRAM_DeInit+0x3e>
  }
  else
  {
    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2234      	movs	r2, #52	; 0x34
 800b3f2:	fb02 f303 	mul.w	r3, r2, r3
 800b3f6:	4a09      	ldr	r2, [pc, #36]	; (800b41c <BSP_SDRAM_DeInit+0x48>)
 800b3f8:	4413      	add	r3, r2
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f005 ff36 	bl	801126c <HAL_SDRAM_DeInit>
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0)
    /* SDRAM controller de-initialization */
    SDRAM_MspDeInit(&hsdram[Instance]);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2234      	movs	r2, #52	; 0x34
 800b404:	fb02 f303 	mul.w	r3, r2, r3
 800b408:	4a04      	ldr	r2, [pc, #16]	; (800b41c <BSP_SDRAM_DeInit+0x48>)
 800b40a:	4413      	add	r3, r2
 800b40c:	4618      	mov	r0, r3
 800b40e:	f000 f951 	bl	800b6b4 <SDRAM_MspDeInit>
#endif /* (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0) */
  }

  return ret;
 800b412:	68fb      	ldr	r3, [r7, #12]
}
 800b414:	4618      	mov	r0, r3
 800b416:	3710      	adds	r7, #16
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	2400ad10 	.word	0x2400ad10

0800b420 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b08c      	sub	sp, #48	; 0x30
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 800b42c:	4b20      	ldr	r3, [pc, #128]	; (800b4b0 <MX_SDRAM_BANK2_Init+0x90>)
 800b42e:	4a21      	ldr	r2, [pc, #132]	; (800b4b4 <MX_SDRAM_BANK2_Init+0x94>)
 800b430:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2201      	movs	r2, #1
 800b436:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2200      	movs	r2, #0
 800b43c:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	68ba      	ldr	r2, [r7, #8]
 800b442:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800b44a:	4b19      	ldr	r3, [pc, #100]	; (800b4b0 <MX_SDRAM_BANK2_Init+0x90>)
 800b44c:	2240      	movs	r2, #64	; 0x40
 800b44e:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800b456:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2200      	movs	r2, #0
 800b45c:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b464:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b46c:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2200      	movs	r2, #0
 800b472:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 800b474:	2302      	movs	r3, #2
 800b476:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 800b478:	2307      	movs	r3, #7
 800b47a:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 800b47c:	2304      	movs	r3, #4
 800b47e:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 800b480:	2307      	movs	r3, #7
 800b482:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 800b484:	2302      	movs	r3, #2
 800b486:	627b      	str	r3, [r7, #36]	; 0x24
  sdram_timing.RPDelay              = 2;
 800b488:	2302      	movs	r3, #2
 800b48a:	62bb      	str	r3, [r7, #40]	; 0x28
  sdram_timing.RCDDelay             = 2;
 800b48c:	2302      	movs	r3, #2
 800b48e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800b490:	f107 0314 	add.w	r3, r7, #20
 800b494:	4619      	mov	r1, r3
 800b496:	68f8      	ldr	r0, [r7, #12]
 800b498:	f005 feac 	bl	80111f4 <HAL_SDRAM_Init>
 800b49c:	4603      	mov	r3, r0
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d001      	beq.n	800b4a6 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	e000      	b.n	800b4a8 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 800b4a6:	2300      	movs	r3, #0
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3730      	adds	r7, #48	; 0x30
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}
 800b4b0:	2400ad10 	.word	0x2400ad10
 800b4b4:	52004140 	.word	0x52004140

0800b4b8 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b08e      	sub	sp, #56	; 0x38
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800b4c0:	4b73      	ldr	r3, [pc, #460]	; (800b690 <SDRAM_MspInit+0x1d8>)
 800b4c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b4c6:	4a72      	ldr	r2, [pc, #456]	; (800b690 <SDRAM_MspInit+0x1d8>)
 800b4c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b4cc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800b4d0:	4b6f      	ldr	r3, [pc, #444]	; (800b690 <SDRAM_MspInit+0x1d8>)
 800b4d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b4d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b4da:	623b      	str	r3, [r7, #32]
 800b4dc:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 800b4de:	4b6c      	ldr	r3, [pc, #432]	; (800b690 <SDRAM_MspInit+0x1d8>)
 800b4e0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b4e4:	4a6a      	ldr	r2, [pc, #424]	; (800b690 <SDRAM_MspInit+0x1d8>)
 800b4e6:	f043 0301 	orr.w	r3, r3, #1
 800b4ea:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800b4ee:	4b68      	ldr	r3, [pc, #416]	; (800b690 <SDRAM_MspInit+0x1d8>)
 800b4f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b4f4:	f003 0301 	and.w	r3, r3, #1
 800b4f8:	61fb      	str	r3, [r7, #28]
 800b4fa:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b4fc:	4b64      	ldr	r3, [pc, #400]	; (800b690 <SDRAM_MspInit+0x1d8>)
 800b4fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b502:	4a63      	ldr	r2, [pc, #396]	; (800b690 <SDRAM_MspInit+0x1d8>)
 800b504:	f043 0308 	orr.w	r3, r3, #8
 800b508:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b50c:	4b60      	ldr	r3, [pc, #384]	; (800b690 <SDRAM_MspInit+0x1d8>)
 800b50e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b512:	f003 0308 	and.w	r3, r3, #8
 800b516:	61bb      	str	r3, [r7, #24]
 800b518:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800b51a:	4b5d      	ldr	r3, [pc, #372]	; (800b690 <SDRAM_MspInit+0x1d8>)
 800b51c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b520:	4a5b      	ldr	r2, [pc, #364]	; (800b690 <SDRAM_MspInit+0x1d8>)
 800b522:	f043 0310 	orr.w	r3, r3, #16
 800b526:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b52a:	4b59      	ldr	r3, [pc, #356]	; (800b690 <SDRAM_MspInit+0x1d8>)
 800b52c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b530:	f003 0310 	and.w	r3, r3, #16
 800b534:	617b      	str	r3, [r7, #20]
 800b536:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800b538:	4b55      	ldr	r3, [pc, #340]	; (800b690 <SDRAM_MspInit+0x1d8>)
 800b53a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b53e:	4a54      	ldr	r2, [pc, #336]	; (800b690 <SDRAM_MspInit+0x1d8>)
 800b540:	f043 0320 	orr.w	r3, r3, #32
 800b544:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b548:	4b51      	ldr	r3, [pc, #324]	; (800b690 <SDRAM_MspInit+0x1d8>)
 800b54a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b54e:	f003 0320 	and.w	r3, r3, #32
 800b552:	613b      	str	r3, [r7, #16]
 800b554:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800b556:	4b4e      	ldr	r3, [pc, #312]	; (800b690 <SDRAM_MspInit+0x1d8>)
 800b558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b55c:	4a4c      	ldr	r2, [pc, #304]	; (800b690 <SDRAM_MspInit+0x1d8>)
 800b55e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b562:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b566:	4b4a      	ldr	r3, [pc, #296]	; (800b690 <SDRAM_MspInit+0x1d8>)
 800b568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b56c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b570:	60fb      	str	r3, [r7, #12]
 800b572:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b574:	4b46      	ldr	r3, [pc, #280]	; (800b690 <SDRAM_MspInit+0x1d8>)
 800b576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b57a:	4a45      	ldr	r2, [pc, #276]	; (800b690 <SDRAM_MspInit+0x1d8>)
 800b57c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b580:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b584:	4b42      	ldr	r3, [pc, #264]	; (800b690 <SDRAM_MspInit+0x1d8>)
 800b586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b58a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b58e:	60bb      	str	r3, [r7, #8]
 800b590:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800b592:	2302      	movs	r3, #2
 800b594:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800b596:	2301      	movs	r3, #1
 800b598:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800b59a:	2303      	movs	r3, #3
 800b59c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800b59e:	230c      	movs	r3, #12
 800b5a0:	637b      	str	r3, [r7, #52]	; 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800b5a2:	f24c 7303 	movw	r3, #50947	; 0xc703
 800b5a6:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800b5a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	4839      	ldr	r0, [pc, #228]	; (800b694 <SDRAM_MspInit+0x1dc>)
 800b5b0:	f000 ff62 	bl	800c478 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800b5b4:	f64f 7383 	movw	r3, #65411	; 0xff83
 800b5b8:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800b5ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5be:	4619      	mov	r1, r3
 800b5c0:	4835      	ldr	r0, [pc, #212]	; (800b698 <SDRAM_MspInit+0x1e0>)
 800b5c2:	f000 ff59 	bl	800c478 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800b5c6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800b5ca:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800b5cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	4832      	ldr	r0, [pc, #200]	; (800b69c <SDRAM_MspInit+0x1e4>)
 800b5d4:	f000 ff50 	bl	800c478 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 800b5d8:	f248 1333 	movw	r3, #33075	; 0x8133
 800b5dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800b5de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	482e      	ldr	r0, [pc, #184]	; (800b6a0 <SDRAM_MspInit+0x1e8>)
 800b5e6:	f000 ff47 	bl	800c478 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 800b5ea:	23e0      	movs	r3, #224	; 0xe0
 800b5ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800b5ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	482b      	ldr	r0, [pc, #172]	; (800b6a4 <SDRAM_MspInit+0x1ec>)
 800b5f6:	f000 ff3f 	bl	800c478 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 800b5fa:	4b2b      	ldr	r3, [pc, #172]	; (800b6a8 <SDRAM_MspInit+0x1f0>)
 800b5fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b600:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 800b602:	4b29      	ldr	r3, [pc, #164]	; (800b6a8 <SDRAM_MspInit+0x1f0>)
 800b604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b608:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 800b60a:	4b27      	ldr	r3, [pc, #156]	; (800b6a8 <SDRAM_MspInit+0x1f0>)
 800b60c:	2280      	movs	r2, #128	; 0x80
 800b60e:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800b610:	4b25      	ldr	r3, [pc, #148]	; (800b6a8 <SDRAM_MspInit+0x1f0>)
 800b612:	2200      	movs	r2, #0
 800b614:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 800b616:	4b24      	ldr	r3, [pc, #144]	; (800b6a8 <SDRAM_MspInit+0x1f0>)
 800b618:	f240 2202 	movw	r2, #514	; 0x202
 800b61c:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 800b61e:	4b22      	ldr	r3, [pc, #136]	; (800b6a8 <SDRAM_MspInit+0x1f0>)
 800b620:	f640 0208 	movw	r2, #2056	; 0x808
 800b624:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800b626:	4b20      	ldr	r3, [pc, #128]	; (800b6a8 <SDRAM_MspInit+0x1f0>)
 800b628:	2220      	movs	r2, #32
 800b62a:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 800b62c:	4b1e      	ldr	r3, [pc, #120]	; (800b6a8 <SDRAM_MspInit+0x1f0>)
 800b62e:	2280      	movs	r2, #128	; 0x80
 800b630:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800b632:	4b1d      	ldr	r3, [pc, #116]	; (800b6a8 <SDRAM_MspInit+0x1f0>)
 800b634:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b638:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 800b63a:	4b1b      	ldr	r3, [pc, #108]	; (800b6a8 <SDRAM_MspInit+0x1f0>)
 800b63c:	2200      	movs	r2, #0
 800b63e:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 800b640:	4b19      	ldr	r3, [pc, #100]	; (800b6a8 <SDRAM_MspInit+0x1f0>)
 800b642:	2200      	movs	r2, #0
 800b644:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 800b646:	4b18      	ldr	r3, [pc, #96]	; (800b6a8 <SDRAM_MspInit+0x1f0>)
 800b648:	2280      	movs	r2, #128	; 0x80
 800b64a:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 800b64c:	4b16      	ldr	r3, [pc, #88]	; (800b6a8 <SDRAM_MspInit+0x1f0>)
 800b64e:	2200      	movs	r2, #0
 800b650:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 800b652:	4b15      	ldr	r3, [pc, #84]	; (800b6a8 <SDRAM_MspInit+0x1f0>)
 800b654:	2200      	movs	r2, #0
 800b656:	639a      	str	r2, [r3, #56]	; 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800b658:	4b13      	ldr	r3, [pc, #76]	; (800b6a8 <SDRAM_MspInit+0x1f0>)
 800b65a:	4a14      	ldr	r2, [pc, #80]	; (800b6ac <SDRAM_MspInit+0x1f4>)
 800b65c:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800b65e:	4b14      	ldr	r3, [pc, #80]	; (800b6b0 <SDRAM_MspInit+0x1f8>)
 800b660:	4a11      	ldr	r2, [pc, #68]	; (800b6a8 <SDRAM_MspInit+0x1f0>)
 800b662:	631a      	str	r2, [r3, #48]	; 0x30
 800b664:	4b10      	ldr	r3, [pc, #64]	; (800b6a8 <SDRAM_MspInit+0x1f0>)
 800b666:	4a12      	ldr	r2, [pc, #72]	; (800b6b0 <SDRAM_MspInit+0x1f8>)
 800b668:	641a      	str	r2, [r3, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 800b66a:	480f      	ldr	r0, [pc, #60]	; (800b6a8 <SDRAM_MspInit+0x1f0>)
 800b66c:	f002 fc5e 	bl	800df2c <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 800b670:	480d      	ldr	r0, [pc, #52]	; (800b6a8 <SDRAM_MspInit+0x1f0>)
 800b672:	f002 fc0f 	bl	800de94 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 800b676:	2200      	movs	r2, #0
 800b678:	210f      	movs	r1, #15
 800b67a:	207a      	movs	r0, #122	; 0x7a
 800b67c:	f000 fbec 	bl	800be58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 800b680:	207a      	movs	r0, #122	; 0x7a
 800b682:	f000 fc03 	bl	800be8c <HAL_NVIC_EnableIRQ>
}
 800b686:	bf00      	nop
 800b688:	3738      	adds	r7, #56	; 0x38
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop
 800b690:	58024400 	.word	0x58024400
 800b694:	58020c00 	.word	0x58020c00
 800b698:	58021000 	.word	0x58021000
 800b69c:	58021400 	.word	0x58021400
 800b6a0:	58021800 	.word	0x58021800
 800b6a4:	58021c00 	.word	0x58021c00
 800b6a8:	2400ad64 	.word	0x2400ad64
 800b6ac:	52000040 	.word	0x52000040
 800b6b0:	2400ad10 	.word	0x2400ad10

0800b6b4 <SDRAM_MspDeInit>:
  * @brief  DeInitializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspDeInit(SDRAM_HandleTypeDef  *hSdram)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b082      	sub	sp, #8
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSdram);

  /* Disable NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 800b6bc:	207a      	movs	r0, #122	; 0x7a
 800b6be:	f000 fbf3 	bl	800bea8 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800b6c2:	4b05      	ldr	r3, [pc, #20]	; (800b6d8 <SDRAM_MspDeInit+0x24>)
 800b6c4:	4a05      	ldr	r2, [pc, #20]	; (800b6dc <SDRAM_MspDeInit+0x28>)
 800b6c6:	601a      	str	r2, [r3, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800b6c8:	4803      	ldr	r0, [pc, #12]	; (800b6d8 <SDRAM_MspDeInit+0x24>)
 800b6ca:	f002 fc2f 	bl	800df2c <HAL_MDMA_DeInit>
}
 800b6ce:	bf00      	nop
 800b6d0:	3708      	adds	r7, #8
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	bf00      	nop
 800b6d8:	2400add0 	.word	0x2400add0
 800b6dc:	52000040 	.word	0x52000040

0800b6e0 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b088      	sub	sp, #32
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d11c      	bne.n	800b72e <BSP_TS_Init+0x4e>
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d018      	beq.n	800b72e <BSP_TS_Init+0x4e>
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800b704:	d813      	bhi.n	800b72e <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d00f      	beq.n	800b72e <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800b716:	d80a      	bhi.n	800b72e <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	68da      	ldr	r2, [r3, #12]
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	6819      	ldr	r1, [r3, #0]
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	428b      	cmp	r3, r1
 800b726:	bf28      	it	cs
 800b728:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800b72a:	429a      	cmp	r2, r3
 800b72c:	d903      	bls.n	800b736 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b72e:	f06f 0301 	mvn.w	r3, #1
 800b732:	61fb      	str	r3, [r7, #28]
 800b734:	e085      	b.n	800b842 <BSP_TS_Init+0x162>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f000 f9e6 	bl	800bb08 <FT5336_Probe>
 800b73c:	4603      	mov	r3, r0
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d003      	beq.n	800b74a <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 800b742:	f04f 33ff 	mov.w	r3, #4294967295
 800b746:	61fb      	str	r3, [r7, #28]
 800b748:	e07b      	b.n	800b842 <BSP_TS_Init+0x162>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	6819      	ldr	r1, [r3, #0]
 800b74e:	483f      	ldr	r0, [pc, #252]	; (800b84c <BSP_TS_Init+0x16c>)
 800b750:	687a      	ldr	r2, [r7, #4]
 800b752:	4613      	mov	r3, r2
 800b754:	009b      	lsls	r3, r3, #2
 800b756:	4413      	add	r3, r2
 800b758:	00db      	lsls	r3, r3, #3
 800b75a:	4403      	add	r3, r0
 800b75c:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	6859      	ldr	r1, [r3, #4]
 800b762:	483a      	ldr	r0, [pc, #232]	; (800b84c <BSP_TS_Init+0x16c>)
 800b764:	687a      	ldr	r2, [r7, #4]
 800b766:	4613      	mov	r3, r2
 800b768:	009b      	lsls	r3, r3, #2
 800b76a:	4413      	add	r3, r2
 800b76c:	00db      	lsls	r3, r3, #3
 800b76e:	4403      	add	r3, r0
 800b770:	3304      	adds	r3, #4
 800b772:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	6899      	ldr	r1, [r3, #8]
 800b778:	4834      	ldr	r0, [pc, #208]	; (800b84c <BSP_TS_Init+0x16c>)
 800b77a:	687a      	ldr	r2, [r7, #4]
 800b77c:	4613      	mov	r3, r2
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	4413      	add	r3, r2
 800b782:	00db      	lsls	r3, r3, #3
 800b784:	4403      	add	r3, r0
 800b786:	3308      	adds	r3, #8
 800b788:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	68d9      	ldr	r1, [r3, #12]
 800b78e:	482f      	ldr	r0, [pc, #188]	; (800b84c <BSP_TS_Init+0x16c>)
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	4613      	mov	r3, r2
 800b794:	009b      	lsls	r3, r3, #2
 800b796:	4413      	add	r3, r2
 800b798:	00db      	lsls	r3, r3, #3
 800b79a:	4403      	add	r3, r0
 800b79c:	330c      	adds	r3, #12
 800b79e:	6019      	str	r1, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800b7a0:	4b2b      	ldr	r3, [pc, #172]	; (800b850 <BSP_TS_Init+0x170>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	69db      	ldr	r3, [r3, #28]
 800b7a6:	492b      	ldr	r1, [pc, #172]	; (800b854 <BSP_TS_Init+0x174>)
 800b7a8:	687a      	ldr	r2, [r7, #4]
 800b7aa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b7ae:	f107 010c 	add.w	r1, r7, #12
 800b7b2:	4610      	mov	r0, r2
 800b7b4:	4798      	blx	r3
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	da03      	bge.n	800b7c4 <BSP_TS_Init+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b7bc:	f06f 0304 	mvn.w	r3, #4
 800b7c0:	61fb      	str	r3, [r7, #28]
 800b7c2:	e03e      	b.n	800b842 <BSP_TS_Init+0x162>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800b7c4:	6939      	ldr	r1, [r7, #16]
 800b7c6:	4821      	ldr	r0, [pc, #132]	; (800b84c <BSP_TS_Init+0x16c>)
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	4613      	mov	r3, r2
 800b7cc:	009b      	lsls	r3, r3, #2
 800b7ce:	4413      	add	r3, r2
 800b7d0:	00db      	lsls	r3, r3, #3
 800b7d2:	4403      	add	r3, r0
 800b7d4:	3310      	adds	r3, #16
 800b7d6:	6019      	str	r1, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800b7d8:	6979      	ldr	r1, [r7, #20]
 800b7da:	481c      	ldr	r0, [pc, #112]	; (800b84c <BSP_TS_Init+0x16c>)
 800b7dc:	687a      	ldr	r2, [r7, #4]
 800b7de:	4613      	mov	r3, r2
 800b7e0:	009b      	lsls	r3, r3, #2
 800b7e2:	4413      	add	r3, r2
 800b7e4:	00db      	lsls	r3, r3, #3
 800b7e6:	4403      	add	r3, r0
 800b7e8:	3314      	adds	r3, #20
 800b7ea:	6019      	str	r1, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	61bb      	str	r3, [r7, #24]
 800b7f0:	e024      	b.n	800b83c <BSP_TS_Init+0x15c>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	681a      	ldr	r2, [r3, #0]
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	4413      	add	r3, r2
 800b7fc:	1c59      	adds	r1, r3, #1
 800b7fe:	4813      	ldr	r0, [pc, #76]	; (800b84c <BSP_TS_Init+0x16c>)
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	4613      	mov	r3, r2
 800b804:	009b      	lsls	r3, r3, #2
 800b806:	4413      	add	r3, r2
 800b808:	005b      	lsls	r3, r3, #1
 800b80a:	69ba      	ldr	r2, [r7, #24]
 800b80c:	4413      	add	r3, r2
 800b80e:	3306      	adds	r3, #6
 800b810:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	685a      	ldr	r2, [r3, #4]
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	68db      	ldr	r3, [r3, #12]
 800b81c:	4413      	add	r3, r2
 800b81e:	1c59      	adds	r1, r3, #1
 800b820:	480a      	ldr	r0, [pc, #40]	; (800b84c <BSP_TS_Init+0x16c>)
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	4613      	mov	r3, r2
 800b826:	009b      	lsls	r3, r3, #2
 800b828:	4413      	add	r3, r2
 800b82a:	005b      	lsls	r3, r3, #1
 800b82c:	69ba      	ldr	r2, [r7, #24]
 800b82e:	4413      	add	r3, r2
 800b830:	3308      	adds	r3, #8
 800b832:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	3301      	adds	r3, #1
 800b83a:	61bb      	str	r3, [r7, #24]
 800b83c:	69bb      	ldr	r3, [r7, #24]
 800b83e:	2b01      	cmp	r3, #1
 800b840:	d9d7      	bls.n	800b7f2 <BSP_TS_Init+0x112>
        }
      }
    }
  }

  return ret;
 800b842:	69fb      	ldr	r3, [r7, #28]
}
 800b844:	4618      	mov	r0, r3
 800b846:	3720      	adds	r7, #32
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}
 800b84c:	2400ae44 	.word	0x2400ae44
 800b850:	2400ae3c 	.word	0x2400ae3c
 800b854:	2400ae40 	.word	0x2400ae40

0800b858 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b08a      	sub	sp, #40	; 0x28
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b862:	2300      	movs	r3, #0
 800b864:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d003      	beq.n	800b874 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b86c:	f06f 0301 	mvn.w	r3, #1
 800b870:	627b      	str	r3, [r7, #36]	; 0x24
 800b872:	e13e      	b.n	800baf2 <BSP_TS_GetState+0x29a>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800b874:	4ba1      	ldr	r3, [pc, #644]	; (800bafc <BSP_TS_GetState+0x2a4>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	691b      	ldr	r3, [r3, #16]
 800b87a:	49a1      	ldr	r1, [pc, #644]	; (800bb00 <BSP_TS_GetState+0x2a8>)
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b882:	f107 0108 	add.w	r1, r7, #8
 800b886:	4610      	mov	r0, r2
 800b888:	4798      	blx	r3
 800b88a:	4603      	mov	r3, r0
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	da03      	bge.n	800b898 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b890:	f06f 0304 	mvn.w	r3, #4
 800b894:	627b      	str	r3, [r7, #36]	; 0x24
 800b896:	e12c      	b.n	800baf2 <BSP_TS_GetState+0x29a>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	f000 8110 	beq.w	800bac0 <BSP_TS_GetState+0x268>
    {
      x_oriented = state.TouchX;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800b8a8:	4996      	ldr	r1, [pc, #600]	; (800bb04 <BSP_TS_GetState+0x2ac>)
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	4613      	mov	r3, r2
 800b8ae:	009b      	lsls	r3, r3, #2
 800b8b0:	4413      	add	r3, r2
 800b8b2:	00db      	lsls	r3, r3, #3
 800b8b4:	440b      	add	r3, r1
 800b8b6:	3308      	adds	r3, #8
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f003 0308 	and.w	r3, r3, #8
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d003      	beq.n	800b8ca <BSP_TS_GetState+0x72>
      {
        x_oriented = state.TouchY;
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800b8ca:	498e      	ldr	r1, [pc, #568]	; (800bb04 <BSP_TS_GetState+0x2ac>)
 800b8cc:	687a      	ldr	r2, [r7, #4]
 800b8ce:	4613      	mov	r3, r2
 800b8d0:	009b      	lsls	r3, r3, #2
 800b8d2:	4413      	add	r3, r2
 800b8d4:	00db      	lsls	r3, r3, #3
 800b8d6:	440b      	add	r3, r1
 800b8d8:	3308      	adds	r3, #8
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f003 0302 	and.w	r3, r3, #2
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d00c      	beq.n	800b8fe <BSP_TS_GetState+0xa6>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800b8e4:	4987      	ldr	r1, [pc, #540]	; (800bb04 <BSP_TS_GetState+0x2ac>)
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	4613      	mov	r3, r2
 800b8ea:	009b      	lsls	r3, r3, #2
 800b8ec:	4413      	add	r3, r2
 800b8ee:	00db      	lsls	r3, r3, #3
 800b8f0:	440b      	add	r3, r1
 800b8f2:	3310      	adds	r3, #16
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	1ad3      	subs	r3, r2, r3
 800b8fa:	3b01      	subs	r3, #1
 800b8fc:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800b8fe:	4981      	ldr	r1, [pc, #516]	; (800bb04 <BSP_TS_GetState+0x2ac>)
 800b900:	687a      	ldr	r2, [r7, #4]
 800b902:	4613      	mov	r3, r2
 800b904:	009b      	lsls	r3, r3, #2
 800b906:	4413      	add	r3, r2
 800b908:	00db      	lsls	r3, r3, #3
 800b90a:	440b      	add	r3, r1
 800b90c:	3308      	adds	r3, #8
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f003 0304 	and.w	r3, r3, #4
 800b914:	2b00      	cmp	r3, #0
 800b916:	d00b      	beq.n	800b930 <BSP_TS_GetState+0xd8>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800b918:	497a      	ldr	r1, [pc, #488]	; (800bb04 <BSP_TS_GetState+0x2ac>)
 800b91a:	687a      	ldr	r2, [r7, #4]
 800b91c:	4613      	mov	r3, r2
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	4413      	add	r3, r2
 800b922:	00db      	lsls	r3, r3, #3
 800b924:	440b      	add	r3, r1
 800b926:	3314      	adds	r3, #20
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	1ad3      	subs	r3, r2, r3
 800b92e:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800b930:	4974      	ldr	r1, [pc, #464]	; (800bb04 <BSP_TS_GetState+0x2ac>)
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	4613      	mov	r3, r2
 800b936:	009b      	lsls	r3, r3, #2
 800b938:	4413      	add	r3, r2
 800b93a:	00db      	lsls	r3, r3, #3
 800b93c:	440b      	add	r3, r1
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	6a3a      	ldr	r2, [r7, #32]
 800b942:	fb02 f103 	mul.w	r1, r2, r3
 800b946:	486f      	ldr	r0, [pc, #444]	; (800bb04 <BSP_TS_GetState+0x2ac>)
 800b948:	687a      	ldr	r2, [r7, #4]
 800b94a:	4613      	mov	r3, r2
 800b94c:	009b      	lsls	r3, r3, #2
 800b94e:	4413      	add	r3, r2
 800b950:	00db      	lsls	r3, r3, #3
 800b952:	4403      	add	r3, r0
 800b954:	3310      	adds	r3, #16
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	fbb1 f2f3 	udiv	r2, r1, r3
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800b960:	4968      	ldr	r1, [pc, #416]	; (800bb04 <BSP_TS_GetState+0x2ac>)
 800b962:	687a      	ldr	r2, [r7, #4]
 800b964:	4613      	mov	r3, r2
 800b966:	009b      	lsls	r3, r3, #2
 800b968:	4413      	add	r3, r2
 800b96a:	00db      	lsls	r3, r3, #3
 800b96c:	440b      	add	r3, r1
 800b96e:	3304      	adds	r3, #4
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	69fa      	ldr	r2, [r7, #28]
 800b974:	fb02 f103 	mul.w	r1, r2, r3
 800b978:	4862      	ldr	r0, [pc, #392]	; (800bb04 <BSP_TS_GetState+0x2ac>)
 800b97a:	687a      	ldr	r2, [r7, #4]
 800b97c:	4613      	mov	r3, r2
 800b97e:	009b      	lsls	r3, r3, #2
 800b980:	4413      	add	r3, r2
 800b982:	00db      	lsls	r3, r3, #3
 800b984:	4403      	add	r3, r0
 800b986:	3314      	adds	r3, #20
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	fbb1 f2f3 	udiv	r2, r1, r3
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 800b992:	68ba      	ldr	r2, [r7, #8]
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	6859      	ldr	r1, [r3, #4]
 800b99c:	4859      	ldr	r0, [pc, #356]	; (800bb04 <BSP_TS_GetState+0x2ac>)
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	4613      	mov	r3, r2
 800b9a2:	009b      	lsls	r3, r3, #2
 800b9a4:	4413      	add	r3, r2
 800b9a6:	00db      	lsls	r3, r3, #3
 800b9a8:	4403      	add	r3, r0
 800b9aa:	3318      	adds	r3, #24
 800b9ac:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800b9ae:	4299      	cmp	r1, r3
 800b9b0:	d90c      	bls.n	800b9cc <BSP_TS_GetState+0x174>
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	6859      	ldr	r1, [r3, #4]
 800b9b6:	4853      	ldr	r0, [pc, #332]	; (800bb04 <BSP_TS_GetState+0x2ac>)
 800b9b8:	687a      	ldr	r2, [r7, #4]
 800b9ba:	4613      	mov	r3, r2
 800b9bc:	009b      	lsls	r3, r3, #2
 800b9be:	4413      	add	r3, r2
 800b9c0:	00db      	lsls	r3, r3, #3
 800b9c2:	4403      	add	r3, r0
 800b9c4:	3318      	adds	r3, #24
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	1acb      	subs	r3, r1, r3
 800b9ca:	e00b      	b.n	800b9e4 <BSP_TS_GetState+0x18c>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 800b9cc:	494d      	ldr	r1, [pc, #308]	; (800bb04 <BSP_TS_GetState+0x2ac>)
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	4613      	mov	r3, r2
 800b9d2:	009b      	lsls	r3, r3, #2
 800b9d4:	4413      	add	r3, r2
 800b9d6:	00db      	lsls	r3, r3, #3
 800b9d8:	440b      	add	r3, r1
 800b9da:	3318      	adds	r3, #24
 800b9dc:	681a      	ldr	r2, [r3, #0]
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800b9e2:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800b9e4:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	6899      	ldr	r1, [r3, #8]
 800b9ea:	4846      	ldr	r0, [pc, #280]	; (800bb04 <BSP_TS_GetState+0x2ac>)
 800b9ec:	687a      	ldr	r2, [r7, #4]
 800b9ee:	4613      	mov	r3, r2
 800b9f0:	009b      	lsls	r3, r3, #2
 800b9f2:	4413      	add	r3, r2
 800b9f4:	00db      	lsls	r3, r3, #3
 800b9f6:	4403      	add	r3, r0
 800b9f8:	3320      	adds	r3, #32
 800b9fa:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800b9fc:	4299      	cmp	r1, r3
 800b9fe:	d90c      	bls.n	800ba1a <BSP_TS_GetState+0x1c2>
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	6899      	ldr	r1, [r3, #8]
 800ba04:	483f      	ldr	r0, [pc, #252]	; (800bb04 <BSP_TS_GetState+0x2ac>)
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	4613      	mov	r3, r2
 800ba0a:	009b      	lsls	r3, r3, #2
 800ba0c:	4413      	add	r3, r2
 800ba0e:	00db      	lsls	r3, r3, #3
 800ba10:	4403      	add	r3, r0
 800ba12:	3320      	adds	r3, #32
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	1acb      	subs	r3, r1, r3
 800ba18:	e00b      	b.n	800ba32 <BSP_TS_GetState+0x1da>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 800ba1a:	493a      	ldr	r1, [pc, #232]	; (800bb04 <BSP_TS_GetState+0x2ac>)
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	4613      	mov	r3, r2
 800ba20:	009b      	lsls	r3, r3, #2
 800ba22:	4413      	add	r3, r2
 800ba24:	00db      	lsls	r3, r3, #3
 800ba26:	440b      	add	r3, r1
 800ba28:	3320      	adds	r3, #32
 800ba2a:	681a      	ldr	r2, [r3, #0]
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800ba30:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800ba32:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800ba34:	4933      	ldr	r1, [pc, #204]	; (800bb04 <BSP_TS_GetState+0x2ac>)
 800ba36:	687a      	ldr	r2, [r7, #4]
 800ba38:	4613      	mov	r3, r2
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	4413      	add	r3, r2
 800ba3e:	00db      	lsls	r3, r3, #3
 800ba40:	440b      	add	r3, r1
 800ba42:	330c      	adds	r3, #12
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	69ba      	ldr	r2, [r7, #24]
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d80b      	bhi.n	800ba64 <BSP_TS_GetState+0x20c>
 800ba4c:	492d      	ldr	r1, [pc, #180]	; (800bb04 <BSP_TS_GetState+0x2ac>)
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	4613      	mov	r3, r2
 800ba52:	009b      	lsls	r3, r3, #2
 800ba54:	4413      	add	r3, r2
 800ba56:	00db      	lsls	r3, r3, #3
 800ba58:	440b      	add	r3, r1
 800ba5a:	330c      	adds	r3, #12
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	697a      	ldr	r2, [r7, #20]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d916      	bls.n	800ba92 <BSP_TS_GetState+0x23a>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	6859      	ldr	r1, [r3, #4]
 800ba68:	4826      	ldr	r0, [pc, #152]	; (800bb04 <BSP_TS_GetState+0x2ac>)
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	4613      	mov	r3, r2
 800ba6e:	009b      	lsls	r3, r3, #2
 800ba70:	4413      	add	r3, r2
 800ba72:	00db      	lsls	r3, r3, #3
 800ba74:	4403      	add	r3, r0
 800ba76:	3318      	adds	r3, #24
 800ba78:	6019      	str	r1, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	6899      	ldr	r1, [r3, #8]
 800ba7e:	4821      	ldr	r0, [pc, #132]	; (800bb04 <BSP_TS_GetState+0x2ac>)
 800ba80:	687a      	ldr	r2, [r7, #4]
 800ba82:	4613      	mov	r3, r2
 800ba84:	009b      	lsls	r3, r3, #2
 800ba86:	4413      	add	r3, r2
 800ba88:	00db      	lsls	r3, r3, #3
 800ba8a:	4403      	add	r3, r0
 800ba8c:	3320      	adds	r3, #32
 800ba8e:	6019      	str	r1, [r3, #0]
 800ba90:	e02f      	b.n	800baf2 <BSP_TS_GetState+0x29a>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800ba92:	491c      	ldr	r1, [pc, #112]	; (800bb04 <BSP_TS_GetState+0x2ac>)
 800ba94:	687a      	ldr	r2, [r7, #4]
 800ba96:	4613      	mov	r3, r2
 800ba98:	009b      	lsls	r3, r3, #2
 800ba9a:	4413      	add	r3, r2
 800ba9c:	00db      	lsls	r3, r3, #3
 800ba9e:	440b      	add	r3, r1
 800baa0:	3318      	adds	r3, #24
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800baa8:	4916      	ldr	r1, [pc, #88]	; (800bb04 <BSP_TS_GetState+0x2ac>)
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	4613      	mov	r3, r2
 800baae:	009b      	lsls	r3, r3, #2
 800bab0:	4413      	add	r3, r2
 800bab2:	00db      	lsls	r3, r3, #3
 800bab4:	440b      	add	r3, r1
 800bab6:	3320      	adds	r3, #32
 800bab8:	681a      	ldr	r2, [r3, #0]
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	609a      	str	r2, [r3, #8]
 800babe:	e018      	b.n	800baf2 <BSP_TS_GetState+0x29a>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	2200      	movs	r2, #0
 800bac4:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800bac6:	490f      	ldr	r1, [pc, #60]	; (800bb04 <BSP_TS_GetState+0x2ac>)
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	4613      	mov	r3, r2
 800bacc:	009b      	lsls	r3, r3, #2
 800bace:	4413      	add	r3, r2
 800bad0:	00db      	lsls	r3, r3, #3
 800bad2:	440b      	add	r3, r1
 800bad4:	3318      	adds	r3, #24
 800bad6:	681a      	ldr	r2, [r3, #0]
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800badc:	4909      	ldr	r1, [pc, #36]	; (800bb04 <BSP_TS_GetState+0x2ac>)
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	4613      	mov	r3, r2
 800bae2:	009b      	lsls	r3, r3, #2
 800bae4:	4413      	add	r3, r2
 800bae6:	00db      	lsls	r3, r3, #3
 800bae8:	440b      	add	r3, r1
 800baea:	3320      	adds	r3, #32
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	609a      	str	r2, [r3, #8]
    }
}

return ret;
 800baf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3728      	adds	r7, #40	; 0x28
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}
 800bafc:	2400ae3c 	.word	0x2400ae3c
 800bb00:	2400ae40 	.word	0x2400ae40
 800bb04:	2400ae44 	.word	0x2400ae44

0800bb08 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b08a      	sub	sp, #40	; 0x28
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800bb10:	2300      	movs	r3, #0
 800bb12:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 800bb14:	2300      	movs	r3, #0
 800bb16:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 800bb18:	2370      	movs	r3, #112	; 0x70
 800bb1a:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 800bb1c:	4b23      	ldr	r3, [pc, #140]	; (800bbac <FT5336_Probe+0xa4>)
 800bb1e:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800bb20:	4b23      	ldr	r3, [pc, #140]	; (800bbb0 <FT5336_Probe+0xa8>)
 800bb22:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800bb24:	4b23      	ldr	r3, [pc, #140]	; (800bbb4 <FT5336_Probe+0xac>)
 800bb26:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800bb28:	4b23      	ldr	r3, [pc, #140]	; (800bbb8 <FT5336_Probe+0xb0>)
 800bb2a:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 800bb2c:	4b23      	ldr	r3, [pc, #140]	; (800bbbc <FT5336_Probe+0xb4>)
 800bb2e:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800bb30:	f107 030c 	add.w	r3, r7, #12
 800bb34:	4619      	mov	r1, r3
 800bb36:	4822      	ldr	r0, [pc, #136]	; (800bbc0 <FT5336_Probe+0xb8>)
 800bb38:	f7fd fcb2 	bl	80094a0 <FT5336_RegisterBusIO>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d003      	beq.n	800bb4a <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800bb42:	f06f 0307 	mvn.w	r3, #7
 800bb46:	627b      	str	r3, [r7, #36]	; 0x24
 800bb48:	e02a      	b.n	800bba0 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 800bb4a:	f107 0308 	add.w	r3, r7, #8
 800bb4e:	4619      	mov	r1, r3
 800bb50:	481b      	ldr	r0, [pc, #108]	; (800bbc0 <FT5336_Probe+0xb8>)
 800bb52:	f7fd fd9f 	bl	8009694 <FT5336_ReadID>
 800bb56:	4603      	mov	r3, r0
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d003      	beq.n	800bb64 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800bb5c:	f06f 0304 	mvn.w	r3, #4
 800bb60:	627b      	str	r3, [r7, #36]	; 0x24
 800bb62:	e01d      	b.n	800bba0 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	2b51      	cmp	r3, #81	; 0x51
 800bb68:	d003      	beq.n	800bb72 <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bb6a:	f06f 0306 	mvn.w	r3, #6
 800bb6e:	627b      	str	r3, [r7, #36]	; 0x24
 800bb70:	e016      	b.n	800bba0 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 800bb72:	4a14      	ldr	r2, [pc, #80]	; (800bbc4 <FT5336_Probe+0xbc>)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	4912      	ldr	r1, [pc, #72]	; (800bbc0 <FT5336_Probe+0xb8>)
 800bb78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800bb7c:	4b12      	ldr	r3, [pc, #72]	; (800bbc8 <FT5336_Probe+0xc0>)
 800bb7e:	4a13      	ldr	r2, [pc, #76]	; (800bbcc <FT5336_Probe+0xc4>)
 800bb80:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800bb82:	4b11      	ldr	r3, [pc, #68]	; (800bbc8 <FT5336_Probe+0xc0>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	490e      	ldr	r1, [pc, #56]	; (800bbc4 <FT5336_Probe+0xbc>)
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800bb90:	4610      	mov	r0, r2
 800bb92:	4798      	blx	r3
 800bb94:	4603      	mov	r3, r0
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d002      	beq.n	800bba0 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bb9a:	f06f 0304 	mvn.w	r3, #4
 800bb9e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 800bba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3728      	adds	r7, #40	; 0x28
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	0800a299 	.word	0x0800a299
 800bbb0:	0800a30d 	.word	0x0800a30d
 800bbb4:	0800a435 	.word	0x0800a435
 800bbb8:	0800a3d9 	.word	0x0800a3d9
 800bbbc:	0800a491 	.word	0x0800a491
 800bbc0:	2400ae6c 	.word	0x2400ae6c
 800bbc4:	2400ae40 	.word	0x2400ae40
 800bbc8:	2400ae3c 	.word	0x2400ae3c
 800bbcc:	24000018 	.word	0x24000018

0800bbd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b082      	sub	sp, #8
 800bbd4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bbd6:	2003      	movs	r0, #3
 800bbd8:	f000 f933 	bl	800be42 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800bbdc:	f004 f848 	bl	800fc70 <HAL_RCC_GetSysClockFreq>
 800bbe0:	4602      	mov	r2, r0
 800bbe2:	4b15      	ldr	r3, [pc, #84]	; (800bc38 <HAL_Init+0x68>)
 800bbe4:	699b      	ldr	r3, [r3, #24]
 800bbe6:	0a1b      	lsrs	r3, r3, #8
 800bbe8:	f003 030f 	and.w	r3, r3, #15
 800bbec:	4913      	ldr	r1, [pc, #76]	; (800bc3c <HAL_Init+0x6c>)
 800bbee:	5ccb      	ldrb	r3, [r1, r3]
 800bbf0:	f003 031f 	and.w	r3, r3, #31
 800bbf4:	fa22 f303 	lsr.w	r3, r2, r3
 800bbf8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bbfa:	4b0f      	ldr	r3, [pc, #60]	; (800bc38 <HAL_Init+0x68>)
 800bbfc:	699b      	ldr	r3, [r3, #24]
 800bbfe:	f003 030f 	and.w	r3, r3, #15
 800bc02:	4a0e      	ldr	r2, [pc, #56]	; (800bc3c <HAL_Init+0x6c>)
 800bc04:	5cd3      	ldrb	r3, [r2, r3]
 800bc06:	f003 031f 	and.w	r3, r3, #31
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	fa22 f303 	lsr.w	r3, r2, r3
 800bc10:	4a0b      	ldr	r2, [pc, #44]	; (800bc40 <HAL_Init+0x70>)
 800bc12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bc14:	4a0b      	ldr	r2, [pc, #44]	; (800bc44 <HAL_Init+0x74>)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800bc1a:	200f      	movs	r0, #15
 800bc1c:	f7f8 ffce 	bl	8004bbc <HAL_InitTick>
 800bc20:	4603      	mov	r3, r0
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d001      	beq.n	800bc2a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800bc26:	2301      	movs	r3, #1
 800bc28:	e002      	b.n	800bc30 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800bc2a:	f7f8 fc59 	bl	80044e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800bc2e:	2300      	movs	r3, #0
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3708      	adds	r7, #8
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}
 800bc38:	58024400 	.word	0x58024400
 800bc3c:	08024af4 	.word	0x08024af4
 800bc40:	24000014 	.word	0x24000014
 800bc44:	24000010 	.word	0x24000010

0800bc48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800bc4c:	4b06      	ldr	r3, [pc, #24]	; (800bc68 <HAL_IncTick+0x20>)
 800bc4e:	781b      	ldrb	r3, [r3, #0]
 800bc50:	461a      	mov	r2, r3
 800bc52:	4b06      	ldr	r3, [pc, #24]	; (800bc6c <HAL_IncTick+0x24>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	4413      	add	r3, r2
 800bc58:	4a04      	ldr	r2, [pc, #16]	; (800bc6c <HAL_IncTick+0x24>)
 800bc5a:	6013      	str	r3, [r2, #0]
}
 800bc5c:	bf00      	nop
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr
 800bc66:	bf00      	nop
 800bc68:	2400004c 	.word	0x2400004c
 800bc6c:	2400ae94 	.word	0x2400ae94

0800bc70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bc70:	b480      	push	{r7}
 800bc72:	af00      	add	r7, sp, #0
  return uwTick;
 800bc74:	4b03      	ldr	r3, [pc, #12]	; (800bc84 <HAL_GetTick+0x14>)
 800bc76:	681b      	ldr	r3, [r3, #0]
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr
 800bc82:	bf00      	nop
 800bc84:	2400ae94 	.word	0x2400ae94

0800bc88 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800bc8c:	4b03      	ldr	r3, [pc, #12]	; (800bc9c <HAL_GetREVID+0x14>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	0c1b      	lsrs	r3, r3, #16
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	46bd      	mov	sp, r7
 800bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9a:	4770      	bx	lr
 800bc9c:	5c001000 	.word	0x5c001000

0800bca0 <__NVIC_SetPriorityGrouping>:
{
 800bca0:	b480      	push	{r7}
 800bca2:	b085      	sub	sp, #20
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f003 0307 	and.w	r3, r3, #7
 800bcae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bcb0:	4b0b      	ldr	r3, [pc, #44]	; (800bce0 <__NVIC_SetPriorityGrouping+0x40>)
 800bcb2:	68db      	ldr	r3, [r3, #12]
 800bcb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bcb6:	68ba      	ldr	r2, [r7, #8]
 800bcb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800bcbc:	4013      	ands	r3, r2
 800bcbe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800bcc8:	4b06      	ldr	r3, [pc, #24]	; (800bce4 <__NVIC_SetPriorityGrouping+0x44>)
 800bcca:	4313      	orrs	r3, r2
 800bccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bcce:	4a04      	ldr	r2, [pc, #16]	; (800bce0 <__NVIC_SetPriorityGrouping+0x40>)
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	60d3      	str	r3, [r2, #12]
}
 800bcd4:	bf00      	nop
 800bcd6:	3714      	adds	r7, #20
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr
 800bce0:	e000ed00 	.word	0xe000ed00
 800bce4:	05fa0000 	.word	0x05fa0000

0800bce8 <__NVIC_GetPriorityGrouping>:
{
 800bce8:	b480      	push	{r7}
 800bcea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bcec:	4b04      	ldr	r3, [pc, #16]	; (800bd00 <__NVIC_GetPriorityGrouping+0x18>)
 800bcee:	68db      	ldr	r3, [r3, #12]
 800bcf0:	0a1b      	lsrs	r3, r3, #8
 800bcf2:	f003 0307 	and.w	r3, r3, #7
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr
 800bd00:	e000ed00 	.word	0xe000ed00

0800bd04 <__NVIC_EnableIRQ>:
{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800bd0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	db0b      	blt.n	800bd2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bd16:	88fb      	ldrh	r3, [r7, #6]
 800bd18:	f003 021f 	and.w	r2, r3, #31
 800bd1c:	4907      	ldr	r1, [pc, #28]	; (800bd3c <__NVIC_EnableIRQ+0x38>)
 800bd1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bd22:	095b      	lsrs	r3, r3, #5
 800bd24:	2001      	movs	r0, #1
 800bd26:	fa00 f202 	lsl.w	r2, r0, r2
 800bd2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800bd2e:	bf00      	nop
 800bd30:	370c      	adds	r7, #12
 800bd32:	46bd      	mov	sp, r7
 800bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd38:	4770      	bx	lr
 800bd3a:	bf00      	nop
 800bd3c:	e000e100 	.word	0xe000e100

0800bd40 <__NVIC_DisableIRQ>:
{
 800bd40:	b480      	push	{r7}
 800bd42:	b083      	sub	sp, #12
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	4603      	mov	r3, r0
 800bd48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800bd4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	db12      	blt.n	800bd78 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bd52:	88fb      	ldrh	r3, [r7, #6]
 800bd54:	f003 021f 	and.w	r2, r3, #31
 800bd58:	490a      	ldr	r1, [pc, #40]	; (800bd84 <__NVIC_DisableIRQ+0x44>)
 800bd5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bd5e:	095b      	lsrs	r3, r3, #5
 800bd60:	2001      	movs	r0, #1
 800bd62:	fa00 f202 	lsl.w	r2, r0, r2
 800bd66:	3320      	adds	r3, #32
 800bd68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800bd6c:	f3bf 8f4f 	dsb	sy
}
 800bd70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bd72:	f3bf 8f6f 	isb	sy
}
 800bd76:	bf00      	nop
}
 800bd78:	bf00      	nop
 800bd7a:	370c      	adds	r7, #12
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr
 800bd84:	e000e100 	.word	0xe000e100

0800bd88 <__NVIC_SetPriority>:
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b083      	sub	sp, #12
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	4603      	mov	r3, r0
 800bd90:	6039      	str	r1, [r7, #0]
 800bd92:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800bd94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	db0a      	blt.n	800bdb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	b2da      	uxtb	r2, r3
 800bda0:	490c      	ldr	r1, [pc, #48]	; (800bdd4 <__NVIC_SetPriority+0x4c>)
 800bda2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bda6:	0112      	lsls	r2, r2, #4
 800bda8:	b2d2      	uxtb	r2, r2
 800bdaa:	440b      	add	r3, r1
 800bdac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bdb0:	e00a      	b.n	800bdc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	b2da      	uxtb	r2, r3
 800bdb6:	4908      	ldr	r1, [pc, #32]	; (800bdd8 <__NVIC_SetPriority+0x50>)
 800bdb8:	88fb      	ldrh	r3, [r7, #6]
 800bdba:	f003 030f 	and.w	r3, r3, #15
 800bdbe:	3b04      	subs	r3, #4
 800bdc0:	0112      	lsls	r2, r2, #4
 800bdc2:	b2d2      	uxtb	r2, r2
 800bdc4:	440b      	add	r3, r1
 800bdc6:	761a      	strb	r2, [r3, #24]
}
 800bdc8:	bf00      	nop
 800bdca:	370c      	adds	r7, #12
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr
 800bdd4:	e000e100 	.word	0xe000e100
 800bdd8:	e000ed00 	.word	0xe000ed00

0800bddc <NVIC_EncodePriority>:
{
 800bddc:	b480      	push	{r7}
 800bdde:	b089      	sub	sp, #36	; 0x24
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	60f8      	str	r0, [r7, #12]
 800bde4:	60b9      	str	r1, [r7, #8]
 800bde6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	f003 0307 	and.w	r3, r3, #7
 800bdee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bdf0:	69fb      	ldr	r3, [r7, #28]
 800bdf2:	f1c3 0307 	rsb	r3, r3, #7
 800bdf6:	2b04      	cmp	r3, #4
 800bdf8:	bf28      	it	cs
 800bdfa:	2304      	movcs	r3, #4
 800bdfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bdfe:	69fb      	ldr	r3, [r7, #28]
 800be00:	3304      	adds	r3, #4
 800be02:	2b06      	cmp	r3, #6
 800be04:	d902      	bls.n	800be0c <NVIC_EncodePriority+0x30>
 800be06:	69fb      	ldr	r3, [r7, #28]
 800be08:	3b03      	subs	r3, #3
 800be0a:	e000      	b.n	800be0e <NVIC_EncodePriority+0x32>
 800be0c:	2300      	movs	r3, #0
 800be0e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800be10:	f04f 32ff 	mov.w	r2, #4294967295
 800be14:	69bb      	ldr	r3, [r7, #24]
 800be16:	fa02 f303 	lsl.w	r3, r2, r3
 800be1a:	43da      	mvns	r2, r3
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	401a      	ands	r2, r3
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800be24:	f04f 31ff 	mov.w	r1, #4294967295
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	fa01 f303 	lsl.w	r3, r1, r3
 800be2e:	43d9      	mvns	r1, r3
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800be34:	4313      	orrs	r3, r2
}
 800be36:	4618      	mov	r0, r3
 800be38:	3724      	adds	r7, #36	; 0x24
 800be3a:	46bd      	mov	sp, r7
 800be3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be40:	4770      	bx	lr

0800be42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800be42:	b580      	push	{r7, lr}
 800be44:	b082      	sub	sp, #8
 800be46:	af00      	add	r7, sp, #0
 800be48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f7ff ff28 	bl	800bca0 <__NVIC_SetPriorityGrouping>
}
 800be50:	bf00      	nop
 800be52:	3708      	adds	r7, #8
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}

0800be58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b086      	sub	sp, #24
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	4603      	mov	r3, r0
 800be60:	60b9      	str	r1, [r7, #8]
 800be62:	607a      	str	r2, [r7, #4]
 800be64:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800be66:	f7ff ff3f 	bl	800bce8 <__NVIC_GetPriorityGrouping>
 800be6a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800be6c:	687a      	ldr	r2, [r7, #4]
 800be6e:	68b9      	ldr	r1, [r7, #8]
 800be70:	6978      	ldr	r0, [r7, #20]
 800be72:	f7ff ffb3 	bl	800bddc <NVIC_EncodePriority>
 800be76:	4602      	mov	r2, r0
 800be78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800be7c:	4611      	mov	r1, r2
 800be7e:	4618      	mov	r0, r3
 800be80:	f7ff ff82 	bl	800bd88 <__NVIC_SetPriority>
}
 800be84:	bf00      	nop
 800be86:	3718      	adds	r7, #24
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}

0800be8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
 800be92:	4603      	mov	r3, r0
 800be94:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800be96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800be9a:	4618      	mov	r0, r3
 800be9c:	f7ff ff32 	bl	800bd04 <__NVIC_EnableIRQ>
}
 800bea0:	bf00      	nop
 800bea2:	3708      	adds	r7, #8
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
 800beae:	4603      	mov	r3, r0
 800beb0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800beb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7ff ff42 	bl	800bd40 <__NVIC_DisableIRQ>
}
 800bebc:	bf00      	nop
 800bebe:	3708      	adds	r7, #8
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800bec4:	b480      	push	{r7}
 800bec6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800bec8:	f3bf 8f5f 	dmb	sy
}
 800becc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800bece:	4b07      	ldr	r3, [pc, #28]	; (800beec <HAL_MPU_Disable+0x28>)
 800bed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bed2:	4a06      	ldr	r2, [pc, #24]	; (800beec <HAL_MPU_Disable+0x28>)
 800bed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bed8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800beda:	4b05      	ldr	r3, [pc, #20]	; (800bef0 <HAL_MPU_Disable+0x2c>)
 800bedc:	2200      	movs	r2, #0
 800bede:	605a      	str	r2, [r3, #4]
}
 800bee0:	bf00      	nop
 800bee2:	46bd      	mov	sp, r7
 800bee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee8:	4770      	bx	lr
 800beea:	bf00      	nop
 800beec:	e000ed00 	.word	0xe000ed00
 800bef0:	e000ed90 	.word	0xe000ed90

0800bef4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b083      	sub	sp, #12
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800befc:	4a0b      	ldr	r2, [pc, #44]	; (800bf2c <HAL_MPU_Enable+0x38>)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f043 0301 	orr.w	r3, r3, #1
 800bf04:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800bf06:	4b0a      	ldr	r3, [pc, #40]	; (800bf30 <HAL_MPU_Enable+0x3c>)
 800bf08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf0a:	4a09      	ldr	r2, [pc, #36]	; (800bf30 <HAL_MPU_Enable+0x3c>)
 800bf0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf10:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800bf12:	f3bf 8f4f 	dsb	sy
}
 800bf16:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bf18:	f3bf 8f6f 	isb	sy
}
 800bf1c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800bf1e:	bf00      	nop
 800bf20:	370c      	adds	r7, #12
 800bf22:	46bd      	mov	sp, r7
 800bf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf28:	4770      	bx	lr
 800bf2a:	bf00      	nop
 800bf2c:	e000ed90 	.word	0xe000ed90
 800bf30:	e000ed00 	.word	0xe000ed00

0800bf34 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b083      	sub	sp, #12
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	785a      	ldrb	r2, [r3, #1]
 800bf40:	4b1d      	ldr	r3, [pc, #116]	; (800bfb8 <HAL_MPU_ConfigRegion+0x84>)
 800bf42:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	781b      	ldrb	r3, [r3, #0]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d029      	beq.n	800bfa0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800bf4c:	4a1a      	ldr	r2, [pc, #104]	; (800bfb8 <HAL_MPU_ConfigRegion+0x84>)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	7b1b      	ldrb	r3, [r3, #12]
 800bf58:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	7adb      	ldrb	r3, [r3, #11]
 800bf5e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800bf60:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	7a9b      	ldrb	r3, [r3, #10]
 800bf66:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800bf68:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	7b5b      	ldrb	r3, [r3, #13]
 800bf6e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800bf70:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	7b9b      	ldrb	r3, [r3, #14]
 800bf76:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800bf78:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	7bdb      	ldrb	r3, [r3, #15]
 800bf7e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800bf80:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	7a5b      	ldrb	r3, [r3, #9]
 800bf86:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800bf88:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	7a1b      	ldrb	r3, [r3, #8]
 800bf8e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800bf90:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800bf92:	687a      	ldr	r2, [r7, #4]
 800bf94:	7812      	ldrb	r2, [r2, #0]
 800bf96:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800bf98:	4a07      	ldr	r2, [pc, #28]	; (800bfb8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800bf9a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800bf9c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800bf9e:	e005      	b.n	800bfac <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800bfa0:	4b05      	ldr	r3, [pc, #20]	; (800bfb8 <HAL_MPU_ConfigRegion+0x84>)
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800bfa6:	4b04      	ldr	r3, [pc, #16]	; (800bfb8 <HAL_MPU_ConfigRegion+0x84>)
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	611a      	str	r2, [r3, #16]
}
 800bfac:	bf00      	nop
 800bfae:	370c      	adds	r7, #12
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr
 800bfb8:	e000ed90 	.word	0xe000ed90

0800bfbc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b082      	sub	sp, #8
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d101      	bne.n	800bfce <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800bfca:	2301      	movs	r3, #1
 800bfcc:	e054      	b.n	800c078 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	7f5b      	ldrb	r3, [r3, #29]
 800bfd2:	b2db      	uxtb	r3, r3
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d105      	bne.n	800bfe4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f7f8 fa9c 	bl	800451c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2202      	movs	r2, #2
 800bfe8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	791b      	ldrb	r3, [r3, #4]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d10c      	bne.n	800c00c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	4a22      	ldr	r2, [pc, #136]	; (800c080 <HAL_CRC_Init+0xc4>)
 800bff8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	689a      	ldr	r2, [r3, #8]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f022 0218 	bic.w	r2, r2, #24
 800c008:	609a      	str	r2, [r3, #8]
 800c00a:	e00c      	b.n	800c026 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6899      	ldr	r1, [r3, #8]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	68db      	ldr	r3, [r3, #12]
 800c014:	461a      	mov	r2, r3
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f000 f834 	bl	800c084 <HAL_CRCEx_Polynomial_Set>
 800c01c:	4603      	mov	r3, r0
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d001      	beq.n	800c026 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800c022:	2301      	movs	r3, #1
 800c024:	e028      	b.n	800c078 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	795b      	ldrb	r3, [r3, #5]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d105      	bne.n	800c03a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f04f 32ff 	mov.w	r2, #4294967295
 800c036:	611a      	str	r2, [r3, #16]
 800c038:	e004      	b.n	800c044 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	687a      	ldr	r2, [r7, #4]
 800c040:	6912      	ldr	r2, [r2, #16]
 800c042:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	689b      	ldr	r3, [r3, #8]
 800c04a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	695a      	ldr	r2, [r3, #20]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	430a      	orrs	r2, r1
 800c058:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	689b      	ldr	r3, [r3, #8]
 800c060:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	699a      	ldr	r2, [r3, #24]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	430a      	orrs	r2, r1
 800c06e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2201      	movs	r2, #1
 800c074:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800c076:	2300      	movs	r3, #0
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3708      	adds	r7, #8
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}
 800c080:	04c11db7 	.word	0x04c11db7

0800c084 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800c084:	b480      	push	{r7}
 800c086:	b087      	sub	sp, #28
 800c088:	af00      	add	r7, sp, #0
 800c08a:	60f8      	str	r0, [r7, #12]
 800c08c:	60b9      	str	r1, [r7, #8]
 800c08e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c090:	2300      	movs	r3, #0
 800c092:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800c094:	231f      	movs	r3, #31
 800c096:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800c098:	bf00      	nop
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	1e5a      	subs	r2, r3, #1
 800c09e:	613a      	str	r2, [r7, #16]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d009      	beq.n	800c0b8 <HAL_CRCEx_Polynomial_Set+0x34>
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	f003 031f 	and.w	r3, r3, #31
 800c0aa:	68ba      	ldr	r2, [r7, #8]
 800c0ac:	fa22 f303 	lsr.w	r3, r2, r3
 800c0b0:	f003 0301 	and.w	r3, r3, #1
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d0f0      	beq.n	800c09a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2b18      	cmp	r3, #24
 800c0bc:	d846      	bhi.n	800c14c <HAL_CRCEx_Polynomial_Set+0xc8>
 800c0be:	a201      	add	r2, pc, #4	; (adr r2, 800c0c4 <HAL_CRCEx_Polynomial_Set+0x40>)
 800c0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0c4:	0800c153 	.word	0x0800c153
 800c0c8:	0800c14d 	.word	0x0800c14d
 800c0cc:	0800c14d 	.word	0x0800c14d
 800c0d0:	0800c14d 	.word	0x0800c14d
 800c0d4:	0800c14d 	.word	0x0800c14d
 800c0d8:	0800c14d 	.word	0x0800c14d
 800c0dc:	0800c14d 	.word	0x0800c14d
 800c0e0:	0800c14d 	.word	0x0800c14d
 800c0e4:	0800c141 	.word	0x0800c141
 800c0e8:	0800c14d 	.word	0x0800c14d
 800c0ec:	0800c14d 	.word	0x0800c14d
 800c0f0:	0800c14d 	.word	0x0800c14d
 800c0f4:	0800c14d 	.word	0x0800c14d
 800c0f8:	0800c14d 	.word	0x0800c14d
 800c0fc:	0800c14d 	.word	0x0800c14d
 800c100:	0800c14d 	.word	0x0800c14d
 800c104:	0800c135 	.word	0x0800c135
 800c108:	0800c14d 	.word	0x0800c14d
 800c10c:	0800c14d 	.word	0x0800c14d
 800c110:	0800c14d 	.word	0x0800c14d
 800c114:	0800c14d 	.word	0x0800c14d
 800c118:	0800c14d 	.word	0x0800c14d
 800c11c:	0800c14d 	.word	0x0800c14d
 800c120:	0800c14d 	.word	0x0800c14d
 800c124:	0800c129 	.word	0x0800c129
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	2b06      	cmp	r3, #6
 800c12c:	d913      	bls.n	800c156 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800c12e:	2301      	movs	r3, #1
 800c130:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c132:	e010      	b.n	800c156 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	2b07      	cmp	r3, #7
 800c138:	d90f      	bls.n	800c15a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800c13a:	2301      	movs	r3, #1
 800c13c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c13e:	e00c      	b.n	800c15a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	2b0f      	cmp	r3, #15
 800c144:	d90b      	bls.n	800c15e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800c146:	2301      	movs	r3, #1
 800c148:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c14a:	e008      	b.n	800c15e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800c14c:	2301      	movs	r3, #1
 800c14e:	75fb      	strb	r3, [r7, #23]
      break;
 800c150:	e006      	b.n	800c160 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c152:	bf00      	nop
 800c154:	e004      	b.n	800c160 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c156:	bf00      	nop
 800c158:	e002      	b.n	800c160 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c15a:	bf00      	nop
 800c15c:	e000      	b.n	800c160 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c15e:	bf00      	nop
  }
  if (status == HAL_OK)
 800c160:	7dfb      	ldrb	r3, [r7, #23]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d10d      	bne.n	800c182 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	68ba      	ldr	r2, [r7, #8]
 800c16c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	689b      	ldr	r3, [r3, #8]
 800c174:	f023 0118 	bic.w	r1, r3, #24
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	687a      	ldr	r2, [r7, #4]
 800c17e:	430a      	orrs	r2, r1
 800c180:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800c182:	7dfb      	ldrb	r3, [r7, #23]
}
 800c184:	4618      	mov	r0, r3
 800c186:	371c      	adds	r7, #28
 800c188:	46bd      	mov	sp, r7
 800c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18e:	4770      	bx	lr

0800c190 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b082      	sub	sp, #8
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d101      	bne.n	800c1a2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800c19e:	2301      	movs	r3, #1
 800c1a0:	e04f      	b.n	800c242 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800c1a8:	b2db      	uxtb	r3, r3
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d106      	bne.n	800c1bc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f7f8 f9d2 	bl	8004560 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2202      	movs	r2, #2
 800c1c0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	681a      	ldr	r2, [r3, #0]
 800c1ca:	4b20      	ldr	r3, [pc, #128]	; (800c24c <HAL_DMA2D_Init+0xbc>)
 800c1cc:	4013      	ands	r3, r2
 800c1ce:	687a      	ldr	r2, [r7, #4]
 800c1d0:	6851      	ldr	r1, [r2, #4]
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	69d2      	ldr	r2, [r2, #28]
 800c1d6:	4311      	orrs	r1, r2
 800c1d8:	687a      	ldr	r2, [r7, #4]
 800c1da:	6812      	ldr	r2, [r2, #0]
 800c1dc:	430b      	orrs	r3, r1
 800c1de:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c1e6:	4b1a      	ldr	r3, [pc, #104]	; (800c250 <HAL_DMA2D_Init+0xc0>)
 800c1e8:	4013      	ands	r3, r2
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	6891      	ldr	r1, [r2, #8]
 800c1ee:	687a      	ldr	r2, [r7, #4]
 800c1f0:	6992      	ldr	r2, [r2, #24]
 800c1f2:	4311      	orrs	r1, r2
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	6812      	ldr	r2, [r2, #0]
 800c1f8:	430b      	orrs	r3, r1
 800c1fa:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c202:	4b14      	ldr	r3, [pc, #80]	; (800c254 <HAL_DMA2D_Init+0xc4>)
 800c204:	4013      	ands	r3, r2
 800c206:	687a      	ldr	r2, [r7, #4]
 800c208:	68d1      	ldr	r1, [r2, #12]
 800c20a:	687a      	ldr	r2, [r7, #4]
 800c20c:	6812      	ldr	r2, [r2, #0]
 800c20e:	430b      	orrs	r3, r1
 800c210:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c218:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	691b      	ldr	r3, [r3, #16]
 800c220:	051a      	lsls	r2, r3, #20
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	695b      	ldr	r3, [r3, #20]
 800c226:	055b      	lsls	r3, r3, #21
 800c228:	431a      	orrs	r2, r3
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	430a      	orrs	r2, r1
 800c230:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2200      	movs	r2, #0
 800c236:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2201      	movs	r2, #1
 800c23c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 800c240:	2300      	movs	r3, #0
}
 800c242:	4618      	mov	r0, r3
 800c244:	3708      	adds	r7, #8
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop
 800c24c:	fff8ffbf 	.word	0xfff8ffbf
 800c250:	fffffef8 	.word	0xfffffef8
 800c254:	ffff0000 	.word	0xffff0000

0800c258 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b084      	sub	sp, #16
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	f003 0301 	and.w	r3, r3, #1
 800c276:	2b00      	cmp	r3, #0
 800c278:	d026      	beq.n	800c2c8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c280:	2b00      	cmp	r3, #0
 800c282:	d021      	beq.n	800c2c8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	681a      	ldr	r2, [r3, #0]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c292:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c298:	f043 0201 	orr.w	r2, r3, #1
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	2201      	movs	r2, #1
 800c2a6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2204      	movs	r2, #4
 800c2ac:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d003      	beq.n	800c2c8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	f003 0320 	and.w	r3, r3, #32
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d026      	beq.n	800c320 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d021      	beq.n	800c320 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	681a      	ldr	r2, [r3, #0]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c2ea:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	2220      	movs	r2, #32
 800c2f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2f8:	f043 0202 	orr.w	r2, r3, #2
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2204      	movs	r2, #4
 800c304:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2200      	movs	r2, #0
 800c30c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c314:	2b00      	cmp	r3, #0
 800c316:	d003      	beq.n	800c320 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	f003 0308 	and.w	r3, r3, #8
 800c326:	2b00      	cmp	r3, #0
 800c328:	d026      	beq.n	800c378 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c330:	2b00      	cmp	r3, #0
 800c332:	d021      	beq.n	800c378 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	681a      	ldr	r2, [r3, #0]
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c342:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	2208      	movs	r2, #8
 800c34a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c350:	f043 0204 	orr.w	r2, r3, #4
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2204      	movs	r2, #4
 800c35c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2200      	movs	r2, #0
 800c364:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d003      	beq.n	800c378 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	f003 0304 	and.w	r3, r3, #4
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d013      	beq.n	800c3aa <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d00e      	beq.n	800c3aa <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	681a      	ldr	r2, [r3, #0]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c39a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	2204      	movs	r2, #4
 800c3a2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f000 f853 	bl	800c450 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	f003 0302 	and.w	r3, r3, #2
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d024      	beq.n	800c3fe <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d01f      	beq.n	800c3fe <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	681a      	ldr	r2, [r3, #0]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c3cc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	2202      	movs	r2, #2
 800c3d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6a1b      	ldr	r3, [r3, #32]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d003      	beq.n	800c3fe <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6a1b      	ldr	r3, [r3, #32]
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f003 0310 	and.w	r3, r3, #16
 800c404:	2b00      	cmp	r3, #0
 800c406:	d01f      	beq.n	800c448 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d01a      	beq.n	800c448 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	681a      	ldr	r2, [r3, #0]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c420:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	2210      	movs	r2, #16
 800c428:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2201      	movs	r2, #1
 800c436:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2200      	movs	r2, #0
 800c43e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f000 f80e 	bl	800c464 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800c448:	bf00      	nop
 800c44a:	3710      	adds	r7, #16
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}

0800c450 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800c450:	b480      	push	{r7}
 800c452:	b083      	sub	sp, #12
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800c458:	bf00      	nop
 800c45a:	370c      	adds	r7, #12
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr

0800c464 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800c464:	b480      	push	{r7}
 800c466:	b083      	sub	sp, #12
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800c46c:	bf00      	nop
 800c46e:	370c      	adds	r7, #12
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr

0800c478 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c478:	b480      	push	{r7}
 800c47a:	b089      	sub	sp, #36	; 0x24
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c482:	2300      	movs	r3, #0
 800c484:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800c486:	4b89      	ldr	r3, [pc, #548]	; (800c6ac <HAL_GPIO_Init+0x234>)
 800c488:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c48a:	e194      	b.n	800c7b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	2101      	movs	r1, #1
 800c492:	69fb      	ldr	r3, [r7, #28]
 800c494:	fa01 f303 	lsl.w	r3, r1, r3
 800c498:	4013      	ands	r3, r2
 800c49a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	f000 8186 	beq.w	800c7b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	685b      	ldr	r3, [r3, #4]
 800c4a8:	f003 0303 	and.w	r3, r3, #3
 800c4ac:	2b01      	cmp	r3, #1
 800c4ae:	d005      	beq.n	800c4bc <HAL_GPIO_Init+0x44>
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	685b      	ldr	r3, [r3, #4]
 800c4b4:	f003 0303 	and.w	r3, r3, #3
 800c4b8:	2b02      	cmp	r3, #2
 800c4ba:	d130      	bne.n	800c51e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	689b      	ldr	r3, [r3, #8]
 800c4c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800c4c2:	69fb      	ldr	r3, [r7, #28]
 800c4c4:	005b      	lsls	r3, r3, #1
 800c4c6:	2203      	movs	r2, #3
 800c4c8:	fa02 f303 	lsl.w	r3, r2, r3
 800c4cc:	43db      	mvns	r3, r3
 800c4ce:	69ba      	ldr	r2, [r7, #24]
 800c4d0:	4013      	ands	r3, r2
 800c4d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	68da      	ldr	r2, [r3, #12]
 800c4d8:	69fb      	ldr	r3, [r7, #28]
 800c4da:	005b      	lsls	r3, r3, #1
 800c4dc:	fa02 f303 	lsl.w	r3, r2, r3
 800c4e0:	69ba      	ldr	r2, [r7, #24]
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	69ba      	ldr	r2, [r7, #24]
 800c4ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	685b      	ldr	r3, [r3, #4]
 800c4f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	69fb      	ldr	r3, [r7, #28]
 800c4f6:	fa02 f303 	lsl.w	r3, r2, r3
 800c4fa:	43db      	mvns	r3, r3
 800c4fc:	69ba      	ldr	r2, [r7, #24]
 800c4fe:	4013      	ands	r3, r2
 800c500:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	091b      	lsrs	r3, r3, #4
 800c508:	f003 0201 	and.w	r2, r3, #1
 800c50c:	69fb      	ldr	r3, [r7, #28]
 800c50e:	fa02 f303 	lsl.w	r3, r2, r3
 800c512:	69ba      	ldr	r2, [r7, #24]
 800c514:	4313      	orrs	r3, r2
 800c516:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	69ba      	ldr	r2, [r7, #24]
 800c51c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	f003 0303 	and.w	r3, r3, #3
 800c526:	2b03      	cmp	r3, #3
 800c528:	d017      	beq.n	800c55a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	68db      	ldr	r3, [r3, #12]
 800c52e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c530:	69fb      	ldr	r3, [r7, #28]
 800c532:	005b      	lsls	r3, r3, #1
 800c534:	2203      	movs	r2, #3
 800c536:	fa02 f303 	lsl.w	r3, r2, r3
 800c53a:	43db      	mvns	r3, r3
 800c53c:	69ba      	ldr	r2, [r7, #24]
 800c53e:	4013      	ands	r3, r2
 800c540:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	689a      	ldr	r2, [r3, #8]
 800c546:	69fb      	ldr	r3, [r7, #28]
 800c548:	005b      	lsls	r3, r3, #1
 800c54a:	fa02 f303 	lsl.w	r3, r2, r3
 800c54e:	69ba      	ldr	r2, [r7, #24]
 800c550:	4313      	orrs	r3, r2
 800c552:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	69ba      	ldr	r2, [r7, #24]
 800c558:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	f003 0303 	and.w	r3, r3, #3
 800c562:	2b02      	cmp	r3, #2
 800c564:	d123      	bne.n	800c5ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c566:	69fb      	ldr	r3, [r7, #28]
 800c568:	08da      	lsrs	r2, r3, #3
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	3208      	adds	r2, #8
 800c56e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c572:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800c574:	69fb      	ldr	r3, [r7, #28]
 800c576:	f003 0307 	and.w	r3, r3, #7
 800c57a:	009b      	lsls	r3, r3, #2
 800c57c:	220f      	movs	r2, #15
 800c57e:	fa02 f303 	lsl.w	r3, r2, r3
 800c582:	43db      	mvns	r3, r3
 800c584:	69ba      	ldr	r2, [r7, #24]
 800c586:	4013      	ands	r3, r2
 800c588:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	691a      	ldr	r2, [r3, #16]
 800c58e:	69fb      	ldr	r3, [r7, #28]
 800c590:	f003 0307 	and.w	r3, r3, #7
 800c594:	009b      	lsls	r3, r3, #2
 800c596:	fa02 f303 	lsl.w	r3, r2, r3
 800c59a:	69ba      	ldr	r2, [r7, #24]
 800c59c:	4313      	orrs	r3, r2
 800c59e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c5a0:	69fb      	ldr	r3, [r7, #28]
 800c5a2:	08da      	lsrs	r2, r3, #3
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	3208      	adds	r2, #8
 800c5a8:	69b9      	ldr	r1, [r7, #24]
 800c5aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800c5b4:	69fb      	ldr	r3, [r7, #28]
 800c5b6:	005b      	lsls	r3, r3, #1
 800c5b8:	2203      	movs	r2, #3
 800c5ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c5be:	43db      	mvns	r3, r3
 800c5c0:	69ba      	ldr	r2, [r7, #24]
 800c5c2:	4013      	ands	r3, r2
 800c5c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	685b      	ldr	r3, [r3, #4]
 800c5ca:	f003 0203 	and.w	r2, r3, #3
 800c5ce:	69fb      	ldr	r3, [r7, #28]
 800c5d0:	005b      	lsls	r3, r3, #1
 800c5d2:	fa02 f303 	lsl.w	r3, r2, r3
 800c5d6:	69ba      	ldr	r2, [r7, #24]
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	69ba      	ldr	r2, [r7, #24]
 800c5e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	f000 80e0 	beq.w	800c7b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c5f0:	4b2f      	ldr	r3, [pc, #188]	; (800c6b0 <HAL_GPIO_Init+0x238>)
 800c5f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c5f6:	4a2e      	ldr	r2, [pc, #184]	; (800c6b0 <HAL_GPIO_Init+0x238>)
 800c5f8:	f043 0302 	orr.w	r3, r3, #2
 800c5fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800c600:	4b2b      	ldr	r3, [pc, #172]	; (800c6b0 <HAL_GPIO_Init+0x238>)
 800c602:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c606:	f003 0302 	and.w	r3, r3, #2
 800c60a:	60fb      	str	r3, [r7, #12]
 800c60c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c60e:	4a29      	ldr	r2, [pc, #164]	; (800c6b4 <HAL_GPIO_Init+0x23c>)
 800c610:	69fb      	ldr	r3, [r7, #28]
 800c612:	089b      	lsrs	r3, r3, #2
 800c614:	3302      	adds	r3, #2
 800c616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c61a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c61c:	69fb      	ldr	r3, [r7, #28]
 800c61e:	f003 0303 	and.w	r3, r3, #3
 800c622:	009b      	lsls	r3, r3, #2
 800c624:	220f      	movs	r2, #15
 800c626:	fa02 f303 	lsl.w	r3, r2, r3
 800c62a:	43db      	mvns	r3, r3
 800c62c:	69ba      	ldr	r2, [r7, #24]
 800c62e:	4013      	ands	r3, r2
 800c630:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	4a20      	ldr	r2, [pc, #128]	; (800c6b8 <HAL_GPIO_Init+0x240>)
 800c636:	4293      	cmp	r3, r2
 800c638:	d052      	beq.n	800c6e0 <HAL_GPIO_Init+0x268>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	4a1f      	ldr	r2, [pc, #124]	; (800c6bc <HAL_GPIO_Init+0x244>)
 800c63e:	4293      	cmp	r3, r2
 800c640:	d031      	beq.n	800c6a6 <HAL_GPIO_Init+0x22e>
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	4a1e      	ldr	r2, [pc, #120]	; (800c6c0 <HAL_GPIO_Init+0x248>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d02b      	beq.n	800c6a2 <HAL_GPIO_Init+0x22a>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	4a1d      	ldr	r2, [pc, #116]	; (800c6c4 <HAL_GPIO_Init+0x24c>)
 800c64e:	4293      	cmp	r3, r2
 800c650:	d025      	beq.n	800c69e <HAL_GPIO_Init+0x226>
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	4a1c      	ldr	r2, [pc, #112]	; (800c6c8 <HAL_GPIO_Init+0x250>)
 800c656:	4293      	cmp	r3, r2
 800c658:	d01f      	beq.n	800c69a <HAL_GPIO_Init+0x222>
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	4a1b      	ldr	r2, [pc, #108]	; (800c6cc <HAL_GPIO_Init+0x254>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d019      	beq.n	800c696 <HAL_GPIO_Init+0x21e>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	4a1a      	ldr	r2, [pc, #104]	; (800c6d0 <HAL_GPIO_Init+0x258>)
 800c666:	4293      	cmp	r3, r2
 800c668:	d013      	beq.n	800c692 <HAL_GPIO_Init+0x21a>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	4a19      	ldr	r2, [pc, #100]	; (800c6d4 <HAL_GPIO_Init+0x25c>)
 800c66e:	4293      	cmp	r3, r2
 800c670:	d00d      	beq.n	800c68e <HAL_GPIO_Init+0x216>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	4a18      	ldr	r2, [pc, #96]	; (800c6d8 <HAL_GPIO_Init+0x260>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d007      	beq.n	800c68a <HAL_GPIO_Init+0x212>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	4a17      	ldr	r2, [pc, #92]	; (800c6dc <HAL_GPIO_Init+0x264>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d101      	bne.n	800c686 <HAL_GPIO_Init+0x20e>
 800c682:	2309      	movs	r3, #9
 800c684:	e02d      	b.n	800c6e2 <HAL_GPIO_Init+0x26a>
 800c686:	230a      	movs	r3, #10
 800c688:	e02b      	b.n	800c6e2 <HAL_GPIO_Init+0x26a>
 800c68a:	2308      	movs	r3, #8
 800c68c:	e029      	b.n	800c6e2 <HAL_GPIO_Init+0x26a>
 800c68e:	2307      	movs	r3, #7
 800c690:	e027      	b.n	800c6e2 <HAL_GPIO_Init+0x26a>
 800c692:	2306      	movs	r3, #6
 800c694:	e025      	b.n	800c6e2 <HAL_GPIO_Init+0x26a>
 800c696:	2305      	movs	r3, #5
 800c698:	e023      	b.n	800c6e2 <HAL_GPIO_Init+0x26a>
 800c69a:	2304      	movs	r3, #4
 800c69c:	e021      	b.n	800c6e2 <HAL_GPIO_Init+0x26a>
 800c69e:	2303      	movs	r3, #3
 800c6a0:	e01f      	b.n	800c6e2 <HAL_GPIO_Init+0x26a>
 800c6a2:	2302      	movs	r3, #2
 800c6a4:	e01d      	b.n	800c6e2 <HAL_GPIO_Init+0x26a>
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	e01b      	b.n	800c6e2 <HAL_GPIO_Init+0x26a>
 800c6aa:	bf00      	nop
 800c6ac:	58000080 	.word	0x58000080
 800c6b0:	58024400 	.word	0x58024400
 800c6b4:	58000400 	.word	0x58000400
 800c6b8:	58020000 	.word	0x58020000
 800c6bc:	58020400 	.word	0x58020400
 800c6c0:	58020800 	.word	0x58020800
 800c6c4:	58020c00 	.word	0x58020c00
 800c6c8:	58021000 	.word	0x58021000
 800c6cc:	58021400 	.word	0x58021400
 800c6d0:	58021800 	.word	0x58021800
 800c6d4:	58021c00 	.word	0x58021c00
 800c6d8:	58022000 	.word	0x58022000
 800c6dc:	58022400 	.word	0x58022400
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	69fa      	ldr	r2, [r7, #28]
 800c6e4:	f002 0203 	and.w	r2, r2, #3
 800c6e8:	0092      	lsls	r2, r2, #2
 800c6ea:	4093      	lsls	r3, r2
 800c6ec:	69ba      	ldr	r2, [r7, #24]
 800c6ee:	4313      	orrs	r3, r2
 800c6f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c6f2:	4938      	ldr	r1, [pc, #224]	; (800c7d4 <HAL_GPIO_Init+0x35c>)
 800c6f4:	69fb      	ldr	r3, [r7, #28]
 800c6f6:	089b      	lsrs	r3, r3, #2
 800c6f8:	3302      	adds	r3, #2
 800c6fa:	69ba      	ldr	r2, [r7, #24]
 800c6fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	43db      	mvns	r3, r3
 800c70c:	69ba      	ldr	r2, [r7, #24]
 800c70e:	4013      	ands	r3, r2
 800c710:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d003      	beq.n	800c726 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800c71e:	69ba      	ldr	r2, [r7, #24]
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	4313      	orrs	r3, r2
 800c724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800c726:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c72a:	69bb      	ldr	r3, [r7, #24]
 800c72c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800c72e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	43db      	mvns	r3, r3
 800c73a:	69ba      	ldr	r2, [r7, #24]
 800c73c:	4013      	ands	r3, r2
 800c73e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d003      	beq.n	800c754 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800c74c:	69ba      	ldr	r2, [r7, #24]
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	4313      	orrs	r3, r2
 800c752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800c754:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c758:	69bb      	ldr	r3, [r7, #24]
 800c75a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	685b      	ldr	r3, [r3, #4]
 800c760:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	43db      	mvns	r3, r3
 800c766:	69ba      	ldr	r2, [r7, #24]
 800c768:	4013      	ands	r3, r2
 800c76a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c774:	2b00      	cmp	r3, #0
 800c776:	d003      	beq.n	800c780 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800c778:	69ba      	ldr	r2, [r7, #24]
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	4313      	orrs	r3, r2
 800c77e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	69ba      	ldr	r2, [r7, #24]
 800c784:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	43db      	mvns	r3, r3
 800c790:	69ba      	ldr	r2, [r7, #24]
 800c792:	4013      	ands	r3, r2
 800c794:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	685b      	ldr	r3, [r3, #4]
 800c79a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d003      	beq.n	800c7aa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800c7a2:	69ba      	ldr	r2, [r7, #24]
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	69ba      	ldr	r2, [r7, #24]
 800c7ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800c7b0:	69fb      	ldr	r3, [r7, #28]
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	681a      	ldr	r2, [r3, #0]
 800c7ba:	69fb      	ldr	r3, [r7, #28]
 800c7bc:	fa22 f303 	lsr.w	r3, r2, r3
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	f47f ae63 	bne.w	800c48c <HAL_GPIO_Init+0x14>
  }
}
 800c7c6:	bf00      	nop
 800c7c8:	bf00      	nop
 800c7ca:	3724      	adds	r7, #36	; 0x24
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d2:	4770      	bx	lr
 800c7d4:	58000400 	.word	0x58000400

0800c7d8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c7d8:	b480      	push	{r7}
 800c7da:	b087      	sub	sp, #28
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800c7e6:	4b75      	ldr	r3, [pc, #468]	; (800c9bc <HAL_GPIO_DeInit+0x1e4>)
 800c7e8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800c7ea:	e0d9      	b.n	800c9a0 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	fa02 f303 	lsl.w	r3, r2, r3
 800c7f4:	683a      	ldr	r2, [r7, #0]
 800c7f6:	4013      	ands	r3, r2
 800c7f8:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	f000 80cc 	beq.w	800c99a <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800c802:	4a6f      	ldr	r2, [pc, #444]	; (800c9c0 <HAL_GPIO_DeInit+0x1e8>)
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	089b      	lsrs	r3, r3, #2
 800c808:	3302      	adds	r3, #2
 800c80a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c80e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	f003 0303 	and.w	r3, r3, #3
 800c816:	009b      	lsls	r3, r3, #2
 800c818:	220f      	movs	r2, #15
 800c81a:	fa02 f303 	lsl.w	r3, r2, r3
 800c81e:	68ba      	ldr	r2, [r7, #8]
 800c820:	4013      	ands	r3, r2
 800c822:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	4a67      	ldr	r2, [pc, #412]	; (800c9c4 <HAL_GPIO_DeInit+0x1ec>)
 800c828:	4293      	cmp	r3, r2
 800c82a:	d037      	beq.n	800c89c <HAL_GPIO_DeInit+0xc4>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	4a66      	ldr	r2, [pc, #408]	; (800c9c8 <HAL_GPIO_DeInit+0x1f0>)
 800c830:	4293      	cmp	r3, r2
 800c832:	d031      	beq.n	800c898 <HAL_GPIO_DeInit+0xc0>
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	4a65      	ldr	r2, [pc, #404]	; (800c9cc <HAL_GPIO_DeInit+0x1f4>)
 800c838:	4293      	cmp	r3, r2
 800c83a:	d02b      	beq.n	800c894 <HAL_GPIO_DeInit+0xbc>
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	4a64      	ldr	r2, [pc, #400]	; (800c9d0 <HAL_GPIO_DeInit+0x1f8>)
 800c840:	4293      	cmp	r3, r2
 800c842:	d025      	beq.n	800c890 <HAL_GPIO_DeInit+0xb8>
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	4a63      	ldr	r2, [pc, #396]	; (800c9d4 <HAL_GPIO_DeInit+0x1fc>)
 800c848:	4293      	cmp	r3, r2
 800c84a:	d01f      	beq.n	800c88c <HAL_GPIO_DeInit+0xb4>
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	4a62      	ldr	r2, [pc, #392]	; (800c9d8 <HAL_GPIO_DeInit+0x200>)
 800c850:	4293      	cmp	r3, r2
 800c852:	d019      	beq.n	800c888 <HAL_GPIO_DeInit+0xb0>
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	4a61      	ldr	r2, [pc, #388]	; (800c9dc <HAL_GPIO_DeInit+0x204>)
 800c858:	4293      	cmp	r3, r2
 800c85a:	d013      	beq.n	800c884 <HAL_GPIO_DeInit+0xac>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	4a60      	ldr	r2, [pc, #384]	; (800c9e0 <HAL_GPIO_DeInit+0x208>)
 800c860:	4293      	cmp	r3, r2
 800c862:	d00d      	beq.n	800c880 <HAL_GPIO_DeInit+0xa8>
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	4a5f      	ldr	r2, [pc, #380]	; (800c9e4 <HAL_GPIO_DeInit+0x20c>)
 800c868:	4293      	cmp	r3, r2
 800c86a:	d007      	beq.n	800c87c <HAL_GPIO_DeInit+0xa4>
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	4a5e      	ldr	r2, [pc, #376]	; (800c9e8 <HAL_GPIO_DeInit+0x210>)
 800c870:	4293      	cmp	r3, r2
 800c872:	d101      	bne.n	800c878 <HAL_GPIO_DeInit+0xa0>
 800c874:	2309      	movs	r3, #9
 800c876:	e012      	b.n	800c89e <HAL_GPIO_DeInit+0xc6>
 800c878:	230a      	movs	r3, #10
 800c87a:	e010      	b.n	800c89e <HAL_GPIO_DeInit+0xc6>
 800c87c:	2308      	movs	r3, #8
 800c87e:	e00e      	b.n	800c89e <HAL_GPIO_DeInit+0xc6>
 800c880:	2307      	movs	r3, #7
 800c882:	e00c      	b.n	800c89e <HAL_GPIO_DeInit+0xc6>
 800c884:	2306      	movs	r3, #6
 800c886:	e00a      	b.n	800c89e <HAL_GPIO_DeInit+0xc6>
 800c888:	2305      	movs	r3, #5
 800c88a:	e008      	b.n	800c89e <HAL_GPIO_DeInit+0xc6>
 800c88c:	2304      	movs	r3, #4
 800c88e:	e006      	b.n	800c89e <HAL_GPIO_DeInit+0xc6>
 800c890:	2303      	movs	r3, #3
 800c892:	e004      	b.n	800c89e <HAL_GPIO_DeInit+0xc6>
 800c894:	2302      	movs	r3, #2
 800c896:	e002      	b.n	800c89e <HAL_GPIO_DeInit+0xc6>
 800c898:	2301      	movs	r3, #1
 800c89a:	e000      	b.n	800c89e <HAL_GPIO_DeInit+0xc6>
 800c89c:	2300      	movs	r3, #0
 800c89e:	697a      	ldr	r2, [r7, #20]
 800c8a0:	f002 0203 	and.w	r2, r2, #3
 800c8a4:	0092      	lsls	r2, r2, #2
 800c8a6:	4093      	lsls	r3, r2
 800c8a8:	68ba      	ldr	r2, [r7, #8]
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d136      	bne.n	800c91c <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	681a      	ldr	r2, [r3, #0]
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	43db      	mvns	r3, r3
 800c8b6:	401a      	ands	r2, r3
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	685a      	ldr	r2, [r3, #4]
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	43db      	mvns	r3, r3
 800c8c4:	401a      	ands	r2, r3
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800c8ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c8ce:	685a      	ldr	r2, [r3, #4]
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	43db      	mvns	r3, r3
 800c8d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c8d8:	4013      	ands	r3, r2
 800c8da:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800c8dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c8e0:	681a      	ldr	r2, [r3, #0]
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	43db      	mvns	r3, r3
 800c8e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c8ea:	4013      	ands	r3, r2
 800c8ec:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	f003 0303 	and.w	r3, r3, #3
 800c8f4:	009b      	lsls	r3, r3, #2
 800c8f6:	220f      	movs	r2, #15
 800c8f8:	fa02 f303 	lsl.w	r3, r2, r3
 800c8fc:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800c8fe:	4a30      	ldr	r2, [pc, #192]	; (800c9c0 <HAL_GPIO_DeInit+0x1e8>)
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	089b      	lsrs	r3, r3, #2
 800c904:	3302      	adds	r3, #2
 800c906:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	43da      	mvns	r2, r3
 800c90e:	482c      	ldr	r0, [pc, #176]	; (800c9c0 <HAL_GPIO_DeInit+0x1e8>)
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	089b      	lsrs	r3, r3, #2
 800c914:	400a      	ands	r2, r1
 800c916:	3302      	adds	r3, #2
 800c918:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681a      	ldr	r2, [r3, #0]
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	005b      	lsls	r3, r3, #1
 800c924:	2103      	movs	r1, #3
 800c926:	fa01 f303 	lsl.w	r3, r1, r3
 800c92a:	431a      	orrs	r2, r3
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	08da      	lsrs	r2, r3, #3
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	3208      	adds	r2, #8
 800c938:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	f003 0307 	and.w	r3, r3, #7
 800c942:	009b      	lsls	r3, r3, #2
 800c944:	220f      	movs	r2, #15
 800c946:	fa02 f303 	lsl.w	r3, r2, r3
 800c94a:	43db      	mvns	r3, r3
 800c94c:	697a      	ldr	r2, [r7, #20]
 800c94e:	08d2      	lsrs	r2, r2, #3
 800c950:	4019      	ands	r1, r3
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	3208      	adds	r2, #8
 800c956:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	68da      	ldr	r2, [r3, #12]
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	005b      	lsls	r3, r3, #1
 800c962:	2103      	movs	r1, #3
 800c964:	fa01 f303 	lsl.w	r3, r1, r3
 800c968:	43db      	mvns	r3, r3
 800c96a:	401a      	ands	r2, r3
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	685a      	ldr	r2, [r3, #4]
 800c974:	2101      	movs	r1, #1
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	fa01 f303 	lsl.w	r3, r1, r3
 800c97c:	43db      	mvns	r3, r3
 800c97e:	401a      	ands	r2, r3
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	689a      	ldr	r2, [r3, #8]
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	005b      	lsls	r3, r3, #1
 800c98c:	2103      	movs	r1, #3
 800c98e:	fa01 f303 	lsl.w	r3, r1, r3
 800c992:	43db      	mvns	r3, r3
 800c994:	401a      	ands	r2, r3
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	609a      	str	r2, [r3, #8]
    }

    position++;
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	3301      	adds	r3, #1
 800c99e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800c9a0:	683a      	ldr	r2, [r7, #0]
 800c9a2:	697b      	ldr	r3, [r7, #20]
 800c9a4:	fa22 f303 	lsr.w	r3, r2, r3
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	f47f af1f 	bne.w	800c7ec <HAL_GPIO_DeInit+0x14>
  }
}
 800c9ae:	bf00      	nop
 800c9b0:	bf00      	nop
 800c9b2:	371c      	adds	r7, #28
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr
 800c9bc:	58000080 	.word	0x58000080
 800c9c0:	58000400 	.word	0x58000400
 800c9c4:	58020000 	.word	0x58020000
 800c9c8:	58020400 	.word	0x58020400
 800c9cc:	58020800 	.word	0x58020800
 800c9d0:	58020c00 	.word	0x58020c00
 800c9d4:	58021000 	.word	0x58021000
 800c9d8:	58021400 	.word	0x58021400
 800c9dc:	58021800 	.word	0x58021800
 800c9e0:	58021c00 	.word	0x58021c00
 800c9e4:	58022000 	.word	0x58022000
 800c9e8:	58022400 	.word	0x58022400

0800c9ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b083      	sub	sp, #12
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	460b      	mov	r3, r1
 800c9f6:	807b      	strh	r3, [r7, #2]
 800c9f8:	4613      	mov	r3, r2
 800c9fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c9fc:	787b      	ldrb	r3, [r7, #1]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d003      	beq.n	800ca0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ca02:	887a      	ldrh	r2, [r7, #2]
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800ca08:	e003      	b.n	800ca12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800ca0a:	887b      	ldrh	r3, [r7, #2]
 800ca0c:	041a      	lsls	r2, r3, #16
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	619a      	str	r2, [r3, #24]
}
 800ca12:	bf00      	nop
 800ca14:	370c      	adds	r7, #12
 800ca16:	46bd      	mov	sp, r7
 800ca18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1c:	4770      	bx	lr

0800ca1e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ca1e:	b480      	push	{r7}
 800ca20:	b085      	sub	sp, #20
 800ca22:	af00      	add	r7, sp, #0
 800ca24:	6078      	str	r0, [r7, #4]
 800ca26:	460b      	mov	r3, r1
 800ca28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	695b      	ldr	r3, [r3, #20]
 800ca2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ca30:	887a      	ldrh	r2, [r7, #2]
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	4013      	ands	r3, r2
 800ca36:	041a      	lsls	r2, r3, #16
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	43d9      	mvns	r1, r3
 800ca3c:	887b      	ldrh	r3, [r7, #2]
 800ca3e:	400b      	ands	r3, r1
 800ca40:	431a      	orrs	r2, r3
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	619a      	str	r2, [r3, #24]
}
 800ca46:	bf00      	nop
 800ca48:	3714      	adds	r7, #20
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr
	...

0800ca54 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800ca54:	b480      	push	{r7}
 800ca56:	b083      	sub	sp, #12
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800ca5c:	4a08      	ldr	r2, [pc, #32]	; (800ca80 <HAL_HSEM_FastTake+0x2c>)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	3320      	adds	r3, #32
 800ca62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca66:	4a07      	ldr	r2, [pc, #28]	; (800ca84 <HAL_HSEM_FastTake+0x30>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d101      	bne.n	800ca70 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	e000      	b.n	800ca72 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800ca70:	2301      	movs	r3, #1
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	370c      	adds	r7, #12
 800ca76:	46bd      	mov	sp, r7
 800ca78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7c:	4770      	bx	lr
 800ca7e:	bf00      	nop
 800ca80:	58026400 	.word	0x58026400
 800ca84:	80000300 	.word	0x80000300

0800ca88 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b083      	sub	sp, #12
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800ca92:	4906      	ldr	r1, [pc, #24]	; (800caac <HAL_HSEM_Release+0x24>)
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800caa0:	bf00      	nop
 800caa2:	370c      	adds	r7, #12
 800caa4:	46bd      	mov	sp, r7
 800caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caaa:	4770      	bx	lr
 800caac:	58026400 	.word	0x58026400

0800cab0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b082      	sub	sp, #8
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d101      	bne.n	800cac2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800cabe:	2301      	movs	r3, #1
 800cac0:	e07f      	b.n	800cbc2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cac8:	b2db      	uxtb	r3, r3
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d106      	bne.n	800cadc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2200      	movs	r2, #0
 800cad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f000 f8a9 	bl	800cc2e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2224      	movs	r2, #36	; 0x24
 800cae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	681a      	ldr	r2, [r3, #0]
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f022 0201 	bic.w	r2, r2, #1
 800caf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	685a      	ldr	r2, [r3, #4]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800cb00:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	689a      	ldr	r2, [r3, #8]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cb10:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	68db      	ldr	r3, [r3, #12]
 800cb16:	2b01      	cmp	r3, #1
 800cb18:	d107      	bne.n	800cb2a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	689a      	ldr	r2, [r3, #8]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cb26:	609a      	str	r2, [r3, #8]
 800cb28:	e006      	b.n	800cb38 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	689a      	ldr	r2, [r3, #8]
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800cb36:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	68db      	ldr	r3, [r3, #12]
 800cb3c:	2b02      	cmp	r3, #2
 800cb3e:	d104      	bne.n	800cb4a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cb48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	6859      	ldr	r1, [r3, #4]
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681a      	ldr	r2, [r3, #0]
 800cb54:	4b1d      	ldr	r3, [pc, #116]	; (800cbcc <HAL_I2C_Init+0x11c>)
 800cb56:	430b      	orrs	r3, r1
 800cb58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	68da      	ldr	r2, [r3, #12]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cb68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	691a      	ldr	r2, [r3, #16]
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	695b      	ldr	r3, [r3, #20]
 800cb72:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	699b      	ldr	r3, [r3, #24]
 800cb7a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	430a      	orrs	r2, r1
 800cb82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	69d9      	ldr	r1, [r3, #28]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6a1a      	ldr	r2, [r3, #32]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	430a      	orrs	r2, r1
 800cb92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f042 0201 	orr.w	r2, r2, #1
 800cba2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2200      	movs	r2, #0
 800cba8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2220      	movs	r2, #32
 800cbae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800cbc0:	2300      	movs	r3, #0
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3708      	adds	r7, #8
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
 800cbca:	bf00      	nop
 800cbcc:	02008000 	.word	0x02008000

0800cbd0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b082      	sub	sp, #8
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d101      	bne.n	800cbe2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800cbde:	2301      	movs	r3, #1
 800cbe0:	e021      	b.n	800cc26 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2224      	movs	r2, #36	; 0x24
 800cbe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	681a      	ldr	r2, [r3, #0]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f022 0201 	bic.w	r2, r2, #1
 800cbf8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f000 f821 	bl	800cc42 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2200      	movs	r2, #0
 800cc04:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2200      	movs	r2, #0
 800cc12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2200      	movs	r2, #0
 800cc18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800cc24:	2300      	movs	r3, #0
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3708      	adds	r7, #8
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}

0800cc2e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800cc2e:	b480      	push	{r7}
 800cc30:	b083      	sub	sp, #12
 800cc32:	af00      	add	r7, sp, #0
 800cc34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800cc36:	bf00      	nop
 800cc38:	370c      	adds	r7, #12
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc40:	4770      	bx	lr

0800cc42 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800cc42:	b480      	push	{r7}
 800cc44:	b083      	sub	sp, #12
 800cc46:	af00      	add	r7, sp, #0
 800cc48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800cc4a:	bf00      	nop
 800cc4c:	370c      	adds	r7, #12
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc54:	4770      	bx	lr
	...

0800cc58 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b088      	sub	sp, #32
 800cc5c:	af02      	add	r7, sp, #8
 800cc5e:	60f8      	str	r0, [r7, #12]
 800cc60:	4608      	mov	r0, r1
 800cc62:	4611      	mov	r1, r2
 800cc64:	461a      	mov	r2, r3
 800cc66:	4603      	mov	r3, r0
 800cc68:	817b      	strh	r3, [r7, #10]
 800cc6a:	460b      	mov	r3, r1
 800cc6c:	813b      	strh	r3, [r7, #8]
 800cc6e:	4613      	mov	r3, r2
 800cc70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc78:	b2db      	uxtb	r3, r3
 800cc7a:	2b20      	cmp	r3, #32
 800cc7c:	f040 80f9 	bne.w	800ce72 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc80:	6a3b      	ldr	r3, [r7, #32]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d002      	beq.n	800cc8c <HAL_I2C_Mem_Write+0x34>
 800cc86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d105      	bne.n	800cc98 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc92:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800cc94:	2301      	movs	r3, #1
 800cc96:	e0ed      	b.n	800ce74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cc9e:	2b01      	cmp	r3, #1
 800cca0:	d101      	bne.n	800cca6 <HAL_I2C_Mem_Write+0x4e>
 800cca2:	2302      	movs	r3, #2
 800cca4:	e0e6      	b.n	800ce74 <HAL_I2C_Mem_Write+0x21c>
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	2201      	movs	r2, #1
 800ccaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ccae:	f7fe ffdf 	bl	800bc70 <HAL_GetTick>
 800ccb2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	9300      	str	r3, [sp, #0]
 800ccb8:	2319      	movs	r3, #25
 800ccba:	2201      	movs	r2, #1
 800ccbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ccc0:	68f8      	ldr	r0, [r7, #12]
 800ccc2:	f000 fadd 	bl	800d280 <I2C_WaitOnFlagUntilTimeout>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d001      	beq.n	800ccd0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800cccc:	2301      	movs	r3, #1
 800ccce:	e0d1      	b.n	800ce74 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	2221      	movs	r2, #33	; 0x21
 800ccd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	2240      	movs	r2, #64	; 0x40
 800ccdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	2200      	movs	r2, #0
 800cce4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	6a3a      	ldr	r2, [r7, #32]
 800ccea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ccf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ccf8:	88f8      	ldrh	r0, [r7, #6]
 800ccfa:	893a      	ldrh	r2, [r7, #8]
 800ccfc:	8979      	ldrh	r1, [r7, #10]
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	9301      	str	r3, [sp, #4]
 800cd02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd04:	9300      	str	r3, [sp, #0]
 800cd06:	4603      	mov	r3, r0
 800cd08:	68f8      	ldr	r0, [r7, #12]
 800cd0a:	f000 f9ed 	bl	800d0e8 <I2C_RequestMemoryWrite>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d005      	beq.n	800cd20 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	2200      	movs	r2, #0
 800cd18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	e0a9      	b.n	800ce74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd24:	b29b      	uxth	r3, r3
 800cd26:	2bff      	cmp	r3, #255	; 0xff
 800cd28:	d90e      	bls.n	800cd48 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	22ff      	movs	r2, #255	; 0xff
 800cd2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd34:	b2da      	uxtb	r2, r3
 800cd36:	8979      	ldrh	r1, [r7, #10]
 800cd38:	2300      	movs	r3, #0
 800cd3a:	9300      	str	r3, [sp, #0]
 800cd3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cd40:	68f8      	ldr	r0, [r7, #12]
 800cd42:	f000 fc45 	bl	800d5d0 <I2C_TransferConfig>
 800cd46:	e00f      	b.n	800cd68 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd4c:	b29a      	uxth	r2, r3
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd56:	b2da      	uxtb	r2, r3
 800cd58:	8979      	ldrh	r1, [r7, #10]
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	9300      	str	r3, [sp, #0]
 800cd5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cd62:	68f8      	ldr	r0, [r7, #12]
 800cd64:	f000 fc34 	bl	800d5d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cd68:	697a      	ldr	r2, [r7, #20]
 800cd6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cd6c:	68f8      	ldr	r0, [r7, #12]
 800cd6e:	f000 fac7 	bl	800d300 <I2C_WaitOnTXISFlagUntilTimeout>
 800cd72:	4603      	mov	r3, r0
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d001      	beq.n	800cd7c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800cd78:	2301      	movs	r3, #1
 800cd7a:	e07b      	b.n	800ce74 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd80:	781a      	ldrb	r2, [r3, #0]
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd8c:	1c5a      	adds	r2, r3, #1
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd96:	b29b      	uxth	r3, r3
 800cd98:	3b01      	subs	r3, #1
 800cd9a:	b29a      	uxth	r2, r3
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cda4:	3b01      	subs	r3, #1
 800cda6:	b29a      	uxth	r2, r3
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d034      	beq.n	800ce20 <HAL_I2C_Mem_Write+0x1c8>
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d130      	bne.n	800ce20 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800cdbe:	697b      	ldr	r3, [r7, #20]
 800cdc0:	9300      	str	r3, [sp, #0]
 800cdc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	2180      	movs	r1, #128	; 0x80
 800cdc8:	68f8      	ldr	r0, [r7, #12]
 800cdca:	f000 fa59 	bl	800d280 <I2C_WaitOnFlagUntilTimeout>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d001      	beq.n	800cdd8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	e04d      	b.n	800ce74 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cddc:	b29b      	uxth	r3, r3
 800cdde:	2bff      	cmp	r3, #255	; 0xff
 800cde0:	d90e      	bls.n	800ce00 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	22ff      	movs	r2, #255	; 0xff
 800cde6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdec:	b2da      	uxtb	r2, r3
 800cdee:	8979      	ldrh	r1, [r7, #10]
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	9300      	str	r3, [sp, #0]
 800cdf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cdf8:	68f8      	ldr	r0, [r7, #12]
 800cdfa:	f000 fbe9 	bl	800d5d0 <I2C_TransferConfig>
 800cdfe:	e00f      	b.n	800ce20 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce04:	b29a      	uxth	r2, r3
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce0e:	b2da      	uxtb	r2, r3
 800ce10:	8979      	ldrh	r1, [r7, #10]
 800ce12:	2300      	movs	r3, #0
 800ce14:	9300      	str	r3, [sp, #0]
 800ce16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ce1a:	68f8      	ldr	r0, [r7, #12]
 800ce1c:	f000 fbd8 	bl	800d5d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce24:	b29b      	uxth	r3, r3
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d19e      	bne.n	800cd68 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ce2a:	697a      	ldr	r2, [r7, #20]
 800ce2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ce2e:	68f8      	ldr	r0, [r7, #12]
 800ce30:	f000 faa6 	bl	800d380 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ce34:	4603      	mov	r3, r0
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d001      	beq.n	800ce3e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	e01a      	b.n	800ce74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	2220      	movs	r2, #32
 800ce44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	6859      	ldr	r1, [r3, #4]
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	681a      	ldr	r2, [r3, #0]
 800ce50:	4b0a      	ldr	r3, [pc, #40]	; (800ce7c <HAL_I2C_Mem_Write+0x224>)
 800ce52:	400b      	ands	r3, r1
 800ce54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	2220      	movs	r2, #32
 800ce5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	2200      	movs	r2, #0
 800ce62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	e000      	b.n	800ce74 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800ce72:	2302      	movs	r3, #2
  }
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3718      	adds	r7, #24
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}
 800ce7c:	fe00e800 	.word	0xfe00e800

0800ce80 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b088      	sub	sp, #32
 800ce84:	af02      	add	r7, sp, #8
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	4608      	mov	r0, r1
 800ce8a:	4611      	mov	r1, r2
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	4603      	mov	r3, r0
 800ce90:	817b      	strh	r3, [r7, #10]
 800ce92:	460b      	mov	r3, r1
 800ce94:	813b      	strh	r3, [r7, #8]
 800ce96:	4613      	mov	r3, r2
 800ce98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cea0:	b2db      	uxtb	r3, r3
 800cea2:	2b20      	cmp	r3, #32
 800cea4:	f040 80fd 	bne.w	800d0a2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800cea8:	6a3b      	ldr	r3, [r7, #32]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d002      	beq.n	800ceb4 <HAL_I2C_Mem_Read+0x34>
 800ceae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d105      	bne.n	800cec0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ceba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800cebc:	2301      	movs	r3, #1
 800cebe:	e0f1      	b.n	800d0a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cec6:	2b01      	cmp	r3, #1
 800cec8:	d101      	bne.n	800cece <HAL_I2C_Mem_Read+0x4e>
 800ceca:	2302      	movs	r3, #2
 800cecc:	e0ea      	b.n	800d0a4 <HAL_I2C_Mem_Read+0x224>
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2201      	movs	r2, #1
 800ced2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ced6:	f7fe fecb 	bl	800bc70 <HAL_GetTick>
 800ceda:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	9300      	str	r3, [sp, #0]
 800cee0:	2319      	movs	r3, #25
 800cee2:	2201      	movs	r2, #1
 800cee4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cee8:	68f8      	ldr	r0, [r7, #12]
 800ceea:	f000 f9c9 	bl	800d280 <I2C_WaitOnFlagUntilTimeout>
 800ceee:	4603      	mov	r3, r0
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d001      	beq.n	800cef8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800cef4:	2301      	movs	r3, #1
 800cef6:	e0d5      	b.n	800d0a4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	2222      	movs	r2, #34	; 0x22
 800cefc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2240      	movs	r2, #64	; 0x40
 800cf04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	6a3a      	ldr	r2, [r7, #32]
 800cf12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cf18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cf20:	88f8      	ldrh	r0, [r7, #6]
 800cf22:	893a      	ldrh	r2, [r7, #8]
 800cf24:	8979      	ldrh	r1, [r7, #10]
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	9301      	str	r3, [sp, #4]
 800cf2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf2c:	9300      	str	r3, [sp, #0]
 800cf2e:	4603      	mov	r3, r0
 800cf30:	68f8      	ldr	r0, [r7, #12]
 800cf32:	f000 f92d 	bl	800d190 <I2C_RequestMemoryRead>
 800cf36:	4603      	mov	r3, r0
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d005      	beq.n	800cf48 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800cf44:	2301      	movs	r3, #1
 800cf46:	e0ad      	b.n	800d0a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf4c:	b29b      	uxth	r3, r3
 800cf4e:	2bff      	cmp	r3, #255	; 0xff
 800cf50:	d90e      	bls.n	800cf70 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	22ff      	movs	r2, #255	; 0xff
 800cf56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf5c:	b2da      	uxtb	r2, r3
 800cf5e:	8979      	ldrh	r1, [r7, #10]
 800cf60:	4b52      	ldr	r3, [pc, #328]	; (800d0ac <HAL_I2C_Mem_Read+0x22c>)
 800cf62:	9300      	str	r3, [sp, #0]
 800cf64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cf68:	68f8      	ldr	r0, [r7, #12]
 800cf6a:	f000 fb31 	bl	800d5d0 <I2C_TransferConfig>
 800cf6e:	e00f      	b.n	800cf90 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf74:	b29a      	uxth	r2, r3
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf7e:	b2da      	uxtb	r2, r3
 800cf80:	8979      	ldrh	r1, [r7, #10]
 800cf82:	4b4a      	ldr	r3, [pc, #296]	; (800d0ac <HAL_I2C_Mem_Read+0x22c>)
 800cf84:	9300      	str	r3, [sp, #0]
 800cf86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cf8a:	68f8      	ldr	r0, [r7, #12]
 800cf8c:	f000 fb20 	bl	800d5d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	9300      	str	r3, [sp, #0]
 800cf94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf96:	2200      	movs	r2, #0
 800cf98:	2104      	movs	r1, #4
 800cf9a:	68f8      	ldr	r0, [r7, #12]
 800cf9c:	f000 f970 	bl	800d280 <I2C_WaitOnFlagUntilTimeout>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d001      	beq.n	800cfaa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	e07c      	b.n	800d0a4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfb4:	b2d2      	uxtb	r2, r2
 800cfb6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfbc:	1c5a      	adds	r2, r3, #1
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfc6:	3b01      	subs	r3, #1
 800cfc8:	b29a      	uxth	r2, r3
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfd2:	b29b      	uxth	r3, r3
 800cfd4:	3b01      	subs	r3, #1
 800cfd6:	b29a      	uxth	r2, r3
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfe0:	b29b      	uxth	r3, r3
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d034      	beq.n	800d050 <HAL_I2C_Mem_Read+0x1d0>
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d130      	bne.n	800d050 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800cfee:	697b      	ldr	r3, [r7, #20]
 800cff0:	9300      	str	r3, [sp, #0]
 800cff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff4:	2200      	movs	r2, #0
 800cff6:	2180      	movs	r1, #128	; 0x80
 800cff8:	68f8      	ldr	r0, [r7, #12]
 800cffa:	f000 f941 	bl	800d280 <I2C_WaitOnFlagUntilTimeout>
 800cffe:	4603      	mov	r3, r0
 800d000:	2b00      	cmp	r3, #0
 800d002:	d001      	beq.n	800d008 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800d004:	2301      	movs	r3, #1
 800d006:	e04d      	b.n	800d0a4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d00c:	b29b      	uxth	r3, r3
 800d00e:	2bff      	cmp	r3, #255	; 0xff
 800d010:	d90e      	bls.n	800d030 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	22ff      	movs	r2, #255	; 0xff
 800d016:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d01c:	b2da      	uxtb	r2, r3
 800d01e:	8979      	ldrh	r1, [r7, #10]
 800d020:	2300      	movs	r3, #0
 800d022:	9300      	str	r3, [sp, #0]
 800d024:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d028:	68f8      	ldr	r0, [r7, #12]
 800d02a:	f000 fad1 	bl	800d5d0 <I2C_TransferConfig>
 800d02e:	e00f      	b.n	800d050 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d034:	b29a      	uxth	r2, r3
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d03e:	b2da      	uxtb	r2, r3
 800d040:	8979      	ldrh	r1, [r7, #10]
 800d042:	2300      	movs	r3, #0
 800d044:	9300      	str	r3, [sp, #0]
 800d046:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d04a:	68f8      	ldr	r0, [r7, #12]
 800d04c:	f000 fac0 	bl	800d5d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d054:	b29b      	uxth	r3, r3
 800d056:	2b00      	cmp	r3, #0
 800d058:	d19a      	bne.n	800cf90 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d05a:	697a      	ldr	r2, [r7, #20]
 800d05c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d05e:	68f8      	ldr	r0, [r7, #12]
 800d060:	f000 f98e 	bl	800d380 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d064:	4603      	mov	r3, r0
 800d066:	2b00      	cmp	r3, #0
 800d068:	d001      	beq.n	800d06e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800d06a:	2301      	movs	r3, #1
 800d06c:	e01a      	b.n	800d0a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	2220      	movs	r2, #32
 800d074:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	6859      	ldr	r1, [r3, #4]
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	681a      	ldr	r2, [r3, #0]
 800d080:	4b0b      	ldr	r3, [pc, #44]	; (800d0b0 <HAL_I2C_Mem_Read+0x230>)
 800d082:	400b      	ands	r3, r1
 800d084:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	2220      	movs	r2, #32
 800d08a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	2200      	movs	r2, #0
 800d092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	2200      	movs	r2, #0
 800d09a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	e000      	b.n	800d0a4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800d0a2:	2302      	movs	r3, #2
  }
}
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	3718      	adds	r7, #24
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}
 800d0ac:	80002400 	.word	0x80002400
 800d0b0:	fe00e800 	.word	0xfe00e800

0800d0b4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b083      	sub	sp, #12
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d0c2:	b2db      	uxtb	r3, r3
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	370c      	adds	r7, #12
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr

0800d0d0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b083      	sub	sp, #12
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	370c      	adds	r7, #12
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e6:	4770      	bx	lr

0800d0e8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b086      	sub	sp, #24
 800d0ec:	af02      	add	r7, sp, #8
 800d0ee:	60f8      	str	r0, [r7, #12]
 800d0f0:	4608      	mov	r0, r1
 800d0f2:	4611      	mov	r1, r2
 800d0f4:	461a      	mov	r2, r3
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	817b      	strh	r3, [r7, #10]
 800d0fa:	460b      	mov	r3, r1
 800d0fc:	813b      	strh	r3, [r7, #8]
 800d0fe:	4613      	mov	r3, r2
 800d100:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800d102:	88fb      	ldrh	r3, [r7, #6]
 800d104:	b2da      	uxtb	r2, r3
 800d106:	8979      	ldrh	r1, [r7, #10]
 800d108:	4b20      	ldr	r3, [pc, #128]	; (800d18c <I2C_RequestMemoryWrite+0xa4>)
 800d10a:	9300      	str	r3, [sp, #0]
 800d10c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d110:	68f8      	ldr	r0, [r7, #12]
 800d112:	f000 fa5d 	bl	800d5d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d116:	69fa      	ldr	r2, [r7, #28]
 800d118:	69b9      	ldr	r1, [r7, #24]
 800d11a:	68f8      	ldr	r0, [r7, #12]
 800d11c:	f000 f8f0 	bl	800d300 <I2C_WaitOnTXISFlagUntilTimeout>
 800d120:	4603      	mov	r3, r0
 800d122:	2b00      	cmp	r3, #0
 800d124:	d001      	beq.n	800d12a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800d126:	2301      	movs	r3, #1
 800d128:	e02c      	b.n	800d184 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d12a:	88fb      	ldrh	r3, [r7, #6]
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d105      	bne.n	800d13c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d130:	893b      	ldrh	r3, [r7, #8]
 800d132:	b2da      	uxtb	r2, r3
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	629a      	str	r2, [r3, #40]	; 0x28
 800d13a:	e015      	b.n	800d168 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d13c:	893b      	ldrh	r3, [r7, #8]
 800d13e:	0a1b      	lsrs	r3, r3, #8
 800d140:	b29b      	uxth	r3, r3
 800d142:	b2da      	uxtb	r2, r3
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d14a:	69fa      	ldr	r2, [r7, #28]
 800d14c:	69b9      	ldr	r1, [r7, #24]
 800d14e:	68f8      	ldr	r0, [r7, #12]
 800d150:	f000 f8d6 	bl	800d300 <I2C_WaitOnTXISFlagUntilTimeout>
 800d154:	4603      	mov	r3, r0
 800d156:	2b00      	cmp	r3, #0
 800d158:	d001      	beq.n	800d15e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800d15a:	2301      	movs	r3, #1
 800d15c:	e012      	b.n	800d184 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d15e:	893b      	ldrh	r3, [r7, #8]
 800d160:	b2da      	uxtb	r2, r3
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800d168:	69fb      	ldr	r3, [r7, #28]
 800d16a:	9300      	str	r3, [sp, #0]
 800d16c:	69bb      	ldr	r3, [r7, #24]
 800d16e:	2200      	movs	r2, #0
 800d170:	2180      	movs	r1, #128	; 0x80
 800d172:	68f8      	ldr	r0, [r7, #12]
 800d174:	f000 f884 	bl	800d280 <I2C_WaitOnFlagUntilTimeout>
 800d178:	4603      	mov	r3, r0
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d001      	beq.n	800d182 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800d17e:	2301      	movs	r3, #1
 800d180:	e000      	b.n	800d184 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800d182:	2300      	movs	r3, #0
}
 800d184:	4618      	mov	r0, r3
 800d186:	3710      	adds	r7, #16
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}
 800d18c:	80002000 	.word	0x80002000

0800d190 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b086      	sub	sp, #24
 800d194:	af02      	add	r7, sp, #8
 800d196:	60f8      	str	r0, [r7, #12]
 800d198:	4608      	mov	r0, r1
 800d19a:	4611      	mov	r1, r2
 800d19c:	461a      	mov	r2, r3
 800d19e:	4603      	mov	r3, r0
 800d1a0:	817b      	strh	r3, [r7, #10]
 800d1a2:	460b      	mov	r3, r1
 800d1a4:	813b      	strh	r3, [r7, #8]
 800d1a6:	4613      	mov	r3, r2
 800d1a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d1aa:	88fb      	ldrh	r3, [r7, #6]
 800d1ac:	b2da      	uxtb	r2, r3
 800d1ae:	8979      	ldrh	r1, [r7, #10]
 800d1b0:	4b20      	ldr	r3, [pc, #128]	; (800d234 <I2C_RequestMemoryRead+0xa4>)
 800d1b2:	9300      	str	r3, [sp, #0]
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	68f8      	ldr	r0, [r7, #12]
 800d1b8:	f000 fa0a 	bl	800d5d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d1bc:	69fa      	ldr	r2, [r7, #28]
 800d1be:	69b9      	ldr	r1, [r7, #24]
 800d1c0:	68f8      	ldr	r0, [r7, #12]
 800d1c2:	f000 f89d 	bl	800d300 <I2C_WaitOnTXISFlagUntilTimeout>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d001      	beq.n	800d1d0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	e02c      	b.n	800d22a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d1d0:	88fb      	ldrh	r3, [r7, #6]
 800d1d2:	2b01      	cmp	r3, #1
 800d1d4:	d105      	bne.n	800d1e2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d1d6:	893b      	ldrh	r3, [r7, #8]
 800d1d8:	b2da      	uxtb	r2, r3
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	629a      	str	r2, [r3, #40]	; 0x28
 800d1e0:	e015      	b.n	800d20e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d1e2:	893b      	ldrh	r3, [r7, #8]
 800d1e4:	0a1b      	lsrs	r3, r3, #8
 800d1e6:	b29b      	uxth	r3, r3
 800d1e8:	b2da      	uxtb	r2, r3
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d1f0:	69fa      	ldr	r2, [r7, #28]
 800d1f2:	69b9      	ldr	r1, [r7, #24]
 800d1f4:	68f8      	ldr	r0, [r7, #12]
 800d1f6:	f000 f883 	bl	800d300 <I2C_WaitOnTXISFlagUntilTimeout>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d001      	beq.n	800d204 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800d200:	2301      	movs	r3, #1
 800d202:	e012      	b.n	800d22a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d204:	893b      	ldrh	r3, [r7, #8]
 800d206:	b2da      	uxtb	r2, r3
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800d20e:	69fb      	ldr	r3, [r7, #28]
 800d210:	9300      	str	r3, [sp, #0]
 800d212:	69bb      	ldr	r3, [r7, #24]
 800d214:	2200      	movs	r2, #0
 800d216:	2140      	movs	r1, #64	; 0x40
 800d218:	68f8      	ldr	r0, [r7, #12]
 800d21a:	f000 f831 	bl	800d280 <I2C_WaitOnFlagUntilTimeout>
 800d21e:	4603      	mov	r3, r0
 800d220:	2b00      	cmp	r3, #0
 800d222:	d001      	beq.n	800d228 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800d224:	2301      	movs	r3, #1
 800d226:	e000      	b.n	800d22a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800d228:	2300      	movs	r3, #0
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3710      	adds	r7, #16
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	80002000 	.word	0x80002000

0800d238 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d238:	b480      	push	{r7}
 800d23a:	b083      	sub	sp, #12
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	699b      	ldr	r3, [r3, #24]
 800d246:	f003 0302 	and.w	r3, r3, #2
 800d24a:	2b02      	cmp	r3, #2
 800d24c:	d103      	bne.n	800d256 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	2200      	movs	r2, #0
 800d254:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	699b      	ldr	r3, [r3, #24]
 800d25c:	f003 0301 	and.w	r3, r3, #1
 800d260:	2b01      	cmp	r3, #1
 800d262:	d007      	beq.n	800d274 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	699a      	ldr	r2, [r3, #24]
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f042 0201 	orr.w	r2, r2, #1
 800d272:	619a      	str	r2, [r3, #24]
  }
}
 800d274:	bf00      	nop
 800d276:	370c      	adds	r7, #12
 800d278:	46bd      	mov	sp, r7
 800d27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27e:	4770      	bx	lr

0800d280 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b084      	sub	sp, #16
 800d284:	af00      	add	r7, sp, #0
 800d286:	60f8      	str	r0, [r7, #12]
 800d288:	60b9      	str	r1, [r7, #8]
 800d28a:	603b      	str	r3, [r7, #0]
 800d28c:	4613      	mov	r3, r2
 800d28e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d290:	e022      	b.n	800d2d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d298:	d01e      	beq.n	800d2d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d29a:	f7fe fce9 	bl	800bc70 <HAL_GetTick>
 800d29e:	4602      	mov	r2, r0
 800d2a0:	69bb      	ldr	r3, [r7, #24]
 800d2a2:	1ad3      	subs	r3, r2, r3
 800d2a4:	683a      	ldr	r2, [r7, #0]
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	d302      	bcc.n	800d2b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d113      	bne.n	800d2d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2b4:	f043 0220 	orr.w	r2, r3, #32
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	2220      	movs	r2, #32
 800d2c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	e00f      	b.n	800d2f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	699a      	ldr	r2, [r3, #24]
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	4013      	ands	r3, r2
 800d2e2:	68ba      	ldr	r2, [r7, #8]
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	bf0c      	ite	eq
 800d2e8:	2301      	moveq	r3, #1
 800d2ea:	2300      	movne	r3, #0
 800d2ec:	b2db      	uxtb	r3, r3
 800d2ee:	461a      	mov	r2, r3
 800d2f0:	79fb      	ldrb	r3, [r7, #7]
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d0cd      	beq.n	800d292 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d2f6:	2300      	movs	r3, #0
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3710      	adds	r7, #16
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}

0800d300 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b084      	sub	sp, #16
 800d304:	af00      	add	r7, sp, #0
 800d306:	60f8      	str	r0, [r7, #12]
 800d308:	60b9      	str	r1, [r7, #8]
 800d30a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d30c:	e02c      	b.n	800d368 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d30e:	687a      	ldr	r2, [r7, #4]
 800d310:	68b9      	ldr	r1, [r7, #8]
 800d312:	68f8      	ldr	r0, [r7, #12]
 800d314:	f000 f870 	bl	800d3f8 <I2C_IsErrorOccurred>
 800d318:	4603      	mov	r3, r0
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d001      	beq.n	800d322 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d31e:	2301      	movs	r3, #1
 800d320:	e02a      	b.n	800d378 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d328:	d01e      	beq.n	800d368 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d32a:	f7fe fca1 	bl	800bc70 <HAL_GetTick>
 800d32e:	4602      	mov	r2, r0
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	1ad3      	subs	r3, r2, r3
 800d334:	68ba      	ldr	r2, [r7, #8]
 800d336:	429a      	cmp	r2, r3
 800d338:	d302      	bcc.n	800d340 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d113      	bne.n	800d368 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d344:	f043 0220 	orr.w	r2, r3, #32
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	2220      	movs	r2, #32
 800d350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	2200      	movs	r2, #0
 800d358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	2200      	movs	r2, #0
 800d360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800d364:	2301      	movs	r3, #1
 800d366:	e007      	b.n	800d378 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	699b      	ldr	r3, [r3, #24]
 800d36e:	f003 0302 	and.w	r3, r3, #2
 800d372:	2b02      	cmp	r3, #2
 800d374:	d1cb      	bne.n	800d30e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d376:	2300      	movs	r3, #0
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3710      	adds	r7, #16
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b084      	sub	sp, #16
 800d384:	af00      	add	r7, sp, #0
 800d386:	60f8      	str	r0, [r7, #12]
 800d388:	60b9      	str	r1, [r7, #8]
 800d38a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d38c:	e028      	b.n	800d3e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d38e:	687a      	ldr	r2, [r7, #4]
 800d390:	68b9      	ldr	r1, [r7, #8]
 800d392:	68f8      	ldr	r0, [r7, #12]
 800d394:	f000 f830 	bl	800d3f8 <I2C_IsErrorOccurred>
 800d398:	4603      	mov	r3, r0
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d001      	beq.n	800d3a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d39e:	2301      	movs	r3, #1
 800d3a0:	e026      	b.n	800d3f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d3a2:	f7fe fc65 	bl	800bc70 <HAL_GetTick>
 800d3a6:	4602      	mov	r2, r0
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	1ad3      	subs	r3, r2, r3
 800d3ac:	68ba      	ldr	r2, [r7, #8]
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	d302      	bcc.n	800d3b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d113      	bne.n	800d3e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3bc:	f043 0220 	orr.w	r2, r3, #32
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	2220      	movs	r2, #32
 800d3c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800d3dc:	2301      	movs	r3, #1
 800d3de:	e007      	b.n	800d3f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	699b      	ldr	r3, [r3, #24]
 800d3e6:	f003 0320 	and.w	r3, r3, #32
 800d3ea:	2b20      	cmp	r3, #32
 800d3ec:	d1cf      	bne.n	800d38e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800d3ee:	2300      	movs	r3, #0
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3710      	adds	r7, #16
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}

0800d3f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b08a      	sub	sp, #40	; 0x28
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	60f8      	str	r0, [r7, #12]
 800d400:	60b9      	str	r1, [r7, #8]
 800d402:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d404:	2300      	movs	r3, #0
 800d406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	699b      	ldr	r3, [r3, #24]
 800d410:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800d412:	2300      	movs	r3, #0
 800d414:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800d41a:	69bb      	ldr	r3, [r7, #24]
 800d41c:	f003 0310 	and.w	r3, r3, #16
 800d420:	2b00      	cmp	r3, #0
 800d422:	d075      	beq.n	800d510 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	2210      	movs	r2, #16
 800d42a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d42c:	e056      	b.n	800d4dc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d434:	d052      	beq.n	800d4dc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d436:	f7fe fc1b 	bl	800bc70 <HAL_GetTick>
 800d43a:	4602      	mov	r2, r0
 800d43c:	69fb      	ldr	r3, [r7, #28]
 800d43e:	1ad3      	subs	r3, r2, r3
 800d440:	68ba      	ldr	r2, [r7, #8]
 800d442:	429a      	cmp	r2, r3
 800d444:	d302      	bcc.n	800d44c <I2C_IsErrorOccurred+0x54>
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d147      	bne.n	800d4dc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	685b      	ldr	r3, [r3, #4]
 800d452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d456:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d45e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	699b      	ldr	r3, [r3, #24]
 800d466:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d46a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d46e:	d12e      	bne.n	800d4ce <I2C_IsErrorOccurred+0xd6>
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d476:	d02a      	beq.n	800d4ce <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800d478:	7cfb      	ldrb	r3, [r7, #19]
 800d47a:	2b20      	cmp	r3, #32
 800d47c:	d027      	beq.n	800d4ce <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	685a      	ldr	r2, [r3, #4]
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d48c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800d48e:	f7fe fbef 	bl	800bc70 <HAL_GetTick>
 800d492:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d494:	e01b      	b.n	800d4ce <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800d496:	f7fe fbeb 	bl	800bc70 <HAL_GetTick>
 800d49a:	4602      	mov	r2, r0
 800d49c:	69fb      	ldr	r3, [r7, #28]
 800d49e:	1ad3      	subs	r3, r2, r3
 800d4a0:	2b19      	cmp	r3, #25
 800d4a2:	d914      	bls.n	800d4ce <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4a8:	f043 0220 	orr.w	r2, r3, #32
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	2220      	movs	r2, #32
 800d4b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	699b      	ldr	r3, [r3, #24]
 800d4d4:	f003 0320 	and.w	r3, r3, #32
 800d4d8:	2b20      	cmp	r3, #32
 800d4da:	d1dc      	bne.n	800d496 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	699b      	ldr	r3, [r3, #24]
 800d4e2:	f003 0320 	and.w	r3, r3, #32
 800d4e6:	2b20      	cmp	r3, #32
 800d4e8:	d003      	beq.n	800d4f2 <I2C_IsErrorOccurred+0xfa>
 800d4ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d09d      	beq.n	800d42e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800d4f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d103      	bne.n	800d502 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	2220      	movs	r2, #32
 800d500:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800d502:	6a3b      	ldr	r3, [r7, #32]
 800d504:	f043 0304 	orr.w	r3, r3, #4
 800d508:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800d50a:	2301      	movs	r3, #1
 800d50c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	699b      	ldr	r3, [r3, #24]
 800d516:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800d518:	69bb      	ldr	r3, [r7, #24]
 800d51a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d00b      	beq.n	800d53a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800d522:	6a3b      	ldr	r3, [r7, #32]
 800d524:	f043 0301 	orr.w	r3, r3, #1
 800d528:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d532:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d534:	2301      	movs	r3, #1
 800d536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800d53a:	69bb      	ldr	r3, [r7, #24]
 800d53c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d540:	2b00      	cmp	r3, #0
 800d542:	d00b      	beq.n	800d55c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800d544:	6a3b      	ldr	r3, [r7, #32]
 800d546:	f043 0308 	orr.w	r3, r3, #8
 800d54a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d554:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d556:	2301      	movs	r3, #1
 800d558:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800d55c:	69bb      	ldr	r3, [r7, #24]
 800d55e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d562:	2b00      	cmp	r3, #0
 800d564:	d00b      	beq.n	800d57e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800d566:	6a3b      	ldr	r3, [r7, #32]
 800d568:	f043 0302 	orr.w	r3, r3, #2
 800d56c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d576:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d578:	2301      	movs	r3, #1
 800d57a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800d57e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d582:	2b00      	cmp	r3, #0
 800d584:	d01c      	beq.n	800d5c0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d586:	68f8      	ldr	r0, [r7, #12]
 800d588:	f7ff fe56 	bl	800d238 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	6859      	ldr	r1, [r3, #4]
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	681a      	ldr	r2, [r3, #0]
 800d596:	4b0d      	ldr	r3, [pc, #52]	; (800d5cc <I2C_IsErrorOccurred+0x1d4>)
 800d598:	400b      	ands	r3, r1
 800d59a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d5a0:	6a3b      	ldr	r3, [r7, #32]
 800d5a2:	431a      	orrs	r2, r3
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	2220      	movs	r2, #32
 800d5ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800d5c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3728      	adds	r7, #40	; 0x28
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}
 800d5cc:	fe00e800 	.word	0xfe00e800

0800d5d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b087      	sub	sp, #28
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	60f8      	str	r0, [r7, #12]
 800d5d8:	607b      	str	r3, [r7, #4]
 800d5da:	460b      	mov	r3, r1
 800d5dc:	817b      	strh	r3, [r7, #10]
 800d5de:	4613      	mov	r3, r2
 800d5e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d5e2:	897b      	ldrh	r3, [r7, #10]
 800d5e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d5e8:	7a7b      	ldrb	r3, [r7, #9]
 800d5ea:	041b      	lsls	r3, r3, #16
 800d5ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d5f0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d5f6:	6a3b      	ldr	r3, [r7, #32]
 800d5f8:	4313      	orrs	r3, r2
 800d5fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d5fe:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	685a      	ldr	r2, [r3, #4]
 800d606:	6a3b      	ldr	r3, [r7, #32]
 800d608:	0d5b      	lsrs	r3, r3, #21
 800d60a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800d60e:	4b08      	ldr	r3, [pc, #32]	; (800d630 <I2C_TransferConfig+0x60>)
 800d610:	430b      	orrs	r3, r1
 800d612:	43db      	mvns	r3, r3
 800d614:	ea02 0103 	and.w	r1, r2, r3
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	697a      	ldr	r2, [r7, #20]
 800d61e:	430a      	orrs	r2, r1
 800d620:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d622:	bf00      	nop
 800d624:	371c      	adds	r7, #28
 800d626:	46bd      	mov	sp, r7
 800d628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62c:	4770      	bx	lr
 800d62e:	bf00      	nop
 800d630:	03ff63ff 	.word	0x03ff63ff

0800d634 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d634:	b480      	push	{r7}
 800d636:	b083      	sub	sp, #12
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
 800d63c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d644:	b2db      	uxtb	r3, r3
 800d646:	2b20      	cmp	r3, #32
 800d648:	d138      	bne.n	800d6bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d650:	2b01      	cmp	r3, #1
 800d652:	d101      	bne.n	800d658 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d654:	2302      	movs	r3, #2
 800d656:	e032      	b.n	800d6be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2201      	movs	r2, #1
 800d65c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2224      	movs	r2, #36	; 0x24
 800d664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	681a      	ldr	r2, [r3, #0]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f022 0201 	bic.w	r2, r2, #1
 800d676:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	681a      	ldr	r2, [r3, #0]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d686:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	6819      	ldr	r1, [r3, #0]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	683a      	ldr	r2, [r7, #0]
 800d694:	430a      	orrs	r2, r1
 800d696:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	681a      	ldr	r2, [r3, #0]
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f042 0201 	orr.w	r2, r2, #1
 800d6a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2220      	movs	r2, #32
 800d6ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	e000      	b.n	800d6be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d6bc:	2302      	movs	r3, #2
  }
}
 800d6be:	4618      	mov	r0, r3
 800d6c0:	370c      	adds	r7, #12
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c8:	4770      	bx	lr

0800d6ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d6ca:	b480      	push	{r7}
 800d6cc:	b085      	sub	sp, #20
 800d6ce:	af00      	add	r7, sp, #0
 800d6d0:	6078      	str	r0, [r7, #4]
 800d6d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d6da:	b2db      	uxtb	r3, r3
 800d6dc:	2b20      	cmp	r3, #32
 800d6de:	d139      	bne.n	800d754 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d6e6:	2b01      	cmp	r3, #1
 800d6e8:	d101      	bne.n	800d6ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d6ea:	2302      	movs	r3, #2
 800d6ec:	e033      	b.n	800d756 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2201      	movs	r2, #1
 800d6f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2224      	movs	r2, #36	; 0x24
 800d6fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	681a      	ldr	r2, [r3, #0]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f022 0201 	bic.w	r2, r2, #1
 800d70c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d71c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	021b      	lsls	r3, r3, #8
 800d722:	68fa      	ldr	r2, [r7, #12]
 800d724:	4313      	orrs	r3, r2
 800d726:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	68fa      	ldr	r2, [r7, #12]
 800d72e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	681a      	ldr	r2, [r3, #0]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f042 0201 	orr.w	r2, r2, #1
 800d73e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2220      	movs	r2, #32
 800d744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2200      	movs	r2, #0
 800d74c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d750:	2300      	movs	r3, #0
 800d752:	e000      	b.n	800d756 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d754:	2302      	movs	r3, #2
  }
}
 800d756:	4618      	mov	r0, r3
 800d758:	3714      	adds	r7, #20
 800d75a:	46bd      	mov	sp, r7
 800d75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d760:	4770      	bx	lr
	...

0800d764 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b084      	sub	sp, #16
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d101      	bne.n	800d776 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800d772:	2301      	movs	r3, #1
 800d774:	e0bf      	b.n	800d8f6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800d77c:	b2db      	uxtb	r3, r3
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d106      	bne.n	800d790 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2200      	movs	r2, #0
 800d786:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f7f6 ff10 	bl	80045b0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2202      	movs	r2, #2
 800d794:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	699a      	ldr	r2, [r3, #24]
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800d7a6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	6999      	ldr	r1, [r3, #24]
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	685a      	ldr	r2, [r3, #4]
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	689b      	ldr	r3, [r3, #8]
 800d7b6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d7bc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	691b      	ldr	r3, [r3, #16]
 800d7c2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	430a      	orrs	r2, r1
 800d7ca:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	6899      	ldr	r1, [r3, #8]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681a      	ldr	r2, [r3, #0]
 800d7d6:	4b4a      	ldr	r3, [pc, #296]	; (800d900 <HAL_LTDC_Init+0x19c>)
 800d7d8:	400b      	ands	r3, r1
 800d7da:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	695b      	ldr	r3, [r3, #20]
 800d7e0:	041b      	lsls	r3, r3, #16
 800d7e2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	6899      	ldr	r1, [r3, #8]
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	699a      	ldr	r2, [r3, #24]
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	431a      	orrs	r2, r3
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	430a      	orrs	r2, r1
 800d7f8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	68d9      	ldr	r1, [r3, #12]
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681a      	ldr	r2, [r3, #0]
 800d804:	4b3e      	ldr	r3, [pc, #248]	; (800d900 <HAL_LTDC_Init+0x19c>)
 800d806:	400b      	ands	r3, r1
 800d808:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	69db      	ldr	r3, [r3, #28]
 800d80e:	041b      	lsls	r3, r3, #16
 800d810:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	68d9      	ldr	r1, [r3, #12]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6a1a      	ldr	r2, [r3, #32]
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	431a      	orrs	r2, r3
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	430a      	orrs	r2, r1
 800d826:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	6919      	ldr	r1, [r3, #16]
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681a      	ldr	r2, [r3, #0]
 800d832:	4b33      	ldr	r3, [pc, #204]	; (800d900 <HAL_LTDC_Init+0x19c>)
 800d834:	400b      	ands	r3, r1
 800d836:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d83c:	041b      	lsls	r3, r3, #16
 800d83e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	6919      	ldr	r1, [r3, #16]
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	431a      	orrs	r2, r3
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	430a      	orrs	r2, r1
 800d854:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	6959      	ldr	r1, [r3, #20]
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681a      	ldr	r2, [r3, #0]
 800d860:	4b27      	ldr	r3, [pc, #156]	; (800d900 <HAL_LTDC_Init+0x19c>)
 800d862:	400b      	ands	r3, r1
 800d864:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d86a:	041b      	lsls	r3, r3, #16
 800d86c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	6959      	ldr	r1, [r3, #20]
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	431a      	orrs	r2, r3
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	430a      	orrs	r2, r1
 800d882:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d88a:	021b      	lsls	r3, r3, #8
 800d88c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d894:	041b      	lsls	r3, r3, #16
 800d896:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800d8a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800d8ae:	68ba      	ldr	r2, [r7, #8]
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	4313      	orrs	r3, r2
 800d8b4:	687a      	ldr	r2, [r7, #4]
 800d8b6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800d8ba:	431a      	orrs	r2, r3
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	430a      	orrs	r2, r1
 800d8c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	f042 0206 	orr.w	r2, r2, #6
 800d8d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	699a      	ldr	r2, [r3, #24]
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	f042 0201 	orr.w	r2, r2, #1
 800d8e2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800d8f4:	2300      	movs	r3, #0
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3710      	adds	r7, #16
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}
 800d8fe:	bf00      	nop
 800d900:	f000f800 	.word	0xf000f800

0800d904 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b084      	sub	sp, #16
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d912:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d91a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	f003 0304 	and.w	r3, r3, #4
 800d922:	2b00      	cmp	r3, #0
 800d924:	d023      	beq.n	800d96e <HAL_LTDC_IRQHandler+0x6a>
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	f003 0304 	and.w	r3, r3, #4
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d01e      	beq.n	800d96e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f022 0204 	bic.w	r2, r2, #4
 800d93e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	2204      	movs	r2, #4
 800d946:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d94e:	f043 0201 	orr.w	r2, r3, #1
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2204      	movs	r2, #4
 800d95c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2200      	movs	r2, #0
 800d964:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f000 f86f 	bl	800da4c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	f003 0302 	and.w	r3, r3, #2
 800d974:	2b00      	cmp	r3, #0
 800d976:	d023      	beq.n	800d9c0 <HAL_LTDC_IRQHandler+0xbc>
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	f003 0302 	and.w	r3, r3, #2
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d01e      	beq.n	800d9c0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	f022 0202 	bic.w	r2, r2, #2
 800d990:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	2202      	movs	r2, #2
 800d998:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d9a0:	f043 0202 	orr.w	r2, r3, #2
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2204      	movs	r2, #4
 800d9ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f000 f846 	bl	800da4c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	f003 0301 	and.w	r3, r3, #1
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d01b      	beq.n	800da02 <HAL_LTDC_IRQHandler+0xfe>
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	f003 0301 	and.w	r3, r3, #1
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d016      	beq.n	800da02 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	f022 0201 	bic.w	r2, r2, #1
 800d9e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	2201      	movs	r2, #1
 800d9ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2201      	movs	r2, #1
 800d9f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f7f9 fc91 	bl	8007324 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	f003 0308 	and.w	r3, r3, #8
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d01b      	beq.n	800da44 <HAL_LTDC_IRQHandler+0x140>
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	f003 0308 	and.w	r3, r3, #8
 800da12:	2b00      	cmp	r3, #0
 800da14:	d016      	beq.n	800da44 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	f022 0208 	bic.w	r2, r2, #8
 800da24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	2208      	movs	r2, #8
 800da2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2201      	movs	r2, #1
 800da32:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2200      	movs	r2, #0
 800da3a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f000 f80e 	bl	800da60 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800da44:	bf00      	nop
 800da46:	3710      	adds	r7, #16
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}

0800da4c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800da4c:	b480      	push	{r7}
 800da4e:	b083      	sub	sp, #12
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800da54:	bf00      	nop
 800da56:	370c      	adds	r7, #12
 800da58:	46bd      	mov	sp, r7
 800da5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5e:	4770      	bx	lr

0800da60 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800da60:	b480      	push	{r7}
 800da62:	b083      	sub	sp, #12
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800da68:	bf00      	nop
 800da6a:	370c      	adds	r7, #12
 800da6c:	46bd      	mov	sp, r7
 800da6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da72:	4770      	bx	lr

0800da74 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800da74:	b5b0      	push	{r4, r5, r7, lr}
 800da76:	b084      	sub	sp, #16
 800da78:	af00      	add	r7, sp, #0
 800da7a:	60f8      	str	r0, [r7, #12]
 800da7c:	60b9      	str	r1, [r7, #8]
 800da7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800da86:	2b01      	cmp	r3, #1
 800da88:	d101      	bne.n	800da8e <HAL_LTDC_ConfigLayer+0x1a>
 800da8a:	2302      	movs	r3, #2
 800da8c:	e02c      	b.n	800dae8 <HAL_LTDC_ConfigLayer+0x74>
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	2201      	movs	r2, #1
 800da92:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	2202      	movs	r2, #2
 800da9a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800da9e:	68fa      	ldr	r2, [r7, #12]
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2134      	movs	r1, #52	; 0x34
 800daa4:	fb01 f303 	mul.w	r3, r1, r3
 800daa8:	4413      	add	r3, r2
 800daaa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	4614      	mov	r4, r2
 800dab2:	461d      	mov	r5, r3
 800dab4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dab6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dab8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800daba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dabc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dabe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dac0:	682b      	ldr	r3, [r5, #0]
 800dac2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800dac4:	687a      	ldr	r2, [r7, #4]
 800dac6:	68b9      	ldr	r1, [r7, #8]
 800dac8:	68f8      	ldr	r0, [r7, #12]
 800daca:	f000 f849 	bl	800db60 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	2201      	movs	r2, #1
 800dad4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	2201      	movs	r2, #1
 800dada:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	2200      	movs	r2, #0
 800dae2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800dae6:	2300      	movs	r3, #0
}
 800dae8:	4618      	mov	r0, r3
 800daea:	3710      	adds	r7, #16
 800daec:	46bd      	mov	sp, r7
 800daee:	bdb0      	pop	{r4, r5, r7, pc}

0800daf0 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800daf0:	b480      	push	{r7}
 800daf2:	b083      	sub	sp, #12
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800db00:	2b01      	cmp	r3, #1
 800db02:	d101      	bne.n	800db08 <HAL_LTDC_ProgramLineEvent+0x18>
 800db04:	2302      	movs	r3, #2
 800db06:	e023      	b.n	800db50 <HAL_LTDC_ProgramLineEvent+0x60>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2201      	movs	r2, #1
 800db0c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2202      	movs	r2, #2
 800db14:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	f022 0201 	bic.w	r2, r2, #1
 800db26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800db28:	4a0c      	ldr	r2, [pc, #48]	; (800db5c <HAL_LTDC_ProgramLineEvent+0x6c>)
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	f042 0201 	orr.w	r2, r2, #1
 800db3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2201      	movs	r2, #1
 800db42:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2200      	movs	r2, #0
 800db4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800db4e:	2300      	movs	r3, #0
}
 800db50:	4618      	mov	r0, r3
 800db52:	370c      	adds	r7, #12
 800db54:	46bd      	mov	sp, r7
 800db56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5a:	4770      	bx	lr
 800db5c:	50001000 	.word	0x50001000

0800db60 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800db60:	b480      	push	{r7}
 800db62:	b089      	sub	sp, #36	; 0x24
 800db64:	af00      	add	r7, sp, #0
 800db66:	60f8      	str	r0, [r7, #12]
 800db68:	60b9      	str	r1, [r7, #8]
 800db6a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	685a      	ldr	r2, [r3, #4]
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	68db      	ldr	r3, [r3, #12]
 800db76:	0c1b      	lsrs	r3, r3, #16
 800db78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800db7c:	4413      	add	r3, r2
 800db7e:	041b      	lsls	r3, r3, #16
 800db80:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	461a      	mov	r2, r3
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	01db      	lsls	r3, r3, #7
 800db8c:	4413      	add	r3, r2
 800db8e:	3384      	adds	r3, #132	; 0x84
 800db90:	685b      	ldr	r3, [r3, #4]
 800db92:	68fa      	ldr	r2, [r7, #12]
 800db94:	6812      	ldr	r2, [r2, #0]
 800db96:	4611      	mov	r1, r2
 800db98:	687a      	ldr	r2, [r7, #4]
 800db9a:	01d2      	lsls	r2, r2, #7
 800db9c:	440a      	add	r2, r1
 800db9e:	3284      	adds	r2, #132	; 0x84
 800dba0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800dba4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	68db      	ldr	r3, [r3, #12]
 800dbb0:	0c1b      	lsrs	r3, r3, #16
 800dbb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800dbb6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800dbb8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	4619      	mov	r1, r3
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	01db      	lsls	r3, r3, #7
 800dbc4:	440b      	add	r3, r1
 800dbc6:	3384      	adds	r3, #132	; 0x84
 800dbc8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800dbca:	69fb      	ldr	r3, [r7, #28]
 800dbcc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800dbce:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	68da      	ldr	r2, [r3, #12]
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	68db      	ldr	r3, [r3, #12]
 800dbda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dbde:	4413      	add	r3, r2
 800dbe0:	041b      	lsls	r3, r3, #16
 800dbe2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	461a      	mov	r2, r3
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	01db      	lsls	r3, r3, #7
 800dbee:	4413      	add	r3, r2
 800dbf0:	3384      	adds	r3, #132	; 0x84
 800dbf2:	689b      	ldr	r3, [r3, #8]
 800dbf4:	68fa      	ldr	r2, [r7, #12]
 800dbf6:	6812      	ldr	r2, [r2, #0]
 800dbf8:	4611      	mov	r1, r2
 800dbfa:	687a      	ldr	r2, [r7, #4]
 800dbfc:	01d2      	lsls	r2, r2, #7
 800dbfe:	440a      	add	r2, r1
 800dc00:	3284      	adds	r2, #132	; 0x84
 800dc02:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800dc06:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	689a      	ldr	r2, [r3, #8]
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	68db      	ldr	r3, [r3, #12]
 800dc12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dc16:	4413      	add	r3, r2
 800dc18:	1c5a      	adds	r2, r3, #1
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	4619      	mov	r1, r3
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	01db      	lsls	r3, r3, #7
 800dc24:	440b      	add	r3, r1
 800dc26:	3384      	adds	r3, #132	; 0x84
 800dc28:	4619      	mov	r1, r3
 800dc2a:	69fb      	ldr	r3, [r7, #28]
 800dc2c:	4313      	orrs	r3, r2
 800dc2e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	461a      	mov	r2, r3
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	01db      	lsls	r3, r3, #7
 800dc3a:	4413      	add	r3, r2
 800dc3c:	3384      	adds	r3, #132	; 0x84
 800dc3e:	691b      	ldr	r3, [r3, #16]
 800dc40:	68fa      	ldr	r2, [r7, #12]
 800dc42:	6812      	ldr	r2, [r2, #0]
 800dc44:	4611      	mov	r1, r2
 800dc46:	687a      	ldr	r2, [r7, #4]
 800dc48:	01d2      	lsls	r2, r2, #7
 800dc4a:	440a      	add	r2, r1
 800dc4c:	3284      	adds	r2, #132	; 0x84
 800dc4e:	f023 0307 	bic.w	r3, r3, #7
 800dc52:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	461a      	mov	r2, r3
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	01db      	lsls	r3, r3, #7
 800dc5e:	4413      	add	r3, r2
 800dc60:	3384      	adds	r3, #132	; 0x84
 800dc62:	461a      	mov	r2, r3
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	691b      	ldr	r3, [r3, #16]
 800dc68:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dc70:	021b      	lsls	r3, r3, #8
 800dc72:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800dc7a:	041b      	lsls	r3, r3, #16
 800dc7c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	699b      	ldr	r3, [r3, #24]
 800dc82:	061b      	lsls	r3, r3, #24
 800dc84:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	461a      	mov	r2, r3
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	01db      	lsls	r3, r3, #7
 800dc90:	4413      	add	r3, r2
 800dc92:	3384      	adds	r3, #132	; 0x84
 800dc94:	699b      	ldr	r3, [r3, #24]
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	461a      	mov	r2, r3
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	01db      	lsls	r3, r3, #7
 800dca0:	4413      	add	r3, r2
 800dca2:	3384      	adds	r3, #132	; 0x84
 800dca4:	461a      	mov	r2, r3
 800dca6:	2300      	movs	r3, #0
 800dca8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dcb0:	461a      	mov	r2, r3
 800dcb2:	69fb      	ldr	r3, [r7, #28]
 800dcb4:	431a      	orrs	r2, r3
 800dcb6:	69bb      	ldr	r3, [r7, #24]
 800dcb8:	431a      	orrs	r2, r3
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	4619      	mov	r1, r3
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	01db      	lsls	r3, r3, #7
 800dcc4:	440b      	add	r3, r1
 800dcc6:	3384      	adds	r3, #132	; 0x84
 800dcc8:	4619      	mov	r1, r3
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	4313      	orrs	r3, r2
 800dcce:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	461a      	mov	r2, r3
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	01db      	lsls	r3, r3, #7
 800dcda:	4413      	add	r3, r2
 800dcdc:	3384      	adds	r3, #132	; 0x84
 800dcde:	695b      	ldr	r3, [r3, #20]
 800dce0:	68fa      	ldr	r2, [r7, #12]
 800dce2:	6812      	ldr	r2, [r2, #0]
 800dce4:	4611      	mov	r1, r2
 800dce6:	687a      	ldr	r2, [r7, #4]
 800dce8:	01d2      	lsls	r2, r2, #7
 800dcea:	440a      	add	r2, r1
 800dcec:	3284      	adds	r2, #132	; 0x84
 800dcee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dcf2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	461a      	mov	r2, r3
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	01db      	lsls	r3, r3, #7
 800dcfe:	4413      	add	r3, r2
 800dd00:	3384      	adds	r3, #132	; 0x84
 800dd02:	461a      	mov	r2, r3
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	695b      	ldr	r3, [r3, #20]
 800dd08:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	461a      	mov	r2, r3
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	01db      	lsls	r3, r3, #7
 800dd14:	4413      	add	r3, r2
 800dd16:	3384      	adds	r3, #132	; 0x84
 800dd18:	69da      	ldr	r2, [r3, #28]
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	4619      	mov	r1, r3
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	01db      	lsls	r3, r3, #7
 800dd24:	440b      	add	r3, r1
 800dd26:	3384      	adds	r3, #132	; 0x84
 800dd28:	4619      	mov	r1, r3
 800dd2a:	4b58      	ldr	r3, [pc, #352]	; (800de8c <LTDC_SetConfig+0x32c>)
 800dd2c:	4013      	ands	r3, r2
 800dd2e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	69da      	ldr	r2, [r3, #28]
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	6a1b      	ldr	r3, [r3, #32]
 800dd38:	68f9      	ldr	r1, [r7, #12]
 800dd3a:	6809      	ldr	r1, [r1, #0]
 800dd3c:	4608      	mov	r0, r1
 800dd3e:	6879      	ldr	r1, [r7, #4]
 800dd40:	01c9      	lsls	r1, r1, #7
 800dd42:	4401      	add	r1, r0
 800dd44:	3184      	adds	r1, #132	; 0x84
 800dd46:	4313      	orrs	r3, r2
 800dd48:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	461a      	mov	r2, r3
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	01db      	lsls	r3, r3, #7
 800dd54:	4413      	add	r3, r2
 800dd56:	3384      	adds	r3, #132	; 0x84
 800dd58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	461a      	mov	r2, r3
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	01db      	lsls	r3, r3, #7
 800dd64:	4413      	add	r3, r2
 800dd66:	3384      	adds	r3, #132	; 0x84
 800dd68:	461a      	mov	r2, r3
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	461a      	mov	r2, r3
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	01db      	lsls	r3, r3, #7
 800dd78:	4413      	add	r3, r2
 800dd7a:	3384      	adds	r3, #132	; 0x84
 800dd7c:	461a      	mov	r2, r3
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd82:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	691b      	ldr	r3, [r3, #16]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d102      	bne.n	800dd92 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800dd8c:	2304      	movs	r3, #4
 800dd8e:	61fb      	str	r3, [r7, #28]
 800dd90:	e01b      	b.n	800ddca <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	691b      	ldr	r3, [r3, #16]
 800dd96:	2b01      	cmp	r3, #1
 800dd98:	d102      	bne.n	800dda0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800dd9a:	2303      	movs	r3, #3
 800dd9c:	61fb      	str	r3, [r7, #28]
 800dd9e:	e014      	b.n	800ddca <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	691b      	ldr	r3, [r3, #16]
 800dda4:	2b04      	cmp	r3, #4
 800dda6:	d00b      	beq.n	800ddc0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800ddac:	2b02      	cmp	r3, #2
 800ddae:	d007      	beq.n	800ddc0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800ddb4:	2b03      	cmp	r3, #3
 800ddb6:	d003      	beq.n	800ddc0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800ddbc:	2b07      	cmp	r3, #7
 800ddbe:	d102      	bne.n	800ddc6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800ddc0:	2302      	movs	r3, #2
 800ddc2:	61fb      	str	r3, [r7, #28]
 800ddc4:	e001      	b.n	800ddca <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	461a      	mov	r2, r3
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	01db      	lsls	r3, r3, #7
 800ddd4:	4413      	add	r3, r2
 800ddd6:	3384      	adds	r3, #132	; 0x84
 800ddd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddda:	68fa      	ldr	r2, [r7, #12]
 800dddc:	6812      	ldr	r2, [r2, #0]
 800ddde:	4611      	mov	r1, r2
 800dde0:	687a      	ldr	r2, [r7, #4]
 800dde2:	01d2      	lsls	r2, r2, #7
 800dde4:	440a      	add	r2, r1
 800dde6:	3284      	adds	r2, #132	; 0x84
 800dde8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800ddec:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddf2:	69fa      	ldr	r2, [r7, #28]
 800ddf4:	fb02 f303 	mul.w	r3, r2, r3
 800ddf8:	041a      	lsls	r2, r3, #16
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	6859      	ldr	r1, [r3, #4]
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	1acb      	subs	r3, r1, r3
 800de04:	69f9      	ldr	r1, [r7, #28]
 800de06:	fb01 f303 	mul.w	r3, r1, r3
 800de0a:	3307      	adds	r3, #7
 800de0c:	68f9      	ldr	r1, [r7, #12]
 800de0e:	6809      	ldr	r1, [r1, #0]
 800de10:	4608      	mov	r0, r1
 800de12:	6879      	ldr	r1, [r7, #4]
 800de14:	01c9      	lsls	r1, r1, #7
 800de16:	4401      	add	r1, r0
 800de18:	3184      	adds	r1, #132	; 0x84
 800de1a:	4313      	orrs	r3, r2
 800de1c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	461a      	mov	r2, r3
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	01db      	lsls	r3, r3, #7
 800de28:	4413      	add	r3, r2
 800de2a:	3384      	adds	r3, #132	; 0x84
 800de2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	4619      	mov	r1, r3
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	01db      	lsls	r3, r3, #7
 800de38:	440b      	add	r3, r1
 800de3a:	3384      	adds	r3, #132	; 0x84
 800de3c:	4619      	mov	r1, r3
 800de3e:	4b14      	ldr	r3, [pc, #80]	; (800de90 <LTDC_SetConfig+0x330>)
 800de40:	4013      	ands	r3, r2
 800de42:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	461a      	mov	r2, r3
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	01db      	lsls	r3, r3, #7
 800de4e:	4413      	add	r3, r2
 800de50:	3384      	adds	r3, #132	; 0x84
 800de52:	461a      	mov	r2, r3
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de58:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	461a      	mov	r2, r3
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	01db      	lsls	r3, r3, #7
 800de64:	4413      	add	r3, r2
 800de66:	3384      	adds	r3, #132	; 0x84
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	68fa      	ldr	r2, [r7, #12]
 800de6c:	6812      	ldr	r2, [r2, #0]
 800de6e:	4611      	mov	r1, r2
 800de70:	687a      	ldr	r2, [r7, #4]
 800de72:	01d2      	lsls	r2, r2, #7
 800de74:	440a      	add	r2, r1
 800de76:	3284      	adds	r2, #132	; 0x84
 800de78:	f043 0301 	orr.w	r3, r3, #1
 800de7c:	6013      	str	r3, [r2, #0]
}
 800de7e:	bf00      	nop
 800de80:	3724      	adds	r7, #36	; 0x24
 800de82:	46bd      	mov	sp, r7
 800de84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de88:	4770      	bx	lr
 800de8a:	bf00      	nop
 800de8c:	fffff8f8 	.word	0xfffff8f8
 800de90:	fffff800 	.word	0xfffff800

0800de94 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b084      	sub	sp, #16
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800de9c:	f7fd fee8 	bl	800bc70 <HAL_GetTick>
 800dea0:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d101      	bne.n	800deac <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800dea8:	2301      	movs	r3, #1
 800deaa:	e03b      	b.n	800df24 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2200      	movs	r2, #0
 800deb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2202      	movs	r2, #2
 800deb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	68da      	ldr	r2, [r3, #12]
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	f022 0201 	bic.w	r2, r2, #1
 800deca:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800decc:	e00f      	b.n	800deee <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800dece:	f7fd fecf 	bl	800bc70 <HAL_GetTick>
 800ded2:	4602      	mov	r2, r0
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	1ad3      	subs	r3, r2, r3
 800ded8:	2b05      	cmp	r3, #5
 800deda:	d908      	bls.n	800deee <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2240      	movs	r2, #64	; 0x40
 800dee0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2203      	movs	r2, #3
 800dee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 800deea:	2301      	movs	r3, #1
 800deec:	e01a      	b.n	800df24 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	68db      	ldr	r3, [r3, #12]
 800def4:	f003 0301 	and.w	r3, r3, #1
 800def8:	2b00      	cmp	r3, #0
 800defa:	d1e8      	bne.n	800dece <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f000 f894 	bl	800e02a <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2200      	movs	r2, #0
 800df06:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2200      	movs	r2, #0
 800df0c:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2200      	movs	r2, #0
 800df12:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2200      	movs	r2, #0
 800df18:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2201      	movs	r2, #1
 800df1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800df22:	2300      	movs	r3, #0
}
 800df24:	4618      	mov	r0, r3
 800df26:	3710      	adds	r7, #16
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd80      	pop	{r7, pc}

0800df2c <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 800df2c:	b480      	push	{r7}
 800df2e:	b083      	sub	sp, #12
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d101      	bne.n	800df3e <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800df3a:	2301      	movs	r3, #1
 800df3c:	e048      	b.n	800dfd0 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	68da      	ldr	r2, [r3, #12]
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	f022 0201 	bic.w	r2, r2, #1
 800df4c:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	2200      	movs	r2, #0
 800df54:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	2200      	movs	r2, #0
 800df5c:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	2200      	movs	r2, #0
 800df64:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	2200      	movs	r2, #0
 800df6c:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	2200      	movs	r2, #0
 800df74:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	2200      	movs	r2, #0
 800df7c:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	2200      	movs	r2, #0
 800df84:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	2200      	movs	r2, #0
 800df8c:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	2200      	movs	r2, #0
 800df94:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	2200      	movs	r2, #0
 800df9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	221f      	movs	r2, #31
 800dfa4:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2200      	movs	r2, #0
 800dfb0:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2200      	movs	r2, #0
 800dfca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dfce:	2300      	movs	r3, #0
}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	370c      	adds	r7, #12
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfda:	4770      	bx	lr

0800dfdc <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800dfdc:	b480      	push	{r7}
 800dfde:	b083      	sub	sp, #12
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d101      	bne.n	800dfee <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800dfea:	2301      	movs	r3, #1
 800dfec:	e017      	b.n	800e01e <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dff4:	b2db      	uxtb	r3, r3
 800dff6:	2b02      	cmp	r3, #2
 800dff8:	d004      	beq.n	800e004 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2280      	movs	r2, #128	; 0x80
 800dffe:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 800e000:	2301      	movs	r3, #1
 800e002:	e00c      	b.n	800e01e <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2204      	movs	r2, #4
 800e008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	68da      	ldr	r2, [r3, #12]
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	f022 0201 	bic.w	r2, r2, #1
 800e01a:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800e01c:	2300      	movs	r3, #0
}
 800e01e:	4618      	mov	r0, r3
 800e020:	370c      	adds	r7, #12
 800e022:	46bd      	mov	sp, r7
 800e024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e028:	4770      	bx	lr

0800e02a <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800e02a:	b480      	push	{r7}
 800e02c:	b085      	sub	sp, #20
 800e02e:	af00      	add	r7, sp, #0
 800e030:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	68d9      	ldr	r1, [r3, #12]
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	691a      	ldr	r2, [r3, #16]
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	430a      	orrs	r2, r1
 800e040:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	695a      	ldr	r2, [r3, #20]
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	699b      	ldr	r3, [r3, #24]
 800e04a:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800e050:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6a1b      	ldr	r3, [r3, #32]
 800e056:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800e05c:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e062:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800e068:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e06e:	3b01      	subs	r3, #1
 800e070:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800e072:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800e07e:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800e080:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	685b      	ldr	r3, [r3, #4]
 800e086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e08a:	d107      	bne.n	800e09c <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	691a      	ldr	r2, [r3, #16]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800e09a:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	da11      	bge.n	800e0d0 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	695a      	ldr	r2, [r3, #20]
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e0ba:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0c0:	425b      	negs	r3, r3
 800e0c2:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	68fa      	ldr	r2, [r7, #12]
 800e0ca:	b292      	uxth	r2, r2
 800e0cc:	621a      	str	r2, [r3, #32]
 800e0ce:	e006      	b.n	800e0de <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	b292      	uxth	r2, r2
 800e0dc:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	da15      	bge.n	800e112 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	695a      	ldr	r2, [r3, #20]
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800e0f4:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0fa:	425b      	negs	r3, r3
 800e0fc:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	6a19      	ldr	r1, [r3, #32]
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	041a      	lsls	r2, r3, #16
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	430a      	orrs	r2, r1
 800e10e:	621a      	str	r2, [r3, #32]
 800e110:	e009      	b.n	800e126 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	6a19      	ldr	r1, [r3, #32]
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e11c:	041a      	lsls	r2, r3, #16
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	430a      	orrs	r2, r1
 800e124:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	685b      	ldr	r3, [r3, #4]
 800e12a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e12e:	d006      	beq.n	800e13e <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	685a      	ldr	r2, [r3, #4]
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	b2d2      	uxtb	r2, r2
 800e13a:	629a      	str	r2, [r3, #40]	; 0x28
 800e13c:	e003      	b.n	800e146 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	2200      	movs	r2, #0
 800e144:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	2200      	movs	r2, #0
 800e14c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800e14e:	bf00      	nop
 800e150:	3714      	adds	r7, #20
 800e152:	46bd      	mov	sp, r7
 800e154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e158:	4770      	bx	lr
	...

0800e15c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b084      	sub	sp, #16
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800e164:	4b29      	ldr	r3, [pc, #164]	; (800e20c <HAL_PWREx_ConfigSupply+0xb0>)
 800e166:	68db      	ldr	r3, [r3, #12]
 800e168:	f003 0307 	and.w	r3, r3, #7
 800e16c:	2b06      	cmp	r3, #6
 800e16e:	d00a      	beq.n	800e186 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800e170:	4b26      	ldr	r3, [pc, #152]	; (800e20c <HAL_PWREx_ConfigSupply+0xb0>)
 800e172:	68db      	ldr	r3, [r3, #12]
 800e174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e178:	687a      	ldr	r2, [r7, #4]
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d001      	beq.n	800e182 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800e17e:	2301      	movs	r3, #1
 800e180:	e040      	b.n	800e204 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800e182:	2300      	movs	r3, #0
 800e184:	e03e      	b.n	800e204 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800e186:	4b21      	ldr	r3, [pc, #132]	; (800e20c <HAL_PWREx_ConfigSupply+0xb0>)
 800e188:	68db      	ldr	r3, [r3, #12]
 800e18a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800e18e:	491f      	ldr	r1, [pc, #124]	; (800e20c <HAL_PWREx_ConfigSupply+0xb0>)
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	4313      	orrs	r3, r2
 800e194:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800e196:	f7fd fd6b 	bl	800bc70 <HAL_GetTick>
 800e19a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e19c:	e009      	b.n	800e1b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800e19e:	f7fd fd67 	bl	800bc70 <HAL_GetTick>
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	1ad3      	subs	r3, r2, r3
 800e1a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e1ac:	d901      	bls.n	800e1b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800e1ae:	2301      	movs	r3, #1
 800e1b0:	e028      	b.n	800e204 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e1b2:	4b16      	ldr	r3, [pc, #88]	; (800e20c <HAL_PWREx_ConfigSupply+0xb0>)
 800e1b4:	685b      	ldr	r3, [r3, #4]
 800e1b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e1ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e1be:	d1ee      	bne.n	800e19e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2b1e      	cmp	r3, #30
 800e1c4:	d008      	beq.n	800e1d8 <HAL_PWREx_ConfigSupply+0x7c>
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2b2e      	cmp	r3, #46	; 0x2e
 800e1ca:	d005      	beq.n	800e1d8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	2b1d      	cmp	r3, #29
 800e1d0:	d002      	beq.n	800e1d8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	2b2d      	cmp	r3, #45	; 0x2d
 800e1d6:	d114      	bne.n	800e202 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800e1d8:	f7fd fd4a 	bl	800bc70 <HAL_GetTick>
 800e1dc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800e1de:	e009      	b.n	800e1f4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800e1e0:	f7fd fd46 	bl	800bc70 <HAL_GetTick>
 800e1e4:	4602      	mov	r2, r0
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	1ad3      	subs	r3, r2, r3
 800e1ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e1ee:	d901      	bls.n	800e1f4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800e1f0:	2301      	movs	r3, #1
 800e1f2:	e007      	b.n	800e204 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800e1f4:	4b05      	ldr	r3, [pc, #20]	; (800e20c <HAL_PWREx_ConfigSupply+0xb0>)
 800e1f6:	68db      	ldr	r3, [r3, #12]
 800e1f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e1fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e200:	d1ee      	bne.n	800e1e0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800e202:	2300      	movs	r3, #0
}
 800e204:	4618      	mov	r0, r3
 800e206:	3710      	adds	r7, #16
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}
 800e20c:	58024800 	.word	0x58024800

0800e210 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b086      	sub	sp, #24
 800e214:	af02      	add	r7, sp, #8
 800e216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800e218:	f7fd fd2a 	bl	800bc70 <HAL_GetTick>
 800e21c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d101      	bne.n	800e228 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800e224:	2301      	movs	r3, #1
 800e226:	e05f      	b.n	800e2e8 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e22e:	b2db      	uxtb	r3, r3
 800e230:	2b00      	cmp	r3, #0
 800e232:	d107      	bne.n	800e244 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	f7f6 faad 	bl	8004794 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800e23a:	f241 3188 	movw	r1, #5000	; 0x1388
 800e23e:	6878      	ldr	r0, [r7, #4]
 800e240:	f000 fcca 	bl	800ebd8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	689b      	ldr	r3, [r3, #8]
 800e252:	3b01      	subs	r3, #1
 800e254:	021a      	lsls	r2, r3, #8
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	430a      	orrs	r2, r1
 800e25c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e262:	9300      	str	r3, [sp, #0]
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	2200      	movs	r2, #0
 800e268:	2120      	movs	r1, #32
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f000 fcf5 	bl	800ec5a <QSPI_WaitFlagStateUntilTimeout>
 800e270:	4603      	mov	r3, r0
 800e272:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800e274:	7afb      	ldrb	r3, [r7, #11]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d135      	bne.n	800e2e6 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	681a      	ldr	r2, [r3, #0]
 800e280:	4b1b      	ldr	r3, [pc, #108]	; (800e2f0 <HAL_QSPI_Init+0xe0>)
 800e282:	4013      	ands	r3, r2
 800e284:	687a      	ldr	r2, [r7, #4]
 800e286:	6852      	ldr	r2, [r2, #4]
 800e288:	0611      	lsls	r1, r2, #24
 800e28a:	687a      	ldr	r2, [r7, #4]
 800e28c:	68d2      	ldr	r2, [r2, #12]
 800e28e:	4311      	orrs	r1, r2
 800e290:	687a      	ldr	r2, [r7, #4]
 800e292:	69d2      	ldr	r2, [r2, #28]
 800e294:	4311      	orrs	r1, r2
 800e296:	687a      	ldr	r2, [r7, #4]
 800e298:	6a12      	ldr	r2, [r2, #32]
 800e29a:	4311      	orrs	r1, r2
 800e29c:	687a      	ldr	r2, [r7, #4]
 800e29e:	6812      	ldr	r2, [r2, #0]
 800e2a0:	430b      	orrs	r3, r1
 800e2a2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	685a      	ldr	r2, [r3, #4]
 800e2aa:	4b12      	ldr	r3, [pc, #72]	; (800e2f4 <HAL_QSPI_Init+0xe4>)
 800e2ac:	4013      	ands	r3, r2
 800e2ae:	687a      	ldr	r2, [r7, #4]
 800e2b0:	6912      	ldr	r2, [r2, #16]
 800e2b2:	0411      	lsls	r1, r2, #16
 800e2b4:	687a      	ldr	r2, [r7, #4]
 800e2b6:	6952      	ldr	r2, [r2, #20]
 800e2b8:	4311      	orrs	r1, r2
 800e2ba:	687a      	ldr	r2, [r7, #4]
 800e2bc:	6992      	ldr	r2, [r2, #24]
 800e2be:	4311      	orrs	r1, r2
 800e2c0:	687a      	ldr	r2, [r7, #4]
 800e2c2:	6812      	ldr	r2, [r2, #0]
 800e2c4:	430b      	orrs	r3, r1
 800e2c6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	681a      	ldr	r2, [r3, #0]
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	f042 0201 	orr.w	r2, r2, #1
 800e2d6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2200      	movs	r2, #0
 800e2dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2201      	movs	r2, #1
 800e2e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800e2e6:	7afb      	ldrb	r3, [r7, #11]
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3710      	adds	r7, #16
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}
 800e2f0:	00ffff2f 	.word	0x00ffff2f
 800e2f4:	ffe0f8fe 	.word	0xffe0f8fe

0800e2f8 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b086      	sub	sp, #24
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	689b      	ldr	r3, [r3, #8]
 800e306:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800e310:	697b      	ldr	r3, [r7, #20]
 800e312:	f003 0304 	and.w	r3, r3, #4
 800e316:	2b00      	cmp	r3, #0
 800e318:	d064      	beq.n	800e3e4 <HAL_QSPI_IRQHandler+0xec>
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e320:	2b00      	cmp	r3, #0
 800e322:	d05f      	beq.n	800e3e4 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	3320      	adds	r3, #32
 800e32a:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e332:	b2db      	uxtb	r3, r3
 800e334:	2b12      	cmp	r3, #18
 800e336:	d125      	bne.n	800e384 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800e338:	e01c      	b.n	800e374 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d00f      	beq.n	800e362 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e346:	781a      	ldrb	r2, [r3, #0]
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e350:	1c5a      	adds	r2, r3, #1
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e35a:	1e5a      	subs	r2, r3, #1
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	62da      	str	r2, [r3, #44]	; 0x2c
 800e360:	e008      	b.n	800e374 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	681a      	ldr	r2, [r3, #0]
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e370:	601a      	str	r2, [r3, #0]
          break;
 800e372:	e033      	b.n	800e3dc <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	689b      	ldr	r3, [r3, #8]
 800e37a:	f003 0304 	and.w	r3, r3, #4
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d1db      	bne.n	800e33a <HAL_QSPI_IRQHandler+0x42>
 800e382:	e02b      	b.n	800e3dc <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e38a:	b2db      	uxtb	r3, r3
 800e38c:	2b22      	cmp	r3, #34	; 0x22
 800e38e:	d125      	bne.n	800e3dc <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800e390:	e01d      	b.n	800e3ce <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e396:	2b00      	cmp	r3, #0
 800e398:	d010      	beq.n	800e3bc <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e39e:	68fa      	ldr	r2, [r7, #12]
 800e3a0:	7812      	ldrb	r2, [r2, #0]
 800e3a2:	b2d2      	uxtb	r2, r2
 800e3a4:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3aa:	1c5a      	adds	r2, r3, #1
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3b4:	1e5a      	subs	r2, r3, #1
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	639a      	str	r2, [r3, #56]	; 0x38
 800e3ba:	e008      	b.n	800e3ce <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	681a      	ldr	r2, [r3, #0]
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e3ca:	601a      	str	r2, [r3, #0]
          break;
 800e3cc:	e006      	b.n	800e3dc <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	689b      	ldr	r3, [r3, #8]
 800e3d4:	f003 0304 	and.w	r3, r3, #4
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d1da      	bne.n	800e392 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f000 fbdd 	bl	800eb9c <HAL_QSPI_FifoThresholdCallback>
 800e3e2:	e13c      	b.n	800e65e <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	f003 0302 	and.w	r3, r3, #2
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	f000 80b0 	beq.w	800e550 <HAL_QSPI_IRQHandler+0x258>
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	f000 80aa 	beq.w	800e550 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	2202      	movs	r2, #2
 800e402:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	681a      	ldr	r2, [r3, #0]
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800e412:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e41a:	b2db      	uxtb	r3, r3
 800e41c:	2b12      	cmp	r3, #18
 800e41e:	d120      	bne.n	800e462 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f003 0304 	and.w	r3, r3, #4
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d011      	beq.n	800e452 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	681a      	ldr	r2, [r3, #0]
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	f022 0204 	bic.w	r2, r2, #4
 800e43c:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	68da      	ldr	r2, [r3, #12]
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	f022 0201 	bic.w	r2, r2, #1
 800e450:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2201      	movs	r2, #1
 800e456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f000 fb94 	bl	800eb88 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800e460:	e0fa      	b.n	800e658 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e468:	b2db      	uxtb	r3, r3
 800e46a:	2b22      	cmp	r3, #34	; 0x22
 800e46c:	d143      	bne.n	800e4f6 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f003 0304 	and.w	r3, r3, #4
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d012      	beq.n	800e4a2 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	681a      	ldr	r2, [r3, #0]
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	f022 0204 	bic.w	r2, r2, #4
 800e48a:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	68da      	ldr	r2, [r3, #12]
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	f022 0201 	bic.w	r2, r2, #1
 800e49e:	60da      	str	r2, [r3, #12]
 800e4a0:	e021      	b.n	800e4e6 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	3320      	adds	r3, #32
 800e4a8:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800e4aa:	e013      	b.n	800e4d4 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d017      	beq.n	800e4e4 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4b8:	68fa      	ldr	r2, [r7, #12]
 800e4ba:	7812      	ldrb	r2, [r2, #0]
 800e4bc:	b2d2      	uxtb	r2, r2
 800e4be:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4c4:	1c5a      	adds	r2, r3, #1
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4ce:	1e5a      	subs	r2, r3, #1
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	689b      	ldr	r3, [r3, #8]
 800e4da:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d1e4      	bne.n	800e4ac <HAL_QSPI_IRQHandler+0x1b4>
 800e4e2:	e000      	b.n	800e4e6 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800e4e4:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2201      	movs	r2, #1
 800e4ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f000 fb40 	bl	800eb74 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800e4f4:	e0b0      	b.n	800e658 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e4fc:	b2db      	uxtb	r3, r3
 800e4fe:	2b02      	cmp	r3, #2
 800e500:	d107      	bne.n	800e512 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2201      	movs	r2, #1
 800e506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800e50a:	6878      	ldr	r0, [r7, #4]
 800e50c:	f000 fb28 	bl	800eb60 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800e510:	e0a2      	b.n	800e658 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e518:	b2db      	uxtb	r3, r3
 800e51a:	2b08      	cmp	r3, #8
 800e51c:	f040 809c 	bne.w	800e658 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	695a      	ldr	r2, [r3, #20]
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800e52e:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2201      	movs	r2, #1
 800e534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d103      	bne.n	800e548 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f000 fb03 	bl	800eb4c <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800e546:	e087      	b.n	800e658 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f000 faf5 	bl	800eb38 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800e54e:	e083      	b.n	800e658 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800e550:	697b      	ldr	r3, [r7, #20]
 800e552:	f003 0308 	and.w	r3, r3, #8
 800e556:	2b00      	cmp	r3, #0
 800e558:	d01f      	beq.n	800e59a <HAL_QSPI_IRQHandler+0x2a2>
 800e55a:	693b      	ldr	r3, [r7, #16]
 800e55c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e560:	2b00      	cmp	r3, #0
 800e562:	d01a      	beq.n	800e59a <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	2208      	movs	r2, #8
 800e56a:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e576:	2b00      	cmp	r3, #0
 800e578:	d00b      	beq.n	800e592 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	681a      	ldr	r2, [r3, #0]
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800e588:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2201      	movs	r2, #1
 800e58e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f000 fb0c 	bl	800ebb0 <HAL_QSPI_StatusMatchCallback>
 800e598:	e061      	b.n	800e65e <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800e59a:	697b      	ldr	r3, [r7, #20]
 800e59c:	f003 0301 	and.w	r3, r3, #1
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d047      	beq.n	800e634 <HAL_QSPI_IRQHandler+0x33c>
 800e5a4:	693b      	ldr	r3, [r7, #16]
 800e5a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d042      	beq.n	800e634 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	2201      	movs	r2, #1
 800e5b4:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	681a      	ldr	r2, [r3, #0]
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800e5c4:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5ca:	f043 0202 	orr.w	r2, r3, #2
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	f003 0304 	and.w	r3, r3, #4
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d021      	beq.n	800e624 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	681a      	ldr	r2, [r3, #0]
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	f022 0204 	bic.w	r2, r2, #4
 800e5ee:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5f4:	4a1c      	ldr	r2, [pc, #112]	; (800e668 <HAL_QSPI_IRQHandler+0x370>)
 800e5f6:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f7ff fced 	bl	800dfdc <HAL_MDMA_Abort_IT>
 800e602:	4603      	mov	r3, r0
 800e604:	2b00      	cmp	r3, #0
 800e606:	d029      	beq.n	800e65c <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e60c:	f043 0204 	orr.w	r2, r3, #4
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2201      	movs	r2, #1
 800e618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800e61c:	6878      	ldr	r0, [r7, #4]
 800e61e:	f000 fa8b 	bl	800eb38 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800e622:	e01b      	b.n	800e65c <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2201      	movs	r2, #1
 800e628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800e62c:	6878      	ldr	r0, [r7, #4]
 800e62e:	f000 fa83 	bl	800eb38 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800e632:	e013      	b.n	800e65c <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800e634:	697b      	ldr	r3, [r7, #20]
 800e636:	f003 0310 	and.w	r3, r3, #16
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d00f      	beq.n	800e65e <HAL_QSPI_IRQHandler+0x366>
 800e63e:	693b      	ldr	r3, [r7, #16]
 800e640:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e644:	2b00      	cmp	r3, #0
 800e646:	d00a      	beq.n	800e65e <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	2210      	movs	r2, #16
 800e64e:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f000 fab7 	bl	800ebc4 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800e656:	e002      	b.n	800e65e <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800e658:	bf00      	nop
 800e65a:	e000      	b.n	800e65e <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800e65c:	bf00      	nop
}
 800e65e:	bf00      	nop
 800e660:	3718      	adds	r7, #24
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}
 800e666:	bf00      	nop
 800e668:	0800ebf5 	.word	0x0800ebf5

0800e66c <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b088      	sub	sp, #32
 800e670:	af02      	add	r7, sp, #8
 800e672:	60f8      	str	r0, [r7, #12]
 800e674:	60b9      	str	r1, [r7, #8]
 800e676:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800e678:	f7fd fafa 	bl	800bc70 <HAL_GetTick>
 800e67c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e684:	b2db      	uxtb	r3, r3
 800e686:	2b01      	cmp	r3, #1
 800e688:	d101      	bne.n	800e68e <HAL_QSPI_Command+0x22>
 800e68a:	2302      	movs	r3, #2
 800e68c:	e048      	b.n	800e720 <HAL_QSPI_Command+0xb4>
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	2201      	movs	r2, #1
 800e692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e69c:	b2db      	uxtb	r3, r3
 800e69e:	2b01      	cmp	r3, #1
 800e6a0:	d137      	bne.n	800e712 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	2202      	movs	r2, #2
 800e6ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	9300      	str	r3, [sp, #0]
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	2120      	movs	r1, #32
 800e6ba:	68f8      	ldr	r0, [r7, #12]
 800e6bc:	f000 facd 	bl	800ec5a <QSPI_WaitFlagStateUntilTimeout>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800e6c4:	7dfb      	ldrb	r3, [r7, #23]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d125      	bne.n	800e716 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	68b9      	ldr	r1, [r7, #8]
 800e6ce:	68f8      	ldr	r0, [r7, #12]
 800e6d0:	f000 fafa 	bl	800ecc8 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d115      	bne.n	800e708 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	9300      	str	r3, [sp, #0]
 800e6e0:	693b      	ldr	r3, [r7, #16]
 800e6e2:	2201      	movs	r2, #1
 800e6e4:	2102      	movs	r1, #2
 800e6e6:	68f8      	ldr	r0, [r7, #12]
 800e6e8:	f000 fab7 	bl	800ec5a <QSPI_WaitFlagStateUntilTimeout>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800e6f0:	7dfb      	ldrb	r3, [r7, #23]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d10f      	bne.n	800e716 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	2202      	movs	r2, #2
 800e6fc:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	2201      	movs	r2, #1
 800e702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e706:	e006      	b.n	800e716 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	2201      	movs	r2, #1
 800e70c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e710:	e001      	b.n	800e716 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800e712:	2302      	movs	r3, #2
 800e714:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	2200      	movs	r2, #0
 800e71a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800e71e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e720:	4618      	mov	r0, r3
 800e722:	3718      	adds	r7, #24
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}

0800e728 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b08a      	sub	sp, #40	; 0x28
 800e72c:	af02      	add	r7, sp, #8
 800e72e:	60f8      	str	r0, [r7, #12]
 800e730:	60b9      	str	r1, [r7, #8]
 800e732:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e734:	2300      	movs	r3, #0
 800e736:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800e738:	f7fd fa9a 	bl	800bc70 <HAL_GetTick>
 800e73c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	3320      	adds	r3, #32
 800e744:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e74c:	b2db      	uxtb	r3, r3
 800e74e:	2b01      	cmp	r3, #1
 800e750:	d101      	bne.n	800e756 <HAL_QSPI_Transmit+0x2e>
 800e752:	2302      	movs	r3, #2
 800e754:	e076      	b.n	800e844 <HAL_QSPI_Transmit+0x11c>
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	2201      	movs	r2, #1
 800e75a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e764:	b2db      	uxtb	r3, r3
 800e766:	2b01      	cmp	r3, #1
 800e768:	d165      	bne.n	800e836 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	2200      	movs	r2, #0
 800e76e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d056      	beq.n	800e824 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	2212      	movs	r2, #18
 800e77a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	691b      	ldr	r3, [r3, #16]
 800e784:	1c5a      	adds	r2, r3, #1
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	691b      	ldr	r3, [r3, #16]
 800e790:	1c5a      	adds	r2, r3, #1
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	68ba      	ldr	r2, [r7, #8]
 800e79a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	695a      	ldr	r2, [r3, #20]
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800e7aa:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800e7ac:	e01b      	b.n	800e7e6 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	9300      	str	r3, [sp, #0]
 800e7b2:	69bb      	ldr	r3, [r7, #24]
 800e7b4:	2201      	movs	r2, #1
 800e7b6:	2104      	movs	r1, #4
 800e7b8:	68f8      	ldr	r0, [r7, #12]
 800e7ba:	f000 fa4e 	bl	800ec5a <QSPI_WaitFlagStateUntilTimeout>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800e7c2:	7ffb      	ldrb	r3, [r7, #31]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d113      	bne.n	800e7f0 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7cc:	781a      	ldrb	r2, [r3, #0]
 800e7ce:	697b      	ldr	r3, [r7, #20]
 800e7d0:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7d6:	1c5a      	adds	r2, r3, #1
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7e0:	1e5a      	subs	r2, r3, #1
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d1df      	bne.n	800e7ae <HAL_QSPI_Transmit+0x86>
 800e7ee:	e000      	b.n	800e7f2 <HAL_QSPI_Transmit+0xca>
          break;
 800e7f0:	bf00      	nop
      }

      if (status == HAL_OK)
 800e7f2:	7ffb      	ldrb	r3, [r7, #31]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d110      	bne.n	800e81a <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	9300      	str	r3, [sp, #0]
 800e7fc:	69bb      	ldr	r3, [r7, #24]
 800e7fe:	2201      	movs	r2, #1
 800e800:	2102      	movs	r1, #2
 800e802:	68f8      	ldr	r0, [r7, #12]
 800e804:	f000 fa29 	bl	800ec5a <QSPI_WaitFlagStateUntilTimeout>
 800e808:	4603      	mov	r3, r0
 800e80a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800e80c:	7ffb      	ldrb	r3, [r7, #31]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d103      	bne.n	800e81a <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	2202      	movs	r2, #2
 800e818:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	2201      	movs	r2, #1
 800e81e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e822:	e00a      	b.n	800e83a <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e828:	f043 0208 	orr.w	r2, r3, #8
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800e830:	2301      	movs	r3, #1
 800e832:	77fb      	strb	r3, [r7, #31]
 800e834:	e001      	b.n	800e83a <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800e836:	2302      	movs	r3, #2
 800e838:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	2200      	movs	r2, #0
 800e83e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800e842:	7ffb      	ldrb	r3, [r7, #31]
}
 800e844:	4618      	mov	r0, r3
 800e846:	3720      	adds	r7, #32
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}

0800e84c <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b08a      	sub	sp, #40	; 0x28
 800e850:	af02      	add	r7, sp, #8
 800e852:	60f8      	str	r0, [r7, #12]
 800e854:	60b9      	str	r1, [r7, #8]
 800e856:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e858:	2300      	movs	r3, #0
 800e85a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800e85c:	f7fd fa08 	bl	800bc70 <HAL_GetTick>
 800e860:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	699b      	ldr	r3, [r3, #24]
 800e868:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	3320      	adds	r3, #32
 800e870:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e878:	b2db      	uxtb	r3, r3
 800e87a:	2b01      	cmp	r3, #1
 800e87c:	d101      	bne.n	800e882 <HAL_QSPI_Receive+0x36>
 800e87e:	2302      	movs	r3, #2
 800e880:	e07d      	b.n	800e97e <HAL_QSPI_Receive+0x132>
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	2201      	movs	r2, #1
 800e886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e890:	b2db      	uxtb	r3, r3
 800e892:	2b01      	cmp	r3, #1
 800e894:	d16c      	bne.n	800e970 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	2200      	movs	r2, #0
 800e89a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d05d      	beq.n	800e95e <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	2222      	movs	r2, #34	; 0x22
 800e8a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	691b      	ldr	r3, [r3, #16]
 800e8b0:	1c5a      	adds	r2, r3, #1
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	691b      	ldr	r3, [r3, #16]
 800e8bc:	1c5a      	adds	r2, r3, #1
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	68ba      	ldr	r2, [r7, #8]
 800e8c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	695b      	ldr	r3, [r3, #20]
 800e8ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800e8da:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	697a      	ldr	r2, [r7, #20]
 800e8e2:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800e8e4:	e01c      	b.n	800e920 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	9300      	str	r3, [sp, #0]
 800e8ea:	69bb      	ldr	r3, [r7, #24]
 800e8ec:	2201      	movs	r2, #1
 800e8ee:	2106      	movs	r1, #6
 800e8f0:	68f8      	ldr	r0, [r7, #12]
 800e8f2:	f000 f9b2 	bl	800ec5a <QSPI_WaitFlagStateUntilTimeout>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800e8fa:	7ffb      	ldrb	r3, [r7, #31]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d114      	bne.n	800e92a <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e904:	693a      	ldr	r2, [r7, #16]
 800e906:	7812      	ldrb	r2, [r2, #0]
 800e908:	b2d2      	uxtb	r2, r2
 800e90a:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e910:	1c5a      	adds	r2, r3, #1
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e91a:	1e5a      	subs	r2, r3, #1
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e924:	2b00      	cmp	r3, #0
 800e926:	d1de      	bne.n	800e8e6 <HAL_QSPI_Receive+0x9a>
 800e928:	e000      	b.n	800e92c <HAL_QSPI_Receive+0xe0>
          break;
 800e92a:	bf00      	nop
      }

      if (status == HAL_OK)
 800e92c:	7ffb      	ldrb	r3, [r7, #31]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d110      	bne.n	800e954 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	9300      	str	r3, [sp, #0]
 800e936:	69bb      	ldr	r3, [r7, #24]
 800e938:	2201      	movs	r2, #1
 800e93a:	2102      	movs	r1, #2
 800e93c:	68f8      	ldr	r0, [r7, #12]
 800e93e:	f000 f98c 	bl	800ec5a <QSPI_WaitFlagStateUntilTimeout>
 800e942:	4603      	mov	r3, r0
 800e944:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800e946:	7ffb      	ldrb	r3, [r7, #31]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d103      	bne.n	800e954 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	2202      	movs	r2, #2
 800e952:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	2201      	movs	r2, #1
 800e958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e95c:	e00a      	b.n	800e974 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e962:	f043 0208 	orr.w	r2, r3, #8
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800e96a:	2301      	movs	r3, #1
 800e96c:	77fb      	strb	r3, [r7, #31]
 800e96e:	e001      	b.n	800e974 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800e970:	2302      	movs	r3, #2
 800e972:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	2200      	movs	r2, #0
 800e978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800e97c:	7ffb      	ldrb	r3, [r7, #31]
}
 800e97e:	4618      	mov	r0, r3
 800e980:	3720      	adds	r7, #32
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}

0800e986 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800e986:	b580      	push	{r7, lr}
 800e988:	b088      	sub	sp, #32
 800e98a:	af02      	add	r7, sp, #8
 800e98c:	60f8      	str	r0, [r7, #12]
 800e98e:	60b9      	str	r1, [r7, #8]
 800e990:	607a      	str	r2, [r7, #4]
 800e992:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800e994:	f7fd f96c 	bl	800bc70 <HAL_GetTick>
 800e998:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e9a0:	b2db      	uxtb	r3, r3
 800e9a2:	2b01      	cmp	r3, #1
 800e9a4:	d101      	bne.n	800e9aa <HAL_QSPI_AutoPolling+0x24>
 800e9a6:	2302      	movs	r3, #2
 800e9a8:	e060      	b.n	800ea6c <HAL_QSPI_AutoPolling+0xe6>
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	2201      	movs	r2, #1
 800e9ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e9b8:	b2db      	uxtb	r3, r3
 800e9ba:	2b01      	cmp	r3, #1
 800e9bc:	d14f      	bne.n	800ea5e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	2242      	movs	r2, #66	; 0x42
 800e9c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	9300      	str	r3, [sp, #0]
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	2120      	movs	r1, #32
 800e9d6:	68f8      	ldr	r0, [r7, #12]
 800e9d8:	f000 f93f 	bl	800ec5a <QSPI_WaitFlagStateUntilTimeout>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800e9e0:	7dfb      	ldrb	r3, [r7, #23]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d13d      	bne.n	800ea62 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	687a      	ldr	r2, [r7, #4]
 800e9ec:	6812      	ldr	r2, [r2, #0]
 800e9ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	687a      	ldr	r2, [r7, #4]
 800e9f6:	6852      	ldr	r2, [r2, #4]
 800e9f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	687a      	ldr	r2, [r7, #4]
 800ea00:	6892      	ldr	r2, [r2, #8]
 800ea02:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	691b      	ldr	r3, [r3, #16]
 800ea12:	431a      	orrs	r2, r3
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800ea1c:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	68da      	ldr	r2, [r3, #12]
 800ea22:	68bb      	ldr	r3, [r7, #8]
 800ea24:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800ea26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ea2a:	68b9      	ldr	r1, [r7, #8]
 800ea2c:	68f8      	ldr	r0, [r7, #12]
 800ea2e:	f000 f94b 	bl	800ecc8 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	9300      	str	r3, [sp, #0]
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	2201      	movs	r2, #1
 800ea3a:	2108      	movs	r1, #8
 800ea3c:	68f8      	ldr	r0, [r7, #12]
 800ea3e:	f000 f90c 	bl	800ec5a <QSPI_WaitFlagStateUntilTimeout>
 800ea42:	4603      	mov	r3, r0
 800ea44:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800ea46:	7dfb      	ldrb	r3, [r7, #23]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d10a      	bne.n	800ea62 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	2208      	movs	r2, #8
 800ea52:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	2201      	movs	r2, #1
 800ea58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ea5c:	e001      	b.n	800ea62 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800ea5e:	2302      	movs	r3, #2
 800ea60:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	2200      	movs	r2, #0
 800ea66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800ea6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3718      	adds	r7, #24
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}

0800ea74 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b088      	sub	sp, #32
 800ea78:	af02      	add	r7, sp, #8
 800ea7a:	60f8      	str	r0, [r7, #12]
 800ea7c:	60b9      	str	r1, [r7, #8]
 800ea7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ea80:	f7fd f8f6 	bl	800bc70 <HAL_GetTick>
 800ea84:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ea8c:	b2db      	uxtb	r3, r3
 800ea8e:	2b01      	cmp	r3, #1
 800ea90:	d101      	bne.n	800ea96 <HAL_QSPI_MemoryMapped+0x22>
 800ea92:	2302      	movs	r3, #2
 800ea94:	e04c      	b.n	800eb30 <HAL_QSPI_MemoryMapped+0xbc>
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	2201      	movs	r2, #1
 800ea9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eaa4:	b2db      	uxtb	r3, r3
 800eaa6:	2b01      	cmp	r3, #1
 800eaa8:	d13b      	bne.n	800eb22 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	2200      	movs	r2, #0
 800eaae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	2282      	movs	r2, #130	; 0x82
 800eab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eabc:	9300      	str	r3, [sp, #0]
 800eabe:	693b      	ldr	r3, [r7, #16]
 800eac0:	2200      	movs	r2, #0
 800eac2:	2120      	movs	r1, #32
 800eac4:	68f8      	ldr	r0, [r7, #12]
 800eac6:	f000 f8c8 	bl	800ec5a <QSPI_WaitFlagStateUntilTimeout>
 800eaca:	4603      	mov	r3, r0
 800eacc:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800eace:	7dfb      	ldrb	r3, [r7, #23]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d128      	bne.n	800eb26 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	f023 0108 	bic.w	r1, r3, #8
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	685a      	ldr	r2, [r3, #4]
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	430a      	orrs	r2, r1
 800eae8:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	685b      	ldr	r3, [r3, #4]
 800eaee:	2b08      	cmp	r3, #8
 800eaf0:	d110      	bne.n	800eb14 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	687a      	ldr	r2, [r7, #4]
 800eaf8:	6812      	ldr	r2, [r2, #0]
 800eafa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	2210      	movs	r2, #16
 800eb02:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	681a      	ldr	r2, [r3, #0]
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800eb12:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800eb14:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800eb18:	68b9      	ldr	r1, [r7, #8]
 800eb1a:	68f8      	ldr	r0, [r7, #12]
 800eb1c:	f000 f8d4 	bl	800ecc8 <QSPI_Config>
 800eb20:	e001      	b.n	800eb26 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800eb22:	2302      	movs	r3, #2
 800eb24:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	2200      	movs	r2, #0
 800eb2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800eb2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3718      	adds	r7, #24
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}

0800eb38 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800eb38:	b480      	push	{r7}
 800eb3a:	b083      	sub	sp, #12
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800eb40:	bf00      	nop
 800eb42:	370c      	adds	r7, #12
 800eb44:	46bd      	mov	sp, r7
 800eb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4a:	4770      	bx	lr

0800eb4c <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800eb4c:	b480      	push	{r7}
 800eb4e:	b083      	sub	sp, #12
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800eb54:	bf00      	nop
 800eb56:	370c      	adds	r7, #12
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5e:	4770      	bx	lr

0800eb60 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800eb60:	b480      	push	{r7}
 800eb62:	b083      	sub	sp, #12
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800eb68:	bf00      	nop
 800eb6a:	370c      	adds	r7, #12
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb72:	4770      	bx	lr

0800eb74 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800eb74:	b480      	push	{r7}
 800eb76:	b083      	sub	sp, #12
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800eb7c:	bf00      	nop
 800eb7e:	370c      	adds	r7, #12
 800eb80:	46bd      	mov	sp, r7
 800eb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb86:	4770      	bx	lr

0800eb88 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b083      	sub	sp, #12
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800eb90:	bf00      	nop
 800eb92:	370c      	adds	r7, #12
 800eb94:	46bd      	mov	sp, r7
 800eb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9a:	4770      	bx	lr

0800eb9c <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b083      	sub	sp, #12
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800eba4:	bf00      	nop
 800eba6:	370c      	adds	r7, #12
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebae:	4770      	bx	lr

0800ebb0 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b083      	sub	sp, #12
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800ebb8:	bf00      	nop
 800ebba:	370c      	adds	r7, #12
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc2:	4770      	bx	lr

0800ebc4 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800ebc4:	b480      	push	{r7}
 800ebc6:	b083      	sub	sp, #12
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800ebcc:	bf00      	nop
 800ebce:	370c      	adds	r7, #12
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd6:	4770      	bx	lr

0800ebd8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800ebd8:	b480      	push	{r7}
 800ebda:	b083      	sub	sp, #12
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	683a      	ldr	r2, [r7, #0]
 800ebe6:	649a      	str	r2, [r3, #72]	; 0x48
}
 800ebe8:	bf00      	nop
 800ebea:	370c      	adds	r7, #12
 800ebec:	46bd      	mov	sp, r7
 800ebee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf2:	4770      	bx	lr

0800ebf4 <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b084      	sub	sp, #16
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec00:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	2200      	movs	r2, #0
 800ec06:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ec14:	b2db      	uxtb	r3, r3
 800ec16:	2b08      	cmp	r3, #8
 800ec18:	d114      	bne.n	800ec44 <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	2202      	movs	r2, #2
 800ec20:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	681a      	ldr	r2, [r3, #0]
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ec30:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	681a      	ldr	r2, [r3, #0]
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	f042 0202 	orr.w	r2, r2, #2
 800ec40:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800ec42:	e006      	b.n	800ec52 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	2201      	movs	r2, #1
 800ec48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800ec4c:	68f8      	ldr	r0, [r7, #12]
 800ec4e:	f7ff ff73 	bl	800eb38 <HAL_QSPI_ErrorCallback>
}
 800ec52:	bf00      	nop
 800ec54:	3710      	adds	r7, #16
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}

0800ec5a <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800ec5a:	b580      	push	{r7, lr}
 800ec5c:	b084      	sub	sp, #16
 800ec5e:	af00      	add	r7, sp, #0
 800ec60:	60f8      	str	r0, [r7, #12]
 800ec62:	60b9      	str	r1, [r7, #8]
 800ec64:	603b      	str	r3, [r7, #0]
 800ec66:	4613      	mov	r3, r2
 800ec68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ec6a:	e01a      	b.n	800eca2 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ec6c:	69bb      	ldr	r3, [r7, #24]
 800ec6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec72:	d016      	beq.n	800eca2 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ec74:	f7fc fffc 	bl	800bc70 <HAL_GetTick>
 800ec78:	4602      	mov	r2, r0
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	1ad3      	subs	r3, r2, r3
 800ec7e:	69ba      	ldr	r2, [r7, #24]
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d302      	bcc.n	800ec8a <QSPI_WaitFlagStateUntilTimeout+0x30>
 800ec84:	69bb      	ldr	r3, [r7, #24]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d10b      	bne.n	800eca2 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	2204      	movs	r2, #4
 800ec8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec96:	f043 0201 	orr.w	r2, r3, #1
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800ec9e:	2301      	movs	r3, #1
 800eca0:	e00e      	b.n	800ecc0 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	689a      	ldr	r2, [r3, #8]
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	4013      	ands	r3, r2
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	bf14      	ite	ne
 800ecb0:	2301      	movne	r3, #1
 800ecb2:	2300      	moveq	r3, #0
 800ecb4:	b2db      	uxtb	r3, r3
 800ecb6:	461a      	mov	r2, r3
 800ecb8:	79fb      	ldrb	r3, [r7, #7]
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d1d6      	bne.n	800ec6c <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ecbe:	2300      	movs	r3, #0
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3710      	adds	r7, #16
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}

0800ecc8 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b085      	sub	sp, #20
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	60f8      	str	r0, [r7, #12]
 800ecd0:	60b9      	str	r1, [r7, #8]
 800ecd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d009      	beq.n	800ecf0 <QSPI_Config+0x28>
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ece2:	d005      	beq.n	800ecf0 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	3a01      	subs	r2, #1
 800ecee:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	699b      	ldr	r3, [r3, #24]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	f000 80b9 	beq.w	800ee6c <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800ecfa:	68bb      	ldr	r3, [r7, #8]
 800ecfc:	6a1b      	ldr	r3, [r3, #32]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d05f      	beq.n	800edc2 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	68ba      	ldr	r2, [r7, #8]
 800ed08:	6892      	ldr	r2, [r2, #8]
 800ed0a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ed0c:	68bb      	ldr	r3, [r7, #8]
 800ed0e:	69db      	ldr	r3, [r3, #28]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d031      	beq.n	800ed78 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ed14:	68bb      	ldr	r3, [r7, #8]
 800ed16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed18:	68bb      	ldr	r3, [r7, #8]
 800ed1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed1c:	431a      	orrs	r2, r3
 800ed1e:	68bb      	ldr	r3, [r7, #8]
 800ed20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed22:	431a      	orrs	r2, r3
 800ed24:	68bb      	ldr	r3, [r7, #8]
 800ed26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed28:	431a      	orrs	r2, r3
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	695b      	ldr	r3, [r3, #20]
 800ed2e:	049b      	lsls	r3, r3, #18
 800ed30:	431a      	orrs	r2, r3
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	691b      	ldr	r3, [r3, #16]
 800ed36:	431a      	orrs	r2, r3
 800ed38:	68bb      	ldr	r3, [r7, #8]
 800ed3a:	6a1b      	ldr	r3, [r3, #32]
 800ed3c:	431a      	orrs	r2, r3
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	68db      	ldr	r3, [r3, #12]
 800ed42:	431a      	orrs	r2, r3
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	69db      	ldr	r3, [r3, #28]
 800ed48:	431a      	orrs	r2, r3
 800ed4a:	68bb      	ldr	r3, [r7, #8]
 800ed4c:	699b      	ldr	r3, [r3, #24]
 800ed4e:	431a      	orrs	r2, r3
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	ea42 0103 	orr.w	r1, r2, r3
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	687a      	ldr	r2, [r7, #4]
 800ed5e:	430a      	orrs	r2, r1
 800ed60:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ed68:	f000 812e 	beq.w	800efc8 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	68ba      	ldr	r2, [r7, #8]
 800ed72:	6852      	ldr	r2, [r2, #4]
 800ed74:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800ed76:	e127      	b.n	800efc8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ed78:	68bb      	ldr	r3, [r7, #8]
 800ed7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed7c:	68bb      	ldr	r3, [r7, #8]
 800ed7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed80:	431a      	orrs	r2, r3
 800ed82:	68bb      	ldr	r3, [r7, #8]
 800ed84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed86:	431a      	orrs	r2, r3
 800ed88:	68bb      	ldr	r3, [r7, #8]
 800ed8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed8c:	431a      	orrs	r2, r3
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	695b      	ldr	r3, [r3, #20]
 800ed92:	049b      	lsls	r3, r3, #18
 800ed94:	431a      	orrs	r2, r3
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	691b      	ldr	r3, [r3, #16]
 800ed9a:	431a      	orrs	r2, r3
 800ed9c:	68bb      	ldr	r3, [r7, #8]
 800ed9e:	6a1b      	ldr	r3, [r3, #32]
 800eda0:	431a      	orrs	r2, r3
 800eda2:	68bb      	ldr	r3, [r7, #8]
 800eda4:	69db      	ldr	r3, [r3, #28]
 800eda6:	431a      	orrs	r2, r3
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	699b      	ldr	r3, [r3, #24]
 800edac:	431a      	orrs	r2, r3
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	ea42 0103 	orr.w	r1, r2, r3
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	687a      	ldr	r2, [r7, #4]
 800edbc:	430a      	orrs	r2, r1
 800edbe:	615a      	str	r2, [r3, #20]
}
 800edc0:	e102      	b.n	800efc8 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800edc2:	68bb      	ldr	r3, [r7, #8]
 800edc4:	69db      	ldr	r3, [r3, #28]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d02e      	beq.n	800ee28 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edce:	68bb      	ldr	r3, [r7, #8]
 800edd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edd2:	431a      	orrs	r2, r3
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edd8:	431a      	orrs	r2, r3
 800edda:	68bb      	ldr	r3, [r7, #8]
 800eddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edde:	431a      	orrs	r2, r3
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	695b      	ldr	r3, [r3, #20]
 800ede4:	049b      	lsls	r3, r3, #18
 800ede6:	431a      	orrs	r2, r3
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	6a1b      	ldr	r3, [r3, #32]
 800edec:	431a      	orrs	r2, r3
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	68db      	ldr	r3, [r3, #12]
 800edf2:	431a      	orrs	r2, r3
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	69db      	ldr	r3, [r3, #28]
 800edf8:	431a      	orrs	r2, r3
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	699b      	ldr	r3, [r3, #24]
 800edfe:	431a      	orrs	r2, r3
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	ea42 0103 	orr.w	r1, r2, r3
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	687a      	ldr	r2, [r7, #4]
 800ee0e:	430a      	orrs	r2, r1
 800ee10:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ee18:	f000 80d6 	beq.w	800efc8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	68ba      	ldr	r2, [r7, #8]
 800ee22:	6852      	ldr	r2, [r2, #4]
 800ee24:	619a      	str	r2, [r3, #24]
}
 800ee26:	e0cf      	b.n	800efc8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ee28:	68bb      	ldr	r3, [r7, #8]
 800ee2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee30:	431a      	orrs	r2, r3
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee36:	431a      	orrs	r2, r3
 800ee38:	68bb      	ldr	r3, [r7, #8]
 800ee3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee3c:	431a      	orrs	r2, r3
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	695b      	ldr	r3, [r3, #20]
 800ee42:	049b      	lsls	r3, r3, #18
 800ee44:	431a      	orrs	r2, r3
 800ee46:	68bb      	ldr	r3, [r7, #8]
 800ee48:	6a1b      	ldr	r3, [r3, #32]
 800ee4a:	431a      	orrs	r2, r3
 800ee4c:	68bb      	ldr	r3, [r7, #8]
 800ee4e:	69db      	ldr	r3, [r3, #28]
 800ee50:	431a      	orrs	r2, r3
 800ee52:	68bb      	ldr	r3, [r7, #8]
 800ee54:	699b      	ldr	r3, [r3, #24]
 800ee56:	431a      	orrs	r2, r3
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	ea42 0103 	orr.w	r1, r2, r3
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	687a      	ldr	r2, [r7, #4]
 800ee66:	430a      	orrs	r2, r1
 800ee68:	615a      	str	r2, [r3, #20]
}
 800ee6a:	e0ad      	b.n	800efc8 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	6a1b      	ldr	r3, [r3, #32]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d058      	beq.n	800ef26 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	68ba      	ldr	r2, [r7, #8]
 800ee7a:	6892      	ldr	r2, [r2, #8]
 800ee7c:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ee7e:	68bb      	ldr	r3, [r7, #8]
 800ee80:	69db      	ldr	r3, [r3, #28]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d02d      	beq.n	800eee2 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee8e:	431a      	orrs	r2, r3
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee94:	431a      	orrs	r2, r3
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee9a:	431a      	orrs	r2, r3
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	695b      	ldr	r3, [r3, #20]
 800eea0:	049b      	lsls	r3, r3, #18
 800eea2:	431a      	orrs	r2, r3
 800eea4:	68bb      	ldr	r3, [r7, #8]
 800eea6:	691b      	ldr	r3, [r3, #16]
 800eea8:	431a      	orrs	r2, r3
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	6a1b      	ldr	r3, [r3, #32]
 800eeae:	431a      	orrs	r2, r3
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	68db      	ldr	r3, [r3, #12]
 800eeb4:	431a      	orrs	r2, r3
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	69db      	ldr	r3, [r3, #28]
 800eeba:	431a      	orrs	r2, r3
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	699b      	ldr	r3, [r3, #24]
 800eec0:	ea42 0103 	orr.w	r1, r2, r3
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	687a      	ldr	r2, [r7, #4]
 800eeca:	430a      	orrs	r2, r1
 800eecc:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800eed4:	d078      	beq.n	800efc8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	68ba      	ldr	r2, [r7, #8]
 800eedc:	6852      	ldr	r2, [r2, #4]
 800eede:	619a      	str	r2, [r3, #24]
}
 800eee0:	e072      	b.n	800efc8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eeea:	431a      	orrs	r2, r3
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eef0:	431a      	orrs	r2, r3
 800eef2:	68bb      	ldr	r3, [r7, #8]
 800eef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eef6:	431a      	orrs	r2, r3
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	695b      	ldr	r3, [r3, #20]
 800eefc:	049b      	lsls	r3, r3, #18
 800eefe:	431a      	orrs	r2, r3
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	691b      	ldr	r3, [r3, #16]
 800ef04:	431a      	orrs	r2, r3
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	6a1b      	ldr	r3, [r3, #32]
 800ef0a:	431a      	orrs	r2, r3
 800ef0c:	68bb      	ldr	r3, [r7, #8]
 800ef0e:	69db      	ldr	r3, [r3, #28]
 800ef10:	431a      	orrs	r2, r3
 800ef12:	68bb      	ldr	r3, [r7, #8]
 800ef14:	699b      	ldr	r3, [r3, #24]
 800ef16:	ea42 0103 	orr.w	r1, r2, r3
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	687a      	ldr	r2, [r7, #4]
 800ef20:	430a      	orrs	r2, r1
 800ef22:	615a      	str	r2, [r3, #20]
}
 800ef24:	e050      	b.n	800efc8 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ef26:	68bb      	ldr	r3, [r7, #8]
 800ef28:	69db      	ldr	r3, [r3, #28]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d02a      	beq.n	800ef84 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef32:	68bb      	ldr	r3, [r7, #8]
 800ef34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef36:	431a      	orrs	r2, r3
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef3c:	431a      	orrs	r2, r3
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef42:	431a      	orrs	r2, r3
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	695b      	ldr	r3, [r3, #20]
 800ef48:	049b      	lsls	r3, r3, #18
 800ef4a:	431a      	orrs	r2, r3
 800ef4c:	68bb      	ldr	r3, [r7, #8]
 800ef4e:	6a1b      	ldr	r3, [r3, #32]
 800ef50:	431a      	orrs	r2, r3
 800ef52:	68bb      	ldr	r3, [r7, #8]
 800ef54:	68db      	ldr	r3, [r3, #12]
 800ef56:	431a      	orrs	r2, r3
 800ef58:	68bb      	ldr	r3, [r7, #8]
 800ef5a:	69db      	ldr	r3, [r3, #28]
 800ef5c:	431a      	orrs	r2, r3
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	699b      	ldr	r3, [r3, #24]
 800ef62:	ea42 0103 	orr.w	r1, r2, r3
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	687a      	ldr	r2, [r7, #4]
 800ef6c:	430a      	orrs	r2, r1
 800ef6e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ef76:	d027      	beq.n	800efc8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	68ba      	ldr	r2, [r7, #8]
 800ef7e:	6852      	ldr	r2, [r2, #4]
 800ef80:	619a      	str	r2, [r3, #24]
}
 800ef82:	e021      	b.n	800efc8 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800ef84:	68bb      	ldr	r3, [r7, #8]
 800ef86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d01d      	beq.n	800efc8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef94:	431a      	orrs	r2, r3
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef9a:	431a      	orrs	r2, r3
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efa0:	431a      	orrs	r2, r3
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	695b      	ldr	r3, [r3, #20]
 800efa6:	049b      	lsls	r3, r3, #18
 800efa8:	431a      	orrs	r2, r3
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	6a1b      	ldr	r3, [r3, #32]
 800efae:	431a      	orrs	r2, r3
 800efb0:	68bb      	ldr	r3, [r7, #8]
 800efb2:	69db      	ldr	r3, [r3, #28]
 800efb4:	431a      	orrs	r2, r3
 800efb6:	68bb      	ldr	r3, [r7, #8]
 800efb8:	699b      	ldr	r3, [r3, #24]
 800efba:	ea42 0103 	orr.w	r1, r2, r3
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	687a      	ldr	r2, [r7, #4]
 800efc4:	430a      	orrs	r2, r1
 800efc6:	615a      	str	r2, [r3, #20]
}
 800efc8:	bf00      	nop
 800efca:	3714      	adds	r7, #20
 800efcc:	46bd      	mov	sp, r7
 800efce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd2:	4770      	bx	lr

0800efd4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b08c      	sub	sp, #48	; 0x30
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d102      	bne.n	800efe8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800efe2:	2301      	movs	r3, #1
 800efe4:	f000 bc1d 	b.w	800f822 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	f003 0301 	and.w	r3, r3, #1
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	f000 8087 	beq.w	800f104 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800eff6:	4b99      	ldr	r3, [pc, #612]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800eff8:	691b      	ldr	r3, [r3, #16]
 800effa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800effe:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f000:	4b96      	ldr	r3, [pc, #600]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f004:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800f006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f008:	2b10      	cmp	r3, #16
 800f00a:	d007      	beq.n	800f01c <HAL_RCC_OscConfig+0x48>
 800f00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f00e:	2b18      	cmp	r3, #24
 800f010:	d110      	bne.n	800f034 <HAL_RCC_OscConfig+0x60>
 800f012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f014:	f003 0303 	and.w	r3, r3, #3
 800f018:	2b02      	cmp	r3, #2
 800f01a:	d10b      	bne.n	800f034 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f01c:	4b8f      	ldr	r3, [pc, #572]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f024:	2b00      	cmp	r3, #0
 800f026:	d06c      	beq.n	800f102 <HAL_RCC_OscConfig+0x12e>
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	685b      	ldr	r3, [r3, #4]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d168      	bne.n	800f102 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800f030:	2301      	movs	r3, #1
 800f032:	e3f6      	b.n	800f822 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	685b      	ldr	r3, [r3, #4]
 800f038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f03c:	d106      	bne.n	800f04c <HAL_RCC_OscConfig+0x78>
 800f03e:	4b87      	ldr	r3, [pc, #540]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	4a86      	ldr	r2, [pc, #536]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f048:	6013      	str	r3, [r2, #0]
 800f04a:	e02e      	b.n	800f0aa <HAL_RCC_OscConfig+0xd6>
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	685b      	ldr	r3, [r3, #4]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d10c      	bne.n	800f06e <HAL_RCC_OscConfig+0x9a>
 800f054:	4b81      	ldr	r3, [pc, #516]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	4a80      	ldr	r2, [pc, #512]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f05a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f05e:	6013      	str	r3, [r2, #0]
 800f060:	4b7e      	ldr	r3, [pc, #504]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	4a7d      	ldr	r2, [pc, #500]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f06a:	6013      	str	r3, [r2, #0]
 800f06c:	e01d      	b.n	800f0aa <HAL_RCC_OscConfig+0xd6>
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	685b      	ldr	r3, [r3, #4]
 800f072:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f076:	d10c      	bne.n	800f092 <HAL_RCC_OscConfig+0xbe>
 800f078:	4b78      	ldr	r3, [pc, #480]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	4a77      	ldr	r2, [pc, #476]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f07e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f082:	6013      	str	r3, [r2, #0]
 800f084:	4b75      	ldr	r3, [pc, #468]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	4a74      	ldr	r2, [pc, #464]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f08a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f08e:	6013      	str	r3, [r2, #0]
 800f090:	e00b      	b.n	800f0aa <HAL_RCC_OscConfig+0xd6>
 800f092:	4b72      	ldr	r3, [pc, #456]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	4a71      	ldr	r2, [pc, #452]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f09c:	6013      	str	r3, [r2, #0]
 800f09e:	4b6f      	ldr	r3, [pc, #444]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	4a6e      	ldr	r2, [pc, #440]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f0a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f0a8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	685b      	ldr	r3, [r3, #4]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d013      	beq.n	800f0da <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f0b2:	f7fc fddd 	bl	800bc70 <HAL_GetTick>
 800f0b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f0b8:	e008      	b.n	800f0cc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f0ba:	f7fc fdd9 	bl	800bc70 <HAL_GetTick>
 800f0be:	4602      	mov	r2, r0
 800f0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c2:	1ad3      	subs	r3, r2, r3
 800f0c4:	2b64      	cmp	r3, #100	; 0x64
 800f0c6:	d901      	bls.n	800f0cc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800f0c8:	2303      	movs	r3, #3
 800f0ca:	e3aa      	b.n	800f822 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f0cc:	4b63      	ldr	r3, [pc, #396]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d0f0      	beq.n	800f0ba <HAL_RCC_OscConfig+0xe6>
 800f0d8:	e014      	b.n	800f104 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f0da:	f7fc fdc9 	bl	800bc70 <HAL_GetTick>
 800f0de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f0e0:	e008      	b.n	800f0f4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f0e2:	f7fc fdc5 	bl	800bc70 <HAL_GetTick>
 800f0e6:	4602      	mov	r2, r0
 800f0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ea:	1ad3      	subs	r3, r2, r3
 800f0ec:	2b64      	cmp	r3, #100	; 0x64
 800f0ee:	d901      	bls.n	800f0f4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800f0f0:	2303      	movs	r3, #3
 800f0f2:	e396      	b.n	800f822 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f0f4:	4b59      	ldr	r3, [pc, #356]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d1f0      	bne.n	800f0e2 <HAL_RCC_OscConfig+0x10e>
 800f100:	e000      	b.n	800f104 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f102:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	f003 0302 	and.w	r3, r3, #2
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	f000 80cb 	beq.w	800f2a8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f112:	4b52      	ldr	r3, [pc, #328]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f114:	691b      	ldr	r3, [r3, #16]
 800f116:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f11a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f11c:	4b4f      	ldr	r3, [pc, #316]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f11e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f120:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800f122:	6a3b      	ldr	r3, [r7, #32]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d007      	beq.n	800f138 <HAL_RCC_OscConfig+0x164>
 800f128:	6a3b      	ldr	r3, [r7, #32]
 800f12a:	2b18      	cmp	r3, #24
 800f12c:	d156      	bne.n	800f1dc <HAL_RCC_OscConfig+0x208>
 800f12e:	69fb      	ldr	r3, [r7, #28]
 800f130:	f003 0303 	and.w	r3, r3, #3
 800f134:	2b00      	cmp	r3, #0
 800f136:	d151      	bne.n	800f1dc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f138:	4b48      	ldr	r3, [pc, #288]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	f003 0304 	and.w	r3, r3, #4
 800f140:	2b00      	cmp	r3, #0
 800f142:	d005      	beq.n	800f150 <HAL_RCC_OscConfig+0x17c>
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	68db      	ldr	r3, [r3, #12]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d101      	bne.n	800f150 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800f14c:	2301      	movs	r3, #1
 800f14e:	e368      	b.n	800f822 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800f150:	4b42      	ldr	r3, [pc, #264]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	f023 0219 	bic.w	r2, r3, #25
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	68db      	ldr	r3, [r3, #12]
 800f15c:	493f      	ldr	r1, [pc, #252]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f15e:	4313      	orrs	r3, r2
 800f160:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f162:	f7fc fd85 	bl	800bc70 <HAL_GetTick>
 800f166:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f168:	e008      	b.n	800f17c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f16a:	f7fc fd81 	bl	800bc70 <HAL_GetTick>
 800f16e:	4602      	mov	r2, r0
 800f170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f172:	1ad3      	subs	r3, r2, r3
 800f174:	2b02      	cmp	r3, #2
 800f176:	d901      	bls.n	800f17c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800f178:	2303      	movs	r3, #3
 800f17a:	e352      	b.n	800f822 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f17c:	4b37      	ldr	r3, [pc, #220]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	f003 0304 	and.w	r3, r3, #4
 800f184:	2b00      	cmp	r3, #0
 800f186:	d0f0      	beq.n	800f16a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f188:	f7fc fd7e 	bl	800bc88 <HAL_GetREVID>
 800f18c:	4603      	mov	r3, r0
 800f18e:	f241 0203 	movw	r2, #4099	; 0x1003
 800f192:	4293      	cmp	r3, r2
 800f194:	d817      	bhi.n	800f1c6 <HAL_RCC_OscConfig+0x1f2>
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	691b      	ldr	r3, [r3, #16]
 800f19a:	2b40      	cmp	r3, #64	; 0x40
 800f19c:	d108      	bne.n	800f1b0 <HAL_RCC_OscConfig+0x1dc>
 800f19e:	4b2f      	ldr	r3, [pc, #188]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f1a0:	685b      	ldr	r3, [r3, #4]
 800f1a2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800f1a6:	4a2d      	ldr	r2, [pc, #180]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f1a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f1ac:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f1ae:	e07b      	b.n	800f2a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f1b0:	4b2a      	ldr	r3, [pc, #168]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f1b2:	685b      	ldr	r3, [r3, #4]
 800f1b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	691b      	ldr	r3, [r3, #16]
 800f1bc:	031b      	lsls	r3, r3, #12
 800f1be:	4927      	ldr	r1, [pc, #156]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f1c0:	4313      	orrs	r3, r2
 800f1c2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f1c4:	e070      	b.n	800f2a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f1c6:	4b25      	ldr	r3, [pc, #148]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f1c8:	685b      	ldr	r3, [r3, #4]
 800f1ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	691b      	ldr	r3, [r3, #16]
 800f1d2:	061b      	lsls	r3, r3, #24
 800f1d4:	4921      	ldr	r1, [pc, #132]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f1d6:	4313      	orrs	r3, r2
 800f1d8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f1da:	e065      	b.n	800f2a8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	68db      	ldr	r3, [r3, #12]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d048      	beq.n	800f276 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800f1e4:	4b1d      	ldr	r3, [pc, #116]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	f023 0219 	bic.w	r2, r3, #25
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	68db      	ldr	r3, [r3, #12]
 800f1f0:	491a      	ldr	r1, [pc, #104]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f1f2:	4313      	orrs	r3, r2
 800f1f4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f1f6:	f7fc fd3b 	bl	800bc70 <HAL_GetTick>
 800f1fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f1fc:	e008      	b.n	800f210 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f1fe:	f7fc fd37 	bl	800bc70 <HAL_GetTick>
 800f202:	4602      	mov	r2, r0
 800f204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f206:	1ad3      	subs	r3, r2, r3
 800f208:	2b02      	cmp	r3, #2
 800f20a:	d901      	bls.n	800f210 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800f20c:	2303      	movs	r3, #3
 800f20e:	e308      	b.n	800f822 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f210:	4b12      	ldr	r3, [pc, #72]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	f003 0304 	and.w	r3, r3, #4
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d0f0      	beq.n	800f1fe <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f21c:	f7fc fd34 	bl	800bc88 <HAL_GetREVID>
 800f220:	4603      	mov	r3, r0
 800f222:	f241 0203 	movw	r2, #4099	; 0x1003
 800f226:	4293      	cmp	r3, r2
 800f228:	d81a      	bhi.n	800f260 <HAL_RCC_OscConfig+0x28c>
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	691b      	ldr	r3, [r3, #16]
 800f22e:	2b40      	cmp	r3, #64	; 0x40
 800f230:	d108      	bne.n	800f244 <HAL_RCC_OscConfig+0x270>
 800f232:	4b0a      	ldr	r3, [pc, #40]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f234:	685b      	ldr	r3, [r3, #4]
 800f236:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800f23a:	4a08      	ldr	r2, [pc, #32]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f23c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f240:	6053      	str	r3, [r2, #4]
 800f242:	e031      	b.n	800f2a8 <HAL_RCC_OscConfig+0x2d4>
 800f244:	4b05      	ldr	r3, [pc, #20]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f246:	685b      	ldr	r3, [r3, #4]
 800f248:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	691b      	ldr	r3, [r3, #16]
 800f250:	031b      	lsls	r3, r3, #12
 800f252:	4902      	ldr	r1, [pc, #8]	; (800f25c <HAL_RCC_OscConfig+0x288>)
 800f254:	4313      	orrs	r3, r2
 800f256:	604b      	str	r3, [r1, #4]
 800f258:	e026      	b.n	800f2a8 <HAL_RCC_OscConfig+0x2d4>
 800f25a:	bf00      	nop
 800f25c:	58024400 	.word	0x58024400
 800f260:	4b9a      	ldr	r3, [pc, #616]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f262:	685b      	ldr	r3, [r3, #4]
 800f264:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	691b      	ldr	r3, [r3, #16]
 800f26c:	061b      	lsls	r3, r3, #24
 800f26e:	4997      	ldr	r1, [pc, #604]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f270:	4313      	orrs	r3, r2
 800f272:	604b      	str	r3, [r1, #4]
 800f274:	e018      	b.n	800f2a8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f276:	4b95      	ldr	r3, [pc, #596]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	4a94      	ldr	r2, [pc, #592]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f27c:	f023 0301 	bic.w	r3, r3, #1
 800f280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f282:	f7fc fcf5 	bl	800bc70 <HAL_GetTick>
 800f286:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800f288:	e008      	b.n	800f29c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f28a:	f7fc fcf1 	bl	800bc70 <HAL_GetTick>
 800f28e:	4602      	mov	r2, r0
 800f290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f292:	1ad3      	subs	r3, r2, r3
 800f294:	2b02      	cmp	r3, #2
 800f296:	d901      	bls.n	800f29c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800f298:	2303      	movs	r3, #3
 800f29a:	e2c2      	b.n	800f822 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800f29c:	4b8b      	ldr	r3, [pc, #556]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	f003 0304 	and.w	r3, r3, #4
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d1f0      	bne.n	800f28a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	f003 0310 	and.w	r3, r3, #16
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	f000 80a9 	beq.w	800f408 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f2b6:	4b85      	ldr	r3, [pc, #532]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f2b8:	691b      	ldr	r3, [r3, #16]
 800f2ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f2be:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f2c0:	4b82      	ldr	r3, [pc, #520]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f2c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2c4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800f2c6:	69bb      	ldr	r3, [r7, #24]
 800f2c8:	2b08      	cmp	r3, #8
 800f2ca:	d007      	beq.n	800f2dc <HAL_RCC_OscConfig+0x308>
 800f2cc:	69bb      	ldr	r3, [r7, #24]
 800f2ce:	2b18      	cmp	r3, #24
 800f2d0:	d13a      	bne.n	800f348 <HAL_RCC_OscConfig+0x374>
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	f003 0303 	and.w	r3, r3, #3
 800f2d8:	2b01      	cmp	r3, #1
 800f2da:	d135      	bne.n	800f348 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f2dc:	4b7b      	ldr	r3, [pc, #492]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d005      	beq.n	800f2f4 <HAL_RCC_OscConfig+0x320>
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	69db      	ldr	r3, [r3, #28]
 800f2ec:	2b80      	cmp	r3, #128	; 0x80
 800f2ee:	d001      	beq.n	800f2f4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	e296      	b.n	800f822 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f2f4:	f7fc fcc8 	bl	800bc88 <HAL_GetREVID>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	f241 0203 	movw	r2, #4099	; 0x1003
 800f2fe:	4293      	cmp	r3, r2
 800f300:	d817      	bhi.n	800f332 <HAL_RCC_OscConfig+0x35e>
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6a1b      	ldr	r3, [r3, #32]
 800f306:	2b20      	cmp	r3, #32
 800f308:	d108      	bne.n	800f31c <HAL_RCC_OscConfig+0x348>
 800f30a:	4b70      	ldr	r3, [pc, #448]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f30c:	685b      	ldr	r3, [r3, #4]
 800f30e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800f312:	4a6e      	ldr	r2, [pc, #440]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f314:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f318:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f31a:	e075      	b.n	800f408 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f31c:	4b6b      	ldr	r3, [pc, #428]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f31e:	685b      	ldr	r3, [r3, #4]
 800f320:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	6a1b      	ldr	r3, [r3, #32]
 800f328:	069b      	lsls	r3, r3, #26
 800f32a:	4968      	ldr	r1, [pc, #416]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f32c:	4313      	orrs	r3, r2
 800f32e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f330:	e06a      	b.n	800f408 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f332:	4b66      	ldr	r3, [pc, #408]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f334:	68db      	ldr	r3, [r3, #12]
 800f336:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6a1b      	ldr	r3, [r3, #32]
 800f33e:	061b      	lsls	r3, r3, #24
 800f340:	4962      	ldr	r1, [pc, #392]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f342:	4313      	orrs	r3, r2
 800f344:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f346:	e05f      	b.n	800f408 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	69db      	ldr	r3, [r3, #28]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d042      	beq.n	800f3d6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800f350:	4b5e      	ldr	r3, [pc, #376]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	4a5d      	ldr	r2, [pc, #372]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f35a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f35c:	f7fc fc88 	bl	800bc70 <HAL_GetTick>
 800f360:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f362:	e008      	b.n	800f376 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800f364:	f7fc fc84 	bl	800bc70 <HAL_GetTick>
 800f368:	4602      	mov	r2, r0
 800f36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f36c:	1ad3      	subs	r3, r2, r3
 800f36e:	2b02      	cmp	r3, #2
 800f370:	d901      	bls.n	800f376 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800f372:	2303      	movs	r3, #3
 800f374:	e255      	b.n	800f822 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f376:	4b55      	ldr	r3, [pc, #340]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d0f0      	beq.n	800f364 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f382:	f7fc fc81 	bl	800bc88 <HAL_GetREVID>
 800f386:	4603      	mov	r3, r0
 800f388:	f241 0203 	movw	r2, #4099	; 0x1003
 800f38c:	4293      	cmp	r3, r2
 800f38e:	d817      	bhi.n	800f3c0 <HAL_RCC_OscConfig+0x3ec>
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	6a1b      	ldr	r3, [r3, #32]
 800f394:	2b20      	cmp	r3, #32
 800f396:	d108      	bne.n	800f3aa <HAL_RCC_OscConfig+0x3d6>
 800f398:	4b4c      	ldr	r3, [pc, #304]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f39a:	685b      	ldr	r3, [r3, #4]
 800f39c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800f3a0:	4a4a      	ldr	r2, [pc, #296]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f3a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f3a6:	6053      	str	r3, [r2, #4]
 800f3a8:	e02e      	b.n	800f408 <HAL_RCC_OscConfig+0x434>
 800f3aa:	4b48      	ldr	r3, [pc, #288]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f3ac:	685b      	ldr	r3, [r3, #4]
 800f3ae:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	6a1b      	ldr	r3, [r3, #32]
 800f3b6:	069b      	lsls	r3, r3, #26
 800f3b8:	4944      	ldr	r1, [pc, #272]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f3ba:	4313      	orrs	r3, r2
 800f3bc:	604b      	str	r3, [r1, #4]
 800f3be:	e023      	b.n	800f408 <HAL_RCC_OscConfig+0x434>
 800f3c0:	4b42      	ldr	r3, [pc, #264]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f3c2:	68db      	ldr	r3, [r3, #12]
 800f3c4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	6a1b      	ldr	r3, [r3, #32]
 800f3cc:	061b      	lsls	r3, r3, #24
 800f3ce:	493f      	ldr	r1, [pc, #252]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f3d0:	4313      	orrs	r3, r2
 800f3d2:	60cb      	str	r3, [r1, #12]
 800f3d4:	e018      	b.n	800f408 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800f3d6:	4b3d      	ldr	r3, [pc, #244]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	4a3c      	ldr	r2, [pc, #240]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f3dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f3e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f3e2:	f7fc fc45 	bl	800bc70 <HAL_GetTick>
 800f3e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800f3e8:	e008      	b.n	800f3fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800f3ea:	f7fc fc41 	bl	800bc70 <HAL_GetTick>
 800f3ee:	4602      	mov	r2, r0
 800f3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f2:	1ad3      	subs	r3, r2, r3
 800f3f4:	2b02      	cmp	r3, #2
 800f3f6:	d901      	bls.n	800f3fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800f3f8:	2303      	movs	r3, #3
 800f3fa:	e212      	b.n	800f822 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800f3fc:	4b33      	ldr	r3, [pc, #204]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f404:	2b00      	cmp	r3, #0
 800f406:	d1f0      	bne.n	800f3ea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	f003 0308 	and.w	r3, r3, #8
 800f410:	2b00      	cmp	r3, #0
 800f412:	d036      	beq.n	800f482 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	695b      	ldr	r3, [r3, #20]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d019      	beq.n	800f450 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f41c:	4b2b      	ldr	r3, [pc, #172]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f41e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f420:	4a2a      	ldr	r2, [pc, #168]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f422:	f043 0301 	orr.w	r3, r3, #1
 800f426:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f428:	f7fc fc22 	bl	800bc70 <HAL_GetTick>
 800f42c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800f42e:	e008      	b.n	800f442 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f430:	f7fc fc1e 	bl	800bc70 <HAL_GetTick>
 800f434:	4602      	mov	r2, r0
 800f436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f438:	1ad3      	subs	r3, r2, r3
 800f43a:	2b02      	cmp	r3, #2
 800f43c:	d901      	bls.n	800f442 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800f43e:	2303      	movs	r3, #3
 800f440:	e1ef      	b.n	800f822 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800f442:	4b22      	ldr	r3, [pc, #136]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f446:	f003 0302 	and.w	r3, r3, #2
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d0f0      	beq.n	800f430 <HAL_RCC_OscConfig+0x45c>
 800f44e:	e018      	b.n	800f482 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f450:	4b1e      	ldr	r3, [pc, #120]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f454:	4a1d      	ldr	r2, [pc, #116]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f456:	f023 0301 	bic.w	r3, r3, #1
 800f45a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f45c:	f7fc fc08 	bl	800bc70 <HAL_GetTick>
 800f460:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800f462:	e008      	b.n	800f476 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f464:	f7fc fc04 	bl	800bc70 <HAL_GetTick>
 800f468:	4602      	mov	r2, r0
 800f46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f46c:	1ad3      	subs	r3, r2, r3
 800f46e:	2b02      	cmp	r3, #2
 800f470:	d901      	bls.n	800f476 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800f472:	2303      	movs	r3, #3
 800f474:	e1d5      	b.n	800f822 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800f476:	4b15      	ldr	r3, [pc, #84]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f47a:	f003 0302 	and.w	r3, r3, #2
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d1f0      	bne.n	800f464 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	f003 0320 	and.w	r3, r3, #32
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d039      	beq.n	800f502 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	699b      	ldr	r3, [r3, #24]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d01c      	beq.n	800f4d0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800f496:	4b0d      	ldr	r3, [pc, #52]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	4a0c      	ldr	r2, [pc, #48]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f49c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f4a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800f4a2:	f7fc fbe5 	bl	800bc70 <HAL_GetTick>
 800f4a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800f4a8:	e008      	b.n	800f4bc <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800f4aa:	f7fc fbe1 	bl	800bc70 <HAL_GetTick>
 800f4ae:	4602      	mov	r2, r0
 800f4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b2:	1ad3      	subs	r3, r2, r3
 800f4b4:	2b02      	cmp	r3, #2
 800f4b6:	d901      	bls.n	800f4bc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800f4b8:	2303      	movs	r3, #3
 800f4ba:	e1b2      	b.n	800f822 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800f4bc:	4b03      	ldr	r3, [pc, #12]	; (800f4cc <HAL_RCC_OscConfig+0x4f8>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d0f0      	beq.n	800f4aa <HAL_RCC_OscConfig+0x4d6>
 800f4c8:	e01b      	b.n	800f502 <HAL_RCC_OscConfig+0x52e>
 800f4ca:	bf00      	nop
 800f4cc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800f4d0:	4b9b      	ldr	r3, [pc, #620]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	4a9a      	ldr	r2, [pc, #616]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f4d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f4da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800f4dc:	f7fc fbc8 	bl	800bc70 <HAL_GetTick>
 800f4e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800f4e2:	e008      	b.n	800f4f6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800f4e4:	f7fc fbc4 	bl	800bc70 <HAL_GetTick>
 800f4e8:	4602      	mov	r2, r0
 800f4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ec:	1ad3      	subs	r3, r2, r3
 800f4ee:	2b02      	cmp	r3, #2
 800f4f0:	d901      	bls.n	800f4f6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800f4f2:	2303      	movs	r3, #3
 800f4f4:	e195      	b.n	800f822 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800f4f6:	4b92      	ldr	r3, [pc, #584]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d1f0      	bne.n	800f4e4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	f003 0304 	and.w	r3, r3, #4
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	f000 8081 	beq.w	800f612 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800f510:	4b8c      	ldr	r3, [pc, #560]	; (800f744 <HAL_RCC_OscConfig+0x770>)
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	4a8b      	ldr	r2, [pc, #556]	; (800f744 <HAL_RCC_OscConfig+0x770>)
 800f516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f51a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f51c:	f7fc fba8 	bl	800bc70 <HAL_GetTick>
 800f520:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f522:	e008      	b.n	800f536 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800f524:	f7fc fba4 	bl	800bc70 <HAL_GetTick>
 800f528:	4602      	mov	r2, r0
 800f52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f52c:	1ad3      	subs	r3, r2, r3
 800f52e:	2b64      	cmp	r3, #100	; 0x64
 800f530:	d901      	bls.n	800f536 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800f532:	2303      	movs	r3, #3
 800f534:	e175      	b.n	800f822 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f536:	4b83      	ldr	r3, [pc, #524]	; (800f744 <HAL_RCC_OscConfig+0x770>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d0f0      	beq.n	800f524 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	689b      	ldr	r3, [r3, #8]
 800f546:	2b01      	cmp	r3, #1
 800f548:	d106      	bne.n	800f558 <HAL_RCC_OscConfig+0x584>
 800f54a:	4b7d      	ldr	r3, [pc, #500]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f54c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f54e:	4a7c      	ldr	r2, [pc, #496]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f550:	f043 0301 	orr.w	r3, r3, #1
 800f554:	6713      	str	r3, [r2, #112]	; 0x70
 800f556:	e02d      	b.n	800f5b4 <HAL_RCC_OscConfig+0x5e0>
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	689b      	ldr	r3, [r3, #8]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d10c      	bne.n	800f57a <HAL_RCC_OscConfig+0x5a6>
 800f560:	4b77      	ldr	r3, [pc, #476]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f564:	4a76      	ldr	r2, [pc, #472]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f566:	f023 0301 	bic.w	r3, r3, #1
 800f56a:	6713      	str	r3, [r2, #112]	; 0x70
 800f56c:	4b74      	ldr	r3, [pc, #464]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f56e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f570:	4a73      	ldr	r2, [pc, #460]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f572:	f023 0304 	bic.w	r3, r3, #4
 800f576:	6713      	str	r3, [r2, #112]	; 0x70
 800f578:	e01c      	b.n	800f5b4 <HAL_RCC_OscConfig+0x5e0>
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	689b      	ldr	r3, [r3, #8]
 800f57e:	2b05      	cmp	r3, #5
 800f580:	d10c      	bne.n	800f59c <HAL_RCC_OscConfig+0x5c8>
 800f582:	4b6f      	ldr	r3, [pc, #444]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f586:	4a6e      	ldr	r2, [pc, #440]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f588:	f043 0304 	orr.w	r3, r3, #4
 800f58c:	6713      	str	r3, [r2, #112]	; 0x70
 800f58e:	4b6c      	ldr	r3, [pc, #432]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f592:	4a6b      	ldr	r2, [pc, #428]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f594:	f043 0301 	orr.w	r3, r3, #1
 800f598:	6713      	str	r3, [r2, #112]	; 0x70
 800f59a:	e00b      	b.n	800f5b4 <HAL_RCC_OscConfig+0x5e0>
 800f59c:	4b68      	ldr	r3, [pc, #416]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f59e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5a0:	4a67      	ldr	r2, [pc, #412]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f5a2:	f023 0301 	bic.w	r3, r3, #1
 800f5a6:	6713      	str	r3, [r2, #112]	; 0x70
 800f5a8:	4b65      	ldr	r3, [pc, #404]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f5aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5ac:	4a64      	ldr	r2, [pc, #400]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f5ae:	f023 0304 	bic.w	r3, r3, #4
 800f5b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	689b      	ldr	r3, [r3, #8]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d015      	beq.n	800f5e8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f5bc:	f7fc fb58 	bl	800bc70 <HAL_GetTick>
 800f5c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f5c2:	e00a      	b.n	800f5da <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f5c4:	f7fc fb54 	bl	800bc70 <HAL_GetTick>
 800f5c8:	4602      	mov	r2, r0
 800f5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5cc:	1ad3      	subs	r3, r2, r3
 800f5ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800f5d2:	4293      	cmp	r3, r2
 800f5d4:	d901      	bls.n	800f5da <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800f5d6:	2303      	movs	r3, #3
 800f5d8:	e123      	b.n	800f822 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f5da:	4b59      	ldr	r3, [pc, #356]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f5dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5de:	f003 0302 	and.w	r3, r3, #2
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d0ee      	beq.n	800f5c4 <HAL_RCC_OscConfig+0x5f0>
 800f5e6:	e014      	b.n	800f612 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f5e8:	f7fc fb42 	bl	800bc70 <HAL_GetTick>
 800f5ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800f5ee:	e00a      	b.n	800f606 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f5f0:	f7fc fb3e 	bl	800bc70 <HAL_GetTick>
 800f5f4:	4602      	mov	r2, r0
 800f5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f8:	1ad3      	subs	r3, r2, r3
 800f5fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800f5fe:	4293      	cmp	r3, r2
 800f600:	d901      	bls.n	800f606 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800f602:	2303      	movs	r3, #3
 800f604:	e10d      	b.n	800f822 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800f606:	4b4e      	ldr	r3, [pc, #312]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f60a:	f003 0302 	and.w	r3, r3, #2
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d1ee      	bne.n	800f5f0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f616:	2b00      	cmp	r3, #0
 800f618:	f000 8102 	beq.w	800f820 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800f61c:	4b48      	ldr	r3, [pc, #288]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f61e:	691b      	ldr	r3, [r3, #16]
 800f620:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f624:	2b18      	cmp	r3, #24
 800f626:	f000 80bd 	beq.w	800f7a4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f62e:	2b02      	cmp	r3, #2
 800f630:	f040 809e 	bne.w	800f770 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f634:	4b42      	ldr	r3, [pc, #264]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	4a41      	ldr	r2, [pc, #260]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f63a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f63e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f640:	f7fc fb16 	bl	800bc70 <HAL_GetTick>
 800f644:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f646:	e008      	b.n	800f65a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f648:	f7fc fb12 	bl	800bc70 <HAL_GetTick>
 800f64c:	4602      	mov	r2, r0
 800f64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f650:	1ad3      	subs	r3, r2, r3
 800f652:	2b02      	cmp	r3, #2
 800f654:	d901      	bls.n	800f65a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800f656:	2303      	movs	r3, #3
 800f658:	e0e3      	b.n	800f822 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f65a:	4b39      	ldr	r3, [pc, #228]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f662:	2b00      	cmp	r3, #0
 800f664:	d1f0      	bne.n	800f648 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f666:	4b36      	ldr	r3, [pc, #216]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f668:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f66a:	4b37      	ldr	r3, [pc, #220]	; (800f748 <HAL_RCC_OscConfig+0x774>)
 800f66c:	4013      	ands	r3, r2
 800f66e:	687a      	ldr	r2, [r7, #4]
 800f670:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800f672:	687a      	ldr	r2, [r7, #4]
 800f674:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800f676:	0112      	lsls	r2, r2, #4
 800f678:	430a      	orrs	r2, r1
 800f67a:	4931      	ldr	r1, [pc, #196]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f67c:	4313      	orrs	r3, r2
 800f67e:	628b      	str	r3, [r1, #40]	; 0x28
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f684:	3b01      	subs	r3, #1
 800f686:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f68e:	3b01      	subs	r3, #1
 800f690:	025b      	lsls	r3, r3, #9
 800f692:	b29b      	uxth	r3, r3
 800f694:	431a      	orrs	r2, r3
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f69a:	3b01      	subs	r3, #1
 800f69c:	041b      	lsls	r3, r3, #16
 800f69e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f6a2:	431a      	orrs	r2, r3
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6a8:	3b01      	subs	r3, #1
 800f6aa:	061b      	lsls	r3, r3, #24
 800f6ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f6b0:	4923      	ldr	r1, [pc, #140]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f6b2:	4313      	orrs	r3, r2
 800f6b4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800f6b6:	4b22      	ldr	r3, [pc, #136]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6ba:	4a21      	ldr	r2, [pc, #132]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f6bc:	f023 0301 	bic.w	r3, r3, #1
 800f6c0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800f6c2:	4b1f      	ldr	r3, [pc, #124]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f6c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f6c6:	4b21      	ldr	r3, [pc, #132]	; (800f74c <HAL_RCC_OscConfig+0x778>)
 800f6c8:	4013      	ands	r3, r2
 800f6ca:	687a      	ldr	r2, [r7, #4]
 800f6cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800f6ce:	00d2      	lsls	r2, r2, #3
 800f6d0:	491b      	ldr	r1, [pc, #108]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f6d2:	4313      	orrs	r3, r2
 800f6d4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800f6d6:	4b1a      	ldr	r3, [pc, #104]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f6d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6da:	f023 020c 	bic.w	r2, r3, #12
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6e2:	4917      	ldr	r1, [pc, #92]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f6e4:	4313      	orrs	r3, r2
 800f6e6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800f6e8:	4b15      	ldr	r3, [pc, #84]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f6ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6ec:	f023 0202 	bic.w	r2, r3, #2
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6f4:	4912      	ldr	r1, [pc, #72]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f6f6:	4313      	orrs	r3, r2
 800f6f8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800f6fa:	4b11      	ldr	r3, [pc, #68]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f6fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6fe:	4a10      	ldr	r2, [pc, #64]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f704:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f706:	4b0e      	ldr	r3, [pc, #56]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f70a:	4a0d      	ldr	r2, [pc, #52]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f70c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f710:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800f712:	4b0b      	ldr	r3, [pc, #44]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f716:	4a0a      	ldr	r2, [pc, #40]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f71c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800f71e:	4b08      	ldr	r3, [pc, #32]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f722:	4a07      	ldr	r2, [pc, #28]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f724:	f043 0301 	orr.w	r3, r3, #1
 800f728:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f72a:	4b05      	ldr	r3, [pc, #20]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	4a04      	ldr	r2, [pc, #16]	; (800f740 <HAL_RCC_OscConfig+0x76c>)
 800f730:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f736:	f7fc fa9b 	bl	800bc70 <HAL_GetTick>
 800f73a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f73c:	e011      	b.n	800f762 <HAL_RCC_OscConfig+0x78e>
 800f73e:	bf00      	nop
 800f740:	58024400 	.word	0x58024400
 800f744:	58024800 	.word	0x58024800
 800f748:	fffffc0c 	.word	0xfffffc0c
 800f74c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f750:	f7fc fa8e 	bl	800bc70 <HAL_GetTick>
 800f754:	4602      	mov	r2, r0
 800f756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f758:	1ad3      	subs	r3, r2, r3
 800f75a:	2b02      	cmp	r3, #2
 800f75c:	d901      	bls.n	800f762 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800f75e:	2303      	movs	r3, #3
 800f760:	e05f      	b.n	800f822 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f762:	4b32      	ldr	r3, [pc, #200]	; (800f82c <HAL_RCC_OscConfig+0x858>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d0f0      	beq.n	800f750 <HAL_RCC_OscConfig+0x77c>
 800f76e:	e057      	b.n	800f820 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f770:	4b2e      	ldr	r3, [pc, #184]	; (800f82c <HAL_RCC_OscConfig+0x858>)
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	4a2d      	ldr	r2, [pc, #180]	; (800f82c <HAL_RCC_OscConfig+0x858>)
 800f776:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f77a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f77c:	f7fc fa78 	bl	800bc70 <HAL_GetTick>
 800f780:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f782:	e008      	b.n	800f796 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f784:	f7fc fa74 	bl	800bc70 <HAL_GetTick>
 800f788:	4602      	mov	r2, r0
 800f78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f78c:	1ad3      	subs	r3, r2, r3
 800f78e:	2b02      	cmp	r3, #2
 800f790:	d901      	bls.n	800f796 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800f792:	2303      	movs	r3, #3
 800f794:	e045      	b.n	800f822 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f796:	4b25      	ldr	r3, [pc, #148]	; (800f82c <HAL_RCC_OscConfig+0x858>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d1f0      	bne.n	800f784 <HAL_RCC_OscConfig+0x7b0>
 800f7a2:	e03d      	b.n	800f820 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800f7a4:	4b21      	ldr	r3, [pc, #132]	; (800f82c <HAL_RCC_OscConfig+0x858>)
 800f7a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800f7aa:	4b20      	ldr	r3, [pc, #128]	; (800f82c <HAL_RCC_OscConfig+0x858>)
 800f7ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7ae:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7b4:	2b01      	cmp	r3, #1
 800f7b6:	d031      	beq.n	800f81c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f7b8:	693b      	ldr	r3, [r7, #16]
 800f7ba:	f003 0203 	and.w	r2, r3, #3
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f7c2:	429a      	cmp	r2, r3
 800f7c4:	d12a      	bne.n	800f81c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800f7c6:	693b      	ldr	r3, [r7, #16]
 800f7c8:	091b      	lsrs	r3, r3, #4
 800f7ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d122      	bne.n	800f81c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7e0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800f7e2:	429a      	cmp	r2, r3
 800f7e4:	d11a      	bne.n	800f81c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	0a5b      	lsrs	r3, r3, #9
 800f7ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7f2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800f7f4:	429a      	cmp	r2, r3
 800f7f6:	d111      	bne.n	800f81c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	0c1b      	lsrs	r3, r3, #16
 800f7fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f804:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800f806:	429a      	cmp	r2, r3
 800f808:	d108      	bne.n	800f81c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	0e1b      	lsrs	r3, r3, #24
 800f80e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f816:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800f818:	429a      	cmp	r2, r3
 800f81a:	d001      	beq.n	800f820 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800f81c:	2301      	movs	r3, #1
 800f81e:	e000      	b.n	800f822 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800f820:	2300      	movs	r3, #0
}
 800f822:	4618      	mov	r0, r3
 800f824:	3730      	adds	r7, #48	; 0x30
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}
 800f82a:	bf00      	nop
 800f82c:	58024400 	.word	0x58024400

0800f830 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b086      	sub	sp, #24
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d101      	bne.n	800f844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f840:	2301      	movs	r3, #1
 800f842:	e19c      	b.n	800fb7e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f844:	4b8a      	ldr	r3, [pc, #552]	; (800fa70 <HAL_RCC_ClockConfig+0x240>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	f003 030f 	and.w	r3, r3, #15
 800f84c:	683a      	ldr	r2, [r7, #0]
 800f84e:	429a      	cmp	r2, r3
 800f850:	d910      	bls.n	800f874 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f852:	4b87      	ldr	r3, [pc, #540]	; (800fa70 <HAL_RCC_ClockConfig+0x240>)
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	f023 020f 	bic.w	r2, r3, #15
 800f85a:	4985      	ldr	r1, [pc, #532]	; (800fa70 <HAL_RCC_ClockConfig+0x240>)
 800f85c:	683b      	ldr	r3, [r7, #0]
 800f85e:	4313      	orrs	r3, r2
 800f860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f862:	4b83      	ldr	r3, [pc, #524]	; (800fa70 <HAL_RCC_ClockConfig+0x240>)
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	f003 030f 	and.w	r3, r3, #15
 800f86a:	683a      	ldr	r2, [r7, #0]
 800f86c:	429a      	cmp	r2, r3
 800f86e:	d001      	beq.n	800f874 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800f870:	2301      	movs	r3, #1
 800f872:	e184      	b.n	800fb7e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	f003 0304 	and.w	r3, r3, #4
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d010      	beq.n	800f8a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	691a      	ldr	r2, [r3, #16]
 800f884:	4b7b      	ldr	r3, [pc, #492]	; (800fa74 <HAL_RCC_ClockConfig+0x244>)
 800f886:	699b      	ldr	r3, [r3, #24]
 800f888:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f88c:	429a      	cmp	r2, r3
 800f88e:	d908      	bls.n	800f8a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800f890:	4b78      	ldr	r3, [pc, #480]	; (800fa74 <HAL_RCC_ClockConfig+0x244>)
 800f892:	699b      	ldr	r3, [r3, #24]
 800f894:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	691b      	ldr	r3, [r3, #16]
 800f89c:	4975      	ldr	r1, [pc, #468]	; (800fa74 <HAL_RCC_ClockConfig+0x244>)
 800f89e:	4313      	orrs	r3, r2
 800f8a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	f003 0308 	and.w	r3, r3, #8
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d010      	beq.n	800f8d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	695a      	ldr	r2, [r3, #20]
 800f8b2:	4b70      	ldr	r3, [pc, #448]	; (800fa74 <HAL_RCC_ClockConfig+0x244>)
 800f8b4:	69db      	ldr	r3, [r3, #28]
 800f8b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f8ba:	429a      	cmp	r2, r3
 800f8bc:	d908      	bls.n	800f8d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800f8be:	4b6d      	ldr	r3, [pc, #436]	; (800fa74 <HAL_RCC_ClockConfig+0x244>)
 800f8c0:	69db      	ldr	r3, [r3, #28]
 800f8c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	695b      	ldr	r3, [r3, #20]
 800f8ca:	496a      	ldr	r1, [pc, #424]	; (800fa74 <HAL_RCC_ClockConfig+0x244>)
 800f8cc:	4313      	orrs	r3, r2
 800f8ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	f003 0310 	and.w	r3, r3, #16
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d010      	beq.n	800f8fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	699a      	ldr	r2, [r3, #24]
 800f8e0:	4b64      	ldr	r3, [pc, #400]	; (800fa74 <HAL_RCC_ClockConfig+0x244>)
 800f8e2:	69db      	ldr	r3, [r3, #28]
 800f8e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f8e8:	429a      	cmp	r2, r3
 800f8ea:	d908      	bls.n	800f8fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800f8ec:	4b61      	ldr	r3, [pc, #388]	; (800fa74 <HAL_RCC_ClockConfig+0x244>)
 800f8ee:	69db      	ldr	r3, [r3, #28]
 800f8f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	699b      	ldr	r3, [r3, #24]
 800f8f8:	495e      	ldr	r1, [pc, #376]	; (800fa74 <HAL_RCC_ClockConfig+0x244>)
 800f8fa:	4313      	orrs	r3, r2
 800f8fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	f003 0320 	and.w	r3, r3, #32
 800f906:	2b00      	cmp	r3, #0
 800f908:	d010      	beq.n	800f92c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	69da      	ldr	r2, [r3, #28]
 800f90e:	4b59      	ldr	r3, [pc, #356]	; (800fa74 <HAL_RCC_ClockConfig+0x244>)
 800f910:	6a1b      	ldr	r3, [r3, #32]
 800f912:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f916:	429a      	cmp	r2, r3
 800f918:	d908      	bls.n	800f92c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800f91a:	4b56      	ldr	r3, [pc, #344]	; (800fa74 <HAL_RCC_ClockConfig+0x244>)
 800f91c:	6a1b      	ldr	r3, [r3, #32]
 800f91e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	69db      	ldr	r3, [r3, #28]
 800f926:	4953      	ldr	r1, [pc, #332]	; (800fa74 <HAL_RCC_ClockConfig+0x244>)
 800f928:	4313      	orrs	r3, r2
 800f92a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	f003 0302 	and.w	r3, r3, #2
 800f934:	2b00      	cmp	r3, #0
 800f936:	d010      	beq.n	800f95a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	68da      	ldr	r2, [r3, #12]
 800f93c:	4b4d      	ldr	r3, [pc, #308]	; (800fa74 <HAL_RCC_ClockConfig+0x244>)
 800f93e:	699b      	ldr	r3, [r3, #24]
 800f940:	f003 030f 	and.w	r3, r3, #15
 800f944:	429a      	cmp	r2, r3
 800f946:	d908      	bls.n	800f95a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f948:	4b4a      	ldr	r3, [pc, #296]	; (800fa74 <HAL_RCC_ClockConfig+0x244>)
 800f94a:	699b      	ldr	r3, [r3, #24]
 800f94c:	f023 020f 	bic.w	r2, r3, #15
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	68db      	ldr	r3, [r3, #12]
 800f954:	4947      	ldr	r1, [pc, #284]	; (800fa74 <HAL_RCC_ClockConfig+0x244>)
 800f956:	4313      	orrs	r3, r2
 800f958:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	f003 0301 	and.w	r3, r3, #1
 800f962:	2b00      	cmp	r3, #0
 800f964:	d055      	beq.n	800fa12 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800f966:	4b43      	ldr	r3, [pc, #268]	; (800fa74 <HAL_RCC_ClockConfig+0x244>)
 800f968:	699b      	ldr	r3, [r3, #24]
 800f96a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	689b      	ldr	r3, [r3, #8]
 800f972:	4940      	ldr	r1, [pc, #256]	; (800fa74 <HAL_RCC_ClockConfig+0x244>)
 800f974:	4313      	orrs	r3, r2
 800f976:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	685b      	ldr	r3, [r3, #4]
 800f97c:	2b02      	cmp	r3, #2
 800f97e:	d107      	bne.n	800f990 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f980:	4b3c      	ldr	r3, [pc, #240]	; (800fa74 <HAL_RCC_ClockConfig+0x244>)
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d121      	bne.n	800f9d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800f98c:	2301      	movs	r3, #1
 800f98e:	e0f6      	b.n	800fb7e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	685b      	ldr	r3, [r3, #4]
 800f994:	2b03      	cmp	r3, #3
 800f996:	d107      	bne.n	800f9a8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f998:	4b36      	ldr	r3, [pc, #216]	; (800fa74 <HAL_RCC_ClockConfig+0x244>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d115      	bne.n	800f9d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800f9a4:	2301      	movs	r3, #1
 800f9a6:	e0ea      	b.n	800fb7e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	685b      	ldr	r3, [r3, #4]
 800f9ac:	2b01      	cmp	r3, #1
 800f9ae:	d107      	bne.n	800f9c0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f9b0:	4b30      	ldr	r3, [pc, #192]	; (800fa74 <HAL_RCC_ClockConfig+0x244>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d109      	bne.n	800f9d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800f9bc:	2301      	movs	r3, #1
 800f9be:	e0de      	b.n	800fb7e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f9c0:	4b2c      	ldr	r3, [pc, #176]	; (800fa74 <HAL_RCC_ClockConfig+0x244>)
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	f003 0304 	and.w	r3, r3, #4
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d101      	bne.n	800f9d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	e0d6      	b.n	800fb7e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800f9d0:	4b28      	ldr	r3, [pc, #160]	; (800fa74 <HAL_RCC_ClockConfig+0x244>)
 800f9d2:	691b      	ldr	r3, [r3, #16]
 800f9d4:	f023 0207 	bic.w	r2, r3, #7
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	685b      	ldr	r3, [r3, #4]
 800f9dc:	4925      	ldr	r1, [pc, #148]	; (800fa74 <HAL_RCC_ClockConfig+0x244>)
 800f9de:	4313      	orrs	r3, r2
 800f9e0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f9e2:	f7fc f945 	bl	800bc70 <HAL_GetTick>
 800f9e6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f9e8:	e00a      	b.n	800fa00 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f9ea:	f7fc f941 	bl	800bc70 <HAL_GetTick>
 800f9ee:	4602      	mov	r2, r0
 800f9f0:	697b      	ldr	r3, [r7, #20]
 800f9f2:	1ad3      	subs	r3, r2, r3
 800f9f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f9f8:	4293      	cmp	r3, r2
 800f9fa:	d901      	bls.n	800fa00 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800f9fc:	2303      	movs	r3, #3
 800f9fe:	e0be      	b.n	800fb7e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fa00:	4b1c      	ldr	r3, [pc, #112]	; (800fa74 <HAL_RCC_ClockConfig+0x244>)
 800fa02:	691b      	ldr	r3, [r3, #16]
 800fa04:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	685b      	ldr	r3, [r3, #4]
 800fa0c:	00db      	lsls	r3, r3, #3
 800fa0e:	429a      	cmp	r2, r3
 800fa10:	d1eb      	bne.n	800f9ea <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	f003 0302 	and.w	r3, r3, #2
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d010      	beq.n	800fa40 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	68da      	ldr	r2, [r3, #12]
 800fa22:	4b14      	ldr	r3, [pc, #80]	; (800fa74 <HAL_RCC_ClockConfig+0x244>)
 800fa24:	699b      	ldr	r3, [r3, #24]
 800fa26:	f003 030f 	and.w	r3, r3, #15
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	d208      	bcs.n	800fa40 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fa2e:	4b11      	ldr	r3, [pc, #68]	; (800fa74 <HAL_RCC_ClockConfig+0x244>)
 800fa30:	699b      	ldr	r3, [r3, #24]
 800fa32:	f023 020f 	bic.w	r2, r3, #15
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	68db      	ldr	r3, [r3, #12]
 800fa3a:	490e      	ldr	r1, [pc, #56]	; (800fa74 <HAL_RCC_ClockConfig+0x244>)
 800fa3c:	4313      	orrs	r3, r2
 800fa3e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800fa40:	4b0b      	ldr	r3, [pc, #44]	; (800fa70 <HAL_RCC_ClockConfig+0x240>)
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	f003 030f 	and.w	r3, r3, #15
 800fa48:	683a      	ldr	r2, [r7, #0]
 800fa4a:	429a      	cmp	r2, r3
 800fa4c:	d214      	bcs.n	800fa78 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fa4e:	4b08      	ldr	r3, [pc, #32]	; (800fa70 <HAL_RCC_ClockConfig+0x240>)
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	f023 020f 	bic.w	r2, r3, #15
 800fa56:	4906      	ldr	r1, [pc, #24]	; (800fa70 <HAL_RCC_ClockConfig+0x240>)
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	4313      	orrs	r3, r2
 800fa5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fa5e:	4b04      	ldr	r3, [pc, #16]	; (800fa70 <HAL_RCC_ClockConfig+0x240>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	f003 030f 	and.w	r3, r3, #15
 800fa66:	683a      	ldr	r2, [r7, #0]
 800fa68:	429a      	cmp	r2, r3
 800fa6a:	d005      	beq.n	800fa78 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800fa6c:	2301      	movs	r3, #1
 800fa6e:	e086      	b.n	800fb7e <HAL_RCC_ClockConfig+0x34e>
 800fa70:	52002000 	.word	0x52002000
 800fa74:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	f003 0304 	and.w	r3, r3, #4
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d010      	beq.n	800faa6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	691a      	ldr	r2, [r3, #16]
 800fa88:	4b3f      	ldr	r3, [pc, #252]	; (800fb88 <HAL_RCC_ClockConfig+0x358>)
 800fa8a:	699b      	ldr	r3, [r3, #24]
 800fa8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fa90:	429a      	cmp	r2, r3
 800fa92:	d208      	bcs.n	800faa6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800fa94:	4b3c      	ldr	r3, [pc, #240]	; (800fb88 <HAL_RCC_ClockConfig+0x358>)
 800fa96:	699b      	ldr	r3, [r3, #24]
 800fa98:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	691b      	ldr	r3, [r3, #16]
 800faa0:	4939      	ldr	r1, [pc, #228]	; (800fb88 <HAL_RCC_ClockConfig+0x358>)
 800faa2:	4313      	orrs	r3, r2
 800faa4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	f003 0308 	and.w	r3, r3, #8
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d010      	beq.n	800fad4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	695a      	ldr	r2, [r3, #20]
 800fab6:	4b34      	ldr	r3, [pc, #208]	; (800fb88 <HAL_RCC_ClockConfig+0x358>)
 800fab8:	69db      	ldr	r3, [r3, #28]
 800faba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fabe:	429a      	cmp	r2, r3
 800fac0:	d208      	bcs.n	800fad4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800fac2:	4b31      	ldr	r3, [pc, #196]	; (800fb88 <HAL_RCC_ClockConfig+0x358>)
 800fac4:	69db      	ldr	r3, [r3, #28]
 800fac6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	695b      	ldr	r3, [r3, #20]
 800face:	492e      	ldr	r1, [pc, #184]	; (800fb88 <HAL_RCC_ClockConfig+0x358>)
 800fad0:	4313      	orrs	r3, r2
 800fad2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	f003 0310 	and.w	r3, r3, #16
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d010      	beq.n	800fb02 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	699a      	ldr	r2, [r3, #24]
 800fae4:	4b28      	ldr	r3, [pc, #160]	; (800fb88 <HAL_RCC_ClockConfig+0x358>)
 800fae6:	69db      	ldr	r3, [r3, #28]
 800fae8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800faec:	429a      	cmp	r2, r3
 800faee:	d208      	bcs.n	800fb02 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800faf0:	4b25      	ldr	r3, [pc, #148]	; (800fb88 <HAL_RCC_ClockConfig+0x358>)
 800faf2:	69db      	ldr	r3, [r3, #28]
 800faf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	699b      	ldr	r3, [r3, #24]
 800fafc:	4922      	ldr	r1, [pc, #136]	; (800fb88 <HAL_RCC_ClockConfig+0x358>)
 800fafe:	4313      	orrs	r3, r2
 800fb00:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	f003 0320 	and.w	r3, r3, #32
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d010      	beq.n	800fb30 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	69da      	ldr	r2, [r3, #28]
 800fb12:	4b1d      	ldr	r3, [pc, #116]	; (800fb88 <HAL_RCC_ClockConfig+0x358>)
 800fb14:	6a1b      	ldr	r3, [r3, #32]
 800fb16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fb1a:	429a      	cmp	r2, r3
 800fb1c:	d208      	bcs.n	800fb30 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800fb1e:	4b1a      	ldr	r3, [pc, #104]	; (800fb88 <HAL_RCC_ClockConfig+0x358>)
 800fb20:	6a1b      	ldr	r3, [r3, #32]
 800fb22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	69db      	ldr	r3, [r3, #28]
 800fb2a:	4917      	ldr	r1, [pc, #92]	; (800fb88 <HAL_RCC_ClockConfig+0x358>)
 800fb2c:	4313      	orrs	r3, r2
 800fb2e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800fb30:	f000 f89e 	bl	800fc70 <HAL_RCC_GetSysClockFreq>
 800fb34:	4602      	mov	r2, r0
 800fb36:	4b14      	ldr	r3, [pc, #80]	; (800fb88 <HAL_RCC_ClockConfig+0x358>)
 800fb38:	699b      	ldr	r3, [r3, #24]
 800fb3a:	0a1b      	lsrs	r3, r3, #8
 800fb3c:	f003 030f 	and.w	r3, r3, #15
 800fb40:	4912      	ldr	r1, [pc, #72]	; (800fb8c <HAL_RCC_ClockConfig+0x35c>)
 800fb42:	5ccb      	ldrb	r3, [r1, r3]
 800fb44:	f003 031f 	and.w	r3, r3, #31
 800fb48:	fa22 f303 	lsr.w	r3, r2, r3
 800fb4c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800fb4e:	4b0e      	ldr	r3, [pc, #56]	; (800fb88 <HAL_RCC_ClockConfig+0x358>)
 800fb50:	699b      	ldr	r3, [r3, #24]
 800fb52:	f003 030f 	and.w	r3, r3, #15
 800fb56:	4a0d      	ldr	r2, [pc, #52]	; (800fb8c <HAL_RCC_ClockConfig+0x35c>)
 800fb58:	5cd3      	ldrb	r3, [r2, r3]
 800fb5a:	f003 031f 	and.w	r3, r3, #31
 800fb5e:	693a      	ldr	r2, [r7, #16]
 800fb60:	fa22 f303 	lsr.w	r3, r2, r3
 800fb64:	4a0a      	ldr	r2, [pc, #40]	; (800fb90 <HAL_RCC_ClockConfig+0x360>)
 800fb66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800fb68:	4a0a      	ldr	r2, [pc, #40]	; (800fb94 <HAL_RCC_ClockConfig+0x364>)
 800fb6a:	693b      	ldr	r3, [r7, #16]
 800fb6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800fb6e:	4b0a      	ldr	r3, [pc, #40]	; (800fb98 <HAL_RCC_ClockConfig+0x368>)
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	4618      	mov	r0, r3
 800fb74:	f7f5 f822 	bl	8004bbc <HAL_InitTick>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800fb7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3718      	adds	r7, #24
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}
 800fb86:	bf00      	nop
 800fb88:	58024400 	.word	0x58024400
 800fb8c:	08024af4 	.word	0x08024af4
 800fb90:	24000014 	.word	0x24000014
 800fb94:	24000010 	.word	0x24000010
 800fb98:	24000048 	.word	0x24000048

0800fb9c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b08c      	sub	sp, #48	; 0x30
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	60f8      	str	r0, [r7, #12]
 800fba4:	60b9      	str	r1, [r7, #8]
 800fba6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d12a      	bne.n	800fc04 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800fbae:	4b2d      	ldr	r3, [pc, #180]	; (800fc64 <HAL_RCC_MCOConfig+0xc8>)
 800fbb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fbb4:	4a2b      	ldr	r2, [pc, #172]	; (800fc64 <HAL_RCC_MCOConfig+0xc8>)
 800fbb6:	f043 0301 	orr.w	r3, r3, #1
 800fbba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fbbe:	4b29      	ldr	r3, [pc, #164]	; (800fc64 <HAL_RCC_MCOConfig+0xc8>)
 800fbc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fbc4:	f003 0301 	and.w	r3, r3, #1
 800fbc8:	61bb      	str	r3, [r7, #24]
 800fbca:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800fbcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fbd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fbd2:	2302      	movs	r3, #2
 800fbd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fbd6:	2303      	movs	r3, #3
 800fbd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fbda:	2300      	movs	r3, #0
 800fbdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800fbde:	2300      	movs	r3, #0
 800fbe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800fbe2:	f107 031c 	add.w	r3, r7, #28
 800fbe6:	4619      	mov	r1, r3
 800fbe8:	481f      	ldr	r0, [pc, #124]	; (800fc68 <HAL_RCC_MCOConfig+0xcc>)
 800fbea:	f7fc fc45 	bl	800c478 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800fbee:	4b1d      	ldr	r3, [pc, #116]	; (800fc64 <HAL_RCC_MCOConfig+0xc8>)
 800fbf0:	691b      	ldr	r3, [r3, #16]
 800fbf2:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800fbf6:	68b9      	ldr	r1, [r7, #8]
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	430b      	orrs	r3, r1
 800fbfc:	4919      	ldr	r1, [pc, #100]	; (800fc64 <HAL_RCC_MCOConfig+0xc8>)
 800fbfe:	4313      	orrs	r3, r2
 800fc00:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800fc02:	e02a      	b.n	800fc5a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800fc04:	4b17      	ldr	r3, [pc, #92]	; (800fc64 <HAL_RCC_MCOConfig+0xc8>)
 800fc06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc0a:	4a16      	ldr	r2, [pc, #88]	; (800fc64 <HAL_RCC_MCOConfig+0xc8>)
 800fc0c:	f043 0304 	orr.w	r3, r3, #4
 800fc10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fc14:	4b13      	ldr	r3, [pc, #76]	; (800fc64 <HAL_RCC_MCOConfig+0xc8>)
 800fc16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc1a:	f003 0304 	and.w	r3, r3, #4
 800fc1e:	617b      	str	r3, [r7, #20]
 800fc20:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800fc22:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fc26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fc28:	2302      	movs	r3, #2
 800fc2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fc2c:	2303      	movs	r3, #3
 800fc2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fc30:	2300      	movs	r3, #0
 800fc32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800fc34:	2300      	movs	r3, #0
 800fc36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800fc38:	f107 031c 	add.w	r3, r7, #28
 800fc3c:	4619      	mov	r1, r3
 800fc3e:	480b      	ldr	r0, [pc, #44]	; (800fc6c <HAL_RCC_MCOConfig+0xd0>)
 800fc40:	f7fc fc1a 	bl	800c478 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800fc44:	4b07      	ldr	r3, [pc, #28]	; (800fc64 <HAL_RCC_MCOConfig+0xc8>)
 800fc46:	691b      	ldr	r3, [r3, #16]
 800fc48:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	01d9      	lsls	r1, r3, #7
 800fc50:	68bb      	ldr	r3, [r7, #8]
 800fc52:	430b      	orrs	r3, r1
 800fc54:	4903      	ldr	r1, [pc, #12]	; (800fc64 <HAL_RCC_MCOConfig+0xc8>)
 800fc56:	4313      	orrs	r3, r2
 800fc58:	610b      	str	r3, [r1, #16]
}
 800fc5a:	bf00      	nop
 800fc5c:	3730      	adds	r7, #48	; 0x30
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd80      	pop	{r7, pc}
 800fc62:	bf00      	nop
 800fc64:	58024400 	.word	0x58024400
 800fc68:	58020000 	.word	0x58020000
 800fc6c:	58020800 	.word	0x58020800

0800fc70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800fc70:	b480      	push	{r7}
 800fc72:	b089      	sub	sp, #36	; 0x24
 800fc74:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fc76:	4bb3      	ldr	r3, [pc, #716]	; (800ff44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fc78:	691b      	ldr	r3, [r3, #16]
 800fc7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fc7e:	2b18      	cmp	r3, #24
 800fc80:	f200 8155 	bhi.w	800ff2e <HAL_RCC_GetSysClockFreq+0x2be>
 800fc84:	a201      	add	r2, pc, #4	; (adr r2, 800fc8c <HAL_RCC_GetSysClockFreq+0x1c>)
 800fc86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc8a:	bf00      	nop
 800fc8c:	0800fcf1 	.word	0x0800fcf1
 800fc90:	0800ff2f 	.word	0x0800ff2f
 800fc94:	0800ff2f 	.word	0x0800ff2f
 800fc98:	0800ff2f 	.word	0x0800ff2f
 800fc9c:	0800ff2f 	.word	0x0800ff2f
 800fca0:	0800ff2f 	.word	0x0800ff2f
 800fca4:	0800ff2f 	.word	0x0800ff2f
 800fca8:	0800ff2f 	.word	0x0800ff2f
 800fcac:	0800fd17 	.word	0x0800fd17
 800fcb0:	0800ff2f 	.word	0x0800ff2f
 800fcb4:	0800ff2f 	.word	0x0800ff2f
 800fcb8:	0800ff2f 	.word	0x0800ff2f
 800fcbc:	0800ff2f 	.word	0x0800ff2f
 800fcc0:	0800ff2f 	.word	0x0800ff2f
 800fcc4:	0800ff2f 	.word	0x0800ff2f
 800fcc8:	0800ff2f 	.word	0x0800ff2f
 800fccc:	0800fd1d 	.word	0x0800fd1d
 800fcd0:	0800ff2f 	.word	0x0800ff2f
 800fcd4:	0800ff2f 	.word	0x0800ff2f
 800fcd8:	0800ff2f 	.word	0x0800ff2f
 800fcdc:	0800ff2f 	.word	0x0800ff2f
 800fce0:	0800ff2f 	.word	0x0800ff2f
 800fce4:	0800ff2f 	.word	0x0800ff2f
 800fce8:	0800ff2f 	.word	0x0800ff2f
 800fcec:	0800fd23 	.word	0x0800fd23
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fcf0:	4b94      	ldr	r3, [pc, #592]	; (800ff44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	f003 0320 	and.w	r3, r3, #32
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d009      	beq.n	800fd10 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fcfc:	4b91      	ldr	r3, [pc, #580]	; (800ff44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	08db      	lsrs	r3, r3, #3
 800fd02:	f003 0303 	and.w	r3, r3, #3
 800fd06:	4a90      	ldr	r2, [pc, #576]	; (800ff48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800fd08:	fa22 f303 	lsr.w	r3, r2, r3
 800fd0c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800fd0e:	e111      	b.n	800ff34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800fd10:	4b8d      	ldr	r3, [pc, #564]	; (800ff48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800fd12:	61bb      	str	r3, [r7, #24]
    break;
 800fd14:	e10e      	b.n	800ff34 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800fd16:	4b8d      	ldr	r3, [pc, #564]	; (800ff4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800fd18:	61bb      	str	r3, [r7, #24]
    break;
 800fd1a:	e10b      	b.n	800ff34 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800fd1c:	4b8c      	ldr	r3, [pc, #560]	; (800ff50 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800fd1e:	61bb      	str	r3, [r7, #24]
    break;
 800fd20:	e108      	b.n	800ff34 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fd22:	4b88      	ldr	r3, [pc, #544]	; (800ff44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fd24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd26:	f003 0303 	and.w	r3, r3, #3
 800fd2a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800fd2c:	4b85      	ldr	r3, [pc, #532]	; (800ff44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fd2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd30:	091b      	lsrs	r3, r3, #4
 800fd32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd36:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800fd38:	4b82      	ldr	r3, [pc, #520]	; (800ff44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fd3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd3c:	f003 0301 	and.w	r3, r3, #1
 800fd40:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800fd42:	4b80      	ldr	r3, [pc, #512]	; (800ff44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fd44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd46:	08db      	lsrs	r3, r3, #3
 800fd48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fd4c:	68fa      	ldr	r2, [r7, #12]
 800fd4e:	fb02 f303 	mul.w	r3, r2, r3
 800fd52:	ee07 3a90 	vmov	s15, r3
 800fd56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd5a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800fd5e:	693b      	ldr	r3, [r7, #16]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	f000 80e1 	beq.w	800ff28 <HAL_RCC_GetSysClockFreq+0x2b8>
 800fd66:	697b      	ldr	r3, [r7, #20]
 800fd68:	2b02      	cmp	r3, #2
 800fd6a:	f000 8083 	beq.w	800fe74 <HAL_RCC_GetSysClockFreq+0x204>
 800fd6e:	697b      	ldr	r3, [r7, #20]
 800fd70:	2b02      	cmp	r3, #2
 800fd72:	f200 80a1 	bhi.w	800feb8 <HAL_RCC_GetSysClockFreq+0x248>
 800fd76:	697b      	ldr	r3, [r7, #20]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d003      	beq.n	800fd84 <HAL_RCC_GetSysClockFreq+0x114>
 800fd7c:	697b      	ldr	r3, [r7, #20]
 800fd7e:	2b01      	cmp	r3, #1
 800fd80:	d056      	beq.n	800fe30 <HAL_RCC_GetSysClockFreq+0x1c0>
 800fd82:	e099      	b.n	800feb8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fd84:	4b6f      	ldr	r3, [pc, #444]	; (800ff44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	f003 0320 	and.w	r3, r3, #32
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d02d      	beq.n	800fdec <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fd90:	4b6c      	ldr	r3, [pc, #432]	; (800ff44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	08db      	lsrs	r3, r3, #3
 800fd96:	f003 0303 	and.w	r3, r3, #3
 800fd9a:	4a6b      	ldr	r2, [pc, #428]	; (800ff48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800fd9c:	fa22 f303 	lsr.w	r3, r2, r3
 800fda0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	ee07 3a90 	vmov	s15, r3
 800fda8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fdac:	693b      	ldr	r3, [r7, #16]
 800fdae:	ee07 3a90 	vmov	s15, r3
 800fdb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fdba:	4b62      	ldr	r3, [pc, #392]	; (800ff44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fdbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdc2:	ee07 3a90 	vmov	s15, r3
 800fdc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fdca:	ed97 6a02 	vldr	s12, [r7, #8]
 800fdce:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ff54 <HAL_RCC_GetSysClockFreq+0x2e4>
 800fdd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fdd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fdda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fdde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fde2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fde6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800fdea:	e087      	b.n	800fefc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800fdec:	693b      	ldr	r3, [r7, #16]
 800fdee:	ee07 3a90 	vmov	s15, r3
 800fdf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdf6:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ff58 <HAL_RCC_GetSysClockFreq+0x2e8>
 800fdfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fdfe:	4b51      	ldr	r3, [pc, #324]	; (800ff44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fe00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe06:	ee07 3a90 	vmov	s15, r3
 800fe0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe0e:	ed97 6a02 	vldr	s12, [r7, #8]
 800fe12:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ff54 <HAL_RCC_GetSysClockFreq+0x2e4>
 800fe16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fe22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fe2e:	e065      	b.n	800fefc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800fe30:	693b      	ldr	r3, [r7, #16]
 800fe32:	ee07 3a90 	vmov	s15, r3
 800fe36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe3a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ff5c <HAL_RCC_GetSysClockFreq+0x2ec>
 800fe3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe42:	4b40      	ldr	r3, [pc, #256]	; (800ff44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fe44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe4a:	ee07 3a90 	vmov	s15, r3
 800fe4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe52:	ed97 6a02 	vldr	s12, [r7, #8]
 800fe56:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ff54 <HAL_RCC_GetSysClockFreq+0x2e4>
 800fe5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fe66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fe72:	e043      	b.n	800fefc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800fe74:	693b      	ldr	r3, [r7, #16]
 800fe76:	ee07 3a90 	vmov	s15, r3
 800fe7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe7e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ff60 <HAL_RCC_GetSysClockFreq+0x2f0>
 800fe82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe86:	4b2f      	ldr	r3, [pc, #188]	; (800ff44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fe88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe8e:	ee07 3a90 	vmov	s15, r3
 800fe92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe96:	ed97 6a02 	vldr	s12, [r7, #8]
 800fe9a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ff54 <HAL_RCC_GetSysClockFreq+0x2e4>
 800fe9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800feaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800feae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800feb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800feb6:	e021      	b.n	800fefc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800feb8:	693b      	ldr	r3, [r7, #16]
 800feba:	ee07 3a90 	vmov	s15, r3
 800febe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fec2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ff5c <HAL_RCC_GetSysClockFreq+0x2ec>
 800fec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800feca:	4b1e      	ldr	r3, [pc, #120]	; (800ff44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fed2:	ee07 3a90 	vmov	s15, r3
 800fed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800feda:	ed97 6a02 	vldr	s12, [r7, #8]
 800fede:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ff54 <HAL_RCC_GetSysClockFreq+0x2e4>
 800fee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800feea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800feee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fef6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fefa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800fefc:	4b11      	ldr	r3, [pc, #68]	; (800ff44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fefe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff00:	0a5b      	lsrs	r3, r3, #9
 800ff02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff06:	3301      	adds	r3, #1
 800ff08:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	ee07 3a90 	vmov	s15, r3
 800ff10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ff14:	edd7 6a07 	vldr	s13, [r7, #28]
 800ff18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff20:	ee17 3a90 	vmov	r3, s15
 800ff24:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800ff26:	e005      	b.n	800ff34 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800ff28:	2300      	movs	r3, #0
 800ff2a:	61bb      	str	r3, [r7, #24]
    break;
 800ff2c:	e002      	b.n	800ff34 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800ff2e:	4b07      	ldr	r3, [pc, #28]	; (800ff4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ff30:	61bb      	str	r3, [r7, #24]
    break;
 800ff32:	bf00      	nop
  }

  return sysclockfreq;
 800ff34:	69bb      	ldr	r3, [r7, #24]
}
 800ff36:	4618      	mov	r0, r3
 800ff38:	3724      	adds	r7, #36	; 0x24
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff40:	4770      	bx	lr
 800ff42:	bf00      	nop
 800ff44:	58024400 	.word	0x58024400
 800ff48:	03d09000 	.word	0x03d09000
 800ff4c:	003d0900 	.word	0x003d0900
 800ff50:	017d7840 	.word	0x017d7840
 800ff54:	46000000 	.word	0x46000000
 800ff58:	4c742400 	.word	0x4c742400
 800ff5c:	4a742400 	.word	0x4a742400
 800ff60:	4bbebc20 	.word	0x4bbebc20

0800ff64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b082      	sub	sp, #8
 800ff68:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ff6a:	f7ff fe81 	bl	800fc70 <HAL_RCC_GetSysClockFreq>
 800ff6e:	4602      	mov	r2, r0
 800ff70:	4b10      	ldr	r3, [pc, #64]	; (800ffb4 <HAL_RCC_GetHCLKFreq+0x50>)
 800ff72:	699b      	ldr	r3, [r3, #24]
 800ff74:	0a1b      	lsrs	r3, r3, #8
 800ff76:	f003 030f 	and.w	r3, r3, #15
 800ff7a:	490f      	ldr	r1, [pc, #60]	; (800ffb8 <HAL_RCC_GetHCLKFreq+0x54>)
 800ff7c:	5ccb      	ldrb	r3, [r1, r3]
 800ff7e:	f003 031f 	and.w	r3, r3, #31
 800ff82:	fa22 f303 	lsr.w	r3, r2, r3
 800ff86:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ff88:	4b0a      	ldr	r3, [pc, #40]	; (800ffb4 <HAL_RCC_GetHCLKFreq+0x50>)
 800ff8a:	699b      	ldr	r3, [r3, #24]
 800ff8c:	f003 030f 	and.w	r3, r3, #15
 800ff90:	4a09      	ldr	r2, [pc, #36]	; (800ffb8 <HAL_RCC_GetHCLKFreq+0x54>)
 800ff92:	5cd3      	ldrb	r3, [r2, r3]
 800ff94:	f003 031f 	and.w	r3, r3, #31
 800ff98:	687a      	ldr	r2, [r7, #4]
 800ff9a:	fa22 f303 	lsr.w	r3, r2, r3
 800ff9e:	4a07      	ldr	r2, [pc, #28]	; (800ffbc <HAL_RCC_GetHCLKFreq+0x58>)
 800ffa0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ffa2:	4a07      	ldr	r2, [pc, #28]	; (800ffc0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ffa8:	4b04      	ldr	r3, [pc, #16]	; (800ffbc <HAL_RCC_GetHCLKFreq+0x58>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
}
 800ffac:	4618      	mov	r0, r3
 800ffae:	3708      	adds	r7, #8
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	bd80      	pop	{r7, pc}
 800ffb4:	58024400 	.word	0x58024400
 800ffb8:	08024af4 	.word	0x08024af4
 800ffbc:	24000014 	.word	0x24000014
 800ffc0:	24000010 	.word	0x24000010

0800ffc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ffc8:	f7ff ffcc 	bl	800ff64 <HAL_RCC_GetHCLKFreq>
 800ffcc:	4602      	mov	r2, r0
 800ffce:	4b06      	ldr	r3, [pc, #24]	; (800ffe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ffd0:	69db      	ldr	r3, [r3, #28]
 800ffd2:	091b      	lsrs	r3, r3, #4
 800ffd4:	f003 0307 	and.w	r3, r3, #7
 800ffd8:	4904      	ldr	r1, [pc, #16]	; (800ffec <HAL_RCC_GetPCLK1Freq+0x28>)
 800ffda:	5ccb      	ldrb	r3, [r1, r3]
 800ffdc:	f003 031f 	and.w	r3, r3, #31
 800ffe0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	bd80      	pop	{r7, pc}
 800ffe8:	58024400 	.word	0x58024400
 800ffec:	08024af4 	.word	0x08024af4

0800fff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800fff4:	f7ff ffb6 	bl	800ff64 <HAL_RCC_GetHCLKFreq>
 800fff8:	4602      	mov	r2, r0
 800fffa:	4b06      	ldr	r3, [pc, #24]	; (8010014 <HAL_RCC_GetPCLK2Freq+0x24>)
 800fffc:	69db      	ldr	r3, [r3, #28]
 800fffe:	0a1b      	lsrs	r3, r3, #8
 8010000:	f003 0307 	and.w	r3, r3, #7
 8010004:	4904      	ldr	r1, [pc, #16]	; (8010018 <HAL_RCC_GetPCLK2Freq+0x28>)
 8010006:	5ccb      	ldrb	r3, [r1, r3]
 8010008:	f003 031f 	and.w	r3, r3, #31
 801000c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8010010:	4618      	mov	r0, r3
 8010012:	bd80      	pop	{r7, pc}
 8010014:	58024400 	.word	0x58024400
 8010018:	08024af4 	.word	0x08024af4

0801001c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 801001c:	b480      	push	{r7}
 801001e:	b083      	sub	sp, #12
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
 8010024:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	223f      	movs	r2, #63	; 0x3f
 801002a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801002c:	4b1a      	ldr	r3, [pc, #104]	; (8010098 <HAL_RCC_GetClockConfig+0x7c>)
 801002e:	691b      	ldr	r3, [r3, #16]
 8010030:	f003 0207 	and.w	r2, r3, #7
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8010038:	4b17      	ldr	r3, [pc, #92]	; (8010098 <HAL_RCC_GetClockConfig+0x7c>)
 801003a:	699b      	ldr	r3, [r3, #24]
 801003c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8010044:	4b14      	ldr	r3, [pc, #80]	; (8010098 <HAL_RCC_GetClockConfig+0x7c>)
 8010046:	699b      	ldr	r3, [r3, #24]
 8010048:	f003 020f 	and.w	r2, r3, #15
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8010050:	4b11      	ldr	r3, [pc, #68]	; (8010098 <HAL_RCC_GetClockConfig+0x7c>)
 8010052:	699b      	ldr	r3, [r3, #24]
 8010054:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 801005c:	4b0e      	ldr	r3, [pc, #56]	; (8010098 <HAL_RCC_GetClockConfig+0x7c>)
 801005e:	69db      	ldr	r3, [r3, #28]
 8010060:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8010068:	4b0b      	ldr	r3, [pc, #44]	; (8010098 <HAL_RCC_GetClockConfig+0x7c>)
 801006a:	69db      	ldr	r3, [r3, #28]
 801006c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8010074:	4b08      	ldr	r3, [pc, #32]	; (8010098 <HAL_RCC_GetClockConfig+0x7c>)
 8010076:	6a1b      	ldr	r3, [r3, #32]
 8010078:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8010080:	4b06      	ldr	r3, [pc, #24]	; (801009c <HAL_RCC_GetClockConfig+0x80>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	f003 020f 	and.w	r2, r3, #15
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	601a      	str	r2, [r3, #0]
}
 801008c:	bf00      	nop
 801008e:	370c      	adds	r7, #12
 8010090:	46bd      	mov	sp, r7
 8010092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010096:	4770      	bx	lr
 8010098:	58024400 	.word	0x58024400
 801009c:	52002000 	.word	0x52002000

080100a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b086      	sub	sp, #24
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80100a8:	2300      	movs	r3, #0
 80100aa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80100ac:	2300      	movs	r3, #0
 80100ae:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d03f      	beq.n	801013c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80100c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80100c4:	d02a      	beq.n	801011c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80100c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80100ca:	d824      	bhi.n	8010116 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80100cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80100d0:	d018      	beq.n	8010104 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80100d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80100d6:	d81e      	bhi.n	8010116 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d003      	beq.n	80100e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80100dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80100e0:	d007      	beq.n	80100f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80100e2:	e018      	b.n	8010116 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80100e4:	4ba3      	ldr	r3, [pc, #652]	; (8010374 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80100e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100e8:	4aa2      	ldr	r2, [pc, #648]	; (8010374 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80100ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80100ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80100f0:	e015      	b.n	801011e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	3304      	adds	r3, #4
 80100f6:	2102      	movs	r1, #2
 80100f8:	4618      	mov	r0, r3
 80100fa:	f000 ff17 	bl	8010f2c <RCCEx_PLL2_Config>
 80100fe:	4603      	mov	r3, r0
 8010100:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8010102:	e00c      	b.n	801011e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	3324      	adds	r3, #36	; 0x24
 8010108:	2102      	movs	r1, #2
 801010a:	4618      	mov	r0, r3
 801010c:	f000 ffc0 	bl	8011090 <RCCEx_PLL3_Config>
 8010110:	4603      	mov	r3, r0
 8010112:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8010114:	e003      	b.n	801011e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010116:	2301      	movs	r3, #1
 8010118:	75fb      	strb	r3, [r7, #23]
      break;
 801011a:	e000      	b.n	801011e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 801011c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801011e:	7dfb      	ldrb	r3, [r7, #23]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d109      	bne.n	8010138 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8010124:	4b93      	ldr	r3, [pc, #588]	; (8010374 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010128:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010130:	4990      	ldr	r1, [pc, #576]	; (8010374 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010132:	4313      	orrs	r3, r2
 8010134:	650b      	str	r3, [r1, #80]	; 0x50
 8010136:	e001      	b.n	801013c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010138:	7dfb      	ldrb	r3, [r7, #23]
 801013a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010144:	2b00      	cmp	r3, #0
 8010146:	d03d      	beq.n	80101c4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801014c:	2b04      	cmp	r3, #4
 801014e:	d826      	bhi.n	801019e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8010150:	a201      	add	r2, pc, #4	; (adr r2, 8010158 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8010152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010156:	bf00      	nop
 8010158:	0801016d 	.word	0x0801016d
 801015c:	0801017b 	.word	0x0801017b
 8010160:	0801018d 	.word	0x0801018d
 8010164:	080101a5 	.word	0x080101a5
 8010168:	080101a5 	.word	0x080101a5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801016c:	4b81      	ldr	r3, [pc, #516]	; (8010374 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801016e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010170:	4a80      	ldr	r2, [pc, #512]	; (8010374 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010176:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8010178:	e015      	b.n	80101a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	3304      	adds	r3, #4
 801017e:	2100      	movs	r1, #0
 8010180:	4618      	mov	r0, r3
 8010182:	f000 fed3 	bl	8010f2c <RCCEx_PLL2_Config>
 8010186:	4603      	mov	r3, r0
 8010188:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801018a:	e00c      	b.n	80101a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	3324      	adds	r3, #36	; 0x24
 8010190:	2100      	movs	r1, #0
 8010192:	4618      	mov	r0, r3
 8010194:	f000 ff7c 	bl	8011090 <RCCEx_PLL3_Config>
 8010198:	4603      	mov	r3, r0
 801019a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801019c:	e003      	b.n	80101a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801019e:	2301      	movs	r3, #1
 80101a0:	75fb      	strb	r3, [r7, #23]
      break;
 80101a2:	e000      	b.n	80101a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80101a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80101a6:	7dfb      	ldrb	r3, [r7, #23]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d109      	bne.n	80101c0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80101ac:	4b71      	ldr	r3, [pc, #452]	; (8010374 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80101ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101b0:	f023 0207 	bic.w	r2, r3, #7
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80101b8:	496e      	ldr	r1, [pc, #440]	; (8010374 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80101ba:	4313      	orrs	r3, r2
 80101bc:	650b      	str	r3, [r1, #80]	; 0x50
 80101be:	e001      	b.n	80101c4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80101c0:	7dfb      	ldrb	r3, [r7, #23]
 80101c2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d042      	beq.n	8010256 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80101d8:	d02b      	beq.n	8010232 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80101da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80101de:	d825      	bhi.n	801022c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80101e0:	2bc0      	cmp	r3, #192	; 0xc0
 80101e2:	d028      	beq.n	8010236 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80101e4:	2bc0      	cmp	r3, #192	; 0xc0
 80101e6:	d821      	bhi.n	801022c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80101e8:	2b80      	cmp	r3, #128	; 0x80
 80101ea:	d016      	beq.n	801021a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80101ec:	2b80      	cmp	r3, #128	; 0x80
 80101ee:	d81d      	bhi.n	801022c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d002      	beq.n	80101fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80101f4:	2b40      	cmp	r3, #64	; 0x40
 80101f6:	d007      	beq.n	8010208 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80101f8:	e018      	b.n	801022c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80101fa:	4b5e      	ldr	r3, [pc, #376]	; (8010374 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80101fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101fe:	4a5d      	ldr	r2, [pc, #372]	; (8010374 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010204:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8010206:	e017      	b.n	8010238 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	3304      	adds	r3, #4
 801020c:	2100      	movs	r1, #0
 801020e:	4618      	mov	r0, r3
 8010210:	f000 fe8c 	bl	8010f2c <RCCEx_PLL2_Config>
 8010214:	4603      	mov	r3, r0
 8010216:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8010218:	e00e      	b.n	8010238 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	3324      	adds	r3, #36	; 0x24
 801021e:	2100      	movs	r1, #0
 8010220:	4618      	mov	r0, r3
 8010222:	f000 ff35 	bl	8011090 <RCCEx_PLL3_Config>
 8010226:	4603      	mov	r3, r0
 8010228:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 801022a:	e005      	b.n	8010238 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801022c:	2301      	movs	r3, #1
 801022e:	75fb      	strb	r3, [r7, #23]
      break;
 8010230:	e002      	b.n	8010238 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8010232:	bf00      	nop
 8010234:	e000      	b.n	8010238 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8010236:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010238:	7dfb      	ldrb	r3, [r7, #23]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d109      	bne.n	8010252 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801023e:	4b4d      	ldr	r3, [pc, #308]	; (8010374 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010242:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801024a:	494a      	ldr	r1, [pc, #296]	; (8010374 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801024c:	4313      	orrs	r3, r2
 801024e:	650b      	str	r3, [r1, #80]	; 0x50
 8010250:	e001      	b.n	8010256 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010252:	7dfb      	ldrb	r3, [r7, #23]
 8010254:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801025e:	2b00      	cmp	r3, #0
 8010260:	d049      	beq.n	80102f6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010268:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801026c:	d030      	beq.n	80102d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 801026e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010272:	d82a      	bhi.n	80102ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8010274:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8010278:	d02c      	beq.n	80102d4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 801027a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801027e:	d824      	bhi.n	80102ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8010280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010284:	d018      	beq.n	80102b8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8010286:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801028a:	d81e      	bhi.n	80102ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 801028c:	2b00      	cmp	r3, #0
 801028e:	d003      	beq.n	8010298 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8010290:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010294:	d007      	beq.n	80102a6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8010296:	e018      	b.n	80102ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010298:	4b36      	ldr	r3, [pc, #216]	; (8010374 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801029a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801029c:	4a35      	ldr	r2, [pc, #212]	; (8010374 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801029e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80102a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80102a4:	e017      	b.n	80102d6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	3304      	adds	r3, #4
 80102aa:	2100      	movs	r1, #0
 80102ac:	4618      	mov	r0, r3
 80102ae:	f000 fe3d 	bl	8010f2c <RCCEx_PLL2_Config>
 80102b2:	4603      	mov	r3, r0
 80102b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80102b6:	e00e      	b.n	80102d6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	3324      	adds	r3, #36	; 0x24
 80102bc:	2100      	movs	r1, #0
 80102be:	4618      	mov	r0, r3
 80102c0:	f000 fee6 	bl	8011090 <RCCEx_PLL3_Config>
 80102c4:	4603      	mov	r3, r0
 80102c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80102c8:	e005      	b.n	80102d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80102ca:	2301      	movs	r3, #1
 80102cc:	75fb      	strb	r3, [r7, #23]
      break;
 80102ce:	e002      	b.n	80102d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80102d0:	bf00      	nop
 80102d2:	e000      	b.n	80102d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80102d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80102d6:	7dfb      	ldrb	r3, [r7, #23]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d10a      	bne.n	80102f2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80102dc:	4b25      	ldr	r3, [pc, #148]	; (8010374 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80102de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102e0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80102ea:	4922      	ldr	r1, [pc, #136]	; (8010374 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80102ec:	4313      	orrs	r3, r2
 80102ee:	658b      	str	r3, [r1, #88]	; 0x58
 80102f0:	e001      	b.n	80102f6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80102f2:	7dfb      	ldrb	r3, [r7, #23]
 80102f4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d04b      	beq.n	801039a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010308:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801030c:	d030      	beq.n	8010370 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 801030e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010312:	d82a      	bhi.n	801036a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8010314:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010318:	d02e      	beq.n	8010378 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 801031a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801031e:	d824      	bhi.n	801036a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8010320:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010324:	d018      	beq.n	8010358 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8010326:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801032a:	d81e      	bhi.n	801036a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 801032c:	2b00      	cmp	r3, #0
 801032e:	d003      	beq.n	8010338 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8010330:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010334:	d007      	beq.n	8010346 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8010336:	e018      	b.n	801036a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010338:	4b0e      	ldr	r3, [pc, #56]	; (8010374 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801033a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801033c:	4a0d      	ldr	r2, [pc, #52]	; (8010374 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801033e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010342:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8010344:	e019      	b.n	801037a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	3304      	adds	r3, #4
 801034a:	2100      	movs	r1, #0
 801034c:	4618      	mov	r0, r3
 801034e:	f000 fded 	bl	8010f2c <RCCEx_PLL2_Config>
 8010352:	4603      	mov	r3, r0
 8010354:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8010356:	e010      	b.n	801037a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	3324      	adds	r3, #36	; 0x24
 801035c:	2100      	movs	r1, #0
 801035e:	4618      	mov	r0, r3
 8010360:	f000 fe96 	bl	8011090 <RCCEx_PLL3_Config>
 8010364:	4603      	mov	r3, r0
 8010366:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8010368:	e007      	b.n	801037a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 801036a:	2301      	movs	r3, #1
 801036c:	75fb      	strb	r3, [r7, #23]
      break;
 801036e:	e004      	b.n	801037a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8010370:	bf00      	nop
 8010372:	e002      	b.n	801037a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8010374:	58024400 	.word	0x58024400
      break;
 8010378:	bf00      	nop
    }

    if(ret == HAL_OK)
 801037a:	7dfb      	ldrb	r3, [r7, #23]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d10a      	bne.n	8010396 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8010380:	4b99      	ldr	r3, [pc, #612]	; (80105e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8010382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010384:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801038e:	4996      	ldr	r1, [pc, #600]	; (80105e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8010390:	4313      	orrs	r3, r2
 8010392:	658b      	str	r3, [r1, #88]	; 0x58
 8010394:	e001      	b.n	801039a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010396:	7dfb      	ldrb	r3, [r7, #23]
 8010398:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d032      	beq.n	801040c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80103aa:	2b30      	cmp	r3, #48	; 0x30
 80103ac:	d01c      	beq.n	80103e8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80103ae:	2b30      	cmp	r3, #48	; 0x30
 80103b0:	d817      	bhi.n	80103e2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80103b2:	2b20      	cmp	r3, #32
 80103b4:	d00c      	beq.n	80103d0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80103b6:	2b20      	cmp	r3, #32
 80103b8:	d813      	bhi.n	80103e2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d016      	beq.n	80103ec <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80103be:	2b10      	cmp	r3, #16
 80103c0:	d10f      	bne.n	80103e2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80103c2:	4b89      	ldr	r3, [pc, #548]	; (80105e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80103c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103c6:	4a88      	ldr	r2, [pc, #544]	; (80105e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80103c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80103cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80103ce:	e00e      	b.n	80103ee <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	3304      	adds	r3, #4
 80103d4:	2102      	movs	r1, #2
 80103d6:	4618      	mov	r0, r3
 80103d8:	f000 fda8 	bl	8010f2c <RCCEx_PLL2_Config>
 80103dc:	4603      	mov	r3, r0
 80103de:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80103e0:	e005      	b.n	80103ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80103e2:	2301      	movs	r3, #1
 80103e4:	75fb      	strb	r3, [r7, #23]
      break;
 80103e6:	e002      	b.n	80103ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80103e8:	bf00      	nop
 80103ea:	e000      	b.n	80103ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80103ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80103ee:	7dfb      	ldrb	r3, [r7, #23]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d109      	bne.n	8010408 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80103f4:	4b7c      	ldr	r3, [pc, #496]	; (80105e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80103f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80103f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010400:	4979      	ldr	r1, [pc, #484]	; (80105e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8010402:	4313      	orrs	r3, r2
 8010404:	64cb      	str	r3, [r1, #76]	; 0x4c
 8010406:	e001      	b.n	801040c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010408:	7dfb      	ldrb	r3, [r7, #23]
 801040a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010414:	2b00      	cmp	r3, #0
 8010416:	d047      	beq.n	80104a8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801041c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010420:	d030      	beq.n	8010484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8010422:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010426:	d82a      	bhi.n	801047e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8010428:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801042c:	d02c      	beq.n	8010488 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 801042e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010432:	d824      	bhi.n	801047e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8010434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010438:	d018      	beq.n	801046c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 801043a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801043e:	d81e      	bhi.n	801047e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8010440:	2b00      	cmp	r3, #0
 8010442:	d003      	beq.n	801044c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8010444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010448:	d007      	beq.n	801045a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 801044a:	e018      	b.n	801047e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801044c:	4b66      	ldr	r3, [pc, #408]	; (80105e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801044e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010450:	4a65      	ldr	r2, [pc, #404]	; (80105e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8010452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010456:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8010458:	e017      	b.n	801048a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	3304      	adds	r3, #4
 801045e:	2100      	movs	r1, #0
 8010460:	4618      	mov	r0, r3
 8010462:	f000 fd63 	bl	8010f2c <RCCEx_PLL2_Config>
 8010466:	4603      	mov	r3, r0
 8010468:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 801046a:	e00e      	b.n	801048a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	3324      	adds	r3, #36	; 0x24
 8010470:	2100      	movs	r1, #0
 8010472:	4618      	mov	r0, r3
 8010474:	f000 fe0c 	bl	8011090 <RCCEx_PLL3_Config>
 8010478:	4603      	mov	r3, r0
 801047a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 801047c:	e005      	b.n	801048a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801047e:	2301      	movs	r3, #1
 8010480:	75fb      	strb	r3, [r7, #23]
      break;
 8010482:	e002      	b.n	801048a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8010484:	bf00      	nop
 8010486:	e000      	b.n	801048a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8010488:	bf00      	nop
    }

    if(ret == HAL_OK)
 801048a:	7dfb      	ldrb	r3, [r7, #23]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d109      	bne.n	80104a4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8010490:	4b55      	ldr	r3, [pc, #340]	; (80105e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8010492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010494:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801049c:	4952      	ldr	r1, [pc, #328]	; (80105e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801049e:	4313      	orrs	r3, r2
 80104a0:	650b      	str	r3, [r1, #80]	; 0x50
 80104a2:	e001      	b.n	80104a8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80104a4:	7dfb      	ldrb	r3, [r7, #23]
 80104a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d049      	beq.n	8010548 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80104b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80104bc:	d02e      	beq.n	801051c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80104be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80104c2:	d828      	bhi.n	8010516 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80104c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80104c8:	d02a      	beq.n	8010520 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80104ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80104ce:	d822      	bhi.n	8010516 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80104d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80104d4:	d026      	beq.n	8010524 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80104d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80104da:	d81c      	bhi.n	8010516 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80104dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80104e0:	d010      	beq.n	8010504 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80104e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80104e6:	d816      	bhi.n	8010516 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d01d      	beq.n	8010528 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80104ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80104f0:	d111      	bne.n	8010516 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	3304      	adds	r3, #4
 80104f6:	2101      	movs	r1, #1
 80104f8:	4618      	mov	r0, r3
 80104fa:	f000 fd17 	bl	8010f2c <RCCEx_PLL2_Config>
 80104fe:	4603      	mov	r3, r0
 8010500:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8010502:	e012      	b.n	801052a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	3324      	adds	r3, #36	; 0x24
 8010508:	2101      	movs	r1, #1
 801050a:	4618      	mov	r0, r3
 801050c:	f000 fdc0 	bl	8011090 <RCCEx_PLL3_Config>
 8010510:	4603      	mov	r3, r0
 8010512:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8010514:	e009      	b.n	801052a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010516:	2301      	movs	r3, #1
 8010518:	75fb      	strb	r3, [r7, #23]
      break;
 801051a:	e006      	b.n	801052a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 801051c:	bf00      	nop
 801051e:	e004      	b.n	801052a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8010520:	bf00      	nop
 8010522:	e002      	b.n	801052a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8010524:	bf00      	nop
 8010526:	e000      	b.n	801052a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8010528:	bf00      	nop
    }

    if(ret == HAL_OK)
 801052a:	7dfb      	ldrb	r3, [r7, #23]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d109      	bne.n	8010544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8010530:	4b2d      	ldr	r3, [pc, #180]	; (80105e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8010532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010534:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801053c:	492a      	ldr	r1, [pc, #168]	; (80105e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801053e:	4313      	orrs	r3, r2
 8010540:	650b      	str	r3, [r1, #80]	; 0x50
 8010542:	e001      	b.n	8010548 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010544:	7dfb      	ldrb	r3, [r7, #23]
 8010546:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010550:	2b00      	cmp	r3, #0
 8010552:	d04d      	beq.n	80105f0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801055a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801055e:	d02e      	beq.n	80105be <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8010560:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010564:	d828      	bhi.n	80105b8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8010566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801056a:	d02a      	beq.n	80105c2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 801056c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010570:	d822      	bhi.n	80105b8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8010572:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010576:	d026      	beq.n	80105c6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8010578:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801057c:	d81c      	bhi.n	80105b8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 801057e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010582:	d010      	beq.n	80105a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8010584:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010588:	d816      	bhi.n	80105b8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 801058a:	2b00      	cmp	r3, #0
 801058c:	d01d      	beq.n	80105ca <HAL_RCCEx_PeriphCLKConfig+0x52a>
 801058e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010592:	d111      	bne.n	80105b8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	3304      	adds	r3, #4
 8010598:	2101      	movs	r1, #1
 801059a:	4618      	mov	r0, r3
 801059c:	f000 fcc6 	bl	8010f2c <RCCEx_PLL2_Config>
 80105a0:	4603      	mov	r3, r0
 80105a2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80105a4:	e012      	b.n	80105cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	3324      	adds	r3, #36	; 0x24
 80105aa:	2101      	movs	r1, #1
 80105ac:	4618      	mov	r0, r3
 80105ae:	f000 fd6f 	bl	8011090 <RCCEx_PLL3_Config>
 80105b2:	4603      	mov	r3, r0
 80105b4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80105b6:	e009      	b.n	80105cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80105b8:	2301      	movs	r3, #1
 80105ba:	75fb      	strb	r3, [r7, #23]
      break;
 80105bc:	e006      	b.n	80105cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80105be:	bf00      	nop
 80105c0:	e004      	b.n	80105cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80105c2:	bf00      	nop
 80105c4:	e002      	b.n	80105cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80105c6:	bf00      	nop
 80105c8:	e000      	b.n	80105cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80105ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80105cc:	7dfb      	ldrb	r3, [r7, #23]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d10c      	bne.n	80105ec <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80105d2:	4b05      	ldr	r3, [pc, #20]	; (80105e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80105d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80105d6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80105e0:	4901      	ldr	r1, [pc, #4]	; (80105e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80105e2:	4313      	orrs	r3, r2
 80105e4:	658b      	str	r3, [r1, #88]	; 0x58
 80105e6:	e003      	b.n	80105f0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80105e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80105ec:	7dfb      	ldrb	r3, [r7, #23]
 80105ee:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d02f      	beq.n	801065c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010604:	d00e      	beq.n	8010624 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8010606:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801060a:	d814      	bhi.n	8010636 <HAL_RCCEx_PeriphCLKConfig+0x596>
 801060c:	2b00      	cmp	r3, #0
 801060e:	d015      	beq.n	801063c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8010610:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010614:	d10f      	bne.n	8010636 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010616:	4baf      	ldr	r3, [pc, #700]	; (80108d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8010618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801061a:	4aae      	ldr	r2, [pc, #696]	; (80108d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010620:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8010622:	e00c      	b.n	801063e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	3304      	adds	r3, #4
 8010628:	2101      	movs	r1, #1
 801062a:	4618      	mov	r0, r3
 801062c:	f000 fc7e 	bl	8010f2c <RCCEx_PLL2_Config>
 8010630:	4603      	mov	r3, r0
 8010632:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8010634:	e003      	b.n	801063e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010636:	2301      	movs	r3, #1
 8010638:	75fb      	strb	r3, [r7, #23]
      break;
 801063a:	e000      	b.n	801063e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 801063c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801063e:	7dfb      	ldrb	r3, [r7, #23]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d109      	bne.n	8010658 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8010644:	4ba3      	ldr	r3, [pc, #652]	; (80108d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8010646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010648:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010650:	49a0      	ldr	r1, [pc, #640]	; (80108d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8010652:	4313      	orrs	r3, r2
 8010654:	650b      	str	r3, [r1, #80]	; 0x50
 8010656:	e001      	b.n	801065c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010658:	7dfb      	ldrb	r3, [r7, #23]
 801065a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010664:	2b00      	cmp	r3, #0
 8010666:	d032      	beq.n	80106ce <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801066c:	2b03      	cmp	r3, #3
 801066e:	d81b      	bhi.n	80106a8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8010670:	a201      	add	r2, pc, #4	; (adr r2, 8010678 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8010672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010676:	bf00      	nop
 8010678:	080106af 	.word	0x080106af
 801067c:	08010689 	.word	0x08010689
 8010680:	08010697 	.word	0x08010697
 8010684:	080106af 	.word	0x080106af
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010688:	4b92      	ldr	r3, [pc, #584]	; (80108d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801068a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801068c:	4a91      	ldr	r2, [pc, #580]	; (80108d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801068e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010692:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8010694:	e00c      	b.n	80106b0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	3304      	adds	r3, #4
 801069a:	2102      	movs	r1, #2
 801069c:	4618      	mov	r0, r3
 801069e:	f000 fc45 	bl	8010f2c <RCCEx_PLL2_Config>
 80106a2:	4603      	mov	r3, r0
 80106a4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80106a6:	e003      	b.n	80106b0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80106a8:	2301      	movs	r3, #1
 80106aa:	75fb      	strb	r3, [r7, #23]
      break;
 80106ac:	e000      	b.n	80106b0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80106ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80106b0:	7dfb      	ldrb	r3, [r7, #23]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d109      	bne.n	80106ca <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80106b6:	4b87      	ldr	r3, [pc, #540]	; (80108d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80106b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80106ba:	f023 0203 	bic.w	r2, r3, #3
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80106c2:	4984      	ldr	r1, [pc, #528]	; (80108d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80106c4:	4313      	orrs	r3, r2
 80106c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80106c8:	e001      	b.n	80106ce <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80106ca:	7dfb      	ldrb	r3, [r7, #23]
 80106cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	f000 8086 	beq.w	80107e8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80106dc:	4b7e      	ldr	r3, [pc, #504]	; (80108d8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	4a7d      	ldr	r2, [pc, #500]	; (80108d8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80106e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80106e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80106e8:	f7fb fac2 	bl	800bc70 <HAL_GetTick>
 80106ec:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80106ee:	e009      	b.n	8010704 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80106f0:	f7fb fabe 	bl	800bc70 <HAL_GetTick>
 80106f4:	4602      	mov	r2, r0
 80106f6:	693b      	ldr	r3, [r7, #16]
 80106f8:	1ad3      	subs	r3, r2, r3
 80106fa:	2b64      	cmp	r3, #100	; 0x64
 80106fc:	d902      	bls.n	8010704 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80106fe:	2303      	movs	r3, #3
 8010700:	75fb      	strb	r3, [r7, #23]
        break;
 8010702:	e005      	b.n	8010710 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010704:	4b74      	ldr	r3, [pc, #464]	; (80108d8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801070c:	2b00      	cmp	r3, #0
 801070e:	d0ef      	beq.n	80106f0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8010710:	7dfb      	ldrb	r3, [r7, #23]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d166      	bne.n	80107e4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8010716:	4b6f      	ldr	r3, [pc, #444]	; (80108d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8010718:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8010720:	4053      	eors	r3, r2
 8010722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010726:	2b00      	cmp	r3, #0
 8010728:	d013      	beq.n	8010752 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801072a:	4b6a      	ldr	r3, [pc, #424]	; (80108d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801072c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801072e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010732:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8010734:	4b67      	ldr	r3, [pc, #412]	; (80108d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8010736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010738:	4a66      	ldr	r2, [pc, #408]	; (80108d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801073a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801073e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8010740:	4b64      	ldr	r3, [pc, #400]	; (80108d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8010742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010744:	4a63      	ldr	r2, [pc, #396]	; (80108d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8010746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801074a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801074c:	4a61      	ldr	r2, [pc, #388]	; (80108d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8010758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801075c:	d115      	bne.n	801078a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801075e:	f7fb fa87 	bl	800bc70 <HAL_GetTick>
 8010762:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010764:	e00b      	b.n	801077e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010766:	f7fb fa83 	bl	800bc70 <HAL_GetTick>
 801076a:	4602      	mov	r2, r0
 801076c:	693b      	ldr	r3, [r7, #16]
 801076e:	1ad3      	subs	r3, r2, r3
 8010770:	f241 3288 	movw	r2, #5000	; 0x1388
 8010774:	4293      	cmp	r3, r2
 8010776:	d902      	bls.n	801077e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8010778:	2303      	movs	r3, #3
 801077a:	75fb      	strb	r3, [r7, #23]
            break;
 801077c:	e005      	b.n	801078a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801077e:	4b55      	ldr	r3, [pc, #340]	; (80108d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8010780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010782:	f003 0302 	and.w	r3, r3, #2
 8010786:	2b00      	cmp	r3, #0
 8010788:	d0ed      	beq.n	8010766 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 801078a:	7dfb      	ldrb	r3, [r7, #23]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d126      	bne.n	80107de <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8010796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801079a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801079e:	d10d      	bne.n	80107bc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80107a0:	4b4c      	ldr	r3, [pc, #304]	; (80108d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80107a2:	691b      	ldr	r3, [r3, #16]
 80107a4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80107ae:	0919      	lsrs	r1, r3, #4
 80107b0:	4b4a      	ldr	r3, [pc, #296]	; (80108dc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80107b2:	400b      	ands	r3, r1
 80107b4:	4947      	ldr	r1, [pc, #284]	; (80108d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80107b6:	4313      	orrs	r3, r2
 80107b8:	610b      	str	r3, [r1, #16]
 80107ba:	e005      	b.n	80107c8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80107bc:	4b45      	ldr	r3, [pc, #276]	; (80108d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80107be:	691b      	ldr	r3, [r3, #16]
 80107c0:	4a44      	ldr	r2, [pc, #272]	; (80108d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80107c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80107c6:	6113      	str	r3, [r2, #16]
 80107c8:	4b42      	ldr	r3, [pc, #264]	; (80108d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80107ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80107d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80107d6:	493f      	ldr	r1, [pc, #252]	; (80108d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80107d8:	4313      	orrs	r3, r2
 80107da:	670b      	str	r3, [r1, #112]	; 0x70
 80107dc:	e004      	b.n	80107e8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80107de:	7dfb      	ldrb	r3, [r7, #23]
 80107e0:	75bb      	strb	r3, [r7, #22]
 80107e2:	e001      	b.n	80107e8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80107e4:	7dfb      	ldrb	r3, [r7, #23]
 80107e6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	f003 0301 	and.w	r3, r3, #1
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	f000 8085 	beq.w	8010900 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80107fa:	2b28      	cmp	r3, #40	; 0x28
 80107fc:	d866      	bhi.n	80108cc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80107fe:	a201      	add	r2, pc, #4	; (adr r2, 8010804 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8010800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010804:	080108e1 	.word	0x080108e1
 8010808:	080108cd 	.word	0x080108cd
 801080c:	080108cd 	.word	0x080108cd
 8010810:	080108cd 	.word	0x080108cd
 8010814:	080108cd 	.word	0x080108cd
 8010818:	080108cd 	.word	0x080108cd
 801081c:	080108cd 	.word	0x080108cd
 8010820:	080108cd 	.word	0x080108cd
 8010824:	080108a9 	.word	0x080108a9
 8010828:	080108cd 	.word	0x080108cd
 801082c:	080108cd 	.word	0x080108cd
 8010830:	080108cd 	.word	0x080108cd
 8010834:	080108cd 	.word	0x080108cd
 8010838:	080108cd 	.word	0x080108cd
 801083c:	080108cd 	.word	0x080108cd
 8010840:	080108cd 	.word	0x080108cd
 8010844:	080108bb 	.word	0x080108bb
 8010848:	080108cd 	.word	0x080108cd
 801084c:	080108cd 	.word	0x080108cd
 8010850:	080108cd 	.word	0x080108cd
 8010854:	080108cd 	.word	0x080108cd
 8010858:	080108cd 	.word	0x080108cd
 801085c:	080108cd 	.word	0x080108cd
 8010860:	080108cd 	.word	0x080108cd
 8010864:	080108e1 	.word	0x080108e1
 8010868:	080108cd 	.word	0x080108cd
 801086c:	080108cd 	.word	0x080108cd
 8010870:	080108cd 	.word	0x080108cd
 8010874:	080108cd 	.word	0x080108cd
 8010878:	080108cd 	.word	0x080108cd
 801087c:	080108cd 	.word	0x080108cd
 8010880:	080108cd 	.word	0x080108cd
 8010884:	080108e1 	.word	0x080108e1
 8010888:	080108cd 	.word	0x080108cd
 801088c:	080108cd 	.word	0x080108cd
 8010890:	080108cd 	.word	0x080108cd
 8010894:	080108cd 	.word	0x080108cd
 8010898:	080108cd 	.word	0x080108cd
 801089c:	080108cd 	.word	0x080108cd
 80108a0:	080108cd 	.word	0x080108cd
 80108a4:	080108e1 	.word	0x080108e1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	3304      	adds	r3, #4
 80108ac:	2101      	movs	r1, #1
 80108ae:	4618      	mov	r0, r3
 80108b0:	f000 fb3c 	bl	8010f2c <RCCEx_PLL2_Config>
 80108b4:	4603      	mov	r3, r0
 80108b6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80108b8:	e013      	b.n	80108e2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	3324      	adds	r3, #36	; 0x24
 80108be:	2101      	movs	r1, #1
 80108c0:	4618      	mov	r0, r3
 80108c2:	f000 fbe5 	bl	8011090 <RCCEx_PLL3_Config>
 80108c6:	4603      	mov	r3, r0
 80108c8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80108ca:	e00a      	b.n	80108e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80108cc:	2301      	movs	r3, #1
 80108ce:	75fb      	strb	r3, [r7, #23]
      break;
 80108d0:	e007      	b.n	80108e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80108d2:	bf00      	nop
 80108d4:	58024400 	.word	0x58024400
 80108d8:	58024800 	.word	0x58024800
 80108dc:	00ffffcf 	.word	0x00ffffcf
      break;
 80108e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80108e2:	7dfb      	ldrb	r3, [r7, #23]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d109      	bne.n	80108fc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80108e8:	4b96      	ldr	r3, [pc, #600]	; (8010b44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80108ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108ec:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80108f4:	4993      	ldr	r1, [pc, #588]	; (8010b44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80108f6:	4313      	orrs	r3, r2
 80108f8:	654b      	str	r3, [r1, #84]	; 0x54
 80108fa:	e001      	b.n	8010900 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80108fc:	7dfb      	ldrb	r3, [r7, #23]
 80108fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	f003 0302 	and.w	r3, r3, #2
 8010908:	2b00      	cmp	r3, #0
 801090a:	d038      	beq.n	801097e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010910:	2b05      	cmp	r3, #5
 8010912:	d821      	bhi.n	8010958 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8010914:	a201      	add	r2, pc, #4	; (adr r2, 801091c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8010916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801091a:	bf00      	nop
 801091c:	0801095f 	.word	0x0801095f
 8010920:	08010935 	.word	0x08010935
 8010924:	08010947 	.word	0x08010947
 8010928:	0801095f 	.word	0x0801095f
 801092c:	0801095f 	.word	0x0801095f
 8010930:	0801095f 	.word	0x0801095f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	3304      	adds	r3, #4
 8010938:	2101      	movs	r1, #1
 801093a:	4618      	mov	r0, r3
 801093c:	f000 faf6 	bl	8010f2c <RCCEx_PLL2_Config>
 8010940:	4603      	mov	r3, r0
 8010942:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8010944:	e00c      	b.n	8010960 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	3324      	adds	r3, #36	; 0x24
 801094a:	2101      	movs	r1, #1
 801094c:	4618      	mov	r0, r3
 801094e:	f000 fb9f 	bl	8011090 <RCCEx_PLL3_Config>
 8010952:	4603      	mov	r3, r0
 8010954:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8010956:	e003      	b.n	8010960 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010958:	2301      	movs	r3, #1
 801095a:	75fb      	strb	r3, [r7, #23]
      break;
 801095c:	e000      	b.n	8010960 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 801095e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010960:	7dfb      	ldrb	r3, [r7, #23]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d109      	bne.n	801097a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8010966:	4b77      	ldr	r3, [pc, #476]	; (8010b44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8010968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801096a:	f023 0207 	bic.w	r2, r3, #7
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010972:	4974      	ldr	r1, [pc, #464]	; (8010b44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8010974:	4313      	orrs	r3, r2
 8010976:	654b      	str	r3, [r1, #84]	; 0x54
 8010978:	e001      	b.n	801097e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801097a:	7dfb      	ldrb	r3, [r7, #23]
 801097c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	f003 0304 	and.w	r3, r3, #4
 8010986:	2b00      	cmp	r3, #0
 8010988:	d03a      	beq.n	8010a00 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010990:	2b05      	cmp	r3, #5
 8010992:	d821      	bhi.n	80109d8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8010994:	a201      	add	r2, pc, #4	; (adr r2, 801099c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8010996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801099a:	bf00      	nop
 801099c:	080109df 	.word	0x080109df
 80109a0:	080109b5 	.word	0x080109b5
 80109a4:	080109c7 	.word	0x080109c7
 80109a8:	080109df 	.word	0x080109df
 80109ac:	080109df 	.word	0x080109df
 80109b0:	080109df 	.word	0x080109df
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	3304      	adds	r3, #4
 80109b8:	2101      	movs	r1, #1
 80109ba:	4618      	mov	r0, r3
 80109bc:	f000 fab6 	bl	8010f2c <RCCEx_PLL2_Config>
 80109c0:	4603      	mov	r3, r0
 80109c2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80109c4:	e00c      	b.n	80109e0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	3324      	adds	r3, #36	; 0x24
 80109ca:	2101      	movs	r1, #1
 80109cc:	4618      	mov	r0, r3
 80109ce:	f000 fb5f 	bl	8011090 <RCCEx_PLL3_Config>
 80109d2:	4603      	mov	r3, r0
 80109d4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80109d6:	e003      	b.n	80109e0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80109d8:	2301      	movs	r3, #1
 80109da:	75fb      	strb	r3, [r7, #23]
      break;
 80109dc:	e000      	b.n	80109e0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80109de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80109e0:	7dfb      	ldrb	r3, [r7, #23]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d10a      	bne.n	80109fc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80109e6:	4b57      	ldr	r3, [pc, #348]	; (8010b44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80109e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80109ea:	f023 0207 	bic.w	r2, r3, #7
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80109f4:	4953      	ldr	r1, [pc, #332]	; (8010b44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80109f6:	4313      	orrs	r3, r2
 80109f8:	658b      	str	r3, [r1, #88]	; 0x58
 80109fa:	e001      	b.n	8010a00 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80109fc:	7dfb      	ldrb	r3, [r7, #23]
 80109fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	f003 0320 	and.w	r3, r3, #32
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d04b      	beq.n	8010aa4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010a12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010a16:	d02e      	beq.n	8010a76 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8010a18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010a1c:	d828      	bhi.n	8010a70 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8010a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010a22:	d02a      	beq.n	8010a7a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8010a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010a28:	d822      	bhi.n	8010a70 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8010a2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010a2e:	d026      	beq.n	8010a7e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8010a30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010a34:	d81c      	bhi.n	8010a70 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8010a36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010a3a:	d010      	beq.n	8010a5e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8010a3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010a40:	d816      	bhi.n	8010a70 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d01d      	beq.n	8010a82 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8010a46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010a4a:	d111      	bne.n	8010a70 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	3304      	adds	r3, #4
 8010a50:	2100      	movs	r1, #0
 8010a52:	4618      	mov	r0, r3
 8010a54:	f000 fa6a 	bl	8010f2c <RCCEx_PLL2_Config>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8010a5c:	e012      	b.n	8010a84 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	3324      	adds	r3, #36	; 0x24
 8010a62:	2102      	movs	r1, #2
 8010a64:	4618      	mov	r0, r3
 8010a66:	f000 fb13 	bl	8011090 <RCCEx_PLL3_Config>
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8010a6e:	e009      	b.n	8010a84 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010a70:	2301      	movs	r3, #1
 8010a72:	75fb      	strb	r3, [r7, #23]
      break;
 8010a74:	e006      	b.n	8010a84 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8010a76:	bf00      	nop
 8010a78:	e004      	b.n	8010a84 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8010a7a:	bf00      	nop
 8010a7c:	e002      	b.n	8010a84 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8010a7e:	bf00      	nop
 8010a80:	e000      	b.n	8010a84 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8010a82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010a84:	7dfb      	ldrb	r3, [r7, #23]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d10a      	bne.n	8010aa0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8010a8a:	4b2e      	ldr	r3, [pc, #184]	; (8010b44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8010a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a8e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010a98:	492a      	ldr	r1, [pc, #168]	; (8010b44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8010a9a:	4313      	orrs	r3, r2
 8010a9c:	654b      	str	r3, [r1, #84]	; 0x54
 8010a9e:	e001      	b.n	8010aa4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010aa0:	7dfb      	ldrb	r3, [r7, #23]
 8010aa2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d04d      	beq.n	8010b4c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010ab6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8010aba:	d02e      	beq.n	8010b1a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8010abc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8010ac0:	d828      	bhi.n	8010b14 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8010ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ac6:	d02a      	beq.n	8010b1e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8010ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010acc:	d822      	bhi.n	8010b14 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8010ace:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010ad2:	d026      	beq.n	8010b22 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8010ad4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010ad8:	d81c      	bhi.n	8010b14 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8010ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010ade:	d010      	beq.n	8010b02 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8010ae0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010ae4:	d816      	bhi.n	8010b14 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d01d      	beq.n	8010b26 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8010aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010aee:	d111      	bne.n	8010b14 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	3304      	adds	r3, #4
 8010af4:	2100      	movs	r1, #0
 8010af6:	4618      	mov	r0, r3
 8010af8:	f000 fa18 	bl	8010f2c <RCCEx_PLL2_Config>
 8010afc:	4603      	mov	r3, r0
 8010afe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8010b00:	e012      	b.n	8010b28 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	3324      	adds	r3, #36	; 0x24
 8010b06:	2102      	movs	r1, #2
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f000 fac1 	bl	8011090 <RCCEx_PLL3_Config>
 8010b0e:	4603      	mov	r3, r0
 8010b10:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8010b12:	e009      	b.n	8010b28 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010b14:	2301      	movs	r3, #1
 8010b16:	75fb      	strb	r3, [r7, #23]
      break;
 8010b18:	e006      	b.n	8010b28 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8010b1a:	bf00      	nop
 8010b1c:	e004      	b.n	8010b28 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8010b1e:	bf00      	nop
 8010b20:	e002      	b.n	8010b28 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8010b22:	bf00      	nop
 8010b24:	e000      	b.n	8010b28 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8010b26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010b28:	7dfb      	ldrb	r3, [r7, #23]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d10c      	bne.n	8010b48 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8010b2e:	4b05      	ldr	r3, [pc, #20]	; (8010b44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8010b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b32:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010b3c:	4901      	ldr	r1, [pc, #4]	; (8010b44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8010b3e:	4313      	orrs	r3, r2
 8010b40:	658b      	str	r3, [r1, #88]	; 0x58
 8010b42:	e003      	b.n	8010b4c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8010b44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010b48:	7dfb      	ldrb	r3, [r7, #23]
 8010b4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d04b      	beq.n	8010bf0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010b5e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8010b62:	d02e      	beq.n	8010bc2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8010b64:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8010b68:	d828      	bhi.n	8010bbc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8010b6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010b6e:	d02a      	beq.n	8010bc6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8010b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010b74:	d822      	bhi.n	8010bbc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8010b76:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8010b7a:	d026      	beq.n	8010bca <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8010b7c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8010b80:	d81c      	bhi.n	8010bbc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8010b82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010b86:	d010      	beq.n	8010baa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8010b88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010b8c:	d816      	bhi.n	8010bbc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d01d      	beq.n	8010bce <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8010b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010b96:	d111      	bne.n	8010bbc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	3304      	adds	r3, #4
 8010b9c:	2100      	movs	r1, #0
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f000 f9c4 	bl	8010f2c <RCCEx_PLL2_Config>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8010ba8:	e012      	b.n	8010bd0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	3324      	adds	r3, #36	; 0x24
 8010bae:	2102      	movs	r1, #2
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	f000 fa6d 	bl	8011090 <RCCEx_PLL3_Config>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8010bba:	e009      	b.n	8010bd0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8010bc0:	e006      	b.n	8010bd0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8010bc2:	bf00      	nop
 8010bc4:	e004      	b.n	8010bd0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8010bc6:	bf00      	nop
 8010bc8:	e002      	b.n	8010bd0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8010bca:	bf00      	nop
 8010bcc:	e000      	b.n	8010bd0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8010bce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010bd0:	7dfb      	ldrb	r3, [r7, #23]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d10a      	bne.n	8010bec <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8010bd6:	4b9d      	ldr	r3, [pc, #628]	; (8010e4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010bda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010be4:	4999      	ldr	r1, [pc, #612]	; (8010e4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010be6:	4313      	orrs	r3, r2
 8010be8:	658b      	str	r3, [r1, #88]	; 0x58
 8010bea:	e001      	b.n	8010bf0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010bec:	7dfb      	ldrb	r3, [r7, #23]
 8010bee:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	f003 0308 	and.w	r3, r3, #8
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d01a      	beq.n	8010c32 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010c06:	d10a      	bne.n	8010c1e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	3324      	adds	r3, #36	; 0x24
 8010c0c:	2102      	movs	r1, #2
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f000 fa3e 	bl	8011090 <RCCEx_PLL3_Config>
 8010c14:	4603      	mov	r3, r0
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d001      	beq.n	8010c1e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8010c1a:	2301      	movs	r3, #1
 8010c1c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8010c1e:	4b8b      	ldr	r3, [pc, #556]	; (8010e4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c2c:	4987      	ldr	r1, [pc, #540]	; (8010e4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010c2e:	4313      	orrs	r3, r2
 8010c30:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	f003 0310 	and.w	r3, r3, #16
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d01a      	beq.n	8010c74 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c48:	d10a      	bne.n	8010c60 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	3324      	adds	r3, #36	; 0x24
 8010c4e:	2102      	movs	r1, #2
 8010c50:	4618      	mov	r0, r3
 8010c52:	f000 fa1d 	bl	8011090 <RCCEx_PLL3_Config>
 8010c56:	4603      	mov	r3, r0
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d001      	beq.n	8010c60 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8010c5c:	2301      	movs	r3, #1
 8010c5e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8010c60:	4b7a      	ldr	r3, [pc, #488]	; (8010e4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010c6e:	4977      	ldr	r1, [pc, #476]	; (8010e4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010c70:	4313      	orrs	r3, r2
 8010c72:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d034      	beq.n	8010cea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010c86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010c8a:	d01d      	beq.n	8010cc8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8010c8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010c90:	d817      	bhi.n	8010cc2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d003      	beq.n	8010c9e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8010c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c9a:	d009      	beq.n	8010cb0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8010c9c:	e011      	b.n	8010cc2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	3304      	adds	r3, #4
 8010ca2:	2100      	movs	r1, #0
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	f000 f941 	bl	8010f2c <RCCEx_PLL2_Config>
 8010caa:	4603      	mov	r3, r0
 8010cac:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8010cae:	e00c      	b.n	8010cca <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	3324      	adds	r3, #36	; 0x24
 8010cb4:	2102      	movs	r1, #2
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	f000 f9ea 	bl	8011090 <RCCEx_PLL3_Config>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8010cc0:	e003      	b.n	8010cca <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	75fb      	strb	r3, [r7, #23]
      break;
 8010cc6:	e000      	b.n	8010cca <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8010cc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010cca:	7dfb      	ldrb	r3, [r7, #23]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d10a      	bne.n	8010ce6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010cd0:	4b5e      	ldr	r3, [pc, #376]	; (8010e4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010cd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010cde:	495b      	ldr	r1, [pc, #364]	; (8010e4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010ce0:	4313      	orrs	r3, r2
 8010ce2:	658b      	str	r3, [r1, #88]	; 0x58
 8010ce4:	e001      	b.n	8010cea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010ce6:	7dfb      	ldrb	r3, [r7, #23]
 8010ce8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d033      	beq.n	8010d5e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010cfc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010d00:	d01c      	beq.n	8010d3c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8010d02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010d06:	d816      	bhi.n	8010d36 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8010d08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010d0c:	d003      	beq.n	8010d16 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8010d0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010d12:	d007      	beq.n	8010d24 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8010d14:	e00f      	b.n	8010d36 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010d16:	4b4d      	ldr	r3, [pc, #308]	; (8010e4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d1a:	4a4c      	ldr	r2, [pc, #304]	; (8010e4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010d20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8010d22:	e00c      	b.n	8010d3e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	3324      	adds	r3, #36	; 0x24
 8010d28:	2101      	movs	r1, #1
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	f000 f9b0 	bl	8011090 <RCCEx_PLL3_Config>
 8010d30:	4603      	mov	r3, r0
 8010d32:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8010d34:	e003      	b.n	8010d3e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010d36:	2301      	movs	r3, #1
 8010d38:	75fb      	strb	r3, [r7, #23]
      break;
 8010d3a:	e000      	b.n	8010d3e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8010d3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010d3e:	7dfb      	ldrb	r3, [r7, #23]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d10a      	bne.n	8010d5a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010d44:	4b41      	ldr	r3, [pc, #260]	; (8010e4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010d52:	493e      	ldr	r1, [pc, #248]	; (8010e4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010d54:	4313      	orrs	r3, r2
 8010d56:	654b      	str	r3, [r1, #84]	; 0x54
 8010d58:	e001      	b.n	8010d5e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010d5a:	7dfb      	ldrb	r3, [r7, #23]
 8010d5c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d029      	beq.n	8010dbe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d003      	beq.n	8010d7a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8010d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010d76:	d007      	beq.n	8010d88 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8010d78:	e00f      	b.n	8010d9a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010d7a:	4b34      	ldr	r3, [pc, #208]	; (8010e4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d7e:	4a33      	ldr	r2, [pc, #204]	; (8010e4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010d84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8010d86:	e00b      	b.n	8010da0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	3304      	adds	r3, #4
 8010d8c:	2102      	movs	r1, #2
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f000 f8cc 	bl	8010f2c <RCCEx_PLL2_Config>
 8010d94:	4603      	mov	r3, r0
 8010d96:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8010d98:	e002      	b.n	8010da0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8010d9a:	2301      	movs	r3, #1
 8010d9c:	75fb      	strb	r3, [r7, #23]
      break;
 8010d9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010da0:	7dfb      	ldrb	r3, [r7, #23]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d109      	bne.n	8010dba <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8010da6:	4b29      	ldr	r3, [pc, #164]	; (8010e4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010daa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010db2:	4926      	ldr	r1, [pc, #152]	; (8010e4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010db4:	4313      	orrs	r3, r2
 8010db6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8010db8:	e001      	b.n	8010dbe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010dba:	7dfb      	ldrb	r3, [r7, #23]
 8010dbc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d00a      	beq.n	8010de0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	3324      	adds	r3, #36	; 0x24
 8010dce:	2102      	movs	r1, #2
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	f000 f95d 	bl	8011090 <RCCEx_PLL3_Config>
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d001      	beq.n	8010de0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8010ddc:	2301      	movs	r3, #1
 8010dde:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d033      	beq.n	8010e54 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010df0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010df4:	d017      	beq.n	8010e26 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8010df6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010dfa:	d811      	bhi.n	8010e20 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8010dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010e00:	d013      	beq.n	8010e2a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8010e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010e06:	d80b      	bhi.n	8010e20 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d010      	beq.n	8010e2e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8010e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010e10:	d106      	bne.n	8010e20 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010e12:	4b0e      	ldr	r3, [pc, #56]	; (8010e4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e16:	4a0d      	ldr	r2, [pc, #52]	; (8010e4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010e1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8010e1e:	e007      	b.n	8010e30 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010e20:	2301      	movs	r3, #1
 8010e22:	75fb      	strb	r3, [r7, #23]
      break;
 8010e24:	e004      	b.n	8010e30 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8010e26:	bf00      	nop
 8010e28:	e002      	b.n	8010e30 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8010e2a:	bf00      	nop
 8010e2c:	e000      	b.n	8010e30 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8010e2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010e30:	7dfb      	ldrb	r3, [r7, #23]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d10c      	bne.n	8010e50 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010e36:	4b05      	ldr	r3, [pc, #20]	; (8010e4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010e42:	4902      	ldr	r1, [pc, #8]	; (8010e4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8010e44:	4313      	orrs	r3, r2
 8010e46:	654b      	str	r3, [r1, #84]	; 0x54
 8010e48:	e004      	b.n	8010e54 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8010e4a:	bf00      	nop
 8010e4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010e50:	7dfb      	ldrb	r3, [r7, #23]
 8010e52:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d008      	beq.n	8010e72 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8010e60:	4b31      	ldr	r3, [pc, #196]	; (8010f28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8010e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e6c:	492e      	ldr	r1, [pc, #184]	; (8010f28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8010e6e:	4313      	orrs	r3, r2
 8010e70:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d009      	beq.n	8010e92 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8010e7e:	4b2a      	ldr	r3, [pc, #168]	; (8010f28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8010e80:	691b      	ldr	r3, [r3, #16]
 8010e82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010e8c:	4926      	ldr	r1, [pc, #152]	; (8010f28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8010e8e:	4313      	orrs	r3, r2
 8010e90:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d008      	beq.n	8010eb0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8010e9e:	4b22      	ldr	r3, [pc, #136]	; (8010f28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8010ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ea2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010eaa:	491f      	ldr	r1, [pc, #124]	; (8010f28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8010eac:	4313      	orrs	r3, r2
 8010eae:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d00d      	beq.n	8010ed8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8010ebc:	4b1a      	ldr	r3, [pc, #104]	; (8010f28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8010ebe:	691b      	ldr	r3, [r3, #16]
 8010ec0:	4a19      	ldr	r2, [pc, #100]	; (8010f28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8010ec2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8010ec6:	6113      	str	r3, [r2, #16]
 8010ec8:	4b17      	ldr	r3, [pc, #92]	; (8010f28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8010eca:	691a      	ldr	r2, [r3, #16]
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8010ed2:	4915      	ldr	r1, [pc, #84]	; (8010f28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8010ed4:	4313      	orrs	r3, r2
 8010ed6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	da08      	bge.n	8010ef2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8010ee0:	4b11      	ldr	r3, [pc, #68]	; (8010f28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8010ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010ee4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010eec:	490e      	ldr	r1, [pc, #56]	; (8010f28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8010eee:	4313      	orrs	r3, r2
 8010ef0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d009      	beq.n	8010f12 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8010efe:	4b0a      	ldr	r3, [pc, #40]	; (8010f28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8010f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010f0c:	4906      	ldr	r1, [pc, #24]	; (8010f28 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8010f0e:	4313      	orrs	r3, r2
 8010f10:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8010f12:	7dbb      	ldrb	r3, [r7, #22]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d101      	bne.n	8010f1c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8010f18:	2300      	movs	r3, #0
 8010f1a:	e000      	b.n	8010f1e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8010f1c:	2301      	movs	r3, #1
}
 8010f1e:	4618      	mov	r0, r3
 8010f20:	3718      	adds	r7, #24
 8010f22:	46bd      	mov	sp, r7
 8010f24:	bd80      	pop	{r7, pc}
 8010f26:	bf00      	nop
 8010f28:	58024400 	.word	0x58024400

08010f2c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b084      	sub	sp, #16
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
 8010f34:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010f36:	2300      	movs	r3, #0
 8010f38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010f3a:	4b53      	ldr	r3, [pc, #332]	; (8011088 <RCCEx_PLL2_Config+0x15c>)
 8010f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f3e:	f003 0303 	and.w	r3, r3, #3
 8010f42:	2b03      	cmp	r3, #3
 8010f44:	d101      	bne.n	8010f4a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8010f46:	2301      	movs	r3, #1
 8010f48:	e099      	b.n	801107e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8010f4a:	4b4f      	ldr	r3, [pc, #316]	; (8011088 <RCCEx_PLL2_Config+0x15c>)
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	4a4e      	ldr	r2, [pc, #312]	; (8011088 <RCCEx_PLL2_Config+0x15c>)
 8010f50:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010f54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010f56:	f7fa fe8b 	bl	800bc70 <HAL_GetTick>
 8010f5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010f5c:	e008      	b.n	8010f70 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8010f5e:	f7fa fe87 	bl	800bc70 <HAL_GetTick>
 8010f62:	4602      	mov	r2, r0
 8010f64:	68bb      	ldr	r3, [r7, #8]
 8010f66:	1ad3      	subs	r3, r2, r3
 8010f68:	2b02      	cmp	r3, #2
 8010f6a:	d901      	bls.n	8010f70 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010f6c:	2303      	movs	r3, #3
 8010f6e:	e086      	b.n	801107e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010f70:	4b45      	ldr	r3, [pc, #276]	; (8011088 <RCCEx_PLL2_Config+0x15c>)
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d1f0      	bne.n	8010f5e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8010f7c:	4b42      	ldr	r3, [pc, #264]	; (8011088 <RCCEx_PLL2_Config+0x15c>)
 8010f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f80:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	031b      	lsls	r3, r3, #12
 8010f8a:	493f      	ldr	r1, [pc, #252]	; (8011088 <RCCEx_PLL2_Config+0x15c>)
 8010f8c:	4313      	orrs	r3, r2
 8010f8e:	628b      	str	r3, [r1, #40]	; 0x28
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	685b      	ldr	r3, [r3, #4]
 8010f94:	3b01      	subs	r3, #1
 8010f96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	689b      	ldr	r3, [r3, #8]
 8010f9e:	3b01      	subs	r3, #1
 8010fa0:	025b      	lsls	r3, r3, #9
 8010fa2:	b29b      	uxth	r3, r3
 8010fa4:	431a      	orrs	r2, r3
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	68db      	ldr	r3, [r3, #12]
 8010faa:	3b01      	subs	r3, #1
 8010fac:	041b      	lsls	r3, r3, #16
 8010fae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8010fb2:	431a      	orrs	r2, r3
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	691b      	ldr	r3, [r3, #16]
 8010fb8:	3b01      	subs	r3, #1
 8010fba:	061b      	lsls	r3, r3, #24
 8010fbc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010fc0:	4931      	ldr	r1, [pc, #196]	; (8011088 <RCCEx_PLL2_Config+0x15c>)
 8010fc2:	4313      	orrs	r3, r2
 8010fc4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8010fc6:	4b30      	ldr	r3, [pc, #192]	; (8011088 <RCCEx_PLL2_Config+0x15c>)
 8010fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	695b      	ldr	r3, [r3, #20]
 8010fd2:	492d      	ldr	r1, [pc, #180]	; (8011088 <RCCEx_PLL2_Config+0x15c>)
 8010fd4:	4313      	orrs	r3, r2
 8010fd6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8010fd8:	4b2b      	ldr	r3, [pc, #172]	; (8011088 <RCCEx_PLL2_Config+0x15c>)
 8010fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fdc:	f023 0220 	bic.w	r2, r3, #32
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	699b      	ldr	r3, [r3, #24]
 8010fe4:	4928      	ldr	r1, [pc, #160]	; (8011088 <RCCEx_PLL2_Config+0x15c>)
 8010fe6:	4313      	orrs	r3, r2
 8010fe8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8010fea:	4b27      	ldr	r3, [pc, #156]	; (8011088 <RCCEx_PLL2_Config+0x15c>)
 8010fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fee:	4a26      	ldr	r2, [pc, #152]	; (8011088 <RCCEx_PLL2_Config+0x15c>)
 8010ff0:	f023 0310 	bic.w	r3, r3, #16
 8010ff4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8010ff6:	4b24      	ldr	r3, [pc, #144]	; (8011088 <RCCEx_PLL2_Config+0x15c>)
 8010ff8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010ffa:	4b24      	ldr	r3, [pc, #144]	; (801108c <RCCEx_PLL2_Config+0x160>)
 8010ffc:	4013      	ands	r3, r2
 8010ffe:	687a      	ldr	r2, [r7, #4]
 8011000:	69d2      	ldr	r2, [r2, #28]
 8011002:	00d2      	lsls	r2, r2, #3
 8011004:	4920      	ldr	r1, [pc, #128]	; (8011088 <RCCEx_PLL2_Config+0x15c>)
 8011006:	4313      	orrs	r3, r2
 8011008:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801100a:	4b1f      	ldr	r3, [pc, #124]	; (8011088 <RCCEx_PLL2_Config+0x15c>)
 801100c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801100e:	4a1e      	ldr	r2, [pc, #120]	; (8011088 <RCCEx_PLL2_Config+0x15c>)
 8011010:	f043 0310 	orr.w	r3, r3, #16
 8011014:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8011016:	683b      	ldr	r3, [r7, #0]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d106      	bne.n	801102a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801101c:	4b1a      	ldr	r3, [pc, #104]	; (8011088 <RCCEx_PLL2_Config+0x15c>)
 801101e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011020:	4a19      	ldr	r2, [pc, #100]	; (8011088 <RCCEx_PLL2_Config+0x15c>)
 8011022:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011026:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011028:	e00f      	b.n	801104a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 801102a:	683b      	ldr	r3, [r7, #0]
 801102c:	2b01      	cmp	r3, #1
 801102e:	d106      	bne.n	801103e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8011030:	4b15      	ldr	r3, [pc, #84]	; (8011088 <RCCEx_PLL2_Config+0x15c>)
 8011032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011034:	4a14      	ldr	r2, [pc, #80]	; (8011088 <RCCEx_PLL2_Config+0x15c>)
 8011036:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801103a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801103c:	e005      	b.n	801104a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801103e:	4b12      	ldr	r3, [pc, #72]	; (8011088 <RCCEx_PLL2_Config+0x15c>)
 8011040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011042:	4a11      	ldr	r2, [pc, #68]	; (8011088 <RCCEx_PLL2_Config+0x15c>)
 8011044:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011048:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801104a:	4b0f      	ldr	r3, [pc, #60]	; (8011088 <RCCEx_PLL2_Config+0x15c>)
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	4a0e      	ldr	r2, [pc, #56]	; (8011088 <RCCEx_PLL2_Config+0x15c>)
 8011050:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011054:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011056:	f7fa fe0b 	bl	800bc70 <HAL_GetTick>
 801105a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801105c:	e008      	b.n	8011070 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 801105e:	f7fa fe07 	bl	800bc70 <HAL_GetTick>
 8011062:	4602      	mov	r2, r0
 8011064:	68bb      	ldr	r3, [r7, #8]
 8011066:	1ad3      	subs	r3, r2, r3
 8011068:	2b02      	cmp	r3, #2
 801106a:	d901      	bls.n	8011070 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801106c:	2303      	movs	r3, #3
 801106e:	e006      	b.n	801107e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011070:	4b05      	ldr	r3, [pc, #20]	; (8011088 <RCCEx_PLL2_Config+0x15c>)
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011078:	2b00      	cmp	r3, #0
 801107a:	d0f0      	beq.n	801105e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801107c:	7bfb      	ldrb	r3, [r7, #15]
}
 801107e:	4618      	mov	r0, r3
 8011080:	3710      	adds	r7, #16
 8011082:	46bd      	mov	sp, r7
 8011084:	bd80      	pop	{r7, pc}
 8011086:	bf00      	nop
 8011088:	58024400 	.word	0x58024400
 801108c:	ffff0007 	.word	0xffff0007

08011090 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8011090:	b580      	push	{r7, lr}
 8011092:	b084      	sub	sp, #16
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
 8011098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801109a:	2300      	movs	r3, #0
 801109c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801109e:	4b53      	ldr	r3, [pc, #332]	; (80111ec <RCCEx_PLL3_Config+0x15c>)
 80110a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110a2:	f003 0303 	and.w	r3, r3, #3
 80110a6:	2b03      	cmp	r3, #3
 80110a8:	d101      	bne.n	80110ae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80110aa:	2301      	movs	r3, #1
 80110ac:	e099      	b.n	80111e2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80110ae:	4b4f      	ldr	r3, [pc, #316]	; (80111ec <RCCEx_PLL3_Config+0x15c>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	4a4e      	ldr	r2, [pc, #312]	; (80111ec <RCCEx_PLL3_Config+0x15c>)
 80110b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80110b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80110ba:	f7fa fdd9 	bl	800bc70 <HAL_GetTick>
 80110be:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80110c0:	e008      	b.n	80110d4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80110c2:	f7fa fdd5 	bl	800bc70 <HAL_GetTick>
 80110c6:	4602      	mov	r2, r0
 80110c8:	68bb      	ldr	r3, [r7, #8]
 80110ca:	1ad3      	subs	r3, r2, r3
 80110cc:	2b02      	cmp	r3, #2
 80110ce:	d901      	bls.n	80110d4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80110d0:	2303      	movs	r3, #3
 80110d2:	e086      	b.n	80111e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80110d4:	4b45      	ldr	r3, [pc, #276]	; (80111ec <RCCEx_PLL3_Config+0x15c>)
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d1f0      	bne.n	80110c2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80110e0:	4b42      	ldr	r3, [pc, #264]	; (80111ec <RCCEx_PLL3_Config+0x15c>)
 80110e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110e4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	051b      	lsls	r3, r3, #20
 80110ee:	493f      	ldr	r1, [pc, #252]	; (80111ec <RCCEx_PLL3_Config+0x15c>)
 80110f0:	4313      	orrs	r3, r2
 80110f2:	628b      	str	r3, [r1, #40]	; 0x28
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	685b      	ldr	r3, [r3, #4]
 80110f8:	3b01      	subs	r3, #1
 80110fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	689b      	ldr	r3, [r3, #8]
 8011102:	3b01      	subs	r3, #1
 8011104:	025b      	lsls	r3, r3, #9
 8011106:	b29b      	uxth	r3, r3
 8011108:	431a      	orrs	r2, r3
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	68db      	ldr	r3, [r3, #12]
 801110e:	3b01      	subs	r3, #1
 8011110:	041b      	lsls	r3, r3, #16
 8011112:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8011116:	431a      	orrs	r2, r3
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	691b      	ldr	r3, [r3, #16]
 801111c:	3b01      	subs	r3, #1
 801111e:	061b      	lsls	r3, r3, #24
 8011120:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011124:	4931      	ldr	r1, [pc, #196]	; (80111ec <RCCEx_PLL3_Config+0x15c>)
 8011126:	4313      	orrs	r3, r2
 8011128:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801112a:	4b30      	ldr	r3, [pc, #192]	; (80111ec <RCCEx_PLL3_Config+0x15c>)
 801112c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801112e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	695b      	ldr	r3, [r3, #20]
 8011136:	492d      	ldr	r1, [pc, #180]	; (80111ec <RCCEx_PLL3_Config+0x15c>)
 8011138:	4313      	orrs	r3, r2
 801113a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801113c:	4b2b      	ldr	r3, [pc, #172]	; (80111ec <RCCEx_PLL3_Config+0x15c>)
 801113e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011140:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	699b      	ldr	r3, [r3, #24]
 8011148:	4928      	ldr	r1, [pc, #160]	; (80111ec <RCCEx_PLL3_Config+0x15c>)
 801114a:	4313      	orrs	r3, r2
 801114c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801114e:	4b27      	ldr	r3, [pc, #156]	; (80111ec <RCCEx_PLL3_Config+0x15c>)
 8011150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011152:	4a26      	ldr	r2, [pc, #152]	; (80111ec <RCCEx_PLL3_Config+0x15c>)
 8011154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011158:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801115a:	4b24      	ldr	r3, [pc, #144]	; (80111ec <RCCEx_PLL3_Config+0x15c>)
 801115c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801115e:	4b24      	ldr	r3, [pc, #144]	; (80111f0 <RCCEx_PLL3_Config+0x160>)
 8011160:	4013      	ands	r3, r2
 8011162:	687a      	ldr	r2, [r7, #4]
 8011164:	69d2      	ldr	r2, [r2, #28]
 8011166:	00d2      	lsls	r2, r2, #3
 8011168:	4920      	ldr	r1, [pc, #128]	; (80111ec <RCCEx_PLL3_Config+0x15c>)
 801116a:	4313      	orrs	r3, r2
 801116c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801116e:	4b1f      	ldr	r3, [pc, #124]	; (80111ec <RCCEx_PLL3_Config+0x15c>)
 8011170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011172:	4a1e      	ldr	r2, [pc, #120]	; (80111ec <RCCEx_PLL3_Config+0x15c>)
 8011174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011178:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 801117a:	683b      	ldr	r3, [r7, #0]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d106      	bne.n	801118e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8011180:	4b1a      	ldr	r3, [pc, #104]	; (80111ec <RCCEx_PLL3_Config+0x15c>)
 8011182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011184:	4a19      	ldr	r2, [pc, #100]	; (80111ec <RCCEx_PLL3_Config+0x15c>)
 8011186:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801118a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801118c:	e00f      	b.n	80111ae <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 801118e:	683b      	ldr	r3, [r7, #0]
 8011190:	2b01      	cmp	r3, #1
 8011192:	d106      	bne.n	80111a2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8011194:	4b15      	ldr	r3, [pc, #84]	; (80111ec <RCCEx_PLL3_Config+0x15c>)
 8011196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011198:	4a14      	ldr	r2, [pc, #80]	; (80111ec <RCCEx_PLL3_Config+0x15c>)
 801119a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801119e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80111a0:	e005      	b.n	80111ae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80111a2:	4b12      	ldr	r3, [pc, #72]	; (80111ec <RCCEx_PLL3_Config+0x15c>)
 80111a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111a6:	4a11      	ldr	r2, [pc, #68]	; (80111ec <RCCEx_PLL3_Config+0x15c>)
 80111a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80111ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80111ae:	4b0f      	ldr	r3, [pc, #60]	; (80111ec <RCCEx_PLL3_Config+0x15c>)
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	4a0e      	ldr	r2, [pc, #56]	; (80111ec <RCCEx_PLL3_Config+0x15c>)
 80111b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80111b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80111ba:	f7fa fd59 	bl	800bc70 <HAL_GetTick>
 80111be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80111c0:	e008      	b.n	80111d4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80111c2:	f7fa fd55 	bl	800bc70 <HAL_GetTick>
 80111c6:	4602      	mov	r2, r0
 80111c8:	68bb      	ldr	r3, [r7, #8]
 80111ca:	1ad3      	subs	r3, r2, r3
 80111cc:	2b02      	cmp	r3, #2
 80111ce:	d901      	bls.n	80111d4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80111d0:	2303      	movs	r3, #3
 80111d2:	e006      	b.n	80111e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80111d4:	4b05      	ldr	r3, [pc, #20]	; (80111ec <RCCEx_PLL3_Config+0x15c>)
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d0f0      	beq.n	80111c2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80111e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80111e2:	4618      	mov	r0, r3
 80111e4:	3710      	adds	r7, #16
 80111e6:	46bd      	mov	sp, r7
 80111e8:	bd80      	pop	{r7, pc}
 80111ea:	bf00      	nop
 80111ec:	58024400 	.word	0x58024400
 80111f0:	ffff0007 	.word	0xffff0007

080111f4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b082      	sub	sp, #8
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
 80111fc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d101      	bne.n	8011208 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8011204:	2301      	movs	r3, #1
 8011206:	e02b      	b.n	8011260 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801120e:	b2db      	uxtb	r3, r3
 8011210:	2b00      	cmp	r3, #0
 8011212:	d106      	bne.n	8011222 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	2200      	movs	r2, #0
 8011218:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 801121c:	6878      	ldr	r0, [r7, #4]
 801121e:	f7f3 fc7f 	bl	8004b20 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	2202      	movs	r2, #2
 8011226:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	681a      	ldr	r2, [r3, #0]
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	3304      	adds	r3, #4
 8011232:	4619      	mov	r1, r3
 8011234:	4610      	mov	r0, r2
 8011236:	f000 fb6b 	bl	8011910 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	6818      	ldr	r0, [r3, #0]
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	685b      	ldr	r3, [r3, #4]
 8011242:	461a      	mov	r2, r3
 8011244:	6839      	ldr	r1, [r7, #0]
 8011246:	f000 fbbf 	bl	80119c8 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 801124a:	4b07      	ldr	r3, [pc, #28]	; (8011268 <HAL_SDRAM_Init+0x74>)
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	4a06      	ldr	r2, [pc, #24]	; (8011268 <HAL_SDRAM_Init+0x74>)
 8011250:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011254:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	2201      	movs	r2, #1
 801125a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801125e:	2300      	movs	r3, #0
}
 8011260:	4618      	mov	r0, r3
 8011262:	3708      	adds	r7, #8
 8011264:	46bd      	mov	sp, r7
 8011266:	bd80      	pop	{r7, pc}
 8011268:	52004000 	.word	0x52004000

0801126c <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b082      	sub	sp, #8
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 8011274:	6878      	ldr	r0, [r7, #4]
 8011276:	f7f3 fc97 	bl	8004ba8 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	681a      	ldr	r2, [r3, #0]
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	685b      	ldr	r3, [r3, #4]
 8011282:	4619      	mov	r1, r3
 8011284:	4610      	mov	r0, r2
 8011286:	f000 fc09 	bl	8011a9c <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	2200      	movs	r2, #0
 801128e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	2200      	movs	r2, #0
 8011296:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  return HAL_OK;
 801129a:	2300      	movs	r3, #0
}
 801129c:	4618      	mov	r0, r3
 801129e:	3708      	adds	r7, #8
 80112a0:	46bd      	mov	sp, r7
 80112a2:	bd80      	pop	{r7, pc}

080112a4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b086      	sub	sp, #24
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	60f8      	str	r0, [r7, #12]
 80112ac:	60b9      	str	r1, [r7, #8]
 80112ae:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80112b6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80112b8:	7dfb      	ldrb	r3, [r7, #23]
 80112ba:	2b02      	cmp	r3, #2
 80112bc:	d101      	bne.n	80112c2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80112be:	2302      	movs	r3, #2
 80112c0:	e021      	b.n	8011306 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80112c2:	7dfb      	ldrb	r3, [r7, #23]
 80112c4:	2b01      	cmp	r3, #1
 80112c6:	d002      	beq.n	80112ce <HAL_SDRAM_SendCommand+0x2a>
 80112c8:	7dfb      	ldrb	r3, [r7, #23]
 80112ca:	2b05      	cmp	r3, #5
 80112cc:	d118      	bne.n	8011300 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	2202      	movs	r2, #2
 80112d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	687a      	ldr	r2, [r7, #4]
 80112dc:	68b9      	ldr	r1, [r7, #8]
 80112de:	4618      	mov	r0, r3
 80112e0:	f000 fbfe 	bl	8011ae0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80112e4:	68bb      	ldr	r3, [r7, #8]
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	2b02      	cmp	r3, #2
 80112ea:	d104      	bne.n	80112f6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	2205      	movs	r2, #5
 80112f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80112f4:	e006      	b.n	8011304 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	2201      	movs	r2, #1
 80112fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80112fe:	e001      	b.n	8011304 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8011300:	2301      	movs	r3, #1
 8011302:	e000      	b.n	8011306 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8011304:	2300      	movs	r3, #0
}
 8011306:	4618      	mov	r0, r3
 8011308:	3718      	adds	r7, #24
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}

0801130e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 801130e:	b580      	push	{r7, lr}
 8011310:	b082      	sub	sp, #8
 8011312:	af00      	add	r7, sp, #0
 8011314:	6078      	str	r0, [r7, #4]
 8011316:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801131e:	b2db      	uxtb	r3, r3
 8011320:	2b02      	cmp	r3, #2
 8011322:	d101      	bne.n	8011328 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8011324:	2302      	movs	r3, #2
 8011326:	e016      	b.n	8011356 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801132e:	b2db      	uxtb	r3, r3
 8011330:	2b01      	cmp	r3, #1
 8011332:	d10f      	bne.n	8011354 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	2202      	movs	r2, #2
 8011338:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	6839      	ldr	r1, [r7, #0]
 8011342:	4618      	mov	r0, r3
 8011344:	f000 fbf0 	bl	8011b28 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	2201      	movs	r2, #1
 801134c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8011350:	2300      	movs	r3, #0
 8011352:	e000      	b.n	8011356 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8011354:	2301      	movs	r3, #1
}
 8011356:	4618      	mov	r0, r3
 8011358:	3708      	adds	r7, #8
 801135a:	46bd      	mov	sp, r7
 801135c:	bd80      	pop	{r7, pc}

0801135e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801135e:	b580      	push	{r7, lr}
 8011360:	b082      	sub	sp, #8
 8011362:	af00      	add	r7, sp, #0
 8011364:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d101      	bne.n	8011370 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801136c:	2301      	movs	r3, #1
 801136e:	e049      	b.n	8011404 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011376:	b2db      	uxtb	r3, r3
 8011378:	2b00      	cmp	r3, #0
 801137a:	d106      	bne.n	801138a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	2200      	movs	r2, #0
 8011380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011384:	6878      	ldr	r0, [r7, #4]
 8011386:	f000 f841 	bl	801140c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	2202      	movs	r2, #2
 801138e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	681a      	ldr	r2, [r3, #0]
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	3304      	adds	r3, #4
 801139a:	4619      	mov	r1, r3
 801139c:	4610      	mov	r0, r2
 801139e:	f000 f9ff 	bl	80117a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	2201      	movs	r2, #1
 80113a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	2201      	movs	r2, #1
 80113ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	2201      	movs	r2, #1
 80113b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	2201      	movs	r2, #1
 80113be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	2201      	movs	r2, #1
 80113c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	2201      	movs	r2, #1
 80113ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	2201      	movs	r2, #1
 80113d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	2201      	movs	r2, #1
 80113de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	2201      	movs	r2, #1
 80113e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	2201      	movs	r2, #1
 80113ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	2201      	movs	r2, #1
 80113f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	2201      	movs	r2, #1
 80113fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011402:	2300      	movs	r3, #0
}
 8011404:	4618      	mov	r0, r3
 8011406:	3708      	adds	r7, #8
 8011408:	46bd      	mov	sp, r7
 801140a:	bd80      	pop	{r7, pc}

0801140c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 801140c:	b480      	push	{r7}
 801140e:	b083      	sub	sp, #12
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8011414:	bf00      	nop
 8011416:	370c      	adds	r7, #12
 8011418:	46bd      	mov	sp, r7
 801141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141e:	4770      	bx	lr

08011420 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8011420:	b480      	push	{r7}
 8011422:	b085      	sub	sp, #20
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801142e:	b2db      	uxtb	r3, r3
 8011430:	2b01      	cmp	r3, #1
 8011432:	d001      	beq.n	8011438 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8011434:	2301      	movs	r3, #1
 8011436:	e054      	b.n	80114e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	2202      	movs	r2, #2
 801143c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	68da      	ldr	r2, [r3, #12]
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	f042 0201 	orr.w	r2, r2, #1
 801144e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	4a26      	ldr	r2, [pc, #152]	; (80114f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8011456:	4293      	cmp	r3, r2
 8011458:	d022      	beq.n	80114a0 <HAL_TIM_Base_Start_IT+0x80>
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011462:	d01d      	beq.n	80114a0 <HAL_TIM_Base_Start_IT+0x80>
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	4a22      	ldr	r2, [pc, #136]	; (80114f4 <HAL_TIM_Base_Start_IT+0xd4>)
 801146a:	4293      	cmp	r3, r2
 801146c:	d018      	beq.n	80114a0 <HAL_TIM_Base_Start_IT+0x80>
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	4a21      	ldr	r2, [pc, #132]	; (80114f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8011474:	4293      	cmp	r3, r2
 8011476:	d013      	beq.n	80114a0 <HAL_TIM_Base_Start_IT+0x80>
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	4a1f      	ldr	r2, [pc, #124]	; (80114fc <HAL_TIM_Base_Start_IT+0xdc>)
 801147e:	4293      	cmp	r3, r2
 8011480:	d00e      	beq.n	80114a0 <HAL_TIM_Base_Start_IT+0x80>
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	4a1e      	ldr	r2, [pc, #120]	; (8011500 <HAL_TIM_Base_Start_IT+0xe0>)
 8011488:	4293      	cmp	r3, r2
 801148a:	d009      	beq.n	80114a0 <HAL_TIM_Base_Start_IT+0x80>
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	4a1c      	ldr	r2, [pc, #112]	; (8011504 <HAL_TIM_Base_Start_IT+0xe4>)
 8011492:	4293      	cmp	r3, r2
 8011494:	d004      	beq.n	80114a0 <HAL_TIM_Base_Start_IT+0x80>
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	4a1b      	ldr	r2, [pc, #108]	; (8011508 <HAL_TIM_Base_Start_IT+0xe8>)
 801149c:	4293      	cmp	r3, r2
 801149e:	d115      	bne.n	80114cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	689a      	ldr	r2, [r3, #8]
 80114a6:	4b19      	ldr	r3, [pc, #100]	; (801150c <HAL_TIM_Base_Start_IT+0xec>)
 80114a8:	4013      	ands	r3, r2
 80114aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	2b06      	cmp	r3, #6
 80114b0:	d015      	beq.n	80114de <HAL_TIM_Base_Start_IT+0xbe>
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80114b8:	d011      	beq.n	80114de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	681a      	ldr	r2, [r3, #0]
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	f042 0201 	orr.w	r2, r2, #1
 80114c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80114ca:	e008      	b.n	80114de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	681a      	ldr	r2, [r3, #0]
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	f042 0201 	orr.w	r2, r2, #1
 80114da:	601a      	str	r2, [r3, #0]
 80114dc:	e000      	b.n	80114e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80114de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80114e0:	2300      	movs	r3, #0
}
 80114e2:	4618      	mov	r0, r3
 80114e4:	3714      	adds	r7, #20
 80114e6:	46bd      	mov	sp, r7
 80114e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ec:	4770      	bx	lr
 80114ee:	bf00      	nop
 80114f0:	40010000 	.word	0x40010000
 80114f4:	40000400 	.word	0x40000400
 80114f8:	40000800 	.word	0x40000800
 80114fc:	40000c00 	.word	0x40000c00
 8011500:	40010400 	.word	0x40010400
 8011504:	40001800 	.word	0x40001800
 8011508:	40014000 	.word	0x40014000
 801150c:	00010007 	.word	0x00010007

08011510 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b082      	sub	sp, #8
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	691b      	ldr	r3, [r3, #16]
 801151e:	f003 0302 	and.w	r3, r3, #2
 8011522:	2b02      	cmp	r3, #2
 8011524:	d122      	bne.n	801156c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	68db      	ldr	r3, [r3, #12]
 801152c:	f003 0302 	and.w	r3, r3, #2
 8011530:	2b02      	cmp	r3, #2
 8011532:	d11b      	bne.n	801156c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	f06f 0202 	mvn.w	r2, #2
 801153c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	2201      	movs	r2, #1
 8011542:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	699b      	ldr	r3, [r3, #24]
 801154a:	f003 0303 	and.w	r3, r3, #3
 801154e:	2b00      	cmp	r3, #0
 8011550:	d003      	beq.n	801155a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011552:	6878      	ldr	r0, [r7, #4]
 8011554:	f000 f905 	bl	8011762 <HAL_TIM_IC_CaptureCallback>
 8011558:	e005      	b.n	8011566 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801155a:	6878      	ldr	r0, [r7, #4]
 801155c:	f000 f8f7 	bl	801174e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011560:	6878      	ldr	r0, [r7, #4]
 8011562:	f000 f908 	bl	8011776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	2200      	movs	r2, #0
 801156a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	691b      	ldr	r3, [r3, #16]
 8011572:	f003 0304 	and.w	r3, r3, #4
 8011576:	2b04      	cmp	r3, #4
 8011578:	d122      	bne.n	80115c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	68db      	ldr	r3, [r3, #12]
 8011580:	f003 0304 	and.w	r3, r3, #4
 8011584:	2b04      	cmp	r3, #4
 8011586:	d11b      	bne.n	80115c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	f06f 0204 	mvn.w	r2, #4
 8011590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	2202      	movs	r2, #2
 8011596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	699b      	ldr	r3, [r3, #24]
 801159e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d003      	beq.n	80115ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80115a6:	6878      	ldr	r0, [r7, #4]
 80115a8:	f000 f8db 	bl	8011762 <HAL_TIM_IC_CaptureCallback>
 80115ac:	e005      	b.n	80115ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80115ae:	6878      	ldr	r0, [r7, #4]
 80115b0:	f000 f8cd 	bl	801174e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80115b4:	6878      	ldr	r0, [r7, #4]
 80115b6:	f000 f8de 	bl	8011776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	2200      	movs	r2, #0
 80115be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	691b      	ldr	r3, [r3, #16]
 80115c6:	f003 0308 	and.w	r3, r3, #8
 80115ca:	2b08      	cmp	r3, #8
 80115cc:	d122      	bne.n	8011614 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	68db      	ldr	r3, [r3, #12]
 80115d4:	f003 0308 	and.w	r3, r3, #8
 80115d8:	2b08      	cmp	r3, #8
 80115da:	d11b      	bne.n	8011614 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	f06f 0208 	mvn.w	r2, #8
 80115e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	2204      	movs	r2, #4
 80115ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	69db      	ldr	r3, [r3, #28]
 80115f2:	f003 0303 	and.w	r3, r3, #3
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d003      	beq.n	8011602 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80115fa:	6878      	ldr	r0, [r7, #4]
 80115fc:	f000 f8b1 	bl	8011762 <HAL_TIM_IC_CaptureCallback>
 8011600:	e005      	b.n	801160e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011602:	6878      	ldr	r0, [r7, #4]
 8011604:	f000 f8a3 	bl	801174e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011608:	6878      	ldr	r0, [r7, #4]
 801160a:	f000 f8b4 	bl	8011776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	2200      	movs	r2, #0
 8011612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	691b      	ldr	r3, [r3, #16]
 801161a:	f003 0310 	and.w	r3, r3, #16
 801161e:	2b10      	cmp	r3, #16
 8011620:	d122      	bne.n	8011668 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	68db      	ldr	r3, [r3, #12]
 8011628:	f003 0310 	and.w	r3, r3, #16
 801162c:	2b10      	cmp	r3, #16
 801162e:	d11b      	bne.n	8011668 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	f06f 0210 	mvn.w	r2, #16
 8011638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2208      	movs	r2, #8
 801163e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	69db      	ldr	r3, [r3, #28]
 8011646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801164a:	2b00      	cmp	r3, #0
 801164c:	d003      	beq.n	8011656 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801164e:	6878      	ldr	r0, [r7, #4]
 8011650:	f000 f887 	bl	8011762 <HAL_TIM_IC_CaptureCallback>
 8011654:	e005      	b.n	8011662 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011656:	6878      	ldr	r0, [r7, #4]
 8011658:	f000 f879 	bl	801174e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801165c:	6878      	ldr	r0, [r7, #4]
 801165e:	f000 f88a 	bl	8011776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	2200      	movs	r2, #0
 8011666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	691b      	ldr	r3, [r3, #16]
 801166e:	f003 0301 	and.w	r3, r3, #1
 8011672:	2b01      	cmp	r3, #1
 8011674:	d10e      	bne.n	8011694 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	68db      	ldr	r3, [r3, #12]
 801167c:	f003 0301 	and.w	r3, r3, #1
 8011680:	2b01      	cmp	r3, #1
 8011682:	d107      	bne.n	8011694 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	f06f 0201 	mvn.w	r2, #1
 801168c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801168e:	6878      	ldr	r0, [r7, #4]
 8011690:	f7f2 fe66 	bl	8004360 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	691b      	ldr	r3, [r3, #16]
 801169a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801169e:	2b80      	cmp	r3, #128	; 0x80
 80116a0:	d10e      	bne.n	80116c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	68db      	ldr	r3, [r3, #12]
 80116a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80116ac:	2b80      	cmp	r3, #128	; 0x80
 80116ae:	d107      	bne.n	80116c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80116b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80116ba:	6878      	ldr	r0, [r7, #4]
 80116bc:	f000 f914 	bl	80118e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	691b      	ldr	r3, [r3, #16]
 80116c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80116ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80116ce:	d10e      	bne.n	80116ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	68db      	ldr	r3, [r3, #12]
 80116d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80116da:	2b80      	cmp	r3, #128	; 0x80
 80116dc:	d107      	bne.n	80116ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80116e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80116e8:	6878      	ldr	r0, [r7, #4]
 80116ea:	f000 f907 	bl	80118fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	691b      	ldr	r3, [r3, #16]
 80116f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80116f8:	2b40      	cmp	r3, #64	; 0x40
 80116fa:	d10e      	bne.n	801171a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	68db      	ldr	r3, [r3, #12]
 8011702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011706:	2b40      	cmp	r3, #64	; 0x40
 8011708:	d107      	bne.n	801171a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8011712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011714:	6878      	ldr	r0, [r7, #4]
 8011716:	f000 f838 	bl	801178a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	691b      	ldr	r3, [r3, #16]
 8011720:	f003 0320 	and.w	r3, r3, #32
 8011724:	2b20      	cmp	r3, #32
 8011726:	d10e      	bne.n	8011746 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	68db      	ldr	r3, [r3, #12]
 801172e:	f003 0320 	and.w	r3, r3, #32
 8011732:	2b20      	cmp	r3, #32
 8011734:	d107      	bne.n	8011746 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	f06f 0220 	mvn.w	r2, #32
 801173e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011740:	6878      	ldr	r0, [r7, #4]
 8011742:	f000 f8c7 	bl	80118d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011746:	bf00      	nop
 8011748:	3708      	adds	r7, #8
 801174a:	46bd      	mov	sp, r7
 801174c:	bd80      	pop	{r7, pc}

0801174e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801174e:	b480      	push	{r7}
 8011750:	b083      	sub	sp, #12
 8011752:	af00      	add	r7, sp, #0
 8011754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011756:	bf00      	nop
 8011758:	370c      	adds	r7, #12
 801175a:	46bd      	mov	sp, r7
 801175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011760:	4770      	bx	lr

08011762 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011762:	b480      	push	{r7}
 8011764:	b083      	sub	sp, #12
 8011766:	af00      	add	r7, sp, #0
 8011768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801176a:	bf00      	nop
 801176c:	370c      	adds	r7, #12
 801176e:	46bd      	mov	sp, r7
 8011770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011774:	4770      	bx	lr

08011776 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8011776:	b480      	push	{r7}
 8011778:	b083      	sub	sp, #12
 801177a:	af00      	add	r7, sp, #0
 801177c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801177e:	bf00      	nop
 8011780:	370c      	adds	r7, #12
 8011782:	46bd      	mov	sp, r7
 8011784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011788:	4770      	bx	lr

0801178a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801178a:	b480      	push	{r7}
 801178c:	b083      	sub	sp, #12
 801178e:	af00      	add	r7, sp, #0
 8011790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011792:	bf00      	nop
 8011794:	370c      	adds	r7, #12
 8011796:	46bd      	mov	sp, r7
 8011798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179c:	4770      	bx	lr
	...

080117a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80117a0:	b480      	push	{r7}
 80117a2:	b085      	sub	sp, #20
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
 80117a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	4a40      	ldr	r2, [pc, #256]	; (80118b4 <TIM_Base_SetConfig+0x114>)
 80117b4:	4293      	cmp	r3, r2
 80117b6:	d013      	beq.n	80117e0 <TIM_Base_SetConfig+0x40>
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80117be:	d00f      	beq.n	80117e0 <TIM_Base_SetConfig+0x40>
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	4a3d      	ldr	r2, [pc, #244]	; (80118b8 <TIM_Base_SetConfig+0x118>)
 80117c4:	4293      	cmp	r3, r2
 80117c6:	d00b      	beq.n	80117e0 <TIM_Base_SetConfig+0x40>
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	4a3c      	ldr	r2, [pc, #240]	; (80118bc <TIM_Base_SetConfig+0x11c>)
 80117cc:	4293      	cmp	r3, r2
 80117ce:	d007      	beq.n	80117e0 <TIM_Base_SetConfig+0x40>
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	4a3b      	ldr	r2, [pc, #236]	; (80118c0 <TIM_Base_SetConfig+0x120>)
 80117d4:	4293      	cmp	r3, r2
 80117d6:	d003      	beq.n	80117e0 <TIM_Base_SetConfig+0x40>
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	4a3a      	ldr	r2, [pc, #232]	; (80118c4 <TIM_Base_SetConfig+0x124>)
 80117dc:	4293      	cmp	r3, r2
 80117de:	d108      	bne.n	80117f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80117e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80117e8:	683b      	ldr	r3, [r7, #0]
 80117ea:	685b      	ldr	r3, [r3, #4]
 80117ec:	68fa      	ldr	r2, [r7, #12]
 80117ee:	4313      	orrs	r3, r2
 80117f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	4a2f      	ldr	r2, [pc, #188]	; (80118b4 <TIM_Base_SetConfig+0x114>)
 80117f6:	4293      	cmp	r3, r2
 80117f8:	d01f      	beq.n	801183a <TIM_Base_SetConfig+0x9a>
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011800:	d01b      	beq.n	801183a <TIM_Base_SetConfig+0x9a>
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	4a2c      	ldr	r2, [pc, #176]	; (80118b8 <TIM_Base_SetConfig+0x118>)
 8011806:	4293      	cmp	r3, r2
 8011808:	d017      	beq.n	801183a <TIM_Base_SetConfig+0x9a>
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	4a2b      	ldr	r2, [pc, #172]	; (80118bc <TIM_Base_SetConfig+0x11c>)
 801180e:	4293      	cmp	r3, r2
 8011810:	d013      	beq.n	801183a <TIM_Base_SetConfig+0x9a>
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	4a2a      	ldr	r2, [pc, #168]	; (80118c0 <TIM_Base_SetConfig+0x120>)
 8011816:	4293      	cmp	r3, r2
 8011818:	d00f      	beq.n	801183a <TIM_Base_SetConfig+0x9a>
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	4a29      	ldr	r2, [pc, #164]	; (80118c4 <TIM_Base_SetConfig+0x124>)
 801181e:	4293      	cmp	r3, r2
 8011820:	d00b      	beq.n	801183a <TIM_Base_SetConfig+0x9a>
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	4a28      	ldr	r2, [pc, #160]	; (80118c8 <TIM_Base_SetConfig+0x128>)
 8011826:	4293      	cmp	r3, r2
 8011828:	d007      	beq.n	801183a <TIM_Base_SetConfig+0x9a>
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	4a27      	ldr	r2, [pc, #156]	; (80118cc <TIM_Base_SetConfig+0x12c>)
 801182e:	4293      	cmp	r3, r2
 8011830:	d003      	beq.n	801183a <TIM_Base_SetConfig+0x9a>
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	4a26      	ldr	r2, [pc, #152]	; (80118d0 <TIM_Base_SetConfig+0x130>)
 8011836:	4293      	cmp	r3, r2
 8011838:	d108      	bne.n	801184c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011842:	683b      	ldr	r3, [r7, #0]
 8011844:	68db      	ldr	r3, [r3, #12]
 8011846:	68fa      	ldr	r2, [r7, #12]
 8011848:	4313      	orrs	r3, r2
 801184a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011852:	683b      	ldr	r3, [r7, #0]
 8011854:	695b      	ldr	r3, [r3, #20]
 8011856:	4313      	orrs	r3, r2
 8011858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	68fa      	ldr	r2, [r7, #12]
 801185e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011860:	683b      	ldr	r3, [r7, #0]
 8011862:	689a      	ldr	r2, [r3, #8]
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011868:	683b      	ldr	r3, [r7, #0]
 801186a:	681a      	ldr	r2, [r3, #0]
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	4a10      	ldr	r2, [pc, #64]	; (80118b4 <TIM_Base_SetConfig+0x114>)
 8011874:	4293      	cmp	r3, r2
 8011876:	d00f      	beq.n	8011898 <TIM_Base_SetConfig+0xf8>
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	4a12      	ldr	r2, [pc, #72]	; (80118c4 <TIM_Base_SetConfig+0x124>)
 801187c:	4293      	cmp	r3, r2
 801187e:	d00b      	beq.n	8011898 <TIM_Base_SetConfig+0xf8>
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	4a11      	ldr	r2, [pc, #68]	; (80118c8 <TIM_Base_SetConfig+0x128>)
 8011884:	4293      	cmp	r3, r2
 8011886:	d007      	beq.n	8011898 <TIM_Base_SetConfig+0xf8>
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	4a10      	ldr	r2, [pc, #64]	; (80118cc <TIM_Base_SetConfig+0x12c>)
 801188c:	4293      	cmp	r3, r2
 801188e:	d003      	beq.n	8011898 <TIM_Base_SetConfig+0xf8>
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	4a0f      	ldr	r2, [pc, #60]	; (80118d0 <TIM_Base_SetConfig+0x130>)
 8011894:	4293      	cmp	r3, r2
 8011896:	d103      	bne.n	80118a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011898:	683b      	ldr	r3, [r7, #0]
 801189a:	691a      	ldr	r2, [r3, #16]
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	2201      	movs	r2, #1
 80118a4:	615a      	str	r2, [r3, #20]
}
 80118a6:	bf00      	nop
 80118a8:	3714      	adds	r7, #20
 80118aa:	46bd      	mov	sp, r7
 80118ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b0:	4770      	bx	lr
 80118b2:	bf00      	nop
 80118b4:	40010000 	.word	0x40010000
 80118b8:	40000400 	.word	0x40000400
 80118bc:	40000800 	.word	0x40000800
 80118c0:	40000c00 	.word	0x40000c00
 80118c4:	40010400 	.word	0x40010400
 80118c8:	40014000 	.word	0x40014000
 80118cc:	40014400 	.word	0x40014400
 80118d0:	40014800 	.word	0x40014800

080118d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80118d4:	b480      	push	{r7}
 80118d6:	b083      	sub	sp, #12
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80118dc:	bf00      	nop
 80118de:	370c      	adds	r7, #12
 80118e0:	46bd      	mov	sp, r7
 80118e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e6:	4770      	bx	lr

080118e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80118e8:	b480      	push	{r7}
 80118ea:	b083      	sub	sp, #12
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80118f0:	bf00      	nop
 80118f2:	370c      	adds	r7, #12
 80118f4:	46bd      	mov	sp, r7
 80118f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fa:	4770      	bx	lr

080118fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80118fc:	b480      	push	{r7}
 80118fe:	b083      	sub	sp, #12
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011904:	bf00      	nop
 8011906:	370c      	adds	r7, #12
 8011908:	46bd      	mov	sp, r7
 801190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190e:	4770      	bx	lr

08011910 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8011910:	b480      	push	{r7}
 8011912:	b083      	sub	sp, #12
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
 8011918:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 801191a:	683b      	ldr	r3, [r7, #0]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d121      	bne.n	8011966 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	681a      	ldr	r2, [r3, #0]
 8011926:	4b27      	ldr	r3, [pc, #156]	; (80119c4 <FMC_SDRAM_Init+0xb4>)
 8011928:	4013      	ands	r3, r2
 801192a:	683a      	ldr	r2, [r7, #0]
 801192c:	6851      	ldr	r1, [r2, #4]
 801192e:	683a      	ldr	r2, [r7, #0]
 8011930:	6892      	ldr	r2, [r2, #8]
 8011932:	4311      	orrs	r1, r2
 8011934:	683a      	ldr	r2, [r7, #0]
 8011936:	68d2      	ldr	r2, [r2, #12]
 8011938:	4311      	orrs	r1, r2
 801193a:	683a      	ldr	r2, [r7, #0]
 801193c:	6912      	ldr	r2, [r2, #16]
 801193e:	4311      	orrs	r1, r2
 8011940:	683a      	ldr	r2, [r7, #0]
 8011942:	6952      	ldr	r2, [r2, #20]
 8011944:	4311      	orrs	r1, r2
 8011946:	683a      	ldr	r2, [r7, #0]
 8011948:	6992      	ldr	r2, [r2, #24]
 801194a:	4311      	orrs	r1, r2
 801194c:	683a      	ldr	r2, [r7, #0]
 801194e:	69d2      	ldr	r2, [r2, #28]
 8011950:	4311      	orrs	r1, r2
 8011952:	683a      	ldr	r2, [r7, #0]
 8011954:	6a12      	ldr	r2, [r2, #32]
 8011956:	4311      	orrs	r1, r2
 8011958:	683a      	ldr	r2, [r7, #0]
 801195a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801195c:	430a      	orrs	r2, r1
 801195e:	431a      	orrs	r2, r3
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	601a      	str	r2, [r3, #0]
 8011964:	e026      	b.n	80119b4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 801196e:	683b      	ldr	r3, [r7, #0]
 8011970:	69d9      	ldr	r1, [r3, #28]
 8011972:	683b      	ldr	r3, [r7, #0]
 8011974:	6a1b      	ldr	r3, [r3, #32]
 8011976:	4319      	orrs	r1, r3
 8011978:	683b      	ldr	r3, [r7, #0]
 801197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801197c:	430b      	orrs	r3, r1
 801197e:	431a      	orrs	r2, r3
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	685a      	ldr	r2, [r3, #4]
 8011988:	4b0e      	ldr	r3, [pc, #56]	; (80119c4 <FMC_SDRAM_Init+0xb4>)
 801198a:	4013      	ands	r3, r2
 801198c:	683a      	ldr	r2, [r7, #0]
 801198e:	6851      	ldr	r1, [r2, #4]
 8011990:	683a      	ldr	r2, [r7, #0]
 8011992:	6892      	ldr	r2, [r2, #8]
 8011994:	4311      	orrs	r1, r2
 8011996:	683a      	ldr	r2, [r7, #0]
 8011998:	68d2      	ldr	r2, [r2, #12]
 801199a:	4311      	orrs	r1, r2
 801199c:	683a      	ldr	r2, [r7, #0]
 801199e:	6912      	ldr	r2, [r2, #16]
 80119a0:	4311      	orrs	r1, r2
 80119a2:	683a      	ldr	r2, [r7, #0]
 80119a4:	6952      	ldr	r2, [r2, #20]
 80119a6:	4311      	orrs	r1, r2
 80119a8:	683a      	ldr	r2, [r7, #0]
 80119aa:	6992      	ldr	r2, [r2, #24]
 80119ac:	430a      	orrs	r2, r1
 80119ae:	431a      	orrs	r2, r3
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80119b4:	2300      	movs	r3, #0
}
 80119b6:	4618      	mov	r0, r3
 80119b8:	370c      	adds	r7, #12
 80119ba:	46bd      	mov	sp, r7
 80119bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c0:	4770      	bx	lr
 80119c2:	bf00      	nop
 80119c4:	ffff8000 	.word	0xffff8000

080119c8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80119c8:	b480      	push	{r7}
 80119ca:	b085      	sub	sp, #20
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	60f8      	str	r0, [r7, #12]
 80119d0:	60b9      	str	r1, [r7, #8]
 80119d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d128      	bne.n	8011a2c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	689b      	ldr	r3, [r3, #8]
 80119de:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80119e2:	68bb      	ldr	r3, [r7, #8]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	1e59      	subs	r1, r3, #1
 80119e8:	68bb      	ldr	r3, [r7, #8]
 80119ea:	685b      	ldr	r3, [r3, #4]
 80119ec:	3b01      	subs	r3, #1
 80119ee:	011b      	lsls	r3, r3, #4
 80119f0:	4319      	orrs	r1, r3
 80119f2:	68bb      	ldr	r3, [r7, #8]
 80119f4:	689b      	ldr	r3, [r3, #8]
 80119f6:	3b01      	subs	r3, #1
 80119f8:	021b      	lsls	r3, r3, #8
 80119fa:	4319      	orrs	r1, r3
 80119fc:	68bb      	ldr	r3, [r7, #8]
 80119fe:	68db      	ldr	r3, [r3, #12]
 8011a00:	3b01      	subs	r3, #1
 8011a02:	031b      	lsls	r3, r3, #12
 8011a04:	4319      	orrs	r1, r3
 8011a06:	68bb      	ldr	r3, [r7, #8]
 8011a08:	691b      	ldr	r3, [r3, #16]
 8011a0a:	3b01      	subs	r3, #1
 8011a0c:	041b      	lsls	r3, r3, #16
 8011a0e:	4319      	orrs	r1, r3
 8011a10:	68bb      	ldr	r3, [r7, #8]
 8011a12:	695b      	ldr	r3, [r3, #20]
 8011a14:	3b01      	subs	r3, #1
 8011a16:	051b      	lsls	r3, r3, #20
 8011a18:	4319      	orrs	r1, r3
 8011a1a:	68bb      	ldr	r3, [r7, #8]
 8011a1c:	699b      	ldr	r3, [r3, #24]
 8011a1e:	3b01      	subs	r3, #1
 8011a20:	061b      	lsls	r3, r3, #24
 8011a22:	430b      	orrs	r3, r1
 8011a24:	431a      	orrs	r2, r3
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	609a      	str	r2, [r3, #8]
 8011a2a:	e02d      	b.n	8011a88 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	689a      	ldr	r2, [r3, #8]
 8011a30:	4b19      	ldr	r3, [pc, #100]	; (8011a98 <FMC_SDRAM_Timing_Init+0xd0>)
 8011a32:	4013      	ands	r3, r2
 8011a34:	68ba      	ldr	r2, [r7, #8]
 8011a36:	68d2      	ldr	r2, [r2, #12]
 8011a38:	3a01      	subs	r2, #1
 8011a3a:	0311      	lsls	r1, r2, #12
 8011a3c:	68ba      	ldr	r2, [r7, #8]
 8011a3e:	6952      	ldr	r2, [r2, #20]
 8011a40:	3a01      	subs	r2, #1
 8011a42:	0512      	lsls	r2, r2, #20
 8011a44:	430a      	orrs	r2, r1
 8011a46:	431a      	orrs	r2, r3
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	68db      	ldr	r3, [r3, #12]
 8011a50:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8011a54:	68bb      	ldr	r3, [r7, #8]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	1e59      	subs	r1, r3, #1
 8011a5a:	68bb      	ldr	r3, [r7, #8]
 8011a5c:	685b      	ldr	r3, [r3, #4]
 8011a5e:	3b01      	subs	r3, #1
 8011a60:	011b      	lsls	r3, r3, #4
 8011a62:	4319      	orrs	r1, r3
 8011a64:	68bb      	ldr	r3, [r7, #8]
 8011a66:	689b      	ldr	r3, [r3, #8]
 8011a68:	3b01      	subs	r3, #1
 8011a6a:	021b      	lsls	r3, r3, #8
 8011a6c:	4319      	orrs	r1, r3
 8011a6e:	68bb      	ldr	r3, [r7, #8]
 8011a70:	691b      	ldr	r3, [r3, #16]
 8011a72:	3b01      	subs	r3, #1
 8011a74:	041b      	lsls	r3, r3, #16
 8011a76:	4319      	orrs	r1, r3
 8011a78:	68bb      	ldr	r3, [r7, #8]
 8011a7a:	699b      	ldr	r3, [r3, #24]
 8011a7c:	3b01      	subs	r3, #1
 8011a7e:	061b      	lsls	r3, r3, #24
 8011a80:	430b      	orrs	r3, r1
 8011a82:	431a      	orrs	r2, r3
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8011a88:	2300      	movs	r3, #0
}
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	3714      	adds	r7, #20
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a94:	4770      	bx	lr
 8011a96:	bf00      	nop
 8011a98:	ff0f0fff 	.word	0xff0f0fff

08011a9c <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 8011a9c:	b480      	push	{r7}
 8011a9e:	b083      	sub	sp, #12
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
 8011aa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	683a      	ldr	r2, [r7, #0]
 8011aaa:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8011aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	683a      	ldr	r2, [r7, #0]
 8011ab6:	3202      	adds	r2, #2
 8011ab8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8011abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDCMR      = 0x00000000U;
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	611a      	str	r2, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	2200      	movs	r2, #0
 8011aca:	615a      	str	r2, [r3, #20]
  Device->SDSR       = 0x00000000U;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	2200      	movs	r2, #0
 8011ad0:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 8011ad2:	2300      	movs	r3, #0
}
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	370c      	adds	r7, #12
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ade:	4770      	bx	lr

08011ae0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8011ae0:	b480      	push	{r7}
 8011ae2:	b085      	sub	sp, #20
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	60f8      	str	r0, [r7, #12]
 8011ae8:	60b9      	str	r1, [r7, #8]
 8011aea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	691a      	ldr	r2, [r3, #16]
 8011af0:	4b0c      	ldr	r3, [pc, #48]	; (8011b24 <FMC_SDRAM_SendCommand+0x44>)
 8011af2:	4013      	ands	r3, r2
 8011af4:	68ba      	ldr	r2, [r7, #8]
 8011af6:	6811      	ldr	r1, [r2, #0]
 8011af8:	68ba      	ldr	r2, [r7, #8]
 8011afa:	6852      	ldr	r2, [r2, #4]
 8011afc:	4311      	orrs	r1, r2
 8011afe:	68ba      	ldr	r2, [r7, #8]
 8011b00:	6892      	ldr	r2, [r2, #8]
 8011b02:	3a01      	subs	r2, #1
 8011b04:	0152      	lsls	r2, r2, #5
 8011b06:	4311      	orrs	r1, r2
 8011b08:	68ba      	ldr	r2, [r7, #8]
 8011b0a:	68d2      	ldr	r2, [r2, #12]
 8011b0c:	0252      	lsls	r2, r2, #9
 8011b0e:	430a      	orrs	r2, r1
 8011b10:	431a      	orrs	r2, r3
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8011b16:	2300      	movs	r3, #0
}
 8011b18:	4618      	mov	r0, r3
 8011b1a:	3714      	adds	r7, #20
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b22:	4770      	bx	lr
 8011b24:	ffc00000 	.word	0xffc00000

08011b28 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8011b28:	b480      	push	{r7}
 8011b2a:	b083      	sub	sp, #12
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
 8011b30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	695a      	ldr	r2, [r3, #20]
 8011b36:	4b07      	ldr	r3, [pc, #28]	; (8011b54 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8011b38:	4013      	ands	r3, r2
 8011b3a:	683a      	ldr	r2, [r7, #0]
 8011b3c:	0052      	lsls	r2, r2, #1
 8011b3e:	431a      	orrs	r2, r3
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8011b44:	2300      	movs	r3, #0
}
 8011b46:	4618      	mov	r0, r3
 8011b48:	370c      	adds	r7, #12
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b50:	4770      	bx	lr
 8011b52:	bf00      	nop
 8011b54:	ffffc001 	.word	0xffffc001

08011b58 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8011b58:	8880      	ldrh	r0, [r0, #4]
 8011b5a:	4770      	bx	lr

08011b5c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8011b5c:	b570      	push	{r4, r5, r6, lr}
 8011b5e:	6803      	ldr	r3, [r0, #0]
 8011b60:	460c      	mov	r4, r1
 8011b62:	2100      	movs	r1, #0
 8011b64:	4605      	mov	r5, r0
 8011b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b68:	4798      	blx	r3
 8011b6a:	4606      	mov	r6, r0
 8011b6c:	682b      	ldr	r3, [r5, #0]
 8011b6e:	4628      	mov	r0, r5
 8011b70:	1ba4      	subs	r4, r4, r6
 8011b72:	6a1b      	ldr	r3, [r3, #32]
 8011b74:	b2a4      	uxth	r4, r4
 8011b76:	4798      	blx	r3
 8011b78:	fbb4 f0f0 	udiv	r0, r4, r0
 8011b7c:	bd70      	pop	{r4, r5, r6, pc}

08011b7e <_ZN8touchgfx17AbstractPartition5clearEv>:
 8011b7e:	2300      	movs	r3, #0
 8011b80:	8083      	strh	r3, [r0, #4]
 8011b82:	4770      	bx	lr

08011b84 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8011b84:	b510      	push	{r4, lr}
 8011b86:	6803      	ldr	r3, [r0, #0]
 8011b88:	4604      	mov	r4, r0
 8011b8a:	8881      	ldrh	r1, [r0, #4]
 8011b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b8e:	4798      	blx	r3
 8011b90:	88a3      	ldrh	r3, [r4, #4]
 8011b92:	3301      	adds	r3, #1
 8011b94:	80a3      	strh	r3, [r4, #4]
 8011b96:	bd10      	pop	{r4, pc}

08011b98 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8011b98:	6803      	ldr	r3, [r0, #0]
 8011b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b9c:	4718      	bx	r3

08011b9e <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8011b9e:	4770      	bx	lr

08011ba0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8011ba0:	4a02      	ldr	r2, [pc, #8]	; (8011bac <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8011ba2:	6002      	str	r2, [r0, #0]
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	8082      	strh	r2, [r0, #4]
 8011ba8:	4770      	bx	lr
 8011baa:	bf00      	nop
 8011bac:	08024b98 	.word	0x08024b98

08011bb0 <_ZN8touchgfx9Container13getFirstChildEv>:
 8011bb0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8011bb2:	4770      	bx	lr

08011bb4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8011bb4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011bb6:	2000      	movs	r0, #0
 8011bb8:	b12b      	cbz	r3, 8011bc6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8011bba:	b920      	cbnz	r0, 8011bc6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8011bbc:	1a5a      	subs	r2, r3, r1
 8011bbe:	699b      	ldr	r3, [r3, #24]
 8011bc0:	4250      	negs	r0, r2
 8011bc2:	4150      	adcs	r0, r2
 8011bc4:	e7f8      	b.n	8011bb8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8011bc6:	4770      	bx	lr

08011bc8 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8011bc8:	2300      	movs	r3, #0
 8011bca:	6148      	str	r0, [r1, #20]
 8011bcc:	618b      	str	r3, [r1, #24]
 8011bce:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011bd0:	b913      	cbnz	r3, 8011bd8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8011bd2:	6281      	str	r1, [r0, #40]	; 0x28
 8011bd4:	4770      	bx	lr
 8011bd6:	4613      	mov	r3, r2
 8011bd8:	699a      	ldr	r2, [r3, #24]
 8011bda:	2a00      	cmp	r2, #0
 8011bdc:	d1fb      	bne.n	8011bd6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8011bde:	6199      	str	r1, [r3, #24]
 8011be0:	4770      	bx	lr

08011be2 <_ZN8touchgfx9Container9removeAllEv>:
 8011be2:	2200      	movs	r2, #0
 8011be4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011be6:	b123      	cbz	r3, 8011bf2 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8011be8:	6999      	ldr	r1, [r3, #24]
 8011bea:	6281      	str	r1, [r0, #40]	; 0x28
 8011bec:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8011bf0:	e7f8      	b.n	8011be4 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8011bf2:	4770      	bx	lr

08011bf4 <_ZN8touchgfx9Container6unlinkEv>:
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	6283      	str	r3, [r0, #40]	; 0x28
 8011bf8:	4770      	bx	lr

08011bfa <_ZNK8touchgfx9Container12getSolidRectEv>:
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	8002      	strh	r2, [r0, #0]
 8011bfe:	8042      	strh	r2, [r0, #2]
 8011c00:	8082      	strh	r2, [r0, #4]
 8011c02:	80c2      	strh	r2, [r0, #6]
 8011c04:	4770      	bx	lr

08011c06 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8011c06:	b570      	push	{r4, r5, r6, lr}
 8011c08:	460d      	mov	r5, r1
 8011c0a:	4616      	mov	r6, r2
 8011c0c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011c0e:	b13c      	cbz	r4, 8011c20 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8011c10:	6823      	ldr	r3, [r4, #0]
 8011c12:	4620      	mov	r0, r4
 8011c14:	4632      	mov	r2, r6
 8011c16:	4629      	mov	r1, r5
 8011c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c1a:	4798      	blx	r3
 8011c1c:	69a4      	ldr	r4, [r4, #24]
 8011c1e:	e7f6      	b.n	8011c0e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8011c20:	bd70      	pop	{r4, r5, r6, pc}

08011c22 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8011c22:	b538      	push	{r3, r4, r5, lr}
 8011c24:	460d      	mov	r5, r1
 8011c26:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011c28:	b134      	cbz	r4, 8011c38 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8011c2a:	682b      	ldr	r3, [r5, #0]
 8011c2c:	4621      	mov	r1, r4
 8011c2e:	4628      	mov	r0, r5
 8011c30:	689b      	ldr	r3, [r3, #8]
 8011c32:	4798      	blx	r3
 8011c34:	69a4      	ldr	r4, [r4, #24]
 8011c36:	e7f7      	b.n	8011c28 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8011c38:	bd38      	pop	{r3, r4, r5, pc}

08011c3a <_ZNK8touchgfx9Container17invalidateContentEv>:
 8011c3a:	b510      	push	{r4, lr}
 8011c3c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011c3e:	b12c      	cbz	r4, 8011c4c <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 8011c40:	6823      	ldr	r3, [r4, #0]
 8011c42:	4620      	mov	r0, r4
 8011c44:	699b      	ldr	r3, [r3, #24]
 8011c46:	4798      	blx	r3
 8011c48:	69a4      	ldr	r4, [r4, #24]
 8011c4a:	e7f8      	b.n	8011c3e <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 8011c4c:	bd10      	pop	{r4, pc}

08011c4e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8011c4e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011c50:	b19b      	cbz	r3, 8011c7a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8011c52:	428b      	cmp	r3, r1
 8011c54:	d109      	bne.n	8011c6a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8011c56:	699a      	ldr	r2, [r3, #24]
 8011c58:	2100      	movs	r1, #0
 8011c5a:	6159      	str	r1, [r3, #20]
 8011c5c:	6282      	str	r2, [r0, #40]	; 0x28
 8011c5e:	b902      	cbnz	r2, 8011c62 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8011c60:	4770      	bx	lr
 8011c62:	6199      	str	r1, [r3, #24]
 8011c64:	4770      	bx	lr
 8011c66:	4613      	mov	r3, r2
 8011c68:	b13a      	cbz	r2, 8011c7a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8011c6a:	699a      	ldr	r2, [r3, #24]
 8011c6c:	428a      	cmp	r2, r1
 8011c6e:	d1fa      	bne.n	8011c66 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8011c70:	698a      	ldr	r2, [r1, #24]
 8011c72:	619a      	str	r2, [r3, #24]
 8011c74:	2300      	movs	r3, #0
 8011c76:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8011c7a:	4770      	bx	lr

08011c7c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8011c7c:	b410      	push	{r4}
 8011c7e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011c80:	4604      	mov	r4, r0
 8011c82:	b92b      	cbnz	r3, 8011c90 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8011c84:	6803      	ldr	r3, [r0, #0]
 8011c86:	4611      	mov	r1, r2
 8011c88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011c8e:	4718      	bx	r3
 8011c90:	b941      	cbnz	r1, 8011ca4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8011c92:	6193      	str	r3, [r2, #24]
 8011c94:	6282      	str	r2, [r0, #40]	; 0x28
 8011c96:	6154      	str	r4, [r2, #20]
 8011c98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c9c:	4770      	bx	lr
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	2800      	cmp	r0, #0
 8011ca2:	d0f9      	beq.n	8011c98 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8011ca4:	4299      	cmp	r1, r3
 8011ca6:	6998      	ldr	r0, [r3, #24]
 8011ca8:	d1f9      	bne.n	8011c9e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8011caa:	6190      	str	r0, [r2, #24]
 8011cac:	618a      	str	r2, [r1, #24]
 8011cae:	e7f2      	b.n	8011c96 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08011cb0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8011cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cb4:	461f      	mov	r7, r3
 8011cb6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8011cba:	460d      	mov	r5, r1
 8011cbc:	4616      	mov	r6, r2
 8011cbe:	b103      	cbz	r3, 8011cc2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8011cc0:	6038      	str	r0, [r7, #0]
 8011cc2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011cc4:	b314      	cbz	r4, 8011d0c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8011cc6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8011cca:	b1eb      	cbz	r3, 8011d08 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011ccc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8011cd0:	428d      	cmp	r5, r1
 8011cd2:	db19      	blt.n	8011d08 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011cd4:	b289      	uxth	r1, r1
 8011cd6:	8923      	ldrh	r3, [r4, #8]
 8011cd8:	440b      	add	r3, r1
 8011cda:	b21b      	sxth	r3, r3
 8011cdc:	429d      	cmp	r5, r3
 8011cde:	da13      	bge.n	8011d08 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011ce0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011ce4:	4296      	cmp	r6, r2
 8011ce6:	db0f      	blt.n	8011d08 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011ce8:	b292      	uxth	r2, r2
 8011cea:	8963      	ldrh	r3, [r4, #10]
 8011cec:	4413      	add	r3, r2
 8011cee:	b21b      	sxth	r3, r3
 8011cf0:	429e      	cmp	r6, r3
 8011cf2:	da09      	bge.n	8011d08 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011cf4:	6823      	ldr	r3, [r4, #0]
 8011cf6:	1ab2      	subs	r2, r6, r2
 8011cf8:	1a69      	subs	r1, r5, r1
 8011cfa:	4620      	mov	r0, r4
 8011cfc:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8011d00:	b212      	sxth	r2, r2
 8011d02:	463b      	mov	r3, r7
 8011d04:	b209      	sxth	r1, r1
 8011d06:	47c0      	blx	r8
 8011d08:	69a4      	ldr	r4, [r4, #24]
 8011d0a:	e7db      	b.n	8011cc4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8011d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011d10 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8011d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d14:	4c6d      	ldr	r4, [pc, #436]	; (8011ecc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8011d16:	b0a1      	sub	sp, #132	; 0x84
 8011d18:	4606      	mov	r6, r0
 8011d1a:	6824      	ldr	r4, [r4, #0]
 8011d1c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8011d1e:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8011d22:	2400      	movs	r4, #0
 8011d24:	9303      	str	r3, [sp, #12]
 8011d26:	802c      	strh	r4, [r5, #0]
 8011d28:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8011d2a:	802c      	strh	r4, [r5, #0]
 8011d2c:	601c      	str	r4, [r3, #0]
 8011d2e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8011d32:	f7ff ffbd 	bl	8011cb0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8011d36:	f1b9 0f03 	cmp.w	r9, #3
 8011d3a:	f340 80c1 	ble.w	8011ec0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8011d3e:	4631      	mov	r1, r6
 8011d40:	a80c      	add	r0, sp, #48	; 0x30
 8011d42:	f003 fb33 	bl	80153ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011d46:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8011d4a:	9306      	str	r3, [sp, #24]
 8011d4c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8011d50:	9307      	str	r3, [sp, #28]
 8011d52:	9b03      	ldr	r3, [sp, #12]
 8011d54:	f8d3 a000 	ldr.w	sl, [r3]
 8011d58:	f1ba 0f00 	cmp.w	sl, #0
 8011d5c:	f000 80b3 	beq.w	8011ec6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8011d60:	4651      	mov	r1, sl
 8011d62:	a810      	add	r0, sp, #64	; 0x40
 8011d64:	f003 fb22 	bl	80153ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011d68:	2002      	movs	r0, #2
 8011d6a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8011d6e:	9b01      	ldr	r3, [sp, #4]
 8011d70:	9a06      	ldr	r2, [sp, #24]
 8011d72:	fb91 f1f0 	sdiv	r1, r1, r0
 8011d76:	189d      	adds	r5, r3, r2
 8011d78:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8011d7c:	9a07      	ldr	r2, [sp, #28]
 8011d7e:	4419      	add	r1, r3
 8011d80:	9b02      	ldr	r3, [sp, #8]
 8011d82:	4413      	add	r3, r2
 8011d84:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8011d88:	1a6d      	subs	r5, r5, r1
 8011d8a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8011d8e:	fb92 f2f0 	sdiv	r2, r2, r0
 8011d92:	440a      	add	r2, r1
 8011d94:	1a9b      	subs	r3, r3, r2
 8011d96:	435b      	muls	r3, r3
 8011d98:	fb05 3505 	mla	r5, r5, r5, r3
 8011d9c:	4f4c      	ldr	r7, [pc, #304]	; (8011ed0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8011d9e:	ac10      	add	r4, sp, #64	; 0x40
 8011da0:	f1b9 0f0c 	cmp.w	r9, #12
 8011da4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011da8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011daa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011dac:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011db0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8011db4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011db8:	f04f 0303 	mov.w	r3, #3
 8011dbc:	bfd8      	it	le
 8011dbe:	f109 32ff 	addle.w	r2, r9, #4294967295
 8011dc2:	f04f 0400 	mov.w	r4, #0
 8011dc6:	f8cd 9000 	str.w	r9, [sp]
 8011dca:	bfcc      	ite	gt
 8011dcc:	4698      	movgt	r8, r3
 8011dce:	fb92 f8f3 	sdivle	r8, r2, r3
 8011dd2:	1c63      	adds	r3, r4, #1
 8011dd4:	aa10      	add	r2, sp, #64	; 0x40
 8011dd6:	f004 0401 	and.w	r4, r4, #1
 8011dda:	f04f 0b00 	mov.w	fp, #0
 8011dde:	9308      	str	r3, [sp, #32]
 8011de0:	9b00      	ldr	r3, [sp, #0]
 8011de2:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8011de6:	fb93 f3f8 	sdiv	r3, r3, r8
 8011dea:	3404      	adds	r4, #4
 8011dec:	b29b      	uxth	r3, r3
 8011dee:	9304      	str	r3, [sp, #16]
 8011df0:	9a04      	ldr	r2, [sp, #16]
 8011df2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011df6:	fb13 f302 	smulbb	r3, r3, r2
 8011dfa:	9a01      	ldr	r2, [sp, #4]
 8011dfc:	b29b      	uxth	r3, r3
 8011dfe:	1899      	adds	r1, r3, r2
 8011e00:	9305      	str	r3, [sp, #20]
 8011e02:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8011e06:	b209      	sxth	r1, r1
 8011e08:	4299      	cmp	r1, r3
 8011e0a:	db4d      	blt.n	8011ea8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011e0c:	8932      	ldrh	r2, [r6, #8]
 8011e0e:	4413      	add	r3, r2
 8011e10:	b21b      	sxth	r3, r3
 8011e12:	4299      	cmp	r1, r3
 8011e14:	da48      	bge.n	8011ea8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011e16:	9b04      	ldr	r3, [sp, #16]
 8011e18:	6827      	ldr	r7, [r4, #0]
 8011e1a:	fb17 f703 	smulbb	r7, r7, r3
 8011e1e:	9b02      	ldr	r3, [sp, #8]
 8011e20:	b2bf      	uxth	r7, r7
 8011e22:	18fa      	adds	r2, r7, r3
 8011e24:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8011e28:	b212      	sxth	r2, r2
 8011e2a:	429a      	cmp	r2, r3
 8011e2c:	db3c      	blt.n	8011ea8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011e2e:	8970      	ldrh	r0, [r6, #10]
 8011e30:	4403      	add	r3, r0
 8011e32:	b21b      	sxth	r3, r3
 8011e34:	429a      	cmp	r2, r3
 8011e36:	da37      	bge.n	8011ea8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011e38:	2300      	movs	r3, #0
 8011e3a:	4630      	mov	r0, r6
 8011e3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e3e:	ab0b      	add	r3, sp, #44	; 0x2c
 8011e40:	f7ff ff36 	bl	8011cb0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8011e44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011e46:	b37a      	cbz	r2, 8011ea8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011e48:	4552      	cmp	r2, sl
 8011e4a:	d02d      	beq.n	8011ea8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011e4c:	4611      	mov	r1, r2
 8011e4e:	a80e      	add	r0, sp, #56	; 0x38
 8011e50:	9209      	str	r2, [sp, #36]	; 0x24
 8011e52:	f003 faab 	bl	80153ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011e56:	f04f 0e02 	mov.w	lr, #2
 8011e5a:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8011e5e:	9a06      	ldr	r2, [sp, #24]
 8011e60:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8011e64:	9b01      	ldr	r3, [sp, #4]
 8011e66:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8011e6a:	4413      	add	r3, r2
 8011e6c:	9a07      	ldr	r2, [sp, #28]
 8011e6e:	fb91 f1fe 	sdiv	r1, r1, lr
 8011e72:	fb9c fcfe 	sdiv	ip, ip, lr
 8011e76:	4401      	add	r1, r0
 8011e78:	1a58      	subs	r0, r3, r1
 8011e7a:	9b02      	ldr	r3, [sp, #8]
 8011e7c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8011e80:	4413      	add	r3, r2
 8011e82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e84:	448c      	add	ip, r1
 8011e86:	eba3 030c 	sub.w	r3, r3, ip
 8011e8a:	435b      	muls	r3, r3
 8011e8c:	fb00 3300 	mla	r3, r0, r0, r3
 8011e90:	42ab      	cmp	r3, r5
 8011e92:	d208      	bcs.n	8011ea6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8011e94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011e96:	461d      	mov	r5, r3
 8011e98:	9803      	ldr	r0, [sp, #12]
 8011e9a:	6001      	str	r1, [r0, #0]
 8011e9c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8011e9e:	9805      	ldr	r0, [sp, #20]
 8011ea0:	8008      	strh	r0, [r1, #0]
 8011ea2:	992b      	ldr	r1, [sp, #172]	; 0xac
 8011ea4:	800f      	strh	r7, [r1, #0]
 8011ea6:	4692      	mov	sl, r2
 8011ea8:	f10b 0b01 	add.w	fp, fp, #1
 8011eac:	3408      	adds	r4, #8
 8011eae:	f1bb 0f04 	cmp.w	fp, #4
 8011eb2:	d19d      	bne.n	8011df0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8011eb4:	9b00      	ldr	r3, [sp, #0]
 8011eb6:	9c08      	ldr	r4, [sp, #32]
 8011eb8:	444b      	add	r3, r9
 8011eba:	4544      	cmp	r4, r8
 8011ebc:	9300      	str	r3, [sp, #0]
 8011ebe:	d188      	bne.n	8011dd2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8011ec0:	b021      	add	sp, #132	; 0x84
 8011ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ec6:	f04f 35ff 	mov.w	r5, #4294967295
 8011eca:	e767      	b.n	8011d9c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8011ecc:	2400aea4 	.word	0x2400aea4
 8011ed0:	08024324 	.word	0x08024324

08011ed4 <_ZN8touchgfx4RectaNERKS0_>:
 8011ed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011ed8:	f9b1 7000 	ldrsh.w	r7, [r1]
 8011edc:	888c      	ldrh	r4, [r1, #4]
 8011ede:	f9b0 9000 	ldrsh.w	r9, [r0]
 8011ee2:	443c      	add	r4, r7
 8011ee4:	b2a4      	uxth	r4, r4
 8011ee6:	fa0f f884 	sxth.w	r8, r4
 8011eea:	45c1      	cmp	r9, r8
 8011eec:	da2f      	bge.n	8011f4e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011eee:	8882      	ldrh	r2, [r0, #4]
 8011ef0:	444a      	add	r2, r9
 8011ef2:	b292      	uxth	r2, r2
 8011ef4:	fa0f fe82 	sxth.w	lr, r2
 8011ef8:	4577      	cmp	r7, lr
 8011efa:	da28      	bge.n	8011f4e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011efc:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8011f00:	88cb      	ldrh	r3, [r1, #6]
 8011f02:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8011f06:	442b      	add	r3, r5
 8011f08:	b21b      	sxth	r3, r3
 8011f0a:	429e      	cmp	r6, r3
 8011f0c:	da1f      	bge.n	8011f4e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011f0e:	88c3      	ldrh	r3, [r0, #6]
 8011f10:	4433      	add	r3, r6
 8011f12:	b29b      	uxth	r3, r3
 8011f14:	fa0f fc83 	sxth.w	ip, r3
 8011f18:	4565      	cmp	r5, ip
 8011f1a:	da18      	bge.n	8011f4e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011f1c:	454f      	cmp	r7, r9
 8011f1e:	bfb8      	it	lt
 8011f20:	464f      	movlt	r7, r9
 8011f22:	42b5      	cmp	r5, r6
 8011f24:	bfb8      	it	lt
 8011f26:	4635      	movlt	r5, r6
 8011f28:	45f0      	cmp	r8, lr
 8011f2a:	bfd8      	it	le
 8011f2c:	4622      	movle	r2, r4
 8011f2e:	1bd2      	subs	r2, r2, r7
 8011f30:	8082      	strh	r2, [r0, #4]
 8011f32:	884a      	ldrh	r2, [r1, #2]
 8011f34:	88c9      	ldrh	r1, [r1, #6]
 8011f36:	8007      	strh	r7, [r0, #0]
 8011f38:	440a      	add	r2, r1
 8011f3a:	8045      	strh	r5, [r0, #2]
 8011f3c:	b292      	uxth	r2, r2
 8011f3e:	b211      	sxth	r1, r2
 8011f40:	458c      	cmp	ip, r1
 8011f42:	bfa8      	it	ge
 8011f44:	4613      	movge	r3, r2
 8011f46:	1b5b      	subs	r3, r3, r5
 8011f48:	80c3      	strh	r3, [r0, #6]
 8011f4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f4e:	2300      	movs	r3, #0
 8011f50:	8003      	strh	r3, [r0, #0]
 8011f52:	8043      	strh	r3, [r0, #2]
 8011f54:	8083      	strh	r3, [r0, #4]
 8011f56:	80c3      	strh	r3, [r0, #6]
 8011f58:	e7f7      	b.n	8011f4a <_ZN8touchgfx4RectaNERKS0_+0x76>

08011f5a <_ZNK8touchgfx4Rect7isEmptyEv>:
 8011f5a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	dd06      	ble.n	8011f70 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8011f62:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8011f66:	2800      	cmp	r0, #0
 8011f68:	bfcc      	ite	gt
 8011f6a:	2000      	movgt	r0, #0
 8011f6c:	2001      	movle	r0, #1
 8011f6e:	4770      	bx	lr
 8011f70:	2001      	movs	r0, #1
 8011f72:	4770      	bx	lr

08011f74 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8011f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f78:	2300      	movs	r3, #0
 8011f7a:	4604      	mov	r4, r0
 8011f7c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8011f7e:	8003      	strh	r3, [r0, #0]
 8011f80:	8043      	strh	r3, [r0, #2]
 8011f82:	8083      	strh	r3, [r0, #4]
 8011f84:	80c3      	strh	r3, [r0, #6]
 8011f86:	2d00      	cmp	r5, #0
 8011f88:	d040      	beq.n	801200c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8011f8a:	1d28      	adds	r0, r5, #4
 8011f8c:	f7ff ffe5 	bl	8011f5a <_ZNK8touchgfx4Rect7isEmptyEv>
 8011f90:	b988      	cbnz	r0, 8011fb6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8011f92:	4620      	mov	r0, r4
 8011f94:	f7ff ffe1 	bl	8011f5a <_ZNK8touchgfx4Rect7isEmptyEv>
 8011f98:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8011f9c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8011fa0:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8011fa4:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8011fa8:	b138      	cbz	r0, 8011fba <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8011faa:	8022      	strh	r2, [r4, #0]
 8011fac:	8063      	strh	r3, [r4, #2]
 8011fae:	f8a4 e004 	strh.w	lr, [r4, #4]
 8011fb2:	f8a4 c006 	strh.w	ip, [r4, #6]
 8011fb6:	69ad      	ldr	r5, [r5, #24]
 8011fb8:	e7e5      	b.n	8011f86 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8011fba:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011fbe:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8011fc2:	4290      	cmp	r0, r2
 8011fc4:	4607      	mov	r7, r0
 8011fc6:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8011fca:	460e      	mov	r6, r1
 8011fcc:	bfa8      	it	ge
 8011fce:	4617      	movge	r7, r2
 8011fd0:	4299      	cmp	r1, r3
 8011fd2:	4472      	add	r2, lr
 8011fd4:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8011fd8:	bfa8      	it	ge
 8011fda:	461e      	movge	r6, r3
 8011fdc:	4440      	add	r0, r8
 8011fde:	4471      	add	r1, lr
 8011fe0:	4463      	add	r3, ip
 8011fe2:	b200      	sxth	r0, r0
 8011fe4:	8027      	strh	r7, [r4, #0]
 8011fe6:	b212      	sxth	r2, r2
 8011fe8:	8066      	strh	r6, [r4, #2]
 8011fea:	b209      	sxth	r1, r1
 8011fec:	b21b      	sxth	r3, r3
 8011fee:	4290      	cmp	r0, r2
 8011ff0:	bfac      	ite	ge
 8011ff2:	ebc7 0200 	rsbge	r2, r7, r0
 8011ff6:	ebc7 0202 	rsblt	r2, r7, r2
 8011ffa:	4299      	cmp	r1, r3
 8011ffc:	bfac      	ite	ge
 8011ffe:	ebc6 0301 	rsbge	r3, r6, r1
 8012002:	ebc6 0303 	rsblt	r3, r6, r3
 8012006:	80a2      	strh	r2, [r4, #4]
 8012008:	80e3      	strh	r3, [r4, #6]
 801200a:	e7d4      	b.n	8011fb6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801200c:	4620      	mov	r0, r4
 801200e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012012 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8012012:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012016:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801201a:	b383      	cbz	r3, 801207e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801201c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801201e:	b374      	cbz	r4, 801207e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8012020:	f9b1 5000 	ldrsh.w	r5, [r1]
 8012024:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8012028:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801202c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8012030:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8012034:	b303      	cbz	r3, 8012078 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8012036:	4668      	mov	r0, sp
 8012038:	1d21      	adds	r1, r4, #4
 801203a:	f8ad 5000 	strh.w	r5, [sp]
 801203e:	f8ad 6002 	strh.w	r6, [sp, #2]
 8012042:	f8ad 7004 	strh.w	r7, [sp, #4]
 8012046:	f8ad 8006 	strh.w	r8, [sp, #6]
 801204a:	f7ff ff43 	bl	8011ed4 <_ZN8touchgfx4RectaNERKS0_>
 801204e:	4668      	mov	r0, sp
 8012050:	f7ff ff83 	bl	8011f5a <_ZNK8touchgfx4Rect7isEmptyEv>
 8012054:	b980      	cbnz	r0, 8012078 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8012056:	f8bd 3000 	ldrh.w	r3, [sp]
 801205a:	4669      	mov	r1, sp
 801205c:	88a2      	ldrh	r2, [r4, #4]
 801205e:	4620      	mov	r0, r4
 8012060:	1a9b      	subs	r3, r3, r2
 8012062:	88e2      	ldrh	r2, [r4, #6]
 8012064:	f8ad 3000 	strh.w	r3, [sp]
 8012068:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801206c:	1a9b      	subs	r3, r3, r2
 801206e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012072:	6823      	ldr	r3, [r4, #0]
 8012074:	689b      	ldr	r3, [r3, #8]
 8012076:	4798      	blx	r3
 8012078:	69a4      	ldr	r4, [r4, #24]
 801207a:	2c00      	cmp	r4, #0
 801207c:	d1d8      	bne.n	8012030 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801207e:	b002      	add	sp, #8
 8012080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012084 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8012084:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012086:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801208a:	460d      	mov	r5, r1
 801208c:	4616      	mov	r6, r2
 801208e:	b323      	cbz	r3, 80120da <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8012090:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012092:	b314      	cbz	r4, 80120da <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8012094:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8012098:	b1eb      	cbz	r3, 80120d6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801209a:	6828      	ldr	r0, [r5, #0]
 801209c:	466b      	mov	r3, sp
 801209e:	6869      	ldr	r1, [r5, #4]
 80120a0:	c303      	stmia	r3!, {r0, r1}
 80120a2:	4668      	mov	r0, sp
 80120a4:	1d21      	adds	r1, r4, #4
 80120a6:	f7ff ff15 	bl	8011ed4 <_ZN8touchgfx4RectaNERKS0_>
 80120aa:	4668      	mov	r0, sp
 80120ac:	f7ff ff55 	bl	8011f5a <_ZNK8touchgfx4Rect7isEmptyEv>
 80120b0:	b988      	cbnz	r0, 80120d6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80120b2:	f8bd 3000 	ldrh.w	r3, [sp]
 80120b6:	4669      	mov	r1, sp
 80120b8:	88a2      	ldrh	r2, [r4, #4]
 80120ba:	4620      	mov	r0, r4
 80120bc:	1a9b      	subs	r3, r3, r2
 80120be:	88e2      	ldrh	r2, [r4, #6]
 80120c0:	f8ad 3000 	strh.w	r3, [sp]
 80120c4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80120c8:	1a9b      	subs	r3, r3, r2
 80120ca:	4632      	mov	r2, r6
 80120cc:	f8ad 3002 	strh.w	r3, [sp, #2]
 80120d0:	6823      	ldr	r3, [r4, #0]
 80120d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80120d4:	4798      	blx	r3
 80120d6:	69a4      	ldr	r4, [r4, #24]
 80120d8:	e7db      	b.n	8012092 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80120da:	b002      	add	sp, #8
 80120dc:	bd70      	pop	{r4, r5, r6, pc}

080120de <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 80120de:	4770      	bx	lr

080120e0 <_ZN8touchgfx3HAL10FlushCacheEv>:
 80120e0:	4770      	bx	lr

080120e2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80120e2:	6803      	ldr	r3, [r0, #0]
 80120e4:	b513      	push	{r0, r1, r4, lr}
 80120e6:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 80120ea:	2300      	movs	r3, #0
 80120ec:	e9cd 3300 	strd	r3, r3, [sp]
 80120f0:	466b      	mov	r3, sp
 80120f2:	47a0      	blx	r4
 80120f4:	b002      	add	sp, #8
 80120f6:	bd10      	pop	{r4, pc}

080120f8 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80120f8:	2301      	movs	r3, #1
 80120fa:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80120fe:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8012102:	4770      	bx	lr

08012104 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8012104:	2301      	movs	r3, #1
 8012106:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801210a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801210e:	4770      	bx	lr

08012110 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8012110:	6843      	ldr	r3, [r0, #4]
 8012112:	2201      	movs	r2, #1
 8012114:	725a      	strb	r2, [r3, #9]
 8012116:	6840      	ldr	r0, [r0, #4]
 8012118:	6803      	ldr	r3, [r0, #0]
 801211a:	691b      	ldr	r3, [r3, #16]
 801211c:	4718      	bx	r3

0801211e <_ZN8touchgfx3HAL8flushDMAEv>:
 801211e:	6840      	ldr	r0, [r0, #4]
 8012120:	6803      	ldr	r3, [r0, #0]
 8012122:	689b      	ldr	r3, [r3, #8]
 8012124:	4718      	bx	r3

08012126 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8012126:	b530      	push	{r4, r5, lr}
 8012128:	b08b      	sub	sp, #44	; 0x2c
 801212a:	6804      	ldr	r4, [r0, #0]
 801212c:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8012130:	9509      	str	r5, [sp, #36]	; 0x24
 8012132:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8012136:	9508      	str	r5, [sp, #32]
 8012138:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 801213c:	9507      	str	r5, [sp, #28]
 801213e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8012142:	9506      	str	r5, [sp, #24]
 8012144:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8012148:	9505      	str	r5, [sp, #20]
 801214a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801214e:	9504      	str	r5, [sp, #16]
 8012150:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8012154:	9503      	str	r5, [sp, #12]
 8012156:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801215a:	9502      	str	r5, [sp, #8]
 801215c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8012160:	e9cd 3500 	strd	r3, r5, [sp]
 8012164:	4613      	mov	r3, r2
 8012166:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8012168:	2200      	movs	r2, #0
 801216a:	47a0      	blx	r4
 801216c:	b00b      	add	sp, #44	; 0x2c
 801216e:	bd30      	pop	{r4, r5, pc}

08012170 <_ZN8touchgfx3HAL10beginFrameEv>:
 8012170:	4b04      	ldr	r3, [pc, #16]	; (8012184 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8012172:	781b      	ldrb	r3, [r3, #0]
 8012174:	b123      	cbz	r3, 8012180 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8012176:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801217a:	f080 0001 	eor.w	r0, r0, #1
 801217e:	4770      	bx	lr
 8012180:	2001      	movs	r0, #1
 8012182:	4770      	bx	lr
 8012184:	2400aea2 	.word	0x2400aea2

08012188 <_ZN8touchgfx3HAL8endFrameEv>:
 8012188:	b510      	push	{r4, lr}
 801218a:	4604      	mov	r4, r0
 801218c:	6840      	ldr	r0, [r0, #4]
 801218e:	6803      	ldr	r3, [r0, #0]
 8012190:	689b      	ldr	r3, [r3, #8]
 8012192:	4798      	blx	r3
 8012194:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8012198:	b113      	cbz	r3, 80121a0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801219a:	2301      	movs	r3, #1
 801219c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80121a0:	bd10      	pop	{r4, pc}

080121a2 <_ZN8touchgfx3HAL10initializeEv>:
 80121a2:	b510      	push	{r4, lr}
 80121a4:	4604      	mov	r4, r0
 80121a6:	f7f3 fa79 	bl	800569c <_ZN8touchgfx10OSWrappers10initializeEv>
 80121aa:	6860      	ldr	r0, [r4, #4]
 80121ac:	6803      	ldr	r3, [r0, #0]
 80121ae:	68db      	ldr	r3, [r3, #12]
 80121b0:	4798      	blx	r3
 80121b2:	68e0      	ldr	r0, [r4, #12]
 80121b4:	6803      	ldr	r3, [r0, #0]
 80121b6:	689b      	ldr	r3, [r3, #8]
 80121b8:	4798      	blx	r3
 80121ba:	6823      	ldr	r3, [r4, #0]
 80121bc:	4620      	mov	r0, r4
 80121be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80121c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121c4:	4718      	bx	r3

080121c6 <_ZN8touchgfx3HAL9taskEntryEv>:
 80121c6:	b508      	push	{r3, lr}
 80121c8:	6803      	ldr	r3, [r0, #0]
 80121ca:	4604      	mov	r4, r0
 80121cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80121d0:	4798      	blx	r3
 80121d2:	6823      	ldr	r3, [r4, #0]
 80121d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80121d6:	4620      	mov	r0, r4
 80121d8:	4798      	blx	r3
 80121da:	f7f3 fad5 	bl	8005788 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80121de:	6823      	ldr	r3, [r4, #0]
 80121e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121e2:	e7f8      	b.n	80121d6 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

080121e4 <_ZN8touchgfx3HAL4tickEv>:
 80121e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80121e6:	6803      	ldr	r3, [r0, #0]
 80121e8:	4604      	mov	r4, r0
 80121ea:	4d5b      	ldr	r5, [pc, #364]	; (8012358 <_ZN8touchgfx3HAL4tickEv+0x174>)
 80121ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80121f0:	4798      	blx	r3
 80121f2:	2800      	cmp	r0, #0
 80121f4:	f000 8095 	beq.w	8012322 <_ZN8touchgfx3HAL4tickEv+0x13e>
 80121f8:	2001      	movs	r0, #1
 80121fa:	2600      	movs	r6, #0
 80121fc:	f7f2 fee4 	bl	8004fc8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8012200:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8012204:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8012208:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801220c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8012210:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8012214:	b133      	cbz	r3, 8012224 <_ZN8touchgfx3HAL4tickEv+0x40>
 8012216:	6823      	ldr	r3, [r4, #0]
 8012218:	4620      	mov	r0, r4
 801221a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801221e:	4798      	blx	r3
 8012220:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8012224:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8012228:	2601      	movs	r6, #1
 801222a:	6862      	ldr	r2, [r4, #4]
 801222c:	f083 0301 	eor.w	r3, r3, #1
 8012230:	702e      	strb	r6, [r5, #0]
 8012232:	7253      	strb	r3, [r2, #9]
 8012234:	f002 f886 	bl	8014344 <_ZN8touchgfx11Application11getInstanceEv>
 8012238:	6803      	ldr	r3, [r0, #0]
 801223a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801223c:	4798      	blx	r3
 801223e:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8012242:	b90b      	cbnz	r3, 8012248 <_ZN8touchgfx3HAL4tickEv+0x64>
 8012244:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8012248:	f002 f87c 	bl	8014344 <_ZN8touchgfx11Application11getInstanceEv>
 801224c:	6803      	ldr	r3, [r0, #0]
 801224e:	695b      	ldr	r3, [r3, #20]
 8012250:	4798      	blx	r3
 8012252:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012254:	6803      	ldr	r3, [r0, #0]
 8012256:	691b      	ldr	r3, [r3, #16]
 8012258:	4798      	blx	r3
 801225a:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801225e:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8012262:	3b01      	subs	r3, #1
 8012264:	b2db      	uxtb	r3, r3
 8012266:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801226a:	b10a      	cbz	r2, 8012270 <_ZN8touchgfx3HAL4tickEv+0x8c>
 801226c:	2b00      	cmp	r3, #0
 801226e:	d1eb      	bne.n	8012248 <_ZN8touchgfx3HAL4tickEv+0x64>
 8012270:	4a3a      	ldr	r2, [pc, #232]	; (801235c <_ZN8touchgfx3HAL4tickEv+0x178>)
 8012272:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8012276:	7813      	ldrb	r3, [r2, #0]
 8012278:	3301      	adds	r3, #1
 801227a:	b25b      	sxtb	r3, r3
 801227c:	4299      	cmp	r1, r3
 801227e:	7013      	strb	r3, [r2, #0]
 8012280:	dc10      	bgt.n	80122a4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8012282:	2300      	movs	r3, #0
 8012284:	68e0      	ldr	r0, [r4, #12]
 8012286:	a902      	add	r1, sp, #8
 8012288:	7013      	strb	r3, [r2, #0]
 801228a:	aa03      	add	r2, sp, #12
 801228c:	6803      	ldr	r3, [r0, #0]
 801228e:	68db      	ldr	r3, [r3, #12]
 8012290:	4798      	blx	r3
 8012292:	6823      	ldr	r3, [r4, #0]
 8012294:	2800      	cmp	r0, #0
 8012296:	d050      	beq.n	801233a <_ZN8touchgfx3HAL4tickEv+0x156>
 8012298:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801229c:	4620      	mov	r0, r4
 801229e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80122a2:	4798      	blx	r3
 80122a4:	2300      	movs	r3, #0
 80122a6:	6960      	ldr	r0, [r4, #20]
 80122a8:	f88d 3007 	strb.w	r3, [sp, #7]
 80122ac:	b158      	cbz	r0, 80122c6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 80122ae:	6803      	ldr	r3, [r0, #0]
 80122b0:	f10d 0107 	add.w	r1, sp, #7
 80122b4:	68db      	ldr	r3, [r3, #12]
 80122b6:	4798      	blx	r3
 80122b8:	b128      	cbz	r0, 80122c6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 80122ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80122bc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80122c0:	6803      	ldr	r3, [r0, #0]
 80122c2:	68db      	ldr	r3, [r3, #12]
 80122c4:	4798      	blx	r3
 80122c6:	f104 001c 	add.w	r0, r4, #28
 80122ca:	f010 f8f1 	bl	80224b0 <_ZN8touchgfx8Gestures4tickEv>
 80122ce:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80122d2:	b30b      	cbz	r3, 8012318 <_ZN8touchgfx3HAL4tickEv+0x134>
 80122d4:	6920      	ldr	r0, [r4, #16]
 80122d6:	6803      	ldr	r3, [r0, #0]
 80122d8:	691b      	ldr	r3, [r3, #16]
 80122da:	4798      	blx	r3
 80122dc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80122de:	4606      	mov	r6, r0
 80122e0:	b903      	cbnz	r3, 80122e4 <_ZN8touchgfx3HAL4tickEv+0x100>
 80122e2:	6720      	str	r0, [r4, #112]	; 0x70
 80122e4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80122e6:	4a1e      	ldr	r2, [pc, #120]	; (8012360 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80122e8:	1af3      	subs	r3, r6, r3
 80122ea:	4293      	cmp	r3, r2
 80122ec:	d914      	bls.n	8012318 <_ZN8touchgfx3HAL4tickEv+0x134>
 80122ee:	6920      	ldr	r0, [r4, #16]
 80122f0:	6803      	ldr	r3, [r0, #0]
 80122f2:	699b      	ldr	r3, [r3, #24]
 80122f4:	4798      	blx	r3
 80122f6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80122f8:	2264      	movs	r2, #100	; 0x64
 80122fa:	1af3      	subs	r3, r6, r3
 80122fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8012300:	fbb0 f0f3 	udiv	r0, r0, r3
 8012304:	2800      	cmp	r0, #0
 8012306:	dc1d      	bgt.n	8012344 <_ZN8touchgfx3HAL4tickEv+0x160>
 8012308:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801230c:	6920      	ldr	r0, [r4, #16]
 801230e:	2100      	movs	r1, #0
 8012310:	6803      	ldr	r3, [r0, #0]
 8012312:	69db      	ldr	r3, [r3, #28]
 8012314:	4798      	blx	r3
 8012316:	6726      	str	r6, [r4, #112]	; 0x70
 8012318:	f002 f814 	bl	8014344 <_ZN8touchgfx11Application11getInstanceEv>
 801231c:	6803      	ldr	r3, [r0, #0]
 801231e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012320:	4798      	blx	r3
 8012322:	6823      	ldr	r3, [r4, #0]
 8012324:	4620      	mov	r0, r4
 8012326:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801232a:	4798      	blx	r3
 801232c:	2001      	movs	r0, #1
 801232e:	f7f2 fea7 	bl	8005080 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8012332:	2300      	movs	r3, #0
 8012334:	702b      	strb	r3, [r5, #0]
 8012336:	b004      	add	sp, #16
 8012338:	bd70      	pop	{r4, r5, r6, pc}
 801233a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801233e:	4620      	mov	r0, r4
 8012340:	4798      	blx	r3
 8012342:	e7af      	b.n	80122a4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8012344:	2863      	cmp	r0, #99	; 0x63
 8012346:	bfcb      	itete	gt
 8012348:	2300      	movgt	r3, #0
 801234a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801234e:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8012352:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8012356:	e7d9      	b.n	801230c <_ZN8touchgfx3HAL4tickEv+0x128>
 8012358:	2400aea8 	.word	0x2400aea8
 801235c:	2400aea9 	.word	0x2400aea9
 8012360:	05f5e100 	.word	0x05f5e100

08012364 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8012364:	f7f3 b9dc 	b.w	8005720 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08012368 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8012368:	6581      	str	r1, [r0, #88]	; 0x58
 801236a:	301c      	adds	r0, #28
 801236c:	f010 b89e 	b.w	80224ac <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08012370 <_ZN8touchgfx3HAL5touchEll>:
 8012370:	b530      	push	{r4, r5, lr}
 8012372:	b087      	sub	sp, #28
 8012374:	4604      	mov	r4, r0
 8012376:	a804      	add	r0, sp, #16
 8012378:	e9cd 1204 	strd	r1, r2, [sp, #16]
 801237c:	f001 fd68 	bl	8013e50 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8012380:	9b04      	ldr	r3, [sp, #16]
 8012382:	a906      	add	r1, sp, #24
 8012384:	a803      	add	r0, sp, #12
 8012386:	f8ad 300c 	strh.w	r3, [sp, #12]
 801238a:	9b05      	ldr	r3, [sp, #20]
 801238c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8012390:	f001 fdb0 	bl	8013ef4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8012394:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8012398:	f104 001c 	add.w	r0, r4, #28
 801239c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80123a0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80123a4:	b189      	cbz	r1, 80123ca <_ZN8touchgfx3HAL5touchEll+0x5a>
 80123a6:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80123aa:	9300      	str	r3, [sp, #0]
 80123ac:	4613      	mov	r3, r2
 80123ae:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80123b2:	462a      	mov	r2, r5
 80123b4:	f010 f88a 	bl	80224cc <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80123b8:	b128      	cbz	r0, 80123c6 <_ZN8touchgfx3HAL5touchEll+0x56>
 80123ba:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80123be:	65e3      	str	r3, [r4, #92]	; 0x5c
 80123c0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80123c4:	6623      	str	r3, [r4, #96]	; 0x60
 80123c6:	b007      	add	sp, #28
 80123c8:	bd30      	pop	{r4, r5, pc}
 80123ca:	f010 f8bf 	bl	802254c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80123ce:	2301      	movs	r3, #1
 80123d0:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80123d4:	e7f1      	b.n	80123ba <_ZN8touchgfx3HAL5touchEll+0x4a>

080123d6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80123d6:	b510      	push	{r4, lr}
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d046      	beq.n	801246a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80123dc:	ea81 0002 	eor.w	r0, r1, r2
 80123e0:	07c4      	lsls	r4, r0, #31
 80123e2:	d508      	bpl.n	80123f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80123e4:	440b      	add	r3, r1
 80123e6:	3a01      	subs	r2, #1
 80123e8:	428b      	cmp	r3, r1
 80123ea:	d93e      	bls.n	801246a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80123ec:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80123f0:	f801 0b01 	strb.w	r0, [r1], #1
 80123f4:	e7f8      	b.n	80123e8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80123f6:	07d0      	lsls	r0, r2, #31
 80123f8:	bf42      	ittt	mi
 80123fa:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80123fe:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8012402:	f801 0b01 	strbmi.w	r0, [r1], #1
 8012406:	2b01      	cmp	r3, #1
 8012408:	d911      	bls.n	801242e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801240a:	ea81 0402 	eor.w	r4, r1, r2
 801240e:	4610      	mov	r0, r2
 8012410:	07a4      	lsls	r4, r4, #30
 8012412:	d022      	beq.n	801245a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8012414:	f023 0401 	bic.w	r4, r3, #1
 8012418:	440c      	add	r4, r1
 801241a:	428c      	cmp	r4, r1
 801241c:	4602      	mov	r2, r0
 801241e:	d904      	bls.n	801242a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8012420:	8812      	ldrh	r2, [r2, #0]
 8012422:	3002      	adds	r0, #2
 8012424:	f821 2b02 	strh.w	r2, [r1], #2
 8012428:	e7f7      	b.n	801241a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 801242a:	f003 0301 	and.w	r3, r3, #1
 801242e:	f023 0003 	bic.w	r0, r3, #3
 8012432:	4408      	add	r0, r1
 8012434:	4288      	cmp	r0, r1
 8012436:	4614      	mov	r4, r2
 8012438:	d904      	bls.n	8012444 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 801243a:	6824      	ldr	r4, [r4, #0]
 801243c:	3204      	adds	r2, #4
 801243e:	f841 4b04 	str.w	r4, [r1], #4
 8012442:	e7f7      	b.n	8012434 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8012444:	f003 0303 	and.w	r3, r3, #3
 8012448:	3a01      	subs	r2, #1
 801244a:	440b      	add	r3, r1
 801244c:	428b      	cmp	r3, r1
 801244e:	d90c      	bls.n	801246a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8012450:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8012454:	f801 0b01 	strb.w	r0, [r1], #1
 8012458:	e7f8      	b.n	801244c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 801245a:	0790      	lsls	r0, r2, #30
 801245c:	d0e7      	beq.n	801242e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801245e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8012462:	3b02      	subs	r3, #2
 8012464:	f821 0b02 	strh.w	r0, [r1], #2
 8012468:	e7e1      	b.n	801242e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801246a:	2001      	movs	r0, #1
 801246c:	bd10      	pop	{r4, pc}

0801246e <_ZN8touchgfx3HAL7noTouchEv>:
 801246e:	b510      	push	{r4, lr}
 8012470:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8012474:	4604      	mov	r4, r0
 8012476:	b153      	cbz	r3, 801248e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8012478:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801247c:	2101      	movs	r1, #1
 801247e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8012482:	301c      	adds	r0, #28
 8012484:	f010 f862 	bl	802254c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8012488:	2300      	movs	r3, #0
 801248a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801248e:	bd10      	pop	{r4, pc}

08012490 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8012490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012494:	b085      	sub	sp, #20
 8012496:	4604      	mov	r4, r0
 8012498:	2000      	movs	r0, #0
 801249a:	4699      	mov	r9, r3
 801249c:	ad04      	add	r5, sp, #16
 801249e:	460f      	mov	r7, r1
 80124a0:	4690      	mov	r8, r2
 80124a2:	f845 0d04 	str.w	r0, [r5, #-4]!
 80124a6:	69a0      	ldr	r0, [r4, #24]
 80124a8:	6806      	ldr	r6, [r0, #0]
 80124aa:	9501      	str	r5, [sp, #4]
 80124ac:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 80124b0:	9500      	str	r5, [sp, #0]
 80124b2:	6835      	ldr	r5, [r6, #0]
 80124b4:	47a8      	blx	r5
 80124b6:	4d10      	ldr	r5, [pc, #64]	; (80124f8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 80124b8:	4606      	mov	r6, r0
 80124ba:	f8a5 9000 	strh.w	r9, [r5]
 80124be:	f7f5 f897 	bl	80075f0 <_ZN8touchgfx3HAL3lcdEv>
 80124c2:	6803      	ldr	r3, [r0, #0]
 80124c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124c6:	4798      	blx	r3
 80124c8:	b128      	cbz	r0, 80124d6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 80124ca:	2801      	cmp	r0, #1
 80124cc:	d00b      	beq.n	80124e6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 80124ce:	4630      	mov	r0, r6
 80124d0:	b005      	add	sp, #20
 80124d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80124d6:	882b      	ldrh	r3, [r5, #0]
 80124d8:	fb08 7203 	mla	r2, r8, r3, r7
 80124dc:	9b03      	ldr	r3, [sp, #12]
 80124de:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80124e2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80124e4:	e7f3      	b.n	80124ce <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80124e6:	882a      	ldrh	r2, [r5, #0]
 80124e8:	9b03      	ldr	r3, [sp, #12]
 80124ea:	fb08 7202 	mla	r2, r8, r2, r7
 80124ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80124f2:	1a9a      	subs	r2, r3, r2
 80124f4:	63e2      	str	r2, [r4, #60]	; 0x3c
 80124f6:	e7ea      	b.n	80124ce <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80124f8:	2400ae9e 	.word	0x2400ae9e

080124fc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80124fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124fe:	b08b      	sub	sp, #44	; 0x2c
 8012500:	4617      	mov	r7, r2
 8012502:	4604      	mov	r4, r0
 8012504:	460e      	mov	r6, r1
 8012506:	461d      	mov	r5, r3
 8012508:	f7f5 f872 	bl	80075f0 <_ZN8touchgfx3HAL3lcdEv>
 801250c:	6803      	ldr	r3, [r0, #0]
 801250e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012510:	4798      	blx	r3
 8012512:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8012516:	9007      	str	r0, [sp, #28]
 8012518:	4631      	mov	r1, r6
 801251a:	6822      	ldr	r2, [r4, #0]
 801251c:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8012520:	4b0c      	ldr	r3, [pc, #48]	; (8012554 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8012522:	4620      	mov	r0, r4
 8012524:	881b      	ldrh	r3, [r3, #0]
 8012526:	9306      	str	r3, [sp, #24]
 8012528:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801252c:	9305      	str	r3, [sp, #20]
 801252e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8012532:	9304      	str	r3, [sp, #16]
 8012534:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012538:	9303      	str	r3, [sp, #12]
 801253a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801253e:	9302      	str	r3, [sp, #8]
 8012540:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8012544:	e9cd 5300 	strd	r5, r3, [sp]
 8012548:	463b      	mov	r3, r7
 801254a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 801254c:	2200      	movs	r2, #0
 801254e:	47a8      	blx	r5
 8012550:	b00b      	add	sp, #44	; 0x2c
 8012552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012554:	2400ae9e 	.word	0x2400ae9e

08012558 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8012558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801255c:	4698      	mov	r8, r3
 801255e:	6803      	ldr	r3, [r0, #0]
 8012560:	b08b      	sub	sp, #44	; 0x2c
 8012562:	4617      	mov	r7, r2
 8012564:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8012566:	460e      	mov	r6, r1
 8012568:	4b13      	ldr	r3, [pc, #76]	; (80125b8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801256a:	4604      	mov	r4, r0
 801256c:	f8b3 9000 	ldrh.w	r9, [r3]
 8012570:	f7f5 f83e 	bl	80075f0 <_ZN8touchgfx3HAL3lcdEv>
 8012574:	6803      	ldr	r3, [r0, #0]
 8012576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012578:	4798      	blx	r3
 801257a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801257e:	2200      	movs	r2, #0
 8012580:	4631      	mov	r1, r6
 8012582:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8012586:	2302      	movs	r3, #2
 8012588:	4620      	mov	r0, r4
 801258a:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801258e:	2301      	movs	r3, #1
 8012590:	9305      	str	r3, [sp, #20]
 8012592:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8012596:	9304      	str	r3, [sp, #16]
 8012598:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801259c:	9303      	str	r3, [sp, #12]
 801259e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80125a2:	9302      	str	r3, [sp, #8]
 80125a4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80125a8:	e9cd 8300 	strd	r8, r3, [sp]
 80125ac:	463b      	mov	r3, r7
 80125ae:	47a8      	blx	r5
 80125b0:	b00b      	add	sp, #44	; 0x2c
 80125b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80125b6:	bf00      	nop
 80125b8:	2400ae9e 	.word	0x2400ae9e

080125bc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80125bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80125c0:	4698      	mov	r8, r3
 80125c2:	6803      	ldr	r3, [r0, #0]
 80125c4:	b087      	sub	sp, #28
 80125c6:	460e      	mov	r6, r1
 80125c8:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 80125ca:	4617      	mov	r7, r2
 80125cc:	4b0f      	ldr	r3, [pc, #60]	; (801260c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80125ce:	4604      	mov	r4, r0
 80125d0:	f8b3 9000 	ldrh.w	r9, [r3]
 80125d4:	f7f5 f80c 	bl	80075f0 <_ZN8touchgfx3HAL3lcdEv>
 80125d8:	6803      	ldr	r3, [r0, #0]
 80125da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125dc:	4798      	blx	r3
 80125de:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80125e2:	463a      	mov	r2, r7
 80125e4:	4631      	mov	r1, r6
 80125e6:	f8cd 900c 	str.w	r9, [sp, #12]
 80125ea:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80125ee:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80125f2:	4620      	mov	r0, r4
 80125f4:	9302      	str	r3, [sp, #8]
 80125f6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80125fa:	9301      	str	r3, [sp, #4]
 80125fc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8012600:	9300      	str	r3, [sp, #0]
 8012602:	4643      	mov	r3, r8
 8012604:	47a8      	blx	r5
 8012606:	b007      	add	sp, #28
 8012608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801260c:	2400ae9e 	.word	0x2400ae9e

08012610 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8012610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012614:	4604      	mov	r4, r0
 8012616:	b08f      	sub	sp, #60	; 0x3c
 8012618:	4610      	mov	r0, r2
 801261a:	460d      	mov	r5, r1
 801261c:	4691      	mov	r9, r2
 801261e:	461e      	mov	r6, r3
 8012620:	f004 f98e 	bl	8016940 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8012624:	2800      	cmp	r0, #0
 8012626:	f000 809d 	beq.w	8012764 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 801262a:	6823      	ldr	r3, [r4, #0]
 801262c:	4620      	mov	r0, r4
 801262e:	f8df b198 	ldr.w	fp, [pc, #408]	; 80127c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8012632:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8012636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012638:	4798      	blx	r3
 801263a:	6823      	ldr	r3, [r4, #0]
 801263c:	4620      	mov	r0, r4
 801263e:	f8df a18c 	ldr.w	sl, [pc, #396]	; 80127cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8012642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012644:	4798      	blx	r3
 8012646:	f8bb 3000 	ldrh.w	r3, [fp]
 801264a:	4f5c      	ldr	r7, [pc, #368]	; (80127bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801264c:	9301      	str	r3, [sp, #4]
 801264e:	f8ba 3000 	ldrh.w	r3, [sl]
 8012652:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8012656:	4640      	mov	r0, r8
 8012658:	9302      	str	r3, [sp, #8]
 801265a:	883b      	ldrh	r3, [r7, #0]
 801265c:	9303      	str	r3, [sp, #12]
 801265e:	4b58      	ldr	r3, [pc, #352]	; (80127c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8012660:	881a      	ldrh	r2, [r3, #0]
 8012662:	9305      	str	r3, [sp, #20]
 8012664:	9204      	str	r2, [sp, #16]
 8012666:	f004 f9ff 	bl	8016a68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801266a:	8038      	strh	r0, [r7, #0]
 801266c:	4640      	mov	r0, r8
 801266e:	f004 fa2f 	bl	8016ad0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012672:	9b05      	ldr	r3, [sp, #20]
 8012674:	b280      	uxth	r0, r0
 8012676:	8018      	strh	r0, [r3, #0]
 8012678:	4b52      	ldr	r3, [pc, #328]	; (80127c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 801267a:	781b      	ldrb	r3, [r3, #0]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d174      	bne.n	801276a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8012680:	883b      	ldrh	r3, [r7, #0]
 8012682:	f8aa 0000 	strh.w	r0, [sl]
 8012686:	f8ab 3000 	strh.w	r3, [fp]
 801268a:	4648      	mov	r0, r9
 801268c:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8012690:	f004 f956 	bl	8016940 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8012694:	2200      	movs	r2, #0
 8012696:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 801269a:	4611      	mov	r1, r2
 801269c:	4628      	mov	r0, r5
 801269e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80126a2:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80126a6:	f7f5 fc7a 	bl	8007f9e <_ZN8touchgfx8Drawable5setXYEss>
 80126aa:	2301      	movs	r3, #1
 80126ac:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 80126b0:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80126b4:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	dd5c      	ble.n	8012776 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80126bc:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	dd58      	ble.n	8012776 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80126c4:	462a      	mov	r2, r5
 80126c6:	ab0a      	add	r3, sp, #40	; 0x28
 80126c8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80126cc:	6851      	ldr	r1, [r2, #4]
 80126ce:	c303      	stmia	r3!, {r0, r1}
 80126d0:	4631      	mov	r1, r6
 80126d2:	a80a      	add	r0, sp, #40	; 0x28
 80126d4:	f7ff fbfe 	bl	8011ed4 <_ZN8touchgfx4RectaNERKS0_>
 80126d8:	4b38      	ldr	r3, [pc, #224]	; (80127bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80126da:	2100      	movs	r1, #0
 80126dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80126e0:	4b37      	ldr	r3, [pc, #220]	; (80127c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80126e2:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80126e6:	aa0a      	add	r2, sp, #40	; 0x28
 80126e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80126ec:	910c      	str	r1, [sp, #48]	; 0x30
 80126ee:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80126f2:	ab08      	add	r3, sp, #32
 80126f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80126f8:	e883 0003 	stmia.w	r3, {r0, r1}
 80126fc:	4618      	mov	r0, r3
 80126fe:	a90c      	add	r1, sp, #48	; 0x30
 8012700:	f7ff fbe8 	bl	8011ed4 <_ZN8touchgfx4RectaNERKS0_>
 8012704:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8012706:	2b00      	cmp	r3, #0
 8012708:	d13c      	bne.n	8012784 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 801270a:	2000      	movs	r0, #0
 801270c:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8012710:	2600      	movs	r6, #0
 8012712:	696b      	ldr	r3, [r5, #20]
 8012714:	a908      	add	r1, sp, #32
 8012716:	682a      	ldr	r2, [r5, #0]
 8012718:	4628      	mov	r0, r5
 801271a:	9305      	str	r3, [sp, #20]
 801271c:	616e      	str	r6, [r5, #20]
 801271e:	6892      	ldr	r2, [r2, #8]
 8012720:	4790      	blx	r2
 8012722:	9b05      	ldr	r3, [sp, #20]
 8012724:	4652      	mov	r2, sl
 8012726:	4649      	mov	r1, r9
 8012728:	616b      	str	r3, [r5, #20]
 801272a:	4628      	mov	r0, r5
 801272c:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8012730:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8012734:	f7f5 fc33 	bl	8007f9e <_ZN8touchgfx8Drawable5setXYEss>
 8012738:	9a01      	ldr	r2, [sp, #4]
 801273a:	4b23      	ldr	r3, [pc, #140]	; (80127c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 801273c:	4620      	mov	r0, r4
 801273e:	801a      	strh	r2, [r3, #0]
 8012740:	9a02      	ldr	r2, [sp, #8]
 8012742:	4b22      	ldr	r3, [pc, #136]	; (80127cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8012744:	801a      	strh	r2, [r3, #0]
 8012746:	9a03      	ldr	r2, [sp, #12]
 8012748:	4b1c      	ldr	r3, [pc, #112]	; (80127bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801274a:	801a      	strh	r2, [r3, #0]
 801274c:	4b1c      	ldr	r3, [pc, #112]	; (80127c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801274e:	9a04      	ldr	r2, [sp, #16]
 8012750:	801a      	strh	r2, [r3, #0]
 8012752:	6823      	ldr	r3, [r4, #0]
 8012754:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8012758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801275a:	4798      	blx	r3
 801275c:	6823      	ldr	r3, [r4, #0]
 801275e:	4620      	mov	r0, r4
 8012760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012762:	4798      	blx	r3
 8012764:	b00f      	add	sp, #60	; 0x3c
 8012766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801276a:	883b      	ldrh	r3, [r7, #0]
 801276c:	f8ab 0000 	strh.w	r0, [fp]
 8012770:	f8aa 3000 	strh.w	r3, [sl]
 8012774:	e789      	b.n	801268a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8012776:	462a      	mov	r2, r5
 8012778:	ab0a      	add	r3, sp, #40	; 0x28
 801277a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801277e:	6851      	ldr	r1, [r2, #4]
 8012780:	c303      	stmia	r3!, {r0, r1}
 8012782:	e7a9      	b.n	80126d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8012784:	a807      	add	r0, sp, #28
 8012786:	f004 fadf 	bl	8016d48 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801278a:	4606      	mov	r6, r0
 801278c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801278e:	6803      	ldr	r3, [r0, #0]
 8012790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012792:	4798      	blx	r3
 8012794:	4286      	cmp	r6, r0
 8012796:	d1b8      	bne.n	801270a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8012798:	f7f4 ff2a 	bl	80075f0 <_ZN8touchgfx3HAL3lcdEv>
 801279c:	6803      	ldr	r3, [r0, #0]
 801279e:	4606      	mov	r6, r0
 80127a0:	a807      	add	r0, sp, #28
 80127a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127a4:	9305      	str	r3, [sp, #20]
 80127a6:	f004 facf 	bl	8016d48 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80127aa:	9b05      	ldr	r3, [sp, #20]
 80127ac:	4601      	mov	r1, r0
 80127ae:	4630      	mov	r0, r6
 80127b0:	4798      	blx	r3
 80127b2:	f080 0001 	eor.w	r0, r0, #1
 80127b6:	b2c0      	uxtb	r0, r0
 80127b8:	e7a8      	b.n	801270c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80127ba:	bf00      	nop
 80127bc:	2400ae98 	.word	0x2400ae98
 80127c0:	2400ae9a 	.word	0x2400ae9a
 80127c4:	2400ae9c 	.word	0x2400ae9c
 80127c8:	2400ae9e 	.word	0x2400ae9e
 80127cc:	2400aea0 	.word	0x2400aea0

080127d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80127d0:	4b07      	ldr	r3, [pc, #28]	; (80127f0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80127d2:	b510      	push	{r4, lr}
 80127d4:	781b      	ldrb	r3, [r3, #0]
 80127d6:	4604      	mov	r4, r0
 80127d8:	b13b      	cbz	r3, 80127ea <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80127da:	6803      	ldr	r3, [r0, #0]
 80127dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127de:	4798      	blx	r3
 80127e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80127e2:	4283      	cmp	r3, r0
 80127e4:	d101      	bne.n	80127ea <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80127e6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80127e8:	bd10      	pop	{r4, pc}
 80127ea:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80127ec:	e7fc      	b.n	80127e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80127ee:	bf00      	nop
 80127f0:	2400aea2 	.word	0x2400aea2

080127f4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80127f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127f8:	461d      	mov	r5, r3
 80127fa:	b08a      	sub	sp, #40	; 0x28
 80127fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012800:	4690      	mov	r8, r2
 8012802:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8012806:	2400      	movs	r4, #0
 8012808:	4607      	mov	r7, r0
 801280a:	fb06 8505 	mla	r5, r6, r5, r8
 801280e:	9404      	str	r4, [sp, #16]
 8012810:	f88d 4020 	strb.w	r4, [sp, #32]
 8012814:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8012818:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801281c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012820:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8012824:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012828:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801282c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012830:	f7ff ffce 	bl	80127d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012834:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8012838:	6878      	ldr	r0, [r7, #4]
 801283a:	f8ad 601e 	strh.w	r6, [sp, #30]
 801283e:	a901      	add	r1, sp, #4
 8012840:	9505      	str	r5, [sp, #20]
 8012842:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8012846:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 801284a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801284e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8012852:	6803      	ldr	r3, [r0, #0]
 8012854:	685b      	ldr	r3, [r3, #4]
 8012856:	4798      	blx	r3
 8012858:	b00a      	add	sp, #40	; 0x28
 801285a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801285e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801285e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012862:	b08b      	sub	sp, #44	; 0x2c
 8012864:	2400      	movs	r4, #0
 8012866:	4691      	mov	r9, r2
 8012868:	461d      	mov	r5, r3
 801286a:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 801286e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012872:	4688      	mov	r8, r1
 8012874:	4607      	mov	r7, r0
 8012876:	9404      	str	r4, [sp, #16]
 8012878:	fb06 9505 	mla	r5, r6, r5, r9
 801287c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012880:	f7ff ffa6 	bl	80127d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012884:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012888:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801288c:	6878      	ldr	r0, [r7, #4]
 801288e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012892:	a901      	add	r1, sp, #4
 8012894:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8012898:	9505      	str	r5, [sp, #20]
 801289a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801289e:	f8ad 401c 	strh.w	r4, [sp, #28]
 80128a2:	f8ad 601e 	strh.w	r6, [sp, #30]
 80128a6:	f8cd 8010 	str.w	r8, [sp, #16]
 80128aa:	f8ad 4020 	strh.w	r4, [sp, #32]
 80128ae:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80128b2:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80128b6:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80128ba:	6803      	ldr	r3, [r0, #0]
 80128bc:	685b      	ldr	r3, [r3, #4]
 80128be:	4798      	blx	r3
 80128c0:	b00b      	add	sp, #44	; 0x2c
 80128c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080128c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80128c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128cc:	b08a      	sub	sp, #40	; 0x28
 80128ce:	4698      	mov	r8, r3
 80128d0:	2300      	movs	r3, #0
 80128d2:	4606      	mov	r6, r0
 80128d4:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 80128d8:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80128dc:	2d0b      	cmp	r5, #11
 80128de:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 80128e2:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 80128e6:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 80128ea:	9304      	str	r3, [sp, #16]
 80128ec:	d137      	bne.n	801295e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 80128ee:	2380      	movs	r3, #128	; 0x80
 80128f0:	f88d 0020 	strb.w	r0, [sp, #32]
 80128f4:	4630      	mov	r0, r6
 80128f6:	9203      	str	r2, [sp, #12]
 80128f8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80128fc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8012900:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012904:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012908:	f8ad 301a 	strh.w	r3, [sp, #26]
 801290c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8012910:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012914:	f7ff ff5c 	bl	80127d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012918:	2c0b      	cmp	r4, #11
 801291a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801291e:	f8ad 701e 	strh.w	r7, [sp, #30]
 8012922:	bf94      	ite	ls
 8012924:	4b19      	ldrls	r3, [pc, #100]	; (801298c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8012926:	2100      	movhi	r1, #0
 8012928:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 801292c:	bf98      	it	ls
 801292e:	5d19      	ldrbls	r1, [r3, r4]
 8012930:	fb02 8307 	mla	r3, r2, r7, r8
 8012934:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8012938:	10c9      	asrs	r1, r1, #3
 801293a:	fb01 0003 	mla	r0, r1, r3, r0
 801293e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8012942:	a901      	add	r1, sp, #4
 8012944:	9005      	str	r0, [sp, #20]
 8012946:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801294a:	2300      	movs	r3, #0
 801294c:	6870      	ldr	r0, [r6, #4]
 801294e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8012952:	6803      	ldr	r3, [r0, #0]
 8012954:	685b      	ldr	r3, [r3, #4]
 8012956:	4798      	blx	r3
 8012958:	b00a      	add	sp, #40	; 0x28
 801295a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801295e:	2d02      	cmp	r5, #2
 8012960:	d109      	bne.n	8012976 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8012962:	28ff      	cmp	r0, #255	; 0xff
 8012964:	d105      	bne.n	8012972 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8012966:	f1bc 0f00 	cmp.w	ip, #0
 801296a:	bf14      	ite	ne
 801296c:	2340      	movne	r3, #64	; 0x40
 801296e:	2320      	moveq	r3, #32
 8012970:	e7be      	b.n	80128f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8012972:	2340      	movs	r3, #64	; 0x40
 8012974:	e7bc      	b.n	80128f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8012976:	28ff      	cmp	r0, #255	; 0xff
 8012978:	d105      	bne.n	8012986 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 801297a:	f1bc 0f00 	cmp.w	ip, #0
 801297e:	bf14      	ite	ne
 8012980:	2304      	movne	r3, #4
 8012982:	2301      	moveq	r3, #1
 8012984:	e7b4      	b.n	80128f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8012986:	2304      	movs	r3, #4
 8012988:	e7b2      	b.n	80128f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801298a:	bf00      	nop
 801298c:	08024c54 	.word	0x08024c54

08012990 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8012990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012994:	b08b      	sub	sp, #44	; 0x2c
 8012996:	461d      	mov	r5, r3
 8012998:	2400      	movs	r4, #0
 801299a:	4688      	mov	r8, r1
 801299c:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 80129a0:	4693      	mov	fp, r2
 80129a2:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 80129a6:	4607      	mov	r7, r0
 80129a8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80129ac:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 80129b0:	9404      	str	r4, [sp, #16]
 80129b2:	bf14      	ite	ne
 80129b4:	2308      	movne	r3, #8
 80129b6:	2302      	moveq	r3, #2
 80129b8:	fb05 b50a 	mla	r5, r5, sl, fp
 80129bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80129c0:	f7ff ff06 	bl	80127d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80129c4:	2e0b      	cmp	r6, #11
 80129c6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80129ca:	a901      	add	r1, sp, #4
 80129cc:	bf98      	it	ls
 80129ce:	4b13      	ldrls	r3, [pc, #76]	; (8012a1c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80129d0:	f8ad a01e 	strh.w	sl, [sp, #30]
 80129d4:	bf98      	it	ls
 80129d6:	5d9c      	ldrbls	r4, [r3, r6]
 80129d8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80129dc:	10e4      	asrs	r4, r4, #3
 80129de:	f8cd 8010 	str.w	r8, [sp, #16]
 80129e2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80129e6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80129ea:	fb04 0405 	mla	r4, r4, r5, r0
 80129ee:	6878      	ldr	r0, [r7, #4]
 80129f0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80129f4:	2300      	movs	r3, #0
 80129f6:	9405      	str	r4, [sp, #20]
 80129f8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80129fc:	f88d 9020 	strb.w	r9, [sp, #32]
 8012a00:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8012a04:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8012a08:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8012a0c:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8012a10:	6803      	ldr	r3, [r0, #0]
 8012a12:	685b      	ldr	r3, [r3, #4]
 8012a14:	4798      	blx	r3
 8012a16:	b00b      	add	sp, #44	; 0x2c
 8012a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a1c:	08024c54 	.word	0x08024c54

08012a20 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8012a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a24:	461e      	mov	r6, r3
 8012a26:	4b0a      	ldr	r3, [pc, #40]	; (8012a50 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8012a28:	460f      	mov	r7, r1
 8012a2a:	4690      	mov	r8, r2
 8012a2c:	881d      	ldrh	r5, [r3, #0]
 8012a2e:	f7f4 fddf 	bl	80075f0 <_ZN8touchgfx3HAL3lcdEv>
 8012a32:	6803      	ldr	r3, [r0, #0]
 8012a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a36:	4798      	blx	r3
 8012a38:	280b      	cmp	r0, #11
 8012a3a:	bf96      	itet	ls
 8012a3c:	4b05      	ldrls	r3, [pc, #20]	; (8012a54 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8012a3e:	2400      	movhi	r4, #0
 8012a40:	5c1c      	ldrbls	r4, [r3, r0]
 8012a42:	fb08 7005 	mla	r0, r8, r5, r7
 8012a46:	10e4      	asrs	r4, r4, #3
 8012a48:	fb04 6000 	mla	r0, r4, r0, r6
 8012a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a50:	2400ae9e 	.word	0x2400ae9e
 8012a54:	08024c54 	.word	0x08024c54

08012a58 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8012a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a5a:	b08b      	sub	sp, #44	; 0x2c
 8012a5c:	461f      	mov	r7, r3
 8012a5e:	4604      	mov	r4, r0
 8012a60:	4616      	mov	r6, r2
 8012a62:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8012a66:	2500      	movs	r5, #0
 8012a68:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8012a6c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8012a70:	9504      	str	r5, [sp, #16]
 8012a72:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012a76:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8012a7a:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012a7e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012a82:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012a86:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8012a8a:	f88d 3020 	strb.w	r3, [sp, #32]
 8012a8e:	f7ff fe9f 	bl	80127d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012a92:	463a      	mov	r2, r7
 8012a94:	4631      	mov	r1, r6
 8012a96:	4603      	mov	r3, r0
 8012a98:	4620      	mov	r0, r4
 8012a9a:	f7ff ffc1 	bl	8012a20 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8012a9e:	4b0e      	ldr	r3, [pc, #56]	; (8012ad8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8012aa0:	9005      	str	r0, [sp, #20]
 8012aa2:	881b      	ldrh	r3, [r3, #0]
 8012aa4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012aa8:	f7f4 fda2 	bl	80075f0 <_ZN8touchgfx3HAL3lcdEv>
 8012aac:	6803      	ldr	r3, [r0, #0]
 8012aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ab0:	4798      	blx	r3
 8012ab2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012ab4:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8012ab8:	a901      	add	r1, sp, #4
 8012aba:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8012abe:	9304      	str	r3, [sp, #16]
 8012ac0:	6860      	ldr	r0, [r4, #4]
 8012ac2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8012ac6:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8012aca:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8012ace:	6803      	ldr	r3, [r0, #0]
 8012ad0:	685b      	ldr	r3, [r3, #4]
 8012ad2:	4798      	blx	r3
 8012ad4:	b00b      	add	sp, #44	; 0x2c
 8012ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ad8:	2400ae9e 	.word	0x2400ae9e

08012adc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8012adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ade:	b08d      	sub	sp, #52	; 0x34
 8012ae0:	2501      	movs	r5, #1
 8012ae2:	4604      	mov	r4, r0
 8012ae4:	466b      	mov	r3, sp
 8012ae6:	9503      	str	r5, [sp, #12]
 8012ae8:	e883 0006 	stmia.w	r3, {r1, r2}
 8012aec:	2300      	movs	r3, #0
 8012aee:	f8bd 6000 	ldrh.w	r6, [sp]
 8012af2:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8012af6:	9306      	str	r3, [sp, #24]
 8012af8:	6803      	ldr	r3, [r0, #0]
 8012afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012afc:	4798      	blx	r3
 8012afe:	463a      	mov	r2, r7
 8012b00:	4631      	mov	r1, r6
 8012b02:	4603      	mov	r3, r0
 8012b04:	4620      	mov	r0, r4
 8012b06:	f7ff ff8b 	bl	8012a20 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8012b0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8012b0c:	9004      	str	r0, [sp, #16]
 8012b0e:	9307      	str	r3, [sp, #28]
 8012b10:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8012b14:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012b18:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8012b1c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8012b20:	4b0e      	ldr	r3, [pc, #56]	; (8012b5c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8012b22:	881b      	ldrh	r3, [r3, #0]
 8012b24:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8012b28:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8012b2c:	f7f4 fd60 	bl	80075f0 <_ZN8touchgfx3HAL3lcdEv>
 8012b30:	6803      	ldr	r3, [r0, #0]
 8012b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b34:	4798      	blx	r3
 8012b36:	23ff      	movs	r3, #255	; 0xff
 8012b38:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8012b3c:	a903      	add	r1, sp, #12
 8012b3e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8012b42:	6860      	ldr	r0, [r4, #4]
 8012b44:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8012b48:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8012b4c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8012b50:	6803      	ldr	r3, [r0, #0]
 8012b52:	685b      	ldr	r3, [r3, #4]
 8012b54:	4798      	blx	r3
 8012b56:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8012b58:	b00d      	add	sp, #52	; 0x34
 8012b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b5c:	2400ae9e 	.word	0x2400ae9e

08012b60 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8012b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b64:	b08c      	sub	sp, #48	; 0x30
 8012b66:	461e      	mov	r6, r3
 8012b68:	2300      	movs	r3, #0
 8012b6a:	4604      	mov	r4, r0
 8012b6c:	466d      	mov	r5, sp
 8012b6e:	9306      	str	r3, [sp, #24]
 8012b70:	6803      	ldr	r3, [r0, #0]
 8012b72:	e885 0006 	stmia.w	r5, {r1, r2}
 8012b76:	2501      	movs	r5, #1
 8012b78:	f8bd 7000 	ldrh.w	r7, [sp]
 8012b7c:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8012b80:	9503      	str	r5, [sp, #12]
 8012b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b84:	4798      	blx	r3
 8012b86:	4642      	mov	r2, r8
 8012b88:	4639      	mov	r1, r7
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	4620      	mov	r0, r4
 8012b8e:	f7ff ff47 	bl	8012a20 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8012b92:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8012b96:	9004      	str	r0, [sp, #16]
 8012b98:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012b9c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8012ba0:	9607      	str	r6, [sp, #28]
 8012ba2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8012ba6:	4b10      	ldr	r3, [pc, #64]	; (8012be8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8012ba8:	881b      	ldrh	r3, [r3, #0]
 8012baa:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8012bae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012bb0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8012bb4:	f7f4 fd1c 	bl	80075f0 <_ZN8touchgfx3HAL3lcdEv>
 8012bb8:	6803      	ldr	r3, [r0, #0]
 8012bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bbc:	4798      	blx	r3
 8012bbe:	23ff      	movs	r3, #255	; 0xff
 8012bc0:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8012bc4:	a903      	add	r1, sp, #12
 8012bc6:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8012bca:	6860      	ldr	r0, [r4, #4]
 8012bcc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8012bd0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8012bd4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8012bd8:	6803      	ldr	r3, [r0, #0]
 8012bda:	685b      	ldr	r3, [r3, #4]
 8012bdc:	4798      	blx	r3
 8012bde:	4630      	mov	r0, r6
 8012be0:	b00c      	add	sp, #48	; 0x30
 8012be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012be6:	bf00      	nop
 8012be8:	2400ae9e 	.word	0x2400ae9e

08012bec <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8012bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012bee:	b085      	sub	sp, #20
 8012bf0:	4605      	mov	r5, r0
 8012bf2:	ac02      	add	r4, sp, #8
 8012bf4:	e884 0006 	stmia.w	r4, {r1, r2}
 8012bf8:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8012bfc:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8012c00:	f7ff fde6 	bl	80127d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012c04:	4631      	mov	r1, r6
 8012c06:	4603      	mov	r3, r0
 8012c08:	463a      	mov	r2, r7
 8012c0a:	4628      	mov	r0, r5
 8012c0c:	f7ff ff08 	bl	8012a20 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8012c10:	4a05      	ldr	r2, [pc, #20]	; (8012c28 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8012c12:	682b      	ldr	r3, [r5, #0]
 8012c14:	8812      	ldrh	r2, [r2, #0]
 8012c16:	9200      	str	r2, [sp, #0]
 8012c18:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	4628      	mov	r0, r5
 8012c1e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8012c22:	47b0      	blx	r6
 8012c24:	b005      	add	sp, #20
 8012c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c28:	2400ae9e 	.word	0x2400ae9e

08012c2c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8012c2c:	b570      	push	{r4, r5, r6, lr}
 8012c2e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8012c32:	4604      	mov	r4, r0
 8012c34:	b19b      	cbz	r3, 8012c5e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8012c36:	2002      	movs	r0, #2
 8012c38:	f7f2 fa7e 	bl	8005138 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	4620      	mov	r0, r4
 8012c40:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8012c44:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8012c48:	6823      	ldr	r3, [r4, #0]
 8012c4a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8012c4e:	f7ff fdbf 	bl	80127d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012c52:	4601      	mov	r1, r0
 8012c54:	4620      	mov	r0, r4
 8012c56:	462b      	mov	r3, r5
 8012c58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c5c:	4718      	bx	r3
 8012c5e:	bd70      	pop	{r4, r5, r6, pc}

08012c60 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8012c60:	b538      	push	{r3, r4, r5, lr}
 8012c62:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8012c66:	4604      	mov	r4, r0
 8012c68:	460d      	mov	r5, r1
 8012c6a:	428b      	cmp	r3, r1
 8012c6c:	d006      	beq.n	8012c7c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8012c6e:	6803      	ldr	r3, [r0, #0]
 8012c70:	b929      	cbnz	r1, 8012c7e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8012c72:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8012c76:	4798      	blx	r3
 8012c78:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8012c7c:	bd38      	pop	{r3, r4, r5, pc}
 8012c7e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8012c82:	e7f8      	b.n	8012c76 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08012c84 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8012c84:	4b0d      	ldr	r3, [pc, #52]	; (8012cbc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8012c86:	b510      	push	{r4, lr}
 8012c88:	781b      	ldrb	r3, [r3, #0]
 8012c8a:	4604      	mov	r4, r0
 8012c8c:	b95b      	cbnz	r3, 8012ca6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8012c8e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8012c92:	2b02      	cmp	r3, #2
 8012c94:	d007      	beq.n	8012ca6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8012c96:	6840      	ldr	r0, [r0, #4]
 8012c98:	f000 f90e 	bl	8012eb8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8012c9c:	b118      	cbz	r0, 8012ca6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8012c9e:	6862      	ldr	r2, [r4, #4]
 8012ca0:	7a53      	ldrb	r3, [r2, #9]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d0fc      	beq.n	8012ca0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8012ca6:	f7f2 fd2d 	bl	8005704 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8012caa:	4620      	mov	r0, r4
 8012cac:	2100      	movs	r1, #0
 8012cae:	f7ff ffd7 	bl	8012c60 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8012cb2:	4620      	mov	r0, r4
 8012cb4:	f7ff fd8c 	bl	80127d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012cb8:	bd10      	pop	{r4, pc}
 8012cba:	bf00      	nop
 8012cbc:	2400aea2 	.word	0x2400aea2

08012cc0 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8012cc0:	4770      	bx	lr

08012cc2 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8012cc2:	2000      	movs	r0, #0
 8012cc4:	4770      	bx	lr

08012cc6 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8012cc6:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8012cca:	1a13      	subs	r3, r2, r0
 8012ccc:	4258      	negs	r0, r3
 8012cce:	4158      	adcs	r0, r3
 8012cd0:	4770      	bx	lr

08012cd2 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8012cd2:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8012cd6:	1a9b      	subs	r3, r3, r2
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	bfdc      	itt	le
 8012cdc:	6882      	ldrle	r2, [r0, #8]
 8012cde:	189b      	addle	r3, r3, r2
 8012ce0:	2b01      	cmp	r3, #1
 8012ce2:	bfcc      	ite	gt
 8012ce4:	2000      	movgt	r0, #0
 8012ce6:	2001      	movle	r0, #1
 8012ce8:	4770      	bx	lr

08012cea <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8012cea:	6902      	ldr	r2, [r0, #16]
 8012cec:	6843      	ldr	r3, [r0, #4]
 8012cee:	2024      	movs	r0, #36	; 0x24
 8012cf0:	fb00 3002 	mla	r0, r0, r2, r3
 8012cf4:	4770      	bx	lr

08012cf6 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8012cf6:	6803      	ldr	r3, [r0, #0]
 8012cf8:	691b      	ldr	r3, [r3, #16]
 8012cfa:	4718      	bx	r3

08012cfc <_ZN8touchgfx13DMA_Interface7executeEv>:
 8012cfc:	2301      	movs	r3, #1
 8012cfe:	b570      	push	{r4, r5, r6, lr}
 8012d00:	7203      	strb	r3, [r0, #8]
 8012d02:	4604      	mov	r4, r0
 8012d04:	6840      	ldr	r0, [r0, #4]
 8012d06:	6803      	ldr	r3, [r0, #0]
 8012d08:	699b      	ldr	r3, [r3, #24]
 8012d0a:	4798      	blx	r3
 8012d0c:	6803      	ldr	r3, [r0, #0]
 8012d0e:	4605      	mov	r5, r0
 8012d10:	2b40      	cmp	r3, #64	; 0x40
 8012d12:	d00c      	beq.n	8012d2e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012d14:	d810      	bhi.n	8012d38 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8012d16:	2b04      	cmp	r3, #4
 8012d18:	d01d      	beq.n	8012d56 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8012d1a:	d804      	bhi.n	8012d26 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8012d1c:	2b01      	cmp	r3, #1
 8012d1e:	d006      	beq.n	8012d2e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012d20:	2b02      	cmp	r3, #2
 8012d22:	d02c      	beq.n	8012d7e <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8012d24:	bd70      	pop	{r4, r5, r6, pc}
 8012d26:	2b08      	cmp	r3, #8
 8012d28:	d01d      	beq.n	8012d66 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8012d2a:	2b20      	cmp	r3, #32
 8012d2c:	d1fa      	bne.n	8012d24 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8012d2e:	6823      	ldr	r3, [r4, #0]
 8012d30:	4620      	mov	r0, r4
 8012d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d34:	4798      	blx	r3
 8012d36:	e013      	b.n	8012d60 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8012d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012d3c:	d0f7      	beq.n	8012d2e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012d3e:	d804      	bhi.n	8012d4a <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8012d40:	2b80      	cmp	r3, #128	; 0x80
 8012d42:	d0f4      	beq.n	8012d2e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012d48:	e7f0      	b.n	8012d2c <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8012d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012d4e:	d0ee      	beq.n	8012d2e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012d54:	e7e5      	b.n	8012d22 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8012d56:	6823      	ldr	r3, [r4, #0]
 8012d58:	7f01      	ldrb	r1, [r0, #28]
 8012d5a:	4620      	mov	r0, r4
 8012d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d5e:	4798      	blx	r3
 8012d60:	6823      	ldr	r3, [r4, #0]
 8012d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d64:	e006      	b.n	8012d74 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8012d66:	6823      	ldr	r3, [r4, #0]
 8012d68:	7f01      	ldrb	r1, [r0, #28]
 8012d6a:	4620      	mov	r0, r4
 8012d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d6e:	4798      	blx	r3
 8012d70:	6823      	ldr	r3, [r4, #0]
 8012d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d74:	4629      	mov	r1, r5
 8012d76:	4620      	mov	r0, r4
 8012d78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d7c:	4718      	bx	r3
 8012d7e:	6823      	ldr	r3, [r4, #0]
 8012d80:	4620      	mov	r0, r4
 8012d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d84:	4798      	blx	r3
 8012d86:	e7f3      	b.n	8012d70 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08012d88 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8012d88:	4770      	bx	lr

08012d8a <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8012d8a:	4770      	bx	lr

08012d8c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8012d8c:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8012d90:	b510      	push	{r4, lr}
 8012d92:	1ad2      	subs	r2, r2, r3
 8012d94:	2a00      	cmp	r2, #0
 8012d96:	bfdc      	itt	le
 8012d98:	6884      	ldrle	r4, [r0, #8]
 8012d9a:	1912      	addle	r2, r2, r4
 8012d9c:	2a01      	cmp	r2, #1
 8012d9e:	dd16      	ble.n	8012dce <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8012da0:	6842      	ldr	r2, [r0, #4]
 8012da2:	2424      	movs	r4, #36	; 0x24
 8012da4:	fb04 2303 	mla	r3, r4, r3, r2
 8012da8:	f101 0220 	add.w	r2, r1, #32
 8012dac:	f851 4b04 	ldr.w	r4, [r1], #4
 8012db0:	4291      	cmp	r1, r2
 8012db2:	f843 4b04 	str.w	r4, [r3], #4
 8012db6:	d1f9      	bne.n	8012dac <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8012db8:	780a      	ldrb	r2, [r1, #0]
 8012dba:	701a      	strb	r2, [r3, #0]
 8012dbc:	68c3      	ldr	r3, [r0, #12]
 8012dbe:	6882      	ldr	r2, [r0, #8]
 8012dc0:	f3bf 8f5b 	dmb	ish
 8012dc4:	3301      	adds	r3, #1
 8012dc6:	429a      	cmp	r2, r3
 8012dc8:	bfd8      	it	le
 8012dca:	1a9b      	suble	r3, r3, r2
 8012dcc:	60c3      	str	r3, [r0, #12]
 8012dce:	bd10      	pop	{r4, pc}

08012dd0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8012dd0:	6903      	ldr	r3, [r0, #16]
 8012dd2:	6882      	ldr	r2, [r0, #8]
 8012dd4:	f3bf 8f5b 	dmb	ish
 8012dd8:	3301      	adds	r3, #1
 8012dda:	429a      	cmp	r2, r3
 8012ddc:	bfd8      	it	le
 8012dde:	1a9b      	suble	r3, r3, r2
 8012de0:	6103      	str	r3, [r0, #16]
 8012de2:	4770      	bx	lr

08012de4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8012de4:	b570      	push	{r4, r5, r6, lr}
 8012de6:	4604      	mov	r4, r0
 8012de8:	460e      	mov	r6, r1
 8012dea:	6860      	ldr	r0, [r4, #4]
 8012dec:	6803      	ldr	r3, [r0, #0]
 8012dee:	685b      	ldr	r3, [r3, #4]
 8012df0:	4798      	blx	r3
 8012df2:	2800      	cmp	r0, #0
 8012df4:	d1f9      	bne.n	8012dea <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8012df6:	4d0d      	ldr	r5, [pc, #52]	; (8012e2c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8012df8:	6828      	ldr	r0, [r5, #0]
 8012dfa:	6803      	ldr	r3, [r0, #0]
 8012dfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012dfe:	4798      	blx	r3
 8012e00:	f7f2 fc9a 	bl	8005738 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8012e04:	6828      	ldr	r0, [r5, #0]
 8012e06:	2101      	movs	r1, #1
 8012e08:	f7ff ff2a 	bl	8012c60 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8012e0c:	6860      	ldr	r0, [r4, #4]
 8012e0e:	4631      	mov	r1, r6
 8012e10:	6803      	ldr	r3, [r0, #0]
 8012e12:	689b      	ldr	r3, [r3, #8]
 8012e14:	4798      	blx	r3
 8012e16:	6823      	ldr	r3, [r4, #0]
 8012e18:	4620      	mov	r0, r4
 8012e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e1c:	4798      	blx	r3
 8012e1e:	6828      	ldr	r0, [r5, #0]
 8012e20:	6803      	ldr	r3, [r0, #0]
 8012e22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012e28:	4718      	bx	r3
 8012e2a:	bf00      	nop
 8012e2c:	2400aea4 	.word	0x2400aea4

08012e30 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8012e30:	b508      	push	{r3, lr}
 8012e32:	f7f2 fc67 	bl	8005704 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8012e36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012e3a:	f7f2 bc71 	b.w	8005720 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08012e3e <_ZN8touchgfx13DMA_Interface5startEv>:
 8012e3e:	b510      	push	{r4, lr}
 8012e40:	4604      	mov	r4, r0
 8012e42:	6840      	ldr	r0, [r0, #4]
 8012e44:	6803      	ldr	r3, [r0, #0]
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	4798      	blx	r3
 8012e4a:	b948      	cbnz	r0, 8012e60 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8012e4c:	7a63      	ldrb	r3, [r4, #9]
 8012e4e:	b13b      	cbz	r3, 8012e60 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8012e50:	7a23      	ldrb	r3, [r4, #8]
 8012e52:	b92b      	cbnz	r3, 8012e60 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8012e54:	6823      	ldr	r3, [r4, #0]
 8012e56:	4620      	mov	r0, r4
 8012e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e5e:	4718      	bx	r3
 8012e60:	bd10      	pop	{r4, pc}

08012e62 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8012e62:	b570      	push	{r4, r5, r6, lr}
 8012e64:	4604      	mov	r4, r0
 8012e66:	6840      	ldr	r0, [r0, #4]
 8012e68:	6803      	ldr	r3, [r0, #0]
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	4798      	blx	r3
 8012e6e:	4605      	mov	r5, r0
 8012e70:	b930      	cbnz	r0, 8012e80 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8012e72:	7a23      	ldrb	r3, [r4, #8]
 8012e74:	b123      	cbz	r3, 8012e80 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8012e76:	6860      	ldr	r0, [r4, #4]
 8012e78:	6803      	ldr	r3, [r0, #0]
 8012e7a:	695b      	ldr	r3, [r3, #20]
 8012e7c:	4798      	blx	r3
 8012e7e:	7225      	strb	r5, [r4, #8]
 8012e80:	6860      	ldr	r0, [r4, #4]
 8012e82:	6803      	ldr	r3, [r0, #0]
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	4798      	blx	r3
 8012e88:	b928      	cbnz	r0, 8012e96 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8012e8a:	6823      	ldr	r3, [r4, #0]
 8012e8c:	4620      	mov	r0, r4
 8012e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e94:	4718      	bx	r3
 8012e96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e9a:	f7f2 bc59 	b.w	8005750 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08012ea0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8012ea0:	b510      	push	{r4, lr}
 8012ea2:	6082      	str	r2, [r0, #8]
 8012ea4:	2200      	movs	r2, #0
 8012ea6:	4c03      	ldr	r4, [pc, #12]	; (8012eb4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8012ea8:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8012eac:	e9c0 4100 	strd	r4, r1, [r0]
 8012eb0:	bd10      	pop	{r4, pc}
 8012eb2:	bf00      	nop
 8012eb4:	08024d90 	.word	0x08024d90

08012eb8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8012eb8:	6840      	ldr	r0, [r0, #4]
 8012eba:	6803      	ldr	r3, [r0, #0]
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	4718      	bx	r3

08012ec0 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8012ec0:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8012ec4:	4770      	bx	lr

08012ec6 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8012ec6:	b510      	push	{r4, lr}
 8012ec8:	4604      	mov	r4, r0
 8012eca:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8012ecc:	b150      	cbz	r0, 8012ee4 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8012ece:	6803      	ldr	r3, [r0, #0]
 8012ed0:	68db      	ldr	r3, [r3, #12]
 8012ed2:	4798      	blx	r3
 8012ed4:	b130      	cbz	r0, 8012ee4 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8012ed6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8012ed8:	4621      	mov	r1, r4
 8012eda:	6803      	ldr	r3, [r0, #0]
 8012edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ee0:	689b      	ldr	r3, [r3, #8]
 8012ee2:	4718      	bx	r3
 8012ee4:	bd10      	pop	{r4, pc}

08012ee6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8012ee6:	790b      	ldrb	r3, [r1, #4]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	bf0c      	ite	eq
 8012eec:	2301      	moveq	r3, #1
 8012eee:	2300      	movne	r3, #0
 8012ef0:	b570      	push	{r4, r5, r6, lr}
 8012ef2:	4604      	mov	r4, r0
 8012ef4:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8012ef8:	460e      	mov	r6, r1
 8012efa:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8012efe:	d109      	bne.n	8012f14 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8012f00:	b14d      	cbz	r5, 8012f16 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8012f02:	7933      	ldrb	r3, [r6, #4]
 8012f04:	2b01      	cmp	r3, #1
 8012f06:	d10c      	bne.n	8012f22 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8012f08:	6823      	ldr	r3, [r4, #0]
 8012f0a:	4620      	mov	r0, r4
 8012f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012f0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f12:	4718      	bx	r3
 8012f14:	b12d      	cbz	r5, 8012f22 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8012f16:	6823      	ldr	r3, [r4, #0]
 8012f18:	4620      	mov	r0, r4
 8012f1a:	695b      	ldr	r3, [r3, #20]
 8012f1c:	4798      	blx	r3
 8012f1e:	2d00      	cmp	r5, #0
 8012f20:	d1ef      	bne.n	8012f02 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8012f22:	bd70      	pop	{r4, r5, r6, pc}

08012f24 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 8012f24:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8012f28:	b133      	cbz	r3, 8012f38 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 8012f2a:	790b      	ldrb	r3, [r1, #4]
 8012f2c:	2b01      	cmp	r3, #1
 8012f2e:	bf01      	itttt	eq
 8012f30:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 8012f32:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 8012f34:	8603      	strheq	r3, [r0, #48]	; 0x30
 8012f36:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 8012f38:	f7ff bfd5 	b.w	8012ee6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

08012f3c <_ZNK8touchgfx6Button17invalidateContentEv>:
 8012f3c:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
 8012f40:	b12a      	cbz	r2, 8012f4e <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8012f42:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8012f46:	b112      	cbz	r2, 8012f4e <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8012f48:	6803      	ldr	r3, [r0, #0]
 8012f4a:	695b      	ldr	r3, [r3, #20]
 8012f4c:	4718      	bx	r3
 8012f4e:	4770      	bx	lr

08012f50 <_ZN8touchgfx12ToggleButton10forceStateEb>:
 8012f50:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8012f52:	b129      	cbz	r1, 8012f60 <_ZN8touchgfx12ToggleButton10forceStateEb+0x10>
 8012f54:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
 8012f56:	429a      	cmp	r2, r3
 8012f58:	d007      	beq.n	8012f6a <_ZN8touchgfx12ToggleButton10forceStateEb+0x1a>
 8012f5a:	8602      	strh	r2, [r0, #48]	; 0x30
 8012f5c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8012f5e:	4770      	bx	lr
 8012f60:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8012f62:	429a      	cmp	r2, r3
 8012f64:	bf1c      	itt	ne
 8012f66:	85c2      	strhne	r2, [r0, #46]	; 0x2e
 8012f68:	8603      	strhne	r3, [r0, #48]	; 0x30
 8012f6a:	4770      	bx	lr

08012f6c <_ZNK8touchgfx3Box12getSolidRectEv>:
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	8083      	strh	r3, [r0, #4]
 8012f70:	80c3      	strh	r3, [r0, #6]
 8012f72:	8003      	strh	r3, [r0, #0]
 8012f74:	8043      	strh	r3, [r0, #2]
 8012f76:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8012f7a:	2bff      	cmp	r3, #255	; 0xff
 8012f7c:	bf01      	itttt	eq
 8012f7e:	890b      	ldrheq	r3, [r1, #8]
 8012f80:	8083      	strheq	r3, [r0, #4]
 8012f82:	894b      	ldrheq	r3, [r1, #10]
 8012f84:	80c3      	strheq	r3, [r0, #6]
 8012f86:	4770      	bx	lr

08012f88 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8012f88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012f8a:	4604      	mov	r4, r0
 8012f8c:	466b      	mov	r3, sp
 8012f8e:	6808      	ldr	r0, [r1, #0]
 8012f90:	6849      	ldr	r1, [r1, #4]
 8012f92:	c303      	stmia	r3!, {r0, r1}
 8012f94:	6823      	ldr	r3, [r4, #0]
 8012f96:	4669      	mov	r1, sp
 8012f98:	4620      	mov	r0, r4
 8012f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f9c:	4798      	blx	r3
 8012f9e:	4b08      	ldr	r3, [pc, #32]	; (8012fc0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8012fa6:	b10a      	cbz	r2, 8012fac <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8012fa8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8012faa:	b900      	cbnz	r0, 8012fae <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8012fac:	6898      	ldr	r0, [r3, #8]
 8012fae:	6803      	ldr	r3, [r0, #0]
 8012fb0:	4669      	mov	r1, sp
 8012fb2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8012fb4:	6a1d      	ldr	r5, [r3, #32]
 8012fb6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8012fba:	47a8      	blx	r5
 8012fbc:	b003      	add	sp, #12
 8012fbe:	bd30      	pop	{r4, r5, pc}
 8012fc0:	2400aea4 	.word	0x2400aea4

08012fc4 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8012fc4:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8012fc8:	b12a      	cbz	r2, 8012fd6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8012fca:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8012fce:	b112      	cbz	r2, 8012fd6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8012fd0:	6803      	ldr	r3, [r0, #0]
 8012fd2:	695b      	ldr	r3, [r3, #20]
 8012fd4:	4718      	bx	r3
 8012fd6:	4770      	bx	lr

08012fd8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8012fd8:	b570      	push	{r4, r5, r6, lr}
 8012fda:	880b      	ldrh	r3, [r1, #0]
 8012fdc:	4605      	mov	r5, r0
 8012fde:	4604      	mov	r4, r0
 8012fe0:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8012fe2:	8813      	ldrh	r3, [r2, #0]
 8012fe4:	f825 3f30 	strh.w	r3, [r5, #48]!
 8012fe8:	4628      	mov	r0, r5
 8012fea:	f003 fd3d 	bl	8016a68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012fee:	4606      	mov	r6, r0
 8012ff0:	4628      	mov	r0, r5
 8012ff2:	f003 fd6d 	bl	8016ad0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012ff6:	6823      	ldr	r3, [r4, #0]
 8012ff8:	4605      	mov	r5, r0
 8012ffa:	4631      	mov	r1, r6
 8012ffc:	4620      	mov	r0, r4
 8012ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013000:	4798      	blx	r3
 8013002:	6823      	ldr	r3, [r4, #0]
 8013004:	4629      	mov	r1, r5
 8013006:	4620      	mov	r0, r4
 8013008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801300a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801300e:	4718      	bx	r3

08013010 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8013010:	b510      	push	{r4, lr}
 8013012:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8013016:	4604      	mov	r4, r0
 8013018:	2bff      	cmp	r3, #255	; 0xff
 801301a:	d006      	beq.n	801302a <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801301c:	2300      	movs	r3, #0
 801301e:	8003      	strh	r3, [r0, #0]
 8013020:	8043      	strh	r3, [r0, #2]
 8013022:	8083      	strh	r3, [r0, #4]
 8013024:	80c3      	strh	r3, [r0, #6]
 8013026:	4620      	mov	r0, r4
 8013028:	bd10      	pop	{r4, pc}
 801302a:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801302e:	b11b      	cbz	r3, 8013038 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8013030:	3130      	adds	r1, #48	; 0x30
 8013032:	f003 fd81 	bl	8016b38 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8013036:	e7f6      	b.n	8013026 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8013038:	312e      	adds	r1, #46	; 0x2e
 801303a:	e7fa      	b.n	8013032 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

0801303c <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 801303c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013040:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8013044:	b08a      	sub	sp, #40	; 0x28
 8013046:	4604      	mov	r4, r0
 8013048:	4688      	mov	r8, r1
 801304a:	2b00      	cmp	r3, #0
 801304c:	d066      	beq.n	801311c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 801304e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8013050:	a805      	add	r0, sp, #20
 8013052:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013056:	f003 fd07 	bl	8016a68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801305a:	4607      	mov	r7, r0
 801305c:	a805      	add	r0, sp, #20
 801305e:	f003 fd37 	bl	8016ad0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013062:	f9b8 6000 	ldrsh.w	r6, [r8]
 8013066:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 801306a:	2300      	movs	r3, #0
 801306c:	4432      	add	r2, r6
 801306e:	9306      	str	r3, [sp, #24]
 8013070:	b292      	uxth	r2, r2
 8013072:	fa0f fc82 	sxth.w	ip, r2
 8013076:	459c      	cmp	ip, r3
 8013078:	dd52      	ble.n	8013120 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801307a:	42b7      	cmp	r7, r6
 801307c:	dd50      	ble.n	8013120 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801307e:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8013082:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8013086:	442b      	add	r3, r5
 8013088:	b29b      	uxth	r3, r3
 801308a:	b219      	sxth	r1, r3
 801308c:	2900      	cmp	r1, #0
 801308e:	dd47      	ble.n	8013120 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8013090:	42a8      	cmp	r0, r5
 8013092:	dd45      	ble.n	8013120 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8013094:	4567      	cmp	r7, ip
 8013096:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801309a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801309e:	bfb8      	it	lt
 80130a0:	b2ba      	uxthlt	r2, r7
 80130a2:	4288      	cmp	r0, r1
 80130a4:	f8ad 6018 	strh.w	r6, [sp, #24]
 80130a8:	bfb8      	it	lt
 80130aa:	b283      	uxthlt	r3, r0
 80130ac:	1b92      	subs	r2, r2, r6
 80130ae:	f8ad 501a 	strh.w	r5, [sp, #26]
 80130b2:	1b5b      	subs	r3, r3, r5
 80130b4:	f8ad 201c 	strh.w	r2, [sp, #28]
 80130b8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80130bc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80130c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80130c4:	429a      	cmp	r2, r3
 80130c6:	d026      	beq.n	8013116 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80130c8:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	dd22      	ble.n	8013116 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80130d0:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	dd1e      	ble.n	8013116 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80130d8:	2300      	movs	r3, #0
 80130da:	a908      	add	r1, sp, #32
 80130dc:	4620      	mov	r0, r4
 80130de:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80130e2:	6823      	ldr	r3, [r4, #0]
 80130e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130e6:	4798      	blx	r3
 80130e8:	4b0f      	ldr	r3, [pc, #60]	; (8013128 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80130f0:	b10a      	cbz	r2, 80130f6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 80130f2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80130f4:	b900      	cbnz	r0, 80130f8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 80130f6:	6898      	ldr	r0, [r3, #8]
 80130f8:	2501      	movs	r5, #1
 80130fa:	6801      	ldr	r1, [r0, #0]
 80130fc:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8013100:	9502      	str	r5, [sp, #8]
 8013102:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8013106:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801310a:	9401      	str	r4, [sp, #4]
 801310c:	ac06      	add	r4, sp, #24
 801310e:	9400      	str	r4, [sp, #0]
 8013110:	688c      	ldr	r4, [r1, #8]
 8013112:	a905      	add	r1, sp, #20
 8013114:	47a0      	blx	r4
 8013116:	b00a      	add	sp, #40	; 0x28
 8013118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801311c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801311e:	e797      	b.n	8013050 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8013120:	2300      	movs	r3, #0
 8013122:	9307      	str	r3, [sp, #28]
 8013124:	e7ca      	b.n	80130bc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8013126:	bf00      	nop
 8013128:	2400aea4 	.word	0x2400aea4

0801312c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801312c:	b570      	push	{r4, r5, r6, lr}
 801312e:	880b      	ldrh	r3, [r1, #0]
 8013130:	460d      	mov	r5, r1
 8013132:	4604      	mov	r4, r0
 8013134:	84c3      	strh	r3, [r0, #38]	; 0x26
 8013136:	4608      	mov	r0, r1
 8013138:	f003 fc96 	bl	8016a68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801313c:	4606      	mov	r6, r0
 801313e:	4628      	mov	r0, r5
 8013140:	f003 fcc6 	bl	8016ad0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013144:	6823      	ldr	r3, [r4, #0]
 8013146:	4605      	mov	r5, r0
 8013148:	4631      	mov	r1, r6
 801314a:	4620      	mov	r0, r4
 801314c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801314e:	4798      	blx	r3
 8013150:	6823      	ldr	r3, [r4, #0]
 8013152:	4629      	mov	r1, r5
 8013154:	4620      	mov	r0, r4
 8013156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013158:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801315c:	4718      	bx	r3

0801315e <_ZNK8touchgfx5Image12getSolidRectEv>:
 801315e:	b510      	push	{r4, lr}
 8013160:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8013164:	4604      	mov	r4, r0
 8013166:	2bff      	cmp	r3, #255	; 0xff
 8013168:	d006      	beq.n	8013178 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801316a:	2300      	movs	r3, #0
 801316c:	8003      	strh	r3, [r0, #0]
 801316e:	8043      	strh	r3, [r0, #2]
 8013170:	8083      	strh	r3, [r0, #4]
 8013172:	80c3      	strh	r3, [r0, #6]
 8013174:	4620      	mov	r0, r4
 8013176:	bd10      	pop	{r4, pc}
 8013178:	3126      	adds	r1, #38	; 0x26
 801317a:	f003 fcdd 	bl	8016b38 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801317e:	e7f9      	b.n	8013174 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08013180 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8013180:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8013184:	b12a      	cbz	r2, 8013192 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8013186:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801318a:	b112      	cbz	r2, 8013192 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 801318c:	6803      	ldr	r3, [r0, #0]
 801318e:	695b      	ldr	r3, [r3, #20]
 8013190:	4718      	bx	r3
 8013192:	4770      	bx	lr

08013194 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8013194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013198:	4604      	mov	r4, r0
 801319a:	b088      	sub	sp, #32
 801319c:	2500      	movs	r5, #0
 801319e:	460f      	mov	r7, r1
 80131a0:	f854 3b26 	ldr.w	r3, [r4], #38
 80131a4:	a904      	add	r1, sp, #16
 80131a6:	4606      	mov	r6, r0
 80131a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80131ae:	4798      	blx	r3
 80131b0:	4620      	mov	r0, r4
 80131b2:	f003 fc59 	bl	8016a68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80131b6:	4680      	mov	r8, r0
 80131b8:	4620      	mov	r0, r4
 80131ba:	f003 fc89 	bl	8016ad0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80131be:	9506      	str	r5, [sp, #24]
 80131c0:	ad06      	add	r5, sp, #24
 80131c2:	f8ad 001e 	strh.w	r0, [sp, #30]
 80131c6:	4639      	mov	r1, r7
 80131c8:	f8ad 801c 	strh.w	r8, [sp, #28]
 80131cc:	4628      	mov	r0, r5
 80131ce:	f7fe fe81 	bl	8011ed4 <_ZN8touchgfx4RectaNERKS0_>
 80131d2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	dd19      	ble.n	801320e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80131da:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	dd15      	ble.n	801320e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80131e2:	4b0c      	ldr	r3, [pc, #48]	; (8013214 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80131ea:	b10a      	cbz	r2, 80131f0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80131ec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80131ee:	b900      	cbnz	r0, 80131f2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80131f0:	6898      	ldr	r0, [r3, #8]
 80131f2:	2701      	movs	r7, #1
 80131f4:	6801      	ldr	r1, [r0, #0]
 80131f6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80131fa:	9702      	str	r7, [sp, #8]
 80131fc:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8013200:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8013204:	e9cd 5600 	strd	r5, r6, [sp]
 8013208:	688d      	ldr	r5, [r1, #8]
 801320a:	4621      	mov	r1, r4
 801320c:	47a8      	blx	r5
 801320e:	b008      	add	sp, #32
 8013210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013214:	2400aea4 	.word	0x2400aea4

08013218 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8013218:	b510      	push	{r4, lr}
 801321a:	6803      	ldr	r3, [r0, #0]
 801321c:	460c      	mov	r4, r1
 801321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013220:	4798      	blx	r3
 8013222:	1b03      	subs	r3, r0, r4
 8013224:	4258      	negs	r0, r3
 8013226:	4158      	adcs	r0, r3
 8013228:	bd10      	pop	{r4, pc}
	...

0801322c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801322c:	4b01      	ldr	r3, [pc, #4]	; (8013234 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801322e:	6019      	str	r1, [r3, #0]
 8013230:	4770      	bx	lr
 8013232:	bf00      	nop
 8013234:	2400aeac 	.word	0x2400aeac

08013238 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8013238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801323c:	4696      	mov	lr, r2
 801323e:	b097      	sub	sp, #92	; 0x5c
 8013240:	4605      	mov	r5, r0
 8013242:	4614      	mov	r4, r2
 8013244:	460e      	mov	r6, r1
 8013246:	461f      	mov	r7, r3
 8013248:	f10d 0c1c 	add.w	ip, sp, #28
 801324c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8013250:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8013254:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8013258:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801325c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013260:	f8de 3000 	ldr.w	r3, [lr]
 8013264:	f104 0e14 	add.w	lr, r4, #20
 8013268:	f8cc 3000 	str.w	r3, [ip]
 801326c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8013270:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013274:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013278:	f8de 3000 	ldr.w	r3, [lr]
 801327c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8013280:	f8cc 3000 	str.w	r3, [ip]
 8013284:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8013288:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801328c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013290:	f8de 3000 	ldr.w	r3, [lr]
 8013294:	4631      	mov	r1, r6
 8013296:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013298:	4628      	mov	r0, r5
 801329a:	f8cc 3000 	str.w	r3, [ip]
 801329e:	682b      	ldr	r3, [r5, #0]
 80132a0:	9201      	str	r2, [sp, #4]
 80132a2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80132a4:	f8cd 8008 	str.w	r8, [sp, #8]
 80132a8:	9200      	str	r2, [sp, #0]
 80132aa:	aa07      	add	r2, sp, #28
 80132ac:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80132b0:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 80132b4:	463b      	mov	r3, r7
 80132b6:	47d8      	blx	fp
 80132b8:	46a6      	mov	lr, r4
 80132ba:	f10d 0c1c 	add.w	ip, sp, #28
 80132be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80132c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80132c6:	f8de 3000 	ldr.w	r3, [lr]
 80132ca:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80132ce:	343c      	adds	r4, #60	; 0x3c
 80132d0:	f8cc 3000 	str.w	r3, [ip]
 80132d4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80132d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80132dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80132e0:	f8de 3000 	ldr.w	r3, [lr]
 80132e4:	f8cc 3000 	str.w	r3, [ip]
 80132e8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80132ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80132ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80132f2:	6823      	ldr	r3, [r4, #0]
 80132f4:	4631      	mov	r1, r6
 80132f6:	4628      	mov	r0, r5
 80132f8:	f8cc 3000 	str.w	r3, [ip]
 80132fc:	682b      	ldr	r3, [r5, #0]
 80132fe:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8013302:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013304:	f8cd 8008 	str.w	r8, [sp, #8]
 8013308:	9201      	str	r2, [sp, #4]
 801330a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801330c:	9200      	str	r2, [sp, #0]
 801330e:	aa07      	add	r2, sp, #28
 8013310:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8013312:	463b      	mov	r3, r7
 8013314:	47a0      	blx	r4
 8013316:	b017      	add	sp, #92	; 0x5c
 8013318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801331c <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801331c:	2000      	movs	r0, #0
 801331e:	4770      	bx	lr

08013320 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8013320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013324:	b08d      	sub	sp, #52	; 0x34
 8013326:	4688      	mov	r8, r1
 8013328:	f8d3 c000 	ldr.w	ip, [r3]
 801332c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801332e:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8013332:	680f      	ldr	r7, [r1, #0]
 8013334:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8013338:	eba7 070c 	sub.w	r7, r7, ip
 801333c:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8013340:	edd3 6a07 	vldr	s13, [r3, #28]
 8013344:	42bc      	cmp	r4, r7
 8013346:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013348:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801334c:	bfa8      	it	ge
 801334e:	463c      	movge	r4, r7
 8013350:	f9b1 9000 	ldrsh.w	r9, [r1]
 8013354:	f9ba 1000 	ldrsh.w	r1, [sl]
 8013358:	ee07 4a90 	vmov	s15, r4
 801335c:	eb09 0e0c 	add.w	lr, r9, ip
 8013360:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8013364:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8013368:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801336c:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8013370:	4571      	cmp	r1, lr
 8013372:	ee25 4a04 	vmul.f32	s8, s10, s8
 8013376:	ee65 4a24 	vmul.f32	s9, s10, s9
 801337a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801337e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013382:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8013386:	ee32 1a05 	vadd.f32	s2, s4, s10
 801338a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801338e:	ee36 0a84 	vadd.f32	s0, s13, s8
 8013392:	ee61 1a87 	vmul.f32	s3, s3, s14
 8013396:	ee22 2a07 	vmul.f32	s4, s4, s14
 801339a:	f340 808c 	ble.w	80134b6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801339e:	eba1 060e 	sub.w	r6, r1, lr
 80133a2:	fb96 f5f4 	sdiv	r5, r6, r4
 80133a6:	ee07 5a10 	vmov	s14, r5
 80133aa:	2d00      	cmp	r5, #0
 80133ac:	fb04 6615 	mls	r6, r4, r5, r6
 80133b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80133b4:	eea7 0a04 	vfma.f32	s0, s14, s8
 80133b8:	eee7 0a24 	vfma.f32	s1, s14, s9
 80133bc:	eea7 1a05 	vfma.f32	s2, s14, s10
 80133c0:	dd12      	ble.n	80133e8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80133c2:	ee70 6a44 	vsub.f32	s13, s0, s8
 80133c6:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80133ca:	ee31 2a45 	vsub.f32	s4, s2, s10
 80133ce:	eef5 6a40 	vcmp.f32	s13, #0.0
 80133d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133d6:	bf14      	ite	ne
 80133d8:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80133dc:	eeb0 7a67 	vmoveq.f32	s14, s15
 80133e0:	ee61 1a87 	vmul.f32	s3, s3, s14
 80133e4:	ee22 2a07 	vmul.f32	s4, s4, s14
 80133e8:	fb05 f204 	mul.w	r2, r5, r4
 80133ec:	1abf      	subs	r7, r7, r2
 80133ee:	4494      	add	ip, r2
 80133f0:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80133f4:	4411      	add	r1, r2
 80133f6:	eb09 020c 	add.w	r2, r9, ip
 80133fa:	b209      	sxth	r1, r1
 80133fc:	443a      	add	r2, r7
 80133fe:	428a      	cmp	r2, r1
 8013400:	bfc4      	itt	gt
 8013402:	eba1 0209 	subgt.w	r2, r1, r9
 8013406:	eba2 070c 	subgt.w	r7, r2, ip
 801340a:	2f00      	cmp	r7, #0
 801340c:	dd50      	ble.n	80134b0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801340e:	fb97 f1f4 	sdiv	r1, r7, r4
 8013412:	fb04 7211 	mls	r2, r4, r1, r7
 8013416:	b90a      	cbnz	r2, 801341c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8013418:	3901      	subs	r1, #1
 801341a:	4622      	mov	r2, r4
 801341c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8013420:	6840      	ldr	r0, [r0, #4]
 8013422:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8013426:	44b6      	add	lr, r6
 8013428:	f8d0 a000 	ldr.w	sl, [r0]
 801342c:	2900      	cmp	r1, #0
 801342e:	bfcc      	ite	gt
 8013430:	46a1      	movgt	r9, r4
 8013432:	4691      	movle	r9, r2
 8013434:	900b      	str	r0, [sp, #44]	; 0x2c
 8013436:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8013438:	fb04 e505 	mla	r5, r4, r5, lr
 801343c:	eef0 6a42 	vmov.f32	s13, s4
 8013440:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8013444:	9008      	str	r0, [sp, #32]
 8013446:	eeb0 7a61 	vmov.f32	s14, s3
 801344a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801344c:	695b      	ldr	r3, [r3, #20]
 801344e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8013452:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8013456:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801345a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801345c:	445b      	add	r3, fp
 801345e:	9307      	str	r3, [sp, #28]
 8013460:	ee16 3a90 	vmov	r3, s13
 8013464:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8013468:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801346c:	ee21 3a23 	vmul.f32	s6, s2, s7
 8013470:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8013474:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8013478:	ee17 7a90 	vmov	r7, s15
 801347c:	ee73 7a42 	vsub.f32	s15, s6, s4
 8013480:	fb97 f7f4 	sdiv	r7, r7, r4
 8013484:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8013488:	ee17 ca90 	vmov	ip, s15
 801348c:	fb9c fcf4 	sdiv	ip, ip, r4
 8013490:	fb0c 3306 	mla	r3, ip, r6, r3
 8013494:	9302      	str	r3, [sp, #8]
 8013496:	ee17 3a10 	vmov	r3, s14
 801349a:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801349e:	fb07 3706 	mla	r7, r7, r6, r3
 80134a2:	eba9 0306 	sub.w	r3, r9, r6
 80134a6:	e9cd 4700 	strd	r4, r7, [sp]
 80134aa:	f8da 4008 	ldr.w	r4, [sl, #8]
 80134ae:	47a0      	blx	r4
 80134b0:	b00d      	add	sp, #52	; 0x34
 80134b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134b6:	2500      	movs	r5, #0
 80134b8:	462e      	mov	r6, r5
 80134ba:	e799      	b.n	80133f0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080134bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80134bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134c0:	b0db      	sub	sp, #364	; 0x16c
 80134c2:	461d      	mov	r5, r3
 80134c4:	4614      	mov	r4, r2
 80134c6:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 80134ca:	910f      	str	r1, [sp, #60]	; 0x3c
 80134cc:	4629      	mov	r1, r5
 80134ce:	930a      	str	r3, [sp, #40]	; 0x28
 80134d0:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 80134d4:	9009      	str	r0, [sp, #36]	; 0x24
 80134d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80134d8:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 80134dc:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 80134e0:	9310      	str	r3, [sp, #64]	; 0x40
 80134e2:	6803      	ldr	r3, [r0, #0]
 80134e4:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 80134e6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80134ea:	47b8      	blx	r7
 80134ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134ee:	6058      	str	r0, [r3, #4]
 80134f0:	2800      	cmp	r0, #0
 80134f2:	f000 83a1 	beq.w	8013c38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80134f6:	682b      	ldr	r3, [r5, #0]
 80134f8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80134fc:	ed94 7a02 	vldr	s14, [r4, #8]
 8013500:	9314      	str	r3, [sp, #80]	; 0x50
 8013502:	686b      	ldr	r3, [r5, #4]
 8013504:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013508:	9315      	str	r3, [sp, #84]	; 0x54
 801350a:	4bc1      	ldr	r3, [pc, #772]	; (8013810 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801350c:	7819      	ldrb	r1, [r3, #0]
 801350e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8013512:	2900      	cmp	r1, #0
 8013514:	bf16      	itet	ne
 8013516:	4619      	movne	r1, r3
 8013518:	4611      	moveq	r1, r2
 801351a:	4613      	movne	r3, r2
 801351c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013520:	9116      	str	r1, [sp, #88]	; 0x58
 8013522:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8013526:	f240 8387 	bls.w	8013c38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801352a:	ed94 7a07 	vldr	s14, [r4, #28]
 801352e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013536:	f240 837f 	bls.w	8013c38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801353a:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801353e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013546:	f240 8377 	bls.w	8013c38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801354a:	6822      	ldr	r2, [r4, #0]
 801354c:	4bb1      	ldr	r3, [pc, #708]	; (8013814 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801354e:	429a      	cmp	r2, r3
 8013550:	f2c0 8372 	blt.w	8013c38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013554:	49b0      	ldr	r1, [pc, #704]	; (8013818 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8013556:	6963      	ldr	r3, [r4, #20]
 8013558:	428a      	cmp	r2, r1
 801355a:	f300 836d 	bgt.w	8013c38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801355e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8013562:	48ae      	ldr	r0, [pc, #696]	; (801381c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8013564:	33ff      	adds	r3, #255	; 0xff
 8013566:	4283      	cmp	r3, r0
 8013568:	f200 8366 	bhi.w	8013c38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801356c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801356e:	4dac      	ldr	r5, [pc, #688]	; (8013820 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8013570:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8013574:	33ff      	adds	r3, #255	; 0xff
 8013576:	42ab      	cmp	r3, r5
 8013578:	f200 835e 	bhi.w	8013c38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801357c:	6862      	ldr	r2, [r4, #4]
 801357e:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8013582:	33ff      	adds	r3, #255	; 0xff
 8013584:	4283      	cmp	r3, r0
 8013586:	f200 8357 	bhi.w	8013c38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801358a:	69a1      	ldr	r1, [r4, #24]
 801358c:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8013590:	33ff      	adds	r3, #255	; 0xff
 8013592:	4283      	cmp	r3, r0
 8013594:	f200 8350 	bhi.w	8013c38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013598:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801359a:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801359e:	30ff      	adds	r0, #255	; 0xff
 80135a0:	42a8      	cmp	r0, r5
 80135a2:	f200 8349 	bhi.w	8013c38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80135a6:	428a      	cmp	r2, r1
 80135a8:	f280 8110 	bge.w	80137cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80135ac:	429a      	cmp	r2, r3
 80135ae:	f300 8119 	bgt.w	80137e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80135b2:	4299      	cmp	r1, r3
 80135b4:	f280 811d 	bge.w	80137f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80135b8:	2502      	movs	r5, #2
 80135ba:	2701      	movs	r7, #1
 80135bc:	46a9      	mov	r9, r5
 80135be:	46b8      	mov	r8, r7
 80135c0:	f04f 0a00 	mov.w	sl, #0
 80135c4:	4621      	mov	r1, r4
 80135c6:	a849      	add	r0, sp, #292	; 0x124
 80135c8:	f002 ff86 	bl	80164d8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80135cc:	4622      	mov	r2, r4
 80135ce:	4653      	mov	r3, sl
 80135d0:	a949      	add	r1, sp, #292	; 0x124
 80135d2:	f8cd 9000 	str.w	r9, [sp]
 80135d6:	a819      	add	r0, sp, #100	; 0x64
 80135d8:	f003 f8ae 	bl	8016738 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80135dc:	4622      	mov	r2, r4
 80135de:	4653      	mov	r3, sl
 80135e0:	a949      	add	r1, sp, #292	; 0x124
 80135e2:	f8cd 8000 	str.w	r8, [sp]
 80135e6:	a829      	add	r0, sp, #164	; 0xa4
 80135e8:	f003 f8a6 	bl	8016738 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80135ec:	4643      	mov	r3, r8
 80135ee:	4622      	mov	r2, r4
 80135f0:	a949      	add	r1, sp, #292	; 0x124
 80135f2:	f8cd 9000 	str.w	r9, [sp]
 80135f6:	a839      	add	r0, sp, #228	; 0xe4
 80135f8:	f003 f89e 	bl	8016738 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80135fc:	42af      	cmp	r7, r5
 80135fe:	af12      	add	r7, sp, #72	; 0x48
 8013600:	bfb7      	itett	lt
 8013602:	2300      	movlt	r3, #0
 8013604:	2301      	movge	r3, #1
 8013606:	ad29      	addlt	r5, sp, #164	; 0xa4
 8013608:	ac19      	addlt	r4, sp, #100	; 0x64
 801360a:	bfb1      	iteee	lt
 801360c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801360e:	ad19      	addge	r5, sp, #100	; 0x64
 8013610:	930e      	strge	r3, [sp, #56]	; 0x38
 8013612:	ac29      	addge	r4, sp, #164	; 0xa4
 8013614:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013616:	e893 0003 	ldmia.w	r3, {r0, r1}
 801361a:	e887 0003 	stmia.w	r7, {r0, r1}
 801361e:	b928      	cbnz	r0, 801362c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8013620:	4b80      	ldr	r3, [pc, #512]	; (8013824 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8013622:	6818      	ldr	r0, [r3, #0]
 8013624:	6803      	ldr	r3, [r0, #0]
 8013626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013628:	4798      	blx	r3
 801362a:	6038      	str	r0, [r7, #0]
 801362c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801362e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8013632:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013636:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8013638:	930c      	str	r3, [sp, #48]	; 0x30
 801363a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801363c:	6963      	ldr	r3, [r4, #20]
 801363e:	440b      	add	r3, r1
 8013640:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8013644:	4408      	add	r0, r1
 8013646:	b200      	sxth	r0, r0
 8013648:	4283      	cmp	r3, r0
 801364a:	900d      	str	r0, [sp, #52]	; 0x34
 801364c:	f280 80dd 	bge.w	801380a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8013650:	428b      	cmp	r3, r1
 8013652:	da08      	bge.n	8013666 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8013654:	2a00      	cmp	r2, #0
 8013656:	dd06      	ble.n	8013666 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8013658:	1acb      	subs	r3, r1, r3
 801365a:	429a      	cmp	r2, r3
 801365c:	f2c0 80e4 	blt.w	8013828 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8013660:	2b00      	cmp	r3, #0
 8013662:	f300 80e2 	bgt.w	801382a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8013666:	6967      	ldr	r7, [r4, #20]
 8013668:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801366c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801366e:	443b      	add	r3, r7
 8013670:	461f      	mov	r7, r3
 8013672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013674:	1bdf      	subs	r7, r3, r7
 8013676:	4297      	cmp	r7, r2
 8013678:	bfa8      	it	ge
 801367a:	4617      	movge	r7, r2
 801367c:	2f00      	cmp	r7, #0
 801367e:	f340 8166 	ble.w	801394e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8013682:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8013684:	6829      	ldr	r1, [r5, #0]
 8013686:	f9b3 2000 	ldrsh.w	r2, [r3]
 801368a:	f9bb 3000 	ldrsh.w	r3, [fp]
 801368e:	4411      	add	r1, r2
 8013690:	6820      	ldr	r0, [r4, #0]
 8013692:	4299      	cmp	r1, r3
 8013694:	dd1a      	ble.n	80136cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8013696:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801369a:	4402      	add	r2, r0
 801369c:	440b      	add	r3, r1
 801369e:	b21b      	sxth	r3, r3
 80136a0:	429a      	cmp	r2, r3
 80136a2:	dc13      	bgt.n	80136cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80136a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80136a6:	a912      	add	r1, sp, #72	; 0x48
 80136a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	9206      	str	r2, [sp, #24]
 80136b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80136b2:	9500      	str	r5, [sp, #0]
 80136b4:	9205      	str	r2, [sp, #20]
 80136b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80136b8:	e9cd b203 	strd	fp, r2, [sp, #12]
 80136bc:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80136be:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80136c2:	aa49      	add	r2, sp, #292	; 0x124
 80136c4:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80136c8:	4623      	mov	r3, r4
 80136ca:	47c8      	blx	r9
 80136cc:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80136d0:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80136d4:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80136d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80136dc:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80136e0:	68a1      	ldr	r1, [r4, #8]
 80136e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80136e6:	ed94 6a08 	vldr	s12, [r4, #32]
 80136ea:	edd4 6a07 	vldr	s13, [r4, #28]
 80136ee:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80136f2:	ee76 6a86 	vadd.f32	s13, s13, s12
 80136f6:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80136fa:	e9d4 2300 	ldrd	r2, r3, [r4]
 80136fe:	edc4 6a07 	vstr	s13, [r4, #28]
 8013702:	441a      	add	r2, r3
 8013704:	6963      	ldr	r3, [r4, #20]
 8013706:	3301      	adds	r3, #1
 8013708:	6022      	str	r2, [r4, #0]
 801370a:	6163      	str	r3, [r4, #20]
 801370c:	69a3      	ldr	r3, [r4, #24]
 801370e:	3b01      	subs	r3, #1
 8013710:	61a3      	str	r3, [r4, #24]
 8013712:	6923      	ldr	r3, [r4, #16]
 8013714:	440b      	add	r3, r1
 8013716:	68e1      	ldr	r1, [r4, #12]
 8013718:	428b      	cmp	r3, r1
 801371a:	6123      	str	r3, [r4, #16]
 801371c:	db15      	blt.n	801374a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801371e:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8013722:	3201      	adds	r2, #1
 8013724:	1a5b      	subs	r3, r3, r1
 8013726:	ee76 6a26 	vadd.f32	s13, s12, s13
 801372a:	6022      	str	r2, [r4, #0]
 801372c:	6123      	str	r3, [r4, #16]
 801372e:	edc4 6a07 	vstr	s13, [r4, #28]
 8013732:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8013736:	ee36 7a87 	vadd.f32	s14, s13, s14
 801373a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801373e:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8013742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013746:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801374a:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801374e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8013752:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8013756:	ee37 7a27 	vadd.f32	s14, s14, s15
 801375a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801375e:	68a9      	ldr	r1, [r5, #8]
 8013760:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013764:	ed95 6a08 	vldr	s12, [r5, #32]
 8013768:	edd5 6a07 	vldr	s13, [r5, #28]
 801376c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8013770:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013774:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8013778:	e9d5 2300 	ldrd	r2, r3, [r5]
 801377c:	edc5 6a07 	vstr	s13, [r5, #28]
 8013780:	441a      	add	r2, r3
 8013782:	696b      	ldr	r3, [r5, #20]
 8013784:	3301      	adds	r3, #1
 8013786:	602a      	str	r2, [r5, #0]
 8013788:	616b      	str	r3, [r5, #20]
 801378a:	69ab      	ldr	r3, [r5, #24]
 801378c:	3b01      	subs	r3, #1
 801378e:	61ab      	str	r3, [r5, #24]
 8013790:	692b      	ldr	r3, [r5, #16]
 8013792:	440b      	add	r3, r1
 8013794:	68e9      	ldr	r1, [r5, #12]
 8013796:	428b      	cmp	r3, r1
 8013798:	612b      	str	r3, [r5, #16]
 801379a:	db15      	blt.n	80137c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801379c:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80137a0:	3201      	adds	r2, #1
 80137a2:	1a5b      	subs	r3, r3, r1
 80137a4:	ee76 6a26 	vadd.f32	s13, s12, s13
 80137a8:	602a      	str	r2, [r5, #0]
 80137aa:	612b      	str	r3, [r5, #16]
 80137ac:	edc5 6a07 	vstr	s13, [r5, #28]
 80137b0:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80137b4:	ee36 7a87 	vadd.f32	s14, s13, s14
 80137b8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80137bc:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80137c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80137c4:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80137c8:	3f01      	subs	r7, #1
 80137ca:	e757      	b.n	801367c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 80137cc:	4299      	cmp	r1, r3
 80137ce:	dc13      	bgt.n	80137f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80137d0:	429a      	cmp	r2, r3
 80137d2:	da14      	bge.n	80137fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80137d4:	2502      	movs	r5, #2
 80137d6:	2703      	movs	r7, #3
 80137d8:	f04f 0800 	mov.w	r8, #0
 80137dc:	46a9      	mov	r9, r5
 80137de:	f04f 0a01 	mov.w	sl, #1
 80137e2:	e6ef      	b.n	80135c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80137e4:	2501      	movs	r5, #1
 80137e6:	2700      	movs	r7, #0
 80137e8:	46a9      	mov	r9, r5
 80137ea:	46b8      	mov	r8, r7
 80137ec:	f04f 0a02 	mov.w	sl, #2
 80137f0:	e6e8      	b.n	80135c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80137f2:	2501      	movs	r5, #1
 80137f4:	2702      	movs	r7, #2
 80137f6:	e6e1      	b.n	80135bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80137f8:	2500      	movs	r5, #0
 80137fa:	2701      	movs	r7, #1
 80137fc:	e7f4      	b.n	80137e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80137fe:	2702      	movs	r7, #2
 8013800:	2503      	movs	r5, #3
 8013802:	f04f 0900 	mov.w	r9, #0
 8013806:	46b8      	mov	r8, r7
 8013808:	e7e9      	b.n	80137de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801380a:	4613      	mov	r3, r2
 801380c:	e728      	b.n	8013660 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801380e:	bf00      	nop
 8013810:	2400ae9c 	.word	0x2400ae9c
 8013814:	fffd8f01 	.word	0xfffd8f01
 8013818:	00027100 	.word	0x00027100
 801381c:	0004e1ff 	.word	0x0004e1ff
 8013820:	0004e1fe 	.word	0x0004e1fe
 8013824:	2400aea4 	.word	0x2400aea4
 8013828:	4613      	mov	r3, r2
 801382a:	992b      	ldr	r1, [sp, #172]	; 0xac
 801382c:	469e      	mov	lr, r3
 801382e:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8013830:	469c      	mov	ip, r3
 8013832:	9111      	str	r1, [sp, #68]	; 0x44
 8013834:	f04f 0900 	mov.w	r9, #0
 8013838:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801383c:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8013840:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8013844:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8013848:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801384c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8013850:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8013854:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8013858:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801385c:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8013860:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8013864:	f1bc 0f00 	cmp.w	ip, #0
 8013868:	d147      	bne.n	80138fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801386a:	eb03 0c07 	add.w	ip, r3, r7
 801386e:	1ad7      	subs	r7, r2, r3
 8013870:	f1b9 0f00 	cmp.w	r9, #0
 8013874:	d009      	beq.n	801388a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8013876:	9029      	str	r0, [sp, #164]	; 0xa4
 8013878:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801387c:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8013880:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8013884:	912d      	str	r1, [sp, #180]	; 0xb4
 8013886:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801388a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801388c:	f04f 0800 	mov.w	r8, #0
 8013890:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8013894:	9111      	str	r1, [sp, #68]	; 0x44
 8013896:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801389a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801389e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80138a2:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80138a6:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80138aa:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80138ae:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80138b2:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80138b6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80138ba:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80138be:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80138c2:	f1be 0f00 	cmp.w	lr, #0
 80138c6:	d031      	beq.n	801392c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80138c8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80138ca:	4450      	add	r0, sl
 80138cc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80138d0:	4431      	add	r1, r6
 80138d2:	ee37 7a04 	vadd.f32	s14, s14, s8
 80138d6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80138da:	4549      	cmp	r1, r9
 80138dc:	db08      	blt.n	80138f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 80138de:	ee77 7a85 	vadd.f32	s15, s15, s10
 80138e2:	3001      	adds	r0, #1
 80138e4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80138e8:	eba1 0109 	sub.w	r1, r1, r9
 80138ec:	ee37 7a06 	vadd.f32	s14, s14, s12
 80138f0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80138f4:	f04f 0801 	mov.w	r8, #1
 80138f8:	e7e3      	b.n	80138c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80138fa:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80138fc:	4450      	add	r0, sl
 80138fe:	ee37 7a24 	vadd.f32	s14, s14, s9
 8013902:	4431      	add	r1, r6
 8013904:	ee77 7a84 	vadd.f32	s15, s15, s8
 8013908:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801390c:	4541      	cmp	r1, r8
 801390e:	db08      	blt.n	8013922 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8013910:	ee76 6a85 	vadd.f32	s13, s13, s10
 8013914:	3001      	adds	r0, #1
 8013916:	ee37 7a25 	vadd.f32	s14, s14, s11
 801391a:	eba1 0108 	sub.w	r1, r1, r8
 801391e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8013922:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013926:	f04f 0901 	mov.w	r9, #1
 801392a:	e79b      	b.n	8013864 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801392c:	449c      	add	ip, r3
 801392e:	1aff      	subs	r7, r7, r3
 8013930:	f1b8 0f00 	cmp.w	r8, #0
 8013934:	d009      	beq.n	801394a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8013936:	9019      	str	r0, [sp, #100]	; 0x64
 8013938:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801393c:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8013940:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8013944:	911d      	str	r1, [sp, #116]	; 0x74
 8013946:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801394a:	1ad2      	subs	r2, r2, r3
 801394c:	e68b      	b.n	8013666 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801394e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013950:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8013952:	2b00      	cmp	r3, #0
 8013954:	f000 80d1 	beq.w	8013afa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8013958:	ad19      	add	r5, sp, #100	; 0x64
 801395a:	ac39      	add	r4, sp, #228	; 0xe4
 801395c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801395e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8013962:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013966:	930c      	str	r3, [sp, #48]	; 0x30
 8013968:	990c      	ldr	r1, [sp, #48]	; 0x30
 801396a:	6963      	ldr	r3, [r4, #20]
 801396c:	440b      	add	r3, r1
 801396e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8013972:	4408      	add	r0, r1
 8013974:	b200      	sxth	r0, r0
 8013976:	4283      	cmp	r3, r0
 8013978:	900d      	str	r0, [sp, #52]	; 0x34
 801397a:	f280 80c1 	bge.w	8013b00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801397e:	428b      	cmp	r3, r1
 8013980:	da08      	bge.n	8013994 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8013982:	2a00      	cmp	r2, #0
 8013984:	dd06      	ble.n	8013994 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8013986:	1acb      	subs	r3, r1, r3
 8013988:	429a      	cmp	r2, r3
 801398a:	f2c0 80bb 	blt.w	8013b04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801398e:	2b00      	cmp	r3, #0
 8013990:	f300 80b9 	bgt.w	8013b06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8013994:	6967      	ldr	r7, [r4, #20]
 8013996:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801399a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801399c:	443b      	add	r3, r7
 801399e:	461f      	mov	r7, r3
 80139a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80139a2:	1bdf      	subs	r7, r3, r7
 80139a4:	4297      	cmp	r7, r2
 80139a6:	bfa8      	it	ge
 80139a8:	4617      	movge	r7, r2
 80139aa:	2f00      	cmp	r7, #0
 80139ac:	f340 813c 	ble.w	8013c28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 80139b0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80139b2:	6829      	ldr	r1, [r5, #0]
 80139b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80139b8:	f9bb 3000 	ldrsh.w	r3, [fp]
 80139bc:	4411      	add	r1, r2
 80139be:	6820      	ldr	r0, [r4, #0]
 80139c0:	4299      	cmp	r1, r3
 80139c2:	dd1a      	ble.n	80139fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80139c4:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80139c8:	4402      	add	r2, r0
 80139ca:	440b      	add	r3, r1
 80139cc:	b21b      	sxth	r3, r3
 80139ce:	429a      	cmp	r2, r3
 80139d0:	dc13      	bgt.n	80139fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80139d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80139d4:	a912      	add	r1, sp, #72	; 0x48
 80139d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	9206      	str	r2, [sp, #24]
 80139de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80139e0:	9500      	str	r5, [sp, #0]
 80139e2:	9205      	str	r2, [sp, #20]
 80139e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80139e6:	e9cd b203 	strd	fp, r2, [sp, #12]
 80139ea:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80139ec:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80139f0:	aa49      	add	r2, sp, #292	; 0x124
 80139f2:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80139f6:	4623      	mov	r3, r4
 80139f8:	47c8      	blx	r9
 80139fa:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80139fe:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8013a02:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8013a06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013a0a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8013a0e:	68a1      	ldr	r1, [r4, #8]
 8013a10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013a14:	ed94 6a08 	vldr	s12, [r4, #32]
 8013a18:	edd4 6a07 	vldr	s13, [r4, #28]
 8013a1c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8013a20:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013a24:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8013a28:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013a2c:	edc4 6a07 	vstr	s13, [r4, #28]
 8013a30:	441a      	add	r2, r3
 8013a32:	6963      	ldr	r3, [r4, #20]
 8013a34:	3301      	adds	r3, #1
 8013a36:	6022      	str	r2, [r4, #0]
 8013a38:	6163      	str	r3, [r4, #20]
 8013a3a:	69a3      	ldr	r3, [r4, #24]
 8013a3c:	3b01      	subs	r3, #1
 8013a3e:	61a3      	str	r3, [r4, #24]
 8013a40:	6923      	ldr	r3, [r4, #16]
 8013a42:	440b      	add	r3, r1
 8013a44:	68e1      	ldr	r1, [r4, #12]
 8013a46:	428b      	cmp	r3, r1
 8013a48:	6123      	str	r3, [r4, #16]
 8013a4a:	db15      	blt.n	8013a78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8013a4c:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8013a50:	3201      	adds	r2, #1
 8013a52:	1a5b      	subs	r3, r3, r1
 8013a54:	ee76 6a26 	vadd.f32	s13, s12, s13
 8013a58:	6022      	str	r2, [r4, #0]
 8013a5a:	6123      	str	r3, [r4, #16]
 8013a5c:	edc4 6a07 	vstr	s13, [r4, #28]
 8013a60:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8013a64:	ee36 7a87 	vadd.f32	s14, s13, s14
 8013a68:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8013a6c:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8013a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013a74:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8013a78:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8013a7c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8013a80:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8013a84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013a88:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8013a8c:	68a9      	ldr	r1, [r5, #8]
 8013a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013a92:	ed95 6a08 	vldr	s12, [r5, #32]
 8013a96:	edd5 6a07 	vldr	s13, [r5, #28]
 8013a9a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8013a9e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013aa2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8013aa6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013aaa:	edc5 6a07 	vstr	s13, [r5, #28]
 8013aae:	441a      	add	r2, r3
 8013ab0:	696b      	ldr	r3, [r5, #20]
 8013ab2:	3301      	adds	r3, #1
 8013ab4:	602a      	str	r2, [r5, #0]
 8013ab6:	616b      	str	r3, [r5, #20]
 8013ab8:	69ab      	ldr	r3, [r5, #24]
 8013aba:	3b01      	subs	r3, #1
 8013abc:	61ab      	str	r3, [r5, #24]
 8013abe:	692b      	ldr	r3, [r5, #16]
 8013ac0:	440b      	add	r3, r1
 8013ac2:	68e9      	ldr	r1, [r5, #12]
 8013ac4:	428b      	cmp	r3, r1
 8013ac6:	612b      	str	r3, [r5, #16]
 8013ac8:	db15      	blt.n	8013af6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8013aca:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8013ace:	3201      	adds	r2, #1
 8013ad0:	1a5b      	subs	r3, r3, r1
 8013ad2:	ee76 6a26 	vadd.f32	s13, s12, s13
 8013ad6:	602a      	str	r2, [r5, #0]
 8013ad8:	612b      	str	r3, [r5, #16]
 8013ada:	edc5 6a07 	vstr	s13, [r5, #28]
 8013ade:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8013ae2:	ee36 7a87 	vadd.f32	s14, s13, s14
 8013ae6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8013aea:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8013aee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013af2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8013af6:	3f01      	subs	r7, #1
 8013af8:	e757      	b.n	80139aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8013afa:	ad39      	add	r5, sp, #228	; 0xe4
 8013afc:	ac19      	add	r4, sp, #100	; 0x64
 8013afe:	e72d      	b.n	801395c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8013b00:	4613      	mov	r3, r2
 8013b02:	e744      	b.n	801398e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8013b04:	4613      	mov	r3, r2
 8013b06:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8013b08:	469e      	mov	lr, r3
 8013b0a:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8013b0e:	461f      	mov	r7, r3
 8013b10:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8013b14:	f04f 0900 	mov.w	r9, #0
 8013b18:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8013b1c:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8013b20:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8013b24:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8013b28:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8013b2c:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8013b2e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8013b32:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8013b36:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8013b3a:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8013b3e:	960e      	str	r6, [sp, #56]	; 0x38
 8013b40:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8013b44:	2f00      	cmp	r7, #0
 8013b46:	d146      	bne.n	8013bd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8013b48:	449c      	add	ip, r3
 8013b4a:	1ad7      	subs	r7, r2, r3
 8013b4c:	f1b9 0f00 	cmp.w	r9, #0
 8013b50:	d009      	beq.n	8013b66 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8013b52:	9039      	str	r0, [sp, #228]	; 0xe4
 8013b54:	913d      	str	r1, [sp, #244]	; 0xf4
 8013b56:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8013b5a:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8013b5e:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8013b62:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8013b66:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8013b68:	f04f 0800 	mov.w	r8, #0
 8013b6c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8013b70:	910e      	str	r1, [sp, #56]	; 0x38
 8013b72:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8013b76:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8013b7a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8013b7e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8013b82:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8013b86:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8013b8a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8013b8e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8013b92:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8013b96:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8013b9a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8013b9e:	f1be 0f00 	cmp.w	lr, #0
 8013ba2:	d030      	beq.n	8013c06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8013ba4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8013ba6:	4450      	add	r0, sl
 8013ba8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8013bac:	4431      	add	r1, r6
 8013bae:	ee37 7a04 	vadd.f32	s14, s14, s8
 8013bb2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8013bb6:	4549      	cmp	r1, r9
 8013bb8:	db08      	blt.n	8013bcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8013bba:	ee77 7a85 	vadd.f32	s15, s15, s10
 8013bbe:	3001      	adds	r0, #1
 8013bc0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8013bc4:	eba1 0109 	sub.w	r1, r1, r9
 8013bc8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8013bcc:	f10e 3eff 	add.w	lr, lr, #4294967295
 8013bd0:	f04f 0801 	mov.w	r8, #1
 8013bd4:	e7e3      	b.n	8013b9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8013bd6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8013bd8:	4450      	add	r0, sl
 8013bda:	ee37 7a24 	vadd.f32	s14, s14, s9
 8013bde:	4431      	add	r1, r6
 8013be0:	ee77 7a84 	vadd.f32	s15, s15, s8
 8013be4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8013be8:	4541      	cmp	r1, r8
 8013bea:	db08      	blt.n	8013bfe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8013bec:	ee76 6a85 	vadd.f32	s13, s13, s10
 8013bf0:	3001      	adds	r0, #1
 8013bf2:	ee37 7a25 	vadd.f32	s14, s14, s11
 8013bf6:	eba1 0108 	sub.w	r1, r1, r8
 8013bfa:	ee77 7a86 	vadd.f32	s15, s15, s12
 8013bfe:	3f01      	subs	r7, #1
 8013c00:	f04f 0901 	mov.w	r9, #1
 8013c04:	e79e      	b.n	8013b44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8013c06:	449c      	add	ip, r3
 8013c08:	1aff      	subs	r7, r7, r3
 8013c0a:	f1b8 0f00 	cmp.w	r8, #0
 8013c0e:	d009      	beq.n	8013c24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8013c10:	9019      	str	r0, [sp, #100]	; 0x64
 8013c12:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8013c16:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8013c1a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8013c1e:	911d      	str	r1, [sp, #116]	; 0x74
 8013c20:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8013c24:	1ad2      	subs	r2, r2, r3
 8013c26:	e6b5      	b.n	8013994 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8013c28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	b923      	cbnz	r3, 8013c38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013c2e:	4b04      	ldr	r3, [pc, #16]	; (8013c40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8013c30:	6818      	ldr	r0, [r3, #0]
 8013c32:	6803      	ldr	r3, [r0, #0]
 8013c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c36:	4798      	blx	r3
 8013c38:	b05b      	add	sp, #364	; 0x16c
 8013c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c3e:	bf00      	nop
 8013c40:	2400aea4 	.word	0x2400aea4

08013c44 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8013c44:	2b03      	cmp	r3, #3
 8013c46:	d818      	bhi.n	8013c7a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8013c48:	e8df f003 	tbb	[pc, r3]
 8013c4c:	130d0602 	.word	0x130d0602
 8013c50:	f9b0 2000 	ldrsh.w	r2, [r0]
 8013c54:	1850      	adds	r0, r2, r1
 8013c56:	4770      	bx	lr
 8013c58:	8803      	ldrh	r3, [r0, #0]
 8013c5a:	8880      	ldrh	r0, [r0, #4]
 8013c5c:	4418      	add	r0, r3
 8013c5e:	b200      	sxth	r0, r0
 8013c60:	1a80      	subs	r0, r0, r2
 8013c62:	3801      	subs	r0, #1
 8013c64:	4770      	bx	lr
 8013c66:	8803      	ldrh	r3, [r0, #0]
 8013c68:	8880      	ldrh	r0, [r0, #4]
 8013c6a:	4418      	add	r0, r3
 8013c6c:	b200      	sxth	r0, r0
 8013c6e:	1a40      	subs	r0, r0, r1
 8013c70:	e7f7      	b.n	8013c62 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8013c72:	f9b0 0000 	ldrsh.w	r0, [r0]
 8013c76:	4410      	add	r0, r2
 8013c78:	4770      	bx	lr
 8013c7a:	2000      	movs	r0, #0
 8013c7c:	4770      	bx	lr

08013c7e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8013c7e:	2b03      	cmp	r3, #3
 8013c80:	d817      	bhi.n	8013cb2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8013c82:	e8df f003 	tbb	[pc, r3]
 8013c86:	0602      	.short	0x0602
 8013c88:	1009      	.short	0x1009
 8013c8a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8013c8e:	1850      	adds	r0, r2, r1
 8013c90:	4770      	bx	lr
 8013c92:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8013c96:	e7fa      	b.n	8013c8e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8013c98:	8843      	ldrh	r3, [r0, #2]
 8013c9a:	88c0      	ldrh	r0, [r0, #6]
 8013c9c:	4418      	add	r0, r3
 8013c9e:	b200      	sxth	r0, r0
 8013ca0:	1a80      	subs	r0, r0, r2
 8013ca2:	3801      	subs	r0, #1
 8013ca4:	4770      	bx	lr
 8013ca6:	8843      	ldrh	r3, [r0, #2]
 8013ca8:	88c0      	ldrh	r0, [r0, #6]
 8013caa:	4418      	add	r0, r3
 8013cac:	b200      	sxth	r0, r0
 8013cae:	1a40      	subs	r0, r0, r1
 8013cb0:	e7f7      	b.n	8013ca2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8013cb2:	2000      	movs	r0, #0
 8013cb4:	4770      	bx	lr
	...

08013cb8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8013cb8:	4b01      	ldr	r3, [pc, #4]	; (8013cc0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8013cba:	2200      	movs	r2, #0
 8013cbc:	601a      	str	r2, [r3, #0]
 8013cbe:	4770      	bx	lr
 8013cc0:	2400aeac 	.word	0x2400aeac

08013cc4 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8013cc4:	4603      	mov	r3, r0
 8013cc6:	b1c8      	cbz	r0, 8013cfc <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8013cc8:	0c02      	lsrs	r2, r0, #16
 8013cca:	0412      	lsls	r2, r2, #16
 8013ccc:	b9a2      	cbnz	r2, 8013cf8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8013cce:	0403      	lsls	r3, r0, #16
 8013cd0:	2010      	movs	r0, #16
 8013cd2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013cd6:	bf04      	itt	eq
 8013cd8:	021b      	lsleq	r3, r3, #8
 8013cda:	3008      	addeq	r0, #8
 8013cdc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013ce0:	bf04      	itt	eq
 8013ce2:	011b      	lsleq	r3, r3, #4
 8013ce4:	3004      	addeq	r0, #4
 8013ce6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013cea:	bf04      	itt	eq
 8013cec:	009b      	lsleq	r3, r3, #2
 8013cee:	3002      	addeq	r0, #2
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	db04      	blt.n	8013cfe <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8013cf4:	3001      	adds	r0, #1
 8013cf6:	4770      	bx	lr
 8013cf8:	2000      	movs	r0, #0
 8013cfa:	e7ea      	b.n	8013cd2 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8013cfc:	2020      	movs	r0, #32
 8013cfe:	4770      	bx	lr

08013d00 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8013d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d04:	b087      	sub	sp, #28
 8013d06:	4681      	mov	r9, r0
 8013d08:	4698      	mov	r8, r3
 8013d0a:	4610      	mov	r0, r2
 8013d0c:	460d      	mov	r5, r1
 8013d0e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8013d12:	b981      	cbnz	r1, 8013d36 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8013d14:	b14b      	cbz	r3, 8013d2a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8013d16:	460b      	mov	r3, r1
 8013d18:	464a      	mov	r2, r9
 8013d1a:	4641      	mov	r1, r8
 8013d1c:	e9cd 4700 	strd	r4, r7, [sp]
 8013d20:	f7ff ffee 	bl	8013d00 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8013d24:	b007      	add	sp, #28
 8013d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8013d2e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8013d32:	603b      	str	r3, [r7, #0]
 8013d34:	e7f6      	b.n	8013d24 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8013d36:	fa32 fa01 	lsrs.w	sl, r2, r1
 8013d3a:	d107      	bne.n	8013d4c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8013d3c:	fb09 f602 	mul.w	r6, r9, r2
 8013d40:	fbb6 f0f4 	udiv	r0, r6, r4
 8013d44:	fb04 6610 	mls	r6, r4, r0, r6
 8013d48:	603e      	str	r6, [r7, #0]
 8013d4a:	e7eb      	b.n	8013d24 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8013d4c:	2601      	movs	r6, #1
 8013d4e:	fa09 fb01 	lsl.w	fp, r9, r1
 8013d52:	408e      	lsls	r6, r1
 8013d54:	fbbb f3f4 	udiv	r3, fp, r4
 8013d58:	3e01      	subs	r6, #1
 8013d5a:	9302      	str	r3, [sp, #8]
 8013d5c:	fb0a f303 	mul.w	r3, sl, r3
 8013d60:	4016      	ands	r6, r2
 8013d62:	9303      	str	r3, [sp, #12]
 8013d64:	4630      	mov	r0, r6
 8013d66:	f7ff ffad 	bl	8013cc4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8013d6a:	464a      	mov	r2, r9
 8013d6c:	460b      	mov	r3, r1
 8013d6e:	4601      	mov	r1, r0
 8013d70:	4630      	mov	r0, r6
 8013d72:	e9cd 4700 	strd	r4, r7, [sp]
 8013d76:	f7ff ffc3 	bl	8013d00 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8013d7a:	9b02      	ldr	r3, [sp, #8]
 8013d7c:	4606      	mov	r6, r0
 8013d7e:	eb05 0108 	add.w	r1, r5, r8
 8013d82:	fb04 bb13 	mls	fp, r4, r3, fp
 8013d86:	4658      	mov	r0, fp
 8013d88:	f7ff ff9c 	bl	8013cc4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8013d8c:	ab05      	add	r3, sp, #20
 8013d8e:	465a      	mov	r2, fp
 8013d90:	e9cd 4300 	strd	r4, r3, [sp]
 8013d94:	4603      	mov	r3, r0
 8013d96:	4650      	mov	r0, sl
 8013d98:	f7ff ffb2 	bl	8013d00 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8013d9c:	6839      	ldr	r1, [r7, #0]
 8013d9e:	9a05      	ldr	r2, [sp, #20]
 8013da0:	9b03      	ldr	r3, [sp, #12]
 8013da2:	4411      	add	r1, r2
 8013da4:	fbb1 f2f4 	udiv	r2, r1, r4
 8013da8:	18d3      	adds	r3, r2, r3
 8013daa:	fb04 1412 	mls	r4, r4, r2, r1
 8013dae:	441e      	add	r6, r3
 8013db0:	603c      	str	r4, [r7, #0]
 8013db2:	4430      	add	r0, r6
 8013db4:	e7b6      	b.n	8013d24 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08013db6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8013db6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013dba:	b085      	sub	sp, #20
 8013dbc:	f1b0 0900 	subs.w	r9, r0, #0
 8013dc0:	461d      	mov	r5, r3
 8013dc2:	4617      	mov	r7, r2
 8013dc4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8013dc6:	bfbb      	ittet	lt
 8013dc8:	f1c9 0900 	rsblt	r9, r9, #0
 8013dcc:	f04f 36ff 	movlt.w	r6, #4294967295
 8013dd0:	2601      	movge	r6, #1
 8013dd2:	6823      	ldrlt	r3, [r4, #0]
 8013dd4:	bfbc      	itt	lt
 8013dd6:	425b      	neglt	r3, r3
 8013dd8:	6023      	strlt	r3, [r4, #0]
 8013dda:	2a00      	cmp	r2, #0
 8013ddc:	da04      	bge.n	8013de8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8013dde:	6823      	ldr	r3, [r4, #0]
 8013de0:	4257      	negs	r7, r2
 8013de2:	4276      	negs	r6, r6
 8013de4:	425b      	negs	r3, r3
 8013de6:	6023      	str	r3, [r4, #0]
 8013de8:	2d00      	cmp	r5, #0
 8013dea:	4638      	mov	r0, r7
 8013dec:	bfba      	itte	lt
 8013dee:	426d      	neglt	r5, r5
 8013df0:	f04f 38ff 	movlt.w	r8, #4294967295
 8013df4:	f04f 0801 	movge.w	r8, #1
 8013df8:	f7ff ff64 	bl	8013cc4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8013dfc:	ab03      	add	r3, sp, #12
 8013dfe:	463a      	mov	r2, r7
 8013e00:	e9cd 5300 	strd	r5, r3, [sp]
 8013e04:	4603      	mov	r3, r0
 8013e06:	4648      	mov	r0, r9
 8013e08:	f7ff ff7a 	bl	8013d00 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8013e0c:	6823      	ldr	r3, [r4, #0]
 8013e0e:	9a03      	ldr	r2, [sp, #12]
 8013e10:	4546      	cmp	r6, r8
 8013e12:	441a      	add	r2, r3
 8013e14:	fb92 f3f5 	sdiv	r3, r2, r5
 8013e18:	4418      	add	r0, r3
 8013e1a:	fb05 2313 	mls	r3, r5, r3, r2
 8013e1e:	bf18      	it	ne
 8013e20:	4240      	negne	r0, r0
 8013e22:	1c72      	adds	r2, r6, #1
 8013e24:	6023      	str	r3, [r4, #0]
 8013e26:	d105      	bne.n	8013e34 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	f1c3 0200 	rsb	r2, r3, #0
 8013e2e:	db0b      	blt.n	8013e48 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8013e30:	6022      	str	r2, [r4, #0]
 8013e32:	e006      	b.n	8013e42 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8013e34:	2e01      	cmp	r6, #1
 8013e36:	d104      	bne.n	8013e42 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	da02      	bge.n	8013e42 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8013e3c:	442b      	add	r3, r5
 8013e3e:	3801      	subs	r0, #1
 8013e40:	6023      	str	r3, [r4, #0]
 8013e42:	b005      	add	sp, #20
 8013e44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e48:	3801      	subs	r0, #1
 8013e4a:	1b52      	subs	r2, r2, r5
 8013e4c:	e7f0      	b.n	8013e30 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08013e50 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8013e50:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8013e54:	4c1c      	ldr	r4, [pc, #112]	; (8013ec8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8013e56:	4605      	mov	r5, r0
 8013e58:	6807      	ldr	r7, [r0, #0]
 8013e5a:	69a3      	ldr	r3, [r4, #24]
 8013e5c:	b92b      	cbnz	r3, 8013e6a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8013e5e:	6840      	ldr	r0, [r0, #4]
 8013e60:	e9c5 7000 	strd	r7, r0, [r5]
 8013e64:	b004      	add	sp, #16
 8013e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e6a:	f04f 0802 	mov.w	r8, #2
 8013e6e:	68a2      	ldr	r2, [r4, #8]
 8013e70:	ae04      	add	r6, sp, #16
 8013e72:	6820      	ldr	r0, [r4, #0]
 8013e74:	fb93 f1f8 	sdiv	r1, r3, r8
 8013e78:	440a      	add	r2, r1
 8013e7a:	69e1      	ldr	r1, [r4, #28]
 8013e7c:	f846 2d04 	str.w	r2, [r6, #-4]!
 8013e80:	463a      	mov	r2, r7
 8013e82:	9600      	str	r6, [sp, #0]
 8013e84:	f7ff ff97 	bl	8013db6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8013e88:	69a3      	ldr	r3, [r4, #24]
 8013e8a:	4607      	mov	r7, r0
 8013e8c:	686a      	ldr	r2, [r5, #4]
 8013e8e:	6a21      	ldr	r1, [r4, #32]
 8013e90:	9600      	str	r6, [sp, #0]
 8013e92:	6860      	ldr	r0, [r4, #4]
 8013e94:	f7ff ff8f 	bl	8013db6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8013e98:	69a3      	ldr	r3, [r4, #24]
 8013e9a:	6962      	ldr	r2, [r4, #20]
 8013e9c:	4407      	add	r7, r0
 8013e9e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013ea0:	9600      	str	r6, [sp, #0]
 8013ea2:	68e0      	ldr	r0, [r4, #12]
 8013ea4:	fb93 f8f8 	sdiv	r8, r3, r8
 8013ea8:	4442      	add	r2, r8
 8013eaa:	9203      	str	r2, [sp, #12]
 8013eac:	682a      	ldr	r2, [r5, #0]
 8013eae:	f7ff ff82 	bl	8013db6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8013eb2:	4680      	mov	r8, r0
 8013eb4:	9600      	str	r6, [sp, #0]
 8013eb6:	69a3      	ldr	r3, [r4, #24]
 8013eb8:	686a      	ldr	r2, [r5, #4]
 8013eba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013ebc:	6920      	ldr	r0, [r4, #16]
 8013ebe:	f7ff ff7a 	bl	8013db6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8013ec2:	4440      	add	r0, r8
 8013ec4:	e7cc      	b.n	8013e60 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8013ec6:	bf00      	nop
 8013ec8:	2400aeb0 	.word	0x2400aeb0

08013ecc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8013ecc:	4b07      	ldr	r3, [pc, #28]	; (8013eec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8013ece:	781b      	ldrb	r3, [r3, #0]
 8013ed0:	2b01      	cmp	r3, #1
 8013ed2:	d109      	bne.n	8013ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8013ed4:	f9b1 3000 	ldrsh.w	r3, [r1]
 8013ed8:	f9b0 2000 	ldrsh.w	r2, [r0]
 8013edc:	8003      	strh	r3, [r0, #0]
 8013ede:	4b04      	ldr	r3, [pc, #16]	; (8013ef0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8013ee0:	881b      	ldrh	r3, [r3, #0]
 8013ee2:	3b01      	subs	r3, #1
 8013ee4:	1a9b      	subs	r3, r3, r2
 8013ee6:	800b      	strh	r3, [r1, #0]
 8013ee8:	4770      	bx	lr
 8013eea:	bf00      	nop
 8013eec:	2400ae9c 	.word	0x2400ae9c
 8013ef0:	2400ae98 	.word	0x2400ae98

08013ef4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8013ef4:	4b07      	ldr	r3, [pc, #28]	; (8013f14 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8013ef6:	b510      	push	{r4, lr}
 8013ef8:	781b      	ldrb	r3, [r3, #0]
 8013efa:	2b01      	cmp	r3, #1
 8013efc:	d108      	bne.n	8013f10 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8013efe:	4b06      	ldr	r3, [pc, #24]	; (8013f18 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8013f00:	880c      	ldrh	r4, [r1, #0]
 8013f02:	881b      	ldrh	r3, [r3, #0]
 8013f04:	f9b0 2000 	ldrsh.w	r2, [r0]
 8013f08:	3b01      	subs	r3, #1
 8013f0a:	1b1b      	subs	r3, r3, r4
 8013f0c:	8003      	strh	r3, [r0, #0]
 8013f0e:	800a      	strh	r2, [r1, #0]
 8013f10:	bd10      	pop	{r4, pc}
 8013f12:	bf00      	nop
 8013f14:	2400ae9c 	.word	0x2400ae9c
 8013f18:	2400ae98 	.word	0x2400ae98

08013f1c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8013f1c:	4b0a      	ldr	r3, [pc, #40]	; (8013f48 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8013f1e:	b510      	push	{r4, lr}
 8013f20:	781b      	ldrb	r3, [r3, #0]
 8013f22:	2b01      	cmp	r3, #1
 8013f24:	d10e      	bne.n	8013f44 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8013f26:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8013f2a:	8843      	ldrh	r3, [r0, #2]
 8013f2c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8013f30:	18ca      	adds	r2, r1, r3
 8013f32:	4b06      	ldr	r3, [pc, #24]	; (8013f4c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8013f34:	8044      	strh	r4, [r0, #2]
 8013f36:	881b      	ldrh	r3, [r3, #0]
 8013f38:	1a9b      	subs	r3, r3, r2
 8013f3a:	8003      	strh	r3, [r0, #0]
 8013f3c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013f40:	8081      	strh	r1, [r0, #4]
 8013f42:	80c3      	strh	r3, [r0, #6]
 8013f44:	bd10      	pop	{r4, pc}
 8013f46:	bf00      	nop
 8013f48:	2400ae9c 	.word	0x2400ae9c
 8013f4c:	2400ae98 	.word	0x2400ae98

08013f50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8013f50:	4b08      	ldr	r3, [pc, #32]	; (8013f74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8013f52:	781b      	ldrb	r3, [r3, #0]
 8013f54:	2b01      	cmp	r3, #1
 8013f56:	d10c      	bne.n	8013f72 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8013f58:	8803      	ldrh	r3, [r0, #0]
 8013f5a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8013f5e:	8842      	ldrh	r2, [r0, #2]
 8013f60:	8002      	strh	r2, [r0, #0]
 8013f62:	185a      	adds	r2, r3, r1
 8013f64:	4b04      	ldr	r3, [pc, #16]	; (8013f78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8013f66:	881b      	ldrh	r3, [r3, #0]
 8013f68:	1a9b      	subs	r3, r3, r2
 8013f6a:	8043      	strh	r3, [r0, #2]
 8013f6c:	88c3      	ldrh	r3, [r0, #6]
 8013f6e:	80c1      	strh	r1, [r0, #6]
 8013f70:	8083      	strh	r3, [r0, #4]
 8013f72:	4770      	bx	lr
 8013f74:	2400ae9c 	.word	0x2400ae9c
 8013f78:	2400ae98 	.word	0x2400ae98

08013f7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8013f7c:	4b07      	ldr	r3, [pc, #28]	; (8013f9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8013f7e:	b510      	push	{r4, lr}
 8013f80:	781b      	ldrb	r3, [r3, #0]
 8013f82:	2b01      	cmp	r3, #1
 8013f84:	d108      	bne.n	8013f98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8013f86:	f9b1 3000 	ldrsh.w	r3, [r1]
 8013f8a:	f9b0 4000 	ldrsh.w	r4, [r0]
 8013f8e:	8003      	strh	r3, [r0, #0]
 8013f90:	8893      	ldrh	r3, [r2, #4]
 8013f92:	3b01      	subs	r3, #1
 8013f94:	1b1b      	subs	r3, r3, r4
 8013f96:	800b      	strh	r3, [r1, #0]
 8013f98:	bd10      	pop	{r4, pc}
 8013f9a:	bf00      	nop
 8013f9c:	2400ae9c 	.word	0x2400ae9c

08013fa0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8013fa0:	4b0a      	ldr	r3, [pc, #40]	; (8013fcc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8013fa2:	460a      	mov	r2, r1
 8013fa4:	b510      	push	{r4, lr}
 8013fa6:	781b      	ldrb	r3, [r3, #0]
 8013fa8:	2b01      	cmp	r3, #1
 8013faa:	d10d      	bne.n	8013fc8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8013fac:	8881      	ldrh	r1, [r0, #4]
 8013fae:	8803      	ldrh	r3, [r0, #0]
 8013fb0:	440b      	add	r3, r1
 8013fb2:	4601      	mov	r1, r0
 8013fb4:	3b01      	subs	r3, #1
 8013fb6:	f821 3b02 	strh.w	r3, [r1], #2
 8013fba:	f7ff ffdf 	bl	8013f7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8013fbe:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013fc2:	88c2      	ldrh	r2, [r0, #6]
 8013fc4:	80c3      	strh	r3, [r0, #6]
 8013fc6:	8082      	strh	r2, [r0, #4]
 8013fc8:	bd10      	pop	{r4, pc}
 8013fca:	bf00      	nop
 8013fcc:	2400ae9c 	.word	0x2400ae9c

08013fd0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8013fd0:	b570      	push	{r4, r5, r6, lr}
 8013fd2:	2300      	movs	r3, #0
 8013fd4:	4c0a      	ldr	r4, [pc, #40]	; (8014000 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8013fd6:	4605      	mov	r5, r0
 8013fd8:	460e      	mov	r6, r1
 8013fda:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8013fde:	6820      	ldr	r0, [r4, #0]
 8013fe0:	b110      	cbz	r0, 8013fe8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 8013fe2:	6803      	ldr	r3, [r0, #0]
 8013fe4:	695b      	ldr	r3, [r3, #20]
 8013fe6:	4798      	blx	r3
 8013fe8:	6026      	str	r6, [r4, #0]
 8013fea:	4630      	mov	r0, r6
 8013fec:	6833      	ldr	r3, [r6, #0]
 8013fee:	68db      	ldr	r3, [r3, #12]
 8013ff0:	4798      	blx	r3
 8013ff2:	682b      	ldr	r3, [r5, #0]
 8013ff4:	4628      	mov	r0, r5
 8013ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ff8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ffc:	4718      	bx	r3
 8013ffe:	bf00      	nop
 8014000:	2400aee0 	.word	0x2400aee0

08014004 <_ZN8touchgfx11Application13requestRedrawEv>:
 8014004:	4b06      	ldr	r3, [pc, #24]	; (8014020 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8014006:	2100      	movs	r1, #0
 8014008:	f9b3 2000 	ldrsh.w	r2, [r3]
 801400c:	4b05      	ldr	r3, [pc, #20]	; (8014024 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801400e:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8014012:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014016:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801401a:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801401e:	4770      	bx	lr
 8014020:	2400ae98 	.word	0x2400ae98
 8014024:	2400ae9a 	.word	0x2400ae9a

08014028 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8014028:	4b03      	ldr	r3, [pc, #12]	; (8014038 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801402a:	6818      	ldr	r0, [r3, #0]
 801402c:	b110      	cbz	r0, 8014034 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801402e:	6803      	ldr	r3, [r0, #0]
 8014030:	699b      	ldr	r3, [r3, #24]
 8014032:	4718      	bx	r3
 8014034:	4770      	bx	lr
 8014036:	bf00      	nop
 8014038:	2400aee0 	.word	0x2400aee0

0801403c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801403c:	4770      	bx	lr
	...

08014040 <_ZN8touchgfx11Application4drawEv>:
 8014040:	4b09      	ldr	r3, [pc, #36]	; (8014068 <_ZN8touchgfx11Application4drawEv+0x28>)
 8014042:	b507      	push	{r0, r1, r2, lr}
 8014044:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014048:	2100      	movs	r1, #0
 801404a:	4b08      	ldr	r3, [pc, #32]	; (801406c <_ZN8touchgfx11Application4drawEv+0x2c>)
 801404c:	9100      	str	r1, [sp, #0]
 801404e:	4669      	mov	r1, sp
 8014050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014054:	f8ad 2004 	strh.w	r2, [sp, #4]
 8014058:	f8ad 3006 	strh.w	r3, [sp, #6]
 801405c:	6803      	ldr	r3, [r0, #0]
 801405e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014060:	4798      	blx	r3
 8014062:	b003      	add	sp, #12
 8014064:	f85d fb04 	ldr.w	pc, [sp], #4
 8014068:	2400ae98 	.word	0x2400ae98
 801406c:	2400ae9a 	.word	0x2400ae9a

08014070 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8014070:	4b03      	ldr	r3, [pc, #12]	; (8014080 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8014072:	6818      	ldr	r0, [r3, #0]
 8014074:	b110      	cbz	r0, 801407c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8014076:	6803      	ldr	r3, [r0, #0]
 8014078:	69db      	ldr	r3, [r3, #28]
 801407a:	4718      	bx	r3
 801407c:	4770      	bx	lr
 801407e:	bf00      	nop
 8014080:	2400aee0 	.word	0x2400aee0

08014084 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8014084:	4b03      	ldr	r3, [pc, #12]	; (8014094 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8014086:	6818      	ldr	r0, [r3, #0]
 8014088:	b110      	cbz	r0, 8014090 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801408a:	6803      	ldr	r3, [r0, #0]
 801408c:	6a1b      	ldr	r3, [r3, #32]
 801408e:	4718      	bx	r3
 8014090:	4770      	bx	lr
 8014092:	bf00      	nop
 8014094:	2400aee0 	.word	0x2400aee0

08014098 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8014098:	2300      	movs	r3, #0
 801409a:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801409e:	4770      	bx	lr

080140a0 <_ZN8touchgfx11Application14handleKeyEventEh>:
 80140a0:	4b03      	ldr	r3, [pc, #12]	; (80140b0 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80140a2:	6818      	ldr	r0, [r3, #0]
 80140a4:	b110      	cbz	r0, 80140ac <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80140a6:	6803      	ldr	r3, [r0, #0]
 80140a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140aa:	4718      	bx	r3
 80140ac:	4770      	bx	lr
 80140ae:	bf00      	nop
 80140b0:	2400aee0 	.word	0x2400aee0

080140b4 <_ZN8touchgfx11Application15handleTickEventEv>:
 80140b4:	b570      	push	{r4, r5, r6, lr}
 80140b6:	4d32      	ldr	r5, [pc, #200]	; (8014180 <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 80140b8:	4604      	mov	r4, r0
 80140ba:	6828      	ldr	r0, [r5, #0]
 80140bc:	b140      	cbz	r0, 80140d0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80140be:	7a03      	ldrb	r3, [r0, #8]
 80140c0:	b933      	cbnz	r3, 80140d0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80140c2:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 80140c6:	6803      	ldr	r3, [r0, #0]
 80140c8:	689b      	ldr	r3, [r3, #8]
 80140ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80140ce:	4718      	bx	r3
 80140d0:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 80140d4:	b97b      	cbnz	r3, 80140f6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80140d6:	b170      	cbz	r0, 80140f6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80140d8:	7a03      	ldrb	r3, [r0, #8]
 80140da:	b163      	cbz	r3, 80140f6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80140dc:	4b29      	ldr	r3, [pc, #164]	; (8014184 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 80140de:	6818      	ldr	r0, [r3, #0]
 80140e0:	b110      	cbz	r0, 80140e8 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80140e2:	6803      	ldr	r3, [r0, #0]
 80140e4:	691b      	ldr	r3, [r3, #16]
 80140e6:	4798      	blx	r3
 80140e8:	6828      	ldr	r0, [r5, #0]
 80140ea:	6803      	ldr	r3, [r0, #0]
 80140ec:	68db      	ldr	r3, [r3, #12]
 80140ee:	4798      	blx	r3
 80140f0:	2301      	movs	r3, #1
 80140f2:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 80140f6:	2500      	movs	r5, #0
 80140f8:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 80140fc:	42a8      	cmp	r0, r5
 80140fe:	dd0c      	ble.n	801411a <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8014100:	1963      	adds	r3, r4, r5
 8014102:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8014106:	b132      	cbz	r2, 8014116 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8014108:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801410c:	4413      	add	r3, r2
 801410e:	6858      	ldr	r0, [r3, #4]
 8014110:	6803      	ldr	r3, [r0, #0]
 8014112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014114:	4798      	blx	r3
 8014116:	3501      	adds	r5, #1
 8014118:	e7ee      	b.n	80140f8 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801411a:	2300      	movs	r3, #0
 801411c:	461a      	mov	r2, r3
 801411e:	4298      	cmp	r0, r3
 8014120:	d015      	beq.n	801414e <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8014122:	18e1      	adds	r1, r4, r3
 8014124:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8014128:	b16d      	cbz	r5, 8014146 <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 801412a:	429a      	cmp	r2, r3
 801412c:	d00a      	beq.n	8014144 <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 801412e:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8014132:	4431      	add	r1, r6
 8014134:	684e      	ldr	r6, [r1, #4]
 8014136:	b291      	uxth	r1, r2
 8014138:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801413c:	604e      	str	r6, [r1, #4]
 801413e:	18a1      	adds	r1, r4, r2
 8014140:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8014144:	3201      	adds	r2, #1
 8014146:	3301      	adds	r3, #1
 8014148:	e7e9      	b.n	801411e <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801414a:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 801414e:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 8014152:	4295      	cmp	r5, r2
 8014154:	dd0d      	ble.n	8014172 <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 8014156:	1e6b      	subs	r3, r5, #1
 8014158:	b29b      	uxth	r3, r3
 801415a:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 801415e:	4618      	mov	r0, r3
 8014160:	3104      	adds	r1, #4
 8014162:	4285      	cmp	r5, r0
 8014164:	ddf1      	ble.n	801414a <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 8014166:	f851 6f04 	ldr.w	r6, [r1, #4]!
 801416a:	3001      	adds	r0, #1
 801416c:	f841 6c04 	str.w	r6, [r1, #-4]
 8014170:	e7f7      	b.n	8014162 <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 8014172:	4b04      	ldr	r3, [pc, #16]	; (8014184 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8014174:	6818      	ldr	r0, [r3, #0]
 8014176:	b110      	cbz	r0, 801417e <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8014178:	6803      	ldr	r3, [r0, #0]
 801417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801417c:	e7a5      	b.n	80140ca <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801417e:	bd70      	pop	{r4, r5, r6, pc}
 8014180:	2400aee4 	.word	0x2400aee4
 8014184:	2400aee0 	.word	0x2400aee0

08014188 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8014188:	b510      	push	{r4, lr}
 801418a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801418e:	888a      	ldrh	r2, [r1, #4]
 8014190:	f9b0 3000 	ldrsh.w	r3, [r0]
 8014194:	4422      	add	r2, r4
 8014196:	b212      	sxth	r2, r2
 8014198:	4293      	cmp	r3, r2
 801419a:	da15      	bge.n	80141c8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801419c:	8882      	ldrh	r2, [r0, #4]
 801419e:	4413      	add	r3, r2
 80141a0:	b21b      	sxth	r3, r3
 80141a2:	429c      	cmp	r4, r3
 80141a4:	da10      	bge.n	80141c8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80141a6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80141aa:	88c9      	ldrh	r1, [r1, #6]
 80141ac:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80141b0:	4419      	add	r1, r3
 80141b2:	b209      	sxth	r1, r1
 80141b4:	428a      	cmp	r2, r1
 80141b6:	da07      	bge.n	80141c8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80141b8:	88c0      	ldrh	r0, [r0, #6]
 80141ba:	4410      	add	r0, r2
 80141bc:	b200      	sxth	r0, r0
 80141be:	4283      	cmp	r3, r0
 80141c0:	bfac      	ite	ge
 80141c2:	2000      	movge	r0, #0
 80141c4:	2001      	movlt	r0, #1
 80141c6:	bd10      	pop	{r4, pc}
 80141c8:	2000      	movs	r0, #0
 80141ca:	e7fc      	b.n	80141c6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080141cc <_ZN8touchgfx4Rect10restrictToEss>:
 80141cc:	f9b0 3000 	ldrsh.w	r3, [r0]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	b510      	push	{r4, lr}
 80141d4:	da04      	bge.n	80141e0 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 80141d6:	8884      	ldrh	r4, [r0, #4]
 80141d8:	4423      	add	r3, r4
 80141da:	8083      	strh	r3, [r0, #4]
 80141dc:	2300      	movs	r3, #0
 80141de:	8003      	strh	r3, [r0, #0]
 80141e0:	f9b0 4000 	ldrsh.w	r4, [r0]
 80141e4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80141e8:	1b09      	subs	r1, r1, r4
 80141ea:	428b      	cmp	r3, r1
 80141ec:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80141f0:	bfc8      	it	gt
 80141f2:	8081      	strhgt	r1, [r0, #4]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	da04      	bge.n	8014202 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 80141f8:	88c1      	ldrh	r1, [r0, #6]
 80141fa:	440b      	add	r3, r1
 80141fc:	80c3      	strh	r3, [r0, #6]
 80141fe:	2300      	movs	r3, #0
 8014200:	8043      	strh	r3, [r0, #2]
 8014202:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8014206:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801420a:	1a52      	subs	r2, r2, r1
 801420c:	4293      	cmp	r3, r2
 801420e:	bfc8      	it	gt
 8014210:	80c2      	strhgt	r2, [r0, #6]
 8014212:	bd10      	pop	{r4, pc}

08014214 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8014214:	4b10      	ldr	r3, [pc, #64]	; (8014258 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8014216:	b510      	push	{r4, lr}
 8014218:	460c      	mov	r4, r1
 801421a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801421e:	4b0f      	ldr	r3, [pc, #60]	; (801425c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8014220:	4620      	mov	r0, r4
 8014222:	f9b3 1000 	ldrsh.w	r1, [r3]
 8014226:	f7ff ffd1 	bl	80141cc <_ZN8touchgfx4Rect10restrictToEss>
 801422a:	4b0d      	ldr	r3, [pc, #52]	; (8014260 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801422c:	6818      	ldr	r0, [r3, #0]
 801422e:	b190      	cbz	r0, 8014256 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8014230:	6803      	ldr	r3, [r0, #0]
 8014232:	4621      	mov	r1, r4
 8014234:	689b      	ldr	r3, [r3, #8]
 8014236:	4798      	blx	r3
 8014238:	4b0a      	ldr	r3, [pc, #40]	; (8014264 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801423a:	6818      	ldr	r0, [r3, #0]
 801423c:	b118      	cbz	r0, 8014246 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801423e:	6803      	ldr	r3, [r0, #0]
 8014240:	4621      	mov	r1, r4
 8014242:	689b      	ldr	r3, [r3, #8]
 8014244:	4798      	blx	r3
 8014246:	4b08      	ldr	r3, [pc, #32]	; (8014268 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8014248:	4621      	mov	r1, r4
 801424a:	6818      	ldr	r0, [r3, #0]
 801424c:	6803      	ldr	r3, [r0, #0]
 801424e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014252:	69db      	ldr	r3, [r3, #28]
 8014254:	4718      	bx	r3
 8014256:	bd10      	pop	{r4, pc}
 8014258:	2400ae9a 	.word	0x2400ae9a
 801425c:	2400ae98 	.word	0x2400ae98
 8014260:	2400aee0 	.word	0x2400aee0
 8014264:	2400aedc 	.word	0x2400aedc
 8014268:	2400aea4 	.word	0x2400aea4

0801426c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801426c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801426e:	4606      	mov	r6, r0
 8014270:	4608      	mov	r0, r1
 8014272:	460f      	mov	r7, r1
 8014274:	f7fd fe71 	bl	8011f5a <_ZNK8touchgfx4Rect7isEmptyEv>
 8014278:	b9e8      	cbnz	r0, 80142b6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801427a:	f9b7 5000 	ldrsh.w	r5, [r7]
 801427e:	f9b6 4000 	ldrsh.w	r4, [r6]
 8014282:	42a5      	cmp	r5, r4
 8014284:	db17      	blt.n	80142b6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8014286:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801428a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801428e:	429a      	cmp	r2, r3
 8014290:	db11      	blt.n	80142b6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8014292:	88b9      	ldrh	r1, [r7, #4]
 8014294:	440d      	add	r5, r1
 8014296:	88b1      	ldrh	r1, [r6, #4]
 8014298:	440c      	add	r4, r1
 801429a:	b22d      	sxth	r5, r5
 801429c:	b224      	sxth	r4, r4
 801429e:	42a5      	cmp	r5, r4
 80142a0:	dc09      	bgt.n	80142b6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80142a2:	88f8      	ldrh	r0, [r7, #6]
 80142a4:	4410      	add	r0, r2
 80142a6:	88f2      	ldrh	r2, [r6, #6]
 80142a8:	4413      	add	r3, r2
 80142aa:	b200      	sxth	r0, r0
 80142ac:	b21b      	sxth	r3, r3
 80142ae:	4298      	cmp	r0, r3
 80142b0:	bfcc      	ite	gt
 80142b2:	2000      	movgt	r0, #0
 80142b4:	2001      	movle	r0, #1
 80142b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080142b8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80142b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142ba:	4604      	mov	r4, r0
 80142bc:	4608      	mov	r0, r1
 80142be:	460d      	mov	r5, r1
 80142c0:	f7fd fe4b 	bl	8011f5a <_ZNK8touchgfx4Rect7isEmptyEv>
 80142c4:	b978      	cbnz	r0, 80142e6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80142c6:	4620      	mov	r0, r4
 80142c8:	f7fd fe47 	bl	8011f5a <_ZNK8touchgfx4Rect7isEmptyEv>
 80142cc:	f9b5 6000 	ldrsh.w	r6, [r5]
 80142d0:	b150      	cbz	r0, 80142e8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80142d2:	8026      	strh	r6, [r4, #0]
 80142d4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80142d8:	8063      	strh	r3, [r4, #2]
 80142da:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80142de:	80a3      	strh	r3, [r4, #4]
 80142e0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80142e4:	80e3      	strh	r3, [r4, #6]
 80142e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142e8:	f9b4 1000 	ldrsh.w	r1, [r4]
 80142ec:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80142f0:	42b1      	cmp	r1, r6
 80142f2:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80142f6:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80142fa:	460f      	mov	r7, r1
 80142fc:	88ed      	ldrh	r5, [r5, #6]
 80142fe:	bfa8      	it	ge
 8014300:	4637      	movge	r7, r6
 8014302:	4293      	cmp	r3, r2
 8014304:	4618      	mov	r0, r3
 8014306:	4466      	add	r6, ip
 8014308:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801430c:	bfa8      	it	ge
 801430e:	4610      	movge	r0, r2
 8014310:	442a      	add	r2, r5
 8014312:	88e5      	ldrh	r5, [r4, #6]
 8014314:	4461      	add	r1, ip
 8014316:	b236      	sxth	r6, r6
 8014318:	8027      	strh	r7, [r4, #0]
 801431a:	442b      	add	r3, r5
 801431c:	b209      	sxth	r1, r1
 801431e:	b212      	sxth	r2, r2
 8014320:	8060      	strh	r0, [r4, #2]
 8014322:	b21b      	sxth	r3, r3
 8014324:	428e      	cmp	r6, r1
 8014326:	bfac      	ite	ge
 8014328:	ebc7 0106 	rsbge	r1, r7, r6
 801432c:	ebc7 0101 	rsblt	r1, r7, r1
 8014330:	429a      	cmp	r2, r3
 8014332:	bfac      	ite	ge
 8014334:	ebc0 0202 	rsbge	r2, r0, r2
 8014338:	ebc0 0203 	rsblt	r2, r0, r3
 801433c:	80a1      	strh	r1, [r4, #4]
 801433e:	80e2      	strh	r2, [r4, #6]
 8014340:	e7d1      	b.n	80142e6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08014344 <_ZN8touchgfx11Application11getInstanceEv>:
 8014344:	4b01      	ldr	r3, [pc, #4]	; (801434c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8014346:	6818      	ldr	r0, [r3, #0]
 8014348:	4770      	bx	lr
 801434a:	bf00      	nop
 801434c:	2400aef0 	.word	0x2400aef0

08014350 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8014350:	2300      	movs	r3, #0
 8014352:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8014356:	30a8      	adds	r0, #168	; 0xa8
 8014358:	f820 3c24 	strh.w	r3, [r0, #-36]
 801435c:	f802 3b01 	strb.w	r3, [r2], #1
 8014360:	4282      	cmp	r2, r0
 8014362:	d1fb      	bne.n	801435c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8014364:	4770      	bx	lr

08014366 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8014366:	4603      	mov	r3, r0
 8014368:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801436c:	2200      	movs	r2, #0
 801436e:	801a      	strh	r2, [r3, #0]
 8014370:	3308      	adds	r3, #8
 8014372:	f823 2c06 	strh.w	r2, [r3, #-6]
 8014376:	f823 2c04 	strh.w	r2, [r3, #-4]
 801437a:	f823 2c02 	strh.w	r2, [r3, #-2]
 801437e:	428b      	cmp	r3, r1
 8014380:	d1f5      	bne.n	801436e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8014382:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8014386:	4770      	bx	lr

08014388 <_ZN8touchgfx11ApplicationC1Ev>:
 8014388:	b570      	push	{r4, r5, r6, lr}
 801438a:	4b19      	ldr	r3, [pc, #100]	; (80143f0 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801438c:	2500      	movs	r5, #0
 801438e:	4604      	mov	r4, r0
 8014390:	30a8      	adds	r0, #168	; 0xa8
 8014392:	f840 3ca8 	str.w	r3, [r0, #-168]
 8014396:	f820 5c24 	strh.w	r5, [r0, #-36]
 801439a:	f7ff ffe4 	bl	8014366 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801439e:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 80143a2:	f7ff ffe0 	bl	8014366 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80143a6:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 80143aa:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 80143ae:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 80143b2:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 80143b6:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 80143ba:	490e      	ldr	r1, [pc, #56]	; (80143f4 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 80143bc:	480e      	ldr	r0, [pc, #56]	; (80143f8 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 80143be:	f00e f823 	bl	8022408 <CRC_Lock>
 80143c2:	4e0e      	ldr	r6, [pc, #56]	; (80143fc <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 80143c4:	4b0e      	ldr	r3, [pc, #56]	; (8014400 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80143c6:	b158      	cbz	r0, 80143e0 <_ZN8touchgfx11ApplicationC1Ev+0x58>
 80143c8:	801d      	strh	r5, [r3, #0]
 80143ca:	2300      	movs	r3, #0
 80143cc:	4a0d      	ldr	r2, [pc, #52]	; (8014404 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80143ce:	4620      	mov	r0, r4
 80143d0:	6013      	str	r3, [r2, #0]
 80143d2:	4a0d      	ldr	r2, [pc, #52]	; (8014408 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80143d4:	6033      	str	r3, [r6, #0]
 80143d6:	6013      	str	r3, [r2, #0]
 80143d8:	f7ff ffba 	bl	8014350 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 80143dc:	4620      	mov	r0, r4
 80143de:	bd70      	pop	{r4, r5, r6, pc}
 80143e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80143e4:	2002      	movs	r0, #2
 80143e6:	801a      	strh	r2, [r3, #0]
 80143e8:	6030      	str	r0, [r6, #0]
 80143ea:	f001 fa15 	bl	8015818 <_ZN8touchgfx6Screen4drawEv>
 80143ee:	e7ec      	b.n	80143ca <_ZN8touchgfx11ApplicationC1Ev+0x42>
 80143f0:	08025038 	.word	0x08025038
 80143f4:	b5e8b5cd 	.word	0xb5e8b5cd
 80143f8:	f407a5c2 	.word	0xf407a5c2
 80143fc:	2400aee0 	.word	0x2400aee0
 8014400:	2400004e 	.word	0x2400004e
 8014404:	2400aef0 	.word	0x2400aef0
 8014408:	2400aee4 	.word	0x2400aee4

0801440c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801440c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8014410:	3b01      	subs	r3, #1
 8014412:	b29b      	uxth	r3, r3
 8014414:	428b      	cmp	r3, r1
 8014416:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801441a:	b510      	push	{r4, lr}
 801441c:	d908      	bls.n	8014430 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801441e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8014422:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8014426:	681a      	ldr	r2, [r3, #0]
 8014428:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801442c:	685a      	ldr	r2, [r3, #4]
 801442e:	6062      	str	r2, [r4, #4]
 8014430:	bd10      	pop	{r4, pc}
	...

08014434 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8014434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014438:	b08f      	sub	sp, #60	; 0x3c
 801443a:	4b94      	ldr	r3, [pc, #592]	; (801468c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 801443c:	4683      	mov	fp, r0
 801443e:	ac0a      	add	r4, sp, #40	; 0x28
 8014440:	e884 0006 	stmia.w	r4, {r1, r2}
 8014444:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014448:	4620      	mov	r0, r4
 801444a:	4b91      	ldr	r3, [pc, #580]	; (8014690 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 801444c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8014450:	f7ff febc 	bl	80141cc <_ZN8touchgfx4Rect10restrictToEss>
 8014454:	4620      	mov	r0, r4
 8014456:	f7fd fd80 	bl	8011f5a <_ZNK8touchgfx4Rect7isEmptyEv>
 801445a:	2800      	cmp	r0, #0
 801445c:	d16a      	bne.n	8014534 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801445e:	9403      	str	r4, [sp, #12]
 8014460:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8014464:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8014468:	2400      	movs	r4, #0
 801446a:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801446e:	9301      	str	r3, [sp, #4]
 8014470:	36a0      	adds	r6, #160	; 0xa0
 8014472:	42a5      	cmp	r5, r4
 8014474:	d00d      	beq.n	8014492 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 8014476:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801447a:	9803      	ldr	r0, [sp, #12]
 801447c:	f7ff fef6 	bl	801426c <_ZNK8touchgfx4Rect8includesERKS0_>
 8014480:	b128      	cbz	r0, 801448e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8014482:	1e69      	subs	r1, r5, #1
 8014484:	9801      	ldr	r0, [sp, #4]
 8014486:	1b09      	subs	r1, r1, r4
 8014488:	b289      	uxth	r1, r1
 801448a:	f7ff ffbf 	bl	801440c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801448e:	3401      	adds	r4, #1
 8014490:	e7ef      	b.n	8014472 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 8014492:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8014496:	1e7b      	subs	r3, r7, #1
 8014498:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801449c:	9704      	str	r7, [sp, #16]
 801449e:	9302      	str	r3, [sp, #8]
 80144a0:	2400      	movs	r4, #0
 80144a2:	4655      	mov	r5, sl
 80144a4:	9705      	str	r7, [sp, #20]
 80144a6:	4626      	mov	r6, r4
 80144a8:	9b05      	ldr	r3, [sp, #20]
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d078      	beq.n	80145a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 80144ae:	9903      	ldr	r1, [sp, #12]
 80144b0:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 80144b4:	f7ff fe68 	bl	8014188 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80144b8:	b360      	cbz	r0, 8014514 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80144ba:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 80144be:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 80144c2:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 80144c6:	45e6      	cmp	lr, ip
 80144c8:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 80144cc:	db35      	blt.n	801453a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80144ce:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80144d2:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 80144d6:	4472      	add	r2, lr
 80144d8:	4463      	add	r3, ip
 80144da:	b212      	sxth	r2, r2
 80144dc:	b21b      	sxth	r3, r3
 80144de:	429a      	cmp	r2, r3
 80144e0:	dc2b      	bgt.n	801453a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80144e2:	fa1f f288 	uxth.w	r2, r8
 80144e6:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 80144ea:	45c1      	cmp	r9, r8
 80144ec:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80144f0:	4413      	add	r3, r2
 80144f2:	fa1f fc89 	uxth.w	ip, r9
 80144f6:	b29b      	uxth	r3, r3
 80144f8:	fa0f fe83 	sxth.w	lr, r3
 80144fc:	db0f      	blt.n	801451e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80144fe:	eba3 030c 	sub.w	r3, r3, ip
 8014502:	1ac9      	subs	r1, r1, r3
 8014504:	b209      	sxth	r1, r1
 8014506:	2900      	cmp	r1, #0
 8014508:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801450c:	dd12      	ble.n	8014534 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801450e:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8014512:	4604      	mov	r4, r0
 8014514:	9b05      	ldr	r3, [sp, #20]
 8014516:	3d08      	subs	r5, #8
 8014518:	3b01      	subs	r3, #1
 801451a:	9305      	str	r3, [sp, #20]
 801451c:	e7c4      	b.n	80144a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 801451e:	4461      	add	r1, ip
 8014520:	b209      	sxth	r1, r1
 8014522:	4571      	cmp	r1, lr
 8014524:	dc3a      	bgt.n	801459c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8014526:	eba2 020c 	sub.w	r2, r2, ip
 801452a:	b212      	sxth	r2, r2
 801452c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8014530:	2a00      	cmp	r2, #0
 8014532:	dcee      	bgt.n	8014512 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8014534:	b00f      	add	sp, #60	; 0x3c
 8014536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801453a:	45c1      	cmp	r9, r8
 801453c:	db2e      	blt.n	801459c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801453e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8014542:	4499      	add	r9, r3
 8014544:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8014548:	4498      	add	r8, r3
 801454a:	fa0f f989 	sxth.w	r9, r9
 801454e:	fa0f f888 	sxth.w	r8, r8
 8014552:	45c1      	cmp	r9, r8
 8014554:	dc22      	bgt.n	801459c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8014556:	fa1f f28c 	uxth.w	r2, ip
 801455a:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801455e:	45e6      	cmp	lr, ip
 8014560:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8014564:	4413      	add	r3, r2
 8014566:	fa1f f88e 	uxth.w	r8, lr
 801456a:	b29b      	uxth	r3, r3
 801456c:	fa0f f983 	sxth.w	r9, r3
 8014570:	db0a      	blt.n	8014588 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 8014572:	eba3 0308 	sub.w	r3, r3, r8
 8014576:	1ac9      	subs	r1, r1, r3
 8014578:	b209      	sxth	r1, r1
 801457a:	2900      	cmp	r1, #0
 801457c:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8014580:	ddd8      	ble.n	8014534 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8014582:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8014586:	e7c4      	b.n	8014512 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8014588:	4441      	add	r1, r8
 801458a:	b209      	sxth	r1, r1
 801458c:	4549      	cmp	r1, r9
 801458e:	dc05      	bgt.n	801459c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8014590:	eba2 0208 	sub.w	r2, r2, r8
 8014594:	b212      	sxth	r2, r2
 8014596:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801459a:	e7c9      	b.n	8014530 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801459c:	4606      	mov	r6, r0
 801459e:	e7b9      	b.n	8014514 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80145a0:	2c00      	cmp	r4, #0
 80145a2:	f47f af7d 	bne.w	80144a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 80145a6:	2e00      	cmp	r6, #0
 80145a8:	f000 81e1 	beq.w	801496e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 80145ac:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 80145b0:	4655      	mov	r5, sl
 80145b2:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 80145b6:	b2b9      	uxth	r1, r7
 80145b8:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80145bc:	b2b3      	uxth	r3, r6
 80145be:	9105      	str	r1, [sp, #20]
 80145c0:	9805      	ldr	r0, [sp, #20]
 80145c2:	441a      	add	r2, r3
 80145c4:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80145c8:	b292      	uxth	r2, r2
 80145ca:	4401      	add	r1, r0
 80145cc:	fa0f f882 	sxth.w	r8, r2
 80145d0:	b289      	uxth	r1, r1
 80145d2:	9106      	str	r1, [sp, #24]
 80145d4:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 80145d8:	e9cd 2307 	strd	r2, r3, [sp, #28]
 80145dc:	9b04      	ldr	r3, [sp, #16]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d058      	beq.n	8014694 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 80145e2:	9903      	ldr	r1, [sp, #12]
 80145e4:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 80145e8:	f7ff fdce 	bl	8014188 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80145ec:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80145f0:	b1d8      	cbz	r0, 801462a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 80145f2:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 80145f6:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 80145fa:	4576      	cmp	r6, lr
 80145fc:	dc26      	bgt.n	801464c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 80145fe:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 8014602:	44f4      	add	ip, lr
 8014604:	fa0f fc8c 	sxth.w	ip, ip
 8014608:	45e0      	cmp	r8, ip
 801460a:	db1f      	blt.n	801464c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 801460c:	428f      	cmp	r7, r1
 801460e:	fa1f fc81 	uxth.w	ip, r1
 8014612:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8014616:	dc0f      	bgt.n	8014638 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 8014618:	9806      	ldr	r0, [sp, #24]
 801461a:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801461e:	eba0 0c0c 	sub.w	ip, r0, ip
 8014622:	eba1 010c 	sub.w	r1, r1, ip
 8014626:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801462a:	4620      	mov	r0, r4
 801462c:	9904      	ldr	r1, [sp, #16]
 801462e:	3d08      	subs	r5, #8
 8014630:	4604      	mov	r4, r0
 8014632:	3901      	subs	r1, #1
 8014634:	9104      	str	r1, [sp, #16]
 8014636:	e7cf      	b.n	80145d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 8014638:	4461      	add	r1, ip
 801463a:	b209      	sxth	r1, r1
 801463c:	4549      	cmp	r1, r9
 801463e:	dcf5      	bgt.n	801462c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8014640:	9905      	ldr	r1, [sp, #20]
 8014642:	eba1 0c0c 	sub.w	ip, r1, ip
 8014646:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801464a:	e7ee      	b.n	801462a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801464c:	428f      	cmp	r7, r1
 801464e:	dced      	bgt.n	801462c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8014650:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8014654:	4461      	add	r1, ip
 8014656:	b209      	sxth	r1, r1
 8014658:	4589      	cmp	r9, r1
 801465a:	dbe7      	blt.n	801462c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801465c:	4576      	cmp	r6, lr
 801465e:	fa1f fc8e 	uxth.w	ip, lr
 8014662:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8014666:	dc08      	bgt.n	801467a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8014668:	eba2 0c0c 	sub.w	ip, r2, ip
 801466c:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 8014670:	eba1 010c 	sub.w	r1, r1, ip
 8014674:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8014678:	e7d7      	b.n	801462a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801467a:	4461      	add	r1, ip
 801467c:	b209      	sxth	r1, r1
 801467e:	4588      	cmp	r8, r1
 8014680:	dbd4      	blt.n	801462c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8014682:	eba3 0c0c 	sub.w	ip, r3, ip
 8014686:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801468a:	e7ce      	b.n	801462a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801468c:	2400ae9a 	.word	0x2400ae9a
 8014690:	2400ae98 	.word	0x2400ae98
 8014694:	2c00      	cmp	r4, #0
 8014696:	f000 816a 	beq.w	801496e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801469a:	9b02      	ldr	r3, [sp, #8]
 801469c:	3301      	adds	r3, #1
 801469e:	f000 8166 	beq.w	801496e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 80146a2:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 80146a6:	9803      	ldr	r0, [sp, #12]
 80146a8:	4621      	mov	r1, r4
 80146aa:	f7ff fddf 	bl	801426c <_ZNK8touchgfx4Rect8includesERKS0_>
 80146ae:	b120      	cbz	r0, 80146ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 80146b0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80146b4:	9801      	ldr	r0, [sp, #4]
 80146b6:	f7ff fea9 	bl	801440c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80146ba:	9903      	ldr	r1, [sp, #12]
 80146bc:	4620      	mov	r0, r4
 80146be:	f7ff fd63 	bl	8014188 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80146c2:	2800      	cmp	r0, #0
 80146c4:	f000 809b 	beq.w	80147fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 80146c8:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 80146cc:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 80146d0:	b281      	uxth	r1, r0
 80146d2:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 80146d6:	9309      	str	r3, [sp, #36]	; 0x24
 80146d8:	eb01 0c03 	add.w	ip, r1, r3
 80146dc:	b2ab      	uxth	r3, r5
 80146de:	4285      	cmp	r5, r0
 80146e0:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 80146e4:	fa1f f98c 	uxth.w	r9, ip
 80146e8:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 80146ec:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 80146f0:	eb03 040c 	add.w	r4, r3, ip
 80146f4:	b2a4      	uxth	r4, r4
 80146f6:	9405      	str	r4, [sp, #20]
 80146f8:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 80146fc:	9404      	str	r4, [sp, #16]
 80146fe:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 8014702:	f340 809a 	ble.w	801483a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 8014706:	1a5b      	subs	r3, r3, r1
 8014708:	4596      	cmp	lr, r2
 801470a:	fa0f f589 	sxth.w	r5, r9
 801470e:	b29b      	uxth	r3, r3
 8014710:	b21e      	sxth	r6, r3
 8014712:	dd2e      	ble.n	8014772 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 8014714:	9f02      	ldr	r7, [sp, #8]
 8014716:	fa1f fe8e 	uxth.w	lr, lr
 801471a:	b292      	uxth	r2, r2
 801471c:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8014720:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8014724:	9f04      	ldr	r7, [sp, #16]
 8014726:	ebae 0102 	sub.w	r1, lr, r2
 801472a:	4486      	add	lr, r0
 801472c:	1b7f      	subs	r7, r7, r5
 801472e:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 8014732:	b289      	uxth	r1, r1
 8014734:	442a      	add	r2, r5
 8014736:	fa0f fe8e 	sxth.w	lr, lr
 801473a:	b20c      	sxth	r4, r1
 801473c:	b212      	sxth	r2, r2
 801473e:	4367      	muls	r7, r4
 8014740:	ebae 0202 	sub.w	r2, lr, r2
 8014744:	4372      	muls	r2, r6
 8014746:	4297      	cmp	r7, r2
 8014748:	db09      	blt.n	801475e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 801474a:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 801474e:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 8014752:	449c      	add	ip, r3
 8014754:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8014758:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801475c:	e680      	b.n	8014460 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801475e:	4401      	add	r1, r0
 8014760:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8014764:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 8014768:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801476c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8014770:	e676      	b.n	8014460 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8014772:	9f04      	ldr	r7, [sp, #16]
 8014774:	42bd      	cmp	r5, r7
 8014776:	da27      	bge.n	80147c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 8014778:	9902      	ldr	r1, [sp, #8]
 801477a:	1b7f      	subs	r7, r7, r5
 801477c:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8014780:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 8014784:	eb04 010e 	add.w	r1, r4, lr
 8014788:	fa1f f881 	uxth.w	r8, r1
 801478c:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 8014790:	4411      	add	r1, r2
 8014792:	fa0f f988 	sxth.w	r9, r8
 8014796:	eba2 020e 	sub.w	r2, r2, lr
 801479a:	eba1 0108 	sub.w	r1, r1, r8
 801479e:	4372      	muls	r2, r6
 80147a0:	b289      	uxth	r1, r1
 80147a2:	fa0f f881 	sxth.w	r8, r1
 80147a6:	fb08 f707 	mul.w	r7, r8, r7
 80147aa:	42ba      	cmp	r2, r7
 80147ac:	dc06      	bgt.n	80147bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 80147ae:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 80147b2:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 80147b6:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 80147ba:	e7ca      	b.n	8014752 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 80147bc:	4421      	add	r1, r4
 80147be:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 80147c2:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80147c6:	e64b      	b.n	8014460 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80147c8:	9d05      	ldr	r5, [sp, #20]
 80147ca:	2c06      	cmp	r4, #6
 80147cc:	eba9 0505 	sub.w	r5, r9, r5
 80147d0:	b2ad      	uxth	r5, r5
 80147d2:	fa0f fe85 	sxth.w	lr, r5
 80147d6:	d818      	bhi.n	801480a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 80147d8:	9b04      	ldr	r3, [sp, #16]
 80147da:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 80147de:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 80147e2:	1c63      	adds	r3, r4, #1
 80147e4:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 80147e8:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 80147ec:	9b01      	ldr	r3, [sp, #4]
 80147ee:	9d01      	ldr	r5, [sp, #4]
 80147f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80147f4:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 80147f8:	805a      	strh	r2, [r3, #2]
 80147fa:	809e      	strh	r6, [r3, #4]
 80147fc:	80d9      	strh	r1, [r3, #6]
 80147fe:	9b02      	ldr	r3, [sp, #8]
 8014800:	f1aa 0a08 	sub.w	sl, sl, #8
 8014804:	3b01      	subs	r3, #1
 8014806:	9302      	str	r3, [sp, #8]
 8014808:	e747      	b.n	801469a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 801480a:	9a02      	ldr	r2, [sp, #8]
 801480c:	45b6      	cmp	lr, r6
 801480e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8014812:	db0d      	blt.n	8014830 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 8014814:	449c      	add	ip, r3
 8014816:	445a      	add	r2, fp
 8014818:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 801481c:	fa1f fc8c 	uxth.w	ip, ip
 8014820:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 8014824:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8014828:	448c      	add	ip, r1
 801482a:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 801482e:	e617      	b.n	8014460 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8014830:	445a      	add	r2, fp
 8014832:	44ac      	add	ip, r5
 8014834:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 8014838:	e78e      	b.n	8014758 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801483a:	fa1f f18e 	uxth.w	r1, lr
 801483e:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8014842:	b293      	uxth	r3, r2
 8014844:	4596      	cmp	lr, r2
 8014846:	eb01 0806 	add.w	r8, r1, r6
 801484a:	9306      	str	r3, [sp, #24]
 801484c:	fa1f f888 	uxth.w	r8, r8
 8014850:	9f06      	ldr	r7, [sp, #24]
 8014852:	fa0f f388 	sxth.w	r3, r8
 8014856:	9307      	str	r3, [sp, #28]
 8014858:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 801485c:	443b      	add	r3, r7
 801485e:	b29b      	uxth	r3, r3
 8014860:	9308      	str	r3, [sp, #32]
 8014862:	da25      	bge.n	80148b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 8014864:	9905      	ldr	r1, [sp, #20]
 8014866:	eba3 0308 	sub.w	r3, r3, r8
 801486a:	eba2 020e 	sub.w	r2, r2, lr
 801486e:	1b40      	subs	r0, r0, r5
 8014870:	eba9 0401 	sub.w	r4, r9, r1
 8014874:	b29b      	uxth	r3, r3
 8014876:	b2a4      	uxth	r4, r4
 8014878:	b219      	sxth	r1, r3
 801487a:	fa0f f984 	sxth.w	r9, r4
 801487e:	4348      	muls	r0, r1
 8014880:	fb09 f202 	mul.w	r2, r9, r2
 8014884:	4282      	cmp	r2, r0
 8014886:	9a02      	ldr	r2, [sp, #8]
 8014888:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801488c:	445a      	add	r2, fp
 801488e:	dc06      	bgt.n	801489e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 8014890:	9b07      	ldr	r3, [sp, #28]
 8014892:	44a4      	add	ip, r4
 8014894:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 8014898:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 801489c:	e75c      	b.n	8014758 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801489e:	9904      	ldr	r1, [sp, #16]
 80148a0:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 80148a4:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 80148a8:	4433      	add	r3, r6
 80148aa:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80148ae:	e5d7      	b.n	8014460 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80148b0:	9f06      	ldr	r7, [sp, #24]
 80148b2:	9b04      	ldr	r3, [sp, #16]
 80148b4:	1bc9      	subs	r1, r1, r7
 80148b6:	fa0f f789 	sxth.w	r7, r9
 80148ba:	b289      	uxth	r1, r1
 80148bc:	429f      	cmp	r7, r3
 80148be:	fa0f fe81 	sxth.w	lr, r1
 80148c2:	dd22      	ble.n	801490a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 80148c4:	9a05      	ldr	r2, [sp, #20]
 80148c6:	1b40      	subs	r0, r0, r5
 80148c8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80148cc:	eba9 0202 	sub.w	r2, r9, r2
 80148d0:	9d07      	ldr	r5, [sp, #28]
 80148d2:	fb0e f000 	mul.w	r0, lr, r0
 80148d6:	b292      	uxth	r2, r2
 80148d8:	eba5 0a03 	sub.w	sl, r5, r3
 80148dc:	9b02      	ldr	r3, [sp, #8]
 80148de:	b214      	sxth	r4, r2
 80148e0:	00db      	lsls	r3, r3, #3
 80148e2:	fb04 fa0a 	mul.w	sl, r4, sl
 80148e6:	445b      	add	r3, fp
 80148e8:	4550      	cmp	r0, sl
 80148ea:	db03      	blt.n	80148f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 80148ec:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 80148f0:	4494      	add	ip, r2
 80148f2:	e731      	b.n	8014758 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 80148f4:	9a04      	ldr	r2, [sp, #16]
 80148f6:	4431      	add	r1, r6
 80148f8:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 80148fc:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8014900:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8014904:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8014908:	e75b      	b.n	80147c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 801490a:	9b08      	ldr	r3, [sp, #32]
 801490c:	2c06      	cmp	r4, #6
 801490e:	eba3 0308 	sub.w	r3, r3, r8
 8014912:	b29b      	uxth	r3, r3
 8014914:	b21d      	sxth	r5, r3
 8014916:	d813      	bhi.n	8014940 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 8014918:	9b07      	ldr	r3, [sp, #28]
 801491a:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 801491e:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 8014922:	1c63      	adds	r3, r4, #1
 8014924:	9901      	ldr	r1, [sp, #4]
 8014926:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 801492a:	9b01      	ldr	r3, [sp, #4]
 801492c:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 8014930:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014934:	805a      	strh	r2, [r3, #2]
 8014936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014938:	f8a3 e006 	strh.w	lr, [r3, #6]
 801493c:	809a      	strh	r2, [r3, #4]
 801493e:	e75e      	b.n	80147fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 8014940:	9802      	ldr	r0, [sp, #8]
 8014942:	4575      	cmp	r5, lr
 8014944:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8014948:	db0d      	blt.n	8014966 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 801494a:	4431      	add	r1, r6
 801494c:	9b06      	ldr	r3, [sp, #24]
 801494e:	4458      	add	r0, fp
 8014950:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8014954:	b289      	uxth	r1, r1
 8014956:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 801495a:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801495e:	4419      	add	r1, r3
 8014960:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 8014964:	e57c      	b.n	8014460 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8014966:	4458      	add	r0, fp
 8014968:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 801496c:	e79c      	b.n	80148a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 801496e:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 8014972:	2e07      	cmp	r6, #7
 8014974:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8014978:	d812      	bhi.n	80149a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 801497a:	1c75      	adds	r5, r6, #1
 801497c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8014980:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8014984:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 8014988:	9d01      	ldr	r5, [sp, #4]
 801498a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801498e:	442c      	add	r4, r5
 8014990:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8014994:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8014998:	8061      	strh	r1, [r4, #2]
 801499a:	80a2      	strh	r2, [r4, #4]
 801499c:	80e3      	strh	r3, [r4, #6]
 801499e:	e5c9      	b.n	8014534 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80149a0:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 80149a4:	3e01      	subs	r6, #1
 80149a6:	445c      	add	r4, fp
 80149a8:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80149ac:	f04f 37ff 	mov.w	r7, #4294967295
 80149b0:	2500      	movs	r5, #0
 80149b2:	9305      	str	r3, [sp, #20]
 80149b4:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 80149b8:	1e72      	subs	r2, r6, #1
 80149ba:	9302      	str	r3, [sp, #8]
 80149bc:	4691      	mov	r9, r2
 80149be:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 80149c2:	9304      	str	r3, [sp, #16]
 80149c4:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 80149c8:	f1b9 3fff 	cmp.w	r9, #4294967295
 80149cc:	6818      	ldr	r0, [r3, #0]
 80149ce:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80149d2:	9207      	str	r2, [sp, #28]
 80149d4:	bf16      	itet	ne
 80149d6:	9905      	ldrne	r1, [sp, #20]
 80149d8:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 80149dc:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 80149e0:	9306      	str	r3, [sp, #24]
 80149e2:	f8be 1006 	ldrh.w	r1, [lr, #6]
 80149e6:	f8be 8004 	ldrh.w	r8, [lr, #4]
 80149ea:	fb18 f801 	smulbb	r8, r8, r1
 80149ee:	6859      	ldr	r1, [r3, #4]
 80149f0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80149f4:	4671      	mov	r1, lr
 80149f6:	a80c      	add	r0, sp, #48	; 0x30
 80149f8:	f7ff fc5e 	bl	80142b8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80149fc:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8014a00:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8014a04:	f04f 0c08 	mov.w	ip, #8
 8014a08:	9b04      	ldr	r3, [sp, #16]
 8014a0a:	9a02      	ldr	r2, [sp, #8]
 8014a0c:	fb10 f001 	smulbb	r0, r0, r1
 8014a10:	fb02 8803 	mla	r8, r2, r3, r8
 8014a14:	eba0 0108 	sub.w	r1, r0, r8
 8014a18:	fb90 f0fc 	sdiv	r0, r0, ip
 8014a1c:	4288      	cmp	r0, r1
 8014a1e:	dc20      	bgt.n	8014a62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 8014a20:	4551      	cmp	r1, sl
 8014a22:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8014a26:	da03      	bge.n	8014a30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 8014a28:	b1d9      	cbz	r1, 8014a62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 8014a2a:	468a      	mov	sl, r1
 8014a2c:	464f      	mov	r7, r9
 8014a2e:	4635      	mov	r5, r6
 8014a30:	f109 39ff 	add.w	r9, r9, #4294967295
 8014a34:	f119 0f02 	cmn.w	r9, #2
 8014a38:	d1c6      	bne.n	80149c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8014a3a:	4616      	mov	r6, r2
 8014a3c:	3201      	adds	r2, #1
 8014a3e:	f1a4 0408 	sub.w	r4, r4, #8
 8014a42:	d1b7      	bne.n	80149b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 8014a44:	9b01      	ldr	r3, [sp, #4]
 8014a46:	b2ac      	uxth	r4, r5
 8014a48:	00ed      	lsls	r5, r5, #3
 8014a4a:	1958      	adds	r0, r3, r5
 8014a4c:	1c7b      	adds	r3, r7, #1
 8014a4e:	d10b      	bne.n	8014a68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 8014a50:	4601      	mov	r1, r0
 8014a52:	9803      	ldr	r0, [sp, #12]
 8014a54:	f7ff fc30 	bl	80142b8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8014a58:	4621      	mov	r1, r4
 8014a5a:	9801      	ldr	r0, [sp, #4]
 8014a5c:	f7ff fcd6 	bl	801440c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014a60:	e4fe      	b.n	8014460 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8014a62:	464f      	mov	r7, r9
 8014a64:	4635      	mov	r5, r6
 8014a66:	e7ed      	b.n	8014a44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8014a68:	9b01      	ldr	r3, [sp, #4]
 8014a6a:	00ff      	lsls	r7, r7, #3
 8014a6c:	445d      	add	r5, fp
 8014a6e:	19d9      	adds	r1, r3, r7
 8014a70:	445f      	add	r7, fp
 8014a72:	f7ff fc21 	bl	80142b8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8014a76:	9b03      	ldr	r3, [sp, #12]
 8014a78:	cb03      	ldmia	r3!, {r0, r1}
 8014a7a:	9b03      	ldr	r3, [sp, #12]
 8014a7c:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8014a80:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8014a84:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 8014a88:	6869      	ldr	r1, [r5, #4]
 8014a8a:	c303      	stmia	r3!, {r0, r1}
 8014a8c:	e7e4      	b.n	8014a58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 8014a8e:	bf00      	nop

08014a90 <_ZN8touchgfx11Application10invalidateEv>:
 8014a90:	4b09      	ldr	r3, [pc, #36]	; (8014ab8 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8014a92:	b082      	sub	sp, #8
 8014a94:	2100      	movs	r1, #0
 8014a96:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014a9a:	4b08      	ldr	r3, [pc, #32]	; (8014abc <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8014a9c:	9100      	str	r1, [sp, #0]
 8014a9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014aa2:	f8ad 2004 	strh.w	r2, [sp, #4]
 8014aa6:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014aaa:	ab02      	add	r3, sp, #8
 8014aac:	e913 0006 	ldmdb	r3, {r1, r2}
 8014ab0:	b002      	add	sp, #8
 8014ab2:	f7ff bcbf 	b.w	8014434 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8014ab6:	bf00      	nop
 8014ab8:	2400ae98 	.word	0x2400ae98
 8014abc:	2400ae9a 	.word	0x2400ae9a

08014ac0 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8014ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ac4:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8014ac8:	b09b      	sub	sp, #108	; 0x6c
 8014aca:	4604      	mov	r4, r0
 8014acc:	4630      	mov	r0, r6
 8014ace:	f7fd fa44 	bl	8011f5a <_ZNK8touchgfx4Rect7isEmptyEv>
 8014ad2:	4605      	mov	r5, r0
 8014ad4:	b940      	cbnz	r0, 8014ae8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 8014ad6:	4620      	mov	r0, r4
 8014ad8:	e896 0006 	ldmia.w	r6, {r1, r2}
 8014adc:	f7ff fcaa 	bl	8014434 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8014ae0:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8014ae4:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8014ae8:	4bc8      	ldr	r3, [pc, #800]	; (8014e0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d03e      	beq.n	8014b6e <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8014af0:	4dc7      	ldr	r5, [pc, #796]	; (8014e10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8014af2:	4628      	mov	r0, r5
 8014af4:	f7fd fa31 	bl	8011f5a <_ZNK8touchgfx4Rect7isEmptyEv>
 8014af8:	4606      	mov	r6, r0
 8014afa:	2800      	cmp	r0, #0
 8014afc:	d137      	bne.n	8014b6e <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8014afe:	4628      	mov	r0, r5
 8014b00:	f7ff fa0c 	bl	8013f1c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8014b04:	6829      	ldr	r1, [r5, #0]
 8014b06:	686a      	ldr	r2, [r5, #4]
 8014b08:	4620      	mov	r0, r4
 8014b0a:	f7ff fc93 	bl	8014434 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8014b0e:	802e      	strh	r6, [r5, #0]
 8014b10:	806e      	strh	r6, [r5, #2]
 8014b12:	80ae      	strh	r6, [r5, #4]
 8014b14:	80ee      	strh	r6, [r5, #6]
 8014b16:	ae09      	add	r6, sp, #36	; 0x24
 8014b18:	4630      	mov	r0, r6
 8014b1a:	f7ff fc24 	bl	8014366 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8014b1e:	4abd      	ldr	r2, [pc, #756]	; (8014e14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8014b20:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 8014b24:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 8014b28:	8815      	ldrh	r5, [r2, #0]
 8014b2a:	9202      	str	r2, [sp, #8]
 8014b2c:	462b      	mov	r3, r5
 8014b2e:	429f      	cmp	r7, r3
 8014b30:	d924      	bls.n	8014b7c <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 8014b32:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8014b36:	2907      	cmp	r1, #7
 8014b38:	d816      	bhi.n	8014b68 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 8014b3a:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8014b3e:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8014b42:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 8014b46:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8014b4a:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8014b4e:	1c4a      	adds	r2, r1, #1
 8014b50:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8014b54:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 8014b58:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8014b5c:	f8a2 9002 	strh.w	r9, [r2, #2]
 8014b60:	f8a2 e004 	strh.w	lr, [r2, #4]
 8014b64:	f8a2 c006 	strh.w	ip, [r2, #6]
 8014b68:	3301      	adds	r3, #1
 8014b6a:	b29b      	uxth	r3, r3
 8014b6c:	e7df      	b.n	8014b2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 8014b6e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d1cf      	bne.n	8014b16 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 8014b76:	b01b      	add	sp, #108	; 0x6c
 8014b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b7c:	462f      	mov	r7, r5
 8014b7e:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8014b82:	42bb      	cmp	r3, r7
 8014b84:	d90b      	bls.n	8014b9e <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 8014b86:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 8014b8a:	3701      	adds	r7, #1
 8014b8c:	4620      	mov	r0, r4
 8014b8e:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8014b92:	b2bf      	uxth	r7, r7
 8014b94:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8014b98:	f7ff fc4c 	bl	8014434 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8014b9c:	e7ef      	b.n	8014b7e <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 8014b9e:	4a9e      	ldr	r2, [pc, #632]	; (8014e18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8014ba0:	6813      	ldr	r3, [r2, #0]
 8014ba2:	4690      	mov	r8, r2
 8014ba4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014ba8:	2b01      	cmp	r3, #1
 8014baa:	f040 80e4 	bne.w	8014d76 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 8014bae:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8014bb2:	4629      	mov	r1, r5
 8014bb4:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 8014bb8:	2500      	movs	r5, #0
 8014bba:	33aa      	adds	r3, #170	; 0xaa
 8014bbc:	428f      	cmp	r7, r1
 8014bbe:	f103 0308 	add.w	r3, r3, #8
 8014bc2:	dd0a      	ble.n	8014bda <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 8014bc4:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8014bc8:	3101      	adds	r1, #1
 8014bca:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 8014bce:	4402      	add	r2, r0
 8014bd0:	b212      	sxth	r2, r2
 8014bd2:	4295      	cmp	r5, r2
 8014bd4:	bfb8      	it	lt
 8014bd6:	4615      	movlt	r5, r2
 8014bd8:	e7f0      	b.n	8014bbc <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 8014bda:	4b90      	ldr	r3, [pc, #576]	; (8014e1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8014bdc:	f8df b238 	ldr.w	fp, [pc, #568]	; 8014e18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 8014be0:	881b      	ldrh	r3, [r3, #0]
 8014be2:	46d8      	mov	r8, fp
 8014be4:	2b0f      	cmp	r3, #15
 8014be6:	bf8c      	ite	hi
 8014be8:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 8014bec:	f04f 0a01 	movls.w	sl, #1
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8014bf6:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 8014bfa:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8014bfe:	4438      	add	r0, r7
 8014c00:	b207      	sxth	r7, r0
 8014c02:	f8db 0000 	ldr.w	r0, [fp]
 8014c06:	42bd      	cmp	r5, r7
 8014c08:	6803      	ldr	r3, [r0, #0]
 8014c0a:	f340 8084 	ble.w	8014d16 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8014c0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8014c12:	4798      	blx	r3
 8014c14:	eb07 030a 	add.w	r3, r7, sl
 8014c18:	4298      	cmp	r0, r3
 8014c1a:	da07      	bge.n	8014c2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8014c1c:	4285      	cmp	r5, r0
 8014c1e:	dd05      	ble.n	8014c2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8014c20:	4287      	cmp	r7, r0
 8014c22:	dd6d      	ble.n	8014d00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8014c24:	2f00      	cmp	r7, #0
 8014c26:	dd6b      	ble.n	8014d00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8014c28:	4628      	mov	r0, r5
 8014c2a:	e004      	b.n	8014c36 <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 8014c2c:	4287      	cmp	r7, r0
 8014c2e:	dcfb      	bgt.n	8014c28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 8014c30:	42a8      	cmp	r0, r5
 8014c32:	bfa8      	it	ge
 8014c34:	4628      	movge	r0, r5
 8014c36:	4b7a      	ldr	r3, [pc, #488]	; (8014e20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8014c38:	1bc0      	subs	r0, r0, r7
 8014c3a:	2200      	movs	r2, #0
 8014c3c:	f8ad 7016 	strh.w	r7, [sp, #22]
 8014c40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014c44:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014c48:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014c4c:	9b02      	ldr	r3, [sp, #8]
 8014c4e:	f8ad 001a 	strh.w	r0, [sp, #26]
 8014c52:	881f      	ldrh	r7, [r3, #0]
 8014c54:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8014c58:	42bb      	cmp	r3, r7
 8014c5a:	d9cc      	bls.n	8014bf6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8014c5c:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8014c60:	ab07      	add	r3, sp, #28
 8014c62:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8014c66:	6851      	ldr	r1, [r2, #4]
 8014c68:	c303      	stmia	r3!, {r0, r1}
 8014c6a:	a905      	add	r1, sp, #20
 8014c6c:	a807      	add	r0, sp, #28
 8014c6e:	f7ff fa8b 	bl	8014188 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014c72:	2800      	cmp	r0, #0
 8014c74:	d04c      	beq.n	8014d10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8014c76:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8014c7a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8014c7e:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 8014c82:	4686      	mov	lr, r0
 8014c84:	4290      	cmp	r0, r2
 8014c86:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8014c8a:	4448      	add	r0, r9
 8014c8c:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 8014c90:	bfb8      	it	lt
 8014c92:	4696      	movlt	lr, r2
 8014c94:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8014c98:	444a      	add	r2, r9
 8014c9a:	b280      	uxth	r0, r0
 8014c9c:	4299      	cmp	r1, r3
 8014c9e:	468c      	mov	ip, r1
 8014ca0:	b292      	uxth	r2, r2
 8014ca2:	9303      	str	r3, [sp, #12]
 8014ca4:	bfb8      	it	lt
 8014ca6:	469c      	movlt	ip, r3
 8014ca8:	b203      	sxth	r3, r0
 8014caa:	fa0f f982 	sxth.w	r9, r2
 8014cae:	f8ad e01c 	strh.w	lr, [sp, #28]
 8014cb2:	f8ad c01e 	strh.w	ip, [sp, #30]
 8014cb6:	454b      	cmp	r3, r9
 8014cb8:	bfb8      	it	lt
 8014cba:	4602      	movlt	r2, r0
 8014cbc:	9b03      	ldr	r3, [sp, #12]
 8014cbe:	eba2 020e 	sub.w	r2, r2, lr
 8014cc2:	f8ad 2020 	strh.w	r2, [sp, #32]
 8014cc6:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8014cca:	4411      	add	r1, r2
 8014ccc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8014cd0:	4413      	add	r3, r2
 8014cd2:	b289      	uxth	r1, r1
 8014cd4:	b29b      	uxth	r3, r3
 8014cd6:	b208      	sxth	r0, r1
 8014cd8:	b21a      	sxth	r2, r3
 8014cda:	4290      	cmp	r0, r2
 8014cdc:	bfb8      	it	lt
 8014cde:	460b      	movlt	r3, r1
 8014ce0:	eba3 030c 	sub.w	r3, r3, ip
 8014ce4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8014ce8:	a807      	add	r0, sp, #28
 8014cea:	f7fd f936 	bl	8011f5a <_ZNK8touchgfx4Rect7isEmptyEv>
 8014cee:	b920      	cbnz	r0, 8014cfa <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8014cf0:	6823      	ldr	r3, [r4, #0]
 8014cf2:	a907      	add	r1, sp, #28
 8014cf4:	4620      	mov	r0, r4
 8014cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014cf8:	4798      	blx	r3
 8014cfa:	3701      	adds	r7, #1
 8014cfc:	b2bf      	uxth	r7, r7
 8014cfe:	e7a9      	b.n	8014c54 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8014d00:	f8d8 0000 	ldr.w	r0, [r8]
 8014d04:	2101      	movs	r1, #1
 8014d06:	6803      	ldr	r3, [r0, #0]
 8014d08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014d0c:	4798      	blx	r3
 8014d0e:	e772      	b.n	8014bf6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8014d10:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8014d14:	e7e8      	b.n	8014ce8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8014d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d18:	4798      	blx	r3
 8014d1a:	4b42      	ldr	r3, [pc, #264]	; (8014e24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 8014d1c:	781b      	ldrb	r3, [r3, #0]
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	f43f af29 	beq.w	8014b76 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8014d24:	2300      	movs	r3, #0
 8014d26:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8014d2a:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8014d2e:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 8014d32:	9b02      	ldr	r3, [sp, #8]
 8014d34:	881b      	ldrh	r3, [r3, #0]
 8014d36:	429d      	cmp	r5, r3
 8014d38:	f67f af1d 	bls.w	8014b76 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8014d3c:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 8014d40:	2907      	cmp	r1, #7
 8014d42:	d815      	bhi.n	8014d70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 8014d44:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8014d48:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8014d4c:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8014d50:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8014d54:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8014d58:	1c4a      	adds	r2, r1, #1
 8014d5a:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 8014d5e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8014d62:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 8014d66:	f8a2 e002 	strh.w	lr, [r2, #2]
 8014d6a:	f8a2 c004 	strh.w	ip, [r2, #4]
 8014d6e:	80d7      	strh	r7, [r2, #6]
 8014d70:	3301      	adds	r3, #1
 8014d72:	b29b      	uxth	r3, r3
 8014d74:	e7df      	b.n	8014d36 <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 8014d76:	2b02      	cmp	r3, #2
 8014d78:	f040 8135 	bne.w	8014fe6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8014d7c:	4b2a      	ldr	r3, [pc, #168]	; (8014e28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 8014d7e:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 8014d82:	781b      	ldrb	r3, [r3, #0]
 8014d84:	2b01      	cmp	r3, #1
 8014d86:	f000 809c 	beq.w	8014ec2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8014d8a:	9b02      	ldr	r3, [sp, #8]
 8014d8c:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 8014d90:	f8b3 b000 	ldrh.w	fp, [r3]
 8014d94:	f10b 0b01 	add.w	fp, fp, #1
 8014d98:	fa1f fb8b 	uxth.w	fp, fp
 8014d9c:	2a00      	cmp	r2, #0
 8014d9e:	d0bc      	beq.n	8014d1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8014da0:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 8014da4:	4659      	mov	r1, fp
 8014da6:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 8014daa:	f04f 0800 	mov.w	r8, #0
 8014dae:	441d      	add	r5, r3
 8014db0:	b22d      	sxth	r5, r5
 8014db2:	b28b      	uxth	r3, r1
 8014db4:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8014db8:	429a      	cmp	r2, r3
 8014dba:	f240 80c0 	bls.w	8014f3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 8014dbe:	4427      	add	r7, r4
 8014dc0:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 8014dc4:	4608      	mov	r0, r1
 8014dc6:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 8014dca:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 8014dce:	4563      	cmp	r3, ip
 8014dd0:	f340 80a2 	ble.w	8014f18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 8014dd4:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 8014dd8:	4465      	add	r5, ip
 8014dda:	b22d      	sxth	r5, r5
 8014ddc:	429d      	cmp	r5, r3
 8014dde:	bfa8      	it	ge
 8014de0:	461d      	movge	r5, r3
 8014de2:	3101      	adds	r1, #1
 8014de4:	4680      	mov	r8, r0
 8014de6:	e7e4      	b.n	8014db2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 8014de8:	d10b      	bne.n	8014e02 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 8014dea:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 8014dee:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8014df2:	458c      	cmp	ip, r1
 8014df4:	bfb4      	ite	lt
 8014df6:	469c      	movlt	ip, r3
 8014df8:	46bc      	movge	ip, r7
 8014dfa:	4572      	cmp	r2, lr
 8014dfc:	bfb8      	it	lt
 8014dfe:	4672      	movlt	r2, lr
 8014e00:	e087      	b.n	8014f12 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8014e02:	428a      	cmp	r2, r1
 8014e04:	46bc      	mov	ip, r7
 8014e06:	bfb8      	it	lt
 8014e08:	460a      	movlt	r2, r1
 8014e0a:	e082      	b.n	8014f12 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8014e0c:	2400aedc 	.word	0x2400aedc
 8014e10:	2400aee8 	.word	0x2400aee8
 8014e14:	2400004e 	.word	0x2400004e
 8014e18:	2400aea4 	.word	0x2400aea4
 8014e1c:	2400ae9a 	.word	0x2400ae9a
 8014e20:	2400ae98 	.word	0x2400ae98
 8014e24:	2400aea2 	.word	0x2400aea2
 8014e28:	2400ae9c 	.word	0x2400ae9c
 8014e2c:	1961      	adds	r1, r4, r5
 8014e2e:	ab07      	add	r3, sp, #28
 8014e30:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8014e34:	6849      	ldr	r1, [r1, #4]
 8014e36:	c303      	stmia	r3!, {r0, r1}
 8014e38:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8014e3c:	a807      	add	r0, sp, #28
 8014e3e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8014e42:	2b13      	cmp	r3, #19
 8014e44:	440b      	add	r3, r1
 8014e46:	bfd8      	it	le
 8014e48:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8014e4c:	1a9b      	subs	r3, r3, r2
 8014e4e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8014e52:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014e56:	f7ff f87b 	bl	8013f50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014e5a:	a807      	add	r0, sp, #28
 8014e5c:	f7fd f87d 	bl	8011f5a <_ZNK8touchgfx4Rect7isEmptyEv>
 8014e60:	bb78      	cbnz	r0, 8014ec2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8014e62:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8014e66:	4425      	add	r5, r4
 8014e68:	f8d8 0000 	ldr.w	r0, [r8]
 8014e6c:	f1bc 0f14 	cmp.w	ip, #20
 8014e70:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8014e74:	f8d0 e000 	ldr.w	lr, [r0]
 8014e78:	bfa8      	it	ge
 8014e7a:	f04f 0c14 	movge.w	ip, #20
 8014e7e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8014e82:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8014e86:	fa1f fc8c 	uxth.w	ip, ip
 8014e8a:	f8cd c000 	str.w	ip, [sp]
 8014e8e:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 8014e92:	47d0      	blx	sl
 8014e94:	4682      	mov	sl, r0
 8014e96:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8014e9a:	a807      	add	r0, sp, #28
 8014e9c:	f7ff f83e 	bl	8013f1c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8014ea0:	6823      	ldr	r3, [r4, #0]
 8014ea2:	4620      	mov	r0, r4
 8014ea4:	a907      	add	r1, sp, #28
 8014ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ea8:	4798      	blx	r3
 8014eaa:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8014eae:	eba0 000a 	sub.w	r0, r0, sl
 8014eb2:	b200      	sxth	r0, r0
 8014eb4:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 8014eb8:	b918      	cbnz	r0, 8014ec2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8014eba:	b2b9      	uxth	r1, r7
 8014ebc:	4648      	mov	r0, r9
 8014ebe:	f7ff faa5 	bl	801440c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014ec2:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 8014ec6:	f1bb 0f00 	cmp.w	fp, #0
 8014eca:	f43f af26 	beq.w	8014d1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8014ece:	9b02      	ldr	r3, [sp, #8]
 8014ed0:	2700      	movs	r7, #0
 8014ed2:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 8014ed6:	881b      	ldrh	r3, [r3, #0]
 8014ed8:	3301      	adds	r3, #1
 8014eda:	b29b      	uxth	r3, r3
 8014edc:	b299      	uxth	r1, r3
 8014ede:	00fd      	lsls	r5, r7, #3
 8014ee0:	458b      	cmp	fp, r1
 8014ee2:	d9a3      	bls.n	8014e2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 8014ee4:	4425      	add	r5, r4
 8014ee6:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8014eea:	469c      	mov	ip, r3
 8014eec:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 8014ef0:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8014ef4:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 8014ef8:	4408      	add	r0, r1
 8014efa:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 8014efe:	4471      	add	r1, lr
 8014f00:	b200      	sxth	r0, r0
 8014f02:	b209      	sxth	r1, r1
 8014f04:	4288      	cmp	r0, r1
 8014f06:	f6bf af6f 	bge.w	8014de8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 8014f0a:	4586      	cmp	lr, r0
 8014f0c:	4672      	mov	r2, lr
 8014f0e:	bfb8      	it	lt
 8014f10:	4602      	movlt	r2, r0
 8014f12:	3301      	adds	r3, #1
 8014f14:	4667      	mov	r7, ip
 8014f16:	e7e1      	b.n	8014edc <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 8014f18:	d10c      	bne.n	8014f34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 8014f1a:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 8014f1e:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 8014f22:	4287      	cmp	r7, r0
 8014f24:	bfb4      	ite	lt
 8014f26:	4608      	movlt	r0, r1
 8014f28:	4640      	movge	r0, r8
 8014f2a:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 8014f2e:	443b      	add	r3, r7
 8014f30:	b21b      	sxth	r3, r3
 8014f32:	e753      	b.n	8014ddc <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8014f34:	4565      	cmp	r5, ip
 8014f36:	4640      	mov	r0, r8
 8014f38:	bfa8      	it	ge
 8014f3a:	4665      	movge	r5, ip
 8014f3c:	e751      	b.n	8014de2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 8014f3e:	eb09 0007 	add.w	r0, r9, r7
 8014f42:	4427      	add	r7, r4
 8014f44:	9203      	str	r2, [sp, #12]
 8014f46:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 8014f4a:	f1ba 0f13 	cmp.w	sl, #19
 8014f4e:	bfde      	ittt	le
 8014f50:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 8014f54:	4455      	addle	r5, sl
 8014f56:	b22d      	sxthle	r5, r5
 8014f58:	f7fc ffff 	bl	8011f5a <_ZNK8touchgfx4Rect7isEmptyEv>
 8014f5c:	9a03      	ldr	r2, [sp, #12]
 8014f5e:	2800      	cmp	r0, #0
 8014f60:	f47f af1c 	bne.w	8014d9c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 8014f64:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 8014f68:	fa1f fa8a 	uxth.w	sl, sl
 8014f6c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8014f70:	1aad      	subs	r5, r5, r2
 8014f72:	4829      	ldr	r0, [pc, #164]	; (8015018 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 8014f74:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 8014f78:	2d14      	cmp	r5, #20
 8014f7a:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8014f7e:	6800      	ldr	r0, [r0, #0]
 8014f80:	bfa8      	it	ge
 8014f82:	2514      	movge	r5, #20
 8014f84:	f8ad 101c 	strh.w	r1, [sp, #28]
 8014f88:	f8ad 201e 	strh.w	r2, [sp, #30]
 8014f8c:	b289      	uxth	r1, r1
 8014f8e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014f92:	b2ad      	uxth	r5, r5
 8014f94:	f8d0 c000 	ldr.w	ip, [r0]
 8014f98:	b292      	uxth	r2, r2
 8014f9a:	4555      	cmp	r5, sl
 8014f9c:	bf94      	ite	ls
 8014f9e:	9500      	strls	r5, [sp, #0]
 8014fa0:	f8cd a000 	strhi.w	sl, [sp]
 8014fa4:	b29b      	uxth	r3, r3
 8014fa6:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 8014faa:	47a8      	blx	r5
 8014fac:	6823      	ldr	r3, [r4, #0]
 8014fae:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8014fb2:	a907      	add	r1, sp, #28
 8014fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014fb6:	4620      	mov	r0, r4
 8014fb8:	4798      	blx	r3
 8014fba:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8014fbe:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8014fc2:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8014fc6:	1a5b      	subs	r3, r3, r1
 8014fc8:	440a      	add	r2, r1
 8014fca:	b21b      	sxth	r3, r3
 8014fcc:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 8014fd0:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	f47f aed8 	bne.w	8014d8a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8014fda:	fa1f f188 	uxth.w	r1, r8
 8014fde:	4648      	mov	r0, r9
 8014fe0:	f7ff fa14 	bl	801440c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014fe4:	e6d1      	b.n	8014d8a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8014fe6:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8014fea:	42ab      	cmp	r3, r5
 8014fec:	f67f ae95 	bls.w	8014d1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8014ff0:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8014ff4:	ab07      	add	r3, sp, #28
 8014ff6:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8014ffa:	6851      	ldr	r1, [r2, #4]
 8014ffc:	c303      	stmia	r3!, {r0, r1}
 8014ffe:	a807      	add	r0, sp, #28
 8015000:	f7fc ffab 	bl	8011f5a <_ZNK8touchgfx4Rect7isEmptyEv>
 8015004:	b920      	cbnz	r0, 8015010 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 8015006:	6823      	ldr	r3, [r4, #0]
 8015008:	a907      	add	r1, sp, #28
 801500a:	4620      	mov	r0, r4
 801500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801500e:	4798      	blx	r3
 8015010:	3501      	adds	r5, #1
 8015012:	b2ad      	uxth	r5, r5
 8015014:	e7e7      	b.n	8014fe6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8015016:	bf00      	nop
 8015018:	2400aea4 	.word	0x2400aea4

0801501c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801501c:	4b03      	ldr	r3, [pc, #12]	; (801502c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801501e:	2200      	movs	r2, #0
 8015020:	801a      	strh	r2, [r3, #0]
 8015022:	805a      	strh	r2, [r3, #2]
 8015024:	809a      	strh	r2, [r3, #4]
 8015026:	80da      	strh	r2, [r3, #6]
 8015028:	4770      	bx	lr
 801502a:	bf00      	nop
 801502c:	2400aee8 	.word	0x2400aee8

08015030 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8015030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015034:	b09d      	sub	sp, #116	; 0x74
 8015036:	4606      	mov	r6, r0
 8015038:	4614      	mov	r4, r2
 801503a:	468a      	mov	sl, r1
 801503c:	a803      	add	r0, sp, #12
 801503e:	461d      	mov	r5, r3
 8015040:	f000 fd64 	bl	8015b0c <_ZN8touchgfx12TextProviderC1Ev>
 8015044:	6833      	ldr	r3, [r6, #0]
 8015046:	4630      	mov	r0, r6
 8015048:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801504c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801504e:	4798      	blx	r3
 8015050:	6833      	ldr	r3, [r6, #0]
 8015052:	4607      	mov	r7, r0
 8015054:	4630      	mov	r0, r6
 8015056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015058:	4798      	blx	r3
 801505a:	462a      	mov	r2, r5
 801505c:	2500      	movs	r5, #0
 801505e:	4621      	mov	r1, r4
 8015060:	9000      	str	r0, [sp, #0]
 8015062:	463b      	mov	r3, r7
 8015064:	462c      	mov	r4, r5
 8015066:	46a9      	mov	r9, r5
 8015068:	46a8      	mov	r8, r5
 801506a:	a803      	add	r0, sp, #12
 801506c:	f000 fda1 	bl	8015bb2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015070:	2300      	movs	r3, #0
 8015072:	9302      	str	r3, [sp, #8]
 8015074:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8015078:	429c      	cmp	r4, r3
 801507a:	d002      	beq.n	8015082 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801507c:	455c      	cmp	r4, fp
 801507e:	bf18      	it	ne
 8015080:	4625      	movne	r5, r4
 8015082:	ab02      	add	r3, sp, #8
 8015084:	4632      	mov	r2, r6
 8015086:	4651      	mov	r1, sl
 8015088:	a803      	add	r0, sp, #12
 801508a:	f001 f887 	bl	801619c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801508e:	4604      	mov	r4, r0
 8015090:	b108      	cbz	r0, 8015096 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8015092:	280a      	cmp	r0, #10
 8015094:	d10a      	bne.n	80150ac <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8015096:	45c1      	cmp	r9, r8
 8015098:	bf38      	it	cc
 801509a:	46c1      	movcc	r9, r8
 801509c:	f04f 0800 	mov.w	r8, #0
 80150a0:	2c00      	cmp	r4, #0
 80150a2:	d1e5      	bne.n	8015070 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80150a4:	4648      	mov	r0, r9
 80150a6:	b01d      	add	sp, #116	; 0x74
 80150a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150ac:	9a02      	ldr	r2, [sp, #8]
 80150ae:	2a00      	cmp	r2, #0
 80150b0:	d0de      	beq.n	8015070 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80150b2:	7b57      	ldrb	r7, [r2, #13]
 80150b4:	4629      	mov	r1, r5
 80150b6:	6833      	ldr	r3, [r6, #0]
 80150b8:	007f      	lsls	r7, r7, #1
 80150ba:	8894      	ldrh	r4, [r2, #4]
 80150bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80150be:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80150c2:	7a97      	ldrb	r7, [r2, #10]
 80150c4:	4307      	orrs	r7, r0
 80150c6:	4630      	mov	r0, r6
 80150c8:	4798      	blx	r3
 80150ca:	4438      	add	r0, r7
 80150cc:	4480      	add	r8, r0
 80150ce:	fa1f f888 	uxth.w	r8, r8
 80150d2:	e7e5      	b.n	80150a0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080150d4 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80150d4:	b508      	push	{r3, lr}
 80150d6:	6803      	ldr	r3, [r0, #0]
 80150d8:	68db      	ldr	r3, [r3, #12]
 80150da:	4798      	blx	r3
 80150dc:	b128      	cbz	r0, 80150ea <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80150de:	7b43      	ldrb	r3, [r0, #13]
 80150e0:	7a80      	ldrb	r0, [r0, #10]
 80150e2:	005b      	lsls	r3, r3, #1
 80150e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80150e8:	4318      	orrs	r0, r3
 80150ea:	bd08      	pop	{r3, pc}

080150ec <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80150ec:	b40e      	push	{r1, r2, r3}
 80150ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150f0:	b09e      	sub	sp, #120	; 0x78
 80150f2:	4605      	mov	r5, r0
 80150f4:	ab23      	add	r3, sp, #140	; 0x8c
 80150f6:	a805      	add	r0, sp, #20
 80150f8:	f853 4b04 	ldr.w	r4, [r3], #4
 80150fc:	9303      	str	r3, [sp, #12]
 80150fe:	f000 fd05 	bl	8015b0c <_ZN8touchgfx12TextProviderC1Ev>
 8015102:	682b      	ldr	r3, [r5, #0]
 8015104:	4628      	mov	r0, r5
 8015106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015108:	4798      	blx	r3
 801510a:	682b      	ldr	r3, [r5, #0]
 801510c:	4606      	mov	r6, r0
 801510e:	4628      	mov	r0, r5
 8015110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015112:	4798      	blx	r3
 8015114:	4633      	mov	r3, r6
 8015116:	4621      	mov	r1, r4
 8015118:	ae1e      	add	r6, sp, #120	; 0x78
 801511a:	2400      	movs	r4, #0
 801511c:	9000      	str	r0, [sp, #0]
 801511e:	9a03      	ldr	r2, [sp, #12]
 8015120:	a805      	add	r0, sp, #20
 8015122:	f000 fd46 	bl	8015bb2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015126:	f846 4d68 	str.w	r4, [r6, #-104]!
 801512a:	462a      	mov	r2, r5
 801512c:	4633      	mov	r3, r6
 801512e:	4621      	mov	r1, r4
 8015130:	a805      	add	r0, sp, #20
 8015132:	f001 f833 	bl	801619c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015136:	b300      	cbz	r0, 801517a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8015138:	280a      	cmp	r0, #10
 801513a:	d01a      	beq.n	8015172 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801513c:	9f04      	ldr	r7, [sp, #16]
 801513e:	b1c7      	cbz	r7, 8015172 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8015140:	7b78      	ldrb	r0, [r7, #13]
 8015142:	7a3b      	ldrb	r3, [r7, #8]
 8015144:	00c1      	lsls	r1, r0, #3
 8015146:	88aa      	ldrh	r2, [r5, #4]
 8015148:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801514c:	4319      	orrs	r1, r3
 801514e:	0643      	lsls	r3, r0, #25
 8015150:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8015154:	bf48      	it	mi
 8015156:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801515a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801515e:	bf48      	it	mi
 8015160:	b219      	sxthmi	r1, r3
 8015162:	79fb      	ldrb	r3, [r7, #7]
 8015164:	4303      	orrs	r3, r0
 8015166:	4413      	add	r3, r2
 8015168:	1a5b      	subs	r3, r3, r1
 801516a:	b29b      	uxth	r3, r3
 801516c:	42a3      	cmp	r3, r4
 801516e:	bfc8      	it	gt
 8015170:	b21c      	sxthgt	r4, r3
 8015172:	4633      	mov	r3, r6
 8015174:	462a      	mov	r2, r5
 8015176:	2100      	movs	r1, #0
 8015178:	e7da      	b.n	8015130 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801517a:	b2a0      	uxth	r0, r4
 801517c:	b01e      	add	sp, #120	; 0x78
 801517e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015182:	b003      	add	sp, #12
 8015184:	4770      	bx	lr

08015186 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8015186:	b40e      	push	{r1, r2, r3}
 8015188:	b570      	push	{r4, r5, r6, lr}
 801518a:	b09d      	sub	sp, #116	; 0x74
 801518c:	4604      	mov	r4, r0
 801518e:	ab21      	add	r3, sp, #132	; 0x84
 8015190:	a803      	add	r0, sp, #12
 8015192:	f853 5b04 	ldr.w	r5, [r3], #4
 8015196:	9302      	str	r3, [sp, #8]
 8015198:	f000 fcb8 	bl	8015b0c <_ZN8touchgfx12TextProviderC1Ev>
 801519c:	6823      	ldr	r3, [r4, #0]
 801519e:	4620      	mov	r0, r4
 80151a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80151a2:	4798      	blx	r3
 80151a4:	6823      	ldr	r3, [r4, #0]
 80151a6:	4606      	mov	r6, r0
 80151a8:	4620      	mov	r0, r4
 80151aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80151ac:	2401      	movs	r4, #1
 80151ae:	4798      	blx	r3
 80151b0:	4633      	mov	r3, r6
 80151b2:	9000      	str	r0, [sp, #0]
 80151b4:	4629      	mov	r1, r5
 80151b6:	9a02      	ldr	r2, [sp, #8]
 80151b8:	a803      	add	r0, sp, #12
 80151ba:	f000 fcfa 	bl	8015bb2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80151be:	a803      	add	r0, sp, #12
 80151c0:	f001 f86c 	bl	801629c <_ZN8touchgfx12TextProvider11getNextCharEv>
 80151c4:	b2a3      	uxth	r3, r4
 80151c6:	b138      	cbz	r0, 80151d8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 80151c8:	280a      	cmp	r0, #10
 80151ca:	a803      	add	r0, sp, #12
 80151cc:	bf04      	itt	eq
 80151ce:	3301      	addeq	r3, #1
 80151d0:	b21c      	sxtheq	r4, r3
 80151d2:	f001 f863 	bl	801629c <_ZN8touchgfx12TextProvider11getNextCharEv>
 80151d6:	e7f5      	b.n	80151c4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 80151d8:	4618      	mov	r0, r3
 80151da:	b01d      	add	sp, #116	; 0x74
 80151dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80151e0:	b003      	add	sp, #12
 80151e2:	4770      	bx	lr

080151e4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80151e4:	b40e      	push	{r1, r2, r3}
 80151e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151e8:	b09e      	sub	sp, #120	; 0x78
 80151ea:	4604      	mov	r4, r0
 80151ec:	ab23      	add	r3, sp, #140	; 0x8c
 80151ee:	a805      	add	r0, sp, #20
 80151f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80151f4:	9303      	str	r3, [sp, #12]
 80151f6:	f000 fc89 	bl	8015b0c <_ZN8touchgfx12TextProviderC1Ev>
 80151fa:	6823      	ldr	r3, [r4, #0]
 80151fc:	4620      	mov	r0, r4
 80151fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015200:	4798      	blx	r3
 8015202:	6823      	ldr	r3, [r4, #0]
 8015204:	4606      	mov	r6, r0
 8015206:	4620      	mov	r0, r4
 8015208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801520a:	4798      	blx	r3
 801520c:	4633      	mov	r3, r6
 801520e:	4629      	mov	r1, r5
 8015210:	9000      	str	r0, [sp, #0]
 8015212:	9a03      	ldr	r2, [sp, #12]
 8015214:	a805      	add	r0, sp, #20
 8015216:	f000 fccc 	bl	8015bb2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801521a:	ad1e      	add	r5, sp, #120	; 0x78
 801521c:	2100      	movs	r1, #0
 801521e:	26ff      	movs	r6, #255	; 0xff
 8015220:	4622      	mov	r2, r4
 8015222:	a805      	add	r0, sp, #20
 8015224:	f845 1d68 	str.w	r1, [r5, #-104]!
 8015228:	462b      	mov	r3, r5
 801522a:	f000 ffb7 	bl	801619c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801522e:	b1d8      	cbz	r0, 8015268 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 8015230:	280a      	cmp	r0, #10
 8015232:	d012      	beq.n	801525a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8015234:	9804      	ldr	r0, [sp, #16]
 8015236:	b180      	cbz	r0, 801525a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8015238:	7b47      	ldrb	r7, [r0, #13]
 801523a:	7922      	ldrb	r2, [r4, #4]
 801523c:	00fb      	lsls	r3, r7, #3
 801523e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8015242:	7a03      	ldrb	r3, [r0, #8]
 8015244:	430b      	orrs	r3, r1
 8015246:	0679      	lsls	r1, r7, #25
 8015248:	bf44      	itt	mi
 801524a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801524e:	b21b      	sxthmi	r3, r3
 8015250:	1ad3      	subs	r3, r2, r3
 8015252:	b2db      	uxtb	r3, r3
 8015254:	429e      	cmp	r6, r3
 8015256:	bf28      	it	cs
 8015258:	461e      	movcs	r6, r3
 801525a:	462b      	mov	r3, r5
 801525c:	4622      	mov	r2, r4
 801525e:	2100      	movs	r1, #0
 8015260:	a805      	add	r0, sp, #20
 8015262:	f000 ff9b 	bl	801619c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015266:	e7e2      	b.n	801522e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 8015268:	4630      	mov	r0, r6
 801526a:	b01e      	add	sp, #120	; 0x78
 801526c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015270:	b003      	add	sp, #12
 8015272:	4770      	bx	lr

08015274 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8015274:	b513      	push	{r0, r1, r4, lr}
 8015276:	6803      	ldr	r3, [r0, #0]
 8015278:	2400      	movs	r4, #0
 801527a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801527e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8015282:	f8ad 1004 	strh.w	r1, [sp, #4]
 8015286:	4669      	mov	r1, sp
 8015288:	691b      	ldr	r3, [r3, #16]
 801528a:	9400      	str	r4, [sp, #0]
 801528c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015290:	4798      	blx	r3
 8015292:	b002      	add	sp, #8
 8015294:	bd10      	pop	{r4, pc}

08015296 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8015296:	b538      	push	{r3, r4, r5, lr}
 8015298:	680b      	ldr	r3, [r1, #0]
 801529a:	460c      	mov	r4, r1
 801529c:	4605      	mov	r5, r0
 801529e:	68db      	ldr	r3, [r3, #12]
 80152a0:	4798      	blx	r3
 80152a2:	6823      	ldr	r3, [r4, #0]
 80152a4:	4620      	mov	r0, r4
 80152a6:	4629      	mov	r1, r5
 80152a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152aa:	4798      	blx	r3
 80152ac:	4628      	mov	r0, r5
 80152ae:	bd38      	pop	{r3, r4, r5, pc}

080152b0 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80152b0:	b410      	push	{r4}
 80152b2:	880a      	ldrh	r2, [r1, #0]
 80152b4:	8884      	ldrh	r4, [r0, #4]
 80152b6:	4422      	add	r2, r4
 80152b8:	800a      	strh	r2, [r1, #0]
 80152ba:	884a      	ldrh	r2, [r1, #2]
 80152bc:	88c4      	ldrh	r4, [r0, #6]
 80152be:	4422      	add	r2, r4
 80152c0:	804a      	strh	r2, [r1, #2]
 80152c2:	6940      	ldr	r0, [r0, #20]
 80152c4:	b120      	cbz	r0, 80152d0 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80152c6:	6803      	ldr	r3, [r0, #0]
 80152c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80152cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152ce:	4718      	bx	r3
 80152d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80152d4:	4770      	bx	lr

080152d6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80152d6:	b570      	push	{r4, r5, r6, lr}
 80152d8:	8882      	ldrh	r2, [r0, #4]
 80152da:	460c      	mov	r4, r1
 80152dc:	880b      	ldrh	r3, [r1, #0]
 80152de:	4605      	mov	r5, r0
 80152e0:	4413      	add	r3, r2
 80152e2:	800b      	strh	r3, [r1, #0]
 80152e4:	884b      	ldrh	r3, [r1, #2]
 80152e6:	88c2      	ldrh	r2, [r0, #6]
 80152e8:	4413      	add	r3, r2
 80152ea:	804b      	strh	r3, [r1, #2]
 80152ec:	1d01      	adds	r1, r0, #4
 80152ee:	4620      	mov	r0, r4
 80152f0:	f7fc fdf0 	bl	8011ed4 <_ZN8touchgfx4RectaNERKS0_>
 80152f4:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	dd0b      	ble.n	8015314 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80152fc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8015300:	2b00      	cmp	r3, #0
 8015302:	dd07      	ble.n	8015314 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8015304:	6968      	ldr	r0, [r5, #20]
 8015306:	b128      	cbz	r0, 8015314 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8015308:	6803      	ldr	r3, [r0, #0]
 801530a:	4621      	mov	r1, r4
 801530c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801530e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015312:	4718      	bx	r3
 8015314:	bd70      	pop	{r4, r5, r6, pc}
	...

08015318 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8015318:	b570      	push	{r4, r5, r6, lr}
 801531a:	8882      	ldrh	r2, [r0, #4]
 801531c:	460c      	mov	r4, r1
 801531e:	880b      	ldrh	r3, [r1, #0]
 8015320:	4605      	mov	r5, r0
 8015322:	4413      	add	r3, r2
 8015324:	800b      	strh	r3, [r1, #0]
 8015326:	884b      	ldrh	r3, [r1, #2]
 8015328:	88c2      	ldrh	r2, [r0, #6]
 801532a:	4413      	add	r3, r2
 801532c:	804b      	strh	r3, [r1, #2]
 801532e:	1d01      	adds	r1, r0, #4
 8015330:	4620      	mov	r0, r4
 8015332:	f7fc fdcf 	bl	8011ed4 <_ZN8touchgfx4RectaNERKS0_>
 8015336:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801533a:	2b00      	cmp	r3, #0
 801533c:	dd18      	ble.n	8015370 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801533e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8015342:	2b00      	cmp	r3, #0
 8015344:	dd14      	ble.n	8015370 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8015346:	6968      	ldr	r0, [r5, #20]
 8015348:	b128      	cbz	r0, 8015356 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801534a:	6803      	ldr	r3, [r0, #0]
 801534c:	4621      	mov	r1, r4
 801534e:	691b      	ldr	r3, [r3, #16]
 8015350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015354:	4718      	bx	r3
 8015356:	4b07      	ldr	r3, [pc, #28]	; (8015374 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	3304      	adds	r3, #4
 801535c:	429d      	cmp	r5, r3
 801535e:	d107      	bne.n	8015370 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8015360:	f7fe fff0 	bl	8014344 <_ZN8touchgfx11Application11getInstanceEv>
 8015364:	6821      	ldr	r1, [r4, #0]
 8015366:	6862      	ldr	r2, [r4, #4]
 8015368:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801536c:	f7ff b862 	b.w	8014434 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8015370:	bd70      	pop	{r4, r5, r6, pc}
 8015372:	bf00      	nop
 8015374:	2400aee0 	.word	0x2400aee0

08015378 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8015378:	b570      	push	{r4, r5, r6, lr}
 801537a:	4604      	mov	r4, r0
 801537c:	4616      	mov	r6, r2
 801537e:	460d      	mov	r5, r1
 8015380:	b901      	cbnz	r1, 8015384 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8015382:	b192      	cbz	r2, 80153aa <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8015384:	6823      	ldr	r3, [r4, #0]
 8015386:	4620      	mov	r0, r4
 8015388:	699b      	ldr	r3, [r3, #24]
 801538a:	4798      	blx	r3
 801538c:	88e2      	ldrh	r2, [r4, #6]
 801538e:	88a1      	ldrh	r1, [r4, #4]
 8015390:	4620      	mov	r0, r4
 8015392:	4432      	add	r2, r6
 8015394:	4429      	add	r1, r5
 8015396:	b212      	sxth	r2, r2
 8015398:	b209      	sxth	r1, r1
 801539a:	f7f2 fe00 	bl	8007f9e <_ZN8touchgfx8Drawable5setXYEss>
 801539e:	6823      	ldr	r3, [r4, #0]
 80153a0:	4620      	mov	r0, r4
 80153a2:	699b      	ldr	r3, [r3, #24]
 80153a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80153a8:	4718      	bx	r3
 80153aa:	bd70      	pop	{r4, r5, r6, pc}

080153ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80153ac:	b510      	push	{r4, lr}
 80153ae:	2300      	movs	r3, #0
 80153b0:	4604      	mov	r4, r0
 80153b2:	4608      	mov	r0, r1
 80153b4:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80153b8:	8023      	strh	r3, [r4, #0]
 80153ba:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80153be:	8063      	strh	r3, [r4, #2]
 80153c0:	6803      	ldr	r3, [r0, #0]
 80153c2:	80a1      	strh	r1, [r4, #4]
 80153c4:	4621      	mov	r1, r4
 80153c6:	80e2      	strh	r2, [r4, #6]
 80153c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153ca:	4798      	blx	r3
 80153cc:	4620      	mov	r0, r4
 80153ce:	bd10      	pop	{r4, pc}

080153d0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 80153d0:	b530      	push	{r4, r5, lr}
 80153d2:	8083      	strh	r3, [r0, #4]
 80153d4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80153d8:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80153dc:	7183      	strb	r3, [r0, #6]
 80153de:	79c3      	ldrb	r3, [r0, #7]
 80153e0:	6101      	str	r1, [r0, #16]
 80153e2:	f365 0306 	bfi	r3, r5, #0, #7
 80153e6:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80153ea:	8282      	strh	r2, [r0, #20]
 80153ec:	f365 13c7 	bfi	r3, r5, #7, #1
 80153f0:	71c3      	strb	r3, [r0, #7]
 80153f2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80153f6:	7203      	strb	r3, [r0, #8]
 80153f8:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80153fc:	7243      	strb	r3, [r0, #9]
 80153fe:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015402:	8143      	strh	r3, [r0, #10]
 8015404:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8015408:	8183      	strh	r3, [r0, #12]
 801540a:	4b01      	ldr	r3, [pc, #4]	; (8015410 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801540c:	6003      	str	r3, [r0, #0]
 801540e:	bd30      	pop	{r4, r5, pc}
 8015410:	080250ec 	.word	0x080250ec

08015414 <_ZNK8touchgfx9ConstFont4findEt>:
 8015414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015416:	6904      	ldr	r4, [r0, #16]
 8015418:	b3bc      	cbz	r4, 801548a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801541a:	88a3      	ldrh	r3, [r4, #4]
 801541c:	8a82      	ldrh	r2, [r0, #20]
 801541e:	1acb      	subs	r3, r1, r3
 8015420:	f102 32ff 	add.w	r2, r2, #4294967295
 8015424:	d431      	bmi.n	801548a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015426:	4293      	cmp	r3, r2
 8015428:	dd0c      	ble.n	8015444 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801542a:	230e      	movs	r3, #14
 801542c:	fb03 4302 	mla	r3, r3, r2, r4
 8015430:	889b      	ldrh	r3, [r3, #4]
 8015432:	1a5b      	subs	r3, r3, r1
 8015434:	1ad3      	subs	r3, r2, r3
 8015436:	429a      	cmp	r2, r3
 8015438:	db27      	blt.n	801548a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801543a:	2b00      	cmp	r3, #0
 801543c:	bfbc      	itt	lt
 801543e:	2302      	movlt	r3, #2
 8015440:	fb92 f3f3 	sdivlt	r3, r2, r3
 8015444:	2500      	movs	r5, #0
 8015446:	260e      	movs	r6, #14
 8015448:	4295      	cmp	r5, r2
 801544a:	dc1e      	bgt.n	801548a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801544c:	fb06 4003 	mla	r0, r6, r3, r4
 8015450:	8887      	ldrh	r7, [r0, #4]
 8015452:	42b9      	cmp	r1, r7
 8015454:	d01a      	beq.n	801548c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8015456:	d20d      	bcs.n	8015474 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8015458:	1e5a      	subs	r2, r3, #1
 801545a:	4295      	cmp	r5, r2
 801545c:	dc15      	bgt.n	801548a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801545e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8015462:	1a5b      	subs	r3, r3, r1
 8015464:	1ad3      	subs	r3, r2, r3
 8015466:	429a      	cmp	r2, r3
 8015468:	db0f      	blt.n	801548a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801546a:	429d      	cmp	r5, r3
 801546c:	ddec      	ble.n	8015448 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801546e:	1953      	adds	r3, r2, r5
 8015470:	105b      	asrs	r3, r3, #1
 8015472:	e7e9      	b.n	8015448 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8015474:	1c5d      	adds	r5, r3, #1
 8015476:	42aa      	cmp	r2, r5
 8015478:	db07      	blt.n	801548a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801547a:	8a43      	ldrh	r3, [r0, #18]
 801547c:	1acb      	subs	r3, r1, r3
 801547e:	442b      	add	r3, r5
 8015480:	429d      	cmp	r5, r3
 8015482:	dc02      	bgt.n	801548a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015484:	429a      	cmp	r2, r3
 8015486:	dadf      	bge.n	8015448 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8015488:	e7f1      	b.n	801546e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801548a:	2000      	movs	r0, #0
 801548c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801548e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801548e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015490:	4604      	mov	r4, r0
 8015492:	4617      	mov	r7, r2
 8015494:	461e      	mov	r6, r3
 8015496:	b911      	cbnz	r1, 801549e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8015498:	2500      	movs	r5, #0
 801549a:	4628      	mov	r0, r5
 801549c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801549e:	290a      	cmp	r1, #10
 80154a0:	d0fa      	beq.n	8015498 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80154a2:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80154a6:	4291      	cmp	r1, r2
 80154a8:	d0f6      	beq.n	8015498 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80154aa:	f242 020b 	movw	r2, #8203	; 0x200b
 80154ae:	4291      	cmp	r1, r2
 80154b0:	d0f2      	beq.n	8015498 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80154b2:	f7ff ffaf 	bl	8015414 <_ZNK8touchgfx9ConstFont4findEt>
 80154b6:	4605      	mov	r5, r0
 80154b8:	b950      	cbnz	r0, 80154d0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80154ba:	6823      	ldr	r3, [r4, #0]
 80154bc:	4620      	mov	r0, r4
 80154be:	691b      	ldr	r3, [r3, #16]
 80154c0:	4798      	blx	r3
 80154c2:	4601      	mov	r1, r0
 80154c4:	4620      	mov	r0, r4
 80154c6:	f7ff ffa5 	bl	8015414 <_ZNK8touchgfx9ConstFont4findEt>
 80154ca:	4605      	mov	r5, r0
 80154cc:	2800      	cmp	r0, #0
 80154ce:	d0e3      	beq.n	8015498 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80154d0:	6823      	ldr	r3, [r4, #0]
 80154d2:	4629      	mov	r1, r5
 80154d4:	4620      	mov	r0, r4
 80154d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80154d8:	4798      	blx	r3
 80154da:	6038      	str	r0, [r7, #0]
 80154dc:	6823      	ldr	r3, [r4, #0]
 80154de:	4620      	mov	r0, r4
 80154e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80154e2:	4798      	blx	r3
 80154e4:	7030      	strb	r0, [r6, #0]
 80154e6:	e7d8      	b.n	801549a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080154e8 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 80154e8:	2000      	movs	r0, #0
 80154ea:	4770      	bx	lr

080154ec <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 80154ec:	2001      	movs	r0, #1
 80154ee:	4770      	bx	lr

080154f0 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 80154f0:	2002      	movs	r0, #2
 80154f2:	4770      	bx	lr

080154f4 <_ZN8touchgfx12GestureEventD1Ev>:
 80154f4:	4770      	bx	lr

080154f6 <_ZN8touchgfx9DragEventD1Ev>:
 80154f6:	4770      	bx	lr

080154f8 <_ZN8touchgfx10ClickEventD1Ev>:
 80154f8:	4770      	bx	lr

080154fa <_ZN8touchgfx10ClickEventD0Ev>:
 80154fa:	b510      	push	{r4, lr}
 80154fc:	4604      	mov	r4, r0
 80154fe:	210c      	movs	r1, #12
 8015500:	f00d f88b 	bl	802261a <_ZdlPvj>
 8015504:	4620      	mov	r0, r4
 8015506:	bd10      	pop	{r4, pc}

08015508 <_ZN8touchgfx9DragEventD0Ev>:
 8015508:	b510      	push	{r4, lr}
 801550a:	4604      	mov	r4, r0
 801550c:	2110      	movs	r1, #16
 801550e:	f00d f884 	bl	802261a <_ZdlPvj>
 8015512:	4620      	mov	r0, r4
 8015514:	bd10      	pop	{r4, pc}

08015516 <_ZN8touchgfx12GestureEventD0Ev>:
 8015516:	b510      	push	{r4, lr}
 8015518:	4604      	mov	r4, r0
 801551a:	210c      	movs	r1, #12
 801551c:	f00d f87d 	bl	802261a <_ZdlPvj>
 8015520:	4620      	mov	r0, r4
 8015522:	bd10      	pop	{r4, pc}

08015524 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8015524:	b530      	push	{r4, r5, lr}
 8015526:	460d      	mov	r5, r1
 8015528:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801552a:	b087      	sub	sp, #28
 801552c:	4604      	mov	r4, r0
 801552e:	b301      	cbz	r1, 8015572 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8015530:	a801      	add	r0, sp, #4
 8015532:	f7ff ff3b 	bl	80153ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015536:	892a      	ldrh	r2, [r5, #8]
 8015538:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801553c:	7928      	ldrb	r0, [r5, #4]
 801553e:	1ad2      	subs	r2, r2, r3
 8015540:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8015542:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8015546:	441a      	add	r2, r3
 8015548:	896b      	ldrh	r3, [r5, #10]
 801554a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801554e:	f88d 0010 	strb.w	r0, [sp, #16]
 8015552:	1b5b      	subs	r3, r3, r5
 8015554:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8015556:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8015558:	442b      	add	r3, r5
 801555a:	4d07      	ldr	r5, [pc, #28]	; (8015578 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801555c:	f8ad 1012 	strh.w	r1, [sp, #18]
 8015560:	a903      	add	r1, sp, #12
 8015562:	9503      	str	r5, [sp, #12]
 8015564:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015568:	f8ad 3016 	strh.w	r3, [sp, #22]
 801556c:	6803      	ldr	r3, [r0, #0]
 801556e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015570:	4798      	blx	r3
 8015572:	b007      	add	sp, #28
 8015574:	bd30      	pop	{r4, r5, pc}
 8015576:	bf00      	nop
 8015578:	0802516c 	.word	0x0802516c

0801557c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801557c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015580:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015582:	b08a      	sub	sp, #40	; 0x28
 8015584:	4604      	mov	r4, r0
 8015586:	460d      	mov	r5, r1
 8015588:	b113      	cbz	r3, 8015590 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801558a:	790b      	ldrb	r3, [r1, #4]
 801558c:	2b00      	cmp	r3, #0
 801558e:	d044      	beq.n	801561a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8015590:	f104 0804 	add.w	r8, r4, #4
 8015594:	a803      	add	r0, sp, #12
 8015596:	4641      	mov	r1, r8
 8015598:	f7ff ff08 	bl	80153ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801559c:	792b      	ldrb	r3, [r5, #4]
 801559e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80155a2:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80155a6:	b983      	cbnz	r3, 80155ca <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 80155a8:	f104 0336 	add.w	r3, r4, #54	; 0x36
 80155ac:	892a      	ldrh	r2, [r5, #8]
 80155ae:	88e9      	ldrh	r1, [r5, #6]
 80155b0:	4640      	mov	r0, r8
 80155b2:	1b92      	subs	r2, r2, r6
 80155b4:	9301      	str	r3, [sp, #4]
 80155b6:	1bc9      	subs	r1, r1, r7
 80155b8:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80155bc:	b212      	sxth	r2, r2
 80155be:	9300      	str	r3, [sp, #0]
 80155c0:	b209      	sxth	r1, r1
 80155c2:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80155c6:	f7fc fba3 	bl	8011d10 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 80155ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80155cc:	b329      	cbz	r1, 801561a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80155ce:	a805      	add	r0, sp, #20
 80155d0:	f7ff feec 	bl	80153ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80155d4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80155d8:	792b      	ldrb	r3, [r5, #4]
 80155da:	a907      	add	r1, sp, #28
 80155dc:	1abf      	subs	r7, r7, r2
 80155de:	88ea      	ldrh	r2, [r5, #6]
 80155e0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80155e2:	4417      	add	r7, r2
 80155e4:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 80155e6:	f88d 3020 	strb.w	r3, [sp, #32]
 80155ea:	4417      	add	r7, r2
 80155ec:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80155f0:	1ab6      	subs	r6, r6, r2
 80155f2:	892a      	ldrh	r2, [r5, #8]
 80155f4:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 80155f8:	4416      	add	r6, r2
 80155fa:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80155fc:	4416      	add	r6, r2
 80155fe:	4a08      	ldr	r2, [pc, #32]	; (8015620 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8015600:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8015604:	2600      	movs	r6, #0
 8015606:	9207      	str	r2, [sp, #28]
 8015608:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801560c:	6803      	ldr	r3, [r0, #0]
 801560e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015610:	4798      	blx	r3
 8015612:	792b      	ldrb	r3, [r5, #4]
 8015614:	b10b      	cbz	r3, 801561a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8015616:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801561a:	b00a      	add	sp, #40	; 0x28
 801561c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015620:	08025144 	.word	0x08025144

08015624 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8015624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015628:	460c      	mov	r4, r1
 801562a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801562c:	b088      	sub	sp, #32
 801562e:	4605      	mov	r5, r0
 8015630:	2900      	cmp	r1, #0
 8015632:	d06d      	beq.n	8015710 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8015634:	4668      	mov	r0, sp
 8015636:	f7ff feb9 	bl	80153ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801563a:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801563c:	88e3      	ldrh	r3, [r4, #6]
 801563e:	f9bd 8000 	ldrsh.w	r8, [sp]
 8015642:	440b      	add	r3, r1
 8015644:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8015648:	b21b      	sxth	r3, r3
 801564a:	4543      	cmp	r3, r8
 801564c:	db31      	blt.n	80156b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801564e:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8015652:	44c4      	add	ip, r8
 8015654:	fa0f fc8c 	sxth.w	ip, ip
 8015658:	4563      	cmp	r3, ip
 801565a:	da2a      	bge.n	80156b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801565c:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801565e:	8926      	ldrh	r6, [r4, #8]
 8015660:	4416      	add	r6, r2
 8015662:	b236      	sxth	r6, r6
 8015664:	42be      	cmp	r6, r7
 8015666:	db24      	blt.n	80156b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8015668:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801566c:	4438      	add	r0, r7
 801566e:	b200      	sxth	r0, r0
 8015670:	4286      	cmp	r6, r0
 8015672:	da1e      	bge.n	80156b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8015674:	8963      	ldrh	r3, [r4, #10]
 8015676:	4419      	add	r1, r3
 8015678:	b209      	sxth	r1, r1
 801567a:	4541      	cmp	r1, r8
 801567c:	db08      	blt.n	8015690 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801567e:	4561      	cmp	r1, ip
 8015680:	da06      	bge.n	8015690 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8015682:	89a3      	ldrh	r3, [r4, #12]
 8015684:	441a      	add	r2, r3
 8015686:	b212      	sxth	r2, r2
 8015688:	42ba      	cmp	r2, r7
 801568a:	db01      	blt.n	8015690 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801568c:	4282      	cmp	r2, r0
 801568e:	db10      	blt.n	80156b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8015690:	4b21      	ldr	r3, [pc, #132]	; (8015718 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8015692:	a904      	add	r1, sp, #16
 8015694:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8015696:	9304      	str	r3, [sp, #16]
 8015698:	2302      	movs	r3, #2
 801569a:	f88d 3014 	strb.w	r3, [sp, #20]
 801569e:	2300      	movs	r3, #0
 80156a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80156a4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80156a8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80156ac:	6803      	ldr	r3, [r0, #0]
 80156ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80156b0:	4798      	blx	r3
 80156b2:	1d29      	adds	r1, r5, #4
 80156b4:	a802      	add	r0, sp, #8
 80156b6:	f7ff fe79 	bl	80153ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80156ba:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80156be:	88e0      	ldrh	r0, [r4, #6]
 80156c0:	eba3 0808 	sub.w	r8, r3, r8
 80156c4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80156c8:	7921      	ldrb	r1, [r4, #4]
 80156ca:	fa1f f888 	uxth.w	r8, r8
 80156ce:	1bdf      	subs	r7, r3, r7
 80156d0:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 80156d4:	b2bb      	uxth	r3, r7
 80156d6:	4440      	add	r0, r8
 80156d8:	8922      	ldrh	r2, [r4, #8]
 80156da:	8967      	ldrh	r7, [r4, #10]
 80156dc:	4460      	add	r0, ip
 80156de:	89a4      	ldrh	r4, [r4, #12]
 80156e0:	441a      	add	r2, r3
 80156e2:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80156e4:	44b8      	add	r8, r7
 80156e6:	4423      	add	r3, r4
 80156e8:	f8ad 0016 	strh.w	r0, [sp, #22]
 80156ec:	4432      	add	r2, r6
 80156ee:	44e0      	add	r8, ip
 80156f0:	4433      	add	r3, r6
 80156f2:	4c0a      	ldr	r4, [pc, #40]	; (801571c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 80156f4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80156f6:	f88d 1014 	strb.w	r1, [sp, #20]
 80156fa:	a904      	add	r1, sp, #16
 80156fc:	9404      	str	r4, [sp, #16]
 80156fe:	f8ad 2018 	strh.w	r2, [sp, #24]
 8015702:	f8ad 801a 	strh.w	r8, [sp, #26]
 8015706:	f8ad 301c 	strh.w	r3, [sp, #28]
 801570a:	6803      	ldr	r3, [r0, #0]
 801570c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801570e:	4798      	blx	r3
 8015710:	b008      	add	sp, #32
 8015712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015716:	bf00      	nop
 8015718:	08025144 	.word	0x08025144
 801571c:	08025158 	.word	0x08025158

08015720 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8015720:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015722:	4604      	mov	r4, r0
 8015724:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8015728:	3201      	adds	r2, #1
 801572a:	d112      	bne.n	8015752 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801572c:	2500      	movs	r5, #0
 801572e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8015732:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8015736:	6803      	ldr	r3, [r0, #0]
 8015738:	9500      	str	r5, [sp, #0]
 801573a:	466d      	mov	r5, sp
 801573c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8015740:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015744:	4629      	mov	r1, r5
 8015746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015748:	4798      	blx	r3
 801574a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801574e:	e884 0003 	stmia.w	r4, {r0, r1}
 8015752:	4620      	mov	r0, r4
 8015754:	b003      	add	sp, #12
 8015756:	bd30      	pop	{r4, r5, pc}

08015758 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8015758:	b513      	push	{r0, r1, r4, lr}
 801575a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801575e:	4604      	mov	r4, r0
 8015760:	3301      	adds	r3, #1
 8015762:	d109      	bne.n	8015778 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8015764:	4601      	mov	r1, r0
 8015766:	4668      	mov	r0, sp
 8015768:	f7ff fe20 	bl	80153ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801576c:	f8bd 3000 	ldrh.w	r3, [sp]
 8015770:	8423      	strh	r3, [r4, #32]
 8015772:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015776:	8463      	strh	r3, [r4, #34]	; 0x22
 8015778:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801577c:	b002      	add	sp, #8
 801577e:	bd10      	pop	{r4, pc}

08015780 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8015780:	b513      	push	{r0, r1, r4, lr}
 8015782:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8015786:	4604      	mov	r4, r0
 8015788:	3301      	adds	r3, #1
 801578a:	d109      	bne.n	80157a0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801578c:	4601      	mov	r1, r0
 801578e:	4668      	mov	r0, sp
 8015790:	f7ff fe0c 	bl	80153ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015794:	f8bd 3000 	ldrh.w	r3, [sp]
 8015798:	8423      	strh	r3, [r4, #32]
 801579a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801579e:	8463      	strh	r3, [r4, #34]	; 0x22
 80157a0:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80157a4:	b002      	add	sp, #8
 80157a6:	bd10      	pop	{r4, pc}

080157a8 <_ZN8touchgfx6ScreenC1Ev>:
 80157a8:	b570      	push	{r4, r5, r6, lr}
 80157aa:	4b17      	ldr	r3, [pc, #92]	; (8015808 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 80157ac:	4605      	mov	r5, r0
 80157ae:	4a17      	ldr	r2, [pc, #92]	; (801580c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80157b0:	2101      	movs	r1, #1
 80157b2:	f845 3b04 	str.w	r3, [r5], #4
 80157b6:	2300      	movs	r3, #0
 80157b8:	6042      	str	r2, [r0, #4]
 80157ba:	4604      	mov	r4, r0
 80157bc:	8103      	strh	r3, [r0, #8]
 80157be:	8143      	strh	r3, [r0, #10]
 80157c0:	8183      	strh	r3, [r0, #12]
 80157c2:	81c3      	strh	r3, [r0, #14]
 80157c4:	8203      	strh	r3, [r0, #16]
 80157c6:	8243      	strh	r3, [r0, #18]
 80157c8:	8283      	strh	r3, [r0, #20]
 80157ca:	82c3      	strh	r3, [r0, #22]
 80157cc:	6203      	str	r3, [r0, #32]
 80157ce:	8483      	strh	r3, [r0, #36]	; 0x24
 80157d0:	84c3      	strh	r3, [r0, #38]	; 0x26
 80157d2:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80157d6:	6343      	str	r3, [r0, #52]	; 0x34
 80157d8:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 80157dc:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80157e0:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80157e4:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 80157e8:	4b09      	ldr	r3, [pc, #36]	; (8015810 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80157ea:	4628      	mov	r0, r5
 80157ec:	f9b3 6000 	ldrsh.w	r6, [r3]
 80157f0:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80157f2:	4a08      	ldr	r2, [pc, #32]	; (8015814 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80157f4:	f9b2 1000 	ldrsh.w	r1, [r2]
 80157f8:	4798      	blx	r3
 80157fa:	6863      	ldr	r3, [r4, #4]
 80157fc:	4628      	mov	r0, r5
 80157fe:	4631      	mov	r1, r6
 8015800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015802:	4798      	blx	r3
 8015804:	4620      	mov	r0, r4
 8015806:	bd70      	pop	{r4, r5, r6, pc}
 8015808:	08025180 	.word	0x08025180
 801580c:	08024bcc 	.word	0x08024bcc
 8015810:	2400ae9a 	.word	0x2400ae9a
 8015814:	2400ae98 	.word	0x2400ae98

08015818 <_ZN8touchgfx6Screen4drawEv>:
 8015818:	4b09      	ldr	r3, [pc, #36]	; (8015840 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801581a:	b507      	push	{r0, r1, r2, lr}
 801581c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015820:	2100      	movs	r1, #0
 8015822:	4b08      	ldr	r3, [pc, #32]	; (8015844 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8015824:	9100      	str	r1, [sp, #0]
 8015826:	4669      	mov	r1, sp
 8015828:	f9b3 3000 	ldrsh.w	r3, [r3]
 801582c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015830:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015834:	6803      	ldr	r3, [r0, #0]
 8015836:	689b      	ldr	r3, [r3, #8]
 8015838:	4798      	blx	r3
 801583a:	b003      	add	sp, #12
 801583c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015840:	2400ae98 	.word	0x2400ae98
 8015844:	2400ae9a 	.word	0x2400ae9a

08015848 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8015848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801584c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8015850:	b089      	sub	sp, #36	; 0x24
 8015852:	4680      	mov	r8, r0
 8015854:	460c      	mov	r4, r1
 8015856:	2b00      	cmp	r3, #0
 8015858:	4615      	mov	r5, r2
 801585a:	dd0e      	ble.n	801587a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801585c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8015860:	2b00      	cmp	r3, #0
 8015862:	dd0a      	ble.n	801587a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8015864:	4628      	mov	r0, r5
 8015866:	f7ff ff5b 	bl	8015720 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801586a:	4621      	mov	r1, r4
 801586c:	f7fe fc8c 	bl	8014188 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015870:	69eb      	ldr	r3, [r5, #28]
 8015872:	b928      	cbnz	r0, 8015880 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8015874:	461d      	mov	r5, r3
 8015876:	2b00      	cmp	r3, #0
 8015878:	d1f4      	bne.n	8015864 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801587a:	b009      	add	sp, #36	; 0x24
 801587c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015880:	ae04      	add	r6, sp, #16
 8015882:	2b00      	cmp	r3, #0
 8015884:	f000 80b5 	beq.w	80159f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8015888:	682b      	ldr	r3, [r5, #0]
 801588a:	4629      	mov	r1, r5
 801588c:	a802      	add	r0, sp, #8
 801588e:	68db      	ldr	r3, [r3, #12]
 8015890:	4798      	blx	r3
 8015892:	4628      	mov	r0, r5
 8015894:	f7ff ff60 	bl	8015758 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8015898:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801589c:	4407      	add	r7, r0
 801589e:	4628      	mov	r0, r5
 80158a0:	f7ff ff6e 	bl	8015780 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80158a4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80158a8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80158ac:	b23f      	sxth	r7, r7
 80158ae:	4418      	add	r0, r3
 80158b0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80158b4:	4621      	mov	r1, r4
 80158b6:	f8ad 2014 	strh.w	r2, [sp, #20]
 80158ba:	f8ad 0012 	strh.w	r0, [sp, #18]
 80158be:	4630      	mov	r0, r6
 80158c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80158c4:	f8ad 7010 	strh.w	r7, [sp, #16]
 80158c8:	f7fc fb04 	bl	8011ed4 <_ZN8touchgfx4RectaNERKS0_>
 80158cc:	4628      	mov	r0, r5
 80158ce:	f7ff ff27 	bl	8015720 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80158d2:	ab06      	add	r3, sp, #24
 80158d4:	4602      	mov	r2, r0
 80158d6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80158da:	e883 0003 	stmia.w	r3, {r0, r1}
 80158de:	4611      	mov	r1, r2
 80158e0:	4618      	mov	r0, r3
 80158e2:	f7fc faf7 	bl	8011ed4 <_ZN8touchgfx4RectaNERKS0_>
 80158e6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80158ea:	f9b4 1000 	ldrsh.w	r1, [r4]
 80158ee:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80158f2:	4299      	cmp	r1, r3
 80158f4:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80158f8:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80158fc:	d10b      	bne.n	8015916 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80158fe:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8015902:	4552      	cmp	r2, sl
 8015904:	d107      	bne.n	8015916 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8015906:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801590a:	455a      	cmp	r2, fp
 801590c:	d103      	bne.n	8015916 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801590e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8015912:	454a      	cmp	r2, r9
 8015914:	d06d      	beq.n	80159f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8015916:	f1bb 0f00 	cmp.w	fp, #0
 801591a:	dd65      	ble.n	80159e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801591c:	f1b9 0f00 	cmp.w	r9, #0
 8015920:	dd62      	ble.n	80159e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8015922:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8015926:	fa1f f08a 	uxth.w	r0, sl
 801592a:	4552      	cmp	r2, sl
 801592c:	9000      	str	r0, [sp, #0]
 801592e:	da12      	bge.n	8015956 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8015930:	9301      	str	r3, [sp, #4]
 8015932:	9b00      	ldr	r3, [sp, #0]
 8015934:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8015938:	f8ad 2012 	strh.w	r2, [sp, #18]
 801593c:	1a9a      	subs	r2, r3, r2
 801593e:	f8ad 1010 	strh.w	r1, [sp, #16]
 8015942:	4631      	mov	r1, r6
 8015944:	f8ad 0014 	strh.w	r0, [sp, #20]
 8015948:	4640      	mov	r0, r8
 801594a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801594e:	69ea      	ldr	r2, [r5, #28]
 8015950:	f7ff ff7a 	bl	8015848 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8015954:	9b01      	ldr	r3, [sp, #4]
 8015956:	f9b4 2000 	ldrsh.w	r2, [r4]
 801595a:	b29f      	uxth	r7, r3
 801595c:	429a      	cmp	r2, r3
 801595e:	da0d      	bge.n	801597c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8015960:	f8ad 2010 	strh.w	r2, [sp, #16]
 8015964:	1aba      	subs	r2, r7, r2
 8015966:	f8ad a012 	strh.w	sl, [sp, #18]
 801596a:	4631      	mov	r1, r6
 801596c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015970:	4640      	mov	r0, r8
 8015972:	f8ad 9016 	strh.w	r9, [sp, #22]
 8015976:	69ea      	ldr	r2, [r5, #28]
 8015978:	f7ff ff66 	bl	8015848 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801597c:	8822      	ldrh	r2, [r4, #0]
 801597e:	445f      	add	r7, fp
 8015980:	88a3      	ldrh	r3, [r4, #4]
 8015982:	b2bf      	uxth	r7, r7
 8015984:	4413      	add	r3, r2
 8015986:	b23a      	sxth	r2, r7
 8015988:	b29b      	uxth	r3, r3
 801598a:	b219      	sxth	r1, r3
 801598c:	4291      	cmp	r1, r2
 801598e:	dd0d      	ble.n	80159ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8015990:	1bdb      	subs	r3, r3, r7
 8015992:	f8ad 2010 	strh.w	r2, [sp, #16]
 8015996:	f8ad a012 	strh.w	sl, [sp, #18]
 801599a:	4631      	mov	r1, r6
 801599c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80159a0:	4640      	mov	r0, r8
 80159a2:	f8ad 9016 	strh.w	r9, [sp, #22]
 80159a6:	69ea      	ldr	r2, [r5, #28]
 80159a8:	f7ff ff4e 	bl	8015848 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80159ac:	88e2      	ldrh	r2, [r4, #6]
 80159ae:	8863      	ldrh	r3, [r4, #2]
 80159b0:	4413      	add	r3, r2
 80159b2:	9a00      	ldr	r2, [sp, #0]
 80159b4:	444a      	add	r2, r9
 80159b6:	b29b      	uxth	r3, r3
 80159b8:	fa1f f982 	uxth.w	r9, r2
 80159bc:	b219      	sxth	r1, r3
 80159be:	fa0f f289 	sxth.w	r2, r9
 80159c2:	428a      	cmp	r2, r1
 80159c4:	da15      	bge.n	80159f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80159c6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80159ca:	eba3 0309 	sub.w	r3, r3, r9
 80159ce:	f9b4 0000 	ldrsh.w	r0, [r4]
 80159d2:	f8ad 1014 	strh.w	r1, [sp, #20]
 80159d6:	4631      	mov	r1, r6
 80159d8:	f8ad 0010 	strh.w	r0, [sp, #16]
 80159dc:	f8ad 2012 	strh.w	r2, [sp, #18]
 80159e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80159e4:	69ea      	ldr	r2, [r5, #28]
 80159e6:	e001      	b.n	80159ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 80159e8:	69ea      	ldr	r2, [r5, #28]
 80159ea:	4621      	mov	r1, r4
 80159ec:	4640      	mov	r0, r8
 80159ee:	f7ff ff2b 	bl	8015848 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80159f2:	4628      	mov	r0, r5
 80159f4:	f7ff fe94 	bl	8015720 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80159f8:	6861      	ldr	r1, [r4, #4]
 80159fa:	4602      	mov	r2, r0
 80159fc:	4633      	mov	r3, r6
 80159fe:	6820      	ldr	r0, [r4, #0]
 8015a00:	c303      	stmia	r3!, {r0, r1}
 8015a02:	4611      	mov	r1, r2
 8015a04:	4630      	mov	r0, r6
 8015a06:	f7fc fa65 	bl	8011ed4 <_ZN8touchgfx4RectaNERKS0_>
 8015a0a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	f77f af33 	ble.w	801587a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8015a14:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	f77f af2e 	ble.w	801587a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8015a1e:	4628      	mov	r0, r5
 8015a20:	f7ff fe9a 	bl	8015758 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8015a24:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8015a28:	1a18      	subs	r0, r3, r0
 8015a2a:	f8ad 0010 	strh.w	r0, [sp, #16]
 8015a2e:	4628      	mov	r0, r5
 8015a30:	f7ff fea6 	bl	8015780 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8015a34:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015a38:	4631      	mov	r1, r6
 8015a3a:	1a18      	subs	r0, r3, r0
 8015a3c:	f8ad 0012 	strh.w	r0, [sp, #18]
 8015a40:	4628      	mov	r0, r5
 8015a42:	682b      	ldr	r3, [r5, #0]
 8015a44:	689b      	ldr	r3, [r3, #8]
 8015a46:	4798      	blx	r3
 8015a48:	e717      	b.n	801587a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08015a4a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8015a4a:	b570      	push	{r4, r5, r6, lr}
 8015a4c:	1d06      	adds	r6, r0, #4
 8015a4e:	b086      	sub	sp, #24
 8015a50:	460c      	mov	r4, r1
 8015a52:	2300      	movs	r3, #0
 8015a54:	4631      	mov	r1, r6
 8015a56:	4605      	mov	r5, r0
 8015a58:	a802      	add	r0, sp, #8
 8015a5a:	9301      	str	r3, [sp, #4]
 8015a5c:	f7ff fca6 	bl	80153ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015a60:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8015a64:	8822      	ldrh	r2, [r4, #0]
 8015a66:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8015a6a:	1ad2      	subs	r2, r2, r3
 8015a6c:	8863      	ldrh	r3, [r4, #2]
 8015a6e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8015a72:	1a5b      	subs	r3, r3, r1
 8015a74:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8015a78:	f8ad 2010 	strh.w	r2, [sp, #16]
 8015a7c:	aa01      	add	r2, sp, #4
 8015a7e:	f8ad 0014 	strh.w	r0, [sp, #20]
 8015a82:	4630      	mov	r0, r6
 8015a84:	f8ad 1016 	strh.w	r1, [sp, #22]
 8015a88:	a904      	add	r1, sp, #16
 8015a8a:	f8ad 3012 	strh.w	r3, [sp, #18]
 8015a8e:	f7fc faf9 	bl	8012084 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8015a92:	9a01      	ldr	r2, [sp, #4]
 8015a94:	b11a      	cbz	r2, 8015a9e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8015a96:	4621      	mov	r1, r4
 8015a98:	4628      	mov	r0, r5
 8015a9a:	f7ff fed5 	bl	8015848 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8015a9e:	b006      	add	sp, #24
 8015aa0:	bd70      	pop	{r4, r5, r6, pc}

08015aa2 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8015aa2:	4602      	mov	r2, r0
 8015aa4:	b530      	push	{r4, r5, lr}
 8015aa6:	4604      	mov	r4, r0
 8015aa8:	b085      	sub	sp, #20
 8015aaa:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8015aae:	460d      	mov	r5, r1
 8015ab0:	466b      	mov	r3, sp
 8015ab2:	6851      	ldr	r1, [r2, #4]
 8015ab4:	c303      	stmia	r3!, {r0, r1}
 8015ab6:	4629      	mov	r1, r5
 8015ab8:	4668      	mov	r0, sp
 8015aba:	f7fc fa0b 	bl	8011ed4 <_ZN8touchgfx4RectaNERKS0_>
 8015abe:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8015ac2:	b12b      	cbz	r3, 8015ad0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8015ac4:	4669      	mov	r1, sp
 8015ac6:	4620      	mov	r0, r4
 8015ac8:	f7ff ffbf 	bl	8015a4a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8015acc:	b005      	add	sp, #20
 8015ace:	bd30      	pop	{r4, r5, pc}
 8015ad0:	3404      	adds	r4, #4
 8015ad2:	a802      	add	r0, sp, #8
 8015ad4:	4621      	mov	r1, r4
 8015ad6:	f7ff fc69 	bl	80153ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015ada:	f8bd 3000 	ldrh.w	r3, [sp]
 8015ade:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8015ae2:	4669      	mov	r1, sp
 8015ae4:	4620      	mov	r0, r4
 8015ae6:	1a9b      	subs	r3, r3, r2
 8015ae8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8015aec:	f8ad 3000 	strh.w	r3, [sp]
 8015af0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015af4:	1a9b      	subs	r3, r3, r2
 8015af6:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015afa:	f7fc fa8a 	bl	8012012 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8015afe:	e7e5      	b.n	8015acc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08015b00 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8015b00:	460b      	mov	r3, r1
 8015b02:	680a      	ldr	r2, [r1, #0]
 8015b04:	1d01      	adds	r1, r0, #4
 8015b06:	6992      	ldr	r2, [r2, #24]
 8015b08:	4618      	mov	r0, r3
 8015b0a:	4710      	bx	r2

08015b0c <_ZN8touchgfx12TextProviderC1Ev>:
 8015b0c:	b538      	push	{r3, r4, r5, lr}
 8015b0e:	2500      	movs	r5, #0
 8015b10:	2302      	movs	r3, #2
 8015b12:	4604      	mov	r4, r0
 8015b14:	220e      	movs	r2, #14
 8015b16:	7403      	strb	r3, [r0, #16]
 8015b18:	4629      	mov	r1, r5
 8015b1a:	6145      	str	r5, [r0, #20]
 8015b1c:	7605      	strb	r5, [r0, #24]
 8015b1e:	83c5      	strh	r5, [r0, #30]
 8015b20:	8405      	strh	r5, [r0, #32]
 8015b22:	86c5      	strh	r5, [r0, #54]	; 0x36
 8015b24:	8705      	strh	r5, [r0, #56]	; 0x38
 8015b26:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8015b28:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8015b2c:	e9c0 5500 	strd	r5, r5, [r0]
 8015b30:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8015b34:	304c      	adds	r0, #76	; 0x4c
 8015b36:	f00c fe2b 	bl	8022790 <memset>
 8015b3a:	2301      	movs	r3, #1
 8015b3c:	4620      	mov	r0, r4
 8015b3e:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8015b42:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8015b46:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8015b4a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8015b4e:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8015b52:	f7f3 f9bf 	bl	8008ed4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8015b56:	4620      	mov	r0, r4
 8015b58:	bd38      	pop	{r3, r4, r5, pc}

08015b5a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8015b5a:	b530      	push	{r4, r5, lr}
 8015b5c:	2500      	movs	r5, #0
 8015b5e:	2401      	movs	r4, #1
 8015b60:	6843      	ldr	r3, [r0, #4]
 8015b62:	b913      	cbnz	r3, 8015b6a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8015b64:	6803      	ldr	r3, [r0, #0]
 8015b66:	b313      	cbz	r3, 8015bae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8015b68:	6043      	str	r3, [r0, #4]
 8015b6a:	7e03      	ldrb	r3, [r0, #24]
 8015b6c:	b143      	cbz	r3, 8015b80 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8015b6e:	6943      	ldr	r3, [r0, #20]
 8015b70:	b12b      	cbz	r3, 8015b7e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8015b72:	881a      	ldrh	r2, [r3, #0]
 8015b74:	b11a      	cbz	r2, 8015b7e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8015b76:	1c9a      	adds	r2, r3, #2
 8015b78:	6142      	str	r2, [r0, #20]
 8015b7a:	8818      	ldrh	r0, [r3, #0]
 8015b7c:	bd30      	pop	{r4, r5, pc}
 8015b7e:	7605      	strb	r5, [r0, #24]
 8015b80:	6843      	ldr	r3, [r0, #4]
 8015b82:	8819      	ldrh	r1, [r3, #0]
 8015b84:	b199      	cbz	r1, 8015bae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8015b86:	1c9a      	adds	r2, r3, #2
 8015b88:	2902      	cmp	r1, #2
 8015b8a:	6042      	str	r2, [r0, #4]
 8015b8c:	d1f5      	bne.n	8015b7a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8015b8e:	7c03      	ldrb	r3, [r0, #16]
 8015b90:	2b01      	cmp	r3, #1
 8015b92:	d8e5      	bhi.n	8015b60 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8015b94:	1c5a      	adds	r2, r3, #1
 8015b96:	3302      	adds	r3, #2
 8015b98:	7402      	strb	r2, [r0, #16]
 8015b9a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8015b9e:	6143      	str	r3, [r0, #20]
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d0dd      	beq.n	8015b60 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8015ba4:	881b      	ldrh	r3, [r3, #0]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d0da      	beq.n	8015b60 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8015baa:	7604      	strb	r4, [r0, #24]
 8015bac:	e7d8      	b.n	8015b60 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8015bae:	2000      	movs	r0, #0
 8015bb0:	e7e4      	b.n	8015b7c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08015bb2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8015bb2:	6001      	str	r1, [r0, #0]
 8015bb4:	2100      	movs	r1, #0
 8015bb6:	b430      	push	{r4, r5}
 8015bb8:	6041      	str	r1, [r0, #4]
 8015bba:	6815      	ldr	r5, [r2, #0]
 8015bbc:	6085      	str	r5, [r0, #8]
 8015bbe:	6852      	ldr	r2, [r2, #4]
 8015bc0:	6443      	str	r3, [r0, #68]	; 0x44
 8015bc2:	9b02      	ldr	r3, [sp, #8]
 8015bc4:	60c2      	str	r2, [r0, #12]
 8015bc6:	7401      	strb	r1, [r0, #16]
 8015bc8:	6141      	str	r1, [r0, #20]
 8015bca:	7601      	strb	r1, [r0, #24]
 8015bcc:	8701      	strh	r1, [r0, #56]	; 0x38
 8015bce:	8401      	strh	r1, [r0, #32]
 8015bd0:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8015bd4:	6483      	str	r3, [r0, #72]	; 0x48
 8015bd6:	bc30      	pop	{r4, r5}
 8015bd8:	f7f3 b97c 	b.w	8008ed4 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08015bdc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8015bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bde:	4605      	mov	r5, r0
 8015be0:	4608      	mov	r0, r1
 8015be2:	b1f1      	cbz	r1, 8015c22 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8015be4:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8015be8:	460b      	mov	r3, r1
 8015bea:	f101 0708 	add.w	r7, r1, #8
 8015bee:	4622      	mov	r2, r4
 8015bf0:	6818      	ldr	r0, [r3, #0]
 8015bf2:	3308      	adds	r3, #8
 8015bf4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8015bf8:	4626      	mov	r6, r4
 8015bfa:	42bb      	cmp	r3, r7
 8015bfc:	c603      	stmia	r6!, {r0, r1}
 8015bfe:	4634      	mov	r4, r6
 8015c00:	d1f6      	bne.n	8015bf0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8015c02:	6818      	ldr	r0, [r3, #0]
 8015c04:	6030      	str	r0, [r6, #0]
 8015c06:	4610      	mov	r0, r2
 8015c08:	889b      	ldrh	r3, [r3, #4]
 8015c0a:	80b3      	strh	r3, [r6, #4]
 8015c0c:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8015c10:	015b      	lsls	r3, r3, #5
 8015c12:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8015c16:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8015c1a:	430b      	orrs	r3, r1
 8015c1c:	425b      	negs	r3, r3
 8015c1e:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8015c22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015c24 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8015c24:	b538      	push	{r3, r4, r5, lr}
 8015c26:	460c      	mov	r4, r1
 8015c28:	6811      	ldr	r1, [r2, #0]
 8015c2a:	4610      	mov	r0, r2
 8015c2c:	68cd      	ldr	r5, [r1, #12]
 8015c2e:	4619      	mov	r1, r3
 8015c30:	47a8      	blx	r5
 8015c32:	2800      	cmp	r0, #0
 8015c34:	bf08      	it	eq
 8015c36:	4620      	moveq	r0, r4
 8015c38:	bd38      	pop	{r3, r4, r5, pc}
	...

08015c3c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8015c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c3e:	4604      	mov	r4, r0
 8015c40:	4615      	mov	r5, r2
 8015c42:	4608      	mov	r0, r1
 8015c44:	b93a      	cbnz	r2, 8015c56 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8015c46:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8015c4a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8015c4e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8015c52:	4628      	mov	r0, r5
 8015c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c56:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8015c5a:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 8015c5e:	8893      	ldrh	r3, [r2, #4]
 8015c60:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8015c64:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8015c68:	79ee      	ldrb	r6, [r5, #7]
 8015c6a:	4316      	orrs	r6, r2
 8015c6c:	19da      	adds	r2, r3, r7
 8015c6e:	b291      	uxth	r1, r2
 8015c70:	b2b7      	uxth	r7, r6
 8015c72:	291d      	cmp	r1, #29
 8015c74:	d87b      	bhi.n	8015d6e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8015c76:	2201      	movs	r2, #1
 8015c78:	10f6      	asrs	r6, r6, #3
 8015c7a:	408a      	lsls	r2, r1
 8015c7c:	4974      	ldr	r1, [pc, #464]	; (8015e50 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 8015c7e:	420a      	tst	r2, r1
 8015c80:	d12e      	bne.n	8015ce0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8015c82:	f412 7f60 	tst.w	r2, #896	; 0x380
 8015c86:	d072      	beq.n	8015d6e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8015c88:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8015c8c:	462b      	mov	r3, r5
 8015c8e:	f105 0e08 	add.w	lr, r5, #8
 8015c92:	4615      	mov	r5, r2
 8015c94:	6818      	ldr	r0, [r3, #0]
 8015c96:	3308      	adds	r3, #8
 8015c98:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8015c9c:	4694      	mov	ip, r2
 8015c9e:	4573      	cmp	r3, lr
 8015ca0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8015ca4:	4662      	mov	r2, ip
 8015ca6:	d1f5      	bne.n	8015c94 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8015ca8:	6818      	ldr	r0, [r3, #0]
 8015caa:	f8cc 0000 	str.w	r0, [ip]
 8015cae:	889b      	ldrh	r3, [r3, #4]
 8015cb0:	f8ac 3004 	strh.w	r3, [ip, #4]
 8015cb4:	b2b3      	uxth	r3, r6
 8015cb6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8015cba:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8015cbe:	1aca      	subs	r2, r1, r3
 8015cc0:	1bcf      	subs	r7, r1, r7
 8015cc2:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8015cc6:	b292      	uxth	r2, r2
 8015cc8:	1afb      	subs	r3, r7, r3
 8015cca:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8015cce:	10d2      	asrs	r2, r2, #3
 8015cd0:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8015cd4:	4302      	orrs	r2, r0
 8015cd6:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8015cda:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8015cde:	e7b8      	b.n	8015c52 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8015ce0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8015ce2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8015ce6:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8015ce8:	f640 6333 	movw	r3, #3635	; 0xe33
 8015cec:	4299      	cmp	r1, r3
 8015cee:	d110      	bne.n	8015d12 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 8015cf0:	6803      	ldr	r3, [r0, #0]
 8015cf2:	68db      	ldr	r3, [r3, #12]
 8015cf4:	4798      	blx	r3
 8015cf6:	7b41      	ldrb	r1, [r0, #13]
 8015cf8:	00cb      	lsls	r3, r1, #3
 8015cfa:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015cfe:	7a03      	ldrb	r3, [r0, #8]
 8015d00:	0648      	lsls	r0, r1, #25
 8015d02:	ea43 0302 	orr.w	r3, r3, r2
 8015d06:	bf44      	itt	mi
 8015d08:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015d0c:	b21b      	sxthmi	r3, r3
 8015d0e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8015d12:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8015d16:	462a      	mov	r2, r5
 8015d18:	f105 0c08 	add.w	ip, r5, #8
 8015d1c:	443b      	add	r3, r7
 8015d1e:	4433      	add	r3, r6
 8015d20:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8015d24:	b29b      	uxth	r3, r3
 8015d26:	4635      	mov	r5, r6
 8015d28:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8015d2c:	6810      	ldr	r0, [r2, #0]
 8015d2e:	3208      	adds	r2, #8
 8015d30:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8015d34:	4637      	mov	r7, r6
 8015d36:	4562      	cmp	r2, ip
 8015d38:	c703      	stmia	r7!, {r0, r1}
 8015d3a:	463e      	mov	r6, r7
 8015d3c:	d1f6      	bne.n	8015d2c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 8015d3e:	6810      	ldr	r0, [r2, #0]
 8015d40:	6038      	str	r0, [r7, #0]
 8015d42:	8892      	ldrh	r2, [r2, #4]
 8015d44:	80ba      	strh	r2, [r7, #4]
 8015d46:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8015d4a:	10db      	asrs	r3, r3, #3
 8015d4c:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8015d50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015d54:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8015d58:	4313      	orrs	r3, r2
 8015d5a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8015d5e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8015d62:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8015d66:	1a9b      	subs	r3, r3, r2
 8015d68:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8015d6c:	e771      	b.n	8015c52 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8015d6e:	f023 0204 	bic.w	r2, r3, #4
 8015d72:	f640 611b 	movw	r1, #3611	; 0xe1b
 8015d76:	428a      	cmp	r2, r1
 8015d78:	d003      	beq.n	8015d82 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 8015d7a:	f640 621d 	movw	r2, #3613	; 0xe1d
 8015d7e:	4293      	cmp	r3, r2
 8015d80:	d120      	bne.n	8015dc4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 8015d82:	3b01      	subs	r3, #1
 8015d84:	4602      	mov	r2, r0
 8015d86:	4629      	mov	r1, r5
 8015d88:	4620      	mov	r0, r4
 8015d8a:	b29b      	uxth	r3, r3
 8015d8c:	f7ff ff4a 	bl	8015c24 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8015d90:	7b41      	ldrb	r1, [r0, #13]
 8015d92:	00cb      	lsls	r3, r1, #3
 8015d94:	0649      	lsls	r1, r1, #25
 8015d96:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015d9a:	7a03      	ldrb	r3, [r0, #8]
 8015d9c:	ea43 0302 	orr.w	r3, r3, r2
 8015da0:	bf44      	itt	mi
 8015da2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015da6:	b21b      	sxthmi	r3, r3
 8015da8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8015dac:	7b6b      	ldrb	r3, [r5, #13]
 8015dae:	7aaa      	ldrb	r2, [r5, #10]
 8015db0:	005b      	lsls	r3, r3, #1
 8015db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015db6:	4313      	orrs	r3, r2
 8015db8:	115a      	asrs	r2, r3, #5
 8015dba:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8015dbe:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8015dc2:	e035      	b.n	8015e30 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8015dc4:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8015dc8:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8015dcc:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8015dd0:	7a2a      	ldrb	r2, [r5, #8]
 8015dd2:	ea42 0201 	orr.w	r2, r2, r1
 8015dd6:	f640 6109 	movw	r1, #3593	; 0xe09
 8015dda:	bf1c      	itt	ne
 8015ddc:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8015de0:	b212      	sxthne	r2, r2
 8015de2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8015de6:	f023 0210 	bic.w	r2, r3, #16
 8015dea:	428a      	cmp	r2, r1
 8015dec:	d003      	beq.n	8015df6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8015dee:	f640 6213 	movw	r2, #3603	; 0xe13
 8015df2:	4293      	cmp	r3, r2
 8015df4:	d129      	bne.n	8015e4a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8015df6:	7b6e      	ldrb	r6, [r5, #13]
 8015df8:	4629      	mov	r1, r5
 8015dfa:	0076      	lsls	r6, r6, #1
 8015dfc:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8015e00:	7aae      	ldrb	r6, [r5, #10]
 8015e02:	4316      	orrs	r6, r2
 8015e04:	f640 6213 	movw	r2, #3603	; 0xe13
 8015e08:	4293      	cmp	r3, r2
 8015e0a:	4602      	mov	r2, r0
 8015e0c:	4620      	mov	r0, r4
 8015e0e:	bf16      	itet	ne
 8015e10:	f103 33ff 	addne.w	r3, r3, #4294967295
 8015e14:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8015e18:	b29b      	uxthne	r3, r3
 8015e1a:	f7ff ff03 	bl	8015c24 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8015e1e:	7b43      	ldrb	r3, [r0, #13]
 8015e20:	7a82      	ldrb	r2, [r0, #10]
 8015e22:	005b      	lsls	r3, r3, #1
 8015e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015e28:	4313      	orrs	r3, r2
 8015e2a:	1af6      	subs	r6, r6, r3
 8015e2c:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8015e30:	7b69      	ldrb	r1, [r5, #13]
 8015e32:	00cb      	lsls	r3, r1, #3
 8015e34:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015e38:	7a2b      	ldrb	r3, [r5, #8]
 8015e3a:	4313      	orrs	r3, r2
 8015e3c:	064a      	lsls	r2, r1, #25
 8015e3e:	bf44      	itt	mi
 8015e40:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015e44:	b21b      	sxthmi	r3, r3
 8015e46:	1bdb      	subs	r3, r3, r7
 8015e48:	e747      	b.n	8015cda <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8015e4a:	2300      	movs	r3, #0
 8015e4c:	e7b7      	b.n	8015dbe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 8015e4e:	bf00      	nop
 8015e50:	3fc00079 	.word	0x3fc00079

08015e54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8015e54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015e58:	4604      	mov	r4, r0
 8015e5a:	b942      	cbnz	r2, 8015e6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8015e5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015e60:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8015e64:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8015e68:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8015e6c:	e047      	b.n	8015efe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8015e6e:	7b51      	ldrb	r1, [r2, #13]
 8015e70:	8893      	ldrh	r3, [r2, #4]
 8015e72:	010d      	lsls	r5, r1, #4
 8015e74:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8015e78:	79d5      	ldrb	r5, [r2, #7]
 8015e7a:	4305      	orrs	r5, r0
 8015e7c:	2d04      	cmp	r5, #4
 8015e7e:	bfcc      	ite	gt
 8015e80:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8015e84:	f04f 0e01 	movle.w	lr, #1
 8015e88:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8015e8c:	f200 80ab 	bhi.w	8015fe6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8015e90:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8015e94:	4283      	cmp	r3, r0
 8015e96:	d216      	bcs.n	8015ec6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015e98:	f240 605b 	movw	r0, #1627	; 0x65b
 8015e9c:	4283      	cmp	r3, r0
 8015e9e:	d859      	bhi.n	8015f54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8015ea0:	f240 6057 	movw	r0, #1623	; 0x657
 8015ea4:	4283      	cmp	r3, r0
 8015ea6:	d20e      	bcs.n	8015ec6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015ea8:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8015eac:	d24a      	bcs.n	8015f44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8015eae:	f240 604e 	movw	r0, #1614	; 0x64e
 8015eb2:	4283      	cmp	r3, r0
 8015eb4:	d207      	bcs.n	8015ec6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015eb6:	f240 601a 	movw	r0, #1562	; 0x61a
 8015eba:	4283      	cmp	r3, r0
 8015ebc:	d02a      	beq.n	8015f14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015ebe:	d821      	bhi.n	8015f04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8015ec0:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8015ec4:	d35b      	bcc.n	8015f7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8015ec6:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8015eca:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8015ece:	f040 80d0 	bne.w	8016072 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8015ed2:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8015ed6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8015eda:	f040 80ca 	bne.w	8016072 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8015ede:	00cb      	lsls	r3, r1, #3
 8015ee0:	0649      	lsls	r1, r1, #25
 8015ee2:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8015ee6:	7a13      	ldrb	r3, [r2, #8]
 8015ee8:	ea43 0300 	orr.w	r3, r3, r0
 8015eec:	bf44      	itt	mi
 8015eee:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015ef2:	b21b      	sxthmi	r3, r3
 8015ef4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8015ef8:	1b5d      	subs	r5, r3, r5
 8015efa:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8015efe:	4610      	mov	r0, r2
 8015f00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f04:	f240 604b 	movw	r0, #1611	; 0x64b
 8015f08:	4283      	cmp	r3, r0
 8015f0a:	d338      	bcc.n	8015f7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8015f0c:	f240 604c 	movw	r0, #1612	; 0x64c
 8015f10:	4283      	cmp	r3, r0
 8015f12:	d9d8      	bls.n	8015ec6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015f14:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8015f18:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8015f1c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8015f20:	f040 80f3 	bne.w	801610a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8015f24:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8015f28:	f040 80ef 	bne.w	801610a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8015f2c:	00cb      	lsls	r3, r1, #3
 8015f2e:	064e      	lsls	r6, r1, #25
 8015f30:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8015f34:	7a13      	ldrb	r3, [r2, #8]
 8015f36:	ea43 0300 	orr.w	r3, r3, r0
 8015f3a:	bf44      	itt	mi
 8015f3c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015f40:	b21b      	sxthmi	r3, r3
 8015f42:	e7d9      	b.n	8015ef8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8015f44:	f240 6054 	movw	r0, #1620	; 0x654
 8015f48:	4283      	cmp	r3, r0
 8015f4a:	d8e3      	bhi.n	8015f14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015f4c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8015f50:	d9e0      	bls.n	8015f14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015f52:	e7b8      	b.n	8015ec6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015f54:	f240 6074 	movw	r0, #1652	; 0x674
 8015f58:	4283      	cmp	r3, r0
 8015f5a:	d0b4      	beq.n	8015ec6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015f5c:	d82d      	bhi.n	8015fba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8015f5e:	f240 605e 	movw	r0, #1630	; 0x65e
 8015f62:	4283      	cmp	r3, r0
 8015f64:	d804      	bhi.n	8015f70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8015f66:	f240 605d 	movw	r0, #1629	; 0x65d
 8015f6a:	4283      	cmp	r3, r0
 8015f6c:	d3d2      	bcc.n	8015f14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015f6e:	e7aa      	b.n	8015ec6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015f70:	f240 605f 	movw	r0, #1631	; 0x65f
 8015f74:	4283      	cmp	r3, r0
 8015f76:	d0cd      	beq.n	8015f14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015f78:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8015f7c:	d0a3      	beq.n	8015ec6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015f7e:	00cb      	lsls	r3, r1, #3
 8015f80:	0649      	lsls	r1, r1, #25
 8015f82:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8015f86:	7a13      	ldrb	r3, [r2, #8]
 8015f88:	ea43 0300 	orr.w	r3, r3, r0
 8015f8c:	bf44      	itt	mi
 8015f8e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015f92:	b21b      	sxthmi	r3, r3
 8015f94:	1b5d      	subs	r5, r3, r5
 8015f96:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8015f9a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8015f9e:	7b53      	ldrb	r3, [r2, #13]
 8015fa0:	015b      	lsls	r3, r3, #5
 8015fa2:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8015fa6:	7993      	ldrb	r3, [r2, #6]
 8015fa8:	430b      	orrs	r3, r1
 8015faa:	2105      	movs	r1, #5
 8015fac:	005b      	lsls	r3, r3, #1
 8015fae:	fb93 f3f1 	sdiv	r3, r3, r1
 8015fb2:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8015fb6:	440b      	add	r3, r1
 8015fb8:	e756      	b.n	8015e68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8015fba:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8015fbe:	4283      	cmp	r3, r0
 8015fc0:	d809      	bhi.n	8015fd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8015fc2:	f240 60df 	movw	r0, #1759	; 0x6df
 8015fc6:	4283      	cmp	r3, r0
 8015fc8:	f4bf af7d 	bcs.w	8015ec6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015fcc:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8015fd0:	2b05      	cmp	r3, #5
 8015fd2:	d8d4      	bhi.n	8015f7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8015fd4:	e777      	b.n	8015ec6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015fd6:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8015fda:	4283      	cmp	r3, r0
 8015fdc:	d09a      	beq.n	8015f14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015fde:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8015fe2:	4283      	cmp	r3, r0
 8015fe4:	e7ca      	b.n	8015f7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8015fe6:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8015fea:	d22b      	bcs.n	8016044 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8015fec:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8015ff0:	4283      	cmp	r3, r0
 8015ff2:	d28f      	bcs.n	8015f14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015ff4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8015ff8:	4283      	cmp	r3, r0
 8015ffa:	d816      	bhi.n	801602a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8015ffc:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8016000:	4283      	cmp	r3, r0
 8016002:	f4bf af60 	bcs.w	8015ec6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016006:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801600a:	4283      	cmp	r3, r0
 801600c:	d80a      	bhi.n	8016024 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801600e:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8016012:	4283      	cmp	r3, r0
 8016014:	f4bf af57 	bcs.w	8015ec6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016018:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801601c:	4283      	cmp	r3, r0
 801601e:	f43f af79 	beq.w	8015f14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016022:	e7ac      	b.n	8015f7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016024:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8016028:	e7f8      	b.n	801601c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801602a:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801602e:	4283      	cmp	r3, r0
 8016030:	d802      	bhi.n	8016038 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8016032:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8016036:	e798      	b.n	8015f6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8016038:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801603c:	4283      	cmp	r3, r0
 801603e:	f47f af42 	bne.w	8015ec6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016042:	e767      	b.n	8015f14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016044:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8016048:	4283      	cmp	r3, r0
 801604a:	f43f af63 	beq.w	8015f14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801604e:	d802      	bhi.n	8016056 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8016050:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8016054:	e7f2      	b.n	801603c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8016056:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801605a:	4283      	cmp	r3, r0
 801605c:	d805      	bhi.n	801606a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801605e:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8016062:	4283      	cmp	r3, r0
 8016064:	f4ff af2f 	bcc.w	8015ec6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016068:	e754      	b.n	8015f14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801606a:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801606e:	4283      	cmp	r3, r0
 8016070:	e7af      	b.n	8015fd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8016072:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8016076:	4617      	mov	r7, r2
 8016078:	f102 0808 	add.w	r8, r2, #8
 801607c:	4666      	mov	r6, ip
 801607e:	6838      	ldr	r0, [r7, #0]
 8016080:	3708      	adds	r7, #8
 8016082:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8016086:	46e6      	mov	lr, ip
 8016088:	4547      	cmp	r7, r8
 801608a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801608e:	46f4      	mov	ip, lr
 8016090:	d1f5      	bne.n	801607e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8016092:	6838      	ldr	r0, [r7, #0]
 8016094:	f8ce 0000 	str.w	r0, [lr]
 8016098:	88b9      	ldrh	r1, [r7, #4]
 801609a:	f8ae 1004 	strh.w	r1, [lr, #4]
 801609e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80160a2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80160a6:	d009      	beq.n	80160bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 80160a8:	7b51      	ldrb	r1, [r2, #13]
 80160aa:	7992      	ldrb	r2, [r2, #6]
 80160ac:	0149      	lsls	r1, r1, #5
 80160ae:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80160b2:	4311      	orrs	r1, r2
 80160b4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80160b8:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80160bc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80160c0:	b2ad      	uxth	r5, r5
 80160c2:	d00d      	beq.n	80160e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 80160c4:	442b      	add	r3, r5
 80160c6:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80160ca:	b29b      	uxth	r3, r3
 80160cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80160d0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80160d4:	10db      	asrs	r3, r3, #3
 80160d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80160da:	4313      	orrs	r3, r2
 80160dc:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80160e0:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80160e4:	00cb      	lsls	r3, r1, #3
 80160e6:	064f      	lsls	r7, r1, #25
 80160e8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80160ec:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80160f0:	ea43 0302 	orr.w	r3, r3, r2
 80160f4:	bf44      	itt	mi
 80160f6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80160fa:	b21b      	sxthmi	r3, r3
 80160fc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8016100:	1b5b      	subs	r3, r3, r5
 8016102:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8016106:	4632      	mov	r2, r6
 8016108:	e6f9      	b.n	8015efe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801610a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801610e:	4617      	mov	r7, r2
 8016110:	f102 0908 	add.w	r9, r2, #8
 8016114:	4666      	mov	r6, ip
 8016116:	6838      	ldr	r0, [r7, #0]
 8016118:	3708      	adds	r7, #8
 801611a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801611e:	46e0      	mov	r8, ip
 8016120:	454f      	cmp	r7, r9
 8016122:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8016126:	46c4      	mov	ip, r8
 8016128:	d1f5      	bne.n	8016116 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801612a:	6838      	ldr	r0, [r7, #0]
 801612c:	f8c8 0000 	str.w	r0, [r8]
 8016130:	88b9      	ldrh	r1, [r7, #4]
 8016132:	f8a8 1004 	strh.w	r1, [r8, #4]
 8016136:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801613a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801613e:	d009      	beq.n	8016154 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8016140:	7b51      	ldrb	r1, [r2, #13]
 8016142:	7992      	ldrb	r2, [r2, #6]
 8016144:	0149      	lsls	r1, r1, #5
 8016146:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801614a:	4311      	orrs	r1, r2
 801614c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8016150:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8016154:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8016158:	d00e      	beq.n	8016178 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801615a:	eba3 030e 	sub.w	r3, r3, lr
 801615e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8016162:	b29b      	uxth	r3, r3
 8016164:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8016168:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801616c:	10db      	asrs	r3, r3, #3
 801616e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016172:	4313      	orrs	r3, r2
 8016174:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8016178:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801617c:	00cb      	lsls	r3, r1, #3
 801617e:	0648      	lsls	r0, r1, #25
 8016180:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016184:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8016188:	ea43 0302 	orr.w	r3, r3, r2
 801618c:	bf44      	itt	mi
 801618e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016192:	b21b      	sxthmi	r3, r3
 8016194:	1b5d      	subs	r5, r3, r5
 8016196:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801619a:	e7b4      	b.n	8016106 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801619c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801619c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161a0:	461e      	mov	r6, r3
 80161a2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80161a4:	4604      	mov	r4, r0
 80161a6:	4617      	mov	r7, r2
 80161a8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80161ac:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80161b0:	f7f2 fdea 	bl	8008d88 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80161b4:	4605      	mov	r5, r0
 80161b6:	b918      	cbnz	r0, 80161c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 80161b8:	6030      	str	r0, [r6, #0]
 80161ba:	4628      	mov	r0, r5
 80161bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161c0:	683b      	ldr	r3, [r7, #0]
 80161c2:	4601      	mov	r1, r0
 80161c4:	4638      	mov	r0, r7
 80161c6:	68db      	ldr	r3, [r3, #12]
 80161c8:	4798      	blx	r3
 80161ca:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80161ce:	4602      	mov	r2, r0
 80161d0:	6030      	str	r0, [r6, #0]
 80161d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80161d6:	d213      	bcs.n	8016200 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 80161d8:	4643      	mov	r3, r8
 80161da:	4639      	mov	r1, r7
 80161dc:	4620      	mov	r0, r4
 80161de:	f7ff fe39 	bl	8015e54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80161e2:	6030      	str	r0, [r6, #0]
 80161e4:	6833      	ldr	r3, [r6, #0]
 80161e6:	b143      	cbz	r3, 80161fa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 80161e8:	7b5a      	ldrb	r2, [r3, #13]
 80161ea:	7a9b      	ldrb	r3, [r3, #10]
 80161ec:	0052      	lsls	r2, r2, #1
 80161ee:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80161f2:	4313      	orrs	r3, r2
 80161f4:	bf0c      	ite	eq
 80161f6:	2301      	moveq	r3, #1
 80161f8:	2300      	movne	r3, #0
 80161fa:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80161fe:	e7dc      	b.n	80161ba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8016200:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8016204:	b29b      	uxth	r3, r3
 8016206:	2b7f      	cmp	r3, #127	; 0x7f
 8016208:	d804      	bhi.n	8016214 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801620a:	4639      	mov	r1, r7
 801620c:	4620      	mov	r0, r4
 801620e:	f7ff fd15 	bl	8015c3c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8016212:	e7e6      	b.n	80161e2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8016214:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8016218:	2b00      	cmp	r3, #0
 801621a:	d0e3      	beq.n	80161e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801621c:	f640 1302 	movw	r3, #2306	; 0x902
 8016220:	429d      	cmp	r5, r3
 8016222:	d1df      	bne.n	80161e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8016224:	4601      	mov	r1, r0
 8016226:	4620      	mov	r0, r4
 8016228:	f7ff fcd8 	bl	8015bdc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801622c:	e7d9      	b.n	80161e2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801622e <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801622e:	b510      	push	{r4, lr}
 8016230:	4604      	mov	r4, r0
 8016232:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8016236:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8016238:	b1e1      	cbz	r1, 8016274 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801623a:	2b0a      	cmp	r3, #10
 801623c:	d02d      	beq.n	801629a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801623e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8016240:	3901      	subs	r1, #1
 8016242:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8016246:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8016248:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801624c:	1c51      	adds	r1, r2, #1
 801624e:	b289      	uxth	r1, r1
 8016250:	2901      	cmp	r1, #1
 8016252:	bf8a      	itet	hi
 8016254:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8016258:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801625a:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801625c:	1c5a      	adds	r2, r3, #1
 801625e:	8722      	strh	r2, [r4, #56]	; 0x38
 8016260:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8016262:	4413      	add	r3, r2
 8016264:	b29b      	uxth	r3, r3
 8016266:	2b09      	cmp	r3, #9
 8016268:	bf88      	it	hi
 801626a:	3b0a      	subhi	r3, #10
 801626c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8016270:	8458      	strh	r0, [r3, #34]	; 0x22
 8016272:	e7de      	b.n	8016232 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8016274:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8016276:	2b0a      	cmp	r3, #10
 8016278:	d00f      	beq.n	801629a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801627a:	4620      	mov	r0, r4
 801627c:	f7ff fc6d 	bl	8015b5a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8016280:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8016282:	1c5a      	adds	r2, r3, #1
 8016284:	8722      	strh	r2, [r4, #56]	; 0x38
 8016286:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8016288:	4413      	add	r3, r2
 801628a:	b29b      	uxth	r3, r3
 801628c:	2b09      	cmp	r3, #9
 801628e:	bf88      	it	hi
 8016290:	3b0a      	subhi	r3, #10
 8016292:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8016296:	8458      	strh	r0, [r3, #34]	; 0x22
 8016298:	e7ec      	b.n	8016274 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801629a:	bd10      	pop	{r4, pc}

0801629c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801629c:	b538      	push	{r3, r4, r5, lr}
 801629e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80162a0:	4604      	mov	r4, r0
 80162a2:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 80162a6:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 80162a8:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80162aa:	3a01      	subs	r2, #1
 80162ac:	8702      	strh	r2, [r0, #56]	; 0x38
 80162ae:	1c5a      	adds	r2, r3, #1
 80162b0:	b292      	uxth	r2, r2
 80162b2:	2a09      	cmp	r2, #9
 80162b4:	bf8a      	itet	hi
 80162b6:	3b09      	subhi	r3, #9
 80162b8:	86c2      	strhls	r2, [r0, #54]	; 0x36
 80162ba:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 80162bc:	f7ff ffb7 	bl	801622e <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80162c0:	8c23      	ldrh	r3, [r4, #32]
 80162c2:	2b01      	cmp	r3, #1
 80162c4:	bf9c      	itt	ls
 80162c6:	3301      	addls	r3, #1
 80162c8:	8423      	strhls	r3, [r4, #32]
 80162ca:	8be3      	ldrh	r3, [r4, #30]
 80162cc:	b90b      	cbnz	r3, 80162d2 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 80162ce:	2302      	movs	r3, #2
 80162d0:	83e3      	strh	r3, [r4, #30]
 80162d2:	8be3      	ldrh	r3, [r4, #30]
 80162d4:	4628      	mov	r0, r5
 80162d6:	3b01      	subs	r3, #1
 80162d8:	b29b      	uxth	r3, r3
 80162da:	83e3      	strh	r3, [r4, #30]
 80162dc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80162e0:	8365      	strh	r5, [r4, #26]
 80162e2:	bd38      	pop	{r3, r4, r5, pc}

080162e4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80162e4:	428a      	cmp	r2, r1
 80162e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80162ea:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 80162ec:	d932      	bls.n	8016354 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 80162ee:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 80162f0:	1a54      	subs	r4, r2, r1
 80162f2:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 80162f6:	19ee      	adds	r6, r5, r7
 80162f8:	fa1f fe84 	uxth.w	lr, r4
 80162fc:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8016300:	3e01      	subs	r6, #1
 8016302:	b2b4      	uxth	r4, r6
 8016304:	eba4 090e 	sub.w	r9, r4, lr
 8016308:	fa1f f989 	uxth.w	r9, r9
 801630c:	2c09      	cmp	r4, #9
 801630e:	4626      	mov	r6, r4
 8016310:	bf88      	it	hi
 8016312:	f1a4 060a 	subhi.w	r6, r4, #10
 8016316:	f1bc 0f00 	cmp.w	ip, #0
 801631a:	f104 34ff 	add.w	r4, r4, #4294967295
 801631e:	bf08      	it	eq
 8016320:	f04f 0c02 	moveq.w	ip, #2
 8016324:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8016328:	b2a4      	uxth	r4, r4
 801632a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801632e:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8016332:	454c      	cmp	r4, r9
 8016334:	fa1f fc8c 	uxth.w	ip, ip
 8016338:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801633c:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8016340:	d1e4      	bne.n	801630c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8016342:	eba5 050e 	sub.w	r5, r5, lr
 8016346:	eb0e 0408 	add.w	r4, lr, r8
 801634a:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801634e:	8705      	strh	r5, [r0, #56]	; 0x38
 8016350:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8016354:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8016356:	250a      	movs	r5, #10
 8016358:	1a64      	subs	r4, r4, r1
 801635a:	4439      	add	r1, r7
 801635c:	b289      	uxth	r1, r1
 801635e:	8704      	strh	r4, [r0, #56]	; 0x38
 8016360:	2909      	cmp	r1, #9
 8016362:	bf88      	it	hi
 8016364:	390a      	subhi	r1, #10
 8016366:	86c1      	strh	r1, [r0, #54]	; 0x36
 8016368:	b18a      	cbz	r2, 801638e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801636a:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801636c:	3a01      	subs	r2, #1
 801636e:	3101      	adds	r1, #1
 8016370:	b292      	uxth	r2, r2
 8016372:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8016376:	8701      	strh	r1, [r0, #56]	; 0x38
 8016378:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801637a:	b901      	cbnz	r1, 801637e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801637c:	86c5      	strh	r5, [r0, #54]	; 0x36
 801637e:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8016380:	3901      	subs	r1, #1
 8016382:	b289      	uxth	r1, r1
 8016384:	86c1      	strh	r1, [r0, #54]	; 0x36
 8016386:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801638a:	844c      	strh	r4, [r1, #34]	; 0x22
 801638c:	e7ec      	b.n	8016368 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801638e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016392:	f7ff bf4c 	b.w	801622e <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08016396 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8016396:	b570      	push	{r4, r5, r6, lr}
 8016398:	2500      	movs	r5, #0
 801639a:	4295      	cmp	r5, r2
 801639c:	d011      	beq.n	80163c2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801639e:	8bc4      	ldrh	r4, [r0, #30]
 80163a0:	f831 6b02 	ldrh.w	r6, [r1], #2
 80163a4:	4414      	add	r4, r2
 80163a6:	3c01      	subs	r4, #1
 80163a8:	1b64      	subs	r4, r4, r5
 80163aa:	b2a4      	uxth	r4, r4
 80163ac:	2c01      	cmp	r4, #1
 80163ae:	bf88      	it	hi
 80163b0:	3c02      	subhi	r4, #2
 80163b2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80163b6:	8b64      	ldrh	r4, [r4, #26]
 80163b8:	42b4      	cmp	r4, r6
 80163ba:	d117      	bne.n	80163ec <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 80163bc:	3501      	adds	r5, #1
 80163be:	b2ad      	uxth	r5, r5
 80163c0:	e7eb      	b.n	801639a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 80163c2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80163c6:	2400      	movs	r4, #0
 80163c8:	4413      	add	r3, r2
 80163ca:	b2a2      	uxth	r2, r4
 80163cc:	429a      	cmp	r2, r3
 80163ce:	da0f      	bge.n	80163f0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 80163d0:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 80163d2:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 80163d6:	3401      	adds	r4, #1
 80163d8:	4432      	add	r2, r6
 80163da:	b292      	uxth	r2, r2
 80163dc:	2a09      	cmp	r2, #9
 80163de:	bf88      	it	hi
 80163e0:	3a0a      	subhi	r2, #10
 80163e2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80163e6:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80163e8:	42aa      	cmp	r2, r5
 80163ea:	d0ee      	beq.n	80163ca <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 80163ec:	2000      	movs	r0, #0
 80163ee:	bd70      	pop	{r4, r5, r6, pc}
 80163f0:	2001      	movs	r0, #1
 80163f2:	e7fc      	b.n	80163ee <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

080163f4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80163f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163f8:	4605      	mov	r5, r0
 80163fa:	4616      	mov	r6, r2
 80163fc:	1c8c      	adds	r4, r1, #2
 80163fe:	8809      	ldrh	r1, [r1, #0]
 8016400:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8016404:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8016408:	42b3      	cmp	r3, r6
 801640a:	d124      	bne.n	8016456 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801640c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8016410:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8016414:	f001 070f 	and.w	r7, r1, #15
 8016418:	4652      	mov	r2, sl
 801641a:	f8cd 8000 	str.w	r8, [sp]
 801641e:	464b      	mov	r3, r9
 8016420:	4621      	mov	r1, r4
 8016422:	4628      	mov	r0, r5
 8016424:	f7ff ffb7 	bl	8016396 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8016428:	4683      	mov	fp, r0
 801642a:	b168      	cbz	r0, 8016448 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801642c:	eb0a 0109 	add.w	r1, sl, r9
 8016430:	463a      	mov	r2, r7
 8016432:	4628      	mov	r0, r5
 8016434:	4441      	add	r1, r8
 8016436:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801643a:	4649      	mov	r1, r9
 801643c:	f7ff ff52 	bl	80162e4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8016440:	4658      	mov	r0, fp
 8016442:	b003      	add	sp, #12
 8016444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016448:	eb07 010a 	add.w	r1, r7, sl
 801644c:	4449      	add	r1, r9
 801644e:	4441      	add	r1, r8
 8016450:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8016454:	e7d2      	b.n	80163fc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8016456:	f04f 0b00 	mov.w	fp, #0
 801645a:	e7f1      	b.n	8016440 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801645c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801645c:	b570      	push	{r4, r5, r6, lr}
 801645e:	8810      	ldrh	r0, [r2, #0]
 8016460:	4298      	cmp	r0, r3
 8016462:	d817      	bhi.n	8016494 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8016464:	1e48      	subs	r0, r1, #1
 8016466:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801646a:	4298      	cmp	r0, r3
 801646c:	d312      	bcc.n	8016494 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801646e:	2400      	movs	r4, #0
 8016470:	428c      	cmp	r4, r1
 8016472:	d20f      	bcs.n	8016494 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8016474:	1860      	adds	r0, r4, r1
 8016476:	1040      	asrs	r0, r0, #1
 8016478:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801647c:	0085      	lsls	r5, r0, #2
 801647e:	42b3      	cmp	r3, r6
 8016480:	d902      	bls.n	8016488 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8016482:	3001      	adds	r0, #1
 8016484:	b284      	uxth	r4, r0
 8016486:	e7f3      	b.n	8016470 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8016488:	d201      	bcs.n	801648e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801648a:	b281      	uxth	r1, r0
 801648c:	e7f0      	b.n	8016470 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801648e:	442a      	add	r2, r5
 8016490:	8850      	ldrh	r0, [r2, #2]
 8016492:	bd70      	pop	{r4, r5, r6, pc}
 8016494:	2000      	movs	r0, #0
 8016496:	e7fc      	b.n	8016492 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08016498 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8016498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801649c:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801649e:	4604      	mov	r4, r0
 80164a0:	260b      	movs	r6, #11
 80164a2:	886f      	ldrh	r7, [r5, #2]
 80164a4:	087f      	lsrs	r7, r7, #1
 80164a6:	3e01      	subs	r6, #1
 80164a8:	d013      	beq.n	80164d2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80164aa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80164ac:	462a      	mov	r2, r5
 80164ae:	4639      	mov	r1, r7
 80164b0:	4620      	mov	r0, r4
 80164b2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80164b6:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80164ba:	4643      	mov	r3, r8
 80164bc:	f7ff ffce 	bl	801645c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80164c0:	b138      	cbz	r0, 80164d2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80164c2:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80164c6:	4642      	mov	r2, r8
 80164c8:	4620      	mov	r0, r4
 80164ca:	f7ff ff93 	bl	80163f4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80164ce:	2800      	cmp	r0, #0
 80164d0:	d1e9      	bne.n	80164a6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 80164d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080164d8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 80164d8:	b570      	push	{r4, r5, r6, lr}
 80164da:	694a      	ldr	r2, [r1, #20]
 80164dc:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80164de:	684b      	ldr	r3, [r1, #4]
 80164e0:	1b54      	subs	r4, r2, r5
 80164e2:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80164e4:	f000 8106 	beq.w	80166f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 80164e8:	1b9b      	subs	r3, r3, r6
 80164ea:	d003      	beq.n	80164f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80164ec:	4363      	muls	r3, r4
 80164ee:	2210      	movs	r2, #16
 80164f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80164f4:	680c      	ldr	r4, [r1, #0]
 80164f6:	698a      	ldr	r2, [r1, #24]
 80164f8:	1b65      	subs	r5, r4, r5
 80164fa:	f000 80fd 	beq.w	80166f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 80164fe:	1b92      	subs	r2, r2, r6
 8016500:	d003      	beq.n	801650a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8016502:	436a      	muls	r2, r5
 8016504:	2410      	movs	r4, #16
 8016506:	fb92 f2f4 	sdiv	r2, r2, r4
 801650a:	1a9b      	subs	r3, r3, r2
 801650c:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8016734 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8016510:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016514:	460a      	mov	r2, r1
 8016516:	ee07 3a90 	vmov	s15, r3
 801651a:	f100 040c 	add.w	r4, r0, #12
 801651e:	4603      	mov	r3, r0
 8016520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016524:	ee67 7a84 	vmul.f32	s15, s15, s8
 8016528:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801652c:	eeb1 6a43 	vneg.f32	s12, s6
 8016530:	edd2 7a02 	vldr	s15, [r2, #8]
 8016534:	3214      	adds	r2, #20
 8016536:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801653a:	ece3 6a01 	vstmia	r3!, {s13}
 801653e:	429c      	cmp	r4, r3
 8016540:	ed52 7a02 	vldr	s15, [r2, #-8]
 8016544:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016548:	edc3 7a02 	vstr	s15, [r3, #8]
 801654c:	ed52 7a01 	vldr	s15, [r2, #-4]
 8016550:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016554:	edc3 7a05 	vstr	s15, [r3, #20]
 8016558:	d1ea      	bne.n	8016530 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801655a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801655c:	698b      	ldr	r3, [r1, #24]
 801655e:	edd0 4a02 	vldr	s9, [r0, #8]
 8016562:	1a9b      	subs	r3, r3, r2
 8016564:	edd0 3a00 	vldr	s7, [r0]
 8016568:	edd0 6a01 	vldr	s13, [r0, #4]
 801656c:	ee07 3a90 	vmov	s15, r3
 8016570:	684b      	ldr	r3, [r1, #4]
 8016572:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8016576:	ed90 5a05 	vldr	s10, [r0, #20]
 801657a:	1a9b      	subs	r3, r3, r2
 801657c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016580:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8016584:	ed90 2a03 	vldr	s4, [r0, #12]
 8016588:	ee07 3a10 	vmov	s14, r3
 801658c:	edd0 5a04 	vldr	s11, [r0, #16]
 8016590:	ee67 7a84 	vmul.f32	s15, s15, s8
 8016594:	ed90 1a07 	vldr	s2, [r0, #28]
 8016598:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801659c:	edd0 2a06 	vldr	s5, [r0, #24]
 80165a0:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80165a4:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 80165a8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80165ac:	ee32 5a45 	vsub.f32	s10, s4, s10
 80165b0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80165b4:	ee67 7a83 	vmul.f32	s15, s15, s6
 80165b8:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 80165bc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80165be:	694a      	ldr	r2, [r1, #20]
 80165c0:	1b13      	subs	r3, r2, r4
 80165c2:	ee07 3a10 	vmov	s14, r3
 80165c6:	680b      	ldr	r3, [r1, #0]
 80165c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80165cc:	1b1b      	subs	r3, r3, r4
 80165ce:	ee27 7a04 	vmul.f32	s14, s14, s8
 80165d2:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 80165d6:	ee07 3a10 	vmov	s14, r3
 80165da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80165de:	ee27 7a04 	vmul.f32	s14, s14, s8
 80165e2:	eee6 4a87 	vfma.f32	s9, s13, s14
 80165e6:	ee64 4a86 	vmul.f32	s9, s9, s12
 80165ea:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 80165ee:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80165f0:	698b      	ldr	r3, [r1, #24]
 80165f2:	1a9b      	subs	r3, r3, r2
 80165f4:	ee06 3a90 	vmov	s13, r3
 80165f8:	684b      	ldr	r3, [r1, #4]
 80165fa:	1a9b      	subs	r3, r3, r2
 80165fc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016600:	ee07 3a10 	vmov	s14, r3
 8016604:	ee66 6a84 	vmul.f32	s13, s13, s8
 8016608:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801660c:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8016610:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016614:	eee5 6a87 	vfma.f32	s13, s11, s14
 8016618:	ee66 6a83 	vmul.f32	s13, s13, s6
 801661c:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8016620:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8016622:	694a      	ldr	r2, [r1, #20]
 8016624:	1b13      	subs	r3, r2, r4
 8016626:	ee07 3a10 	vmov	s14, r3
 801662a:	680b      	ldr	r3, [r1, #0]
 801662c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016630:	1b1b      	subs	r3, r3, r4
 8016632:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016636:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801663a:	ee07 3a10 	vmov	s14, r3
 801663e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016642:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016646:	eea5 5a87 	vfma.f32	s10, s11, s14
 801664a:	edd0 5a08 	vldr	s11, [r0, #32]
 801664e:	ee31 1a65 	vsub.f32	s2, s2, s11
 8016652:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8016656:	ee25 5a06 	vmul.f32	s10, s10, s12
 801665a:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801665e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8016660:	698b      	ldr	r3, [r1, #24]
 8016662:	1a9b      	subs	r3, r3, r2
 8016664:	ee07 3a10 	vmov	s14, r3
 8016668:	684b      	ldr	r3, [r1, #4]
 801666a:	1a9b      	subs	r3, r3, r2
 801666c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016670:	ee01 3a90 	vmov	s3, r3
 8016674:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016678:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801667c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8016680:	ee61 1a84 	vmul.f32	s3, s3, s8
 8016684:	eea1 7a21 	vfma.f32	s14, s2, s3
 8016688:	ee27 7a03 	vmul.f32	s14, s14, s6
 801668c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8016690:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8016692:	694a      	ldr	r2, [r1, #20]
 8016694:	1b13      	subs	r3, r2, r4
 8016696:	ee03 3a10 	vmov	s6, r3
 801669a:	680b      	ldr	r3, [r1, #0]
 801669c:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80166a0:	1b1b      	subs	r3, r3, r4
 80166a2:	ee23 3a04 	vmul.f32	s6, s6, s8
 80166a6:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80166aa:	ee03 3a10 	vmov	s6, r3
 80166ae:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80166b2:	ee23 4a04 	vmul.f32	s8, s6, s8
 80166b6:	eee1 5a04 	vfma.f32	s11, s2, s8
 80166ba:	ee25 6a86 	vmul.f32	s12, s11, s12
 80166be:	ee62 5a67 	vnmul.f32	s11, s4, s15
 80166c2:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 80166c6:	eee3 5aa6 	vfma.f32	s11, s7, s13
 80166ca:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80166ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166d2:	dd13      	ble.n	80166fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 80166d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80166d8:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 80166dc:	63c3      	str	r3, [r0, #60]	; 0x3c
 80166de:	eee3 7a87 	vfma.f32	s15, s7, s14
 80166e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80166e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166ea:	dd15      	ble.n	8016718 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 80166ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80166f0:	6403      	str	r3, [r0, #64]	; 0x40
 80166f2:	bd70      	pop	{r4, r5, r6, pc}
 80166f4:	4623      	mov	r3, r4
 80166f6:	e6fd      	b.n	80164f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80166f8:	462a      	mov	r2, r5
 80166fa:	e706      	b.n	801650a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80166fc:	d502      	bpl.n	8016704 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 80166fe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016702:	e7e9      	b.n	80166d8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8016704:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8016708:	eea3 2a85 	vfma.f32	s4, s7, s10
 801670c:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8016710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016714:	dade      	bge.n	80166d4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8016716:	e7f2      	b.n	80166fe <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8016718:	d502      	bpl.n	8016720 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801671a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801671e:	e7e7      	b.n	80166f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8016720:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8016724:	eee3 4a86 	vfma.f32	s9, s7, s12
 8016728:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801672c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016730:	dadc      	bge.n	80166ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8016732:	e7f2      	b.n	801671a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8016734:	3d800000 	.word	0x3d800000

08016738 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8016738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801673c:	2714      	movs	r7, #20
 801673e:	435f      	muls	r7, r3
 8016740:	eb02 0c07 	add.w	ip, r2, r7
 8016744:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8016748:	f115 0e0f 	adds.w	lr, r5, #15
 801674c:	f100 80a2 	bmi.w	8016894 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8016750:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8016754:	9c08      	ldr	r4, [sp, #32]
 8016756:	2614      	movs	r6, #20
 8016758:	f8c0 e014 	str.w	lr, [r0, #20]
 801675c:	4366      	muls	r6, r4
 801675e:	eb02 0806 	add.w	r8, r2, r6
 8016762:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016766:	f115 040f 	adds.w	r4, r5, #15
 801676a:	f100 809f 	bmi.w	80168ac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801676e:	1124      	asrs	r4, r4, #4
 8016770:	eba4 040e 	sub.w	r4, r4, lr
 8016774:	6184      	str	r4, [r0, #24]
 8016776:	2c00      	cmp	r4, #0
 8016778:	f000 808a 	beq.w	8016890 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801677c:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8016780:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8016784:	5995      	ldr	r5, [r2, r6]
 8016786:	eba4 0809 	sub.w	r8, r4, r9
 801678a:	59d4      	ldr	r4, [r2, r7]
 801678c:	eba5 0a04 	sub.w	sl, r5, r4
 8016790:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8016794:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8016798:	fb0e fe05 	mul.w	lr, lr, r5
 801679c:	fb0a ee19 	mls	lr, sl, r9, lr
 80167a0:	fb08 e404 	mla	r4, r8, r4, lr
 80167a4:	3c01      	subs	r4, #1
 80167a6:	19a4      	adds	r4, r4, r6
 80167a8:	f100 808c 	bmi.w	80168c4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 80167ac:	fb94 fef6 	sdiv	lr, r4, r6
 80167b0:	fb06 441e 	mls	r4, r6, lr, r4
 80167b4:	f8c0 e000 	str.w	lr, [r0]
 80167b8:	6104      	str	r4, [r0, #16]
 80167ba:	2d00      	cmp	r5, #0
 80167bc:	f2c0 8095 	blt.w	80168ea <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 80167c0:	fb95 f4f6 	sdiv	r4, r5, r6
 80167c4:	fb06 5514 	mls	r5, r6, r4, r5
 80167c8:	6044      	str	r4, [r0, #4]
 80167ca:	6085      	str	r5, [r0, #8]
 80167cc:	60c6      	str	r6, [r0, #12]
 80167ce:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80167d2:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80167d6:	6945      	ldr	r5, [r0, #20]
 80167d8:	59d2      	ldr	r2, [r2, r7]
 80167da:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 80167de:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801690c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 80167e2:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 80167e6:	ee07 4a10 	vmov	s14, r4
 80167ea:	6804      	ldr	r4, [r0, #0]
 80167ec:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 80167f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80167f4:	ee07 2a90 	vmov	s15, r2
 80167f8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80167fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016800:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016804:	edd3 6a00 	vldr	s13, [r3]
 8016808:	eee6 6a07 	vfma.f32	s13, s12, s14
 801680c:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8016810:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016814:	edc0 6a07 	vstr	s13, [r0, #28]
 8016818:	edd0 6a01 	vldr	s13, [r0, #4]
 801681c:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8016820:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016824:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8016828:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801682c:	ed80 6a08 	vstr	s12, [r0, #32]
 8016830:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8016832:	6242      	str	r2, [r0, #36]	; 0x24
 8016834:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8016838:	ed93 6a03 	vldr	s12, [r3, #12]
 801683c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016840:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8016844:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8016848:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801684c:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8016850:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8016854:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8016858:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801685c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801685e:	6302      	str	r2, [r0, #48]	; 0x30
 8016860:	ed93 6a06 	vldr	s12, [r3, #24]
 8016864:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8016868:	eea5 6a87 	vfma.f32	s12, s11, s14
 801686c:	eeb0 7a46 	vmov.f32	s14, s12
 8016870:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8016874:	eea6 7a27 	vfma.f32	s14, s12, s15
 8016878:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801687c:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8016880:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8016884:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016888:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801688c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801688e:	63c3      	str	r3, [r0, #60]	; 0x3c
 8016890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016894:	2410      	movs	r4, #16
 8016896:	f1c5 0501 	rsb	r5, r5, #1
 801689a:	fb9e fef4 	sdiv	lr, lr, r4
 801689e:	f015 050f 	ands.w	r5, r5, #15
 80168a2:	bf18      	it	ne
 80168a4:	2501      	movne	r5, #1
 80168a6:	ebae 0e05 	sub.w	lr, lr, r5
 80168aa:	e753      	b.n	8016754 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 80168ac:	f04f 0910 	mov.w	r9, #16
 80168b0:	f1c5 0501 	rsb	r5, r5, #1
 80168b4:	fb94 f4f9 	sdiv	r4, r4, r9
 80168b8:	f015 050f 	ands.w	r5, r5, #15
 80168bc:	bf18      	it	ne
 80168be:	2501      	movne	r5, #1
 80168c0:	1b64      	subs	r4, r4, r5
 80168c2:	e755      	b.n	8016770 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 80168c4:	4264      	negs	r4, r4
 80168c6:	fb94 fef6 	sdiv	lr, r4, r6
 80168ca:	f1ce 0800 	rsb	r8, lr, #0
 80168ce:	fb06 441e 	mls	r4, r6, lr, r4
 80168d2:	f8c0 8000 	str.w	r8, [r0]
 80168d6:	6104      	str	r4, [r0, #16]
 80168d8:	2c00      	cmp	r4, #0
 80168da:	f43f af6e 	beq.w	80167ba <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 80168de:	ea6f 0e0e 	mvn.w	lr, lr
 80168e2:	1b34      	subs	r4, r6, r4
 80168e4:	f8c0 e000 	str.w	lr, [r0]
 80168e8:	e766      	b.n	80167b8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 80168ea:	426d      	negs	r5, r5
 80168ec:	fb95 f4f6 	sdiv	r4, r5, r6
 80168f0:	f1c4 0e00 	rsb	lr, r4, #0
 80168f4:	fb06 5514 	mls	r5, r6, r4, r5
 80168f8:	f8c0 e004 	str.w	lr, [r0, #4]
 80168fc:	6085      	str	r5, [r0, #8]
 80168fe:	2d00      	cmp	r5, #0
 8016900:	f43f af64 	beq.w	80167cc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8016904:	43e4      	mvns	r4, r4
 8016906:	1b75      	subs	r5, r6, r5
 8016908:	6044      	str	r4, [r0, #4]
 801690a:	e75e      	b.n	80167ca <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801690c:	3d800000 	.word	0x3d800000

08016910 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8016910:	4b01      	ldr	r3, [pc, #4]	; (8016918 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8016912:	6018      	str	r0, [r3, #0]
 8016914:	4770      	bx	lr
 8016916:	bf00      	nop
 8016918:	2400af04 	.word	0x2400af04

0801691c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801691c:	4b06      	ldr	r3, [pc, #24]	; (8016938 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801691e:	881a      	ldrh	r2, [r3, #0]
 8016920:	4282      	cmp	r2, r0
 8016922:	d807      	bhi.n	8016934 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8016924:	4b05      	ldr	r3, [pc, #20]	; (801693c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8016926:	881b      	ldrh	r3, [r3, #0]
 8016928:	4413      	add	r3, r2
 801692a:	4298      	cmp	r0, r3
 801692c:	bfac      	ite	ge
 801692e:	2000      	movge	r0, #0
 8016930:	2001      	movlt	r0, #1
 8016932:	4770      	bx	lr
 8016934:	2000      	movs	r0, #0
 8016936:	4770      	bx	lr
 8016938:	2400af24 	.word	0x2400af24
 801693c:	2400af28 	.word	0x2400af28

08016940 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8016940:	b508      	push	{r3, lr}
 8016942:	4601      	mov	r1, r0
 8016944:	f7ff ffea 	bl	801691c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8016948:	b118      	cbz	r0, 8016952 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801694a:	4b02      	ldr	r3, [pc, #8]	; (8016954 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801694c:	681b      	ldr	r3, [r3, #0]
 801694e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8016952:	bd08      	pop	{r3, pc}
 8016954:	2400af08 	.word	0x2400af08

08016958 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8016958:	b5f0      	push	{r4, r5, r6, r7, lr}
 801695a:	4c24      	ldr	r4, [pc, #144]	; (80169ec <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801695c:	6823      	ldr	r3, [r4, #0]
 801695e:	2b00      	cmp	r3, #0
 8016960:	d042      	beq.n	80169e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8016962:	4a23      	ldr	r2, [pc, #140]	; (80169f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8016964:	4d23      	ldr	r5, [pc, #140]	; (80169f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8016966:	8811      	ldrh	r1, [r2, #0]
 8016968:	f8b5 c000 	ldrh.w	ip, [r5]
 801696c:	4822      	ldr	r0, [pc, #136]	; (80169f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801696e:	4461      	add	r1, ip
 8016970:	1c4a      	adds	r2, r1, #1
 8016972:	008f      	lsls	r7, r1, #2
 8016974:	f022 0201 	bic.w	r2, r2, #1
 8016978:	19de      	adds	r6, r3, r7
 801697a:	0412      	lsls	r2, r2, #16
 801697c:	6006      	str	r6, [r0, #0]
 801697e:	4e1f      	ldr	r6, [pc, #124]	; (80169fc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8016980:	0c12      	lsrs	r2, r2, #16
 8016982:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8016986:	19da      	adds	r2, r3, r7
 8016988:	6032      	str	r2, [r6, #0]
 801698a:	220e      	movs	r2, #14
 801698c:	fb02 f20c 	mul.w	r2, r2, ip
 8016990:	3203      	adds	r2, #3
 8016992:	f022 0203 	bic.w	r2, r2, #3
 8016996:	443a      	add	r2, r7
 8016998:	4f19      	ldr	r7, [pc, #100]	; (8016a00 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801699a:	4413      	add	r3, r2
 801699c:	603b      	str	r3, [r7, #0]
 801699e:	2300      	movs	r3, #0
 80169a0:	4f18      	ldr	r7, [pc, #96]	; (8016a04 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 80169a2:	469c      	mov	ip, r3
 80169a4:	803b      	strh	r3, [r7, #0]
 80169a6:	4f18      	ldr	r7, [pc, #96]	; (8016a08 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80169a8:	683f      	ldr	r7, [r7, #0]
 80169aa:	1aba      	subs	r2, r7, r2
 80169ac:	4f17      	ldr	r7, [pc, #92]	; (8016a0c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80169ae:	603a      	str	r2, [r7, #0]
 80169b0:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80169b4:	4a16      	ldr	r2, [pc, #88]	; (8016a10 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 80169b6:	8013      	strh	r3, [r2, #0]
 80169b8:	428b      	cmp	r3, r1
 80169ba:	d10d      	bne.n	80169d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 80169bc:	882d      	ldrh	r5, [r5, #0]
 80169be:	2300      	movs	r3, #0
 80169c0:	6830      	ldr	r0, [r6, #0]
 80169c2:	240e      	movs	r4, #14
 80169c4:	429d      	cmp	r5, r3
 80169c6:	d90f      	bls.n	80169e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80169c8:	fb04 0203 	mla	r2, r4, r3, r0
 80169cc:	3301      	adds	r3, #1
 80169ce:	7b11      	ldrb	r1, [r2, #12]
 80169d0:	f36f 1145 	bfc	r1, #5, #1
 80169d4:	7311      	strb	r1, [r2, #12]
 80169d6:	e7f5      	b.n	80169c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 80169d8:	6822      	ldr	r2, [r4, #0]
 80169da:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80169de:	6802      	ldr	r2, [r0, #0]
 80169e0:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 80169e4:	3301      	adds	r3, #1
 80169e6:	e7e7      	b.n	80169b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 80169e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80169ea:	bf00      	nop
 80169ec:	2400af08 	.word	0x2400af08
 80169f0:	2400af24 	.word	0x2400af24
 80169f4:	2400af28 	.word	0x2400af28
 80169f8:	2400af1c 	.word	0x2400af1c
 80169fc:	2400af0c 	.word	0x2400af0c
 8016a00:	2400af14 	.word	0x2400af14
 8016a04:	2400af26 	.word	0x2400af26
 8016a08:	2400af10 	.word	0x2400af10
 8016a0c:	2400af20 	.word	0x2400af20
 8016a10:	2400af18 	.word	0x2400af18

08016a14 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8016a14:	4b06      	ldr	r3, [pc, #24]	; (8016a30 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8016a16:	681b      	ldr	r3, [r3, #0]
 8016a18:	b943      	cbnz	r3, 8016a2c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8016a1a:	b139      	cbz	r1, 8016a2c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8016a1c:	4b05      	ldr	r3, [pc, #20]	; (8016a34 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8016a1e:	801a      	strh	r2, [r3, #0]
 8016a20:	4b05      	ldr	r3, [pc, #20]	; (8016a38 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8016a22:	6019      	str	r1, [r3, #0]
 8016a24:	4b05      	ldr	r3, [pc, #20]	; (8016a3c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8016a26:	6018      	str	r0, [r3, #0]
 8016a28:	f7ff bf96 	b.w	8016958 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8016a2c:	4770      	bx	lr
 8016a2e:	bf00      	nop
 8016a30:	2400af14 	.word	0x2400af14
 8016a34:	2400af28 	.word	0x2400af28
 8016a38:	2400af10 	.word	0x2400af10
 8016a3c:	2400af08 	.word	0x2400af08

08016a40 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8016a40:	b470      	push	{r4, r5, r6}
 8016a42:	4c07      	ldr	r4, [pc, #28]	; (8016a60 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8016a44:	4605      	mov	r5, r0
 8016a46:	4610      	mov	r0, r2
 8016a48:	9a03      	ldr	r2, [sp, #12]
 8016a4a:	6826      	ldr	r6, [r4, #0]
 8016a4c:	b936      	cbnz	r6, 8016a5c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8016a4e:	6025      	str	r5, [r4, #0]
 8016a50:	4c04      	ldr	r4, [pc, #16]	; (8016a64 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8016a52:	8021      	strh	r1, [r4, #0]
 8016a54:	4619      	mov	r1, r3
 8016a56:	bc70      	pop	{r4, r5, r6}
 8016a58:	f7ff bfdc 	b.w	8016a14 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8016a5c:	bc70      	pop	{r4, r5, r6}
 8016a5e:	4770      	bx	lr
 8016a60:	2400af2c 	.word	0x2400af2c
 8016a64:	2400af24 	.word	0x2400af24

08016a68 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8016a68:	4a12      	ldr	r2, [pc, #72]	; (8016ab4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8016a6a:	8803      	ldrh	r3, [r0, #0]
 8016a6c:	8812      	ldrh	r2, [r2, #0]
 8016a6e:	4293      	cmp	r3, r2
 8016a70:	d207      	bcs.n	8016a82 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8016a72:	4a11      	ldr	r2, [pc, #68]	; (8016ab8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8016a74:	2114      	movs	r1, #20
 8016a76:	6812      	ldr	r2, [r2, #0]
 8016a78:	fb01 2303 	mla	r3, r1, r3, r2
 8016a7c:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8016a80:	4770      	bx	lr
 8016a82:	490e      	ldr	r1, [pc, #56]	; (8016abc <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8016a84:	8809      	ldrh	r1, [r1, #0]
 8016a86:	4411      	add	r1, r2
 8016a88:	428b      	cmp	r3, r1
 8016a8a:	da04      	bge.n	8016a96 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8016a8c:	1a9b      	subs	r3, r3, r2
 8016a8e:	4a0c      	ldr	r2, [pc, #48]	; (8016ac0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8016a90:	210e      	movs	r1, #14
 8016a92:	6812      	ldr	r2, [r2, #0]
 8016a94:	e7f0      	b.n	8016a78 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8016a96:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016a9a:	4293      	cmp	r3, r2
 8016a9c:	d108      	bne.n	8016ab0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8016a9e:	4b09      	ldr	r3, [pc, #36]	; (8016ac4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8016aa0:	781b      	ldrb	r3, [r3, #0]
 8016aa2:	b91b      	cbnz	r3, 8016aac <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8016aa4:	4b08      	ldr	r3, [pc, #32]	; (8016ac8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8016aa6:	f9b3 0000 	ldrsh.w	r0, [r3]
 8016aaa:	4770      	bx	lr
 8016aac:	4b07      	ldr	r3, [pc, #28]	; (8016acc <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8016aae:	e7fa      	b.n	8016aa6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8016ab0:	2000      	movs	r0, #0
 8016ab2:	4770      	bx	lr
 8016ab4:	2400af24 	.word	0x2400af24
 8016ab8:	2400af2c 	.word	0x2400af2c
 8016abc:	2400af28 	.word	0x2400af28
 8016ac0:	2400af0c 	.word	0x2400af0c
 8016ac4:	2400ae9c 	.word	0x2400ae9c
 8016ac8:	2400ae9e 	.word	0x2400ae9e
 8016acc:	2400aea0 	.word	0x2400aea0

08016ad0 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8016ad0:	4a12      	ldr	r2, [pc, #72]	; (8016b1c <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8016ad2:	8803      	ldrh	r3, [r0, #0]
 8016ad4:	8812      	ldrh	r2, [r2, #0]
 8016ad6:	4293      	cmp	r3, r2
 8016ad8:	d207      	bcs.n	8016aea <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8016ada:	4a11      	ldr	r2, [pc, #68]	; (8016b20 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8016adc:	2114      	movs	r1, #20
 8016ade:	6812      	ldr	r2, [r2, #0]
 8016ae0:	fb01 2303 	mla	r3, r1, r3, r2
 8016ae4:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8016ae8:	4770      	bx	lr
 8016aea:	490e      	ldr	r1, [pc, #56]	; (8016b24 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8016aec:	8809      	ldrh	r1, [r1, #0]
 8016aee:	4411      	add	r1, r2
 8016af0:	428b      	cmp	r3, r1
 8016af2:	da04      	bge.n	8016afe <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8016af4:	1a9b      	subs	r3, r3, r2
 8016af6:	4a0c      	ldr	r2, [pc, #48]	; (8016b28 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8016af8:	210e      	movs	r1, #14
 8016afa:	6812      	ldr	r2, [r2, #0]
 8016afc:	e7f0      	b.n	8016ae0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8016afe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016b02:	4293      	cmp	r3, r2
 8016b04:	d108      	bne.n	8016b18 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8016b06:	4b09      	ldr	r3, [pc, #36]	; (8016b2c <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8016b08:	781b      	ldrb	r3, [r3, #0]
 8016b0a:	b91b      	cbnz	r3, 8016b14 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8016b0c:	4b08      	ldr	r3, [pc, #32]	; (8016b30 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8016b0e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8016b12:	4770      	bx	lr
 8016b14:	4b07      	ldr	r3, [pc, #28]	; (8016b34 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8016b16:	e7fa      	b.n	8016b0e <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8016b18:	2000      	movs	r0, #0
 8016b1a:	4770      	bx	lr
 8016b1c:	2400af24 	.word	0x2400af24
 8016b20:	2400af2c 	.word	0x2400af2c
 8016b24:	2400af28 	.word	0x2400af28
 8016b28:	2400af0c 	.word	0x2400af0c
 8016b2c:	2400ae9c 	.word	0x2400ae9c
 8016b30:	2400aea0 	.word	0x2400aea0
 8016b34:	2400ae9e 	.word	0x2400ae9e

08016b38 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8016b38:	4a1f      	ldr	r2, [pc, #124]	; (8016bb8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 8016b3a:	b510      	push	{r4, lr}
 8016b3c:	880b      	ldrh	r3, [r1, #0]
 8016b3e:	8812      	ldrh	r2, [r2, #0]
 8016b40:	4293      	cmp	r3, r2
 8016b42:	d213      	bcs.n	8016b6c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8016b44:	4a1d      	ldr	r2, [pc, #116]	; (8016bbc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 8016b46:	2114      	movs	r1, #20
 8016b48:	6812      	ldr	r2, [r2, #0]
 8016b4a:	fb01 2303 	mla	r3, r1, r3, r2
 8016b4e:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8016b52:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8016b56:	8a1a      	ldrh	r2, [r3, #16]
 8016b58:	8a5b      	ldrh	r3, [r3, #18]
 8016b5a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8016b5e:	8004      	strh	r4, [r0, #0]
 8016b60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016b64:	8041      	strh	r1, [r0, #2]
 8016b66:	8082      	strh	r2, [r0, #4]
 8016b68:	80c3      	strh	r3, [r0, #6]
 8016b6a:	e00e      	b.n	8016b8a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8016b6c:	4914      	ldr	r1, [pc, #80]	; (8016bc0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 8016b6e:	8809      	ldrh	r1, [r1, #0]
 8016b70:	4411      	add	r1, r2
 8016b72:	428b      	cmp	r3, r1
 8016b74:	da0a      	bge.n	8016b8c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 8016b76:	1a9b      	subs	r3, r3, r2
 8016b78:	4a12      	ldr	r2, [pc, #72]	; (8016bc4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8016b7a:	210e      	movs	r1, #14
 8016b7c:	6812      	ldr	r2, [r2, #0]
 8016b7e:	fb01 2303 	mla	r3, r1, r3, r2
 8016b82:	681a      	ldr	r2, [r3, #0]
 8016b84:	6002      	str	r2, [r0, #0]
 8016b86:	685a      	ldr	r2, [r3, #4]
 8016b88:	6042      	str	r2, [r0, #4]
 8016b8a:	bd10      	pop	{r4, pc}
 8016b8c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016b90:	4293      	cmp	r3, r2
 8016b92:	d10b      	bne.n	8016bac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8016b94:	4b0c      	ldr	r3, [pc, #48]	; (8016bc8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8016b96:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016b9a:	4b0c      	ldr	r3, [pc, #48]	; (8016bcc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8016b9c:	8081      	strh	r1, [r0, #4]
 8016b9e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016ba2:	2300      	movs	r3, #0
 8016ba4:	80c2      	strh	r2, [r0, #6]
 8016ba6:	8003      	strh	r3, [r0, #0]
 8016ba8:	8043      	strh	r3, [r0, #2]
 8016baa:	e7ee      	b.n	8016b8a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8016bac:	2300      	movs	r3, #0
 8016bae:	8003      	strh	r3, [r0, #0]
 8016bb0:	8043      	strh	r3, [r0, #2]
 8016bb2:	8083      	strh	r3, [r0, #4]
 8016bb4:	e7d8      	b.n	8016b68 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8016bb6:	bf00      	nop
 8016bb8:	2400af24 	.word	0x2400af24
 8016bbc:	2400af2c 	.word	0x2400af2c
 8016bc0:	2400af28 	.word	0x2400af28
 8016bc4:	2400af0c 	.word	0x2400af0c
 8016bc8:	2400ae98 	.word	0x2400ae98
 8016bcc:	2400ae9a 	.word	0x2400ae9a

08016bd0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8016bd0:	4a17      	ldr	r2, [pc, #92]	; (8016c30 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 8016bd2:	8803      	ldrh	r3, [r0, #0]
 8016bd4:	8812      	ldrh	r2, [r2, #0]
 8016bd6:	4293      	cmp	r3, r2
 8016bd8:	d213      	bcs.n	8016c02 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 8016bda:	4a16      	ldr	r2, [pc, #88]	; (8016c34 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8016bdc:	2114      	movs	r1, #20
 8016bde:	6812      	ldr	r2, [r2, #0]
 8016be0:	fb01 2303 	mla	r3, r1, r3, r2
 8016be4:	8a1a      	ldrh	r2, [r3, #16]
 8016be6:	8919      	ldrh	r1, [r3, #8]
 8016be8:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8016bec:	428a      	cmp	r2, r1
 8016bee:	db1d      	blt.n	8016c2c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8016bf0:	8a58      	ldrh	r0, [r3, #18]
 8016bf2:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8016bf6:	895b      	ldrh	r3, [r3, #10]
 8016bf8:	4298      	cmp	r0, r3
 8016bfa:	bfac      	ite	ge
 8016bfc:	2000      	movge	r0, #0
 8016bfe:	2001      	movlt	r0, #1
 8016c00:	4770      	bx	lr
 8016c02:	490d      	ldr	r1, [pc, #52]	; (8016c38 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8016c04:	8809      	ldrh	r1, [r1, #0]
 8016c06:	4411      	add	r1, r2
 8016c08:	428b      	cmp	r3, r1
 8016c0a:	da0d      	bge.n	8016c28 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8016c0c:	1a9b      	subs	r3, r3, r2
 8016c0e:	4a0b      	ldr	r2, [pc, #44]	; (8016c3c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8016c10:	210e      	movs	r1, #14
 8016c12:	6812      	ldr	r2, [r2, #0]
 8016c14:	fb01 2303 	mla	r3, r1, r3, r2
 8016c18:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8016c1c:	891a      	ldrh	r2, [r3, #8]
 8016c1e:	4291      	cmp	r1, r2
 8016c20:	db04      	blt.n	8016c2c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8016c22:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8016c26:	e7e6      	b.n	8016bf6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 8016c28:	2000      	movs	r0, #0
 8016c2a:	4770      	bx	lr
 8016c2c:	2001      	movs	r0, #1
 8016c2e:	4770      	bx	lr
 8016c30:	2400af24 	.word	0x2400af24
 8016c34:	2400af2c 	.word	0x2400af2c
 8016c38:	2400af28 	.word	0x2400af28
 8016c3c:	2400af0c 	.word	0x2400af0c

08016c40 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8016c40:	4a12      	ldr	r2, [pc, #72]	; (8016c8c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8016c42:	8803      	ldrh	r3, [r0, #0]
 8016c44:	8811      	ldrh	r1, [r2, #0]
 8016c46:	428b      	cmp	r3, r1
 8016c48:	d20b      	bcs.n	8016c62 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8016c4a:	4a11      	ldr	r2, [pc, #68]	; (8016c90 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8016c4c:	6812      	ldr	r2, [r2, #0]
 8016c4e:	b112      	cbz	r2, 8016c56 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8016c50:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8016c54:	b9c0      	cbnz	r0, 8016c88 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8016c56:	4a0f      	ldr	r2, [pc, #60]	; (8016c94 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8016c58:	6811      	ldr	r1, [r2, #0]
 8016c5a:	2214      	movs	r2, #20
 8016c5c:	4353      	muls	r3, r2
 8016c5e:	58c8      	ldr	r0, [r1, r3]
 8016c60:	4770      	bx	lr
 8016c62:	4a0d      	ldr	r2, [pc, #52]	; (8016c98 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8016c64:	8812      	ldrh	r2, [r2, #0]
 8016c66:	440a      	add	r2, r1
 8016c68:	4293      	cmp	r3, r2
 8016c6a:	da04      	bge.n	8016c76 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8016c6c:	4a08      	ldr	r2, [pc, #32]	; (8016c90 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8016c6e:	6812      	ldr	r2, [r2, #0]
 8016c70:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8016c74:	4770      	bx	lr
 8016c76:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016c7a:	4293      	cmp	r3, r2
 8016c7c:	d103      	bne.n	8016c86 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8016c7e:	4b07      	ldr	r3, [pc, #28]	; (8016c9c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8016c80:	681b      	ldr	r3, [r3, #0]
 8016c82:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8016c84:	4770      	bx	lr
 8016c86:	2000      	movs	r0, #0
 8016c88:	4770      	bx	lr
 8016c8a:	bf00      	nop
 8016c8c:	2400af24 	.word	0x2400af24
 8016c90:	2400af08 	.word	0x2400af08
 8016c94:	2400af2c 	.word	0x2400af2c
 8016c98:	2400af28 	.word	0x2400af28
 8016c9c:	2400aea4 	.word	0x2400aea4

08016ca0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8016ca0:	4b24      	ldr	r3, [pc, #144]	; (8016d34 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8016ca2:	8802      	ldrh	r2, [r0, #0]
 8016ca4:	8818      	ldrh	r0, [r3, #0]
 8016ca6:	4282      	cmp	r2, r0
 8016ca8:	d221      	bcs.n	8016cee <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8016caa:	4b23      	ldr	r3, [pc, #140]	; (8016d38 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8016cac:	6819      	ldr	r1, [r3, #0]
 8016cae:	2314      	movs	r3, #20
 8016cb0:	fb03 1302 	mla	r3, r3, r2, r1
 8016cb4:	6858      	ldr	r0, [r3, #4]
 8016cb6:	2800      	cmp	r0, #0
 8016cb8:	d03a      	beq.n	8016d30 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8016cba:	4920      	ldr	r1, [pc, #128]	; (8016d3c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8016cbc:	6809      	ldr	r1, [r1, #0]
 8016cbe:	2900      	cmp	r1, #0
 8016cc0:	d036      	beq.n	8016d30 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8016cc2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016cc6:	2900      	cmp	r1, #0
 8016cc8:	d032      	beq.n	8016d30 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8016cca:	891a      	ldrh	r2, [r3, #8]
 8016ccc:	8958      	ldrh	r0, [r3, #10]
 8016cce:	4350      	muls	r0, r2
 8016cd0:	7c5a      	ldrb	r2, [r3, #17]
 8016cd2:	7cdb      	ldrb	r3, [r3, #19]
 8016cd4:	0952      	lsrs	r2, r2, #5
 8016cd6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8016cda:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8016cde:	2b0b      	cmp	r3, #11
 8016ce0:	bf18      	it	ne
 8016ce2:	0040      	lslne	r0, r0, #1
 8016ce4:	3003      	adds	r0, #3
 8016ce6:	f020 0003 	bic.w	r0, r0, #3
 8016cea:	4408      	add	r0, r1
 8016cec:	4770      	bx	lr
 8016cee:	4b14      	ldr	r3, [pc, #80]	; (8016d40 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8016cf0:	881b      	ldrh	r3, [r3, #0]
 8016cf2:	4403      	add	r3, r0
 8016cf4:	429a      	cmp	r2, r3
 8016cf6:	da1a      	bge.n	8016d2e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8016cf8:	4b12      	ldr	r3, [pc, #72]	; (8016d44 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8016cfa:	1a10      	subs	r0, r2, r0
 8016cfc:	210e      	movs	r1, #14
 8016cfe:	681b      	ldr	r3, [r3, #0]
 8016d00:	fb01 3000 	mla	r0, r1, r0, r3
 8016d04:	7b03      	ldrb	r3, [r0, #12]
 8016d06:	f003 031f 	and.w	r3, r3, #31
 8016d0a:	2b0b      	cmp	r3, #11
 8016d0c:	d10b      	bne.n	8016d26 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8016d0e:	8903      	ldrh	r3, [r0, #8]
 8016d10:	8940      	ldrh	r0, [r0, #10]
 8016d12:	4358      	muls	r0, r3
 8016d14:	4b09      	ldr	r3, [pc, #36]	; (8016d3c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8016d16:	3003      	adds	r0, #3
 8016d18:	6819      	ldr	r1, [r3, #0]
 8016d1a:	f020 0303 	bic.w	r3, r0, #3
 8016d1e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8016d22:	4418      	add	r0, r3
 8016d24:	4770      	bx	lr
 8016d26:	2b0d      	cmp	r3, #13
 8016d28:	d101      	bne.n	8016d2e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8016d2a:	300d      	adds	r0, #13
 8016d2c:	4770      	bx	lr
 8016d2e:	2000      	movs	r0, #0
 8016d30:	4770      	bx	lr
 8016d32:	bf00      	nop
 8016d34:	2400af24 	.word	0x2400af24
 8016d38:	2400af2c 	.word	0x2400af2c
 8016d3c:	2400af08 	.word	0x2400af08
 8016d40:	2400af28 	.word	0x2400af28
 8016d44:	2400af0c 	.word	0x2400af0c

08016d48 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8016d48:	4a17      	ldr	r2, [pc, #92]	; (8016da8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8016d4a:	b510      	push	{r4, lr}
 8016d4c:	8803      	ldrh	r3, [r0, #0]
 8016d4e:	8812      	ldrh	r2, [r2, #0]
 8016d50:	4293      	cmp	r3, r2
 8016d52:	d20c      	bcs.n	8016d6e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8016d54:	4a15      	ldr	r2, [pc, #84]	; (8016dac <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8016d56:	2114      	movs	r1, #20
 8016d58:	6812      	ldr	r2, [r2, #0]
 8016d5a:	fb01 2303 	mla	r3, r1, r3, r2
 8016d5e:	7c58      	ldrb	r0, [r3, #17]
 8016d60:	0942      	lsrs	r2, r0, #5
 8016d62:	7cd8      	ldrb	r0, [r3, #19]
 8016d64:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8016d68:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8016d6c:	bd10      	pop	{r4, pc}
 8016d6e:	4910      	ldr	r1, [pc, #64]	; (8016db0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8016d70:	8809      	ldrh	r1, [r1, #0]
 8016d72:	4411      	add	r1, r2
 8016d74:	428b      	cmp	r3, r1
 8016d76:	da09      	bge.n	8016d8c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8016d78:	1a9b      	subs	r3, r3, r2
 8016d7a:	4a0e      	ldr	r2, [pc, #56]	; (8016db4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8016d7c:	210e      	movs	r1, #14
 8016d7e:	6812      	ldr	r2, [r2, #0]
 8016d80:	fb01 2303 	mla	r3, r1, r3, r2
 8016d84:	7b18      	ldrb	r0, [r3, #12]
 8016d86:	f000 001f 	and.w	r0, r0, #31
 8016d8a:	e7ef      	b.n	8016d6c <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8016d8c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016d90:	4293      	cmp	r3, r2
 8016d92:	d106      	bne.n	8016da2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8016d94:	f7f0 fc2c 	bl	80075f0 <_ZN8touchgfx3HAL3lcdEv>
 8016d98:	6803      	ldr	r3, [r0, #0]
 8016d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016da0:	4718      	bx	r3
 8016da2:	2000      	movs	r0, #0
 8016da4:	e7e2      	b.n	8016d6c <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8016da6:	bf00      	nop
 8016da8:	2400af24 	.word	0x2400af24
 8016dac:	2400af2c 	.word	0x2400af2c
 8016db0:	2400af28 	.word	0x2400af28
 8016db4:	2400af0c 	.word	0x2400af0c

08016db8 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8016db8:	2010      	movs	r0, #16
 8016dba:	4770      	bx	lr

08016dbc <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8016dbc:	2000      	movs	r0, #0
 8016dbe:	4770      	bx	lr

08016dc0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8016dc0:	4b02      	ldr	r3, [pc, #8]	; (8016dcc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 8016dc2:	8818      	ldrh	r0, [r3, #0]
 8016dc4:	0040      	lsls	r0, r0, #1
 8016dc6:	b280      	uxth	r0, r0
 8016dc8:	4770      	bx	lr
 8016dca:	bf00      	nop
 8016dcc:	2400ae9e 	.word	0x2400ae9e

08016dd0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8016dd0:	2bff      	cmp	r3, #255	; 0xff
 8016dd2:	d050      	beq.n	8016e76 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8016dd4:	2a0b      	cmp	r2, #11
 8016dd6:	d04a      	beq.n	8016e6e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8016dd8:	d80e      	bhi.n	8016df8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8016dda:	2a03      	cmp	r2, #3
 8016ddc:	d03f      	beq.n	8016e5e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8016dde:	d804      	bhi.n	8016dea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8016de0:	2a01      	cmp	r2, #1
 8016de2:	d03e      	beq.n	8016e62 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8016de4:	d93f      	bls.n	8016e66 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8016de6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8016de8:	4770      	bx	lr
 8016dea:	2a09      	cmp	r2, #9
 8016dec:	d03f      	beq.n	8016e6e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8016dee:	d83c      	bhi.n	8016e6a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8016df0:	2a08      	cmp	r2, #8
 8016df2:	d03a      	beq.n	8016e6a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8016df4:	2000      	movs	r0, #0
 8016df6:	4770      	bx	lr
 8016df8:	2a2f      	cmp	r2, #47	; 0x2f
 8016dfa:	d024      	beq.n	8016e46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8016dfc:	d80d      	bhi.n	8016e1a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8016dfe:	2a2d      	cmp	r2, #45	; 0x2d
 8016e00:	d014      	beq.n	8016e2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8016e02:	d826      	bhi.n	8016e52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8016e04:	2a2c      	cmp	r2, #44	; 0x2c
 8016e06:	d1f5      	bne.n	8016df4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016e08:	684b      	ldr	r3, [r1, #4]
 8016e0a:	781b      	ldrb	r3, [r3, #0]
 8016e0c:	2b01      	cmp	r3, #1
 8016e0e:	d018      	beq.n	8016e42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8016e10:	d323      	bcc.n	8016e5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8016e12:	2b02      	cmp	r3, #2
 8016e14:	d1ee      	bne.n	8016df4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016e16:	6880      	ldr	r0, [r0, #8]
 8016e18:	4770      	bx	lr
 8016e1a:	2a31      	cmp	r2, #49	; 0x31
 8016e1c:	d004      	beq.n	8016e28 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 8016e1e:	d328      	bcc.n	8016e72 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8016e20:	2a32      	cmp	r2, #50	; 0x32
 8016e22:	d026      	beq.n	8016e72 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8016e24:	2a33      	cmp	r2, #51	; 0x33
 8016e26:	d1e5      	bne.n	8016df4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016e28:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8016e2a:	4770      	bx	lr
 8016e2c:	684b      	ldr	r3, [r1, #4]
 8016e2e:	781b      	ldrb	r3, [r3, #0]
 8016e30:	2b01      	cmp	r3, #1
 8016e32:	d004      	beq.n	8016e3e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8016e34:	d30b      	bcc.n	8016e4e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8016e36:	2b02      	cmp	r3, #2
 8016e38:	d1dc      	bne.n	8016df4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016e3a:	6900      	ldr	r0, [r0, #16]
 8016e3c:	4770      	bx	lr
 8016e3e:	6a00      	ldr	r0, [r0, #32]
 8016e40:	4770      	bx	lr
 8016e42:	6980      	ldr	r0, [r0, #24]
 8016e44:	4770      	bx	lr
 8016e46:	684b      	ldr	r3, [r1, #4]
 8016e48:	781b      	ldrb	r3, [r3, #0]
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d1d2      	bne.n	8016df4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016e4e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8016e50:	4770      	bx	lr
 8016e52:	684b      	ldr	r3, [r1, #4]
 8016e54:	781b      	ldrb	r3, [r3, #0]
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d1cc      	bne.n	8016df4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016e5a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016e5c:	4770      	bx	lr
 8016e5e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8016e60:	4770      	bx	lr
 8016e62:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8016e64:	4770      	bx	lr
 8016e66:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8016e68:	4770      	bx	lr
 8016e6a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8016e6c:	4770      	bx	lr
 8016e6e:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8016e70:	4770      	bx	lr
 8016e72:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8016e74:	4770      	bx	lr
 8016e76:	2a0b      	cmp	r2, #11
 8016e78:	d049      	beq.n	8016f0e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8016e7a:	d80e      	bhi.n	8016e9a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8016e7c:	2a03      	cmp	r2, #3
 8016e7e:	d040      	beq.n	8016f02 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8016e80:	d804      	bhi.n	8016e8c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8016e82:	2a01      	cmp	r2, #1
 8016e84:	d03f      	beq.n	8016f06 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8016e86:	d940      	bls.n	8016f0a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8016e88:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8016e8a:	4770      	bx	lr
 8016e8c:	2a09      	cmp	r2, #9
 8016e8e:	d03e      	beq.n	8016f0e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8016e90:	d801      	bhi.n	8016e96 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8016e92:	2a08      	cmp	r2, #8
 8016e94:	d1ae      	bne.n	8016df4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016e96:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8016e98:	4770      	bx	lr
 8016e9a:	2a2f      	cmp	r2, #47	; 0x2f
 8016e9c:	d024      	beq.n	8016ee8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8016e9e:	d80d      	bhi.n	8016ebc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8016ea0:	2a2d      	cmp	r2, #45	; 0x2d
 8016ea2:	d014      	beq.n	8016ece <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8016ea4:	d826      	bhi.n	8016ef4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 8016ea6:	2a2c      	cmp	r2, #44	; 0x2c
 8016ea8:	d1a4      	bne.n	8016df4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016eaa:	684b      	ldr	r3, [r1, #4]
 8016eac:	781b      	ldrb	r3, [r3, #0]
 8016eae:	2b01      	cmp	r3, #1
 8016eb0:	d018      	beq.n	8016ee4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8016eb2:	d324      	bcc.n	8016efe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8016eb4:	2b02      	cmp	r3, #2
 8016eb6:	d19d      	bne.n	8016df4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016eb8:	68c0      	ldr	r0, [r0, #12]
 8016eba:	4770      	bx	lr
 8016ebc:	2a31      	cmp	r2, #49	; 0x31
 8016ebe:	d004      	beq.n	8016eca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8016ec0:	d327      	bcc.n	8016f12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8016ec2:	2a32      	cmp	r2, #50	; 0x32
 8016ec4:	d025      	beq.n	8016f12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8016ec6:	2a33      	cmp	r2, #51	; 0x33
 8016ec8:	d194      	bne.n	8016df4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016eca:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8016ecc:	4770      	bx	lr
 8016ece:	684b      	ldr	r3, [r1, #4]
 8016ed0:	781b      	ldrb	r3, [r3, #0]
 8016ed2:	2b01      	cmp	r3, #1
 8016ed4:	d004      	beq.n	8016ee0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8016ed6:	d30b      	bcc.n	8016ef0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8016ed8:	2b02      	cmp	r3, #2
 8016eda:	d18b      	bne.n	8016df4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016edc:	6940      	ldr	r0, [r0, #20]
 8016ede:	4770      	bx	lr
 8016ee0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8016ee2:	4770      	bx	lr
 8016ee4:	69c0      	ldr	r0, [r0, #28]
 8016ee6:	4770      	bx	lr
 8016ee8:	684b      	ldr	r3, [r1, #4]
 8016eea:	781b      	ldrb	r3, [r3, #0]
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d181      	bne.n	8016df4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016ef0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8016ef2:	4770      	bx	lr
 8016ef4:	684b      	ldr	r3, [r1, #4]
 8016ef6:	781b      	ldrb	r3, [r3, #0]
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	f47f af7b 	bne.w	8016df4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016efe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8016f00:	4770      	bx	lr
 8016f02:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8016f04:	4770      	bx	lr
 8016f06:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8016f08:	4770      	bx	lr
 8016f0a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8016f0c:	4770      	bx	lr
 8016f0e:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8016f10:	4770      	bx	lr
 8016f12:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8016f14:	4770      	bx	lr

08016f16 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016f16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f1a:	b087      	sub	sp, #28
 8016f1c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8016f1e:	9205      	str	r2, [sp, #20]
 8016f20:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8016f24:	9101      	str	r1, [sp, #4]
 8016f26:	9202      	str	r2, [sp, #8]
 8016f28:	6841      	ldr	r1, [r0, #4]
 8016f2a:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8016f2e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8016f32:	fb01 2404 	mla	r4, r1, r4, r2
 8016f36:	6802      	ldr	r2, [r0, #0]
 8016f38:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8016f3c:	f8de 2000 	ldr.w	r2, [lr]
 8016f40:	9203      	str	r2, [sp, #12]
 8016f42:	f8de 2004 	ldr.w	r2, [lr, #4]
 8016f46:	3204      	adds	r2, #4
 8016f48:	9204      	str	r2, [sp, #16]
 8016f4a:	9a02      	ldr	r2, [sp, #8]
 8016f4c:	43d6      	mvns	r6, r2
 8016f4e:	b2f6      	uxtb	r6, r6
 8016f50:	9a01      	ldr	r2, [sp, #4]
 8016f52:	2a00      	cmp	r2, #0
 8016f54:	dc03      	bgt.n	8016f5e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8016f56:	9a05      	ldr	r2, [sp, #20]
 8016f58:	2a00      	cmp	r2, #0
 8016f5a:	f340 8129 	ble.w	80171b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8016f5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016f60:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8016f64:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8016f68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016f6a:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8016f6e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	dd0e      	ble.n	8016f94 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8016f76:	1408      	asrs	r0, r1, #16
 8016f78:	d405      	bmi.n	8016f86 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016f7a:	4560      	cmp	r0, ip
 8016f7c:	da03      	bge.n	8016f86 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016f7e:	1410      	asrs	r0, r2, #16
 8016f80:	d401      	bmi.n	8016f86 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016f82:	42b8      	cmp	r0, r7
 8016f84:	db07      	blt.n	8016f96 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8016f86:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016f88:	3b01      	subs	r3, #1
 8016f8a:	3402      	adds	r4, #2
 8016f8c:	4401      	add	r1, r0
 8016f8e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016f90:	4402      	add	r2, r0
 8016f92:	e7ee      	b.n	8016f72 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016f94:	d071      	beq.n	801707a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016f96:	1e58      	subs	r0, r3, #1
 8016f98:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8016f9a:	fb05 1500 	mla	r5, r5, r0, r1
 8016f9e:	142d      	asrs	r5, r5, #16
 8016fa0:	d45f      	bmi.n	8017062 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8016fa2:	4565      	cmp	r5, ip
 8016fa4:	da5d      	bge.n	8017062 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8016fa6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8016fa8:	fb05 2000 	mla	r0, r5, r0, r2
 8016fac:	1400      	asrs	r0, r0, #16
 8016fae:	d458      	bmi.n	8017062 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8016fb0:	42b8      	cmp	r0, r7
 8016fb2:	da56      	bge.n	8017062 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8016fb4:	4699      	mov	r9, r3
 8016fb6:	46a2      	mov	sl, r4
 8016fb8:	f8bd b008 	ldrh.w	fp, [sp, #8]
 8016fbc:	f1b9 0f00 	cmp.w	r9, #0
 8016fc0:	dd57      	ble.n	8017072 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8016fc2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016fc6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8016fca:	9803      	ldr	r0, [sp, #12]
 8016fcc:	140d      	asrs	r5, r1, #16
 8016fce:	f109 39ff 	add.w	r9, r9, #4294967295
 8016fd2:	fb07 000c 	mla	r0, r7, ip, r0
 8016fd6:	5d40      	ldrb	r0, [r0, r5]
 8016fd8:	9d04      	ldr	r5, [sp, #16]
 8016fda:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8016fde:	f8ba 5000 	ldrh.w	r5, [sl]
 8016fe2:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8016fe6:	122f      	asrs	r7, r5, #8
 8016fe8:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8016fec:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8016ff0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8016ff4:	00ed      	lsls	r5, r5, #3
 8016ff6:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8016ffa:	fb17 f706 	smulbb	r7, r7, r6
 8016ffe:	b2ed      	uxtb	r5, r5
 8017000:	fb18 f806 	smulbb	r8, r8, r6
 8017004:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8017008:	10c7      	asrs	r7, r0, #3
 801700a:	fb15 f506 	smulbb	r5, r5, r6
 801700e:	00c0      	lsls	r0, r0, #3
 8017010:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8017014:	fa1f fc8c 	uxth.w	ip, ip
 8017018:	b2c0      	uxtb	r0, r0
 801701a:	fb07 870b 	mla	r7, r7, fp, r8
 801701e:	fb00 500b 	mla	r0, r0, fp, r5
 8017022:	f10c 0501 	add.w	r5, ip, #1
 8017026:	b2bf      	uxth	r7, r7
 8017028:	b280      	uxth	r0, r0
 801702a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801702e:	f107 0801 	add.w	r8, r7, #1
 8017032:	1c45      	adds	r5, r0, #1
 8017034:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8017038:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801703c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8017040:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8017042:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8017046:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801704a:	4401      	add	r1, r0
 801704c:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8017050:	9814      	ldr	r0, [sp, #80]	; 0x50
 8017052:	ea45 0c0c 	orr.w	ip, r5, ip
 8017056:	4402      	add	r2, r0
 8017058:	ea4c 0c08 	orr.w	ip, ip, r8
 801705c:	f82a cb02 	strh.w	ip, [sl], #2
 8017060:	e7ac      	b.n	8016fbc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8017062:	f04f 0800 	mov.w	r8, #0
 8017066:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801706a:	eb03 0008 	add.w	r0, r3, r8
 801706e:	2800      	cmp	r0, #0
 8017070:	dc41      	bgt.n	80170f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8017072:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017076:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801707a:	9b01      	ldr	r3, [sp, #4]
 801707c:	2b00      	cmp	r3, #0
 801707e:	f340 8097 	ble.w	80171b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017082:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017086:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017088:	ee30 0a04 	vadd.f32	s0, s0, s8
 801708c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017090:	eef0 6a62 	vmov.f32	s13, s5
 8017094:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017098:	ee31 1a05 	vadd.f32	s2, s2, s10
 801709c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80170a0:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 80170a4:	eef0 6a43 	vmov.f32	s13, s6
 80170a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80170ac:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 80170b0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80170b4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80170b8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80170bc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80170c0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80170c4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80170c8:	ee12 2a90 	vmov	r2, s5
 80170cc:	eef0 2a47 	vmov.f32	s5, s14
 80170d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80170d4:	ee13 2a10 	vmov	r2, s6
 80170d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80170da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80170dc:	eeb0 3a67 	vmov.f32	s6, s15
 80170e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80170e4:	9314      	str	r3, [sp, #80]	; 0x50
 80170e6:	9b01      	ldr	r3, [sp, #4]
 80170e8:	9a05      	ldr	r2, [sp, #20]
 80170ea:	3b01      	subs	r3, #1
 80170ec:	9301      	str	r3, [sp, #4]
 80170ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80170f0:	bf08      	it	eq
 80170f2:	4613      	moveq	r3, r2
 80170f4:	e72c      	b.n	8016f50 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80170f6:	140f      	asrs	r7, r1, #16
 80170f8:	d453      	bmi.n	80171a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80170fa:	f8de 5008 	ldr.w	r5, [lr, #8]
 80170fe:	42bd      	cmp	r5, r7
 8017100:	dd4f      	ble.n	80171a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8017102:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8017106:	d44c      	bmi.n	80171a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8017108:	f8de 000c 	ldr.w	r0, [lr, #12]
 801710c:	4560      	cmp	r0, ip
 801710e:	dd48      	ble.n	80171a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8017110:	9803      	ldr	r0, [sp, #12]
 8017112:	b22d      	sxth	r5, r5
 8017114:	fb0c 0505 	mla	r5, ip, r5, r0
 8017118:	5de8      	ldrb	r0, [r5, r7]
 801711a:	9d04      	ldr	r5, [sp, #16]
 801711c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8017120:	f06f 0501 	mvn.w	r5, #1
 8017124:	fb05 fb08 	mul.w	fp, r5, r8
 8017128:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801712c:	f834 500b 	ldrh.w	r5, [r4, fp]
 8017130:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8017134:	122f      	asrs	r7, r5, #8
 8017136:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801713a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801713e:	00ed      	lsls	r5, r5, #3
 8017140:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8017144:	fb17 f706 	smulbb	r7, r7, r6
 8017148:	b2ed      	uxtb	r5, r5
 801714a:	fb19 f906 	smulbb	r9, r9, r6
 801714e:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8017152:	10c7      	asrs	r7, r0, #3
 8017154:	fb15 f506 	smulbb	r5, r5, r6
 8017158:	00c0      	lsls	r0, r0, #3
 801715a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801715e:	fa1f fc8c 	uxth.w	ip, ip
 8017162:	b2c0      	uxtb	r0, r0
 8017164:	fb07 970a 	mla	r7, r7, sl, r9
 8017168:	fb00 500a 	mla	r0, r0, sl, r5
 801716c:	f10c 0501 	add.w	r5, ip, #1
 8017170:	b2bf      	uxth	r7, r7
 8017172:	b280      	uxth	r0, r0
 8017174:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8017178:	f107 0901 	add.w	r9, r7, #1
 801717c:	1c45      	adds	r5, r0, #1
 801717e:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8017182:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8017186:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801718a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801718e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8017192:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8017196:	ea45 0c0c 	orr.w	ip, r5, ip
 801719a:	ea4c 0c09 	orr.w	ip, ip, r9
 801719e:	f824 c00b 	strh.w	ip, [r4, fp]
 80171a2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80171a4:	f108 38ff 	add.w	r8, r8, #4294967295
 80171a8:	4401      	add	r1, r0
 80171aa:	9814      	ldr	r0, [sp, #80]	; 0x50
 80171ac:	4402      	add	r2, r0
 80171ae:	e75c      	b.n	801706a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80171b0:	b007      	add	sp, #28
 80171b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080171b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80171b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171ba:	b085      	sub	sp, #20
 80171bc:	4693      	mov	fp, r2
 80171be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80171c2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80171c4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80171c6:	6870      	ldr	r0, [r6, #4]
 80171c8:	9100      	str	r1, [sp, #0]
 80171ca:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80171ce:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 80171d2:	fb00 2404 	mla	r4, r0, r4, r2
 80171d6:	6832      	ldr	r2, [r6, #0]
 80171d8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80171dc:	682a      	ldr	r2, [r5, #0]
 80171de:	9201      	str	r2, [sp, #4]
 80171e0:	686a      	ldr	r2, [r5, #4]
 80171e2:	3204      	adds	r2, #4
 80171e4:	9202      	str	r2, [sp, #8]
 80171e6:	9a00      	ldr	r2, [sp, #0]
 80171e8:	2a00      	cmp	r2, #0
 80171ea:	dc03      	bgt.n	80171f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80171ec:	f1bb 0f00 	cmp.w	fp, #0
 80171f0:	f340 80a0 	ble.w	8017334 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 80171f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80171f6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80171fa:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80171fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017200:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8017204:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017208:	2b00      	cmp	r3, #0
 801720a:	dd0c      	ble.n	8017226 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801720c:	1406      	asrs	r6, r0, #16
 801720e:	d405      	bmi.n	801721c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017210:	454e      	cmp	r6, r9
 8017212:	da03      	bge.n	801721c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017214:	1416      	asrs	r6, r2, #16
 8017216:	d401      	bmi.n	801721c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017218:	4546      	cmp	r6, r8
 801721a:	db05      	blt.n	8017228 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801721c:	4470      	add	r0, lr
 801721e:	4462      	add	r2, ip
 8017220:	3b01      	subs	r3, #1
 8017222:	3402      	adds	r4, #2
 8017224:	e7f0      	b.n	8017208 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8017226:	d00f      	beq.n	8017248 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8017228:	1e5e      	subs	r6, r3, #1
 801722a:	fb0e 0706 	mla	r7, lr, r6, r0
 801722e:	143f      	asrs	r7, r7, #16
 8017230:	d541      	bpl.n	80172b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 8017232:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8017236:	4698      	mov	r8, r3
 8017238:	9603      	str	r6, [sp, #12]
 801723a:	f1b8 0f00 	cmp.w	r8, #0
 801723e:	dc59      	bgt.n	80172f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8017240:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017244:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017248:	9b00      	ldr	r3, [sp, #0]
 801724a:	2b00      	cmp	r3, #0
 801724c:	dd72      	ble.n	8017334 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801724e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017254:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017258:	eeb0 6a62 	vmov.f32	s12, s5
 801725c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017260:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017264:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017268:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801726c:	eeb0 6a43 	vmov.f32	s12, s6
 8017270:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017274:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8017278:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801727c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017280:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017284:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017288:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801728c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017290:	ee12 2a90 	vmov	r2, s5
 8017294:	eef0 2a47 	vmov.f32	s5, s14
 8017298:	fb92 fef3 	sdiv	lr, r2, r3
 801729c:	ee13 2a10 	vmov	r2, s6
 80172a0:	eeb0 3a67 	vmov.f32	s6, s15
 80172a4:	fb92 fcf3 	sdiv	ip, r2, r3
 80172a8:	9b00      	ldr	r3, [sp, #0]
 80172aa:	3b01      	subs	r3, #1
 80172ac:	9300      	str	r3, [sp, #0]
 80172ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80172b0:	bf08      	it	eq
 80172b2:	465b      	moveq	r3, fp
 80172b4:	e797      	b.n	80171e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80172b6:	454f      	cmp	r7, r9
 80172b8:	dabb      	bge.n	8017232 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80172ba:	fb0c 2606 	mla	r6, ip, r6, r2
 80172be:	1436      	asrs	r6, r6, #16
 80172c0:	d4b7      	bmi.n	8017232 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80172c2:	4546      	cmp	r6, r8
 80172c4:	dab5      	bge.n	8017232 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80172c6:	461e      	mov	r6, r3
 80172c8:	46a0      	mov	r8, r4
 80172ca:	2e00      	cmp	r6, #0
 80172cc:	ddb8      	ble.n	8017240 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80172ce:	1417      	asrs	r7, r2, #16
 80172d0:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 80172d4:	9901      	ldr	r1, [sp, #4]
 80172d6:	ea4f 4920 	mov.w	r9, r0, asr #16
 80172da:	4462      	add	r2, ip
 80172dc:	4470      	add	r0, lr
 80172de:	fb0a 1707 	mla	r7, sl, r7, r1
 80172e2:	9902      	ldr	r1, [sp, #8]
 80172e4:	3e01      	subs	r6, #1
 80172e6:	f817 7009 	ldrb.w	r7, [r7, r9]
 80172ea:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 80172ee:	f828 7b02 	strh.w	r7, [r8], #2
 80172f2:	e7ea      	b.n	80172ca <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80172f4:	ea5f 4920 	movs.w	r9, r0, asr #16
 80172f8:	d417      	bmi.n	801732a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80172fa:	68ae      	ldr	r6, [r5, #8]
 80172fc:	454e      	cmp	r6, r9
 80172fe:	dd14      	ble.n	801732a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8017300:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8017304:	d411      	bmi.n	801732a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8017306:	68ef      	ldr	r7, [r5, #12]
 8017308:	4557      	cmp	r7, sl
 801730a:	dd0e      	ble.n	801732a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801730c:	9f01      	ldr	r7, [sp, #4]
 801730e:	b236      	sxth	r6, r6
 8017310:	f06f 0101 	mvn.w	r1, #1
 8017314:	fb0a 7606 	mla	r6, sl, r6, r7
 8017318:	9f02      	ldr	r7, [sp, #8]
 801731a:	f816 6009 	ldrb.w	r6, [r6, r9]
 801731e:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8017322:	fb01 f608 	mul.w	r6, r1, r8
 8017326:	9903      	ldr	r1, [sp, #12]
 8017328:	538f      	strh	r7, [r1, r6]
 801732a:	4470      	add	r0, lr
 801732c:	4462      	add	r2, ip
 801732e:	f108 38ff 	add.w	r8, r8, #4294967295
 8017332:	e782      	b.n	801723a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8017334:	b005      	add	sp, #20
 8017336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801733a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801733a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801733e:	b087      	sub	sp, #28
 8017340:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017342:	9205      	str	r2, [sp, #20]
 8017344:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8017348:	9102      	str	r1, [sp, #8]
 801734a:	9203      	str	r2, [sp, #12]
 801734c:	6861      	ldr	r1, [r4, #4]
 801734e:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8017352:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8017356:	fb01 2000 	mla	r0, r1, r0, r2
 801735a:	6822      	ldr	r2, [r4, #0]
 801735c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8017360:	9200      	str	r2, [sp, #0]
 8017362:	f8dc 2000 	ldr.w	r2, [ip]
 8017366:	9204      	str	r2, [sp, #16]
 8017368:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801736c:	3204      	adds	r2, #4
 801736e:	9201      	str	r2, [sp, #4]
 8017370:	9a03      	ldr	r2, [sp, #12]
 8017372:	43d5      	mvns	r5, r2
 8017374:	b2ed      	uxtb	r5, r5
 8017376:	9a02      	ldr	r2, [sp, #8]
 8017378:	2a00      	cmp	r2, #0
 801737a:	dc03      	bgt.n	8017384 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801737c:	9a05      	ldr	r2, [sp, #20]
 801737e:	2a00      	cmp	r2, #0
 8017380:	f340 812c 	ble.w	80175dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8017384:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017386:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801738a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801738e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017390:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8017394:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017398:	2b00      	cmp	r3, #0
 801739a:	dd10      	ble.n	80173be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801739c:	140c      	asrs	r4, r1, #16
 801739e:	d405      	bmi.n	80173ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80173a0:	4574      	cmp	r4, lr
 80173a2:	da03      	bge.n	80173ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80173a4:	1414      	asrs	r4, r2, #16
 80173a6:	d401      	bmi.n	80173ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80173a8:	42bc      	cmp	r4, r7
 80173aa:	db09      	blt.n	80173c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80173ac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80173ae:	3b01      	subs	r3, #1
 80173b0:	9800      	ldr	r0, [sp, #0]
 80173b2:	4421      	add	r1, r4
 80173b4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80173b6:	3002      	adds	r0, #2
 80173b8:	4422      	add	r2, r4
 80173ba:	9000      	str	r0, [sp, #0]
 80173bc:	e7ec      	b.n	8017398 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80173be:	d071      	beq.n	80174a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 80173c0:	1e5c      	subs	r4, r3, #1
 80173c2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80173c4:	fb06 1604 	mla	r6, r6, r4, r1
 80173c8:	1436      	asrs	r6, r6, #16
 80173ca:	d45d      	bmi.n	8017488 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80173cc:	4576      	cmp	r6, lr
 80173ce:	da5b      	bge.n	8017488 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80173d0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80173d2:	fb06 2404 	mla	r4, r6, r4, r2
 80173d6:	1424      	asrs	r4, r4, #16
 80173d8:	d456      	bmi.n	8017488 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80173da:	42bc      	cmp	r4, r7
 80173dc:	da54      	bge.n	8017488 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80173de:	4698      	mov	r8, r3
 80173e0:	f8dd 9000 	ldr.w	r9, [sp]
 80173e4:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 80173e8:	f1b8 0f00 	cmp.w	r8, #0
 80173ec:	dd54      	ble.n	8017498 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 80173ee:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 80173f2:	1414      	asrs	r4, r2, #16
 80173f4:	9804      	ldr	r0, [sp, #16]
 80173f6:	140e      	asrs	r6, r1, #16
 80173f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80173fc:	fb07 0404 	mla	r4, r7, r4, r0
 8017400:	9801      	ldr	r0, [sp, #4]
 8017402:	f814 e006 	ldrb.w	lr, [r4, r6]
 8017406:	f8b9 4000 	ldrh.w	r4, [r9]
 801740a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801740e:	1227      	asrs	r7, r4, #8
 8017410:	eb00 0b0e 	add.w	fp, r0, lr
 8017414:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8017418:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801741c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801741e:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8017422:	f89b b001 	ldrb.w	fp, [fp, #1]
 8017426:	4401      	add	r1, r0
 8017428:	fb16 f60a 	smulbb	r6, r6, sl
 801742c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801742e:	fb1b fb0a 	smulbb	fp, fp, sl
 8017432:	fb07 6705 	mla	r7, r7, r5, r6
 8017436:	10e6      	asrs	r6, r4, #3
 8017438:	00e4      	lsls	r4, r4, #3
 801743a:	4402      	add	r2, r0
 801743c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8017440:	b2bf      	uxth	r7, r7
 8017442:	b2e4      	uxtb	r4, r4
 8017444:	fb06 b605 	mla	r6, r6, r5, fp
 8017448:	fb14 f405 	smulbb	r4, r4, r5
 801744c:	b2b6      	uxth	r6, r6
 801744e:	fb0e 4e0a 	mla	lr, lr, sl, r4
 8017452:	1c7c      	adds	r4, r7, #1
 8017454:	f106 0b01 	add.w	fp, r6, #1
 8017458:	fa1f fe8e 	uxth.w	lr, lr
 801745c:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8017460:	f10e 0401 	add.w	r4, lr, #1
 8017464:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8017468:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801746c:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 8017470:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8017474:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8017478:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801747c:	4327      	orrs	r7, r4
 801747e:	ea47 070b 	orr.w	r7, r7, fp
 8017482:	f829 7b02 	strh.w	r7, [r9], #2
 8017486:	e7af      	b.n	80173e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8017488:	f04f 0e00 	mov.w	lr, #0
 801748c:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 8017490:	eb03 040e 	add.w	r4, r3, lr
 8017494:	2c00      	cmp	r4, #0
 8017496:	dc43      	bgt.n	8017520 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8017498:	9a00      	ldr	r2, [sp, #0]
 801749a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801749e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80174a2:	9300      	str	r3, [sp, #0]
 80174a4:	9b02      	ldr	r3, [sp, #8]
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	f340 8098 	ble.w	80175dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80174ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80174b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80174b2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80174b6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80174ba:	eef0 6a62 	vmov.f32	s13, s5
 80174be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80174c2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80174c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80174ca:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 80174ce:	eef0 6a43 	vmov.f32	s13, s6
 80174d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80174d6:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 80174da:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80174de:	ee61 7a27 	vmul.f32	s15, s2, s15
 80174e2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80174e6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80174ea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80174ee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80174f2:	ee12 2a90 	vmov	r2, s5
 80174f6:	eef0 2a47 	vmov.f32	s5, s14
 80174fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80174fe:	ee13 2a10 	vmov	r2, s6
 8017502:	9313      	str	r3, [sp, #76]	; 0x4c
 8017504:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017506:	eeb0 3a67 	vmov.f32	s6, s15
 801750a:	fb92 f3f3 	sdiv	r3, r2, r3
 801750e:	9314      	str	r3, [sp, #80]	; 0x50
 8017510:	9b02      	ldr	r3, [sp, #8]
 8017512:	9a05      	ldr	r2, [sp, #20]
 8017514:	3b01      	subs	r3, #1
 8017516:	9302      	str	r3, [sp, #8]
 8017518:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801751a:	bf08      	it	eq
 801751c:	4613      	moveq	r3, r2
 801751e:	e72a      	b.n	8017376 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8017520:	140f      	asrs	r7, r1, #16
 8017522:	d454      	bmi.n	80175ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8017524:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8017528:	42be      	cmp	r6, r7
 801752a:	dd50      	ble.n	80175ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801752c:	ea5f 4822 	movs.w	r8, r2, asr #16
 8017530:	d44d      	bmi.n	80175ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8017532:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8017536:	4544      	cmp	r4, r8
 8017538:	dd49      	ble.n	80175ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801753a:	9c04      	ldr	r4, [sp, #16]
 801753c:	b236      	sxth	r6, r6
 801753e:	f06f 0001 	mvn.w	r0, #1
 8017542:	fb08 4606 	mla	r6, r8, r6, r4
 8017546:	9c01      	ldr	r4, [sp, #4]
 8017548:	fb00 fa0e 	mul.w	sl, r0, lr
 801754c:	9800      	ldr	r0, [sp, #0]
 801754e:	f816 8007 	ldrb.w	r8, [r6, r7]
 8017552:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8017556:	eb04 0b08 	add.w	fp, r4, r8
 801755a:	f830 400a 	ldrh.w	r4, [r0, sl]
 801755e:	9801      	ldr	r0, [sp, #4]
 8017560:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8017564:	1227      	asrs	r7, r4, #8
 8017566:	f89b b001 	ldrb.w	fp, [fp, #1]
 801756a:	fb16 f609 	smulbb	r6, r6, r9
 801756e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8017572:	f810 8008 	ldrb.w	r8, [r0, r8]
 8017576:	fb1b fb09 	smulbb	fp, fp, r9
 801757a:	fb07 6705 	mla	r7, r7, r5, r6
 801757e:	10e6      	asrs	r6, r4, #3
 8017580:	00e4      	lsls	r4, r4, #3
 8017582:	9800      	ldr	r0, [sp, #0]
 8017584:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8017588:	b2bf      	uxth	r7, r7
 801758a:	b2e4      	uxtb	r4, r4
 801758c:	fb06 b605 	mla	r6, r6, r5, fp
 8017590:	fb14 f405 	smulbb	r4, r4, r5
 8017594:	b2b6      	uxth	r6, r6
 8017596:	fb08 4809 	mla	r8, r8, r9, r4
 801759a:	1c7c      	adds	r4, r7, #1
 801759c:	f106 0b01 	add.w	fp, r6, #1
 80175a0:	fa1f f888 	uxth.w	r8, r8
 80175a4:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 80175a8:	f108 0401 	add.w	r4, r8, #1
 80175ac:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 80175b0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80175b4:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 80175b8:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80175bc:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 80175c0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80175c4:	4327      	orrs	r7, r4
 80175c6:	ea47 070b 	orr.w	r7, r7, fp
 80175ca:	f820 700a 	strh.w	r7, [r0, sl]
 80175ce:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80175d0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80175d4:	4401      	add	r1, r0
 80175d6:	9814      	ldr	r0, [sp, #80]	; 0x50
 80175d8:	4402      	add	r2, r0
 80175da:	e759      	b.n	8017490 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80175dc:	b007      	add	sp, #28
 80175de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080175e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80175e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175e8:	b085      	sub	sp, #20
 80175ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80175ee:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80175f0:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80175f2:	9203      	str	r2, [sp, #12]
 80175f4:	6870      	ldr	r0, [r6, #4]
 80175f6:	686f      	ldr	r7, [r5, #4]
 80175f8:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 80175fc:	3704      	adds	r7, #4
 80175fe:	9101      	str	r1, [sp, #4]
 8017600:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8017604:	fb00 2404 	mla	r4, r0, r4, r2
 8017608:	6832      	ldr	r2, [r6, #0]
 801760a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801760e:	682a      	ldr	r2, [r5, #0]
 8017610:	9202      	str	r2, [sp, #8]
 8017612:	9a01      	ldr	r2, [sp, #4]
 8017614:	2a00      	cmp	r2, #0
 8017616:	dc03      	bgt.n	8017620 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8017618:	9a03      	ldr	r2, [sp, #12]
 801761a:	2a00      	cmp	r2, #0
 801761c:	f340 80cc 	ble.w	80177b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8017620:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017622:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8017626:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801762a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801762c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8017630:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017634:	2b00      	cmp	r3, #0
 8017636:	dd0d      	ble.n	8017654 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017638:	1406      	asrs	r6, r0, #16
 801763a:	d405      	bmi.n	8017648 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801763c:	454e      	cmp	r6, r9
 801763e:	da03      	bge.n	8017648 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8017640:	1416      	asrs	r6, r2, #16
 8017642:	d401      	bmi.n	8017648 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8017644:	4546      	cmp	r6, r8
 8017646:	db06      	blt.n	8017656 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017648:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801764a:	4460      	add	r0, ip
 801764c:	3b01      	subs	r3, #1
 801764e:	3402      	adds	r4, #2
 8017650:	4432      	add	r2, r6
 8017652:	e7ef      	b.n	8017634 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8017654:	d00f      	beq.n	8017676 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8017656:	1e5e      	subs	r6, r3, #1
 8017658:	fb0c 0e06 	mla	lr, ip, r6, r0
 801765c:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8017660:	d543      	bpl.n	80176ea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8017662:	4698      	mov	r8, r3
 8017664:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 8017668:	f1b8 0f00 	cmp.w	r8, #0
 801766c:	dc71      	bgt.n	8017752 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801766e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017672:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017676:	9b01      	ldr	r3, [sp, #4]
 8017678:	2b00      	cmp	r3, #0
 801767a:	f340 809d 	ble.w	80177b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801767e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017682:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017684:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017688:	eeb0 6a62 	vmov.f32	s12, s5
 801768c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017690:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017694:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017698:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801769c:	eeb0 6a43 	vmov.f32	s12, s6
 80176a0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80176a4:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80176a8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80176ac:	ee61 7a27 	vmul.f32	s15, s2, s15
 80176b0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80176b4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80176b8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80176bc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80176c0:	ee12 2a90 	vmov	r2, s5
 80176c4:	eef0 2a47 	vmov.f32	s5, s14
 80176c8:	fb92 fcf3 	sdiv	ip, r2, r3
 80176cc:	ee13 2a10 	vmov	r2, s6
 80176d0:	eeb0 3a67 	vmov.f32	s6, s15
 80176d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80176d8:	9312      	str	r3, [sp, #72]	; 0x48
 80176da:	9b01      	ldr	r3, [sp, #4]
 80176dc:	9a03      	ldr	r2, [sp, #12]
 80176de:	3b01      	subs	r3, #1
 80176e0:	9301      	str	r3, [sp, #4]
 80176e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80176e4:	bf08      	it	eq
 80176e6:	4613      	moveq	r3, r2
 80176e8:	e793      	b.n	8017612 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80176ea:	45ce      	cmp	lr, r9
 80176ec:	dab9      	bge.n	8017662 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80176ee:	9912      	ldr	r1, [sp, #72]	; 0x48
 80176f0:	fb01 2606 	mla	r6, r1, r6, r2
 80176f4:	1436      	asrs	r6, r6, #16
 80176f6:	d4b4      	bmi.n	8017662 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80176f8:	4546      	cmp	r6, r8
 80176fa:	dab2      	bge.n	8017662 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80176fc:	4698      	mov	r8, r3
 80176fe:	46a2      	mov	sl, r4
 8017700:	f1b8 0f00 	cmp.w	r8, #0
 8017704:	ddb3      	ble.n	801766e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8017706:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801770a:	1416      	asrs	r6, r2, #16
 801770c:	9902      	ldr	r1, [sp, #8]
 801770e:	ea4f 4e20 	mov.w	lr, r0, asr #16
 8017712:	f108 38ff 	add.w	r8, r8, #4294967295
 8017716:	4460      	add	r0, ip
 8017718:	fb09 1606 	mla	r6, r9, r6, r1
 801771c:	4928      	ldr	r1, [pc, #160]	; (80177c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801771e:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8017722:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8017726:	eb07 0b0e 	add.w	fp, r7, lr
 801772a:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801772e:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8017732:	00f6      	lsls	r6, r6, #3
 8017734:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 8017738:	9912      	ldr	r1, [sp, #72]	; 0x48
 801773a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801773e:	440a      	add	r2, r1
 8017740:	ea49 0606 	orr.w	r6, r9, r6
 8017744:	f817 900e 	ldrb.w	r9, [r7, lr]
 8017748:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801774c:	f82a 6b02 	strh.w	r6, [sl], #2
 8017750:	e7d6      	b.n	8017700 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8017752:	ea5f 4920 	movs.w	r9, r0, asr #16
 8017756:	d429      	bmi.n	80177ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8017758:	68ae      	ldr	r6, [r5, #8]
 801775a:	454e      	cmp	r6, r9
 801775c:	dd26      	ble.n	80177ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801775e:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8017762:	d423      	bmi.n	80177ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8017764:	68e9      	ldr	r1, [r5, #12]
 8017766:	4559      	cmp	r1, fp
 8017768:	dd20      	ble.n	80177ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801776a:	fa0f fe86 	sxth.w	lr, r6
 801776e:	9902      	ldr	r1, [sp, #8]
 8017770:	fb0b 1e0e 	mla	lr, fp, lr, r1
 8017774:	f06f 0101 	mvn.w	r1, #1
 8017778:	f81e e009 	ldrb.w	lr, [lr, r9]
 801777c:	fb01 f908 	mul.w	r9, r1, r8
 8017780:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 8017784:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8017788:	eb07 060e 	add.w	r6, r7, lr
 801778c:	f896 b002 	ldrb.w	fp, [r6, #2]
 8017790:	7876      	ldrb	r6, [r6, #1]
 8017792:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 8017796:	00f6      	lsls	r6, r6, #3
 8017798:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801779c:	ea4b 0606 	orr.w	r6, fp, r6
 80177a0:	f817 b00e 	ldrb.w	fp, [r7, lr]
 80177a4:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 80177a8:	f82a 6009 	strh.w	r6, [sl, r9]
 80177ac:	9912      	ldr	r1, [sp, #72]	; 0x48
 80177ae:	4460      	add	r0, ip
 80177b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80177b4:	440a      	add	r2, r1
 80177b6:	e757      	b.n	8017668 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80177b8:	b005      	add	sp, #20
 80177ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177be:	bf00      	nop
 80177c0:	fffff800 	.word	0xfffff800

080177c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80177c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177c8:	b087      	sub	sp, #28
 80177ca:	468b      	mov	fp, r1
 80177cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80177d0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80177d2:	9204      	str	r2, [sp, #16]
 80177d4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80177d8:	6841      	ldr	r1, [r0, #4]
 80177da:	9205      	str	r2, [sp, #20]
 80177dc:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 80177e0:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80177e4:	fb01 2404 	mla	r4, r1, r4, r2
 80177e8:	6802      	ldr	r2, [r0, #0]
 80177ea:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80177ee:	f8dc 2000 	ldr.w	r2, [ip]
 80177f2:	9201      	str	r2, [sp, #4]
 80177f4:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80177f8:	3204      	adds	r2, #4
 80177fa:	9202      	str	r2, [sp, #8]
 80177fc:	f1bb 0f00 	cmp.w	fp, #0
 8017800:	dc03      	bgt.n	801780a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8017802:	9a04      	ldr	r2, [sp, #16]
 8017804:	2a00      	cmp	r2, #0
 8017806:	f340 8138 	ble.w	8017a7a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801780a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801780c:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8017810:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8017814:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017816:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801781a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801781e:	2b00      	cmp	r3, #0
 8017820:	dd0e      	ble.n	8017840 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8017822:	1402      	asrs	r2, r0, #16
 8017824:	d405      	bmi.n	8017832 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8017826:	42ba      	cmp	r2, r7
 8017828:	da03      	bge.n	8017832 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801782a:	140a      	asrs	r2, r1, #16
 801782c:	d401      	bmi.n	8017832 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801782e:	42b2      	cmp	r2, r6
 8017830:	db07      	blt.n	8017842 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017832:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017834:	3b01      	subs	r3, #1
 8017836:	3402      	adds	r4, #2
 8017838:	4410      	add	r0, r2
 801783a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801783c:	4411      	add	r1, r2
 801783e:	e7ee      	b.n	801781e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8017840:	d019      	beq.n	8017876 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8017842:	1e5a      	subs	r2, r3, #1
 8017844:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8017846:	fb05 0502 	mla	r5, r5, r2, r0
 801784a:	142d      	asrs	r5, r5, #16
 801784c:	d409      	bmi.n	8017862 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801784e:	42bd      	cmp	r5, r7
 8017850:	da07      	bge.n	8017862 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8017852:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8017854:	fb05 1202 	mla	r2, r5, r2, r1
 8017858:	1412      	asrs	r2, r2, #16
 801785a:	d402      	bmi.n	8017862 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801785c:	42b2      	cmp	r2, r6
 801785e:	f2c0 80ac 	blt.w	80179ba <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8017862:	f04f 0e00 	mov.w	lr, #0
 8017866:	eb03 020e 	add.w	r2, r3, lr
 801786a:	2a00      	cmp	r2, #0
 801786c:	dc3e      	bgt.n	80178ec <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801786e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017872:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017876:	f1bb 0f00 	cmp.w	fp, #0
 801787a:	f340 80fe 	ble.w	8017a7a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801787e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017882:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017884:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017888:	f1bb 0b01 	subs.w	fp, fp, #1
 801788c:	eeb0 6a62 	vmov.f32	s12, s5
 8017890:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017894:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017898:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801789c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80178a0:	eeb0 6a43 	vmov.f32	s12, s6
 80178a4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80178a8:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80178ac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80178b0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80178b4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80178b8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80178bc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80178c0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80178c4:	ee12 2a90 	vmov	r2, s5
 80178c8:	eef0 2a47 	vmov.f32	s5, s14
 80178cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80178d0:	ee13 2a10 	vmov	r2, s6
 80178d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80178d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80178d8:	eeb0 3a67 	vmov.f32	s6, s15
 80178dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80178e0:	9a04      	ldr	r2, [sp, #16]
 80178e2:	9314      	str	r3, [sp, #80]	; 0x50
 80178e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80178e6:	bf08      	it	eq
 80178e8:	4613      	moveq	r3, r2
 80178ea:	e787      	b.n	80177fc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80178ec:	1406      	asrs	r6, r0, #16
 80178ee:	d45d      	bmi.n	80179ac <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80178f0:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80178f4:	42b5      	cmp	r5, r6
 80178f6:	dd59      	ble.n	80179ac <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80178f8:	140f      	asrs	r7, r1, #16
 80178fa:	d457      	bmi.n	80179ac <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80178fc:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8017900:	42ba      	cmp	r2, r7
 8017902:	dd53      	ble.n	80179ac <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8017904:	9a01      	ldr	r2, [sp, #4]
 8017906:	b22d      	sxth	r5, r5
 8017908:	fb07 2505 	mla	r5, r7, r5, r2
 801790c:	5daa      	ldrb	r2, [r5, r6]
 801790e:	9d02      	ldr	r5, [sp, #8]
 8017910:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8017914:	0e2e      	lsrs	r6, r5, #24
 8017916:	d049      	beq.n	80179ac <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8017918:	f06f 0201 	mvn.w	r2, #1
 801791c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8017920:	fb02 f20e 	mul.w	r2, r2, lr
 8017924:	f834 8002 	ldrh.w	r8, [r4, r2]
 8017928:	9203      	str	r2, [sp, #12]
 801792a:	9a05      	ldr	r2, [sp, #20]
 801792c:	ea4f 2728 	mov.w	r7, r8, asr #8
 8017930:	4356      	muls	r6, r2
 8017932:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8017936:	1c72      	adds	r2, r6, #1
 8017938:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801793c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8017940:	b2ed      	uxtb	r5, r5
 8017942:	1212      	asrs	r2, r2, #8
 8017944:	fa1f f982 	uxth.w	r9, r2
 8017948:	43d2      	mvns	r2, r2
 801794a:	fb16 f609 	smulbb	r6, r6, r9
 801794e:	b2d2      	uxtb	r2, r2
 8017950:	fb15 f509 	smulbb	r5, r5, r9
 8017954:	fb07 6702 	mla	r7, r7, r2, r6
 8017958:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801795c:	fb1a fa09 	smulbb	sl, sl, r9
 8017960:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8017964:	b2bf      	uxth	r7, r7
 8017966:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801796a:	fa5f f888 	uxtb.w	r8, r8
 801796e:	fb06 a602 	mla	r6, r6, r2, sl
 8017972:	fb08 5502 	mla	r5, r8, r2, r5
 8017976:	1c7a      	adds	r2, r7, #1
 8017978:	b2b6      	uxth	r6, r6
 801797a:	b2ad      	uxth	r5, r5
 801797c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8017980:	9a03      	ldr	r2, [sp, #12]
 8017982:	f105 0a01 	add.w	sl, r5, #1
 8017986:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801798a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801798e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8017992:	ea4a 0707 	orr.w	r7, sl, r7
 8017996:	f106 0a01 	add.w	sl, r6, #1
 801799a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801799e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80179a2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80179a6:	ea47 070a 	orr.w	r7, r7, sl
 80179aa:	52a7      	strh	r7, [r4, r2]
 80179ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80179ae:	f10e 3eff 	add.w	lr, lr, #4294967295
 80179b2:	4410      	add	r0, r2
 80179b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80179b6:	4411      	add	r1, r2
 80179b8:	e755      	b.n	8017866 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80179ba:	f04f 0800 	mov.w	r8, #0
 80179be:	eba3 0208 	sub.w	r2, r3, r8
 80179c2:	2a00      	cmp	r2, #0
 80179c4:	f77f af53 	ble.w	801786e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80179c8:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 80179cc:	140a      	asrs	r2, r1, #16
 80179ce:	9f01      	ldr	r7, [sp, #4]
 80179d0:	1405      	asrs	r5, r0, #16
 80179d2:	fb06 7202 	mla	r2, r6, r2, r7
 80179d6:	5d52      	ldrb	r2, [r2, r5]
 80179d8:	9d02      	ldr	r5, [sp, #8]
 80179da:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80179de:	0e2e      	lsrs	r6, r5, #24
 80179e0:	d044      	beq.n	8017a6c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 80179e2:	9a05      	ldr	r2, [sp, #20]
 80179e4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80179e8:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 80179ec:	4356      	muls	r6, r2
 80179ee:	ea4f 272e 	mov.w	r7, lr, asr #8
 80179f2:	1c72      	adds	r2, r6, #1
 80179f4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80179f8:	eb02 2226 	add.w	r2, r2, r6, asr #8
 80179fc:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8017a00:	b2ed      	uxtb	r5, r5
 8017a02:	1212      	asrs	r2, r2, #8
 8017a04:	fa1f f982 	uxth.w	r9, r2
 8017a08:	43d2      	mvns	r2, r2
 8017a0a:	fb16 f609 	smulbb	r6, r6, r9
 8017a0e:	b2d2      	uxtb	r2, r2
 8017a10:	fb15 f509 	smulbb	r5, r5, r9
 8017a14:	fb07 6702 	mla	r7, r7, r2, r6
 8017a18:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8017a1c:	fb1a fa09 	smulbb	sl, sl, r9
 8017a20:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8017a24:	b2bf      	uxth	r7, r7
 8017a26:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8017a2a:	fa5f fe8e 	uxtb.w	lr, lr
 8017a2e:	fb06 a602 	mla	r6, r6, r2, sl
 8017a32:	fb0e 5502 	mla	r5, lr, r2, r5
 8017a36:	1c7a      	adds	r2, r7, #1
 8017a38:	b2b6      	uxth	r6, r6
 8017a3a:	b2ad      	uxth	r5, r5
 8017a3c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8017a40:	f105 0a01 	add.w	sl, r5, #1
 8017a44:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8017a48:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8017a4c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8017a50:	ea4a 0707 	orr.w	r7, sl, r7
 8017a54:	f106 0a01 	add.w	sl, r6, #1
 8017a58:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8017a5c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017a60:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8017a64:	ea47 070a 	orr.w	r7, r7, sl
 8017a68:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8017a6c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017a6e:	f108 0801 	add.w	r8, r8, #1
 8017a72:	4410      	add	r0, r2
 8017a74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017a76:	4411      	add	r1, r2
 8017a78:	e7a1      	b.n	80179be <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8017a7a:	b007      	add	sp, #28
 8017a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017a80 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a84:	b085      	sub	sp, #20
 8017a86:	468b      	mov	fp, r1
 8017a88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017a8c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8017a8e:	9203      	str	r2, [sp, #12]
 8017a90:	6841      	ldr	r1, [r0, #4]
 8017a92:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8017a96:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8017a9a:	fb01 2404 	mla	r4, r1, r4, r2
 8017a9e:	6802      	ldr	r2, [r0, #0]
 8017aa0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8017aa4:	f8de 2000 	ldr.w	r2, [lr]
 8017aa8:	9200      	str	r2, [sp, #0]
 8017aaa:	f8de 2004 	ldr.w	r2, [lr, #4]
 8017aae:	3204      	adds	r2, #4
 8017ab0:	9201      	str	r2, [sp, #4]
 8017ab2:	f1bb 0f00 	cmp.w	fp, #0
 8017ab6:	dc03      	bgt.n	8017ac0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8017ab8:	9a03      	ldr	r2, [sp, #12]
 8017aba:	2a00      	cmp	r2, #0
 8017abc:	f340 8153 	ble.w	8017d66 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8017ac0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017ac2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8017ac6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8017aca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017acc:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8017ad0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	dd0e      	ble.n	8017af6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8017ad8:	1408      	asrs	r0, r1, #16
 8017ada:	d405      	bmi.n	8017ae8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8017adc:	42b8      	cmp	r0, r7
 8017ade:	da03      	bge.n	8017ae8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8017ae0:	1410      	asrs	r0, r2, #16
 8017ae2:	d401      	bmi.n	8017ae8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8017ae4:	42b0      	cmp	r0, r6
 8017ae6:	db07      	blt.n	8017af8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8017ae8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017aea:	3b01      	subs	r3, #1
 8017aec:	3402      	adds	r4, #2
 8017aee:	4401      	add	r1, r0
 8017af0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017af2:	4402      	add	r2, r0
 8017af4:	e7ee      	b.n	8017ad4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8017af6:	d017      	beq.n	8017b28 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8017af8:	1e58      	subs	r0, r3, #1
 8017afa:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8017afc:	fb05 1500 	mla	r5, r5, r0, r1
 8017b00:	142d      	asrs	r5, r5, #16
 8017b02:	d409      	bmi.n	8017b18 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8017b04:	42bd      	cmp	r5, r7
 8017b06:	da07      	bge.n	8017b18 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8017b08:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8017b0a:	fb05 2000 	mla	r0, r5, r0, r2
 8017b0e:	1400      	asrs	r0, r0, #16
 8017b10:	d402      	bmi.n	8017b18 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8017b12:	42b0      	cmp	r0, r6
 8017b14:	f2c0 80bc 	blt.w	8017c90 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8017b18:	2600      	movs	r6, #0
 8017b1a:	1998      	adds	r0, r3, r6
 8017b1c:	2800      	cmp	r0, #0
 8017b1e:	dc3e      	bgt.n	8017b9e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8017b20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017b24:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017b28:	f1bb 0f00 	cmp.w	fp, #0
 8017b2c:	f340 811b 	ble.w	8017d66 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8017b30:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017b34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017b36:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017b3a:	f1bb 0b01 	subs.w	fp, fp, #1
 8017b3e:	eeb0 6a62 	vmov.f32	s12, s5
 8017b42:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017b46:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017b4a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017b4e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8017b52:	eeb0 6a43 	vmov.f32	s12, s6
 8017b56:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017b5a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8017b5e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017b62:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017b66:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017b6a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017b6e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017b72:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017b76:	ee12 2a90 	vmov	r2, s5
 8017b7a:	eef0 2a47 	vmov.f32	s5, s14
 8017b7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8017b82:	ee13 2a10 	vmov	r2, s6
 8017b86:	9311      	str	r3, [sp, #68]	; 0x44
 8017b88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017b8a:	eeb0 3a67 	vmov.f32	s6, s15
 8017b8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8017b92:	9a03      	ldr	r2, [sp, #12]
 8017b94:	9312      	str	r3, [sp, #72]	; 0x48
 8017b96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017b98:	bf08      	it	eq
 8017b9a:	4613      	moveq	r3, r2
 8017b9c:	e789      	b.n	8017ab2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8017b9e:	140f      	asrs	r7, r1, #16
 8017ba0:	d426      	bmi.n	8017bf0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8017ba2:	f8de 5008 	ldr.w	r5, [lr, #8]
 8017ba6:	42bd      	cmp	r5, r7
 8017ba8:	dd22      	ble.n	8017bf0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8017baa:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8017bae:	d41f      	bmi.n	8017bf0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8017bb0:	f8de 000c 	ldr.w	r0, [lr, #12]
 8017bb4:	4560      	cmp	r0, ip
 8017bb6:	dd1b      	ble.n	8017bf0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8017bb8:	9800      	ldr	r0, [sp, #0]
 8017bba:	b22d      	sxth	r5, r5
 8017bbc:	fb0c 0505 	mla	r5, ip, r5, r0
 8017bc0:	5de8      	ldrb	r0, [r5, r7]
 8017bc2:	9d01      	ldr	r5, [sp, #4]
 8017bc4:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8017bc8:	0e07      	lsrs	r7, r0, #24
 8017bca:	2fff      	cmp	r7, #255	; 0xff
 8017bcc:	d116      	bne.n	8017bfc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8017bce:	f06f 0501 	mvn.w	r5, #1
 8017bd2:	fb05 f706 	mul.w	r7, r5, r6
 8017bd6:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8017bda:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8017bde:	0945      	lsrs	r5, r0, #5
 8017be0:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8017be4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8017be8:	ea4c 0505 	orr.w	r5, ip, r5
 8017bec:	4305      	orrs	r5, r0
 8017bee:	53e5      	strh	r5, [r4, r7]
 8017bf0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017bf2:	3e01      	subs	r6, #1
 8017bf4:	4401      	add	r1, r0
 8017bf6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017bf8:	4402      	add	r2, r0
 8017bfa:	e78e      	b.n	8017b1a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8017bfc:	b2fd      	uxtb	r5, r7
 8017bfe:	2f00      	cmp	r7, #0
 8017c00:	d0f6      	beq.n	8017bf0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8017c02:	f06f 0701 	mvn.w	r7, #1
 8017c06:	fa1f f985 	uxth.w	r9, r5
 8017c0a:	43ed      	mvns	r5, r5
 8017c0c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8017c10:	4377      	muls	r7, r6
 8017c12:	fb1a fa09 	smulbb	sl, sl, r9
 8017c16:	b2ed      	uxtb	r5, r5
 8017c18:	f834 8007 	ldrh.w	r8, [r4, r7]
 8017c1c:	9702      	str	r7, [sp, #8]
 8017c1e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8017c22:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8017c26:	fb17 f709 	smulbb	r7, r7, r9
 8017c2a:	b2c0      	uxtb	r0, r0
 8017c2c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8017c30:	fb10 f009 	smulbb	r0, r0, r9
 8017c34:	fb0c 7c05 	mla	ip, ip, r5, r7
 8017c38:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8017c3c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8017c40:	fa1f fc8c 	uxth.w	ip, ip
 8017c44:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8017c48:	fa5f f888 	uxtb.w	r8, r8
 8017c4c:	fb07 a705 	mla	r7, r7, r5, sl
 8017c50:	fb08 0005 	mla	r0, r8, r5, r0
 8017c54:	f10c 0501 	add.w	r5, ip, #1
 8017c58:	b2bf      	uxth	r7, r7
 8017c5a:	b280      	uxth	r0, r0
 8017c5c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8017c60:	f100 0a01 	add.w	sl, r0, #1
 8017c64:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8017c68:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8017c6c:	9802      	ldr	r0, [sp, #8]
 8017c6e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8017c72:	ea4a 0c0c 	orr.w	ip, sl, ip
 8017c76:	f107 0a01 	add.w	sl, r7, #1
 8017c7a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8017c7e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017c82:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8017c86:	ea4c 0c0a 	orr.w	ip, ip, sl
 8017c8a:	f824 c000 	strh.w	ip, [r4, r0]
 8017c8e:	e7af      	b.n	8017bf0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8017c90:	f04f 0800 	mov.w	r8, #0
 8017c94:	eba3 0008 	sub.w	r0, r3, r8
 8017c98:	2800      	cmp	r0, #0
 8017c9a:	f77f af41 	ble.w	8017b20 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8017c9e:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8017ca2:	1410      	asrs	r0, r2, #16
 8017ca4:	9f00      	ldr	r7, [sp, #0]
 8017ca6:	140d      	asrs	r5, r1, #16
 8017ca8:	fb06 7000 	mla	r0, r6, r0, r7
 8017cac:	5d40      	ldrb	r0, [r0, r5]
 8017cae:	9d01      	ldr	r5, [sp, #4]
 8017cb0:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8017cb4:	0e2e      	lsrs	r6, r5, #24
 8017cb6:	2eff      	cmp	r6, #255	; 0xff
 8017cb8:	d112      	bne.n	8017ce0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 8017cba:	482c      	ldr	r0, [pc, #176]	; (8017d6c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 8017cbc:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8017cc0:	0968      	lsrs	r0, r5, #5
 8017cc2:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8017cc6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8017cca:	4330      	orrs	r0, r6
 8017ccc:	4328      	orrs	r0, r5
 8017cce:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 8017cd2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017cd4:	f108 0801 	add.w	r8, r8, #1
 8017cd8:	4401      	add	r1, r0
 8017cda:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017cdc:	4402      	add	r2, r0
 8017cde:	e7d9      	b.n	8017c94 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8017ce0:	b2f0      	uxtb	r0, r6
 8017ce2:	2e00      	cmp	r6, #0
 8017ce4:	d0f5      	beq.n	8017cd2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8017ce6:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 8017cea:	fa1f f980 	uxth.w	r9, r0
 8017cee:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8017cf2:	43c0      	mvns	r0, r0
 8017cf4:	ea4f 272c 	mov.w	r7, ip, asr #8
 8017cf8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8017cfc:	fb16 f609 	smulbb	r6, r6, r9
 8017d00:	b2c0      	uxtb	r0, r0
 8017d02:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8017d06:	b2ed      	uxtb	r5, r5
 8017d08:	fb1a fa09 	smulbb	sl, sl, r9
 8017d0c:	fb07 6700 	mla	r7, r7, r0, r6
 8017d10:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8017d14:	fb15 f509 	smulbb	r5, r5, r9
 8017d18:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8017d1c:	b2bf      	uxth	r7, r7
 8017d1e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8017d22:	fa5f fc8c 	uxtb.w	ip, ip
 8017d26:	fb06 a600 	mla	r6, r6, r0, sl
 8017d2a:	fb0c 5500 	mla	r5, ip, r0, r5
 8017d2e:	1c78      	adds	r0, r7, #1
 8017d30:	b2b6      	uxth	r6, r6
 8017d32:	b2ad      	uxth	r5, r5
 8017d34:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8017d38:	f105 0a01 	add.w	sl, r5, #1
 8017d3c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8017d40:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8017d44:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8017d48:	ea4a 0707 	orr.w	r7, sl, r7
 8017d4c:	f106 0a01 	add.w	sl, r6, #1
 8017d50:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8017d54:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017d58:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8017d5c:	ea47 070a 	orr.w	r7, r7, sl
 8017d60:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8017d64:	e7b5      	b.n	8017cd2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8017d66:	b005      	add	sp, #20
 8017d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d6c:	fffff800 	.word	0xfffff800

08017d70 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d74:	b087      	sub	sp, #28
 8017d76:	468b      	mov	fp, r1
 8017d78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017d7c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017d7e:	9204      	str	r2, [sp, #16]
 8017d80:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8017d84:	6861      	ldr	r1, [r4, #4]
 8017d86:	9205      	str	r2, [sp, #20]
 8017d88:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8017d8c:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8017d90:	fb01 2000 	mla	r0, r1, r0, r2
 8017d94:	6822      	ldr	r2, [r4, #0]
 8017d96:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8017d9a:	f8de 2000 	ldr.w	r2, [lr]
 8017d9e:	9201      	str	r2, [sp, #4]
 8017da0:	f8de 2004 	ldr.w	r2, [lr, #4]
 8017da4:	9202      	str	r2, [sp, #8]
 8017da6:	f1bb 0f00 	cmp.w	fp, #0
 8017daa:	dc03      	bgt.n	8017db4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8017dac:	9a04      	ldr	r2, [sp, #16]
 8017dae:	2a00      	cmp	r2, #0
 8017db0:	f340 8142 	ble.w	8018038 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8017db4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017db6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8017dba:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8017dbe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017dc0:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8017dc4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	dd0e      	ble.n	8017dea <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8017dcc:	140c      	asrs	r4, r1, #16
 8017dce:	d405      	bmi.n	8017ddc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8017dd0:	42bc      	cmp	r4, r7
 8017dd2:	da03      	bge.n	8017ddc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8017dd4:	1414      	asrs	r4, r2, #16
 8017dd6:	d401      	bmi.n	8017ddc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8017dd8:	42b4      	cmp	r4, r6
 8017dda:	db07      	blt.n	8017dec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8017ddc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017dde:	3b01      	subs	r3, #1
 8017de0:	3002      	adds	r0, #2
 8017de2:	4421      	add	r1, r4
 8017de4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017de6:	4422      	add	r2, r4
 8017de8:	e7ee      	b.n	8017dc8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8017dea:	d019      	beq.n	8017e20 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8017dec:	1e5c      	subs	r4, r3, #1
 8017dee:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8017df0:	fb05 1504 	mla	r5, r5, r4, r1
 8017df4:	142d      	asrs	r5, r5, #16
 8017df6:	d409      	bmi.n	8017e0c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8017df8:	42bd      	cmp	r5, r7
 8017dfa:	da07      	bge.n	8017e0c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8017dfc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8017dfe:	fb05 2404 	mla	r4, r5, r4, r2
 8017e02:	1424      	asrs	r4, r4, #16
 8017e04:	d402      	bmi.n	8017e0c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8017e06:	42b4      	cmp	r4, r6
 8017e08:	f2c0 80b1 	blt.w	8017f6e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8017e0c:	f04f 0800 	mov.w	r8, #0
 8017e10:	eb03 0408 	add.w	r4, r3, r8
 8017e14:	2c00      	cmp	r4, #0
 8017e16:	dc3e      	bgt.n	8017e96 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8017e18:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017e1c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8017e20:	f1bb 0f00 	cmp.w	fp, #0
 8017e24:	f340 8108 	ble.w	8018038 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8017e28:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017e2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017e2e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017e32:	f1bb 0b01 	subs.w	fp, fp, #1
 8017e36:	eeb0 6a62 	vmov.f32	s12, s5
 8017e3a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017e3e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017e42:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017e46:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8017e4a:	eeb0 6a43 	vmov.f32	s12, s6
 8017e4e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017e52:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8017e56:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017e5a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017e5e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017e62:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017e66:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017e6a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017e6e:	ee12 2a90 	vmov	r2, s5
 8017e72:	eef0 2a47 	vmov.f32	s5, s14
 8017e76:	fb92 f3f3 	sdiv	r3, r2, r3
 8017e7a:	ee13 2a10 	vmov	r2, s6
 8017e7e:	9313      	str	r3, [sp, #76]	; 0x4c
 8017e80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017e82:	eeb0 3a67 	vmov.f32	s6, s15
 8017e86:	fb92 f3f3 	sdiv	r3, r2, r3
 8017e8a:	9a04      	ldr	r2, [sp, #16]
 8017e8c:	9314      	str	r3, [sp, #80]	; 0x50
 8017e8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017e90:	bf08      	it	eq
 8017e92:	4613      	moveq	r3, r2
 8017e94:	e787      	b.n	8017da6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8017e96:	140e      	asrs	r6, r1, #16
 8017e98:	d462      	bmi.n	8017f60 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8017e9a:	f8de 5008 	ldr.w	r5, [lr, #8]
 8017e9e:	42b5      	cmp	r5, r6
 8017ea0:	dd5e      	ble.n	8017f60 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8017ea2:	1417      	asrs	r7, r2, #16
 8017ea4:	d45c      	bmi.n	8017f60 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8017ea6:	f8de 400c 	ldr.w	r4, [lr, #12]
 8017eaa:	42bc      	cmp	r4, r7
 8017eac:	dd58      	ble.n	8017f60 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8017eae:	b22d      	sxth	r5, r5
 8017eb0:	9c02      	ldr	r4, [sp, #8]
 8017eb2:	fb07 6505 	mla	r5, r7, r5, r6
 8017eb6:	5d66      	ldrb	r6, [r4, r5]
 8017eb8:	2e00      	cmp	r6, #0
 8017eba:	d051      	beq.n	8017f60 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8017ebc:	9c01      	ldr	r4, [sp, #4]
 8017ebe:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 8017ec2:	f06f 0401 	mvn.w	r4, #1
 8017ec6:	fb04 f408 	mul.w	r4, r4, r8
 8017eca:	ea4f 2c29 	mov.w	ip, r9, asr #8
 8017ece:	5b05      	ldrh	r5, [r0, r4]
 8017ed0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8017ed4:	9403      	str	r4, [sp, #12]
 8017ed6:	9c05      	ldr	r4, [sp, #20]
 8017ed8:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8017edc:	4366      	muls	r6, r4
 8017ede:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8017ee2:	1c74      	adds	r4, r6, #1
 8017ee4:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8017ee8:	122e      	asrs	r6, r5, #8
 8017eea:	1224      	asrs	r4, r4, #8
 8017eec:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8017ef0:	00ed      	lsls	r5, r5, #3
 8017ef2:	b2a7      	uxth	r7, r4
 8017ef4:	43e4      	mvns	r4, r4
 8017ef6:	b2ed      	uxtb	r5, r5
 8017ef8:	b2e4      	uxtb	r4, r4
 8017efa:	fb16 f604 	smulbb	r6, r6, r4
 8017efe:	fb15 f504 	smulbb	r5, r5, r4
 8017f02:	fb0c 6c07 	mla	ip, ip, r7, r6
 8017f06:	ea4f 06e9 	mov.w	r6, r9, asr #3
 8017f0a:	fb1a fa04 	smulbb	sl, sl, r4
 8017f0e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8017f12:	fa1f fc8c 	uxth.w	ip, ip
 8017f16:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8017f1a:	fa5f f989 	uxtb.w	r9, r9
 8017f1e:	fb06 a607 	mla	r6, r6, r7, sl
 8017f22:	f10c 0401 	add.w	r4, ip, #1
 8017f26:	fb09 5507 	mla	r5, r9, r7, r5
 8017f2a:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8017f2e:	9c03      	ldr	r4, [sp, #12]
 8017f30:	b2ad      	uxth	r5, r5
 8017f32:	b2b6      	uxth	r6, r6
 8017f34:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8017f38:	f105 0a01 	add.w	sl, r5, #1
 8017f3c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8017f40:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8017f44:	ea4a 0c0c 	orr.w	ip, sl, ip
 8017f48:	f106 0a01 	add.w	sl, r6, #1
 8017f4c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8017f50:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017f54:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8017f58:	ea4c 0c0a 	orr.w	ip, ip, sl
 8017f5c:	f820 c004 	strh.w	ip, [r0, r4]
 8017f60:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017f62:	f108 38ff 	add.w	r8, r8, #4294967295
 8017f66:	4421      	add	r1, r4
 8017f68:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017f6a:	4422      	add	r2, r4
 8017f6c:	e750      	b.n	8017e10 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8017f6e:	f04f 0900 	mov.w	r9, #0
 8017f72:	eba3 0409 	sub.w	r4, r3, r9
 8017f76:	2c00      	cmp	r4, #0
 8017f78:	f77f af4e 	ble.w	8017e18 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8017f7c:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8017f80:	140d      	asrs	r5, r1, #16
 8017f82:	1414      	asrs	r4, r2, #16
 8017f84:	fb06 5404 	mla	r4, r6, r4, r5
 8017f88:	9d02      	ldr	r5, [sp, #8]
 8017f8a:	5d2e      	ldrb	r6, [r5, r4]
 8017f8c:	2e00      	cmp	r6, #0
 8017f8e:	d04c      	beq.n	801802a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8017f90:	9d01      	ldr	r5, [sp, #4]
 8017f92:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 8017f96:	9c05      	ldr	r4, [sp, #20]
 8017f98:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8017f9c:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8017fa0:	4366      	muls	r6, r4
 8017fa2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8017fa6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8017faa:	1c74      	adds	r4, r6, #1
 8017fac:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8017fb0:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8017fb4:	122e      	asrs	r6, r5, #8
 8017fb6:	1224      	asrs	r4, r4, #8
 8017fb8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8017fbc:	00ed      	lsls	r5, r5, #3
 8017fbe:	b2a7      	uxth	r7, r4
 8017fc0:	43e4      	mvns	r4, r4
 8017fc2:	b2ed      	uxtb	r5, r5
 8017fc4:	b2e4      	uxtb	r4, r4
 8017fc6:	fb16 f604 	smulbb	r6, r6, r4
 8017fca:	fb15 f504 	smulbb	r5, r5, r4
 8017fce:	fb0c 6c07 	mla	ip, ip, r7, r6
 8017fd2:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8017fd6:	fb1a fa04 	smulbb	sl, sl, r4
 8017fda:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8017fde:	fa1f fc8c 	uxth.w	ip, ip
 8017fe2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8017fe6:	fa5f f888 	uxtb.w	r8, r8
 8017fea:	fb06 a607 	mla	r6, r6, r7, sl
 8017fee:	f10c 0401 	add.w	r4, ip, #1
 8017ff2:	fb08 5507 	mla	r5, r8, r7, r5
 8017ff6:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8017ffa:	b2ad      	uxth	r5, r5
 8017ffc:	b2b6      	uxth	r6, r6
 8017ffe:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018002:	f105 0a01 	add.w	sl, r5, #1
 8018006:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801800a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801800e:	ea4a 0c0c 	orr.w	ip, sl, ip
 8018012:	f106 0a01 	add.w	sl, r6, #1
 8018016:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801801a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801801e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018022:	ea4c 0c0a 	orr.w	ip, ip, sl
 8018026:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801802a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801802c:	f109 0901 	add.w	r9, r9, #1
 8018030:	4421      	add	r1, r4
 8018032:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018034:	4422      	add	r2, r4
 8018036:	e79c      	b.n	8017f72 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8018038:	b007      	add	sp, #28
 801803a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801803e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801803e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018042:	b085      	sub	sp, #20
 8018044:	468b      	mov	fp, r1
 8018046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801804a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801804c:	9203      	str	r2, [sp, #12]
 801804e:	6861      	ldr	r1, [r4, #4]
 8018050:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8018054:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 8018058:	fb01 2000 	mla	r0, r1, r0, r2
 801805c:	6822      	ldr	r2, [r4, #0]
 801805e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8018062:	f8d8 2000 	ldr.w	r2, [r8]
 8018066:	9200      	str	r2, [sp, #0]
 8018068:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801806c:	9201      	str	r2, [sp, #4]
 801806e:	f1bb 0f00 	cmp.w	fp, #0
 8018072:	dc03      	bgt.n	801807c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8018074:	9a03      	ldr	r2, [sp, #12]
 8018076:	2a00      	cmp	r2, #0
 8018078:	f340 8146 	ble.w	8018308 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801807c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801807e:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8018082:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018086:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018088:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801808c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018090:	2b00      	cmp	r3, #0
 8018092:	dd0e      	ble.n	80180b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8018094:	140c      	asrs	r4, r1, #16
 8018096:	d405      	bmi.n	80180a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018098:	42bc      	cmp	r4, r7
 801809a:	da03      	bge.n	80180a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801809c:	1414      	asrs	r4, r2, #16
 801809e:	d401      	bmi.n	80180a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80180a0:	42b4      	cmp	r4, r6
 80180a2:	db07      	blt.n	80180b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80180a4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80180a6:	3b01      	subs	r3, #1
 80180a8:	3002      	adds	r0, #2
 80180aa:	4421      	add	r1, r4
 80180ac:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80180ae:	4422      	add	r2, r4
 80180b0:	e7ee      	b.n	8018090 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80180b2:	d017      	beq.n	80180e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80180b4:	1e5c      	subs	r4, r3, #1
 80180b6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80180b8:	fb05 1504 	mla	r5, r5, r4, r1
 80180bc:	142d      	asrs	r5, r5, #16
 80180be:	d409      	bmi.n	80180d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80180c0:	42bd      	cmp	r5, r7
 80180c2:	da07      	bge.n	80180d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80180c4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80180c6:	fb05 2404 	mla	r4, r5, r4, r2
 80180ca:	1424      	asrs	r4, r4, #16
 80180cc:	d402      	bmi.n	80180d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80180ce:	42b4      	cmp	r4, r6
 80180d0:	f2c0 80b3 	blt.w	801823a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 80180d4:	2600      	movs	r6, #0
 80180d6:	199c      	adds	r4, r3, r6
 80180d8:	2c00      	cmp	r4, #0
 80180da:	dc3e      	bgt.n	801815a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80180dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80180e0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80180e4:	f1bb 0f00 	cmp.w	fp, #0
 80180e8:	f340 810e 	ble.w	8018308 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80180ec:	ee30 0a04 	vadd.f32	s0, s0, s8
 80180f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80180f2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80180f6:	f1bb 0b01 	subs.w	fp, fp, #1
 80180fa:	eeb0 6a62 	vmov.f32	s12, s5
 80180fe:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018102:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018106:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801810a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801810e:	eeb0 6a43 	vmov.f32	s12, s6
 8018112:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018116:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801811a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801811e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018122:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018126:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801812a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801812e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018132:	ee12 2a90 	vmov	r2, s5
 8018136:	eef0 2a47 	vmov.f32	s5, s14
 801813a:	fb92 f3f3 	sdiv	r3, r2, r3
 801813e:	ee13 2a10 	vmov	r2, s6
 8018142:	9311      	str	r3, [sp, #68]	; 0x44
 8018144:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018146:	eeb0 3a67 	vmov.f32	s6, s15
 801814a:	fb92 f3f3 	sdiv	r3, r2, r3
 801814e:	9a03      	ldr	r2, [sp, #12]
 8018150:	9312      	str	r3, [sp, #72]	; 0x48
 8018152:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018154:	bf08      	it	eq
 8018156:	4613      	moveq	r3, r2
 8018158:	e789      	b.n	801806e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801815a:	140f      	asrs	r7, r1, #16
 801815c:	d418      	bmi.n	8018190 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801815e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8018162:	42bd      	cmp	r5, r7
 8018164:	dd14      	ble.n	8018190 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018166:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801816a:	d411      	bmi.n	8018190 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801816c:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8018170:	4564      	cmp	r4, ip
 8018172:	dd0d      	ble.n	8018190 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018174:	b22d      	sxth	r5, r5
 8018176:	9c01      	ldr	r4, [sp, #4]
 8018178:	fb0c 7505 	mla	r5, ip, r5, r7
 801817c:	5d64      	ldrb	r4, [r4, r5]
 801817e:	2cff      	cmp	r4, #255	; 0xff
 8018180:	d10c      	bne.n	801819c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8018182:	9c00      	ldr	r4, [sp, #0]
 8018184:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 8018188:	f06f 0401 	mvn.w	r4, #1
 801818c:	4374      	muls	r4, r6
 801818e:	5305      	strh	r5, [r0, r4]
 8018190:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018192:	3e01      	subs	r6, #1
 8018194:	4421      	add	r1, r4
 8018196:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018198:	4422      	add	r2, r4
 801819a:	e79c      	b.n	80180d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801819c:	2c00      	cmp	r4, #0
 801819e:	d0f7      	beq.n	8018190 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80181a0:	9f00      	ldr	r7, [sp, #0]
 80181a2:	fa1f fc84 	uxth.w	ip, r4
 80181a6:	43e4      	mvns	r4, r4
 80181a8:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 80181ac:	f06f 0501 	mvn.w	r5, #1
 80181b0:	b2e4      	uxtb	r4, r4
 80181b2:	4375      	muls	r5, r6
 80181b4:	ea4f 2e29 	mov.w	lr, r9, asr #8
 80181b8:	9502      	str	r5, [sp, #8]
 80181ba:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80181be:	5b45      	ldrh	r5, [r0, r5]
 80181c0:	122f      	asrs	r7, r5, #8
 80181c2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80181c6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80181ca:	00ed      	lsls	r5, r5, #3
 80181cc:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80181d0:	fb17 f704 	smulbb	r7, r7, r4
 80181d4:	b2ed      	uxtb	r5, r5
 80181d6:	fb1a fa04 	smulbb	sl, sl, r4
 80181da:	fb0e 7e0c 	mla	lr, lr, ip, r7
 80181de:	ea4f 07e9 	mov.w	r7, r9, asr #3
 80181e2:	fb15 f504 	smulbb	r5, r5, r4
 80181e6:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80181ea:	fa1f fe8e 	uxth.w	lr, lr
 80181ee:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80181f2:	fa5f f989 	uxtb.w	r9, r9
 80181f6:	fb07 a70c 	mla	r7, r7, ip, sl
 80181fa:	f10e 0401 	add.w	r4, lr, #1
 80181fe:	fb09 550c 	mla	r5, r9, ip, r5
 8018202:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 8018206:	9c02      	ldr	r4, [sp, #8]
 8018208:	b2ad      	uxth	r5, r5
 801820a:	b2bf      	uxth	r7, r7
 801820c:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8018210:	f105 0a01 	add.w	sl, r5, #1
 8018214:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018218:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801821c:	ea4a 0e0e 	orr.w	lr, sl, lr
 8018220:	f107 0a01 	add.w	sl, r7, #1
 8018224:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8018228:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801822c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018230:	ea4e 0e0a 	orr.w	lr, lr, sl
 8018234:	f820 e004 	strh.w	lr, [r0, r4]
 8018238:	e7aa      	b.n	8018190 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801823a:	f04f 0900 	mov.w	r9, #0
 801823e:	eba3 0409 	sub.w	r4, r3, r9
 8018242:	2c00      	cmp	r4, #0
 8018244:	f77f af4a 	ble.w	80180dc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018248:	1414      	asrs	r4, r2, #16
 801824a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801824e:	140d      	asrs	r5, r1, #16
 8018250:	fb06 5504 	mla	r5, r6, r4, r5
 8018254:	9c01      	ldr	r4, [sp, #4]
 8018256:	5d64      	ldrb	r4, [r4, r5]
 8018258:	2cff      	cmp	r4, #255	; 0xff
 801825a:	d10b      	bne.n	8018274 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801825c:	9c00      	ldr	r4, [sp, #0]
 801825e:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 8018262:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 8018266:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018268:	f109 0901 	add.w	r9, r9, #1
 801826c:	4421      	add	r1, r4
 801826e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018270:	4422      	add	r2, r4
 8018272:	e7e4      	b.n	801823e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8018274:	2c00      	cmp	r4, #0
 8018276:	d0f6      	beq.n	8018266 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8018278:	9e00      	ldr	r6, [sp, #0]
 801827a:	b2a7      	uxth	r7, r4
 801827c:	43e4      	mvns	r4, r4
 801827e:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 8018282:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8018286:	b2e4      	uxtb	r4, r4
 8018288:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801828c:	122e      	asrs	r6, r5, #8
 801828e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8018292:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018296:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801829a:	00ed      	lsls	r5, r5, #3
 801829c:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80182a0:	fb16 f604 	smulbb	r6, r6, r4
 80182a4:	b2ed      	uxtb	r5, r5
 80182a6:	fb1a fa04 	smulbb	sl, sl, r4
 80182aa:	fb0c 6c07 	mla	ip, ip, r7, r6
 80182ae:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80182b2:	fb15 f504 	smulbb	r5, r5, r4
 80182b6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80182ba:	fa1f fc8c 	uxth.w	ip, ip
 80182be:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80182c2:	fa5f fe8e 	uxtb.w	lr, lr
 80182c6:	fb06 a607 	mla	r6, r6, r7, sl
 80182ca:	f10c 0401 	add.w	r4, ip, #1
 80182ce:	fb0e 5507 	mla	r5, lr, r7, r5
 80182d2:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80182d6:	b2ad      	uxth	r5, r5
 80182d8:	b2b6      	uxth	r6, r6
 80182da:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80182de:	f105 0a01 	add.w	sl, r5, #1
 80182e2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80182e6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80182ea:	ea4a 0c0c 	orr.w	ip, sl, ip
 80182ee:	f106 0a01 	add.w	sl, r6, #1
 80182f2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80182f6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80182fa:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80182fe:	ea4c 0c0a 	orr.w	ip, ip, sl
 8018302:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8018306:	e7ae      	b.n	8018266 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8018308:	b005      	add	sp, #20
 801830a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801830e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801830e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018312:	b085      	sub	sp, #20
 8018314:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018316:	9203      	str	r2, [sp, #12]
 8018318:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801831c:	9100      	str	r1, [sp, #0]
 801831e:	9201      	str	r2, [sp, #4]
 8018320:	6841      	ldr	r1, [r0, #4]
 8018322:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8018326:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801832a:	fb01 2404 	mla	r4, r1, r4, r2
 801832e:	6802      	ldr	r2, [r0, #0]
 8018330:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018334:	f8de 2000 	ldr.w	r2, [lr]
 8018338:	9202      	str	r2, [sp, #8]
 801833a:	9a01      	ldr	r2, [sp, #4]
 801833c:	43d6      	mvns	r6, r2
 801833e:	b2f6      	uxtb	r6, r6
 8018340:	9a00      	ldr	r2, [sp, #0]
 8018342:	2a00      	cmp	r2, #0
 8018344:	dc03      	bgt.n	801834e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8018346:	9a03      	ldr	r2, [sp, #12]
 8018348:	2a00      	cmp	r2, #0
 801834a:	f340 8124 	ble.w	8018596 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801834e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018350:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8018354:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018358:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801835a:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801835e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018362:	2b00      	cmp	r3, #0
 8018364:	dd0e      	ble.n	8018384 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018366:	1408      	asrs	r0, r1, #16
 8018368:	d405      	bmi.n	8018376 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801836a:	4560      	cmp	r0, ip
 801836c:	da03      	bge.n	8018376 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801836e:	1410      	asrs	r0, r2, #16
 8018370:	d401      	bmi.n	8018376 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018372:	42b8      	cmp	r0, r7
 8018374:	db07      	blt.n	8018386 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8018376:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018378:	3b01      	subs	r3, #1
 801837a:	3402      	adds	r4, #2
 801837c:	4401      	add	r1, r0
 801837e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018380:	4402      	add	r2, r0
 8018382:	e7ee      	b.n	8018362 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8018384:	d06e      	beq.n	8018464 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8018386:	1e58      	subs	r0, r3, #1
 8018388:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801838a:	fb05 1500 	mla	r5, r5, r0, r1
 801838e:	142d      	asrs	r5, r5, #16
 8018390:	d45c      	bmi.n	801844c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8018392:	4565      	cmp	r5, ip
 8018394:	da5a      	bge.n	801844c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8018396:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8018398:	fb05 2000 	mla	r0, r5, r0, r2
 801839c:	1400      	asrs	r0, r0, #16
 801839e:	d455      	bmi.n	801844c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80183a0:	42b8      	cmp	r0, r7
 80183a2:	da53      	bge.n	801844c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80183a4:	4699      	mov	r9, r3
 80183a6:	46a2      	mov	sl, r4
 80183a8:	f8bd b004 	ldrh.w	fp, [sp, #4]
 80183ac:	f1b9 0f00 	cmp.w	r9, #0
 80183b0:	dd54      	ble.n	801845c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80183b2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80183b6:	140d      	asrs	r5, r1, #16
 80183b8:	1410      	asrs	r0, r2, #16
 80183ba:	f109 39ff 	add.w	r9, r9, #4294967295
 80183be:	fb07 5000 	mla	r0, r7, r0, r5
 80183c2:	9d02      	ldr	r5, [sp, #8]
 80183c4:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80183c8:	f8ba 5000 	ldrh.w	r5, [sl]
 80183cc:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80183d0:	122f      	asrs	r7, r5, #8
 80183d2:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80183d6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80183da:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80183de:	00ed      	lsls	r5, r5, #3
 80183e0:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 80183e4:	fb17 f706 	smulbb	r7, r7, r6
 80183e8:	b2ed      	uxtb	r5, r5
 80183ea:	fb18 f806 	smulbb	r8, r8, r6
 80183ee:	fb0c 7c0b 	mla	ip, ip, fp, r7
 80183f2:	10c7      	asrs	r7, r0, #3
 80183f4:	fb15 f506 	smulbb	r5, r5, r6
 80183f8:	00c0      	lsls	r0, r0, #3
 80183fa:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80183fe:	fa1f fc8c 	uxth.w	ip, ip
 8018402:	b2c0      	uxtb	r0, r0
 8018404:	fb07 870b 	mla	r7, r7, fp, r8
 8018408:	fb00 500b 	mla	r0, r0, fp, r5
 801840c:	f10c 0501 	add.w	r5, ip, #1
 8018410:	b2bf      	uxth	r7, r7
 8018412:	b280      	uxth	r0, r0
 8018414:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8018418:	f107 0801 	add.w	r8, r7, #1
 801841c:	1c45      	adds	r5, r0, #1
 801841e:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8018422:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018426:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801842a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801842c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8018430:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8018434:	4401      	add	r1, r0
 8018436:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801843a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801843c:	ea45 0c0c 	orr.w	ip, r5, ip
 8018440:	4402      	add	r2, r0
 8018442:	ea4c 0c08 	orr.w	ip, ip, r8
 8018446:	f82a cb02 	strh.w	ip, [sl], #2
 801844a:	e7af      	b.n	80183ac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801844c:	f04f 0800 	mov.w	r8, #0
 8018450:	f8bd a004 	ldrh.w	sl, [sp, #4]
 8018454:	eb03 0008 	add.w	r0, r3, r8
 8018458:	2800      	cmp	r0, #0
 801845a:	dc41      	bgt.n	80184e0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801845c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018460:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018464:	9b00      	ldr	r3, [sp, #0]
 8018466:	2b00      	cmp	r3, #0
 8018468:	f340 8095 	ble.w	8018596 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801846c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018470:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018472:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018476:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801847a:	eef0 6a62 	vmov.f32	s13, s5
 801847e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018482:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018486:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801848a:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801848e:	eef0 6a43 	vmov.f32	s13, s6
 8018492:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018496:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801849a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801849e:	ee61 7a27 	vmul.f32	s15, s2, s15
 80184a2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80184a6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80184aa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80184ae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80184b2:	ee12 2a90 	vmov	r2, s5
 80184b6:	eef0 2a47 	vmov.f32	s5, s14
 80184ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80184be:	ee13 2a10 	vmov	r2, s6
 80184c2:	9311      	str	r3, [sp, #68]	; 0x44
 80184c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80184c6:	eeb0 3a67 	vmov.f32	s6, s15
 80184ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80184ce:	9312      	str	r3, [sp, #72]	; 0x48
 80184d0:	9b00      	ldr	r3, [sp, #0]
 80184d2:	9a03      	ldr	r2, [sp, #12]
 80184d4:	3b01      	subs	r3, #1
 80184d6:	9300      	str	r3, [sp, #0]
 80184d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80184da:	bf08      	it	eq
 80184dc:	4613      	moveq	r3, r2
 80184de:	e72f      	b.n	8018340 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 80184e0:	140f      	asrs	r7, r1, #16
 80184e2:	d451      	bmi.n	8018588 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80184e4:	f8de 5008 	ldr.w	r5, [lr, #8]
 80184e8:	42bd      	cmp	r5, r7
 80184ea:	dd4d      	ble.n	8018588 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80184ec:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80184f0:	d44a      	bmi.n	8018588 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80184f2:	f8de 000c 	ldr.w	r0, [lr, #12]
 80184f6:	4560      	cmp	r0, ip
 80184f8:	dd46      	ble.n	8018588 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80184fa:	b22d      	sxth	r5, r5
 80184fc:	9802      	ldr	r0, [sp, #8]
 80184fe:	fb0c 7505 	mla	r5, ip, r5, r7
 8018502:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 8018506:	f06f 0501 	mvn.w	r5, #1
 801850a:	fb05 fb08 	mul.w	fp, r5, r8
 801850e:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8018512:	f834 500b 	ldrh.w	r5, [r4, fp]
 8018516:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801851a:	122f      	asrs	r7, r5, #8
 801851c:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8018520:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018524:	00ed      	lsls	r5, r5, #3
 8018526:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801852a:	fb17 f706 	smulbb	r7, r7, r6
 801852e:	b2ed      	uxtb	r5, r5
 8018530:	fb19 f906 	smulbb	r9, r9, r6
 8018534:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8018538:	10c7      	asrs	r7, r0, #3
 801853a:	fb15 f506 	smulbb	r5, r5, r6
 801853e:	00c0      	lsls	r0, r0, #3
 8018540:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8018544:	fa1f fc8c 	uxth.w	ip, ip
 8018548:	b2c0      	uxtb	r0, r0
 801854a:	fb07 970a 	mla	r7, r7, sl, r9
 801854e:	fb00 500a 	mla	r0, r0, sl, r5
 8018552:	f10c 0501 	add.w	r5, ip, #1
 8018556:	b2bf      	uxth	r7, r7
 8018558:	b280      	uxth	r0, r0
 801855a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801855e:	f107 0901 	add.w	r9, r7, #1
 8018562:	1c45      	adds	r5, r0, #1
 8018564:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8018568:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801856c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8018570:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8018574:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8018578:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801857c:	ea45 0c0c 	orr.w	ip, r5, ip
 8018580:	ea4c 0c09 	orr.w	ip, ip, r9
 8018584:	f824 c00b 	strh.w	ip, [r4, fp]
 8018588:	9811      	ldr	r0, [sp, #68]	; 0x44
 801858a:	f108 38ff 	add.w	r8, r8, #4294967295
 801858e:	4401      	add	r1, r0
 8018590:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018592:	4402      	add	r2, r0
 8018594:	e75e      	b.n	8018454 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8018596:	b005      	add	sp, #20
 8018598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801859c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801859c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185a0:	b085      	sub	sp, #20
 80185a2:	4693      	mov	fp, r2
 80185a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80185a8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80185aa:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80185ac:	6870      	ldr	r0, [r6, #4]
 80185ae:	9101      	str	r1, [sp, #4]
 80185b0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80185b4:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 80185b8:	fb00 2404 	mla	r4, r0, r4, r2
 80185bc:	6832      	ldr	r2, [r6, #0]
 80185be:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80185c2:	682a      	ldr	r2, [r5, #0]
 80185c4:	9202      	str	r2, [sp, #8]
 80185c6:	9a01      	ldr	r2, [sp, #4]
 80185c8:	2a00      	cmp	r2, #0
 80185ca:	dc03      	bgt.n	80185d4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80185cc:	f1bb 0f00 	cmp.w	fp, #0
 80185d0:	f340 809a 	ble.w	8018708 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80185d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80185d6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80185da:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80185de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80185e0:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 80185e4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	dd0c      	ble.n	8018606 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80185ec:	1406      	asrs	r6, r0, #16
 80185ee:	d405      	bmi.n	80185fc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80185f0:	454e      	cmp	r6, r9
 80185f2:	da03      	bge.n	80185fc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80185f4:	1416      	asrs	r6, r2, #16
 80185f6:	d401      	bmi.n	80185fc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80185f8:	4546      	cmp	r6, r8
 80185fa:	db05      	blt.n	8018608 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80185fc:	4470      	add	r0, lr
 80185fe:	4462      	add	r2, ip
 8018600:	3b01      	subs	r3, #1
 8018602:	3402      	adds	r4, #2
 8018604:	e7f0      	b.n	80185e8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8018606:	d00f      	beq.n	8018628 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8018608:	1e5e      	subs	r6, r3, #1
 801860a:	fb0e 0706 	mla	r7, lr, r6, r0
 801860e:	143f      	asrs	r7, r7, #16
 8018610:	d541      	bpl.n	8018696 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 8018612:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8018616:	4698      	mov	r8, r3
 8018618:	9603      	str	r6, [sp, #12]
 801861a:	f1b8 0f00 	cmp.w	r8, #0
 801861e:	dc56      	bgt.n	80186ce <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8018620:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018624:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018628:	9b01      	ldr	r3, [sp, #4]
 801862a:	2b00      	cmp	r3, #0
 801862c:	dd6c      	ble.n	8018708 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801862e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018632:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018634:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018638:	eeb0 6a62 	vmov.f32	s12, s5
 801863c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018640:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018644:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018648:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801864c:	eeb0 6a43 	vmov.f32	s12, s6
 8018650:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018654:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8018658:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801865c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018660:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018664:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018668:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801866c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018670:	ee12 2a90 	vmov	r2, s5
 8018674:	eef0 2a47 	vmov.f32	s5, s14
 8018678:	fb92 fef3 	sdiv	lr, r2, r3
 801867c:	ee13 2a10 	vmov	r2, s6
 8018680:	eeb0 3a67 	vmov.f32	s6, s15
 8018684:	fb92 fcf3 	sdiv	ip, r2, r3
 8018688:	9b01      	ldr	r3, [sp, #4]
 801868a:	3b01      	subs	r3, #1
 801868c:	9301      	str	r3, [sp, #4]
 801868e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018690:	bf08      	it	eq
 8018692:	465b      	moveq	r3, fp
 8018694:	e797      	b.n	80185c6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8018696:	454f      	cmp	r7, r9
 8018698:	dabb      	bge.n	8018612 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801869a:	fb0c 2606 	mla	r6, ip, r6, r2
 801869e:	1436      	asrs	r6, r6, #16
 80186a0:	d4b7      	bmi.n	8018612 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80186a2:	4546      	cmp	r6, r8
 80186a4:	dab5      	bge.n	8018612 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80186a6:	461e      	mov	r6, r3
 80186a8:	46a0      	mov	r8, r4
 80186aa:	2e00      	cmp	r6, #0
 80186ac:	ddb8      	ble.n	8018620 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80186ae:	1417      	asrs	r7, r2, #16
 80186b0:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 80186b4:	ea4f 4920 	mov.w	r9, r0, asr #16
 80186b8:	9902      	ldr	r1, [sp, #8]
 80186ba:	4470      	add	r0, lr
 80186bc:	4462      	add	r2, ip
 80186be:	fb0a 9707 	mla	r7, sl, r7, r9
 80186c2:	3e01      	subs	r6, #1
 80186c4:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 80186c8:	f828 7b02 	strh.w	r7, [r8], #2
 80186cc:	e7ed      	b.n	80186aa <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 80186ce:	ea5f 4920 	movs.w	r9, r0, asr #16
 80186d2:	d414      	bmi.n	80186fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80186d4:	68ae      	ldr	r6, [r5, #8]
 80186d6:	454e      	cmp	r6, r9
 80186d8:	dd11      	ble.n	80186fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80186da:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80186de:	d40e      	bmi.n	80186fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80186e0:	68ef      	ldr	r7, [r5, #12]
 80186e2:	4557      	cmp	r7, sl
 80186e4:	dd0b      	ble.n	80186fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80186e6:	b236      	sxth	r6, r6
 80186e8:	f06f 0101 	mvn.w	r1, #1
 80186ec:	9f02      	ldr	r7, [sp, #8]
 80186ee:	fb0a 9606 	mla	r6, sl, r6, r9
 80186f2:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 80186f6:	fb01 f608 	mul.w	r6, r1, r8
 80186fa:	9903      	ldr	r1, [sp, #12]
 80186fc:	538f      	strh	r7, [r1, r6]
 80186fe:	4470      	add	r0, lr
 8018700:	4462      	add	r2, ip
 8018702:	f108 38ff 	add.w	r8, r8, #4294967295
 8018706:	e788      	b.n	801861a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018708:	b005      	add	sp, #20
 801870a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801870e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801870e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018712:	b087      	sub	sp, #28
 8018714:	468b      	mov	fp, r1
 8018716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801871a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801871c:	9203      	str	r2, [sp, #12]
 801871e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8018722:	6841      	ldr	r1, [r0, #4]
 8018724:	9204      	str	r2, [sp, #16]
 8018726:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801872a:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801872e:	fb01 2505 	mla	r5, r1, r5, r2
 8018732:	6802      	ldr	r2, [r0, #0]
 8018734:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8018738:	f8d9 2000 	ldr.w	r2, [r9]
 801873c:	9201      	str	r2, [sp, #4]
 801873e:	f1bb 0f00 	cmp.w	fp, #0
 8018742:	dc03      	bgt.n	801874c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8018744:	9a03      	ldr	r2, [sp, #12]
 8018746:	2a00      	cmp	r2, #0
 8018748:	f340 8158 	ble.w	80189fc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801874c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801874e:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8018752:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018756:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018758:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801875c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018760:	2b00      	cmp	r3, #0
 8018762:	dd0e      	ble.n	8018782 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8018764:	1402      	asrs	r2, r0, #16
 8018766:	d405      	bmi.n	8018774 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018768:	42ba      	cmp	r2, r7
 801876a:	da03      	bge.n	8018774 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801876c:	140a      	asrs	r2, r1, #16
 801876e:	d401      	bmi.n	8018774 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018770:	42b2      	cmp	r2, r6
 8018772:	db07      	blt.n	8018784 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018774:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018776:	3b01      	subs	r3, #1
 8018778:	3502      	adds	r5, #2
 801877a:	4410      	add	r0, r2
 801877c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801877e:	4411      	add	r1, r2
 8018780:	e7ee      	b.n	8018760 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8018782:	d017      	beq.n	80187b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8018784:	1e5a      	subs	r2, r3, #1
 8018786:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018788:	fb04 0402 	mla	r4, r4, r2, r0
 801878c:	1424      	asrs	r4, r4, #16
 801878e:	d409      	bmi.n	80187a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018790:	42bc      	cmp	r4, r7
 8018792:	da07      	bge.n	80187a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018794:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018796:	fb04 1202 	mla	r2, r4, r2, r1
 801879a:	1412      	asrs	r2, r2, #16
 801879c:	d402      	bmi.n	80187a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801879e:	42b2      	cmp	r2, r6
 80187a0:	f2c0 80bf 	blt.w	8018922 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80187a4:	2700      	movs	r7, #0
 80187a6:	19da      	adds	r2, r3, r7
 80187a8:	2a00      	cmp	r2, #0
 80187aa:	dc3e      	bgt.n	801882a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80187ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80187b0:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 80187b4:	f1bb 0f00 	cmp.w	fp, #0
 80187b8:	f340 8120 	ble.w	80189fc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 80187bc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80187c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80187c2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80187c6:	f1bb 0b01 	subs.w	fp, fp, #1
 80187ca:	eeb0 6a62 	vmov.f32	s12, s5
 80187ce:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80187d2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80187d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80187da:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80187de:	eeb0 6a43 	vmov.f32	s12, s6
 80187e2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80187e6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80187ea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80187ee:	ee61 7a27 	vmul.f32	s15, s2, s15
 80187f2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80187f6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80187fa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80187fe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018802:	ee12 2a90 	vmov	r2, s5
 8018806:	eef0 2a47 	vmov.f32	s5, s14
 801880a:	fb92 f3f3 	sdiv	r3, r2, r3
 801880e:	ee13 2a10 	vmov	r2, s6
 8018812:	9313      	str	r3, [sp, #76]	; 0x4c
 8018814:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018816:	eeb0 3a67 	vmov.f32	s6, s15
 801881a:	fb92 f3f3 	sdiv	r3, r2, r3
 801881e:	9a03      	ldr	r2, [sp, #12]
 8018820:	9314      	str	r3, [sp, #80]	; 0x50
 8018822:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018824:	bf08      	it	eq
 8018826:	4613      	moveq	r3, r2
 8018828:	e789      	b.n	801873e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801882a:	1406      	asrs	r6, r0, #16
 801882c:	d42d      	bmi.n	801888a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801882e:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8018832:	42b4      	cmp	r4, r6
 8018834:	dd29      	ble.n	801888a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8018836:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801883a:	d426      	bmi.n	801888a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801883c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8018840:	4562      	cmp	r2, ip
 8018842:	dd22      	ble.n	801888a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8018844:	b224      	sxth	r4, r4
 8018846:	9a01      	ldr	r2, [sp, #4]
 8018848:	fb0c 6404 	mla	r4, ip, r4, r6
 801884c:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8018850:	0e22      	lsrs	r2, r4, #24
 8018852:	d01a      	beq.n	801888a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8018854:	9e04      	ldr	r6, [sp, #16]
 8018856:	4372      	muls	r2, r6
 8018858:	1c56      	adds	r6, r2, #1
 801885a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801885e:	0a26      	lsrs	r6, r4, #8
 8018860:	1212      	asrs	r2, r2, #8
 8018862:	9605      	str	r6, [sp, #20]
 8018864:	2aff      	cmp	r2, #255	; 0xff
 8018866:	d116      	bne.n	8018896 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8018868:	f06f 0201 	mvn.w	r2, #1
 801886c:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8018870:	fb02 fc07 	mul.w	ip, r2, r7
 8018874:	0962      	lsrs	r2, r4, #5
 8018876:	f026 0607 	bic.w	r6, r6, #7
 801887a:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801887e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8018882:	4316      	orrs	r6, r2
 8018884:	4326      	orrs	r6, r4
 8018886:	f825 600c 	strh.w	r6, [r5, ip]
 801888a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801888c:	3f01      	subs	r7, #1
 801888e:	4410      	add	r0, r2
 8018890:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018892:	4411      	add	r1, r2
 8018894:	e787      	b.n	80187a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018896:	f06f 0601 	mvn.w	r6, #1
 801889a:	fa1f fa82 	uxth.w	sl, r2
 801889e:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 80188a2:	43d2      	mvns	r2, r2
 80188a4:	437e      	muls	r6, r7
 80188a6:	b2e4      	uxtb	r4, r4
 80188a8:	fb1c fc0a 	smulbb	ip, ip, sl
 80188ac:	b2d2      	uxtb	r2, r2
 80188ae:	f835 8006 	ldrh.w	r8, [r5, r6]
 80188b2:	fb14 f40a 	smulbb	r4, r4, sl
 80188b6:	9602      	str	r6, [sp, #8]
 80188b8:	ea4f 2e28 	mov.w	lr, r8, asr #8
 80188bc:	f89d 6014 	ldrb.w	r6, [sp, #20]
 80188c0:	fb16 f60a 	smulbb	r6, r6, sl
 80188c4:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80188c8:	fb0e ce02 	mla	lr, lr, r2, ip
 80188cc:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 80188d0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80188d4:	fa1f fe8e 	uxth.w	lr, lr
 80188d8:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80188dc:	fa5f f888 	uxtb.w	r8, r8
 80188e0:	fb0c 6c02 	mla	ip, ip, r2, r6
 80188e4:	fb08 4402 	mla	r4, r8, r2, r4
 80188e8:	f10e 0201 	add.w	r2, lr, #1
 80188ec:	fa1f fc8c 	uxth.w	ip, ip
 80188f0:	b2a4      	uxth	r4, r4
 80188f2:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 80188f6:	9a02      	ldr	r2, [sp, #8]
 80188f8:	1c66      	adds	r6, r4, #1
 80188fa:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 80188fe:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8018902:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8018906:	ea46 0e0e 	orr.w	lr, r6, lr
 801890a:	f10c 0601 	add.w	r6, ip, #1
 801890e:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8018912:	0976      	lsrs	r6, r6, #5
 8018914:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8018918:	ea4e 0e06 	orr.w	lr, lr, r6
 801891c:	f825 e002 	strh.w	lr, [r5, r2]
 8018920:	e7b3      	b.n	801888a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8018922:	f04f 0800 	mov.w	r8, #0
 8018926:	eba3 0208 	sub.w	r2, r3, r8
 801892a:	2a00      	cmp	r2, #0
 801892c:	f77f af3e 	ble.w	80187ac <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018930:	1404      	asrs	r4, r0, #16
 8018932:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8018936:	140a      	asrs	r2, r1, #16
 8018938:	fb06 4202 	mla	r2, r6, r2, r4
 801893c:	9c01      	ldr	r4, [sp, #4]
 801893e:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 8018942:	0e22      	lsrs	r2, r4, #24
 8018944:	d015      	beq.n	8018972 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8018946:	9e04      	ldr	r6, [sp, #16]
 8018948:	4372      	muls	r2, r6
 801894a:	1c56      	adds	r6, r2, #1
 801894c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8018950:	0a26      	lsrs	r6, r4, #8
 8018952:	1212      	asrs	r2, r2, #8
 8018954:	2aff      	cmp	r2, #255	; 0xff
 8018956:	d113      	bne.n	8018980 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8018958:	0962      	lsrs	r2, r4, #5
 801895a:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801895e:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8018962:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8018966:	f026 0607 	bic.w	r6, r6, #7
 801896a:	4316      	orrs	r6, r2
 801896c:	4326      	orrs	r6, r4
 801896e:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 8018972:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018974:	f108 0801 	add.w	r8, r8, #1
 8018978:	4410      	add	r0, r2
 801897a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801897c:	4411      	add	r1, r2
 801897e:	e7d2      	b.n	8018926 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8018980:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 8018984:	fa1f fa82 	uxth.w	sl, r2
 8018988:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801898c:	43d2      	mvns	r2, r2
 801898e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8018992:	fb17 f70a 	smulbb	r7, r7, sl
 8018996:	b2d2      	uxtb	r2, r2
 8018998:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801899c:	b2e4      	uxtb	r4, r4
 801899e:	b2f6      	uxtb	r6, r6
 80189a0:	fb0c 7c02 	mla	ip, ip, r2, r7
 80189a4:	ea4f 07ee 	mov.w	r7, lr, asr #3
 80189a8:	fb14 f40a 	smulbb	r4, r4, sl
 80189ac:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80189b0:	fa1f fc8c 	uxth.w	ip, ip
 80189b4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80189b8:	fb16 f60a 	smulbb	r6, r6, sl
 80189bc:	fa5f fe8e 	uxtb.w	lr, lr
 80189c0:	fb0e 4402 	mla	r4, lr, r2, r4
 80189c4:	fb07 6702 	mla	r7, r7, r2, r6
 80189c8:	f10c 0201 	add.w	r2, ip, #1
 80189cc:	b2a4      	uxth	r4, r4
 80189ce:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80189d2:	1c66      	adds	r6, r4, #1
 80189d4:	b2bf      	uxth	r7, r7
 80189d6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80189da:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 80189de:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80189e2:	ea46 0c0c 	orr.w	ip, r6, ip
 80189e6:	1c7e      	adds	r6, r7, #1
 80189e8:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 80189ec:	0976      	lsrs	r6, r6, #5
 80189ee:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80189f2:	ea4c 0c06 	orr.w	ip, ip, r6
 80189f6:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 80189fa:	e7ba      	b.n	8018972 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 80189fc:	b007      	add	sp, #28
 80189fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08018a04 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a08:	b085      	sub	sp, #20
 8018a0a:	468b      	mov	fp, r1
 8018a0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018a10:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018a12:	9203      	str	r2, [sp, #12]
 8018a14:	6841      	ldr	r1, [r0, #4]
 8018a16:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8018a1a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8018a1e:	fb01 2404 	mla	r4, r1, r4, r2
 8018a22:	6802      	ldr	r2, [r0, #0]
 8018a24:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018a28:	f8d8 2000 	ldr.w	r2, [r8]
 8018a2c:	9201      	str	r2, [sp, #4]
 8018a2e:	f1bb 0f00 	cmp.w	fp, #0
 8018a32:	dc03      	bgt.n	8018a3c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8018a34:	9a03      	ldr	r2, [sp, #12]
 8018a36:	2a00      	cmp	r2, #0
 8018a38:	f340 814f 	ble.w	8018cda <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8018a3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018a3e:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8018a42:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018a46:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018a48:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8018a4c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	dd0e      	ble.n	8018a72 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8018a54:	1408      	asrs	r0, r1, #16
 8018a56:	d405      	bmi.n	8018a64 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8018a58:	42b8      	cmp	r0, r7
 8018a5a:	da03      	bge.n	8018a64 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8018a5c:	1410      	asrs	r0, r2, #16
 8018a5e:	d401      	bmi.n	8018a64 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8018a60:	42b0      	cmp	r0, r6
 8018a62:	db07      	blt.n	8018a74 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018a64:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018a66:	3b01      	subs	r3, #1
 8018a68:	3402      	adds	r4, #2
 8018a6a:	4401      	add	r1, r0
 8018a6c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018a6e:	4402      	add	r2, r0
 8018a70:	e7ee      	b.n	8018a50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8018a72:	d017      	beq.n	8018aa4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018a74:	1e58      	subs	r0, r3, #1
 8018a76:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018a78:	fb05 1500 	mla	r5, r5, r0, r1
 8018a7c:	142d      	asrs	r5, r5, #16
 8018a7e:	d409      	bmi.n	8018a94 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8018a80:	42bd      	cmp	r5, r7
 8018a82:	da07      	bge.n	8018a94 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8018a84:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8018a86:	fb05 2000 	mla	r0, r5, r0, r2
 8018a8a:	1400      	asrs	r0, r0, #16
 8018a8c:	d402      	bmi.n	8018a94 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8018a8e:	42b0      	cmp	r0, r6
 8018a90:	f2c0 80ba 	blt.w	8018c08 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8018a94:	2600      	movs	r6, #0
 8018a96:	1998      	adds	r0, r3, r6
 8018a98:	2800      	cmp	r0, #0
 8018a9a:	dc3e      	bgt.n	8018b1a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8018a9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018aa0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018aa4:	f1bb 0f00 	cmp.w	fp, #0
 8018aa8:	f340 8117 	ble.w	8018cda <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8018aac:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018ab0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018ab2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018ab6:	f1bb 0b01 	subs.w	fp, fp, #1
 8018aba:	eeb0 6a62 	vmov.f32	s12, s5
 8018abe:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018ac2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018ac6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018aca:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8018ace:	eeb0 6a43 	vmov.f32	s12, s6
 8018ad2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018ad6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8018ada:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018ade:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018ae2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018ae6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018aea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018aee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018af2:	ee12 2a90 	vmov	r2, s5
 8018af6:	eef0 2a47 	vmov.f32	s5, s14
 8018afa:	fb92 f3f3 	sdiv	r3, r2, r3
 8018afe:	ee13 2a10 	vmov	r2, s6
 8018b02:	9311      	str	r3, [sp, #68]	; 0x44
 8018b04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018b06:	eeb0 3a67 	vmov.f32	s6, s15
 8018b0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8018b0e:	9a03      	ldr	r2, [sp, #12]
 8018b10:	9312      	str	r3, [sp, #72]	; 0x48
 8018b12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018b14:	bf08      	it	eq
 8018b16:	4613      	moveq	r3, r2
 8018b18:	e789      	b.n	8018a2e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8018b1a:	140f      	asrs	r7, r1, #16
 8018b1c:	d424      	bmi.n	8018b68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018b1e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8018b22:	42bd      	cmp	r5, r7
 8018b24:	dd20      	ble.n	8018b68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018b26:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8018b2a:	d41d      	bmi.n	8018b68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018b2c:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8018b30:	4560      	cmp	r0, ip
 8018b32:	dd19      	ble.n	8018b68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018b34:	b22d      	sxth	r5, r5
 8018b36:	9801      	ldr	r0, [sp, #4]
 8018b38:	fb0c 7505 	mla	r5, ip, r5, r7
 8018b3c:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8018b40:	0e07      	lsrs	r7, r0, #24
 8018b42:	2fff      	cmp	r7, #255	; 0xff
 8018b44:	d116      	bne.n	8018b74 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8018b46:	f06f 0501 	mvn.w	r5, #1
 8018b4a:	fb05 f706 	mul.w	r7, r5, r6
 8018b4e:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8018b52:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8018b56:	0945      	lsrs	r5, r0, #5
 8018b58:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8018b5c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8018b60:	ea4c 0505 	orr.w	r5, ip, r5
 8018b64:	4305      	orrs	r5, r0
 8018b66:	53e5      	strh	r5, [r4, r7]
 8018b68:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018b6a:	3e01      	subs	r6, #1
 8018b6c:	4401      	add	r1, r0
 8018b6e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018b70:	4402      	add	r2, r0
 8018b72:	e790      	b.n	8018a96 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8018b74:	b2fd      	uxtb	r5, r7
 8018b76:	2f00      	cmp	r7, #0
 8018b78:	d0f6      	beq.n	8018b68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018b7a:	f06f 0701 	mvn.w	r7, #1
 8018b7e:	fa1f f985 	uxth.w	r9, r5
 8018b82:	43ed      	mvns	r5, r5
 8018b84:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8018b88:	4377      	muls	r7, r6
 8018b8a:	fb1a fa09 	smulbb	sl, sl, r9
 8018b8e:	b2ed      	uxtb	r5, r5
 8018b90:	f834 e007 	ldrh.w	lr, [r4, r7]
 8018b94:	9702      	str	r7, [sp, #8]
 8018b96:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8018b9a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8018b9e:	fb17 f709 	smulbb	r7, r7, r9
 8018ba2:	b2c0      	uxtb	r0, r0
 8018ba4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018ba8:	fb10 f009 	smulbb	r0, r0, r9
 8018bac:	fb0c 7c05 	mla	ip, ip, r5, r7
 8018bb0:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8018bb4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8018bb8:	fa1f fc8c 	uxth.w	ip, ip
 8018bbc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8018bc0:	fa5f fe8e 	uxtb.w	lr, lr
 8018bc4:	fb07 a705 	mla	r7, r7, r5, sl
 8018bc8:	fb0e 0005 	mla	r0, lr, r5, r0
 8018bcc:	f10c 0501 	add.w	r5, ip, #1
 8018bd0:	b2bf      	uxth	r7, r7
 8018bd2:	b280      	uxth	r0, r0
 8018bd4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8018bd8:	f100 0a01 	add.w	sl, r0, #1
 8018bdc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018be0:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8018be4:	9802      	ldr	r0, [sp, #8]
 8018be6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018bea:	ea4a 0c0c 	orr.w	ip, sl, ip
 8018bee:	f107 0a01 	add.w	sl, r7, #1
 8018bf2:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8018bf6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018bfa:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018bfe:	ea4c 0c0a 	orr.w	ip, ip, sl
 8018c02:	f824 c000 	strh.w	ip, [r4, r0]
 8018c06:	e7af      	b.n	8018b68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018c08:	f04f 0e00 	mov.w	lr, #0
 8018c0c:	eba3 000e 	sub.w	r0, r3, lr
 8018c10:	2800      	cmp	r0, #0
 8018c12:	f77f af43 	ble.w	8018a9c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018c16:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8018c1a:	140d      	asrs	r5, r1, #16
 8018c1c:	1410      	asrs	r0, r2, #16
 8018c1e:	fb06 5000 	mla	r0, r6, r0, r5
 8018c22:	9d01      	ldr	r5, [sp, #4]
 8018c24:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8018c28:	0e2e      	lsrs	r6, r5, #24
 8018c2a:	2eff      	cmp	r6, #255	; 0xff
 8018c2c:	d112      	bne.n	8018c54 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8018c2e:	482c      	ldr	r0, [pc, #176]	; (8018ce0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 8018c30:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8018c34:	0968      	lsrs	r0, r5, #5
 8018c36:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8018c3a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8018c3e:	4330      	orrs	r0, r6
 8018c40:	4328      	orrs	r0, r5
 8018c42:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 8018c46:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018c48:	f10e 0e01 	add.w	lr, lr, #1
 8018c4c:	4401      	add	r1, r0
 8018c4e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018c50:	4402      	add	r2, r0
 8018c52:	e7db      	b.n	8018c0c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8018c54:	b2f0      	uxtb	r0, r6
 8018c56:	2e00      	cmp	r6, #0
 8018c58:	d0f5      	beq.n	8018c46 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8018c5a:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8018c5e:	fa1f f980 	uxth.w	r9, r0
 8018c62:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8018c66:	43c0      	mvns	r0, r0
 8018c68:	ea4f 272c 	mov.w	r7, ip, asr #8
 8018c6c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8018c70:	fb16 f609 	smulbb	r6, r6, r9
 8018c74:	b2c0      	uxtb	r0, r0
 8018c76:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018c7a:	b2ed      	uxtb	r5, r5
 8018c7c:	fb1a fa09 	smulbb	sl, sl, r9
 8018c80:	fb07 6700 	mla	r7, r7, r0, r6
 8018c84:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8018c88:	fb15 f509 	smulbb	r5, r5, r9
 8018c8c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8018c90:	b2bf      	uxth	r7, r7
 8018c92:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018c96:	fa5f fc8c 	uxtb.w	ip, ip
 8018c9a:	fb06 a600 	mla	r6, r6, r0, sl
 8018c9e:	fb0c 5500 	mla	r5, ip, r0, r5
 8018ca2:	1c78      	adds	r0, r7, #1
 8018ca4:	b2b6      	uxth	r6, r6
 8018ca6:	b2ad      	uxth	r5, r5
 8018ca8:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8018cac:	f105 0a01 	add.w	sl, r5, #1
 8018cb0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8018cb4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018cb8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018cbc:	ea4a 0707 	orr.w	r7, sl, r7
 8018cc0:	f106 0a01 	add.w	sl, r6, #1
 8018cc4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8018cc8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018ccc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018cd0:	ea47 070a 	orr.w	r7, r7, sl
 8018cd4:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8018cd8:	e7b5      	b.n	8018c46 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8018cda:	b005      	add	sp, #20
 8018cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ce0:	fffff800 	.word	0xfffff800

08018ce4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ce8:	b087      	sub	sp, #28
 8018cea:	468b      	mov	fp, r1
 8018cec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018cf0:	9815      	ldr	r0, [sp, #84]	; 0x54
 8018cf2:	9203      	str	r2, [sp, #12]
 8018cf4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8018cf8:	6841      	ldr	r1, [r0, #4]
 8018cfa:	9204      	str	r2, [sp, #16]
 8018cfc:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8018d00:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8018d04:	fb01 2404 	mla	r4, r1, r4, r2
 8018d08:	6802      	ldr	r2, [r0, #0]
 8018d0a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018d0e:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8018d12:	3201      	adds	r2, #1
 8018d14:	f022 0201 	bic.w	r2, r2, #1
 8018d18:	9200      	str	r2, [sp, #0]
 8018d1a:	f8d9 2000 	ldr.w	r2, [r9]
 8018d1e:	9201      	str	r2, [sp, #4]
 8018d20:	f1bb 0f00 	cmp.w	fp, #0
 8018d24:	dc03      	bgt.n	8018d2e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8018d26:	9a03      	ldr	r2, [sp, #12]
 8018d28:	2a00      	cmp	r2, #0
 8018d2a:	f340 816a 	ble.w	8019002 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8018d2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018d30:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8018d34:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018d38:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018d3a:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8018d3e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018d42:	2b00      	cmp	r3, #0
 8018d44:	dd0e      	ble.n	8018d64 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8018d46:	1402      	asrs	r2, r0, #16
 8018d48:	d405      	bmi.n	8018d56 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018d4a:	42ba      	cmp	r2, r7
 8018d4c:	da03      	bge.n	8018d56 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018d4e:	140a      	asrs	r2, r1, #16
 8018d50:	d401      	bmi.n	8018d56 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018d52:	42b2      	cmp	r2, r6
 8018d54:	db07      	blt.n	8018d66 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8018d56:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018d58:	3b01      	subs	r3, #1
 8018d5a:	3402      	adds	r4, #2
 8018d5c:	4410      	add	r0, r2
 8018d5e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018d60:	4411      	add	r1, r2
 8018d62:	e7ee      	b.n	8018d42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8018d64:	d017      	beq.n	8018d96 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8018d66:	1e5a      	subs	r2, r3, #1
 8018d68:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018d6a:	fb05 0502 	mla	r5, r5, r2, r0
 8018d6e:	142d      	asrs	r5, r5, #16
 8018d70:	d409      	bmi.n	8018d86 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8018d72:	42bd      	cmp	r5, r7
 8018d74:	da07      	bge.n	8018d86 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8018d76:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8018d78:	fb05 1202 	mla	r2, r5, r2, r1
 8018d7c:	1412      	asrs	r2, r2, #16
 8018d7e:	d402      	bmi.n	8018d86 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8018d80:	42b2      	cmp	r2, r6
 8018d82:	f2c0 80c8 	blt.w	8018f16 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8018d86:	2700      	movs	r7, #0
 8018d88:	19da      	adds	r2, r3, r7
 8018d8a:	2a00      	cmp	r2, #0
 8018d8c:	dc3e      	bgt.n	8018e0c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8018d8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018d92:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018d96:	f1bb 0f00 	cmp.w	fp, #0
 8018d9a:	f340 8132 	ble.w	8019002 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8018d9e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018da2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018da4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018da8:	f1bb 0b01 	subs.w	fp, fp, #1
 8018dac:	eeb0 6a62 	vmov.f32	s12, s5
 8018db0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018db4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018db8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018dbc:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8018dc0:	eeb0 6a43 	vmov.f32	s12, s6
 8018dc4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018dc8:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8018dcc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018dd0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018dd4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018dd8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018ddc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018de0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018de4:	ee12 2a90 	vmov	r2, s5
 8018de8:	eef0 2a47 	vmov.f32	s5, s14
 8018dec:	fb92 f3f3 	sdiv	r3, r2, r3
 8018df0:	ee13 2a10 	vmov	r2, s6
 8018df4:	9313      	str	r3, [sp, #76]	; 0x4c
 8018df6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018df8:	eeb0 3a67 	vmov.f32	s6, s15
 8018dfc:	fb92 f3f3 	sdiv	r3, r2, r3
 8018e00:	9a03      	ldr	r2, [sp, #12]
 8018e02:	9314      	str	r3, [sp, #80]	; 0x50
 8018e04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018e06:	bf08      	it	eq
 8018e08:	4613      	moveq	r3, r2
 8018e0a:	e789      	b.n	8018d20 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8018e0c:	1405      	asrs	r5, r0, #16
 8018e0e:	d436      	bmi.n	8018e7e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8018e10:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8018e14:	42aa      	cmp	r2, r5
 8018e16:	dd32      	ble.n	8018e7e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8018e18:	140e      	asrs	r6, r1, #16
 8018e1a:	d430      	bmi.n	8018e7e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8018e1c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8018e20:	42b2      	cmp	r2, r6
 8018e22:	dd2c      	ble.n	8018e7e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8018e24:	9a00      	ldr	r2, [sp, #0]
 8018e26:	fb06 5502 	mla	r5, r6, r2, r5
 8018e2a:	9e01      	ldr	r6, [sp, #4]
 8018e2c:	086a      	lsrs	r2, r5, #1
 8018e2e:	5cb2      	ldrb	r2, [r6, r2]
 8018e30:	07ee      	lsls	r6, r5, #31
 8018e32:	bf54      	ite	pl
 8018e34:	f002 020f 	andpl.w	r2, r2, #15
 8018e38:	1112      	asrmi	r2, r2, #4
 8018e3a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8018e3e:	b2d2      	uxtb	r2, r2
 8018e40:	b1ea      	cbz	r2, 8018e7e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8018e42:	9d04      	ldr	r5, [sp, #16]
 8018e44:	436a      	muls	r2, r5
 8018e46:	1c55      	adds	r5, r2, #1
 8018e48:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8018e4c:	4d6e      	ldr	r5, [pc, #440]	; (8019008 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8018e4e:	1212      	asrs	r2, r2, #8
 8018e50:	682d      	ldr	r5, [r5, #0]
 8018e52:	2aff      	cmp	r2, #255	; 0xff
 8018e54:	ea4f 2615 	mov.w	r6, r5, lsr #8
 8018e58:	9605      	str	r6, [sp, #20]
 8018e5a:	d116      	bne.n	8018e8a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8018e5c:	f06f 0201 	mvn.w	r2, #1
 8018e60:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8018e64:	fb02 fc07 	mul.w	ip, r2, r7
 8018e68:	096a      	lsrs	r2, r5, #5
 8018e6a:	f026 0607 	bic.w	r6, r6, #7
 8018e6e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8018e72:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8018e76:	4316      	orrs	r6, r2
 8018e78:	432e      	orrs	r6, r5
 8018e7a:	f824 600c 	strh.w	r6, [r4, ip]
 8018e7e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018e80:	3f01      	subs	r7, #1
 8018e82:	4410      	add	r0, r2
 8018e84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018e86:	4411      	add	r1, r2
 8018e88:	e77e      	b.n	8018d88 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8018e8a:	f06f 0601 	mvn.w	r6, #1
 8018e8e:	fa1f fa82 	uxth.w	sl, r2
 8018e92:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 8018e96:	43d2      	mvns	r2, r2
 8018e98:	437e      	muls	r6, r7
 8018e9a:	b2ed      	uxtb	r5, r5
 8018e9c:	fb1c fc0a 	smulbb	ip, ip, sl
 8018ea0:	b2d2      	uxtb	r2, r2
 8018ea2:	f834 8006 	ldrh.w	r8, [r4, r6]
 8018ea6:	fb15 f50a 	smulbb	r5, r5, sl
 8018eaa:	9602      	str	r6, [sp, #8]
 8018eac:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8018eb0:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8018eb4:	fb16 f60a 	smulbb	r6, r6, sl
 8018eb8:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8018ebc:	fb0e ce02 	mla	lr, lr, r2, ip
 8018ec0:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8018ec4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8018ec8:	fa1f fe8e 	uxth.w	lr, lr
 8018ecc:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8018ed0:	fa5f f888 	uxtb.w	r8, r8
 8018ed4:	fb0c 6c02 	mla	ip, ip, r2, r6
 8018ed8:	fb08 5502 	mla	r5, r8, r2, r5
 8018edc:	f10e 0201 	add.w	r2, lr, #1
 8018ee0:	fa1f fc8c 	uxth.w	ip, ip
 8018ee4:	b2ad      	uxth	r5, r5
 8018ee6:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8018eea:	9a02      	ldr	r2, [sp, #8]
 8018eec:	1c6e      	adds	r6, r5, #1
 8018eee:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8018ef2:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 8018ef6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8018efa:	ea46 0e0e 	orr.w	lr, r6, lr
 8018efe:	f10c 0601 	add.w	r6, ip, #1
 8018f02:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8018f06:	0976      	lsrs	r6, r6, #5
 8018f08:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8018f0c:	ea4e 0e06 	orr.w	lr, lr, r6
 8018f10:	f824 e002 	strh.w	lr, [r4, r2]
 8018f14:	e7b3      	b.n	8018e7e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8018f16:	f04f 0800 	mov.w	r8, #0
 8018f1a:	eba3 0208 	sub.w	r2, r3, r8
 8018f1e:	2a00      	cmp	r2, #0
 8018f20:	f77f af35 	ble.w	8018d8e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8018f24:	1402      	asrs	r2, r0, #16
 8018f26:	9e00      	ldr	r6, [sp, #0]
 8018f28:	140d      	asrs	r5, r1, #16
 8018f2a:	fb06 2505 	mla	r5, r6, r5, r2
 8018f2e:	9e01      	ldr	r6, [sp, #4]
 8018f30:	086a      	lsrs	r2, r5, #1
 8018f32:	07ed      	lsls	r5, r5, #31
 8018f34:	5cb2      	ldrb	r2, [r6, r2]
 8018f36:	bf54      	ite	pl
 8018f38:	f002 020f 	andpl.w	r2, r2, #15
 8018f3c:	1112      	asrmi	r2, r2, #4
 8018f3e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8018f42:	b2d2      	uxtb	r2, r2
 8018f44:	b1c2      	cbz	r2, 8018f78 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8018f46:	9d04      	ldr	r5, [sp, #16]
 8018f48:	436a      	muls	r2, r5
 8018f4a:	1c55      	adds	r5, r2, #1
 8018f4c:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8018f50:	4d2d      	ldr	r5, [pc, #180]	; (8019008 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8018f52:	1212      	asrs	r2, r2, #8
 8018f54:	682e      	ldr	r6, [r5, #0]
 8018f56:	2aff      	cmp	r2, #255	; 0xff
 8018f58:	ea4f 2516 	mov.w	r5, r6, lsr #8
 8018f5c:	d113      	bne.n	8018f86 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8018f5e:	0972      	lsrs	r2, r6, #5
 8018f60:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 8018f64:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8018f68:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8018f6c:	f025 0507 	bic.w	r5, r5, #7
 8018f70:	4315      	orrs	r5, r2
 8018f72:	4335      	orrs	r5, r6
 8018f74:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8018f78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018f7a:	f108 0801 	add.w	r8, r8, #1
 8018f7e:	4410      	add	r0, r2
 8018f80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018f82:	4411      	add	r1, r2
 8018f84:	e7c9      	b.n	8018f1a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8018f86:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8018f8a:	fa1f fa82 	uxth.w	sl, r2
 8018f8e:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8018f92:	43d2      	mvns	r2, r2
 8018f94:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8018f98:	fb17 f70a 	smulbb	r7, r7, sl
 8018f9c:	b2d2      	uxtb	r2, r2
 8018f9e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018fa2:	b2f6      	uxtb	r6, r6
 8018fa4:	b2ed      	uxtb	r5, r5
 8018fa6:	fb0c 7c02 	mla	ip, ip, r2, r7
 8018faa:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8018fae:	fb16 f60a 	smulbb	r6, r6, sl
 8018fb2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8018fb6:	fa1f fc8c 	uxth.w	ip, ip
 8018fba:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8018fbe:	fb15 f50a 	smulbb	r5, r5, sl
 8018fc2:	fa5f fe8e 	uxtb.w	lr, lr
 8018fc6:	fb0e 6602 	mla	r6, lr, r2, r6
 8018fca:	fb07 5702 	mla	r7, r7, r2, r5
 8018fce:	f10c 0201 	add.w	r2, ip, #1
 8018fd2:	b2b6      	uxth	r6, r6
 8018fd4:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8018fd8:	1c75      	adds	r5, r6, #1
 8018fda:	b2bf      	uxth	r7, r7
 8018fdc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018fe0:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 8018fe4:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8018fe8:	ea45 0c0c 	orr.w	ip, r5, ip
 8018fec:	1c7d      	adds	r5, r7, #1
 8018fee:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 8018ff2:	096d      	lsrs	r5, r5, #5
 8018ff4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8018ff8:	ea4c 0c05 	orr.w	ip, ip, r5
 8018ffc:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 8019000:	e7ba      	b.n	8018f78 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8019002:	b007      	add	sp, #28
 8019004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019008:	2400aeac 	.word	0x2400aeac

0801900c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801900c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019010:	b087      	sub	sp, #28
 8019012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019016:	f8df 8308 	ldr.w	r8, [pc, #776]	; 8019320 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801901a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801901c:	9101      	str	r1, [sp, #4]
 801901e:	9205      	str	r2, [sp, #20]
 8019020:	6841      	ldr	r1, [r0, #4]
 8019022:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 8019026:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801902a:	fb01 2404 	mla	r4, r1, r4, r2
 801902e:	6802      	ldr	r2, [r0, #0]
 8019030:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019034:	f8db 2008 	ldr.w	r2, [fp, #8]
 8019038:	3201      	adds	r2, #1
 801903a:	f022 0201 	bic.w	r2, r2, #1
 801903e:	9202      	str	r2, [sp, #8]
 8019040:	f8db 2000 	ldr.w	r2, [fp]
 8019044:	9203      	str	r2, [sp, #12]
 8019046:	9a01      	ldr	r2, [sp, #4]
 8019048:	2a00      	cmp	r2, #0
 801904a:	dc03      	bgt.n	8019054 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801904c:	9a05      	ldr	r2, [sp, #20]
 801904e:	2a00      	cmp	r2, #0
 8019050:	f340 8162 	ble.w	8019318 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8019054:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019056:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801905a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801905e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019060:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8019064:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019068:	2b00      	cmp	r3, #0
 801906a:	dd0e      	ble.n	801908a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801906c:	1402      	asrs	r2, r0, #16
 801906e:	d405      	bmi.n	801907c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019070:	42ba      	cmp	r2, r7
 8019072:	da03      	bge.n	801907c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019074:	140a      	asrs	r2, r1, #16
 8019076:	d401      	bmi.n	801907c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019078:	42b2      	cmp	r2, r6
 801907a:	db07      	blt.n	801908c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801907c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801907e:	3b01      	subs	r3, #1
 8019080:	3402      	adds	r4, #2
 8019082:	4410      	add	r0, r2
 8019084:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019086:	4411      	add	r1, r2
 8019088:	e7ee      	b.n	8019068 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801908a:	d017      	beq.n	80190bc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801908c:	1e5a      	subs	r2, r3, #1
 801908e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019090:	fb05 0502 	mla	r5, r5, r2, r0
 8019094:	142d      	asrs	r5, r5, #16
 8019096:	d409      	bmi.n	80190ac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019098:	42bd      	cmp	r5, r7
 801909a:	da07      	bge.n	80190ac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801909c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801909e:	fb05 1202 	mla	r2, r5, r2, r1
 80190a2:	1412      	asrs	r2, r2, #16
 80190a4:	d402      	bmi.n	80190ac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80190a6:	42b2      	cmp	r2, r6
 80190a8:	f2c0 80c3 	blt.w	8019232 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 80190ac:	2500      	movs	r5, #0
 80190ae:	195a      	adds	r2, r3, r5
 80190b0:	2a00      	cmp	r2, #0
 80190b2:	dc3f      	bgt.n	8019134 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80190b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80190b8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80190bc:	9b01      	ldr	r3, [sp, #4]
 80190be:	2b00      	cmp	r3, #0
 80190c0:	f340 812a 	ble.w	8019318 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80190c4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80190c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80190ca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80190ce:	eeb0 6a62 	vmov.f32	s12, s5
 80190d2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80190d6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80190da:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80190de:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80190e2:	eeb0 6a43 	vmov.f32	s12, s6
 80190e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80190ea:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80190ee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80190f2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80190f6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80190fa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80190fe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019102:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019106:	ee12 2a90 	vmov	r2, s5
 801910a:	eef0 2a47 	vmov.f32	s5, s14
 801910e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019112:	ee13 2a10 	vmov	r2, s6
 8019116:	9313      	str	r3, [sp, #76]	; 0x4c
 8019118:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801911a:	eeb0 3a67 	vmov.f32	s6, s15
 801911e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019122:	9314      	str	r3, [sp, #80]	; 0x50
 8019124:	9b01      	ldr	r3, [sp, #4]
 8019126:	9a05      	ldr	r2, [sp, #20]
 8019128:	3b01      	subs	r3, #1
 801912a:	9301      	str	r3, [sp, #4]
 801912c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801912e:	bf08      	it	eq
 8019130:	4613      	moveq	r3, r2
 8019132:	e788      	b.n	8019046 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8019134:	1406      	asrs	r6, r0, #16
 8019136:	d42c      	bmi.n	8019192 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019138:	f8db 2008 	ldr.w	r2, [fp, #8]
 801913c:	42b2      	cmp	r2, r6
 801913e:	dd28      	ble.n	8019192 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019140:	140f      	asrs	r7, r1, #16
 8019142:	d426      	bmi.n	8019192 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019144:	f8db 200c 	ldr.w	r2, [fp, #12]
 8019148:	42ba      	cmp	r2, r7
 801914a:	dd22      	ble.n	8019192 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801914c:	9a02      	ldr	r2, [sp, #8]
 801914e:	fb07 6602 	mla	r6, r7, r2, r6
 8019152:	9f03      	ldr	r7, [sp, #12]
 8019154:	0872      	lsrs	r2, r6, #1
 8019156:	07f6      	lsls	r6, r6, #31
 8019158:	5cba      	ldrb	r2, [r7, r2]
 801915a:	bf54      	ite	pl
 801915c:	f002 020f 	andpl.w	r2, r2, #15
 8019160:	1112      	asrmi	r2, r2, #4
 8019162:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019166:	b2d2      	uxtb	r2, r2
 8019168:	2aff      	cmp	r2, #255	; 0xff
 801916a:	d118      	bne.n	801919e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801916c:	f06f 0601 	mvn.w	r6, #1
 8019170:	f8d8 2000 	ldr.w	r2, [r8]
 8019174:	fb06 f705 	mul.w	r7, r6, r5
 8019178:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 801917c:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 8019180:	0956      	lsrs	r6, r2, #5
 8019182:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8019186:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801918a:	ea4c 0606 	orr.w	r6, ip, r6
 801918e:	4316      	orrs	r6, r2
 8019190:	53e6      	strh	r6, [r4, r7]
 8019192:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019194:	3d01      	subs	r5, #1
 8019196:	4410      	add	r0, r2
 8019198:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801919a:	4411      	add	r1, r2
 801919c:	e787      	b.n	80190ae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801919e:	2a00      	cmp	r2, #0
 80191a0:	d0f7      	beq.n	8019192 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80191a2:	f06f 0601 	mvn.w	r6, #1
 80191a6:	f8d8 c000 	ldr.w	ip, [r8]
 80191aa:	fa1f f982 	uxth.w	r9, r2
 80191ae:	43d2      	mvns	r2, r2
 80191b0:	436e      	muls	r6, r5
 80191b2:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 80191b6:	b2d2      	uxtb	r2, r2
 80191b8:	f834 e006 	ldrh.w	lr, [r4, r6]
 80191bc:	fb1a fa09 	smulbb	sl, sl, r9
 80191c0:	9604      	str	r6, [sp, #16]
 80191c2:	f3cc 4607 	ubfx	r6, ip, #16, #8
 80191c6:	ea4f 272e 	mov.w	r7, lr, asr #8
 80191ca:	fb16 f609 	smulbb	r6, r6, r9
 80191ce:	fa5f fc8c 	uxtb.w	ip, ip
 80191d2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80191d6:	fb1c fc09 	smulbb	ip, ip, r9
 80191da:	fb07 6702 	mla	r7, r7, r2, r6
 80191de:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80191e2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80191e6:	b2bf      	uxth	r7, r7
 80191e8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80191ec:	fa5f fe8e 	uxtb.w	lr, lr
 80191f0:	fb06 a602 	mla	r6, r6, r2, sl
 80191f4:	fb0e cc02 	mla	ip, lr, r2, ip
 80191f8:	1c7a      	adds	r2, r7, #1
 80191fa:	b2b6      	uxth	r6, r6
 80191fc:	fa1f fc8c 	uxth.w	ip, ip
 8019200:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8019204:	9a04      	ldr	r2, [sp, #16]
 8019206:	f10c 0a01 	add.w	sl, ip, #1
 801920a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801920e:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8019212:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019216:	ea4a 0707 	orr.w	r7, sl, r7
 801921a:	f106 0a01 	add.w	sl, r6, #1
 801921e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8019222:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019226:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801922a:	ea47 070a 	orr.w	r7, r7, sl
 801922e:	52a7      	strh	r7, [r4, r2]
 8019230:	e7af      	b.n	8019192 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019232:	f04f 0e00 	mov.w	lr, #0
 8019236:	eba3 020e 	sub.w	r2, r3, lr
 801923a:	2a00      	cmp	r2, #0
 801923c:	f77f af3a 	ble.w	80190b4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8019240:	1402      	asrs	r2, r0, #16
 8019242:	9e02      	ldr	r6, [sp, #8]
 8019244:	140d      	asrs	r5, r1, #16
 8019246:	fb06 2505 	mla	r5, r6, r5, r2
 801924a:	9e03      	ldr	r6, [sp, #12]
 801924c:	086a      	lsrs	r2, r5, #1
 801924e:	07ed      	lsls	r5, r5, #31
 8019250:	5cb2      	ldrb	r2, [r6, r2]
 8019252:	bf54      	ite	pl
 8019254:	f002 020f 	andpl.w	r2, r2, #15
 8019258:	1112      	asrmi	r2, r2, #4
 801925a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801925e:	b2d2      	uxtb	r2, r2
 8019260:	2aff      	cmp	r2, #255	; 0xff
 8019262:	d115      	bne.n	8019290 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8019264:	f8d8 5000 	ldr.w	r5, [r8]
 8019268:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 801926c:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 8019270:	096a      	lsrs	r2, r5, #5
 8019272:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8019276:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801927a:	4332      	orrs	r2, r6
 801927c:	432a      	orrs	r2, r5
 801927e:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 8019282:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019284:	f10e 0e01 	add.w	lr, lr, #1
 8019288:	4410      	add	r0, r2
 801928a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801928c:	4411      	add	r1, r2
 801928e:	e7d2      	b.n	8019236 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8019290:	2a00      	cmp	r2, #0
 8019292:	d0f6      	beq.n	8019282 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8019294:	f8d8 7000 	ldr.w	r7, [r8]
 8019298:	fa1f f982 	uxth.w	r9, r2
 801929c:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 80192a0:	43d2      	mvns	r2, r2
 80192a2:	f3c7 4507 	ubfx	r5, r7, #16, #8
 80192a6:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 80192aa:	ea4f 262c 	mov.w	r6, ip, asr #8
 80192ae:	fb15 f509 	smulbb	r5, r5, r9
 80192b2:	b2d2      	uxtb	r2, r2
 80192b4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80192b8:	b2ff      	uxtb	r7, r7
 80192ba:	fb1a fa09 	smulbb	sl, sl, r9
 80192be:	fb06 5602 	mla	r6, r6, r2, r5
 80192c2:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80192c6:	fb17 f709 	smulbb	r7, r7, r9
 80192ca:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80192ce:	b2b6      	uxth	r6, r6
 80192d0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80192d4:	fa5f fc8c 	uxtb.w	ip, ip
 80192d8:	fb05 a502 	mla	r5, r5, r2, sl
 80192dc:	fb0c 7702 	mla	r7, ip, r2, r7
 80192e0:	1c72      	adds	r2, r6, #1
 80192e2:	b2ad      	uxth	r5, r5
 80192e4:	b2bf      	uxth	r7, r7
 80192e6:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80192ea:	f107 0a01 	add.w	sl, r7, #1
 80192ee:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80192f2:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80192f6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80192fa:	ea4a 0606 	orr.w	r6, sl, r6
 80192fe:	f105 0a01 	add.w	sl, r5, #1
 8019302:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8019306:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801930a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801930e:	ea46 060a 	orr.w	r6, r6, sl
 8019312:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 8019316:	e7b4      	b.n	8019282 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8019318:	b007      	add	sp, #28
 801931a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801931e:	bf00      	nop
 8019320:	2400aeac 	.word	0x2400aeac

08019324 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8019324:	4770      	bx	lr

08019326 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8019326:	4770      	bx	lr

08019328 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8019328:	4770      	bx	lr

0801932a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801932a:	4770      	bx	lr

0801932c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801932c:	4770      	bx	lr

0801932e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801932e:	4770      	bx	lr

08019330 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8019330:	4770      	bx	lr

08019332 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8019332:	4770      	bx	lr

08019334 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8019334:	4770      	bx	lr

08019336 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8019336:	4770      	bx	lr

08019338 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8019338:	4770      	bx	lr

0801933a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801933a:	4770      	bx	lr

0801933c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801933c:	4770      	bx	lr

0801933e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801933e:	4770      	bx	lr

08019340 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8019340:	4770      	bx	lr

08019342 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 8019342:	4770      	bx	lr

08019344 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8019344:	4770      	bx	lr

08019346 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8019346:	4770      	bx	lr

08019348 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8019348:	4770      	bx	lr

0801934a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801934a:	4770      	bx	lr

0801934c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801934c:	4770      	bx	lr

0801934e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801934e:	4770      	bx	lr

08019350 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8019350:	4770      	bx	lr

08019352 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8019352:	4770      	bx	lr

08019354 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8019354:	4770      	bx	lr

08019356 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8019356:	4770      	bx	lr

08019358 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8019358:	4770      	bx	lr

0801935a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801935a:	4770      	bx	lr

0801935c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801935c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019360:	b088      	sub	sp, #32
 8019362:	4606      	mov	r6, r0
 8019364:	4688      	mov	r8, r1
 8019366:	4691      	mov	r9, r2
 8019368:	ac08      	add	r4, sp, #32
 801936a:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801936e:	4620      	mov	r0, r4
 8019370:	f7fd fc66 	bl	8016c40 <_ZNK8touchgfx6Bitmap7getDataEv>
 8019374:	6833      	ldr	r3, [r6, #0]
 8019376:	4605      	mov	r5, r0
 8019378:	4620      	mov	r0, r4
 801937a:	699f      	ldr	r7, [r3, #24]
 801937c:	f7fd fb74 	bl	8016a68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019380:	4682      	mov	sl, r0
 8019382:	4620      	mov	r0, r4
 8019384:	f7fd fba4 	bl	8016ad0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019388:	9500      	str	r5, [sp, #0]
 801938a:	464b      	mov	r3, r9
 801938c:	4642      	mov	r2, r8
 801938e:	4631      	mov	r1, r6
 8019390:	e9cd a001 	strd	sl, r0, [sp, #4]
 8019394:	a806      	add	r0, sp, #24
 8019396:	47b8      	blx	r7
 8019398:	4628      	mov	r0, r5
 801939a:	b008      	add	sp, #32
 801939c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080193a0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 80193a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80193a4:	2300      	movs	r3, #0
 80193a6:	9300      	str	r3, [sp, #0]
 80193a8:	4b3d      	ldr	r3, [pc, #244]	; (80194a0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 80193aa:	781b      	ldrb	r3, [r3, #0]
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	d137      	bne.n	8019420 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 80193b0:	4a3c      	ldr	r2, [pc, #240]	; (80194a4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 80193b2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80193b6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80193ba:	2b00      	cmp	r3, #0
 80193bc:	d132      	bne.n	8019424 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 80193be:	4b3a      	ldr	r3, [pc, #232]	; (80194a8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 80193c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80193c4:	ac02      	add	r4, sp, #8
 80193c6:	6808      	ldr	r0, [r1, #0]
 80193c8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80193cc:	ab02      	add	r3, sp, #8
 80193ce:	6849      	ldr	r1, [r1, #4]
 80193d0:	4d36      	ldr	r5, [pc, #216]	; (80194ac <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 80193d2:	c303      	stmia	r3!, {r0, r1}
 80193d4:	4669      	mov	r1, sp
 80193d6:	4620      	mov	r0, r4
 80193d8:	f7fa fde2 	bl	8013fa0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80193dc:	4668      	mov	r0, sp
 80193de:	f7fa fdb7 	bl	8013f50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80193e2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80193e6:	f8bd 2000 	ldrh.w	r2, [sp]
 80193ea:	462f      	mov	r7, r5
 80193ec:	6828      	ldr	r0, [r5, #0]
 80193ee:	4413      	add	r3, r2
 80193f0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80193f4:	f8ad 3008 	strh.w	r3, [sp, #8]
 80193f8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80193fc:	4413      	add	r3, r2
 80193fe:	f8ad 300a 	strh.w	r3, [sp, #10]
 8019402:	6803      	ldr	r3, [r0, #0]
 8019404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019406:	4798      	blx	r3
 8019408:	f010 0f01 	tst.w	r0, #1
 801940c:	d00c      	beq.n	8019428 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801940e:	6828      	ldr	r0, [r5, #0]
 8019410:	6803      	ldr	r3, [r0, #0]
 8019412:	e894 0006 	ldmia.w	r4, {r1, r2}
 8019416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019418:	4798      	blx	r3
 801941a:	b004      	add	sp, #16
 801941c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019420:	4a21      	ldr	r2, [pc, #132]	; (80194a8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8019422:	e7c6      	b.n	80193b2 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8019424:	4b1f      	ldr	r3, [pc, #124]	; (80194a4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8019426:	e7cb      	b.n	80193c0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8019428:	6838      	ldr	r0, [r7, #0]
 801942a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801942e:	6803      	ldr	r3, [r0, #0]
 8019430:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 8019434:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8019438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801943a:	4798      	blx	r3
 801943c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8019440:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8019444:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8019448:	fb16 3602 	smlabb	r6, r6, r2, r3
 801944c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8019450:	6838      	ldr	r0, [r7, #0]
 8019452:	6803      	ldr	r3, [r0, #0]
 8019454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019456:	4798      	blx	r3
 8019458:	4a12      	ldr	r2, [pc, #72]	; (80194a4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801945a:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801945e:	8813      	ldrh	r3, [r2, #0]
 8019460:	4691      	mov	r9, r2
 8019462:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8019466:	435d      	muls	r5, r3
 8019468:	fb03 1404 	mla	r4, r3, r4, r1
 801946c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8019470:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8019474:	6838      	ldr	r0, [r7, #0]
 8019476:	42ac      	cmp	r4, r5
 8019478:	6803      	ldr	r3, [r0, #0]
 801947a:	d20e      	bcs.n	801949a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801947c:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 8019480:	4632      	mov	r2, r6
 8019482:	4643      	mov	r3, r8
 8019484:	4621      	mov	r1, r4
 8019486:	47d0      	blx	sl
 8019488:	f8b9 3000 	ldrh.w	r3, [r9]
 801948c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019490:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8019494:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8019498:	e7ec      	b.n	8019474 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801949a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801949c:	4798      	blx	r3
 801949e:	e7bc      	b.n	801941a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 80194a0:	2400ae9c 	.word	0x2400ae9c
 80194a4:	2400ae9e 	.word	0x2400ae9e
 80194a8:	2400aea0 	.word	0x2400aea0
 80194ac:	2400aea4 	.word	0x2400aea4

080194b0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80194b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194b4:	b08b      	sub	sp, #44	; 0x2c
 80194b6:	460f      	mov	r7, r1
 80194b8:	4616      	mov	r6, r2
 80194ba:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 80194be:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 80194c2:	f1bb 0f00 	cmp.w	fp, #0
 80194c6:	d049      	beq.n	801955c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 80194c8:	6810      	ldr	r0, [r2, #0]
 80194ca:	ad06      	add	r5, sp, #24
 80194cc:	6851      	ldr	r1, [r2, #4]
 80194ce:	c503      	stmia	r5!, {r0, r1}
 80194d0:	6818      	ldr	r0, [r3, #0]
 80194d2:	ad08      	add	r5, sp, #32
 80194d4:	6859      	ldr	r1, [r3, #4]
 80194d6:	c503      	stmia	r5!, {r0, r1}
 80194d8:	a806      	add	r0, sp, #24
 80194da:	f7fa fd39 	bl	8013f50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80194de:	4631      	mov	r1, r6
 80194e0:	a808      	add	r0, sp, #32
 80194e2:	f7fa fd5d 	bl	8013fa0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80194e6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80194ea:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80194ee:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80194f2:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 80194f6:	fb16 2103 	smlabb	r1, r6, r3, r2
 80194fa:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 80194fe:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8019502:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8019506:	4f5f      	ldr	r7, [pc, #380]	; (8019684 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8019508:	440a      	add	r2, r1
 801950a:	6838      	ldr	r0, [r7, #0]
 801950c:	46b9      	mov	r9, r7
 801950e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8019512:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019516:	4413      	add	r3, r2
 8019518:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801951c:	6803      	ldr	r3, [r0, #0]
 801951e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019520:	4798      	blx	r3
 8019522:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8019526:	d01c      	beq.n	8019562 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 8019528:	f010 0f04 	tst.w	r0, #4
 801952c:	d01d      	beq.n	801956a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801952e:	f8d9 0000 	ldr.w	r0, [r9]
 8019532:	2700      	movs	r7, #0
 8019534:	b2ad      	uxth	r5, r5
 8019536:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801953a:	6801      	ldr	r1, [r0, #0]
 801953c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8019540:	f8cd b00c 	str.w	fp, [sp, #12]
 8019544:	9501      	str	r5, [sp, #4]
 8019546:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801954a:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801954e:	9402      	str	r4, [sp, #8]
 8019550:	fa1f f488 	uxth.w	r4, r8
 8019554:	9400      	str	r4, [sp, #0]
 8019556:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8019558:	4631      	mov	r1, r6
 801955a:	47a0      	blx	r4
 801955c:	b00b      	add	sp, #44	; 0x2c
 801955e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019562:	b914      	cbnz	r4, 801956a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8019564:	f010 0f01 	tst.w	r0, #1
 8019568:	e7e0      	b.n	801952c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801956a:	f8d9 0000 	ldr.w	r0, [r9]
 801956e:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8019572:	6803      	ldr	r3, [r0, #0]
 8019574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019576:	4798      	blx	r3
 8019578:	4b43      	ldr	r3, [pc, #268]	; (8019688 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801957a:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801957e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8019582:	881a      	ldrh	r2, [r3, #0]
 8019584:	469a      	mov	sl, r3
 8019586:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801958a:	fb05 f502 	mul.w	r5, r5, r2
 801958e:	fb02 1404 	mla	r4, r2, r4, r1
 8019592:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8019596:	d059      	beq.n	801964c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 8019598:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801959c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80195a0:	fa1f f28b 	uxth.w	r2, fp
 80195a4:	469e      	mov	lr, r3
 80195a6:	fa1f f989 	uxth.w	r9, r9
 80195aa:	42ac      	cmp	r4, r5
 80195ac:	d264      	bcs.n	8019678 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80195ae:	eb04 0a07 	add.w	sl, r4, r7
 80195b2:	4554      	cmp	r4, sl
 80195b4:	d23d      	bcs.n	8019632 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 80195b6:	8821      	ldrh	r1, [r4, #0]
 80195b8:	f836 3b02 	ldrh.w	r3, [r6], #2
 80195bc:	1208      	asrs	r0, r1, #8
 80195be:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80195c2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80195c6:	ea4f 0be1 	mov.w	fp, r1, asr #3
 80195ca:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80195ce:	00c9      	lsls	r1, r1, #3
 80195d0:	fb10 f009 	smulbb	r0, r0, r9
 80195d4:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80195d8:	b2c9      	uxtb	r1, r1
 80195da:	fb0c 0c02 	mla	ip, ip, r2, r0
 80195de:	10d8      	asrs	r0, r3, #3
 80195e0:	fb1b fb09 	smulbb	fp, fp, r9
 80195e4:	00db      	lsls	r3, r3, #3
 80195e6:	fa1f fc8c 	uxth.w	ip, ip
 80195ea:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80195ee:	fb11 f109 	smulbb	r1, r1, r9
 80195f2:	b2db      	uxtb	r3, r3
 80195f4:	fb00 b002 	mla	r0, r0, r2, fp
 80195f8:	f10c 0b01 	add.w	fp, ip, #1
 80195fc:	fb03 1302 	mla	r3, r3, r2, r1
 8019600:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8019604:	b29b      	uxth	r3, r3
 8019606:	b280      	uxth	r0, r0
 8019608:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801960c:	f103 0c01 	add.w	ip, r3, #1
 8019610:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8019614:	1c43      	adds	r3, r0, #1
 8019616:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801961a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801961e:	0940      	lsrs	r0, r0, #5
 8019620:	ea4c 0c0b 	orr.w	ip, ip, fp
 8019624:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8019628:	ea4c 0c00 	orr.w	ip, ip, r0
 801962c:	f824 cb02 	strh.w	ip, [r4], #2
 8019630:	e7bf      	b.n	80195b2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 8019632:	f8be 3000 	ldrh.w	r3, [lr]
 8019636:	eba3 0308 	sub.w	r3, r3, r8
 801963a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801963e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019642:	eba3 0308 	sub.w	r3, r3, r8
 8019646:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801964a:	e7ae      	b.n	80195aa <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801964c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8019650:	f8d9 0000 	ldr.w	r0, [r9]
 8019654:	42ac      	cmp	r4, r5
 8019656:	6803      	ldr	r3, [r0, #0]
 8019658:	d20e      	bcs.n	8019678 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801965a:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801965e:	4632      	mov	r2, r6
 8019660:	463b      	mov	r3, r7
 8019662:	4621      	mov	r1, r4
 8019664:	47c0      	blx	r8
 8019666:	f8ba 3000 	ldrh.w	r3, [sl]
 801966a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801966e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019672:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8019676:	e7eb      	b.n	8019650 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8019678:	4b02      	ldr	r3, [pc, #8]	; (8019684 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801967a:	6818      	ldr	r0, [r3, #0]
 801967c:	6803      	ldr	r3, [r0, #0]
 801967e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019680:	4798      	blx	r3
 8019682:	e76b      	b.n	801955c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8019684:	2400aea4 	.word	0x2400aea4
 8019688:	2400ae9e 	.word	0x2400ae9e

0801968c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801968c:	b510      	push	{r4, lr}
 801968e:	4604      	mov	r4, r0
 8019690:	2104      	movs	r1, #4
 8019692:	f008 ffc2 	bl	802261a <_ZdlPvj>
 8019696:	4620      	mov	r0, r4
 8019698:	bd10      	pop	{r4, pc}

0801969a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801969a:	b510      	push	{r4, lr}
 801969c:	4604      	mov	r4, r0
 801969e:	2104      	movs	r1, #4
 80196a0:	f008 ffbb 	bl	802261a <_ZdlPvj>
 80196a4:	4620      	mov	r0, r4
 80196a6:	bd10      	pop	{r4, pc}

080196a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 80196a8:	b510      	push	{r4, lr}
 80196aa:	4604      	mov	r4, r0
 80196ac:	2104      	movs	r1, #4
 80196ae:	f008 ffb4 	bl	802261a <_ZdlPvj>
 80196b2:	4620      	mov	r0, r4
 80196b4:	bd10      	pop	{r4, pc}

080196b6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 80196b6:	b510      	push	{r4, lr}
 80196b8:	4604      	mov	r4, r0
 80196ba:	2104      	movs	r1, #4
 80196bc:	f008 ffad 	bl	802261a <_ZdlPvj>
 80196c0:	4620      	mov	r0, r4
 80196c2:	bd10      	pop	{r4, pc}

080196c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80196c4:	b510      	push	{r4, lr}
 80196c6:	4604      	mov	r4, r0
 80196c8:	2104      	movs	r1, #4
 80196ca:	f008 ffa6 	bl	802261a <_ZdlPvj>
 80196ce:	4620      	mov	r0, r4
 80196d0:	bd10      	pop	{r4, pc}

080196d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80196d2:	b510      	push	{r4, lr}
 80196d4:	4604      	mov	r4, r0
 80196d6:	2104      	movs	r1, #4
 80196d8:	f008 ff9f 	bl	802261a <_ZdlPvj>
 80196dc:	4620      	mov	r0, r4
 80196de:	bd10      	pop	{r4, pc}

080196e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80196e0:	b510      	push	{r4, lr}
 80196e2:	4604      	mov	r4, r0
 80196e4:	2104      	movs	r1, #4
 80196e6:	f008 ff98 	bl	802261a <_ZdlPvj>
 80196ea:	4620      	mov	r0, r4
 80196ec:	bd10      	pop	{r4, pc}

080196ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80196ee:	b510      	push	{r4, lr}
 80196f0:	4604      	mov	r4, r0
 80196f2:	2104      	movs	r1, #4
 80196f4:	f008 ff91 	bl	802261a <_ZdlPvj>
 80196f8:	4620      	mov	r0, r4
 80196fa:	bd10      	pop	{r4, pc}

080196fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80196fc:	b510      	push	{r4, lr}
 80196fe:	4604      	mov	r4, r0
 8019700:	2104      	movs	r1, #4
 8019702:	f008 ff8a 	bl	802261a <_ZdlPvj>
 8019706:	4620      	mov	r0, r4
 8019708:	bd10      	pop	{r4, pc}

0801970a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801970a:	b510      	push	{r4, lr}
 801970c:	4604      	mov	r4, r0
 801970e:	2104      	movs	r1, #4
 8019710:	f008 ff83 	bl	802261a <_ZdlPvj>
 8019714:	4620      	mov	r0, r4
 8019716:	bd10      	pop	{r4, pc}

08019718 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8019718:	b510      	push	{r4, lr}
 801971a:	4604      	mov	r4, r0
 801971c:	2104      	movs	r1, #4
 801971e:	f008 ff7c 	bl	802261a <_ZdlPvj>
 8019722:	4620      	mov	r0, r4
 8019724:	bd10      	pop	{r4, pc}

08019726 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8019726:	b510      	push	{r4, lr}
 8019728:	4604      	mov	r4, r0
 801972a:	2104      	movs	r1, #4
 801972c:	f008 ff75 	bl	802261a <_ZdlPvj>
 8019730:	4620      	mov	r0, r4
 8019732:	bd10      	pop	{r4, pc}

08019734 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8019734:	b510      	push	{r4, lr}
 8019736:	4604      	mov	r4, r0
 8019738:	2104      	movs	r1, #4
 801973a:	f008 ff6e 	bl	802261a <_ZdlPvj>
 801973e:	4620      	mov	r0, r4
 8019740:	bd10      	pop	{r4, pc}

08019742 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8019742:	b510      	push	{r4, lr}
 8019744:	4604      	mov	r4, r0
 8019746:	2104      	movs	r1, #4
 8019748:	f008 ff67 	bl	802261a <_ZdlPvj>
 801974c:	4620      	mov	r0, r4
 801974e:	bd10      	pop	{r4, pc}

08019750 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8019750:	b510      	push	{r4, lr}
 8019752:	4604      	mov	r4, r0
 8019754:	2104      	movs	r1, #4
 8019756:	f008 ff60 	bl	802261a <_ZdlPvj>
 801975a:	4620      	mov	r0, r4
 801975c:	bd10      	pop	{r4, pc}

0801975e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801975e:	b510      	push	{r4, lr}
 8019760:	4604      	mov	r4, r0
 8019762:	2104      	movs	r1, #4
 8019764:	f008 ff59 	bl	802261a <_ZdlPvj>
 8019768:	4620      	mov	r0, r4
 801976a:	bd10      	pop	{r4, pc}

0801976c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801976c:	b510      	push	{r4, lr}
 801976e:	4604      	mov	r4, r0
 8019770:	2104      	movs	r1, #4
 8019772:	f008 ff52 	bl	802261a <_ZdlPvj>
 8019776:	4620      	mov	r0, r4
 8019778:	bd10      	pop	{r4, pc}

0801977a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801977a:	b510      	push	{r4, lr}
 801977c:	4604      	mov	r4, r0
 801977e:	2104      	movs	r1, #4
 8019780:	f008 ff4b 	bl	802261a <_ZdlPvj>
 8019784:	4620      	mov	r0, r4
 8019786:	bd10      	pop	{r4, pc}

08019788 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8019788:	b510      	push	{r4, lr}
 801978a:	4604      	mov	r4, r0
 801978c:	2104      	movs	r1, #4
 801978e:	f008 ff44 	bl	802261a <_ZdlPvj>
 8019792:	4620      	mov	r0, r4
 8019794:	bd10      	pop	{r4, pc}

08019796 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8019796:	b510      	push	{r4, lr}
 8019798:	4604      	mov	r4, r0
 801979a:	2104      	movs	r1, #4
 801979c:	f008 ff3d 	bl	802261a <_ZdlPvj>
 80197a0:	4620      	mov	r0, r4
 80197a2:	bd10      	pop	{r4, pc}

080197a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80197a4:	b510      	push	{r4, lr}
 80197a6:	4604      	mov	r4, r0
 80197a8:	2104      	movs	r1, #4
 80197aa:	f008 ff36 	bl	802261a <_ZdlPvj>
 80197ae:	4620      	mov	r0, r4
 80197b0:	bd10      	pop	{r4, pc}

080197b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80197b2:	b510      	push	{r4, lr}
 80197b4:	4604      	mov	r4, r0
 80197b6:	2104      	movs	r1, #4
 80197b8:	f008 ff2f 	bl	802261a <_ZdlPvj>
 80197bc:	4620      	mov	r0, r4
 80197be:	bd10      	pop	{r4, pc}

080197c0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80197c0:	b510      	push	{r4, lr}
 80197c2:	4604      	mov	r4, r0
 80197c4:	2104      	movs	r1, #4
 80197c6:	f008 ff28 	bl	802261a <_ZdlPvj>
 80197ca:	4620      	mov	r0, r4
 80197cc:	bd10      	pop	{r4, pc}

080197ce <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80197ce:	b510      	push	{r4, lr}
 80197d0:	4604      	mov	r4, r0
 80197d2:	2104      	movs	r1, #4
 80197d4:	f008 ff21 	bl	802261a <_ZdlPvj>
 80197d8:	4620      	mov	r0, r4
 80197da:	bd10      	pop	{r4, pc}

080197dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 80197dc:	b510      	push	{r4, lr}
 80197de:	4604      	mov	r4, r0
 80197e0:	2104      	movs	r1, #4
 80197e2:	f008 ff1a 	bl	802261a <_ZdlPvj>
 80197e6:	4620      	mov	r0, r4
 80197e8:	bd10      	pop	{r4, pc}

080197ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 80197ea:	b510      	push	{r4, lr}
 80197ec:	4604      	mov	r4, r0
 80197ee:	2104      	movs	r1, #4
 80197f0:	f008 ff13 	bl	802261a <_ZdlPvj>
 80197f4:	4620      	mov	r0, r4
 80197f6:	bd10      	pop	{r4, pc}

080197f8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 80197f8:	b510      	push	{r4, lr}
 80197fa:	4604      	mov	r4, r0
 80197fc:	2104      	movs	r1, #4
 80197fe:	f008 ff0c 	bl	802261a <_ZdlPvj>
 8019802:	4620      	mov	r0, r4
 8019804:	bd10      	pop	{r4, pc}

08019806 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8019806:	b510      	push	{r4, lr}
 8019808:	4604      	mov	r4, r0
 801980a:	2104      	movs	r1, #4
 801980c:	f008 ff05 	bl	802261a <_ZdlPvj>
 8019810:	4620      	mov	r0, r4
 8019812:	bd10      	pop	{r4, pc}

08019814 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8019814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019818:	b091      	sub	sp, #68	; 0x44
 801981a:	469b      	mov	fp, r3
 801981c:	4616      	mov	r6, r2
 801981e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019822:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8019826:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801982a:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 801982e:	4604      	mov	r4, r0
 8019830:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 8019834:	4640      	mov	r0, r8
 8019836:	460d      	mov	r5, r1
 8019838:	4659      	mov	r1, fp
 801983a:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801983e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8019842:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 8019846:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 801984a:	f7f8 fb43 	bl	8011ed4 <_ZN8touchgfx4RectaNERKS0_>
 801984e:	4631      	mov	r1, r6
 8019850:	4640      	mov	r0, r8
 8019852:	f7f8 fb3f 	bl	8011ed4 <_ZN8touchgfx4RectaNERKS0_>
 8019856:	4b74      	ldr	r3, [pc, #464]	; (8019a28 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8019858:	8818      	ldrh	r0, [r3, #0]
 801985a:	4b74      	ldr	r3, [pc, #464]	; (8019a2c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801985c:	b202      	sxth	r2, r0
 801985e:	8819      	ldrh	r1, [r3, #0]
 8019860:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8019864:	b20e      	sxth	r6, r1
 8019866:	2b00      	cmp	r3, #0
 8019868:	da07      	bge.n	801987a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801986a:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801986e:	4463      	add	r3, ip
 8019870:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8019874:	2300      	movs	r3, #0
 8019876:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801987a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801987e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8019882:	1ad2      	subs	r2, r2, r3
 8019884:	4594      	cmp	ip, r2
 8019886:	bfc4      	itt	gt
 8019888:	1ac2      	subgt	r2, r0, r3
 801988a:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 801988e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8019892:	2a00      	cmp	r2, #0
 8019894:	da07      	bge.n	80198a6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 8019896:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 801989a:	4462      	add	r2, ip
 801989c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 80198a0:	2200      	movs	r2, #0
 80198a2:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80198a6:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 80198aa:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 80198ae:	eba6 060a 	sub.w	r6, r6, sl
 80198b2:	42b2      	cmp	r2, r6
 80198b4:	bfc4      	itt	gt
 80198b6:	eba1 020a 	subgt.w	r2, r1, sl
 80198ba:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 80198be:	4a5c      	ldr	r2, [pc, #368]	; (8019a30 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 80198c0:	7812      	ldrb	r2, [r2, #0]
 80198c2:	b9a2      	cbnz	r2, 80198ee <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 80198c4:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 80198c8:	4286      	cmp	r6, r0
 80198ca:	4640      	mov	r0, r8
 80198cc:	9303      	str	r3, [sp, #12]
 80198ce:	bf14      	ite	ne
 80198d0:	2600      	movne	r6, #0
 80198d2:	2601      	moveq	r6, #1
 80198d4:	f7f8 fb41 	bl	8011f5a <_ZNK8touchgfx4Rect7isEmptyEv>
 80198d8:	9b03      	ldr	r3, [sp, #12]
 80198da:	b160      	cbz	r0, 80198f6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 80198dc:	2300      	movs	r3, #0
 80198de:	8023      	strh	r3, [r4, #0]
 80198e0:	8063      	strh	r3, [r4, #2]
 80198e2:	80a3      	strh	r3, [r4, #4]
 80198e4:	4620      	mov	r0, r4
 80198e6:	80e3      	strh	r3, [r4, #6]
 80198e8:	b011      	add	sp, #68	; 0x44
 80198ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198ee:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 80198f2:	428e      	cmp	r6, r1
 80198f4:	e7e9      	b.n	80198ca <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 80198f6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80198fa:	a90e      	add	r1, sp, #56	; 0x38
 80198fc:	900e      	str	r0, [sp, #56]	; 0x38
 80198fe:	a80c      	add	r0, sp, #48	; 0x30
 8019900:	9205      	str	r2, [sp, #20]
 8019902:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8019906:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 801990a:	9206      	str	r2, [sp, #24]
 801990c:	f8bb 2000 	ldrh.w	r2, [fp]
 8019910:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 8019914:	1a9b      	subs	r3, r3, r2
 8019916:	b21b      	sxth	r3, r3
 8019918:	9303      	str	r3, [sp, #12]
 801991a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801991e:	f8df b118 	ldr.w	fp, [pc, #280]	; 8019a38 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8019922:	ebaa 0a03 	sub.w	sl, sl, r3
 8019926:	fa0f f38a 	sxth.w	r3, sl
 801992a:	9304      	str	r3, [sp, #16]
 801992c:	9b03      	ldr	r3, [sp, #12]
 801992e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8019932:	9b04      	ldr	r3, [sp, #16]
 8019934:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8019938:	9b05      	ldr	r3, [sp, #20]
 801993a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801993e:	9b06      	ldr	r3, [sp, #24]
 8019940:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8019944:	f7fa fb2c 	bl	8013fa0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019948:	4640      	mov	r0, r8
 801994a:	f7fa fb01 	bl	8013f50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801994e:	a80e      	add	r0, sp, #56	; 0x38
 8019950:	f7fa fafe 	bl	8013f50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019954:	4b37      	ldr	r3, [pc, #220]	; (8019a34 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8019956:	4628      	mov	r0, r5
 8019958:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801995c:	881b      	ldrh	r3, [r3, #0]
 801995e:	9307      	str	r3, [sp, #28]
 8019960:	682b      	ldr	r3, [r5, #0]
 8019962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019964:	4798      	blx	r3
 8019966:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 801996a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801996e:	4681      	mov	r9, r0
 8019970:	f8db 0000 	ldr.w	r0, [fp]
 8019974:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8019978:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801997a:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801997e:	6803      	ldr	r3, [r0, #0]
 8019980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019982:	4798      	blx	r3
 8019984:	4607      	mov	r7, r0
 8019986:	f8db 0000 	ldr.w	r0, [fp]
 801998a:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801998e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8019992:	6803      	ldr	r3, [r0, #0]
 8019994:	9109      	str	r1, [sp, #36]	; 0x24
 8019996:	9208      	str	r2, [sp, #32]
 8019998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801999a:	4798      	blx	r3
 801999c:	f010 0f01 	tst.w	r0, #1
 80199a0:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80199a4:	d012      	beq.n	80199cc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 80199a6:	f8db 0000 	ldr.w	r0, [fp]
 80199aa:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 80199ae:	6803      	ldr	r3, [r0, #0]
 80199b0:	9200      	str	r2, [sp, #0]
 80199b2:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80199b4:	462b      	mov	r3, r5
 80199b6:	e898 0006 	ldmia.w	r8, {r1, r2}
 80199ba:	47b0      	blx	r6
 80199bc:	9b03      	ldr	r3, [sp, #12]
 80199be:	8023      	strh	r3, [r4, #0]
 80199c0:	9b04      	ldr	r3, [sp, #16]
 80199c2:	8063      	strh	r3, [r4, #2]
 80199c4:	9b05      	ldr	r3, [sp, #20]
 80199c6:	80a3      	strh	r3, [r4, #4]
 80199c8:	9b06      	ldr	r3, [sp, #24]
 80199ca:	e78b      	b.n	80198e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 80199cc:	fb09 f202 	mul.w	r2, r9, r2
 80199d0:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 80199d4:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80199d8:	440f      	add	r7, r1
 80199da:	b166      	cbz	r6, 80199f6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 80199dc:	9a07      	ldr	r2, [sp, #28]
 80199de:	4592      	cmp	sl, r2
 80199e0:	d109      	bne.n	80199f6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 80199e2:	f8db 0000 	ldr.w	r0, [fp]
 80199e6:	fb09 f303 	mul.w	r3, r9, r3
 80199ea:	4629      	mov	r1, r5
 80199ec:	6802      	ldr	r2, [r0, #0]
 80199ee:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80199f0:	463a      	mov	r2, r7
 80199f2:	47b0      	blx	r6
 80199f4:	e7e2      	b.n	80199bc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 80199f6:	fb0a f303 	mul.w	r3, sl, r3
 80199fa:	ea4f 064a 	mov.w	r6, sl, lsl #1
 80199fe:	f8df b038 	ldr.w	fp, [pc, #56]	; 8019a38 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8019a02:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8019a06:	4545      	cmp	r5, r8
 8019a08:	d2d8      	bcs.n	80199bc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8019a0a:	f8db 0000 	ldr.w	r0, [fp]
 8019a0e:	4629      	mov	r1, r5
 8019a10:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8019a14:	4435      	add	r5, r6
 8019a16:	6802      	ldr	r2, [r0, #0]
 8019a18:	005b      	lsls	r3, r3, #1
 8019a1a:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8019a1e:	463a      	mov	r2, r7
 8019a20:	47d0      	blx	sl
 8019a22:	444f      	add	r7, r9
 8019a24:	e7ef      	b.n	8019a06 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 8019a26:	bf00      	nop
 8019a28:	2400ae98 	.word	0x2400ae98
 8019a2c:	2400ae9a 	.word	0x2400ae9a
 8019a30:	2400ae9c 	.word	0x2400ae9c
 8019a34:	2400ae9e 	.word	0x2400ae9e
 8019a38:	2400aea4 	.word	0x2400aea4

08019a3c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8019a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a3e:	4606      	mov	r6, r0
 8019a40:	b087      	sub	sp, #28
 8019a42:	460c      	mov	r4, r1
 8019a44:	4617      	mov	r7, r2
 8019a46:	461d      	mov	r5, r3
 8019a48:	b333      	cbz	r3, 8019a98 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8019a4a:	4608      	mov	r0, r1
 8019a4c:	f7f8 fa85 	bl	8011f5a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019a50:	bb10      	cbnz	r0, 8019a98 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8019a52:	6820      	ldr	r0, [r4, #0]
 8019a54:	ab04      	add	r3, sp, #16
 8019a56:	6861      	ldr	r1, [r4, #4]
 8019a58:	4c1b      	ldr	r4, [pc, #108]	; (8019ac8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8019a5a:	c303      	stmia	r3!, {r0, r1}
 8019a5c:	a804      	add	r0, sp, #16
 8019a5e:	f7fa fa77 	bl	8013f50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019a62:	6820      	ldr	r0, [r4, #0]
 8019a64:	6803      	ldr	r3, [r0, #0]
 8019a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a68:	4798      	blx	r3
 8019a6a:	2dff      	cmp	r5, #255	; 0xff
 8019a6c:	d016      	beq.n	8019a9c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8019a6e:	f010 0f08 	tst.w	r0, #8
 8019a72:	6820      	ldr	r0, [r4, #0]
 8019a74:	d015      	beq.n	8019aa2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8019a76:	2400      	movs	r4, #0
 8019a78:	6801      	ldr	r1, [r0, #0]
 8019a7a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8019a7e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8019a82:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8019a86:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8019a8a:	9401      	str	r4, [sp, #4]
 8019a8c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8019a90:	9400      	str	r4, [sp, #0]
 8019a92:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8019a94:	4639      	mov	r1, r7
 8019a96:	47a0      	blx	r4
 8019a98:	b007      	add	sp, #28
 8019a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a9c:	f010 0f02 	tst.w	r0, #2
 8019aa0:	e7e7      	b.n	8019a72 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8019aa2:	6803      	ldr	r3, [r0, #0]
 8019aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019aa6:	4798      	blx	r3
 8019aa8:	4b08      	ldr	r3, [pc, #32]	; (8019acc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8019aaa:	4601      	mov	r1, r0
 8019aac:	4630      	mov	r0, r6
 8019aae:	881a      	ldrh	r2, [r3, #0]
 8019ab0:	6833      	ldr	r3, [r6, #0]
 8019ab2:	e9cd 7500 	strd	r7, r5, [sp]
 8019ab6:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8019ab8:	ab04      	add	r3, sp, #16
 8019aba:	47a8      	blx	r5
 8019abc:	6820      	ldr	r0, [r4, #0]
 8019abe:	6803      	ldr	r3, [r0, #0]
 8019ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ac2:	4798      	blx	r3
 8019ac4:	e7e8      	b.n	8019a98 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8019ac6:	bf00      	nop
 8019ac8:	2400aea4 	.word	0x2400aea4
 8019acc:	2400ae9e 	.word	0x2400ae9e

08019ad0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8019ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ad4:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8019ad8:	4688      	mov	r8, r1
 8019ada:	4614      	mov	r4, r2
 8019adc:	461d      	mov	r5, r3
 8019ade:	9e08      	ldr	r6, [sp, #32]
 8019ae0:	2f00      	cmp	r7, #0
 8019ae2:	f000 80ab 	beq.w	8019c3c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8019ae6:	4618      	mov	r0, r3
 8019ae8:	f7f8 fa37 	bl	8011f5a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019aec:	2800      	cmp	r0, #0
 8019aee:	f040 80a5 	bne.w	8019c3c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8019af2:	f9b5 1000 	ldrsh.w	r1, [r5]
 8019af6:	2fff      	cmp	r7, #255	; 0xff
 8019af8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8019afc:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8019b00:	fb04 1303 	mla	r3, r4, r3, r1
 8019b04:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8019b08:	eba4 0200 	sub.w	r2, r4, r0
 8019b0c:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8019b10:	fb04 f505 	mul.w	r5, r4, r5
 8019b14:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8019b18:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8019b1c:	d04a      	beq.n	8019bb4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 8019b1e:	b2bc      	uxth	r4, r7
 8019b20:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8019b24:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8019b28:	fa5f f788 	uxtb.w	r7, r8
 8019b2c:	b2f3      	uxtb	r3, r6
 8019b2e:	0040      	lsls	r0, r0, #1
 8019b30:	fb0e fe04 	mul.w	lr, lr, r4
 8019b34:	4367      	muls	r7, r4
 8019b36:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8019b3a:	4363      	muls	r3, r4
 8019b3c:	fa1f fc8c 	uxth.w	ip, ip
 8019b40:	42a9      	cmp	r1, r5
 8019b42:	d27b      	bcs.n	8019c3c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8019b44:	eb01 0900 	add.w	r9, r1, r0
 8019b48:	4549      	cmp	r1, r9
 8019b4a:	d231      	bcs.n	8019bb0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 8019b4c:	880a      	ldrh	r2, [r1, #0]
 8019b4e:	1214      	asrs	r4, r2, #8
 8019b50:	10d6      	asrs	r6, r2, #3
 8019b52:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8019b56:	00d2      	lsls	r2, r2, #3
 8019b58:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019b5c:	b2d2      	uxtb	r2, r2
 8019b5e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8019b62:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8019b66:	fb14 f40c 	smulbb	r4, r4, ip
 8019b6a:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8019b6e:	fb12 f20c 	smulbb	r2, r2, ip
 8019b72:	fb16 f60c 	smulbb	r6, r6, ip
 8019b76:	4474      	add	r4, lr
 8019b78:	441a      	add	r2, r3
 8019b7a:	b2a4      	uxth	r4, r4
 8019b7c:	443e      	add	r6, r7
 8019b7e:	b292      	uxth	r2, r2
 8019b80:	f104 0a01 	add.w	sl, r4, #1
 8019b84:	b2b6      	uxth	r6, r6
 8019b86:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8019b8a:	f102 0a01 	add.w	sl, r2, #1
 8019b8e:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8019b92:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8019b96:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8019b9a:	4322      	orrs	r2, r4
 8019b9c:	1c74      	adds	r4, r6, #1
 8019b9e:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8019ba2:	0976      	lsrs	r6, r6, #5
 8019ba4:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019ba8:	4332      	orrs	r2, r6
 8019baa:	f821 2b02 	strh.w	r2, [r1], #2
 8019bae:	e7cb      	b.n	8019b48 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 8019bb0:	4441      	add	r1, r8
 8019bb2:	e7c5      	b.n	8019b40 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 8019bb4:	0973      	lsrs	r3, r6, #5
 8019bb6:	4f22      	ldr	r7, [pc, #136]	; (8019c40 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 8019bb8:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8019bbc:	ea08 0707 	and.w	r7, r8, r7
 8019bc0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019bc4:	433b      	orrs	r3, r7
 8019bc6:	07e7      	lsls	r7, r4, #31
 8019bc8:	ea43 0306 	orr.w	r3, r3, r6
 8019bcc:	b29b      	uxth	r3, r3
 8019bce:	d50b      	bpl.n	8019be8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 8019bd0:	0040      	lsls	r0, r0, #1
 8019bd2:	0052      	lsls	r2, r2, #1
 8019bd4:	42a9      	cmp	r1, r5
 8019bd6:	d231      	bcs.n	8019c3c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8019bd8:	180c      	adds	r4, r1, r0
 8019bda:	42a1      	cmp	r1, r4
 8019bdc:	d202      	bcs.n	8019be4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8019bde:	f821 3b02 	strh.w	r3, [r1], #2
 8019be2:	e7fa      	b.n	8019bda <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 8019be4:	4411      	add	r1, r2
 8019be6:	e7f5      	b.n	8019bd4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 8019be8:	078e      	lsls	r6, r1, #30
 8019bea:	d008      	beq.n	8019bfe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 8019bec:	0066      	lsls	r6, r4, #1
 8019bee:	460a      	mov	r2, r1
 8019bf0:	42aa      	cmp	r2, r5
 8019bf2:	d202      	bcs.n	8019bfa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8019bf4:	8013      	strh	r3, [r2, #0]
 8019bf6:	4432      	add	r2, r6
 8019bf8:	e7fa      	b.n	8019bf0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 8019bfa:	3102      	adds	r1, #2
 8019bfc:	3801      	subs	r0, #1
 8019bfe:	07c2      	lsls	r2, r0, #31
 8019c00:	d50b      	bpl.n	8019c1a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 8019c02:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 8019c06:	0066      	lsls	r6, r4, #1
 8019c08:	3a01      	subs	r2, #1
 8019c0a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8019c0e:	42aa      	cmp	r2, r5
 8019c10:	d202      	bcs.n	8019c18 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 8019c12:	8013      	strh	r3, [r2, #0]
 8019c14:	4432      	add	r2, r6
 8019c16:	e7fa      	b.n	8019c0e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 8019c18:	3801      	subs	r0, #1
 8019c1a:	b178      	cbz	r0, 8019c3c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8019c1c:	1040      	asrs	r0, r0, #1
 8019c1e:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8019c22:	0080      	lsls	r0, r0, #2
 8019c24:	0064      	lsls	r4, r4, #1
 8019c26:	42a9      	cmp	r1, r5
 8019c28:	d208      	bcs.n	8019c3c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8019c2a:	180e      	adds	r6, r1, r0
 8019c2c:	460a      	mov	r2, r1
 8019c2e:	42b2      	cmp	r2, r6
 8019c30:	d202      	bcs.n	8019c38 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8019c32:	f842 3b04 	str.w	r3, [r2], #4
 8019c36:	e7fa      	b.n	8019c2e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 8019c38:	4421      	add	r1, r4
 8019c3a:	e7f4      	b.n	8019c26 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 8019c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c40:	00fff800 	.word	0x00fff800

08019c44 <_ZN8touchgfx8LCD16bppC1Ev>:
 8019c44:	2200      	movs	r2, #0
 8019c46:	4910      	ldr	r1, [pc, #64]	; (8019c88 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8019c48:	6042      	str	r2, [r0, #4]
 8019c4a:	6001      	str	r1, [r0, #0]
 8019c4c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8019c50:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8019c54:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8019c58:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8019c5c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8019c60:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8019c64:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8019c68:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8019c6c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8019c70:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8019c74:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8019c78:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8019c7c:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8019c80:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8019c84:	4770      	bx	lr
 8019c86:	bf00      	nop
 8019c88:	080253e4 	.word	0x080253e4

08019c8c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8019c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c90:	b08d      	sub	sp, #52	; 0x34
 8019c92:	460d      	mov	r5, r1
 8019c94:	4604      	mov	r4, r0
 8019c96:	4699      	mov	r9, r3
 8019c98:	6808      	ldr	r0, [r1, #0]
 8019c9a:	ab08      	add	r3, sp, #32
 8019c9c:	6849      	ldr	r1, [r1, #4]
 8019c9e:	c303      	stmia	r3!, {r0, r1}
 8019ca0:	6810      	ldr	r0, [r2, #0]
 8019ca2:	ab0a      	add	r3, sp, #40	; 0x28
 8019ca4:	6851      	ldr	r1, [r2, #4]
 8019ca6:	c303      	stmia	r3!, {r0, r1}
 8019ca8:	a808      	add	r0, sp, #32
 8019caa:	f7fa f951 	bl	8013f50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019cae:	4629      	mov	r1, r5
 8019cb0:	a80a      	add	r0, sp, #40	; 0x28
 8019cb2:	4d67      	ldr	r5, [pc, #412]	; (8019e50 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8019cb4:	f7fa f974 	bl	8013fa0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019cb8:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8019cbc:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8019cc0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8019cc4:	6828      	ldr	r0, [r5, #0]
 8019cc6:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019cca:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8019cce:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8019cd2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8019cd6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8019cda:	440a      	add	r2, r1
 8019cdc:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8019ce0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8019ce4:	4413      	add	r3, r2
 8019ce6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8019cea:	6803      	ldr	r3, [r0, #0]
 8019cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019cee:	4798      	blx	r3
 8019cf0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8019cf4:	d119      	bne.n	8019d2a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8019cf6:	f010 0f20 	tst.w	r0, #32
 8019cfa:	6828      	ldr	r0, [r5, #0]
 8019cfc:	d018      	beq.n	8019d30 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8019cfe:	2500      	movs	r5, #0
 8019d00:	6801      	ldr	r1, [r0, #0]
 8019d02:	b2b6      	uxth	r6, r6
 8019d04:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8019d08:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8019d0c:	9601      	str	r6, [sp, #4]
 8019d0e:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8019d12:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8019d16:	9502      	str	r5, [sp, #8]
 8019d18:	fa1f f588 	uxth.w	r5, r8
 8019d1c:	9500      	str	r5, [sp, #0]
 8019d1e:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8019d20:	4621      	mov	r1, r4
 8019d22:	47a8      	blx	r5
 8019d24:	b00d      	add	sp, #52	; 0x34
 8019d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019d2e:	e7e4      	b.n	8019cfa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8019d30:	6803      	ldr	r3, [r0, #0]
 8019d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019d34:	4798      	blx	r3
 8019d36:	4947      	ldr	r1, [pc, #284]	; (8019e54 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8019d38:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8019d3c:	880b      	ldrh	r3, [r1, #0]
 8019d3e:	468a      	mov	sl, r1
 8019d40:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8019d44:	fb03 5202 	mla	r2, r3, r2, r5
 8019d48:	4373      	muls	r3, r6
 8019d4a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8019d4e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019d52:	9307      	str	r3, [sp, #28]
 8019d54:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8019d58:	9306      	str	r3, [sp, #24]
 8019d5a:	9b07      	ldr	r3, [sp, #28]
 8019d5c:	4298      	cmp	r0, r3
 8019d5e:	d270      	bcs.n	8019e42 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8019d60:	9b06      	ldr	r3, [sp, #24]
 8019d62:	4621      	mov	r1, r4
 8019d64:	eb00 0b03 	add.w	fp, r0, r3
 8019d68:	4558      	cmp	r0, fp
 8019d6a:	d25d      	bcs.n	8019e28 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8019d6c:	f851 4b04 	ldr.w	r4, [r1], #4
 8019d70:	0e23      	lsrs	r3, r4, #24
 8019d72:	d014      	beq.n	8019d9e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8019d74:	2bff      	cmp	r3, #255	; 0xff
 8019d76:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8019d7a:	d112      	bne.n	8019da2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8019d7c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8019d80:	d10f      	bne.n	8019da2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8019d82:	0963      	lsrs	r3, r4, #5
 8019d84:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8019d88:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8019d8c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019d90:	f02c 0c07 	bic.w	ip, ip, #7
 8019d94:	ea43 0c0c 	orr.w	ip, r3, ip
 8019d98:	ea4c 0404 	orr.w	r4, ip, r4
 8019d9c:	8004      	strh	r4, [r0, #0]
 8019d9e:	3002      	adds	r0, #2
 8019da0:	e7e2      	b.n	8019d68 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8019da2:	fb09 f303 	mul.w	r3, r9, r3
 8019da6:	8807      	ldrh	r7, [r0, #0]
 8019da8:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8019dac:	fa5f fc8c 	uxtb.w	ip, ip
 8019db0:	1c5a      	adds	r2, r3, #1
 8019db2:	123e      	asrs	r6, r7, #8
 8019db4:	10fd      	asrs	r5, r7, #3
 8019db6:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8019dba:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8019dbe:	00ff      	lsls	r7, r7, #3
 8019dc0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8019dc4:	1212      	asrs	r2, r2, #8
 8019dc6:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8019dca:	b293      	uxth	r3, r2
 8019dcc:	43d2      	mvns	r2, r2
 8019dce:	b2ff      	uxtb	r7, r7
 8019dd0:	fb1e fe03 	smulbb	lr, lr, r3
 8019dd4:	b2d2      	uxtb	r2, r2
 8019dd6:	fb1c fc03 	smulbb	ip, ip, r3
 8019dda:	b2e4      	uxtb	r4, r4
 8019ddc:	fb06 e602 	mla	r6, r6, r2, lr
 8019de0:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8019de4:	fb14 f403 	smulbb	r4, r4, r3
 8019de8:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8019dec:	b2b6      	uxth	r6, r6
 8019dee:	fb05 c502 	mla	r5, r5, r2, ip
 8019df2:	fb07 4702 	mla	r7, r7, r2, r4
 8019df6:	f106 0e01 	add.w	lr, r6, #1
 8019dfa:	b2ad      	uxth	r5, r5
 8019dfc:	b2bf      	uxth	r7, r7
 8019dfe:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8019e02:	f105 0c01 	add.w	ip, r5, #1
 8019e06:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 8019e0a:	1c7e      	adds	r6, r7, #1
 8019e0c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8019e10:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8019e14:	096d      	lsrs	r5, r5, #5
 8019e16:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8019e1a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8019e1e:	ea46 060e 	orr.w	r6, r6, lr
 8019e22:	432e      	orrs	r6, r5
 8019e24:	8006      	strh	r6, [r0, #0]
 8019e26:	e7ba      	b.n	8019d9e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8019e28:	f8ba 3000 	ldrh.w	r3, [sl]
 8019e2c:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 8019e30:	eba3 0308 	sub.w	r3, r3, r8
 8019e34:	eba4 0408 	sub.w	r4, r4, r8
 8019e38:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019e3c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8019e40:	e78b      	b.n	8019d5a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8019e42:	4b03      	ldr	r3, [pc, #12]	; (8019e50 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8019e44:	6818      	ldr	r0, [r3, #0]
 8019e46:	6803      	ldr	r3, [r0, #0]
 8019e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e4a:	4798      	blx	r3
 8019e4c:	e76a      	b.n	8019d24 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8019e4e:	bf00      	nop
 8019e50:	2400aea4 	.word	0x2400aea4
 8019e54:	2400ae9e 	.word	0x2400ae9e

08019e58 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8019e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019e5c:	b085      	sub	sp, #20
 8019e5e:	6810      	ldr	r0, [r2, #0]
 8019e60:	460c      	mov	r4, r1
 8019e62:	6851      	ldr	r1, [r2, #4]
 8019e64:	466d      	mov	r5, sp
 8019e66:	4616      	mov	r6, r2
 8019e68:	c503      	stmia	r5!, {r0, r1}
 8019e6a:	6818      	ldr	r0, [r3, #0]
 8019e6c:	6859      	ldr	r1, [r3, #4]
 8019e6e:	c503      	stmia	r5!, {r0, r1}
 8019e70:	4668      	mov	r0, sp
 8019e72:	4d2e      	ldr	r5, [pc, #184]	; (8019f2c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8019e74:	f7fa f86c 	bl	8013f50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019e78:	4631      	mov	r1, r6
 8019e7a:	a802      	add	r0, sp, #8
 8019e7c:	4e2c      	ldr	r6, [pc, #176]	; (8019f30 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8019e7e:	f7fa f88f 	bl	8013fa0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019e82:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8019e86:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8019e8a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8019e8e:	6828      	ldr	r0, [r5, #0]
 8019e90:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019e94:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8019e98:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8019e9c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8019ea0:	f8bd 1000 	ldrh.w	r1, [sp]
 8019ea4:	440a      	add	r2, r1
 8019ea6:	f8ad 2008 	strh.w	r2, [sp, #8]
 8019eaa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8019eae:	4413      	add	r3, r2
 8019eb0:	f8ad 300a 	strh.w	r3, [sp, #10]
 8019eb4:	6803      	ldr	r3, [r0, #0]
 8019eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019eb8:	4798      	blx	r3
 8019eba:	8833      	ldrh	r3, [r6, #0]
 8019ebc:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8019ec0:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8019ec4:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8019ec8:	f8df e068 	ldr.w	lr, [pc, #104]	; 8019f34 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8019ecc:	fb03 1202 	mla	r2, r3, r2, r1
 8019ed0:	fb08 f303 	mul.w	r3, r8, r3
 8019ed4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8019ed8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019edc:	4298      	cmp	r0, r3
 8019ede:	d21d      	bcs.n	8019f1c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8019ee0:	eb00 080c 	add.w	r8, r0, ip
 8019ee4:	4540      	cmp	r0, r8
 8019ee6:	d20f      	bcs.n	8019f08 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8019ee8:	f854 1b04 	ldr.w	r1, [r4], #4
 8019eec:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8019ef0:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8019ef4:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8019ef8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8019efc:	ea42 0209 	orr.w	r2, r2, r9
 8019f00:	430a      	orrs	r2, r1
 8019f02:	f820 2b02 	strh.w	r2, [r0], #2
 8019f06:	e7ed      	b.n	8019ee4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8019f08:	8832      	ldrh	r2, [r6, #0]
 8019f0a:	1bd2      	subs	r2, r2, r7
 8019f0c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8019f10:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8019f14:	1bd2      	subs	r2, r2, r7
 8019f16:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8019f1a:	e7df      	b.n	8019edc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8019f1c:	6828      	ldr	r0, [r5, #0]
 8019f1e:	6803      	ldr	r3, [r0, #0]
 8019f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019f22:	4798      	blx	r3
 8019f24:	b005      	add	sp, #20
 8019f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019f2a:	bf00      	nop
 8019f2c:	2400aea4 	.word	0x2400aea4
 8019f30:	2400ae9e 	.word	0x2400ae9e
 8019f34:	fffff800 	.word	0xfffff800

08019f38 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8019f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f3c:	b08e      	sub	sp, #56	; 0x38
 8019f3e:	460e      	mov	r6, r1
 8019f40:	4604      	mov	r4, r0
 8019f42:	461d      	mov	r5, r3
 8019f44:	6808      	ldr	r0, [r1, #0]
 8019f46:	ab0a      	add	r3, sp, #40	; 0x28
 8019f48:	6849      	ldr	r1, [r1, #4]
 8019f4a:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 801a120 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 8019f4e:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801a124 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8019f52:	c303      	stmia	r3!, {r0, r1}
 8019f54:	6810      	ldr	r0, [r2, #0]
 8019f56:	ab0c      	add	r3, sp, #48	; 0x30
 8019f58:	6851      	ldr	r1, [r2, #4]
 8019f5a:	c303      	stmia	r3!, {r0, r1}
 8019f5c:	a80a      	add	r0, sp, #40	; 0x28
 8019f5e:	f7f9 fff7 	bl	8013f50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019f62:	4631      	mov	r1, r6
 8019f64:	a80c      	add	r0, sp, #48	; 0x30
 8019f66:	f7fa f81b 	bl	8013fa0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019f6a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8019f6e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8019f72:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8019f76:	f8d8 0000 	ldr.w	r0, [r8]
 8019f7a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019f7e:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8019f82:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 8019f86:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019f8a:	440c      	add	r4, r1
 8019f8c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8019f90:	440a      	add	r2, r1
 8019f92:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8019f96:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8019f9a:	4413      	add	r3, r2
 8019f9c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8019fa0:	6803      	ldr	r3, [r0, #0]
 8019fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019fa4:	4798      	blx	r3
 8019fa6:	2dff      	cmp	r5, #255	; 0xff
 8019fa8:	d124      	bne.n	8019ff4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8019faa:	f010 0f01 	tst.w	r0, #1
 8019fae:	f8d8 0000 	ldr.w	r0, [r8]
 8019fb2:	d022      	beq.n	8019ffa <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8019fb4:	2100      	movs	r1, #0
 8019fb6:	f04f 0e01 	mov.w	lr, #1
 8019fba:	f8d0 c000 	ldr.w	ip, [r0]
 8019fbe:	b2b6      	uxth	r6, r6
 8019fc0:	f8cd e018 	str.w	lr, [sp, #24]
 8019fc4:	b2bf      	uxth	r7, r7
 8019fc6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8019fca:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8019fce:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8019fd2:	f8b9 e000 	ldrh.w	lr, [r9]
 8019fd6:	9503      	str	r5, [sp, #12]
 8019fd8:	9601      	str	r6, [sp, #4]
 8019fda:	9700      	str	r7, [sp, #0]
 8019fdc:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8019fe0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8019fe4:	9102      	str	r1, [sp, #8]
 8019fe6:	4621      	mov	r1, r4
 8019fe8:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 8019fec:	47a8      	blx	r5
 8019fee:	b00e      	add	sp, #56	; 0x38
 8019ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ff4:	f010 0f04 	tst.w	r0, #4
 8019ff8:	e7d9      	b.n	8019fae <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 8019ffa:	6803      	ldr	r3, [r0, #0]
 8019ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019ffe:	4798      	blx	r3
 801a000:	f8b9 3000 	ldrh.w	r3, [r9]
 801a004:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801a008:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801a00c:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801a010:	435e      	muls	r6, r3
 801a012:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801a016:	2dff      	cmp	r5, #255	; 0xff
 801a018:	fb03 1202 	mla	r2, r3, r2, r1
 801a01c:	ebac 0c07 	sub.w	ip, ip, r7
 801a020:	eba3 0707 	sub.w	r7, r3, r7
 801a024:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801a028:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801a02c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801a030:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801a034:	d049      	beq.n	801a0ca <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801a036:	43eb      	mvns	r3, r5
 801a038:	fa1f f985 	uxth.w	r9, r5
 801a03c:	b2db      	uxtb	r3, r3
 801a03e:	42b0      	cmp	r0, r6
 801a040:	d266      	bcs.n	801a110 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801a042:	eb00 0a0e 	add.w	sl, r0, lr
 801a046:	4550      	cmp	r0, sl
 801a048:	4621      	mov	r1, r4
 801a04a:	f104 0403 	add.w	r4, r4, #3
 801a04e:	d25b      	bcs.n	801a108 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801a050:	8802      	ldrh	r2, [r0, #0]
 801a052:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801a056:	ea4f 2822 	mov.w	r8, r2, asr #8
 801a05a:	fb11 f109 	smulbb	r1, r1, r9
 801a05e:	10d5      	asrs	r5, r2, #3
 801a060:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801a064:	00d2      	lsls	r2, r2, #3
 801a066:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801a06a:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801a06e:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801a072:	fb08 1803 	mla	r8, r8, r3, r1
 801a076:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801a07a:	b2d2      	uxtb	r2, r2
 801a07c:	fb11 f109 	smulbb	r1, r1, r9
 801a080:	fa1f f888 	uxth.w	r8, r8
 801a084:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801a088:	fb05 1503 	mla	r5, r5, r3, r1
 801a08c:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801a090:	fb11 f109 	smulbb	r1, r1, r9
 801a094:	b2ad      	uxth	r5, r5
 801a096:	fb02 1203 	mla	r2, r2, r3, r1
 801a09a:	f108 0101 	add.w	r1, r8, #1
 801a09e:	b292      	uxth	r2, r2
 801a0a0:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801a0a4:	1c51      	adds	r1, r2, #1
 801a0a6:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801a0aa:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801a0ae:	1c69      	adds	r1, r5, #1
 801a0b0:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801a0b4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801a0b8:	096d      	lsrs	r5, r5, #5
 801a0ba:	ea42 0208 	orr.w	r2, r2, r8
 801a0be:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801a0c2:	432a      	orrs	r2, r5
 801a0c4:	f820 2b02 	strh.w	r2, [r0], #2
 801a0c8:	e7bd      	b.n	801a046 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801a0ca:	4a14      	ldr	r2, [pc, #80]	; (801a11c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801a0cc:	42b0      	cmp	r0, r6
 801a0ce:	d21f      	bcs.n	801a110 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801a0d0:	eb00 050e 	add.w	r5, r0, lr
 801a0d4:	42a8      	cmp	r0, r5
 801a0d6:	4621      	mov	r1, r4
 801a0d8:	f104 0403 	add.w	r4, r4, #3
 801a0dc:	d210      	bcs.n	801a100 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801a0de:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801a0e2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801a0e6:	00db      	lsls	r3, r3, #3
 801a0e8:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801a0ec:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a0f0:	430b      	orrs	r3, r1
 801a0f2:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801a0f6:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801a0fa:	f820 3b02 	strh.w	r3, [r0], #2
 801a0fe:	e7e9      	b.n	801a0d4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801a100:	4438      	add	r0, r7
 801a102:	eb01 040c 	add.w	r4, r1, ip
 801a106:	e7e1      	b.n	801a0cc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801a108:	4438      	add	r0, r7
 801a10a:	eb01 040c 	add.w	r4, r1, ip
 801a10e:	e796      	b.n	801a03e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801a110:	4b03      	ldr	r3, [pc, #12]	; (801a120 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801a112:	6818      	ldr	r0, [r3, #0]
 801a114:	6803      	ldr	r3, [r0, #0]
 801a116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a118:	4798      	blx	r3
 801a11a:	e768      	b.n	8019fee <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801a11c:	fffff800 	.word	0xfffff800
 801a120:	2400aea4 	.word	0x2400aea4
 801a124:	2400ae9e 	.word	0x2400ae9e

0801a128 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801a128:	b4f0      	push	{r4, r5, r6, r7}
 801a12a:	4616      	mov	r6, r2
 801a12c:	461c      	mov	r4, r3
 801a12e:	460d      	mov	r5, r1
 801a130:	9a04      	ldr	r2, [sp, #16]
 801a132:	2e01      	cmp	r6, #1
 801a134:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801a138:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801a13c:	d012      	beq.n	801a164 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 801a13e:	d303      	bcc.n	801a148 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 801a140:	2e02      	cmp	r6, #2
 801a142:	d00a      	beq.n	801a15a <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 801a144:	bcf0      	pop	{r4, r5, r6, r7}
 801a146:	4770      	bx	lr
 801a148:	6805      	ldr	r5, [r0, #0]
 801a14a:	e9cd 3704 	strd	r3, r7, [sp, #16]
 801a14e:	68ed      	ldr	r5, [r5, #12]
 801a150:	4613      	mov	r3, r2
 801a152:	4622      	mov	r2, r4
 801a154:	46ac      	mov	ip, r5
 801a156:	bcf0      	pop	{r4, r5, r6, r7}
 801a158:	4760      	bx	ip
 801a15a:	4621      	mov	r1, r4
 801a15c:	4628      	mov	r0, r5
 801a15e:	bcf0      	pop	{r4, r5, r6, r7}
 801a160:	f7ff bd94 	b.w	8019c8c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801a164:	4621      	mov	r1, r4
 801a166:	4628      	mov	r0, r5
 801a168:	bcf0      	pop	{r4, r5, r6, r7}
 801a16a:	f7ff bee5 	b.w	8019f38 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0801a170 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801a170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a174:	b093      	sub	sp, #76	; 0x4c
 801a176:	4681      	mov	r9, r0
 801a178:	4688      	mov	r8, r1
 801a17a:	6810      	ldr	r0, [r2, #0]
 801a17c:	6851      	ldr	r1, [r2, #4]
 801a17e:	ac0e      	add	r4, sp, #56	; 0x38
 801a180:	4616      	mov	r6, r2
 801a182:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801a186:	4f6b      	ldr	r7, [pc, #428]	; (801a334 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801a188:	c403      	stmia	r4!, {r0, r1}
 801a18a:	6818      	ldr	r0, [r3, #0]
 801a18c:	ac10      	add	r4, sp, #64	; 0x40
 801a18e:	6859      	ldr	r1, [r3, #4]
 801a190:	c403      	stmia	r4!, {r0, r1}
 801a192:	a80e      	add	r0, sp, #56	; 0x38
 801a194:	f7f9 fedc 	bl	8013f50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a198:	4631      	mov	r1, r6
 801a19a:	a810      	add	r0, sp, #64	; 0x40
 801a19c:	4e66      	ldr	r6, [pc, #408]	; (801a338 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801a19e:	f7f9 feff 	bl	8013fa0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a1a2:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801a1a6:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801a1aa:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801a1ae:	6830      	ldr	r0, [r6, #0]
 801a1b0:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a1b4:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801a1b8:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801a1bc:	4489      	add	r9, r1
 801a1be:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801a1c2:	440a      	add	r2, r1
 801a1c4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801a1c8:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801a1cc:	4413      	add	r3, r2
 801a1ce:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801a1d2:	6803      	ldr	r3, [r0, #0]
 801a1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a1d6:	4798      	blx	r3
 801a1d8:	f010 0f80 	tst.w	r0, #128	; 0x80
 801a1dc:	6830      	ldr	r0, [r6, #0]
 801a1de:	d01d      	beq.n	801a21c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801a1e0:	2200      	movs	r2, #0
 801a1e2:	6801      	ldr	r1, [r0, #0]
 801a1e4:	b2a4      	uxth	r4, r4
 801a1e6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801a1ea:	b2ad      	uxth	r5, r5
 801a1ec:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801a1f0:	220b      	movs	r2, #11
 801a1f2:	9207      	str	r2, [sp, #28]
 801a1f4:	883a      	ldrh	r2, [r7, #0]
 801a1f6:	9502      	str	r5, [sp, #8]
 801a1f8:	9206      	str	r2, [sp, #24]
 801a1fa:	2201      	movs	r2, #1
 801a1fc:	9401      	str	r4, [sp, #4]
 801a1fe:	e9cd a204 	strd	sl, r2, [sp, #16]
 801a202:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801a206:	9203      	str	r2, [sp, #12]
 801a208:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801a20c:	9200      	str	r2, [sp, #0]
 801a20e:	4642      	mov	r2, r8
 801a210:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801a212:	4649      	mov	r1, r9
 801a214:	47a0      	blx	r4
 801a216:	b013      	add	sp, #76	; 0x4c
 801a218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a21c:	6803      	ldr	r3, [r0, #0]
 801a21e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a220:	4798      	blx	r3
 801a222:	883b      	ldrh	r3, [r7, #0]
 801a224:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801a228:	f04f 0e04 	mov.w	lr, #4
 801a22c:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801a230:	435d      	muls	r5, r3
 801a232:	fb03 1202 	mla	r2, r3, r2, r1
 801a236:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801a23a:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801a23e:	920c      	str	r2, [sp, #48]	; 0x30
 801a240:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801a244:	1b12      	subs	r2, r2, r4
 801a246:	920d      	str	r2, [sp, #52]	; 0x34
 801a248:	0062      	lsls	r2, r4, #1
 801a24a:	1b1c      	subs	r4, r3, r4
 801a24c:	920a      	str	r2, [sp, #40]	; 0x28
 801a24e:	0063      	lsls	r3, r4, #1
 801a250:	930b      	str	r3, [sp, #44]	; 0x2c
 801a252:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a254:	4298      	cmp	r0, r3
 801a256:	d266      	bcs.n	801a326 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 801a258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a25a:	eb00 0b03 	add.w	fp, r0, r3
 801a25e:	4558      	cmp	r0, fp
 801a260:	d25c      	bcs.n	801a31c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801a262:	f819 3b01 	ldrb.w	r3, [r9], #1
 801a266:	fb1e e303 	smlabb	r3, lr, r3, lr
 801a26a:	f858 2003 	ldr.w	r2, [r8, r3]
 801a26e:	0e11      	lsrs	r1, r2, #24
 801a270:	d012      	beq.n	801a298 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801a272:	29ff      	cmp	r1, #255	; 0xff
 801a274:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801a278:	d110      	bne.n	801a29c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801a27a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801a27e:	d10d      	bne.n	801a29c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801a280:	0953      	lsrs	r3, r2, #5
 801a282:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801a286:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801a28a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a28e:	f027 0707 	bic.w	r7, r7, #7
 801a292:	431f      	orrs	r7, r3
 801a294:	433a      	orrs	r2, r7
 801a296:	8002      	strh	r2, [r0, #0]
 801a298:	3002      	adds	r0, #2
 801a29a:	e7e0      	b.n	801a25e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801a29c:	fb0a f101 	mul.w	r1, sl, r1
 801a2a0:	8806      	ldrh	r6, [r0, #0]
 801a2a2:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801a2a6:	b2d2      	uxtb	r2, r2
 801a2a8:	1c4b      	adds	r3, r1, #1
 801a2aa:	1235      	asrs	r5, r6, #8
 801a2ac:	10f4      	asrs	r4, r6, #3
 801a2ae:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801a2b2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801a2b6:	00f6      	lsls	r6, r6, #3
 801a2b8:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801a2bc:	121b      	asrs	r3, r3, #8
 801a2be:	b2f6      	uxtb	r6, r6
 801a2c0:	b299      	uxth	r1, r3
 801a2c2:	43db      	mvns	r3, r3
 801a2c4:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801a2c8:	fb1c fc01 	smulbb	ip, ip, r1
 801a2cc:	b2db      	uxtb	r3, r3
 801a2ce:	fb12 f201 	smulbb	r2, r2, r1
 801a2d2:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801a2d6:	fb05 c503 	mla	r5, r5, r3, ip
 801a2da:	b2ff      	uxtb	r7, r7
 801a2dc:	fb06 2203 	mla	r2, r6, r3, r2
 801a2e0:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801a2e4:	fb17 f701 	smulbb	r7, r7, r1
 801a2e8:	b2ad      	uxth	r5, r5
 801a2ea:	b292      	uxth	r2, r2
 801a2ec:	fb04 7403 	mla	r4, r4, r3, r7
 801a2f0:	f105 0c01 	add.w	ip, r5, #1
 801a2f4:	1c57      	adds	r7, r2, #1
 801a2f6:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801a2fa:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801a2fe:	b2a4      	uxth	r4, r4
 801a300:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801a304:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801a308:	433d      	orrs	r5, r7
 801a30a:	1c67      	adds	r7, r4, #1
 801a30c:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801a310:	0964      	lsrs	r4, r4, #5
 801a312:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801a316:	4325      	orrs	r5, r4
 801a318:	8005      	strh	r5, [r0, #0]
 801a31a:	e7bd      	b.n	801a298 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801a31c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a31e:	4418      	add	r0, r3
 801a320:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a322:	4499      	add	r9, r3
 801a324:	e795      	b.n	801a252 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801a326:	4b04      	ldr	r3, [pc, #16]	; (801a338 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801a328:	6818      	ldr	r0, [r3, #0]
 801a32a:	6803      	ldr	r3, [r0, #0]
 801a32c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a32e:	4798      	blx	r3
 801a330:	e771      	b.n	801a216 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 801a332:	bf00      	nop
 801a334:	2400ae9e 	.word	0x2400ae9e
 801a338:	2400aea4 	.word	0x2400aea4

0801a33c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801a33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a340:	b087      	sub	sp, #28
 801a342:	4680      	mov	r8, r0
 801a344:	460d      	mov	r5, r1
 801a346:	4614      	mov	r4, r2
 801a348:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801a34c:	2e00      	cmp	r6, #0
 801a34e:	f000 80b9 	beq.w	801a4c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 801a352:	6810      	ldr	r0, [r2, #0]
 801a354:	af02      	add	r7, sp, #8
 801a356:	6851      	ldr	r1, [r2, #4]
 801a358:	c703      	stmia	r7!, {r0, r1}
 801a35a:	6818      	ldr	r0, [r3, #0]
 801a35c:	af04      	add	r7, sp, #16
 801a35e:	6859      	ldr	r1, [r3, #4]
 801a360:	c703      	stmia	r7!, {r0, r1}
 801a362:	a802      	add	r0, sp, #8
 801a364:	f7f9 fdf4 	bl	8013f50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a368:	4621      	mov	r1, r4
 801a36a:	a804      	add	r0, sp, #16
 801a36c:	f7f9 fe18 	bl	8013fa0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a370:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801a374:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801a378:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801a37c:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801a380:	fb14 2103 	smlabb	r1, r4, r3, r2
 801a384:	eb08 0401 	add.w	r4, r8, r1
 801a388:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801a38c:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801a390:	440a      	add	r2, r1
 801a392:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801a396:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a39a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801a39e:	4413      	add	r3, r2
 801a3a0:	f8ad 3012 	strh.w	r3, [sp, #18]
 801a3a4:	4b49      	ldr	r3, [pc, #292]	; (801a4cc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801a3a6:	6818      	ldr	r0, [r3, #0]
 801a3a8:	6803      	ldr	r3, [r0, #0]
 801a3aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a3ac:	4798      	blx	r3
 801a3ae:	4b48      	ldr	r3, [pc, #288]	; (801a4d0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 801a3b0:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801a3b4:	2eff      	cmp	r6, #255	; 0xff
 801a3b6:	881a      	ldrh	r2, [r3, #0]
 801a3b8:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801a3bc:	fb02 c101 	mla	r1, r2, r1, ip
 801a3c0:	fb02 f207 	mul.w	r2, r2, r7
 801a3c4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801a3c8:	f105 0104 	add.w	r1, r5, #4
 801a3cc:	461d      	mov	r5, r3
 801a3ce:	d05a      	beq.n	801a486 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 801a3d0:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801a3d4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801a3d8:	b2b6      	uxth	r6, r6
 801a3da:	9301      	str	r3, [sp, #4]
 801a3dc:	fa1f fe8e 	uxth.w	lr, lr
 801a3e0:	4282      	cmp	r2, r0
 801a3e2:	d96a      	bls.n	801a4ba <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801a3e4:	eb00 0b0a 	add.w	fp, r0, sl
 801a3e8:	4583      	cmp	fp, r0
 801a3ea:	d940      	bls.n	801a46e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 801a3ec:	8805      	ldrh	r5, [r0, #0]
 801a3ee:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a3f2:	122f      	asrs	r7, r5, #8
 801a3f4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801a3f8:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801a3fc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a400:	00ed      	lsls	r5, r5, #3
 801a402:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801a406:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801a40a:	fb17 f70e 	smulbb	r7, r7, lr
 801a40e:	b2ed      	uxtb	r5, r5
 801a410:	fb19 f90e 	smulbb	r9, r9, lr
 801a414:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a418:	fb15 f50e 	smulbb	r5, r5, lr
 801a41c:	fb0c 7c06 	mla	ip, ip, r6, r7
 801a420:	10df      	asrs	r7, r3, #3
 801a422:	00db      	lsls	r3, r3, #3
 801a424:	fa1f fc8c 	uxth.w	ip, ip
 801a428:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a42c:	b2db      	uxtb	r3, r3
 801a42e:	fb07 9706 	mla	r7, r7, r6, r9
 801a432:	f10c 0901 	add.w	r9, ip, #1
 801a436:	fb03 5306 	mla	r3, r3, r6, r5
 801a43a:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801a43e:	b29b      	uxth	r3, r3
 801a440:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801a444:	b2bf      	uxth	r7, r7
 801a446:	f103 0c01 	add.w	ip, r3, #1
 801a44a:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801a44e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801a452:	ea4c 0c09 	orr.w	ip, ip, r9
 801a456:	f107 0901 	add.w	r9, r7, #1
 801a45a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801a45e:	097f      	lsrs	r7, r7, #5
 801a460:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801a464:	ea4c 0c07 	orr.w	ip, ip, r7
 801a468:	f820 cb02 	strh.w	ip, [r0], #2
 801a46c:	e7bc      	b.n	801a3e8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 801a46e:	9b01      	ldr	r3, [sp, #4]
 801a470:	881b      	ldrh	r3, [r3, #0]
 801a472:	eba3 0308 	sub.w	r3, r3, r8
 801a476:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a47a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801a47e:	eba3 0308 	sub.w	r3, r3, r8
 801a482:	441c      	add	r4, r3
 801a484:	e7ac      	b.n	801a3e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801a486:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801a48a:	4282      	cmp	r2, r0
 801a48c:	d915      	bls.n	801a4ba <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801a48e:	eb00 060a 	add.w	r6, r0, sl
 801a492:	4286      	cmp	r6, r0
 801a494:	d906      	bls.n	801a4a4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801a496:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a49a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801a49e:	f820 3b02 	strh.w	r3, [r0], #2
 801a4a2:	e7f6      	b.n	801a492 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 801a4a4:	882b      	ldrh	r3, [r5, #0]
 801a4a6:	eba3 0308 	sub.w	r3, r3, r8
 801a4aa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a4ae:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801a4b2:	eba3 0308 	sub.w	r3, r3, r8
 801a4b6:	441c      	add	r4, r3
 801a4b8:	e7e7      	b.n	801a48a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801a4ba:	4b04      	ldr	r3, [pc, #16]	; (801a4cc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801a4bc:	6818      	ldr	r0, [r3, #0]
 801a4be:	6803      	ldr	r3, [r0, #0]
 801a4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a4c2:	4798      	blx	r3
 801a4c4:	b007      	add	sp, #28
 801a4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4ca:	bf00      	nop
 801a4cc:	2400aea4 	.word	0x2400aea4
 801a4d0:	2400ae9e 	.word	0x2400ae9e

0801a4d4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801a4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4d8:	b091      	sub	sp, #68	; 0x44
 801a4da:	4680      	mov	r8, r0
 801a4dc:	460f      	mov	r7, r1
 801a4de:	4614      	mov	r4, r2
 801a4e0:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801a4e4:	2d00      	cmp	r5, #0
 801a4e6:	d051      	beq.n	801a58c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801a4e8:	6810      	ldr	r0, [r2, #0]
 801a4ea:	ae0c      	add	r6, sp, #48	; 0x30
 801a4ec:	6851      	ldr	r1, [r2, #4]
 801a4ee:	f8df 9200 	ldr.w	r9, [pc, #512]	; 801a6f0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 801a4f2:	c603      	stmia	r6!, {r0, r1}
 801a4f4:	6818      	ldr	r0, [r3, #0]
 801a4f6:	ae0e      	add	r6, sp, #56	; 0x38
 801a4f8:	6859      	ldr	r1, [r3, #4]
 801a4fa:	c603      	stmia	r6!, {r0, r1}
 801a4fc:	a80c      	add	r0, sp, #48	; 0x30
 801a4fe:	f7f9 fd27 	bl	8013f50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a502:	4621      	mov	r1, r4
 801a504:	a80e      	add	r0, sp, #56	; 0x38
 801a506:	f7f9 fd4b 	bl	8013fa0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a50a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801a50e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801a512:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801a516:	f8d9 0000 	ldr.w	r0, [r9]
 801a51a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a51e:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801a522:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801a526:	eb08 0401 	add.w	r4, r8, r1
 801a52a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801a52e:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 801a6f4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 801a532:	440a      	add	r2, r1
 801a534:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801a538:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801a53c:	4413      	add	r3, r2
 801a53e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801a542:	6803      	ldr	r3, [r0, #0]
 801a544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a546:	4798      	blx	r3
 801a548:	f010 0f80 	tst.w	r0, #128	; 0x80
 801a54c:	f8d9 0000 	ldr.w	r0, [r9]
 801a550:	d01f      	beq.n	801a592 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 801a552:	2200      	movs	r2, #0
 801a554:	6801      	ldr	r1, [r0, #0]
 801a556:	b2b6      	uxth	r6, r6
 801a558:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801a55c:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801a560:	220b      	movs	r2, #11
 801a562:	9207      	str	r2, [sp, #28]
 801a564:	f8b8 2000 	ldrh.w	r2, [r8]
 801a568:	9601      	str	r6, [sp, #4]
 801a56a:	9206      	str	r2, [sp, #24]
 801a56c:	2201      	movs	r2, #1
 801a56e:	e9cd 5204 	strd	r5, r2, [sp, #16]
 801a572:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801a576:	9203      	str	r2, [sp, #12]
 801a578:	fa1f f28a 	uxth.w	r2, sl
 801a57c:	9202      	str	r2, [sp, #8]
 801a57e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801a582:	9200      	str	r2, [sp, #0]
 801a584:	463a      	mov	r2, r7
 801a586:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801a588:	4621      	mov	r1, r4
 801a58a:	47a8      	blx	r5
 801a58c:	b011      	add	sp, #68	; 0x44
 801a58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a592:	6803      	ldr	r3, [r0, #0]
 801a594:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801a598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a59a:	4798      	blx	r3
 801a59c:	f8b8 2000 	ldrh.w	r2, [r8]
 801a5a0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801a5a4:	2dff      	cmp	r5, #255	; 0xff
 801a5a6:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801a5aa:	fb0a fa02 	mul.w	sl, sl, r2
 801a5ae:	fb02 1303 	mla	r3, r2, r3, r1
 801a5b2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a5b6:	d062      	beq.n	801a67e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801a5b8:	ea6f 0c05 	mvn.w	ip, r5
 801a5bc:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801a5c0:	b2ad      	uxth	r5, r5
 801a5c2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801a5c6:	fa5f fc8c 	uxtb.w	ip, ip
 801a5ca:	930a      	str	r3, [sp, #40]	; 0x28
 801a5cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a5ce:	4298      	cmp	r0, r3
 801a5d0:	f080 8085 	bcs.w	801a6de <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801a5d4:	eb00 0b09 	add.w	fp, r0, r9
 801a5d8:	4558      	cmp	r0, fp
 801a5da:	d246      	bcs.n	801a66a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801a5dc:	f814 eb01 	ldrb.w	lr, [r4], #1
 801a5e0:	2303      	movs	r3, #3
 801a5e2:	2204      	movs	r2, #4
 801a5e4:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801a5e8:	8803      	ldrh	r3, [r0, #0]
 801a5ea:	eb07 0a0e 	add.w	sl, r7, lr
 801a5ee:	1219      	asrs	r1, r3, #8
 801a5f0:	10da      	asrs	r2, r3, #3
 801a5f2:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801a5f6:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801a5fa:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801a5fe:	00db      	lsls	r3, r3, #3
 801a600:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801a604:	fb18 f805 	smulbb	r8, r8, r5
 801a608:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801a60c:	fb1e fe05 	smulbb	lr, lr, r5
 801a610:	b2db      	uxtb	r3, r3
 801a612:	fb01 810c 	mla	r1, r1, ip, r8
 801a616:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801a61a:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801a61e:	fb18 f805 	smulbb	r8, r8, r5
 801a622:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801a626:	b289      	uxth	r1, r1
 801a628:	fb02 820c 	mla	r2, r2, ip, r8
 801a62c:	fb03 e30c 	mla	r3, r3, ip, lr
 801a630:	f101 0801 	add.w	r8, r1, #1
 801a634:	b292      	uxth	r2, r2
 801a636:	b29b      	uxth	r3, r3
 801a638:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801a63c:	f102 0801 	add.w	r8, r2, #1
 801a640:	f103 0e01 	add.w	lr, r3, #1
 801a644:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801a648:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801a64c:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801a650:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801a654:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801a658:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801a65c:	ea4e 0101 	orr.w	r1, lr, r1
 801a660:	ea41 0108 	orr.w	r1, r1, r8
 801a664:	f820 1b02 	strh.w	r1, [r0], #2
 801a668:	e7b6      	b.n	801a5d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 801a66a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a66c:	881b      	ldrh	r3, [r3, #0]
 801a66e:	1b9b      	subs	r3, r3, r6
 801a670:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a674:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801a678:	1b9b      	subs	r3, r3, r6
 801a67a:	441c      	add	r4, r3
 801a67c:	e7a6      	b.n	801a5cc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 801a67e:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801a682:	2203      	movs	r2, #3
 801a684:	2504      	movs	r5, #4
 801a686:	4919      	ldr	r1, [pc, #100]	; (801a6ec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 801a688:	4550      	cmp	r0, sl
 801a68a:	d228      	bcs.n	801a6de <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801a68c:	eb00 0c09 	add.w	ip, r0, r9
 801a690:	4560      	cmp	r0, ip
 801a692:	4623      	mov	r3, r4
 801a694:	d219      	bcs.n	801a6ca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801a696:	f893 e000 	ldrb.w	lr, [r3]
 801a69a:	3401      	adds	r4, #1
 801a69c:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801a6a0:	eb07 0b0e 	add.w	fp, r7, lr
 801a6a4:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801a6a8:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801a6ac:	f89b b001 	ldrb.w	fp, [fp, #1]
 801a6b0:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801a6b4:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801a6b8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801a6bc:	ea43 030b 	orr.w	r3, r3, fp
 801a6c0:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801a6c4:	f820 3b02 	strh.w	r3, [r0], #2
 801a6c8:	e7e2      	b.n	801a690 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801a6ca:	f8b8 3000 	ldrh.w	r3, [r8]
 801a6ce:	1b9b      	subs	r3, r3, r6
 801a6d0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a6d4:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801a6d8:	1b9b      	subs	r3, r3, r6
 801a6da:	441c      	add	r4, r3
 801a6dc:	e7d4      	b.n	801a688 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801a6de:	4b04      	ldr	r3, [pc, #16]	; (801a6f0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801a6e0:	6818      	ldr	r0, [r3, #0]
 801a6e2:	6803      	ldr	r3, [r0, #0]
 801a6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a6e6:	4798      	blx	r3
 801a6e8:	e750      	b.n	801a58c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801a6ea:	bf00      	nop
 801a6ec:	fffff800 	.word	0xfffff800
 801a6f0:	2400aea4 	.word	0x2400aea4
 801a6f4:	2400ae9e 	.word	0x2400ae9e

0801a6f8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801a6f8:	b430      	push	{r4, r5}
 801a6fa:	780d      	ldrb	r5, [r1, #0]
 801a6fc:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801a700:	2d01      	cmp	r5, #1
 801a702:	d00a      	beq.n	801a71a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801a704:	d305      	bcc.n	801a712 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801a706:	2d02      	cmp	r5, #2
 801a708:	d10b      	bne.n	801a722 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801a70a:	9402      	str	r4, [sp, #8]
 801a70c:	bc30      	pop	{r4, r5}
 801a70e:	f7ff be15 	b.w	801a33c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801a712:	9402      	str	r4, [sp, #8]
 801a714:	bc30      	pop	{r4, r5}
 801a716:	f7ff bd2b 	b.w	801a170 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801a71a:	9402      	str	r4, [sp, #8]
 801a71c:	bc30      	pop	{r4, r5}
 801a71e:	f7ff bed9 	b.w	801a4d4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801a722:	bc30      	pop	{r4, r5}
 801a724:	4770      	bx	lr
	...

0801a728 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801a728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a72c:	b087      	sub	sp, #28
 801a72e:	4604      	mov	r4, r0
 801a730:	460e      	mov	r6, r1
 801a732:	6810      	ldr	r0, [r2, #0]
 801a734:	6851      	ldr	r1, [r2, #4]
 801a736:	ad02      	add	r5, sp, #8
 801a738:	4617      	mov	r7, r2
 801a73a:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801a73e:	f8df 9230 	ldr.w	r9, [pc, #560]	; 801a970 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801a742:	c503      	stmia	r5!, {r0, r1}
 801a744:	6818      	ldr	r0, [r3, #0]
 801a746:	ad04      	add	r5, sp, #16
 801a748:	6859      	ldr	r1, [r3, #4]
 801a74a:	c503      	stmia	r5!, {r0, r1}
 801a74c:	a802      	add	r0, sp, #8
 801a74e:	f7f9 fbff 	bl	8013f50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a752:	4639      	mov	r1, r7
 801a754:	a804      	add	r0, sp, #16
 801a756:	f7f9 fc23 	bl	8013fa0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a75a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801a75e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801a762:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801a766:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801a76a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a76e:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801a772:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801a776:	440e      	add	r6, r1
 801a778:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801a77c:	440a      	add	r2, r1
 801a77e:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a782:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801a786:	4413      	add	r3, r2
 801a788:	f8ad 3012 	strh.w	r3, [sp, #18]
 801a78c:	4b77      	ldr	r3, [pc, #476]	; (801a96c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801a78e:	6818      	ldr	r0, [r3, #0]
 801a790:	6803      	ldr	r3, [r0, #0]
 801a792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a794:	4798      	blx	r3
 801a796:	f8b9 b000 	ldrh.w	fp, [r9]
 801a79a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801a79e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801a7a2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801a7a6:	fb05 f50b 	mul.w	r5, r5, fp
 801a7aa:	fb0b 2303 	mla	r3, fp, r3, r2
 801a7ae:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a7b2:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801a7b6:	9300      	str	r3, [sp, #0]
 801a7b8:	d069      	beq.n	801a88e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801a7ba:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801a7be:	4558      	cmp	r0, fp
 801a7c0:	f080 80cc 	bcs.w	801a95c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801a7c4:	9b00      	ldr	r3, [sp, #0]
 801a7c6:	4631      	mov	r1, r6
 801a7c8:	18c3      	adds	r3, r0, r3
 801a7ca:	9301      	str	r3, [sp, #4]
 801a7cc:	9b01      	ldr	r3, [sp, #4]
 801a7ce:	4298      	cmp	r0, r3
 801a7d0:	d24f      	bcs.n	801a872 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801a7d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a7d6:	2a00      	cmp	r2, #0
 801a7d8:	d048      	beq.n	801a86c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801a7da:	fb0a f202 	mul.w	r2, sl, r2
 801a7de:	1c53      	adds	r3, r2, #1
 801a7e0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801a7e4:	121b      	asrs	r3, r3, #8
 801a7e6:	d041      	beq.n	801a86c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801a7e8:	8802      	ldrh	r2, [r0, #0]
 801a7ea:	b29e      	uxth	r6, r3
 801a7ec:	f8b4 c000 	ldrh.w	ip, [r4]
 801a7f0:	43db      	mvns	r3, r3
 801a7f2:	1215      	asrs	r5, r2, #8
 801a7f4:	b2db      	uxtb	r3, r3
 801a7f6:	ea4f 272c 	mov.w	r7, ip, asr #8
 801a7fa:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801a7fe:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801a802:	fb15 f503 	smulbb	r5, r5, r3
 801a806:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a80a:	00d2      	lsls	r2, r2, #3
 801a80c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801a810:	fb07 5706 	mla	r7, r7, r6, r5
 801a814:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801a818:	b2d2      	uxtb	r2, r2
 801a81a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801a81e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801a822:	fb1e fe03 	smulbb	lr, lr, r3
 801a826:	b2bf      	uxth	r7, r7
 801a828:	fb12 f203 	smulbb	r2, r2, r3
 801a82c:	fa5f fc8c 	uxtb.w	ip, ip
 801a830:	fb05 e506 	mla	r5, r5, r6, lr
 801a834:	f107 0e01 	add.w	lr, r7, #1
 801a838:	fb0c 2c06 	mla	ip, ip, r6, r2
 801a83c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801a840:	fa1f fc8c 	uxth.w	ip, ip
 801a844:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 801a848:	b2ad      	uxth	r5, r5
 801a84a:	f10c 0701 	add.w	r7, ip, #1
 801a84e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801a852:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801a856:	ea47 070e 	orr.w	r7, r7, lr
 801a85a:	f105 0e01 	add.w	lr, r5, #1
 801a85e:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801a862:	096d      	lsrs	r5, r5, #5
 801a864:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801a868:	432f      	orrs	r7, r5
 801a86a:	8007      	strh	r7, [r0, #0]
 801a86c:	3002      	adds	r0, #2
 801a86e:	3402      	adds	r4, #2
 801a870:	e7ac      	b.n	801a7cc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801a872:	f8b9 3000 	ldrh.w	r3, [r9]
 801a876:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801a87a:	eba3 0308 	sub.w	r3, r3, r8
 801a87e:	eba6 0608 	sub.w	r6, r6, r8
 801a882:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a886:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801a88a:	440e      	add	r6, r1
 801a88c:	e797      	b.n	801a7be <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801a88e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801a892:	42a8      	cmp	r0, r5
 801a894:	d262      	bcs.n	801a95c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801a896:	9b00      	ldr	r3, [sp, #0]
 801a898:	4631      	mov	r1, r6
 801a89a:	eb00 0b03 	add.w	fp, r0, r3
 801a89e:	4558      	cmp	r0, fp
 801a8a0:	d24e      	bcs.n	801a940 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801a8a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a8a6:	b12b      	cbz	r3, 801a8b4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801a8a8:	2bff      	cmp	r3, #255	; 0xff
 801a8aa:	f8b4 e000 	ldrh.w	lr, [r4]
 801a8ae:	d104      	bne.n	801a8ba <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801a8b0:	f8a0 e000 	strh.w	lr, [r0]
 801a8b4:	3002      	adds	r0, #2
 801a8b6:	3402      	adds	r4, #2
 801a8b8:	e7f1      	b.n	801a89e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801a8ba:	8802      	ldrh	r2, [r0, #0]
 801a8bc:	b29f      	uxth	r7, r3
 801a8be:	43db      	mvns	r3, r3
 801a8c0:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801a8c4:	1216      	asrs	r6, r2, #8
 801a8c6:	b2db      	uxtb	r3, r3
 801a8c8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a8cc:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801a8d0:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801a8d4:	00d2      	lsls	r2, r2, #3
 801a8d6:	fb16 f603 	smulbb	r6, r6, r3
 801a8da:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801a8de:	b2d2      	uxtb	r2, r2
 801a8e0:	fb0c 6c07 	mla	ip, ip, r7, r6
 801a8e4:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801a8e8:	fb1a fa03 	smulbb	sl, sl, r3
 801a8ec:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a8f0:	fa1f fc8c 	uxth.w	ip, ip
 801a8f4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a8f8:	fb12 f303 	smulbb	r3, r2, r3
 801a8fc:	fa5f fe8e 	uxtb.w	lr, lr
 801a900:	fb06 a607 	mla	r6, r6, r7, sl
 801a904:	f10c 0201 	add.w	r2, ip, #1
 801a908:	fb0e 3307 	mla	r3, lr, r7, r3
 801a90c:	b2b6      	uxth	r6, r6
 801a90e:	b29b      	uxth	r3, r3
 801a910:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801a914:	f106 0a01 	add.w	sl, r6, #1
 801a918:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 801a91c:	f103 0c01 	add.w	ip, r3, #1
 801a920:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801a924:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801a928:	0976      	lsrs	r6, r6, #5
 801a92a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801a92e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a932:	ea4c 0c02 	orr.w	ip, ip, r2
 801a936:	ea4c 0c06 	orr.w	ip, ip, r6
 801a93a:	f8a0 c000 	strh.w	ip, [r0]
 801a93e:	e7b9      	b.n	801a8b4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801a940:	f8b9 3000 	ldrh.w	r3, [r9]
 801a944:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801a948:	eba3 0308 	sub.w	r3, r3, r8
 801a94c:	eba6 0608 	sub.w	r6, r6, r8
 801a950:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a954:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801a958:	440e      	add	r6, r1
 801a95a:	e79a      	b.n	801a892 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801a95c:	4b03      	ldr	r3, [pc, #12]	; (801a96c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801a95e:	6818      	ldr	r0, [r3, #0]
 801a960:	6803      	ldr	r3, [r0, #0]
 801a962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a964:	4798      	blx	r3
 801a966:	b007      	add	sp, #28
 801a968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a96c:	2400aea4 	.word	0x2400aea4
 801a970:	2400ae9e 	.word	0x2400ae9e

0801a974 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801a974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a978:	b089      	sub	sp, #36	; 0x24
 801a97a:	4682      	mov	sl, r0
 801a97c:	460f      	mov	r7, r1
 801a97e:	4691      	mov	r9, r2
 801a980:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801a984:	4698      	mov	r8, r3
 801a986:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a988:	2e00      	cmp	r6, #0
 801a98a:	d036      	beq.n	801a9fa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801a98c:	4608      	mov	r0, r1
 801a98e:	f7fc f86b 	bl	8016a68 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a992:	4605      	mov	r5, r0
 801a994:	4638      	mov	r0, r7
 801a996:	f7fc f89b 	bl	8016ad0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a99a:	f8ad 000e 	strh.w	r0, [sp, #14]
 801a99e:	4638      	mov	r0, r7
 801a9a0:	f8ad 9008 	strh.w	r9, [sp, #8]
 801a9a4:	f8ad 500c 	strh.w	r5, [sp, #12]
 801a9a8:	f8ad 800a 	strh.w	r8, [sp, #10]
 801a9ac:	f7fc f948 	bl	8016c40 <_ZNK8touchgfx6Bitmap7getDataEv>
 801a9b0:	4605      	mov	r5, r0
 801a9b2:	4638      	mov	r0, r7
 801a9b4:	f7fc f974 	bl	8016ca0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801a9b8:	4681      	mov	r9, r0
 801a9ba:	4638      	mov	r0, r7
 801a9bc:	f7fc f9c4 	bl	8016d48 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801a9c0:	280b      	cmp	r0, #11
 801a9c2:	d81a      	bhi.n	801a9fa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801a9c4:	e8df f000 	tbb	[pc, r0]
 801a9c8:	1906aebd 	.word	0x1906aebd
 801a9cc:	19191919 	.word	0x19191919
 801a9d0:	b5191919 	.word	0xb5191919
 801a9d4:	4bb0      	ldr	r3, [pc, #704]	; (801ac98 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 801a9d6:	6818      	ldr	r0, [r3, #0]
 801a9d8:	6803      	ldr	r3, [r0, #0]
 801a9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a9dc:	4798      	blx	r3
 801a9de:	2eff      	cmp	r6, #255	; 0xff
 801a9e0:	d121      	bne.n	801aa26 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801a9e2:	0683      	lsls	r3, r0, #26
 801a9e4:	d41f      	bmi.n	801aa26 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801a9e6:	4638      	mov	r0, r7
 801a9e8:	f7fc f8f2 	bl	8016bd0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801a9ec:	b940      	cbnz	r0, 801aa00 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 801a9ee:	4623      	mov	r3, r4
 801a9f0:	aa02      	add	r2, sp, #8
 801a9f2:	4629      	mov	r1, r5
 801a9f4:	4650      	mov	r0, sl
 801a9f6:	f7ff fa2f 	bl	8019e58 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801a9fa:	b009      	add	sp, #36	; 0x24
 801a9fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa00:	f10d 0818 	add.w	r8, sp, #24
 801aa04:	4639      	mov	r1, r7
 801aa06:	af04      	add	r7, sp, #16
 801aa08:	4640      	mov	r0, r8
 801aa0a:	f7fc f895 	bl	8016b38 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801aa0e:	e898 0003 	ldmia.w	r8, {r0, r1}
 801aa12:	e887 0003 	stmia.w	r7, {r0, r1}
 801aa16:	4638      	mov	r0, r7
 801aa18:	4621      	mov	r1, r4
 801aa1a:	f7f7 fa5b 	bl	8011ed4 <_ZN8touchgfx4RectaNERKS0_>
 801aa1e:	4638      	mov	r0, r7
 801aa20:	f7f7 fa9b 	bl	8011f5a <_ZNK8touchgfx4Rect7isEmptyEv>
 801aa24:	b130      	cbz	r0, 801aa34 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801aa26:	4633      	mov	r3, r6
 801aa28:	4622      	mov	r2, r4
 801aa2a:	a902      	add	r1, sp, #8
 801aa2c:	4628      	mov	r0, r5
 801aa2e:	f7ff f92d 	bl	8019c8c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801aa32:	e7e2      	b.n	801a9fa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801aa34:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801aa38:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801aa3c:	4293      	cmp	r3, r2
 801aa3e:	dd12      	ble.n	801aa66 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 801aa40:	1a9b      	subs	r3, r3, r2
 801aa42:	f9b4 0000 	ldrsh.w	r0, [r4]
 801aa46:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801aa4a:	f8ad 0018 	strh.w	r0, [sp, #24]
 801aa4e:	4628      	mov	r0, r5
 801aa50:	f8ad 201a 	strh.w	r2, [sp, #26]
 801aa54:	4642      	mov	r2, r8
 801aa56:	f8ad 101c 	strh.w	r1, [sp, #28]
 801aa5a:	a902      	add	r1, sp, #8
 801aa5c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801aa60:	4633      	mov	r3, r6
 801aa62:	f7ff f913 	bl	8019c8c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801aa66:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801aa6a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801aa6e:	4293      	cmp	r3, r2
 801aa70:	dd12      	ble.n	801aa98 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 801aa72:	1a9b      	subs	r3, r3, r2
 801aa74:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801aa78:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801aa7c:	f8ad 2018 	strh.w	r2, [sp, #24]
 801aa80:	4642      	mov	r2, r8
 801aa82:	f8ad 001a 	strh.w	r0, [sp, #26]
 801aa86:	4628      	mov	r0, r5
 801aa88:	f8ad 301c 	strh.w	r3, [sp, #28]
 801aa8c:	23ff      	movs	r3, #255	; 0xff
 801aa8e:	f8ad 101e 	strh.w	r1, [sp, #30]
 801aa92:	a902      	add	r1, sp, #8
 801aa94:	f7ff f8fa 	bl	8019c8c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801aa98:	463b      	mov	r3, r7
 801aa9a:	aa02      	add	r2, sp, #8
 801aa9c:	4629      	mov	r1, r5
 801aa9e:	4650      	mov	r0, sl
 801aaa0:	f7ff f9da 	bl	8019e58 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801aaa4:	88a2      	ldrh	r2, [r4, #4]
 801aaa6:	8823      	ldrh	r3, [r4, #0]
 801aaa8:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801aaac:	4413      	add	r3, r2
 801aaae:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801aab2:	440a      	add	r2, r1
 801aab4:	b29b      	uxth	r3, r3
 801aab6:	b292      	uxth	r2, r2
 801aab8:	b218      	sxth	r0, r3
 801aaba:	b211      	sxth	r1, r2
 801aabc:	4288      	cmp	r0, r1
 801aabe:	dd12      	ble.n	801aae6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 801aac0:	1a9b      	subs	r3, r3, r2
 801aac2:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801aac6:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801aaca:	4642      	mov	r2, r8
 801aacc:	f8ad 1018 	strh.w	r1, [sp, #24]
 801aad0:	a902      	add	r1, sp, #8
 801aad2:	f8ad 301c 	strh.w	r3, [sp, #28]
 801aad6:	23ff      	movs	r3, #255	; 0xff
 801aad8:	f8ad 001e 	strh.w	r0, [sp, #30]
 801aadc:	4628      	mov	r0, r5
 801aade:	f8ad 601a 	strh.w	r6, [sp, #26]
 801aae2:	f7ff f8d3 	bl	8019c8c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801aae6:	88e2      	ldrh	r2, [r4, #6]
 801aae8:	8863      	ldrh	r3, [r4, #2]
 801aaea:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801aaee:	4413      	add	r3, r2
 801aaf0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801aaf4:	440a      	add	r2, r1
 801aaf6:	b29b      	uxth	r3, r3
 801aaf8:	b292      	uxth	r2, r2
 801aafa:	b218      	sxth	r0, r3
 801aafc:	b211      	sxth	r1, r2
 801aafe:	4288      	cmp	r0, r1
 801ab00:	f77f af7b 	ble.w	801a9fa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801ab04:	1a9b      	subs	r3, r3, r2
 801ab06:	f9b4 6000 	ldrsh.w	r6, [r4]
 801ab0a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801ab0e:	4642      	mov	r2, r8
 801ab10:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ab14:	23ff      	movs	r3, #255	; 0xff
 801ab16:	f8ad 6018 	strh.w	r6, [sp, #24]
 801ab1a:	f8ad 101a 	strh.w	r1, [sp, #26]
 801ab1e:	f8ad 001c 	strh.w	r0, [sp, #28]
 801ab22:	e782      	b.n	801aa2a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 801ab24:	4633      	mov	r3, r6
 801ab26:	4622      	mov	r2, r4
 801ab28:	a902      	add	r1, sp, #8
 801ab2a:	4628      	mov	r0, r5
 801ab2c:	f7ff fa04 	bl	8019f38 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801ab30:	e763      	b.n	801a9fa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801ab32:	9600      	str	r6, [sp, #0]
 801ab34:	4623      	mov	r3, r4
 801ab36:	aa02      	add	r2, sp, #8
 801ab38:	4649      	mov	r1, r9
 801ab3a:	4628      	mov	r0, r5
 801ab3c:	f7ff fddc 	bl	801a6f8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801ab40:	e75b      	b.n	801a9fa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801ab42:	4638      	mov	r0, r7
 801ab44:	f7fc f844 	bl	8016bd0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801ab48:	b950      	cbnz	r0, 801ab60 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 801ab4a:	f8da 3000 	ldr.w	r3, [sl]
 801ab4e:	aa02      	add	r2, sp, #8
 801ab50:	4629      	mov	r1, r5
 801ab52:	e9cd 6000 	strd	r6, r0, [sp]
 801ab56:	4650      	mov	r0, sl
 801ab58:	68de      	ldr	r6, [r3, #12]
 801ab5a:	4623      	mov	r3, r4
 801ab5c:	47b0      	blx	r6
 801ab5e:	e74c      	b.n	801a9fa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801ab60:	f10d 0818 	add.w	r8, sp, #24
 801ab64:	4639      	mov	r1, r7
 801ab66:	af04      	add	r7, sp, #16
 801ab68:	4640      	mov	r0, r8
 801ab6a:	f7fb ffe5 	bl	8016b38 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801ab6e:	e898 0003 	ldmia.w	r8, {r0, r1}
 801ab72:	e887 0003 	stmia.w	r7, {r0, r1}
 801ab76:	4638      	mov	r0, r7
 801ab78:	4621      	mov	r1, r4
 801ab7a:	f7f7 f9ab 	bl	8011ed4 <_ZN8touchgfx4RectaNERKS0_>
 801ab7e:	4638      	mov	r0, r7
 801ab80:	f7f7 f9eb 	bl	8011f5a <_ZNK8touchgfx4Rect7isEmptyEv>
 801ab84:	b138      	cbz	r0, 801ab96 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 801ab86:	4623      	mov	r3, r4
 801ab88:	9600      	str	r6, [sp, #0]
 801ab8a:	aa02      	add	r2, sp, #8
 801ab8c:	4649      	mov	r1, r9
 801ab8e:	4628      	mov	r0, r5
 801ab90:	f7ff fdca 	bl	801a728 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801ab94:	e731      	b.n	801a9fa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801ab96:	f8da 3000 	ldr.w	r3, [sl]
 801ab9a:	aa02      	add	r2, sp, #8
 801ab9c:	4629      	mov	r1, r5
 801ab9e:	e9cd 6000 	strd	r6, r0, [sp]
 801aba2:	4650      	mov	r0, sl
 801aba4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801aba8:	463b      	mov	r3, r7
 801abaa:	47d8      	blx	fp
 801abac:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801abb0:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801abb4:	4293      	cmp	r3, r2
 801abb6:	dd13      	ble.n	801abe0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 801abb8:	f9b4 0000 	ldrsh.w	r0, [r4]
 801abbc:	1a9b      	subs	r3, r3, r2
 801abbe:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801abc2:	f8ad 0018 	strh.w	r0, [sp, #24]
 801abc6:	4628      	mov	r0, r5
 801abc8:	f8ad 201a 	strh.w	r2, [sp, #26]
 801abcc:	aa02      	add	r2, sp, #8
 801abce:	f8ad 101c 	strh.w	r1, [sp, #28]
 801abd2:	4649      	mov	r1, r9
 801abd4:	f8ad 301e 	strh.w	r3, [sp, #30]
 801abd8:	4643      	mov	r3, r8
 801abda:	9600      	str	r6, [sp, #0]
 801abdc:	f7ff fda4 	bl	801a728 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801abe0:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801abe4:	f9b4 2000 	ldrsh.w	r2, [r4]
 801abe8:	4293      	cmp	r3, r2
 801abea:	dd13      	ble.n	801ac14 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 801abec:	1a9b      	subs	r3, r3, r2
 801abee:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801abf2:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801abf6:	f8ad 2018 	strh.w	r2, [sp, #24]
 801abfa:	aa02      	add	r2, sp, #8
 801abfc:	f8ad 001a 	strh.w	r0, [sp, #26]
 801ac00:	4628      	mov	r0, r5
 801ac02:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ac06:	4643      	mov	r3, r8
 801ac08:	f8ad 101e 	strh.w	r1, [sp, #30]
 801ac0c:	4649      	mov	r1, r9
 801ac0e:	9600      	str	r6, [sp, #0]
 801ac10:	f7ff fd8a 	bl	801a728 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801ac14:	88a2      	ldrh	r2, [r4, #4]
 801ac16:	8823      	ldrh	r3, [r4, #0]
 801ac18:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801ac1c:	4413      	add	r3, r2
 801ac1e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801ac22:	440a      	add	r2, r1
 801ac24:	b29b      	uxth	r3, r3
 801ac26:	b292      	uxth	r2, r2
 801ac28:	b218      	sxth	r0, r3
 801ac2a:	b211      	sxth	r1, r2
 801ac2c:	4288      	cmp	r0, r1
 801ac2e:	dd13      	ble.n	801ac58 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 801ac30:	1a9b      	subs	r3, r3, r2
 801ac32:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801ac36:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801ac3a:	aa02      	add	r2, sp, #8
 801ac3c:	f8ad 1018 	strh.w	r1, [sp, #24]
 801ac40:	4649      	mov	r1, r9
 801ac42:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ac46:	4643      	mov	r3, r8
 801ac48:	f8ad 001e 	strh.w	r0, [sp, #30]
 801ac4c:	4628      	mov	r0, r5
 801ac4e:	9600      	str	r6, [sp, #0]
 801ac50:	f8ad 701a 	strh.w	r7, [sp, #26]
 801ac54:	f7ff fd68 	bl	801a728 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801ac58:	88e2      	ldrh	r2, [r4, #6]
 801ac5a:	8863      	ldrh	r3, [r4, #2]
 801ac5c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801ac60:	4413      	add	r3, r2
 801ac62:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801ac66:	440a      	add	r2, r1
 801ac68:	b29b      	uxth	r3, r3
 801ac6a:	b292      	uxth	r2, r2
 801ac6c:	b218      	sxth	r0, r3
 801ac6e:	b211      	sxth	r1, r2
 801ac70:	4288      	cmp	r0, r1
 801ac72:	f77f aec2 	ble.w	801a9fa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801ac76:	f9b4 7000 	ldrsh.w	r7, [r4]
 801ac7a:	1a9b      	subs	r3, r3, r2
 801ac7c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801ac80:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ac84:	4643      	mov	r3, r8
 801ac86:	f8ad 7018 	strh.w	r7, [sp, #24]
 801ac8a:	f8ad 101a 	strh.w	r1, [sp, #26]
 801ac8e:	f8ad 001c 	strh.w	r0, [sp, #28]
 801ac92:	9600      	str	r6, [sp, #0]
 801ac94:	e779      	b.n	801ab8a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 801ac96:	bf00      	nop
 801ac98:	2400aea4 	.word	0x2400aea4

0801ac9c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801ac9c:	b180      	cbz	r0, 801acc0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801ac9e:	2903      	cmp	r1, #3
 801aca0:	d81c      	bhi.n	801acdc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801aca2:	e8df f001 	tbb	[pc, r1]
 801aca6:	1d02      	.short	0x1d02
 801aca8:	1f08      	.short	0x1f08
 801acaa:	4b10      	ldr	r3, [pc, #64]	; (801acec <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801acac:	8818      	ldrh	r0, [r3, #0]
 801acae:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801acb2:	4240      	negs	r0, r0
 801acb4:	4770      	bx	lr
 801acb6:	4b0d      	ldr	r3, [pc, #52]	; (801acec <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801acb8:	8818      	ldrh	r0, [r3, #0]
 801acba:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801acbe:	4770      	bx	lr
 801acc0:	2903      	cmp	r1, #3
 801acc2:	d80b      	bhi.n	801acdc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801acc4:	a301      	add	r3, pc, #4	; (adr r3, 801accc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 801acc6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801acca:	bf00      	nop
 801accc:	0801ace1 	.word	0x0801ace1
 801acd0:	0801acb7 	.word	0x0801acb7
 801acd4:	0801ace5 	.word	0x0801ace5
 801acd8:	0801acab 	.word	0x0801acab
 801acdc:	2000      	movs	r0, #0
 801acde:	4770      	bx	lr
 801ace0:	2001      	movs	r0, #1
 801ace2:	4770      	bx	lr
 801ace4:	f04f 30ff 	mov.w	r0, #4294967295
 801ace8:	4770      	bx	lr
 801acea:	bf00      	nop
 801acec:	2400ae9e 	.word	0x2400ae9e

0801acf0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801acf0:	b180      	cbz	r0, 801ad14 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 801acf2:	2903      	cmp	r1, #3
 801acf4:	d81c      	bhi.n	801ad30 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801acf6:	e8df f001 	tbb	[pc, r1]
 801acfa:	021d      	.short	0x021d
 801acfc:	071f      	.short	0x071f
 801acfe:	4b10      	ldr	r3, [pc, #64]	; (801ad40 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801ad00:	8818      	ldrh	r0, [r3, #0]
 801ad02:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801ad06:	4770      	bx	lr
 801ad08:	4b0d      	ldr	r3, [pc, #52]	; (801ad40 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801ad0a:	8818      	ldrh	r0, [r3, #0]
 801ad0c:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801ad10:	4240      	negs	r0, r0
 801ad12:	4770      	bx	lr
 801ad14:	2903      	cmp	r1, #3
 801ad16:	d80b      	bhi.n	801ad30 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801ad18:	a301      	add	r3, pc, #4	; (adr r3, 801ad20 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 801ad1a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801ad1e:	bf00      	nop
 801ad20:	0801acff 	.word	0x0801acff
 801ad24:	0801ad39 	.word	0x0801ad39
 801ad28:	0801ad09 	.word	0x0801ad09
 801ad2c:	0801ad35 	.word	0x0801ad35
 801ad30:	2000      	movs	r0, #0
 801ad32:	4770      	bx	lr
 801ad34:	2001      	movs	r0, #1
 801ad36:	4770      	bx	lr
 801ad38:	f04f 30ff 	mov.w	r0, #4294967295
 801ad3c:	4770      	bx	lr
 801ad3e:	bf00      	nop
 801ad40:	2400ae9e 	.word	0x2400ae9e

0801ad44 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801ad44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad48:	b099      	sub	sp, #100	; 0x64
 801ad4a:	910b      	str	r1, [sp, #44]	; 0x2c
 801ad4c:	a914      	add	r1, sp, #80	; 0x50
 801ad4e:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 801ad52:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 801ad56:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 801ad5a:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801ad5e:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801ad62:	e881 000c 	stmia.w	r1, {r2, r3}
 801ad66:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801ad6a:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801ad6e:	9309      	str	r3, [sp, #36]	; 0x24
 801ad70:	f891 900d 	ldrb.w	r9, [r1, #13]
 801ad74:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801ad78:	ea4f 1749 	mov.w	r7, r9, lsl #5
 801ad7c:	9310      	str	r3, [sp, #64]	; 0x40
 801ad7e:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801ad82:	930c      	str	r3, [sp, #48]	; 0x30
 801ad84:	f407 7380 	and.w	r3, r7, #256	; 0x100
 801ad88:	798f      	ldrb	r7, [r1, #6]
 801ad8a:	431f      	orrs	r7, r3
 801ad8c:	f000 8195 	beq.w	801b0ba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801ad90:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801ad94:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801ad98:	f891 9007 	ldrb.w	r9, [r1, #7]
 801ad9c:	ea59 0903 	orrs.w	r9, r9, r3
 801ada0:	f000 818b 	beq.w	801b0ba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801ada4:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801ada8:	b29b      	uxth	r3, r3
 801adaa:	2d00      	cmp	r5, #0
 801adac:	f000 812e 	beq.w	801b00c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 801adb0:	1aed      	subs	r5, r5, r3
 801adb2:	b2ad      	uxth	r5, r5
 801adb4:	042b      	lsls	r3, r5, #16
 801adb6:	d502      	bpl.n	801adbe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801adb8:	1b64      	subs	r4, r4, r5
 801adba:	2500      	movs	r5, #0
 801adbc:	b224      	sxth	r4, r4
 801adbe:	f9b2 1000 	ldrsh.w	r1, [r2]
 801adc2:	a814      	add	r0, sp, #80	; 0x50
 801adc4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801adc8:	428c      	cmp	r4, r1
 801adca:	b28b      	uxth	r3, r1
 801adcc:	bfbf      	itttt	lt
 801adce:	18ed      	addlt	r5, r5, r3
 801add0:	1b2c      	sublt	r4, r5, r4
 801add2:	b2a5      	uxthlt	r5, r4
 801add4:	460c      	movlt	r4, r1
 801add6:	8891      	ldrh	r1, [r2, #4]
 801add8:	440b      	add	r3, r1
 801adda:	4621      	mov	r1, r4
 801addc:	b21b      	sxth	r3, r3
 801adde:	930f      	str	r3, [sp, #60]	; 0x3c
 801ade0:	88d3      	ldrh	r3, [r2, #6]
 801ade2:	8852      	ldrh	r2, [r2, #2]
 801ade4:	4413      	add	r3, r2
 801ade6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ade8:	b21b      	sxth	r3, r3
 801adea:	930d      	str	r3, [sp, #52]	; 0x34
 801adec:	4bbd      	ldr	r3, [pc, #756]	; (801b0e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801adee:	f893 b000 	ldrb.w	fp, [r3]
 801adf2:	f10b 3cff 	add.w	ip, fp, #4294967295
 801adf6:	f1dc 0300 	rsbs	r3, ip, #0
 801adfa:	eb43 030c 	adc.w	r3, r3, ip
 801adfe:	930e      	str	r3, [sp, #56]	; 0x38
 801ae00:	4653      	mov	r3, sl
 801ae02:	f7f8 ff1f 	bl	8013c44 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801ae06:	4621      	mov	r1, r4
 801ae08:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801ae0c:	4653      	mov	r3, sl
 801ae0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ae10:	a814      	add	r0, sp, #80	; 0x50
 801ae12:	f7f8 ff34 	bl	8013c7e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801ae16:	a918      	add	r1, sp, #96	; 0x60
 801ae18:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801ae1c:	a817      	add	r0, sp, #92	; 0x5c
 801ae1e:	f7f9 f855 	bl	8013ecc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801ae22:	f1ba 0f00 	cmp.w	sl, #0
 801ae26:	f040 80f4 	bne.w	801b012 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801ae2a:	f1bb 0f01 	cmp.w	fp, #1
 801ae2e:	f040 80f8 	bne.w	801b022 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 801ae32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ae34:	2b00      	cmp	r3, #0
 801ae36:	f040 8145 	bne.w	801b0c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801ae3a:	b2ba      	uxth	r2, r7
 801ae3c:	b905      	cbnz	r5, 801ae40 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 801ae3e:	b16e      	cbz	r6, 801ae5c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 801ae40:	fb06 5302 	mla	r3, r6, r2, r5
 801ae44:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801ae46:	4631      	mov	r1, r6
 801ae48:	fb08 f303 	mul.w	r3, r8, r3
 801ae4c:	f003 0607 	and.w	r6, r3, #7
 801ae50:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 801ae54:	9328      	str	r3, [sp, #160]	; 0xa0
 801ae56:	eba9 0301 	sub.w	r3, r9, r1
 801ae5a:	930a      	str	r3, [sp, #40]	; 0x28
 801ae5c:	4651      	mov	r1, sl
 801ae5e:	980e      	ldr	r0, [sp, #56]	; 0x38
 801ae60:	f7ff ff1c 	bl	801ac9c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801ae64:	4681      	mov	r9, r0
 801ae66:	980e      	ldr	r0, [sp, #56]	; 0x38
 801ae68:	f7ff ff42 	bl	801acf0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801ae6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ae6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ae70:	4683      	mov	fp, r0
 801ae72:	eba3 0a01 	sub.w	sl, r3, r1
 801ae76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ae78:	459a      	cmp	sl, r3
 801ae7a:	bfa8      	it	ge
 801ae7c:	469a      	movge	sl, r3
 801ae7e:	f1ba 0f00 	cmp.w	sl, #0
 801ae82:	f340 811a 	ble.w	801b0ba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801ae86:	1b64      	subs	r4, r4, r5
 801ae88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ae8a:	1b1c      	subs	r4, r3, r4
 801ae8c:	42bc      	cmp	r4, r7
 801ae8e:	bfd4      	ite	le
 801ae90:	ebc5 0504 	rsble	r5, r5, r4
 801ae94:	ebc5 0507 	rsbgt	r5, r5, r7
 801ae98:	2d00      	cmp	r5, #0
 801ae9a:	f340 810e 	ble.w	801b0ba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801ae9e:	1b52      	subs	r2, r2, r5
 801aea0:	fb08 f302 	mul.w	r3, r8, r2
 801aea4:	930f      	str	r3, [sp, #60]	; 0x3c
 801aea6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aea8:	2b00      	cmp	r3, #0
 801aeaa:	f040 8116 	bne.w	801b0da <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801aeae:	4b8e      	ldr	r3, [pc, #568]	; (801b0e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801aeb0:	6818      	ldr	r0, [r3, #0]
 801aeb2:	6803      	ldr	r3, [r0, #0]
 801aeb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aeb6:	4798      	blx	r3
 801aeb8:	2301      	movs	r3, #1
 801aeba:	4a8c      	ldr	r2, [pc, #560]	; (801b0ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801aebc:	fa03 f308 	lsl.w	r3, r3, r8
 801aec0:	8811      	ldrh	r1, [r2, #0]
 801aec2:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801aec6:	3b01      	subs	r3, #1
 801aec8:	b2db      	uxtb	r3, r3
 801aeca:	930e      	str	r3, [sp, #56]	; 0x38
 801aecc:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801aed0:	fb01 2303 	mla	r3, r1, r3, r2
 801aed4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801aed8:	930a      	str	r3, [sp, #40]	; 0x28
 801aeda:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801aedc:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801aee0:	9313      	str	r3, [sp, #76]	; 0x4c
 801aee2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801aee4:	0a19      	lsrs	r1, r3, #8
 801aee6:	b2cb      	uxtb	r3, r1
 801aee8:	9312      	str	r3, [sp, #72]	; 0x48
 801aeea:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801aeec:	b2db      	uxtb	r3, r3
 801aeee:	9311      	str	r3, [sp, #68]	; 0x44
 801aef0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801aef2:	095a      	lsrs	r2, r3, #5
 801aef4:	4b7e      	ldr	r3, [pc, #504]	; (801b0f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801aef6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801aefa:	400b      	ands	r3, r1
 801aefc:	4313      	orrs	r3, r2
 801aefe:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801af00:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801af04:	4313      	orrs	r3, r2
 801af06:	b29b      	uxth	r3, r3
 801af08:	9310      	str	r3, [sp, #64]	; 0x40
 801af0a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801af0c:	781a      	ldrb	r2, [r3, #0]
 801af0e:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801af12:	fb05 b919 	mls	r9, r5, r9, fp
 801af16:	4132      	asrs	r2, r6
 801af18:	fb03 fb05 	mul.w	fp, r3, r5
 801af1c:	930d      	str	r3, [sp, #52]	; 0x34
 801af1e:	b2d2      	uxtb	r2, r2
 801af20:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801af24:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801af28:	f0c0 80f5 	bcc.w	801b116 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 801af2c:	46ae      	mov	lr, r5
 801af2e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801af32:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801af36:	f0c0 80dd 	bcc.w	801b0f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 801af3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801af3c:	4013      	ands	r3, r2
 801af3e:	d055      	beq.n	801afec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801af40:	20ff      	movs	r0, #255	; 0xff
 801af42:	990e      	ldr	r1, [sp, #56]	; 0x38
 801af44:	fb90 f1f1 	sdiv	r1, r0, r1
 801af48:	434b      	muls	r3, r1
 801af4a:	2bfe      	cmp	r3, #254	; 0xfe
 801af4c:	dd03      	ble.n	801af56 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 801af4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801af50:	4281      	cmp	r1, r0
 801af52:	f000 80c4 	beq.w	801b0de <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801af56:	990c      	ldr	r1, [sp, #48]	; 0x30
 801af58:	f8bc 4000 	ldrh.w	r4, [ip]
 801af5c:	fb11 f303 	smulbb	r3, r1, r3
 801af60:	1220      	asrs	r0, r4, #8
 801af62:	b29b      	uxth	r3, r3
 801af64:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801af68:	1c59      	adds	r1, r3, #1
 801af6a:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801af6e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801af72:	10e1      	asrs	r1, r4, #3
 801af74:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801af78:	00e4      	lsls	r4, r4, #3
 801af7a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801af7e:	b29f      	uxth	r7, r3
 801af80:	43db      	mvns	r3, r3
 801af82:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801af86:	b2db      	uxtb	r3, r3
 801af88:	b2e4      	uxtb	r4, r4
 801af8a:	9309      	str	r3, [sp, #36]	; 0x24
 801af8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801af8e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801af92:	fb13 f907 	smulbb	r9, r3, r7
 801af96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af98:	fb00 9003 	mla	r0, r0, r3, r9
 801af9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801af9e:	fb13 f907 	smulbb	r9, r3, r7
 801afa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801afa4:	b280      	uxth	r0, r0
 801afa6:	fb01 9103 	mla	r1, r1, r3, r9
 801afaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801afac:	fb13 f707 	smulbb	r7, r3, r7
 801afb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801afb2:	b289      	uxth	r1, r1
 801afb4:	fb04 7403 	mla	r4, r4, r3, r7
 801afb8:	1c43      	adds	r3, r0, #1
 801afba:	b2a4      	uxth	r4, r4
 801afbc:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801afc0:	f104 0901 	add.w	r9, r4, #1
 801afc4:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801afc8:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801afcc:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801afd0:	ea49 0000 	orr.w	r0, r9, r0
 801afd4:	f101 0901 	add.w	r9, r1, #1
 801afd8:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801afdc:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801afe0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801afe4:	ea40 0009 	orr.w	r0, r0, r9
 801afe8:	f8ac 0000 	strh.w	r0, [ip]
 801afec:	4446      	add	r6, r8
 801afee:	b2b6      	uxth	r6, r6
 801aff0:	2e07      	cmp	r6, #7
 801aff2:	bf89      	itett	hi
 801aff4:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801aff6:	fa42 f208 	asrls.w	r2, r2, r8
 801affa:	2600      	movhi	r6, #0
 801affc:	785a      	ldrbhi	r2, [r3, #1]
 801affe:	bf8a      	itet	hi
 801b000:	3301      	addhi	r3, #1
 801b002:	b2d2      	uxtbls	r2, r2
 801b004:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801b006:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b008:	449c      	add	ip, r3
 801b00a:	e792      	b.n	801af32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801b00c:	441c      	add	r4, r3
 801b00e:	b224      	sxth	r4, r4
 801b010:	e6d5      	b.n	801adbe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801b012:	f1ba 0f01 	cmp.w	sl, #1
 801b016:	f47f af0c 	bne.w	801ae32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801b01a:	f1bb 0f01 	cmp.w	fp, #1
 801b01e:	f47f af08 	bne.w	801ae32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801b022:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 801b0e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 801b026:	f8db 0000 	ldr.w	r0, [fp]
 801b02a:	6803      	ldr	r3, [r0, #0]
 801b02c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b02e:	4798      	blx	r3
 801b030:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801b034:	465a      	mov	r2, fp
 801b036:	d006      	beq.n	801b046 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801b038:	f1b8 0f04 	cmp.w	r8, #4
 801b03c:	d140      	bne.n	801b0c0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 801b03e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b040:	3300      	adds	r3, #0
 801b042:	bf18      	it	ne
 801b044:	2301      	movne	r3, #1
 801b046:	0580      	lsls	r0, r0, #22
 801b048:	d56e      	bpl.n	801b128 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801b04a:	f1b8 0f08 	cmp.w	r8, #8
 801b04e:	d16b      	bne.n	801b128 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801b050:	2b00      	cmp	r3, #0
 801b052:	bf0c      	ite	eq
 801b054:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801b058:	f44f 7180 	movne.w	r1, #256	; 0x100
 801b05c:	2d00      	cmp	r5, #0
 801b05e:	f47f aee8 	bne.w	801ae32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801b062:	2e00      	cmp	r6, #0
 801b064:	f47f aee5 	bne.w	801ae32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801b068:	19e3      	adds	r3, r4, r7
 801b06a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b06c:	4283      	cmp	r3, r0
 801b06e:	f73f aee0 	bgt.w	801ae32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801b072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b074:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b076:	444b      	add	r3, r9
 801b078:	4283      	cmp	r3, r0
 801b07a:	f73f aeda 	bgt.w	801ae32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801b07e:	b2bf      	uxth	r7, r7
 801b080:	f1b8 0f08 	cmp.w	r8, #8
 801b084:	6810      	ldr	r0, [r2, #0]
 801b086:	f04f 0500 	mov.w	r5, #0
 801b08a:	bf18      	it	ne
 801b08c:	3701      	addne	r7, #1
 801b08e:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801b092:	6804      	ldr	r4, [r0, #0]
 801b094:	bf18      	it	ne
 801b096:	f027 0701 	bicne.w	r7, r7, #1
 801b09a:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801b09e:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801b0a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b0a4:	bf18      	it	ne
 801b0a6:	b2bf      	uxthne	r7, r7
 801b0a8:	9104      	str	r1, [sp, #16]
 801b0aa:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801b0ac:	e9cd 7900 	strd	r7, r9, [sp]
 801b0b0:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801b0b4:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801b0b6:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801b0b8:	47a0      	blx	r4
 801b0ba:	b019      	add	sp, #100	; 0x64
 801b0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0c0:	2300      	movs	r3, #0
 801b0c2:	e7c0      	b.n	801b046 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801b0c4:	2208      	movs	r2, #8
 801b0c6:	fb92 f3f8 	sdiv	r3, r2, r8
 801b0ca:	1e5a      	subs	r2, r3, #1
 801b0cc:	443a      	add	r2, r7
 801b0ce:	fb92 f2f3 	sdiv	r2, r2, r3
 801b0d2:	fb12 f203 	smulbb	r2, r2, r3
 801b0d6:	b292      	uxth	r2, r2
 801b0d8:	e6b0      	b.n	801ae3c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801b0da:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b0dc:	e6ec      	b.n	801aeb8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 801b0de:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b0e0:	e782      	b.n	801afe8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 801b0e2:	bf00      	nop
 801b0e4:	2400ae9c 	.word	0x2400ae9c
 801b0e8:	2400aea4 	.word	0x2400aea4
 801b0ec:	2400ae9e 	.word	0x2400ae9e
 801b0f0:	00fff800 	.word	0x00fff800
 801b0f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b0f6:	b153      	cbz	r3, 801b10e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 801b0f8:	441e      	add	r6, r3
 801b0fa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b0fc:	b2b6      	uxth	r6, r6
 801b0fe:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 801b102:	f006 0607 	and.w	r6, r6, #7
 801b106:	781a      	ldrb	r2, [r3, #0]
 801b108:	9328      	str	r3, [sp, #160]	; 0xa0
 801b10a:	4132      	asrs	r2, r6
 801b10c:	b2d2      	uxtb	r2, r2
 801b10e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b110:	445b      	add	r3, fp
 801b112:	930a      	str	r3, [sp, #40]	; 0x28
 801b114:	e706      	b.n	801af24 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801b116:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b118:	2b00      	cmp	r3, #0
 801b11a:	d1ce      	bne.n	801b0ba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801b11c:	4b05      	ldr	r3, [pc, #20]	; (801b134 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 801b11e:	6818      	ldr	r0, [r3, #0]
 801b120:	6803      	ldr	r3, [r0, #0]
 801b122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b124:	4798      	blx	r3
 801b126:	e7c8      	b.n	801b0ba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801b128:	2b00      	cmp	r3, #0
 801b12a:	f43f ae82 	beq.w	801ae32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801b12e:	f44f 7180 	mov.w	r1, #256	; 0x100
 801b132:	e793      	b.n	801b05c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 801b134:	2400aea4 	.word	0x2400aea4

0801b138 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801b138:	b538      	push	{r3, r4, r5, lr}
 801b13a:	4c15      	ldr	r4, [pc, #84]	; (801b190 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801b13c:	4605      	mov	r5, r0
 801b13e:	7823      	ldrb	r3, [r4, #0]
 801b140:	f3bf 8f5b 	dmb	ish
 801b144:	07da      	lsls	r2, r3, #31
 801b146:	d40b      	bmi.n	801b160 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801b148:	4620      	mov	r0, r4
 801b14a:	f007 fa68 	bl	802261e <__cxa_guard_acquire>
 801b14e:	b138      	cbz	r0, 801b160 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801b150:	4620      	mov	r0, r4
 801b152:	f007 fa70 	bl	8022636 <__cxa_guard_release>
 801b156:	4a0f      	ldr	r2, [pc, #60]	; (801b194 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801b158:	490f      	ldr	r1, [pc, #60]	; (801b198 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801b15a:	4810      	ldr	r0, [pc, #64]	; (801b19c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801b15c:	f007 fa58 	bl	8022610 <__aeabi_atexit>
 801b160:	4c0f      	ldr	r4, [pc, #60]	; (801b1a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801b162:	7823      	ldrb	r3, [r4, #0]
 801b164:	f3bf 8f5b 	dmb	ish
 801b168:	07db      	lsls	r3, r3, #31
 801b16a:	d40b      	bmi.n	801b184 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801b16c:	4620      	mov	r0, r4
 801b16e:	f007 fa56 	bl	802261e <__cxa_guard_acquire>
 801b172:	b138      	cbz	r0, 801b184 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801b174:	4620      	mov	r0, r4
 801b176:	f007 fa5e 	bl	8022636 <__cxa_guard_release>
 801b17a:	4a06      	ldr	r2, [pc, #24]	; (801b194 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801b17c:	4909      	ldr	r1, [pc, #36]	; (801b1a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801b17e:	480a      	ldr	r0, [pc, #40]	; (801b1a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801b180:	f007 fa46 	bl	8022610 <__aeabi_atexit>
 801b184:	4b05      	ldr	r3, [pc, #20]	; (801b19c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801b186:	612b      	str	r3, [r5, #16]
 801b188:	4b07      	ldr	r3, [pc, #28]	; (801b1a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801b18a:	616b      	str	r3, [r5, #20]
 801b18c:	bd38      	pop	{r3, r4, r5, pc}
 801b18e:	bf00      	nop
 801b190:	2400af70 	.word	0x2400af70
 801b194:	24000000 	.word	0x24000000
 801b198:	08019357 	.word	0x08019357
 801b19c:	24000090 	.word	0x24000090
 801b1a0:	2400af74 	.word	0x2400af74
 801b1a4:	08019355 	.word	0x08019355
 801b1a8:	24000094 	.word	0x24000094

0801b1ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801b1ac:	b538      	push	{r3, r4, r5, lr}
 801b1ae:	4c15      	ldr	r4, [pc, #84]	; (801b204 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801b1b0:	4605      	mov	r5, r0
 801b1b2:	7823      	ldrb	r3, [r4, #0]
 801b1b4:	f3bf 8f5b 	dmb	ish
 801b1b8:	07da      	lsls	r2, r3, #31
 801b1ba:	d40b      	bmi.n	801b1d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801b1bc:	4620      	mov	r0, r4
 801b1be:	f007 fa2e 	bl	802261e <__cxa_guard_acquire>
 801b1c2:	b138      	cbz	r0, 801b1d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801b1c4:	4620      	mov	r0, r4
 801b1c6:	f007 fa36 	bl	8022636 <__cxa_guard_release>
 801b1ca:	4a0f      	ldr	r2, [pc, #60]	; (801b208 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801b1cc:	490f      	ldr	r1, [pc, #60]	; (801b20c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801b1ce:	4810      	ldr	r0, [pc, #64]	; (801b210 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801b1d0:	f007 fa1e 	bl	8022610 <__aeabi_atexit>
 801b1d4:	4c0f      	ldr	r4, [pc, #60]	; (801b214 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801b1d6:	7823      	ldrb	r3, [r4, #0]
 801b1d8:	f3bf 8f5b 	dmb	ish
 801b1dc:	07db      	lsls	r3, r3, #31
 801b1de:	d40b      	bmi.n	801b1f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801b1e0:	4620      	mov	r0, r4
 801b1e2:	f007 fa1c 	bl	802261e <__cxa_guard_acquire>
 801b1e6:	b138      	cbz	r0, 801b1f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801b1e8:	4620      	mov	r0, r4
 801b1ea:	f007 fa24 	bl	8022636 <__cxa_guard_release>
 801b1ee:	4a06      	ldr	r2, [pc, #24]	; (801b208 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801b1f0:	4909      	ldr	r1, [pc, #36]	; (801b218 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801b1f2:	480a      	ldr	r0, [pc, #40]	; (801b21c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801b1f4:	f007 fa0c 	bl	8022610 <__aeabi_atexit>
 801b1f8:	4b05      	ldr	r3, [pc, #20]	; (801b210 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801b1fa:	60ab      	str	r3, [r5, #8]
 801b1fc:	4b07      	ldr	r3, [pc, #28]	; (801b21c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801b1fe:	60eb      	str	r3, [r5, #12]
 801b200:	bd38      	pop	{r3, r4, r5, pc}
 801b202:	bf00      	nop
 801b204:	2400af48 	.word	0x2400af48
 801b208:	24000000 	.word	0x24000000
 801b20c:	0801935b 	.word	0x0801935b
 801b210:	24000068 	.word	0x24000068
 801b214:	2400af4c 	.word	0x2400af4c
 801b218:	08019359 	.word	0x08019359
 801b21c:	2400006c 	.word	0x2400006c

0801b220 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801b220:	b510      	push	{r4, lr}
 801b222:	4604      	mov	r4, r0
 801b224:	f7ff ff88 	bl	801b138 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801b228:	4620      	mov	r0, r4
 801b22a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b22e:	f7ff bfbd 	b.w	801b1ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801b234 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801b234:	b538      	push	{r3, r4, r5, lr}
 801b236:	4c15      	ldr	r4, [pc, #84]	; (801b28c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801b238:	4605      	mov	r5, r0
 801b23a:	7823      	ldrb	r3, [r4, #0]
 801b23c:	f3bf 8f5b 	dmb	ish
 801b240:	07da      	lsls	r2, r3, #31
 801b242:	d40b      	bmi.n	801b25c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801b244:	4620      	mov	r0, r4
 801b246:	f007 f9ea 	bl	802261e <__cxa_guard_acquire>
 801b24a:	b138      	cbz	r0, 801b25c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801b24c:	4620      	mov	r0, r4
 801b24e:	f007 f9f2 	bl	8022636 <__cxa_guard_release>
 801b252:	4a0f      	ldr	r2, [pc, #60]	; (801b290 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801b254:	490f      	ldr	r1, [pc, #60]	; (801b294 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801b256:	4810      	ldr	r0, [pc, #64]	; (801b298 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801b258:	f007 f9da 	bl	8022610 <__aeabi_atexit>
 801b25c:	4c0f      	ldr	r4, [pc, #60]	; (801b29c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801b25e:	7823      	ldrb	r3, [r4, #0]
 801b260:	f3bf 8f5b 	dmb	ish
 801b264:	07db      	lsls	r3, r3, #31
 801b266:	d40b      	bmi.n	801b280 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801b268:	4620      	mov	r0, r4
 801b26a:	f007 f9d8 	bl	802261e <__cxa_guard_acquire>
 801b26e:	b138      	cbz	r0, 801b280 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801b270:	4620      	mov	r0, r4
 801b272:	f007 f9e0 	bl	8022636 <__cxa_guard_release>
 801b276:	4a06      	ldr	r2, [pc, #24]	; (801b290 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801b278:	4909      	ldr	r1, [pc, #36]	; (801b2a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801b27a:	480a      	ldr	r0, [pc, #40]	; (801b2a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801b27c:	f007 f9c8 	bl	8022610 <__aeabi_atexit>
 801b280:	4b05      	ldr	r3, [pc, #20]	; (801b298 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801b282:	622b      	str	r3, [r5, #32]
 801b284:	4b07      	ldr	r3, [pc, #28]	; (801b2a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801b286:	626b      	str	r3, [r5, #36]	; 0x24
 801b288:	bd38      	pop	{r3, r4, r5, pc}
 801b28a:	bf00      	nop
 801b28c:	2400af78 	.word	0x2400af78
 801b290:	24000000 	.word	0x24000000
 801b294:	0801934f 	.word	0x0801934f
 801b298:	24000098 	.word	0x24000098
 801b29c:	2400af7c 	.word	0x2400af7c
 801b2a0:	0801934d 	.word	0x0801934d
 801b2a4:	2400009c 	.word	0x2400009c

0801b2a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801b2a8:	b538      	push	{r3, r4, r5, lr}
 801b2aa:	4c15      	ldr	r4, [pc, #84]	; (801b300 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801b2ac:	4605      	mov	r5, r0
 801b2ae:	7823      	ldrb	r3, [r4, #0]
 801b2b0:	f3bf 8f5b 	dmb	ish
 801b2b4:	07da      	lsls	r2, r3, #31
 801b2b6:	d40b      	bmi.n	801b2d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801b2b8:	4620      	mov	r0, r4
 801b2ba:	f007 f9b0 	bl	802261e <__cxa_guard_acquire>
 801b2be:	b138      	cbz	r0, 801b2d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801b2c0:	4620      	mov	r0, r4
 801b2c2:	f007 f9b8 	bl	8022636 <__cxa_guard_release>
 801b2c6:	4a0f      	ldr	r2, [pc, #60]	; (801b304 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801b2c8:	490f      	ldr	r1, [pc, #60]	; (801b308 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801b2ca:	4810      	ldr	r0, [pc, #64]	; (801b30c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801b2cc:	f007 f9a0 	bl	8022610 <__aeabi_atexit>
 801b2d0:	4c0f      	ldr	r4, [pc, #60]	; (801b310 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801b2d2:	7823      	ldrb	r3, [r4, #0]
 801b2d4:	f3bf 8f5b 	dmb	ish
 801b2d8:	07db      	lsls	r3, r3, #31
 801b2da:	d40b      	bmi.n	801b2f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801b2dc:	4620      	mov	r0, r4
 801b2de:	f007 f99e 	bl	802261e <__cxa_guard_acquire>
 801b2e2:	b138      	cbz	r0, 801b2f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801b2e4:	4620      	mov	r0, r4
 801b2e6:	f007 f9a6 	bl	8022636 <__cxa_guard_release>
 801b2ea:	4a06      	ldr	r2, [pc, #24]	; (801b304 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801b2ec:	4909      	ldr	r1, [pc, #36]	; (801b314 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801b2ee:	480a      	ldr	r0, [pc, #40]	; (801b318 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801b2f0:	f007 f98e 	bl	8022610 <__aeabi_atexit>
 801b2f4:	4b05      	ldr	r3, [pc, #20]	; (801b30c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801b2f6:	61ab      	str	r3, [r5, #24]
 801b2f8:	4b07      	ldr	r3, [pc, #28]	; (801b318 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801b2fa:	61eb      	str	r3, [r5, #28]
 801b2fc:	bd38      	pop	{r3, r4, r5, pc}
 801b2fe:	bf00      	nop
 801b300:	2400af50 	.word	0x2400af50
 801b304:	24000000 	.word	0x24000000
 801b308:	08019353 	.word	0x08019353
 801b30c:	24000070 	.word	0x24000070
 801b310:	2400af54 	.word	0x2400af54
 801b314:	08019351 	.word	0x08019351
 801b318:	24000074 	.word	0x24000074

0801b31c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801b31c:	b510      	push	{r4, lr}
 801b31e:	4604      	mov	r4, r0
 801b320:	f7ff ff88 	bl	801b234 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801b324:	4620      	mov	r0, r4
 801b326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b32a:	f7ff bfbd 	b.w	801b2a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801b330 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801b330:	b538      	push	{r3, r4, r5, lr}
 801b332:	4c15      	ldr	r4, [pc, #84]	; (801b388 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801b334:	4605      	mov	r5, r0
 801b336:	7823      	ldrb	r3, [r4, #0]
 801b338:	f3bf 8f5b 	dmb	ish
 801b33c:	07da      	lsls	r2, r3, #31
 801b33e:	d40b      	bmi.n	801b358 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801b340:	4620      	mov	r0, r4
 801b342:	f007 f96c 	bl	802261e <__cxa_guard_acquire>
 801b346:	b138      	cbz	r0, 801b358 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801b348:	4620      	mov	r0, r4
 801b34a:	f007 f974 	bl	8022636 <__cxa_guard_release>
 801b34e:	4a0f      	ldr	r2, [pc, #60]	; (801b38c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801b350:	490f      	ldr	r1, [pc, #60]	; (801b390 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801b352:	4810      	ldr	r0, [pc, #64]	; (801b394 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801b354:	f007 f95c 	bl	8022610 <__aeabi_atexit>
 801b358:	4c0f      	ldr	r4, [pc, #60]	; (801b398 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801b35a:	7823      	ldrb	r3, [r4, #0]
 801b35c:	f3bf 8f5b 	dmb	ish
 801b360:	07db      	lsls	r3, r3, #31
 801b362:	d40b      	bmi.n	801b37c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801b364:	4620      	mov	r0, r4
 801b366:	f007 f95a 	bl	802261e <__cxa_guard_acquire>
 801b36a:	b138      	cbz	r0, 801b37c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801b36c:	4620      	mov	r0, r4
 801b36e:	f007 f962 	bl	8022636 <__cxa_guard_release>
 801b372:	4a06      	ldr	r2, [pc, #24]	; (801b38c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801b374:	4909      	ldr	r1, [pc, #36]	; (801b39c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801b376:	480a      	ldr	r0, [pc, #40]	; (801b3a0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801b378:	f007 f94a 	bl	8022610 <__aeabi_atexit>
 801b37c:	4b05      	ldr	r3, [pc, #20]	; (801b394 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801b37e:	632b      	str	r3, [r5, #48]	; 0x30
 801b380:	4b07      	ldr	r3, [pc, #28]	; (801b3a0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801b382:	636b      	str	r3, [r5, #52]	; 0x34
 801b384:	bd38      	pop	{r3, r4, r5, pc}
 801b386:	bf00      	nop
 801b388:	2400af88 	.word	0x2400af88
 801b38c:	24000000 	.word	0x24000000
 801b390:	08019347 	.word	0x08019347
 801b394:	240000a8 	.word	0x240000a8
 801b398:	2400af8c 	.word	0x2400af8c
 801b39c:	08019345 	.word	0x08019345
 801b3a0:	240000ac 	.word	0x240000ac

0801b3a4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801b3a4:	b538      	push	{r3, r4, r5, lr}
 801b3a6:	4c15      	ldr	r4, [pc, #84]	; (801b3fc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801b3a8:	4605      	mov	r5, r0
 801b3aa:	7823      	ldrb	r3, [r4, #0]
 801b3ac:	f3bf 8f5b 	dmb	ish
 801b3b0:	07da      	lsls	r2, r3, #31
 801b3b2:	d40b      	bmi.n	801b3cc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801b3b4:	4620      	mov	r0, r4
 801b3b6:	f007 f932 	bl	802261e <__cxa_guard_acquire>
 801b3ba:	b138      	cbz	r0, 801b3cc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801b3bc:	4620      	mov	r0, r4
 801b3be:	f007 f93a 	bl	8022636 <__cxa_guard_release>
 801b3c2:	4a0f      	ldr	r2, [pc, #60]	; (801b400 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801b3c4:	490f      	ldr	r1, [pc, #60]	; (801b404 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801b3c6:	4810      	ldr	r0, [pc, #64]	; (801b408 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801b3c8:	f007 f922 	bl	8022610 <__aeabi_atexit>
 801b3cc:	4c0f      	ldr	r4, [pc, #60]	; (801b40c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801b3ce:	7823      	ldrb	r3, [r4, #0]
 801b3d0:	f3bf 8f5b 	dmb	ish
 801b3d4:	07db      	lsls	r3, r3, #31
 801b3d6:	d40b      	bmi.n	801b3f0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801b3d8:	4620      	mov	r0, r4
 801b3da:	f007 f920 	bl	802261e <__cxa_guard_acquire>
 801b3de:	b138      	cbz	r0, 801b3f0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801b3e0:	4620      	mov	r0, r4
 801b3e2:	f007 f928 	bl	8022636 <__cxa_guard_release>
 801b3e6:	4a06      	ldr	r2, [pc, #24]	; (801b400 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801b3e8:	4909      	ldr	r1, [pc, #36]	; (801b410 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801b3ea:	480a      	ldr	r0, [pc, #40]	; (801b414 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801b3ec:	f007 f910 	bl	8022610 <__aeabi_atexit>
 801b3f0:	4b05      	ldr	r3, [pc, #20]	; (801b408 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801b3f2:	62ab      	str	r3, [r5, #40]	; 0x28
 801b3f4:	4b07      	ldr	r3, [pc, #28]	; (801b414 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801b3f6:	62eb      	str	r3, [r5, #44]	; 0x2c
 801b3f8:	bd38      	pop	{r3, r4, r5, pc}
 801b3fa:	bf00      	nop
 801b3fc:	2400af58 	.word	0x2400af58
 801b400:	24000000 	.word	0x24000000
 801b404:	0801934b 	.word	0x0801934b
 801b408:	24000078 	.word	0x24000078
 801b40c:	2400af5c 	.word	0x2400af5c
 801b410:	08019349 	.word	0x08019349
 801b414:	2400007c 	.word	0x2400007c

0801b418 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801b418:	b510      	push	{r4, lr}
 801b41a:	4604      	mov	r4, r0
 801b41c:	f7ff ff88 	bl	801b330 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801b420:	4620      	mov	r0, r4
 801b422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b426:	f7ff bfbd 	b.w	801b3a4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801b42c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801b42c:	b538      	push	{r3, r4, r5, lr}
 801b42e:	4c15      	ldr	r4, [pc, #84]	; (801b484 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801b430:	4605      	mov	r5, r0
 801b432:	7823      	ldrb	r3, [r4, #0]
 801b434:	f3bf 8f5b 	dmb	ish
 801b438:	07da      	lsls	r2, r3, #31
 801b43a:	d40b      	bmi.n	801b454 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801b43c:	4620      	mov	r0, r4
 801b43e:	f007 f8ee 	bl	802261e <__cxa_guard_acquire>
 801b442:	b138      	cbz	r0, 801b454 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801b444:	4620      	mov	r0, r4
 801b446:	f007 f8f6 	bl	8022636 <__cxa_guard_release>
 801b44a:	4a0f      	ldr	r2, [pc, #60]	; (801b488 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801b44c:	490f      	ldr	r1, [pc, #60]	; (801b48c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801b44e:	4810      	ldr	r0, [pc, #64]	; (801b490 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801b450:	f007 f8de 	bl	8022610 <__aeabi_atexit>
 801b454:	4c0f      	ldr	r4, [pc, #60]	; (801b494 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801b456:	7823      	ldrb	r3, [r4, #0]
 801b458:	f3bf 8f5b 	dmb	ish
 801b45c:	07db      	lsls	r3, r3, #31
 801b45e:	d40b      	bmi.n	801b478 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801b460:	4620      	mov	r0, r4
 801b462:	f007 f8dc 	bl	802261e <__cxa_guard_acquire>
 801b466:	b138      	cbz	r0, 801b478 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801b468:	4620      	mov	r0, r4
 801b46a:	f007 f8e4 	bl	8022636 <__cxa_guard_release>
 801b46e:	4a06      	ldr	r2, [pc, #24]	; (801b488 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801b470:	4909      	ldr	r1, [pc, #36]	; (801b498 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801b472:	480a      	ldr	r0, [pc, #40]	; (801b49c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801b474:	f007 f8cc 	bl	8022610 <__aeabi_atexit>
 801b478:	4b05      	ldr	r3, [pc, #20]	; (801b490 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801b47a:	652b      	str	r3, [r5, #80]	; 0x50
 801b47c:	4b07      	ldr	r3, [pc, #28]	; (801b49c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801b47e:	656b      	str	r3, [r5, #84]	; 0x54
 801b480:	bd38      	pop	{r3, r4, r5, pc}
 801b482:	bf00      	nop
 801b484:	2400af90 	.word	0x2400af90
 801b488:	24000000 	.word	0x24000000
 801b48c:	08019337 	.word	0x08019337
 801b490:	240000b0 	.word	0x240000b0
 801b494:	2400af94 	.word	0x2400af94
 801b498:	08019335 	.word	0x08019335
 801b49c:	240000b4 	.word	0x240000b4

0801b4a0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801b4a0:	b538      	push	{r3, r4, r5, lr}
 801b4a2:	4c15      	ldr	r4, [pc, #84]	; (801b4f8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801b4a4:	4605      	mov	r5, r0
 801b4a6:	7823      	ldrb	r3, [r4, #0]
 801b4a8:	f3bf 8f5b 	dmb	ish
 801b4ac:	07da      	lsls	r2, r3, #31
 801b4ae:	d40b      	bmi.n	801b4c8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801b4b0:	4620      	mov	r0, r4
 801b4b2:	f007 f8b4 	bl	802261e <__cxa_guard_acquire>
 801b4b6:	b138      	cbz	r0, 801b4c8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801b4b8:	4620      	mov	r0, r4
 801b4ba:	f007 f8bc 	bl	8022636 <__cxa_guard_release>
 801b4be:	4a0f      	ldr	r2, [pc, #60]	; (801b4fc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801b4c0:	490f      	ldr	r1, [pc, #60]	; (801b500 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801b4c2:	4810      	ldr	r0, [pc, #64]	; (801b504 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801b4c4:	f007 f8a4 	bl	8022610 <__aeabi_atexit>
 801b4c8:	4c0f      	ldr	r4, [pc, #60]	; (801b508 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801b4ca:	7823      	ldrb	r3, [r4, #0]
 801b4cc:	f3bf 8f5b 	dmb	ish
 801b4d0:	07db      	lsls	r3, r3, #31
 801b4d2:	d40b      	bmi.n	801b4ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801b4d4:	4620      	mov	r0, r4
 801b4d6:	f007 f8a2 	bl	802261e <__cxa_guard_acquire>
 801b4da:	b138      	cbz	r0, 801b4ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801b4dc:	4620      	mov	r0, r4
 801b4de:	f007 f8aa 	bl	8022636 <__cxa_guard_release>
 801b4e2:	4a06      	ldr	r2, [pc, #24]	; (801b4fc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801b4e4:	4909      	ldr	r1, [pc, #36]	; (801b50c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801b4e6:	480a      	ldr	r0, [pc, #40]	; (801b510 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801b4e8:	f007 f892 	bl	8022610 <__aeabi_atexit>
 801b4ec:	4b05      	ldr	r3, [pc, #20]	; (801b504 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801b4ee:	64ab      	str	r3, [r5, #72]	; 0x48
 801b4f0:	4b07      	ldr	r3, [pc, #28]	; (801b510 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801b4f2:	64eb      	str	r3, [r5, #76]	; 0x4c
 801b4f4:	bd38      	pop	{r3, r4, r5, pc}
 801b4f6:	bf00      	nop
 801b4f8:	2400af98 	.word	0x2400af98
 801b4fc:	24000000 	.word	0x24000000
 801b500:	0801933b 	.word	0x0801933b
 801b504:	240000b8 	.word	0x240000b8
 801b508:	2400af9c 	.word	0x2400af9c
 801b50c:	08019339 	.word	0x08019339
 801b510:	240000bc 	.word	0x240000bc

0801b514 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801b514:	b538      	push	{r3, r4, r5, lr}
 801b516:	4c15      	ldr	r4, [pc, #84]	; (801b56c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801b518:	4605      	mov	r5, r0
 801b51a:	7823      	ldrb	r3, [r4, #0]
 801b51c:	f3bf 8f5b 	dmb	ish
 801b520:	07da      	lsls	r2, r3, #31
 801b522:	d40b      	bmi.n	801b53c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801b524:	4620      	mov	r0, r4
 801b526:	f007 f87a 	bl	802261e <__cxa_guard_acquire>
 801b52a:	b138      	cbz	r0, 801b53c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801b52c:	4620      	mov	r0, r4
 801b52e:	f007 f882 	bl	8022636 <__cxa_guard_release>
 801b532:	4a0f      	ldr	r2, [pc, #60]	; (801b570 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801b534:	490f      	ldr	r1, [pc, #60]	; (801b574 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801b536:	4810      	ldr	r0, [pc, #64]	; (801b578 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801b538:	f007 f86a 	bl	8022610 <__aeabi_atexit>
 801b53c:	4c0f      	ldr	r4, [pc, #60]	; (801b57c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801b53e:	7823      	ldrb	r3, [r4, #0]
 801b540:	f3bf 8f5b 	dmb	ish
 801b544:	07db      	lsls	r3, r3, #31
 801b546:	d40b      	bmi.n	801b560 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801b548:	4620      	mov	r0, r4
 801b54a:	f007 f868 	bl	802261e <__cxa_guard_acquire>
 801b54e:	b138      	cbz	r0, 801b560 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801b550:	4620      	mov	r0, r4
 801b552:	f007 f870 	bl	8022636 <__cxa_guard_release>
 801b556:	4a06      	ldr	r2, [pc, #24]	; (801b570 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801b558:	4909      	ldr	r1, [pc, #36]	; (801b580 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801b55a:	480a      	ldr	r0, [pc, #40]	; (801b584 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801b55c:	f007 f858 	bl	8022610 <__aeabi_atexit>
 801b560:	4b05      	ldr	r3, [pc, #20]	; (801b578 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801b562:	642b      	str	r3, [r5, #64]	; 0x40
 801b564:	4b07      	ldr	r3, [pc, #28]	; (801b584 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801b566:	646b      	str	r3, [r5, #68]	; 0x44
 801b568:	bd38      	pop	{r3, r4, r5, pc}
 801b56a:	bf00      	nop
 801b56c:	2400af60 	.word	0x2400af60
 801b570:	24000000 	.word	0x24000000
 801b574:	0801933f 	.word	0x0801933f
 801b578:	24000080 	.word	0x24000080
 801b57c:	2400af64 	.word	0x2400af64
 801b580:	0801933d 	.word	0x0801933d
 801b584:	24000084 	.word	0x24000084

0801b588 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801b588:	b538      	push	{r3, r4, r5, lr}
 801b58a:	4c15      	ldr	r4, [pc, #84]	; (801b5e0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801b58c:	4605      	mov	r5, r0
 801b58e:	7823      	ldrb	r3, [r4, #0]
 801b590:	f3bf 8f5b 	dmb	ish
 801b594:	07da      	lsls	r2, r3, #31
 801b596:	d40b      	bmi.n	801b5b0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801b598:	4620      	mov	r0, r4
 801b59a:	f007 f840 	bl	802261e <__cxa_guard_acquire>
 801b59e:	b138      	cbz	r0, 801b5b0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801b5a0:	4620      	mov	r0, r4
 801b5a2:	f007 f848 	bl	8022636 <__cxa_guard_release>
 801b5a6:	4a0f      	ldr	r2, [pc, #60]	; (801b5e4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801b5a8:	490f      	ldr	r1, [pc, #60]	; (801b5e8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801b5aa:	4810      	ldr	r0, [pc, #64]	; (801b5ec <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801b5ac:	f007 f830 	bl	8022610 <__aeabi_atexit>
 801b5b0:	4c0f      	ldr	r4, [pc, #60]	; (801b5f0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801b5b2:	7823      	ldrb	r3, [r4, #0]
 801b5b4:	f3bf 8f5b 	dmb	ish
 801b5b8:	07db      	lsls	r3, r3, #31
 801b5ba:	d40b      	bmi.n	801b5d4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801b5bc:	4620      	mov	r0, r4
 801b5be:	f007 f82e 	bl	802261e <__cxa_guard_acquire>
 801b5c2:	b138      	cbz	r0, 801b5d4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801b5c4:	4620      	mov	r0, r4
 801b5c6:	f007 f836 	bl	8022636 <__cxa_guard_release>
 801b5ca:	4a06      	ldr	r2, [pc, #24]	; (801b5e4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801b5cc:	4909      	ldr	r1, [pc, #36]	; (801b5f4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801b5ce:	480a      	ldr	r0, [pc, #40]	; (801b5f8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801b5d0:	f007 f81e 	bl	8022610 <__aeabi_atexit>
 801b5d4:	4b05      	ldr	r3, [pc, #20]	; (801b5ec <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801b5d6:	63ab      	str	r3, [r5, #56]	; 0x38
 801b5d8:	4b07      	ldr	r3, [pc, #28]	; (801b5f8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801b5da:	63eb      	str	r3, [r5, #60]	; 0x3c
 801b5dc:	bd38      	pop	{r3, r4, r5, pc}
 801b5de:	bf00      	nop
 801b5e0:	2400af80 	.word	0x2400af80
 801b5e4:	24000000 	.word	0x24000000
 801b5e8:	08019343 	.word	0x08019343
 801b5ec:	240000a0 	.word	0x240000a0
 801b5f0:	2400af84 	.word	0x2400af84
 801b5f4:	08019341 	.word	0x08019341
 801b5f8:	240000a4 	.word	0x240000a4

0801b5fc <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801b5fc:	b510      	push	{r4, lr}
 801b5fe:	4604      	mov	r4, r0
 801b600:	f7ff ff14 	bl	801b42c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801b604:	4620      	mov	r0, r4
 801b606:	f7ff ff85 	bl	801b514 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801b60a:	4620      	mov	r0, r4
 801b60c:	f7ff ff48 	bl	801b4a0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801b610:	4620      	mov	r0, r4
 801b612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b616:	f7ff bfb7 	b.w	801b588 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801b61c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801b61c:	b538      	push	{r3, r4, r5, lr}
 801b61e:	4c15      	ldr	r4, [pc, #84]	; (801b674 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801b620:	4605      	mov	r5, r0
 801b622:	7823      	ldrb	r3, [r4, #0]
 801b624:	f3bf 8f5b 	dmb	ish
 801b628:	07da      	lsls	r2, r3, #31
 801b62a:	d40b      	bmi.n	801b644 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801b62c:	4620      	mov	r0, r4
 801b62e:	f006 fff6 	bl	802261e <__cxa_guard_acquire>
 801b632:	b138      	cbz	r0, 801b644 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801b634:	4620      	mov	r0, r4
 801b636:	f006 fffe 	bl	8022636 <__cxa_guard_release>
 801b63a:	4a0f      	ldr	r2, [pc, #60]	; (801b678 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801b63c:	490f      	ldr	r1, [pc, #60]	; (801b67c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801b63e:	4810      	ldr	r0, [pc, #64]	; (801b680 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801b640:	f006 ffe6 	bl	8022610 <__aeabi_atexit>
 801b644:	4c0f      	ldr	r4, [pc, #60]	; (801b684 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801b646:	7823      	ldrb	r3, [r4, #0]
 801b648:	f3bf 8f5b 	dmb	ish
 801b64c:	07db      	lsls	r3, r3, #31
 801b64e:	d40b      	bmi.n	801b668 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801b650:	4620      	mov	r0, r4
 801b652:	f006 ffe4 	bl	802261e <__cxa_guard_acquire>
 801b656:	b138      	cbz	r0, 801b668 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801b658:	4620      	mov	r0, r4
 801b65a:	f006 ffec 	bl	8022636 <__cxa_guard_release>
 801b65e:	4a06      	ldr	r2, [pc, #24]	; (801b678 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801b660:	4909      	ldr	r1, [pc, #36]	; (801b688 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801b662:	480a      	ldr	r0, [pc, #40]	; (801b68c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801b664:	f006 ffd4 	bl	8022610 <__aeabi_atexit>
 801b668:	4b05      	ldr	r3, [pc, #20]	; (801b680 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801b66a:	662b      	str	r3, [r5, #96]	; 0x60
 801b66c:	4b07      	ldr	r3, [pc, #28]	; (801b68c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801b66e:	666b      	str	r3, [r5, #100]	; 0x64
 801b670:	bd38      	pop	{r3, r4, r5, pc}
 801b672:	bf00      	nop
 801b674:	2400af68 	.word	0x2400af68
 801b678:	24000000 	.word	0x24000000
 801b67c:	0801932f 	.word	0x0801932f
 801b680:	24000088 	.word	0x24000088
 801b684:	2400af6c 	.word	0x2400af6c
 801b688:	0801932d 	.word	0x0801932d
 801b68c:	2400008c 	.word	0x2400008c

0801b690 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801b690:	b538      	push	{r3, r4, r5, lr}
 801b692:	4c15      	ldr	r4, [pc, #84]	; (801b6e8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801b694:	4605      	mov	r5, r0
 801b696:	7823      	ldrb	r3, [r4, #0]
 801b698:	f3bf 8f5b 	dmb	ish
 801b69c:	07da      	lsls	r2, r3, #31
 801b69e:	d40b      	bmi.n	801b6b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801b6a0:	4620      	mov	r0, r4
 801b6a2:	f006 ffbc 	bl	802261e <__cxa_guard_acquire>
 801b6a6:	b138      	cbz	r0, 801b6b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801b6a8:	4620      	mov	r0, r4
 801b6aa:	f006 ffc4 	bl	8022636 <__cxa_guard_release>
 801b6ae:	4a0f      	ldr	r2, [pc, #60]	; (801b6ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801b6b0:	490f      	ldr	r1, [pc, #60]	; (801b6f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801b6b2:	4810      	ldr	r0, [pc, #64]	; (801b6f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801b6b4:	f006 ffac 	bl	8022610 <__aeabi_atexit>
 801b6b8:	4c0f      	ldr	r4, [pc, #60]	; (801b6f8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801b6ba:	7823      	ldrb	r3, [r4, #0]
 801b6bc:	f3bf 8f5b 	dmb	ish
 801b6c0:	07db      	lsls	r3, r3, #31
 801b6c2:	d40b      	bmi.n	801b6dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801b6c4:	4620      	mov	r0, r4
 801b6c6:	f006 ffaa 	bl	802261e <__cxa_guard_acquire>
 801b6ca:	b138      	cbz	r0, 801b6dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801b6cc:	4620      	mov	r0, r4
 801b6ce:	f006 ffb2 	bl	8022636 <__cxa_guard_release>
 801b6d2:	4a06      	ldr	r2, [pc, #24]	; (801b6ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801b6d4:	4909      	ldr	r1, [pc, #36]	; (801b6fc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801b6d6:	480a      	ldr	r0, [pc, #40]	; (801b700 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801b6d8:	f006 ff9a 	bl	8022610 <__aeabi_atexit>
 801b6dc:	4b05      	ldr	r3, [pc, #20]	; (801b6f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801b6de:	65ab      	str	r3, [r5, #88]	; 0x58
 801b6e0:	4b07      	ldr	r3, [pc, #28]	; (801b700 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801b6e2:	65eb      	str	r3, [r5, #92]	; 0x5c
 801b6e4:	bd38      	pop	{r3, r4, r5, pc}
 801b6e6:	bf00      	nop
 801b6e8:	2400af40 	.word	0x2400af40
 801b6ec:	24000000 	.word	0x24000000
 801b6f0:	08019333 	.word	0x08019333
 801b6f4:	24000060 	.word	0x24000060
 801b6f8:	2400af44 	.word	0x2400af44
 801b6fc:	08019331 	.word	0x08019331
 801b700:	24000064 	.word	0x24000064

0801b704 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801b704:	b510      	push	{r4, lr}
 801b706:	4604      	mov	r4, r0
 801b708:	f7ff ff88 	bl	801b61c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801b70c:	4620      	mov	r0, r4
 801b70e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b712:	f7ff bfbd 	b.w	801b690 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801b718 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801b718:	b538      	push	{r3, r4, r5, lr}
 801b71a:	4c15      	ldr	r4, [pc, #84]	; (801b770 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801b71c:	4605      	mov	r5, r0
 801b71e:	7823      	ldrb	r3, [r4, #0]
 801b720:	f3bf 8f5b 	dmb	ish
 801b724:	07da      	lsls	r2, r3, #31
 801b726:	d40b      	bmi.n	801b740 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801b728:	4620      	mov	r0, r4
 801b72a:	f006 ff78 	bl	802261e <__cxa_guard_acquire>
 801b72e:	b138      	cbz	r0, 801b740 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801b730:	4620      	mov	r0, r4
 801b732:	f006 ff80 	bl	8022636 <__cxa_guard_release>
 801b736:	4a0f      	ldr	r2, [pc, #60]	; (801b774 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801b738:	490f      	ldr	r1, [pc, #60]	; (801b778 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801b73a:	4810      	ldr	r0, [pc, #64]	; (801b77c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801b73c:	f006 ff68 	bl	8022610 <__aeabi_atexit>
 801b740:	4c0f      	ldr	r4, [pc, #60]	; (801b780 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801b742:	7823      	ldrb	r3, [r4, #0]
 801b744:	f3bf 8f5b 	dmb	ish
 801b748:	07db      	lsls	r3, r3, #31
 801b74a:	d40b      	bmi.n	801b764 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801b74c:	4620      	mov	r0, r4
 801b74e:	f006 ff66 	bl	802261e <__cxa_guard_acquire>
 801b752:	b138      	cbz	r0, 801b764 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801b754:	4620      	mov	r0, r4
 801b756:	f006 ff6e 	bl	8022636 <__cxa_guard_release>
 801b75a:	4a06      	ldr	r2, [pc, #24]	; (801b774 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801b75c:	4909      	ldr	r1, [pc, #36]	; (801b784 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801b75e:	480a      	ldr	r0, [pc, #40]	; (801b788 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801b760:	f006 ff56 	bl	8022610 <__aeabi_atexit>
 801b764:	4b05      	ldr	r3, [pc, #20]	; (801b77c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801b766:	672b      	str	r3, [r5, #112]	; 0x70
 801b768:	4b07      	ldr	r3, [pc, #28]	; (801b788 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801b76a:	676b      	str	r3, [r5, #116]	; 0x74
 801b76c:	bd38      	pop	{r3, r4, r5, pc}
 801b76e:	bf00      	nop
 801b770:	2400af38 	.word	0x2400af38
 801b774:	24000000 	.word	0x24000000
 801b778:	08019327 	.word	0x08019327
 801b77c:	24000058 	.word	0x24000058
 801b780:	2400af3c 	.word	0x2400af3c
 801b784:	08019325 	.word	0x08019325
 801b788:	2400005c 	.word	0x2400005c

0801b78c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801b78c:	b538      	push	{r3, r4, r5, lr}
 801b78e:	4c15      	ldr	r4, [pc, #84]	; (801b7e4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801b790:	4605      	mov	r5, r0
 801b792:	7823      	ldrb	r3, [r4, #0]
 801b794:	f3bf 8f5b 	dmb	ish
 801b798:	07da      	lsls	r2, r3, #31
 801b79a:	d40b      	bmi.n	801b7b4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801b79c:	4620      	mov	r0, r4
 801b79e:	f006 ff3e 	bl	802261e <__cxa_guard_acquire>
 801b7a2:	b138      	cbz	r0, 801b7b4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801b7a4:	4620      	mov	r0, r4
 801b7a6:	f006 ff46 	bl	8022636 <__cxa_guard_release>
 801b7aa:	4a0f      	ldr	r2, [pc, #60]	; (801b7e8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801b7ac:	490f      	ldr	r1, [pc, #60]	; (801b7ec <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801b7ae:	4810      	ldr	r0, [pc, #64]	; (801b7f0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801b7b0:	f006 ff2e 	bl	8022610 <__aeabi_atexit>
 801b7b4:	4c0f      	ldr	r4, [pc, #60]	; (801b7f4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801b7b6:	7823      	ldrb	r3, [r4, #0]
 801b7b8:	f3bf 8f5b 	dmb	ish
 801b7bc:	07db      	lsls	r3, r3, #31
 801b7be:	d40b      	bmi.n	801b7d8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801b7c0:	4620      	mov	r0, r4
 801b7c2:	f006 ff2c 	bl	802261e <__cxa_guard_acquire>
 801b7c6:	b138      	cbz	r0, 801b7d8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801b7c8:	4620      	mov	r0, r4
 801b7ca:	f006 ff34 	bl	8022636 <__cxa_guard_release>
 801b7ce:	4a06      	ldr	r2, [pc, #24]	; (801b7e8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801b7d0:	4909      	ldr	r1, [pc, #36]	; (801b7f8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801b7d2:	480a      	ldr	r0, [pc, #40]	; (801b7fc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801b7d4:	f006 ff1c 	bl	8022610 <__aeabi_atexit>
 801b7d8:	4b05      	ldr	r3, [pc, #20]	; (801b7f0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801b7da:	66ab      	str	r3, [r5, #104]	; 0x68
 801b7dc:	4b07      	ldr	r3, [pc, #28]	; (801b7fc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801b7de:	66eb      	str	r3, [r5, #108]	; 0x6c
 801b7e0:	bd38      	pop	{r3, r4, r5, pc}
 801b7e2:	bf00      	nop
 801b7e4:	2400af30 	.word	0x2400af30
 801b7e8:	24000000 	.word	0x24000000
 801b7ec:	0801932b 	.word	0x0801932b
 801b7f0:	24000050 	.word	0x24000050
 801b7f4:	2400af34 	.word	0x2400af34
 801b7f8:	08019329 	.word	0x08019329
 801b7fc:	24000054 	.word	0x24000054

0801b800 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801b800:	b510      	push	{r4, lr}
 801b802:	4604      	mov	r4, r0
 801b804:	f7ff ff88 	bl	801b718 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801b808:	4620      	mov	r0, r4
 801b80a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b80e:	f7ff bfbd 	b.w	801b78c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801b812 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801b812:	b510      	push	{r4, lr}
 801b814:	4604      	mov	r4, r0
 801b816:	f7ff fff3 	bl	801b800 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801b81a:	4620      	mov	r0, r4
 801b81c:	f7ff ff72 	bl	801b704 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801b820:	4620      	mov	r0, r4
 801b822:	f7ff fdf9 	bl	801b418 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801b826:	4620      	mov	r0, r4
 801b828:	f7ff fcfa 	bl	801b220 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801b82c:	4620      	mov	r0, r4
 801b82e:	f7ff fd75 	bl	801b31c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801b832:	4620      	mov	r0, r4
 801b834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b838:	f7ff bee0 	b.w	801b5fc <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801b83c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801b83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b840:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 801b844:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 801b848:	2d00      	cmp	r5, #0
 801b84a:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 801b84e:	fb05 4c0e 	mla	ip, r5, lr, r4
 801b852:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 801b856:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801b85a:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801b85e:	eb02 0a0c 	add.w	sl, r2, ip
 801b862:	8808      	ldrh	r0, [r1, #0]
 801b864:	f2c0 80b0 	blt.w	801b9c8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801b868:	45ab      	cmp	fp, r5
 801b86a:	f340 80ad 	ble.w	801b9c8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801b86e:	2c00      	cmp	r4, #0
 801b870:	f2c0 80a8 	blt.w	801b9c4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801b874:	45a6      	cmp	lr, r4
 801b876:	f340 80a5 	ble.w	801b9c4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801b87a:	f812 200c 	ldrb.w	r2, [r2, ip]
 801b87e:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 801b882:	1c62      	adds	r2, r4, #1
 801b884:	f100 80a3 	bmi.w	801b9ce <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801b888:	4596      	cmp	lr, r2
 801b88a:	f340 80a0 	ble.w	801b9ce <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801b88e:	f1b9 0f00 	cmp.w	r9, #0
 801b892:	f000 809c 	beq.w	801b9ce <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801b896:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801b89a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801b89e:	3501      	adds	r5, #1
 801b8a0:	f100 8099 	bmi.w	801b9d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801b8a4:	45ab      	cmp	fp, r5
 801b8a6:	f340 8096 	ble.w	801b9d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801b8aa:	2f00      	cmp	r7, #0
 801b8ac:	f000 8093 	beq.w	801b9d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801b8b0:	2c00      	cmp	r4, #0
 801b8b2:	f2c0 808e 	blt.w	801b9d2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801b8b6:	45a6      	cmp	lr, r4
 801b8b8:	f340 808b 	ble.w	801b9d2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801b8bc:	f81a 200e 	ldrb.w	r2, [sl, lr]
 801b8c0:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 801b8c4:	3401      	adds	r4, #1
 801b8c6:	f100 8089 	bmi.w	801b9dc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801b8ca:	45a6      	cmp	lr, r4
 801b8cc:	f340 8086 	ble.w	801b9dc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801b8d0:	f1b9 0f00 	cmp.w	r9, #0
 801b8d4:	f000 8082 	beq.w	801b9dc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801b8d8:	44d6      	add	lr, sl
 801b8da:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801b8de:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801b8e2:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801b8e6:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801b8ea:	fb19 fe07 	smulbb	lr, r9, r7
 801b8ee:	f1c7 0210 	rsb	r2, r7, #16
 801b8f2:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801b8f6:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801b8fa:	eba2 0209 	sub.w	r2, r2, r9
 801b8fe:	ea44 0808 	orr.w	r8, r4, r8
 801b902:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801b906:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801b90a:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801b90e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801b912:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801b916:	ea44 0c0c 	orr.w	ip, r4, ip
 801b91a:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801b91e:	fb04 f40c 	mul.w	r4, r4, ip
 801b922:	fb02 4808 	mla	r8, r2, r8, r4
 801b926:	041a      	lsls	r2, r3, #16
 801b928:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801b92c:	b2b4      	uxth	r4, r6
 801b92e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801b932:	43f6      	mvns	r6, r6
 801b934:	4313      	orrs	r3, r2
 801b936:	042a      	lsls	r2, r5, #16
 801b938:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801b93c:	b2f6      	uxtb	r6, r6
 801b93e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801b942:	fb0e 8303 	mla	r3, lr, r3, r8
 801b946:	432a      	orrs	r2, r5
 801b948:	fb07 3202 	mla	r2, r7, r2, r3
 801b94c:	10c7      	asrs	r7, r0, #3
 801b94e:	0d53      	lsrs	r3, r2, #21
 801b950:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b954:	0952      	lsrs	r2, r2, #5
 801b956:	fb17 f706 	smulbb	r7, r7, r6
 801b95a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b95e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801b962:	431a      	orrs	r2, r3
 801b964:	b293      	uxth	r3, r2
 801b966:	1202      	asrs	r2, r0, #8
 801b968:	121d      	asrs	r5, r3, #8
 801b96a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801b96e:	00c0      	lsls	r0, r0, #3
 801b970:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801b974:	fb12 f206 	smulbb	r2, r2, r6
 801b978:	b2c0      	uxtb	r0, r0
 801b97a:	fb05 2504 	mla	r5, r5, r4, r2
 801b97e:	10da      	asrs	r2, r3, #3
 801b980:	fb10 f006 	smulbb	r0, r0, r6
 801b984:	00db      	lsls	r3, r3, #3
 801b986:	b2ad      	uxth	r5, r5
 801b988:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801b98c:	b2db      	uxtb	r3, r3
 801b98e:	fb02 7204 	mla	r2, r2, r4, r7
 801b992:	fb03 0004 	mla	r0, r3, r4, r0
 801b996:	1c6b      	adds	r3, r5, #1
 801b998:	b292      	uxth	r2, r2
 801b99a:	b280      	uxth	r0, r0
 801b99c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801b9a0:	1c43      	adds	r3, r0, #1
 801b9a2:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801b9a6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801b9aa:	1c50      	adds	r0, r2, #1
 801b9ac:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801b9b0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801b9b4:	0952      	lsrs	r2, r2, #5
 801b9b6:	432b      	orrs	r3, r5
 801b9b8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b9bc:	4313      	orrs	r3, r2
 801b9be:	800b      	strh	r3, [r1, #0]
 801b9c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9c4:	4680      	mov	r8, r0
 801b9c6:	e75c      	b.n	801b882 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 801b9c8:	4684      	mov	ip, r0
 801b9ca:	4680      	mov	r8, r0
 801b9cc:	e767      	b.n	801b89e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801b9ce:	4684      	mov	ip, r0
 801b9d0:	e765      	b.n	801b89e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801b9d2:	4605      	mov	r5, r0
 801b9d4:	e776      	b.n	801b8c4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 801b9d6:	4603      	mov	r3, r0
 801b9d8:	4605      	mov	r5, r0
 801b9da:	e782      	b.n	801b8e2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801b9dc:	4603      	mov	r3, r0
 801b9de:	e780      	b.n	801b8e2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0801b9e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9e4:	b099      	sub	sp, #100	; 0x64
 801b9e6:	9215      	str	r2, [sp, #84]	; 0x54
 801b9e8:	9309      	str	r3, [sp, #36]	; 0x24
 801b9ea:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801b9ec:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 801b9f0:	9016      	str	r0, [sp, #88]	; 0x58
 801b9f2:	930d      	str	r3, [sp, #52]	; 0x34
 801b9f4:	6850      	ldr	r0, [r2, #4]
 801b9f6:	910c      	str	r1, [sp, #48]	; 0x30
 801b9f8:	6812      	ldr	r2, [r2, #0]
 801b9fa:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801b9fe:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 801ba02:	fb00 1303 	mla	r3, r0, r3, r1
 801ba06:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801ba0a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ba0c:	681b      	ldr	r3, [r3, #0]
 801ba0e:	930b      	str	r3, [sp, #44]	; 0x2c
 801ba10:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ba12:	685e      	ldr	r6, [r3, #4]
 801ba14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ba16:	3604      	adds	r6, #4
 801ba18:	43db      	mvns	r3, r3
 801ba1a:	b2db      	uxtb	r3, r3
 801ba1c:	930a      	str	r3, [sp, #40]	; 0x28
 801ba1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ba20:	2b00      	cmp	r3, #0
 801ba22:	dc03      	bgt.n	801ba2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ba24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ba26:	2b00      	cmp	r3, #0
 801ba28:	f340 8225 	ble.w	801be76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801ba2c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ba2e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ba32:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ba36:	1e48      	subs	r0, r1, #1
 801ba38:	1e57      	subs	r7, r2, #1
 801ba3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba3c:	2b00      	cmp	r3, #0
 801ba3e:	f340 80e3 	ble.w	801bc08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801ba42:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801ba46:	ea4f 4325 	mov.w	r3, r5, asr #16
 801ba4a:	d406      	bmi.n	801ba5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801ba4c:	4584      	cmp	ip, r0
 801ba4e:	da04      	bge.n	801ba5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801ba50:	2b00      	cmp	r3, #0
 801ba52:	db02      	blt.n	801ba5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801ba54:	42bb      	cmp	r3, r7
 801ba56:	f2c0 80d8 	blt.w	801bc0a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801ba5a:	f11c 0c01 	adds.w	ip, ip, #1
 801ba5e:	f100 80c9 	bmi.w	801bbf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ba62:	4561      	cmp	r1, ip
 801ba64:	f2c0 80c6 	blt.w	801bbf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ba68:	3301      	adds	r3, #1
 801ba6a:	f100 80c3 	bmi.w	801bbf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ba6e:	429a      	cmp	r2, r3
 801ba70:	f2c0 80c0 	blt.w	801bbf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ba74:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801ba78:	4647      	mov	r7, r8
 801ba7a:	f1bb 0f00 	cmp.w	fp, #0
 801ba7e:	f340 80e3 	ble.w	801bc48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801ba82:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ba84:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801ba88:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ba8a:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801ba8e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801ba92:	ea5f 422a 	movs.w	r2, sl, asr #16
 801ba96:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ba9a:	689b      	ldr	r3, [r3, #8]
 801ba9c:	f100 8121 	bmi.w	801bce2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801baa0:	f103 39ff 	add.w	r9, r3, #4294967295
 801baa4:	454a      	cmp	r2, r9
 801baa6:	f280 811c 	bge.w	801bce2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801baaa:	f1bc 0f00 	cmp.w	ip, #0
 801baae:	f2c0 8118 	blt.w	801bce2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801bab2:	f10e 39ff 	add.w	r9, lr, #4294967295
 801bab6:	45cc      	cmp	ip, r9
 801bab8:	f280 8113 	bge.w	801bce2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801babc:	b21b      	sxth	r3, r3
 801babe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801bac0:	fb0c 2203 	mla	r2, ip, r3, r2
 801bac4:	eb04 0902 	add.w	r9, r4, r2
 801bac8:	5ca2      	ldrb	r2, [r4, r2]
 801baca:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801bace:	2800      	cmp	r0, #0
 801bad0:	f000 80fe 	beq.w	801bcd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801bad4:	f899 2001 	ldrb.w	r2, [r9, #1]
 801bad8:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801badc:	9211      	str	r2, [sp, #68]	; 0x44
 801bade:	b151      	cbz	r1, 801baf6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801bae0:	eb09 0203 	add.w	r2, r9, r3
 801bae4:	f819 3003 	ldrb.w	r3, [r9, r3]
 801bae8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801baec:	930f      	str	r3, [sp, #60]	; 0x3c
 801baee:	7853      	ldrb	r3, [r2, #1]
 801baf0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801baf4:	9312      	str	r3, [sp, #72]	; 0x48
 801baf6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801baf8:	fb10 f201 	smulbb	r2, r0, r1
 801bafc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801bafe:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801bb02:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801bb06:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801bb0a:	10d2      	asrs	r2, r2, #3
 801bb0c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801bb10:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801bb14:	ea4c 0c03 	orr.w	ip, ip, r3
 801bb18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801bb1a:	041b      	lsls	r3, r3, #16
 801bb1c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801bb20:	4323      	orrs	r3, r4
 801bb22:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801bb24:	4353      	muls	r3, r2
 801bb26:	fb09 330c 	mla	r3, r9, ip, r3
 801bb2a:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801bb2e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801bb32:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801bb36:	ea4c 0e0e 	orr.w	lr, ip, lr
 801bb3a:	f1c1 0c10 	rsb	ip, r1, #16
 801bb3e:	ebac 0c00 	sub.w	ip, ip, r0
 801bb42:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801bb46:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801bb4a:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801bb4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bb50:	0418      	lsls	r0, r3, #16
 801bb52:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801bb56:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801bb5a:	4318      	orrs	r0, r3
 801bb5c:	fb02 c200 	mla	r2, r2, r0, ip
 801bb60:	8838      	ldrh	r0, [r7, #0]
 801bb62:	0d53      	lsrs	r3, r2, #21
 801bb64:	0952      	lsrs	r2, r2, #5
 801bb66:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801bb6a:	1201      	asrs	r1, r0, #8
 801bb6c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801bb70:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801bb74:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801bb78:	00c0      	lsls	r0, r0, #3
 801bb7a:	431a      	orrs	r2, r3
 801bb7c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801bb80:	fb11 f104 	smulbb	r1, r1, r4
 801bb84:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801bb88:	b292      	uxth	r2, r2
 801bb8a:	fb1e fe04 	smulbb	lr, lr, r4
 801bb8e:	b2c0      	uxtb	r0, r0
 801bb90:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801bb94:	fb10 f004 	smulbb	r0, r0, r4
 801bb98:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801bb9c:	fb0c 1c03 	mla	ip, ip, r3, r1
 801bba0:	10d1      	asrs	r1, r2, #3
 801bba2:	00d2      	lsls	r2, r2, #3
 801bba4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801bba8:	fa1f fc8c 	uxth.w	ip, ip
 801bbac:	b2d2      	uxtb	r2, r2
 801bbae:	fb01 e103 	mla	r1, r1, r3, lr
 801bbb2:	fb02 0303 	mla	r3, r2, r3, r0
 801bbb6:	b289      	uxth	r1, r1
 801bbb8:	b29a      	uxth	r2, r3
 801bbba:	f10c 0301 	add.w	r3, ip, #1
 801bbbe:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801bbc2:	1c53      	adds	r3, r2, #1
 801bbc4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801bbc8:	1c4a      	adds	r2, r1, #1
 801bbca:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801bbce:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801bbd2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801bbd6:	0949      	lsrs	r1, r1, #5
 801bbd8:	ea43 030c 	orr.w	r3, r3, ip
 801bbdc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801bbe0:	430b      	orrs	r3, r1
 801bbe2:	803b      	strh	r3, [r7, #0]
 801bbe4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801bbe6:	3702      	adds	r7, #2
 801bbe8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801bbec:	449a      	add	sl, r3
 801bbee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801bbf0:	441d      	add	r5, r3
 801bbf2:	e742      	b.n	801ba7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801bbf4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801bbf6:	f108 0802 	add.w	r8, r8, #2
 801bbfa:	449a      	add	sl, r3
 801bbfc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801bbfe:	441d      	add	r5, r3
 801bc00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc02:	3b01      	subs	r3, #1
 801bc04:	9309      	str	r3, [sp, #36]	; 0x24
 801bc06:	e718      	b.n	801ba3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801bc08:	d023      	beq.n	801bc52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801bc0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc0c:	9825      	ldr	r0, [sp, #148]	; 0x94
 801bc0e:	3b01      	subs	r3, #1
 801bc10:	fb00 a003 	mla	r0, r0, r3, sl
 801bc14:	1400      	asrs	r0, r0, #16
 801bc16:	f53f af2d 	bmi.w	801ba74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801bc1a:	3901      	subs	r1, #1
 801bc1c:	4288      	cmp	r0, r1
 801bc1e:	f6bf af29 	bge.w	801ba74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801bc22:	9926      	ldr	r1, [sp, #152]	; 0x98
 801bc24:	fb01 5303 	mla	r3, r1, r3, r5
 801bc28:	141b      	asrs	r3, r3, #16
 801bc2a:	f53f af23 	bmi.w	801ba74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801bc2e:	3a01      	subs	r2, #1
 801bc30:	4293      	cmp	r3, r2
 801bc32:	f6bf af1f 	bge.w	801ba74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801bc36:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801bc3a:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801bc3e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801bc42:	f1be 0f00 	cmp.w	lr, #0
 801bc46:	dc6c      	bgt.n	801bd22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801bc48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc4a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801bc4e:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801bc52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	f340 810e 	ble.w	801be76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801bc5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bc5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801bc60:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bc64:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bc68:	eef0 6a62 	vmov.f32	s13, s5
 801bc6c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bc70:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bc74:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bc78:	ee16 aa90 	vmov	sl, s13
 801bc7c:	eef0 6a43 	vmov.f32	s13, s6
 801bc80:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bc84:	ee16 5a90 	vmov	r5, s13
 801bc88:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bc8c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bc90:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bc94:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bc98:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bc9c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bca0:	ee12 2a90 	vmov	r2, s5
 801bca4:	eef0 2a47 	vmov.f32	s5, s14
 801bca8:	fb92 f3f3 	sdiv	r3, r2, r3
 801bcac:	ee13 2a10 	vmov	r2, s6
 801bcb0:	9325      	str	r3, [sp, #148]	; 0x94
 801bcb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801bcb4:	eeb0 3a67 	vmov.f32	s6, s15
 801bcb8:	fb92 f3f3 	sdiv	r3, r2, r3
 801bcbc:	9326      	str	r3, [sp, #152]	; 0x98
 801bcbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bcc0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801bcc2:	3b01      	subs	r3, #1
 801bcc4:	930c      	str	r3, [sp, #48]	; 0x30
 801bcc6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801bcc8:	bf08      	it	eq
 801bcca:	4613      	moveq	r3, r2
 801bccc:	9309      	str	r3, [sp, #36]	; 0x24
 801bcce:	e6a6      	b.n	801ba1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801bcd0:	2900      	cmp	r1, #0
 801bcd2:	f43f af10 	beq.w	801baf6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801bcd6:	f819 3003 	ldrb.w	r3, [r9, r3]
 801bcda:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801bcde:	930f      	str	r3, [sp, #60]	; 0x3c
 801bce0:	e709      	b.n	801baf6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801bce2:	f112 0901 	adds.w	r9, r2, #1
 801bce6:	f53f af7d 	bmi.w	801bbe4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801bcea:	454b      	cmp	r3, r9
 801bcec:	f6ff af7a 	blt.w	801bbe4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801bcf0:	f11c 0901 	adds.w	r9, ip, #1
 801bcf4:	f53f af76 	bmi.w	801bbe4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801bcf8:	45ce      	cmp	lr, r9
 801bcfa:	f6ff af73 	blt.w	801bbe4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801bcfe:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801bd00:	b21b      	sxth	r3, r3
 801bd02:	9202      	str	r2, [sp, #8]
 801bd04:	fa0f f28e 	sxth.w	r2, lr
 801bd08:	9300      	str	r3, [sp, #0]
 801bd0a:	4633      	mov	r3, r6
 801bd0c:	9201      	str	r2, [sp, #4]
 801bd0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bd10:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801bd14:	e9cd c003 	strd	ip, r0, [sp, #12]
 801bd18:	4639      	mov	r1, r7
 801bd1a:	9816      	ldr	r0, [sp, #88]	; 0x58
 801bd1c:	f7ff fd8e 	bl	801b83c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801bd20:	e760      	b.n	801bbe4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801bd22:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bd24:	ea4f 422a 	mov.w	r2, sl, asr #16
 801bd28:	1429      	asrs	r1, r5, #16
 801bd2a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801bd2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801bd30:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801bd34:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801bd38:	fb03 2101 	mla	r1, r3, r1, r2
 801bd3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bd3e:	440a      	add	r2, r1
 801bd40:	5c61      	ldrb	r1, [r4, r1]
 801bd42:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801bd46:	f1bc 0f00 	cmp.w	ip, #0
 801bd4a:	f000 808c 	beq.w	801be66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801bd4e:	7857      	ldrb	r7, [r2, #1]
 801bd50:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801bd54:	9413      	str	r4, [sp, #76]	; 0x4c
 801bd56:	b140      	cbz	r0, 801bd6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801bd58:	18d7      	adds	r7, r2, r3
 801bd5a:	5cd3      	ldrb	r3, [r2, r3]
 801bd5c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801bd60:	9310      	str	r3, [sp, #64]	; 0x40
 801bd62:	787b      	ldrb	r3, [r7, #1]
 801bd64:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801bd68:	9314      	str	r3, [sp, #80]	; 0x50
 801bd6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801bd6c:	fb1c f200 	smulbb	r2, ip, r0
 801bd70:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801bd72:	f10e 3eff 	add.w	lr, lr, #4294967295
 801bd76:	041f      	lsls	r7, r3, #16
 801bd78:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801bd7c:	10d2      	asrs	r2, r2, #3
 801bd7e:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801bd82:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801bd86:	431f      	orrs	r7, r3
 801bd88:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801bd8c:	9317      	str	r3, [sp, #92]	; 0x5c
 801bd8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801bd90:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801bd92:	041b      	lsls	r3, r3, #16
 801bd94:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801bd98:	ea43 030b 	orr.w	r3, r3, fp
 801bd9c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801bda0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801bda4:	4353      	muls	r3, r2
 801bda6:	fb04 3707 	mla	r7, r4, r7, r3
 801bdaa:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801bdae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801bdb0:	ea43 0b01 	orr.w	fp, r3, r1
 801bdb4:	f1c0 0110 	rsb	r1, r0, #16
 801bdb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bdba:	eba1 0c0c 	sub.w	ip, r1, ip
 801bdbe:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801bdc2:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801bdc6:	fb0c 770b 	mla	r7, ip, fp, r7
 801bdca:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801bdce:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801bdd2:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801bdd6:	ea4c 0c0b 	orr.w	ip, ip, fp
 801bdda:	fb02 770c 	mla	r7, r2, ip, r7
 801bdde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bde0:	0d79      	lsrs	r1, r7, #21
 801bde2:	8812      	ldrh	r2, [r2, #0]
 801bde4:	097f      	lsrs	r7, r7, #5
 801bde6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801bdea:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801bdee:	430f      	orrs	r7, r1
 801bdf0:	1211      	asrs	r1, r2, #8
 801bdf2:	b2bb      	uxth	r3, r7
 801bdf4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801bdf8:	10d7      	asrs	r7, r2, #3
 801bdfa:	fb11 f104 	smulbb	r1, r1, r4
 801bdfe:	1218      	asrs	r0, r3, #8
 801be00:	00d2      	lsls	r2, r2, #3
 801be02:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801be06:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801be0a:	fb17 f704 	smulbb	r7, r7, r4
 801be0e:	b2d2      	uxtb	r2, r2
 801be10:	fb00 1009 	mla	r0, r0, r9, r1
 801be14:	10d9      	asrs	r1, r3, #3
 801be16:	fb12 f204 	smulbb	r2, r2, r4
 801be1a:	00db      	lsls	r3, r3, #3
 801be1c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801be20:	b280      	uxth	r0, r0
 801be22:	b2db      	uxtb	r3, r3
 801be24:	fb01 7109 	mla	r1, r1, r9, r7
 801be28:	fb03 2309 	mla	r3, r3, r9, r2
 801be2c:	1c42      	adds	r2, r0, #1
 801be2e:	b289      	uxth	r1, r1
 801be30:	b29b      	uxth	r3, r3
 801be32:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801be36:	1c4f      	adds	r7, r1, #1
 801be38:	1c5a      	adds	r2, r3, #1
 801be3a:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801be3e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801be42:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801be46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801be48:	0949      	lsrs	r1, r1, #5
 801be4a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801be4e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801be52:	4310      	orrs	r0, r2
 801be54:	4308      	orrs	r0, r1
 801be56:	f823 0b02 	strh.w	r0, [r3], #2
 801be5a:	930e      	str	r3, [sp, #56]	; 0x38
 801be5c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801be5e:	449a      	add	sl, r3
 801be60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801be62:	441d      	add	r5, r3
 801be64:	e6ed      	b.n	801bc42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801be66:	2800      	cmp	r0, #0
 801be68:	f43f af7f 	beq.w	801bd6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801be6c:	5cd3      	ldrb	r3, [r2, r3]
 801be6e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801be72:	9310      	str	r3, [sp, #64]	; 0x40
 801be74:	e779      	b.n	801bd6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801be76:	b019      	add	sp, #100	; 0x64
 801be78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801be7c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801be7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801be80:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 801be84:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801be88:	f1b8 0f00 	cmp.w	r8, #0
 801be8c:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 801be90:	fb08 470e 	mla	r7, r8, lr, r4
 801be94:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801be98:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801be9c:	eb02 0907 	add.w	r9, r2, r7
 801bea0:	8808      	ldrh	r0, [r1, #0]
 801bea2:	db67      	blt.n	801bf74 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801bea4:	45c2      	cmp	sl, r8
 801bea6:	dd65      	ble.n	801bf74 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801bea8:	2c00      	cmp	r4, #0
 801beaa:	db61      	blt.n	801bf70 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801beac:	45a6      	cmp	lr, r4
 801beae:	dd5f      	ble.n	801bf70 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801beb0:	5dd2      	ldrb	r2, [r2, r7]
 801beb2:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801beb6:	1c62      	adds	r2, r4, #1
 801beb8:	d45f      	bmi.n	801bf7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801beba:	4596      	cmp	lr, r2
 801bebc:	dd5d      	ble.n	801bf7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801bebe:	2d00      	cmp	r5, #0
 801bec0:	d05b      	beq.n	801bf7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801bec2:	f899 2001 	ldrb.w	r2, [r9, #1]
 801bec6:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801beca:	f118 0801 	adds.w	r8, r8, #1
 801bece:	d458      	bmi.n	801bf82 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801bed0:	45c2      	cmp	sl, r8
 801bed2:	dd56      	ble.n	801bf82 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801bed4:	2e00      	cmp	r6, #0
 801bed6:	d054      	beq.n	801bf82 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801bed8:	2c00      	cmp	r4, #0
 801beda:	db50      	blt.n	801bf7e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801bedc:	45a6      	cmp	lr, r4
 801bede:	dd4e      	ble.n	801bf7e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801bee0:	f819 200e 	ldrb.w	r2, [r9, lr]
 801bee4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801bee8:	3401      	adds	r4, #1
 801beea:	d407      	bmi.n	801befc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801beec:	45a6      	cmp	lr, r4
 801beee:	dd05      	ble.n	801befc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801bef0:	b125      	cbz	r5, 801befc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801bef2:	44ce      	add	lr, r9
 801bef4:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801bef8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801befc:	fb15 f406 	smulbb	r4, r5, r6
 801bf00:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801bf04:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801bf08:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801bf0c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801bf10:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801bf14:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801bf18:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801bf1c:	ea43 0c0c 	orr.w	ip, r3, ip
 801bf20:	f1c6 0310 	rsb	r3, r6, #16
 801bf24:	ea4e 0707 	orr.w	r7, lr, r7
 801bf28:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801bf2c:	1b5b      	subs	r3, r3, r5
 801bf2e:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801bf32:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801bf36:	437d      	muls	r5, r7
 801bf38:	fb03 5c0c 	mla	ip, r3, ip, r5
 801bf3c:	0403      	lsls	r3, r0, #16
 801bf3e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801bf42:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801bf46:	4318      	orrs	r0, r3
 801bf48:	0413      	lsls	r3, r2, #16
 801bf4a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801bf4e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801bf52:	fb04 c000 	mla	r0, r4, r0, ip
 801bf56:	4313      	orrs	r3, r2
 801bf58:	fb06 0003 	mla	r0, r6, r3, r0
 801bf5c:	0d43      	lsrs	r3, r0, #21
 801bf5e:	0940      	lsrs	r0, r0, #5
 801bf60:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801bf64:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801bf68:	4318      	orrs	r0, r3
 801bf6a:	8008      	strh	r0, [r1, #0]
 801bf6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf70:	4684      	mov	ip, r0
 801bf72:	e7a0      	b.n	801beb6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 801bf74:	4607      	mov	r7, r0
 801bf76:	4684      	mov	ip, r0
 801bf78:	e7a7      	b.n	801beca <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801bf7a:	4607      	mov	r7, r0
 801bf7c:	e7a5      	b.n	801beca <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801bf7e:	4602      	mov	r2, r0
 801bf80:	e7b2      	b.n	801bee8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 801bf82:	4602      	mov	r2, r0
 801bf84:	e7ba      	b.n	801befc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0801bf86 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bf86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf8a:	b093      	sub	sp, #76	; 0x4c
 801bf8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bf90:	920f      	str	r2, [sp, #60]	; 0x3c
 801bf92:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801bf94:	9010      	str	r0, [sp, #64]	; 0x40
 801bf96:	9108      	str	r1, [sp, #32]
 801bf98:	6850      	ldr	r0, [r2, #4]
 801bf9a:	9306      	str	r3, [sp, #24]
 801bf9c:	6812      	ldr	r2, [r2, #0]
 801bf9e:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801bfa2:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 801bfa6:	fb00 1303 	mla	r3, r0, r3, r1
 801bfaa:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801bfae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bfb0:	681b      	ldr	r3, [r3, #0]
 801bfb2:	9307      	str	r3, [sp, #28]
 801bfb4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bfb6:	685f      	ldr	r7, [r3, #4]
 801bfb8:	3704      	adds	r7, #4
 801bfba:	9b08      	ldr	r3, [sp, #32]
 801bfbc:	2b00      	cmp	r3, #0
 801bfbe:	dc03      	bgt.n	801bfc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801bfc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bfc2:	2b00      	cmp	r3, #0
 801bfc4:	f340 81b2 	ble.w	801c32c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801bfc8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bfca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801bfce:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801bfd2:	1e48      	subs	r0, r1, #1
 801bfd4:	f102 3cff 	add.w	ip, r2, #4294967295
 801bfd8:	9b06      	ldr	r3, [sp, #24]
 801bfda:	2b00      	cmp	r3, #0
 801bfdc:	f340 80a9 	ble.w	801c132 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801bfe0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801bfe4:	ea4f 4326 	mov.w	r3, r6, asr #16
 801bfe8:	d406      	bmi.n	801bff8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bfea:	4586      	cmp	lr, r0
 801bfec:	da04      	bge.n	801bff8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bfee:	2b00      	cmp	r3, #0
 801bff0:	db02      	blt.n	801bff8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bff2:	4563      	cmp	r3, ip
 801bff4:	f2c0 809e 	blt.w	801c134 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801bff8:	f11e 0e01 	adds.w	lr, lr, #1
 801bffc:	f100 808f 	bmi.w	801c11e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801c000:	4571      	cmp	r1, lr
 801c002:	f2c0 808c 	blt.w	801c11e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801c006:	3301      	adds	r3, #1
 801c008:	f100 8089 	bmi.w	801c11e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801c00c:	429a      	cmp	r2, r3
 801c00e:	f2c0 8086 	blt.w	801c11e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801c012:	f8dd b018 	ldr.w	fp, [sp, #24]
 801c016:	46c8      	mov	r8, r9
 801c018:	f1bb 0f00 	cmp.w	fp, #0
 801c01c:	f340 80a6 	ble.w	801c16c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801c020:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801c022:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801c026:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c028:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801c02c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801c030:	1422      	asrs	r2, r4, #16
 801c032:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801c036:	689b      	ldr	r3, [r3, #8]
 801c038:	f100 80e3 	bmi.w	801c202 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801c03c:	f103 3aff 	add.w	sl, r3, #4294967295
 801c040:	4552      	cmp	r2, sl
 801c042:	f280 80de 	bge.w	801c202 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801c046:	f1bc 0f00 	cmp.w	ip, #0
 801c04a:	f2c0 80da 	blt.w	801c202 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801c04e:	f10e 3aff 	add.w	sl, lr, #4294967295
 801c052:	45d4      	cmp	ip, sl
 801c054:	f280 80d5 	bge.w	801c202 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801c058:	b21b      	sxth	r3, r3
 801c05a:	9d07      	ldr	r5, [sp, #28]
 801c05c:	fb0c 2203 	mla	r2, ip, r3, r2
 801c060:	eb05 0a02 	add.w	sl, r5, r2
 801c064:	5caa      	ldrb	r2, [r5, r2]
 801c066:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801c06a:	2800      	cmp	r0, #0
 801c06c:	f000 80c0 	beq.w	801c1f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801c070:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801c074:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801c078:	920b      	str	r2, [sp, #44]	; 0x2c
 801c07a:	b151      	cbz	r1, 801c092 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801c07c:	eb0a 0203 	add.w	r2, sl, r3
 801c080:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801c084:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801c088:	9309      	str	r3, [sp, #36]	; 0x24
 801c08a:	7853      	ldrb	r3, [r2, #1]
 801c08c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801c090:	930c      	str	r3, [sp, #48]	; 0x30
 801c092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c094:	fb10 f201 	smulbb	r2, r0, r1
 801c098:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c09a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801c09e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c0a2:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801c0a6:	10d2      	asrs	r2, r2, #3
 801c0a8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801c0ac:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801c0b0:	ea4c 0c03 	orr.w	ip, ip, r3
 801c0b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c0b6:	041b      	lsls	r3, r3, #16
 801c0b8:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801c0bc:	432b      	orrs	r3, r5
 801c0be:	4353      	muls	r3, r2
 801c0c0:	fb0a 330c 	mla	r3, sl, ip, r3
 801c0c4:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801c0c8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801c0cc:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801c0d0:	ea4c 0e0e 	orr.w	lr, ip, lr
 801c0d4:	f1c1 0c10 	rsb	ip, r1, #16
 801c0d8:	ebac 0c00 	sub.w	ip, ip, r0
 801c0dc:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801c0e0:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801c0e4:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801c0e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c0ea:	0418      	lsls	r0, r3, #16
 801c0ec:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c0f0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801c0f4:	4318      	orrs	r0, r3
 801c0f6:	fb02 c200 	mla	r2, r2, r0, ip
 801c0fa:	0d53      	lsrs	r3, r2, #21
 801c0fc:	0952      	lsrs	r2, r2, #5
 801c0fe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c102:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801c106:	431a      	orrs	r2, r3
 801c108:	f8a8 2000 	strh.w	r2, [r8]
 801c10c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c10e:	f108 0802 	add.w	r8, r8, #2
 801c112:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c116:	441c      	add	r4, r3
 801c118:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c11a:	441e      	add	r6, r3
 801c11c:	e77c      	b.n	801c018 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c11e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c120:	f109 0902 	add.w	r9, r9, #2
 801c124:	441c      	add	r4, r3
 801c126:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c128:	441e      	add	r6, r3
 801c12a:	9b06      	ldr	r3, [sp, #24]
 801c12c:	3b01      	subs	r3, #1
 801c12e:	9306      	str	r3, [sp, #24]
 801c130:	e752      	b.n	801bfd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801c132:	d020      	beq.n	801c176 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801c134:	9b06      	ldr	r3, [sp, #24]
 801c136:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801c138:	3b01      	subs	r3, #1
 801c13a:	fb00 4003 	mla	r0, r0, r3, r4
 801c13e:	1400      	asrs	r0, r0, #16
 801c140:	f53f af67 	bmi.w	801c012 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c144:	3901      	subs	r1, #1
 801c146:	4288      	cmp	r0, r1
 801c148:	f6bf af63 	bge.w	801c012 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c14c:	9920      	ldr	r1, [sp, #128]	; 0x80
 801c14e:	fb01 6303 	mla	r3, r1, r3, r6
 801c152:	141b      	asrs	r3, r3, #16
 801c154:	f53f af5d 	bmi.w	801c012 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c158:	3a01      	subs	r2, #1
 801c15a:	4293      	cmp	r3, r2
 801c15c:	f6bf af59 	bge.w	801c012 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c160:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801c164:	46ca      	mov	sl, r9
 801c166:	f1b8 0f00 	cmp.w	r8, #0
 801c16a:	dc67      	bgt.n	801c23c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801c16c:	9b06      	ldr	r3, [sp, #24]
 801c16e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801c172:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801c176:	9b08      	ldr	r3, [sp, #32]
 801c178:	2b00      	cmp	r3, #0
 801c17a:	f340 80d7 	ble.w	801c32c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801c17e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c182:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c184:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c188:	eeb0 6a62 	vmov.f32	s12, s5
 801c18c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c190:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c194:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c198:	ee16 4a10 	vmov	r4, s12
 801c19c:	eeb0 6a43 	vmov.f32	s12, s6
 801c1a0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c1a4:	ee16 6a10 	vmov	r6, s12
 801c1a8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c1ac:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c1b0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c1b4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c1b8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c1bc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c1c0:	ee12 2a90 	vmov	r2, s5
 801c1c4:	eef0 2a47 	vmov.f32	s5, s14
 801c1c8:	fb92 f3f3 	sdiv	r3, r2, r3
 801c1cc:	ee13 2a10 	vmov	r2, s6
 801c1d0:	931f      	str	r3, [sp, #124]	; 0x7c
 801c1d2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c1d4:	eeb0 3a67 	vmov.f32	s6, s15
 801c1d8:	fb92 f3f3 	sdiv	r3, r2, r3
 801c1dc:	9320      	str	r3, [sp, #128]	; 0x80
 801c1de:	9b08      	ldr	r3, [sp, #32]
 801c1e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c1e2:	3b01      	subs	r3, #1
 801c1e4:	9308      	str	r3, [sp, #32]
 801c1e6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c1e8:	bf08      	it	eq
 801c1ea:	4613      	moveq	r3, r2
 801c1ec:	9306      	str	r3, [sp, #24]
 801c1ee:	e6e4      	b.n	801bfba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801c1f0:	2900      	cmp	r1, #0
 801c1f2:	f43f af4e 	beq.w	801c092 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801c1f6:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801c1fa:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801c1fe:	9309      	str	r3, [sp, #36]	; 0x24
 801c200:	e747      	b.n	801c092 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801c202:	f112 0a01 	adds.w	sl, r2, #1
 801c206:	d481      	bmi.n	801c10c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c208:	4553      	cmp	r3, sl
 801c20a:	f6ff af7f 	blt.w	801c10c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c20e:	f11c 0a01 	adds.w	sl, ip, #1
 801c212:	f53f af7b 	bmi.w	801c10c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c216:	45d6      	cmp	lr, sl
 801c218:	f6ff af78 	blt.w	801c10c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c21c:	b21b      	sxth	r3, r3
 801c21e:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801c222:	fa0f f28e 	sxth.w	r2, lr
 801c226:	9300      	str	r3, [sp, #0]
 801c228:	463b      	mov	r3, r7
 801c22a:	9201      	str	r2, [sp, #4]
 801c22c:	9a07      	ldr	r2, [sp, #28]
 801c22e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c232:	4641      	mov	r1, r8
 801c234:	9810      	ldr	r0, [sp, #64]	; 0x40
 801c236:	f7ff fe21 	bl	801be7c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801c23a:	e767      	b.n	801c10c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c23c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c23e:	1422      	asrs	r2, r4, #16
 801c240:	1431      	asrs	r1, r6, #16
 801c242:	9d07      	ldr	r5, [sp, #28]
 801c244:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801c248:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801c24c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801c250:	fb03 2101 	mla	r1, r3, r1, r2
 801c254:	9a07      	ldr	r2, [sp, #28]
 801c256:	440a      	add	r2, r1
 801c258:	5c69      	ldrb	r1, [r5, r1]
 801c25a:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801c25e:	f1be 0f00 	cmp.w	lr, #0
 801c262:	d05c      	beq.n	801c31e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 801c264:	f892 c001 	ldrb.w	ip, [r2, #1]
 801c268:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801c26c:	950d      	str	r5, [sp, #52]	; 0x34
 801c26e:	b150      	cbz	r0, 801c286 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801c270:	eb02 0c03 	add.w	ip, r2, r3
 801c274:	5cd3      	ldrb	r3, [r2, r3]
 801c276:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801c27a:	930a      	str	r3, [sp, #40]	; 0x28
 801c27c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801c280:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801c284:	930e      	str	r3, [sp, #56]	; 0x38
 801c286:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c288:	fb1e f200 	smulbb	r2, lr, r0
 801c28c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801c28e:	f108 38ff 	add.w	r8, r8, #4294967295
 801c292:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801c296:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c29a:	10d2      	asrs	r2, r2, #3
 801c29c:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801c2a0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801c2a4:	ea4c 0c03 	orr.w	ip, ip, r3
 801c2a8:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801c2ac:	9311      	str	r3, [sp, #68]	; 0x44
 801c2ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c2b0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c2b2:	041b      	lsls	r3, r3, #16
 801c2b4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801c2b8:	ea43 030b 	orr.w	r3, r3, fp
 801c2bc:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801c2c0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801c2c4:	4353      	muls	r3, r2
 801c2c6:	fb05 3c0c 	mla	ip, r5, ip, r3
 801c2ca:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801c2ce:	ea43 0b01 	orr.w	fp, r3, r1
 801c2d2:	f1c0 0110 	rsb	r1, r0, #16
 801c2d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c2d8:	eba1 0e0e 	sub.w	lr, r1, lr
 801c2dc:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801c2e0:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801c2e4:	fb0e cc0b 	mla	ip, lr, fp, ip
 801c2e8:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801c2ec:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801c2f0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801c2f4:	ea4b 0e0e 	orr.w	lr, fp, lr
 801c2f8:	fb02 cc0e 	mla	ip, r2, lr, ip
 801c2fc:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801c300:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801c304:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c308:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801c30c:	ea43 0c0c 	orr.w	ip, r3, ip
 801c310:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c312:	441c      	add	r4, r3
 801c314:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c316:	f82a cb02 	strh.w	ip, [sl], #2
 801c31a:	441e      	add	r6, r3
 801c31c:	e723      	b.n	801c166 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801c31e:	2800      	cmp	r0, #0
 801c320:	d0b1      	beq.n	801c286 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801c322:	5cd3      	ldrb	r3, [r2, r3]
 801c324:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801c328:	930a      	str	r3, [sp, #40]	; 0x28
 801c32a:	e7ac      	b.n	801c286 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801c32c:	b013      	add	sp, #76	; 0x4c
 801c32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c332 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801c332:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c336:	880d      	ldrh	r5, [r1, #0]
 801c338:	b087      	sub	sp, #28
 801c33a:	10ef      	asrs	r7, r5, #3
 801c33c:	9103      	str	r1, [sp, #12]
 801c33e:	ea4f 2a25 	mov.w	sl, r5, asr #8
 801c342:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 801c346:	00ed      	lsls	r5, r5, #3
 801c348:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c34c:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 801c350:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801c354:	b2ed      	uxtb	r5, r5
 801c356:	9701      	str	r7, [sp, #4]
 801c358:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801c35c:	9502      	str	r5, [sp, #8]
 801c35e:	9d01      	ldr	r5, [sp, #4]
 801c360:	9902      	ldr	r1, [sp, #8]
 801c362:	022d      	lsls	r5, r5, #8
 801c364:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801c368:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 801c36c:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 801c370:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801c374:	430d      	orrs	r5, r1
 801c376:	fb06 0709 	mla	r7, r6, r9, r0
 801c37a:	2e00      	cmp	r6, #0
 801c37c:	9505      	str	r5, [sp, #20]
 801c37e:	eb02 0c07 	add.w	ip, r2, r7
 801c382:	f2c0 80b6 	blt.w	801c4f2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801c386:	45b3      	cmp	fp, r6
 801c388:	f340 80b3 	ble.w	801c4f2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801c38c:	2800      	cmp	r0, #0
 801c38e:	f2c0 80ae 	blt.w	801c4ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801c392:	4581      	cmp	r9, r0
 801c394:	f340 80ab 	ble.w	801c4ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801c398:	5dd7      	ldrb	r7, [r2, r7]
 801c39a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c39e:	441f      	add	r7, r3
 801c3a0:	1c42      	adds	r2, r0, #1
 801c3a2:	f100 80a9 	bmi.w	801c4f8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801c3a6:	4591      	cmp	r9, r2
 801c3a8:	f340 80a6 	ble.w	801c4f8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801c3ac:	2c00      	cmp	r4, #0
 801c3ae:	f000 80a3 	beq.w	801c4f8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801c3b2:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801c3b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c3ba:	441d      	add	r5, r3
 801c3bc:	3601      	adds	r6, #1
 801c3be:	f100 809f 	bmi.w	801c500 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801c3c2:	45b3      	cmp	fp, r6
 801c3c4:	f340 809c 	ble.w	801c500 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801c3c8:	f1be 0f00 	cmp.w	lr, #0
 801c3cc:	f000 8098 	beq.w	801c500 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801c3d0:	2800      	cmp	r0, #0
 801c3d2:	f2c0 8093 	blt.w	801c4fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801c3d6:	4581      	cmp	r9, r0
 801c3d8:	f340 8090 	ble.w	801c4fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801c3dc:	f81c 6009 	ldrb.w	r6, [ip, r9]
 801c3e0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c3e4:	441e      	add	r6, r3
 801c3e6:	3001      	adds	r0, #1
 801c3e8:	f100 808d 	bmi.w	801c506 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801c3ec:	4581      	cmp	r9, r0
 801c3ee:	f340 808a 	ble.w	801c506 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801c3f2:	2c00      	cmp	r4, #0
 801c3f4:	f000 8087 	beq.w	801c506 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801c3f8:	44e1      	add	r9, ip
 801c3fa:	f899 2001 	ldrb.w	r2, [r9, #1]
 801c3fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c402:	4413      	add	r3, r2
 801c404:	b2a4      	uxth	r4, r4
 801c406:	f897 c002 	ldrb.w	ip, [r7, #2]
 801c40a:	fa1f fe8e 	uxth.w	lr, lr
 801c40e:	9901      	ldr	r1, [sp, #4]
 801c410:	fb04 fb0e 	mul.w	fp, r4, lr
 801c414:	0124      	lsls	r4, r4, #4
 801c416:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 801c41a:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 801c41e:	eba4 040b 	sub.w	r4, r4, fp
 801c422:	fa1f f08e 	uxth.w	r0, lr
 801c426:	b2a2      	uxth	r2, r4
 801c428:	78ac      	ldrb	r4, [r5, #2]
 801c42a:	eba9 0900 	sub.w	r9, r9, r0
 801c42e:	fa1f fe88 	uxth.w	lr, r8
 801c432:	4354      	muls	r4, r2
 801c434:	ea6f 0808 	mvn.w	r8, r8
 801c438:	fa1f f989 	uxth.w	r9, r9
 801c43c:	fa5f f888 	uxtb.w	r8, r8
 801c440:	fb09 440c 	mla	r4, r9, ip, r4
 801c444:	f896 c002 	ldrb.w	ip, [r6, #2]
 801c448:	fb1a fa08 	smulbb	sl, sl, r8
 801c44c:	fb00 440c 	mla	r4, r0, ip, r4
 801c450:	f893 c002 	ldrb.w	ip, [r3, #2]
 801c454:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801c458:	787c      	ldrb	r4, [r7, #1]
 801c45a:	783f      	ldrb	r7, [r7, #0]
 801c45c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801c460:	fb0c ac0e 	mla	ip, ip, lr, sl
 801c464:	f895 a001 	ldrb.w	sl, [r5, #1]
 801c468:	782d      	ldrb	r5, [r5, #0]
 801c46a:	fb02 fa0a 	mul.w	sl, r2, sl
 801c46e:	fa1f fc8c 	uxth.w	ip, ip
 801c472:	436a      	muls	r2, r5
 801c474:	7835      	ldrb	r5, [r6, #0]
 801c476:	fb09 aa04 	mla	sl, r9, r4, sl
 801c47a:	7874      	ldrb	r4, [r6, #1]
 801c47c:	fb09 2207 	mla	r2, r9, r7, r2
 801c480:	fb00 aa04 	mla	sl, r0, r4, sl
 801c484:	785c      	ldrb	r4, [r3, #1]
 801c486:	fb00 2005 	mla	r0, r0, r5, r2
 801c48a:	781b      	ldrb	r3, [r3, #0]
 801c48c:	fb0b a404 	mla	r4, fp, r4, sl
 801c490:	fb11 fa08 	smulbb	sl, r1, r8
 801c494:	fb0b 0b03 	mla	fp, fp, r3, r0
 801c498:	9b02      	ldr	r3, [sp, #8]
 801c49a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801c49e:	fb13 f808 	smulbb	r8, r3, r8
 801c4a2:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801c4a6:	fb04 a40e 	mla	r4, r4, lr, sl
 801c4aa:	f10c 0301 	add.w	r3, ip, #1
 801c4ae:	fb0b 8e0e 	mla	lr, fp, lr, r8
 801c4b2:	b2a4      	uxth	r4, r4
 801c4b4:	fa1f fe8e 	uxth.w	lr, lr
 801c4b8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801c4bc:	f104 0a01 	add.w	sl, r4, #1
 801c4c0:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 801c4c4:	f10e 0c01 	add.w	ip, lr, #1
 801c4c8:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801c4cc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801c4d0:	0964      	lsrs	r4, r4, #5
 801c4d2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801c4d6:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801c4da:	ea4c 0c03 	orr.w	ip, ip, r3
 801c4de:	9b03      	ldr	r3, [sp, #12]
 801c4e0:	ea4c 0c04 	orr.w	ip, ip, r4
 801c4e4:	f8a3 c000 	strh.w	ip, [r3]
 801c4e8:	b007      	add	sp, #28
 801c4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4ee:	af05      	add	r7, sp, #20
 801c4f0:	e756      	b.n	801c3a0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 801c4f2:	ad05      	add	r5, sp, #20
 801c4f4:	462f      	mov	r7, r5
 801c4f6:	e761      	b.n	801c3bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801c4f8:	ad05      	add	r5, sp, #20
 801c4fa:	e75f      	b.n	801c3bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801c4fc:	ae05      	add	r6, sp, #20
 801c4fe:	e772      	b.n	801c3e6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801c500:	ab05      	add	r3, sp, #20
 801c502:	461e      	mov	r6, r3
 801c504:	e77e      	b.n	801c404 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 801c506:	ab05      	add	r3, sp, #20
 801c508:	e77c      	b.n	801c404 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

0801c50a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c50a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c50e:	b095      	sub	sp, #84	; 0x54
 801c510:	9212      	str	r2, [sp, #72]	; 0x48
 801c512:	9309      	str	r3, [sp, #36]	; 0x24
 801c514:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801c516:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801c51a:	9013      	str	r0, [sp, #76]	; 0x4c
 801c51c:	930f      	str	r3, [sp, #60]	; 0x3c
 801c51e:	6850      	ldr	r0, [r2, #4]
 801c520:	910e      	str	r1, [sp, #56]	; 0x38
 801c522:	6812      	ldr	r2, [r2, #0]
 801c524:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 801c528:	fb00 1303 	mla	r3, r0, r3, r1
 801c52c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c530:	930a      	str	r3, [sp, #40]	; 0x28
 801c532:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c534:	681b      	ldr	r3, [r3, #0]
 801c536:	930d      	str	r3, [sp, #52]	; 0x34
 801c538:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c53a:	685c      	ldr	r4, [r3, #4]
 801c53c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c53e:	3404      	adds	r4, #4
 801c540:	43db      	mvns	r3, r3
 801c542:	b2db      	uxtb	r3, r3
 801c544:	930b      	str	r3, [sp, #44]	; 0x2c
 801c546:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c548:	2b00      	cmp	r3, #0
 801c54a:	dc03      	bgt.n	801c554 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c54c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c54e:	2b00      	cmp	r3, #0
 801c550:	f340 8255 	ble.w	801c9fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801c554:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c556:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c55a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c55e:	1e48      	subs	r0, r1, #1
 801c560:	1e55      	subs	r5, r2, #1
 801c562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c564:	2b00      	cmp	r3, #0
 801c566:	f340 80f9 	ble.w	801c75c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801c56a:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801c56c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c56e:	1436      	asrs	r6, r6, #16
 801c570:	ea4f 4323 	mov.w	r3, r3, asr #16
 801c574:	d406      	bmi.n	801c584 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c576:	4286      	cmp	r6, r0
 801c578:	da04      	bge.n	801c584 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c57a:	2b00      	cmp	r3, #0
 801c57c:	db02      	blt.n	801c584 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c57e:	42ab      	cmp	r3, r5
 801c580:	f2c0 80ed 	blt.w	801c75e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801c584:	3601      	adds	r6, #1
 801c586:	f100 80da 	bmi.w	801c73e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801c58a:	42b1      	cmp	r1, r6
 801c58c:	f2c0 80d7 	blt.w	801c73e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801c590:	3301      	adds	r3, #1
 801c592:	f100 80d4 	bmi.w	801c73e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801c596:	429a      	cmp	r2, r3
 801c598:	f2c0 80d1 	blt.w	801c73e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801c59c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c59e:	9311      	str	r3, [sp, #68]	; 0x44
 801c5a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c5a2:	930c      	str	r3, [sp, #48]	; 0x30
 801c5a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c5a6:	2b00      	cmp	r3, #0
 801c5a8:	f340 80fa 	ble.w	801c7a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801c5ac:	9826      	ldr	r0, [sp, #152]	; 0x98
 801c5ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c5b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c5b2:	68c6      	ldr	r6, [r0, #12]
 801c5b4:	141d      	asrs	r5, r3, #16
 801c5b6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801c5b8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801c5bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c5be:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801c5c0:	1400      	asrs	r0, r0, #16
 801c5c2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801c5c6:	6892      	ldr	r2, [r2, #8]
 801c5c8:	f100 813e 	bmi.w	801c848 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801c5cc:	1e57      	subs	r7, r2, #1
 801c5ce:	42b8      	cmp	r0, r7
 801c5d0:	f280 813a 	bge.w	801c848 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801c5d4:	2d00      	cmp	r5, #0
 801c5d6:	f2c0 8137 	blt.w	801c848 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801c5da:	1e77      	subs	r7, r6, #1
 801c5dc:	42bd      	cmp	r5, r7
 801c5de:	f280 8133 	bge.w	801c848 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801c5e2:	b212      	sxth	r2, r2
 801c5e4:	fb05 0002 	mla	r0, r5, r2, r0
 801c5e8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801c5ea:	f815 a000 	ldrb.w	sl, [r5, r0]
 801c5ee:	182e      	adds	r6, r5, r0
 801c5f0:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801c5f4:	eb04 050a 	add.w	r5, r4, sl
 801c5f8:	2b00      	cmp	r3, #0
 801c5fa:	f000 8117 	beq.w	801c82c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801c5fe:	f896 c001 	ldrb.w	ip, [r6, #1]
 801c602:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801c606:	44a4      	add	ip, r4
 801c608:	2900      	cmp	r1, #0
 801c60a:	f000 8117 	beq.w	801c83c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801c60e:	18b0      	adds	r0, r6, r2
 801c610:	5cb2      	ldrb	r2, [r6, r2]
 801c612:	7840      	ldrb	r0, [r0, #1]
 801c614:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c618:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c61c:	4422      	add	r2, r4
 801c61e:	4420      	add	r0, r4
 801c620:	b29b      	uxth	r3, r3
 801c622:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801c626:	b289      	uxth	r1, r1
 801c628:	f895 b002 	ldrb.w	fp, [r5, #2]
 801c62c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801c62e:	fb03 f901 	mul.w	r9, r3, r1
 801c632:	011b      	lsls	r3, r3, #4
 801c634:	f8b6 e000 	ldrh.w	lr, [r6]
 801c638:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801c63c:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801c640:	eba3 0309 	sub.w	r3, r3, r9
 801c644:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801c648:	b289      	uxth	r1, r1
 801c64a:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801c64e:	b29b      	uxth	r3, r3
 801c650:	eba8 0801 	sub.w	r8, r8, r1
 801c654:	435f      	muls	r7, r3
 801c656:	fa1f f888 	uxth.w	r8, r8
 801c65a:	9310      	str	r3, [sp, #64]	; 0x40
 801c65c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c65e:	fb08 770b 	mla	r7, r8, fp, r7
 801c662:	f892 b002 	ldrb.w	fp, [r2, #2]
 801c666:	fb01 770b 	mla	r7, r1, fp, r7
 801c66a:	f890 b002 	ldrb.w	fp, [r0, #2]
 801c66e:	fb09 770b 	mla	r7, r9, fp, r7
 801c672:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801c676:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801c67a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801c67e:	fb1b fb03 	smulbb	fp, fp, r3
 801c682:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c684:	fb07 b706 	mla	r7, r7, r6, fp
 801c688:	f895 b001 	ldrb.w	fp, [r5, #1]
 801c68c:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801c690:	f89c c000 	ldrb.w	ip, [ip]
 801c694:	b2bf      	uxth	r7, r7
 801c696:	435d      	muls	r5, r3
 801c698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c69a:	fb08 550b 	mla	r5, r8, fp, r5
 801c69e:	f892 b001 	ldrb.w	fp, [r2, #1]
 801c6a2:	fb01 550b 	mla	r5, r1, fp, r5
 801c6a6:	f890 b001 	ldrb.w	fp, [r0, #1]
 801c6aa:	fb09 550b 	mla	r5, r9, fp, r5
 801c6ae:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801c6b2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c6b6:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801c6ba:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801c6be:	fa5f fe8e 	uxtb.w	lr, lr
 801c6c2:	fb1b fb03 	smulbb	fp, fp, r3
 801c6c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c6c8:	fb03 f30c 	mul.w	r3, r3, ip
 801c6cc:	f892 c000 	ldrb.w	ip, [r2]
 801c6d0:	fb05 b506 	mla	r5, r5, r6, fp
 801c6d4:	fb08 330a 	mla	r3, r8, sl, r3
 801c6d8:	b2ad      	uxth	r5, r5
 801c6da:	fb01 330c 	mla	r3, r1, ip, r3
 801c6de:	f890 c000 	ldrb.w	ip, [r0]
 801c6e2:	f105 0b01 	add.w	fp, r5, #1
 801c6e6:	fb09 3c0c 	mla	ip, r9, ip, r3
 801c6ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c6ec:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801c6f0:	fb1e fe03 	smulbb	lr, lr, r3
 801c6f4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801c6f8:	1c7b      	adds	r3, r7, #1
 801c6fa:	096d      	lsrs	r5, r5, #5
 801c6fc:	fb0c e606 	mla	r6, ip, r6, lr
 801c700:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801c704:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c708:	b2b6      	uxth	r6, r6
 801c70a:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 801c70e:	1c77      	adds	r7, r6, #1
 801c710:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801c714:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801c718:	431f      	orrs	r7, r3
 801c71a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c71c:	433d      	orrs	r5, r7
 801c71e:	801d      	strh	r5, [r3, #0]
 801c720:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c722:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c724:	3302      	adds	r3, #2
 801c726:	930c      	str	r3, [sp, #48]	; 0x30
 801c728:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c72a:	4413      	add	r3, r2
 801c72c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801c72e:	931f      	str	r3, [sp, #124]	; 0x7c
 801c730:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c732:	4413      	add	r3, r2
 801c734:	9320      	str	r3, [sp, #128]	; 0x80
 801c736:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c738:	3b01      	subs	r3, #1
 801c73a:	9311      	str	r3, [sp, #68]	; 0x44
 801c73c:	e732      	b.n	801c5a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801c73e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c740:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801c742:	4433      	add	r3, r6
 801c744:	9e22      	ldr	r6, [sp, #136]	; 0x88
 801c746:	931f      	str	r3, [sp, #124]	; 0x7c
 801c748:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c74a:	4433      	add	r3, r6
 801c74c:	9320      	str	r3, [sp, #128]	; 0x80
 801c74e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c750:	3b01      	subs	r3, #1
 801c752:	9309      	str	r3, [sp, #36]	; 0x24
 801c754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c756:	3302      	adds	r3, #2
 801c758:	930a      	str	r3, [sp, #40]	; 0x28
 801c75a:	e702      	b.n	801c562 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801c75c:	d027      	beq.n	801c7ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801c75e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c760:	9821      	ldr	r0, [sp, #132]	; 0x84
 801c762:	3b01      	subs	r3, #1
 801c764:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801c766:	fb00 5003 	mla	r0, r0, r3, r5
 801c76a:	1400      	asrs	r0, r0, #16
 801c76c:	f53f af16 	bmi.w	801c59c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c770:	3901      	subs	r1, #1
 801c772:	4288      	cmp	r0, r1
 801c774:	f6bf af12 	bge.w	801c59c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c778:	9922      	ldr	r1, [sp, #136]	; 0x88
 801c77a:	9820      	ldr	r0, [sp, #128]	; 0x80
 801c77c:	fb01 0303 	mla	r3, r1, r3, r0
 801c780:	141b      	asrs	r3, r3, #16
 801c782:	f53f af0b 	bmi.w	801c59c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c786:	3a01      	subs	r2, #1
 801c788:	4293      	cmp	r3, r2
 801c78a:	f6bf af07 	bge.w	801c59c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c78e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c790:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 801c794:	9311      	str	r3, [sp, #68]	; 0x44
 801c796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c798:	930c      	str	r3, [sp, #48]	; 0x30
 801c79a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c79c:	2b00      	cmp	r3, #0
 801c79e:	dc70      	bgt.n	801c882 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 801c7a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c7a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c7a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c7a8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c7ac:	930a      	str	r3, [sp, #40]	; 0x28
 801c7ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c7b0:	2b00      	cmp	r3, #0
 801c7b2:	f340 8124 	ble.w	801c9fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801c7b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c7ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c7bc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c7c0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c7c4:	eef0 6a62 	vmov.f32	s13, s5
 801c7c8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c7cc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c7d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c7d4:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801c7d8:	eef0 6a43 	vmov.f32	s13, s6
 801c7dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c7e0:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 801c7e4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c7e8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c7ec:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c7f0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c7f4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c7f8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c7fc:	ee12 2a90 	vmov	r2, s5
 801c800:	eef0 2a47 	vmov.f32	s5, s14
 801c804:	fb92 f3f3 	sdiv	r3, r2, r3
 801c808:	ee13 2a10 	vmov	r2, s6
 801c80c:	9321      	str	r3, [sp, #132]	; 0x84
 801c80e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c810:	eeb0 3a67 	vmov.f32	s6, s15
 801c814:	fb92 f3f3 	sdiv	r3, r2, r3
 801c818:	9322      	str	r3, [sp, #136]	; 0x88
 801c81a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c81c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c81e:	3b01      	subs	r3, #1
 801c820:	930e      	str	r3, [sp, #56]	; 0x38
 801c822:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c824:	bf08      	it	eq
 801c826:	4613      	moveq	r3, r2
 801c828:	9309      	str	r3, [sp, #36]	; 0x24
 801c82a:	e68c      	b.n	801c546 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c82c:	b149      	cbz	r1, 801c842 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 801c82e:	5cb2      	ldrb	r2, [r6, r2]
 801c830:	4628      	mov	r0, r5
 801c832:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c836:	4422      	add	r2, r4
 801c838:	46ac      	mov	ip, r5
 801c83a:	e6f1      	b.n	801c620 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801c83c:	4628      	mov	r0, r5
 801c83e:	462a      	mov	r2, r5
 801c840:	e6ee      	b.n	801c620 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801c842:	4628      	mov	r0, r5
 801c844:	462a      	mov	r2, r5
 801c846:	e7f7      	b.n	801c838 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 801c848:	1c47      	adds	r7, r0, #1
 801c84a:	f53f af69 	bmi.w	801c720 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801c84e:	42ba      	cmp	r2, r7
 801c850:	f6ff af66 	blt.w	801c720 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801c854:	1c6f      	adds	r7, r5, #1
 801c856:	f53f af63 	bmi.w	801c720 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801c85a:	42be      	cmp	r6, r7
 801c85c:	f6ff af60 	blt.w	801c720 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801c860:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801c862:	b236      	sxth	r6, r6
 801c864:	b212      	sxth	r2, r2
 801c866:	9002      	str	r0, [sp, #8]
 801c868:	9601      	str	r6, [sp, #4]
 801c86a:	9200      	str	r2, [sp, #0]
 801c86c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c86e:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801c872:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801c876:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801c87a:	4623      	mov	r3, r4
 801c87c:	f7ff fd59 	bl	801c332 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801c880:	e74e      	b.n	801c720 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801c882:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c884:	9820      	ldr	r0, [sp, #128]	; 0x80
 801c886:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801c88a:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801c88c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801c88e:	1400      	asrs	r0, r0, #16
 801c890:	142d      	asrs	r5, r5, #16
 801c892:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c894:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801c898:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801c89c:	fb02 5000 	mla	r0, r2, r0, r5
 801c8a0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801c8a2:	f815 9000 	ldrb.w	r9, [r5, r0]
 801c8a6:	182e      	adds	r6, r5, r0
 801c8a8:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c8ac:	eb04 0509 	add.w	r5, r4, r9
 801c8b0:	2b00      	cmp	r3, #0
 801c8b2:	f000 8096 	beq.w	801c9e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801c8b6:	7877      	ldrb	r7, [r6, #1]
 801c8b8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c8bc:	4427      	add	r7, r4
 801c8be:	2900      	cmp	r1, #0
 801c8c0:	f000 8097 	beq.w	801c9f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 801c8c4:	18b0      	adds	r0, r6, r2
 801c8c6:	5cb2      	ldrb	r2, [r6, r2]
 801c8c8:	7840      	ldrb	r0, [r0, #1]
 801c8ca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c8ce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c8d2:	4422      	add	r2, r4
 801c8d4:	4420      	add	r0, r4
 801c8d6:	b29b      	uxth	r3, r3
 801c8d8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801c8da:	b289      	uxth	r1, r1
 801c8dc:	f895 b002 	ldrb.w	fp, [r5, #2]
 801c8e0:	f8b6 c000 	ldrh.w	ip, [r6]
 801c8e4:	fb03 f801 	mul.w	r8, r3, r1
 801c8e8:	011b      	lsls	r3, r3, #4
 801c8ea:	78be      	ldrb	r6, [r7, #2]
 801c8ec:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801c8f0:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801c8f4:	eba3 0308 	sub.w	r3, r3, r8
 801c8f8:	f814 9009 	ldrb.w	r9, [r4, r9]
 801c8fc:	b289      	uxth	r1, r1
 801c8fe:	b29b      	uxth	r3, r3
 801c900:	ebae 0e01 	sub.w	lr, lr, r1
 801c904:	435e      	muls	r6, r3
 801c906:	fa1f fe8e 	uxth.w	lr, lr
 801c90a:	9310      	str	r3, [sp, #64]	; 0x40
 801c90c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c90e:	fb0e 660b 	mla	r6, lr, fp, r6
 801c912:	f892 b002 	ldrb.w	fp, [r2, #2]
 801c916:	fb01 660b 	mla	r6, r1, fp, r6
 801c91a:	f890 b002 	ldrb.w	fp, [r0, #2]
 801c91e:	fb08 660b 	mla	r6, r8, fp, r6
 801c922:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 801c926:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801c92a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801c92e:	fb1b fb03 	smulbb	fp, fp, r3
 801c932:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c934:	fb06 b60a 	mla	r6, r6, sl, fp
 801c938:	f895 b001 	ldrb.w	fp, [r5, #1]
 801c93c:	787d      	ldrb	r5, [r7, #1]
 801c93e:	783f      	ldrb	r7, [r7, #0]
 801c940:	b2b6      	uxth	r6, r6
 801c942:	435d      	muls	r5, r3
 801c944:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c946:	fb0e 550b 	mla	r5, lr, fp, r5
 801c94a:	f892 b001 	ldrb.w	fp, [r2, #1]
 801c94e:	fb01 550b 	mla	r5, r1, fp, r5
 801c952:	f890 b001 	ldrb.w	fp, [r0, #1]
 801c956:	fb08 550b 	mla	r5, r8, fp, r5
 801c95a:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801c95e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c962:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801c966:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801c96a:	fa5f fc8c 	uxtb.w	ip, ip
 801c96e:	fb1b fb03 	smulbb	fp, fp, r3
 801c972:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c974:	437b      	muls	r3, r7
 801c976:	7817      	ldrb	r7, [r2, #0]
 801c978:	fb05 b50a 	mla	r5, r5, sl, fp
 801c97c:	fb0e 3309 	mla	r3, lr, r9, r3
 801c980:	b2ad      	uxth	r5, r5
 801c982:	fb01 3307 	mla	r3, r1, r7, r3
 801c986:	7807      	ldrb	r7, [r0, #0]
 801c988:	f105 0b01 	add.w	fp, r5, #1
 801c98c:	fb08 3707 	mla	r7, r8, r7, r3
 801c990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c992:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801c996:	fb1c fc03 	smulbb	ip, ip, r3
 801c99a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801c99e:	1c73      	adds	r3, r6, #1
 801c9a0:	096d      	lsrs	r5, r5, #5
 801c9a2:	fb07 c70a 	mla	r7, r7, sl, ip
 801c9a6:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801c9aa:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c9ae:	b2bf      	uxth	r7, r7
 801c9b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c9b2:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801c9b6:	1c7a      	adds	r2, r7, #1
 801c9b8:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801c9bc:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c9c0:	4316      	orrs	r6, r2
 801c9c2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c9c4:	432e      	orrs	r6, r5
 801c9c6:	f823 6b02 	strh.w	r6, [r3], #2
 801c9ca:	930c      	str	r3, [sp, #48]	; 0x30
 801c9cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c9ce:	4413      	add	r3, r2
 801c9d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801c9d2:	931f      	str	r3, [sp, #124]	; 0x7c
 801c9d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c9d6:	4413      	add	r3, r2
 801c9d8:	9320      	str	r3, [sp, #128]	; 0x80
 801c9da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c9dc:	3b01      	subs	r3, #1
 801c9de:	9311      	str	r3, [sp, #68]	; 0x44
 801c9e0:	e6db      	b.n	801c79a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 801c9e2:	b149      	cbz	r1, 801c9f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 801c9e4:	5cb2      	ldrb	r2, [r6, r2]
 801c9e6:	4628      	mov	r0, r5
 801c9e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c9ec:	4422      	add	r2, r4
 801c9ee:	462f      	mov	r7, r5
 801c9f0:	e771      	b.n	801c8d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801c9f2:	4628      	mov	r0, r5
 801c9f4:	462a      	mov	r2, r5
 801c9f6:	e76e      	b.n	801c8d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801c9f8:	4628      	mov	r0, r5
 801c9fa:	462a      	mov	r2, r5
 801c9fc:	e7f7      	b.n	801c9ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801c9fe:	b015      	add	sp, #84	; 0x54
 801ca00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ca04 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801ca04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca08:	880f      	ldrh	r7, [r1, #0]
 801ca0a:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801ca0e:	023c      	lsls	r4, r7, #8
 801ca10:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801ca14:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 801ca18:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 801ca1c:	017c      	lsls	r4, r7, #5
 801ca1e:	00ff      	lsls	r7, r7, #3
 801ca20:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 801ca24:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 801ca28:	b2ff      	uxtb	r7, r7
 801ca2a:	ea4b 0404 	orr.w	r4, fp, r4
 801ca2e:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 801ca32:	4327      	orrs	r7, r4
 801ca34:	fb05 ca0e 	mla	sl, r5, lr, ip
 801ca38:	2d00      	cmp	r5, #0
 801ca3a:	9701      	str	r7, [sp, #4]
 801ca3c:	eb02 080a 	add.w	r8, r2, sl
 801ca40:	db7e      	blt.n	801cb40 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801ca42:	45a9      	cmp	r9, r5
 801ca44:	dd7c      	ble.n	801cb40 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801ca46:	f1bc 0f00 	cmp.w	ip, #0
 801ca4a:	db77      	blt.n	801cb3c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801ca4c:	45e6      	cmp	lr, ip
 801ca4e:	dd75      	ble.n	801cb3c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801ca50:	f812 700a 	ldrb.w	r7, [r2, sl]
 801ca54:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ca58:	441f      	add	r7, r3
 801ca5a:	f11c 0201 	adds.w	r2, ip, #1
 801ca5e:	d472      	bmi.n	801cb46 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801ca60:	4596      	cmp	lr, r2
 801ca62:	dd70      	ble.n	801cb46 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801ca64:	2800      	cmp	r0, #0
 801ca66:	d06e      	beq.n	801cb46 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801ca68:	f898 4001 	ldrb.w	r4, [r8, #1]
 801ca6c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ca70:	441c      	add	r4, r3
 801ca72:	3501      	adds	r5, #1
 801ca74:	d46b      	bmi.n	801cb4e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801ca76:	45a9      	cmp	r9, r5
 801ca78:	dd69      	ble.n	801cb4e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801ca7a:	2e00      	cmp	r6, #0
 801ca7c:	d067      	beq.n	801cb4e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801ca7e:	f1bc 0f00 	cmp.w	ip, #0
 801ca82:	db62      	blt.n	801cb4a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801ca84:	45e6      	cmp	lr, ip
 801ca86:	dd60      	ble.n	801cb4a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801ca88:	f818 500e 	ldrb.w	r5, [r8, lr]
 801ca8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ca90:	441d      	add	r5, r3
 801ca92:	f11c 0201 	adds.w	r2, ip, #1
 801ca96:	d45d      	bmi.n	801cb54 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801ca98:	4596      	cmp	lr, r2
 801ca9a:	dd5b      	ble.n	801cb54 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801ca9c:	2800      	cmp	r0, #0
 801ca9e:	d059      	beq.n	801cb54 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801caa0:	44c6      	add	lr, r8
 801caa2:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801caa6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801caaa:	4413      	add	r3, r2
 801caac:	b280      	uxth	r0, r0
 801caae:	f897 e002 	ldrb.w	lr, [r7, #2]
 801cab2:	b2b2      	uxth	r2, r6
 801cab4:	f897 9000 	ldrb.w	r9, [r7]
 801cab8:	787f      	ldrb	r7, [r7, #1]
 801caba:	fb00 f602 	mul.w	r6, r0, r2
 801cabe:	0100      	lsls	r0, r0, #4
 801cac0:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801cac4:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 801cac8:	1b80      	subs	r0, r0, r6
 801caca:	fa1f fc82 	uxth.w	ip, r2
 801cace:	b282      	uxth	r2, r0
 801cad0:	78a0      	ldrb	r0, [r4, #2]
 801cad2:	eba8 080c 	sub.w	r8, r8, ip
 801cad6:	4350      	muls	r0, r2
 801cad8:	fa1f f888 	uxth.w	r8, r8
 801cadc:	fb08 0e0e 	mla	lr, r8, lr, r0
 801cae0:	78a8      	ldrb	r0, [r5, #2]
 801cae2:	fb0c e000 	mla	r0, ip, r0, lr
 801cae6:	f893 e002 	ldrb.w	lr, [r3, #2]
 801caea:	fb06 0e0e 	mla	lr, r6, lr, r0
 801caee:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 801caf2:	f894 e000 	ldrb.w	lr, [r4]
 801caf6:	fb02 fe0e 	mul.w	lr, r2, lr
 801cafa:	fb08 e909 	mla	r9, r8, r9, lr
 801cafe:	f895 e000 	ldrb.w	lr, [r5]
 801cb02:	fb0c 990e 	mla	r9, ip, lr, r9
 801cb06:	f893 e000 	ldrb.w	lr, [r3]
 801cb0a:	785b      	ldrb	r3, [r3, #1]
 801cb0c:	fb06 9e0e 	mla	lr, r6, lr, r9
 801cb10:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801cb14:	ea4e 0e00 	orr.w	lr, lr, r0
 801cb18:	7860      	ldrb	r0, [r4, #1]
 801cb1a:	4350      	muls	r0, r2
 801cb1c:	786a      	ldrb	r2, [r5, #1]
 801cb1e:	fb08 0007 	mla	r0, r8, r7, r0
 801cb22:	fb0c 0202 	mla	r2, ip, r2, r0
 801cb26:	fb06 2303 	mla	r3, r6, r3, r2
 801cb2a:	095b      	lsrs	r3, r3, #5
 801cb2c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801cb30:	ea4e 0303 	orr.w	r3, lr, r3
 801cb34:	800b      	strh	r3, [r1, #0]
 801cb36:	b003      	add	sp, #12
 801cb38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb3c:	af01      	add	r7, sp, #4
 801cb3e:	e78c      	b.n	801ca5a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 801cb40:	ac01      	add	r4, sp, #4
 801cb42:	4627      	mov	r7, r4
 801cb44:	e795      	b.n	801ca72 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801cb46:	ac01      	add	r4, sp, #4
 801cb48:	e793      	b.n	801ca72 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801cb4a:	ad01      	add	r5, sp, #4
 801cb4c:	e7a1      	b.n	801ca92 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 801cb4e:	ab01      	add	r3, sp, #4
 801cb50:	461d      	mov	r5, r3
 801cb52:	e7ab      	b.n	801caac <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 801cb54:	ab01      	add	r3, sp, #4
 801cb56:	e7a9      	b.n	801caac <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

0801cb58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb5c:	b08f      	sub	sp, #60	; 0x3c
 801cb5e:	920c      	str	r2, [sp, #48]	; 0x30
 801cb60:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801cb62:	900d      	str	r0, [sp, #52]	; 0x34
 801cb64:	910a      	str	r1, [sp, #40]	; 0x28
 801cb66:	6850      	ldr	r0, [r2, #4]
 801cb68:	9306      	str	r3, [sp, #24]
 801cb6a:	6812      	ldr	r2, [r2, #0]
 801cb6c:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 801cb70:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 801cb74:	fb00 1303 	mla	r3, r0, r3, r1
 801cb78:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801cb7c:	9307      	str	r3, [sp, #28]
 801cb7e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801cb80:	681b      	ldr	r3, [r3, #0]
 801cb82:	9308      	str	r3, [sp, #32]
 801cb84:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801cb86:	685c      	ldr	r4, [r3, #4]
 801cb88:	3404      	adds	r4, #4
 801cb8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cb8c:	2b00      	cmp	r3, #0
 801cb8e:	dc03      	bgt.n	801cb98 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801cb90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cb92:	2b00      	cmp	r3, #0
 801cb94:	f340 81d5 	ble.w	801cf42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801cb98:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801cb9a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cb9e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801cba2:	1e48      	subs	r0, r1, #1
 801cba4:	1e56      	subs	r6, r2, #1
 801cba6:	9b06      	ldr	r3, [sp, #24]
 801cba8:	2b00      	cmp	r3, #0
 801cbaa:	f340 80b6 	ble.w	801cd1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801cbae:	ea5f 472b 	movs.w	r7, fp, asr #16
 801cbb2:	ea4f 4325 	mov.w	r3, r5, asr #16
 801cbb6:	d406      	bmi.n	801cbc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801cbb8:	4287      	cmp	r7, r0
 801cbba:	da04      	bge.n	801cbc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801cbbc:	2b00      	cmp	r3, #0
 801cbbe:	db02      	blt.n	801cbc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801cbc0:	42b3      	cmp	r3, r6
 801cbc2:	f2c0 80ab 	blt.w	801cd1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801cbc6:	3701      	adds	r7, #1
 801cbc8:	f100 809c 	bmi.w	801cd04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801cbcc:	42b9      	cmp	r1, r7
 801cbce:	f2c0 8099 	blt.w	801cd04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801cbd2:	3301      	adds	r3, #1
 801cbd4:	f100 8096 	bmi.w	801cd04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801cbd8:	429a      	cmp	r2, r3
 801cbda:	f2c0 8093 	blt.w	801cd04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801cbde:	9b06      	ldr	r3, [sp, #24]
 801cbe0:	930b      	str	r3, [sp, #44]	; 0x2c
 801cbe2:	9b07      	ldr	r3, [sp, #28]
 801cbe4:	9309      	str	r3, [sp, #36]	; 0x24
 801cbe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cbe8:	2b00      	cmp	r3, #0
 801cbea:	f340 80b4 	ble.w	801cd56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801cbee:	9820      	ldr	r0, [sp, #128]	; 0x80
 801cbf0:	142e      	asrs	r6, r5, #16
 801cbf2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801cbf4:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801cbf8:	68c7      	ldr	r7, [r0, #12]
 801cbfa:	ea5f 402b 	movs.w	r0, fp, asr #16
 801cbfe:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801cc02:	6892      	ldr	r2, [r2, #8]
 801cc04:	f100 80fb 	bmi.w	801cdfe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801cc08:	f102 3cff 	add.w	ip, r2, #4294967295
 801cc0c:	4560      	cmp	r0, ip
 801cc0e:	f280 80f6 	bge.w	801cdfe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801cc12:	2e00      	cmp	r6, #0
 801cc14:	f2c0 80f3 	blt.w	801cdfe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801cc18:	f107 3cff 	add.w	ip, r7, #4294967295
 801cc1c:	4566      	cmp	r6, ip
 801cc1e:	f280 80ee 	bge.w	801cdfe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801cc22:	b212      	sxth	r2, r2
 801cc24:	fb06 0002 	mla	r0, r6, r2, r0
 801cc28:	9e08      	ldr	r6, [sp, #32]
 801cc2a:	1837      	adds	r7, r6, r0
 801cc2c:	5c30      	ldrb	r0, [r6, r0]
 801cc2e:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 801cc32:	eb04 0c08 	add.w	ip, r4, r8
 801cc36:	2b00      	cmp	r3, #0
 801cc38:	f000 80d3 	beq.w	801cde2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801cc3c:	787e      	ldrb	r6, [r7, #1]
 801cc3e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801cc42:	4426      	add	r6, r4
 801cc44:	2900      	cmp	r1, #0
 801cc46:	f000 80d4 	beq.w	801cdf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801cc4a:	18b8      	adds	r0, r7, r2
 801cc4c:	5cba      	ldrb	r2, [r7, r2]
 801cc4e:	7840      	ldrb	r0, [r0, #1]
 801cc50:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cc54:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cc58:	4422      	add	r2, r4
 801cc5a:	4420      	add	r0, r4
 801cc5c:	b29b      	uxth	r3, r3
 801cc5e:	78b7      	ldrb	r7, [r6, #2]
 801cc60:	b289      	uxth	r1, r1
 801cc62:	f89c a002 	ldrb.w	sl, [ip, #2]
 801cc66:	f89c c001 	ldrb.w	ip, [ip, #1]
 801cc6a:	fb03 f901 	mul.w	r9, r3, r1
 801cc6e:	011b      	lsls	r3, r3, #4
 801cc70:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801cc74:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801cc78:	eba3 0309 	sub.w	r3, r3, r9
 801cc7c:	b289      	uxth	r1, r1
 801cc7e:	b29b      	uxth	r3, r3
 801cc80:	ebae 0e01 	sub.w	lr, lr, r1
 801cc84:	435f      	muls	r7, r3
 801cc86:	fa1f fe8e 	uxth.w	lr, lr
 801cc8a:	fb0e 770a 	mla	r7, lr, sl, r7
 801cc8e:	f892 a002 	ldrb.w	sl, [r2, #2]
 801cc92:	fb01 770a 	mla	r7, r1, sl, r7
 801cc96:	f890 a002 	ldrb.w	sl, [r0, #2]
 801cc9a:	fb09 7a0a 	mla	sl, r9, sl, r7
 801cc9e:	f814 7008 	ldrb.w	r7, [r4, r8]
 801cca2:	f896 8000 	ldrb.w	r8, [r6]
 801cca6:	7876      	ldrb	r6, [r6, #1]
 801cca8:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801ccac:	fb03 f808 	mul.w	r8, r3, r8
 801ccb0:	4373      	muls	r3, r6
 801ccb2:	fb0e 8807 	mla	r8, lr, r7, r8
 801ccb6:	7817      	ldrb	r7, [r2, #0]
 801ccb8:	fb0e 330c 	mla	r3, lr, ip, r3
 801ccbc:	fb01 8807 	mla	r8, r1, r7, r8
 801ccc0:	7807      	ldrb	r7, [r0, #0]
 801ccc2:	fb09 8707 	mla	r7, r9, r7, r8
 801ccc6:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801ccca:	ea47 070a 	orr.w	r7, r7, sl
 801ccce:	f892 a001 	ldrb.w	sl, [r2, #1]
 801ccd2:	fb01 310a 	mla	r1, r1, sl, r3
 801ccd6:	f890 a001 	ldrb.w	sl, [r0, #1]
 801ccda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ccdc:	fb09 1a0a 	mla	sl, r9, sl, r1
 801cce0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cce4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801cce8:	ea47 070a 	orr.w	r7, r7, sl
 801ccec:	801f      	strh	r7, [r3, #0]
 801ccee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ccf0:	3302      	adds	r3, #2
 801ccf2:	9309      	str	r3, [sp, #36]	; 0x24
 801ccf4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ccf6:	449b      	add	fp, r3
 801ccf8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ccfa:	441d      	add	r5, r3
 801ccfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ccfe:	3b01      	subs	r3, #1
 801cd00:	930b      	str	r3, [sp, #44]	; 0x2c
 801cd02:	e770      	b.n	801cbe6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801cd04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801cd06:	449b      	add	fp, r3
 801cd08:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cd0a:	441d      	add	r5, r3
 801cd0c:	9b06      	ldr	r3, [sp, #24]
 801cd0e:	3b01      	subs	r3, #1
 801cd10:	9306      	str	r3, [sp, #24]
 801cd12:	9b07      	ldr	r3, [sp, #28]
 801cd14:	3302      	adds	r3, #2
 801cd16:	9307      	str	r3, [sp, #28]
 801cd18:	e745      	b.n	801cba6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801cd1a:	d023      	beq.n	801cd64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801cd1c:	9b06      	ldr	r3, [sp, #24]
 801cd1e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801cd20:	3b01      	subs	r3, #1
 801cd22:	fb00 b003 	mla	r0, r0, r3, fp
 801cd26:	1400      	asrs	r0, r0, #16
 801cd28:	f53f af59 	bmi.w	801cbde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801cd2c:	3901      	subs	r1, #1
 801cd2e:	4288      	cmp	r0, r1
 801cd30:	f6bf af55 	bge.w	801cbde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801cd34:	991c      	ldr	r1, [sp, #112]	; 0x70
 801cd36:	fb01 5303 	mla	r3, r1, r3, r5
 801cd3a:	141b      	asrs	r3, r3, #16
 801cd3c:	f53f af4f 	bmi.w	801cbde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801cd40:	3a01      	subs	r2, #1
 801cd42:	4293      	cmp	r3, r2
 801cd44:	f6bf af4b 	bge.w	801cbde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801cd48:	9b06      	ldr	r3, [sp, #24]
 801cd4a:	9309      	str	r3, [sp, #36]	; 0x24
 801cd4c:	9b07      	ldr	r3, [sp, #28]
 801cd4e:	930b      	str	r3, [sp, #44]	; 0x2c
 801cd50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cd52:	2b00      	cmp	r3, #0
 801cd54:	dc70      	bgt.n	801ce38 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801cd56:	9b06      	ldr	r3, [sp, #24]
 801cd58:	9a07      	ldr	r2, [sp, #28]
 801cd5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cd5e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801cd62:	9307      	str	r3, [sp, #28]
 801cd64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cd66:	2b00      	cmp	r3, #0
 801cd68:	f340 80eb 	ble.w	801cf42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801cd6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cd70:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801cd72:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cd76:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cd7a:	eef0 6a62 	vmov.f32	s13, s5
 801cd7e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cd82:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cd86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cd8a:	ee16 ba90 	vmov	fp, s13
 801cd8e:	eef0 6a43 	vmov.f32	s13, s6
 801cd92:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cd96:	ee16 5a90 	vmov	r5, s13
 801cd9a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cd9e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cda2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cda6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cdaa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cdae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cdb2:	ee12 2a90 	vmov	r2, s5
 801cdb6:	eef0 2a47 	vmov.f32	s5, s14
 801cdba:	fb92 f3f3 	sdiv	r3, r2, r3
 801cdbe:	ee13 2a10 	vmov	r2, s6
 801cdc2:	931b      	str	r3, [sp, #108]	; 0x6c
 801cdc4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801cdc6:	eeb0 3a67 	vmov.f32	s6, s15
 801cdca:	fb92 f3f3 	sdiv	r3, r2, r3
 801cdce:	931c      	str	r3, [sp, #112]	; 0x70
 801cdd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cdd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cdd4:	3b01      	subs	r3, #1
 801cdd6:	930a      	str	r3, [sp, #40]	; 0x28
 801cdd8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801cdda:	bf08      	it	eq
 801cddc:	4613      	moveq	r3, r2
 801cdde:	9306      	str	r3, [sp, #24]
 801cde0:	e6d3      	b.n	801cb8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801cde2:	b149      	cbz	r1, 801cdf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801cde4:	5cba      	ldrb	r2, [r7, r2]
 801cde6:	4660      	mov	r0, ip
 801cde8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cdec:	4422      	add	r2, r4
 801cdee:	4666      	mov	r6, ip
 801cdf0:	e734      	b.n	801cc5c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801cdf2:	4660      	mov	r0, ip
 801cdf4:	4662      	mov	r2, ip
 801cdf6:	e731      	b.n	801cc5c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801cdf8:	4660      	mov	r0, ip
 801cdfa:	4662      	mov	r2, ip
 801cdfc:	e7f7      	b.n	801cdee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801cdfe:	f110 0c01 	adds.w	ip, r0, #1
 801ce02:	f53f af74 	bmi.w	801ccee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801ce06:	4562      	cmp	r2, ip
 801ce08:	f6ff af71 	blt.w	801ccee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801ce0c:	f116 0c01 	adds.w	ip, r6, #1
 801ce10:	f53f af6d 	bmi.w	801ccee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801ce14:	4567      	cmp	r7, ip
 801ce16:	f6ff af6a 	blt.w	801ccee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801ce1a:	b23f      	sxth	r7, r7
 801ce1c:	b212      	sxth	r2, r2
 801ce1e:	9701      	str	r7, [sp, #4]
 801ce20:	9200      	str	r2, [sp, #0]
 801ce22:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801ce26:	e9cd 0602 	strd	r0, r6, [sp, #8]
 801ce2a:	4623      	mov	r3, r4
 801ce2c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ce2e:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801ce32:	f7ff fde7 	bl	801ca04 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 801ce36:	e75a      	b.n	801ccee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801ce38:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ce3a:	ea4f 462b 	mov.w	r6, fp, asr #16
 801ce3e:	1428      	asrs	r0, r5, #16
 801ce40:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801ce44:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801ce48:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ce4c:	fb02 6000 	mla	r0, r2, r0, r6
 801ce50:	9e08      	ldr	r6, [sp, #32]
 801ce52:	f816 8000 	ldrb.w	r8, [r6, r0]
 801ce56:	1837      	adds	r7, r6, r0
 801ce58:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ce5c:	eb04 0c08 	add.w	ip, r4, r8
 801ce60:	2b00      	cmp	r3, #0
 801ce62:	d060      	beq.n	801cf26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 801ce64:	787e      	ldrb	r6, [r7, #1]
 801ce66:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ce6a:	4426      	add	r6, r4
 801ce6c:	2900      	cmp	r1, #0
 801ce6e:	d062      	beq.n	801cf36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 801ce70:	18b8      	adds	r0, r7, r2
 801ce72:	5cba      	ldrb	r2, [r7, r2]
 801ce74:	7840      	ldrb	r0, [r0, #1]
 801ce76:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ce7a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ce7e:	4422      	add	r2, r4
 801ce80:	4420      	add	r0, r4
 801ce82:	b29b      	uxth	r3, r3
 801ce84:	78b7      	ldrb	r7, [r6, #2]
 801ce86:	b289      	uxth	r1, r1
 801ce88:	f89c a002 	ldrb.w	sl, [ip, #2]
 801ce8c:	f89c c001 	ldrb.w	ip, [ip, #1]
 801ce90:	fb03 f901 	mul.w	r9, r3, r1
 801ce94:	011b      	lsls	r3, r3, #4
 801ce96:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ce9a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801ce9e:	eba3 0309 	sub.w	r3, r3, r9
 801cea2:	b289      	uxth	r1, r1
 801cea4:	b29b      	uxth	r3, r3
 801cea6:	ebae 0e01 	sub.w	lr, lr, r1
 801ceaa:	435f      	muls	r7, r3
 801ceac:	fa1f fe8e 	uxth.w	lr, lr
 801ceb0:	fb0e 770a 	mla	r7, lr, sl, r7
 801ceb4:	f892 a002 	ldrb.w	sl, [r2, #2]
 801ceb8:	fb01 770a 	mla	r7, r1, sl, r7
 801cebc:	f890 a002 	ldrb.w	sl, [r0, #2]
 801cec0:	fb09 7a0a 	mla	sl, r9, sl, r7
 801cec4:	f814 7008 	ldrb.w	r7, [r4, r8]
 801cec8:	f896 8000 	ldrb.w	r8, [r6]
 801cecc:	7876      	ldrb	r6, [r6, #1]
 801cece:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801ced2:	fb03 f808 	mul.w	r8, r3, r8
 801ced6:	4373      	muls	r3, r6
 801ced8:	7856      	ldrb	r6, [r2, #1]
 801ceda:	fb0e 8807 	mla	r8, lr, r7, r8
 801cede:	7817      	ldrb	r7, [r2, #0]
 801cee0:	fb0e 330c 	mla	r3, lr, ip, r3
 801cee4:	fb01 8807 	mla	r8, r1, r7, r8
 801cee8:	7807      	ldrb	r7, [r0, #0]
 801ceea:	fb01 3306 	mla	r3, r1, r6, r3
 801ceee:	fb09 8707 	mla	r7, r9, r7, r8
 801cef2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801cef6:	ea47 070a 	orr.w	r7, r7, sl
 801cefa:	f890 a001 	ldrb.w	sl, [r0, #1]
 801cefe:	fb09 3a0a 	mla	sl, r9, sl, r3
 801cf02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cf04:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cf08:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801cf0c:	ea47 070a 	orr.w	r7, r7, sl
 801cf10:	f823 7b02 	strh.w	r7, [r3], #2
 801cf14:	930b      	str	r3, [sp, #44]	; 0x2c
 801cf16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801cf18:	449b      	add	fp, r3
 801cf1a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cf1c:	441d      	add	r5, r3
 801cf1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cf20:	3b01      	subs	r3, #1
 801cf22:	9309      	str	r3, [sp, #36]	; 0x24
 801cf24:	e714      	b.n	801cd50 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801cf26:	b149      	cbz	r1, 801cf3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801cf28:	5cba      	ldrb	r2, [r7, r2]
 801cf2a:	4660      	mov	r0, ip
 801cf2c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cf30:	4422      	add	r2, r4
 801cf32:	4666      	mov	r6, ip
 801cf34:	e7a5      	b.n	801ce82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 801cf36:	4660      	mov	r0, ip
 801cf38:	4662      	mov	r2, ip
 801cf3a:	e7a2      	b.n	801ce82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 801cf3c:	4660      	mov	r0, ip
 801cf3e:	4662      	mov	r2, ip
 801cf40:	e7f7      	b.n	801cf32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
 801cf42:	b00f      	add	sp, #60	; 0x3c
 801cf44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cf48 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 801cf48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf4c:	b085      	sub	sp, #20
 801cf4e:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 801cf52:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801cf56:	9102      	str	r1, [sp, #8]
 801cf58:	2c00      	cmp	r4, #0
 801cf5a:	fb04 710c 	mla	r1, r4, ip, r7
 801cf5e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801cf62:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 801cf66:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801cf6a:	eb02 0e01 	add.w	lr, r2, r1
 801cf6e:	f2c0 8122 	blt.w	801d1b6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801cf72:	45a0      	cmp	r8, r4
 801cf74:	f340 811f 	ble.w	801d1b6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801cf78:	2f00      	cmp	r7, #0
 801cf7a:	f2c0 811a 	blt.w	801d1b2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801cf7e:	45bc      	cmp	ip, r7
 801cf80:	f340 8117 	ble.w	801d1b2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801cf84:	5c52      	ldrb	r2, [r2, r1]
 801cf86:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801cf8a:	1c7a      	adds	r2, r7, #1
 801cf8c:	f100 8116 	bmi.w	801d1bc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801cf90:	4594      	cmp	ip, r2
 801cf92:	f340 8113 	ble.w	801d1bc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801cf96:	2e00      	cmp	r6, #0
 801cf98:	f000 8112 	beq.w	801d1c0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 801cf9c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801cfa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801cfa4:	3401      	adds	r4, #1
 801cfa6:	f100 810f 	bmi.w	801d1c8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801cfaa:	45a0      	cmp	r8, r4
 801cfac:	f340 810c 	ble.w	801d1c8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801cfb0:	2800      	cmp	r0, #0
 801cfb2:	f000 810c 	beq.w	801d1ce <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 801cfb6:	2f00      	cmp	r7, #0
 801cfb8:	f2c0 8104 	blt.w	801d1c4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801cfbc:	45bc      	cmp	ip, r7
 801cfbe:	f340 8101 	ble.w	801d1c4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801cfc2:	f81e 200c 	ldrb.w	r2, [lr, ip]
 801cfc6:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801cfca:	3701      	adds	r7, #1
 801cfcc:	f100 8102 	bmi.w	801d1d4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801cfd0:	45bc      	cmp	ip, r7
 801cfd2:	f340 80ff 	ble.w	801d1d4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801cfd6:	2e00      	cmp	r6, #0
 801cfd8:	f000 80fe 	beq.w	801d1d8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 801cfdc:	44f4      	add	ip, lr
 801cfde:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801cfe2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801cfe6:	b2b6      	uxth	r6, r6
 801cfe8:	b280      	uxth	r0, r0
 801cfea:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801cfee:	fb00 fe06 	mul.w	lr, r0, r6
 801cff2:	0136      	lsls	r6, r6, #4
 801cff4:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 801cff8:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801cffc:	eba6 070e 	sub.w	r7, r6, lr
 801d000:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 801d004:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801d008:	b280      	uxth	r0, r0
 801d00a:	b2bf      	uxth	r7, r7
 801d00c:	1a1b      	subs	r3, r3, r0
 801d00e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801d012:	fb0a f607 	mul.w	r6, sl, r7
 801d016:	b29b      	uxth	r3, r3
 801d018:	fb0b 6603 	mla	r6, fp, r3, r6
 801d01c:	fb00 6609 	mla	r6, r0, r9, r6
 801d020:	fb0e 6608 	mla	r6, lr, r8, r6
 801d024:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801d028:	9600      	str	r6, [sp, #0]
 801d02a:	2e00      	cmp	r6, #0
 801d02c:	f000 80be 	beq.w	801d1ac <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 801d030:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801d034:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801d038:	9e02      	ldr	r6, [sp, #8]
 801d03a:	fb0b fc0c 	mul.w	ip, fp, ip
 801d03e:	fb0b f505 	mul.w	r5, fp, r5
 801d042:	8836      	ldrh	r6, [r6, #0]
 801d044:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801d048:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801d04c:	9501      	str	r5, [sp, #4]
 801d04e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801d052:	44dc      	add	ip, fp
 801d054:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d058:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801d05c:	9503      	str	r5, [sp, #12]
 801d05e:	9d01      	ldr	r5, [sp, #4]
 801d060:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801d064:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801d068:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 801d06c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801d070:	fb0a fc0c 	mul.w	ip, sl, ip
 801d074:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 801d078:	fb0a fa01 	mul.w	sl, sl, r1
 801d07c:	ea4f 251c 	mov.w	r5, ip, lsr #8
 801d080:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801d084:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 801d088:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801d08c:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 801d090:	4465      	add	r5, ip
 801d092:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d096:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801d09a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d09e:	fb09 fc0c 	mul.w	ip, r9, ip
 801d0a2:	0a2d      	lsrs	r5, r5, #8
 801d0a4:	fb09 f904 	mul.w	r9, r9, r4
 801d0a8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d0ac:	ea4f 211c 	mov.w	r1, ip, lsr #8
 801d0b0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801d0b4:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801d0b8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801d0bc:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801d0c0:	437d      	muls	r5, r7
 801d0c2:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801d0c6:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 801d0ca:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801d0ce:	4461      	add	r1, ip
 801d0d0:	fb08 f404 	mul.w	r4, r8, r4
 801d0d4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d0d8:	fb08 f802 	mul.w	r8, r8, r2
 801d0dc:	0a09      	lsrs	r1, r1, #8
 801d0de:	0a22      	lsrs	r2, r4, #8
 801d0e0:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801d0e4:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801d0e8:	fb07 f70a 	mul.w	r7, r7, sl
 801d0ec:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801d0f0:	4414      	add	r4, r2
 801d0f2:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801d0f6:	0a24      	lsrs	r4, r4, #8
 801d0f8:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801d0fc:	9a03      	ldr	r2, [sp, #12]
 801d0fe:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801d102:	fb02 5503 	mla	r5, r2, r3, r5
 801d106:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801d10a:	9a00      	ldr	r2, [sp, #0]
 801d10c:	fb04 540e 	mla	r4, r4, lr, r5
 801d110:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801d114:	1235      	asrs	r5, r6, #8
 801d116:	fb01 4100 	mla	r1, r1, r0, r4
 801d11a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801d11e:	0a09      	lsrs	r1, r1, #8
 801d120:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 801d124:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 801d128:	fb03 7101 	mla	r1, r3, r1, r7
 801d12c:	fb0e 1e08 	mla	lr, lr, r8, r1
 801d130:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 801d134:	fb00 e101 	mla	r1, r0, r1, lr
 801d138:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801d13c:	b287      	uxth	r7, r0
 801d13e:	0a09      	lsrs	r1, r1, #8
 801d140:	437a      	muls	r2, r7
 801d142:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801d146:	1c53      	adds	r3, r2, #1
 801d148:	4321      	orrs	r1, r4
 801d14a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d14e:	0c0a      	lsrs	r2, r1, #16
 801d150:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801d154:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801d158:	b2c8      	uxtb	r0, r1
 801d15a:	fb12 f207 	smulbb	r2, r2, r7
 801d15e:	fb14 f407 	smulbb	r4, r4, r7
 801d162:	b2db      	uxtb	r3, r3
 801d164:	fb10 f007 	smulbb	r0, r0, r7
 801d168:	fb05 2503 	mla	r5, r5, r3, r2
 801d16c:	10f2      	asrs	r2, r6, #3
 801d16e:	00f6      	lsls	r6, r6, #3
 801d170:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801d174:	b2ad      	uxth	r5, r5
 801d176:	b2f6      	uxtb	r6, r6
 801d178:	fb02 4203 	mla	r2, r2, r3, r4
 801d17c:	fb06 0303 	mla	r3, r6, r3, r0
 801d180:	b294      	uxth	r4, r2
 801d182:	b299      	uxth	r1, r3
 801d184:	1c6b      	adds	r3, r5, #1
 801d186:	1c62      	adds	r2, r4, #1
 801d188:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801d18c:	1c4b      	adds	r3, r1, #1
 801d18e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801d192:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801d196:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801d19a:	0952      	lsrs	r2, r2, #5
 801d19c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801d1a0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d1a4:	432b      	orrs	r3, r5
 801d1a6:	4313      	orrs	r3, r2
 801d1a8:	9a02      	ldr	r2, [sp, #8]
 801d1aa:	8013      	strh	r3, [r2, #0]
 801d1ac:	b005      	add	sp, #20
 801d1ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1b2:	2500      	movs	r5, #0
 801d1b4:	e6e9      	b.n	801cf8a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 801d1b6:	2100      	movs	r1, #0
 801d1b8:	460d      	mov	r5, r1
 801d1ba:	e6f3      	b.n	801cfa4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801d1bc:	2100      	movs	r1, #0
 801d1be:	e6f1      	b.n	801cfa4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801d1c0:	4631      	mov	r1, r6
 801d1c2:	e6ef      	b.n	801cfa4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801d1c4:	2400      	movs	r4, #0
 801d1c6:	e700      	b.n	801cfca <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 801d1c8:	2200      	movs	r2, #0
 801d1ca:	4614      	mov	r4, r2
 801d1cc:	e70b      	b.n	801cfe6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801d1ce:	4602      	mov	r2, r0
 801d1d0:	4604      	mov	r4, r0
 801d1d2:	e708      	b.n	801cfe6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801d1d4:	2200      	movs	r2, #0
 801d1d6:	e706      	b.n	801cfe6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801d1d8:	4632      	mov	r2, r6
 801d1da:	e704      	b.n	801cfe6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

0801d1dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1e0:	b09f      	sub	sp, #124	; 0x7c
 801d1e2:	921b      	str	r2, [sp, #108]	; 0x6c
 801d1e4:	9309      	str	r3, [sp, #36]	; 0x24
 801d1e6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801d1e8:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801d1ec:	901d      	str	r0, [sp, #116]	; 0x74
 801d1ee:	931c      	str	r3, [sp, #112]	; 0x70
 801d1f0:	6850      	ldr	r0, [r2, #4]
 801d1f2:	9119      	str	r1, [sp, #100]	; 0x64
 801d1f4:	6812      	ldr	r2, [r2, #0]
 801d1f6:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801d1f8:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801d1fc:	fb00 1303 	mla	r3, r0, r3, r1
 801d200:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d204:	930c      	str	r3, [sp, #48]	; 0x30
 801d206:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d208:	681b      	ldr	r3, [r3, #0]
 801d20a:	9312      	str	r3, [sp, #72]	; 0x48
 801d20c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d20e:	685e      	ldr	r6, [r3, #4]
 801d210:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801d214:	3604      	adds	r6, #4
 801d216:	930d      	str	r3, [sp, #52]	; 0x34
 801d218:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d21a:	2b00      	cmp	r3, #0
 801d21c:	dc03      	bgt.n	801d226 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801d21e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801d220:	2b00      	cmp	r3, #0
 801d222:	f340 8387 	ble.w	801d934 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801d226:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d228:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d22c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d230:	1e48      	subs	r0, r1, #1
 801d232:	1e57      	subs	r7, r2, #1
 801d234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d236:	2b00      	cmp	r3, #0
 801d238:	f340 8194 	ble.w	801d564 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 801d23c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801d23e:	142b      	asrs	r3, r5, #16
 801d240:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801d244:	d406      	bmi.n	801d254 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d246:	4584      	cmp	ip, r0
 801d248:	da04      	bge.n	801d254 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d24a:	2b00      	cmp	r3, #0
 801d24c:	db02      	blt.n	801d254 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d24e:	42bb      	cmp	r3, r7
 801d250:	f2c0 8189 	blt.w	801d566 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801d254:	f11c 0c01 	adds.w	ip, ip, #1
 801d258:	f100 8177 	bmi.w	801d54a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801d25c:	4561      	cmp	r1, ip
 801d25e:	f2c0 8174 	blt.w	801d54a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801d262:	3301      	adds	r3, #1
 801d264:	f100 8171 	bmi.w	801d54a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801d268:	429a      	cmp	r2, r3
 801d26a:	f2c0 816e 	blt.w	801d54a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801d26e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d270:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801d272:	931a      	str	r3, [sp, #104]	; 0x68
 801d274:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801d276:	2b00      	cmp	r3, #0
 801d278:	f340 8193 	ble.w	801d5a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801d27c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d27e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801d282:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d286:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d28a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d28c:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801d290:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d292:	141b      	asrs	r3, r3, #16
 801d294:	f100 81d6 	bmi.w	801d644 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801d298:	f100 38ff 	add.w	r8, r0, #4294967295
 801d29c:	4543      	cmp	r3, r8
 801d29e:	f280 81d1 	bge.w	801d644 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801d2a2:	f1bc 0f00 	cmp.w	ip, #0
 801d2a6:	f2c0 81cd 	blt.w	801d644 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801d2aa:	f10e 38ff 	add.w	r8, lr, #4294967295
 801d2ae:	45c4      	cmp	ip, r8
 801d2b0:	f280 81c8 	bge.w	801d644 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801d2b4:	b200      	sxth	r0, r0
 801d2b6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d2b8:	fb0c 3300 	mla	r3, ip, r0, r3
 801d2bc:	eb04 0803 	add.w	r8, r4, r3
 801d2c0:	5ce3      	ldrb	r3, [r4, r3]
 801d2c2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d2c6:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801d2ca:	2a00      	cmp	r2, #0
 801d2cc:	f000 81af 	beq.w	801d62e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801d2d0:	f898 c001 	ldrb.w	ip, [r8, #1]
 801d2d4:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801d2d8:	940e      	str	r4, [sp, #56]	; 0x38
 801d2da:	0e24      	lsrs	r4, r4, #24
 801d2dc:	9415      	str	r4, [sp, #84]	; 0x54
 801d2de:	b179      	cbz	r1, 801d300 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801d2e0:	eb08 0c00 	add.w	ip, r8, r0
 801d2e4:	f818 0000 	ldrb.w	r0, [r8, r0]
 801d2e8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801d2ec:	900a      	str	r0, [sp, #40]	; 0x28
 801d2ee:	0e00      	lsrs	r0, r0, #24
 801d2f0:	9013      	str	r0, [sp, #76]	; 0x4c
 801d2f2:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801d2f6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801d2fa:	900f      	str	r0, [sp, #60]	; 0x3c
 801d2fc:	0e00      	lsrs	r0, r0, #24
 801d2fe:	9016      	str	r0, [sp, #88]	; 0x58
 801d300:	b292      	uxth	r2, r2
 801d302:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d304:	b289      	uxth	r1, r1
 801d306:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d308:	fb02 f901 	mul.w	r9, r2, r1
 801d30c:	0112      	lsls	r2, r2, #4
 801d30e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d312:	eba2 0809 	sub.w	r8, r2, r9
 801d316:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801d31a:	b289      	uxth	r1, r1
 801d31c:	fa1f f888 	uxth.w	r8, r8
 801d320:	1a52      	subs	r2, r2, r1
 801d322:	fb08 f000 	mul.w	r0, r8, r0
 801d326:	b292      	uxth	r2, r2
 801d328:	fb02 000e 	mla	r0, r2, lr, r0
 801d32c:	fb01 0004 	mla	r0, r1, r4, r0
 801d330:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801d332:	fb09 0004 	mla	r0, r9, r4, r0
 801d336:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801d33a:	2800      	cmp	r0, #0
 801d33c:	f000 80fa 	beq.w	801d534 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801d340:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801d344:	d01b      	beq.n	801d37e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801d346:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801d34a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d34e:	fb0e fa0a 	mul.w	sl, lr, sl
 801d352:	fb0e fe03 	mul.w	lr, lr, r3
 801d356:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d35a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801d35e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801d362:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d366:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801d36a:	4453      	add	r3, sl
 801d36c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d370:	0a1b      	lsrs	r3, r3, #8
 801d372:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d376:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d37a:	ea43 030c 	orr.w	r3, r3, ip
 801d37e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d380:	2cff      	cmp	r4, #255	; 0xff
 801d382:	d021      	beq.n	801d3c8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801d384:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d386:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d38a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d38c:	fb04 fb0b 	mul.w	fp, r4, fp
 801d390:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d392:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d396:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d398:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d39c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d3a0:	fb04 fa0a 	mul.w	sl, r4, sl
 801d3a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d3a8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d3ac:	44de      	add	lr, fp
 801d3ae:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d3b2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d3b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d3ba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d3be:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d3c2:	ea4e 040a 	orr.w	r4, lr, sl
 801d3c6:	940e      	str	r4, [sp, #56]	; 0x38
 801d3c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d3ca:	2cff      	cmp	r4, #255	; 0xff
 801d3cc:	d021      	beq.n	801d412 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801d3ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d3d0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d3d4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d3d6:	fb04 fb0b 	mul.w	fp, r4, fp
 801d3da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d3dc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d3e0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d3e2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d3e6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d3ea:	fb04 fa0a 	mul.w	sl, r4, sl
 801d3ee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d3f2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d3f6:	44de      	add	lr, fp
 801d3f8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d3fc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d400:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d404:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d408:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d40c:	ea4e 040a 	orr.w	r4, lr, sl
 801d410:	940a      	str	r4, [sp, #40]	; 0x28
 801d412:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801d414:	2cff      	cmp	r4, #255	; 0xff
 801d416:	d021      	beq.n	801d45c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 801d418:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d41a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d41e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801d420:	fb04 fb0b 	mul.w	fp, r4, fp
 801d424:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d426:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d42a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801d42c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d430:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d434:	fb04 fa0a 	mul.w	sl, r4, sl
 801d438:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d43c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d440:	44de      	add	lr, fp
 801d442:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d446:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d44a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d44e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d452:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d456:	ea4e 040a 	orr.w	r4, lr, sl
 801d45a:	940f      	str	r4, [sp, #60]	; 0x3c
 801d45c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d45e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801d462:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d466:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d46a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d46c:	fb08 fc0c 	mul.w	ip, r8, ip
 801d470:	fb02 cc0e 	mla	ip, r2, lr, ip
 801d474:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801d478:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d47a:	fb01 cc0e 	mla	ip, r1, lr, ip
 801d47e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801d482:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d484:	fb09 cc0e 	mla	ip, r9, lr, ip
 801d488:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801d48c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d48e:	fb08 f80e 	mul.w	r8, r8, lr
 801d492:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d496:	fb02 8303 	mla	r3, r2, r3, r8
 801d49a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d49c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d4a0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801d4a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d4a6:	fb01 330a 	mla	r3, r1, sl, r3
 801d4aa:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801d4ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d4b0:	fb09 3901 	mla	r9, r9, r1, r3
 801d4b4:	883b      	ldrh	r3, [r7, #0]
 801d4b6:	4342      	muls	r2, r0
 801d4b8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d4bc:	1c50      	adds	r0, r2, #1
 801d4be:	1219      	asrs	r1, r3, #8
 801d4c0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801d4c4:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801d4c8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801d4cc:	ea4c 0c09 	orr.w	ip, ip, r9
 801d4d0:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801d4d4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 801d4d8:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 801d4dc:	b2c0      	uxtb	r0, r0
 801d4de:	fb12 f204 	smulbb	r2, r2, r4
 801d4e2:	fa5f fc8c 	uxtb.w	ip, ip
 801d4e6:	fb1e fe04 	smulbb	lr, lr, r4
 801d4ea:	fb01 2100 	mla	r1, r1, r0, r2
 801d4ee:	10da      	asrs	r2, r3, #3
 801d4f0:	fb1c fc04 	smulbb	ip, ip, r4
 801d4f4:	00db      	lsls	r3, r3, #3
 801d4f6:	b289      	uxth	r1, r1
 801d4f8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801d4fc:	b2db      	uxtb	r3, r3
 801d4fe:	fb02 e200 	mla	r2, r2, r0, lr
 801d502:	fb03 c300 	mla	r3, r3, r0, ip
 801d506:	b292      	uxth	r2, r2
 801d508:	fa1f fc83 	uxth.w	ip, r3
 801d50c:	1c4b      	adds	r3, r1, #1
 801d50e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801d512:	f10c 0301 	add.w	r3, ip, #1
 801d516:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801d51a:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801d51e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801d522:	430b      	orrs	r3, r1
 801d524:	1c51      	adds	r1, r2, #1
 801d526:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801d52a:	0952      	lsrs	r2, r2, #5
 801d52c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d530:	4313      	orrs	r3, r2
 801d532:	803b      	strh	r3, [r7, #0]
 801d534:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801d536:	3702      	adds	r7, #2
 801d538:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d53a:	441a      	add	r2, r3
 801d53c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d53e:	441d      	add	r5, r3
 801d540:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801d542:	9229      	str	r2, [sp, #164]	; 0xa4
 801d544:	3b01      	subs	r3, #1
 801d546:	931a      	str	r3, [sp, #104]	; 0x68
 801d548:	e694      	b.n	801d274 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d54a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801d54c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801d54e:	441c      	add	r4, r3
 801d550:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d552:	441d      	add	r5, r3
 801d554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d556:	9429      	str	r4, [sp, #164]	; 0xa4
 801d558:	3b01      	subs	r3, #1
 801d55a:	9309      	str	r3, [sp, #36]	; 0x24
 801d55c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d55e:	3302      	adds	r3, #2
 801d560:	930c      	str	r3, [sp, #48]	; 0x30
 801d562:	e667      	b.n	801d234 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801d564:	d024      	beq.n	801d5b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 801d566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d568:	982b      	ldr	r0, [sp, #172]	; 0xac
 801d56a:	3b01      	subs	r3, #1
 801d56c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801d56e:	fb00 4003 	mla	r0, r0, r3, r4
 801d572:	1400      	asrs	r0, r0, #16
 801d574:	f53f ae7b 	bmi.w	801d26e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d578:	3901      	subs	r1, #1
 801d57a:	4288      	cmp	r0, r1
 801d57c:	f6bf ae77 	bge.w	801d26e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d580:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801d582:	fb01 5303 	mla	r3, r1, r3, r5
 801d586:	141b      	asrs	r3, r3, #16
 801d588:	f53f ae71 	bmi.w	801d26e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d58c:	3a01      	subs	r2, #1
 801d58e:	4293      	cmp	r3, r2
 801d590:	f6bf ae6d 	bge.w	801d26e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d594:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801d598:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801d59c:	f1bb 0f00 	cmp.w	fp, #0
 801d5a0:	dc70      	bgt.n	801d684 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 801d5a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d5a4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801d5a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d5aa:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801d5ae:	930c      	str	r3, [sp, #48]	; 0x30
 801d5b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d5b2:	2b00      	cmp	r3, #0
 801d5b4:	f340 81be 	ble.w	801d934 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801d5b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d5bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d5be:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d5c2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d5c6:	eef0 6a62 	vmov.f32	s13, s5
 801d5ca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d5ce:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d5d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d5d6:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801d5da:	eef0 6a43 	vmov.f32	s13, s6
 801d5de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d5e2:	ee16 5a90 	vmov	r5, s13
 801d5e6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d5ea:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d5ee:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d5f2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d5f6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d5fa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d5fe:	ee12 2a90 	vmov	r2, s5
 801d602:	eef0 2a47 	vmov.f32	s5, s14
 801d606:	fb92 f3f3 	sdiv	r3, r2, r3
 801d60a:	ee13 2a10 	vmov	r2, s6
 801d60e:	932b      	str	r3, [sp, #172]	; 0xac
 801d610:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d612:	eeb0 3a67 	vmov.f32	s6, s15
 801d616:	fb92 f3f3 	sdiv	r3, r2, r3
 801d61a:	932c      	str	r3, [sp, #176]	; 0xb0
 801d61c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d61e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801d620:	3b01      	subs	r3, #1
 801d622:	9319      	str	r3, [sp, #100]	; 0x64
 801d624:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d626:	bf08      	it	eq
 801d628:	4613      	moveq	r3, r2
 801d62a:	9309      	str	r3, [sp, #36]	; 0x24
 801d62c:	e5f4      	b.n	801d218 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d62e:	2900      	cmp	r1, #0
 801d630:	f43f ae66 	beq.w	801d300 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801d634:	f818 0000 	ldrb.w	r0, [r8, r0]
 801d638:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801d63c:	900a      	str	r0, [sp, #40]	; 0x28
 801d63e:	0e00      	lsrs	r0, r0, #24
 801d640:	9013      	str	r0, [sp, #76]	; 0x4c
 801d642:	e65d      	b.n	801d300 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801d644:	f113 0801 	adds.w	r8, r3, #1
 801d648:	f53f af74 	bmi.w	801d534 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801d64c:	4540      	cmp	r0, r8
 801d64e:	f6ff af71 	blt.w	801d534 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801d652:	f11c 0801 	adds.w	r8, ip, #1
 801d656:	f53f af6d 	bmi.w	801d534 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801d65a:	45c6      	cmp	lr, r8
 801d65c:	f6ff af6a 	blt.w	801d534 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801d660:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801d662:	b200      	sxth	r0, r0
 801d664:	9302      	str	r3, [sp, #8]
 801d666:	fa0f f38e 	sxth.w	r3, lr
 801d66a:	9000      	str	r0, [sp, #0]
 801d66c:	9301      	str	r3, [sp, #4]
 801d66e:	4633      	mov	r3, r6
 801d670:	981d      	ldr	r0, [sp, #116]	; 0x74
 801d672:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801d676:	e9cd c203 	strd	ip, r2, [sp, #12]
 801d67a:	4639      	mov	r1, r7
 801d67c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d67e:	f7ff fc63 	bl	801cf48 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 801d682:	e757      	b.n	801d534 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801d684:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d686:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801d68a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801d68c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d690:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d692:	1427      	asrs	r7, r4, #16
 801d694:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d696:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d69a:	142b      	asrs	r3, r5, #16
 801d69c:	fb01 7303 	mla	r3, r1, r3, r7
 801d6a0:	18e7      	adds	r7, r4, r3
 801d6a2:	5ce3      	ldrb	r3, [r4, r3]
 801d6a4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d6a8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801d6ac:	2a00      	cmp	r2, #0
 801d6ae:	f000 8137 	beq.w	801d920 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 801d6b2:	f897 e001 	ldrb.w	lr, [r7, #1]
 801d6b6:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801d6ba:	9410      	str	r4, [sp, #64]	; 0x40
 801d6bc:	0e24      	lsrs	r4, r4, #24
 801d6be:	9417      	str	r4, [sp, #92]	; 0x5c
 801d6c0:	b170      	cbz	r0, 801d6e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801d6c2:	eb07 0e01 	add.w	lr, r7, r1
 801d6c6:	5c79      	ldrb	r1, [r7, r1]
 801d6c8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d6cc:	910b      	str	r1, [sp, #44]	; 0x2c
 801d6ce:	0e09      	lsrs	r1, r1, #24
 801d6d0:	9114      	str	r1, [sp, #80]	; 0x50
 801d6d2:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801d6d6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d6da:	9111      	str	r1, [sp, #68]	; 0x44
 801d6dc:	0e09      	lsrs	r1, r1, #24
 801d6de:	9118      	str	r1, [sp, #96]	; 0x60
 801d6e0:	b292      	uxth	r2, r2
 801d6e2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801d6e4:	b280      	uxth	r0, r0
 801d6e6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d6e8:	fb02 f800 	mul.w	r8, r2, r0
 801d6ec:	0112      	lsls	r2, r2, #4
 801d6ee:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801d6f2:	eba2 0e08 	sub.w	lr, r2, r8
 801d6f6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801d6fa:	b280      	uxth	r0, r0
 801d6fc:	fa1f fe8e 	uxth.w	lr, lr
 801d700:	1a12      	subs	r2, r2, r0
 801d702:	fb0e f101 	mul.w	r1, lr, r1
 801d706:	b292      	uxth	r2, r2
 801d708:	fb02 110c 	mla	r1, r2, ip, r1
 801d70c:	fb00 1104 	mla	r1, r0, r4, r1
 801d710:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801d712:	fb08 1104 	mla	r1, r8, r4, r1
 801d716:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801d71a:	2900      	cmp	r1, #0
 801d71c:	f000 80f5 	beq.w	801d90a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 801d720:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801d724:	d019      	beq.n	801d75a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 801d726:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801d72a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d72e:	fb0c fa0a 	mul.w	sl, ip, sl
 801d732:	fb0c fc03 	mul.w	ip, ip, r3
 801d736:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d73a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801d73e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801d742:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d746:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801d74a:	4453      	add	r3, sl
 801d74c:	0a3f      	lsrs	r7, r7, #8
 801d74e:	0a1b      	lsrs	r3, r3, #8
 801d750:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801d754:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d758:	433b      	orrs	r3, r7
 801d75a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801d75c:	2cff      	cmp	r4, #255	; 0xff
 801d75e:	d020      	beq.n	801d7a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 801d760:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d762:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d766:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801d768:	4367      	muls	r7, r4
 801d76a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d76c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d770:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d774:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801d776:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d77a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d77e:	fb04 fa0a 	mul.w	sl, r4, sl
 801d782:	44bc      	add	ip, r7
 801d784:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d788:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d78c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d790:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d794:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d798:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d79c:	ea4c 040a 	orr.w	r4, ip, sl
 801d7a0:	9410      	str	r4, [sp, #64]	; 0x40
 801d7a2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d7a4:	2cff      	cmp	r4, #255	; 0xff
 801d7a6:	d020      	beq.n	801d7ea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 801d7a8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d7aa:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d7ae:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d7b0:	4367      	muls	r7, r4
 801d7b2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d7b4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d7b8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d7bc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d7be:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d7c2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d7c6:	fb04 fa0a 	mul.w	sl, r4, sl
 801d7ca:	44bc      	add	ip, r7
 801d7cc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d7d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d7d4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d7d8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d7dc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d7e0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d7e4:	ea4c 040a 	orr.w	r4, ip, sl
 801d7e8:	940b      	str	r4, [sp, #44]	; 0x2c
 801d7ea:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801d7ec:	2cff      	cmp	r4, #255	; 0xff
 801d7ee:	d020      	beq.n	801d832 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 801d7f0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d7f2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d7f6:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801d7f8:	4367      	muls	r7, r4
 801d7fa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d7fc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d800:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d804:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801d806:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d80a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d80e:	fb04 fa0a 	mul.w	sl, r4, sl
 801d812:	44bc      	add	ip, r7
 801d814:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d818:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d81c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d820:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d824:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d828:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d82c:	ea4c 040a 	orr.w	r4, ip, sl
 801d830:	9411      	str	r4, [sp, #68]	; 0x44
 801d832:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d834:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801d838:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d83c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d840:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d842:	fb0e f707 	mul.w	r7, lr, r7
 801d846:	fb02 770c 	mla	r7, r2, ip, r7
 801d84a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d84e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d850:	fb00 770c 	mla	r7, r0, ip, r7
 801d854:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d858:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d85a:	fb08 770c 	mla	r7, r8, ip, r7
 801d85e:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801d862:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d864:	fb0e fe0c 	mul.w	lr, lr, ip
 801d868:	0a3f      	lsrs	r7, r7, #8
 801d86a:	fb02 e303 	mla	r3, r2, r3, lr
 801d86e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d870:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801d874:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801d878:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d87a:	fb00 330a 	mla	r3, r0, sl, r3
 801d87e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801d882:	f8b9 0000 	ldrh.w	r0, [r9]
 801d886:	fb08 3c0c 	mla	ip, r8, ip, r3
 801d88a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d88c:	1202      	asrs	r2, r0, #8
 801d88e:	434b      	muls	r3, r1
 801d890:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d894:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801d898:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d89c:	1c59      	adds	r1, r3, #1
 801d89e:	ea47 070c 	orr.w	r7, r7, ip
 801d8a2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801d8a6:	0c3b      	lsrs	r3, r7, #16
 801d8a8:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801d8ac:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 801d8b0:	b2ff      	uxtb	r7, r7
 801d8b2:	fb13 f304 	smulbb	r3, r3, r4
 801d8b6:	b2c9      	uxtb	r1, r1
 801d8b8:	fb1c fc04 	smulbb	ip, ip, r4
 801d8bc:	fb02 3201 	mla	r2, r2, r1, r3
 801d8c0:	10c3      	asrs	r3, r0, #3
 801d8c2:	fb17 f704 	smulbb	r7, r7, r4
 801d8c6:	00c0      	lsls	r0, r0, #3
 801d8c8:	b292      	uxth	r2, r2
 801d8ca:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801d8ce:	b2c0      	uxtb	r0, r0
 801d8d0:	fb03 c301 	mla	r3, r3, r1, ip
 801d8d4:	f102 0c01 	add.w	ip, r2, #1
 801d8d8:	fb00 7001 	mla	r0, r0, r1, r7
 801d8dc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801d8e0:	b280      	uxth	r0, r0
 801d8e2:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 801d8e6:	b29b      	uxth	r3, r3
 801d8e8:	1c42      	adds	r2, r0, #1
 801d8ea:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801d8ee:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d8f2:	ea42 020c 	orr.w	r2, r2, ip
 801d8f6:	f103 0c01 	add.w	ip, r3, #1
 801d8fa:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801d8fe:	095b      	lsrs	r3, r3, #5
 801d900:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d904:	431a      	orrs	r2, r3
 801d906:	f8a9 2000 	strh.w	r2, [r9]
 801d90a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801d90c:	f109 0902 	add.w	r9, r9, #2
 801d910:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d912:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d916:	441a      	add	r2, r3
 801d918:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d91a:	9229      	str	r2, [sp, #164]	; 0xa4
 801d91c:	441d      	add	r5, r3
 801d91e:	e63d      	b.n	801d59c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801d920:	2800      	cmp	r0, #0
 801d922:	f43f aedd 	beq.w	801d6e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801d926:	5c79      	ldrb	r1, [r7, r1]
 801d928:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d92c:	910b      	str	r1, [sp, #44]	; 0x2c
 801d92e:	0e09      	lsrs	r1, r1, #24
 801d930:	9114      	str	r1, [sp, #80]	; 0x50
 801d932:	e6d5      	b.n	801d6e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801d934:	b01f      	add	sp, #124	; 0x7c
 801d936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d93a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 801d93a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d93e:	b089      	sub	sp, #36	; 0x24
 801d940:	9101      	str	r1, [sp, #4]
 801d942:	9801      	ldr	r0, [sp, #4]
 801d944:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 801d948:	8800      	ldrh	r0, [r0, #0]
 801d94a:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 801d94e:	1206      	asrs	r6, r0, #8
 801d950:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 801d954:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 801d958:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801d95c:	9602      	str	r6, [sp, #8]
 801d95e:	10c6      	asrs	r6, r0, #3
 801d960:	00c0      	lsls	r0, r0, #3
 801d962:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d966:	b2c0      	uxtb	r0, r0
 801d968:	9603      	str	r6, [sp, #12]
 801d96a:	9004      	str	r0, [sp, #16]
 801d96c:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 801d970:	fb07 100c 	mla	r0, r7, ip, r1
 801d974:	2f00      	cmp	r7, #0
 801d976:	eb02 0e00 	add.w	lr, r2, r0
 801d97a:	f2c0 810a 	blt.w	801db92 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 801d97e:	45b8      	cmp	r8, r7
 801d980:	f340 8107 	ble.w	801db92 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 801d984:	2900      	cmp	r1, #0
 801d986:	f2c0 8102 	blt.w	801db8e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 801d98a:	458c      	cmp	ip, r1
 801d98c:	f340 80ff 	ble.w	801db8e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 801d990:	5c12      	ldrb	r2, [r2, r0]
 801d992:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801d996:	1c4a      	adds	r2, r1, #1
 801d998:	f100 80fe 	bmi.w	801db98 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 801d99c:	4594      	cmp	ip, r2
 801d99e:	f340 80fb 	ble.w	801db98 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 801d9a2:	2d00      	cmp	r5, #0
 801d9a4:	f000 80fa 	beq.w	801db9c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 801d9a8:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801d9ac:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801d9b0:	3701      	adds	r7, #1
 801d9b2:	f100 80f7 	bmi.w	801dba4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 801d9b6:	45b8      	cmp	r8, r7
 801d9b8:	f340 80f4 	ble.w	801dba4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 801d9bc:	2c00      	cmp	r4, #0
 801d9be:	f000 80f4 	beq.w	801dbaa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 801d9c2:	2900      	cmp	r1, #0
 801d9c4:	eb0e 020c 	add.w	r2, lr, ip
 801d9c8:	f2c0 80ea 	blt.w	801dba0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 801d9cc:	458c      	cmp	ip, r1
 801d9ce:	f340 80e7 	ble.w	801dba0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 801d9d2:	f81e 700c 	ldrb.w	r7, [lr, ip]
 801d9d6:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 801d9da:	3101      	adds	r1, #1
 801d9dc:	f100 80e8 	bmi.w	801dbb0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 801d9e0:	458c      	cmp	ip, r1
 801d9e2:	f340 80e5 	ble.w	801dbb0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 801d9e6:	2d00      	cmp	r5, #0
 801d9e8:	f000 80e4 	beq.w	801dbb4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 801d9ec:	7852      	ldrb	r2, [r2, #1]
 801d9ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d9f2:	0e0b      	lsrs	r3, r1, #24
 801d9f4:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801d9f8:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801d9fc:	9300      	str	r3, [sp, #0]
 801d9fe:	b2a4      	uxth	r4, r4
 801da00:	b2ab      	uxth	r3, r5
 801da02:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801da06:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801da0a:	fb03 f904 	mul.w	r9, r3, r4
 801da0e:	011b      	lsls	r3, r3, #4
 801da10:	fb0a f505 	mul.w	r5, sl, r5
 801da14:	ea4f 6817 	mov.w	r8, r7, lsr #24
 801da18:	eba3 0e09 	sub.w	lr, r3, r9
 801da1c:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 801da20:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 801da24:	0a28      	lsrs	r0, r5, #8
 801da26:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801da2a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801da2e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801da32:	fb0a f303 	mul.w	r3, sl, r3
 801da36:	fb08 f707 	mul.w	r7, r8, r7
 801da3a:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 801da3e:	4405      	add	r5, r0
 801da40:	fb08 fc0c 	mul.w	ip, r8, ip
 801da44:	b2a4      	uxth	r4, r4
 801da46:	0a2d      	lsrs	r5, r5, #8
 801da48:	fa1f fe8e 	uxth.w	lr, lr
 801da4c:	1b12      	subs	r2, r2, r4
 801da4e:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 801da52:	b292      	uxth	r2, r2
 801da54:	9005      	str	r0, [sp, #20]
 801da56:	f503 7080 	add.w	r0, r3, #256	; 0x100
 801da5a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801da5e:	ea4f 201c 	mov.w	r0, ip, lsr #8
 801da62:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801da66:	0a1b      	lsrs	r3, r3, #8
 801da68:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801da6c:	9306      	str	r3, [sp, #24]
 801da6e:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 801da72:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801da76:	4460      	add	r0, ip
 801da78:	fb0b f303 	mul.w	r3, fp, r3
 801da7c:	fb0b f606 	mul.w	r6, fp, r6
 801da80:	0a00      	lsrs	r0, r0, #8
 801da82:	0a1d      	lsrs	r5, r3, #8
 801da84:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801da88:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801da8c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801da90:	441d      	add	r5, r3
 801da92:	f506 7380 	add.w	r3, r6, #256	; 0x100
 801da96:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801da9a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801da9e:	0a2d      	lsrs	r5, r5, #8
 801daa0:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 801daa4:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 801daa8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801daac:	0a36      	lsrs	r6, r6, #8
 801daae:	0a1b      	lsrs	r3, r3, #8
 801dab0:	fb05 f50e 	mul.w	r5, r5, lr
 801dab4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801dab8:	9307      	str	r3, [sp, #28]
 801daba:	0e0b      	lsrs	r3, r1, #24
 801dabc:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801dac0:	fb0e f606 	mul.w	r6, lr, r6
 801dac4:	435f      	muls	r7, r3
 801dac6:	4359      	muls	r1, r3
 801dac8:	9b05      	ldr	r3, [sp, #20]
 801daca:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801dace:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801dad2:	fb03 5502 	mla	r5, r3, r2, r5
 801dad6:	9b06      	ldr	r3, [sp, #24]
 801dad8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dadc:	fb0e fe0b 	mul.w	lr, lr, fp
 801dae0:	44bc      	add	ip, r7
 801dae2:	f501 7780 	add.w	r7, r1, #256	; 0x100
 801dae6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801daea:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801daee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801daf2:	0a09      	lsrs	r1, r1, #8
 801daf4:	fb0c 5509 	mla	r5, ip, r9, r5
 801daf8:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801dafc:	fb00 5504 	mla	r5, r0, r4, r5
 801db00:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 801db04:	9b07      	ldr	r3, [sp, #28]
 801db06:	fb02 6000 	mla	r0, r2, r0, r6
 801db0a:	0a2d      	lsrs	r5, r5, #8
 801db0c:	fb02 e20a 	mla	r2, r2, sl, lr
 801db10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801db14:	fb09 0001 	mla	r0, r9, r1, r0
 801db18:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801db1c:	fb04 0003 	mla	r0, r4, r3, r0
 801db20:	9b00      	ldr	r3, [sp, #0]
 801db22:	fb04 2408 	mla	r4, r4, r8, r2
 801db26:	9a04      	ldr	r2, [sp, #16]
 801db28:	0a00      	lsrs	r0, r0, #8
 801db2a:	fb09 4903 	mla	r9, r9, r3, r4
 801db2e:	9b02      	ldr	r3, [sp, #8]
 801db30:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801db34:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801db38:	4305      	orrs	r5, r0
 801db3a:	fa5f f989 	uxtb.w	r9, r9
 801db3e:	fb03 f109 	mul.w	r1, r3, r9
 801db42:	9b03      	ldr	r3, [sp, #12]
 801db44:	fb03 f309 	mul.w	r3, r3, r9
 801db48:	fb02 f909 	mul.w	r9, r2, r9
 801db4c:	1c4a      	adds	r2, r1, #1
 801db4e:	1c58      	adds	r0, r3, #1
 801db50:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801db54:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801db58:	0c2a      	lsrs	r2, r5, #16
 801db5a:	0a2b      	lsrs	r3, r5, #8
 801db5c:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801db60:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801db64:	0212      	lsls	r2, r2, #8
 801db66:	00db      	lsls	r3, r3, #3
 801db68:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801db6c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801db70:	4313      	orrs	r3, r2
 801db72:	f109 0201 	add.w	r2, r9, #1
 801db76:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801db7a:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 801db7e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801db82:	431d      	orrs	r5, r3
 801db84:	9b01      	ldr	r3, [sp, #4]
 801db86:	801d      	strh	r5, [r3, #0]
 801db88:	b009      	add	sp, #36	; 0x24
 801db8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db8e:	2000      	movs	r0, #0
 801db90:	e701      	b.n	801d996 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 801db92:	2600      	movs	r6, #0
 801db94:	4630      	mov	r0, r6
 801db96:	e70b      	b.n	801d9b0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801db98:	2600      	movs	r6, #0
 801db9a:	e709      	b.n	801d9b0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801db9c:	462e      	mov	r6, r5
 801db9e:	e707      	b.n	801d9b0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801dba0:	2700      	movs	r7, #0
 801dba2:	e71a      	b.n	801d9da <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 801dba4:	2100      	movs	r1, #0
 801dba6:	460f      	mov	r7, r1
 801dba8:	e723      	b.n	801d9f2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801dbaa:	4621      	mov	r1, r4
 801dbac:	4627      	mov	r7, r4
 801dbae:	e720      	b.n	801d9f2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801dbb0:	2100      	movs	r1, #0
 801dbb2:	e71e      	b.n	801d9f2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801dbb4:	4629      	mov	r1, r5
 801dbb6:	e71c      	b.n	801d9f2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

0801dbb8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbbc:	b09b      	sub	sp, #108	; 0x6c
 801dbbe:	9218      	str	r2, [sp, #96]	; 0x60
 801dbc0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801dbc2:	9019      	str	r0, [sp, #100]	; 0x64
 801dbc4:	9116      	str	r1, [sp, #88]	; 0x58
 801dbc6:	6850      	ldr	r0, [r2, #4]
 801dbc8:	9307      	str	r3, [sp, #28]
 801dbca:	6812      	ldr	r2, [r2, #0]
 801dbcc:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801dbce:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801dbd2:	fb00 1303 	mla	r3, r0, r3, r1
 801dbd6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801dbda:	930a      	str	r3, [sp, #40]	; 0x28
 801dbdc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801dbde:	681b      	ldr	r3, [r3, #0]
 801dbe0:	930f      	str	r3, [sp, #60]	; 0x3c
 801dbe2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801dbe4:	685e      	ldr	r6, [r3, #4]
 801dbe6:	3604      	adds	r6, #4
 801dbe8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801dbea:	2b00      	cmp	r3, #0
 801dbec:	dc03      	bgt.n	801dbf6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801dbee:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801dbf0:	2b00      	cmp	r3, #0
 801dbf2:	f340 8373 	ble.w	801e2dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 801dbf6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801dbf8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801dbfc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801dc00:	1e48      	subs	r0, r1, #1
 801dc02:	1e57      	subs	r7, r2, #1
 801dc04:	9b07      	ldr	r3, [sp, #28]
 801dc06:	2b00      	cmp	r3, #0
 801dc08:	f340 818f 	ble.w	801df2a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 801dc0c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801dc0e:	142b      	asrs	r3, r5, #16
 801dc10:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801dc14:	d406      	bmi.n	801dc24 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801dc16:	4584      	cmp	ip, r0
 801dc18:	da04      	bge.n	801dc24 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801dc1a:	2b00      	cmp	r3, #0
 801dc1c:	db02      	blt.n	801dc24 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801dc1e:	42bb      	cmp	r3, r7
 801dc20:	f2c0 8184 	blt.w	801df2c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801dc24:	f11c 0c01 	adds.w	ip, ip, #1
 801dc28:	f100 8172 	bmi.w	801df10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801dc2c:	4561      	cmp	r1, ip
 801dc2e:	f2c0 816f 	blt.w	801df10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801dc32:	3301      	adds	r3, #1
 801dc34:	f100 816c 	bmi.w	801df10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801dc38:	429a      	cmp	r2, r3
 801dc3a:	f2c0 8169 	blt.w	801df10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801dc3e:	9b07      	ldr	r3, [sp, #28]
 801dc40:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801dc42:	9317      	str	r3, [sp, #92]	; 0x5c
 801dc44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801dc46:	2b00      	cmp	r3, #0
 801dc48:	f340 818e 	ble.w	801df68 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 801dc4c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801dc4e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801dc52:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801dc56:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801dc5a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801dc5c:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801dc60:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801dc62:	141b      	asrs	r3, r3, #16
 801dc64:	f100 81d1 	bmi.w	801e00a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801dc68:	f101 38ff 	add.w	r8, r1, #4294967295
 801dc6c:	4543      	cmp	r3, r8
 801dc6e:	f280 81cc 	bge.w	801e00a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801dc72:	f1bc 0f00 	cmp.w	ip, #0
 801dc76:	f2c0 81c8 	blt.w	801e00a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801dc7a:	f10e 38ff 	add.w	r8, lr, #4294967295
 801dc7e:	45c4      	cmp	ip, r8
 801dc80:	f280 81c3 	bge.w	801e00a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801dc84:	b209      	sxth	r1, r1
 801dc86:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801dc88:	fb0c 3301 	mla	r3, ip, r1, r3
 801dc8c:	eb04 0803 	add.w	r8, r4, r3
 801dc90:	5ce3      	ldrb	r3, [r4, r3]
 801dc92:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801dc96:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801dc9a:	2a00      	cmp	r2, #0
 801dc9c:	f000 81aa 	beq.w	801dff4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 801dca0:	f898 c001 	ldrb.w	ip, [r8, #1]
 801dca4:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801dca8:	940b      	str	r4, [sp, #44]	; 0x2c
 801dcaa:	0e24      	lsrs	r4, r4, #24
 801dcac:	9412      	str	r4, [sp, #72]	; 0x48
 801dcae:	b178      	cbz	r0, 801dcd0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801dcb0:	eb08 0c01 	add.w	ip, r8, r1
 801dcb4:	f818 1001 	ldrb.w	r1, [r8, r1]
 801dcb8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801dcbc:	9108      	str	r1, [sp, #32]
 801dcbe:	0e09      	lsrs	r1, r1, #24
 801dcc0:	9110      	str	r1, [sp, #64]	; 0x40
 801dcc2:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801dcc6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801dcca:	910c      	str	r1, [sp, #48]	; 0x30
 801dccc:	0e09      	lsrs	r1, r1, #24
 801dcce:	9113      	str	r1, [sp, #76]	; 0x4c
 801dcd0:	b292      	uxth	r2, r2
 801dcd2:	9912      	ldr	r1, [sp, #72]	; 0x48
 801dcd4:	b280      	uxth	r0, r0
 801dcd6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801dcd8:	fb02 f900 	mul.w	r9, r2, r0
 801dcdc:	0112      	lsls	r2, r2, #4
 801dcde:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801dce2:	eba2 0809 	sub.w	r8, r2, r9
 801dce6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801dcea:	b280      	uxth	r0, r0
 801dcec:	fa1f f888 	uxth.w	r8, r8
 801dcf0:	1a12      	subs	r2, r2, r0
 801dcf2:	fb08 f101 	mul.w	r1, r8, r1
 801dcf6:	b292      	uxth	r2, r2
 801dcf8:	fb02 110e 	mla	r1, r2, lr, r1
 801dcfc:	fb00 1104 	mla	r1, r0, r4, r1
 801dd00:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801dd02:	fb09 1104 	mla	r1, r9, r4, r1
 801dd06:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801dd0a:	2900      	cmp	r1, #0
 801dd0c:	f000 80f5 	beq.w	801defa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801dd10:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801dd14:	d01b      	beq.n	801dd4e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801dd16:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801dd1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801dd1e:	fb0e fa0a 	mul.w	sl, lr, sl
 801dd22:	fb0e fe03 	mul.w	lr, lr, r3
 801dd26:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801dd2a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801dd2e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801dd32:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801dd36:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801dd3a:	4453      	add	r3, sl
 801dd3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dd40:	0a1b      	lsrs	r3, r3, #8
 801dd42:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801dd46:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801dd4a:	ea43 030c 	orr.w	r3, r3, ip
 801dd4e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801dd50:	2cff      	cmp	r4, #255	; 0xff
 801dd52:	d021      	beq.n	801dd98 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801dd54:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801dd56:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801dd5a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801dd5c:	fb04 fb0b 	mul.w	fp, r4, fp
 801dd60:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801dd62:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801dd66:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801dd68:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dd6c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801dd70:	fb04 fa0a 	mul.w	sl, r4, sl
 801dd74:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dd78:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801dd7c:	44de      	add	lr, fp
 801dd7e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dd82:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dd86:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dd8a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dd8e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801dd92:	ea4e 040a 	orr.w	r4, lr, sl
 801dd96:	940b      	str	r4, [sp, #44]	; 0x2c
 801dd98:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801dd9a:	2cff      	cmp	r4, #255	; 0xff
 801dd9c:	d021      	beq.n	801dde2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801dd9e:	9c08      	ldr	r4, [sp, #32]
 801dda0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801dda4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801dda6:	fb04 fb0b 	mul.w	fp, r4, fp
 801ddaa:	9c08      	ldr	r4, [sp, #32]
 801ddac:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ddb0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ddb2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ddb6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ddba:	fb04 fa0a 	mul.w	sl, r4, sl
 801ddbe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ddc2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801ddc6:	44de      	add	lr, fp
 801ddc8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ddcc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ddd0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ddd4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ddd8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801dddc:	ea4e 040a 	orr.w	r4, lr, sl
 801dde0:	9408      	str	r4, [sp, #32]
 801dde2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801dde4:	2cff      	cmp	r4, #255	; 0xff
 801dde6:	d021      	beq.n	801de2c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801dde8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ddea:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801ddee:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ddf0:	fb04 fb0b 	mul.w	fp, r4, fp
 801ddf4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ddf6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ddfa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ddfc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801de00:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801de04:	fb04 fa0a 	mul.w	sl, r4, sl
 801de08:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801de0c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801de10:	44de      	add	lr, fp
 801de12:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801de16:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801de1a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801de1e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801de22:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801de26:	ea4e 040a 	orr.w	r4, lr, sl
 801de2a:	940c      	str	r4, [sp, #48]	; 0x30
 801de2c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801de2e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801de32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801de36:	43c9      	mvns	r1, r1
 801de38:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801de3c:	9c08      	ldr	r4, [sp, #32]
 801de3e:	fb08 fc0c 	mul.w	ip, r8, ip
 801de42:	fb02 cc0e 	mla	ip, r2, lr, ip
 801de46:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801de4a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801de4c:	fb00 cc0e 	mla	ip, r0, lr, ip
 801de50:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801de54:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801de56:	fb09 cc0e 	mla	ip, r9, lr, ip
 801de5a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801de5e:	fb08 f80e 	mul.w	r8, r8, lr
 801de62:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801de66:	fa5f fe81 	uxtb.w	lr, r1
 801de6a:	fb02 8303 	mla	r3, r2, r3, r8
 801de6e:	9a08      	ldr	r2, [sp, #32]
 801de70:	f8b7 8000 	ldrh.w	r8, [r7]
 801de74:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801de78:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801de7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801de7e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801de82:	fb00 330a 	mla	r3, r0, sl, r3
 801de86:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801de8a:	ea4f 2228 	mov.w	r2, r8, asr #8
 801de8e:	fb09 3900 	mla	r9, r9, r0, r3
 801de92:	ea4f 00e8 	mov.w	r0, r8, asr #3
 801de96:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801de9a:	b2c9      	uxtb	r1, r1
 801de9c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801dea0:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801dea4:	fb02 f20e 	mul.w	r2, r2, lr
 801dea8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801deac:	fb00 f00e 	mul.w	r0, r0, lr
 801deb0:	1c53      	adds	r3, r2, #1
 801deb2:	fb01 f10e 	mul.w	r1, r1, lr
 801deb6:	ea4c 0c09 	orr.w	ip, ip, r9
 801deba:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801debe:	ea4f 431c 	mov.w	r3, ip, lsr #16
 801dec2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801dec6:	4a60      	ldr	r2, [pc, #384]	; (801e048 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 801dec8:	b2db      	uxtb	r3, r3
 801deca:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 801dece:	1c43      	adds	r3, r0, #1
 801ded0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801ded4:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801ded8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801dedc:	00db      	lsls	r3, r3, #3
 801dede:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801dee2:	4313      	orrs	r3, r2
 801dee4:	1c4a      	adds	r2, r1, #1
 801dee6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801deea:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801deee:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 801def2:	ea4c 0c03 	orr.w	ip, ip, r3
 801def6:	f8a7 c000 	strh.w	ip, [r7]
 801defa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801defc:	3702      	adds	r7, #2
 801defe:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801df00:	441a      	add	r2, r3
 801df02:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801df04:	441d      	add	r5, r3
 801df06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801df08:	9225      	str	r2, [sp, #148]	; 0x94
 801df0a:	3b01      	subs	r3, #1
 801df0c:	9317      	str	r3, [sp, #92]	; 0x5c
 801df0e:	e699      	b.n	801dc44 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801df10:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801df12:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801df14:	441c      	add	r4, r3
 801df16:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801df18:	441d      	add	r5, r3
 801df1a:	9b07      	ldr	r3, [sp, #28]
 801df1c:	9425      	str	r4, [sp, #148]	; 0x94
 801df1e:	3b01      	subs	r3, #1
 801df20:	9307      	str	r3, [sp, #28]
 801df22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801df24:	3302      	adds	r3, #2
 801df26:	930a      	str	r3, [sp, #40]	; 0x28
 801df28:	e66c      	b.n	801dc04 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801df2a:	d024      	beq.n	801df76 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 801df2c:	9b07      	ldr	r3, [sp, #28]
 801df2e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801df30:	3b01      	subs	r3, #1
 801df32:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801df34:	fb00 4003 	mla	r0, r0, r3, r4
 801df38:	1400      	asrs	r0, r0, #16
 801df3a:	f53f ae80 	bmi.w	801dc3e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801df3e:	3901      	subs	r1, #1
 801df40:	4288      	cmp	r0, r1
 801df42:	f6bf ae7c 	bge.w	801dc3e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801df46:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801df48:	fb01 5303 	mla	r3, r1, r3, r5
 801df4c:	141b      	asrs	r3, r3, #16
 801df4e:	f53f ae76 	bmi.w	801dc3e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801df52:	3a01      	subs	r2, #1
 801df54:	4293      	cmp	r3, r2
 801df56:	f6bf ae72 	bge.w	801dc3e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801df5a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801df5e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801df62:	f1bb 0f00 	cmp.w	fp, #0
 801df66:	dc71      	bgt.n	801e04c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801df68:	9b07      	ldr	r3, [sp, #28]
 801df6a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801df6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801df70:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801df74:	930a      	str	r3, [sp, #40]	; 0x28
 801df76:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801df78:	2b00      	cmp	r3, #0
 801df7a:	f340 81af 	ble.w	801e2dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 801df7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801df82:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801df84:	ee30 0a04 	vadd.f32	s0, s0, s8
 801df88:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801df8c:	eef0 6a62 	vmov.f32	s13, s5
 801df90:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801df94:	ee31 1a05 	vadd.f32	s2, s2, s10
 801df98:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801df9c:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 801dfa0:	eef0 6a43 	vmov.f32	s13, s6
 801dfa4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dfa8:	ee16 5a90 	vmov	r5, s13
 801dfac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dfb0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dfb4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dfb8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dfbc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dfc0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dfc4:	ee12 2a90 	vmov	r2, s5
 801dfc8:	eef0 2a47 	vmov.f32	s5, s14
 801dfcc:	fb92 f3f3 	sdiv	r3, r2, r3
 801dfd0:	ee13 2a10 	vmov	r2, s6
 801dfd4:	9327      	str	r3, [sp, #156]	; 0x9c
 801dfd6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801dfd8:	eeb0 3a67 	vmov.f32	s6, s15
 801dfdc:	fb92 f3f3 	sdiv	r3, r2, r3
 801dfe0:	9328      	str	r3, [sp, #160]	; 0xa0
 801dfe2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801dfe4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801dfe6:	3b01      	subs	r3, #1
 801dfe8:	9316      	str	r3, [sp, #88]	; 0x58
 801dfea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801dfec:	bf08      	it	eq
 801dfee:	4613      	moveq	r3, r2
 801dff0:	9307      	str	r3, [sp, #28]
 801dff2:	e5f9      	b.n	801dbe8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801dff4:	2800      	cmp	r0, #0
 801dff6:	f43f ae6b 	beq.w	801dcd0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801dffa:	f818 1001 	ldrb.w	r1, [r8, r1]
 801dffe:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e002:	9108      	str	r1, [sp, #32]
 801e004:	0e09      	lsrs	r1, r1, #24
 801e006:	9110      	str	r1, [sp, #64]	; 0x40
 801e008:	e662      	b.n	801dcd0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801e00a:	f113 0801 	adds.w	r8, r3, #1
 801e00e:	f53f af74 	bmi.w	801defa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801e012:	4541      	cmp	r1, r8
 801e014:	f6ff af71 	blt.w	801defa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801e018:	f11c 0801 	adds.w	r8, ip, #1
 801e01c:	f53f af6d 	bmi.w	801defa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801e020:	45c6      	cmp	lr, r8
 801e022:	f6ff af6a 	blt.w	801defa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801e026:	b209      	sxth	r1, r1
 801e028:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801e02c:	fa0f f38e 	sxth.w	r3, lr
 801e030:	9100      	str	r1, [sp, #0]
 801e032:	4639      	mov	r1, r7
 801e034:	9301      	str	r3, [sp, #4]
 801e036:	4633      	mov	r3, r6
 801e038:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801e03c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e03e:	9819      	ldr	r0, [sp, #100]	; 0x64
 801e040:	f7ff fc7b 	bl	801d93a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 801e044:	e759      	b.n	801defa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801e046:	bf00      	nop
 801e048:	fffff800 	.word	0xfffff800
 801e04c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e04e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e052:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801e054:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e058:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e05a:	1427      	asrs	r7, r4, #16
 801e05c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801e05e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e062:	142b      	asrs	r3, r5, #16
 801e064:	fb01 7303 	mla	r3, r1, r3, r7
 801e068:	18e7      	adds	r7, r4, r3
 801e06a:	5ce3      	ldrb	r3, [r4, r3]
 801e06c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e070:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801e074:	2a00      	cmp	r2, #0
 801e076:	f000 8127 	beq.w	801e2c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 801e07a:	f897 e001 	ldrb.w	lr, [r7, #1]
 801e07e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801e082:	940d      	str	r4, [sp, #52]	; 0x34
 801e084:	0e24      	lsrs	r4, r4, #24
 801e086:	9414      	str	r4, [sp, #80]	; 0x50
 801e088:	b170      	cbz	r0, 801e0a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801e08a:	eb07 0e01 	add.w	lr, r7, r1
 801e08e:	5c79      	ldrb	r1, [r7, r1]
 801e090:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e094:	9109      	str	r1, [sp, #36]	; 0x24
 801e096:	0e09      	lsrs	r1, r1, #24
 801e098:	9111      	str	r1, [sp, #68]	; 0x44
 801e09a:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801e09e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e0a2:	910e      	str	r1, [sp, #56]	; 0x38
 801e0a4:	0e09      	lsrs	r1, r1, #24
 801e0a6:	9115      	str	r1, [sp, #84]	; 0x54
 801e0a8:	b292      	uxth	r2, r2
 801e0aa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e0ac:	b280      	uxth	r0, r0
 801e0ae:	fb02 f800 	mul.w	r8, r2, r0
 801e0b2:	0112      	lsls	r2, r2, #4
 801e0b4:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801e0b8:	eba2 0e08 	sub.w	lr, r2, r8
 801e0bc:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801e0c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e0c2:	b280      	uxth	r0, r0
 801e0c4:	fa1f fe8e 	uxth.w	lr, lr
 801e0c8:	1a09      	subs	r1, r1, r0
 801e0ca:	fb0e f202 	mul.w	r2, lr, r2
 801e0ce:	b289      	uxth	r1, r1
 801e0d0:	fb01 220c 	mla	r2, r1, ip, r2
 801e0d4:	fb00 2204 	mla	r2, r0, r4, r2
 801e0d8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e0da:	fb08 2204 	mla	r2, r8, r4, r2
 801e0de:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801e0e2:	2a00      	cmp	r2, #0
 801e0e4:	f000 80e5 	beq.w	801e2b2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 801e0e8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801e0ec:	d019      	beq.n	801e122 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 801e0ee:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801e0f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e0f6:	fb0c fa0a 	mul.w	sl, ip, sl
 801e0fa:	fb0c fc03 	mul.w	ip, ip, r3
 801e0fe:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e102:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801e106:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801e10a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e10e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e112:	4453      	add	r3, sl
 801e114:	0a3f      	lsrs	r7, r7, #8
 801e116:	0a1b      	lsrs	r3, r3, #8
 801e118:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801e11c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e120:	433b      	orrs	r3, r7
 801e122:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e124:	2cff      	cmp	r4, #255	; 0xff
 801e126:	d020      	beq.n	801e16a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 801e128:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e12a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e12e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e130:	4367      	muls	r7, r4
 801e132:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e134:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e138:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e13c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e13e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e142:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e146:	fb04 fa0a 	mul.w	sl, r4, sl
 801e14a:	44bc      	add	ip, r7
 801e14c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e150:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e154:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e158:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e15c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e160:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e164:	ea4c 040a 	orr.w	r4, ip, sl
 801e168:	940d      	str	r4, [sp, #52]	; 0x34
 801e16a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e16c:	2cff      	cmp	r4, #255	; 0xff
 801e16e:	d020      	beq.n	801e1b2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 801e170:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e172:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e176:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e178:	4367      	muls	r7, r4
 801e17a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e17c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e180:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e184:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e186:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e18a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e18e:	fb04 fa0a 	mul.w	sl, r4, sl
 801e192:	44bc      	add	ip, r7
 801e194:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e198:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e19c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e1a0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e1a4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e1a8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e1ac:	ea4c 040a 	orr.w	r4, ip, sl
 801e1b0:	9409      	str	r4, [sp, #36]	; 0x24
 801e1b2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e1b4:	2cff      	cmp	r4, #255	; 0xff
 801e1b6:	d020      	beq.n	801e1fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 801e1b8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e1ba:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e1be:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e1c0:	4367      	muls	r7, r4
 801e1c2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e1c4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e1c8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e1cc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e1ce:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e1d2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e1d6:	fb04 fa0a 	mul.w	sl, r4, sl
 801e1da:	44bc      	add	ip, r7
 801e1dc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e1e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e1e4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e1e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e1ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e1f0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e1f4:	ea4c 040a 	orr.w	r4, ip, sl
 801e1f8:	940e      	str	r4, [sp, #56]	; 0x38
 801e1fa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e1fc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801e200:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e204:	43d2      	mvns	r2, r2
 801e206:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e20a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e20c:	b2d2      	uxtb	r2, r2
 801e20e:	fb0e f707 	mul.w	r7, lr, r7
 801e212:	fb01 770c 	mla	r7, r1, ip, r7
 801e216:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e21a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e21c:	fb00 770c 	mla	r7, r0, ip, r7
 801e220:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e224:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e226:	fb08 770c 	mla	r7, r8, ip, r7
 801e22a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801e22e:	fb0e fe0c 	mul.w	lr, lr, ip
 801e232:	0a3f      	lsrs	r7, r7, #8
 801e234:	fb01 e303 	mla	r3, r1, r3, lr
 801e238:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e23a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e23e:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801e242:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e244:	fb00 330a 	mla	r3, r0, sl, r3
 801e248:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801e24c:	fb08 3c0c 	mla	ip, r8, ip, r3
 801e250:	f8b9 3000 	ldrh.w	r3, [r9]
 801e254:	1218      	asrs	r0, r3, #8
 801e256:	10d9      	asrs	r1, r3, #3
 801e258:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e25c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e260:	00db      	lsls	r3, r3, #3
 801e262:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e266:	4350      	muls	r0, r2
 801e268:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e26c:	b2db      	uxtb	r3, r3
 801e26e:	4351      	muls	r1, r2
 801e270:	ea47 070c 	orr.w	r7, r7, ip
 801e274:	4353      	muls	r3, r2
 801e276:	1c42      	adds	r2, r0, #1
 801e278:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801e27c:	0c3a      	lsrs	r2, r7, #16
 801e27e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801e282:	4a18      	ldr	r2, [pc, #96]	; (801e2e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 801e284:	b2c0      	uxtb	r0, r0
 801e286:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 801e28a:	1c4a      	adds	r2, r1, #1
 801e28c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e290:	0a3a      	lsrs	r2, r7, #8
 801e292:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e296:	00c9      	lsls	r1, r1, #3
 801e298:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e29c:	4301      	orrs	r1, r0
 801e29e:	1c58      	adds	r0, r3, #1
 801e2a0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801e2a4:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801e2a8:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 801e2ac:	4308      	orrs	r0, r1
 801e2ae:	f8a9 0000 	strh.w	r0, [r9]
 801e2b2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e2b4:	f109 0902 	add.w	r9, r9, #2
 801e2b8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801e2ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e2be:	441a      	add	r2, r3
 801e2c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e2c2:	9225      	str	r2, [sp, #148]	; 0x94
 801e2c4:	441d      	add	r5, r3
 801e2c6:	e64c      	b.n	801df62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801e2c8:	2800      	cmp	r0, #0
 801e2ca:	f43f aeed 	beq.w	801e0a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801e2ce:	5c79      	ldrb	r1, [r7, r1]
 801e2d0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e2d4:	9109      	str	r1, [sp, #36]	; 0x24
 801e2d6:	0e09      	lsrs	r1, r1, #24
 801e2d8:	9111      	str	r1, [sp, #68]	; 0x44
 801e2da:	e6e5      	b.n	801e0a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801e2dc:	b01b      	add	sp, #108	; 0x6c
 801e2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2e2:	bf00      	nop
 801e2e4:	fffff800 	.word	0xfffff800

0801e2e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 801e2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2ec:	b085      	sub	sp, #20
 801e2ee:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 801e2f2:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801e2f6:	2800      	cmp	r0, #0
 801e2f8:	9103      	str	r1, [sp, #12]
 801e2fa:	fb00 7406 	mla	r4, r0, r6, r7
 801e2fe:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 801e302:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 801e306:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 801e30a:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 801e30e:	eb03 0904 	add.w	r9, r3, r4
 801e312:	9501      	str	r5, [sp, #4]
 801e314:	f2c0 8150 	blt.w	801e5b8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 801e318:	4583      	cmp	fp, r0
 801e31a:	f340 814d 	ble.w	801e5b8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 801e31e:	2f00      	cmp	r7, #0
 801e320:	f2c0 8146 	blt.w	801e5b0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 801e324:	42be      	cmp	r6, r7
 801e326:	f340 8143 	ble.w	801e5b0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 801e32a:	f813 c004 	ldrb.w	ip, [r3, r4]
 801e32e:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 801e332:	f64f 041f 	movw	r4, #63519	; 0xf81f
 801e336:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801e33a:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 801e33e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e342:	4355      	muls	r5, r2
 801e344:	fb0c f203 	mul.w	r2, ip, r3
 801e348:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 801e34c:	f605 0501 	addw	r5, r5, #2049	; 0x801
 801e350:	441d      	add	r5, r3
 801e352:	f102 0320 	add.w	r3, r2, #32
 801e356:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e35a:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 801e35e:	0a1b      	lsrs	r3, r3, #8
 801e360:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e364:	431c      	orrs	r4, r3
 801e366:	1c7b      	adds	r3, r7, #1
 801e368:	f100 812b 	bmi.w	801e5c2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 801e36c:	429e      	cmp	r6, r3
 801e36e:	f340 8128 	ble.w	801e5c2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 801e372:	2900      	cmp	r1, #0
 801e374:	f000 8128 	beq.w	801e5c8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 801e378:	9a01      	ldr	r2, [sp, #4]
 801e37a:	f899 3001 	ldrb.w	r3, [r9, #1]
 801e37e:	8855      	ldrh	r5, [r2, #2]
 801e380:	ea4f 08e3 	mov.w	r8, r3, asr #3
 801e384:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 801e388:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e38c:	fb08 f802 	mul.w	r8, r8, r2
 801e390:	f64f 021f 	movw	r2, #63519	; 0xf81f
 801e394:	435d      	muls	r5, r3
 801e396:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 801e39a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801e39e:	44d0      	add	r8, sl
 801e3a0:	f105 0a20 	add.w	sl, r5, #32
 801e3a4:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801e3a8:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801e3ac:	0a2d      	lsrs	r5, r5, #8
 801e3ae:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e3b2:	432a      	orrs	r2, r5
 801e3b4:	3001      	adds	r0, #1
 801e3b6:	f100 810d 	bmi.w	801e5d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 801e3ba:	4583      	cmp	fp, r0
 801e3bc:	f340 810a 	ble.w	801e5d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 801e3c0:	f1be 0f00 	cmp.w	lr, #0
 801e3c4:	f000 810b 	beq.w	801e5de <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 801e3c8:	2f00      	cmp	r7, #0
 801e3ca:	f2c0 8100 	blt.w	801e5ce <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 801e3ce:	42be      	cmp	r6, r7
 801e3d0:	f340 80fd 	ble.w	801e5ce <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 801e3d4:	9801      	ldr	r0, [sp, #4]
 801e3d6:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801e3da:	f819 5006 	ldrb.w	r5, [r9, r6]
 801e3de:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 801e3e2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801e3e6:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 801e3ea:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801e3ee:	fb0a fa00 	mul.w	sl, sl, r0
 801e3f2:	fb05 f808 	mul.w	r8, r5, r8
 801e3f6:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 801e3fa:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801e3fe:	4482      	add	sl, r0
 801e400:	f108 0020 	add.w	r0, r8, #32
 801e404:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801e408:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 801e40c:	0a00      	lsrs	r0, r0, #8
 801e40e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e412:	ea4b 0b00 	orr.w	fp, fp, r0
 801e416:	3701      	adds	r7, #1
 801e418:	f100 80e6 	bmi.w	801e5e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 801e41c:	42be      	cmp	r6, r7
 801e41e:	f340 80e3 	ble.w	801e5e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 801e422:	2900      	cmp	r1, #0
 801e424:	f000 80e3 	beq.w	801e5ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 801e428:	3601      	adds	r6, #1
 801e42a:	9801      	ldr	r0, [sp, #4]
 801e42c:	f819 7006 	ldrb.w	r7, [r9, r6]
 801e430:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 801e434:	ea4f 09e7 	mov.w	r9, r7, asr #3
 801e438:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 801e43c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e440:	fb09 f906 	mul.w	r9, r9, r6
 801e444:	fb07 f800 	mul.w	r8, r7, r0
 801e448:	f64f 001f 	movw	r0, #63519	; 0xf81f
 801e44c:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 801e450:	f609 0901 	addw	r9, r9, #2049	; 0x801
 801e454:	44d1      	add	r9, sl
 801e456:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 801e45a:	f108 0020 	add.w	r0, r8, #32
 801e45e:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801e462:	0a00      	lsrs	r0, r0, #8
 801e464:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e468:	4330      	orrs	r0, r6
 801e46a:	b28e      	uxth	r6, r1
 801e46c:	fa1f f98e 	uxth.w	r9, lr
 801e470:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 801e474:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801e478:	fb06 f809 	mul.w	r8, r6, r9
 801e47c:	0136      	lsls	r6, r6, #4
 801e47e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e482:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801e486:	9601      	str	r6, [sp, #4]
 801e488:	ea4a 0404 	orr.w	r4, sl, r4
 801e48c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801e490:	fa1f f689 	uxth.w	r6, r9
 801e494:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e498:	fb11 f90e 	smulbb	r9, r1, lr
 801e49c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e4a0:	9602      	str	r6, [sp, #8]
 801e4a2:	4626      	mov	r6, r4
 801e4a4:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 801e4a8:	f1ce 0410 	rsb	r4, lr, #16
 801e4ac:	ea4a 0202 	orr.w	r2, sl, r2
 801e4b0:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801e4b4:	1a64      	subs	r4, r4, r1
 801e4b6:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 801e4ba:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e4be:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801e4c2:	434a      	muls	r2, r1
 801e4c4:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 801e4c8:	ea4a 0000 	orr.w	r0, sl, r0
 801e4cc:	9903      	ldr	r1, [sp, #12]
 801e4ce:	fb04 2406 	mla	r4, r4, r6, r2
 801e4d2:	9e02      	ldr	r6, [sp, #8]
 801e4d4:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801e4d8:	fb09 4200 	mla	r2, r9, r0, r4
 801e4dc:	ea4f 440b 	mov.w	r4, fp, lsl #16
 801e4e0:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801e4e4:	8808      	ldrh	r0, [r1, #0]
 801e4e6:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801e4ea:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 801e4ee:	ea44 0b0b 	orr.w	fp, r4, fp
 801e4f2:	9c01      	ldr	r4, [sp, #4]
 801e4f4:	b289      	uxth	r1, r1
 801e4f6:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 801e4fa:	fb0e 2e0b 	mla	lr, lr, fp, r2
 801e4fe:	1ba4      	subs	r4, r4, r6
 801e500:	9e01      	ldr	r6, [sp, #4]
 801e502:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801e506:	eba6 0608 	sub.w	r6, r6, r8
 801e50a:	b2a4      	uxth	r4, r4
 801e50c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801e510:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e514:	b2b6      	uxth	r6, r6
 801e516:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801e51a:	4373      	muls	r3, r6
 801e51c:	ea42 0e0e 	orr.w	lr, r2, lr
 801e520:	fb0c 3304 	mla	r3, ip, r4, r3
 801e524:	9c02      	ldr	r4, [sp, #8]
 801e526:	fa1f f28e 	uxth.w	r2, lr
 801e52a:	fb04 3505 	mla	r5, r4, r5, r3
 801e52e:	10d4      	asrs	r4, r2, #3
 801e530:	fb08 5707 	mla	r7, r8, r7, r5
 801e534:	1215      	asrs	r5, r2, #8
 801e536:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801e53a:	00d2      	lsls	r2, r2, #3
 801e53c:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801e540:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801e544:	b2d2      	uxtb	r2, r2
 801e546:	434f      	muls	r7, r1
 801e548:	1c7b      	adds	r3, r7, #1
 801e54a:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801e54e:	1203      	asrs	r3, r0, #8
 801e550:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 801e554:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801e558:	b2ff      	uxtb	r7, r7
 801e55a:	fb13 f307 	smulbb	r3, r3, r7
 801e55e:	fb05 3501 	mla	r5, r5, r1, r3
 801e562:	10c3      	asrs	r3, r0, #3
 801e564:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801e568:	b2ad      	uxth	r5, r5
 801e56a:	fb13 f307 	smulbb	r3, r3, r7
 801e56e:	fb04 3401 	mla	r4, r4, r1, r3
 801e572:	00c3      	lsls	r3, r0, #3
 801e574:	b2db      	uxtb	r3, r3
 801e576:	b2a4      	uxth	r4, r4
 801e578:	fb13 f307 	smulbb	r3, r3, r7
 801e57c:	fb02 3101 	mla	r1, r2, r1, r3
 801e580:	1c6b      	adds	r3, r5, #1
 801e582:	1c62      	adds	r2, r4, #1
 801e584:	b289      	uxth	r1, r1
 801e586:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801e58a:	1c4b      	adds	r3, r1, #1
 801e58c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 801e590:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801e594:	9a03      	ldr	r2, [sp, #12]
 801e596:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801e59a:	0964      	lsrs	r4, r4, #5
 801e59c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e5a0:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801e5a4:	432b      	orrs	r3, r5
 801e5a6:	4323      	orrs	r3, r4
 801e5a8:	8013      	strh	r3, [r2, #0]
 801e5aa:	b005      	add	sp, #20
 801e5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e5b0:	f04f 0c00 	mov.w	ip, #0
 801e5b4:	4664      	mov	r4, ip
 801e5b6:	e6d6      	b.n	801e366 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 801e5b8:	2300      	movs	r3, #0
 801e5ba:	469c      	mov	ip, r3
 801e5bc:	461a      	mov	r2, r3
 801e5be:	461c      	mov	r4, r3
 801e5c0:	e6f8      	b.n	801e3b4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801e5c2:	2300      	movs	r3, #0
 801e5c4:	461a      	mov	r2, r3
 801e5c6:	e6f5      	b.n	801e3b4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801e5c8:	460b      	mov	r3, r1
 801e5ca:	460a      	mov	r2, r1
 801e5cc:	e6f2      	b.n	801e3b4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801e5ce:	2500      	movs	r5, #0
 801e5d0:	46ab      	mov	fp, r5
 801e5d2:	e720      	b.n	801e416 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 801e5d4:	2700      	movs	r7, #0
 801e5d6:	463d      	mov	r5, r7
 801e5d8:	4638      	mov	r0, r7
 801e5da:	46bb      	mov	fp, r7
 801e5dc:	e745      	b.n	801e46a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801e5de:	4677      	mov	r7, lr
 801e5e0:	4675      	mov	r5, lr
 801e5e2:	4670      	mov	r0, lr
 801e5e4:	46f3      	mov	fp, lr
 801e5e6:	e740      	b.n	801e46a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801e5e8:	2700      	movs	r7, #0
 801e5ea:	4638      	mov	r0, r7
 801e5ec:	e73d      	b.n	801e46a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801e5ee:	460f      	mov	r7, r1
 801e5f0:	4608      	mov	r0, r1
 801e5f2:	e73a      	b.n	801e46a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

0801e5f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5f8:	b097      	sub	sp, #92	; 0x5c
 801e5fa:	9214      	str	r2, [sp, #80]	; 0x50
 801e5fc:	9308      	str	r3, [sp, #32]
 801e5fe:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801e600:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801e604:	9015      	str	r0, [sp, #84]	; 0x54
 801e606:	9312      	str	r3, [sp, #72]	; 0x48
 801e608:	6850      	ldr	r0, [r2, #4]
 801e60a:	9111      	str	r1, [sp, #68]	; 0x44
 801e60c:	6812      	ldr	r2, [r2, #0]
 801e60e:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801e612:	fb00 1303 	mla	r3, r0, r3, r1
 801e616:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e61a:	9309      	str	r3, [sp, #36]	; 0x24
 801e61c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e61e:	681b      	ldr	r3, [r3, #0]
 801e620:	930b      	str	r3, [sp, #44]	; 0x2c
 801e622:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e624:	685b      	ldr	r3, [r3, #4]
 801e626:	930c      	str	r3, [sp, #48]	; 0x30
 801e628:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801e62c:	930a      	str	r3, [sp, #40]	; 0x28
 801e62e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e630:	2b00      	cmp	r3, #0
 801e632:	dc03      	bgt.n	801e63c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e634:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e636:	2b00      	cmp	r3, #0
 801e638:	f340 83cd 	ble.w	801edd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 801e63c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e63e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e642:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e646:	1e48      	subs	r0, r1, #1
 801e648:	1e55      	subs	r5, r2, #1
 801e64a:	9b08      	ldr	r3, [sp, #32]
 801e64c:	2b00      	cmp	r3, #0
 801e64e:	f340 81a5 	ble.w	801e99c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 801e652:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801e654:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e656:	1436      	asrs	r6, r6, #16
 801e658:	ea4f 4323 	mov.w	r3, r3, asr #16
 801e65c:	d406      	bmi.n	801e66c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e65e:	4286      	cmp	r6, r0
 801e660:	da04      	bge.n	801e66c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e662:	2b00      	cmp	r3, #0
 801e664:	db02      	blt.n	801e66c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e666:	42ab      	cmp	r3, r5
 801e668:	f2c0 8199 	blt.w	801e99e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801e66c:	3601      	adds	r6, #1
 801e66e:	f100 8186 	bmi.w	801e97e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801e672:	42b1      	cmp	r1, r6
 801e674:	f2c0 8183 	blt.w	801e97e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801e678:	3301      	adds	r3, #1
 801e67a:	f100 8180 	bmi.w	801e97e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801e67e:	429a      	cmp	r2, r3
 801e680:	f2c0 817d 	blt.w	801e97e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801e684:	9b08      	ldr	r3, [sp, #32]
 801e686:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801e68a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801e68c:	9313      	str	r3, [sp, #76]	; 0x4c
 801e68e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e690:	2b00      	cmp	r3, #0
 801e692:	f340 81a6 	ble.w	801e9e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801e696:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e698:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801e69a:	1418      	asrs	r0, r3, #16
 801e69c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e69e:	142d      	asrs	r5, r5, #16
 801e6a0:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801e6a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e6a6:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801e6aa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e6ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801e6b0:	f100 81fa 	bmi.w	801eaa8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801e6b4:	f102 3eff 	add.w	lr, r2, #4294967295
 801e6b8:	4575      	cmp	r5, lr
 801e6ba:	f280 81f5 	bge.w	801eaa8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801e6be:	2800      	cmp	r0, #0
 801e6c0:	f2c0 81f2 	blt.w	801eaa8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801e6c4:	f103 3eff 	add.w	lr, r3, #4294967295
 801e6c8:	4570      	cmp	r0, lr
 801e6ca:	f280 81ed 	bge.w	801eaa8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801e6ce:	b212      	sxth	r2, r2
 801e6d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e6d2:	fa1f fe81 	uxth.w	lr, r1
 801e6d6:	fb00 5002 	mla	r0, r0, r2, r5
 801e6da:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801e6de:	eb03 0a00 	add.w	sl, r3, r0
 801e6e2:	f813 9000 	ldrb.w	r9, [r3, r0]
 801e6e6:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 801e6ea:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801e6ee:	b29b      	uxth	r3, r3
 801e6f0:	f1bc 0f00 	cmp.w	ip, #0
 801e6f4:	f000 81bb 	beq.w	801ea6e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 801e6f8:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801e6fc:	eb0a 0b02 	add.w	fp, sl, r2
 801e700:	fa1f fa8c 	uxth.w	sl, ip
 801e704:	940d      	str	r4, [sp, #52]	; 0x34
 801e706:	fb0a fe0e 	mul.w	lr, sl, lr
 801e70a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801e70e:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801e712:	eba5 050e 	sub.w	r5, r5, lr
 801e716:	940e      	str	r4, [sp, #56]	; 0x38
 801e718:	fa1f fa8a 	uxth.w	sl, sl
 801e71c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e71e:	b2ad      	uxth	r5, r5
 801e720:	eba3 030a 	sub.w	r3, r3, sl
 801e724:	fb08 f505 	mul.w	r5, r8, r5
 801e728:	b29b      	uxth	r3, r3
 801e72a:	fb09 5303 	mla	r3, r9, r3, r5
 801e72e:	fb0a 3304 	mla	r3, sl, r4, r3
 801e732:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e734:	fb0e 3304 	mla	r3, lr, r4, r3
 801e738:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e73c:	2b00      	cmp	r3, #0
 801e73e:	f000 8111 	beq.w	801e964 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801e742:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e744:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e748:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801e74c:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801e750:	f000 8192 	beq.w	801ea78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 801e754:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801e758:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801e75c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e760:	fb0a fe0e 	mul.w	lr, sl, lr
 801e764:	fb09 f000 	mul.w	r0, r9, r0
 801e768:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801e76c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801e770:	f100 0b20 	add.w	fp, r0, #32
 801e774:	44ce      	add	lr, r9
 801e776:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801e77a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801e77e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e782:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e786:	ea4e 0909 	orr.w	r9, lr, r9
 801e78a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e78e:	8868      	ldrh	r0, [r5, #2]
 801e790:	d019      	beq.n	801e7c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801e792:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801e796:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801e79a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e79e:	fb0a fe0e 	mul.w	lr, sl, lr
 801e7a2:	fb08 f800 	mul.w	r8, r8, r0
 801e7a6:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801e7aa:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801e7ae:	f108 0b20 	add.w	fp, r8, #32
 801e7b2:	4486      	add	lr, r0
 801e7b4:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801e7b8:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801e7bc:	0a00      	lsrs	r0, r0, #8
 801e7be:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e7c2:	ea4e 0000 	orr.w	r0, lr, r0
 801e7c6:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801e7ca:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801e7ce:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801e7d2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801e7d6:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801e7da:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e7de:	ea4e 0909 	orr.w	r9, lr, r9
 801e7e2:	ea4a 0000 	orr.w	r0, sl, r0
 801e7e6:	f1bc 0f00 	cmp.w	ip, #0
 801e7ea:	f000 8147 	beq.w	801ea7c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801e7ee:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801e7f2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e7f4:	3a01      	subs	r2, #1
 801e7f6:	2cff      	cmp	r4, #255	; 0xff
 801e7f8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801e7fc:	f102 0202 	add.w	r2, r2, #2
 801e800:	eb05 0e02 	add.w	lr, r5, r2
 801e804:	5aaa      	ldrh	r2, [r5, r2]
 801e806:	d018      	beq.n	801e83a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801e808:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 801e80c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e810:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801e814:	fb04 fa02 	mul.w	sl, r4, r2
 801e818:	fb08 f805 	mul.w	r8, r8, r5
 801e81c:	f10a 0520 	add.w	r5, sl, #32
 801e820:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801e824:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801e828:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 801e82c:	4442      	add	r2, r8
 801e82e:	0a2d      	lsrs	r5, r5, #8
 801e830:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801e834:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e838:	432a      	orrs	r2, r5
 801e83a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e83c:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801e840:	2cff      	cmp	r4, #255	; 0xff
 801e842:	d01a      	beq.n	801e87a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 801e844:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 801e848:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e84c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801e850:	fb04 fa05 	mul.w	sl, r4, r5
 801e854:	fb08 f80e 	mul.w	r8, r8, lr
 801e858:	f10a 0e20 	add.w	lr, sl, #32
 801e85c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 801e860:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801e864:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 801e868:	4445      	add	r5, r8
 801e86a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e86e:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801e872:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801e876:	ea45 050e 	orr.w	r5, r5, lr
 801e87a:	fb1c fe01 	smulbb	lr, ip, r1
 801e87e:	f1cc 0810 	rsb	r8, ip, #16
 801e882:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801e886:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e88a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801e88e:	eba8 0801 	sub.w	r8, r8, r1
 801e892:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801e896:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e89a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801e89e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801e8a2:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801e8a6:	ea4a 0202 	orr.w	r2, sl, r2
 801e8aa:	4341      	muls	r1, r0
 801e8ac:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801e8b0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801e8b4:	fb09 1108 	mla	r1, r9, r8, r1
 801e8b8:	ea4b 0505 	orr.w	r5, fp, r5
 801e8bc:	fb0c 1102 	mla	r1, ip, r2, r1
 801e8c0:	fb0e 1e05 	mla	lr, lr, r5, r1
 801e8c4:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801e8c8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801e8cc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e8d0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801e8d4:	ea42 0e0e 	orr.w	lr, r2, lr
 801e8d8:	fa1f f28e 	uxth.w	r2, lr
 801e8dc:	2bff      	cmp	r3, #255	; 0xff
 801e8de:	d103      	bne.n	801e8e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801e8e0:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e8e2:	29ff      	cmp	r1, #255	; 0xff
 801e8e4:	f000 80de 	beq.w	801eaa4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 801e8e8:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e8ea:	1215      	asrs	r5, r2, #8
 801e8ec:	8838      	ldrh	r0, [r7, #0]
 801e8ee:	434b      	muls	r3, r1
 801e8f0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801e8f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e8f6:	f103 0c01 	add.w	ip, r3, #1
 801e8fa:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 801e8fe:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801e902:	fa5f fc83 	uxtb.w	ip, r3
 801e906:	1203      	asrs	r3, r0, #8
 801e908:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801e90c:	fb13 f30c 	smulbb	r3, r3, ip
 801e910:	fb05 3501 	mla	r5, r5, r1, r3
 801e914:	10c3      	asrs	r3, r0, #3
 801e916:	10d1      	asrs	r1, r2, #3
 801e918:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801e91c:	00d2      	lsls	r2, r2, #3
 801e91e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e922:	b2ad      	uxth	r5, r5
 801e924:	fb13 f30c 	smulbb	r3, r3, ip
 801e928:	b2d2      	uxtb	r2, r2
 801e92a:	fb01 3104 	mla	r1, r1, r4, r3
 801e92e:	00c3      	lsls	r3, r0, #3
 801e930:	b2db      	uxtb	r3, r3
 801e932:	b289      	uxth	r1, r1
 801e934:	fb13 f30c 	smulbb	r3, r3, ip
 801e938:	fb02 3304 	mla	r3, r2, r4, r3
 801e93c:	b29a      	uxth	r2, r3
 801e93e:	1c6b      	adds	r3, r5, #1
 801e940:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801e944:	1c53      	adds	r3, r2, #1
 801e946:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e94a:	1c4a      	adds	r2, r1, #1
 801e94c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801e950:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e954:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e958:	0949      	lsrs	r1, r1, #5
 801e95a:	432b      	orrs	r3, r5
 801e95c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e960:	430b      	orrs	r3, r1
 801e962:	803b      	strh	r3, [r7, #0]
 801e964:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e966:	3702      	adds	r7, #2
 801e968:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801e96a:	4413      	add	r3, r2
 801e96c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801e96e:	9321      	str	r3, [sp, #132]	; 0x84
 801e970:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e972:	441a      	add	r2, r3
 801e974:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e976:	3b01      	subs	r3, #1
 801e978:	9222      	str	r2, [sp, #136]	; 0x88
 801e97a:	9313      	str	r3, [sp, #76]	; 0x4c
 801e97c:	e687      	b.n	801e68e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801e97e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e980:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 801e982:	9c22      	ldr	r4, [sp, #136]	; 0x88
 801e984:	4433      	add	r3, r6
 801e986:	9321      	str	r3, [sp, #132]	; 0x84
 801e988:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e98a:	441c      	add	r4, r3
 801e98c:	9b08      	ldr	r3, [sp, #32]
 801e98e:	3b01      	subs	r3, #1
 801e990:	9422      	str	r4, [sp, #136]	; 0x88
 801e992:	9308      	str	r3, [sp, #32]
 801e994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e996:	3302      	adds	r3, #2
 801e998:	9309      	str	r3, [sp, #36]	; 0x24
 801e99a:	e656      	b.n	801e64a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801e99c:	d028      	beq.n	801e9f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 801e99e:	9b08      	ldr	r3, [sp, #32]
 801e9a0:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801e9a2:	3b01      	subs	r3, #1
 801e9a4:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801e9a6:	fb00 5003 	mla	r0, r0, r3, r5
 801e9aa:	1400      	asrs	r0, r0, #16
 801e9ac:	f53f ae6a 	bmi.w	801e684 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e9b0:	3901      	subs	r1, #1
 801e9b2:	4288      	cmp	r0, r1
 801e9b4:	f6bf ae66 	bge.w	801e684 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e9b8:	9924      	ldr	r1, [sp, #144]	; 0x90
 801e9ba:	9822      	ldr	r0, [sp, #136]	; 0x88
 801e9bc:	fb01 0303 	mla	r3, r1, r3, r0
 801e9c0:	141b      	asrs	r3, r3, #16
 801e9c2:	f53f ae5f 	bmi.w	801e684 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e9c6:	3a01      	subs	r2, #1
 801e9c8:	4293      	cmp	r3, r2
 801e9ca:	f6bf ae5b 	bge.w	801e684 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e9ce:	9b08      	ldr	r3, [sp, #32]
 801e9d0:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801e9d4:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801e9d8:	9313      	str	r3, [sp, #76]	; 0x4c
 801e9da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e9dc:	2b00      	cmp	r3, #0
 801e9de:	f300 8082 	bgt.w	801eae6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 801e9e2:	9b08      	ldr	r3, [sp, #32]
 801e9e4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e9e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e9ea:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801e9ee:	9309      	str	r3, [sp, #36]	; 0x24
 801e9f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e9f2:	2b00      	cmp	r3, #0
 801e9f4:	f340 81ef 	ble.w	801edd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 801e9f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e9fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e9fe:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ea02:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ea06:	eef0 6a62 	vmov.f32	s13, s5
 801ea0a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ea0e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ea12:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ea16:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 801ea1a:	eef0 6a43 	vmov.f32	s13, s6
 801ea1e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ea22:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 801ea26:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ea2a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ea2e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ea32:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ea36:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ea3a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ea3e:	ee12 2a90 	vmov	r2, s5
 801ea42:	eef0 2a47 	vmov.f32	s5, s14
 801ea46:	fb92 f3f3 	sdiv	r3, r2, r3
 801ea4a:	ee13 2a10 	vmov	r2, s6
 801ea4e:	9323      	str	r3, [sp, #140]	; 0x8c
 801ea50:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ea52:	eeb0 3a67 	vmov.f32	s6, s15
 801ea56:	fb92 f3f3 	sdiv	r3, r2, r3
 801ea5a:	9324      	str	r3, [sp, #144]	; 0x90
 801ea5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ea5e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ea60:	3b01      	subs	r3, #1
 801ea62:	9311      	str	r3, [sp, #68]	; 0x44
 801ea64:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ea66:	bf08      	it	eq
 801ea68:	4613      	moveq	r3, r2
 801ea6a:	9308      	str	r3, [sp, #32]
 801ea6c:	e5df      	b.n	801e62e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801ea6e:	fb08 f505 	mul.w	r5, r8, r5
 801ea72:	fb09 5303 	mla	r3, r9, r3, r5
 801ea76:	e65f      	b.n	801e738 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 801ea78:	4681      	mov	r9, r0
 801ea7a:	e686      	b.n	801e78a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801ea7c:	f1c1 0210 	rsb	r2, r1, #16
 801ea80:	4341      	muls	r1, r0
 801ea82:	fb09 1902 	mla	r9, r9, r2, r1
 801ea86:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801ea8a:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801ea8e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801ea92:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ea96:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801ea9a:	ea42 0909 	orr.w	r9, r2, r9
 801ea9e:	fa1f f289 	uxth.w	r2, r9
 801eaa2:	e71b      	b.n	801e8dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 801eaa4:	803a      	strh	r2, [r7, #0]
 801eaa6:	e75d      	b.n	801e964 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801eaa8:	f115 0e01 	adds.w	lr, r5, #1
 801eaac:	f53f af5a 	bmi.w	801e964 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801eab0:	4572      	cmp	r2, lr
 801eab2:	f6ff af57 	blt.w	801e964 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801eab6:	f110 0e01 	adds.w	lr, r0, #1
 801eaba:	f53f af53 	bmi.w	801e964 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801eabe:	4573      	cmp	r3, lr
 801eac0:	f6ff af50 	blt.w	801e964 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801eac4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801eac6:	b21b      	sxth	r3, r3
 801eac8:	b212      	sxth	r2, r2
 801eaca:	9502      	str	r5, [sp, #8]
 801eacc:	9301      	str	r3, [sp, #4]
 801eace:	9200      	str	r2, [sp, #0]
 801ead0:	e9cd 0103 	strd	r0, r1, [sp, #12]
 801ead4:	e9cd c405 	strd	ip, r4, [sp, #20]
 801ead8:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 801eadc:	4639      	mov	r1, r7
 801eade:	9815      	ldr	r0, [sp, #84]	; 0x54
 801eae0:	f7ff fc02 	bl	801e2e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 801eae4:	e73e      	b.n	801e964 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801eae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801eae8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801eaec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801eaee:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801eaf2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801eaf4:	fa1f fc82 	uxth.w	ip, r2
 801eaf8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801eafc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801eafe:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801eb02:	141f      	asrs	r7, r3, #16
 801eb04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801eb06:	141b      	asrs	r3, r3, #16
 801eb08:	fb01 3707 	mla	r7, r1, r7, r3
 801eb0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eb0e:	eb03 0a07 	add.w	sl, r3, r7
 801eb12:	f813 9007 	ldrb.w	r9, [r3, r7]
 801eb16:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801eb1a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801eb1e:	b29b      	uxth	r3, r3
 801eb20:	2d00      	cmp	r5, #0
 801eb22:	f000 813d 	beq.w	801eda0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
 801eb26:	f81a 4001 	ldrb.w	r4, [sl, r1]
 801eb2a:	eb0a 0b01 	add.w	fp, sl, r1
 801eb2e:	fa1f fa85 	uxth.w	sl, r5
 801eb32:	940f      	str	r4, [sp, #60]	; 0x3c
 801eb34:	fb0a fc0c 	mul.w	ip, sl, ip
 801eb38:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801eb3c:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801eb40:	eba0 000c 	sub.w	r0, r0, ip
 801eb44:	9410      	str	r4, [sp, #64]	; 0x40
 801eb46:	fa1f fa8a 	uxth.w	sl, sl
 801eb4a:	b280      	uxth	r0, r0
 801eb4c:	eba3 030a 	sub.w	r3, r3, sl
 801eb50:	fb08 f000 	mul.w	r0, r8, r0
 801eb54:	b29b      	uxth	r3, r3
 801eb56:	fb09 0303 	mla	r3, r9, r3, r0
 801eb5a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801eb5c:	fb0a 3300 	mla	r3, sl, r0, r3
 801eb60:	fb0c 3304 	mla	r3, ip, r4, r3
 801eb64:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801eb68:	2b00      	cmp	r3, #0
 801eb6a:	f000 810b 	beq.w	801ed84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 801eb6e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801eb70:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801eb74:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801eb76:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 801eb7a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801eb7e:	f000 8114 	beq.w	801edaa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 801eb82:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801eb86:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801eb8a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801eb8e:	fb0a fc0c 	mul.w	ip, sl, ip
 801eb92:	fb09 f707 	mul.w	r7, r9, r7
 801eb96:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801eb9a:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801eb9e:	f107 0b20 	add.w	fp, r7, #32
 801eba2:	44cc      	add	ip, r9
 801eba4:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801eba8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801ebac:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ebb0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801ebb4:	ea4c 0909 	orr.w	r9, ip, r9
 801ebb8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801ebbc:	8847      	ldrh	r7, [r0, #2]
 801ebbe:	d019      	beq.n	801ebf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 801ebc0:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801ebc4:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801ebc8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801ebcc:	fb0a fc0c 	mul.w	ip, sl, ip
 801ebd0:	fb08 f807 	mul.w	r8, r8, r7
 801ebd4:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801ebd8:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801ebdc:	f108 0b20 	add.w	fp, r8, #32
 801ebe0:	44bc      	add	ip, r7
 801ebe2:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801ebe6:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801ebea:	0a3f      	lsrs	r7, r7, #8
 801ebec:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801ebf0:	ea4c 0707 	orr.w	r7, ip, r7
 801ebf4:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801ebf8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801ebfc:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801ec00:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801ec04:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801ec08:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ec0c:	ea4c 0909 	orr.w	r9, ip, r9
 801ec10:	ea4a 0707 	orr.w	r7, sl, r7
 801ec14:	2d00      	cmp	r5, #0
 801ec16:	f000 80ca 	beq.w	801edae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
 801ec1a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801ec1e:	3901      	subs	r1, #1
 801ec20:	0049      	lsls	r1, r1, #1
 801ec22:	3102      	adds	r1, #2
 801ec24:	eb00 0c01 	add.w	ip, r0, r1
 801ec28:	5a41      	ldrh	r1, [r0, r1]
 801ec2a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801ec2c:	28ff      	cmp	r0, #255	; 0xff
 801ec2e:	d019      	beq.n	801ec64 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 801ec30:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 801ec34:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ec36:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ec3a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801ec3e:	fb04 fa01 	mul.w	sl, r4, r1
 801ec42:	fb08 f800 	mul.w	r8, r8, r0
 801ec46:	f10a 0020 	add.w	r0, sl, #32
 801ec4a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 801ec4e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801ec52:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801ec56:	4441      	add	r1, r8
 801ec58:	0a00      	lsrs	r0, r0, #8
 801ec5a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801ec5e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ec62:	4301      	orrs	r1, r0
 801ec64:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ec66:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801ec6a:	2cff      	cmp	r4, #255	; 0xff
 801ec6c:	d01a      	beq.n	801eca4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 801ec6e:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 801ec72:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ec76:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801ec7a:	fb04 fa00 	mul.w	sl, r4, r0
 801ec7e:	fb08 f80c 	mul.w	r8, r8, ip
 801ec82:	f10a 0c20 	add.w	ip, sl, #32
 801ec86:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 801ec8a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801ec8e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801ec92:	4440      	add	r0, r8
 801ec94:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ec98:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801ec9c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801eca0:	ea40 000c 	orr.w	r0, r0, ip
 801eca4:	fb15 fc02 	smulbb	ip, r5, r2
 801eca8:	f1c5 0810 	rsb	r8, r5, #16
 801ecac:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801ecb0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801ecb4:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801ecb8:	eba8 0802 	sub.w	r8, r8, r2
 801ecbc:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801ecc0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ecc4:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801ecc8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801eccc:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 801ecd0:	ea4a 0101 	orr.w	r1, sl, r1
 801ecd4:	437a      	muls	r2, r7
 801ecd6:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 801ecda:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801ecde:	fb09 2208 	mla	r2, r9, r8, r2
 801ece2:	ea4b 0000 	orr.w	r0, fp, r0
 801ece6:	fb05 2201 	mla	r2, r5, r1, r2
 801ecea:	fb0c 2200 	mla	r2, ip, r0, r2
 801ecee:	0d57      	lsrs	r7, r2, #21
 801ecf0:	0952      	lsrs	r2, r2, #5
 801ecf2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801ecf6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ecfa:	433a      	orrs	r2, r7
 801ecfc:	2bff      	cmp	r3, #255	; 0xff
 801ecfe:	b292      	uxth	r2, r2
 801ed00:	d102      	bne.n	801ed08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 801ed02:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ed04:	29ff      	cmp	r1, #255	; 0xff
 801ed06:	d063      	beq.n	801edd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
 801ed08:	980a      	ldr	r0, [sp, #40]	; 0x28
 801ed0a:	1215      	asrs	r5, r2, #8
 801ed0c:	f8be 1000 	ldrh.w	r1, [lr]
 801ed10:	4343      	muls	r3, r0
 801ed12:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ed14:	10cf      	asrs	r7, r1, #3
 801ed16:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801ed1a:	1c58      	adds	r0, r3, #1
 801ed1c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ed20:	eb00 2323 	add.w	r3, r0, r3, asr #8
 801ed24:	1208      	asrs	r0, r1, #8
 801ed26:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801ed2a:	00c9      	lsls	r1, r1, #3
 801ed2c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801ed30:	b2db      	uxtb	r3, r3
 801ed32:	b2c9      	uxtb	r1, r1
 801ed34:	fb10 f003 	smulbb	r0, r0, r3
 801ed38:	fb11 f103 	smulbb	r1, r1, r3
 801ed3c:	fb05 0504 	mla	r5, r5, r4, r0
 801ed40:	10d0      	asrs	r0, r2, #3
 801ed42:	fb17 f703 	smulbb	r7, r7, r3
 801ed46:	00d2      	lsls	r2, r2, #3
 801ed48:	b2ad      	uxth	r5, r5
 801ed4a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801ed4e:	b2d2      	uxtb	r2, r2
 801ed50:	fb00 7004 	mla	r0, r0, r4, r7
 801ed54:	1c6b      	adds	r3, r5, #1
 801ed56:	fb02 1204 	mla	r2, r2, r4, r1
 801ed5a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801ed5e:	b292      	uxth	r2, r2
 801ed60:	b280      	uxth	r0, r0
 801ed62:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801ed66:	1c57      	adds	r7, r2, #1
 801ed68:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801ed6c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801ed70:	433d      	orrs	r5, r7
 801ed72:	1c47      	adds	r7, r0, #1
 801ed74:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801ed78:	097f      	lsrs	r7, r7, #5
 801ed7a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801ed7e:	433d      	orrs	r5, r7
 801ed80:	f8ae 5000 	strh.w	r5, [lr]
 801ed84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ed86:	f10e 0e02 	add.w	lr, lr, #2
 801ed8a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801ed8c:	4413      	add	r3, r2
 801ed8e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801ed90:	9321      	str	r3, [sp, #132]	; 0x84
 801ed92:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ed94:	441a      	add	r2, r3
 801ed96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ed98:	3b01      	subs	r3, #1
 801ed9a:	9222      	str	r2, [sp, #136]	; 0x88
 801ed9c:	9313      	str	r3, [sp, #76]	; 0x4c
 801ed9e:	e61c      	b.n	801e9da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 801eda0:	fb08 f000 	mul.w	r0, r8, r0
 801eda4:	fb09 0303 	mla	r3, r9, r3, r0
 801eda8:	e6dc      	b.n	801eb64 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 801edaa:	46b9      	mov	r9, r7
 801edac:	e704      	b.n	801ebb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 801edae:	f1c2 0110 	rsb	r1, r2, #16
 801edb2:	437a      	muls	r2, r7
 801edb4:	fb09 2901 	mla	r9, r9, r1, r2
 801edb8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801edbc:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801edc0:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801edc4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801edc8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801edcc:	4302      	orrs	r2, r0
 801edce:	e795      	b.n	801ecfc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 801edd0:	f8ae 2000 	strh.w	r2, [lr]
 801edd4:	e7d6      	b.n	801ed84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 801edd6:	b017      	add	sp, #92	; 0x5c
 801edd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eddc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801eddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ede0:	b085      	sub	sp, #20
 801ede2:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 801ede6:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801edea:	2800      	cmp	r0, #0
 801edec:	9103      	str	r1, [sp, #12]
 801edee:	fb00 7406 	mla	r4, r0, r6, r7
 801edf2:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 801edf6:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 801edfa:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 801edfe:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 801ee02:	eb02 0904 	add.w	r9, r2, r4
 801ee06:	9501      	str	r5, [sp, #4]
 801ee08:	f2c0 8141 	blt.w	801f08e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 801ee0c:	4583      	cmp	fp, r0
 801ee0e:	f340 813e 	ble.w	801f08e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 801ee12:	2f00      	cmp	r7, #0
 801ee14:	f2c0 8137 	blt.w	801f086 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 801ee18:	42be      	cmp	r6, r7
 801ee1a:	f340 8134 	ble.w	801f086 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 801ee1e:	f812 c004 	ldrb.w	ip, [r2, r4]
 801ee22:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 801ee26:	f64f 041f 	movw	r4, #63519	; 0xf81f
 801ee2a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801ee2e:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 801ee32:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ee36:	4355      	muls	r5, r2
 801ee38:	fb0c f203 	mul.w	r2, ip, r3
 801ee3c:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 801ee40:	f605 0501 	addw	r5, r5, #2049	; 0x801
 801ee44:	441d      	add	r5, r3
 801ee46:	f102 0320 	add.w	r3, r2, #32
 801ee4a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ee4e:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 801ee52:	0a1b      	lsrs	r3, r3, #8
 801ee54:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ee58:	431c      	orrs	r4, r3
 801ee5a:	1c7b      	adds	r3, r7, #1
 801ee5c:	f100 811c 	bmi.w	801f098 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 801ee60:	429e      	cmp	r6, r3
 801ee62:	f340 8119 	ble.w	801f098 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 801ee66:	2900      	cmp	r1, #0
 801ee68:	f000 8119 	beq.w	801f09e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 801ee6c:	9a01      	ldr	r2, [sp, #4]
 801ee6e:	f899 3001 	ldrb.w	r3, [r9, #1]
 801ee72:	8855      	ldrh	r5, [r2, #2]
 801ee74:	ea4f 08e3 	mov.w	r8, r3, asr #3
 801ee78:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 801ee7c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ee80:	fb08 f802 	mul.w	r8, r8, r2
 801ee84:	f64f 021f 	movw	r2, #63519	; 0xf81f
 801ee88:	435d      	muls	r5, r3
 801ee8a:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 801ee8e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801ee92:	44d0      	add	r8, sl
 801ee94:	f105 0a20 	add.w	sl, r5, #32
 801ee98:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801ee9c:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801eea0:	0a2d      	lsrs	r5, r5, #8
 801eea2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801eea6:	432a      	orrs	r2, r5
 801eea8:	3001      	adds	r0, #1
 801eeaa:	f100 80fe 	bmi.w	801f0aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 801eeae:	4583      	cmp	fp, r0
 801eeb0:	f340 80fb 	ble.w	801f0aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 801eeb4:	f1be 0f00 	cmp.w	lr, #0
 801eeb8:	f000 80fc 	beq.w	801f0b4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 801eebc:	2f00      	cmp	r7, #0
 801eebe:	f2c0 80f1 	blt.w	801f0a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 801eec2:	42be      	cmp	r6, r7
 801eec4:	f340 80ee 	ble.w	801f0a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 801eec8:	9801      	ldr	r0, [sp, #4]
 801eeca:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801eece:	f819 5006 	ldrb.w	r5, [r9, r6]
 801eed2:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 801eed6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801eeda:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 801eede:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801eee2:	fb0a fa00 	mul.w	sl, sl, r0
 801eee6:	fb05 f808 	mul.w	r8, r5, r8
 801eeea:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 801eeee:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801eef2:	4482      	add	sl, r0
 801eef4:	f108 0020 	add.w	r0, r8, #32
 801eef8:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801eefc:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 801ef00:	0a00      	lsrs	r0, r0, #8
 801ef02:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ef06:	ea4b 0b00 	orr.w	fp, fp, r0
 801ef0a:	3701      	adds	r7, #1
 801ef0c:	f100 80d7 	bmi.w	801f0be <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 801ef10:	42be      	cmp	r6, r7
 801ef12:	f340 80d4 	ble.w	801f0be <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 801ef16:	2900      	cmp	r1, #0
 801ef18:	f000 80d4 	beq.w	801f0c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 801ef1c:	3601      	adds	r6, #1
 801ef1e:	9801      	ldr	r0, [sp, #4]
 801ef20:	f819 7006 	ldrb.w	r7, [r9, r6]
 801ef24:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 801ef28:	ea4f 09e7 	mov.w	r9, r7, asr #3
 801ef2c:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 801ef30:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ef34:	fb09 f906 	mul.w	r9, r9, r6
 801ef38:	fb07 f800 	mul.w	r8, r7, r0
 801ef3c:	f64f 001f 	movw	r0, #63519	; 0xf81f
 801ef40:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 801ef44:	f609 0901 	addw	r9, r9, #2049	; 0x801
 801ef48:	44d1      	add	r9, sl
 801ef4a:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 801ef4e:	f108 0020 	add.w	r0, r8, #32
 801ef52:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801ef56:	0a00      	lsrs	r0, r0, #8
 801ef58:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ef5c:	4330      	orrs	r0, r6
 801ef5e:	b28e      	uxth	r6, r1
 801ef60:	fa1f f98e 	uxth.w	r9, lr
 801ef64:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 801ef68:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801ef6c:	fb06 f809 	mul.w	r8, r6, r9
 801ef70:	0136      	lsls	r6, r6, #4
 801ef72:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ef76:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801ef7a:	9601      	str	r6, [sp, #4]
 801ef7c:	ea4a 0404 	orr.w	r4, sl, r4
 801ef80:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801ef84:	fa1f f689 	uxth.w	r6, r9
 801ef88:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ef8c:	fb11 f90e 	smulbb	r9, r1, lr
 801ef90:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ef94:	9602      	str	r6, [sp, #8]
 801ef96:	4626      	mov	r6, r4
 801ef98:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 801ef9c:	f1ce 0410 	rsb	r4, lr, #16
 801efa0:	ea4a 0202 	orr.w	r2, sl, r2
 801efa4:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801efa8:	1a64      	subs	r4, r4, r1
 801efaa:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 801efae:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801efb2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801efb6:	434a      	muls	r2, r1
 801efb8:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 801efbc:	ea4a 0000 	orr.w	r0, sl, r0
 801efc0:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801efc4:	fb04 2406 	mla	r4, r4, r6, r2
 801efc8:	9903      	ldr	r1, [sp, #12]
 801efca:	fb09 4200 	mla	r2, r9, r0, r4
 801efce:	ea4f 440b 	mov.w	r4, fp, lsl #16
 801efd2:	9801      	ldr	r0, [sp, #4]
 801efd4:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801efd8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801efdc:	8809      	ldrh	r1, [r1, #0]
 801efde:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801efe2:	ea44 0b0b 	orr.w	fp, r4, fp
 801efe6:	9c02      	ldr	r4, [sp, #8]
 801efe8:	1b00      	subs	r0, r0, r4
 801efea:	9c01      	ldr	r4, [sp, #4]
 801efec:	fb0e 2e0b 	mla	lr, lr, fp, r2
 801eff0:	eba4 0608 	sub.w	r6, r4, r8
 801eff4:	b280      	uxth	r0, r0
 801eff6:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801effa:	b2b6      	uxth	r6, r6
 801effc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801f000:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f004:	4373      	muls	r3, r6
 801f006:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f00a:	fb0c 3300 	mla	r3, ip, r0, r3
 801f00e:	9802      	ldr	r0, [sp, #8]
 801f010:	ea42 0e0e 	orr.w	lr, r2, lr
 801f014:	fb00 3505 	mla	r5, r0, r5, r3
 801f018:	120b      	asrs	r3, r1, #8
 801f01a:	10c8      	asrs	r0, r1, #3
 801f01c:	fb08 5707 	mla	r7, r8, r7, r5
 801f020:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801f024:	00c9      	lsls	r1, r1, #3
 801f026:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801f02a:	ea6f 2727 	mvn.w	r7, r7, asr #8
 801f02e:	fa1f f28e 	uxth.w	r2, lr
 801f032:	b2c9      	uxtb	r1, r1
 801f034:	b2ff      	uxtb	r7, r7
 801f036:	437b      	muls	r3, r7
 801f038:	4378      	muls	r0, r7
 801f03a:	434f      	muls	r7, r1
 801f03c:	1c59      	adds	r1, r3, #1
 801f03e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801f042:	1213      	asrs	r3, r2, #8
 801f044:	f023 0307 	bic.w	r3, r3, #7
 801f048:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801f04c:	1c41      	adds	r1, r0, #1
 801f04e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801f052:	10d1      	asrs	r1, r2, #3
 801f054:	021b      	lsls	r3, r3, #8
 801f056:	f021 0103 	bic.w	r1, r1, #3
 801f05a:	00d2      	lsls	r2, r2, #3
 801f05c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801f060:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801f064:	00c9      	lsls	r1, r1, #3
 801f066:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f06a:	430b      	orrs	r3, r1
 801f06c:	1c79      	adds	r1, r7, #1
 801f06e:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801f072:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801f076:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801f07a:	431a      	orrs	r2, r3
 801f07c:	9b03      	ldr	r3, [sp, #12]
 801f07e:	801a      	strh	r2, [r3, #0]
 801f080:	b005      	add	sp, #20
 801f082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f086:	f04f 0c00 	mov.w	ip, #0
 801f08a:	4664      	mov	r4, ip
 801f08c:	e6e5      	b.n	801ee5a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 801f08e:	2300      	movs	r3, #0
 801f090:	469c      	mov	ip, r3
 801f092:	461a      	mov	r2, r3
 801f094:	461c      	mov	r4, r3
 801f096:	e707      	b.n	801eea8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801f098:	2300      	movs	r3, #0
 801f09a:	461a      	mov	r2, r3
 801f09c:	e704      	b.n	801eea8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801f09e:	460b      	mov	r3, r1
 801f0a0:	460a      	mov	r2, r1
 801f0a2:	e701      	b.n	801eea8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801f0a4:	2500      	movs	r5, #0
 801f0a6:	46ab      	mov	fp, r5
 801f0a8:	e72f      	b.n	801ef0a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 801f0aa:	2700      	movs	r7, #0
 801f0ac:	463d      	mov	r5, r7
 801f0ae:	4638      	mov	r0, r7
 801f0b0:	46bb      	mov	fp, r7
 801f0b2:	e754      	b.n	801ef5e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801f0b4:	4677      	mov	r7, lr
 801f0b6:	4675      	mov	r5, lr
 801f0b8:	4670      	mov	r0, lr
 801f0ba:	46f3      	mov	fp, lr
 801f0bc:	e74f      	b.n	801ef5e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801f0be:	2700      	movs	r7, #0
 801f0c0:	4638      	mov	r0, r7
 801f0c2:	e74c      	b.n	801ef5e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801f0c4:	460f      	mov	r7, r1
 801f0c6:	4608      	mov	r0, r1
 801f0c8:	e749      	b.n	801ef5e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

0801f0cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0d0:	b093      	sub	sp, #76	; 0x4c
 801f0d2:	9210      	str	r2, [sp, #64]	; 0x40
 801f0d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801f0d6:	9011      	str	r0, [sp, #68]	; 0x44
 801f0d8:	910e      	str	r1, [sp, #56]	; 0x38
 801f0da:	6850      	ldr	r0, [r2, #4]
 801f0dc:	9306      	str	r3, [sp, #24]
 801f0de:	6812      	ldr	r2, [r2, #0]
 801f0e0:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801f0e4:	fb00 1303 	mla	r3, r0, r3, r1
 801f0e8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f0ec:	9307      	str	r3, [sp, #28]
 801f0ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f0f0:	681b      	ldr	r3, [r3, #0]
 801f0f2:	9308      	str	r3, [sp, #32]
 801f0f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f0f6:	685b      	ldr	r3, [r3, #4]
 801f0f8:	9309      	str	r3, [sp, #36]	; 0x24
 801f0fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f0fc:	2b00      	cmp	r3, #0
 801f0fe:	dc03      	bgt.n	801f108 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f100:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f102:	2b00      	cmp	r3, #0
 801f104:	f340 83b6 	ble.w	801f874 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 801f108:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f10a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f10e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f112:	1e48      	subs	r0, r1, #1
 801f114:	1e55      	subs	r5, r2, #1
 801f116:	9b06      	ldr	r3, [sp, #24]
 801f118:	2b00      	cmp	r3, #0
 801f11a:	f340 8165 	ble.w	801f3e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801f11e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801f120:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f122:	1436      	asrs	r6, r6, #16
 801f124:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f128:	d406      	bmi.n	801f138 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f12a:	4286      	cmp	r6, r0
 801f12c:	da04      	bge.n	801f138 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f12e:	2b00      	cmp	r3, #0
 801f130:	db02      	blt.n	801f138 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f132:	42ab      	cmp	r3, r5
 801f134:	f2c0 8159 	blt.w	801f3ea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801f138:	3601      	adds	r6, #1
 801f13a:	f100 8146 	bmi.w	801f3ca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801f13e:	42b1      	cmp	r1, r6
 801f140:	f2c0 8143 	blt.w	801f3ca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801f144:	3301      	adds	r3, #1
 801f146:	f100 8140 	bmi.w	801f3ca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801f14a:	429a      	cmp	r2, r3
 801f14c:	f2c0 813d 	blt.w	801f3ca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801f150:	9b06      	ldr	r3, [sp, #24]
 801f152:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801f156:	9f07      	ldr	r7, [sp, #28]
 801f158:	930f      	str	r3, [sp, #60]	; 0x3c
 801f15a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f15c:	2b00      	cmp	r3, #0
 801f15e:	f340 8166 	ble.w	801f42e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801f162:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f164:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801f166:	1418      	asrs	r0, r3, #16
 801f168:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f16a:	142d      	asrs	r5, r5, #16
 801f16c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801f170:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f172:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801f176:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f178:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801f17c:	f100 81f0 	bmi.w	801f560 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801f180:	f102 3eff 	add.w	lr, r2, #4294967295
 801f184:	4575      	cmp	r5, lr
 801f186:	f280 81eb 	bge.w	801f560 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801f18a:	2800      	cmp	r0, #0
 801f18c:	f2c0 81e8 	blt.w	801f560 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801f190:	f103 3eff 	add.w	lr, r3, #4294967295
 801f194:	4570      	cmp	r0, lr
 801f196:	f280 81e3 	bge.w	801f560 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801f19a:	b212      	sxth	r2, r2
 801f19c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f19e:	fa1f fe81 	uxth.w	lr, r1
 801f1a2:	fb00 5002 	mla	r0, r0, r2, r5
 801f1a6:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801f1aa:	eb03 0a00 	add.w	sl, r3, r0
 801f1ae:	f813 9000 	ldrb.w	r9, [r3, r0]
 801f1b2:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 801f1b6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801f1ba:	b29b      	uxth	r3, r3
 801f1bc:	f1bc 0f00 	cmp.w	ip, #0
 801f1c0:	f000 817b 	beq.w	801f4ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801f1c4:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801f1c8:	eb0a 0b02 	add.w	fp, sl, r2
 801f1cc:	fa1f fa8c 	uxth.w	sl, ip
 801f1d0:	940a      	str	r4, [sp, #40]	; 0x28
 801f1d2:	fb0a fe0e 	mul.w	lr, sl, lr
 801f1d6:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801f1da:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801f1de:	eba5 050e 	sub.w	r5, r5, lr
 801f1e2:	940b      	str	r4, [sp, #44]	; 0x2c
 801f1e4:	fa1f fa8a 	uxth.w	sl, sl
 801f1e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f1ea:	b2ad      	uxth	r5, r5
 801f1ec:	eba3 030a 	sub.w	r3, r3, sl
 801f1f0:	fb08 f505 	mul.w	r5, r8, r5
 801f1f4:	b29b      	uxth	r3, r3
 801f1f6:	fb09 5303 	mla	r3, r9, r3, r5
 801f1fa:	fb0a 3304 	mla	r3, sl, r4, r3
 801f1fe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f200:	fb0e 3304 	mla	r3, lr, r4, r3
 801f204:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f208:	2b00      	cmp	r3, #0
 801f20a:	f000 80d1 	beq.w	801f3b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801f20e:	9c08      	ldr	r4, [sp, #32]
 801f210:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f214:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801f218:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801f21c:	f000 8152 	beq.w	801f4c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 801f220:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801f224:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801f228:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f22c:	fb0a fe0e 	mul.w	lr, sl, lr
 801f230:	fb09 f000 	mul.w	r0, r9, r0
 801f234:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801f238:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801f23c:	f100 0b20 	add.w	fp, r0, #32
 801f240:	44ce      	add	lr, r9
 801f242:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801f246:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801f24a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f24e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f252:	ea4e 0909 	orr.w	r9, lr, r9
 801f256:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f25a:	8868      	ldrh	r0, [r5, #2]
 801f25c:	d019      	beq.n	801f292 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801f25e:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801f262:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801f266:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f26a:	fb0a fe0e 	mul.w	lr, sl, lr
 801f26e:	fb08 f800 	mul.w	r8, r8, r0
 801f272:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801f276:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801f27a:	f108 0b20 	add.w	fp, r8, #32
 801f27e:	4486      	add	lr, r0
 801f280:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801f284:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801f288:	0a00      	lsrs	r0, r0, #8
 801f28a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f28e:	ea4e 0000 	orr.w	r0, lr, r0
 801f292:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801f296:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801f29a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801f29e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f2a2:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801f2a6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f2aa:	ea4e 0909 	orr.w	r9, lr, r9
 801f2ae:	ea4a 0000 	orr.w	r0, sl, r0
 801f2b2:	f1bc 0f00 	cmp.w	ip, #0
 801f2b6:	f000 8107 	beq.w	801f4c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 801f2ba:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801f2be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f2c0:	3a01      	subs	r2, #1
 801f2c2:	2cff      	cmp	r4, #255	; 0xff
 801f2c4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801f2c8:	f102 0202 	add.w	r2, r2, #2
 801f2cc:	eb05 0e02 	add.w	lr, r5, r2
 801f2d0:	5aaa      	ldrh	r2, [r5, r2]
 801f2d2:	d018      	beq.n	801f306 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801f2d4:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 801f2d8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f2dc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f2e0:	fb04 fa02 	mul.w	sl, r4, r2
 801f2e4:	fb08 f805 	mul.w	r8, r8, r5
 801f2e8:	f10a 0520 	add.w	r5, sl, #32
 801f2ec:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801f2f0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f2f4:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 801f2f8:	4442      	add	r2, r8
 801f2fa:	0a2d      	lsrs	r5, r5, #8
 801f2fc:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801f300:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f304:	432a      	orrs	r2, r5
 801f306:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f308:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801f30c:	2cff      	cmp	r4, #255	; 0xff
 801f30e:	d01a      	beq.n	801f346 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f310:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 801f314:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f318:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f31c:	fb04 fa05 	mul.w	sl, r4, r5
 801f320:	fb08 f80e 	mul.w	r8, r8, lr
 801f324:	f10a 0e20 	add.w	lr, sl, #32
 801f328:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 801f32c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f330:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 801f334:	4445      	add	r5, r8
 801f336:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f33a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801f33e:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801f342:	ea45 050e 	orr.w	r5, r5, lr
 801f346:	fb1c fe01 	smulbb	lr, ip, r1
 801f34a:	f1cc 0810 	rsb	r8, ip, #16
 801f34e:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801f352:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f356:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801f35a:	eba8 0801 	sub.w	r8, r8, r1
 801f35e:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801f362:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f366:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801f36a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801f36e:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801f372:	ea4a 0202 	orr.w	r2, sl, r2
 801f376:	4341      	muls	r1, r0
 801f378:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801f37c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f380:	fb09 1108 	mla	r1, r9, r8, r1
 801f384:	ea4b 0505 	orr.w	r5, fp, r5
 801f388:	fb0c 1102 	mla	r1, ip, r2, r1
 801f38c:	fb0e 1e05 	mla	lr, lr, r5, r1
 801f390:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801f394:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801f398:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f39c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f3a0:	ea42 0e0e 	orr.w	lr, r2, lr
 801f3a4:	fa1f f28e 	uxth.w	r2, lr
 801f3a8:	2bff      	cmp	r3, #255	; 0xff
 801f3aa:	f040 80a1 	bne.w	801f4f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801f3ae:	803a      	strh	r2, [r7, #0]
 801f3b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f3b2:	3702      	adds	r7, #2
 801f3b4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801f3b6:	4413      	add	r3, r2
 801f3b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801f3ba:	931d      	str	r3, [sp, #116]	; 0x74
 801f3bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f3be:	441a      	add	r2, r3
 801f3c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f3c2:	3b01      	subs	r3, #1
 801f3c4:	921e      	str	r2, [sp, #120]	; 0x78
 801f3c6:	930f      	str	r3, [sp, #60]	; 0x3c
 801f3c8:	e6c7      	b.n	801f15a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801f3ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f3cc:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801f3ce:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801f3d0:	4433      	add	r3, r6
 801f3d2:	931d      	str	r3, [sp, #116]	; 0x74
 801f3d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f3d6:	441c      	add	r4, r3
 801f3d8:	9b06      	ldr	r3, [sp, #24]
 801f3da:	3b01      	subs	r3, #1
 801f3dc:	941e      	str	r4, [sp, #120]	; 0x78
 801f3de:	9306      	str	r3, [sp, #24]
 801f3e0:	9b07      	ldr	r3, [sp, #28]
 801f3e2:	3302      	adds	r3, #2
 801f3e4:	9307      	str	r3, [sp, #28]
 801f3e6:	e696      	b.n	801f116 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f3e8:	d028      	beq.n	801f43c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f3ea:	9b06      	ldr	r3, [sp, #24]
 801f3ec:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801f3ee:	3b01      	subs	r3, #1
 801f3f0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801f3f2:	fb00 5003 	mla	r0, r0, r3, r5
 801f3f6:	1400      	asrs	r0, r0, #16
 801f3f8:	f53f aeaa 	bmi.w	801f150 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f3fc:	3901      	subs	r1, #1
 801f3fe:	4288      	cmp	r0, r1
 801f400:	f6bf aea6 	bge.w	801f150 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f404:	9920      	ldr	r1, [sp, #128]	; 0x80
 801f406:	981e      	ldr	r0, [sp, #120]	; 0x78
 801f408:	fb01 0303 	mla	r3, r1, r3, r0
 801f40c:	141b      	asrs	r3, r3, #16
 801f40e:	f53f ae9f 	bmi.w	801f150 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f412:	3a01      	subs	r2, #1
 801f414:	4293      	cmp	r3, r2
 801f416:	f6bf ae9b 	bge.w	801f150 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f41a:	9b06      	ldr	r3, [sp, #24]
 801f41c:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801f420:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801f424:	930f      	str	r3, [sp, #60]	; 0x3c
 801f426:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f428:	2b00      	cmp	r3, #0
 801f42a:	f300 80b6 	bgt.w	801f59a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801f42e:	9b06      	ldr	r3, [sp, #24]
 801f430:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f434:	9b07      	ldr	r3, [sp, #28]
 801f436:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801f43a:	9307      	str	r3, [sp, #28]
 801f43c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f43e:	2b00      	cmp	r3, #0
 801f440:	f340 8218 	ble.w	801f874 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 801f444:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f448:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f44a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f44e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f452:	eef0 6a62 	vmov.f32	s13, s5
 801f456:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f45a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f45e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f462:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 801f466:	eef0 6a43 	vmov.f32	s13, s6
 801f46a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f46e:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 801f472:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f476:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f47a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f47e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f482:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f486:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f48a:	ee12 2a90 	vmov	r2, s5
 801f48e:	eef0 2a47 	vmov.f32	s5, s14
 801f492:	fb92 f3f3 	sdiv	r3, r2, r3
 801f496:	ee13 2a10 	vmov	r2, s6
 801f49a:	931f      	str	r3, [sp, #124]	; 0x7c
 801f49c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f49e:	eeb0 3a67 	vmov.f32	s6, s15
 801f4a2:	fb92 f3f3 	sdiv	r3, r2, r3
 801f4a6:	9320      	str	r3, [sp, #128]	; 0x80
 801f4a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f4aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f4ac:	3b01      	subs	r3, #1
 801f4ae:	930e      	str	r3, [sp, #56]	; 0x38
 801f4b0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f4b2:	bf08      	it	eq
 801f4b4:	4613      	moveq	r3, r2
 801f4b6:	9306      	str	r3, [sp, #24]
 801f4b8:	e61f      	b.n	801f0fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801f4ba:	fb08 f505 	mul.w	r5, r8, r5
 801f4be:	fb09 5303 	mla	r3, r9, r3, r5
 801f4c2:	e69f      	b.n	801f204 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801f4c4:	4681      	mov	r9, r0
 801f4c6:	e6c6      	b.n	801f256 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801f4c8:	f1c1 0210 	rsb	r2, r1, #16
 801f4cc:	4341      	muls	r1, r0
 801f4ce:	fb09 1902 	mla	r9, r9, r2, r1
 801f4d2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801f4d6:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801f4da:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f4de:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f4e2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801f4e6:	ea42 0909 	orr.w	r9, r2, r9
 801f4ea:	fa1f f289 	uxth.w	r2, r9
 801f4ee:	e75b      	b.n	801f3a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 801f4f0:	f8b7 c000 	ldrh.w	ip, [r7]
 801f4f4:	43db      	mvns	r3, r3
 801f4f6:	ea4f 202c 	mov.w	r0, ip, asr #8
 801f4fa:	fa5f fe83 	uxtb.w	lr, r3
 801f4fe:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f502:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801f506:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 801f50a:	fb00 f00e 	mul.w	r0, r0, lr
 801f50e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801f512:	b2db      	uxtb	r3, r3
 801f514:	1c41      	adds	r1, r0, #1
 801f516:	fb05 f50e 	mul.w	r5, r5, lr
 801f51a:	fb03 f30e 	mul.w	r3, r3, lr
 801f51e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801f522:	1211      	asrs	r1, r2, #8
 801f524:	f021 0107 	bic.w	r1, r1, #7
 801f528:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801f52c:	48d3      	ldr	r0, [pc, #844]	; (801f87c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 801f52e:	b2c9      	uxtb	r1, r1
 801f530:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 801f534:	1c69      	adds	r1, r5, #1
 801f536:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801f53a:	10d1      	asrs	r1, r2, #3
 801f53c:	00d2      	lsls	r2, r2, #3
 801f53e:	f021 0103 	bic.w	r1, r1, #3
 801f542:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801f546:	00c9      	lsls	r1, r1, #3
 801f548:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f54c:	4301      	orrs	r1, r0
 801f54e:	1c58      	adds	r0, r3, #1
 801f550:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801f554:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f558:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801f55c:	430a      	orrs	r2, r1
 801f55e:	e726      	b.n	801f3ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801f560:	f115 0e01 	adds.w	lr, r5, #1
 801f564:	f53f af24 	bmi.w	801f3b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801f568:	4572      	cmp	r2, lr
 801f56a:	f6ff af21 	blt.w	801f3b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801f56e:	f110 0e01 	adds.w	lr, r0, #1
 801f572:	f53f af1d 	bmi.w	801f3b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801f576:	4573      	cmp	r3, lr
 801f578:	f6ff af1a 	blt.w	801f3b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801f57c:	b21b      	sxth	r3, r3
 801f57e:	b212      	sxth	r2, r2
 801f580:	9301      	str	r3, [sp, #4]
 801f582:	9200      	str	r2, [sp, #0]
 801f584:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 801f588:	e9cd 5002 	strd	r5, r0, [sp, #8]
 801f58c:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 801f590:	4639      	mov	r1, r7
 801f592:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f594:	f7ff fc22 	bl	801eddc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801f598:	e70a      	b.n	801f3b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801f59a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f59c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f5a0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f5a2:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801f5a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f5a8:	fa1f fc82 	uxth.w	ip, r2
 801f5ac:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f5b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f5b2:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801f5b6:	141f      	asrs	r7, r3, #16
 801f5b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f5ba:	141b      	asrs	r3, r3, #16
 801f5bc:	fb01 3707 	mla	r7, r1, r7, r3
 801f5c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f5c2:	eb03 0a07 	add.w	sl, r3, r7
 801f5c6:	f813 9007 	ldrb.w	r9, [r3, r7]
 801f5ca:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801f5ce:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801f5d2:	b29b      	uxth	r3, r3
 801f5d4:	2d00      	cmp	r5, #0
 801f5d6:	f000 80fe 	beq.w	801f7d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 801f5da:	f81a 4001 	ldrb.w	r4, [sl, r1]
 801f5de:	eb0a 0b01 	add.w	fp, sl, r1
 801f5e2:	fa1f fa85 	uxth.w	sl, r5
 801f5e6:	940c      	str	r4, [sp, #48]	; 0x30
 801f5e8:	fb0a fc0c 	mul.w	ip, sl, ip
 801f5ec:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801f5f0:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801f5f4:	eba0 000c 	sub.w	r0, r0, ip
 801f5f8:	940d      	str	r4, [sp, #52]	; 0x34
 801f5fa:	fa1f fa8a 	uxth.w	sl, sl
 801f5fe:	b280      	uxth	r0, r0
 801f600:	eba3 030a 	sub.w	r3, r3, sl
 801f604:	fb08 f000 	mul.w	r0, r8, r0
 801f608:	b29b      	uxth	r3, r3
 801f60a:	fb09 0303 	mla	r3, r9, r3, r0
 801f60e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f610:	fb0a 3300 	mla	r3, sl, r0, r3
 801f614:	fb0c 3304 	mla	r3, ip, r4, r3
 801f618:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f61c:	2b00      	cmp	r3, #0
 801f61e:	f000 80cc 	beq.w	801f7ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 801f622:	9808      	ldr	r0, [sp, #32]
 801f624:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f628:	9c08      	ldr	r4, [sp, #32]
 801f62a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 801f62e:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801f632:	f000 80d5 	beq.w	801f7e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 801f636:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801f63a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801f63e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f642:	fb0a fc0c 	mul.w	ip, sl, ip
 801f646:	fb09 f707 	mul.w	r7, r9, r7
 801f64a:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801f64e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801f652:	f107 0b20 	add.w	fp, r7, #32
 801f656:	44cc      	add	ip, r9
 801f658:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801f65c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801f660:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f664:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f668:	ea4c 0909 	orr.w	r9, ip, r9
 801f66c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f670:	8847      	ldrh	r7, [r0, #2]
 801f672:	d019      	beq.n	801f6a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 801f674:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801f678:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801f67c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f680:	fb0a fc0c 	mul.w	ip, sl, ip
 801f684:	fb08 f807 	mul.w	r8, r8, r7
 801f688:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801f68c:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801f690:	f108 0b20 	add.w	fp, r8, #32
 801f694:	44bc      	add	ip, r7
 801f696:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801f69a:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801f69e:	0a3f      	lsrs	r7, r7, #8
 801f6a0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f6a4:	ea4c 0707 	orr.w	r7, ip, r7
 801f6a8:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801f6ac:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801f6b0:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801f6b4:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801f6b8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f6bc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f6c0:	ea4c 0909 	orr.w	r9, ip, r9
 801f6c4:	ea4a 0707 	orr.w	r7, sl, r7
 801f6c8:	2d00      	cmp	r5, #0
 801f6ca:	f000 808b 	beq.w	801f7e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801f6ce:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801f6d2:	3901      	subs	r1, #1
 801f6d4:	0049      	lsls	r1, r1, #1
 801f6d6:	3102      	adds	r1, #2
 801f6d8:	eb00 0c01 	add.w	ip, r0, r1
 801f6dc:	5a41      	ldrh	r1, [r0, r1]
 801f6de:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f6e0:	28ff      	cmp	r0, #255	; 0xff
 801f6e2:	d019      	beq.n	801f718 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801f6e4:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 801f6e8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f6ea:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f6ee:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f6f2:	fb04 fa01 	mul.w	sl, r4, r1
 801f6f6:	fb08 f800 	mul.w	r8, r8, r0
 801f6fa:	f10a 0020 	add.w	r0, sl, #32
 801f6fe:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 801f702:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f706:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801f70a:	4441      	add	r1, r8
 801f70c:	0a00      	lsrs	r0, r0, #8
 801f70e:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801f712:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f716:	4301      	orrs	r1, r0
 801f718:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f71a:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801f71e:	2cff      	cmp	r4, #255	; 0xff
 801f720:	d01a      	beq.n	801f758 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
 801f722:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 801f726:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f72a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f72e:	fb04 fa00 	mul.w	sl, r4, r0
 801f732:	fb08 f80c 	mul.w	r8, r8, ip
 801f736:	f10a 0c20 	add.w	ip, sl, #32
 801f73a:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 801f73e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f742:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801f746:	4440      	add	r0, r8
 801f748:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f74c:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801f750:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801f754:	ea40 000c 	orr.w	r0, r0, ip
 801f758:	fb15 fc02 	smulbb	ip, r5, r2
 801f75c:	f1c5 0810 	rsb	r8, r5, #16
 801f760:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801f764:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801f768:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801f76c:	eba8 0802 	sub.w	r8, r8, r2
 801f770:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801f774:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f778:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801f77c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f780:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 801f784:	ea4a 0101 	orr.w	r1, sl, r1
 801f788:	437a      	muls	r2, r7
 801f78a:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 801f78e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f792:	fb09 2208 	mla	r2, r9, r8, r2
 801f796:	ea4b 0000 	orr.w	r0, fp, r0
 801f79a:	fb05 2201 	mla	r2, r5, r1, r2
 801f79e:	fb0c 2200 	mla	r2, ip, r0, r2
 801f7a2:	0d57      	lsrs	r7, r2, #21
 801f7a4:	0952      	lsrs	r2, r2, #5
 801f7a6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f7aa:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f7ae:	433a      	orrs	r2, r7
 801f7b0:	2bff      	cmp	r3, #255	; 0xff
 801f7b2:	b292      	uxth	r2, r2
 801f7b4:	d127      	bne.n	801f806 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 801f7b6:	f8ae 2000 	strh.w	r2, [lr]
 801f7ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f7bc:	f10e 0e02 	add.w	lr, lr, #2
 801f7c0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801f7c2:	4413      	add	r3, r2
 801f7c4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801f7c6:	931d      	str	r3, [sp, #116]	; 0x74
 801f7c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f7ca:	441a      	add	r2, r3
 801f7cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f7ce:	3b01      	subs	r3, #1
 801f7d0:	921e      	str	r2, [sp, #120]	; 0x78
 801f7d2:	930f      	str	r3, [sp, #60]	; 0x3c
 801f7d4:	e627      	b.n	801f426 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 801f7d6:	fb08 f000 	mul.w	r0, r8, r0
 801f7da:	fb09 0303 	mla	r3, r9, r3, r0
 801f7de:	e71b      	b.n	801f618 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
 801f7e0:	46b9      	mov	r9, r7
 801f7e2:	e743      	b.n	801f66c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
 801f7e4:	f1c2 0110 	rsb	r1, r2, #16
 801f7e8:	437a      	muls	r2, r7
 801f7ea:	fb09 2901 	mla	r9, r9, r1, r2
 801f7ee:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801f7f2:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801f7f6:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801f7fa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f7fe:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f802:	4302      	orrs	r2, r0
 801f804:	e7d4      	b.n	801f7b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
 801f806:	f8be 7000 	ldrh.w	r7, [lr]
 801f80a:	43db      	mvns	r3, r3
 801f80c:	4c1b      	ldr	r4, [pc, #108]	; (801f87c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 801f80e:	1238      	asrs	r0, r7, #8
 801f810:	fa5f fc83 	uxtb.w	ip, r3
 801f814:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f818:	10fd      	asrs	r5, r7, #3
 801f81a:	00fb      	lsls	r3, r7, #3
 801f81c:	fb00 f00c 	mul.w	r0, r0, ip
 801f820:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801f824:	b2db      	uxtb	r3, r3
 801f826:	fb05 f10c 	mul.w	r1, r5, ip
 801f82a:	1c45      	adds	r5, r0, #1
 801f82c:	fb03 f30c 	mul.w	r3, r3, ip
 801f830:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801f834:	1215      	asrs	r5, r2, #8
 801f836:	f025 0507 	bic.w	r5, r5, #7
 801f83a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801f83e:	1c4d      	adds	r5, r1, #1
 801f840:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 801f844:	10d1      	asrs	r1, r2, #3
 801f846:	b2c0      	uxtb	r0, r0
 801f848:	f021 0103 	bic.w	r1, r1, #3
 801f84c:	00d2      	lsls	r2, r2, #3
 801f84e:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 801f852:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801f856:	00c9      	lsls	r1, r1, #3
 801f858:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f85c:	4308      	orrs	r0, r1
 801f85e:	1c59      	adds	r1, r3, #1
 801f860:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801f864:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f868:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801f86c:	4318      	orrs	r0, r3
 801f86e:	f8ae 0000 	strh.w	r0, [lr]
 801f872:	e7a2      	b.n	801f7ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 801f874:	b013      	add	sp, #76	; 0x4c
 801f876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f87a:	bf00      	nop
 801f87c:	fffff800 	.word	0xfffff800

0801f880 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 801f880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f884:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 801f888:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 801f88c:	fb05 4c03 	mla	ip, r5, r3, r4
 801f890:	2d00      	cmp	r5, #0
 801f892:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 801f896:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 801f89a:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 801f89e:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801f8a2:	8808      	ldrh	r0, [r1, #0]
 801f8a4:	f2c0 80a7 	blt.w	801f9f6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 801f8a8:	45aa      	cmp	sl, r5
 801f8aa:	f340 80a4 	ble.w	801f9f6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 801f8ae:	2c00      	cmp	r4, #0
 801f8b0:	f2c0 809f 	blt.w	801f9f2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 801f8b4:	42a3      	cmp	r3, r4
 801f8b6:	f340 809c 	ble.w	801f9f2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 801f8ba:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 801f8be:	1c62      	adds	r2, r4, #1
 801f8c0:	f100 809c 	bmi.w	801f9fc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 801f8c4:	4293      	cmp	r3, r2
 801f8c6:	f340 8099 	ble.w	801f9fc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 801f8ca:	f1b9 0f00 	cmp.w	r9, #0
 801f8ce:	f000 8095 	beq.w	801f9fc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 801f8d2:	f8be c002 	ldrh.w	ip, [lr, #2]
 801f8d6:	3501      	adds	r5, #1
 801f8d8:	f100 8094 	bmi.w	801fa04 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 801f8dc:	45aa      	cmp	sl, r5
 801f8de:	f340 8091 	ble.w	801fa04 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 801f8e2:	2f00      	cmp	r7, #0
 801f8e4:	f000 808e 	beq.w	801fa04 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 801f8e8:	2c00      	cmp	r4, #0
 801f8ea:	f2c0 8089 	blt.w	801fa00 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 801f8ee:	42a3      	cmp	r3, r4
 801f8f0:	f340 8086 	ble.w	801fa00 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 801f8f4:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 801f8f8:	3401      	adds	r4, #1
 801f8fa:	f100 8086 	bmi.w	801fa0a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 801f8fe:	42a3      	cmp	r3, r4
 801f900:	f340 8083 	ble.w	801fa0a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 801f904:	f1b9 0f00 	cmp.w	r9, #0
 801f908:	d07f      	beq.n	801fa0a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 801f90a:	3301      	adds	r3, #1
 801f90c:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 801f910:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801f914:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801f918:	fb19 fe07 	smulbb	lr, r9, r7
 801f91c:	f1c7 0210 	rsb	r2, r7, #16
 801f920:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801f924:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801f928:	eba2 0209 	sub.w	r2, r2, r9
 801f92c:	ea44 0808 	orr.w	r8, r4, r8
 801f930:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801f934:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801f938:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801f93c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801f940:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801f944:	ea44 0c0c 	orr.w	ip, r4, ip
 801f948:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801f94c:	fb04 f40c 	mul.w	r4, r4, ip
 801f950:	fb02 4808 	mla	r8, r2, r8, r4
 801f954:	041a      	lsls	r2, r3, #16
 801f956:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f95a:	b2b4      	uxth	r4, r6
 801f95c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801f960:	43f6      	mvns	r6, r6
 801f962:	4313      	orrs	r3, r2
 801f964:	042a      	lsls	r2, r5, #16
 801f966:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801f96a:	b2f6      	uxtb	r6, r6
 801f96c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801f970:	fb0e 8303 	mla	r3, lr, r3, r8
 801f974:	432a      	orrs	r2, r5
 801f976:	fb07 3202 	mla	r2, r7, r2, r3
 801f97a:	10c7      	asrs	r7, r0, #3
 801f97c:	0d53      	lsrs	r3, r2, #21
 801f97e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f982:	0952      	lsrs	r2, r2, #5
 801f984:	fb17 f706 	smulbb	r7, r7, r6
 801f988:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f98c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f990:	431a      	orrs	r2, r3
 801f992:	b293      	uxth	r3, r2
 801f994:	1202      	asrs	r2, r0, #8
 801f996:	121d      	asrs	r5, r3, #8
 801f998:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801f99c:	00c0      	lsls	r0, r0, #3
 801f99e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801f9a2:	fb12 f206 	smulbb	r2, r2, r6
 801f9a6:	b2c0      	uxtb	r0, r0
 801f9a8:	fb05 2504 	mla	r5, r5, r4, r2
 801f9ac:	10da      	asrs	r2, r3, #3
 801f9ae:	fb10 f006 	smulbb	r0, r0, r6
 801f9b2:	00db      	lsls	r3, r3, #3
 801f9b4:	b2ad      	uxth	r5, r5
 801f9b6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801f9ba:	b2db      	uxtb	r3, r3
 801f9bc:	fb02 7204 	mla	r2, r2, r4, r7
 801f9c0:	fb03 0004 	mla	r0, r3, r4, r0
 801f9c4:	1c6b      	adds	r3, r5, #1
 801f9c6:	b292      	uxth	r2, r2
 801f9c8:	b280      	uxth	r0, r0
 801f9ca:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f9ce:	1c43      	adds	r3, r0, #1
 801f9d0:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801f9d4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801f9d8:	1c50      	adds	r0, r2, #1
 801f9da:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801f9de:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801f9e2:	0952      	lsrs	r2, r2, #5
 801f9e4:	432b      	orrs	r3, r5
 801f9e6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f9ea:	4313      	orrs	r3, r2
 801f9ec:	800b      	strh	r3, [r1, #0]
 801f9ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f9f2:	4680      	mov	r8, r0
 801f9f4:	e763      	b.n	801f8be <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 801f9f6:	4684      	mov	ip, r0
 801f9f8:	4680      	mov	r8, r0
 801f9fa:	e76c      	b.n	801f8d6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 801f9fc:	4684      	mov	ip, r0
 801f9fe:	e76a      	b.n	801f8d6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 801fa00:	4605      	mov	r5, r0
 801fa02:	e779      	b.n	801f8f8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 801fa04:	4603      	mov	r3, r0
 801fa06:	4605      	mov	r5, r0
 801fa08:	e782      	b.n	801f910 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 801fa0a:	4603      	mov	r3, r0
 801fa0c:	e780      	b.n	801f910 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

0801fa0e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fa0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa12:	b093      	sub	sp, #76	; 0x4c
 801fa14:	461d      	mov	r5, r3
 801fa16:	9210      	str	r2, [sp, #64]	; 0x40
 801fa18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fa1a:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 801fa1e:	910a      	str	r1, [sp, #40]	; 0x28
 801fa20:	920b      	str	r2, [sp, #44]	; 0x2c
 801fa22:	6859      	ldr	r1, [r3, #4]
 801fa24:	681b      	ldr	r3, [r3, #0]
 801fa26:	9011      	str	r0, [sp, #68]	; 0x44
 801fa28:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 801fa2c:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 801fa30:	fb01 2707 	mla	r7, r1, r7, r2
 801fa34:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 801fa38:	9307      	str	r3, [sp, #28]
 801fa3a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fa3c:	681b      	ldr	r3, [r3, #0]
 801fa3e:	9309      	str	r3, [sp, #36]	; 0x24
 801fa40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fa42:	43db      	mvns	r3, r3
 801fa44:	b2db      	uxtb	r3, r3
 801fa46:	9308      	str	r3, [sp, #32]
 801fa48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fa4a:	2b00      	cmp	r3, #0
 801fa4c:	dc03      	bgt.n	801fa56 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801fa4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fa50:	2b00      	cmp	r3, #0
 801fa52:	f340 8205 	ble.w	801fe60 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801fa56:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fa58:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fa5c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fa60:	1e48      	subs	r0, r1, #1
 801fa62:	f102 3cff 	add.w	ip, r2, #4294967295
 801fa66:	2d00      	cmp	r5, #0
 801fa68:	f340 80da 	ble.w	801fc20 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 801fa6c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801fa70:	ea4f 4326 	mov.w	r3, r6, asr #16
 801fa74:	d406      	bmi.n	801fa84 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fa76:	4586      	cmp	lr, r0
 801fa78:	da04      	bge.n	801fa84 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fa7a:	2b00      	cmp	r3, #0
 801fa7c:	db02      	blt.n	801fa84 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fa7e:	4563      	cmp	r3, ip
 801fa80:	f2c0 80cf 	blt.w	801fc22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801fa84:	f11e 0e01 	adds.w	lr, lr, #1
 801fa88:	f100 80c1 	bmi.w	801fc0e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801fa8c:	4571      	cmp	r1, lr
 801fa8e:	f2c0 80be 	blt.w	801fc0e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801fa92:	3301      	adds	r3, #1
 801fa94:	f100 80bb 	bmi.w	801fc0e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801fa98:	429a      	cmp	r2, r3
 801fa9a:	f2c0 80b8 	blt.w	801fc0e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801fa9e:	46a9      	mov	r9, r5
 801faa0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801faa4:	f1b9 0f00 	cmp.w	r9, #0
 801faa8:	f340 80d8 	ble.w	801fc5c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 801faac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801faae:	1421      	asrs	r1, r4, #16
 801fab0:	ea4f 4026 	mov.w	r0, r6, asr #16
 801fab4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801fab8:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801fabc:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801fac0:	f100 8112 	bmi.w	801fce8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 801fac4:	f10e 3aff 	add.w	sl, lr, #4294967295
 801fac8:	4551      	cmp	r1, sl
 801faca:	f280 810d 	bge.w	801fce8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 801face:	2800      	cmp	r0, #0
 801fad0:	f2c0 810a 	blt.w	801fce8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 801fad4:	f103 3aff 	add.w	sl, r3, #4294967295
 801fad8:	4550      	cmp	r0, sl
 801fada:	f280 8105 	bge.w	801fce8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 801fade:	fa0f f38e 	sxth.w	r3, lr
 801fae2:	fb00 1103 	mla	r1, r0, r3, r1
 801fae6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fae8:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 801faec:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 801faf0:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 801faf4:	f1bc 0f00 	cmp.w	ip, #0
 801faf8:	d007      	beq.n	801fb0a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801fafa:	005b      	lsls	r3, r3, #1
 801fafc:	eb0a 0003 	add.w	r0, sl, r3
 801fb00:	f83a 3003 	ldrh.w	r3, [sl, r3]
 801fb04:	930c      	str	r3, [sp, #48]	; 0x30
 801fb06:	8843      	ldrh	r3, [r0, #2]
 801fb08:	930d      	str	r3, [sp, #52]	; 0x34
 801fb0a:	ea4f 400e 	mov.w	r0, lr, lsl #16
 801fb0e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801fb12:	fb12 f30c 	smulbb	r3, r2, ip
 801fb16:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801fb1a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801fb1e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801fb22:	10db      	asrs	r3, r3, #3
 801fb24:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801fb28:	ea40 000e 	orr.w	r0, r0, lr
 801fb2c:	f1cc 0e10 	rsb	lr, ip, #16
 801fb30:	ea4a 0101 	orr.w	r1, sl, r1
 801fb34:	9f08      	ldr	r7, [sp, #32]
 801fb36:	ebae 0e02 	sub.w	lr, lr, r2
 801fb3a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801fb3e:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 801fb42:	4351      	muls	r1, r2
 801fb44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fb46:	fb0e 1e00 	mla	lr, lr, r0, r1
 801fb4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801fb4c:	0410      	lsls	r0, r2, #16
 801fb4e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801fb52:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801fb56:	4310      	orrs	r0, r2
 801fb58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fb5a:	0412      	lsls	r2, r2, #16
 801fb5c:	fb03 e000 	mla	r0, r3, r0, lr
 801fb60:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801fb64:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801fb68:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801fb6c:	ea42 020e 	orr.w	r2, r2, lr
 801fb70:	fb03 0302 	mla	r3, r3, r2, r0
 801fb74:	f8b8 0000 	ldrh.w	r0, [r8]
 801fb78:	0d5a      	lsrs	r2, r3, #21
 801fb7a:	095b      	lsrs	r3, r3, #5
 801fb7c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fb80:	1201      	asrs	r1, r0, #8
 801fb82:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801fb86:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801fb8a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801fb8e:	00c0      	lsls	r0, r0, #3
 801fb90:	4313      	orrs	r3, r2
 801fb92:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801fb96:	fb11 f107 	smulbb	r1, r1, r7
 801fb9a:	b2c0      	uxtb	r0, r0
 801fb9c:	b29b      	uxth	r3, r3
 801fb9e:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801fba2:	fb10 f007 	smulbb	r0, r0, r7
 801fba6:	fb1e fe07 	smulbb	lr, lr, r7
 801fbaa:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801fbae:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fbb2:	fb0c 1c02 	mla	ip, ip, r2, r1
 801fbb6:	10d9      	asrs	r1, r3, #3
 801fbb8:	00db      	lsls	r3, r3, #3
 801fbba:	fa1f fc8c 	uxth.w	ip, ip
 801fbbe:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801fbc2:	b2db      	uxtb	r3, r3
 801fbc4:	fb01 e102 	mla	r1, r1, r2, lr
 801fbc8:	fb03 0302 	mla	r3, r3, r2, r0
 801fbcc:	b289      	uxth	r1, r1
 801fbce:	b29a      	uxth	r2, r3
 801fbd0:	f10c 0301 	add.w	r3, ip, #1
 801fbd4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801fbd8:	1c53      	adds	r3, r2, #1
 801fbda:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fbde:	1c4a      	adds	r2, r1, #1
 801fbe0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fbe4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801fbe8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801fbec:	0949      	lsrs	r1, r1, #5
 801fbee:	ea43 030c 	orr.w	r3, r3, ip
 801fbf2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801fbf6:	430b      	orrs	r3, r1
 801fbf8:	f8a8 3000 	strh.w	r3, [r8]
 801fbfc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fbfe:	f108 0802 	add.w	r8, r8, #2
 801fc02:	f109 39ff 	add.w	r9, r9, #4294967295
 801fc06:	441c      	add	r4, r3
 801fc08:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fc0a:	441e      	add	r6, r3
 801fc0c:	e74a      	b.n	801faa4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fc0e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fc10:	3d01      	subs	r5, #1
 801fc12:	441c      	add	r4, r3
 801fc14:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fc16:	441e      	add	r6, r3
 801fc18:	9b07      	ldr	r3, [sp, #28]
 801fc1a:	3302      	adds	r3, #2
 801fc1c:	9307      	str	r3, [sp, #28]
 801fc1e:	e722      	b.n	801fa66 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801fc20:	d022      	beq.n	801fc68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801fc22:	1e6b      	subs	r3, r5, #1
 801fc24:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801fc26:	fb00 4003 	mla	r0, r0, r3, r4
 801fc2a:	1400      	asrs	r0, r0, #16
 801fc2c:	f53f af37 	bmi.w	801fa9e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fc30:	3901      	subs	r1, #1
 801fc32:	4288      	cmp	r0, r1
 801fc34:	f6bf af33 	bge.w	801fa9e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fc38:	9920      	ldr	r1, [sp, #128]	; 0x80
 801fc3a:	fb01 6303 	mla	r3, r1, r3, r6
 801fc3e:	141b      	asrs	r3, r3, #16
 801fc40:	f53f af2d 	bmi.w	801fa9e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fc44:	3a01      	subs	r2, #1
 801fc46:	4293      	cmp	r3, r2
 801fc48:	f6bf af29 	bge.w	801fa9e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fc4c:	46a8      	mov	r8, r5
 801fc4e:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801fc52:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 801fc56:	f1b8 0f00 	cmp.w	r8, #0
 801fc5a:	dc60      	bgt.n	801fd1e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801fc5c:	9b07      	ldr	r3, [sp, #28]
 801fc5e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801fc62:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801fc66:	9307      	str	r3, [sp, #28]
 801fc68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fc6a:	2b00      	cmp	r3, #0
 801fc6c:	f340 80f8 	ble.w	801fe60 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801fc70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fc74:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801fc76:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fc7a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fc7e:	eef0 6a62 	vmov.f32	s13, s5
 801fc82:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fc86:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fc8a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fc8e:	ee16 4a90 	vmov	r4, s13
 801fc92:	eef0 6a43 	vmov.f32	s13, s6
 801fc96:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fc9a:	ee16 6a90 	vmov	r6, s13
 801fc9e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fca2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fca6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fcaa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fcae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fcb2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fcb6:	ee12 2a90 	vmov	r2, s5
 801fcba:	eef0 2a47 	vmov.f32	s5, s14
 801fcbe:	fb92 f3f3 	sdiv	r3, r2, r3
 801fcc2:	ee13 2a10 	vmov	r2, s6
 801fcc6:	931f      	str	r3, [sp, #124]	; 0x7c
 801fcc8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801fcca:	eeb0 3a67 	vmov.f32	s6, s15
 801fcce:	fb92 f3f3 	sdiv	r3, r2, r3
 801fcd2:	9320      	str	r3, [sp, #128]	; 0x80
 801fcd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fcd6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fcd8:	3b01      	subs	r3, #1
 801fcda:	930a      	str	r3, [sp, #40]	; 0x28
 801fcdc:	bf08      	it	eq
 801fcde:	4615      	moveq	r5, r2
 801fce0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801fce2:	bf18      	it	ne
 801fce4:	461d      	movne	r5, r3
 801fce6:	e6af      	b.n	801fa48 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801fce8:	f111 0a01 	adds.w	sl, r1, #1
 801fcec:	d486      	bmi.n	801fbfc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801fcee:	45d6      	cmp	lr, sl
 801fcf0:	db84      	blt.n	801fbfc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801fcf2:	f110 0a01 	adds.w	sl, r0, #1
 801fcf6:	d481      	bmi.n	801fbfc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801fcf8:	4553      	cmp	r3, sl
 801fcfa:	f6ff af7f 	blt.w	801fbfc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801fcfe:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801fd00:	b21b      	sxth	r3, r3
 801fd02:	9101      	str	r1, [sp, #4]
 801fd04:	4641      	mov	r1, r8
 801fd06:	9300      	str	r3, [sp, #0]
 801fd08:	fa0f f38e 	sxth.w	r3, lr
 801fd0c:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801fd10:	e9cd c704 	strd	ip, r7, [sp, #16]
 801fd14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fd16:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fd18:	f7ff fdb2 	bl	801f880 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 801fd1c:	e76e      	b.n	801fbfc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801fd1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fd20:	1430      	asrs	r0, r6, #16
 801fd22:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801fd24:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 801fd28:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fd2c:	1423      	asrs	r3, r4, #16
 801fd2e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801fd32:	fb01 3000 	mla	r0, r1, r0, r3
 801fd36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd38:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801fd3c:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 801fd40:	8858      	ldrh	r0, [r3, #2]
 801fd42:	f1be 0f00 	cmp.w	lr, #0
 801fd46:	d00b      	beq.n	801fd60 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 801fd48:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801fd4c:	3901      	subs	r1, #1
 801fd4e:	0049      	lsls	r1, r1, #1
 801fd50:	3102      	adds	r1, #2
 801fd52:	eb03 0b01 	add.w	fp, r3, r1
 801fd56:	5a5b      	ldrh	r3, [r3, r1]
 801fd58:	930e      	str	r3, [sp, #56]	; 0x38
 801fd5a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801fd5e:	930f      	str	r3, [sp, #60]	; 0x3c
 801fd60:	ea4f 410c 	mov.w	r1, ip, lsl #16
 801fd64:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801fd68:	fb12 f30e 	smulbb	r3, r2, lr
 801fd6c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801fd70:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 801fd74:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801fd78:	10db      	asrs	r3, r3, #3
 801fd7a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801fd7e:	ea41 010c 	orr.w	r1, r1, ip
 801fd82:	f1ce 0c10 	rsb	ip, lr, #16
 801fd86:	ea4b 0000 	orr.w	r0, fp, r0
 801fd8a:	9f08      	ldr	r7, [sp, #32]
 801fd8c:	ebac 0c02 	sub.w	ip, ip, r2
 801fd90:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801fd94:	f108 38ff 	add.w	r8, r8, #4294967295
 801fd98:	4350      	muls	r0, r2
 801fd9a:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 801fd9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fda0:	fb0c 0c01 	mla	ip, ip, r1, r0
 801fda4:	980e      	ldr	r0, [sp, #56]	; 0x38
 801fda6:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 801fdaa:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 801fdae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fdb0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801fdb4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801fdb8:	0412      	lsls	r2, r2, #16
 801fdba:	ea4b 0101 	orr.w	r1, fp, r1
 801fdbe:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801fdc2:	fb03 c101 	mla	r1, r3, r1, ip
 801fdc6:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 801fdca:	4302      	orrs	r2, r0
 801fdcc:	fb03 1202 	mla	r2, r3, r2, r1
 801fdd0:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 801fdd4:	0952      	lsrs	r2, r2, #5
 801fdd6:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801fdda:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 801fdde:	f8b9 2000 	ldrh.w	r2, [r9]
 801fde2:	ea4b 0303 	orr.w	r3, fp, r3
 801fde6:	1211      	asrs	r1, r2, #8
 801fde8:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 801fdec:	b29b      	uxth	r3, r3
 801fdee:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801fdf2:	00d2      	lsls	r2, r2, #3
 801fdf4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801fdf8:	fb11 f107 	smulbb	r1, r1, r7
 801fdfc:	1218      	asrs	r0, r3, #8
 801fdfe:	fb1c fc07 	smulbb	ip, ip, r7
 801fe02:	b2d2      	uxtb	r2, r2
 801fe04:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801fe08:	fb12 f207 	smulbb	r2, r2, r7
 801fe0c:	fb00 100a 	mla	r0, r0, sl, r1
 801fe10:	10d9      	asrs	r1, r3, #3
 801fe12:	00db      	lsls	r3, r3, #3
 801fe14:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801fe18:	b280      	uxth	r0, r0
 801fe1a:	b2db      	uxtb	r3, r3
 801fe1c:	fb01 c10a 	mla	r1, r1, sl, ip
 801fe20:	fb03 230a 	mla	r3, r3, sl, r2
 801fe24:	1c42      	adds	r2, r0, #1
 801fe26:	b289      	uxth	r1, r1
 801fe28:	b29b      	uxth	r3, r3
 801fe2a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801fe2e:	f101 0c01 	add.w	ip, r1, #1
 801fe32:	1c5a      	adds	r2, r3, #1
 801fe34:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801fe38:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801fe3c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801fe40:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fe42:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801fe46:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801fe4a:	441c      	add	r4, r3
 801fe4c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801fe50:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fe52:	4310      	orrs	r0, r2
 801fe54:	441e      	add	r6, r3
 801fe56:	ea40 000c 	orr.w	r0, r0, ip
 801fe5a:	f829 0b02 	strh.w	r0, [r9], #2
 801fe5e:	e6fa      	b.n	801fc56 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801fe60:	b013      	add	sp, #76	; 0x4c
 801fe62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fe66 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 801fe66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fe6a:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 801fe6e:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 801fe72:	fb0e 4703 	mla	r7, lr, r3, r4
 801fe76:	f1be 0f00 	cmp.w	lr, #0
 801fe7a:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 801fe7e:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 801fe82:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 801fe86:	8808      	ldrh	r0, [r1, #0]
 801fe88:	db60      	blt.n	801ff4c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 801fe8a:	45f1      	cmp	r9, lr
 801fe8c:	dd5e      	ble.n	801ff4c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 801fe8e:	2c00      	cmp	r4, #0
 801fe90:	db5a      	blt.n	801ff48 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 801fe92:	42a3      	cmp	r3, r4
 801fe94:	dd58      	ble.n	801ff48 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 801fe96:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 801fe9a:	1c62      	adds	r2, r4, #1
 801fe9c:	d459      	bmi.n	801ff52 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 801fe9e:	4293      	cmp	r3, r2
 801fea0:	dd57      	ble.n	801ff52 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 801fea2:	2d00      	cmp	r5, #0
 801fea4:	d055      	beq.n	801ff52 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 801fea6:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 801feaa:	f11e 0e01 	adds.w	lr, lr, #1
 801feae:	d454      	bmi.n	801ff5a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 801feb0:	45f1      	cmp	r9, lr
 801feb2:	dd52      	ble.n	801ff5a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 801feb4:	2e00      	cmp	r6, #0
 801feb6:	d050      	beq.n	801ff5a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 801feb8:	2c00      	cmp	r4, #0
 801feba:	db4c      	blt.n	801ff56 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 801febc:	42a3      	cmp	r3, r4
 801febe:	dd4a      	ble.n	801ff56 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 801fec0:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 801fec4:	3401      	adds	r4, #1
 801fec6:	d405      	bmi.n	801fed4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801fec8:	42a3      	cmp	r3, r4
 801feca:	dd03      	ble.n	801fed4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801fecc:	b115      	cbz	r5, 801fed4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801fece:	3301      	adds	r3, #1
 801fed0:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 801fed4:	fb15 f406 	smulbb	r4, r5, r6
 801fed8:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801fedc:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801fee0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801fee4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801fee8:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801feec:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801fef0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801fef4:	ea43 0c0c 	orr.w	ip, r3, ip
 801fef8:	f1c6 0310 	rsb	r3, r6, #16
 801fefc:	ea4e 0707 	orr.w	r7, lr, r7
 801ff00:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801ff04:	1b5b      	subs	r3, r3, r5
 801ff06:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801ff0a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ff0e:	437d      	muls	r5, r7
 801ff10:	fb03 5c0c 	mla	ip, r3, ip, r5
 801ff14:	0403      	lsls	r3, r0, #16
 801ff16:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801ff1a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801ff1e:	4318      	orrs	r0, r3
 801ff20:	0413      	lsls	r3, r2, #16
 801ff22:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ff26:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801ff2a:	fb04 c000 	mla	r0, r4, r0, ip
 801ff2e:	4313      	orrs	r3, r2
 801ff30:	fb06 0003 	mla	r0, r6, r3, r0
 801ff34:	0d43      	lsrs	r3, r0, #21
 801ff36:	0940      	lsrs	r0, r0, #5
 801ff38:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ff3c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801ff40:	4318      	orrs	r0, r3
 801ff42:	8008      	strh	r0, [r1, #0]
 801ff44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ff48:	4684      	mov	ip, r0
 801ff4a:	e7a6      	b.n	801fe9a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 801ff4c:	4607      	mov	r7, r0
 801ff4e:	4684      	mov	ip, r0
 801ff50:	e7ab      	b.n	801feaa <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 801ff52:	4607      	mov	r7, r0
 801ff54:	e7a9      	b.n	801feaa <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 801ff56:	4602      	mov	r2, r0
 801ff58:	e7b4      	b.n	801fec4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 801ff5a:	4602      	mov	r2, r0
 801ff5c:	e7ba      	b.n	801fed4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

0801ff5e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ff5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff62:	b08f      	sub	sp, #60	; 0x3c
 801ff64:	461d      	mov	r5, r3
 801ff66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ff68:	9107      	str	r1, [sp, #28]
 801ff6a:	920c      	str	r2, [sp, #48]	; 0x30
 801ff6c:	6859      	ldr	r1, [r3, #4]
 801ff6e:	681b      	ldr	r3, [r3, #0]
 801ff70:	900d      	str	r0, [sp, #52]	; 0x34
 801ff72:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 801ff76:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 801ff7a:	fb01 2707 	mla	r7, r1, r7, r2
 801ff7e:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 801ff82:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ff84:	f8d3 8000 	ldr.w	r8, [r3]
 801ff88:	9b07      	ldr	r3, [sp, #28]
 801ff8a:	2b00      	cmp	r3, #0
 801ff8c:	dc03      	bgt.n	801ff96 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ff8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ff90:	2b00      	cmp	r3, #0
 801ff92:	f340 8182 	ble.w	802029a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 801ff96:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ff98:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ff9c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ffa0:	1e48      	subs	r0, r1, #1
 801ffa2:	f102 3cff 	add.w	ip, r2, #4294967295
 801ffa6:	2d00      	cmp	r5, #0
 801ffa8:	f340 809b 	ble.w	80200e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 801ffac:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801ffb0:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ffb4:	d406      	bmi.n	801ffc4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ffb6:	4586      	cmp	lr, r0
 801ffb8:	da04      	bge.n	801ffc4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ffba:	2b00      	cmp	r3, #0
 801ffbc:	db02      	blt.n	801ffc4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ffbe:	4563      	cmp	r3, ip
 801ffc0:	f2c0 8090 	blt.w	80200e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ffc4:	f11e 0e01 	adds.w	lr, lr, #1
 801ffc8:	f100 8084 	bmi.w	80200d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801ffcc:	4571      	cmp	r1, lr
 801ffce:	f2c0 8081 	blt.w	80200d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801ffd2:	3301      	adds	r3, #1
 801ffd4:	d47e      	bmi.n	80200d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801ffd6:	429a      	cmp	r2, r3
 801ffd8:	db7c      	blt.n	80200d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801ffda:	46aa      	mov	sl, r5
 801ffdc:	46b9      	mov	r9, r7
 801ffde:	f1ba 0f00 	cmp.w	sl, #0
 801ffe2:	f340 8099 	ble.w	8020118 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801ffe6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ffe8:	1421      	asrs	r1, r4, #16
 801ffea:	ea4f 4026 	mov.w	r0, r6, asr #16
 801ffee:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801fff2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801fff6:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801fffa:	f100 80d1 	bmi.w	80201a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801fffe:	f10e 3bff 	add.w	fp, lr, #4294967295
 8020002:	4559      	cmp	r1, fp
 8020004:	f280 80cc 	bge.w	80201a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020008:	2800      	cmp	r0, #0
 802000a:	f2c0 80c9 	blt.w	80201a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 802000e:	f103 3bff 	add.w	fp, r3, #4294967295
 8020012:	4558      	cmp	r0, fp
 8020014:	f280 80c4 	bge.w	80201a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020018:	fa0f fe8e 	sxth.w	lr, lr
 802001c:	fb00 110e 	mla	r1, r0, lr, r1
 8020020:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8020024:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8020028:	8841      	ldrh	r1, [r0, #2]
 802002a:	f1bc 0f00 	cmp.w	ip, #0
 802002e:	d00b      	beq.n	8020048 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 8020030:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8020034:	3b01      	subs	r3, #1
 8020036:	005b      	lsls	r3, r3, #1
 8020038:	3302      	adds	r3, #2
 802003a:	eb00 0e03 	add.w	lr, r0, r3
 802003e:	5ac3      	ldrh	r3, [r0, r3]
 8020040:	9308      	str	r3, [sp, #32]
 8020042:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8020046:	9309      	str	r3, [sp, #36]	; 0x24
 8020048:	ea4f 400b 	mov.w	r0, fp, lsl #16
 802004c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8020050:	fb12 f30c 	smulbb	r3, r2, ip
 8020054:	f1cc 0e10 	rsb	lr, ip, #16
 8020058:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802005c:	10db      	asrs	r3, r3, #3
 802005e:	ebae 0e02 	sub.w	lr, lr, r2
 8020062:	ea40 000b 	orr.w	r0, r0, fp
 8020066:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802006a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802006e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8020072:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020076:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 802007a:	ea4b 0101 	orr.w	r1, fp, r1
 802007e:	4351      	muls	r1, r2
 8020080:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020082:	fb0e 1e00 	mla	lr, lr, r0, r1
 8020086:	0410      	lsls	r0, r2, #16
 8020088:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802008c:	9908      	ldr	r1, [sp, #32]
 802008e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020092:	4310      	orrs	r0, r2
 8020094:	9a08      	ldr	r2, [sp, #32]
 8020096:	0412      	lsls	r2, r2, #16
 8020098:	fb03 e000 	mla	r0, r3, r0, lr
 802009c:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80200a0:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80200a4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80200a8:	ea42 020e 	orr.w	r2, r2, lr
 80200ac:	fb03 0302 	mla	r3, r3, r2, r0
 80200b0:	0d5a      	lsrs	r2, r3, #21
 80200b2:	095b      	lsrs	r3, r3, #5
 80200b4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80200b8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80200bc:	4313      	orrs	r3, r2
 80200be:	f8a9 3000 	strh.w	r3, [r9]
 80200c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80200c4:	f109 0902 	add.w	r9, r9, #2
 80200c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80200cc:	441c      	add	r4, r3
 80200ce:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80200d0:	441e      	add	r6, r3
 80200d2:	e784      	b.n	801ffde <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80200d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80200d6:	3d01      	subs	r5, #1
 80200d8:	3702      	adds	r7, #2
 80200da:	441c      	add	r4, r3
 80200dc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80200de:	441e      	add	r6, r3
 80200e0:	e761      	b.n	801ffa6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80200e2:	d01d      	beq.n	8020120 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80200e4:	1e6b      	subs	r3, r5, #1
 80200e6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80200e8:	fb00 4003 	mla	r0, r0, r3, r4
 80200ec:	1400      	asrs	r0, r0, #16
 80200ee:	f53f af74 	bmi.w	801ffda <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80200f2:	3901      	subs	r1, #1
 80200f4:	4288      	cmp	r0, r1
 80200f6:	f6bf af70 	bge.w	801ffda <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80200fa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80200fc:	fb01 6303 	mla	r3, r1, r3, r6
 8020100:	141b      	asrs	r3, r3, #16
 8020102:	f53f af6a 	bmi.w	801ffda <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020106:	3a01      	subs	r2, #1
 8020108:	4293      	cmp	r3, r2
 802010a:	f6bf af66 	bge.w	801ffda <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802010e:	46a9      	mov	r9, r5
 8020110:	46ba      	mov	sl, r7
 8020112:	f1b9 0f00 	cmp.w	r9, #0
 8020116:	dc5b      	bgt.n	80201d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8020118:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802011c:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8020120:	9b07      	ldr	r3, [sp, #28]
 8020122:	2b00      	cmp	r3, #0
 8020124:	f340 80b9 	ble.w	802029a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8020128:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802012c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802012e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020132:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020136:	eef0 6a62 	vmov.f32	s13, s5
 802013a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802013e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020142:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020146:	ee16 4a90 	vmov	r4, s13
 802014a:	eef0 6a43 	vmov.f32	s13, s6
 802014e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020152:	ee16 6a90 	vmov	r6, s13
 8020156:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802015a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802015e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020162:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020166:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802016a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802016e:	ee12 2a90 	vmov	r2, s5
 8020172:	eef0 2a47 	vmov.f32	s5, s14
 8020176:	fb92 f3f3 	sdiv	r3, r2, r3
 802017a:	ee13 2a10 	vmov	r2, s6
 802017e:	931b      	str	r3, [sp, #108]	; 0x6c
 8020180:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020182:	eeb0 3a67 	vmov.f32	s6, s15
 8020186:	fb92 f3f3 	sdiv	r3, r2, r3
 802018a:	931c      	str	r3, [sp, #112]	; 0x70
 802018c:	9b07      	ldr	r3, [sp, #28]
 802018e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020190:	3b01      	subs	r3, #1
 8020192:	9307      	str	r3, [sp, #28]
 8020194:	bf08      	it	eq
 8020196:	4615      	moveq	r5, r2
 8020198:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802019a:	bf18      	it	ne
 802019c:	461d      	movne	r5, r3
 802019e:	e6f3      	b.n	801ff88 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80201a0:	f111 0b01 	adds.w	fp, r1, #1
 80201a4:	d48d      	bmi.n	80200c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80201a6:	45de      	cmp	lr, fp
 80201a8:	db8b      	blt.n	80200c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80201aa:	f110 0b01 	adds.w	fp, r0, #1
 80201ae:	d488      	bmi.n	80200c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80201b0:	455b      	cmp	r3, fp
 80201b2:	db86      	blt.n	80200c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80201b4:	b21b      	sxth	r3, r3
 80201b6:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80201ba:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 80201be:	9300      	str	r3, [sp, #0]
 80201c0:	4642      	mov	r2, r8
 80201c2:	fa0f f38e 	sxth.w	r3, lr
 80201c6:	4649      	mov	r1, r9
 80201c8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80201ca:	f7ff fe4c 	bl	801fe66 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 80201ce:	e778      	b.n	80200c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80201d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80201d2:	1420      	asrs	r0, r4, #16
 80201d4:	1431      	asrs	r1, r6, #16
 80201d6:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80201da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80201de:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80201e2:	fb03 0101 	mla	r1, r3, r1, r0
 80201e6:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80201ea:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 80201ee:	8841      	ldrh	r1, [r0, #2]
 80201f0:	f1be 0f00 	cmp.w	lr, #0
 80201f4:	d00b      	beq.n	802020e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80201f6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80201fa:	3b01      	subs	r3, #1
 80201fc:	005b      	lsls	r3, r3, #1
 80201fe:	3302      	adds	r3, #2
 8020200:	eb00 0b03 	add.w	fp, r0, r3
 8020204:	5ac3      	ldrh	r3, [r0, r3]
 8020206:	930a      	str	r3, [sp, #40]	; 0x28
 8020208:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 802020c:	930b      	str	r3, [sp, #44]	; 0x2c
 802020e:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8020212:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8020216:	fb12 f30e 	smulbb	r3, r2, lr
 802021a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802021e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020222:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8020226:	10db      	asrs	r3, r3, #3
 8020228:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802022c:	ea40 000c 	orr.w	r0, r0, ip
 8020230:	f1ce 0c10 	rsb	ip, lr, #16
 8020234:	ea4b 0101 	orr.w	r1, fp, r1
 8020238:	f109 39ff 	add.w	r9, r9, #4294967295
 802023c:	ebac 0c02 	sub.w	ip, ip, r2
 8020240:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8020244:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8020248:	4351      	muls	r1, r2
 802024a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802024c:	fb0c 1c00 	mla	ip, ip, r0, r1
 8020250:	990a      	ldr	r1, [sp, #40]	; 0x28
 8020252:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8020256:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 802025a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802025c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020260:	0412      	lsls	r2, r2, #16
 8020262:	ea4b 0000 	orr.w	r0, fp, r0
 8020266:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 802026a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802026e:	fb03 c000 	mla	r0, r3, r0, ip
 8020272:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8020276:	ea42 0b0b 	orr.w	fp, r2, fp
 802027a:	fb03 000b 	mla	r0, r3, fp, r0
 802027e:	0d43      	lsrs	r3, r0, #21
 8020280:	0940      	lsrs	r0, r0, #5
 8020282:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020286:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802028a:	4318      	orrs	r0, r3
 802028c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802028e:	441c      	add	r4, r3
 8020290:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020292:	f82a 0b02 	strh.w	r0, [sl], #2
 8020296:	441e      	add	r6, r3
 8020298:	e73b      	b.n	8020112 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802029a:	b00f      	add	sp, #60	; 0x3c
 802029c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080202a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 80202a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202a4:	b085      	sub	sp, #20
 80202a6:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 80202aa:	9102      	str	r1, [sp, #8]
 80202ac:	2c00      	cmp	r4, #0
 80202ae:	fb04 7103 	mla	r1, r4, r3, r7
 80202b2:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 80202b6:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 80202ba:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 80202be:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80202c2:	f2c0 811b 	blt.w	80204fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 80202c6:	45a6      	cmp	lr, r4
 80202c8:	f340 8118 	ble.w	80204fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 80202cc:	2f00      	cmp	r7, #0
 80202ce:	f2c0 8113 	blt.w	80204f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 80202d2:	42bb      	cmp	r3, r7
 80202d4:	f340 8110 	ble.w	80204f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 80202d8:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 80202dc:	1c7a      	adds	r2, r7, #1
 80202de:	f100 8110 	bmi.w	8020502 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 80202e2:	4293      	cmp	r3, r2
 80202e4:	f340 810d 	ble.w	8020502 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 80202e8:	2e00      	cmp	r6, #0
 80202ea:	f000 810c 	beq.w	8020506 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 80202ee:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80202f2:	3401      	adds	r4, #1
 80202f4:	f100 810b 	bmi.w	802050e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 80202f8:	45a6      	cmp	lr, r4
 80202fa:	f340 8108 	ble.w	802050e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 80202fe:	2800      	cmp	r0, #0
 8020300:	f000 8108 	beq.w	8020514 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 8020304:	2f00      	cmp	r7, #0
 8020306:	f2c0 8100 	blt.w	802050a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 802030a:	42bb      	cmp	r3, r7
 802030c:	f340 80fd 	ble.w	802050a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8020310:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8020314:	3701      	adds	r7, #1
 8020316:	f100 8100 	bmi.w	802051a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 802031a:	42bb      	cmp	r3, r7
 802031c:	f340 80fd 	ble.w	802051a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8020320:	2e00      	cmp	r6, #0
 8020322:	f000 80fc 	beq.w	802051e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 8020326:	3301      	adds	r3, #1
 8020328:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 802032c:	b2b6      	uxth	r6, r6
 802032e:	b280      	uxth	r0, r0
 8020330:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8020334:	fb00 fe06 	mul.w	lr, r0, r6
 8020338:	0136      	lsls	r6, r6, #4
 802033a:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802033e:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8020342:	eba6 070e 	sub.w	r7, r6, lr
 8020346:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 802034a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802034e:	b280      	uxth	r0, r0
 8020350:	b2bf      	uxth	r7, r7
 8020352:	1a1b      	subs	r3, r3, r0
 8020354:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020358:	fb0a f607 	mul.w	r6, sl, r7
 802035c:	b29b      	uxth	r3, r3
 802035e:	fb0b 6603 	mla	r6, fp, r3, r6
 8020362:	fb00 6609 	mla	r6, r0, r9, r6
 8020366:	fb0e 6608 	mla	r6, lr, r8, r6
 802036a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802036e:	9600      	str	r6, [sp, #0]
 8020370:	2e00      	cmp	r6, #0
 8020372:	f000 80be 	beq.w	80204f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 8020376:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802037a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802037e:	9e02      	ldr	r6, [sp, #8]
 8020380:	fb0b fc0c 	mul.w	ip, fp, ip
 8020384:	fb0b f505 	mul.w	r5, fp, r5
 8020388:	8836      	ldrh	r6, [r6, #0]
 802038a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802038e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020392:	9501      	str	r5, [sp, #4]
 8020394:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8020398:	44dc      	add	ip, fp
 802039a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802039e:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 80203a2:	9503      	str	r5, [sp, #12]
 80203a4:	9d01      	ldr	r5, [sp, #4]
 80203a6:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80203aa:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80203ae:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 80203b2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80203b6:	fb0a fc0c 	mul.w	ip, sl, ip
 80203ba:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80203be:	fb0a fa01 	mul.w	sl, sl, r1
 80203c2:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80203c6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80203ca:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 80203ce:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80203d2:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80203d6:	4465      	add	r5, ip
 80203d8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80203dc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80203e0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80203e4:	fb09 fc0c 	mul.w	ip, r9, ip
 80203e8:	0a2d      	lsrs	r5, r5, #8
 80203ea:	fb09 f904 	mul.w	r9, r9, r4
 80203ee:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80203f2:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80203f6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80203fa:	f509 7480 	add.w	r4, r9, #256	; 0x100
 80203fe:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020402:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8020406:	437d      	muls	r5, r7
 8020408:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802040c:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8020410:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020414:	4461      	add	r1, ip
 8020416:	fb08 f404 	mul.w	r4, r8, r4
 802041a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802041e:	fb08 f802 	mul.w	r8, r8, r2
 8020422:	0a09      	lsrs	r1, r1, #8
 8020424:	0a22      	lsrs	r2, r4, #8
 8020426:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 802042a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802042e:	fb07 f70a 	mul.w	r7, r7, sl
 8020432:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020436:	4414      	add	r4, r2
 8020438:	f508 7280 	add.w	r2, r8, #256	; 0x100
 802043c:	0a24      	lsrs	r4, r4, #8
 802043e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8020442:	9a03      	ldr	r2, [sp, #12]
 8020444:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020448:	fb02 5503 	mla	r5, r2, r3, r5
 802044c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020450:	9a00      	ldr	r2, [sp, #0]
 8020452:	fb04 540e 	mla	r4, r4, lr, r5
 8020456:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802045a:	1235      	asrs	r5, r6, #8
 802045c:	fb01 4100 	mla	r1, r1, r0, r4
 8020460:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8020464:	0a09      	lsrs	r1, r1, #8
 8020466:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 802046a:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 802046e:	fb03 7101 	mla	r1, r3, r1, r7
 8020472:	fb0e 1e08 	mla	lr, lr, r8, r1
 8020476:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 802047a:	fb00 e101 	mla	r1, r0, r1, lr
 802047e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8020482:	b287      	uxth	r7, r0
 8020484:	0a09      	lsrs	r1, r1, #8
 8020486:	437a      	muls	r2, r7
 8020488:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802048c:	1c53      	adds	r3, r2, #1
 802048e:	4321      	orrs	r1, r4
 8020490:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020494:	0c0a      	lsrs	r2, r1, #16
 8020496:	f3c1 2407 	ubfx	r4, r1, #8, #8
 802049a:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 802049e:	b2c8      	uxtb	r0, r1
 80204a0:	fb12 f207 	smulbb	r2, r2, r7
 80204a4:	fb14 f407 	smulbb	r4, r4, r7
 80204a8:	b2db      	uxtb	r3, r3
 80204aa:	fb10 f007 	smulbb	r0, r0, r7
 80204ae:	fb05 2503 	mla	r5, r5, r3, r2
 80204b2:	10f2      	asrs	r2, r6, #3
 80204b4:	00f6      	lsls	r6, r6, #3
 80204b6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80204ba:	b2ad      	uxth	r5, r5
 80204bc:	b2f6      	uxtb	r6, r6
 80204be:	fb02 4203 	mla	r2, r2, r3, r4
 80204c2:	fb06 0303 	mla	r3, r6, r3, r0
 80204c6:	b294      	uxth	r4, r2
 80204c8:	b299      	uxth	r1, r3
 80204ca:	1c6b      	adds	r3, r5, #1
 80204cc:	1c62      	adds	r2, r4, #1
 80204ce:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80204d2:	1c4b      	adds	r3, r1, #1
 80204d4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80204d8:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80204dc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80204e0:	0952      	lsrs	r2, r2, #5
 80204e2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80204e6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80204ea:	432b      	orrs	r3, r5
 80204ec:	4313      	orrs	r3, r2
 80204ee:	9a02      	ldr	r2, [sp, #8]
 80204f0:	8013      	strh	r3, [r2, #0]
 80204f2:	b005      	add	sp, #20
 80204f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80204f8:	2500      	movs	r5, #0
 80204fa:	e6ef      	b.n	80202dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 80204fc:	2100      	movs	r1, #0
 80204fe:	460d      	mov	r5, r1
 8020500:	e6f7      	b.n	80202f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8020502:	2100      	movs	r1, #0
 8020504:	e6f5      	b.n	80202f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8020506:	4631      	mov	r1, r6
 8020508:	e6f3      	b.n	80202f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 802050a:	2400      	movs	r4, #0
 802050c:	e702      	b.n	8020314 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 802050e:	2200      	movs	r2, #0
 8020510:	4614      	mov	r4, r2
 8020512:	e70b      	b.n	802032c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8020514:	4602      	mov	r2, r0
 8020516:	4604      	mov	r4, r0
 8020518:	e708      	b.n	802032c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802051a:	2200      	movs	r2, #0
 802051c:	e706      	b.n	802032c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802051e:	4632      	mov	r2, r6
 8020520:	e704      	b.n	802032c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

08020522 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020522:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020526:	b09d      	sub	sp, #116	; 0x74
 8020528:	9219      	str	r2, [sp, #100]	; 0x64
 802052a:	9307      	str	r3, [sp, #28]
 802052c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802052e:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8020532:	901b      	str	r0, [sp, #108]	; 0x6c
 8020534:	931a      	str	r3, [sp, #104]	; 0x68
 8020536:	6850      	ldr	r0, [r2, #4]
 8020538:	9117      	str	r1, [sp, #92]	; 0x5c
 802053a:	6812      	ldr	r2, [r2, #0]
 802053c:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8020540:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8020544:	fb00 1303 	mla	r3, r0, r3, r1
 8020548:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802054c:	930a      	str	r3, [sp, #40]	; 0x28
 802054e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020550:	681b      	ldr	r3, [r3, #0]
 8020552:	9310      	str	r3, [sp, #64]	; 0x40
 8020554:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8020558:	930b      	str	r3, [sp, #44]	; 0x2c
 802055a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802055c:	2b00      	cmp	r3, #0
 802055e:	dc03      	bgt.n	8020568 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8020560:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020562:	2b00      	cmp	r3, #0
 8020564:	f340 8375 	ble.w	8020c52 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8020568:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802056a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802056e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020572:	1e48      	subs	r0, r1, #1
 8020574:	1e57      	subs	r7, r2, #1
 8020576:	9b07      	ldr	r3, [sp, #28]
 8020578:	2b00      	cmp	r3, #0
 802057a:	f340 818e 	ble.w	802089a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 802057e:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020582:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020586:	d406      	bmi.n	8020596 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020588:	4584      	cmp	ip, r0
 802058a:	da04      	bge.n	8020596 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802058c:	2b00      	cmp	r3, #0
 802058e:	db02      	blt.n	8020596 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020590:	42bb      	cmp	r3, r7
 8020592:	f2c0 8183 	blt.w	802089c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8020596:	f11c 0c01 	adds.w	ip, ip, #1
 802059a:	f100 8173 	bmi.w	8020884 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802059e:	4561      	cmp	r1, ip
 80205a0:	f2c0 8170 	blt.w	8020884 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80205a4:	3301      	adds	r3, #1
 80205a6:	f100 816d 	bmi.w	8020884 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80205aa:	429a      	cmp	r2, r3
 80205ac:	f2c0 816a 	blt.w	8020884 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80205b0:	9b07      	ldr	r3, [sp, #28]
 80205b2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80205b4:	9318      	str	r3, [sp, #96]	; 0x60
 80205b6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80205b8:	2b00      	cmp	r3, #0
 80205ba:	f340 818c 	ble.w	80208d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 80205be:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80205c0:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80205c4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80205c6:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80205ca:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80205ce:	1422      	asrs	r2, r4, #16
 80205d0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80205d4:	689b      	ldr	r3, [r3, #8]
 80205d6:	f100 81cd 	bmi.w	8020974 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80205da:	f103 38ff 	add.w	r8, r3, #4294967295
 80205de:	4542      	cmp	r2, r8
 80205e0:	f280 81c8 	bge.w	8020974 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80205e4:	f1bc 0f00 	cmp.w	ip, #0
 80205e8:	f2c0 81c4 	blt.w	8020974 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80205ec:	f10e 38ff 	add.w	r8, lr, #4294967295
 80205f0:	45c4      	cmp	ip, r8
 80205f2:	f280 81bf 	bge.w	8020974 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80205f6:	b21b      	sxth	r3, r3
 80205f8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80205fa:	fb0c 2203 	mla	r2, ip, r3, r2
 80205fe:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8020602:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020606:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802060a:	2800      	cmp	r0, #0
 802060c:	f000 81a9 	beq.w	8020962 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8020610:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8020614:	950c      	str	r5, [sp, #48]	; 0x30
 8020616:	0e2d      	lsrs	r5, r5, #24
 8020618:	9513      	str	r5, [sp, #76]	; 0x4c
 802061a:	b181      	cbz	r1, 802063e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802061c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8020620:	3b01      	subs	r3, #1
 8020622:	009b      	lsls	r3, r3, #2
 8020624:	3304      	adds	r3, #4
 8020626:	eb08 0c03 	add.w	ip, r8, r3
 802062a:	f858 3003 	ldr.w	r3, [r8, r3]
 802062e:	9308      	str	r3, [sp, #32]
 8020630:	0e1b      	lsrs	r3, r3, #24
 8020632:	9311      	str	r3, [sp, #68]	; 0x44
 8020634:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8020638:	930d      	str	r3, [sp, #52]	; 0x34
 802063a:	0e1b      	lsrs	r3, r3, #24
 802063c:	9314      	str	r3, [sp, #80]	; 0x50
 802063e:	b280      	uxth	r0, r0
 8020640:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020642:	b289      	uxth	r1, r1
 8020644:	fb00 f901 	mul.w	r9, r0, r1
 8020648:	0100      	lsls	r0, r0, #4
 802064a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802064e:	eba0 0809 	sub.w	r8, r0, r9
 8020652:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8020656:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020658:	b289      	uxth	r1, r1
 802065a:	fa1f f888 	uxth.w	r8, r8
 802065e:	1a5b      	subs	r3, r3, r1
 8020660:	fb08 f000 	mul.w	r0, r8, r0
 8020664:	b29b      	uxth	r3, r3
 8020666:	fb03 000e 	mla	r0, r3, lr, r0
 802066a:	fb01 0005 	mla	r0, r1, r5, r0
 802066e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020670:	fb09 0005 	mla	r0, r9, r5, r0
 8020674:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020678:	2800      	cmp	r0, #0
 802067a:	f000 80fa 	beq.w	8020872 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802067e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020682:	d01b      	beq.n	80206bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020684:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8020688:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802068c:	fb0e fa0a 	mul.w	sl, lr, sl
 8020690:	fb0e fe02 	mul.w	lr, lr, r2
 8020694:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8020698:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802069c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80206a0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80206a4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80206a8:	4452      	add	r2, sl
 80206aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80206ae:	0a12      	lsrs	r2, r2, #8
 80206b0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80206b4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80206b8:	ea42 020c 	orr.w	r2, r2, ip
 80206bc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80206be:	2dff      	cmp	r5, #255	; 0xff
 80206c0:	d021      	beq.n	8020706 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 80206c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80206c4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80206c8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80206ca:	fb05 fb0b 	mul.w	fp, r5, fp
 80206ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80206d0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80206d4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80206d6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80206da:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80206de:	fb05 fa0a 	mul.w	sl, r5, sl
 80206e2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80206e6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80206ea:	44de      	add	lr, fp
 80206ec:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80206f0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80206f4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80206f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80206fc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020700:	ea4e 050a 	orr.w	r5, lr, sl
 8020704:	950c      	str	r5, [sp, #48]	; 0x30
 8020706:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020708:	2dff      	cmp	r5, #255	; 0xff
 802070a:	d021      	beq.n	8020750 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 802070c:	9d08      	ldr	r5, [sp, #32]
 802070e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8020712:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020714:	fb05 fb0b 	mul.w	fp, r5, fp
 8020718:	9d08      	ldr	r5, [sp, #32]
 802071a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802071e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020720:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020724:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020728:	fb05 fa0a 	mul.w	sl, r5, sl
 802072c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020730:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020734:	44de      	add	lr, fp
 8020736:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802073a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802073e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020742:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020746:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802074a:	ea4e 050a 	orr.w	r5, lr, sl
 802074e:	9508      	str	r5, [sp, #32]
 8020750:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020752:	2dff      	cmp	r5, #255	; 0xff
 8020754:	d021      	beq.n	802079a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8020756:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020758:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802075c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802075e:	fb05 fb0b 	mul.w	fp, r5, fp
 8020762:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020764:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8020768:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802076a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802076e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020772:	fb05 fa0a 	mul.w	sl, r5, sl
 8020776:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802077a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802077e:	44de      	add	lr, fp
 8020780:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020784:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020788:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802078c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020790:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020794:	ea4e 050a 	orr.w	r5, lr, sl
 8020798:	950d      	str	r5, [sp, #52]	; 0x34
 802079a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802079c:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80207a0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80207a4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80207a8:	9d08      	ldr	r5, [sp, #32]
 80207aa:	fb08 fc0c 	mul.w	ip, r8, ip
 80207ae:	fb03 cc0e 	mla	ip, r3, lr, ip
 80207b2:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80207b6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80207b8:	fb01 cc0e 	mla	ip, r1, lr, ip
 80207bc:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80207c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80207c2:	fb09 cc0e 	mla	ip, r9, lr, ip
 80207c6:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80207ca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80207cc:	fb08 f80e 	mul.w	r8, r8, lr
 80207d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80207d4:	fb03 8202 	mla	r2, r3, r2, r8
 80207d8:	9b08      	ldr	r3, [sp, #32]
 80207da:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80207de:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 80207e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80207e4:	fb01 220a 	mla	r2, r1, sl, r2
 80207e8:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 80207ec:	883b      	ldrh	r3, [r7, #0]
 80207ee:	fb09 2901 	mla	r9, r9, r1, r2
 80207f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80207f4:	1219      	asrs	r1, r3, #8
 80207f6:	4342      	muls	r2, r0
 80207f8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80207fc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8020800:	1c50      	adds	r0, r2, #1
 8020802:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020806:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802080a:	ea4c 0c09 	orr.w	ip, ip, r9
 802080e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8020812:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8020816:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 802081a:	fa5f fc8c 	uxtb.w	ip, ip
 802081e:	fb12 f205 	smulbb	r2, r2, r5
 8020822:	b2c0      	uxtb	r0, r0
 8020824:	fb1c fc05 	smulbb	ip, ip, r5
 8020828:	fb01 2100 	mla	r1, r1, r0, r2
 802082c:	10da      	asrs	r2, r3, #3
 802082e:	fb1e fe05 	smulbb	lr, lr, r5
 8020832:	00db      	lsls	r3, r3, #3
 8020834:	b289      	uxth	r1, r1
 8020836:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802083a:	b2db      	uxtb	r3, r3
 802083c:	fb02 e200 	mla	r2, r2, r0, lr
 8020840:	fb03 c300 	mla	r3, r3, r0, ip
 8020844:	b292      	uxth	r2, r2
 8020846:	fa1f fc83 	uxth.w	ip, r3
 802084a:	1c4b      	adds	r3, r1, #1
 802084c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020850:	f10c 0301 	add.w	r3, ip, #1
 8020854:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8020858:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802085c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020860:	430b      	orrs	r3, r1
 8020862:	1c51      	adds	r1, r2, #1
 8020864:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020868:	0952      	lsrs	r2, r2, #5
 802086a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802086e:	4313      	orrs	r3, r2
 8020870:	803b      	strh	r3, [r7, #0]
 8020872:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020874:	3702      	adds	r7, #2
 8020876:	441c      	add	r4, r3
 8020878:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802087a:	441e      	add	r6, r3
 802087c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802087e:	3b01      	subs	r3, #1
 8020880:	9318      	str	r3, [sp, #96]	; 0x60
 8020882:	e698      	b.n	80205b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020884:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020886:	441c      	add	r4, r3
 8020888:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802088a:	441e      	add	r6, r3
 802088c:	9b07      	ldr	r3, [sp, #28]
 802088e:	3b01      	subs	r3, #1
 8020890:	9307      	str	r3, [sp, #28]
 8020892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020894:	3302      	adds	r3, #2
 8020896:	930a      	str	r3, [sp, #40]	; 0x28
 8020898:	e66d      	b.n	8020576 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 802089a:	d023      	beq.n	80208e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 802089c:	9b07      	ldr	r3, [sp, #28]
 802089e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80208a0:	3b01      	subs	r3, #1
 80208a2:	fb00 4003 	mla	r0, r0, r3, r4
 80208a6:	1400      	asrs	r0, r0, #16
 80208a8:	f53f ae82 	bmi.w	80205b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80208ac:	3901      	subs	r1, #1
 80208ae:	4288      	cmp	r0, r1
 80208b0:	f6bf ae7e 	bge.w	80205b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80208b4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80208b6:	fb01 6303 	mla	r3, r1, r3, r6
 80208ba:	141b      	asrs	r3, r3, #16
 80208bc:	f53f ae78 	bmi.w	80205b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80208c0:	3a01      	subs	r2, #1
 80208c2:	4293      	cmp	r3, r2
 80208c4:	f6bf ae74 	bge.w	80205b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80208c8:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80208cc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80208d0:	f1bb 0f00 	cmp.w	fp, #0
 80208d4:	dc6c      	bgt.n	80209b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 80208d6:	9b07      	ldr	r3, [sp, #28]
 80208d8:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80208dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80208de:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80208e2:	930a      	str	r3, [sp, #40]	; 0x28
 80208e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80208e6:	2b00      	cmp	r3, #0
 80208e8:	f340 81b3 	ble.w	8020c52 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80208ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80208f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80208f2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80208f6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80208fa:	eef0 6a62 	vmov.f32	s13, s5
 80208fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020902:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020906:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802090a:	ee16 4a90 	vmov	r4, s13
 802090e:	eef0 6a43 	vmov.f32	s13, s6
 8020912:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020916:	ee16 6a90 	vmov	r6, s13
 802091a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802091e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020922:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020926:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802092a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802092e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020932:	ee12 2a90 	vmov	r2, s5
 8020936:	eef0 2a47 	vmov.f32	s5, s14
 802093a:	fb92 f3f3 	sdiv	r3, r2, r3
 802093e:	ee13 2a10 	vmov	r2, s6
 8020942:	9329      	str	r3, [sp, #164]	; 0xa4
 8020944:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020946:	eeb0 3a67 	vmov.f32	s6, s15
 802094a:	fb92 f3f3 	sdiv	r3, r2, r3
 802094e:	932a      	str	r3, [sp, #168]	; 0xa8
 8020950:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020952:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8020954:	3b01      	subs	r3, #1
 8020956:	9317      	str	r3, [sp, #92]	; 0x5c
 8020958:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802095a:	bf08      	it	eq
 802095c:	4613      	moveq	r3, r2
 802095e:	9307      	str	r3, [sp, #28]
 8020960:	e5fb      	b.n	802055a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8020962:	2900      	cmp	r1, #0
 8020964:	f43f ae6b 	beq.w	802063e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8020968:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802096c:	9308      	str	r3, [sp, #32]
 802096e:	0e1b      	lsrs	r3, r3, #24
 8020970:	9311      	str	r3, [sp, #68]	; 0x44
 8020972:	e664      	b.n	802063e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8020974:	f112 0801 	adds.w	r8, r2, #1
 8020978:	f53f af7b 	bmi.w	8020872 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802097c:	4543      	cmp	r3, r8
 802097e:	f6ff af78 	blt.w	8020872 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8020982:	f11c 0801 	adds.w	r8, ip, #1
 8020986:	f53f af74 	bmi.w	8020872 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802098a:	45c6      	cmp	lr, r8
 802098c:	f6ff af71 	blt.w	8020872 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8020990:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8020992:	b21b      	sxth	r3, r3
 8020994:	9201      	str	r2, [sp, #4]
 8020996:	fa0f f28e 	sxth.w	r2, lr
 802099a:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802099e:	e9cd c002 	strd	ip, r0, [sp, #8]
 80209a2:	9200      	str	r2, [sp, #0]
 80209a4:	4639      	mov	r1, r7
 80209a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80209a8:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80209aa:	f7ff fc79 	bl	80202a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 80209ae:	e760      	b.n	8020872 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80209b0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80209b2:	1427      	asrs	r7, r4, #16
 80209b4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80209b6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80209ba:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80209be:	1433      	asrs	r3, r6, #16
 80209c0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80209c4:	fb01 7303 	mla	r3, r1, r3, r7
 80209c8:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 80209cc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80209d0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80209d4:	2a00      	cmp	r2, #0
 80209d6:	f000 8133 	beq.w	8020c40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 80209da:	687d      	ldr	r5, [r7, #4]
 80209dc:	950e      	str	r5, [sp, #56]	; 0x38
 80209de:	0e2d      	lsrs	r5, r5, #24
 80209e0:	9515      	str	r5, [sp, #84]	; 0x54
 80209e2:	b178      	cbz	r0, 8020a04 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80209e4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80209e8:	3901      	subs	r1, #1
 80209ea:	0089      	lsls	r1, r1, #2
 80209ec:	3104      	adds	r1, #4
 80209ee:	eb07 0e01 	add.w	lr, r7, r1
 80209f2:	5879      	ldr	r1, [r7, r1]
 80209f4:	9109      	str	r1, [sp, #36]	; 0x24
 80209f6:	0e09      	lsrs	r1, r1, #24
 80209f8:	9112      	str	r1, [sp, #72]	; 0x48
 80209fa:	f8de 1004 	ldr.w	r1, [lr, #4]
 80209fe:	910f      	str	r1, [sp, #60]	; 0x3c
 8020a00:	0e09      	lsrs	r1, r1, #24
 8020a02:	9116      	str	r1, [sp, #88]	; 0x58
 8020a04:	b292      	uxth	r2, r2
 8020a06:	9915      	ldr	r1, [sp, #84]	; 0x54
 8020a08:	b280      	uxth	r0, r0
 8020a0a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020a0c:	fb02 f800 	mul.w	r8, r2, r0
 8020a10:	0112      	lsls	r2, r2, #4
 8020a12:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8020a16:	eba2 0e08 	sub.w	lr, r2, r8
 8020a1a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8020a1e:	b280      	uxth	r0, r0
 8020a20:	fa1f fe8e 	uxth.w	lr, lr
 8020a24:	1a12      	subs	r2, r2, r0
 8020a26:	fb0e f101 	mul.w	r1, lr, r1
 8020a2a:	b292      	uxth	r2, r2
 8020a2c:	fb02 110c 	mla	r1, r2, ip, r1
 8020a30:	fb00 1105 	mla	r1, r0, r5, r1
 8020a34:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8020a36:	fb08 1105 	mla	r1, r8, r5, r1
 8020a3a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020a3e:	2900      	cmp	r1, #0
 8020a40:	f000 80f5 	beq.w	8020c2e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8020a44:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020a48:	d019      	beq.n	8020a7e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8020a4a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020a4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020a52:	fb0c fa0a 	mul.w	sl, ip, sl
 8020a56:	fb0c fc03 	mul.w	ip, ip, r3
 8020a5a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020a5e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020a62:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8020a66:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020a6a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020a6e:	4453      	add	r3, sl
 8020a70:	0a3f      	lsrs	r7, r7, #8
 8020a72:	0a1b      	lsrs	r3, r3, #8
 8020a74:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020a78:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020a7c:	433b      	orrs	r3, r7
 8020a7e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8020a80:	2dff      	cmp	r5, #255	; 0xff
 8020a82:	d020      	beq.n	8020ac6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8020a84:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8020a86:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8020a8a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8020a8c:	436f      	muls	r7, r5
 8020a8e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8020a90:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020a94:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8020a98:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8020a9a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020a9e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020aa2:	fb05 fa0a 	mul.w	sl, r5, sl
 8020aa6:	44bc      	add	ip, r7
 8020aa8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020aac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020ab0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020ab4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020ab8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020abc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020ac0:	ea4c 050a 	orr.w	r5, ip, sl
 8020ac4:	950e      	str	r5, [sp, #56]	; 0x38
 8020ac6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020ac8:	2dff      	cmp	r5, #255	; 0xff
 8020aca:	d020      	beq.n	8020b0e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8020acc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8020ace:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8020ad2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020ad4:	436f      	muls	r7, r5
 8020ad6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8020ad8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020adc:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8020ae0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020ae2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020ae6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020aea:	fb05 fa0a 	mul.w	sl, r5, sl
 8020aee:	44bc      	add	ip, r7
 8020af0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020af4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020af8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020afc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020b00:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020b04:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020b08:	ea4c 050a 	orr.w	r5, ip, sl
 8020b0c:	9509      	str	r5, [sp, #36]	; 0x24
 8020b0e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8020b10:	2dff      	cmp	r5, #255	; 0xff
 8020b12:	d020      	beq.n	8020b56 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8020b14:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8020b16:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8020b1a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8020b1c:	436f      	muls	r7, r5
 8020b1e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8020b20:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020b24:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8020b28:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8020b2a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020b2e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020b32:	fb05 fa0a 	mul.w	sl, r5, sl
 8020b36:	44bc      	add	ip, r7
 8020b38:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020b3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020b40:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020b44:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020b48:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020b4c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020b50:	ea4c 050a 	orr.w	r5, ip, sl
 8020b54:	950f      	str	r5, [sp, #60]	; 0x3c
 8020b56:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8020b58:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020b5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020b60:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8020b64:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8020b66:	fb0e f707 	mul.w	r7, lr, r7
 8020b6a:	fb02 770c 	mla	r7, r2, ip, r7
 8020b6e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8020b72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8020b74:	fb00 770c 	mla	r7, r0, ip, r7
 8020b78:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8020b7c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8020b7e:	fb08 770c 	mla	r7, r8, ip, r7
 8020b82:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8020b86:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8020b88:	fb0e fe0c 	mul.w	lr, lr, ip
 8020b8c:	0a3f      	lsrs	r7, r7, #8
 8020b8e:	fb02 e303 	mla	r3, r2, r3, lr
 8020b92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020b94:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020b98:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020b9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020b9e:	fb00 330a 	mla	r3, r0, sl, r3
 8020ba2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020ba6:	f8b9 0000 	ldrh.w	r0, [r9]
 8020baa:	fb08 3c0c 	mla	ip, r8, ip, r3
 8020bae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020bb0:	1202      	asrs	r2, r0, #8
 8020bb2:	4359      	muls	r1, r3
 8020bb4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020bb8:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8020bbc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020bc0:	1c4b      	adds	r3, r1, #1
 8020bc2:	ea47 070c 	orr.w	r7, r7, ip
 8020bc6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020bca:	0c3b      	lsrs	r3, r7, #16
 8020bcc:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8020bd0:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8020bd4:	b2ff      	uxtb	r7, r7
 8020bd6:	fb13 f305 	smulbb	r3, r3, r5
 8020bda:	b2c9      	uxtb	r1, r1
 8020bdc:	fb17 f705 	smulbb	r7, r7, r5
 8020be0:	fb02 3201 	mla	r2, r2, r1, r3
 8020be4:	10c3      	asrs	r3, r0, #3
 8020be6:	fb1c fc05 	smulbb	ip, ip, r5
 8020bea:	00c0      	lsls	r0, r0, #3
 8020bec:	b292      	uxth	r2, r2
 8020bee:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8020bf2:	b2c0      	uxtb	r0, r0
 8020bf4:	fb03 c301 	mla	r3, r3, r1, ip
 8020bf8:	fb00 7001 	mla	r0, r0, r1, r7
 8020bfc:	1c51      	adds	r1, r2, #1
 8020bfe:	b29b      	uxth	r3, r3
 8020c00:	b280      	uxth	r0, r0
 8020c02:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020c06:	f100 0c01 	add.w	ip, r0, #1
 8020c0a:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8020c0e:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8020c12:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8020c16:	ea4c 0202 	orr.w	r2, ip, r2
 8020c1a:	f103 0c01 	add.w	ip, r3, #1
 8020c1e:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8020c22:	095b      	lsrs	r3, r3, #5
 8020c24:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020c28:	431a      	orrs	r2, r3
 8020c2a:	f8a9 2000 	strh.w	r2, [r9]
 8020c2e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020c30:	f109 0902 	add.w	r9, r9, #2
 8020c34:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020c38:	441c      	add	r4, r3
 8020c3a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020c3c:	441e      	add	r6, r3
 8020c3e:	e647      	b.n	80208d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8020c40:	2800      	cmp	r0, #0
 8020c42:	f43f aedf 	beq.w	8020a04 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8020c46:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8020c4a:	9109      	str	r1, [sp, #36]	; 0x24
 8020c4c:	0e09      	lsrs	r1, r1, #24
 8020c4e:	9112      	str	r1, [sp, #72]	; 0x48
 8020c50:	e6d8      	b.n	8020a04 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8020c52:	b01d      	add	sp, #116	; 0x74
 8020c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020c58 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8020c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c5c:	b085      	sub	sp, #20
 8020c5e:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8020c62:	9102      	str	r1, [sp, #8]
 8020c64:	2c00      	cmp	r4, #0
 8020c66:	fb04 7103 	mla	r1, r4, r3, r7
 8020c6a:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8020c6e:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8020c72:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8020c76:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8020c7a:	f2c0 810c 	blt.w	8020e96 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8020c7e:	45a6      	cmp	lr, r4
 8020c80:	f340 8109 	ble.w	8020e96 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8020c84:	2f00      	cmp	r7, #0
 8020c86:	f2c0 8104 	blt.w	8020e92 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8020c8a:	42bb      	cmp	r3, r7
 8020c8c:	f340 8101 	ble.w	8020e92 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8020c90:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8020c94:	1c7a      	adds	r2, r7, #1
 8020c96:	f100 8101 	bmi.w	8020e9c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8020c9a:	4293      	cmp	r3, r2
 8020c9c:	f340 80fe 	ble.w	8020e9c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8020ca0:	2e00      	cmp	r6, #0
 8020ca2:	f000 80fd 	beq.w	8020ea0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8020ca6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8020caa:	3401      	adds	r4, #1
 8020cac:	f100 80fc 	bmi.w	8020ea8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8020cb0:	45a6      	cmp	lr, r4
 8020cb2:	f340 80f9 	ble.w	8020ea8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8020cb6:	2800      	cmp	r0, #0
 8020cb8:	f000 80f9 	beq.w	8020eae <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8020cbc:	2f00      	cmp	r7, #0
 8020cbe:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8020cc2:	f2c0 80ef 	blt.w	8020ea4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8020cc6:	42bb      	cmp	r3, r7
 8020cc8:	f340 80ec 	ble.w	8020ea4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8020ccc:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8020cd0:	3701      	adds	r7, #1
 8020cd2:	f100 80ef 	bmi.w	8020eb4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8020cd6:	42bb      	cmp	r3, r7
 8020cd8:	f340 80ec 	ble.w	8020eb4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8020cdc:	2e00      	cmp	r6, #0
 8020cde:	f000 80eb 	beq.w	8020eb8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 8020ce2:	6852      	ldr	r2, [r2, #4]
 8020ce4:	b2b6      	uxth	r6, r6
 8020ce6:	b280      	uxth	r0, r0
 8020ce8:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8020cec:	fb00 fe06 	mul.w	lr, r0, r6
 8020cf0:	0136      	lsls	r6, r6, #4
 8020cf2:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8020cf6:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8020cfa:	eba6 070e 	sub.w	r7, r6, lr
 8020cfe:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8020d02:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8020d06:	b280      	uxth	r0, r0
 8020d08:	b2bf      	uxth	r7, r7
 8020d0a:	1a1b      	subs	r3, r3, r0
 8020d0c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020d10:	fb07 f60a 	mul.w	r6, r7, sl
 8020d14:	b29b      	uxth	r3, r3
 8020d16:	fb0b 6603 	mla	r6, fp, r3, r6
 8020d1a:	fb00 6609 	mla	r6, r0, r9, r6
 8020d1e:	fb0e 6608 	mla	r6, lr, r8, r6
 8020d22:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8020d26:	9600      	str	r6, [sp, #0]
 8020d28:	2e00      	cmp	r6, #0
 8020d2a:	f000 80af 	beq.w	8020e8c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 8020d2e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8020d32:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8020d36:	9e02      	ldr	r6, [sp, #8]
 8020d38:	fb0b fc0c 	mul.w	ip, fp, ip
 8020d3c:	fb0b f505 	mul.w	r5, fp, r5
 8020d40:	8836      	ldrh	r6, [r6, #0]
 8020d42:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8020d46:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020d4a:	9501      	str	r5, [sp, #4]
 8020d4c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8020d50:	44dc      	add	ip, fp
 8020d52:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020d56:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8020d5a:	9503      	str	r5, [sp, #12]
 8020d5c:	9d01      	ldr	r5, [sp, #4]
 8020d5e:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8020d62:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8020d66:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8020d6a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8020d6e:	fb0a fc0c 	mul.w	ip, sl, ip
 8020d72:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8020d76:	fb0a fa01 	mul.w	sl, sl, r1
 8020d7a:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8020d7e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020d82:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8020d86:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020d8a:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8020d8e:	4465      	add	r5, ip
 8020d90:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020d94:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020d98:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020d9c:	fb09 fc0c 	mul.w	ip, r9, ip
 8020da0:	0a2d      	lsrs	r5, r5, #8
 8020da2:	fb09 f904 	mul.w	r9, r9, r4
 8020da6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020daa:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8020dae:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020db2:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8020db6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020dba:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8020dbe:	437d      	muls	r5, r7
 8020dc0:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8020dc4:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8020dc8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020dcc:	4461      	add	r1, ip
 8020dce:	fb08 f404 	mul.w	r4, r8, r4
 8020dd2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020dd6:	fb08 f802 	mul.w	r8, r8, r2
 8020dda:	0a09      	lsrs	r1, r1, #8
 8020ddc:	0a22      	lsrs	r2, r4, #8
 8020dde:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8020de2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8020de6:	fb07 f70a 	mul.w	r7, r7, sl
 8020dea:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020dee:	4414      	add	r4, r2
 8020df0:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8020df4:	0a24      	lsrs	r4, r4, #8
 8020df6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8020dfa:	9a03      	ldr	r2, [sp, #12]
 8020dfc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020e00:	fb02 5503 	mla	r5, r2, r3, r5
 8020e04:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020e08:	fb04 540e 	mla	r4, r4, lr, r5
 8020e0c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020e10:	fb01 4100 	mla	r1, r1, r0, r4
 8020e14:	0a09      	lsrs	r1, r1, #8
 8020e16:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8020e1a:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8020e1e:	fb03 7101 	mla	r1, r3, r1, r7
 8020e22:	9b00      	ldr	r3, [sp, #0]
 8020e24:	fb0e 1e08 	mla	lr, lr, r8, r1
 8020e28:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8020e2c:	43da      	mvns	r2, r3
 8020e2e:	1233      	asrs	r3, r6, #8
 8020e30:	fb00 e101 	mla	r1, r0, r1, lr
 8020e34:	10f0      	asrs	r0, r6, #3
 8020e36:	b2d2      	uxtb	r2, r2
 8020e38:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8020e3c:	0a09      	lsrs	r1, r1, #8
 8020e3e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020e42:	00f6      	lsls	r6, r6, #3
 8020e44:	4353      	muls	r3, r2
 8020e46:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8020e4a:	4350      	muls	r0, r2
 8020e4c:	b2f6      	uxtb	r6, r6
 8020e4e:	4321      	orrs	r1, r4
 8020e50:	4356      	muls	r6, r2
 8020e52:	1c5a      	adds	r2, r3, #1
 8020e54:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020e58:	0c0b      	lsrs	r3, r1, #16
 8020e5a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020e5e:	1c42      	adds	r2, r0, #1
 8020e60:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020e64:	0a0a      	lsrs	r2, r1, #8
 8020e66:	021b      	lsls	r3, r3, #8
 8020e68:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8020e6c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8020e70:	00d2      	lsls	r2, r2, #3
 8020e72:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020e76:	4313      	orrs	r3, r2
 8020e78:	1c72      	adds	r2, r6, #1
 8020e7a:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8020e7e:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8020e82:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8020e86:	4319      	orrs	r1, r3
 8020e88:	9b02      	ldr	r3, [sp, #8]
 8020e8a:	8019      	strh	r1, [r3, #0]
 8020e8c:	b005      	add	sp, #20
 8020e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e92:	2500      	movs	r5, #0
 8020e94:	e6fe      	b.n	8020c94 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 8020e96:	2100      	movs	r1, #0
 8020e98:	460d      	mov	r5, r1
 8020e9a:	e706      	b.n	8020caa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8020e9c:	2100      	movs	r1, #0
 8020e9e:	e704      	b.n	8020caa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8020ea0:	4631      	mov	r1, r6
 8020ea2:	e702      	b.n	8020caa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8020ea4:	2400      	movs	r4, #0
 8020ea6:	e713      	b.n	8020cd0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8020ea8:	2200      	movs	r2, #0
 8020eaa:	4614      	mov	r4, r2
 8020eac:	e71a      	b.n	8020ce4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8020eae:	4602      	mov	r2, r0
 8020eb0:	4604      	mov	r4, r0
 8020eb2:	e717      	b.n	8020ce4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8020eb4:	2200      	movs	r2, #0
 8020eb6:	e715      	b.n	8020ce4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8020eb8:	4632      	mov	r2, r6
 8020eba:	e713      	b.n	8020ce4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

08020ebc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ec0:	b09b      	sub	sp, #108	; 0x6c
 8020ec2:	9218      	str	r2, [sp, #96]	; 0x60
 8020ec4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020ec6:	9019      	str	r0, [sp, #100]	; 0x64
 8020ec8:	9116      	str	r1, [sp, #88]	; 0x58
 8020eca:	6850      	ldr	r0, [r2, #4]
 8020ecc:	9307      	str	r3, [sp, #28]
 8020ece:	6812      	ldr	r2, [r2, #0]
 8020ed0:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8020ed4:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8020ed8:	fb00 1303 	mla	r3, r0, r3, r1
 8020edc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020ee0:	930a      	str	r3, [sp, #40]	; 0x28
 8020ee2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020ee4:	681b      	ldr	r3, [r3, #0]
 8020ee6:	930f      	str	r3, [sp, #60]	; 0x3c
 8020ee8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020eea:	2b00      	cmp	r3, #0
 8020eec:	dc03      	bgt.n	8020ef6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8020eee:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020ef0:	2b00      	cmp	r3, #0
 8020ef2:	f340 8387 	ble.w	8021604 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8020ef6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020ef8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020efc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020f00:	1e48      	subs	r0, r1, #1
 8020f02:	1e57      	subs	r7, r2, #1
 8020f04:	9b07      	ldr	r3, [sp, #28]
 8020f06:	2b00      	cmp	r3, #0
 8020f08:	f340 8166 	ble.w	80211d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8020f0c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020f10:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020f14:	d406      	bmi.n	8020f24 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020f16:	4584      	cmp	ip, r0
 8020f18:	da04      	bge.n	8020f24 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020f1a:	2b00      	cmp	r3, #0
 8020f1c:	db02      	blt.n	8020f24 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020f1e:	42bb      	cmp	r3, r7
 8020f20:	f2c0 815b 	blt.w	80211da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8020f24:	f11c 0c01 	adds.w	ip, ip, #1
 8020f28:	f100 814b 	bmi.w	80211c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8020f2c:	4561      	cmp	r1, ip
 8020f2e:	f2c0 8148 	blt.w	80211c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8020f32:	3301      	adds	r3, #1
 8020f34:	f100 8145 	bmi.w	80211c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8020f38:	429a      	cmp	r2, r3
 8020f3a:	f2c0 8142 	blt.w	80211c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8020f3e:	9b07      	ldr	r3, [sp, #28]
 8020f40:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8020f42:	9317      	str	r3, [sp, #92]	; 0x5c
 8020f44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020f46:	2b00      	cmp	r3, #0
 8020f48:	f340 8165 	ble.w	8021216 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8020f4c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020f4e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8020f52:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020f54:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8020f58:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8020f5c:	1422      	asrs	r2, r4, #16
 8020f5e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020f62:	689b      	ldr	r3, [r3, #8]
 8020f64:	f100 81d5 	bmi.w	8021312 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8020f68:	f103 38ff 	add.w	r8, r3, #4294967295
 8020f6c:	4542      	cmp	r2, r8
 8020f6e:	f280 81d0 	bge.w	8021312 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8020f72:	f1bc 0f00 	cmp.w	ip, #0
 8020f76:	f2c0 81cc 	blt.w	8021312 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8020f7a:	f10e 38ff 	add.w	r8, lr, #4294967295
 8020f7e:	45c4      	cmp	ip, r8
 8020f80:	f280 81c7 	bge.w	8021312 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8020f84:	b21b      	sxth	r3, r3
 8020f86:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8020f88:	fb0c 2203 	mla	r2, ip, r3, r2
 8020f8c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8020f90:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020f94:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8020f98:	2900      	cmp	r1, #0
 8020f9a:	f000 8182 	beq.w	80212a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8020f9e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8020fa2:	950b      	str	r5, [sp, #44]	; 0x2c
 8020fa4:	0e2d      	lsrs	r5, r5, #24
 8020fa6:	9512      	str	r5, [sp, #72]	; 0x48
 8020fa8:	b180      	cbz	r0, 8020fcc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8020faa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8020fae:	3b01      	subs	r3, #1
 8020fb0:	009b      	lsls	r3, r3, #2
 8020fb2:	3304      	adds	r3, #4
 8020fb4:	eb08 0c03 	add.w	ip, r8, r3
 8020fb8:	f858 3003 	ldr.w	r3, [r8, r3]
 8020fbc:	9308      	str	r3, [sp, #32]
 8020fbe:	0e1b      	lsrs	r3, r3, #24
 8020fc0:	9310      	str	r3, [sp, #64]	; 0x40
 8020fc2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8020fc6:	930c      	str	r3, [sp, #48]	; 0x30
 8020fc8:	0e1b      	lsrs	r3, r3, #24
 8020fca:	9313      	str	r3, [sp, #76]	; 0x4c
 8020fcc:	b289      	uxth	r1, r1
 8020fce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020fd0:	b280      	uxth	r0, r0
 8020fd2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8020fd4:	fb01 f900 	mul.w	r9, r1, r0
 8020fd8:	0109      	lsls	r1, r1, #4
 8020fda:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020fde:	eba1 0809 	sub.w	r8, r1, r9
 8020fe2:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8020fe6:	b280      	uxth	r0, r0
 8020fe8:	fa1f f888 	uxth.w	r8, r8
 8020fec:	1a09      	subs	r1, r1, r0
 8020fee:	fb08 f303 	mul.w	r3, r8, r3
 8020ff2:	b289      	uxth	r1, r1
 8020ff4:	fb01 330e 	mla	r3, r1, lr, r3
 8020ff8:	fb00 3305 	mla	r3, r0, r5, r3
 8020ffc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020ffe:	fb09 3305 	mla	r3, r9, r5, r3
 8021002:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021006:	2b00      	cmp	r3, #0
 8021008:	f000 80d2 	beq.w	80211b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802100c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021010:	d01b      	beq.n	802104a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8021012:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8021016:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802101a:	fb0e fa0a 	mul.w	sl, lr, sl
 802101e:	fb0e fe02 	mul.w	lr, lr, r2
 8021022:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8021026:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802102a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802102e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021032:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021036:	4452      	add	r2, sl
 8021038:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802103c:	0a12      	lsrs	r2, r2, #8
 802103e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021042:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021046:	ea42 020c 	orr.w	r2, r2, ip
 802104a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802104c:	2dff      	cmp	r5, #255	; 0xff
 802104e:	d021      	beq.n	8021094 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8021050:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021052:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8021056:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021058:	fb05 fb0b 	mul.w	fp, r5, fp
 802105c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802105e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021062:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021064:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021068:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802106c:	fb05 fa0a 	mul.w	sl, r5, sl
 8021070:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021074:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021078:	44de      	add	lr, fp
 802107a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802107e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021082:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021086:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802108a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802108e:	ea4e 050a 	orr.w	r5, lr, sl
 8021092:	950b      	str	r5, [sp, #44]	; 0x2c
 8021094:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021096:	2dff      	cmp	r5, #255	; 0xff
 8021098:	d021      	beq.n	80210de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 802109a:	9d08      	ldr	r5, [sp, #32]
 802109c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80210a0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80210a2:	fb05 fb0b 	mul.w	fp, r5, fp
 80210a6:	9d08      	ldr	r5, [sp, #32]
 80210a8:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80210ac:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80210ae:	fb05 fa0e 	mul.w	sl, r5, lr
 80210b2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80210b6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80210ba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80210be:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80210c2:	44de      	add	lr, fp
 80210c4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80210c8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80210cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80210d0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80210d4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80210d8:	ea4e 050a 	orr.w	r5, lr, sl
 80210dc:	9508      	str	r5, [sp, #32]
 80210de:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80210e0:	2dff      	cmp	r5, #255	; 0xff
 80210e2:	d021      	beq.n	8021128 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80210e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80210e6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80210ea:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80210ec:	fb05 fb0b 	mul.w	fp, r5, fp
 80210f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80210f2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80210f6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80210f8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80210fc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021100:	fb05 fa0a 	mul.w	sl, r5, sl
 8021104:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021108:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802110c:	44de      	add	lr, fp
 802110e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021112:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021116:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802111a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802111e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021122:	ea4e 050a 	orr.w	r5, lr, sl
 8021126:	950c      	str	r5, [sp, #48]	; 0x30
 8021128:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802112a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802112e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021132:	2bff      	cmp	r3, #255	; 0xff
 8021134:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8021138:	9d08      	ldr	r5, [sp, #32]
 802113a:	fb08 fc0c 	mul.w	ip, r8, ip
 802113e:	fb01 cc0e 	mla	ip, r1, lr, ip
 8021142:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8021146:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021148:	fb00 cc0e 	mla	ip, r0, lr, ip
 802114c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8021150:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021152:	fb09 cc0e 	mla	ip, r9, lr, ip
 8021156:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802115a:	fb08 f80e 	mul.w	r8, r8, lr
 802115e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021162:	fb01 8202 	mla	r2, r1, r2, r8
 8021166:	9908      	ldr	r1, [sp, #32]
 8021168:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802116c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8021170:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021172:	fb00 220a 	mla	r2, r0, sl, r2
 8021176:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 802117a:	fb09 2900 	mla	r9, r9, r0, r2
 802117e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021182:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021186:	ea4c 0c09 	orr.w	ip, ip, r9
 802118a:	ea4f 221c 	mov.w	r2, ip, lsr #8
 802118e:	f040 8091 	bne.w	80212b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8021192:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8021196:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 802119a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802119e:	f022 0207 	bic.w	r2, r2, #7
 80211a2:	431a      	orrs	r2, r3
 80211a4:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80211a8:	ea4c 0c02 	orr.w	ip, ip, r2
 80211ac:	f8a7 c000 	strh.w	ip, [r7]
 80211b0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80211b2:	3702      	adds	r7, #2
 80211b4:	441c      	add	r4, r3
 80211b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80211b8:	441e      	add	r6, r3
 80211ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80211bc:	3b01      	subs	r3, #1
 80211be:	9317      	str	r3, [sp, #92]	; 0x5c
 80211c0:	e6c0      	b.n	8020f44 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80211c2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80211c4:	441c      	add	r4, r3
 80211c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80211c8:	441e      	add	r6, r3
 80211ca:	9b07      	ldr	r3, [sp, #28]
 80211cc:	3b01      	subs	r3, #1
 80211ce:	9307      	str	r3, [sp, #28]
 80211d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80211d2:	3302      	adds	r3, #2
 80211d4:	930a      	str	r3, [sp, #40]	; 0x28
 80211d6:	e695      	b.n	8020f04 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80211d8:	d024      	beq.n	8021224 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80211da:	9b07      	ldr	r3, [sp, #28]
 80211dc:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80211de:	3b01      	subs	r3, #1
 80211e0:	fb00 4003 	mla	r0, r0, r3, r4
 80211e4:	1400      	asrs	r0, r0, #16
 80211e6:	f53f aeaa 	bmi.w	8020f3e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80211ea:	3901      	subs	r1, #1
 80211ec:	4288      	cmp	r0, r1
 80211ee:	f6bf aea6 	bge.w	8020f3e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80211f2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80211f4:	fb01 6303 	mla	r3, r1, r3, r6
 80211f8:	141b      	asrs	r3, r3, #16
 80211fa:	f53f aea0 	bmi.w	8020f3e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80211fe:	3a01      	subs	r2, #1
 8021200:	4293      	cmp	r3, r2
 8021202:	f6bf ae9c 	bge.w	8020f3e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021206:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802120a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 802120e:	f1bb 0f00 	cmp.w	fp, #0
 8021212:	f300 809a 	bgt.w	802134a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8021216:	9b07      	ldr	r3, [sp, #28]
 8021218:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802121c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802121e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8021222:	930a      	str	r3, [sp, #40]	; 0x28
 8021224:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021226:	2b00      	cmp	r3, #0
 8021228:	f340 81ec 	ble.w	8021604 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 802122c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021230:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021232:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021236:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802123a:	eef0 6a62 	vmov.f32	s13, s5
 802123e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021242:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021246:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802124a:	ee16 4a90 	vmov	r4, s13
 802124e:	eef0 6a43 	vmov.f32	s13, s6
 8021252:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021256:	ee16 6a90 	vmov	r6, s13
 802125a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802125e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021262:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021266:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802126a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802126e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021272:	ee12 2a90 	vmov	r2, s5
 8021276:	eef0 2a47 	vmov.f32	s5, s14
 802127a:	fb92 f3f3 	sdiv	r3, r2, r3
 802127e:	ee13 2a10 	vmov	r2, s6
 8021282:	9327      	str	r3, [sp, #156]	; 0x9c
 8021284:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021286:	eeb0 3a67 	vmov.f32	s6, s15
 802128a:	fb92 f3f3 	sdiv	r3, r2, r3
 802128e:	9328      	str	r3, [sp, #160]	; 0xa0
 8021290:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021292:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8021294:	3b01      	subs	r3, #1
 8021296:	9316      	str	r3, [sp, #88]	; 0x58
 8021298:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802129a:	bf08      	it	eq
 802129c:	4613      	moveq	r3, r2
 802129e:	9307      	str	r3, [sp, #28]
 80212a0:	e622      	b.n	8020ee8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 80212a2:	2800      	cmp	r0, #0
 80212a4:	f43f ae92 	beq.w	8020fcc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80212a8:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80212ac:	9308      	str	r3, [sp, #32]
 80212ae:	0e1b      	lsrs	r3, r3, #24
 80212b0:	9310      	str	r3, [sp, #64]	; 0x40
 80212b2:	e68b      	b.n	8020fcc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80212b4:	8839      	ldrh	r1, [r7, #0]
 80212b6:	43db      	mvns	r3, r3
 80212b8:	4dd4      	ldr	r5, [pc, #848]	; (802160c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 80212ba:	ea4f 2e21 	mov.w	lr, r1, asr #8
 80212be:	fa5f f883 	uxtb.w	r8, r3
 80212c2:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80212c6:	10c8      	asrs	r0, r1, #3
 80212c8:	00cb      	lsls	r3, r1, #3
 80212ca:	fb0e fe08 	mul.w	lr, lr, r8
 80212ce:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80212d2:	b2db      	uxtb	r3, r3
 80212d4:	f10e 0101 	add.w	r1, lr, #1
 80212d8:	fb00 f008 	mul.w	r0, r0, r8
 80212dc:	fb03 f308 	mul.w	r3, r3, r8
 80212e0:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 80212e4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80212e8:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 80212ec:	f100 0e01 	add.w	lr, r0, #1
 80212f0:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 80212f4:	b2c9      	uxtb	r1, r1
 80212f6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80212fa:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 80212fe:	00d2      	lsls	r2, r2, #3
 8021300:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021304:	430a      	orrs	r2, r1
 8021306:	1c59      	adds	r1, r3, #1
 8021308:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802130c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8021310:	e748      	b.n	80211a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8021312:	f112 0801 	adds.w	r8, r2, #1
 8021316:	f53f af4b 	bmi.w	80211b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802131a:	4543      	cmp	r3, r8
 802131c:	f6ff af48 	blt.w	80211b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8021320:	f11c 0801 	adds.w	r8, ip, #1
 8021324:	f53f af44 	bmi.w	80211b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8021328:	45c6      	cmp	lr, r8
 802132a:	f6ff af41 	blt.w	80211b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802132e:	b21b      	sxth	r3, r3
 8021330:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8021334:	fa0f f28e 	sxth.w	r2, lr
 8021338:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802133c:	9200      	str	r2, [sp, #0]
 802133e:	4639      	mov	r1, r7
 8021340:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021342:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021344:	f7ff fc88 	bl	8020c58 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8021348:	e732      	b.n	80211b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802134a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802134c:	1421      	asrs	r1, r4, #16
 802134e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8021350:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8021354:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8021358:	1433      	asrs	r3, r6, #16
 802135a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802135e:	fb07 1303 	mla	r3, r7, r3, r1
 8021362:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8021364:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8021368:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802136c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021370:	2a00      	cmp	r2, #0
 8021372:	f000 8108 	beq.w	8021586 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8021376:	684d      	ldr	r5, [r1, #4]
 8021378:	950d      	str	r5, [sp, #52]	; 0x34
 802137a:	0e2d      	lsrs	r5, r5, #24
 802137c:	9514      	str	r5, [sp, #80]	; 0x50
 802137e:	b178      	cbz	r0, 80213a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8021380:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8021384:	3f01      	subs	r7, #1
 8021386:	00bf      	lsls	r7, r7, #2
 8021388:	3704      	adds	r7, #4
 802138a:	eb01 0e07 	add.w	lr, r1, r7
 802138e:	59c9      	ldr	r1, [r1, r7]
 8021390:	9109      	str	r1, [sp, #36]	; 0x24
 8021392:	0e09      	lsrs	r1, r1, #24
 8021394:	9111      	str	r1, [sp, #68]	; 0x44
 8021396:	f8de 1004 	ldr.w	r1, [lr, #4]
 802139a:	910e      	str	r1, [sp, #56]	; 0x38
 802139c:	0e09      	lsrs	r1, r1, #24
 802139e:	9115      	str	r1, [sp, #84]	; 0x54
 80213a0:	b292      	uxth	r2, r2
 80213a2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80213a4:	b280      	uxth	r0, r0
 80213a6:	fb02 f900 	mul.w	r9, r2, r0
 80213aa:	0112      	lsls	r2, r2, #4
 80213ac:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80213b0:	eba2 0e09 	sub.w	lr, r2, r9
 80213b4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80213b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80213ba:	b280      	uxth	r0, r0
 80213bc:	fa1f fe8e 	uxth.w	lr, lr
 80213c0:	1a09      	subs	r1, r1, r0
 80213c2:	fb0e f202 	mul.w	r2, lr, r2
 80213c6:	b289      	uxth	r1, r1
 80213c8:	fb01 220c 	mla	r2, r1, ip, r2
 80213cc:	fb00 2205 	mla	r2, r0, r5, r2
 80213d0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80213d2:	fb09 2205 	mla	r2, r9, r5, r2
 80213d6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80213da:	2a00      	cmp	r2, #0
 80213dc:	f000 80ca 	beq.w	8021574 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80213e0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80213e4:	d019      	beq.n	802141a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 80213e6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80213ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80213ee:	fb0c fa0a 	mul.w	sl, ip, sl
 80213f2:	fb0c fc03 	mul.w	ip, ip, r3
 80213f6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80213fa:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80213fe:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8021402:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021406:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802140a:	4453      	add	r3, sl
 802140c:	0a3f      	lsrs	r7, r7, #8
 802140e:	0a1b      	lsrs	r3, r3, #8
 8021410:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021414:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021418:	433b      	orrs	r3, r7
 802141a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802141c:	2dff      	cmp	r5, #255	; 0xff
 802141e:	d020      	beq.n	8021462 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8021420:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021422:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8021426:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021428:	436f      	muls	r7, r5
 802142a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802142c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021430:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021434:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021436:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802143a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802143e:	fb05 fa0a 	mul.w	sl, r5, sl
 8021442:	44bc      	add	ip, r7
 8021444:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021448:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802144c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021450:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021454:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021458:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802145c:	ea4c 050a 	orr.w	r5, ip, sl
 8021460:	950d      	str	r5, [sp, #52]	; 0x34
 8021462:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021464:	2dff      	cmp	r5, #255	; 0xff
 8021466:	d020      	beq.n	80214aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8021468:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802146a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802146e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021470:	436f      	muls	r7, r5
 8021472:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8021474:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8021478:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802147a:	fb05 fa0c 	mul.w	sl, r5, ip
 802147e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021482:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021486:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802148a:	44bc      	add	ip, r7
 802148c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021490:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021494:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021498:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802149c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80214a0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80214a4:	ea4c 050a 	orr.w	r5, ip, sl
 80214a8:	9509      	str	r5, [sp, #36]	; 0x24
 80214aa:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80214ac:	2dff      	cmp	r5, #255	; 0xff
 80214ae:	d020      	beq.n	80214f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 80214b0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80214b2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80214b6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80214b8:	436f      	muls	r7, r5
 80214ba:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80214bc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80214c0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80214c4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80214c6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80214ca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80214ce:	fb05 fa0a 	mul.w	sl, r5, sl
 80214d2:	44bc      	add	ip, r7
 80214d4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80214d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80214dc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80214e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80214e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80214e8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80214ec:	ea4c 050a 	orr.w	r5, ip, sl
 80214f0:	950e      	str	r5, [sp, #56]	; 0x38
 80214f2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80214f4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80214f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80214fc:	2aff      	cmp	r2, #255	; 0xff
 80214fe:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8021502:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8021504:	fb0e f707 	mul.w	r7, lr, r7
 8021508:	fb01 770c 	mla	r7, r1, ip, r7
 802150c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8021510:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021512:	fb00 770c 	mla	r7, r0, ip, r7
 8021516:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802151a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802151c:	fb09 770c 	mla	r7, r9, ip, r7
 8021520:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8021524:	fb0e fe0c 	mul.w	lr, lr, ip
 8021528:	ea4f 2717 	mov.w	r7, r7, lsr #8
 802152c:	fb01 e303 	mla	r3, r1, r3, lr
 8021530:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021532:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021536:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802153a:	990e      	ldr	r1, [sp, #56]	; 0x38
 802153c:	fb00 330a 	mla	r3, r0, sl, r3
 8021540:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8021544:	fb09 3c0c 	mla	ip, r9, ip, r3
 8021548:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802154c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021550:	ea47 070c 	orr.w	r7, r7, ip
 8021554:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8021558:	d11e      	bne.n	8021598 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 802155a:	097a      	lsrs	r2, r7, #5
 802155c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8021560:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8021564:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021568:	f023 0307 	bic.w	r3, r3, #7
 802156c:	4313      	orrs	r3, r2
 802156e:	431f      	orrs	r7, r3
 8021570:	f8a8 7000 	strh.w	r7, [r8]
 8021574:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021576:	f108 0802 	add.w	r8, r8, #2
 802157a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802157e:	441c      	add	r4, r3
 8021580:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021582:	441e      	add	r6, r3
 8021584:	e643      	b.n	802120e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8021586:	2800      	cmp	r0, #0
 8021588:	f43f af0a 	beq.w	80213a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802158c:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8021590:	9109      	str	r1, [sp, #36]	; 0x24
 8021592:	0e09      	lsrs	r1, r1, #24
 8021594:	9111      	str	r1, [sp, #68]	; 0x44
 8021596:	e703      	b.n	80213a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8021598:	f8b8 1000 	ldrh.w	r1, [r8]
 802159c:	43d2      	mvns	r2, r2
 802159e:	ea4f 2c21 	mov.w	ip, r1, asr #8
 80215a2:	fa5f fe82 	uxtb.w	lr, r2
 80215a6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80215aa:	10c8      	asrs	r0, r1, #3
 80215ac:	00ca      	lsls	r2, r1, #3
 80215ae:	fb0c fc0e 	mul.w	ip, ip, lr
 80215b2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80215b6:	b2d2      	uxtb	r2, r2
 80215b8:	f10c 0101 	add.w	r1, ip, #1
 80215bc:	fb00 f00e 	mul.w	r0, r0, lr
 80215c0:	fb02 f20e 	mul.w	r2, r2, lr
 80215c4:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80215c8:	0c39      	lsrs	r1, r7, #16
 80215ca:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80215ce:	490f      	ldr	r1, [pc, #60]	; (802160c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 80215d0:	fa5f fc8c 	uxtb.w	ip, ip
 80215d4:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 80215d8:	1c41      	adds	r1, r0, #1
 80215da:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80215de:	1c51      	adds	r1, r2, #1
 80215e0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80215e4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80215e8:	00c0      	lsls	r0, r0, #3
 80215ea:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80215ee:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80215f2:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80215f6:	ea4c 0c00 	orr.w	ip, ip, r0
 80215fa:	ea47 0c0c 	orr.w	ip, r7, ip
 80215fe:	f8a8 c000 	strh.w	ip, [r8]
 8021602:	e7b7      	b.n	8021574 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8021604:	b01b      	add	sp, #108	; 0x6c
 8021606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802160a:	bf00      	nop
 802160c:	fffff800 	.word	0xfffff800

08021610 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8021610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021614:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8021618:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802161c:	2d00      	cmp	r5, #0
 802161e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8021622:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8021626:	fb05 0e03 	mla	lr, r5, r3, r0
 802162a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802162e:	f2c0 808c 	blt.w	802174a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8021632:	45a9      	cmp	r9, r5
 8021634:	f340 8089 	ble.w	802174a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8021638:	2800      	cmp	r0, #0
 802163a:	f2c0 8084 	blt.w	8021746 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802163e:	4580      	cmp	r8, r0
 8021640:	f340 8081 	ble.w	8021746 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8021644:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8021648:	f01e 0f01 	tst.w	lr, #1
 802164c:	5d16      	ldrb	r6, [r2, r4]
 802164e:	bf0c      	ite	eq
 8021650:	f006 060f 	andeq.w	r6, r6, #15
 8021654:	1136      	asrne	r6, r6, #4
 8021656:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802165a:	b2f6      	uxtb	r6, r6
 802165c:	1c44      	adds	r4, r0, #1
 802165e:	d477      	bmi.n	8021750 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8021660:	45a0      	cmp	r8, r4
 8021662:	dd75      	ble.n	8021750 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8021664:	2f00      	cmp	r7, #0
 8021666:	d075      	beq.n	8021754 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8021668:	f10e 0a01 	add.w	sl, lr, #1
 802166c:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8021670:	f01a 0f01 	tst.w	sl, #1
 8021674:	5d14      	ldrb	r4, [r2, r4]
 8021676:	bf0c      	ite	eq
 8021678:	f004 040f 	andeq.w	r4, r4, #15
 802167c:	1124      	asrne	r4, r4, #4
 802167e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8021682:	b2e4      	uxtb	r4, r4
 8021684:	3501      	adds	r5, #1
 8021686:	d469      	bmi.n	802175c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8021688:	45a9      	cmp	r9, r5
 802168a:	dd67      	ble.n	802175c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 802168c:	f1bc 0f00 	cmp.w	ip, #0
 8021690:	d067      	beq.n	8021762 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 8021692:	2800      	cmp	r0, #0
 8021694:	db60      	blt.n	8021758 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8021696:	4580      	cmp	r8, r0
 8021698:	dd5e      	ble.n	8021758 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 802169a:	eb03 090e 	add.w	r9, r3, lr
 802169e:	ea4f 0559 	mov.w	r5, r9, lsr #1
 80216a2:	f019 0f01 	tst.w	r9, #1
 80216a6:	5d55      	ldrb	r5, [r2, r5]
 80216a8:	bf0c      	ite	eq
 80216aa:	f005 050f 	andeq.w	r5, r5, #15
 80216ae:	112d      	asrne	r5, r5, #4
 80216b0:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80216b4:	b2ed      	uxtb	r5, r5
 80216b6:	3001      	adds	r0, #1
 80216b8:	d456      	bmi.n	8021768 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 80216ba:	4580      	cmp	r8, r0
 80216bc:	dd54      	ble.n	8021768 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 80216be:	2f00      	cmp	r7, #0
 80216c0:	d054      	beq.n	802176c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 80216c2:	3301      	adds	r3, #1
 80216c4:	449e      	add	lr, r3
 80216c6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80216ca:	f01e 0f01 	tst.w	lr, #1
 80216ce:	5cd0      	ldrb	r0, [r2, r3]
 80216d0:	bf0c      	ite	eq
 80216d2:	f000 000f 	andeq.w	r0, r0, #15
 80216d6:	1100      	asrne	r0, r0, #4
 80216d8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80216dc:	b2c3      	uxtb	r3, r0
 80216de:	b2ba      	uxth	r2, r7
 80216e0:	fa1f fc8c 	uxth.w	ip, ip
 80216e4:	fb02 f00c 	mul.w	r0, r2, ip
 80216e8:	0112      	lsls	r2, r2, #4
 80216ea:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80216ee:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80216f2:	1a12      	subs	r2, r2, r0
 80216f4:	fa1f fc8c 	uxth.w	ip, ip
 80216f8:	b292      	uxth	r2, r2
 80216fa:	eba7 070c 	sub.w	r7, r7, ip
 80216fe:	4362      	muls	r2, r4
 8021700:	b2bf      	uxth	r7, r7
 8021702:	fb06 2207 	mla	r2, r6, r7, r2
 8021706:	fb0c 2505 	mla	r5, ip, r5, r2
 802170a:	fb00 5303 	mla	r3, r0, r3, r5
 802170e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021712:	b1b3      	cbz	r3, 8021742 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8021714:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8021718:	435a      	muls	r2, r3
 802171a:	1c53      	adds	r3, r2, #1
 802171c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021720:	4a2d      	ldr	r2, [pc, #180]	; (80217d8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8021722:	121b      	asrs	r3, r3, #8
 8021724:	6812      	ldr	r2, [r2, #0]
 8021726:	2bff      	cmp	r3, #255	; 0xff
 8021728:	ea4f 2612 	mov.w	r6, r2, lsr #8
 802172c:	d120      	bne.n	8021770 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 802172e:	0950      	lsrs	r0, r2, #5
 8021730:	4b2a      	ldr	r3, [pc, #168]	; (80217dc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8021732:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021736:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802173a:	4033      	ands	r3, r6
 802173c:	4318      	orrs	r0, r3
 802173e:	4302      	orrs	r2, r0
 8021740:	800a      	strh	r2, [r1, #0]
 8021742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021746:	2600      	movs	r6, #0
 8021748:	e788      	b.n	802165c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 802174a:	2400      	movs	r4, #0
 802174c:	4626      	mov	r6, r4
 802174e:	e799      	b.n	8021684 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8021750:	2400      	movs	r4, #0
 8021752:	e797      	b.n	8021684 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8021754:	463c      	mov	r4, r7
 8021756:	e795      	b.n	8021684 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8021758:	2500      	movs	r5, #0
 802175a:	e7ac      	b.n	80216b6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 802175c:	2300      	movs	r3, #0
 802175e:	461d      	mov	r5, r3
 8021760:	e7bd      	b.n	80216de <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8021762:	4663      	mov	r3, ip
 8021764:	4665      	mov	r5, ip
 8021766:	e7ba      	b.n	80216de <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8021768:	2300      	movs	r3, #0
 802176a:	e7b8      	b.n	80216de <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802176c:	463b      	mov	r3, r7
 802176e:	e7b6      	b.n	80216de <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8021770:	880d      	ldrh	r5, [r1, #0]
 8021772:	b29f      	uxth	r7, r3
 8021774:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8021778:	43db      	mvns	r3, r3
 802177a:	122c      	asrs	r4, r5, #8
 802177c:	fb10 f007 	smulbb	r0, r0, r7
 8021780:	b2db      	uxtb	r3, r3
 8021782:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8021786:	b2f6      	uxtb	r6, r6
 8021788:	b2d2      	uxtb	r2, r2
 802178a:	fb04 0403 	mla	r4, r4, r3, r0
 802178e:	10e8      	asrs	r0, r5, #3
 8021790:	fb12 f207 	smulbb	r2, r2, r7
 8021794:	00ed      	lsls	r5, r5, #3
 8021796:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802179a:	b2a4      	uxth	r4, r4
 802179c:	fb16 f607 	smulbb	r6, r6, r7
 80217a0:	b2ed      	uxtb	r5, r5
 80217a2:	fb00 6603 	mla	r6, r0, r3, r6
 80217a6:	fb05 2303 	mla	r3, r5, r3, r2
 80217aa:	b2b0      	uxth	r0, r6
 80217ac:	b29a      	uxth	r2, r3
 80217ae:	1c63      	adds	r3, r4, #1
 80217b0:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80217b4:	1c53      	adds	r3, r2, #1
 80217b6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80217ba:	1c42      	adds	r2, r0, #1
 80217bc:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80217c0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80217c4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80217c8:	0940      	lsrs	r0, r0, #5
 80217ca:	4323      	orrs	r3, r4
 80217cc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80217d0:	4303      	orrs	r3, r0
 80217d2:	800b      	strh	r3, [r1, #0]
 80217d4:	e7b5      	b.n	8021742 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 80217d6:	bf00      	nop
 80217d8:	2400aeac 	.word	0x2400aeac
 80217dc:	00fff800 	.word	0x00fff800

080217e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80217e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217e4:	b097      	sub	sp, #92	; 0x5c
 80217e6:	9214      	str	r2, [sp, #80]	; 0x50
 80217e8:	9309      	str	r3, [sp, #36]	; 0x24
 80217ea:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80217ec:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80217f0:	9015      	str	r0, [sp, #84]	; 0x54
 80217f2:	910d      	str	r1, [sp, #52]	; 0x34
 80217f4:	6850      	ldr	r0, [r2, #4]
 80217f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80217f8:	6812      	ldr	r2, [r2, #0]
 80217fa:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80217fe:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8021802:	fb00 1303 	mla	r3, r0, r3, r1
 8021806:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802180a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802180c:	689b      	ldr	r3, [r3, #8]
 802180e:	3301      	adds	r3, #1
 8021810:	f023 0301 	bic.w	r3, r3, #1
 8021814:	930a      	str	r3, [sp, #40]	; 0x28
 8021816:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021818:	681f      	ldr	r7, [r3, #0]
 802181a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802181c:	2b00      	cmp	r3, #0
 802181e:	dc03      	bgt.n	8021828 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021820:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021822:	2b00      	cmp	r3, #0
 8021824:	f340 8289 	ble.w	8021d3a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8021828:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802182a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802182e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021832:	1e48      	subs	r0, r1, #1
 8021834:	f102 3cff 	add.w	ip, r2, #4294967295
 8021838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802183a:	2b00      	cmp	r3, #0
 802183c:	f340 80c5 	ble.w	80219ca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021840:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8021844:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021848:	d406      	bmi.n	8021858 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802184a:	4586      	cmp	lr, r0
 802184c:	da04      	bge.n	8021858 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802184e:	2b00      	cmp	r3, #0
 8021850:	db02      	blt.n	8021858 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021852:	4563      	cmp	r3, ip
 8021854:	f2c0 80ba 	blt.w	80219cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8021858:	f11e 0e01 	adds.w	lr, lr, #1
 802185c:	f100 80ab 	bmi.w	80219b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8021860:	4571      	cmp	r1, lr
 8021862:	f2c0 80a8 	blt.w	80219b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8021866:	3301      	adds	r3, #1
 8021868:	f100 80a5 	bmi.w	80219b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 802186c:	429a      	cmp	r2, r3
 802186e:	f2c0 80a2 	blt.w	80219b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8021872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021874:	46c8      	mov	r8, r9
 8021876:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 802187a:	930e      	str	r3, [sp, #56]	; 0x38
 802187c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802187e:	2b00      	cmp	r3, #0
 8021880:	f340 80c4 	ble.w	8021a0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8021884:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021886:	1430      	asrs	r0, r6, #16
 8021888:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802188c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021890:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8021894:	1423      	asrs	r3, r4, #16
 8021896:	f100 814f 	bmi.w	8021b38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802189a:	f10c 3bff 	add.w	fp, ip, #4294967295
 802189e:	455b      	cmp	r3, fp
 80218a0:	f280 814a 	bge.w	8021b38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80218a4:	2800      	cmp	r0, #0
 80218a6:	f2c0 8147 	blt.w	8021b38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80218aa:	f10e 3bff 	add.w	fp, lr, #4294967295
 80218ae:	4558      	cmp	r0, fp
 80218b0:	f280 8142 	bge.w	8021b38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80218b4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80218b6:	fb00 3305 	mla	r3, r0, r5, r3
 80218ba:	0858      	lsrs	r0, r3, #1
 80218bc:	07dd      	lsls	r5, r3, #31
 80218be:	f817 c000 	ldrb.w	ip, [r7, r0]
 80218c2:	bf54      	ite	pl
 80218c4:	f00c 0c0f 	andpl.w	ip, ip, #15
 80218c8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80218cc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80218d0:	fa5f fc8c 	uxtb.w	ip, ip
 80218d4:	2a00      	cmp	r2, #0
 80218d6:	f000 80dd 	beq.w	8021a94 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 80218da:	1c58      	adds	r0, r3, #1
 80218dc:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80218e0:	07c0      	lsls	r0, r0, #31
 80218e2:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80218e6:	bf54      	ite	pl
 80218e8:	f00e 0e0f 	andpl.w	lr, lr, #15
 80218ec:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80218f0:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80218f4:	fa5f f08e 	uxtb.w	r0, lr
 80218f8:	9010      	str	r0, [sp, #64]	; 0x40
 80218fa:	b1d9      	cbz	r1, 8021934 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80218fc:	4453      	add	r3, sl
 80218fe:	0858      	lsrs	r0, r3, #1
 8021900:	07dd      	lsls	r5, r3, #31
 8021902:	f103 0301 	add.w	r3, r3, #1
 8021906:	5c38      	ldrb	r0, [r7, r0]
 8021908:	bf54      	ite	pl
 802190a:	f000 000f 	andpl.w	r0, r0, #15
 802190e:	1100      	asrmi	r0, r0, #4
 8021910:	07dd      	lsls	r5, r3, #31
 8021912:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8021916:	b2c0      	uxtb	r0, r0
 8021918:	900b      	str	r0, [sp, #44]	; 0x2c
 802191a:	ea4f 0053 	mov.w	r0, r3, lsr #1
 802191e:	f817 e000 	ldrb.w	lr, [r7, r0]
 8021922:	bf54      	ite	pl
 8021924:	f00e 030f 	andpl.w	r3, lr, #15
 8021928:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802192c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021930:	b2db      	uxtb	r3, r3
 8021932:	9311      	str	r3, [sp, #68]	; 0x44
 8021934:	b292      	uxth	r2, r2
 8021936:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021938:	b289      	uxth	r1, r1
 802193a:	fb02 f301 	mul.w	r3, r2, r1
 802193e:	0112      	lsls	r2, r2, #4
 8021940:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8021944:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8021948:	1ad2      	subs	r2, r2, r3
 802194a:	b289      	uxth	r1, r1
 802194c:	b292      	uxth	r2, r2
 802194e:	1a40      	subs	r0, r0, r1
 8021950:	436a      	muls	r2, r5
 8021952:	b280      	uxth	r0, r0
 8021954:	fb0c 2c00 	mla	ip, ip, r0, r2
 8021958:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802195a:	fb01 c102 	mla	r1, r1, r2, ip
 802195e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021960:	fb03 1302 	mla	r3, r3, r2, r1
 8021964:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021968:	b1db      	cbz	r3, 80219a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802196a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802196c:	4353      	muls	r3, r2
 802196e:	1c5a      	adds	r2, r3, #1
 8021970:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021974:	4ac6      	ldr	r2, [pc, #792]	; (8021c90 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8021976:	121b      	asrs	r3, r3, #8
 8021978:	6812      	ldr	r2, [r2, #0]
 802197a:	2bff      	cmp	r3, #255	; 0xff
 802197c:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8021980:	f040 8099 	bne.w	8021ab6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8021984:	0953      	lsrs	r3, r2, #5
 8021986:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802198a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802198e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021992:	f02c 0c07 	bic.w	ip, ip, #7
 8021996:	ea43 0c0c 	orr.w	ip, r3, ip
 802199a:	ea4c 0202 	orr.w	r2, ip, r2
 802199e:	f8a8 2000 	strh.w	r2, [r8]
 80219a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80219a4:	f108 0802 	add.w	r8, r8, #2
 80219a8:	441c      	add	r4, r3
 80219aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80219ac:	441e      	add	r6, r3
 80219ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80219b0:	3b01      	subs	r3, #1
 80219b2:	930e      	str	r3, [sp, #56]	; 0x38
 80219b4:	e762      	b.n	802187c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80219b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80219b8:	f109 0902 	add.w	r9, r9, #2
 80219bc:	441c      	add	r4, r3
 80219be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80219c0:	441e      	add	r6, r3
 80219c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80219c4:	3b01      	subs	r3, #1
 80219c6:	9309      	str	r3, [sp, #36]	; 0x24
 80219c8:	e736      	b.n	8021838 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80219ca:	d024      	beq.n	8021a16 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80219cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80219ce:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80219d0:	3b01      	subs	r3, #1
 80219d2:	fb00 4003 	mla	r0, r0, r3, r4
 80219d6:	1400      	asrs	r0, r0, #16
 80219d8:	f53f af4b 	bmi.w	8021872 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80219dc:	3901      	subs	r1, #1
 80219de:	4288      	cmp	r0, r1
 80219e0:	f6bf af47 	bge.w	8021872 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80219e4:	9924      	ldr	r1, [sp, #144]	; 0x90
 80219e6:	fb01 6303 	mla	r3, r1, r3, r6
 80219ea:	141b      	asrs	r3, r3, #16
 80219ec:	f53f af41 	bmi.w	8021872 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80219f0:	3a01      	subs	r2, #1
 80219f2:	4293      	cmp	r3, r2
 80219f4:	f6bf af3d 	bge.w	8021872 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80219f8:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80219fc:	46c8      	mov	r8, r9
 80219fe:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8021a02:	930e      	str	r3, [sp, #56]	; 0x38
 8021a04:	f1bb 0f00 	cmp.w	fp, #0
 8021a08:	f300 80b7 	bgt.w	8021b7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8021a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021a0e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8021a12:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8021a16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021a18:	2b00      	cmp	r3, #0
 8021a1a:	f340 818e 	ble.w	8021d3a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8021a1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021a22:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021a24:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021a28:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021a2c:	eef0 6a62 	vmov.f32	s13, s5
 8021a30:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021a34:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021a38:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021a3c:	ee16 4a90 	vmov	r4, s13
 8021a40:	eef0 6a43 	vmov.f32	s13, s6
 8021a44:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021a48:	ee16 6a90 	vmov	r6, s13
 8021a4c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021a50:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021a54:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021a58:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021a5c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021a60:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021a64:	ee12 2a90 	vmov	r2, s5
 8021a68:	eef0 2a47 	vmov.f32	s5, s14
 8021a6c:	fb92 f3f3 	sdiv	r3, r2, r3
 8021a70:	ee13 2a10 	vmov	r2, s6
 8021a74:	9323      	str	r3, [sp, #140]	; 0x8c
 8021a76:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021a78:	eeb0 3a67 	vmov.f32	s6, s15
 8021a7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8021a80:	9324      	str	r3, [sp, #144]	; 0x90
 8021a82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021a84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021a86:	3b01      	subs	r3, #1
 8021a88:	930d      	str	r3, [sp, #52]	; 0x34
 8021a8a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021a8c:	bf08      	it	eq
 8021a8e:	4613      	moveq	r3, r2
 8021a90:	9309      	str	r3, [sp, #36]	; 0x24
 8021a92:	e6c2      	b.n	802181a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021a94:	2900      	cmp	r1, #0
 8021a96:	f43f af4d 	beq.w	8021934 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8021a9a:	eb0a 0003 	add.w	r0, sl, r3
 8021a9e:	0843      	lsrs	r3, r0, #1
 8021aa0:	07c0      	lsls	r0, r0, #31
 8021aa2:	5cfb      	ldrb	r3, [r7, r3]
 8021aa4:	bf54      	ite	pl
 8021aa6:	f003 030f 	andpl.w	r3, r3, #15
 8021aaa:	111b      	asrmi	r3, r3, #4
 8021aac:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021ab0:	b2db      	uxtb	r3, r3
 8021ab2:	930b      	str	r3, [sp, #44]	; 0x2c
 8021ab4:	e73e      	b.n	8021934 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8021ab6:	f8b8 e000 	ldrh.w	lr, [r8]
 8021aba:	fa1f fb83 	uxth.w	fp, r3
 8021abe:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8021ac2:	43db      	mvns	r3, r3
 8021ac4:	ea4f 202e 	mov.w	r0, lr, asr #8
 8021ac8:	fb11 f10b 	smulbb	r1, r1, fp
 8021acc:	b2db      	uxtb	r3, r3
 8021ace:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021ad2:	fa5f fc8c 	uxtb.w	ip, ip
 8021ad6:	b2d2      	uxtb	r2, r2
 8021ad8:	fb00 1003 	mla	r0, r0, r3, r1
 8021adc:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8021ae0:	fb1c fc0b 	smulbb	ip, ip, fp
 8021ae4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021ae8:	b280      	uxth	r0, r0
 8021aea:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021aee:	fb12 fb0b 	smulbb	fp, r2, fp
 8021af2:	fa5f fe8e 	uxtb.w	lr, lr
 8021af6:	fb01 cc03 	mla	ip, r1, r3, ip
 8021afa:	fb0e bb03 	mla	fp, lr, r3, fp
 8021afe:	1c43      	adds	r3, r0, #1
 8021b00:	fa1f fc8c 	uxth.w	ip, ip
 8021b04:	fa1f fb8b 	uxth.w	fp, fp
 8021b08:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8021b0c:	f10c 0101 	add.w	r1, ip, #1
 8021b10:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 8021b14:	f10b 0001 	add.w	r0, fp, #1
 8021b18:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8021b1c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8021b20:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8021b24:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8021b28:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8021b2c:	4318      	orrs	r0, r3
 8021b2e:	ea40 000c 	orr.w	r0, r0, ip
 8021b32:	f8a8 0000 	strh.w	r0, [r8]
 8021b36:	e734      	b.n	80219a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8021b38:	f113 0b01 	adds.w	fp, r3, #1
 8021b3c:	f53f af31 	bmi.w	80219a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8021b40:	45dc      	cmp	ip, fp
 8021b42:	f6ff af2e 	blt.w	80219a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8021b46:	f110 0b01 	adds.w	fp, r0, #1
 8021b4a:	f53f af2a 	bmi.w	80219a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8021b4e:	45de      	cmp	lr, fp
 8021b50:	f6ff af27 	blt.w	80219a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8021b54:	9302      	str	r3, [sp, #8]
 8021b56:	fa0f f38e 	sxth.w	r3, lr
 8021b5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8021b5c:	9301      	str	r3, [sp, #4]
 8021b5e:	fa0f f38c 	sxth.w	r3, ip
 8021b62:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8021b66:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8021b6a:	9300      	str	r3, [sp, #0]
 8021b6c:	463a      	mov	r2, r7
 8021b6e:	4653      	mov	r3, sl
 8021b70:	4641      	mov	r1, r8
 8021b72:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021b74:	f7ff fd4c 	bl	8021610 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8021b78:	e713      	b.n	80219a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8021b7a:	1422      	asrs	r2, r4, #16
 8021b7c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8021b7e:	1433      	asrs	r3, r6, #16
 8021b80:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8021b84:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8021b88:	fb05 2303 	mla	r3, r5, r3, r2
 8021b8c:	085a      	lsrs	r2, r3, #1
 8021b8e:	07dd      	lsls	r5, r3, #31
 8021b90:	5cba      	ldrb	r2, [r7, r2]
 8021b92:	bf54      	ite	pl
 8021b94:	f002 020f 	andpl.w	r2, r2, #15
 8021b98:	1112      	asrmi	r2, r2, #4
 8021b9a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021b9e:	b2d2      	uxtb	r2, r2
 8021ba0:	2900      	cmp	r1, #0
 8021ba2:	d077      	beq.n	8021c94 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8021ba4:	f103 0e01 	add.w	lr, r3, #1
 8021ba8:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8021bac:	f01e 0f01 	tst.w	lr, #1
 8021bb0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021bb4:	bf0c      	ite	eq
 8021bb6:	f00c 0c0f 	andeq.w	ip, ip, #15
 8021bba:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8021bbe:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021bc2:	fa5f f58c 	uxtb.w	r5, ip
 8021bc6:	9512      	str	r5, [sp, #72]	; 0x48
 8021bc8:	b308      	cbz	r0, 8021c0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8021bca:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021bcc:	442b      	add	r3, r5
 8021bce:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021bd2:	07dd      	lsls	r5, r3, #31
 8021bd4:	f103 0301 	add.w	r3, r3, #1
 8021bd8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021bdc:	bf54      	ite	pl
 8021bde:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021be2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021be6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021bea:	fa5f f58c 	uxtb.w	r5, ip
 8021bee:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021bf2:	950c      	str	r5, [sp, #48]	; 0x30
 8021bf4:	07dd      	lsls	r5, r3, #31
 8021bf6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021bfa:	bf54      	ite	pl
 8021bfc:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021c00:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021c04:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021c08:	fa5f f38c 	uxtb.w	r3, ip
 8021c0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8021c0e:	b289      	uxth	r1, r1
 8021c10:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021c12:	b280      	uxth	r0, r0
 8021c14:	fb01 f300 	mul.w	r3, r1, r0
 8021c18:	0109      	lsls	r1, r1, #4
 8021c1a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8021c1e:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8021c22:	1ac9      	subs	r1, r1, r3
 8021c24:	b280      	uxth	r0, r0
 8021c26:	b289      	uxth	r1, r1
 8021c28:	ebac 0c00 	sub.w	ip, ip, r0
 8021c2c:	4369      	muls	r1, r5
 8021c2e:	fa1f fc8c 	uxth.w	ip, ip
 8021c32:	fb02 120c 	mla	r2, r2, ip, r1
 8021c36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021c38:	fb00 2001 	mla	r0, r0, r1, r2
 8021c3c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021c3e:	fb03 0302 	mla	r3, r3, r2, r0
 8021c42:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021c46:	b1d3      	cbz	r3, 8021c7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8021c48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021c4a:	4353      	muls	r3, r2
 8021c4c:	1c5a      	adds	r2, r3, #1
 8021c4e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021c52:	4a0f      	ldr	r2, [pc, #60]	; (8021c90 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8021c54:	121b      	asrs	r3, r3, #8
 8021c56:	6812      	ldr	r2, [r2, #0]
 8021c58:	2bff      	cmp	r3, #255	; 0xff
 8021c5a:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8021c5e:	d12d      	bne.n	8021cbc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8021c60:	0953      	lsrs	r3, r2, #5
 8021c62:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8021c66:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021c6a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021c6e:	f02c 0c07 	bic.w	ip, ip, #7
 8021c72:	ea43 0c0c 	orr.w	ip, r3, ip
 8021c76:	ea4c 0202 	orr.w	r2, ip, r2
 8021c7a:	f8a8 2000 	strh.w	r2, [r8]
 8021c7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021c80:	f108 0802 	add.w	r8, r8, #2
 8021c84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021c88:	441c      	add	r4, r3
 8021c8a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021c8c:	441e      	add	r6, r3
 8021c8e:	e6b9      	b.n	8021a04 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8021c90:	2400aeac 	.word	0x2400aeac
 8021c94:	2800      	cmp	r0, #0
 8021c96:	d0ba      	beq.n	8021c0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8021c98:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021c9a:	442b      	add	r3, r5
 8021c9c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021ca0:	07db      	lsls	r3, r3, #31
 8021ca2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021ca6:	bf54      	ite	pl
 8021ca8:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021cac:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021cb0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021cb4:	fa5f f38c 	uxtb.w	r3, ip
 8021cb8:	930c      	str	r3, [sp, #48]	; 0x30
 8021cba:	e7a8      	b.n	8021c0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8021cbc:	f8b8 e000 	ldrh.w	lr, [r8]
 8021cc0:	fa1f fa83 	uxth.w	sl, r3
 8021cc4:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8021cc8:	43db      	mvns	r3, r3
 8021cca:	ea4f 202e 	mov.w	r0, lr, asr #8
 8021cce:	fb11 f10a 	smulbb	r1, r1, sl
 8021cd2:	b2db      	uxtb	r3, r3
 8021cd4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021cd8:	b2d2      	uxtb	r2, r2
 8021cda:	fa5f fc8c 	uxtb.w	ip, ip
 8021cde:	fb00 1003 	mla	r0, r0, r3, r1
 8021ce2:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8021ce6:	fb12 f20a 	smulbb	r2, r2, sl
 8021cea:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021cee:	b280      	uxth	r0, r0
 8021cf0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021cf4:	fb1c fc0a 	smulbb	ip, ip, sl
 8021cf8:	fa5f fe8e 	uxtb.w	lr, lr
 8021cfc:	fb0e 2203 	mla	r2, lr, r3, r2
 8021d00:	fb01 cc03 	mla	ip, r1, r3, ip
 8021d04:	1c43      	adds	r3, r0, #1
 8021d06:	b292      	uxth	r2, r2
 8021d08:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8021d0c:	1c51      	adds	r1, r2, #1
 8021d0e:	fa1f fc8c 	uxth.w	ip, ip
 8021d12:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8021d16:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8021d1a:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8021d1e:	4308      	orrs	r0, r1
 8021d20:	f10c 0101 	add.w	r1, ip, #1
 8021d24:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8021d28:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8021d2c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8021d30:	ea40 000c 	orr.w	r0, r0, ip
 8021d34:	f8a8 0000 	strh.w	r0, [r8]
 8021d38:	e7a1      	b.n	8021c7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8021d3a:	b017      	add	sp, #92	; 0x5c
 8021d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021d40 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8021d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021d44:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8021d48:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8021d4c:	2d00      	cmp	r5, #0
 8021d4e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8021d52:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8021d56:	fb05 0e03 	mla	lr, r5, r3, r0
 8021d5a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8021d5e:	f2c0 80b0 	blt.w	8021ec2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8021d62:	45a9      	cmp	r9, r5
 8021d64:	f340 80ad 	ble.w	8021ec2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8021d68:	2800      	cmp	r0, #0
 8021d6a:	f2c0 80a8 	blt.w	8021ebe <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8021d6e:	4580      	cmp	r8, r0
 8021d70:	f340 80a5 	ble.w	8021ebe <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8021d74:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8021d78:	f01e 0f01 	tst.w	lr, #1
 8021d7c:	5d16      	ldrb	r6, [r2, r4]
 8021d7e:	bf0c      	ite	eq
 8021d80:	f006 060f 	andeq.w	r6, r6, #15
 8021d84:	1136      	asrne	r6, r6, #4
 8021d86:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8021d8a:	b2f6      	uxtb	r6, r6
 8021d8c:	1c44      	adds	r4, r0, #1
 8021d8e:	f100 809b 	bmi.w	8021ec8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8021d92:	45a0      	cmp	r8, r4
 8021d94:	f340 8098 	ble.w	8021ec8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8021d98:	2f00      	cmp	r7, #0
 8021d9a:	f000 8097 	beq.w	8021ecc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 8021d9e:	f10e 0a01 	add.w	sl, lr, #1
 8021da2:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8021da6:	f01a 0f01 	tst.w	sl, #1
 8021daa:	5d14      	ldrb	r4, [r2, r4]
 8021dac:	bf0c      	ite	eq
 8021dae:	f004 040f 	andeq.w	r4, r4, #15
 8021db2:	1124      	asrne	r4, r4, #4
 8021db4:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8021db8:	b2e4      	uxtb	r4, r4
 8021dba:	3501      	adds	r5, #1
 8021dbc:	f100 808a 	bmi.w	8021ed4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8021dc0:	45a9      	cmp	r9, r5
 8021dc2:	f340 8087 	ble.w	8021ed4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8021dc6:	f1bc 0f00 	cmp.w	ip, #0
 8021dca:	f000 8086 	beq.w	8021eda <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 8021dce:	2800      	cmp	r0, #0
 8021dd0:	db7e      	blt.n	8021ed0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8021dd2:	4580      	cmp	r8, r0
 8021dd4:	dd7c      	ble.n	8021ed0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8021dd6:	eb03 090e 	add.w	r9, r3, lr
 8021dda:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8021dde:	f019 0f01 	tst.w	r9, #1
 8021de2:	5d55      	ldrb	r5, [r2, r5]
 8021de4:	bf0c      	ite	eq
 8021de6:	f005 050f 	andeq.w	r5, r5, #15
 8021dea:	112d      	asrne	r5, r5, #4
 8021dec:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8021df0:	b2ed      	uxtb	r5, r5
 8021df2:	3001      	adds	r0, #1
 8021df4:	d474      	bmi.n	8021ee0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8021df6:	4580      	cmp	r8, r0
 8021df8:	dd72      	ble.n	8021ee0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8021dfa:	2f00      	cmp	r7, #0
 8021dfc:	d072      	beq.n	8021ee4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8021dfe:	3301      	adds	r3, #1
 8021e00:	449e      	add	lr, r3
 8021e02:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8021e06:	f01e 0f01 	tst.w	lr, #1
 8021e0a:	5cd0      	ldrb	r0, [r2, r3]
 8021e0c:	bf0c      	ite	eq
 8021e0e:	f000 000f 	andeq.w	r0, r0, #15
 8021e12:	1100      	asrne	r0, r0, #4
 8021e14:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8021e18:	b2c3      	uxtb	r3, r0
 8021e1a:	b2ba      	uxth	r2, r7
 8021e1c:	fa1f fc8c 	uxth.w	ip, ip
 8021e20:	fb02 f00c 	mul.w	r0, r2, ip
 8021e24:	0112      	lsls	r2, r2, #4
 8021e26:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8021e2a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8021e2e:	1a12      	subs	r2, r2, r0
 8021e30:	fa1f fc8c 	uxth.w	ip, ip
 8021e34:	b292      	uxth	r2, r2
 8021e36:	eba7 070c 	sub.w	r7, r7, ip
 8021e3a:	4362      	muls	r2, r4
 8021e3c:	b2bf      	uxth	r7, r7
 8021e3e:	fb06 2207 	mla	r2, r6, r7, r2
 8021e42:	fb0c 2505 	mla	r5, ip, r5, r2
 8021e46:	fb00 5303 	mla	r3, r0, r3, r5
 8021e4a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021e4e:	b3a3      	cbz	r3, 8021eba <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 8021e50:	4a25      	ldr	r2, [pc, #148]	; (8021ee8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 8021e52:	880e      	ldrh	r6, [r1, #0]
 8021e54:	6815      	ldr	r5, [r2, #0]
 8021e56:	b29a      	uxth	r2, r3
 8021e58:	1234      	asrs	r4, r6, #8
 8021e5a:	43db      	mvns	r3, r3
 8021e5c:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8021e60:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8021e64:	b2db      	uxtb	r3, r3
 8021e66:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8021e6a:	fb10 f002 	smulbb	r0, r0, r2
 8021e6e:	b2ed      	uxtb	r5, r5
 8021e70:	fb17 f702 	smulbb	r7, r7, r2
 8021e74:	fb04 0403 	mla	r4, r4, r3, r0
 8021e78:	10f0      	asrs	r0, r6, #3
 8021e7a:	fb15 f202 	smulbb	r2, r5, r2
 8021e7e:	00f6      	lsls	r6, r6, #3
 8021e80:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021e84:	b2a4      	uxth	r4, r4
 8021e86:	b2f6      	uxtb	r6, r6
 8021e88:	fb00 7003 	mla	r0, r0, r3, r7
 8021e8c:	fb06 2303 	mla	r3, r6, r3, r2
 8021e90:	b280      	uxth	r0, r0
 8021e92:	b29a      	uxth	r2, r3
 8021e94:	1c63      	adds	r3, r4, #1
 8021e96:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8021e9a:	1c53      	adds	r3, r2, #1
 8021e9c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021ea0:	1c42      	adds	r2, r0, #1
 8021ea2:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8021ea6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021eaa:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021eae:	0940      	lsrs	r0, r0, #5
 8021eb0:	4323      	orrs	r3, r4
 8021eb2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021eb6:	4303      	orrs	r3, r0
 8021eb8:	800b      	strh	r3, [r1, #0]
 8021eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021ebe:	2600      	movs	r6, #0
 8021ec0:	e764      	b.n	8021d8c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 8021ec2:	2400      	movs	r4, #0
 8021ec4:	4626      	mov	r6, r4
 8021ec6:	e778      	b.n	8021dba <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8021ec8:	2400      	movs	r4, #0
 8021eca:	e776      	b.n	8021dba <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8021ecc:	463c      	mov	r4, r7
 8021ece:	e774      	b.n	8021dba <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8021ed0:	2500      	movs	r5, #0
 8021ed2:	e78e      	b.n	8021df2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8021ed4:	2300      	movs	r3, #0
 8021ed6:	461d      	mov	r5, r3
 8021ed8:	e79f      	b.n	8021e1a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8021eda:	4663      	mov	r3, ip
 8021edc:	4665      	mov	r5, ip
 8021ede:	e79c      	b.n	8021e1a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8021ee0:	2300      	movs	r3, #0
 8021ee2:	e79a      	b.n	8021e1a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8021ee4:	463b      	mov	r3, r7
 8021ee6:	e798      	b.n	8021e1a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8021ee8:	2400aeac 	.word	0x2400aeac

08021eec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ef0:	b093      	sub	sp, #76	; 0x4c
 8021ef2:	461d      	mov	r5, r3
 8021ef4:	920c      	str	r2, [sp, #48]	; 0x30
 8021ef6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8021ef8:	9011      	str	r0, [sp, #68]	; 0x44
 8021efa:	9107      	str	r1, [sp, #28]
 8021efc:	6850      	ldr	r0, [r2, #4]
 8021efe:	6812      	ldr	r2, [r2, #0]
 8021f00:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8021f04:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8021f08:	fb00 1303 	mla	r3, r0, r3, r1
 8021f0c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8021f10:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021f12:	689b      	ldr	r3, [r3, #8]
 8021f14:	3301      	adds	r3, #1
 8021f16:	f023 0301 	bic.w	r3, r3, #1
 8021f1a:	9306      	str	r3, [sp, #24]
 8021f1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021f1e:	681f      	ldr	r7, [r3, #0]
 8021f20:	9b07      	ldr	r3, [sp, #28]
 8021f22:	2b00      	cmp	r3, #0
 8021f24:	dc03      	bgt.n	8021f2e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8021f26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021f28:	2b00      	cmp	r3, #0
 8021f2a:	f340 8267 	ble.w	80223fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8021f2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021f30:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021f34:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021f38:	1e48      	subs	r0, r1, #1
 8021f3a:	f102 3cff 	add.w	ip, r2, #4294967295
 8021f3e:	2d00      	cmp	r5, #0
 8021f40:	f340 80b7 	ble.w	80220b2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8021f44:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8021f48:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021f4c:	d406      	bmi.n	8021f5c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021f4e:	4586      	cmp	lr, r0
 8021f50:	da04      	bge.n	8021f5c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021f52:	2b00      	cmp	r3, #0
 8021f54:	db02      	blt.n	8021f5c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021f56:	4563      	cmp	r3, ip
 8021f58:	f2c0 80ac 	blt.w	80220b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8021f5c:	f11e 0e01 	adds.w	lr, lr, #1
 8021f60:	f100 809f 	bmi.w	80220a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8021f64:	4571      	cmp	r1, lr
 8021f66:	f2c0 809c 	blt.w	80220a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8021f6a:	3301      	adds	r3, #1
 8021f6c:	f100 8099 	bmi.w	80220a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8021f70:	429a      	cmp	r2, r3
 8021f72:	f2c0 8096 	blt.w	80220a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8021f76:	46c8      	mov	r8, r9
 8021f78:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8021f7c:	9509      	str	r5, [sp, #36]	; 0x24
 8021f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021f80:	2b00      	cmp	r3, #0
 8021f82:	f340 80b5 	ble.w	80220f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021f86:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8021f8a:	1430      	asrs	r0, r6, #16
 8021f8c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021f90:	9308      	str	r3, [sp, #32]
 8021f92:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021f94:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8021f98:	1423      	asrs	r3, r4, #16
 8021f9a:	f100 813f 	bmi.w	802221c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8021f9e:	f10c 3bff 	add.w	fp, ip, #4294967295
 8021fa2:	455b      	cmp	r3, fp
 8021fa4:	f280 813a 	bge.w	802221c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8021fa8:	2800      	cmp	r0, #0
 8021faa:	f2c0 8137 	blt.w	802221c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8021fae:	f10e 3bff 	add.w	fp, lr, #4294967295
 8021fb2:	4558      	cmp	r0, fp
 8021fb4:	f280 8132 	bge.w	802221c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8021fb8:	9a06      	ldr	r2, [sp, #24]
 8021fba:	fb00 3302 	mla	r3, r0, r2, r3
 8021fbe:	0858      	lsrs	r0, r3, #1
 8021fc0:	07da      	lsls	r2, r3, #31
 8021fc2:	9a08      	ldr	r2, [sp, #32]
 8021fc4:	f817 c000 	ldrb.w	ip, [r7, r0]
 8021fc8:	bf54      	ite	pl
 8021fca:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021fce:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021fd2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021fd6:	fa5f fc8c 	uxtb.w	ip, ip
 8021fda:	2a00      	cmp	r2, #0
 8021fdc:	f000 80cc 	beq.w	8022178 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8021fe0:	1c58      	adds	r0, r3, #1
 8021fe2:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8021fe6:	07c0      	lsls	r0, r0, #31
 8021fe8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8021fec:	bf54      	ite	pl
 8021fee:	f00e 0e0f 	andpl.w	lr, lr, #15
 8021ff2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8021ff6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8021ffa:	fa5f fe8e 	uxtb.w	lr, lr
 8021ffe:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8022002:	b1b9      	cbz	r1, 8022034 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8022004:	4453      	add	r3, sl
 8022006:	0858      	lsrs	r0, r3, #1
 8022008:	07da      	lsls	r2, r3, #31
 802200a:	5c38      	ldrb	r0, [r7, r0]
 802200c:	bf54      	ite	pl
 802200e:	f000 000f 	andpl.w	r0, r0, #15
 8022012:	1100      	asrmi	r0, r0, #4
 8022014:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022018:	b2c0      	uxtb	r0, r0
 802201a:	900a      	str	r0, [sp, #40]	; 0x28
 802201c:	1c58      	adds	r0, r3, #1
 802201e:	0843      	lsrs	r3, r0, #1
 8022020:	07c2      	lsls	r2, r0, #31
 8022022:	5cfb      	ldrb	r3, [r7, r3]
 8022024:	bf54      	ite	pl
 8022026:	f003 030f 	andpl.w	r3, r3, #15
 802202a:	111b      	asrmi	r3, r3, #4
 802202c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022030:	b2db      	uxtb	r3, r3
 8022032:	930e      	str	r3, [sp, #56]	; 0x38
 8022034:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8022038:	b289      	uxth	r1, r1
 802203a:	fb02 f301 	mul.w	r3, r2, r1
 802203e:	0112      	lsls	r2, r2, #4
 8022040:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8022044:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8022048:	1ad2      	subs	r2, r2, r3
 802204a:	b289      	uxth	r1, r1
 802204c:	b292      	uxth	r2, r2
 802204e:	1a40      	subs	r0, r0, r1
 8022050:	fa1f fe80 	uxth.w	lr, r0
 8022054:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022056:	4342      	muls	r2, r0
 8022058:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802205c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802205e:	fb01 c102 	mla	r1, r1, r2, ip
 8022062:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022064:	fb03 1302 	mla	r3, r3, r2, r1
 8022068:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802206c:	2bff      	cmp	r3, #255	; 0xff
 802206e:	f040 8094 	bne.w	802219a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8022072:	4bbf      	ldr	r3, [pc, #764]	; (8022370 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8022074:	681a      	ldr	r2, [r3, #0]
 8022076:	4bbf      	ldr	r3, [pc, #764]	; (8022374 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8022078:	0951      	lsrs	r1, r2, #5
 802207a:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802207e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022082:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022086:	430b      	orrs	r3, r1
 8022088:	4313      	orrs	r3, r2
 802208a:	f8a8 3000 	strh.w	r3, [r8]
 802208e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022090:	f108 0802 	add.w	r8, r8, #2
 8022094:	441c      	add	r4, r3
 8022096:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022098:	441e      	add	r6, r3
 802209a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802209c:	3b01      	subs	r3, #1
 802209e:	9309      	str	r3, [sp, #36]	; 0x24
 80220a0:	e76d      	b.n	8021f7e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80220a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80220a4:	3d01      	subs	r5, #1
 80220a6:	f109 0902 	add.w	r9, r9, #2
 80220aa:	441c      	add	r4, r3
 80220ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80220ae:	441e      	add	r6, r3
 80220b0:	e745      	b.n	8021f3e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80220b2:	d021      	beq.n	80220f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80220b4:	1e6b      	subs	r3, r5, #1
 80220b6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80220b8:	fb00 4003 	mla	r0, r0, r3, r4
 80220bc:	1400      	asrs	r0, r0, #16
 80220be:	f53f af5a 	bmi.w	8021f76 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80220c2:	3901      	subs	r1, #1
 80220c4:	4288      	cmp	r0, r1
 80220c6:	f6bf af56 	bge.w	8021f76 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80220ca:	9920      	ldr	r1, [sp, #128]	; 0x80
 80220cc:	fb01 6303 	mla	r3, r1, r3, r6
 80220d0:	141b      	asrs	r3, r3, #16
 80220d2:	f53f af50 	bmi.w	8021f76 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80220d6:	3a01      	subs	r2, #1
 80220d8:	4293      	cmp	r3, r2
 80220da:	f6bf af4c 	bge.w	8021f76 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80220de:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80220e2:	46a8      	mov	r8, r5
 80220e4:	46ce      	mov	lr, r9
 80220e6:	9308      	str	r3, [sp, #32]
 80220e8:	f1b8 0f00 	cmp.w	r8, #0
 80220ec:	f300 80b6 	bgt.w	802225c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80220f0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80220f4:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80220f8:	9b07      	ldr	r3, [sp, #28]
 80220fa:	2b00      	cmp	r3, #0
 80220fc:	f340 817e 	ble.w	80223fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8022100:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022104:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022106:	ee30 0a04 	vadd.f32	s0, s0, s8
 802210a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802210e:	eef0 6a62 	vmov.f32	s13, s5
 8022112:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022116:	ee31 1a05 	vadd.f32	s2, s2, s10
 802211a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802211e:	ee16 4a90 	vmov	r4, s13
 8022122:	eef0 6a43 	vmov.f32	s13, s6
 8022126:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802212a:	ee16 6a90 	vmov	r6, s13
 802212e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022132:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022136:	ee77 2a62 	vsub.f32	s5, s14, s5
 802213a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802213e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022142:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022146:	ee12 2a90 	vmov	r2, s5
 802214a:	eef0 2a47 	vmov.f32	s5, s14
 802214e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022152:	ee13 2a10 	vmov	r2, s6
 8022156:	931f      	str	r3, [sp, #124]	; 0x7c
 8022158:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802215a:	eeb0 3a67 	vmov.f32	s6, s15
 802215e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022162:	9320      	str	r3, [sp, #128]	; 0x80
 8022164:	9b07      	ldr	r3, [sp, #28]
 8022166:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022168:	3b01      	subs	r3, #1
 802216a:	9307      	str	r3, [sp, #28]
 802216c:	bf08      	it	eq
 802216e:	4615      	moveq	r5, r2
 8022170:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022172:	bf18      	it	ne
 8022174:	461d      	movne	r5, r3
 8022176:	e6d3      	b.n	8021f20 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8022178:	2900      	cmp	r1, #0
 802217a:	f43f af5b 	beq.w	8022034 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802217e:	eb0a 0003 	add.w	r0, sl, r3
 8022182:	0843      	lsrs	r3, r0, #1
 8022184:	07c0      	lsls	r0, r0, #31
 8022186:	5cfb      	ldrb	r3, [r7, r3]
 8022188:	bf54      	ite	pl
 802218a:	f003 030f 	andpl.w	r3, r3, #15
 802218e:	111b      	asrmi	r3, r3, #4
 8022190:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022194:	b2db      	uxtb	r3, r3
 8022196:	930a      	str	r3, [sp, #40]	; 0x28
 8022198:	e74c      	b.n	8022034 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802219a:	2b00      	cmp	r3, #0
 802219c:	f43f af77 	beq.w	802208e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80221a0:	4a73      	ldr	r2, [pc, #460]	; (8022370 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 80221a2:	fa1f fe83 	uxth.w	lr, r3
 80221a6:	f8b8 c000 	ldrh.w	ip, [r8]
 80221aa:	43db      	mvns	r3, r3
 80221ac:	6810      	ldr	r0, [r2, #0]
 80221ae:	ea4f 212c 	mov.w	r1, ip, asr #8
 80221b2:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80221b6:	b2db      	uxtb	r3, r3
 80221b8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80221bc:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 80221c0:	fb12 f20e 	smulbb	r2, r2, lr
 80221c4:	b2c0      	uxtb	r0, r0
 80221c6:	fb1b fb0e 	smulbb	fp, fp, lr
 80221ca:	fb01 2103 	mla	r1, r1, r3, r2
 80221ce:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80221d2:	fb10 fe0e 	smulbb	lr, r0, lr
 80221d6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80221da:	b289      	uxth	r1, r1
 80221dc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80221e0:	fa5f fc8c 	uxtb.w	ip, ip
 80221e4:	fb02 b203 	mla	r2, r2, r3, fp
 80221e8:	1c48      	adds	r0, r1, #1
 80221ea:	fb0c e303 	mla	r3, ip, r3, lr
 80221ee:	b292      	uxth	r2, r2
 80221f0:	b29b      	uxth	r3, r3
 80221f2:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80221f6:	f102 0b01 	add.w	fp, r2, #1
 80221fa:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 80221fe:	1c59      	adds	r1, r3, #1
 8022200:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8022204:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022208:	0952      	lsrs	r2, r2, #5
 802220a:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802220e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022212:	4301      	orrs	r1, r0
 8022214:	4311      	orrs	r1, r2
 8022216:	f8a8 1000 	strh.w	r1, [r8]
 802221a:	e738      	b.n	802208e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802221c:	f113 0b01 	adds.w	fp, r3, #1
 8022220:	f53f af35 	bmi.w	802208e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022224:	45dc      	cmp	ip, fp
 8022226:	f6ff af32 	blt.w	802208e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802222a:	f110 0b01 	adds.w	fp, r0, #1
 802222e:	f53f af2e 	bmi.w	802208e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022232:	45de      	cmp	lr, fp
 8022234:	f6ff af2b 	blt.w	802208e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022238:	9302      	str	r3, [sp, #8]
 802223a:	fa0f f38e 	sxth.w	r3, lr
 802223e:	9a08      	ldr	r2, [sp, #32]
 8022240:	9301      	str	r3, [sp, #4]
 8022242:	fa0f f38c 	sxth.w	r3, ip
 8022246:	9105      	str	r1, [sp, #20]
 8022248:	4641      	mov	r1, r8
 802224a:	9300      	str	r3, [sp, #0]
 802224c:	4653      	mov	r3, sl
 802224e:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8022252:	463a      	mov	r2, r7
 8022254:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022256:	f7ff fd73 	bl	8021d40 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802225a:	e718      	b.n	802208e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802225c:	1422      	asrs	r2, r4, #16
 802225e:	9906      	ldr	r1, [sp, #24]
 8022260:	1433      	asrs	r3, r6, #16
 8022262:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022266:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802226a:	fb01 2303 	mla	r3, r1, r3, r2
 802226e:	085a      	lsrs	r2, r3, #1
 8022270:	07d9      	lsls	r1, r3, #31
 8022272:	5cba      	ldrb	r2, [r7, r2]
 8022274:	bf54      	ite	pl
 8022276:	f002 020f 	andpl.w	r2, r2, #15
 802227a:	1112      	asrmi	r2, r2, #4
 802227c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022280:	b2d2      	uxtb	r2, r2
 8022282:	2800      	cmp	r0, #0
 8022284:	d063      	beq.n	802234e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8022286:	f103 0a01 	add.w	sl, r3, #1
 802228a:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802228e:	f01a 0f01 	tst.w	sl, #1
 8022292:	5c79      	ldrb	r1, [r7, r1]
 8022294:	bf0c      	ite	eq
 8022296:	f001 010f 	andeq.w	r1, r1, #15
 802229a:	1109      	asrne	r1, r1, #4
 802229c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80222a0:	b2c9      	uxtb	r1, r1
 80222a2:	910f      	str	r1, [sp, #60]	; 0x3c
 80222a4:	f1bc 0f00 	cmp.w	ip, #0
 80222a8:	d01a      	beq.n	80222e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 80222aa:	9908      	ldr	r1, [sp, #32]
 80222ac:	440b      	add	r3, r1
 80222ae:	0859      	lsrs	r1, r3, #1
 80222b0:	f013 0f01 	tst.w	r3, #1
 80222b4:	f103 0301 	add.w	r3, r3, #1
 80222b8:	5c79      	ldrb	r1, [r7, r1]
 80222ba:	bf0c      	ite	eq
 80222bc:	f001 010f 	andeq.w	r1, r1, #15
 80222c0:	1109      	asrne	r1, r1, #4
 80222c2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80222c6:	b2c9      	uxtb	r1, r1
 80222c8:	910b      	str	r1, [sp, #44]	; 0x2c
 80222ca:	0859      	lsrs	r1, r3, #1
 80222cc:	07db      	lsls	r3, r3, #31
 80222ce:	5c79      	ldrb	r1, [r7, r1]
 80222d0:	bf54      	ite	pl
 80222d2:	f001 010f 	andpl.w	r1, r1, #15
 80222d6:	1109      	asrmi	r1, r1, #4
 80222d8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80222dc:	b2c9      	uxtb	r1, r1
 80222de:	9110      	str	r1, [sp, #64]	; 0x40
 80222e0:	b280      	uxth	r0, r0
 80222e2:	fa1f fc8c 	uxth.w	ip, ip
 80222e6:	fb00 f30c 	mul.w	r3, r0, ip
 80222ea:	0100      	lsls	r0, r0, #4
 80222ec:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 80222f0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 80222f4:	1ac0      	subs	r0, r0, r3
 80222f6:	fa1f fc8c 	uxth.w	ip, ip
 80222fa:	b280      	uxth	r0, r0
 80222fc:	eba1 010c 	sub.w	r1, r1, ip
 8022300:	fa1f fa81 	uxth.w	sl, r1
 8022304:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022306:	4348      	muls	r0, r1
 8022308:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802230a:	fb02 020a 	mla	r2, r2, sl, r0
 802230e:	fb0c 2c01 	mla	ip, ip, r1, r2
 8022312:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022314:	fb03 c302 	mla	r3, r3, r2, ip
 8022318:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802231c:	2bff      	cmp	r3, #255	; 0xff
 802231e:	d12b      	bne.n	8022378 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8022320:	4b13      	ldr	r3, [pc, #76]	; (8022370 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8022322:	681a      	ldr	r2, [r3, #0]
 8022324:	4b13      	ldr	r3, [pc, #76]	; (8022374 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8022326:	0951      	lsrs	r1, r2, #5
 8022328:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802232c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022330:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022334:	430b      	orrs	r3, r1
 8022336:	4313      	orrs	r3, r2
 8022338:	f8ae 3000 	strh.w	r3, [lr]
 802233c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802233e:	f10e 0e02 	add.w	lr, lr, #2
 8022342:	f108 38ff 	add.w	r8, r8, #4294967295
 8022346:	441c      	add	r4, r3
 8022348:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802234a:	441e      	add	r6, r3
 802234c:	e6cc      	b.n	80220e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802234e:	f1bc 0f00 	cmp.w	ip, #0
 8022352:	d0c5      	beq.n	80222e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8022354:	9908      	ldr	r1, [sp, #32]
 8022356:	440b      	add	r3, r1
 8022358:	0859      	lsrs	r1, r3, #1
 802235a:	07db      	lsls	r3, r3, #31
 802235c:	5c79      	ldrb	r1, [r7, r1]
 802235e:	bf54      	ite	pl
 8022360:	f001 010f 	andpl.w	r1, r1, #15
 8022364:	1109      	asrmi	r1, r1, #4
 8022366:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802236a:	b2c9      	uxtb	r1, r1
 802236c:	910b      	str	r1, [sp, #44]	; 0x2c
 802236e:	e7b7      	b.n	80222e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8022370:	2400aeac 	.word	0x2400aeac
 8022374:	fffff800 	.word	0xfffff800
 8022378:	2b00      	cmp	r3, #0
 802237a:	d0df      	beq.n	802233c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 802237c:	4a21      	ldr	r2, [pc, #132]	; (8022404 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 802237e:	fa1f fa83 	uxth.w	sl, r3
 8022382:	f8be c000 	ldrh.w	ip, [lr]
 8022386:	43db      	mvns	r3, r3
 8022388:	6810      	ldr	r0, [r2, #0]
 802238a:	ea4f 212c 	mov.w	r1, ip, asr #8
 802238e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8022392:	b2db      	uxtb	r3, r3
 8022394:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022398:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802239c:	fb12 f20a 	smulbb	r2, r2, sl
 80223a0:	b2c0      	uxtb	r0, r0
 80223a2:	fb1b fb0a 	smulbb	fp, fp, sl
 80223a6:	fb01 2103 	mla	r1, r1, r3, r2
 80223aa:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80223ae:	fb10 f00a 	smulbb	r0, r0, sl
 80223b2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80223b6:	b289      	uxth	r1, r1
 80223b8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80223bc:	fa5f fc8c 	uxtb.w	ip, ip
 80223c0:	fb02 b203 	mla	r2, r2, r3, fp
 80223c4:	fb0c 0003 	mla	r0, ip, r3, r0
 80223c8:	1c4b      	adds	r3, r1, #1
 80223ca:	b292      	uxth	r2, r2
 80223cc:	b280      	uxth	r0, r0
 80223ce:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80223d2:	f100 0b01 	add.w	fp, r0, #1
 80223d6:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80223da:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 80223de:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 80223e2:	ea4b 0101 	orr.w	r1, fp, r1
 80223e6:	f102 0b01 	add.w	fp, r2, #1
 80223ea:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80223ee:	0952      	lsrs	r2, r2, #5
 80223f0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80223f4:	4311      	orrs	r1, r2
 80223f6:	f8ae 1000 	strh.w	r1, [lr]
 80223fa:	e79f      	b.n	802233c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 80223fc:	b013      	add	sp, #76	; 0x4c
 80223fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022402:	bf00      	nop
 8022404:	2400aeac 	.word	0x2400aeac

08022408 <CRC_Lock>:
 8022408:	4a20      	ldr	r2, [pc, #128]	; (802248c <CRC_Lock+0x84>)
 802240a:	b530      	push	{r4, r5, lr}
 802240c:	6813      	ldr	r3, [r2, #0]
 802240e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8022412:	f24c 2540 	movw	r5, #49728	; 0xc240
 8022416:	f023 0301 	bic.w	r3, r3, #1
 802241a:	6013      	str	r3, [r2, #0]
 802241c:	4b1c      	ldr	r3, [pc, #112]	; (8022490 <CRC_Lock+0x88>)
 802241e:	681a      	ldr	r2, [r3, #0]
 8022420:	4022      	ands	r2, r4
 8022422:	42aa      	cmp	r2, r5
 8022424:	d005      	beq.n	8022432 <CRC_Lock+0x2a>
 8022426:	681b      	ldr	r3, [r3, #0]
 8022428:	f24c 2270 	movw	r2, #49776	; 0xc270
 802242c:	4023      	ands	r3, r4
 802242e:	4293      	cmp	r3, r2
 8022430:	d124      	bne.n	802247c <CRC_Lock+0x74>
 8022432:	4b18      	ldr	r3, [pc, #96]	; (8022494 <CRC_Lock+0x8c>)
 8022434:	681b      	ldr	r3, [r3, #0]
 8022436:	bb0b      	cbnz	r3, 802247c <CRC_Lock+0x74>
 8022438:	4b17      	ldr	r3, [pc, #92]	; (8022498 <CRC_Lock+0x90>)
 802243a:	681a      	ldr	r2, [r3, #0]
 802243c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8022440:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8022444:	d00d      	beq.n	8022462 <CRC_Lock+0x5a>
 8022446:	681a      	ldr	r2, [r3, #0]
 8022448:	f240 4483 	movw	r4, #1155	; 0x483
 802244c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8022450:	42a2      	cmp	r2, r4
 8022452:	d006      	beq.n	8022462 <CRC_Lock+0x5a>
 8022454:	681b      	ldr	r3, [r3, #0]
 8022456:	f240 4285 	movw	r2, #1157	; 0x485
 802245a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802245e:	4293      	cmp	r3, r2
 8022460:	d10c      	bne.n	802247c <CRC_Lock+0x74>
 8022462:	4b0e      	ldr	r3, [pc, #56]	; (802249c <CRC_Lock+0x94>)
 8022464:	2201      	movs	r2, #1
 8022466:	601a      	str	r2, [r3, #0]
 8022468:	681a      	ldr	r2, [r3, #0]
 802246a:	2a00      	cmp	r2, #0
 802246c:	d1fc      	bne.n	8022468 <CRC_Lock+0x60>
 802246e:	4b0c      	ldr	r3, [pc, #48]	; (80224a0 <CRC_Lock+0x98>)
 8022470:	6018      	str	r0, [r3, #0]
 8022472:	6818      	ldr	r0, [r3, #0]
 8022474:	1a43      	subs	r3, r0, r1
 8022476:	4258      	negs	r0, r3
 8022478:	4158      	adcs	r0, r3
 802247a:	bd30      	pop	{r4, r5, pc}
 802247c:	4b09      	ldr	r3, [pc, #36]	; (80224a4 <CRC_Lock+0x9c>)
 802247e:	2201      	movs	r2, #1
 8022480:	601a      	str	r2, [r3, #0]
 8022482:	681a      	ldr	r2, [r3, #0]
 8022484:	2a00      	cmp	r2, #0
 8022486:	d1fc      	bne.n	8022482 <CRC_Lock+0x7a>
 8022488:	4b07      	ldr	r3, [pc, #28]	; (80224a8 <CRC_Lock+0xa0>)
 802248a:	e7f1      	b.n	8022470 <CRC_Lock+0x68>
 802248c:	e0002000 	.word	0xe0002000
 8022490:	e000ed00 	.word	0xe000ed00
 8022494:	e0042000 	.word	0xe0042000
 8022498:	5c001000 	.word	0x5c001000
 802249c:	58024c08 	.word	0x58024c08
 80224a0:	58024c00 	.word	0x58024c00
 80224a4:	40023008 	.word	0x40023008
 80224a8:	40023000 	.word	0x40023000

080224ac <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80224ac:	6101      	str	r1, [r0, #16]
 80224ae:	4770      	bx	lr

080224b0 <_ZN8touchgfx8Gestures4tickEv>:
 80224b0:	7b83      	ldrb	r3, [r0, #14]
 80224b2:	b14b      	cbz	r3, 80224c8 <_ZN8touchgfx8Gestures4tickEv+0x18>
 80224b4:	8903      	ldrh	r3, [r0, #8]
 80224b6:	3301      	adds	r3, #1
 80224b8:	b29b      	uxth	r3, r3
 80224ba:	2b07      	cmp	r3, #7
 80224bc:	8103      	strh	r3, [r0, #8]
 80224be:	bf81      	itttt	hi
 80224c0:	2300      	movhi	r3, #0
 80224c2:	8143      	strhhi	r3, [r0, #10]
 80224c4:	8183      	strhhi	r3, [r0, #12]
 80224c6:	7383      	strbhi	r3, [r0, #14]
 80224c8:	4770      	bx	lr
	...

080224cc <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80224cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80224d0:	4698      	mov	r8, r3
 80224d2:	8883      	ldrh	r3, [r0, #4]
 80224d4:	4604      	mov	r4, r0
 80224d6:	4617      	mov	r7, r2
 80224d8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80224dc:	eba8 0303 	sub.w	r3, r8, r3
 80224e0:	4a19      	ldr	r2, [pc, #100]	; (8022548 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80224e2:	460e      	mov	r6, r1
 80224e4:	b21b      	sxth	r3, r3
 80224e6:	88c1      	ldrh	r1, [r0, #6]
 80224e8:	9200      	str	r2, [sp, #0]
 80224ea:	2000      	movs	r0, #0
 80224ec:	2b00      	cmp	r3, #0
 80224ee:	8aa2      	ldrh	r2, [r4, #20]
 80224f0:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80224f4:	bfb8      	it	lt
 80224f6:	425b      	neglt	r3, r3
 80224f8:	f88d 0004 	strb.w	r0, [sp, #4]
 80224fc:	f8ad 1008 	strh.w	r1, [sp, #8]
 8022500:	b21b      	sxth	r3, r3
 8022502:	f8ad 800a 	strh.w	r8, [sp, #10]
 8022506:	f8ad 500c 	strh.w	r5, [sp, #12]
 802250a:	4293      	cmp	r3, r2
 802250c:	dc07      	bgt.n	802251e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802250e:	1a69      	subs	r1, r5, r1
 8022510:	b209      	sxth	r1, r1
 8022512:	2900      	cmp	r1, #0
 8022514:	bfb8      	it	lt
 8022516:	4249      	neglt	r1, r1
 8022518:	b209      	sxth	r1, r1
 802251a:	428a      	cmp	r2, r1
 802251c:	da10      	bge.n	8022540 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802251e:	6920      	ldr	r0, [r4, #16]
 8022520:	4669      	mov	r1, sp
 8022522:	eba8 0606 	sub.w	r6, r8, r6
 8022526:	1bef      	subs	r7, r5, r7
 8022528:	6803      	ldr	r3, [r0, #0]
 802252a:	685b      	ldr	r3, [r3, #4]
 802252c:	4798      	blx	r3
 802252e:	2300      	movs	r3, #0
 8022530:	2001      	movs	r0, #1
 8022532:	8166      	strh	r6, [r4, #10]
 8022534:	8123      	strh	r3, [r4, #8]
 8022536:	81a7      	strh	r7, [r4, #12]
 8022538:	f8a4 8004 	strh.w	r8, [r4, #4]
 802253c:	80e5      	strh	r5, [r4, #6]
 802253e:	73a0      	strb	r0, [r4, #14]
 8022540:	b004      	add	sp, #16
 8022542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022546:	bf00      	nop
 8022548:	08025158 	.word	0x08025158

0802254c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802254c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802254e:	461e      	mov	r6, r3
 8022550:	1e4b      	subs	r3, r1, #1
 8022552:	b085      	sub	sp, #20
 8022554:	4604      	mov	r4, r0
 8022556:	2b01      	cmp	r3, #1
 8022558:	460d      	mov	r5, r1
 802255a:	4617      	mov	r7, r2
 802255c:	d84b      	bhi.n	80225f6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802255e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8022562:	1cd3      	adds	r3, r2, #3
 8022564:	b29b      	uxth	r3, r3
 8022566:	2b06      	cmp	r3, #6
 8022568:	d916      	bls.n	8022598 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802256a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802260c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802256e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022572:	f8cd c004 	str.w	ip, [sp, #4]
 8022576:	f04f 0c00 	mov.w	ip, #0
 802257a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802257e:	6900      	ldr	r0, [r0, #16]
 8022580:	f8ad 100c 	strh.w	r1, [sp, #12]
 8022584:	a901      	add	r1, sp, #4
 8022586:	f88d c008 	strb.w	ip, [sp, #8]
 802258a:	f8ad 200a 	strh.w	r2, [sp, #10]
 802258e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022592:	6803      	ldr	r3, [r0, #0]
 8022594:	689b      	ldr	r3, [r3, #8]
 8022596:	4798      	blx	r3
 8022598:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802259c:	1cd3      	adds	r3, r2, #3
 802259e:	b29b      	uxth	r3, r3
 80225a0:	2b06      	cmp	r3, #6
 80225a2:	d916      	bls.n	80225d2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80225a4:	f8df c064 	ldr.w	ip, [pc, #100]	; 802260c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80225a8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80225ac:	f8cd c004 	str.w	ip, [sp, #4]
 80225b0:	f04f 0c01 	mov.w	ip, #1
 80225b4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80225b8:	6920      	ldr	r0, [r4, #16]
 80225ba:	f8ad 100c 	strh.w	r1, [sp, #12]
 80225be:	a901      	add	r1, sp, #4
 80225c0:	f88d c008 	strb.w	ip, [sp, #8]
 80225c4:	f8ad 200a 	strh.w	r2, [sp, #10]
 80225c8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80225cc:	6803      	ldr	r3, [r0, #0]
 80225ce:	689b      	ldr	r3, [r3, #8]
 80225d0:	4798      	blx	r3
 80225d2:	4b0d      	ldr	r3, [pc, #52]	; (8022608 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80225d4:	a901      	add	r1, sp, #4
 80225d6:	6920      	ldr	r0, [r4, #16]
 80225d8:	9301      	str	r3, [sp, #4]
 80225da:	2300      	movs	r3, #0
 80225dc:	f88d 5008 	strb.w	r5, [sp, #8]
 80225e0:	f8ad 700a 	strh.w	r7, [sp, #10]
 80225e4:	f8ad 600c 	strh.w	r6, [sp, #12]
 80225e8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80225ec:	6803      	ldr	r3, [r0, #0]
 80225ee:	681b      	ldr	r3, [r3, #0]
 80225f0:	4798      	blx	r3
 80225f2:	b005      	add	sp, #20
 80225f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80225f6:	2900      	cmp	r1, #0
 80225f8:	d1eb      	bne.n	80225d2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80225fa:	80a2      	strh	r2, [r4, #4]
 80225fc:	80c6      	strh	r6, [r0, #6]
 80225fe:	60a1      	str	r1, [r4, #8]
 8022600:	81a1      	strh	r1, [r4, #12]
 8022602:	73a1      	strb	r1, [r4, #14]
 8022604:	e7e5      	b.n	80225d2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8022606:	bf00      	nop
 8022608:	08025144 	.word	0x08025144
 802260c:	0802516c 	.word	0x0802516c

08022610 <__aeabi_atexit>:
 8022610:	460b      	mov	r3, r1
 8022612:	4601      	mov	r1, r0
 8022614:	4618      	mov	r0, r3
 8022616:	f000 b853 	b.w	80226c0 <__cxa_atexit>

0802261a <_ZdlPvj>:
 802261a:	f000 b812 	b.w	8022642 <_ZdlPv>

0802261e <__cxa_guard_acquire>:
 802261e:	6803      	ldr	r3, [r0, #0]
 8022620:	07db      	lsls	r3, r3, #31
 8022622:	d406      	bmi.n	8022632 <__cxa_guard_acquire+0x14>
 8022624:	7843      	ldrb	r3, [r0, #1]
 8022626:	b103      	cbz	r3, 802262a <__cxa_guard_acquire+0xc>
 8022628:	deff      	udf	#255	; 0xff
 802262a:	2301      	movs	r3, #1
 802262c:	7043      	strb	r3, [r0, #1]
 802262e:	4618      	mov	r0, r3
 8022630:	4770      	bx	lr
 8022632:	2000      	movs	r0, #0
 8022634:	4770      	bx	lr

08022636 <__cxa_guard_release>:
 8022636:	2301      	movs	r3, #1
 8022638:	6003      	str	r3, [r0, #0]
 802263a:	4770      	bx	lr

0802263c <__cxa_pure_virtual>:
 802263c:	b508      	push	{r3, lr}
 802263e:	f000 f80f 	bl	8022660 <_ZSt9terminatev>

08022642 <_ZdlPv>:
 8022642:	f000 b88f 	b.w	8022764 <free>

08022646 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8022646:	b508      	push	{r3, lr}
 8022648:	4780      	blx	r0
 802264a:	f000 f80e 	bl	802266a <abort>
	...

08022650 <_ZSt13get_terminatev>:
 8022650:	4b02      	ldr	r3, [pc, #8]	; (802265c <_ZSt13get_terminatev+0xc>)
 8022652:	6818      	ldr	r0, [r3, #0]
 8022654:	f3bf 8f5b 	dmb	ish
 8022658:	4770      	bx	lr
 802265a:	bf00      	nop
 802265c:	240000c0 	.word	0x240000c0

08022660 <_ZSt9terminatev>:
 8022660:	b508      	push	{r3, lr}
 8022662:	f7ff fff5 	bl	8022650 <_ZSt13get_terminatev>
 8022666:	f7ff ffee 	bl	8022646 <_ZN10__cxxabiv111__terminateEPFvvE>

0802266a <abort>:
 802266a:	b508      	push	{r3, lr}
 802266c:	2006      	movs	r0, #6
 802266e:	f000 fc9d 	bl	8022fac <raise>
 8022672:	2001      	movs	r0, #1
 8022674:	f7e2 fb64 	bl	8004d40 <_exit>

08022678 <__assert_func>:
 8022678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802267a:	4614      	mov	r4, r2
 802267c:	461a      	mov	r2, r3
 802267e:	4b09      	ldr	r3, [pc, #36]	; (80226a4 <__assert_func+0x2c>)
 8022680:	681b      	ldr	r3, [r3, #0]
 8022682:	4605      	mov	r5, r0
 8022684:	68d8      	ldr	r0, [r3, #12]
 8022686:	b14c      	cbz	r4, 802269c <__assert_func+0x24>
 8022688:	4b07      	ldr	r3, [pc, #28]	; (80226a8 <__assert_func+0x30>)
 802268a:	9100      	str	r1, [sp, #0]
 802268c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022690:	4906      	ldr	r1, [pc, #24]	; (80226ac <__assert_func+0x34>)
 8022692:	462b      	mov	r3, r5
 8022694:	f000 f828 	bl	80226e8 <fiprintf>
 8022698:	f7ff ffe7 	bl	802266a <abort>
 802269c:	4b04      	ldr	r3, [pc, #16]	; (80226b0 <__assert_func+0x38>)
 802269e:	461c      	mov	r4, r3
 80226a0:	e7f3      	b.n	802268a <__assert_func+0x12>
 80226a2:	bf00      	nop
 80226a4:	240000c4 	.word	0x240000c4
 80226a8:	08025434 	.word	0x08025434
 80226ac:	08025441 	.word	0x08025441
 80226b0:	0802546f 	.word	0x0802546f

080226b4 <atexit>:
 80226b4:	2300      	movs	r3, #0
 80226b6:	4601      	mov	r1, r0
 80226b8:	461a      	mov	r2, r3
 80226ba:	4618      	mov	r0, r3
 80226bc:	f000 bd52 	b.w	8023164 <__register_exitproc>

080226c0 <__cxa_atexit>:
 80226c0:	b510      	push	{r4, lr}
 80226c2:	4c05      	ldr	r4, [pc, #20]	; (80226d8 <__cxa_atexit+0x18>)
 80226c4:	4613      	mov	r3, r2
 80226c6:	b12c      	cbz	r4, 80226d4 <__cxa_atexit+0x14>
 80226c8:	460a      	mov	r2, r1
 80226ca:	4601      	mov	r1, r0
 80226cc:	2002      	movs	r0, #2
 80226ce:	f000 fd49 	bl	8023164 <__register_exitproc>
 80226d2:	bd10      	pop	{r4, pc}
 80226d4:	4620      	mov	r0, r4
 80226d6:	e7fc      	b.n	80226d2 <__cxa_atexit+0x12>
 80226d8:	08023165 	.word	0x08023165

080226dc <__errno>:
 80226dc:	4b01      	ldr	r3, [pc, #4]	; (80226e4 <__errno+0x8>)
 80226de:	6818      	ldr	r0, [r3, #0]
 80226e0:	4770      	bx	lr
 80226e2:	bf00      	nop
 80226e4:	240000c4 	.word	0x240000c4

080226e8 <fiprintf>:
 80226e8:	b40e      	push	{r1, r2, r3}
 80226ea:	b503      	push	{r0, r1, lr}
 80226ec:	4601      	mov	r1, r0
 80226ee:	ab03      	add	r3, sp, #12
 80226f0:	4805      	ldr	r0, [pc, #20]	; (8022708 <fiprintf+0x20>)
 80226f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80226f6:	6800      	ldr	r0, [r0, #0]
 80226f8:	9301      	str	r3, [sp, #4]
 80226fa:	f000 f95b 	bl	80229b4 <_vfiprintf_r>
 80226fe:	b002      	add	sp, #8
 8022700:	f85d eb04 	ldr.w	lr, [sp], #4
 8022704:	b003      	add	sp, #12
 8022706:	4770      	bx	lr
 8022708:	240000c4 	.word	0x240000c4

0802270c <__libc_init_array>:
 802270c:	b570      	push	{r4, r5, r6, lr}
 802270e:	4d0d      	ldr	r5, [pc, #52]	; (8022744 <__libc_init_array+0x38>)
 8022710:	4c0d      	ldr	r4, [pc, #52]	; (8022748 <__libc_init_array+0x3c>)
 8022712:	1b64      	subs	r4, r4, r5
 8022714:	10a4      	asrs	r4, r4, #2
 8022716:	2600      	movs	r6, #0
 8022718:	42a6      	cmp	r6, r4
 802271a:	d109      	bne.n	8022730 <__libc_init_array+0x24>
 802271c:	4d0b      	ldr	r5, [pc, #44]	; (802274c <__libc_init_array+0x40>)
 802271e:	4c0c      	ldr	r4, [pc, #48]	; (8022750 <__libc_init_array+0x44>)
 8022720:	f001 f85a 	bl	80237d8 <_init>
 8022724:	1b64      	subs	r4, r4, r5
 8022726:	10a4      	asrs	r4, r4, #2
 8022728:	2600      	movs	r6, #0
 802272a:	42a6      	cmp	r6, r4
 802272c:	d105      	bne.n	802273a <__libc_init_array+0x2e>
 802272e:	bd70      	pop	{r4, r5, r6, pc}
 8022730:	f855 3b04 	ldr.w	r3, [r5], #4
 8022734:	4798      	blx	r3
 8022736:	3601      	adds	r6, #1
 8022738:	e7ee      	b.n	8022718 <__libc_init_array+0xc>
 802273a:	f855 3b04 	ldr.w	r3, [r5], #4
 802273e:	4798      	blx	r3
 8022740:	3601      	adds	r6, #1
 8022742:	e7f2      	b.n	802272a <__libc_init_array+0x1e>
 8022744:	08025524 	.word	0x08025524
 8022748:	08025524 	.word	0x08025524
 802274c:	08025524 	.word	0x08025524
 8022750:	08025538 	.word	0x08025538

08022754 <malloc>:
 8022754:	4b02      	ldr	r3, [pc, #8]	; (8022760 <malloc+0xc>)
 8022756:	4601      	mov	r1, r0
 8022758:	6818      	ldr	r0, [r3, #0]
 802275a:	f000 b88d 	b.w	8022878 <_malloc_r>
 802275e:	bf00      	nop
 8022760:	240000c4 	.word	0x240000c4

08022764 <free>:
 8022764:	4b02      	ldr	r3, [pc, #8]	; (8022770 <free+0xc>)
 8022766:	4601      	mov	r1, r0
 8022768:	6818      	ldr	r0, [r3, #0]
 802276a:	f000 b819 	b.w	80227a0 <_free_r>
 802276e:	bf00      	nop
 8022770:	240000c4 	.word	0x240000c4

08022774 <memcpy>:
 8022774:	440a      	add	r2, r1
 8022776:	4291      	cmp	r1, r2
 8022778:	f100 33ff 	add.w	r3, r0, #4294967295
 802277c:	d100      	bne.n	8022780 <memcpy+0xc>
 802277e:	4770      	bx	lr
 8022780:	b510      	push	{r4, lr}
 8022782:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022786:	f803 4f01 	strb.w	r4, [r3, #1]!
 802278a:	4291      	cmp	r1, r2
 802278c:	d1f9      	bne.n	8022782 <memcpy+0xe>
 802278e:	bd10      	pop	{r4, pc}

08022790 <memset>:
 8022790:	4402      	add	r2, r0
 8022792:	4603      	mov	r3, r0
 8022794:	4293      	cmp	r3, r2
 8022796:	d100      	bne.n	802279a <memset+0xa>
 8022798:	4770      	bx	lr
 802279a:	f803 1b01 	strb.w	r1, [r3], #1
 802279e:	e7f9      	b.n	8022794 <memset+0x4>

080227a0 <_free_r>:
 80227a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80227a2:	2900      	cmp	r1, #0
 80227a4:	d044      	beq.n	8022830 <_free_r+0x90>
 80227a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80227aa:	9001      	str	r0, [sp, #4]
 80227ac:	2b00      	cmp	r3, #0
 80227ae:	f1a1 0404 	sub.w	r4, r1, #4
 80227b2:	bfb8      	it	lt
 80227b4:	18e4      	addlt	r4, r4, r3
 80227b6:	f000 ff57 	bl	8023668 <__malloc_lock>
 80227ba:	4a1e      	ldr	r2, [pc, #120]	; (8022834 <_free_r+0x94>)
 80227bc:	9801      	ldr	r0, [sp, #4]
 80227be:	6813      	ldr	r3, [r2, #0]
 80227c0:	b933      	cbnz	r3, 80227d0 <_free_r+0x30>
 80227c2:	6063      	str	r3, [r4, #4]
 80227c4:	6014      	str	r4, [r2, #0]
 80227c6:	b003      	add	sp, #12
 80227c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80227cc:	f000 bf52 	b.w	8023674 <__malloc_unlock>
 80227d0:	42a3      	cmp	r3, r4
 80227d2:	d908      	bls.n	80227e6 <_free_r+0x46>
 80227d4:	6825      	ldr	r5, [r4, #0]
 80227d6:	1961      	adds	r1, r4, r5
 80227d8:	428b      	cmp	r3, r1
 80227da:	bf01      	itttt	eq
 80227dc:	6819      	ldreq	r1, [r3, #0]
 80227de:	685b      	ldreq	r3, [r3, #4]
 80227e0:	1949      	addeq	r1, r1, r5
 80227e2:	6021      	streq	r1, [r4, #0]
 80227e4:	e7ed      	b.n	80227c2 <_free_r+0x22>
 80227e6:	461a      	mov	r2, r3
 80227e8:	685b      	ldr	r3, [r3, #4]
 80227ea:	b10b      	cbz	r3, 80227f0 <_free_r+0x50>
 80227ec:	42a3      	cmp	r3, r4
 80227ee:	d9fa      	bls.n	80227e6 <_free_r+0x46>
 80227f0:	6811      	ldr	r1, [r2, #0]
 80227f2:	1855      	adds	r5, r2, r1
 80227f4:	42a5      	cmp	r5, r4
 80227f6:	d10b      	bne.n	8022810 <_free_r+0x70>
 80227f8:	6824      	ldr	r4, [r4, #0]
 80227fa:	4421      	add	r1, r4
 80227fc:	1854      	adds	r4, r2, r1
 80227fe:	42a3      	cmp	r3, r4
 8022800:	6011      	str	r1, [r2, #0]
 8022802:	d1e0      	bne.n	80227c6 <_free_r+0x26>
 8022804:	681c      	ldr	r4, [r3, #0]
 8022806:	685b      	ldr	r3, [r3, #4]
 8022808:	6053      	str	r3, [r2, #4]
 802280a:	4421      	add	r1, r4
 802280c:	6011      	str	r1, [r2, #0]
 802280e:	e7da      	b.n	80227c6 <_free_r+0x26>
 8022810:	d902      	bls.n	8022818 <_free_r+0x78>
 8022812:	230c      	movs	r3, #12
 8022814:	6003      	str	r3, [r0, #0]
 8022816:	e7d6      	b.n	80227c6 <_free_r+0x26>
 8022818:	6825      	ldr	r5, [r4, #0]
 802281a:	1961      	adds	r1, r4, r5
 802281c:	428b      	cmp	r3, r1
 802281e:	bf04      	itt	eq
 8022820:	6819      	ldreq	r1, [r3, #0]
 8022822:	685b      	ldreq	r3, [r3, #4]
 8022824:	6063      	str	r3, [r4, #4]
 8022826:	bf04      	itt	eq
 8022828:	1949      	addeq	r1, r1, r5
 802282a:	6021      	streq	r1, [r4, #0]
 802282c:	6054      	str	r4, [r2, #4]
 802282e:	e7ca      	b.n	80227c6 <_free_r+0x26>
 8022830:	b003      	add	sp, #12
 8022832:	bd30      	pop	{r4, r5, pc}
 8022834:	2400afa0 	.word	0x2400afa0

08022838 <sbrk_aligned>:
 8022838:	b570      	push	{r4, r5, r6, lr}
 802283a:	4e0e      	ldr	r6, [pc, #56]	; (8022874 <sbrk_aligned+0x3c>)
 802283c:	460c      	mov	r4, r1
 802283e:	6831      	ldr	r1, [r6, #0]
 8022840:	4605      	mov	r5, r0
 8022842:	b911      	cbnz	r1, 802284a <sbrk_aligned+0x12>
 8022844:	f000 fb7a 	bl	8022f3c <_sbrk_r>
 8022848:	6030      	str	r0, [r6, #0]
 802284a:	4621      	mov	r1, r4
 802284c:	4628      	mov	r0, r5
 802284e:	f000 fb75 	bl	8022f3c <_sbrk_r>
 8022852:	1c43      	adds	r3, r0, #1
 8022854:	d00a      	beq.n	802286c <sbrk_aligned+0x34>
 8022856:	1cc4      	adds	r4, r0, #3
 8022858:	f024 0403 	bic.w	r4, r4, #3
 802285c:	42a0      	cmp	r0, r4
 802285e:	d007      	beq.n	8022870 <sbrk_aligned+0x38>
 8022860:	1a21      	subs	r1, r4, r0
 8022862:	4628      	mov	r0, r5
 8022864:	f000 fb6a 	bl	8022f3c <_sbrk_r>
 8022868:	3001      	adds	r0, #1
 802286a:	d101      	bne.n	8022870 <sbrk_aligned+0x38>
 802286c:	f04f 34ff 	mov.w	r4, #4294967295
 8022870:	4620      	mov	r0, r4
 8022872:	bd70      	pop	{r4, r5, r6, pc}
 8022874:	2400afa4 	.word	0x2400afa4

08022878 <_malloc_r>:
 8022878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802287c:	1ccd      	adds	r5, r1, #3
 802287e:	f025 0503 	bic.w	r5, r5, #3
 8022882:	3508      	adds	r5, #8
 8022884:	2d0c      	cmp	r5, #12
 8022886:	bf38      	it	cc
 8022888:	250c      	movcc	r5, #12
 802288a:	2d00      	cmp	r5, #0
 802288c:	4607      	mov	r7, r0
 802288e:	db01      	blt.n	8022894 <_malloc_r+0x1c>
 8022890:	42a9      	cmp	r1, r5
 8022892:	d905      	bls.n	80228a0 <_malloc_r+0x28>
 8022894:	230c      	movs	r3, #12
 8022896:	603b      	str	r3, [r7, #0]
 8022898:	2600      	movs	r6, #0
 802289a:	4630      	mov	r0, r6
 802289c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80228a0:	4e2e      	ldr	r6, [pc, #184]	; (802295c <_malloc_r+0xe4>)
 80228a2:	f000 fee1 	bl	8023668 <__malloc_lock>
 80228a6:	6833      	ldr	r3, [r6, #0]
 80228a8:	461c      	mov	r4, r3
 80228aa:	bb34      	cbnz	r4, 80228fa <_malloc_r+0x82>
 80228ac:	4629      	mov	r1, r5
 80228ae:	4638      	mov	r0, r7
 80228b0:	f7ff ffc2 	bl	8022838 <sbrk_aligned>
 80228b4:	1c43      	adds	r3, r0, #1
 80228b6:	4604      	mov	r4, r0
 80228b8:	d14d      	bne.n	8022956 <_malloc_r+0xde>
 80228ba:	6834      	ldr	r4, [r6, #0]
 80228bc:	4626      	mov	r6, r4
 80228be:	2e00      	cmp	r6, #0
 80228c0:	d140      	bne.n	8022944 <_malloc_r+0xcc>
 80228c2:	6823      	ldr	r3, [r4, #0]
 80228c4:	4631      	mov	r1, r6
 80228c6:	4638      	mov	r0, r7
 80228c8:	eb04 0803 	add.w	r8, r4, r3
 80228cc:	f000 fb36 	bl	8022f3c <_sbrk_r>
 80228d0:	4580      	cmp	r8, r0
 80228d2:	d13a      	bne.n	802294a <_malloc_r+0xd2>
 80228d4:	6821      	ldr	r1, [r4, #0]
 80228d6:	3503      	adds	r5, #3
 80228d8:	1a6d      	subs	r5, r5, r1
 80228da:	f025 0503 	bic.w	r5, r5, #3
 80228de:	3508      	adds	r5, #8
 80228e0:	2d0c      	cmp	r5, #12
 80228e2:	bf38      	it	cc
 80228e4:	250c      	movcc	r5, #12
 80228e6:	4629      	mov	r1, r5
 80228e8:	4638      	mov	r0, r7
 80228ea:	f7ff ffa5 	bl	8022838 <sbrk_aligned>
 80228ee:	3001      	adds	r0, #1
 80228f0:	d02b      	beq.n	802294a <_malloc_r+0xd2>
 80228f2:	6823      	ldr	r3, [r4, #0]
 80228f4:	442b      	add	r3, r5
 80228f6:	6023      	str	r3, [r4, #0]
 80228f8:	e00e      	b.n	8022918 <_malloc_r+0xa0>
 80228fa:	6822      	ldr	r2, [r4, #0]
 80228fc:	1b52      	subs	r2, r2, r5
 80228fe:	d41e      	bmi.n	802293e <_malloc_r+0xc6>
 8022900:	2a0b      	cmp	r2, #11
 8022902:	d916      	bls.n	8022932 <_malloc_r+0xba>
 8022904:	1961      	adds	r1, r4, r5
 8022906:	42a3      	cmp	r3, r4
 8022908:	6025      	str	r5, [r4, #0]
 802290a:	bf18      	it	ne
 802290c:	6059      	strne	r1, [r3, #4]
 802290e:	6863      	ldr	r3, [r4, #4]
 8022910:	bf08      	it	eq
 8022912:	6031      	streq	r1, [r6, #0]
 8022914:	5162      	str	r2, [r4, r5]
 8022916:	604b      	str	r3, [r1, #4]
 8022918:	4638      	mov	r0, r7
 802291a:	f104 060b 	add.w	r6, r4, #11
 802291e:	f000 fea9 	bl	8023674 <__malloc_unlock>
 8022922:	f026 0607 	bic.w	r6, r6, #7
 8022926:	1d23      	adds	r3, r4, #4
 8022928:	1af2      	subs	r2, r6, r3
 802292a:	d0b6      	beq.n	802289a <_malloc_r+0x22>
 802292c:	1b9b      	subs	r3, r3, r6
 802292e:	50a3      	str	r3, [r4, r2]
 8022930:	e7b3      	b.n	802289a <_malloc_r+0x22>
 8022932:	6862      	ldr	r2, [r4, #4]
 8022934:	42a3      	cmp	r3, r4
 8022936:	bf0c      	ite	eq
 8022938:	6032      	streq	r2, [r6, #0]
 802293a:	605a      	strne	r2, [r3, #4]
 802293c:	e7ec      	b.n	8022918 <_malloc_r+0xa0>
 802293e:	4623      	mov	r3, r4
 8022940:	6864      	ldr	r4, [r4, #4]
 8022942:	e7b2      	b.n	80228aa <_malloc_r+0x32>
 8022944:	4634      	mov	r4, r6
 8022946:	6876      	ldr	r6, [r6, #4]
 8022948:	e7b9      	b.n	80228be <_malloc_r+0x46>
 802294a:	230c      	movs	r3, #12
 802294c:	603b      	str	r3, [r7, #0]
 802294e:	4638      	mov	r0, r7
 8022950:	f000 fe90 	bl	8023674 <__malloc_unlock>
 8022954:	e7a1      	b.n	802289a <_malloc_r+0x22>
 8022956:	6025      	str	r5, [r4, #0]
 8022958:	e7de      	b.n	8022918 <_malloc_r+0xa0>
 802295a:	bf00      	nop
 802295c:	2400afa0 	.word	0x2400afa0

08022960 <__sfputc_r>:
 8022960:	6893      	ldr	r3, [r2, #8]
 8022962:	3b01      	subs	r3, #1
 8022964:	2b00      	cmp	r3, #0
 8022966:	b410      	push	{r4}
 8022968:	6093      	str	r3, [r2, #8]
 802296a:	da08      	bge.n	802297e <__sfputc_r+0x1e>
 802296c:	6994      	ldr	r4, [r2, #24]
 802296e:	42a3      	cmp	r3, r4
 8022970:	db01      	blt.n	8022976 <__sfputc_r+0x16>
 8022972:	290a      	cmp	r1, #10
 8022974:	d103      	bne.n	802297e <__sfputc_r+0x1e>
 8022976:	f85d 4b04 	ldr.w	r4, [sp], #4
 802297a:	f000 bb33 	b.w	8022fe4 <__swbuf_r>
 802297e:	6813      	ldr	r3, [r2, #0]
 8022980:	1c58      	adds	r0, r3, #1
 8022982:	6010      	str	r0, [r2, #0]
 8022984:	7019      	strb	r1, [r3, #0]
 8022986:	4608      	mov	r0, r1
 8022988:	f85d 4b04 	ldr.w	r4, [sp], #4
 802298c:	4770      	bx	lr

0802298e <__sfputs_r>:
 802298e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022990:	4606      	mov	r6, r0
 8022992:	460f      	mov	r7, r1
 8022994:	4614      	mov	r4, r2
 8022996:	18d5      	adds	r5, r2, r3
 8022998:	42ac      	cmp	r4, r5
 802299a:	d101      	bne.n	80229a0 <__sfputs_r+0x12>
 802299c:	2000      	movs	r0, #0
 802299e:	e007      	b.n	80229b0 <__sfputs_r+0x22>
 80229a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80229a4:	463a      	mov	r2, r7
 80229a6:	4630      	mov	r0, r6
 80229a8:	f7ff ffda 	bl	8022960 <__sfputc_r>
 80229ac:	1c43      	adds	r3, r0, #1
 80229ae:	d1f3      	bne.n	8022998 <__sfputs_r+0xa>
 80229b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080229b4 <_vfiprintf_r>:
 80229b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229b8:	460d      	mov	r5, r1
 80229ba:	b09d      	sub	sp, #116	; 0x74
 80229bc:	4614      	mov	r4, r2
 80229be:	4698      	mov	r8, r3
 80229c0:	4606      	mov	r6, r0
 80229c2:	b118      	cbz	r0, 80229cc <_vfiprintf_r+0x18>
 80229c4:	6983      	ldr	r3, [r0, #24]
 80229c6:	b90b      	cbnz	r3, 80229cc <_vfiprintf_r+0x18>
 80229c8:	f000 fd48 	bl	802345c <__sinit>
 80229cc:	4b89      	ldr	r3, [pc, #548]	; (8022bf4 <_vfiprintf_r+0x240>)
 80229ce:	429d      	cmp	r5, r3
 80229d0:	d11b      	bne.n	8022a0a <_vfiprintf_r+0x56>
 80229d2:	6875      	ldr	r5, [r6, #4]
 80229d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80229d6:	07d9      	lsls	r1, r3, #31
 80229d8:	d405      	bmi.n	80229e6 <_vfiprintf_r+0x32>
 80229da:	89ab      	ldrh	r3, [r5, #12]
 80229dc:	059a      	lsls	r2, r3, #22
 80229de:	d402      	bmi.n	80229e6 <_vfiprintf_r+0x32>
 80229e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80229e2:	f000 fdd9 	bl	8023598 <__retarget_lock_acquire_recursive>
 80229e6:	89ab      	ldrh	r3, [r5, #12]
 80229e8:	071b      	lsls	r3, r3, #28
 80229ea:	d501      	bpl.n	80229f0 <_vfiprintf_r+0x3c>
 80229ec:	692b      	ldr	r3, [r5, #16]
 80229ee:	b9eb      	cbnz	r3, 8022a2c <_vfiprintf_r+0x78>
 80229f0:	4629      	mov	r1, r5
 80229f2:	4630      	mov	r0, r6
 80229f4:	f000 fb48 	bl	8023088 <__swsetup_r>
 80229f8:	b1c0      	cbz	r0, 8022a2c <_vfiprintf_r+0x78>
 80229fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80229fc:	07dc      	lsls	r4, r3, #31
 80229fe:	d50e      	bpl.n	8022a1e <_vfiprintf_r+0x6a>
 8022a00:	f04f 30ff 	mov.w	r0, #4294967295
 8022a04:	b01d      	add	sp, #116	; 0x74
 8022a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a0a:	4b7b      	ldr	r3, [pc, #492]	; (8022bf8 <_vfiprintf_r+0x244>)
 8022a0c:	429d      	cmp	r5, r3
 8022a0e:	d101      	bne.n	8022a14 <_vfiprintf_r+0x60>
 8022a10:	68b5      	ldr	r5, [r6, #8]
 8022a12:	e7df      	b.n	80229d4 <_vfiprintf_r+0x20>
 8022a14:	4b79      	ldr	r3, [pc, #484]	; (8022bfc <_vfiprintf_r+0x248>)
 8022a16:	429d      	cmp	r5, r3
 8022a18:	bf08      	it	eq
 8022a1a:	68f5      	ldreq	r5, [r6, #12]
 8022a1c:	e7da      	b.n	80229d4 <_vfiprintf_r+0x20>
 8022a1e:	89ab      	ldrh	r3, [r5, #12]
 8022a20:	0598      	lsls	r0, r3, #22
 8022a22:	d4ed      	bmi.n	8022a00 <_vfiprintf_r+0x4c>
 8022a24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022a26:	f000 fdb9 	bl	802359c <__retarget_lock_release_recursive>
 8022a2a:	e7e9      	b.n	8022a00 <_vfiprintf_r+0x4c>
 8022a2c:	2300      	movs	r3, #0
 8022a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8022a30:	2320      	movs	r3, #32
 8022a32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022a36:	f8cd 800c 	str.w	r8, [sp, #12]
 8022a3a:	2330      	movs	r3, #48	; 0x30
 8022a3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8022c00 <_vfiprintf_r+0x24c>
 8022a40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022a44:	f04f 0901 	mov.w	r9, #1
 8022a48:	4623      	mov	r3, r4
 8022a4a:	469a      	mov	sl, r3
 8022a4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022a50:	b10a      	cbz	r2, 8022a56 <_vfiprintf_r+0xa2>
 8022a52:	2a25      	cmp	r2, #37	; 0x25
 8022a54:	d1f9      	bne.n	8022a4a <_vfiprintf_r+0x96>
 8022a56:	ebba 0b04 	subs.w	fp, sl, r4
 8022a5a:	d00b      	beq.n	8022a74 <_vfiprintf_r+0xc0>
 8022a5c:	465b      	mov	r3, fp
 8022a5e:	4622      	mov	r2, r4
 8022a60:	4629      	mov	r1, r5
 8022a62:	4630      	mov	r0, r6
 8022a64:	f7ff ff93 	bl	802298e <__sfputs_r>
 8022a68:	3001      	adds	r0, #1
 8022a6a:	f000 80aa 	beq.w	8022bc2 <_vfiprintf_r+0x20e>
 8022a6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022a70:	445a      	add	r2, fp
 8022a72:	9209      	str	r2, [sp, #36]	; 0x24
 8022a74:	f89a 3000 	ldrb.w	r3, [sl]
 8022a78:	2b00      	cmp	r3, #0
 8022a7a:	f000 80a2 	beq.w	8022bc2 <_vfiprintf_r+0x20e>
 8022a7e:	2300      	movs	r3, #0
 8022a80:	f04f 32ff 	mov.w	r2, #4294967295
 8022a84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022a88:	f10a 0a01 	add.w	sl, sl, #1
 8022a8c:	9304      	str	r3, [sp, #16]
 8022a8e:	9307      	str	r3, [sp, #28]
 8022a90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022a94:	931a      	str	r3, [sp, #104]	; 0x68
 8022a96:	4654      	mov	r4, sl
 8022a98:	2205      	movs	r2, #5
 8022a9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022a9e:	4858      	ldr	r0, [pc, #352]	; (8022c00 <_vfiprintf_r+0x24c>)
 8022aa0:	f7dd fc1e 	bl	80002e0 <memchr>
 8022aa4:	9a04      	ldr	r2, [sp, #16]
 8022aa6:	b9d8      	cbnz	r0, 8022ae0 <_vfiprintf_r+0x12c>
 8022aa8:	06d1      	lsls	r1, r2, #27
 8022aaa:	bf44      	itt	mi
 8022aac:	2320      	movmi	r3, #32
 8022aae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022ab2:	0713      	lsls	r3, r2, #28
 8022ab4:	bf44      	itt	mi
 8022ab6:	232b      	movmi	r3, #43	; 0x2b
 8022ab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022abc:	f89a 3000 	ldrb.w	r3, [sl]
 8022ac0:	2b2a      	cmp	r3, #42	; 0x2a
 8022ac2:	d015      	beq.n	8022af0 <_vfiprintf_r+0x13c>
 8022ac4:	9a07      	ldr	r2, [sp, #28]
 8022ac6:	4654      	mov	r4, sl
 8022ac8:	2000      	movs	r0, #0
 8022aca:	f04f 0c0a 	mov.w	ip, #10
 8022ace:	4621      	mov	r1, r4
 8022ad0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022ad4:	3b30      	subs	r3, #48	; 0x30
 8022ad6:	2b09      	cmp	r3, #9
 8022ad8:	d94e      	bls.n	8022b78 <_vfiprintf_r+0x1c4>
 8022ada:	b1b0      	cbz	r0, 8022b0a <_vfiprintf_r+0x156>
 8022adc:	9207      	str	r2, [sp, #28]
 8022ade:	e014      	b.n	8022b0a <_vfiprintf_r+0x156>
 8022ae0:	eba0 0308 	sub.w	r3, r0, r8
 8022ae4:	fa09 f303 	lsl.w	r3, r9, r3
 8022ae8:	4313      	orrs	r3, r2
 8022aea:	9304      	str	r3, [sp, #16]
 8022aec:	46a2      	mov	sl, r4
 8022aee:	e7d2      	b.n	8022a96 <_vfiprintf_r+0xe2>
 8022af0:	9b03      	ldr	r3, [sp, #12]
 8022af2:	1d19      	adds	r1, r3, #4
 8022af4:	681b      	ldr	r3, [r3, #0]
 8022af6:	9103      	str	r1, [sp, #12]
 8022af8:	2b00      	cmp	r3, #0
 8022afa:	bfbb      	ittet	lt
 8022afc:	425b      	neglt	r3, r3
 8022afe:	f042 0202 	orrlt.w	r2, r2, #2
 8022b02:	9307      	strge	r3, [sp, #28]
 8022b04:	9307      	strlt	r3, [sp, #28]
 8022b06:	bfb8      	it	lt
 8022b08:	9204      	strlt	r2, [sp, #16]
 8022b0a:	7823      	ldrb	r3, [r4, #0]
 8022b0c:	2b2e      	cmp	r3, #46	; 0x2e
 8022b0e:	d10c      	bne.n	8022b2a <_vfiprintf_r+0x176>
 8022b10:	7863      	ldrb	r3, [r4, #1]
 8022b12:	2b2a      	cmp	r3, #42	; 0x2a
 8022b14:	d135      	bne.n	8022b82 <_vfiprintf_r+0x1ce>
 8022b16:	9b03      	ldr	r3, [sp, #12]
 8022b18:	1d1a      	adds	r2, r3, #4
 8022b1a:	681b      	ldr	r3, [r3, #0]
 8022b1c:	9203      	str	r2, [sp, #12]
 8022b1e:	2b00      	cmp	r3, #0
 8022b20:	bfb8      	it	lt
 8022b22:	f04f 33ff 	movlt.w	r3, #4294967295
 8022b26:	3402      	adds	r4, #2
 8022b28:	9305      	str	r3, [sp, #20]
 8022b2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022c10 <_vfiprintf_r+0x25c>
 8022b2e:	7821      	ldrb	r1, [r4, #0]
 8022b30:	2203      	movs	r2, #3
 8022b32:	4650      	mov	r0, sl
 8022b34:	f7dd fbd4 	bl	80002e0 <memchr>
 8022b38:	b140      	cbz	r0, 8022b4c <_vfiprintf_r+0x198>
 8022b3a:	2340      	movs	r3, #64	; 0x40
 8022b3c:	eba0 000a 	sub.w	r0, r0, sl
 8022b40:	fa03 f000 	lsl.w	r0, r3, r0
 8022b44:	9b04      	ldr	r3, [sp, #16]
 8022b46:	4303      	orrs	r3, r0
 8022b48:	3401      	adds	r4, #1
 8022b4a:	9304      	str	r3, [sp, #16]
 8022b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022b50:	482c      	ldr	r0, [pc, #176]	; (8022c04 <_vfiprintf_r+0x250>)
 8022b52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022b56:	2206      	movs	r2, #6
 8022b58:	f7dd fbc2 	bl	80002e0 <memchr>
 8022b5c:	2800      	cmp	r0, #0
 8022b5e:	d03f      	beq.n	8022be0 <_vfiprintf_r+0x22c>
 8022b60:	4b29      	ldr	r3, [pc, #164]	; (8022c08 <_vfiprintf_r+0x254>)
 8022b62:	bb1b      	cbnz	r3, 8022bac <_vfiprintf_r+0x1f8>
 8022b64:	9b03      	ldr	r3, [sp, #12]
 8022b66:	3307      	adds	r3, #7
 8022b68:	f023 0307 	bic.w	r3, r3, #7
 8022b6c:	3308      	adds	r3, #8
 8022b6e:	9303      	str	r3, [sp, #12]
 8022b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022b72:	443b      	add	r3, r7
 8022b74:	9309      	str	r3, [sp, #36]	; 0x24
 8022b76:	e767      	b.n	8022a48 <_vfiprintf_r+0x94>
 8022b78:	fb0c 3202 	mla	r2, ip, r2, r3
 8022b7c:	460c      	mov	r4, r1
 8022b7e:	2001      	movs	r0, #1
 8022b80:	e7a5      	b.n	8022ace <_vfiprintf_r+0x11a>
 8022b82:	2300      	movs	r3, #0
 8022b84:	3401      	adds	r4, #1
 8022b86:	9305      	str	r3, [sp, #20]
 8022b88:	4619      	mov	r1, r3
 8022b8a:	f04f 0c0a 	mov.w	ip, #10
 8022b8e:	4620      	mov	r0, r4
 8022b90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022b94:	3a30      	subs	r2, #48	; 0x30
 8022b96:	2a09      	cmp	r2, #9
 8022b98:	d903      	bls.n	8022ba2 <_vfiprintf_r+0x1ee>
 8022b9a:	2b00      	cmp	r3, #0
 8022b9c:	d0c5      	beq.n	8022b2a <_vfiprintf_r+0x176>
 8022b9e:	9105      	str	r1, [sp, #20]
 8022ba0:	e7c3      	b.n	8022b2a <_vfiprintf_r+0x176>
 8022ba2:	fb0c 2101 	mla	r1, ip, r1, r2
 8022ba6:	4604      	mov	r4, r0
 8022ba8:	2301      	movs	r3, #1
 8022baa:	e7f0      	b.n	8022b8e <_vfiprintf_r+0x1da>
 8022bac:	ab03      	add	r3, sp, #12
 8022bae:	9300      	str	r3, [sp, #0]
 8022bb0:	462a      	mov	r2, r5
 8022bb2:	4b16      	ldr	r3, [pc, #88]	; (8022c0c <_vfiprintf_r+0x258>)
 8022bb4:	a904      	add	r1, sp, #16
 8022bb6:	4630      	mov	r0, r6
 8022bb8:	f3af 8000 	nop.w
 8022bbc:	4607      	mov	r7, r0
 8022bbe:	1c78      	adds	r0, r7, #1
 8022bc0:	d1d6      	bne.n	8022b70 <_vfiprintf_r+0x1bc>
 8022bc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022bc4:	07d9      	lsls	r1, r3, #31
 8022bc6:	d405      	bmi.n	8022bd4 <_vfiprintf_r+0x220>
 8022bc8:	89ab      	ldrh	r3, [r5, #12]
 8022bca:	059a      	lsls	r2, r3, #22
 8022bcc:	d402      	bmi.n	8022bd4 <_vfiprintf_r+0x220>
 8022bce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022bd0:	f000 fce4 	bl	802359c <__retarget_lock_release_recursive>
 8022bd4:	89ab      	ldrh	r3, [r5, #12]
 8022bd6:	065b      	lsls	r3, r3, #25
 8022bd8:	f53f af12 	bmi.w	8022a00 <_vfiprintf_r+0x4c>
 8022bdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022bde:	e711      	b.n	8022a04 <_vfiprintf_r+0x50>
 8022be0:	ab03      	add	r3, sp, #12
 8022be2:	9300      	str	r3, [sp, #0]
 8022be4:	462a      	mov	r2, r5
 8022be6:	4b09      	ldr	r3, [pc, #36]	; (8022c0c <_vfiprintf_r+0x258>)
 8022be8:	a904      	add	r1, sp, #16
 8022bea:	4630      	mov	r0, r6
 8022bec:	f000 f880 	bl	8022cf0 <_printf_i>
 8022bf0:	e7e4      	b.n	8022bbc <_vfiprintf_r+0x208>
 8022bf2:	bf00      	nop
 8022bf4:	080254cc 	.word	0x080254cc
 8022bf8:	080254ec 	.word	0x080254ec
 8022bfc:	080254ac 	.word	0x080254ac
 8022c00:	08025474 	.word	0x08025474
 8022c04:	0802547e 	.word	0x0802547e
 8022c08:	00000000 	.word	0x00000000
 8022c0c:	0802298f 	.word	0x0802298f
 8022c10:	0802547a 	.word	0x0802547a

08022c14 <_printf_common>:
 8022c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022c18:	4616      	mov	r6, r2
 8022c1a:	4699      	mov	r9, r3
 8022c1c:	688a      	ldr	r2, [r1, #8]
 8022c1e:	690b      	ldr	r3, [r1, #16]
 8022c20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022c24:	4293      	cmp	r3, r2
 8022c26:	bfb8      	it	lt
 8022c28:	4613      	movlt	r3, r2
 8022c2a:	6033      	str	r3, [r6, #0]
 8022c2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8022c30:	4607      	mov	r7, r0
 8022c32:	460c      	mov	r4, r1
 8022c34:	b10a      	cbz	r2, 8022c3a <_printf_common+0x26>
 8022c36:	3301      	adds	r3, #1
 8022c38:	6033      	str	r3, [r6, #0]
 8022c3a:	6823      	ldr	r3, [r4, #0]
 8022c3c:	0699      	lsls	r1, r3, #26
 8022c3e:	bf42      	ittt	mi
 8022c40:	6833      	ldrmi	r3, [r6, #0]
 8022c42:	3302      	addmi	r3, #2
 8022c44:	6033      	strmi	r3, [r6, #0]
 8022c46:	6825      	ldr	r5, [r4, #0]
 8022c48:	f015 0506 	ands.w	r5, r5, #6
 8022c4c:	d106      	bne.n	8022c5c <_printf_common+0x48>
 8022c4e:	f104 0a19 	add.w	sl, r4, #25
 8022c52:	68e3      	ldr	r3, [r4, #12]
 8022c54:	6832      	ldr	r2, [r6, #0]
 8022c56:	1a9b      	subs	r3, r3, r2
 8022c58:	42ab      	cmp	r3, r5
 8022c5a:	dc26      	bgt.n	8022caa <_printf_common+0x96>
 8022c5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8022c60:	1e13      	subs	r3, r2, #0
 8022c62:	6822      	ldr	r2, [r4, #0]
 8022c64:	bf18      	it	ne
 8022c66:	2301      	movne	r3, #1
 8022c68:	0692      	lsls	r2, r2, #26
 8022c6a:	d42b      	bmi.n	8022cc4 <_printf_common+0xb0>
 8022c6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022c70:	4649      	mov	r1, r9
 8022c72:	4638      	mov	r0, r7
 8022c74:	47c0      	blx	r8
 8022c76:	3001      	adds	r0, #1
 8022c78:	d01e      	beq.n	8022cb8 <_printf_common+0xa4>
 8022c7a:	6823      	ldr	r3, [r4, #0]
 8022c7c:	68e5      	ldr	r5, [r4, #12]
 8022c7e:	6832      	ldr	r2, [r6, #0]
 8022c80:	f003 0306 	and.w	r3, r3, #6
 8022c84:	2b04      	cmp	r3, #4
 8022c86:	bf08      	it	eq
 8022c88:	1aad      	subeq	r5, r5, r2
 8022c8a:	68a3      	ldr	r3, [r4, #8]
 8022c8c:	6922      	ldr	r2, [r4, #16]
 8022c8e:	bf0c      	ite	eq
 8022c90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022c94:	2500      	movne	r5, #0
 8022c96:	4293      	cmp	r3, r2
 8022c98:	bfc4      	itt	gt
 8022c9a:	1a9b      	subgt	r3, r3, r2
 8022c9c:	18ed      	addgt	r5, r5, r3
 8022c9e:	2600      	movs	r6, #0
 8022ca0:	341a      	adds	r4, #26
 8022ca2:	42b5      	cmp	r5, r6
 8022ca4:	d11a      	bne.n	8022cdc <_printf_common+0xc8>
 8022ca6:	2000      	movs	r0, #0
 8022ca8:	e008      	b.n	8022cbc <_printf_common+0xa8>
 8022caa:	2301      	movs	r3, #1
 8022cac:	4652      	mov	r2, sl
 8022cae:	4649      	mov	r1, r9
 8022cb0:	4638      	mov	r0, r7
 8022cb2:	47c0      	blx	r8
 8022cb4:	3001      	adds	r0, #1
 8022cb6:	d103      	bne.n	8022cc0 <_printf_common+0xac>
 8022cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8022cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022cc0:	3501      	adds	r5, #1
 8022cc2:	e7c6      	b.n	8022c52 <_printf_common+0x3e>
 8022cc4:	18e1      	adds	r1, r4, r3
 8022cc6:	1c5a      	adds	r2, r3, #1
 8022cc8:	2030      	movs	r0, #48	; 0x30
 8022cca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8022cce:	4422      	add	r2, r4
 8022cd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022cd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022cd8:	3302      	adds	r3, #2
 8022cda:	e7c7      	b.n	8022c6c <_printf_common+0x58>
 8022cdc:	2301      	movs	r3, #1
 8022cde:	4622      	mov	r2, r4
 8022ce0:	4649      	mov	r1, r9
 8022ce2:	4638      	mov	r0, r7
 8022ce4:	47c0      	blx	r8
 8022ce6:	3001      	adds	r0, #1
 8022ce8:	d0e6      	beq.n	8022cb8 <_printf_common+0xa4>
 8022cea:	3601      	adds	r6, #1
 8022cec:	e7d9      	b.n	8022ca2 <_printf_common+0x8e>
	...

08022cf0 <_printf_i>:
 8022cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022cf4:	7e0f      	ldrb	r7, [r1, #24]
 8022cf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022cf8:	2f78      	cmp	r7, #120	; 0x78
 8022cfa:	4691      	mov	r9, r2
 8022cfc:	4680      	mov	r8, r0
 8022cfe:	460c      	mov	r4, r1
 8022d00:	469a      	mov	sl, r3
 8022d02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8022d06:	d807      	bhi.n	8022d18 <_printf_i+0x28>
 8022d08:	2f62      	cmp	r7, #98	; 0x62
 8022d0a:	d80a      	bhi.n	8022d22 <_printf_i+0x32>
 8022d0c:	2f00      	cmp	r7, #0
 8022d0e:	f000 80d8 	beq.w	8022ec2 <_printf_i+0x1d2>
 8022d12:	2f58      	cmp	r7, #88	; 0x58
 8022d14:	f000 80a3 	beq.w	8022e5e <_printf_i+0x16e>
 8022d18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022d1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8022d20:	e03a      	b.n	8022d98 <_printf_i+0xa8>
 8022d22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8022d26:	2b15      	cmp	r3, #21
 8022d28:	d8f6      	bhi.n	8022d18 <_printf_i+0x28>
 8022d2a:	a101      	add	r1, pc, #4	; (adr r1, 8022d30 <_printf_i+0x40>)
 8022d2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8022d30:	08022d89 	.word	0x08022d89
 8022d34:	08022d9d 	.word	0x08022d9d
 8022d38:	08022d19 	.word	0x08022d19
 8022d3c:	08022d19 	.word	0x08022d19
 8022d40:	08022d19 	.word	0x08022d19
 8022d44:	08022d19 	.word	0x08022d19
 8022d48:	08022d9d 	.word	0x08022d9d
 8022d4c:	08022d19 	.word	0x08022d19
 8022d50:	08022d19 	.word	0x08022d19
 8022d54:	08022d19 	.word	0x08022d19
 8022d58:	08022d19 	.word	0x08022d19
 8022d5c:	08022ea9 	.word	0x08022ea9
 8022d60:	08022dcd 	.word	0x08022dcd
 8022d64:	08022e8b 	.word	0x08022e8b
 8022d68:	08022d19 	.word	0x08022d19
 8022d6c:	08022d19 	.word	0x08022d19
 8022d70:	08022ecb 	.word	0x08022ecb
 8022d74:	08022d19 	.word	0x08022d19
 8022d78:	08022dcd 	.word	0x08022dcd
 8022d7c:	08022d19 	.word	0x08022d19
 8022d80:	08022d19 	.word	0x08022d19
 8022d84:	08022e93 	.word	0x08022e93
 8022d88:	682b      	ldr	r3, [r5, #0]
 8022d8a:	1d1a      	adds	r2, r3, #4
 8022d8c:	681b      	ldr	r3, [r3, #0]
 8022d8e:	602a      	str	r2, [r5, #0]
 8022d90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022d94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022d98:	2301      	movs	r3, #1
 8022d9a:	e0a3      	b.n	8022ee4 <_printf_i+0x1f4>
 8022d9c:	6820      	ldr	r0, [r4, #0]
 8022d9e:	6829      	ldr	r1, [r5, #0]
 8022da0:	0606      	lsls	r6, r0, #24
 8022da2:	f101 0304 	add.w	r3, r1, #4
 8022da6:	d50a      	bpl.n	8022dbe <_printf_i+0xce>
 8022da8:	680e      	ldr	r6, [r1, #0]
 8022daa:	602b      	str	r3, [r5, #0]
 8022dac:	2e00      	cmp	r6, #0
 8022dae:	da03      	bge.n	8022db8 <_printf_i+0xc8>
 8022db0:	232d      	movs	r3, #45	; 0x2d
 8022db2:	4276      	negs	r6, r6
 8022db4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022db8:	485e      	ldr	r0, [pc, #376]	; (8022f34 <_printf_i+0x244>)
 8022dba:	230a      	movs	r3, #10
 8022dbc:	e019      	b.n	8022df2 <_printf_i+0x102>
 8022dbe:	680e      	ldr	r6, [r1, #0]
 8022dc0:	602b      	str	r3, [r5, #0]
 8022dc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8022dc6:	bf18      	it	ne
 8022dc8:	b236      	sxthne	r6, r6
 8022dca:	e7ef      	b.n	8022dac <_printf_i+0xbc>
 8022dcc:	682b      	ldr	r3, [r5, #0]
 8022dce:	6820      	ldr	r0, [r4, #0]
 8022dd0:	1d19      	adds	r1, r3, #4
 8022dd2:	6029      	str	r1, [r5, #0]
 8022dd4:	0601      	lsls	r1, r0, #24
 8022dd6:	d501      	bpl.n	8022ddc <_printf_i+0xec>
 8022dd8:	681e      	ldr	r6, [r3, #0]
 8022dda:	e002      	b.n	8022de2 <_printf_i+0xf2>
 8022ddc:	0646      	lsls	r6, r0, #25
 8022dde:	d5fb      	bpl.n	8022dd8 <_printf_i+0xe8>
 8022de0:	881e      	ldrh	r6, [r3, #0]
 8022de2:	4854      	ldr	r0, [pc, #336]	; (8022f34 <_printf_i+0x244>)
 8022de4:	2f6f      	cmp	r7, #111	; 0x6f
 8022de6:	bf0c      	ite	eq
 8022de8:	2308      	moveq	r3, #8
 8022dea:	230a      	movne	r3, #10
 8022dec:	2100      	movs	r1, #0
 8022dee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8022df2:	6865      	ldr	r5, [r4, #4]
 8022df4:	60a5      	str	r5, [r4, #8]
 8022df6:	2d00      	cmp	r5, #0
 8022df8:	bfa2      	ittt	ge
 8022dfa:	6821      	ldrge	r1, [r4, #0]
 8022dfc:	f021 0104 	bicge.w	r1, r1, #4
 8022e00:	6021      	strge	r1, [r4, #0]
 8022e02:	b90e      	cbnz	r6, 8022e08 <_printf_i+0x118>
 8022e04:	2d00      	cmp	r5, #0
 8022e06:	d04d      	beq.n	8022ea4 <_printf_i+0x1b4>
 8022e08:	4615      	mov	r5, r2
 8022e0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8022e0e:	fb03 6711 	mls	r7, r3, r1, r6
 8022e12:	5dc7      	ldrb	r7, [r0, r7]
 8022e14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8022e18:	4637      	mov	r7, r6
 8022e1a:	42bb      	cmp	r3, r7
 8022e1c:	460e      	mov	r6, r1
 8022e1e:	d9f4      	bls.n	8022e0a <_printf_i+0x11a>
 8022e20:	2b08      	cmp	r3, #8
 8022e22:	d10b      	bne.n	8022e3c <_printf_i+0x14c>
 8022e24:	6823      	ldr	r3, [r4, #0]
 8022e26:	07de      	lsls	r6, r3, #31
 8022e28:	d508      	bpl.n	8022e3c <_printf_i+0x14c>
 8022e2a:	6923      	ldr	r3, [r4, #16]
 8022e2c:	6861      	ldr	r1, [r4, #4]
 8022e2e:	4299      	cmp	r1, r3
 8022e30:	bfde      	ittt	le
 8022e32:	2330      	movle	r3, #48	; 0x30
 8022e34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8022e38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8022e3c:	1b52      	subs	r2, r2, r5
 8022e3e:	6122      	str	r2, [r4, #16]
 8022e40:	f8cd a000 	str.w	sl, [sp]
 8022e44:	464b      	mov	r3, r9
 8022e46:	aa03      	add	r2, sp, #12
 8022e48:	4621      	mov	r1, r4
 8022e4a:	4640      	mov	r0, r8
 8022e4c:	f7ff fee2 	bl	8022c14 <_printf_common>
 8022e50:	3001      	adds	r0, #1
 8022e52:	d14c      	bne.n	8022eee <_printf_i+0x1fe>
 8022e54:	f04f 30ff 	mov.w	r0, #4294967295
 8022e58:	b004      	add	sp, #16
 8022e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022e5e:	4835      	ldr	r0, [pc, #212]	; (8022f34 <_printf_i+0x244>)
 8022e60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8022e64:	6829      	ldr	r1, [r5, #0]
 8022e66:	6823      	ldr	r3, [r4, #0]
 8022e68:	f851 6b04 	ldr.w	r6, [r1], #4
 8022e6c:	6029      	str	r1, [r5, #0]
 8022e6e:	061d      	lsls	r5, r3, #24
 8022e70:	d514      	bpl.n	8022e9c <_printf_i+0x1ac>
 8022e72:	07df      	lsls	r7, r3, #31
 8022e74:	bf44      	itt	mi
 8022e76:	f043 0320 	orrmi.w	r3, r3, #32
 8022e7a:	6023      	strmi	r3, [r4, #0]
 8022e7c:	b91e      	cbnz	r6, 8022e86 <_printf_i+0x196>
 8022e7e:	6823      	ldr	r3, [r4, #0]
 8022e80:	f023 0320 	bic.w	r3, r3, #32
 8022e84:	6023      	str	r3, [r4, #0]
 8022e86:	2310      	movs	r3, #16
 8022e88:	e7b0      	b.n	8022dec <_printf_i+0xfc>
 8022e8a:	6823      	ldr	r3, [r4, #0]
 8022e8c:	f043 0320 	orr.w	r3, r3, #32
 8022e90:	6023      	str	r3, [r4, #0]
 8022e92:	2378      	movs	r3, #120	; 0x78
 8022e94:	4828      	ldr	r0, [pc, #160]	; (8022f38 <_printf_i+0x248>)
 8022e96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8022e9a:	e7e3      	b.n	8022e64 <_printf_i+0x174>
 8022e9c:	0659      	lsls	r1, r3, #25
 8022e9e:	bf48      	it	mi
 8022ea0:	b2b6      	uxthmi	r6, r6
 8022ea2:	e7e6      	b.n	8022e72 <_printf_i+0x182>
 8022ea4:	4615      	mov	r5, r2
 8022ea6:	e7bb      	b.n	8022e20 <_printf_i+0x130>
 8022ea8:	682b      	ldr	r3, [r5, #0]
 8022eaa:	6826      	ldr	r6, [r4, #0]
 8022eac:	6961      	ldr	r1, [r4, #20]
 8022eae:	1d18      	adds	r0, r3, #4
 8022eb0:	6028      	str	r0, [r5, #0]
 8022eb2:	0635      	lsls	r5, r6, #24
 8022eb4:	681b      	ldr	r3, [r3, #0]
 8022eb6:	d501      	bpl.n	8022ebc <_printf_i+0x1cc>
 8022eb8:	6019      	str	r1, [r3, #0]
 8022eba:	e002      	b.n	8022ec2 <_printf_i+0x1d2>
 8022ebc:	0670      	lsls	r0, r6, #25
 8022ebe:	d5fb      	bpl.n	8022eb8 <_printf_i+0x1c8>
 8022ec0:	8019      	strh	r1, [r3, #0]
 8022ec2:	2300      	movs	r3, #0
 8022ec4:	6123      	str	r3, [r4, #16]
 8022ec6:	4615      	mov	r5, r2
 8022ec8:	e7ba      	b.n	8022e40 <_printf_i+0x150>
 8022eca:	682b      	ldr	r3, [r5, #0]
 8022ecc:	1d1a      	adds	r2, r3, #4
 8022ece:	602a      	str	r2, [r5, #0]
 8022ed0:	681d      	ldr	r5, [r3, #0]
 8022ed2:	6862      	ldr	r2, [r4, #4]
 8022ed4:	2100      	movs	r1, #0
 8022ed6:	4628      	mov	r0, r5
 8022ed8:	f7dd fa02 	bl	80002e0 <memchr>
 8022edc:	b108      	cbz	r0, 8022ee2 <_printf_i+0x1f2>
 8022ede:	1b40      	subs	r0, r0, r5
 8022ee0:	6060      	str	r0, [r4, #4]
 8022ee2:	6863      	ldr	r3, [r4, #4]
 8022ee4:	6123      	str	r3, [r4, #16]
 8022ee6:	2300      	movs	r3, #0
 8022ee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022eec:	e7a8      	b.n	8022e40 <_printf_i+0x150>
 8022eee:	6923      	ldr	r3, [r4, #16]
 8022ef0:	462a      	mov	r2, r5
 8022ef2:	4649      	mov	r1, r9
 8022ef4:	4640      	mov	r0, r8
 8022ef6:	47d0      	blx	sl
 8022ef8:	3001      	adds	r0, #1
 8022efa:	d0ab      	beq.n	8022e54 <_printf_i+0x164>
 8022efc:	6823      	ldr	r3, [r4, #0]
 8022efe:	079b      	lsls	r3, r3, #30
 8022f00:	d413      	bmi.n	8022f2a <_printf_i+0x23a>
 8022f02:	68e0      	ldr	r0, [r4, #12]
 8022f04:	9b03      	ldr	r3, [sp, #12]
 8022f06:	4298      	cmp	r0, r3
 8022f08:	bfb8      	it	lt
 8022f0a:	4618      	movlt	r0, r3
 8022f0c:	e7a4      	b.n	8022e58 <_printf_i+0x168>
 8022f0e:	2301      	movs	r3, #1
 8022f10:	4632      	mov	r2, r6
 8022f12:	4649      	mov	r1, r9
 8022f14:	4640      	mov	r0, r8
 8022f16:	47d0      	blx	sl
 8022f18:	3001      	adds	r0, #1
 8022f1a:	d09b      	beq.n	8022e54 <_printf_i+0x164>
 8022f1c:	3501      	adds	r5, #1
 8022f1e:	68e3      	ldr	r3, [r4, #12]
 8022f20:	9903      	ldr	r1, [sp, #12]
 8022f22:	1a5b      	subs	r3, r3, r1
 8022f24:	42ab      	cmp	r3, r5
 8022f26:	dcf2      	bgt.n	8022f0e <_printf_i+0x21e>
 8022f28:	e7eb      	b.n	8022f02 <_printf_i+0x212>
 8022f2a:	2500      	movs	r5, #0
 8022f2c:	f104 0619 	add.w	r6, r4, #25
 8022f30:	e7f5      	b.n	8022f1e <_printf_i+0x22e>
 8022f32:	bf00      	nop
 8022f34:	08025485 	.word	0x08025485
 8022f38:	08025496 	.word	0x08025496

08022f3c <_sbrk_r>:
 8022f3c:	b538      	push	{r3, r4, r5, lr}
 8022f3e:	4d06      	ldr	r5, [pc, #24]	; (8022f58 <_sbrk_r+0x1c>)
 8022f40:	2300      	movs	r3, #0
 8022f42:	4604      	mov	r4, r0
 8022f44:	4608      	mov	r0, r1
 8022f46:	602b      	str	r3, [r5, #0]
 8022f48:	f7e1 ff72 	bl	8004e30 <_sbrk>
 8022f4c:	1c43      	adds	r3, r0, #1
 8022f4e:	d102      	bne.n	8022f56 <_sbrk_r+0x1a>
 8022f50:	682b      	ldr	r3, [r5, #0]
 8022f52:	b103      	cbz	r3, 8022f56 <_sbrk_r+0x1a>
 8022f54:	6023      	str	r3, [r4, #0]
 8022f56:	bd38      	pop	{r3, r4, r5, pc}
 8022f58:	2400b144 	.word	0x2400b144

08022f5c <_raise_r>:
 8022f5c:	291f      	cmp	r1, #31
 8022f5e:	b538      	push	{r3, r4, r5, lr}
 8022f60:	4604      	mov	r4, r0
 8022f62:	460d      	mov	r5, r1
 8022f64:	d904      	bls.n	8022f70 <_raise_r+0x14>
 8022f66:	2316      	movs	r3, #22
 8022f68:	6003      	str	r3, [r0, #0]
 8022f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8022f6e:	bd38      	pop	{r3, r4, r5, pc}
 8022f70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8022f72:	b112      	cbz	r2, 8022f7a <_raise_r+0x1e>
 8022f74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022f78:	b94b      	cbnz	r3, 8022f8e <_raise_r+0x32>
 8022f7a:	4620      	mov	r0, r4
 8022f7c:	f000 f830 	bl	8022fe0 <_getpid_r>
 8022f80:	462a      	mov	r2, r5
 8022f82:	4601      	mov	r1, r0
 8022f84:	4620      	mov	r0, r4
 8022f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022f8a:	f000 b817 	b.w	8022fbc <_kill_r>
 8022f8e:	2b01      	cmp	r3, #1
 8022f90:	d00a      	beq.n	8022fa8 <_raise_r+0x4c>
 8022f92:	1c59      	adds	r1, r3, #1
 8022f94:	d103      	bne.n	8022f9e <_raise_r+0x42>
 8022f96:	2316      	movs	r3, #22
 8022f98:	6003      	str	r3, [r0, #0]
 8022f9a:	2001      	movs	r0, #1
 8022f9c:	e7e7      	b.n	8022f6e <_raise_r+0x12>
 8022f9e:	2400      	movs	r4, #0
 8022fa0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8022fa4:	4628      	mov	r0, r5
 8022fa6:	4798      	blx	r3
 8022fa8:	2000      	movs	r0, #0
 8022faa:	e7e0      	b.n	8022f6e <_raise_r+0x12>

08022fac <raise>:
 8022fac:	4b02      	ldr	r3, [pc, #8]	; (8022fb8 <raise+0xc>)
 8022fae:	4601      	mov	r1, r0
 8022fb0:	6818      	ldr	r0, [r3, #0]
 8022fb2:	f7ff bfd3 	b.w	8022f5c <_raise_r>
 8022fb6:	bf00      	nop
 8022fb8:	240000c4 	.word	0x240000c4

08022fbc <_kill_r>:
 8022fbc:	b538      	push	{r3, r4, r5, lr}
 8022fbe:	4d07      	ldr	r5, [pc, #28]	; (8022fdc <_kill_r+0x20>)
 8022fc0:	2300      	movs	r3, #0
 8022fc2:	4604      	mov	r4, r0
 8022fc4:	4608      	mov	r0, r1
 8022fc6:	4611      	mov	r1, r2
 8022fc8:	602b      	str	r3, [r5, #0]
 8022fca:	f7e1 fea9 	bl	8004d20 <_kill>
 8022fce:	1c43      	adds	r3, r0, #1
 8022fd0:	d102      	bne.n	8022fd8 <_kill_r+0x1c>
 8022fd2:	682b      	ldr	r3, [r5, #0]
 8022fd4:	b103      	cbz	r3, 8022fd8 <_kill_r+0x1c>
 8022fd6:	6023      	str	r3, [r4, #0]
 8022fd8:	bd38      	pop	{r3, r4, r5, pc}
 8022fda:	bf00      	nop
 8022fdc:	2400b144 	.word	0x2400b144

08022fe0 <_getpid_r>:
 8022fe0:	f7e1 be96 	b.w	8004d10 <_getpid>

08022fe4 <__swbuf_r>:
 8022fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022fe6:	460e      	mov	r6, r1
 8022fe8:	4614      	mov	r4, r2
 8022fea:	4605      	mov	r5, r0
 8022fec:	b118      	cbz	r0, 8022ff6 <__swbuf_r+0x12>
 8022fee:	6983      	ldr	r3, [r0, #24]
 8022ff0:	b90b      	cbnz	r3, 8022ff6 <__swbuf_r+0x12>
 8022ff2:	f000 fa33 	bl	802345c <__sinit>
 8022ff6:	4b21      	ldr	r3, [pc, #132]	; (802307c <__swbuf_r+0x98>)
 8022ff8:	429c      	cmp	r4, r3
 8022ffa:	d12b      	bne.n	8023054 <__swbuf_r+0x70>
 8022ffc:	686c      	ldr	r4, [r5, #4]
 8022ffe:	69a3      	ldr	r3, [r4, #24]
 8023000:	60a3      	str	r3, [r4, #8]
 8023002:	89a3      	ldrh	r3, [r4, #12]
 8023004:	071a      	lsls	r2, r3, #28
 8023006:	d52f      	bpl.n	8023068 <__swbuf_r+0x84>
 8023008:	6923      	ldr	r3, [r4, #16]
 802300a:	b36b      	cbz	r3, 8023068 <__swbuf_r+0x84>
 802300c:	6923      	ldr	r3, [r4, #16]
 802300e:	6820      	ldr	r0, [r4, #0]
 8023010:	1ac0      	subs	r0, r0, r3
 8023012:	6963      	ldr	r3, [r4, #20]
 8023014:	b2f6      	uxtb	r6, r6
 8023016:	4283      	cmp	r3, r0
 8023018:	4637      	mov	r7, r6
 802301a:	dc04      	bgt.n	8023026 <__swbuf_r+0x42>
 802301c:	4621      	mov	r1, r4
 802301e:	4628      	mov	r0, r5
 8023020:	f000 f988 	bl	8023334 <_fflush_r>
 8023024:	bb30      	cbnz	r0, 8023074 <__swbuf_r+0x90>
 8023026:	68a3      	ldr	r3, [r4, #8]
 8023028:	3b01      	subs	r3, #1
 802302a:	60a3      	str	r3, [r4, #8]
 802302c:	6823      	ldr	r3, [r4, #0]
 802302e:	1c5a      	adds	r2, r3, #1
 8023030:	6022      	str	r2, [r4, #0]
 8023032:	701e      	strb	r6, [r3, #0]
 8023034:	6963      	ldr	r3, [r4, #20]
 8023036:	3001      	adds	r0, #1
 8023038:	4283      	cmp	r3, r0
 802303a:	d004      	beq.n	8023046 <__swbuf_r+0x62>
 802303c:	89a3      	ldrh	r3, [r4, #12]
 802303e:	07db      	lsls	r3, r3, #31
 8023040:	d506      	bpl.n	8023050 <__swbuf_r+0x6c>
 8023042:	2e0a      	cmp	r6, #10
 8023044:	d104      	bne.n	8023050 <__swbuf_r+0x6c>
 8023046:	4621      	mov	r1, r4
 8023048:	4628      	mov	r0, r5
 802304a:	f000 f973 	bl	8023334 <_fflush_r>
 802304e:	b988      	cbnz	r0, 8023074 <__swbuf_r+0x90>
 8023050:	4638      	mov	r0, r7
 8023052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023054:	4b0a      	ldr	r3, [pc, #40]	; (8023080 <__swbuf_r+0x9c>)
 8023056:	429c      	cmp	r4, r3
 8023058:	d101      	bne.n	802305e <__swbuf_r+0x7a>
 802305a:	68ac      	ldr	r4, [r5, #8]
 802305c:	e7cf      	b.n	8022ffe <__swbuf_r+0x1a>
 802305e:	4b09      	ldr	r3, [pc, #36]	; (8023084 <__swbuf_r+0xa0>)
 8023060:	429c      	cmp	r4, r3
 8023062:	bf08      	it	eq
 8023064:	68ec      	ldreq	r4, [r5, #12]
 8023066:	e7ca      	b.n	8022ffe <__swbuf_r+0x1a>
 8023068:	4621      	mov	r1, r4
 802306a:	4628      	mov	r0, r5
 802306c:	f000 f80c 	bl	8023088 <__swsetup_r>
 8023070:	2800      	cmp	r0, #0
 8023072:	d0cb      	beq.n	802300c <__swbuf_r+0x28>
 8023074:	f04f 37ff 	mov.w	r7, #4294967295
 8023078:	e7ea      	b.n	8023050 <__swbuf_r+0x6c>
 802307a:	bf00      	nop
 802307c:	080254cc 	.word	0x080254cc
 8023080:	080254ec 	.word	0x080254ec
 8023084:	080254ac 	.word	0x080254ac

08023088 <__swsetup_r>:
 8023088:	4b32      	ldr	r3, [pc, #200]	; (8023154 <__swsetup_r+0xcc>)
 802308a:	b570      	push	{r4, r5, r6, lr}
 802308c:	681d      	ldr	r5, [r3, #0]
 802308e:	4606      	mov	r6, r0
 8023090:	460c      	mov	r4, r1
 8023092:	b125      	cbz	r5, 802309e <__swsetup_r+0x16>
 8023094:	69ab      	ldr	r3, [r5, #24]
 8023096:	b913      	cbnz	r3, 802309e <__swsetup_r+0x16>
 8023098:	4628      	mov	r0, r5
 802309a:	f000 f9df 	bl	802345c <__sinit>
 802309e:	4b2e      	ldr	r3, [pc, #184]	; (8023158 <__swsetup_r+0xd0>)
 80230a0:	429c      	cmp	r4, r3
 80230a2:	d10f      	bne.n	80230c4 <__swsetup_r+0x3c>
 80230a4:	686c      	ldr	r4, [r5, #4]
 80230a6:	89a3      	ldrh	r3, [r4, #12]
 80230a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80230ac:	0719      	lsls	r1, r3, #28
 80230ae:	d42c      	bmi.n	802310a <__swsetup_r+0x82>
 80230b0:	06dd      	lsls	r5, r3, #27
 80230b2:	d411      	bmi.n	80230d8 <__swsetup_r+0x50>
 80230b4:	2309      	movs	r3, #9
 80230b6:	6033      	str	r3, [r6, #0]
 80230b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80230bc:	81a3      	strh	r3, [r4, #12]
 80230be:	f04f 30ff 	mov.w	r0, #4294967295
 80230c2:	e03e      	b.n	8023142 <__swsetup_r+0xba>
 80230c4:	4b25      	ldr	r3, [pc, #148]	; (802315c <__swsetup_r+0xd4>)
 80230c6:	429c      	cmp	r4, r3
 80230c8:	d101      	bne.n	80230ce <__swsetup_r+0x46>
 80230ca:	68ac      	ldr	r4, [r5, #8]
 80230cc:	e7eb      	b.n	80230a6 <__swsetup_r+0x1e>
 80230ce:	4b24      	ldr	r3, [pc, #144]	; (8023160 <__swsetup_r+0xd8>)
 80230d0:	429c      	cmp	r4, r3
 80230d2:	bf08      	it	eq
 80230d4:	68ec      	ldreq	r4, [r5, #12]
 80230d6:	e7e6      	b.n	80230a6 <__swsetup_r+0x1e>
 80230d8:	0758      	lsls	r0, r3, #29
 80230da:	d512      	bpl.n	8023102 <__swsetup_r+0x7a>
 80230dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80230de:	b141      	cbz	r1, 80230f2 <__swsetup_r+0x6a>
 80230e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80230e4:	4299      	cmp	r1, r3
 80230e6:	d002      	beq.n	80230ee <__swsetup_r+0x66>
 80230e8:	4630      	mov	r0, r6
 80230ea:	f7ff fb59 	bl	80227a0 <_free_r>
 80230ee:	2300      	movs	r3, #0
 80230f0:	6363      	str	r3, [r4, #52]	; 0x34
 80230f2:	89a3      	ldrh	r3, [r4, #12]
 80230f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80230f8:	81a3      	strh	r3, [r4, #12]
 80230fa:	2300      	movs	r3, #0
 80230fc:	6063      	str	r3, [r4, #4]
 80230fe:	6923      	ldr	r3, [r4, #16]
 8023100:	6023      	str	r3, [r4, #0]
 8023102:	89a3      	ldrh	r3, [r4, #12]
 8023104:	f043 0308 	orr.w	r3, r3, #8
 8023108:	81a3      	strh	r3, [r4, #12]
 802310a:	6923      	ldr	r3, [r4, #16]
 802310c:	b94b      	cbnz	r3, 8023122 <__swsetup_r+0x9a>
 802310e:	89a3      	ldrh	r3, [r4, #12]
 8023110:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8023114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023118:	d003      	beq.n	8023122 <__swsetup_r+0x9a>
 802311a:	4621      	mov	r1, r4
 802311c:	4630      	mov	r0, r6
 802311e:	f000 fa63 	bl	80235e8 <__smakebuf_r>
 8023122:	89a0      	ldrh	r0, [r4, #12]
 8023124:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023128:	f010 0301 	ands.w	r3, r0, #1
 802312c:	d00a      	beq.n	8023144 <__swsetup_r+0xbc>
 802312e:	2300      	movs	r3, #0
 8023130:	60a3      	str	r3, [r4, #8]
 8023132:	6963      	ldr	r3, [r4, #20]
 8023134:	425b      	negs	r3, r3
 8023136:	61a3      	str	r3, [r4, #24]
 8023138:	6923      	ldr	r3, [r4, #16]
 802313a:	b943      	cbnz	r3, 802314e <__swsetup_r+0xc6>
 802313c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8023140:	d1ba      	bne.n	80230b8 <__swsetup_r+0x30>
 8023142:	bd70      	pop	{r4, r5, r6, pc}
 8023144:	0781      	lsls	r1, r0, #30
 8023146:	bf58      	it	pl
 8023148:	6963      	ldrpl	r3, [r4, #20]
 802314a:	60a3      	str	r3, [r4, #8]
 802314c:	e7f4      	b.n	8023138 <__swsetup_r+0xb0>
 802314e:	2000      	movs	r0, #0
 8023150:	e7f7      	b.n	8023142 <__swsetup_r+0xba>
 8023152:	bf00      	nop
 8023154:	240000c4 	.word	0x240000c4
 8023158:	080254cc 	.word	0x080254cc
 802315c:	080254ec 	.word	0x080254ec
 8023160:	080254ac 	.word	0x080254ac

08023164 <__register_exitproc>:
 8023164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023168:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8023224 <__register_exitproc+0xc0>
 802316c:	4606      	mov	r6, r0
 802316e:	f8d8 0000 	ldr.w	r0, [r8]
 8023172:	461f      	mov	r7, r3
 8023174:	460d      	mov	r5, r1
 8023176:	4691      	mov	r9, r2
 8023178:	f000 fa0e 	bl	8023598 <__retarget_lock_acquire_recursive>
 802317c:	4b25      	ldr	r3, [pc, #148]	; (8023214 <__register_exitproc+0xb0>)
 802317e:	681c      	ldr	r4, [r3, #0]
 8023180:	b934      	cbnz	r4, 8023190 <__register_exitproc+0x2c>
 8023182:	4c25      	ldr	r4, [pc, #148]	; (8023218 <__register_exitproc+0xb4>)
 8023184:	601c      	str	r4, [r3, #0]
 8023186:	4b25      	ldr	r3, [pc, #148]	; (802321c <__register_exitproc+0xb8>)
 8023188:	b113      	cbz	r3, 8023190 <__register_exitproc+0x2c>
 802318a:	681b      	ldr	r3, [r3, #0]
 802318c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8023190:	6863      	ldr	r3, [r4, #4]
 8023192:	2b1f      	cmp	r3, #31
 8023194:	dd07      	ble.n	80231a6 <__register_exitproc+0x42>
 8023196:	f8d8 0000 	ldr.w	r0, [r8]
 802319a:	f000 f9ff 	bl	802359c <__retarget_lock_release_recursive>
 802319e:	f04f 30ff 	mov.w	r0, #4294967295
 80231a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80231a6:	b34e      	cbz	r6, 80231fc <__register_exitproc+0x98>
 80231a8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80231ac:	b988      	cbnz	r0, 80231d2 <__register_exitproc+0x6e>
 80231ae:	4b1c      	ldr	r3, [pc, #112]	; (8023220 <__register_exitproc+0xbc>)
 80231b0:	b923      	cbnz	r3, 80231bc <__register_exitproc+0x58>
 80231b2:	f8d8 0000 	ldr.w	r0, [r8]
 80231b6:	f000 f9f0 	bl	802359a <__retarget_lock_release>
 80231ba:	e7f0      	b.n	802319e <__register_exitproc+0x3a>
 80231bc:	f44f 7084 	mov.w	r0, #264	; 0x108
 80231c0:	f7ff fac8 	bl	8022754 <malloc>
 80231c4:	2800      	cmp	r0, #0
 80231c6:	d0f4      	beq.n	80231b2 <__register_exitproc+0x4e>
 80231c8:	2300      	movs	r3, #0
 80231ca:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80231ce:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80231d2:	6863      	ldr	r3, [r4, #4]
 80231d4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80231d8:	2201      	movs	r2, #1
 80231da:	409a      	lsls	r2, r3
 80231dc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80231e0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80231e4:	4313      	orrs	r3, r2
 80231e6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80231ea:	2e02      	cmp	r6, #2
 80231ec:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80231f0:	bf02      	ittt	eq
 80231f2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80231f6:	4313      	orreq	r3, r2
 80231f8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80231fc:	6863      	ldr	r3, [r4, #4]
 80231fe:	f8d8 0000 	ldr.w	r0, [r8]
 8023202:	1c5a      	adds	r2, r3, #1
 8023204:	3302      	adds	r3, #2
 8023206:	6062      	str	r2, [r4, #4]
 8023208:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802320c:	f000 f9c6 	bl	802359c <__retarget_lock_release_recursive>
 8023210:	2000      	movs	r0, #0
 8023212:	e7c6      	b.n	80231a2 <__register_exitproc+0x3e>
 8023214:	2400b13c 	.word	0x2400b13c
 8023218:	2400b0b0 	.word	0x2400b0b0
 802321c:	080254a8 	.word	0x080254a8
 8023220:	08022755 	.word	0x08022755
 8023224:	24000128 	.word	0x24000128

08023228 <__sflush_r>:
 8023228:	898a      	ldrh	r2, [r1, #12]
 802322a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802322e:	4605      	mov	r5, r0
 8023230:	0710      	lsls	r0, r2, #28
 8023232:	460c      	mov	r4, r1
 8023234:	d458      	bmi.n	80232e8 <__sflush_r+0xc0>
 8023236:	684b      	ldr	r3, [r1, #4]
 8023238:	2b00      	cmp	r3, #0
 802323a:	dc05      	bgt.n	8023248 <__sflush_r+0x20>
 802323c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802323e:	2b00      	cmp	r3, #0
 8023240:	dc02      	bgt.n	8023248 <__sflush_r+0x20>
 8023242:	2000      	movs	r0, #0
 8023244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023248:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802324a:	2e00      	cmp	r6, #0
 802324c:	d0f9      	beq.n	8023242 <__sflush_r+0x1a>
 802324e:	2300      	movs	r3, #0
 8023250:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8023254:	682f      	ldr	r7, [r5, #0]
 8023256:	602b      	str	r3, [r5, #0]
 8023258:	d032      	beq.n	80232c0 <__sflush_r+0x98>
 802325a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802325c:	89a3      	ldrh	r3, [r4, #12]
 802325e:	075a      	lsls	r2, r3, #29
 8023260:	d505      	bpl.n	802326e <__sflush_r+0x46>
 8023262:	6863      	ldr	r3, [r4, #4]
 8023264:	1ac0      	subs	r0, r0, r3
 8023266:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8023268:	b10b      	cbz	r3, 802326e <__sflush_r+0x46>
 802326a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802326c:	1ac0      	subs	r0, r0, r3
 802326e:	2300      	movs	r3, #0
 8023270:	4602      	mov	r2, r0
 8023272:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023274:	6a21      	ldr	r1, [r4, #32]
 8023276:	4628      	mov	r0, r5
 8023278:	47b0      	blx	r6
 802327a:	1c43      	adds	r3, r0, #1
 802327c:	89a3      	ldrh	r3, [r4, #12]
 802327e:	d106      	bne.n	802328e <__sflush_r+0x66>
 8023280:	6829      	ldr	r1, [r5, #0]
 8023282:	291d      	cmp	r1, #29
 8023284:	d82c      	bhi.n	80232e0 <__sflush_r+0xb8>
 8023286:	4a2a      	ldr	r2, [pc, #168]	; (8023330 <__sflush_r+0x108>)
 8023288:	40ca      	lsrs	r2, r1
 802328a:	07d6      	lsls	r6, r2, #31
 802328c:	d528      	bpl.n	80232e0 <__sflush_r+0xb8>
 802328e:	2200      	movs	r2, #0
 8023290:	6062      	str	r2, [r4, #4]
 8023292:	04d9      	lsls	r1, r3, #19
 8023294:	6922      	ldr	r2, [r4, #16]
 8023296:	6022      	str	r2, [r4, #0]
 8023298:	d504      	bpl.n	80232a4 <__sflush_r+0x7c>
 802329a:	1c42      	adds	r2, r0, #1
 802329c:	d101      	bne.n	80232a2 <__sflush_r+0x7a>
 802329e:	682b      	ldr	r3, [r5, #0]
 80232a0:	b903      	cbnz	r3, 80232a4 <__sflush_r+0x7c>
 80232a2:	6560      	str	r0, [r4, #84]	; 0x54
 80232a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80232a6:	602f      	str	r7, [r5, #0]
 80232a8:	2900      	cmp	r1, #0
 80232aa:	d0ca      	beq.n	8023242 <__sflush_r+0x1a>
 80232ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80232b0:	4299      	cmp	r1, r3
 80232b2:	d002      	beq.n	80232ba <__sflush_r+0x92>
 80232b4:	4628      	mov	r0, r5
 80232b6:	f7ff fa73 	bl	80227a0 <_free_r>
 80232ba:	2000      	movs	r0, #0
 80232bc:	6360      	str	r0, [r4, #52]	; 0x34
 80232be:	e7c1      	b.n	8023244 <__sflush_r+0x1c>
 80232c0:	6a21      	ldr	r1, [r4, #32]
 80232c2:	2301      	movs	r3, #1
 80232c4:	4628      	mov	r0, r5
 80232c6:	47b0      	blx	r6
 80232c8:	1c41      	adds	r1, r0, #1
 80232ca:	d1c7      	bne.n	802325c <__sflush_r+0x34>
 80232cc:	682b      	ldr	r3, [r5, #0]
 80232ce:	2b00      	cmp	r3, #0
 80232d0:	d0c4      	beq.n	802325c <__sflush_r+0x34>
 80232d2:	2b1d      	cmp	r3, #29
 80232d4:	d001      	beq.n	80232da <__sflush_r+0xb2>
 80232d6:	2b16      	cmp	r3, #22
 80232d8:	d101      	bne.n	80232de <__sflush_r+0xb6>
 80232da:	602f      	str	r7, [r5, #0]
 80232dc:	e7b1      	b.n	8023242 <__sflush_r+0x1a>
 80232de:	89a3      	ldrh	r3, [r4, #12]
 80232e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80232e4:	81a3      	strh	r3, [r4, #12]
 80232e6:	e7ad      	b.n	8023244 <__sflush_r+0x1c>
 80232e8:	690f      	ldr	r7, [r1, #16]
 80232ea:	2f00      	cmp	r7, #0
 80232ec:	d0a9      	beq.n	8023242 <__sflush_r+0x1a>
 80232ee:	0793      	lsls	r3, r2, #30
 80232f0:	680e      	ldr	r6, [r1, #0]
 80232f2:	bf08      	it	eq
 80232f4:	694b      	ldreq	r3, [r1, #20]
 80232f6:	600f      	str	r7, [r1, #0]
 80232f8:	bf18      	it	ne
 80232fa:	2300      	movne	r3, #0
 80232fc:	eba6 0807 	sub.w	r8, r6, r7
 8023300:	608b      	str	r3, [r1, #8]
 8023302:	f1b8 0f00 	cmp.w	r8, #0
 8023306:	dd9c      	ble.n	8023242 <__sflush_r+0x1a>
 8023308:	6a21      	ldr	r1, [r4, #32]
 802330a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802330c:	4643      	mov	r3, r8
 802330e:	463a      	mov	r2, r7
 8023310:	4628      	mov	r0, r5
 8023312:	47b0      	blx	r6
 8023314:	2800      	cmp	r0, #0
 8023316:	dc06      	bgt.n	8023326 <__sflush_r+0xfe>
 8023318:	89a3      	ldrh	r3, [r4, #12]
 802331a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802331e:	81a3      	strh	r3, [r4, #12]
 8023320:	f04f 30ff 	mov.w	r0, #4294967295
 8023324:	e78e      	b.n	8023244 <__sflush_r+0x1c>
 8023326:	4407      	add	r7, r0
 8023328:	eba8 0800 	sub.w	r8, r8, r0
 802332c:	e7e9      	b.n	8023302 <__sflush_r+0xda>
 802332e:	bf00      	nop
 8023330:	20400001 	.word	0x20400001

08023334 <_fflush_r>:
 8023334:	b538      	push	{r3, r4, r5, lr}
 8023336:	690b      	ldr	r3, [r1, #16]
 8023338:	4605      	mov	r5, r0
 802333a:	460c      	mov	r4, r1
 802333c:	b913      	cbnz	r3, 8023344 <_fflush_r+0x10>
 802333e:	2500      	movs	r5, #0
 8023340:	4628      	mov	r0, r5
 8023342:	bd38      	pop	{r3, r4, r5, pc}
 8023344:	b118      	cbz	r0, 802334e <_fflush_r+0x1a>
 8023346:	6983      	ldr	r3, [r0, #24]
 8023348:	b90b      	cbnz	r3, 802334e <_fflush_r+0x1a>
 802334a:	f000 f887 	bl	802345c <__sinit>
 802334e:	4b14      	ldr	r3, [pc, #80]	; (80233a0 <_fflush_r+0x6c>)
 8023350:	429c      	cmp	r4, r3
 8023352:	d11b      	bne.n	802338c <_fflush_r+0x58>
 8023354:	686c      	ldr	r4, [r5, #4]
 8023356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802335a:	2b00      	cmp	r3, #0
 802335c:	d0ef      	beq.n	802333e <_fflush_r+0xa>
 802335e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023360:	07d0      	lsls	r0, r2, #31
 8023362:	d404      	bmi.n	802336e <_fflush_r+0x3a>
 8023364:	0599      	lsls	r1, r3, #22
 8023366:	d402      	bmi.n	802336e <_fflush_r+0x3a>
 8023368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802336a:	f000 f915 	bl	8023598 <__retarget_lock_acquire_recursive>
 802336e:	4628      	mov	r0, r5
 8023370:	4621      	mov	r1, r4
 8023372:	f7ff ff59 	bl	8023228 <__sflush_r>
 8023376:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023378:	07da      	lsls	r2, r3, #31
 802337a:	4605      	mov	r5, r0
 802337c:	d4e0      	bmi.n	8023340 <_fflush_r+0xc>
 802337e:	89a3      	ldrh	r3, [r4, #12]
 8023380:	059b      	lsls	r3, r3, #22
 8023382:	d4dd      	bmi.n	8023340 <_fflush_r+0xc>
 8023384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023386:	f000 f909 	bl	802359c <__retarget_lock_release_recursive>
 802338a:	e7d9      	b.n	8023340 <_fflush_r+0xc>
 802338c:	4b05      	ldr	r3, [pc, #20]	; (80233a4 <_fflush_r+0x70>)
 802338e:	429c      	cmp	r4, r3
 8023390:	d101      	bne.n	8023396 <_fflush_r+0x62>
 8023392:	68ac      	ldr	r4, [r5, #8]
 8023394:	e7df      	b.n	8023356 <_fflush_r+0x22>
 8023396:	4b04      	ldr	r3, [pc, #16]	; (80233a8 <_fflush_r+0x74>)
 8023398:	429c      	cmp	r4, r3
 802339a:	bf08      	it	eq
 802339c:	68ec      	ldreq	r4, [r5, #12]
 802339e:	e7da      	b.n	8023356 <_fflush_r+0x22>
 80233a0:	080254cc 	.word	0x080254cc
 80233a4:	080254ec 	.word	0x080254ec
 80233a8:	080254ac 	.word	0x080254ac

080233ac <std>:
 80233ac:	2300      	movs	r3, #0
 80233ae:	b510      	push	{r4, lr}
 80233b0:	4604      	mov	r4, r0
 80233b2:	e9c0 3300 	strd	r3, r3, [r0]
 80233b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80233ba:	6083      	str	r3, [r0, #8]
 80233bc:	8181      	strh	r1, [r0, #12]
 80233be:	6643      	str	r3, [r0, #100]	; 0x64
 80233c0:	81c2      	strh	r2, [r0, #14]
 80233c2:	6183      	str	r3, [r0, #24]
 80233c4:	4619      	mov	r1, r3
 80233c6:	2208      	movs	r2, #8
 80233c8:	305c      	adds	r0, #92	; 0x5c
 80233ca:	f7ff f9e1 	bl	8022790 <memset>
 80233ce:	4b05      	ldr	r3, [pc, #20]	; (80233e4 <std+0x38>)
 80233d0:	6263      	str	r3, [r4, #36]	; 0x24
 80233d2:	4b05      	ldr	r3, [pc, #20]	; (80233e8 <std+0x3c>)
 80233d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80233d6:	4b05      	ldr	r3, [pc, #20]	; (80233ec <std+0x40>)
 80233d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80233da:	4b05      	ldr	r3, [pc, #20]	; (80233f0 <std+0x44>)
 80233dc:	6224      	str	r4, [r4, #32]
 80233de:	6323      	str	r3, [r4, #48]	; 0x30
 80233e0:	bd10      	pop	{r4, pc}
 80233e2:	bf00      	nop
 80233e4:	08023681 	.word	0x08023681
 80233e8:	080236a3 	.word	0x080236a3
 80233ec:	080236db 	.word	0x080236db
 80233f0:	080236ff 	.word	0x080236ff

080233f4 <_cleanup_r>:
 80233f4:	4901      	ldr	r1, [pc, #4]	; (80233fc <_cleanup_r+0x8>)
 80233f6:	f000 b8af 	b.w	8023558 <_fwalk_reent>
 80233fa:	bf00      	nop
 80233fc:	08023335 	.word	0x08023335

08023400 <__sfmoreglue>:
 8023400:	b570      	push	{r4, r5, r6, lr}
 8023402:	2268      	movs	r2, #104	; 0x68
 8023404:	1e4d      	subs	r5, r1, #1
 8023406:	4355      	muls	r5, r2
 8023408:	460e      	mov	r6, r1
 802340a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802340e:	f7ff fa33 	bl	8022878 <_malloc_r>
 8023412:	4604      	mov	r4, r0
 8023414:	b140      	cbz	r0, 8023428 <__sfmoreglue+0x28>
 8023416:	2100      	movs	r1, #0
 8023418:	e9c0 1600 	strd	r1, r6, [r0]
 802341c:	300c      	adds	r0, #12
 802341e:	60a0      	str	r0, [r4, #8]
 8023420:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8023424:	f7ff f9b4 	bl	8022790 <memset>
 8023428:	4620      	mov	r0, r4
 802342a:	bd70      	pop	{r4, r5, r6, pc}

0802342c <__sfp_lock_acquire>:
 802342c:	4801      	ldr	r0, [pc, #4]	; (8023434 <__sfp_lock_acquire+0x8>)
 802342e:	f000 b8b3 	b.w	8023598 <__retarget_lock_acquire_recursive>
 8023432:	bf00      	nop
 8023434:	2400b142 	.word	0x2400b142

08023438 <__sfp_lock_release>:
 8023438:	4801      	ldr	r0, [pc, #4]	; (8023440 <__sfp_lock_release+0x8>)
 802343a:	f000 b8af 	b.w	802359c <__retarget_lock_release_recursive>
 802343e:	bf00      	nop
 8023440:	2400b142 	.word	0x2400b142

08023444 <__sinit_lock_acquire>:
 8023444:	4801      	ldr	r0, [pc, #4]	; (802344c <__sinit_lock_acquire+0x8>)
 8023446:	f000 b8a7 	b.w	8023598 <__retarget_lock_acquire_recursive>
 802344a:	bf00      	nop
 802344c:	2400b143 	.word	0x2400b143

08023450 <__sinit_lock_release>:
 8023450:	4801      	ldr	r0, [pc, #4]	; (8023458 <__sinit_lock_release+0x8>)
 8023452:	f000 b8a3 	b.w	802359c <__retarget_lock_release_recursive>
 8023456:	bf00      	nop
 8023458:	2400b143 	.word	0x2400b143

0802345c <__sinit>:
 802345c:	b510      	push	{r4, lr}
 802345e:	4604      	mov	r4, r0
 8023460:	f7ff fff0 	bl	8023444 <__sinit_lock_acquire>
 8023464:	69a3      	ldr	r3, [r4, #24]
 8023466:	b11b      	cbz	r3, 8023470 <__sinit+0x14>
 8023468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802346c:	f7ff bff0 	b.w	8023450 <__sinit_lock_release>
 8023470:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8023474:	6523      	str	r3, [r4, #80]	; 0x50
 8023476:	4b13      	ldr	r3, [pc, #76]	; (80234c4 <__sinit+0x68>)
 8023478:	4a13      	ldr	r2, [pc, #76]	; (80234c8 <__sinit+0x6c>)
 802347a:	681b      	ldr	r3, [r3, #0]
 802347c:	62a2      	str	r2, [r4, #40]	; 0x28
 802347e:	42a3      	cmp	r3, r4
 8023480:	bf04      	itt	eq
 8023482:	2301      	moveq	r3, #1
 8023484:	61a3      	streq	r3, [r4, #24]
 8023486:	4620      	mov	r0, r4
 8023488:	f000 f820 	bl	80234cc <__sfp>
 802348c:	6060      	str	r0, [r4, #4]
 802348e:	4620      	mov	r0, r4
 8023490:	f000 f81c 	bl	80234cc <__sfp>
 8023494:	60a0      	str	r0, [r4, #8]
 8023496:	4620      	mov	r0, r4
 8023498:	f000 f818 	bl	80234cc <__sfp>
 802349c:	2200      	movs	r2, #0
 802349e:	60e0      	str	r0, [r4, #12]
 80234a0:	2104      	movs	r1, #4
 80234a2:	6860      	ldr	r0, [r4, #4]
 80234a4:	f7ff ff82 	bl	80233ac <std>
 80234a8:	68a0      	ldr	r0, [r4, #8]
 80234aa:	2201      	movs	r2, #1
 80234ac:	2109      	movs	r1, #9
 80234ae:	f7ff ff7d 	bl	80233ac <std>
 80234b2:	68e0      	ldr	r0, [r4, #12]
 80234b4:	2202      	movs	r2, #2
 80234b6:	2112      	movs	r1, #18
 80234b8:	f7ff ff78 	bl	80233ac <std>
 80234bc:	2301      	movs	r3, #1
 80234be:	61a3      	str	r3, [r4, #24]
 80234c0:	e7d2      	b.n	8023468 <__sinit+0xc>
 80234c2:	bf00      	nop
 80234c4:	08025470 	.word	0x08025470
 80234c8:	080233f5 	.word	0x080233f5

080234cc <__sfp>:
 80234cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80234ce:	4607      	mov	r7, r0
 80234d0:	f7ff ffac 	bl	802342c <__sfp_lock_acquire>
 80234d4:	4b1e      	ldr	r3, [pc, #120]	; (8023550 <__sfp+0x84>)
 80234d6:	681e      	ldr	r6, [r3, #0]
 80234d8:	69b3      	ldr	r3, [r6, #24]
 80234da:	b913      	cbnz	r3, 80234e2 <__sfp+0x16>
 80234dc:	4630      	mov	r0, r6
 80234de:	f7ff ffbd 	bl	802345c <__sinit>
 80234e2:	3648      	adds	r6, #72	; 0x48
 80234e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80234e8:	3b01      	subs	r3, #1
 80234ea:	d503      	bpl.n	80234f4 <__sfp+0x28>
 80234ec:	6833      	ldr	r3, [r6, #0]
 80234ee:	b30b      	cbz	r3, 8023534 <__sfp+0x68>
 80234f0:	6836      	ldr	r6, [r6, #0]
 80234f2:	e7f7      	b.n	80234e4 <__sfp+0x18>
 80234f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80234f8:	b9d5      	cbnz	r5, 8023530 <__sfp+0x64>
 80234fa:	4b16      	ldr	r3, [pc, #88]	; (8023554 <__sfp+0x88>)
 80234fc:	60e3      	str	r3, [r4, #12]
 80234fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8023502:	6665      	str	r5, [r4, #100]	; 0x64
 8023504:	f000 f847 	bl	8023596 <__retarget_lock_init_recursive>
 8023508:	f7ff ff96 	bl	8023438 <__sfp_lock_release>
 802350c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8023510:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8023514:	6025      	str	r5, [r4, #0]
 8023516:	61a5      	str	r5, [r4, #24]
 8023518:	2208      	movs	r2, #8
 802351a:	4629      	mov	r1, r5
 802351c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8023520:	f7ff f936 	bl	8022790 <memset>
 8023524:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8023528:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802352c:	4620      	mov	r0, r4
 802352e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023530:	3468      	adds	r4, #104	; 0x68
 8023532:	e7d9      	b.n	80234e8 <__sfp+0x1c>
 8023534:	2104      	movs	r1, #4
 8023536:	4638      	mov	r0, r7
 8023538:	f7ff ff62 	bl	8023400 <__sfmoreglue>
 802353c:	4604      	mov	r4, r0
 802353e:	6030      	str	r0, [r6, #0]
 8023540:	2800      	cmp	r0, #0
 8023542:	d1d5      	bne.n	80234f0 <__sfp+0x24>
 8023544:	f7ff ff78 	bl	8023438 <__sfp_lock_release>
 8023548:	230c      	movs	r3, #12
 802354a:	603b      	str	r3, [r7, #0]
 802354c:	e7ee      	b.n	802352c <__sfp+0x60>
 802354e:	bf00      	nop
 8023550:	08025470 	.word	0x08025470
 8023554:	ffff0001 	.word	0xffff0001

08023558 <_fwalk_reent>:
 8023558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802355c:	4606      	mov	r6, r0
 802355e:	4688      	mov	r8, r1
 8023560:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8023564:	2700      	movs	r7, #0
 8023566:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802356a:	f1b9 0901 	subs.w	r9, r9, #1
 802356e:	d505      	bpl.n	802357c <_fwalk_reent+0x24>
 8023570:	6824      	ldr	r4, [r4, #0]
 8023572:	2c00      	cmp	r4, #0
 8023574:	d1f7      	bne.n	8023566 <_fwalk_reent+0xe>
 8023576:	4638      	mov	r0, r7
 8023578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802357c:	89ab      	ldrh	r3, [r5, #12]
 802357e:	2b01      	cmp	r3, #1
 8023580:	d907      	bls.n	8023592 <_fwalk_reent+0x3a>
 8023582:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023586:	3301      	adds	r3, #1
 8023588:	d003      	beq.n	8023592 <_fwalk_reent+0x3a>
 802358a:	4629      	mov	r1, r5
 802358c:	4630      	mov	r0, r6
 802358e:	47c0      	blx	r8
 8023590:	4307      	orrs	r7, r0
 8023592:	3568      	adds	r5, #104	; 0x68
 8023594:	e7e9      	b.n	802356a <_fwalk_reent+0x12>

08023596 <__retarget_lock_init_recursive>:
 8023596:	4770      	bx	lr

08023598 <__retarget_lock_acquire_recursive>:
 8023598:	4770      	bx	lr

0802359a <__retarget_lock_release>:
 802359a:	4770      	bx	lr

0802359c <__retarget_lock_release_recursive>:
 802359c:	4770      	bx	lr

0802359e <__swhatbuf_r>:
 802359e:	b570      	push	{r4, r5, r6, lr}
 80235a0:	460e      	mov	r6, r1
 80235a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80235a6:	2900      	cmp	r1, #0
 80235a8:	b096      	sub	sp, #88	; 0x58
 80235aa:	4614      	mov	r4, r2
 80235ac:	461d      	mov	r5, r3
 80235ae:	da08      	bge.n	80235c2 <__swhatbuf_r+0x24>
 80235b0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80235b4:	2200      	movs	r2, #0
 80235b6:	602a      	str	r2, [r5, #0]
 80235b8:	061a      	lsls	r2, r3, #24
 80235ba:	d410      	bmi.n	80235de <__swhatbuf_r+0x40>
 80235bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80235c0:	e00e      	b.n	80235e0 <__swhatbuf_r+0x42>
 80235c2:	466a      	mov	r2, sp
 80235c4:	f000 f8c2 	bl	802374c <_fstat_r>
 80235c8:	2800      	cmp	r0, #0
 80235ca:	dbf1      	blt.n	80235b0 <__swhatbuf_r+0x12>
 80235cc:	9a01      	ldr	r2, [sp, #4]
 80235ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80235d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80235d6:	425a      	negs	r2, r3
 80235d8:	415a      	adcs	r2, r3
 80235da:	602a      	str	r2, [r5, #0]
 80235dc:	e7ee      	b.n	80235bc <__swhatbuf_r+0x1e>
 80235de:	2340      	movs	r3, #64	; 0x40
 80235e0:	2000      	movs	r0, #0
 80235e2:	6023      	str	r3, [r4, #0]
 80235e4:	b016      	add	sp, #88	; 0x58
 80235e6:	bd70      	pop	{r4, r5, r6, pc}

080235e8 <__smakebuf_r>:
 80235e8:	898b      	ldrh	r3, [r1, #12]
 80235ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80235ec:	079d      	lsls	r5, r3, #30
 80235ee:	4606      	mov	r6, r0
 80235f0:	460c      	mov	r4, r1
 80235f2:	d507      	bpl.n	8023604 <__smakebuf_r+0x1c>
 80235f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80235f8:	6023      	str	r3, [r4, #0]
 80235fa:	6123      	str	r3, [r4, #16]
 80235fc:	2301      	movs	r3, #1
 80235fe:	6163      	str	r3, [r4, #20]
 8023600:	b002      	add	sp, #8
 8023602:	bd70      	pop	{r4, r5, r6, pc}
 8023604:	ab01      	add	r3, sp, #4
 8023606:	466a      	mov	r2, sp
 8023608:	f7ff ffc9 	bl	802359e <__swhatbuf_r>
 802360c:	9900      	ldr	r1, [sp, #0]
 802360e:	4605      	mov	r5, r0
 8023610:	4630      	mov	r0, r6
 8023612:	f7ff f931 	bl	8022878 <_malloc_r>
 8023616:	b948      	cbnz	r0, 802362c <__smakebuf_r+0x44>
 8023618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802361c:	059a      	lsls	r2, r3, #22
 802361e:	d4ef      	bmi.n	8023600 <__smakebuf_r+0x18>
 8023620:	f023 0303 	bic.w	r3, r3, #3
 8023624:	f043 0302 	orr.w	r3, r3, #2
 8023628:	81a3      	strh	r3, [r4, #12]
 802362a:	e7e3      	b.n	80235f4 <__smakebuf_r+0xc>
 802362c:	4b0d      	ldr	r3, [pc, #52]	; (8023664 <__smakebuf_r+0x7c>)
 802362e:	62b3      	str	r3, [r6, #40]	; 0x28
 8023630:	89a3      	ldrh	r3, [r4, #12]
 8023632:	6020      	str	r0, [r4, #0]
 8023634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023638:	81a3      	strh	r3, [r4, #12]
 802363a:	9b00      	ldr	r3, [sp, #0]
 802363c:	6163      	str	r3, [r4, #20]
 802363e:	9b01      	ldr	r3, [sp, #4]
 8023640:	6120      	str	r0, [r4, #16]
 8023642:	b15b      	cbz	r3, 802365c <__smakebuf_r+0x74>
 8023644:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023648:	4630      	mov	r0, r6
 802364a:	f000 f891 	bl	8023770 <_isatty_r>
 802364e:	b128      	cbz	r0, 802365c <__smakebuf_r+0x74>
 8023650:	89a3      	ldrh	r3, [r4, #12]
 8023652:	f023 0303 	bic.w	r3, r3, #3
 8023656:	f043 0301 	orr.w	r3, r3, #1
 802365a:	81a3      	strh	r3, [r4, #12]
 802365c:	89a0      	ldrh	r0, [r4, #12]
 802365e:	4305      	orrs	r5, r0
 8023660:	81a5      	strh	r5, [r4, #12]
 8023662:	e7cd      	b.n	8023600 <__smakebuf_r+0x18>
 8023664:	080233f5 	.word	0x080233f5

08023668 <__malloc_lock>:
 8023668:	4801      	ldr	r0, [pc, #4]	; (8023670 <__malloc_lock+0x8>)
 802366a:	f7ff bf95 	b.w	8023598 <__retarget_lock_acquire_recursive>
 802366e:	bf00      	nop
 8023670:	2400b141 	.word	0x2400b141

08023674 <__malloc_unlock>:
 8023674:	4801      	ldr	r0, [pc, #4]	; (802367c <__malloc_unlock+0x8>)
 8023676:	f7ff bf91 	b.w	802359c <__retarget_lock_release_recursive>
 802367a:	bf00      	nop
 802367c:	2400b141 	.word	0x2400b141

08023680 <__sread>:
 8023680:	b510      	push	{r4, lr}
 8023682:	460c      	mov	r4, r1
 8023684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023688:	f000 f894 	bl	80237b4 <_read_r>
 802368c:	2800      	cmp	r0, #0
 802368e:	bfab      	itete	ge
 8023690:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8023692:	89a3      	ldrhlt	r3, [r4, #12]
 8023694:	181b      	addge	r3, r3, r0
 8023696:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802369a:	bfac      	ite	ge
 802369c:	6563      	strge	r3, [r4, #84]	; 0x54
 802369e:	81a3      	strhlt	r3, [r4, #12]
 80236a0:	bd10      	pop	{r4, pc}

080236a2 <__swrite>:
 80236a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80236a6:	461f      	mov	r7, r3
 80236a8:	898b      	ldrh	r3, [r1, #12]
 80236aa:	05db      	lsls	r3, r3, #23
 80236ac:	4605      	mov	r5, r0
 80236ae:	460c      	mov	r4, r1
 80236b0:	4616      	mov	r6, r2
 80236b2:	d505      	bpl.n	80236c0 <__swrite+0x1e>
 80236b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80236b8:	2302      	movs	r3, #2
 80236ba:	2200      	movs	r2, #0
 80236bc:	f000 f868 	bl	8023790 <_lseek_r>
 80236c0:	89a3      	ldrh	r3, [r4, #12]
 80236c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80236c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80236ca:	81a3      	strh	r3, [r4, #12]
 80236cc:	4632      	mov	r2, r6
 80236ce:	463b      	mov	r3, r7
 80236d0:	4628      	mov	r0, r5
 80236d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80236d6:	f000 b817 	b.w	8023708 <_write_r>

080236da <__sseek>:
 80236da:	b510      	push	{r4, lr}
 80236dc:	460c      	mov	r4, r1
 80236de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80236e2:	f000 f855 	bl	8023790 <_lseek_r>
 80236e6:	1c43      	adds	r3, r0, #1
 80236e8:	89a3      	ldrh	r3, [r4, #12]
 80236ea:	bf15      	itete	ne
 80236ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80236ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80236f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80236f6:	81a3      	strheq	r3, [r4, #12]
 80236f8:	bf18      	it	ne
 80236fa:	81a3      	strhne	r3, [r4, #12]
 80236fc:	bd10      	pop	{r4, pc}

080236fe <__sclose>:
 80236fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023702:	f000 b813 	b.w	802372c <_close_r>
	...

08023708 <_write_r>:
 8023708:	b538      	push	{r3, r4, r5, lr}
 802370a:	4d07      	ldr	r5, [pc, #28]	; (8023728 <_write_r+0x20>)
 802370c:	4604      	mov	r4, r0
 802370e:	4608      	mov	r0, r1
 8023710:	4611      	mov	r1, r2
 8023712:	2200      	movs	r2, #0
 8023714:	602a      	str	r2, [r5, #0]
 8023716:	461a      	mov	r2, r3
 8023718:	f7e1 fb39 	bl	8004d8e <_write>
 802371c:	1c43      	adds	r3, r0, #1
 802371e:	d102      	bne.n	8023726 <_write_r+0x1e>
 8023720:	682b      	ldr	r3, [r5, #0]
 8023722:	b103      	cbz	r3, 8023726 <_write_r+0x1e>
 8023724:	6023      	str	r3, [r4, #0]
 8023726:	bd38      	pop	{r3, r4, r5, pc}
 8023728:	2400b144 	.word	0x2400b144

0802372c <_close_r>:
 802372c:	b538      	push	{r3, r4, r5, lr}
 802372e:	4d06      	ldr	r5, [pc, #24]	; (8023748 <_close_r+0x1c>)
 8023730:	2300      	movs	r3, #0
 8023732:	4604      	mov	r4, r0
 8023734:	4608      	mov	r0, r1
 8023736:	602b      	str	r3, [r5, #0]
 8023738:	f7e1 fb45 	bl	8004dc6 <_close>
 802373c:	1c43      	adds	r3, r0, #1
 802373e:	d102      	bne.n	8023746 <_close_r+0x1a>
 8023740:	682b      	ldr	r3, [r5, #0]
 8023742:	b103      	cbz	r3, 8023746 <_close_r+0x1a>
 8023744:	6023      	str	r3, [r4, #0]
 8023746:	bd38      	pop	{r3, r4, r5, pc}
 8023748:	2400b144 	.word	0x2400b144

0802374c <_fstat_r>:
 802374c:	b538      	push	{r3, r4, r5, lr}
 802374e:	4d07      	ldr	r5, [pc, #28]	; (802376c <_fstat_r+0x20>)
 8023750:	2300      	movs	r3, #0
 8023752:	4604      	mov	r4, r0
 8023754:	4608      	mov	r0, r1
 8023756:	4611      	mov	r1, r2
 8023758:	602b      	str	r3, [r5, #0]
 802375a:	f7e1 fb40 	bl	8004dde <_fstat>
 802375e:	1c43      	adds	r3, r0, #1
 8023760:	d102      	bne.n	8023768 <_fstat_r+0x1c>
 8023762:	682b      	ldr	r3, [r5, #0]
 8023764:	b103      	cbz	r3, 8023768 <_fstat_r+0x1c>
 8023766:	6023      	str	r3, [r4, #0]
 8023768:	bd38      	pop	{r3, r4, r5, pc}
 802376a:	bf00      	nop
 802376c:	2400b144 	.word	0x2400b144

08023770 <_isatty_r>:
 8023770:	b538      	push	{r3, r4, r5, lr}
 8023772:	4d06      	ldr	r5, [pc, #24]	; (802378c <_isatty_r+0x1c>)
 8023774:	2300      	movs	r3, #0
 8023776:	4604      	mov	r4, r0
 8023778:	4608      	mov	r0, r1
 802377a:	602b      	str	r3, [r5, #0]
 802377c:	f7e1 fb3f 	bl	8004dfe <_isatty>
 8023780:	1c43      	adds	r3, r0, #1
 8023782:	d102      	bne.n	802378a <_isatty_r+0x1a>
 8023784:	682b      	ldr	r3, [r5, #0]
 8023786:	b103      	cbz	r3, 802378a <_isatty_r+0x1a>
 8023788:	6023      	str	r3, [r4, #0]
 802378a:	bd38      	pop	{r3, r4, r5, pc}
 802378c:	2400b144 	.word	0x2400b144

08023790 <_lseek_r>:
 8023790:	b538      	push	{r3, r4, r5, lr}
 8023792:	4d07      	ldr	r5, [pc, #28]	; (80237b0 <_lseek_r+0x20>)
 8023794:	4604      	mov	r4, r0
 8023796:	4608      	mov	r0, r1
 8023798:	4611      	mov	r1, r2
 802379a:	2200      	movs	r2, #0
 802379c:	602a      	str	r2, [r5, #0]
 802379e:	461a      	mov	r2, r3
 80237a0:	f7e1 fb38 	bl	8004e14 <_lseek>
 80237a4:	1c43      	adds	r3, r0, #1
 80237a6:	d102      	bne.n	80237ae <_lseek_r+0x1e>
 80237a8:	682b      	ldr	r3, [r5, #0]
 80237aa:	b103      	cbz	r3, 80237ae <_lseek_r+0x1e>
 80237ac:	6023      	str	r3, [r4, #0]
 80237ae:	bd38      	pop	{r3, r4, r5, pc}
 80237b0:	2400b144 	.word	0x2400b144

080237b4 <_read_r>:
 80237b4:	b538      	push	{r3, r4, r5, lr}
 80237b6:	4d07      	ldr	r5, [pc, #28]	; (80237d4 <_read_r+0x20>)
 80237b8:	4604      	mov	r4, r0
 80237ba:	4608      	mov	r0, r1
 80237bc:	4611      	mov	r1, r2
 80237be:	2200      	movs	r2, #0
 80237c0:	602a      	str	r2, [r5, #0]
 80237c2:	461a      	mov	r2, r3
 80237c4:	f7e1 fac6 	bl	8004d54 <_read>
 80237c8:	1c43      	adds	r3, r0, #1
 80237ca:	d102      	bne.n	80237d2 <_read_r+0x1e>
 80237cc:	682b      	ldr	r3, [r5, #0]
 80237ce:	b103      	cbz	r3, 80237d2 <_read_r+0x1e>
 80237d0:	6023      	str	r3, [r4, #0]
 80237d2:	bd38      	pop	{r3, r4, r5, pc}
 80237d4:	2400b144 	.word	0x2400b144

080237d8 <_init>:
 80237d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80237da:	bf00      	nop
 80237dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80237de:	bc08      	pop	{r3}
 80237e0:	469e      	mov	lr, r3
 80237e2:	4770      	bx	lr

080237e4 <_fini>:
 80237e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80237e6:	bf00      	nop
 80237e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80237ea:	bc08      	pop	{r3}
 80237ec:	469e      	mov	lr, r3
 80237ee:	4770      	bx	lr
