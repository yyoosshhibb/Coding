/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#include <stdarg.h>
#include <touchgfx/TextProvider.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/TypedText.hpp>
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
    va_end(pArg);
    return width;
}

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
    va_end(pArg);
    return width;
}

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
    {
        substituteGlyphs();
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
}

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
    va_list pArg;
    va_start(pArg, format);
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
    va_end(pArg);
}

// Default TypedTextDatabase
extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE = {
    0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x41, 0x75, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x0, // @0 "Replace with Autotype"
    0x54, 0x69, 0x72, 0x65, 0x20, 0x54, 0x65, 0x6d, 0x70, 0x73, 0x20, 0x46, 0x4c, 0x3a, 0x0, // @22 "Tire Temps FL:"
    0x54, 0x69, 0x72, 0x65, 0x20, 0x54, 0x65, 0x6d, 0x70, 0x73, 0x20, 0x46, 0x52, 0x3a, 0x0, // @37 "Tire Temps FR:"
    0x54, 0x69, 0x72, 0x65, 0x20, 0x54, 0x65, 0x6d, 0x70, 0x73, 0x20, 0x52, 0x4c, 0x3a, 0x0, // @52 "Tire Temps RL:"
    0x54, 0x69, 0x72, 0x65, 0x20, 0x54, 0x65, 0x6d, 0x70, 0x73, 0x20, 0x52, 0x52, 0x3a, 0x0, // @67 "Tire Temps RR:"
    0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x20, 0x6d, 0x61, 0x78, 0xa, 0x0, // @82 "Inverter max\n"
    0x2, 0x20, 0x62, 0x61, 0x72, 0x0, // @96 "<> bar"
    0x4c, 0x56, 0x20, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0xa, 0x0, // @102 "LV Voltage\n"
    0x2, 0x20, 0x4e, 0xa, 0x0, // @114 "<> N\n"
    0x2, 0x20, 0x6d, 0x6d, 0x0, // @119 "<> mm"
    0x2, 0x20, 0xb0, 0x43, 0x0, // @124 "<> ?C"
    0x45, 0x20, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x0, // @129 "E Inverter"
    0x45, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x45, 0x6c, 0x73, 0x65, 0x0, // @140 "Error Else"
    0x48, 0x56, 0x20, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x0, // @151 "HV Voltage"
    0x54, 0x20, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x20, 0x4c, 0x56, 0x0, // @162 "T Cells LV"
    0x54, 0x20, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x20, 0x4d, 0x56, 0x0, // @173 "T Cells MV"
    0x54, 0x20, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x0, // @184 "T Inverter"
    0x55, 0x20, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x20, 0x4c, 0x56, 0x0, // @195 "U Cells LV"
    0x55, 0x20, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x20, 0x4d, 0x56, 0x0, // @206 "U Cells MV"
    0x2, 0x20, 0x25, 0x0, // @217 "<> %"
    0x2, 0x20, 0x41, 0x0, // @221 "<> A"
    0x2, 0x20, 0x4e, 0x0, // @225 "<> N"
    0x2, 0x20, 0x56, 0x0, // @229 "<> V"
    0x2, 0x20, 0xb0, 0x0, // @233 "<> ?"
    0x2, 0xb0, 0x43, 0x0, // @237 "<>?C"
    0x45, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x4c, 0x56, 0x53, 0x0, // @241 "Error LVS"
    0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x78, 0x0, // @251 "Motor max"
    0x54, 0x53, 0x20, 0x53, 0x74, 0x61, 0x74, 0x65, 0xa, 0x0, // @261 "TS State\n"
    0x2, 0x25, 0x0, // @271 "<>%"
    0x43, 0x65, 0x6c, 0x6c, 0x73, 0x20, 0x48, 0x56, 0x0, // @274 "Cells HV"
    0x44, 0x75, 0x74, 0x79, 0x20, 0x46, 0x41, 0x4e, 0x0, // @283 "Duty FAN"
    0x45, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x4d, 0x56, 0x0, // @292 "Error MV"
    0x45, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x54, 0x53, 0x0, // @301 "Error TS"
    0x53, 0x74, 0x20, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x0, // @310 "St Angle"
    0x54, 0x20, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x73, 0x0, // @319 "T Motors"
    0x54, 0x53, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x0, // @328 "TS Error"
    0x6e, 0x20, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x73, 0x0, // @337 "n Motors"
    0x70, 0x42, 0x20, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x0, // @346 "pB Front"
    0x70, 0x42, 0x20, 0x52, 0x65, 0x61, 0x72, 0xa, 0x0, // @355 "pB Rear\n"
    0x2, 0x0, // @364 "<>"
    0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x0, // @366 "Balance"
    0x54, 0x20, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x0, // @374 "T Cells"
    0x55, 0x20, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x0, // @382 "U Cells"
    0x41, 0x6c, 0x6c, 0x20, 0x4f, 0x4b, 0x0, // @390 "All OK"
    0x44, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x0, // @397 "Damper"
    0x31, 0x35, 0x30, 0x30, 0x30, 0x0, // @404 "15000"
    0x41, 0x50, 0x50, 0x53, 0xa, 0x0, // @410 "APPS\n"
    0x43, 0x6f, 0x6d, 0x6d, 0xa, 0x0, // @416 "Comm\n"
    0x45, 0x52, 0x52, 0x4f, 0x52, 0x0, // @422 "ERROR"
    0x49, 0x20, 0x4c, 0x56, 0x53, 0x0, // @428 "I LVS"
    0x54, 0x20, 0x56, 0x43, 0x55, 0x0, // @434 "T VCU"
    0x57, 0x61, 0x74, 0x65, 0x72, 0x0, // @440 "Water"
    0x6d, 0x61, 0x78, 0x20, 0x394, 0x0, // @446 "max ?"
    0x2d, 0x31, 0x37, 0x38, 0x0, // @452 "-178"
    0x30, 0x2e, 0x34, 0x35, 0x0, // @457 "0.45"
    0x31, 0x32, 0x2e, 0x33, 0x0, // @462 "12.3"
    0x32, 0x34, 0x35, 0x32, 0x0, // @467 "2452"
    0x32, 0x35, 0x2e, 0x31, 0x0, // @472 "25.1"
    0x32, 0x37, 0x31, 0x35, 0x0, // @477 "2715"
    0x33, 0x2e, 0x38, 0x32, 0x0, // @482 "3.82"
    0x33, 0x2e, 0x38, 0x37, 0x0, // @487 "3.87"
    0x33, 0x2e, 0x39, 0x31, 0x0, // @492 "3.91"
    0x33, 0x2e, 0x39, 0x32, 0x0, // @497 "3.92"
    0x33, 0x2e, 0x39, 0x38, 0x0, // @502 "3.98"
    0x35, 0x31, 0x34, 0x32, 0x0, // @507 "5142"
    0x36, 0x32, 0x35, 0x33, 0x0, // @512 "6253"
    0x43, 0x41, 0x4e, 0x31, 0x0, // @517 "CAN1"
    0x49, 0x20, 0x4d, 0x56, 0x0, // @522 "I MV"
    0x4a, 0x52, 0x32, 0x33, 0x0, // @527 "JR23"
    0x31, 0x34, 0x33, 0x0, // @532 "143"
    0x34, 0x32, 0x35, 0x0, // @536 "425"
    0x4c, 0x43, 0xa, 0x0, // @540 "LC\n"
    0x50, 0x43, 0x4d, 0x0, // @544 "PCM"
    0x52, 0x48, 0xa, 0x0, // @548 "RH\n"
    0x53, 0x6f, 0x43, 0x0, // @552 "SoC"
    0x32, 0x30, 0x0, // @556 "20"
    0x33, 0x30, 0x0, // @559 "30"
    0x33, 0x35, 0x0, // @562 "35"
    0x34, 0x30, 0x0, // @565 "40"
    0x35, 0x30, 0x0, // @568 "50"
    0x38, 0x33, 0x0, // @571 "83"
    0x38, 0x34, 0x0, // @574 "84"
    0x52, 0x48, 0x0 // @577 "RH"
};

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const uint32_t indicesGb[] TEXT_LOCATION_FLASH_ATTRIBUTE;

// Array holding dynamically installed languages
struct TranslationHeader
{
    uint32_t offset_to_texts;
    uint32_t offset_to_indices;
    uint32_t offset_to_typedtext;
};
static const TranslationHeader* languagesArray[1] = { 0 };

// Compiled and linked in languages
static const uint32_t* const staticLanguageIndices[] = {
    indicesGb
};

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
    {
        if (languagesArray[id] != 0)
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
    }
}

void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
}
