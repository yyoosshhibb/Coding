#include <touchgfx/Font.hpp>

FONT_KERNING_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::KerningNode kerning_DMSans_Bold_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE = {
    { 0x0030, -1 },  // (First char = [0x0030, zero], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x003F, -1 },  // (First char = [0x003F, question], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0044, -1 },  // (First char = [0x0044, D], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x0056, -2 },  // (First char = [0x0056, V], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0072, -1 },  // (First char = [0x0072, r], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0074,  1 },  // (First char = [0x0074, t], Second char = [0x002C, comma], Kerning dist = 1)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0079, -1 },  // (First char = [0x0079, y], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0030, zero], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0030, zero], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0030, zero], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0030, zero], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0030, zero], Kerning dist = -1)
    { 0x0072,  1 },  // (First char = [0x0072, r], Second char = [0x0032, two], Kerning dist = 1)
    { 0x0074,  1 },  // (First char = [0x0074, t], Second char = [0x0032, two], Kerning dist = 1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0034, four], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0034, four], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0034, four], Kerning dist = -1)
    { 0x0079, -1 },  // (First char = [0x0079, y], Second char = [0x0034, four], Kerning dist = -1)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0035, five], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0038, eight], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0038, eight], Kerning dist = -1)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x003F, question], Kerning dist = -1)
    { 0x0063, -1 },  // (First char = [0x0063, c], Second char = [0x003F, question], Kerning dist = -1)
    { 0x006F, -1 },  // (First char = [0x006F, o], Second char = [0x003F, question], Kerning dist = -1)
    { 0x0070, -1 },  // (First char = [0x0070, p], Second char = [0x003F, question], Kerning dist = -1)
    { 0x0030, -1 },  // (First char = [0x0030, zero], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0033, -1 },  // (First char = [0x0033, three], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0035, -1 },  // (First char = [0x0035, five], Second char = [0x0041, A], Kerning dist = -1)
    { 0x003F, -1 },  // (First char = [0x003F, question], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0044, -1 },  // (First char = [0x0044, D], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0046, -2 },  // (First char = [0x0046, F], Second char = [0x0041, A], Kerning dist = -2)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0055, -1 },  // (First char = [0x0055, U], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0056, -2 },  // (First char = [0x0056, V], Second char = [0x0041, A], Kerning dist = -2)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0043, C], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0043, C], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0043, C], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0053, S], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0053, S], Kerning dist = -1)
    { 0x002C, -2 },  // (First char = [0x002C, comma], Second char = [0x0054, T], Kerning dist = -2)
    { 0x0030, -1 },  // (First char = [0x0030, zero], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0034, -1 },  // (First char = [0x0034, four], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0054, T], Kerning dist = -1)
    { 0x004C, -2 },  // (First char = [0x004C, L], Second char = [0x0054, T], Kerning dist = -2)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0055, U], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0055, U], Kerning dist = -1)
    { 0x002C, -2 },  // (First char = [0x002C, comma], Second char = [0x0056, V], Kerning dist = -2)
    { 0x0030, -1 },  // (First char = [0x0030, zero], Second char = [0x0056, V], Kerning dist = -1)
    { 0x0033, -1 },  // (First char = [0x0033, three], Second char = [0x0056, V], Kerning dist = -1)
    { 0x0034, -1 },  // (First char = [0x0034, four], Second char = [0x0056, V], Kerning dist = -1)
    { 0x0038, -1 },  // (First char = [0x0038, eight], Second char = [0x0056, V], Kerning dist = -1)
    { 0x0041, -2 },  // (First char = [0x0041, A], Second char = [0x0056, V], Kerning dist = -2)
    { 0x004C, -2 },  // (First char = [0x004C, L], Second char = [0x0056, V], Kerning dist = -2)
    { 0x002C, -1 },  // (First char = [0x002C, comma], Second char = [0x0057, W], Kerning dist = -1)
    { 0x0030, -1 },  // (First char = [0x0030, zero], Second char = [0x0057, W], Kerning dist = -1)
    { 0x0033, -1 },  // (First char = [0x0033, three], Second char = [0x0057, W], Kerning dist = -1)
    { 0x0034, -1 },  // (First char = [0x0034, four], Second char = [0x0057, W], Kerning dist = -1)
    { 0x0038, -1 },  // (First char = [0x0038, eight], Second char = [0x0057, W], Kerning dist = -1)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0057, W], Kerning dist = -1)
    { 0x0044, -1 },  // (First char = [0x0044, D], Second char = [0x0057, W], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0057, W], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0061, a], Kerning dist = -2)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0079, -1 },  // (First char = [0x0079, y], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0052, -1 },  // (First char = [0x0052, R], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0063, c], Kerning dist = -2)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0078, -1 },  // (First char = [0x0078, x], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0079, -1 },  // (First char = [0x0079, y], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0052, -1 },  // (First char = [0x0052, R], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0065, e], Kerning dist = -2)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0078, -1 },  // (First char = [0x0078, x], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0079, -1 },  // (First char = [0x0079, y], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0067, g], Kerning dist = -2)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0067, g], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0067, g], Kerning dist = -1)
    { 0x006F, -1 },  // (First char = [0x006F, o], Second char = [0x0067, g], Kerning dist = -1)
    { 0x0070, -1 },  // (First char = [0x0070, p], Second char = [0x0067, g], Kerning dist = -1)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x0067, g], Kerning dist = -1)
    { 0x0079, -1 },  // (First char = [0x0079, y], Second char = [0x0067, g], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x006D, m], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x006E, n], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0052, -1 },  // (First char = [0x0052, R], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x006F, o], Kerning dist = -2)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0078, -1 },  // (First char = [0x0078, x], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0079, -1 },  // (First char = [0x0079, y], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0070, p], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0072, r], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0073, s], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0073, s], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0073, s], Kerning dist = -1)
    { 0x002C, -1 },  // (First char = [0x002C, comma], Second char = [0x0074, t], Kerning dist = -1)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0074, t], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0074, t], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0075, u], Kerning dist = -1)
    { 0x002C, -1 },  // (First char = [0x002C, comma], Second char = [0x0076, v], Kerning dist = -1)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0076, v], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0076, v], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0076, v], Kerning dist = -1)
    { 0x002C, -1 },  // (First char = [0x002C, comma], Second char = [0x0077, w], Kerning dist = -1)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0077, w], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0077, w], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0077, w], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0078, x], Kerning dist = -1)
    { 0x0065, -1 },  // (First char = [0x0065, e], Second char = [0x0078, x], Kerning dist = -1)
    { 0x006F, -1 },  // (First char = [0x006F, o], Second char = [0x0078, x], Kerning dist = -1)
    { 0x0070, -1 },  // (First char = [0x0070, p], Second char = [0x0078, x], Kerning dist = -1)
    { 0x002C, -1 },  // (First char = [0x002C, comma], Second char = [0x0079, y], Kerning dist = -1)
    { 0x0034, -1 },  // (First char = [0x0034, four], Second char = [0x0079, y], Kerning dist = -1)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0079, y], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0079, y], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0079, y], Kerning dist = -1)
    { 0x006F, -1 },  // (First char = [0x006F, o], Second char = [0x0079, y], Kerning dist = -1)
    { 0x0070, -1 },  // (First char = [0x0070, p], Second char = [0x0079, y], Kerning dist = -1)
    { 0x0073, -1 },  // (First char = [0x0073, s], Second char = [0x0079, y], Kerning dist = -1)
};
