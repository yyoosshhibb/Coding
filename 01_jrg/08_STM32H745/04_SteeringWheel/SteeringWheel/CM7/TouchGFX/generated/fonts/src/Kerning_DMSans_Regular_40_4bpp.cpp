#include <touchgfx/Font.hpp>

FONT_KERNING_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::KerningNode kerning_DMSans_Regular_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE = {
    { 0x00ED,  2 },  // (First char = [0x00ED, iacute], Second char = [0x0021, exclam], Kerning dist = 2)
    { 0x0026, -2 },  // (First char = [0x0026, ampersand], Second char = [0x0022, quotedbl], Kerning dist = -2)
    { 0x0035, -1 },  // (First char = [0x0035, five], Second char = [0x0022, quotedbl], Kerning dist = -1)
    { 0x0037,  1 },  // (First char = [0x0037, seven], Second char = [0x0022, quotedbl], Kerning dist = 1)
    { 0x0040, -2 },  // (First char = [0x0040, at], Second char = [0x0022, quotedbl], Kerning dist = -2)
    { 0x0041, -2 },  // (First char = [0x0041, A], Second char = [0x0022, quotedbl], Kerning dist = -2)
    { 0x004C, -2 },  // (First char = [0x004C, L], Second char = [0x0022, quotedbl], Kerning dist = -2)
    { 0x0059,  2 },  // (First char = [0x0059, Y], Second char = [0x0022, quotedbl], Kerning dist = 2)
    { 0x005C, -4 },  // (First char = [0x005C, backslash], Second char = [0x0022, quotedbl], Kerning dist = -4)
    { 0x0062, -2 },  // (First char = [0x0062, b], Second char = [0x0022, quotedbl], Kerning dist = -2)
    { 0x0068, -2 },  // (First char = [0x0068, h], Second char = [0x0022, quotedbl], Kerning dist = -2)
    { 0x006D, -2 },  // (First char = [0x006D, m], Second char = [0x0022, quotedbl], Kerning dist = -2)
    { 0x006E, -2 },  // (First char = [0x006E, n], Second char = [0x0022, quotedbl], Kerning dist = -2)
    { 0x006F, -2 },  // (First char = [0x006F, o], Second char = [0x0022, quotedbl], Kerning dist = -2)
    { 0x0070, -2 },  // (First char = [0x0070, p], Second char = [0x0022, quotedbl], Kerning dist = -2)
    { 0x00C0, -2 },  // (First char = [0x00C0, Agrave], Second char = [0x0022, quotedbl], Kerning dist = -2)
    { 0x00C1, -2 },  // (First char = [0x00C1, Aacute], Second char = [0x0022, quotedbl], Kerning dist = -2)
    { 0x00C2, -2 },  // (First char = [0x00C2, Acircumflex], Second char = [0x0022, quotedbl], Kerning dist = -2)
    { 0x00C3, -2 },  // (First char = [0x00C3, Atilde], Second char = [0x0022, quotedbl], Kerning dist = -2)
    { 0x00C4, -2 },  // (First char = [0x00C4, Adieresis], Second char = [0x0022, quotedbl], Kerning dist = -2)
    { 0x00C5, -2 },  // (First char = [0x00C5, Aring], Second char = [0x0022, quotedbl], Kerning dist = -2)
    { 0x00DD,  2 },  // (First char = [0x00DD, Yacute], Second char = [0x0022, quotedbl], Kerning dist = 2)
    { 0x00ED,  1 },  // (First char = [0x00ED, iacute], Second char = [0x0022, quotedbl], Kerning dist = 1)
    { 0x00F1, -2 },  // (First char = [0x00F1, ntilde], Second char = [0x0022, quotedbl], Kerning dist = -2)
    { 0x00F2, -2 },  // (First char = [0x00F2, ograve], Second char = [0x0022, quotedbl], Kerning dist = -2)
    { 0x00F3, -2 },  // (First char = [0x00F3, oacute], Second char = [0x0022, quotedbl], Kerning dist = -2)
    { 0x00F4, -2 },  // (First char = [0x00F4, ocircumflex], Second char = [0x0022, quotedbl], Kerning dist = -2)
    { 0x00F5, -2 },  // (First char = [0x00F5, otilde], Second char = [0x0022, quotedbl], Kerning dist = -2)
    { 0x00F6, -2 },  // (First char = [0x00F6, odieresis], Second char = [0x0022, quotedbl], Kerning dist = -2)
    { 0x00FE, -2 },  // (First char = [0x00FE, thorn], Second char = [0x0022, quotedbl], Kerning dist = -2)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0024, dollar], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0024, dollar], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0024, dollar], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0024, dollar], Kerning dist = -1)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x0024, dollar], Kerning dist = -2)
    { 0x00DD, -2 },  // (First char = [0x00DD, Yacute], Second char = [0x0024, dollar], Kerning dist = -2)
    { 0x0026, -1 },  // (First char = [0x0026, ampersand], Second char = [0x0025, percent], Kerning dist = -1)
    { 0x002C, -2 },  // (First char = [0x002C, comma], Second char = [0x0025, percent], Kerning dist = -2)
    { 0x002E, -3 },  // (First char = [0x002E, period], Second char = [0x0025, percent], Kerning dist = -3)
    { 0x0033, -1 },  // (First char = [0x0033, three], Second char = [0x0025, percent], Kerning dist = -1)
    { 0x0036, -1 },  // (First char = [0x0036, six], Second char = [0x0025, percent], Kerning dist = -1)
    { 0x0040, -2 },  // (First char = [0x0040, at], Second char = [0x0025, percent], Kerning dist = -2)
    { 0x004C, -2 },  // (First char = [0x004C, L], Second char = [0x0025, percent], Kerning dist = -2)
    { 0x00BF, -1 },  // (First char = [0x00BF, questiondown], Second char = [0x0025, percent], Kerning dist = -1)
    { 0x0028, -2 },  // (First char = [0x0028, parenleft], Second char = [0x0026, ampersand], Kerning dist = -2)
    { 0x002A, -2 },  // (First char = [0x002A, asterisk], Second char = [0x0026, ampersand], Kerning dist = -2)
    { 0x002F, -2 },  // (First char = [0x002F, slash], Second char = [0x0026, ampersand], Kerning dist = -2)
    { 0x0034,  2 },  // (First char = [0x0034, four], Second char = [0x0026, ampersand], Kerning dist = 2)
    { 0x0037, -2 },  // (First char = [0x0037, seven], Second char = [0x0026, ampersand], Kerning dist = -2)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0026, ampersand], Kerning dist = -1)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x0026, ampersand], Kerning dist = -1)
    { 0x0050, -2 },  // (First char = [0x0050, P], Second char = [0x0026, ampersand], Kerning dist = -2)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0026, ampersand], Kerning dist = -2)
    { 0x0056, -2 },  // (First char = [0x0056, V], Second char = [0x0026, ampersand], Kerning dist = -2)
    { 0x0057, -2 },  // (First char = [0x0057, W], Second char = [0x0026, ampersand], Kerning dist = -2)
    { 0x0059, -3 },  // (First char = [0x0059, Y], Second char = [0x0026, ampersand], Kerning dist = -3)
    { 0x005F, -2 },  // (First char = [0x005F, underscore], Second char = [0x0026, ampersand], Kerning dist = -2)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x0026, ampersand], Kerning dist = -1)
    { 0x00DD, -3 },  // (First char = [0x00DD, Yacute], Second char = [0x0026, ampersand], Kerning dist = -3)
    { 0x0026, -2 },  // (First char = [0x0026, ampersand], Second char = [0x0027, quotesingle], Kerning dist = -2)
    { 0x0035, -1 },  // (First char = [0x0035, five], Second char = [0x0027, quotesingle], Kerning dist = -1)
    { 0x0037,  1 },  // (First char = [0x0037, seven], Second char = [0x0027, quotesingle], Kerning dist = 1)
    { 0x0040, -2 },  // (First char = [0x0040, at], Second char = [0x0027, quotesingle], Kerning dist = -2)
    { 0x0041, -2 },  // (First char = [0x0041, A], Second char = [0x0027, quotesingle], Kerning dist = -2)
    { 0x004C, -2 },  // (First char = [0x004C, L], Second char = [0x0027, quotesingle], Kerning dist = -2)
    { 0x0059,  2 },  // (First char = [0x0059, Y], Second char = [0x0027, quotesingle], Kerning dist = 2)
    { 0x005C, -4 },  // (First char = [0x005C, backslash], Second char = [0x0027, quotesingle], Kerning dist = -4)
    { 0x0062, -2 },  // (First char = [0x0062, b], Second char = [0x0027, quotesingle], Kerning dist = -2)
    { 0x0068, -2 },  // (First char = [0x0068, h], Second char = [0x0027, quotesingle], Kerning dist = -2)
    { 0x006D, -2 },  // (First char = [0x006D, m], Second char = [0x0027, quotesingle], Kerning dist = -2)
    { 0x006E, -2 },  // (First char = [0x006E, n], Second char = [0x0027, quotesingle], Kerning dist = -2)
    { 0x006F, -2 },  // (First char = [0x006F, o], Second char = [0x0027, quotesingle], Kerning dist = -2)
    { 0x0070, -2 },  // (First char = [0x0070, p], Second char = [0x0027, quotesingle], Kerning dist = -2)
    { 0x00C0, -2 },  // (First char = [0x00C0, Agrave], Second char = [0x0027, quotesingle], Kerning dist = -2)
    { 0x00C1, -2 },  // (First char = [0x00C1, Aacute], Second char = [0x0027, quotesingle], Kerning dist = -2)
    { 0x00C2, -2 },  // (First char = [0x00C2, Acircumflex], Second char = [0x0027, quotesingle], Kerning dist = -2)
    { 0x00C3, -2 },  // (First char = [0x00C3, Atilde], Second char = [0x0027, quotesingle], Kerning dist = -2)
    { 0x00C4, -2 },  // (First char = [0x00C4, Adieresis], Second char = [0x0027, quotesingle], Kerning dist = -2)
    { 0x00C5, -2 },  // (First char = [0x00C5, Aring], Second char = [0x0027, quotesingle], Kerning dist = -2)
    { 0x00DD,  2 },  // (First char = [0x00DD, Yacute], Second char = [0x0027, quotesingle], Kerning dist = 2)
    { 0x00ED,  1 },  // (First char = [0x00ED, iacute], Second char = [0x0027, quotesingle], Kerning dist = 1)
    { 0x00F1, -2 },  // (First char = [0x00F1, ntilde], Second char = [0x0027, quotesingle], Kerning dist = -2)
    { 0x00F2, -2 },  // (First char = [0x00F2, ograve], Second char = [0x0027, quotesingle], Kerning dist = -2)
    { 0x00F3, -2 },  // (First char = [0x00F3, oacute], Second char = [0x0027, quotesingle], Kerning dist = -2)
    { 0x00F4, -2 },  // (First char = [0x00F4, ocircumflex], Second char = [0x0027, quotesingle], Kerning dist = -2)
    { 0x00F5, -2 },  // (First char = [0x00F5, otilde], Second char = [0x0027, quotesingle], Kerning dist = -2)
    { 0x00F6, -2 },  // (First char = [0x00F6, odieresis], Second char = [0x0027, quotesingle], Kerning dist = -2)
    { 0x00FE, -2 },  // (First char = [0x00FE, thorn], Second char = [0x0027, quotesingle], Kerning dist = -2)
    { 0x0030, -2 },  // (First char = [0x0030, zero], Second char = [0x0029, parenright], Kerning dist = -2)
    { 0x0036, -1 },  // (First char = [0x0036, six], Second char = [0x0029, parenright], Kerning dist = -1)
    { 0x0038, -2 },  // (First char = [0x0038, eight], Second char = [0x0029, parenright], Kerning dist = -2)
    { 0x0039, -1 },  // (First char = [0x0039, nine], Second char = [0x0029, parenright], Kerning dist = -1)
    { 0x003C, -2 },  // (First char = [0x003C, less], Second char = [0x0029, parenright], Kerning dist = -2)
    { 0x003E, -2 },  // (First char = [0x003E, greater], Second char = [0x0029, parenright], Kerning dist = -2)
    { 0x003F, -2 },  // (First char = [0x003F, question], Second char = [0x0029, parenright], Kerning dist = -2)
    { 0x0040, -3 },  // (First char = [0x0040, at], Second char = [0x0029, parenright], Kerning dist = -3)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0029, parenright], Kerning dist = -1)
    { 0x0043, -1 },  // (First char = [0x0043, C], Second char = [0x0029, parenright], Kerning dist = -1)
    { 0x0044, -3 },  // (First char = [0x0044, D], Second char = [0x0029, parenright], Kerning dist = -3)
    { 0x004F, -3 },  // (First char = [0x004F, O], Second char = [0x0029, parenright], Kerning dist = -3)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x0029, parenright], Kerning dist = -1)
    { 0x0062, -2 },  // (First char = [0x0062, b], Second char = [0x0029, parenright], Kerning dist = -2)
    { 0x006F, -2 },  // (First char = [0x006F, o], Second char = [0x0029, parenright], Kerning dist = -2)
    { 0x0070, -2 },  // (First char = [0x0070, p], Second char = [0x0029, parenright], Kerning dist = -2)
    { 0x00C0, -1 },  // (First char = [0x00C0, Agrave], Second char = [0x0029, parenright], Kerning dist = -1)
    { 0x00C1, -1 },  // (First char = [0x00C1, Aacute], Second char = [0x0029, parenright], Kerning dist = -1)
    { 0x00C2, -1 },  // (First char = [0x00C2, Acircumflex], Second char = [0x0029, parenright], Kerning dist = -1)
    { 0x00C3, -1 },  // (First char = [0x00C3, Atilde], Second char = [0x0029, parenright], Kerning dist = -1)
    { 0x00C4, -1 },  // (First char = [0x00C4, Adieresis], Second char = [0x0029, parenright], Kerning dist = -1)
    { 0x00C5, -1 },  // (First char = [0x00C5, Aring], Second char = [0x0029, parenright], Kerning dist = -1)
    { 0x00C7, -1 },  // (First char = [0x00C7, Ccedilla], Second char = [0x0029, parenright], Kerning dist = -1)
    { 0x00D0, -3 },  // (First char = [0x00D0, Eth], Second char = [0x0029, parenright], Kerning dist = -3)
    { 0x00D2, -3 },  // (First char = [0x00D2, Ograve], Second char = [0x0029, parenright], Kerning dist = -3)
    { 0x00D3, -3 },  // (First char = [0x00D3, Oacute], Second char = [0x0029, parenright], Kerning dist = -3)
    { 0x00D4, -3 },  // (First char = [0x00D4, Ocircumflex], Second char = [0x0029, parenright], Kerning dist = -3)
    { 0x00D5, -3 },  // (First char = [0x00D5, Otilde], Second char = [0x0029, parenright], Kerning dist = -3)
    { 0x00D6, -3 },  // (First char = [0x00D6, Odieresis], Second char = [0x0029, parenright], Kerning dist = -3)
    { 0x00DE, -2 },  // (First char = [0x00DE, Thorn], Second char = [0x0029, parenright], Kerning dist = -2)
    { 0x00F2, -2 },  // (First char = [0x00F2, ograve], Second char = [0x0029, parenright], Kerning dist = -2)
    { 0x00F3, -2 },  // (First char = [0x00F3, oacute], Second char = [0x0029, parenright], Kerning dist = -2)
    { 0x00F4, -2 },  // (First char = [0x00F4, ocircumflex], Second char = [0x0029, parenright], Kerning dist = -2)
    { 0x00F5, -2 },  // (First char = [0x00F5, otilde], Second char = [0x0029, parenright], Kerning dist = -2)
    { 0x00F6, -2 },  // (First char = [0x00F6, odieresis], Second char = [0x0029, parenright], Kerning dist = -2)
    { 0x00FE, -2 },  // (First char = [0x00FE, thorn], Second char = [0x0029, parenright], Kerning dist = -2)
    { 0x0026, -2 },  // (First char = [0x0026, ampersand], Second char = [0x002A, asterisk], Kerning dist = -2)
    { 0x0033, -1 },  // (First char = [0x0033, three], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x0034, -2 },  // (First char = [0x0034, four], Second char = [0x002A, asterisk], Kerning dist = -2)
    { 0x0035, -1 },  // (First char = [0x0035, five], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x0036, -1 },  // (First char = [0x0036, six], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x0038, -1 },  // (First char = [0x0038, eight], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x0040, -1 },  // (First char = [0x0040, at], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x0041, -4 },  // (First char = [0x0041, A], Second char = [0x002A, asterisk], Kerning dist = -4)
    { 0x004C, -4 },  // (First char = [0x004C, L], Second char = [0x002A, asterisk], Kerning dist = -4)
    { 0x005F, -4 },  // (First char = [0x005F, underscore], Second char = [0x002A, asterisk], Kerning dist = -4)
    { 0x0061, -1 },  // (First char = [0x0061, a], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x0062, -1 },  // (First char = [0x0062, b], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x0063, -1 },  // (First char = [0x0063, c], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x0065, -1 },  // (First char = [0x0065, e], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x0068, -1 },  // (First char = [0x0068, h], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x006D, -1 },  // (First char = [0x006D, m], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x006E, -1 },  // (First char = [0x006E, n], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x006F, -1 },  // (First char = [0x006F, o], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x0070, -1 },  // (First char = [0x0070, p], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x0073, -1 },  // (First char = [0x0073, s], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x00C0, -4 },  // (First char = [0x00C0, Agrave], Second char = [0x002A, asterisk], Kerning dist = -4)
    { 0x00C1, -4 },  // (First char = [0x00C1, Aacute], Second char = [0x002A, asterisk], Kerning dist = -4)
    { 0x00C2, -4 },  // (First char = [0x00C2, Acircumflex], Second char = [0x002A, asterisk], Kerning dist = -4)
    { 0x00C3, -4 },  // (First char = [0x00C3, Atilde], Second char = [0x002A, asterisk], Kerning dist = -4)
    { 0x00C4, -4 },  // (First char = [0x00C4, Adieresis], Second char = [0x002A, asterisk], Kerning dist = -4)
    { 0x00C5, -4 },  // (First char = [0x00C5, Aring], Second char = [0x002A, asterisk], Kerning dist = -4)
    { 0x00DF, -2 },  // (First char = [0x00DF, germandbls], Second char = [0x002A, asterisk], Kerning dist = -2)
    { 0x00E0, -1 },  // (First char = [0x00E0, agrave], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x00E1, -1 },  // (First char = [0x00E1, aacute], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x00E2, -1 },  // (First char = [0x00E2, acircumflex], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x00E3, -1 },  // (First char = [0x00E3, atilde], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x00E4, -1 },  // (First char = [0x00E4, adieresis], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x00E5, -1 },  // (First char = [0x00E5, aring], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x00E6, -1 },  // (First char = [0x00E6, ae], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x00E7, -1 },  // (First char = [0x00E7, ccedilla], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x00E8, -1 },  // (First char = [0x00E8, egrave], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x00E9, -1 },  // (First char = [0x00E9, eacute], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x00EA, -1 },  // (First char = [0x00EA, ecircumflex], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x00EB, -1 },  // (First char = [0x00EB, edieresis], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x00ED,  2 },  // (First char = [0x00ED, iacute], Second char = [0x002A, asterisk], Kerning dist = 2)
    { 0x00F1, -1 },  // (First char = [0x00F1, ntilde], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x00F2, -1 },  // (First char = [0x00F2, ograve], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x00F3, -1 },  // (First char = [0x00F3, oacute], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x00F4, -1 },  // (First char = [0x00F4, ocircumflex], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x00F5, -1 },  // (First char = [0x00F5, otilde], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x00F6, -1 },  // (First char = [0x00F6, odieresis], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x00FE, -1 },  // (First char = [0x00FE, thorn], Second char = [0x002A, asterisk], Kerning dist = -1)
    { 0x002F, -2 },  // (First char = [0x002F, slash], Second char = [0x002B, plus], Kerning dist = -2)
    { 0x0032, -1 },  // (First char = [0x0032, two], Second char = [0x002B, plus], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x002B, plus], Kerning dist = -1)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x002B, plus], Kerning dist = -1)
    { 0x004B, -2 },  // (First char = [0x004B, K], Second char = [0x002B, plus], Kerning dist = -2)
    { 0x004C, -2 },  // (First char = [0x004C, L], Second char = [0x002B, plus], Kerning dist = -2)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x002B, plus], Kerning dist = -1)
    { 0x0052, -1 },  // (First char = [0x0052, R], Second char = [0x002B, plus], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x002B, plus], Kerning dist = -2)
    { 0x0056, -2 },  // (First char = [0x0056, V], Second char = [0x002B, plus], Kerning dist = -2)
    { 0x0057, -2 },  // (First char = [0x0057, W], Second char = [0x002B, plus], Kerning dist = -2)
    { 0x0059, -3 },  // (First char = [0x0059, Y], Second char = [0x002B, plus], Kerning dist = -3)
    { 0x00C0, -1 },  // (First char = [0x00C0, Agrave], Second char = [0x002B, plus], Kerning dist = -1)
    { 0x00C1, -1 },  // (First char = [0x00C1, Aacute], Second char = [0x002B, plus], Kerning dist = -1)
    { 0x00C2, -1 },  // (First char = [0x00C2, Acircumflex], Second char = [0x002B, plus], Kerning dist = -1)
    { 0x00C3, -1 },  // (First char = [0x00C3, Atilde], Second char = [0x002B, plus], Kerning dist = -1)
    { 0x00C4, -1 },  // (First char = [0x00C4, Adieresis], Second char = [0x002B, plus], Kerning dist = -1)
    { 0x00C5, -1 },  // (First char = [0x00C5, Aring], Second char = [0x002B, plus], Kerning dist = -1)
    { 0x00DD, -3 },  // (First char = [0x00DD, Yacute], Second char = [0x002B, plus], Kerning dist = -3)
    { 0x002F, -2 },  // (First char = [0x002F, slash], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x0030, -1 },  // (First char = [0x0030, zero], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0037, -2 },  // (First char = [0x0037, seven], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x003F, -3 },  // (First char = [0x003F, question], Second char = [0x002C, comma], Kerning dist = -3)
    { 0x0040, -1 },  // (First char = [0x0040, at], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0044, -2 },  // (First char = [0x0044, D], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x0046, -2 },  // (First char = [0x0046, F], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x004F, -2 },  // (First char = [0x004F, O], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x0050, -3 },  // (First char = [0x0050, P], Second char = [0x002C, comma], Kerning dist = -3)
    { 0x0054, -3 },  // (First char = [0x0054, T], Second char = [0x002C, comma], Kerning dist = -3)
    { 0x0056, -3 },  // (First char = [0x0056, V], Second char = [0x002C, comma], Kerning dist = -3)
    { 0x0057, -2 },  // (First char = [0x0057, W], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x0059, -3 },  // (First char = [0x0059, Y], Second char = [0x002C, comma], Kerning dist = -3)
    { 0x005C,  2 },  // (First char = [0x005C, backslash], Second char = [0x002C, comma], Kerning dist = 2)
    { 0x0072, -1 },  // (First char = [0x0072, r], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0074,  2 },  // (First char = [0x0074, t], Second char = [0x002C, comma], Kerning dist = 2)
    { 0x0076, -2 },  // (First char = [0x0076, v], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0079, -2 },  // (First char = [0x0079, y], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x007D, -1 },  // (First char = [0x007D, braceright], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x00D0, -2 },  // (First char = [0x00D0, Eth], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x00D2, -2 },  // (First char = [0x00D2, Ograve], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x00D3, -2 },  // (First char = [0x00D3, Oacute], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x00D4, -2 },  // (First char = [0x00D4, Ocircumflex], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x00D5, -2 },  // (First char = [0x00D5, Otilde], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x00D6, -2 },  // (First char = [0x00D6, Odieresis], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x00DD, -3 },  // (First char = [0x00DD, Yacute], Second char = [0x002C, comma], Kerning dist = -3)
    { 0x00FD, -2 },  // (First char = [0x00FD, yacute], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x00FF, -2 },  // (First char = [0x00FF, ydieresis], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x002F, -3 },  // (First char = [0x002F, slash], Second char = [0x002D, hyphen], Kerning dist = -3)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x002D, hyphen], Kerning dist = -1)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x002D, hyphen], Kerning dist = -1)
    { 0x004B, -2 },  // (First char = [0x004B, K], Second char = [0x002D, hyphen], Kerning dist = -2)
    { 0x004C, -3 },  // (First char = [0x004C, L], Second char = [0x002D, hyphen], Kerning dist = -3)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x002D, hyphen], Kerning dist = -2)
    { 0x0056, -2 },  // (First char = [0x0056, V], Second char = [0x002D, hyphen], Kerning dist = -2)
    { 0x0057, -2 },  // (First char = [0x0057, W], Second char = [0x002D, hyphen], Kerning dist = -2)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x002D, hyphen], Kerning dist = -2)
    { 0x005C, -1 },  // (First char = [0x005C, backslash], Second char = [0x002D, hyphen], Kerning dist = -1)
    { 0x00C0, -1 },  // (First char = [0x00C0, Agrave], Second char = [0x002D, hyphen], Kerning dist = -1)
    { 0x00C1, -1 },  // (First char = [0x00C1, Aacute], Second char = [0x002D, hyphen], Kerning dist = -1)
    { 0x00C2, -1 },  // (First char = [0x00C2, Acircumflex], Second char = [0x002D, hyphen], Kerning dist = -1)
    { 0x00C3, -1 },  // (First char = [0x00C3, Atilde], Second char = [0x002D, hyphen], Kerning dist = -1)
    { 0x00C4, -1 },  // (First char = [0x00C4, Adieresis], Second char = [0x002D, hyphen], Kerning dist = -1)
    { 0x00C5, -1 },  // (First char = [0x00C5, Aring], Second char = [0x002D, hyphen], Kerning dist = -1)
    { 0x00DD, -2 },  // (First char = [0x00DD, Yacute], Second char = [0x002D, hyphen], Kerning dist = -2)
    { 0x002F, -5 },  // (First char = [0x002F, slash], Second char = [0x002E, period], Kerning dist = -5)
    { 0x0030, -2 },  // (First char = [0x0030, zero], Second char = [0x002E, period], Kerning dist = -2)
    { 0x0036, -2 },  // (First char = [0x0036, six], Second char = [0x002E, period], Kerning dist = -2)
    { 0x0037, -2 },  // (First char = [0x0037, seven], Second char = [0x002E, period], Kerning dist = -2)
    { 0x0039, -1 },  // (First char = [0x0039, nine], Second char = [0x002E, period], Kerning dist = -1)
    { 0x003E, -2 },  // (First char = [0x003E, greater], Second char = [0x002E, period], Kerning dist = -2)
    { 0x003F, -4 },  // (First char = [0x003F, question], Second char = [0x002E, period], Kerning dist = -4)
    { 0x0040, -1 },  // (First char = [0x0040, at], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0044, -1 },  // (First char = [0x0044, D], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0046, -2 },  // (First char = [0x0046, F], Second char = [0x002E, period], Kerning dist = -2)
    { 0x004A, -1 },  // (First char = [0x004A, J], Second char = [0x002E, period], Kerning dist = -1)
    { 0x004F, -1 },  // (First char = [0x004F, O], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0050, -3 },  // (First char = [0x0050, P], Second char = [0x002E, period], Kerning dist = -3)
    { 0x0054, -3 },  // (First char = [0x0054, T], Second char = [0x002E, period], Kerning dist = -3)
    { 0x0055, -1 },  // (First char = [0x0055, U], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0056, -3 },  // (First char = [0x0056, V], Second char = [0x002E, period], Kerning dist = -3)
    { 0x0057, -3 },  // (First char = [0x0057, W], Second char = [0x002E, period], Kerning dist = -3)
    { 0x0059, -3 },  // (First char = [0x0059, Y], Second char = [0x002E, period], Kerning dist = -3)
    { 0x0066, -1 },  // (First char = [0x0066, f], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0072, -2 },  // (First char = [0x0072, r], Second char = [0x002E, period], Kerning dist = -2)
    { 0x0076, -2 },  // (First char = [0x0076, v], Second char = [0x002E, period], Kerning dist = -2)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0079, -3 },  // (First char = [0x0079, y], Second char = [0x002E, period], Kerning dist = -3)
    { 0x007D, -2 },  // (First char = [0x007D, braceright], Second char = [0x002E, period], Kerning dist = -2)
    { 0x00D0, -1 },  // (First char = [0x00D0, Eth], Second char = [0x002E, period], Kerning dist = -1)
    { 0x00D2, -1 },  // (First char = [0x00D2, Ograve], Second char = [0x002E, period], Kerning dist = -1)
    { 0x00D3, -1 },  // (First char = [0x00D3, Oacute], Second char = [0x002E, period], Kerning dist = -1)
    { 0x00D4, -1 },  // (First char = [0x00D4, Ocircumflex], Second char = [0x002E, period], Kerning dist = -1)
    { 0x00D5, -1 },  // (First char = [0x00D5, Otilde], Second char = [0x002E, period], Kerning dist = -1)
    { 0x00D6, -1 },  // (First char = [0x00D6, Odieresis], Second char = [0x002E, period], Kerning dist = -1)
    { 0x00D8, -1 },  // (First char = [0x00D8, Oslash], Second char = [0x002E, period], Kerning dist = -1)
    { 0x00D9, -1 },  // (First char = [0x00D9, Ugrave], Second char = [0x002E, period], Kerning dist = -1)
    { 0x00DA, -1 },  // (First char = [0x00DA, Uacute], Second char = [0x002E, period], Kerning dist = -1)
    { 0x00DB, -1 },  // (First char = [0x00DB, Ucircumflex], Second char = [0x002E, period], Kerning dist = -1)
    { 0x00DC, -1 },  // (First char = [0x00DC, Udieresis], Second char = [0x002E, period], Kerning dist = -1)
    { 0x00DD, -3 },  // (First char = [0x00DD, Yacute], Second char = [0x002E, period], Kerning dist = -3)
    { 0x00DE, -2 },  // (First char = [0x00DE, Thorn], Second char = [0x002E, period], Kerning dist = -2)
    { 0x00FD, -3 },  // (First char = [0x00FD, yacute], Second char = [0x002E, period], Kerning dist = -3)
    { 0x00FF, -3 },  // (First char = [0x00FF, ydieresis], Second char = [0x002E, period], Kerning dist = -3)
    { 0x002A, -4 },  // (First char = [0x002A, asterisk], Second char = [0x002F, slash], Kerning dist = -4)
    { 0x002B, -2 },  // (First char = [0x002B, plus], Second char = [0x002F, slash], Kerning dist = -2)
    { 0x002D, -2 },  // (First char = [0x002D, hyphen], Second char = [0x002F, slash], Kerning dist = -2)
    { 0x002F, -5 },  // (First char = [0x002F, slash], Second char = [0x002F, slash], Kerning dist = -5)
    { 0x0030, -2 },  // (First char = [0x0030, zero], Second char = [0x002F, slash], Kerning dist = -2)
    { 0x0033, -2 },  // (First char = [0x0033, three], Second char = [0x002F, slash], Kerning dist = -2)
    { 0x0035, -1 },  // (First char = [0x0035, five], Second char = [0x002F, slash], Kerning dist = -1)
    { 0x0036, -2 },  // (First char = [0x0036, six], Second char = [0x002F, slash], Kerning dist = -2)
    { 0x0037, -3 },  // (First char = [0x0037, seven], Second char = [0x002F, slash], Kerning dist = -3)
    { 0x0038, -1 },  // (First char = [0x0038, eight], Second char = [0x002F, slash], Kerning dist = -1)
    { 0x0039, -2 },  // (First char = [0x0039, nine], Second char = [0x002F, slash], Kerning dist = -2)
    { 0x003F, -3 },  // (First char = [0x003F, question], Second char = [0x002F, slash], Kerning dist = -3)
    { 0x0040, -2 },  // (First char = [0x0040, at], Second char = [0x002F, slash], Kerning dist = -2)
    { 0x0044, -2 },  // (First char = [0x0044, D], Second char = [0x002F, slash], Kerning dist = -2)
    { 0x004F, -2 },  // (First char = [0x004F, O], Second char = [0x002F, slash], Kerning dist = -2)
    { 0x0050, -3 },  // (First char = [0x0050, P], Second char = [0x002F, slash], Kerning dist = -3)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x002F, slash], Kerning dist = -2)
    { 0x0055, -1 },  // (First char = [0x0055, U], Second char = [0x002F, slash], Kerning dist = -1)
    { 0x0056, -3 },  // (First char = [0x0056, V], Second char = [0x002F, slash], Kerning dist = -3)
    { 0x0057, -2 },  // (First char = [0x0057, W], Second char = [0x002F, slash], Kerning dist = -2)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x002F, slash], Kerning dist = -2)
    { 0x0079, -2 },  // (First char = [0x0079, y], Second char = [0x002F, slash], Kerning dist = -2)
    { 0x00AD, -2 },  // (First char = [0x00AD, uni00AD], Second char = [0x002F, slash], Kerning dist = -2)
    { 0x00D0, -2 },  // (First char = [0x00D0, Eth], Second char = [0x002F, slash], Kerning dist = -2)
    { 0x00D2, -2 },  // (First char = [0x00D2, Ograve], Second char = [0x002F, slash], Kerning dist = -2)
    { 0x00D3, -2 },  // (First char = [0x00D3, Oacute], Second char = [0x002F, slash], Kerning dist = -2)
    { 0x00D4, -2 },  // (First char = [0x00D4, Ocircumflex], Second char = [0x002F, slash], Kerning dist = -2)
    { 0x00D5, -2 },  // (First char = [0x00D5, Otilde], Second char = [0x002F, slash], Kerning dist = -2)
    { 0x00D6, -2 },  // (First char = [0x00D6, Odieresis], Second char = [0x002F, slash], Kerning dist = -2)
    { 0x00D8, -2 },  // (First char = [0x00D8, Oslash], Second char = [0x002F, slash], Kerning dist = -2)
    { 0x00D9, -1 },  // (First char = [0x00D9, Ugrave], Second char = [0x002F, slash], Kerning dist = -1)
    { 0x00DA, -1 },  // (First char = [0x00DA, Uacute], Second char = [0x002F, slash], Kerning dist = -1)
    { 0x00DB, -1 },  // (First char = [0x00DB, Ucircumflex], Second char = [0x002F, slash], Kerning dist = -1)
    { 0x00DC, -1 },  // (First char = [0x00DC, Udieresis], Second char = [0x002F, slash], Kerning dist = -1)
    { 0x00DD, -2 },  // (First char = [0x00DD, Yacute], Second char = [0x002F, slash], Kerning dist = -2)
    { 0x00FD, -2 },  // (First char = [0x00FD, yacute], Second char = [0x002F, slash], Kerning dist = -2)
    { 0x00FF, -2 },  // (First char = [0x00FF, ydieresis], Second char = [0x002F, slash], Kerning dist = -2)
    { 0x0028, -2 },  // (First char = [0x0028, parenleft], Second char = [0x0030, zero], Kerning dist = -2)
    { 0x002E, -2 },  // (First char = [0x002E, period], Second char = [0x0030, zero], Kerning dist = -2)
    { 0x002F, -1 },  // (First char = [0x002F, slash], Second char = [0x0030, zero], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x0030, zero], Kerning dist = -1)
    { 0x0041, -2 },  // (First char = [0x0041, A], Second char = [0x0030, zero], Kerning dist = -2)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x0030, zero], Kerning dist = -1)
    { 0x004C, -2 },  // (First char = [0x004C, L], Second char = [0x0030, zero], Kerning dist = -2)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0030, zero], Kerning dist = -1)
    { 0x0056, -2 },  // (First char = [0x0056, V], Second char = [0x0030, zero], Kerning dist = -2)
    { 0x0057, -2 },  // (First char = [0x0057, W], Second char = [0x0030, zero], Kerning dist = -2)
    { 0x0058, -2 },  // (First char = [0x0058, X], Second char = [0x0030, zero], Kerning dist = -2)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x0030, zero], Kerning dist = -2)
    { 0x005C, -1 },  // (First char = [0x005C, backslash], Second char = [0x0030, zero], Kerning dist = -1)
    { 0x005F, -2 },  // (First char = [0x005F, underscore], Second char = [0x0030, zero], Kerning dist = -2)
    { 0x00C0, -2 },  // (First char = [0x00C0, Agrave], Second char = [0x0030, zero], Kerning dist = -2)
    { 0x00C1, -2 },  // (First char = [0x00C1, Aacute], Second char = [0x0030, zero], Kerning dist = -2)
    { 0x00C2, -2 },  // (First char = [0x00C2, Acircumflex], Second char = [0x0030, zero], Kerning dist = -2)
    { 0x00C3, -2 },  // (First char = [0x00C3, Atilde], Second char = [0x0030, zero], Kerning dist = -2)
    { 0x00C4, -2 },  // (First char = [0x00C4, Adieresis], Second char = [0x0030, zero], Kerning dist = -2)
    { 0x00C5, -2 },  // (First char = [0x00C5, Aring], Second char = [0x0030, zero], Kerning dist = -2)
    { 0x00DD, -2 },  // (First char = [0x00DD, Yacute], Second char = [0x0030, zero], Kerning dist = -2)
    { 0x002E, -1 },  // (First char = [0x002E, period], Second char = [0x0031, one], Kerning dist = -1)
    { 0x0033, -1 },  // (First char = [0x0033, three], Second char = [0x0031, one], Kerning dist = -1)
    { 0x0038, -1 },  // (First char = [0x0038, eight], Second char = [0x0031, one], Kerning dist = -1)
    { 0x0039, -1 },  // (First char = [0x0039, nine], Second char = [0x0031, one], Kerning dist = -1)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0031, one], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0031, one], Kerning dist = -1)
    { 0x005F, -2 },  // (First char = [0x005F, underscore], Second char = [0x0031, one], Kerning dist = -2)
    { 0x0062, -2 },  // (First char = [0x0062, b], Second char = [0x0031, one], Kerning dist = -2)
    { 0x006F, -2 },  // (First char = [0x006F, o], Second char = [0x0031, one], Kerning dist = -2)
    { 0x0070, -2 },  // (First char = [0x0070, p], Second char = [0x0031, one], Kerning dist = -2)
    { 0x0073, -1 },  // (First char = [0x0073, s], Second char = [0x0031, one], Kerning dist = -1)
    { 0x00C0, -1 },  // (First char = [0x00C0, Agrave], Second char = [0x0031, one], Kerning dist = -1)
    { 0x00C1, -1 },  // (First char = [0x00C1, Aacute], Second char = [0x0031, one], Kerning dist = -1)
    { 0x00C2, -1 },  // (First char = [0x00C2, Acircumflex], Second char = [0x0031, one], Kerning dist = -1)
    { 0x00C3, -1 },  // (First char = [0x00C3, Atilde], Second char = [0x0031, one], Kerning dist = -1)
    { 0x00C4, -1 },  // (First char = [0x00C4, Adieresis], Second char = [0x0031, one], Kerning dist = -1)
    { 0x00C5, -1 },  // (First char = [0x00C5, Aring], Second char = [0x0031, one], Kerning dist = -1)
    { 0x00F2, -2 },  // (First char = [0x00F2, ograve], Second char = [0x0031, one], Kerning dist = -2)
    { 0x00F3, -2 },  // (First char = [0x00F3, oacute], Second char = [0x0031, one], Kerning dist = -2)
    { 0x00F4, -2 },  // (First char = [0x00F4, ocircumflex], Second char = [0x0031, one], Kerning dist = -2)
    { 0x00F5, -2 },  // (First char = [0x00F5, otilde], Second char = [0x0031, one], Kerning dist = -2)
    { 0x00F6, -2 },  // (First char = [0x00F6, odieresis], Second char = [0x0031, one], Kerning dist = -2)
    { 0x00F7, -1 },  // (First char = [0x00F7, divide], Second char = [0x0031, one], Kerning dist = -1)
    { 0x00FE, -2 },  // (First char = [0x00FE, thorn], Second char = [0x0031, one], Kerning dist = -2)
    { 0x0035, -1 },  // (First char = [0x0035, five], Second char = [0x0032, two], Kerning dist = -1)
    { 0x0036, -1 },  // (First char = [0x0036, six], Second char = [0x0032, two], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x0032, two], Kerning dist = -1)
    { 0x0038, -1 },  // (First char = [0x0038, eight], Second char = [0x0032, two], Kerning dist = -1)
    { 0x0039, -1 },  // (First char = [0x0039, nine], Second char = [0x0032, two], Kerning dist = -1)
    { 0x0040, -1 },  // (First char = [0x0040, at], Second char = [0x0032, two], Kerning dist = -1)
    { 0x0044, -1 },  // (First char = [0x0044, D], Second char = [0x0032, two], Kerning dist = -1)
    { 0x004F, -1 },  // (First char = [0x004F, O], Second char = [0x0032, two], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0032, two], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0032, two], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0032, two], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x0032, two], Kerning dist = -1)
    { 0x0074,  1 },  // (First char = [0x0074, t], Second char = [0x0032, two], Kerning dist = 1)
    { 0x00D0, -1 },  // (First char = [0x00D0, Eth], Second char = [0x0032, two], Kerning dist = -1)
    { 0x00D2, -1 },  // (First char = [0x00D2, Ograve], Second char = [0x0032, two], Kerning dist = -1)
    { 0x00D3, -1 },  // (First char = [0x00D3, Oacute], Second char = [0x0032, two], Kerning dist = -1)
    { 0x00D4, -1 },  // (First char = [0x00D4, Ocircumflex], Second char = [0x0032, two], Kerning dist = -1)
    { 0x00D5, -1 },  // (First char = [0x00D5, Otilde], Second char = [0x0032, two], Kerning dist = -1)
    { 0x00D6, -1 },  // (First char = [0x00D6, Odieresis], Second char = [0x0032, two], Kerning dist = -1)
    { 0x00DD, -1 },  // (First char = [0x00DD, Yacute], Second char = [0x0032, two], Kerning dist = -1)
    { 0x002F, -2 },  // (First char = [0x002F, slash], Second char = [0x0033, three], Kerning dist = -2)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x0033, three], Kerning dist = -1)
    { 0x0039, -1 },  // (First char = [0x0039, nine], Second char = [0x0033, three], Kerning dist = -1)
    { 0x0040, -1 },  // (First char = [0x0040, at], Second char = [0x0033, three], Kerning dist = -1)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0033, three], Kerning dist = -1)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x0033, three], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0033, three], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0033, three], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0033, three], Kerning dist = -1)
    { 0x0058, -1 },  // (First char = [0x0058, X], Second char = [0x0033, three], Kerning dist = -1)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x0033, three], Kerning dist = -2)
    { 0x00C0, -1 },  // (First char = [0x00C0, Agrave], Second char = [0x0033, three], Kerning dist = -1)
    { 0x00C1, -1 },  // (First char = [0x00C1, Aacute], Second char = [0x0033, three], Kerning dist = -1)
    { 0x00C2, -1 },  // (First char = [0x00C2, Acircumflex], Second char = [0x0033, three], Kerning dist = -1)
    { 0x00C3, -1 },  // (First char = [0x00C3, Atilde], Second char = [0x0033, three], Kerning dist = -1)
    { 0x00C4, -1 },  // (First char = [0x00C4, Adieresis], Second char = [0x0033, three], Kerning dist = -1)
    { 0x00C5, -1 },  // (First char = [0x00C5, Aring], Second char = [0x0033, three], Kerning dist = -1)
    { 0x00DD, -2 },  // (First char = [0x00DD, Yacute], Second char = [0x0033, three], Kerning dist = -2)
    { 0x0022, -2 },  // (First char = [0x0022, quotedbl], Second char = [0x0034, four], Kerning dist = -2)
    { 0x0027, -2 },  // (First char = [0x0027, quotesingle], Second char = [0x0034, four], Kerning dist = -2)
    { 0x0028, -2 },  // (First char = [0x0028, parenleft], Second char = [0x0034, four], Kerning dist = -2)
    { 0x002A, -4 },  // (First char = [0x002A, asterisk], Second char = [0x0034, four], Kerning dist = -4)
    { 0x002F, -3 },  // (First char = [0x002F, slash], Second char = [0x0034, four], Kerning dist = -3)
    { 0x0032, -1 },  // (First char = [0x0032, two], Second char = [0x0034, four], Kerning dist = -1)
    { 0x0037, -2 },  // (First char = [0x0037, seven], Second char = [0x0034, four], Kerning dist = -2)
    { 0x0040, -1 },  // (First char = [0x0040, at], Second char = [0x0034, four], Kerning dist = -1)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0034, four], Kerning dist = -1)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x0034, four], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0034, four], Kerning dist = -1)
    { 0x0050, -2 },  // (First char = [0x0050, P], Second char = [0x0034, four], Kerning dist = -2)
    { 0x0052, -1 },  // (First char = [0x0052, R], Second char = [0x0034, four], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0034, four], Kerning dist = -2)
    { 0x0056, -3 },  // (First char = [0x0056, V], Second char = [0x0034, four], Kerning dist = -3)
    { 0x0057, -2 },  // (First char = [0x0057, W], Second char = [0x0034, four], Kerning dist = -2)
    { 0x0058, -2 },  // (First char = [0x0058, X], Second char = [0x0034, four], Kerning dist = -2)
    { 0x0059, -3 },  // (First char = [0x0059, Y], Second char = [0x0034, four], Kerning dist = -3)
    { 0x005A, -1 },  // (First char = [0x005A, Z], Second char = [0x0034, four], Kerning dist = -1)
    { 0x005F, -2 },  // (First char = [0x005F, underscore], Second char = [0x0034, four], Kerning dist = -2)
    { 0x0066, -1 },  // (First char = [0x0066, f], Second char = [0x0034, four], Kerning dist = -1)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x0034, four], Kerning dist = -1)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x0034, four], Kerning dist = -1)
    { 0x0079, -1 },  // (First char = [0x0079, y], Second char = [0x0034, four], Kerning dist = -1)
    { 0x007A, -1 },  // (First char = [0x007A, z], Second char = [0x0034, four], Kerning dist = -1)
    { 0x00C0, -1 },  // (First char = [0x00C0, Agrave], Second char = [0x0034, four], Kerning dist = -1)
    { 0x00C1, -1 },  // (First char = [0x00C1, Aacute], Second char = [0x0034, four], Kerning dist = -1)
    { 0x00C2, -1 },  // (First char = [0x00C2, Acircumflex], Second char = [0x0034, four], Kerning dist = -1)
    { 0x00C3, -1 },  // (First char = [0x00C3, Atilde], Second char = [0x0034, four], Kerning dist = -1)
    { 0x00C4, -1 },  // (First char = [0x00C4, Adieresis], Second char = [0x0034, four], Kerning dist = -1)
    { 0x00C5, -1 },  // (First char = [0x00C5, Aring], Second char = [0x0034, four], Kerning dist = -1)
    { 0x00DD, -3 },  // (First char = [0x00DD, Yacute], Second char = [0x0034, four], Kerning dist = -3)
    { 0x00FD, -1 },  // (First char = [0x00FD, yacute], Second char = [0x0034, four], Kerning dist = -1)
    { 0x00FF, -1 },  // (First char = [0x00FF, ydieresis], Second char = [0x0034, four], Kerning dist = -1)
    { 0x0022, -1 },  // (First char = [0x0022, quotedbl], Second char = [0x0035, five], Kerning dist = -1)
    { 0x0027, -1 },  // (First char = [0x0027, quotesingle], Second char = [0x0035, five], Kerning dist = -1)
    { 0x002A, -1 },  // (First char = [0x002A, asterisk], Second char = [0x0035, five], Kerning dist = -1)
    { 0x002F, -1 },  // (First char = [0x002F, slash], Second char = [0x0035, five], Kerning dist = -1)
    { 0x0036, -1 },  // (First char = [0x0036, six], Second char = [0x0035, five], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x0035, five], Kerning dist = -1)
    { 0x0041, -2 },  // (First char = [0x0041, A], Second char = [0x0035, five], Kerning dist = -2)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0035, five], Kerning dist = -1)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x0035, five], Kerning dist = -1)
    { 0x0052, -1 },  // (First char = [0x0052, R], Second char = [0x0035, five], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0035, five], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0035, five], Kerning dist = -1)
    { 0x0058, -2 },  // (First char = [0x0058, X], Second char = [0x0035, five], Kerning dist = -2)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x0035, five], Kerning dist = -2)
    { 0x005F, -2 },  // (First char = [0x005F, underscore], Second char = [0x0035, five], Kerning dist = -2)
    { 0x00C0, -2 },  // (First char = [0x00C0, Agrave], Second char = [0x0035, five], Kerning dist = -2)
    { 0x00C1, -2 },  // (First char = [0x00C1, Aacute], Second char = [0x0035, five], Kerning dist = -2)
    { 0x00C2, -2 },  // (First char = [0x00C2, Acircumflex], Second char = [0x0035, five], Kerning dist = -2)
    { 0x00C3, -2 },  // (First char = [0x00C3, Atilde], Second char = [0x0035, five], Kerning dist = -2)
    { 0x00C4, -2 },  // (First char = [0x00C4, Adieresis], Second char = [0x0035, five], Kerning dist = -2)
    { 0x00C5, -2 },  // (First char = [0x00C5, Aring], Second char = [0x0035, five], Kerning dist = -2)
    { 0x00DD, -2 },  // (First char = [0x00DD, Yacute], Second char = [0x0035, five], Kerning dist = -2)
    { 0x0028, -1 },  // (First char = [0x0028, parenleft], Second char = [0x0036, six], Kerning dist = -1)
    { 0x002A, -1 },  // (First char = [0x002A, asterisk], Second char = [0x0036, six], Kerning dist = -1)
    { 0x002E, -1 },  // (First char = [0x002E, period], Second char = [0x0036, six], Kerning dist = -1)
    { 0x002F, -1 },  // (First char = [0x002F, slash], Second char = [0x0036, six], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x0036, six], Kerning dist = -1)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0036, six], Kerning dist = -1)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x0036, six], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0036, six], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0036, six], Kerning dist = -1)
    { 0x0057, -2 },  // (First char = [0x0057, W], Second char = [0x0036, six], Kerning dist = -2)
    { 0x0058, -2 },  // (First char = [0x0058, X], Second char = [0x0036, six], Kerning dist = -2)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x0036, six], Kerning dist = -2)
    { 0x005C, -1 },  // (First char = [0x005C, backslash], Second char = [0x0036, six], Kerning dist = -1)
    { 0x005F, -3 },  // (First char = [0x005F, underscore], Second char = [0x0036, six], Kerning dist = -3)
    { 0x00BF, -2 },  // (First char = [0x00BF, questiondown], Second char = [0x0036, six], Kerning dist = -2)
    { 0x00C0, -1 },  // (First char = [0x00C0, Agrave], Second char = [0x0036, six], Kerning dist = -1)
    { 0x00C1, -1 },  // (First char = [0x00C1, Aacute], Second char = [0x0036, six], Kerning dist = -1)
    { 0x00C2, -1 },  // (First char = [0x00C2, Acircumflex], Second char = [0x0036, six], Kerning dist = -1)
    { 0x00C3, -1 },  // (First char = [0x00C3, Atilde], Second char = [0x0036, six], Kerning dist = -1)
    { 0x00C4, -1 },  // (First char = [0x00C4, Adieresis], Second char = [0x0036, six], Kerning dist = -1)
    { 0x00C5, -1 },  // (First char = [0x00C5, Aring], Second char = [0x0036, six], Kerning dist = -1)
    { 0x00DD, -2 },  // (First char = [0x00DD, Yacute], Second char = [0x0036, six], Kerning dist = -2)
    { 0x0022,  1 },  // (First char = [0x0022, quotedbl], Second char = [0x0037, seven], Kerning dist = 1)
    { 0x0026, -1 },  // (First char = [0x0026, ampersand], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x0027,  1 },  // (First char = [0x0027, quotesingle], Second char = [0x0037, seven], Kerning dist = 1)
    { 0x002B, -2 },  // (First char = [0x002B, plus], Second char = [0x0037, seven], Kerning dist = -2)
    { 0x002D, -2 },  // (First char = [0x002D, hyphen], Second char = [0x0037, seven], Kerning dist = -2)
    { 0x002E, -1 },  // (First char = [0x002E, period], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x0030, -1 },  // (First char = [0x0030, zero], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x0032, -1 },  // (First char = [0x0032, two], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x0033, -1 },  // (First char = [0x0033, three], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x0035, -1 },  // (First char = [0x0035, five], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x0036, -1 },  // (First char = [0x0036, six], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x0038, -1 },  // (First char = [0x0038, eight], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x0039, -1 },  // (First char = [0x0039, nine], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x003E, -2 },  // (First char = [0x003E, greater], Second char = [0x0037, seven], Kerning dist = -2)
    { 0x0040, -3 },  // (First char = [0x0040, at], Second char = [0x0037, seven], Kerning dist = -3)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x0044, -1 },  // (First char = [0x0044, D], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x004C, -2 },  // (First char = [0x004C, L], Second char = [0x0037, seven], Kerning dist = -2)
    { 0x004F, -1 },  // (First char = [0x004F, O], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x0056,  1 },  // (First char = [0x0056, V], Second char = [0x0037, seven], Kerning dist = 1)
    { 0x005C, -1 },  // (First char = [0x005C, backslash], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x005F, -1 },  // (First char = [0x005F, underscore], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x0061, -1 },  // (First char = [0x0061, a], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x0062, -3 },  // (First char = [0x0062, b], Second char = [0x0037, seven], Kerning dist = -3)
    { 0x0063, -1 },  // (First char = [0x0063, c], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x0065, -2 },  // (First char = [0x0065, e], Second char = [0x0037, seven], Kerning dist = -2)
    { 0x006F, -3 },  // (First char = [0x006F, o], Second char = [0x0037, seven], Kerning dist = -3)
    { 0x0070, -3 },  // (First char = [0x0070, p], Second char = [0x0037, seven], Kerning dist = -3)
    { 0x0073, -2 },  // (First char = [0x0073, s], Second char = [0x0037, seven], Kerning dist = -2)
    { 0x00A5,  1 },  // (First char = [0x00A5, yen], Second char = [0x0037, seven], Kerning dist = 1)
    { 0x00AB, -2 },  // (First char = [0x00AB, guillemotleft], Second char = [0x0037, seven], Kerning dist = -2)
    { 0x00AD, -2 },  // (First char = [0x00AD, uni00AD], Second char = [0x0037, seven], Kerning dist = -2)
    { 0x00BF, -1 },  // (First char = [0x00BF, questiondown], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x00C0, -1 },  // (First char = [0x00C0, Agrave], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x00C1, -1 },  // (First char = [0x00C1, Aacute], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x00C2, -1 },  // (First char = [0x00C2, Acircumflex], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x00C3, -1 },  // (First char = [0x00C3, Atilde], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x00C4, -1 },  // (First char = [0x00C4, Adieresis], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x00C5, -1 },  // (First char = [0x00C5, Aring], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x00D0, -1 },  // (First char = [0x00D0, Eth], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x00D2, -1 },  // (First char = [0x00D2, Ograve], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x00D3, -1 },  // (First char = [0x00D3, Oacute], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x00D4, -1 },  // (First char = [0x00D4, Ocircumflex], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x00D5, -1 },  // (First char = [0x00D5, Otilde], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x00D6, -1 },  // (First char = [0x00D6, Odieresis], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x00D7, -1 },  // (First char = [0x00D7, multiply], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x00DF, -2 },  // (First char = [0x00DF, germandbls], Second char = [0x0037, seven], Kerning dist = -2)
    { 0x00E0, -1 },  // (First char = [0x00E0, agrave], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x00E1, -1 },  // (First char = [0x00E1, aacute], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x00E2, -1 },  // (First char = [0x00E2, acircumflex], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x00E3, -1 },  // (First char = [0x00E3, atilde], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x00E4, -1 },  // (First char = [0x00E4, adieresis], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x00E5, -1 },  // (First char = [0x00E5, aring], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x00E6, -2 },  // (First char = [0x00E6, ae], Second char = [0x0037, seven], Kerning dist = -2)
    { 0x00E7, -1 },  // (First char = [0x00E7, ccedilla], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x00E8, -2 },  // (First char = [0x00E8, egrave], Second char = [0x0037, seven], Kerning dist = -2)
    { 0x00E9, -2 },  // (First char = [0x00E9, eacute], Second char = [0x0037, seven], Kerning dist = -2)
    { 0x00EA, -2 },  // (First char = [0x00EA, ecircumflex], Second char = [0x0037, seven], Kerning dist = -2)
    { 0x00EB, -2 },  // (First char = [0x00EB, edieresis], Second char = [0x0037, seven], Kerning dist = -2)
    { 0x00F2, -3 },  // (First char = [0x00F2, ograve], Second char = [0x0037, seven], Kerning dist = -3)
    { 0x00F3, -3 },  // (First char = [0x00F3, oacute], Second char = [0x0037, seven], Kerning dist = -3)
    { 0x00F4, -3 },  // (First char = [0x00F4, ocircumflex], Second char = [0x0037, seven], Kerning dist = -3)
    { 0x00F5, -3 },  // (First char = [0x00F5, otilde], Second char = [0x0037, seven], Kerning dist = -3)
    { 0x00F6, -3 },  // (First char = [0x00F6, odieresis], Second char = [0x0037, seven], Kerning dist = -3)
    { 0x00F7, -1 },  // (First char = [0x00F7, divide], Second char = [0x0037, seven], Kerning dist = -1)
    { 0x00FE, -3 },  // (First char = [0x00FE, thorn], Second char = [0x0037, seven], Kerning dist = -3)
    { 0x0028, -2 },  // (First char = [0x0028, parenleft], Second char = [0x0038, eight], Kerning dist = -2)
    { 0x002A, -1 },  // (First char = [0x002A, asterisk], Second char = [0x0038, eight], Kerning dist = -1)
    { 0x002F, -1 },  // (First char = [0x002F, slash], Second char = [0x0038, eight], Kerning dist = -1)
    { 0x0032, -1 },  // (First char = [0x0032, two], Second char = [0x0038, eight], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x0038, eight], Kerning dist = -1)
    { 0x0039, -1 },  // (First char = [0x0039, nine], Second char = [0x0038, eight], Kerning dist = -1)
    { 0x0040, -1 },  // (First char = [0x0040, at], Second char = [0x0038, eight], Kerning dist = -1)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0038, eight], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0038, eight], Kerning dist = -1)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x0038, eight], Kerning dist = -1)
    { 0x0052, -1 },  // (First char = [0x0052, R], Second char = [0x0038, eight], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0038, eight], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0038, eight], Kerning dist = -1)
    { 0x0057, -2 },  // (First char = [0x0057, W], Second char = [0x0038, eight], Kerning dist = -2)
    { 0x0058, -2 },  // (First char = [0x0058, X], Second char = [0x0038, eight], Kerning dist = -2)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x0038, eight], Kerning dist = -2)
    { 0x005C, -2 },  // (First char = [0x005C, backslash], Second char = [0x0038, eight], Kerning dist = -2)
    { 0x005F, -2 },  // (First char = [0x005F, underscore], Second char = [0x0038, eight], Kerning dist = -2)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x0038, eight], Kerning dist = -1)
    { 0x00C0, -1 },  // (First char = [0x00C0, Agrave], Second char = [0x0038, eight], Kerning dist = -1)
    { 0x00C1, -1 },  // (First char = [0x00C1, Aacute], Second char = [0x0038, eight], Kerning dist = -1)
    { 0x00C2, -1 },  // (First char = [0x00C2, Acircumflex], Second char = [0x0038, eight], Kerning dist = -1)
    { 0x00C3, -1 },  // (First char = [0x00C3, Atilde], Second char = [0x0038, eight], Kerning dist = -1)
    { 0x00C4, -1 },  // (First char = [0x00C4, Adieresis], Second char = [0x0038, eight], Kerning dist = -1)
    { 0x00C5, -1 },  // (First char = [0x00C5, Aring], Second char = [0x0038, eight], Kerning dist = -1)
    { 0x00DD, -2 },  // (First char = [0x00DD, Yacute], Second char = [0x0038, eight], Kerning dist = -2)
    { 0x0026, -1 },  // (First char = [0x0026, ampersand], Second char = [0x0039, nine], Kerning dist = -1)
    { 0x0028, -1 },  // (First char = [0x0028, parenleft], Second char = [0x0039, nine], Kerning dist = -1)
    { 0x002E, -1 },  // (First char = [0x002E, period], Second char = [0x0039, nine], Kerning dist = -1)
    { 0x002F, -2 },  // (First char = [0x002F, slash], Second char = [0x0039, nine], Kerning dist = -2)
    { 0x0033, -1 },  // (First char = [0x0033, three], Second char = [0x0039, nine], Kerning dist = -1)
    { 0x0035, -1 },  // (First char = [0x0035, five], Second char = [0x0039, nine], Kerning dist = -1)
    { 0x0036, -1 },  // (First char = [0x0036, six], Second char = [0x0039, nine], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x0039, nine], Kerning dist = -1)
    { 0x0038, -1 },  // (First char = [0x0038, eight], Second char = [0x0039, nine], Kerning dist = -1)
    { 0x0041, -2 },  // (First char = [0x0041, A], Second char = [0x0039, nine], Kerning dist = -2)
    { 0x0042, -1 },  // (First char = [0x0042, B], Second char = [0x0039, nine], Kerning dist = -1)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x0039, nine], Kerning dist = -1)
    { 0x004C, -2 },  // (First char = [0x004C, L], Second char = [0x0039, nine], Kerning dist = -2)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0039, nine], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0039, nine], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0039, nine], Kerning dist = -1)
    { 0x0058, -2 },  // (First char = [0x0058, X], Second char = [0x0039, nine], Kerning dist = -2)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x0039, nine], Kerning dist = -2)
    { 0x005C, -1 },  // (First char = [0x005C, backslash], Second char = [0x0039, nine], Kerning dist = -1)
    { 0x005F, -3 },  // (First char = [0x005F, underscore], Second char = [0x0039, nine], Kerning dist = -3)
    { 0x0062, -1 },  // (First char = [0x0062, b], Second char = [0x0039, nine], Kerning dist = -1)
    { 0x006F, -1 },  // (First char = [0x006F, o], Second char = [0x0039, nine], Kerning dist = -1)
    { 0x0070, -1 },  // (First char = [0x0070, p], Second char = [0x0039, nine], Kerning dist = -1)
    { 0x0073, -1 },  // (First char = [0x0073, s], Second char = [0x0039, nine], Kerning dist = -1)
    { 0x00BF, -1 },  // (First char = [0x00BF, questiondown], Second char = [0x0039, nine], Kerning dist = -1)
    { 0x00C0, -2 },  // (First char = [0x00C0, Agrave], Second char = [0x0039, nine], Kerning dist = -2)
    { 0x00C1, -2 },  // (First char = [0x00C1, Aacute], Second char = [0x0039, nine], Kerning dist = -2)
    { 0x00C2, -2 },  // (First char = [0x00C2, Acircumflex], Second char = [0x0039, nine], Kerning dist = -2)
    { 0x00C3, -2 },  // (First char = [0x00C3, Atilde], Second char = [0x0039, nine], Kerning dist = -2)
    { 0x00C4, -2 },  // (First char = [0x00C4, Adieresis], Second char = [0x0039, nine], Kerning dist = -2)
    { 0x00C5, -2 },  // (First char = [0x00C5, Aring], Second char = [0x0039, nine], Kerning dist = -2)
    { 0x00DD, -2 },  // (First char = [0x00DD, Yacute], Second char = [0x0039, nine], Kerning dist = -2)
    { 0x00F2, -1 },  // (First char = [0x00F2, ograve], Second char = [0x0039, nine], Kerning dist = -1)
    { 0x00F3, -1 },  // (First char = [0x00F3, oacute], Second char = [0x0039, nine], Kerning dist = -1)
    { 0x00F4, -1 },  // (First char = [0x00F4, ocircumflex], Second char = [0x0039, nine], Kerning dist = -1)
    { 0x00F5, -1 },  // (First char = [0x00F5, otilde], Second char = [0x0039, nine], Kerning dist = -1)
    { 0x00F6, -1 },  // (First char = [0x00F6, odieresis], Second char = [0x0039, nine], Kerning dist = -1)
    { 0x00FE, -1 },  // (First char = [0x00FE, thorn], Second char = [0x0039, nine], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x003A, colon], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x003A, colon], Kerning dist = -1)
    { 0x0072,  1 },  // (First char = [0x0072, r], Second char = [0x003A, colon], Kerning dist = 1)
    { 0x00DD, -1 },  // (First char = [0x00DD, Yacute], Second char = [0x003A, colon], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x003B, semicolon], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x003B, semicolon], Kerning dist = -2)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x003B, semicolon], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x003B, semicolon], Kerning dist = -1)
    { 0x00DD, -1 },  // (First char = [0x00DD, Yacute], Second char = [0x003B, semicolon], Kerning dist = -1)
    { 0x002E, -2 },  // (First char = [0x002E, period], Second char = [0x003C, less], Kerning dist = -2)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x003C, less], Kerning dist = -1)
    { 0x0040, -1 },  // (First char = [0x0040, at], Second char = [0x003C, less], Kerning dist = -1)
    { 0x0040, -2 },  // (First char = [0x0040, at], Second char = [0x003E, greater], Kerning dist = -2)
    { 0x0026, -2 },  // (First char = [0x0026, ampersand], Second char = [0x003F, question], Kerning dist = -2)
    { 0x002E, -2 },  // (First char = [0x002E, period], Second char = [0x003F, question], Kerning dist = -2)
    { 0x0040, -1 },  // (First char = [0x0040, at], Second char = [0x003F, question], Kerning dist = -1)
    { 0x0041, -2 },  // (First char = [0x0041, A], Second char = [0x003F, question], Kerning dist = -2)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x003F, question], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x003F, question], Kerning dist = -1)
    { 0x0054,  1 },  // (First char = [0x0054, T], Second char = [0x003F, question], Kerning dist = 1)
    { 0x0058, -1 },  // (First char = [0x0058, X], Second char = [0x003F, question], Kerning dist = -1)
    { 0x005C, -1 },  // (First char = [0x005C, backslash], Second char = [0x003F, question], Kerning dist = -1)
    { 0x005F, -2 },  // (First char = [0x005F, underscore], Second char = [0x003F, question], Kerning dist = -2)
    { 0x0062, -1 },  // (First char = [0x0062, b], Second char = [0x003F, question], Kerning dist = -1)
    { 0x0063, -1 },  // (First char = [0x0063, c], Second char = [0x003F, question], Kerning dist = -1)
    { 0x0065, -1 },  // (First char = [0x0065, e], Second char = [0x003F, question], Kerning dist = -1)
    { 0x006F, -1 },  // (First char = [0x006F, o], Second char = [0x003F, question], Kerning dist = -1)
    { 0x0070, -1 },  // (First char = [0x0070, p], Second char = [0x003F, question], Kerning dist = -1)
    { 0x0073, -1 },  // (First char = [0x0073, s], Second char = [0x003F, question], Kerning dist = -1)
    { 0x00BF, -2 },  // (First char = [0x00BF, questiondown], Second char = [0x003F, question], Kerning dist = -2)
    { 0x00C0, -2 },  // (First char = [0x00C0, Agrave], Second char = [0x003F, question], Kerning dist = -2)
    { 0x00C1, -2 },  // (First char = [0x00C1, Aacute], Second char = [0x003F, question], Kerning dist = -2)
    { 0x00C2, -2 },  // (First char = [0x00C2, Acircumflex], Second char = [0x003F, question], Kerning dist = -2)
    { 0x00C3, -2 },  // (First char = [0x00C3, Atilde], Second char = [0x003F, question], Kerning dist = -2)
    { 0x00C4, -2 },  // (First char = [0x00C4, Adieresis], Second char = [0x003F, question], Kerning dist = -2)
    { 0x00C5, -2 },  // (First char = [0x00C5, Aring], Second char = [0x003F, question], Kerning dist = -2)
    { 0x00E6, -1 },  // (First char = [0x00E6, ae], Second char = [0x003F, question], Kerning dist = -1)
    { 0x00E7, -1 },  // (First char = [0x00E7, ccedilla], Second char = [0x003F, question], Kerning dist = -1)
    { 0x00E8, -1 },  // (First char = [0x00E8, egrave], Second char = [0x003F, question], Kerning dist = -1)
    { 0x00E9, -1 },  // (First char = [0x00E9, eacute], Second char = [0x003F, question], Kerning dist = -1)
    { 0x00EA, -1 },  // (First char = [0x00EA, ecircumflex], Second char = [0x003F, question], Kerning dist = -1)
    { 0x00EB, -1 },  // (First char = [0x00EB, edieresis], Second char = [0x003F, question], Kerning dist = -1)
    { 0x00ED,  3 },  // (First char = [0x00ED, iacute], Second char = [0x003F, question], Kerning dist = 3)
    { 0x00F2, -1 },  // (First char = [0x00F2, ograve], Second char = [0x003F, question], Kerning dist = -1)
    { 0x00F3, -1 },  // (First char = [0x00F3, oacute], Second char = [0x003F, question], Kerning dist = -1)
    { 0x00F4, -1 },  // (First char = [0x00F4, ocircumflex], Second char = [0x003F, question], Kerning dist = -1)
    { 0x00F5, -1 },  // (First char = [0x00F5, otilde], Second char = [0x003F, question], Kerning dist = -1)
    { 0x00F6, -1 },  // (First char = [0x00F6, odieresis], Second char = [0x003F, question], Kerning dist = -1)
    { 0x00FE, -1 },  // (First char = [0x00FE, thorn], Second char = [0x003F, question], Kerning dist = -1)
    { 0x0022, -3 },  // (First char = [0x0022, quotedbl], Second char = [0x0040, at], Kerning dist = -3)
    { 0x0027, -3 },  // (First char = [0x0027, quotesingle], Second char = [0x0040, at], Kerning dist = -3)
    { 0x0028, -2 },  // (First char = [0x0028, parenleft], Second char = [0x0040, at], Kerning dist = -2)
    { 0x002A, -2 },  // (First char = [0x002A, asterisk], Second char = [0x0040, at], Kerning dist = -2)
    { 0x002F, -4 },  // (First char = [0x002F, slash], Second char = [0x0040, at], Kerning dist = -4)
    { 0x0033, -1 },  // (First char = [0x0033, three], Second char = [0x0040, at], Kerning dist = -1)
    { 0x0035, -1 },  // (First char = [0x0035, five], Second char = [0x0040, at], Kerning dist = -1)
    { 0x0036, -1 },  // (First char = [0x0036, six], Second char = [0x0040, at], Kerning dist = -1)
    { 0x0037, -4 },  // (First char = [0x0037, seven], Second char = [0x0040, at], Kerning dist = -4)
    { 0x0038, -1 },  // (First char = [0x0038, eight], Second char = [0x0040, at], Kerning dist = -1)
    { 0x003C, -2 },  // (First char = [0x003C, less], Second char = [0x0040, at], Kerning dist = -2)
    { 0x003E, -3 },  // (First char = [0x003E, greater], Second char = [0x0040, at], Kerning dist = -3)
    { 0x003F, -2 },  // (First char = [0x003F, question], Second char = [0x0040, at], Kerning dist = -2)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0040, at], Kerning dist = -1)
    { 0x0046, -2 },  // (First char = [0x0046, F], Second char = [0x0040, at], Kerning dist = -2)
    { 0x0050, -2 },  // (First char = [0x0050, P], Second char = [0x0040, at], Kerning dist = -2)
    { 0x0051, -1 },  // (First char = [0x0051, Q], Second char = [0x0040, at], Kerning dist = -1)
    { 0x0054, -4 },  // (First char = [0x0054, T], Second char = [0x0040, at], Kerning dist = -4)
    { 0x0056, -4 },  // (First char = [0x0056, V], Second char = [0x0040, at], Kerning dist = -4)
    { 0x0057, -3 },  // (First char = [0x0057, W], Second char = [0x0040, at], Kerning dist = -3)
    { 0x0058, -1 },  // (First char = [0x0058, X], Second char = [0x0040, at], Kerning dist = -1)
    { 0x0059, -4 },  // (First char = [0x0059, Y], Second char = [0x0040, at], Kerning dist = -4)
    { 0x0066, -1 },  // (First char = [0x0066, f], Second char = [0x0040, at], Kerning dist = -1)
    { 0x0076, -2 },  // (First char = [0x0076, v], Second char = [0x0040, at], Kerning dist = -2)
    { 0x0077, -2 },  // (First char = [0x0077, w], Second char = [0x0040, at], Kerning dist = -2)
    { 0x0079, -2 },  // (First char = [0x0079, y], Second char = [0x0040, at], Kerning dist = -2)
    { 0x00C0, -1 },  // (First char = [0x00C0, Agrave], Second char = [0x0040, at], Kerning dist = -1)
    { 0x00C1, -1 },  // (First char = [0x00C1, Aacute], Second char = [0x0040, at], Kerning dist = -1)
    { 0x00C2, -1 },  // (First char = [0x00C2, Acircumflex], Second char = [0x0040, at], Kerning dist = -1)
    { 0x00C3, -1 },  // (First char = [0x00C3, Atilde], Second char = [0x0040, at], Kerning dist = -1)
    { 0x00C4, -1 },  // (First char = [0x00C4, Adieresis], Second char = [0x0040, at], Kerning dist = -1)
    { 0x00C5, -1 },  // (First char = [0x00C5, Aring], Second char = [0x0040, at], Kerning dist = -1)
    { 0x00DD, -4 },  // (First char = [0x00DD, Yacute], Second char = [0x0040, at], Kerning dist = -4)
    { 0x00FD, -2 },  // (First char = [0x00FD, yacute], Second char = [0x0040, at], Kerning dist = -2)
    { 0x00FF, -2 },  // (First char = [0x00FF, ydieresis], Second char = [0x0040, at], Kerning dist = -2)
    { 0x0022, -2 },  // (First char = [0x0022, quotedbl], Second char = [0x0041, A], Kerning dist = -2)
    { 0x0027, -2 },  // (First char = [0x0027, quotesingle], Second char = [0x0041, A], Kerning dist = -2)
    { 0x0028, -1 },  // (First char = [0x0028, parenleft], Second char = [0x0041, A], Kerning dist = -1)
    { 0x002A, -4 },  // (First char = [0x002A, asterisk], Second char = [0x0041, A], Kerning dist = -4)
    { 0x002B, -1 },  // (First char = [0x002B, plus], Second char = [0x0041, A], Kerning dist = -1)
    { 0x002D, -1 },  // (First char = [0x002D, hyphen], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0030, -2 },  // (First char = [0x0030, zero], Second char = [0x0041, A], Kerning dist = -2)
    { 0x0033, -2 },  // (First char = [0x0033, three], Second char = [0x0041, A], Kerning dist = -2)
    { 0x0035, -2 },  // (First char = [0x0035, five], Second char = [0x0041, A], Kerning dist = -2)
    { 0x0036, -2 },  // (First char = [0x0036, six], Second char = [0x0041, A], Kerning dist = -2)
    { 0x0037, -3 },  // (First char = [0x0037, seven], Second char = [0x0041, A], Kerning dist = -3)
    { 0x0038, -1 },  // (First char = [0x0038, eight], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0039, -2 },  // (First char = [0x0039, nine], Second char = [0x0041, A], Kerning dist = -2)
    { 0x003F, -3 },  // (First char = [0x003F, question], Second char = [0x0041, A], Kerning dist = -3)
    { 0x0040, -2 },  // (First char = [0x0040, at], Second char = [0x0041, A], Kerning dist = -2)
    { 0x0043, -1 },  // (First char = [0x0043, C], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0044, -2 },  // (First char = [0x0044, D], Second char = [0x0041, A], Kerning dist = -2)
    { 0x0046, -3 },  // (First char = [0x0046, F], Second char = [0x0041, A], Kerning dist = -3)
    { 0x004A, -1 },  // (First char = [0x004A, J], Second char = [0x0041, A], Kerning dist = -1)
    { 0x004F, -2 },  // (First char = [0x004F, O], Second char = [0x0041, A], Kerning dist = -2)
    { 0x0050, -4 },  // (First char = [0x0050, P], Second char = [0x0041, A], Kerning dist = -4)
    { 0x0051, -1 },  // (First char = [0x0051, Q], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0054, -3 },  // (First char = [0x0054, T], Second char = [0x0041, A], Kerning dist = -3)
    { 0x0055, -1 },  // (First char = [0x0055, U], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0056, -4 },  // (First char = [0x0056, V], Second char = [0x0041, A], Kerning dist = -4)
    { 0x0057, -3 },  // (First char = [0x0057, W], Second char = [0x0041, A], Kerning dist = -3)
    { 0x0059, -3 },  // (First char = [0x0059, Y], Second char = [0x0041, A], Kerning dist = -3)
    { 0x007D, -2 },  // (First char = [0x007D, braceright], Second char = [0x0041, A], Kerning dist = -2)
    { 0x00AD, -1 },  // (First char = [0x00AD, uni00AD], Second char = [0x0041, A], Kerning dist = -1)
    { 0x00C7, -1 },  // (First char = [0x00C7, Ccedilla], Second char = [0x0041, A], Kerning dist = -1)
    { 0x00D0, -2 },  // (First char = [0x00D0, Eth], Second char = [0x0041, A], Kerning dist = -2)
    { 0x00D2, -2 },  // (First char = [0x00D2, Ograve], Second char = [0x0041, A], Kerning dist = -2)
    { 0x00D3, -2 },  // (First char = [0x00D3, Oacute], Second char = [0x0041, A], Kerning dist = -2)
    { 0x00D4, -2 },  // (First char = [0x00D4, Ocircumflex], Second char = [0x0041, A], Kerning dist = -2)
    { 0x00D5, -2 },  // (First char = [0x00D5, Otilde], Second char = [0x0041, A], Kerning dist = -2)
    { 0x00D6, -2 },  // (First char = [0x00D6, Odieresis], Second char = [0x0041, A], Kerning dist = -2)
    { 0x00D7, -1 },  // (First char = [0x00D7, multiply], Second char = [0x0041, A], Kerning dist = -1)
    { 0x00D9, -1 },  // (First char = [0x00D9, Ugrave], Second char = [0x0041, A], Kerning dist = -1)
    { 0x00DA, -1 },  // (First char = [0x00DA, Uacute], Second char = [0x0041, A], Kerning dist = -1)
    { 0x00DB, -1 },  // (First char = [0x00DB, Ucircumflex], Second char = [0x0041, A], Kerning dist = -1)
    { 0x00DC, -1 },  // (First char = [0x00DC, Udieresis], Second char = [0x0041, A], Kerning dist = -1)
    { 0x00DD, -3 },  // (First char = [0x00DD, Yacute], Second char = [0x0041, A], Kerning dist = -3)
    { 0x00DE, -2 },  // (First char = [0x00DE, Thorn], Second char = [0x0041, A], Kerning dist = -2)
    { 0x002F,  2 },  // (First char = [0x002F, slash], Second char = [0x0042, B], Kerning dist = 2)
    { 0x0028, -3 },  // (First char = [0x0028, parenleft], Second char = [0x0043, C], Kerning dist = -3)
    { 0x002C, -1 },  // (First char = [0x002C, comma], Second char = [0x0043, C], Kerning dist = -1)
    { 0x002E, -1 },  // (First char = [0x002E, period], Second char = [0x0043, C], Kerning dist = -1)
    { 0x002F, -1 },  // (First char = [0x002F, slash], Second char = [0x0043, C], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x0043, C], Kerning dist = -1)
    { 0x0041, -2 },  // (First char = [0x0041, A], Second char = [0x0043, C], Kerning dist = -2)
    { 0x004B, -2 },  // (First char = [0x004B, K], Second char = [0x0043, C], Kerning dist = -2)
    { 0x004C, -3 },  // (First char = [0x004C, L], Second char = [0x0043, C], Kerning dist = -3)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0043, C], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0043, C], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0043, C], Kerning dist = -1)
    { 0x0058, -2 },  // (First char = [0x0058, X], Second char = [0x0043, C], Kerning dist = -2)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x0043, C], Kerning dist = -2)
    { 0x005A, -1 },  // (First char = [0x005A, Z], Second char = [0x0043, C], Kerning dist = -1)
    { 0x005C, -1 },  // (First char = [0x005C, backslash], Second char = [0x0043, C], Kerning dist = -1)
    { 0x005F, -2 },  // (First char = [0x005F, underscore], Second char = [0x0043, C], Kerning dist = -2)
    { 0x007B, -1 },  // (First char = [0x007B, braceleft], Second char = [0x0043, C], Kerning dist = -1)
    { 0x00C0, -2 },  // (First char = [0x00C0, Agrave], Second char = [0x0043, C], Kerning dist = -2)
    { 0x00C1, -2 },  // (First char = [0x00C1, Aacute], Second char = [0x0043, C], Kerning dist = -2)
    { 0x00C2, -2 },  // (First char = [0x00C2, Acircumflex], Second char = [0x0043, C], Kerning dist = -2)
    { 0x00C3, -2 },  // (First char = [0x00C3, Atilde], Second char = [0x0043, C], Kerning dist = -2)
    { 0x00C4, -2 },  // (First char = [0x00C4, Adieresis], Second char = [0x0043, C], Kerning dist = -2)
    { 0x00C5, -2 },  // (First char = [0x00C5, Aring], Second char = [0x0043, C], Kerning dist = -2)
    { 0x00DD, -2 },  // (First char = [0x00DD, Yacute], Second char = [0x0043, C], Kerning dist = -2)
    { 0x002F,  2 },  // (First char = [0x002F, slash], Second char = [0x0044, D], Kerning dist = 2)
    { 0x002F,  2 },  // (First char = [0x002F, slash], Second char = [0x0045, E], Kerning dist = 2)
    { 0x002F,  2 },  // (First char = [0x002F, slash], Second char = [0x0046, F], Kerning dist = 2)
    { 0x0028, -3 },  // (First char = [0x0028, parenleft], Second char = [0x0047, G], Kerning dist = -3)
    { 0x002C, -1 },  // (First char = [0x002C, comma], Second char = [0x0047, G], Kerning dist = -1)
    { 0x002E, -1 },  // (First char = [0x002E, period], Second char = [0x0047, G], Kerning dist = -1)
    { 0x002F, -1 },  // (First char = [0x002F, slash], Second char = [0x0047, G], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x0047, G], Kerning dist = -1)
    { 0x0041, -2 },  // (First char = [0x0041, A], Second char = [0x0047, G], Kerning dist = -2)
    { 0x004B, -2 },  // (First char = [0x004B, K], Second char = [0x0047, G], Kerning dist = -2)
    { 0x004C, -3 },  // (First char = [0x004C, L], Second char = [0x0047, G], Kerning dist = -3)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0047, G], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0047, G], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0047, G], Kerning dist = -1)
    { 0x0058, -2 },  // (First char = [0x0058, X], Second char = [0x0047, G], Kerning dist = -2)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x0047, G], Kerning dist = -2)
    { 0x005A, -1 },  // (First char = [0x005A, Z], Second char = [0x0047, G], Kerning dist = -1)
    { 0x005C, -1 },  // (First char = [0x005C, backslash], Second char = [0x0047, G], Kerning dist = -1)
    { 0x005F, -2 },  // (First char = [0x005F, underscore], Second char = [0x0047, G], Kerning dist = -2)
    { 0x007B, -1 },  // (First char = [0x007B, braceleft], Second char = [0x0047, G], Kerning dist = -1)
    { 0x00C0, -2 },  // (First char = [0x00C0, Agrave], Second char = [0x0047, G], Kerning dist = -2)
    { 0x00C1, -2 },  // (First char = [0x00C1, Aacute], Second char = [0x0047, G], Kerning dist = -2)
    { 0x00C2, -2 },  // (First char = [0x00C2, Acircumflex], Second char = [0x0047, G], Kerning dist = -2)
    { 0x00C3, -2 },  // (First char = [0x00C3, Atilde], Second char = [0x0047, G], Kerning dist = -2)
    { 0x00C4, -2 },  // (First char = [0x00C4, Adieresis], Second char = [0x0047, G], Kerning dist = -2)
    { 0x00C5, -2 },  // (First char = [0x00C5, Aring], Second char = [0x0047, G], Kerning dist = -2)
    { 0x00DD, -2 },  // (First char = [0x00DD, Yacute], Second char = [0x0047, G], Kerning dist = -2)
    { 0x002F,  2 },  // (First char = [0x002F, slash], Second char = [0x0048, H], Kerning dist = 2)
    { 0x002F,  2 },  // (First char = [0x002F, slash], Second char = [0x0049, I], Kerning dist = 2)
    { 0x0022, -3 },  // (First char = [0x0022, quotedbl], Second char = [0x004A, J], Kerning dist = -3)
    { 0x0027, -3 },  // (First char = [0x0027, quotesingle], Second char = [0x004A, J], Kerning dist = -3)
    { 0x002A, -3 },  // (First char = [0x002A, asterisk], Second char = [0x004A, J], Kerning dist = -3)
    { 0x002F, -2 },  // (First char = [0x002F, slash], Second char = [0x004A, J], Kerning dist = -2)
    { 0x0037, -2 },  // (First char = [0x0037, seven], Second char = [0x004A, J], Kerning dist = -2)
    { 0x003F, -2 },  // (First char = [0x003F, question], Second char = [0x004A, J], Kerning dist = -2)
    { 0x0046, -2 },  // (First char = [0x0046, F], Second char = [0x004A, J], Kerning dist = -2)
    { 0x0050, -3 },  // (First char = [0x0050, P], Second char = [0x004A, J], Kerning dist = -3)
    { 0x0054, -3 },  // (First char = [0x0054, T], Second char = [0x004A, J], Kerning dist = -3)
    { 0x0056, -2 },  // (First char = [0x0056, V], Second char = [0x004A, J], Kerning dist = -2)
    { 0x0057, -2 },  // (First char = [0x0057, W], Second char = [0x004A, J], Kerning dist = -2)
    { 0x0059, -3 },  // (First char = [0x0059, Y], Second char = [0x004A, J], Kerning dist = -3)
    { 0x00DD, -3 },  // (First char = [0x00DD, Yacute], Second char = [0x004A, J], Kerning dist = -3)
    { 0x002F,  2 },  // (First char = [0x002F, slash], Second char = [0x004B, K], Kerning dist = 2)
    { 0x002F,  2 },  // (First char = [0x002F, slash], Second char = [0x004C, L], Kerning dist = 2)
    { 0x002F,  2 },  // (First char = [0x002F, slash], Second char = [0x004D, M], Kerning dist = 2)
    { 0x002F,  2 },  // (First char = [0x002F, slash], Second char = [0x004E, N], Kerning dist = 2)
    { 0x0028, -3 },  // (First char = [0x0028, parenleft], Second char = [0x004F, O], Kerning dist = -3)
    { 0x002C, -1 },  // (First char = [0x002C, comma], Second char = [0x004F, O], Kerning dist = -1)
    { 0x002E, -1 },  // (First char = [0x002E, period], Second char = [0x004F, O], Kerning dist = -1)
    { 0x002F, -1 },  // (First char = [0x002F, slash], Second char = [0x004F, O], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x004F, O], Kerning dist = -1)
    { 0x0041, -2 },  // (First char = [0x0041, A], Second char = [0x004F, O], Kerning dist = -2)
    { 0x004B, -2 },  // (First char = [0x004B, K], Second char = [0x004F, O], Kerning dist = -2)
    { 0x004C, -3 },  // (First char = [0x004C, L], Second char = [0x004F, O], Kerning dist = -3)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x004F, O], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x004F, O], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x004F, O], Kerning dist = -1)
    { 0x0058, -2 },  // (First char = [0x0058, X], Second char = [0x004F, O], Kerning dist = -2)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x004F, O], Kerning dist = -2)
    { 0x005A, -1 },  // (First char = [0x005A, Z], Second char = [0x004F, O], Kerning dist = -1)
    { 0x005C, -1 },  // (First char = [0x005C, backslash], Second char = [0x004F, O], Kerning dist = -1)
    { 0x005F, -2 },  // (First char = [0x005F, underscore], Second char = [0x004F, O], Kerning dist = -2)
    { 0x007B, -1 },  // (First char = [0x007B, braceleft], Second char = [0x004F, O], Kerning dist = -1)
    { 0x00C0, -2 },  // (First char = [0x00C0, Agrave], Second char = [0x004F, O], Kerning dist = -2)
    { 0x00C1, -2 },  // (First char = [0x00C1, Aacute], Second char = [0x004F, O], Kerning dist = -2)
    { 0x00C2, -2 },  // (First char = [0x00C2, Acircumflex], Second char = [0x004F, O], Kerning dist = -2)
    { 0x00C3, -2 },  // (First char = [0x00C3, Atilde], Second char = [0x004F, O], Kerning dist = -2)
    { 0x00C4, -2 },  // (First char = [0x00C4, Adieresis], Second char = [0x004F, O], Kerning dist = -2)
    { 0x00C5, -2 },  // (First char = [0x00C5, Aring], Second char = [0x004F, O], Kerning dist = -2)
    { 0x00DD, -2 },  // (First char = [0x00DD, Yacute], Second char = [0x004F, O], Kerning dist = -2)
    { 0x002F,  2 },  // (First char = [0x002F, slash], Second char = [0x0050, P], Kerning dist = 2)
    { 0x0028, -3 },  // (First char = [0x0028, parenleft], Second char = [0x0051, Q], Kerning dist = -3)
    { 0x002C, -1 },  // (First char = [0x002C, comma], Second char = [0x0051, Q], Kerning dist = -1)
    { 0x002E, -1 },  // (First char = [0x002E, period], Second char = [0x0051, Q], Kerning dist = -1)
    { 0x002F, -1 },  // (First char = [0x002F, slash], Second char = [0x0051, Q], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x0051, Q], Kerning dist = -1)
    { 0x0041, -2 },  // (First char = [0x0041, A], Second char = [0x0051, Q], Kerning dist = -2)
    { 0x004B, -2 },  // (First char = [0x004B, K], Second char = [0x0051, Q], Kerning dist = -2)
    { 0x004C, -3 },  // (First char = [0x004C, L], Second char = [0x0051, Q], Kerning dist = -3)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0051, Q], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0051, Q], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0051, Q], Kerning dist = -1)
    { 0x0058, -2 },  // (First char = [0x0058, X], Second char = [0x0051, Q], Kerning dist = -2)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x0051, Q], Kerning dist = -2)
    { 0x005A, -1 },  // (First char = [0x005A, Z], Second char = [0x0051, Q], Kerning dist = -1)
    { 0x005C, -1 },  // (First char = [0x005C, backslash], Second char = [0x0051, Q], Kerning dist = -1)
    { 0x005F, -2 },  // (First char = [0x005F, underscore], Second char = [0x0051, Q], Kerning dist = -2)
    { 0x007B, -1 },  // (First char = [0x007B, braceleft], Second char = [0x0051, Q], Kerning dist = -1)
    { 0x00C0, -2 },  // (First char = [0x00C0, Agrave], Second char = [0x0051, Q], Kerning dist = -2)
    { 0x00C1, -2 },  // (First char = [0x00C1, Aacute], Second char = [0x0051, Q], Kerning dist = -2)
    { 0x00C2, -2 },  // (First char = [0x00C2, Acircumflex], Second char = [0x0051, Q], Kerning dist = -2)
    { 0x00C3, -2 },  // (First char = [0x00C3, Atilde], Second char = [0x0051, Q], Kerning dist = -2)
    { 0x00C4, -2 },  // (First char = [0x00C4, Adieresis], Second char = [0x0051, Q], Kerning dist = -2)
    { 0x00C5, -2 },  // (First char = [0x00C5, Aring], Second char = [0x0051, Q], Kerning dist = -2)
    { 0x00DD, -2 },  // (First char = [0x00DD, Yacute], Second char = [0x0051, Q], Kerning dist = -2)
    { 0x002F,  2 },  // (First char = [0x002F, slash], Second char = [0x0052, R], Kerning dist = 2)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0053, S], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0053, S], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0053, S], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0053, S], Kerning dist = -1)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x0053, S], Kerning dist = -2)
    { 0x00DD, -2 },  // (First char = [0x00DD, Yacute], Second char = [0x0053, S], Kerning dist = -2)
    { 0x0024, -1 },  // (First char = [0x0024, dollar], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0026, -2 },  // (First char = [0x0026, ampersand], Second char = [0x0054, T], Kerning dist = -2)
    { 0x002B, -2 },  // (First char = [0x002B, plus], Second char = [0x0054, T], Kerning dist = -2)
    { 0x002C, -3 },  // (First char = [0x002C, comma], Second char = [0x0054, T], Kerning dist = -3)
    { 0x002D, -2 },  // (First char = [0x002D, hyphen], Second char = [0x0054, T], Kerning dist = -2)
    { 0x002E, -3 },  // (First char = [0x002E, period], Second char = [0x0054, T], Kerning dist = -3)
    { 0x002F,  1 },  // (First char = [0x002F, slash], Second char = [0x0054, T], Kerning dist = 1)
    { 0x0030, -1 },  // (First char = [0x0030, zero], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0032, -1 },  // (First char = [0x0032, two], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0033, -1 },  // (First char = [0x0033, three], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0034, -2 },  // (First char = [0x0034, four], Second char = [0x0054, T], Kerning dist = -2)
    { 0x0035, -1 },  // (First char = [0x0035, five], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0036, -1 },  // (First char = [0x0036, six], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0038, -1 },  // (First char = [0x0038, eight], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0039, -1 },  // (First char = [0x0039, nine], Second char = [0x0054, T], Kerning dist = -1)
    { 0x003B, -2 },  // (First char = [0x003B, semicolon], Second char = [0x0054, T], Kerning dist = -2)
    { 0x0040, -2 },  // (First char = [0x0040, at], Second char = [0x0054, T], Kerning dist = -2)
    { 0x0041, -3 },  // (First char = [0x0041, A], Second char = [0x0054, T], Kerning dist = -3)
    { 0x0042, -1 },  // (First char = [0x0042, B], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0043, -1 },  // (First char = [0x0043, C], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0044, -1 },  // (First char = [0x0044, D], Second char = [0x0054, T], Kerning dist = -1)
    { 0x004C, -4 },  // (First char = [0x004C, L], Second char = [0x0054, T], Kerning dist = -4)
    { 0x004F, -1 },  // (First char = [0x004F, O], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0051, -1 },  // (First char = [0x0051, Q], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0053, -1 },  // (First char = [0x0053, S], Second char = [0x0054, T], Kerning dist = -1)
    { 0x005F, -2 },  // (First char = [0x005F, underscore], Second char = [0x0054, T], Kerning dist = -2)
    { 0x007D, -1 },  // (First char = [0x007D, braceright], Second char = [0x0054, T], Kerning dist = -1)
    { 0x00A1, -2 },  // (First char = [0x00A1, exclamdown], Second char = [0x0054, T], Kerning dist = -2)
    { 0x00AD, -2 },  // (First char = [0x00AD, uni00AD], Second char = [0x0054, T], Kerning dist = -2)
    { 0x00BF, -2 },  // (First char = [0x00BF, questiondown], Second char = [0x0054, T], Kerning dist = -2)
    { 0x00C0, -3 },  // (First char = [0x00C0, Agrave], Second char = [0x0054, T], Kerning dist = -3)
    { 0x00C1, -3 },  // (First char = [0x00C1, Aacute], Second char = [0x0054, T], Kerning dist = -3)
    { 0x00C2, -3 },  // (First char = [0x00C2, Acircumflex], Second char = [0x0054, T], Kerning dist = -3)
    { 0x00C3, -3 },  // (First char = [0x00C3, Atilde], Second char = [0x0054, T], Kerning dist = -3)
    { 0x00C4, -3 },  // (First char = [0x00C4, Adieresis], Second char = [0x0054, T], Kerning dist = -3)
    { 0x00C5, -3 },  // (First char = [0x00C5, Aring], Second char = [0x0054, T], Kerning dist = -3)
    { 0x00C7, -1 },  // (First char = [0x00C7, Ccedilla], Second char = [0x0054, T], Kerning dist = -1)
    { 0x00D0, -1 },  // (First char = [0x00D0, Eth], Second char = [0x0054, T], Kerning dist = -1)
    { 0x00D2, -1 },  // (First char = [0x00D2, Ograve], Second char = [0x0054, T], Kerning dist = -1)
    { 0x00D3, -1 },  // (First char = [0x00D3, Oacute], Second char = [0x0054, T], Kerning dist = -1)
    { 0x00D4, -1 },  // (First char = [0x00D4, Ocircumflex], Second char = [0x0054, T], Kerning dist = -1)
    { 0x00D5, -1 },  // (First char = [0x00D5, Otilde], Second char = [0x0054, T], Kerning dist = -1)
    { 0x00D6, -1 },  // (First char = [0x00D6, Odieresis], Second char = [0x0054, T], Kerning dist = -1)
    { 0x00D7, -2 },  // (First char = [0x00D7, multiply], Second char = [0x0054, T], Kerning dist = -2)
    { 0x00DE, -3 },  // (First char = [0x00DE, Thorn], Second char = [0x0054, T], Kerning dist = -3)
    { 0x002E, -1 },  // (First char = [0x002E, period], Second char = [0x0055, U], Kerning dist = -1)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0055, U], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0055, U], Kerning dist = -1)
    { 0x005F, -2 },  // (First char = [0x005F, underscore], Second char = [0x0055, U], Kerning dist = -2)
    { 0x00C0, -1 },  // (First char = [0x00C0, Agrave], Second char = [0x0055, U], Kerning dist = -1)
    { 0x00C1, -1 },  // (First char = [0x00C1, Aacute], Second char = [0x0055, U], Kerning dist = -1)
    { 0x00C2, -1 },  // (First char = [0x00C2, Acircumflex], Second char = [0x0055, U], Kerning dist = -1)
    { 0x00C3, -1 },  // (First char = [0x00C3, Atilde], Second char = [0x0055, U], Kerning dist = -1)
    { 0x00C4, -1 },  // (First char = [0x00C4, Adieresis], Second char = [0x0055, U], Kerning dist = -1)
    { 0x00C5, -1 },  // (First char = [0x00C5, Aring], Second char = [0x0055, U], Kerning dist = -1)
    { 0x0024, -1 },  // (First char = [0x0024, dollar], Second char = [0x0056, V], Kerning dist = -1)
    { 0x0026, -2 },  // (First char = [0x0026, ampersand], Second char = [0x0056, V], Kerning dist = -2)
    { 0x002B, -2 },  // (First char = [0x002B, plus], Second char = [0x0056, V], Kerning dist = -2)
    { 0x002C, -3 },  // (First char = [0x002C, comma], Second char = [0x0056, V], Kerning dist = -3)
    { 0x002D, -2 },  // (First char = [0x002D, hyphen], Second char = [0x0056, V], Kerning dist = -2)
    { 0x002E, -3 },  // (First char = [0x002E, period], Second char = [0x0056, V], Kerning dist = -3)
    { 0x002F,  1 },  // (First char = [0x002F, slash], Second char = [0x0056, V], Kerning dist = 1)
    { 0x0030, -2 },  // (First char = [0x0030, zero], Second char = [0x0056, V], Kerning dist = -2)
    { 0x0032, -1 },  // (First char = [0x0032, two], Second char = [0x0056, V], Kerning dist = -1)
    { 0x0033, -1 },  // (First char = [0x0033, three], Second char = [0x0056, V], Kerning dist = -1)
    { 0x0034, -1 },  // (First char = [0x0034, four], Second char = [0x0056, V], Kerning dist = -1)
    { 0x0035, -1 },  // (First char = [0x0035, five], Second char = [0x0056, V], Kerning dist = -1)
    { 0x0036, -1 },  // (First char = [0x0036, six], Second char = [0x0056, V], Kerning dist = -1)
    { 0x0037,  1 },  // (First char = [0x0037, seven], Second char = [0x0056, V], Kerning dist = 1)
    { 0x0038, -1 },  // (First char = [0x0038, eight], Second char = [0x0056, V], Kerning dist = -1)
    { 0x0039, -1 },  // (First char = [0x0039, nine], Second char = [0x0056, V], Kerning dist = -1)
    { 0x003A, -1 },  // (First char = [0x003A, colon], Second char = [0x0056, V], Kerning dist = -1)
    { 0x0040, -2 },  // (First char = [0x0040, at], Second char = [0x0056, V], Kerning dist = -2)
    { 0x0041, -4 },  // (First char = [0x0041, A], Second char = [0x0056, V], Kerning dist = -4)
    { 0x0042, -1 },  // (First char = [0x0042, B], Second char = [0x0056, V], Kerning dist = -1)
    { 0x0044, -1 },  // (First char = [0x0044, D], Second char = [0x0056, V], Kerning dist = -1)
    { 0x004C, -5 },  // (First char = [0x004C, L], Second char = [0x0056, V], Kerning dist = -5)
    { 0x004F, -1 },  // (First char = [0x004F, O], Second char = [0x0056, V], Kerning dist = -1)
    { 0x0051, -1 },  // (First char = [0x0051, Q], Second char = [0x0056, V], Kerning dist = -1)
    { 0x0052, -1 },  // (First char = [0x0052, R], Second char = [0x0056, V], Kerning dist = -1)
    { 0x0053, -1 },  // (First char = [0x0053, S], Second char = [0x0056, V], Kerning dist = -1)
    { 0x005C, -2 },  // (First char = [0x005C, backslash], Second char = [0x0056, V], Kerning dist = -2)
    { 0x005F, -4 },  // (First char = [0x005F, underscore], Second char = [0x0056, V], Kerning dist = -4)
    { 0x00A1, -1 },  // (First char = [0x00A1, exclamdown], Second char = [0x0056, V], Kerning dist = -1)
    { 0x00AD, -2 },  // (First char = [0x00AD, uni00AD], Second char = [0x0056, V], Kerning dist = -2)
    { 0x00C0, -4 },  // (First char = [0x00C0, Agrave], Second char = [0x0056, V], Kerning dist = -4)
    { 0x00C1, -4 },  // (First char = [0x00C1, Aacute], Second char = [0x0056, V], Kerning dist = -4)
    { 0x00C2, -4 },  // (First char = [0x00C2, Acircumflex], Second char = [0x0056, V], Kerning dist = -4)
    { 0x00C3, -4 },  // (First char = [0x00C3, Atilde], Second char = [0x0056, V], Kerning dist = -4)
    { 0x00C4, -4 },  // (First char = [0x00C4, Adieresis], Second char = [0x0056, V], Kerning dist = -4)
    { 0x00C5, -4 },  // (First char = [0x00C5, Aring], Second char = [0x0056, V], Kerning dist = -4)
    { 0x00D0, -1 },  // (First char = [0x00D0, Eth], Second char = [0x0056, V], Kerning dist = -1)
    { 0x00D2, -1 },  // (First char = [0x00D2, Ograve], Second char = [0x0056, V], Kerning dist = -1)
    { 0x00D3, -1 },  // (First char = [0x00D3, Oacute], Second char = [0x0056, V], Kerning dist = -1)
    { 0x00D4, -1 },  // (First char = [0x00D4, Ocircumflex], Second char = [0x0056, V], Kerning dist = -1)
    { 0x00D5, -1 },  // (First char = [0x00D5, Otilde], Second char = [0x0056, V], Kerning dist = -1)
    { 0x00D6, -1 },  // (First char = [0x00D6, Odieresis], Second char = [0x0056, V], Kerning dist = -1)
    { 0x00D7, -3 },  // (First char = [0x00D7, multiply], Second char = [0x0056, V], Kerning dist = -3)
    { 0x00DE, -2 },  // (First char = [0x00DE, Thorn], Second char = [0x0056, V], Kerning dist = -2)
    { 0x0024, -1 },  // (First char = [0x0024, dollar], Second char = [0x0057, W], Kerning dist = -1)
    { 0x0026, -1 },  // (First char = [0x0026, ampersand], Second char = [0x0057, W], Kerning dist = -1)
    { 0x002B, -2 },  // (First char = [0x002B, plus], Second char = [0x0057, W], Kerning dist = -2)
    { 0x002C, -2 },  // (First char = [0x002C, comma], Second char = [0x0057, W], Kerning dist = -2)
    { 0x002D, -2 },  // (First char = [0x002D, hyphen], Second char = [0x0057, W], Kerning dist = -2)
    { 0x002E, -3 },  // (First char = [0x002E, period], Second char = [0x0057, W], Kerning dist = -3)
    { 0x0030, -2 },  // (First char = [0x0030, zero], Second char = [0x0057, W], Kerning dist = -2)
    { 0x0032, -1 },  // (First char = [0x0032, two], Second char = [0x0057, W], Kerning dist = -1)
    { 0x0033, -1 },  // (First char = [0x0033, three], Second char = [0x0057, W], Kerning dist = -1)
    { 0x0034, -1 },  // (First char = [0x0034, four], Second char = [0x0057, W], Kerning dist = -1)
    { 0x0035, -1 },  // (First char = [0x0035, five], Second char = [0x0057, W], Kerning dist = -1)
    { 0x0036, -2 },  // (First char = [0x0036, six], Second char = [0x0057, W], Kerning dist = -2)
    { 0x0038, -2 },  // (First char = [0x0038, eight], Second char = [0x0057, W], Kerning dist = -2)
    { 0x0039, -2 },  // (First char = [0x0039, nine], Second char = [0x0057, W], Kerning dist = -2)
    { 0x0040, -2 },  // (First char = [0x0040, at], Second char = [0x0057, W], Kerning dist = -2)
    { 0x0041, -3 },  // (First char = [0x0041, A], Second char = [0x0057, W], Kerning dist = -3)
    { 0x0042, -1 },  // (First char = [0x0042, B], Second char = [0x0057, W], Kerning dist = -1)
    { 0x0044, -1 },  // (First char = [0x0044, D], Second char = [0x0057, W], Kerning dist = -1)
    { 0x004C, -3 },  // (First char = [0x004C, L], Second char = [0x0057, W], Kerning dist = -3)
    { 0x004F, -1 },  // (First char = [0x004F, O], Second char = [0x0057, W], Kerning dist = -1)
    { 0x0051, -1 },  // (First char = [0x0051, Q], Second char = [0x0057, W], Kerning dist = -1)
    { 0x0052, -1 },  // (First char = [0x0052, R], Second char = [0x0057, W], Kerning dist = -1)
    { 0x0053, -1 },  // (First char = [0x0053, S], Second char = [0x0057, W], Kerning dist = -1)
    { 0x005C, -2 },  // (First char = [0x005C, backslash], Second char = [0x0057, W], Kerning dist = -2)
    { 0x005F, -3 },  // (First char = [0x005F, underscore], Second char = [0x0057, W], Kerning dist = -3)
    { 0x007D, -1 },  // (First char = [0x007D, braceright], Second char = [0x0057, W], Kerning dist = -1)
    { 0x00A1, -1 },  // (First char = [0x00A1, exclamdown], Second char = [0x0057, W], Kerning dist = -1)
    { 0x00AD, -2 },  // (First char = [0x00AD, uni00AD], Second char = [0x0057, W], Kerning dist = -2)
    { 0x00C0, -3 },  // (First char = [0x00C0, Agrave], Second char = [0x0057, W], Kerning dist = -3)
    { 0x00C1, -3 },  // (First char = [0x00C1, Aacute], Second char = [0x0057, W], Kerning dist = -3)
    { 0x00C2, -3 },  // (First char = [0x00C2, Acircumflex], Second char = [0x0057, W], Kerning dist = -3)
    { 0x00C3, -3 },  // (First char = [0x00C3, Atilde], Second char = [0x0057, W], Kerning dist = -3)
    { 0x00C4, -3 },  // (First char = [0x00C4, Adieresis], Second char = [0x0057, W], Kerning dist = -3)
    { 0x00C5, -3 },  // (First char = [0x00C5, Aring], Second char = [0x0057, W], Kerning dist = -3)
    { 0x00D0, -1 },  // (First char = [0x00D0, Eth], Second char = [0x0057, W], Kerning dist = -1)
    { 0x00D2, -1 },  // (First char = [0x00D2, Ograve], Second char = [0x0057, W], Kerning dist = -1)
    { 0x00D3, -1 },  // (First char = [0x00D3, Oacute], Second char = [0x0057, W], Kerning dist = -1)
    { 0x00D4, -1 },  // (First char = [0x00D4, Ocircumflex], Second char = [0x0057, W], Kerning dist = -1)
    { 0x00D5, -1 },  // (First char = [0x00D5, Otilde], Second char = [0x0057, W], Kerning dist = -1)
    { 0x00D6, -1 },  // (First char = [0x00D6, Odieresis], Second char = [0x0057, W], Kerning dist = -1)
    { 0x00D7, -2 },  // (First char = [0x00D7, multiply], Second char = [0x0057, W], Kerning dist = -2)
    { 0x00DE, -2 },  // (First char = [0x00DE, Thorn], Second char = [0x0057, W], Kerning dist = -2)
    { 0x0030, -2 },  // (First char = [0x0030, zero], Second char = [0x0058, X], Kerning dist = -2)
    { 0x0033, -2 },  // (First char = [0x0033, three], Second char = [0x0058, X], Kerning dist = -2)
    { 0x0035, -2 },  // (First char = [0x0035, five], Second char = [0x0058, X], Kerning dist = -2)
    { 0x0036, -2 },  // (First char = [0x0036, six], Second char = [0x0058, X], Kerning dist = -2)
    { 0x0038, -2 },  // (First char = [0x0038, eight], Second char = [0x0058, X], Kerning dist = -2)
    { 0x0039, -2 },  // (First char = [0x0039, nine], Second char = [0x0058, X], Kerning dist = -2)
    { 0x003F, -1 },  // (First char = [0x003F, question], Second char = [0x0058, X], Kerning dist = -1)
    { 0x0040, -2 },  // (First char = [0x0040, at], Second char = [0x0058, X], Kerning dist = -2)
    { 0x0042, -1 },  // (First char = [0x0042, B], Second char = [0x0058, X], Kerning dist = -1)
    { 0x0043, -1 },  // (First char = [0x0043, C], Second char = [0x0058, X], Kerning dist = -1)
    { 0x0044, -2 },  // (First char = [0x0044, D], Second char = [0x0058, X], Kerning dist = -2)
    { 0x004F, -2 },  // (First char = [0x004F, O], Second char = [0x0058, X], Kerning dist = -2)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x0058, X], Kerning dist = -1)
    { 0x0051, -1 },  // (First char = [0x0051, Q], Second char = [0x0058, X], Kerning dist = -1)
    { 0x00C7, -1 },  // (First char = [0x00C7, Ccedilla], Second char = [0x0058, X], Kerning dist = -1)
    { 0x00D0, -2 },  // (First char = [0x00D0, Eth], Second char = [0x0058, X], Kerning dist = -2)
    { 0x00D2, -2 },  // (First char = [0x00D2, Ograve], Second char = [0x0058, X], Kerning dist = -2)
    { 0x00D3, -2 },  // (First char = [0x00D3, Oacute], Second char = [0x0058, X], Kerning dist = -2)
    { 0x00D4, -2 },  // (First char = [0x00D4, Ocircumflex], Second char = [0x0058, X], Kerning dist = -2)
    { 0x00D5, -2 },  // (First char = [0x00D5, Otilde], Second char = [0x0058, X], Kerning dist = -2)
    { 0x00D6, -2 },  // (First char = [0x00D6, Odieresis], Second char = [0x0058, X], Kerning dist = -2)
    { 0x00D7, -2 },  // (First char = [0x00D7, multiply], Second char = [0x0058, X], Kerning dist = -2)
    { 0x00DE, -3 },  // (First char = [0x00DE, Thorn], Second char = [0x0058, X], Kerning dist = -3)
    { 0x0024, -1 },  // (First char = [0x0024, dollar], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x0026, -2 },  // (First char = [0x0026, ampersand], Second char = [0x0059, Y], Kerning dist = -2)
    { 0x002B, -3 },  // (First char = [0x002B, plus], Second char = [0x0059, Y], Kerning dist = -3)
    { 0x002C, -3 },  // (First char = [0x002C, comma], Second char = [0x0059, Y], Kerning dist = -3)
    { 0x002D, -2 },  // (First char = [0x002D, hyphen], Second char = [0x0059, Y], Kerning dist = -2)
    { 0x002E, -3 },  // (First char = [0x002E, period], Second char = [0x0059, Y], Kerning dist = -3)
    { 0x002F,  1 },  // (First char = [0x002F, slash], Second char = [0x0059, Y], Kerning dist = 1)
    { 0x0030, -2 },  // (First char = [0x0030, zero], Second char = [0x0059, Y], Kerning dist = -2)
    { 0x0032, -2 },  // (First char = [0x0032, two], Second char = [0x0059, Y], Kerning dist = -2)
    { 0x0033, -2 },  // (First char = [0x0033, three], Second char = [0x0059, Y], Kerning dist = -2)
    { 0x0034, -1 },  // (First char = [0x0034, four], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x0035, -2 },  // (First char = [0x0035, five], Second char = [0x0059, Y], Kerning dist = -2)
    { 0x0036, -2 },  // (First char = [0x0036, six], Second char = [0x0059, Y], Kerning dist = -2)
    { 0x0038, -2 },  // (First char = [0x0038, eight], Second char = [0x0059, Y], Kerning dist = -2)
    { 0x0039, -2 },  // (First char = [0x0039, nine], Second char = [0x0059, Y], Kerning dist = -2)
    { 0x003A, -1 },  // (First char = [0x003A, colon], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x0040, -4 },  // (First char = [0x0040, at], Second char = [0x0059, Y], Kerning dist = -4)
    { 0x0041, -3 },  // (First char = [0x0041, A], Second char = [0x0059, Y], Kerning dist = -3)
    { 0x0042, -1 },  // (First char = [0x0042, B], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x0043, -1 },  // (First char = [0x0043, C], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x0044, -2 },  // (First char = [0x0044, D], Second char = [0x0059, Y], Kerning dist = -2)
    { 0x0047, -2 },  // (First char = [0x0047, G], Second char = [0x0059, Y], Kerning dist = -2)
    { 0x004C, -4 },  // (First char = [0x004C, L], Second char = [0x0059, Y], Kerning dist = -4)
    { 0x004F, -2 },  // (First char = [0x004F, O], Second char = [0x0059, Y], Kerning dist = -2)
    { 0x0051, -2 },  // (First char = [0x0051, Q], Second char = [0x0059, Y], Kerning dist = -2)
    { 0x0052, -1 },  // (First char = [0x0052, R], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x0053, -1 },  // (First char = [0x0053, S], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x005C, -3 },  // (First char = [0x005C, backslash], Second char = [0x0059, Y], Kerning dist = -3)
    { 0x005F, -3 },  // (First char = [0x005F, underscore], Second char = [0x0059, Y], Kerning dist = -3)
    { 0x007D, -2 },  // (First char = [0x007D, braceright], Second char = [0x0059, Y], Kerning dist = -2)
    { 0x00A1, -1 },  // (First char = [0x00A1, exclamdown], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x00AD, -2 },  // (First char = [0x00AD, uni00AD], Second char = [0x0059, Y], Kerning dist = -2)
    { 0x00BF, -2 },  // (First char = [0x00BF, questiondown], Second char = [0x0059, Y], Kerning dist = -2)
    { 0x00C0, -3 },  // (First char = [0x00C0, Agrave], Second char = [0x0059, Y], Kerning dist = -3)
    { 0x00C1, -3 },  // (First char = [0x00C1, Aacute], Second char = [0x0059, Y], Kerning dist = -3)
    { 0x00C2, -3 },  // (First char = [0x00C2, Acircumflex], Second char = [0x0059, Y], Kerning dist = -3)
    { 0x00C3, -3 },  // (First char = [0x00C3, Atilde], Second char = [0x0059, Y], Kerning dist = -3)
    { 0x00C4, -3 },  // (First char = [0x00C4, Adieresis], Second char = [0x0059, Y], Kerning dist = -3)
    { 0x00C5, -3 },  // (First char = [0x00C5, Aring], Second char = [0x0059, Y], Kerning dist = -3)
    { 0x00C7, -1 },  // (First char = [0x00C7, Ccedilla], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x00D0, -2 },  // (First char = [0x00D0, Eth], Second char = [0x0059, Y], Kerning dist = -2)
    { 0x00D2, -2 },  // (First char = [0x00D2, Ograve], Second char = [0x0059, Y], Kerning dist = -2)
    { 0x00D3, -2 },  // (First char = [0x00D3, Oacute], Second char = [0x0059, Y], Kerning dist = -2)
    { 0x00D4, -2 },  // (First char = [0x00D4, Ocircumflex], Second char = [0x0059, Y], Kerning dist = -2)
    { 0x00D5, -2 },  // (First char = [0x00D5, Otilde], Second char = [0x0059, Y], Kerning dist = -2)
    { 0x00D6, -2 },  // (First char = [0x00D6, Odieresis], Second char = [0x0059, Y], Kerning dist = -2)
    { 0x00D7, -2 },  // (First char = [0x00D7, multiply], Second char = [0x0059, Y], Kerning dist = -2)
    { 0x00DE, -3 },  // (First char = [0x00DE, Thorn], Second char = [0x0059, Y], Kerning dist = -3)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x005A, Z], Kerning dist = -1)
    { 0x00ED,  2 },  // (First char = [0x00ED, iacute], Second char = [0x005B, bracketleft], Kerning dist = 2)
    { 0x0026, -2 },  // (First char = [0x0026, ampersand], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x002C, -2 },  // (First char = [0x002C, comma], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x002D, -2 },  // (First char = [0x002D, hyphen], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x002E, -2 },  // (First char = [0x002E, period], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x0030, -2 },  // (First char = [0x0030, zero], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x0033, -2 },  // (First char = [0x0033, three], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x0036, -1 },  // (First char = [0x0036, six], Second char = [0x005C, backslash], Kerning dist = -1)
    { 0x0038, -2 },  // (First char = [0x0038, eight], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x0039, -1 },  // (First char = [0x0039, nine], Second char = [0x005C, backslash], Kerning dist = -1)
    { 0x0040, -2 },  // (First char = [0x0040, at], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x0041, -2 },  // (First char = [0x0041, A], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x0044, -1 },  // (First char = [0x0044, D], Second char = [0x005C, backslash], Kerning dist = -1)
    { 0x004C, -2 },  // (First char = [0x004C, L], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x004F, -1 },  // (First char = [0x004F, O], Second char = [0x005C, backslash], Kerning dist = -1)
    { 0x005C, -5 },  // (First char = [0x005C, backslash], Second char = [0x005C, backslash], Kerning dist = -5)
    { 0x005F, -7 },  // (First char = [0x005F, underscore], Second char = [0x005C, backslash], Kerning dist = -7)
    { 0x0061, -2 },  // (First char = [0x0061, a], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x0062, -3 },  // (First char = [0x0062, b], Second char = [0x005C, backslash], Kerning dist = -3)
    { 0x0063, -2 },  // (First char = [0x0063, c], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x0065, -2 },  // (First char = [0x0065, e], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x0068, -2 },  // (First char = [0x0068, h], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x006D, -2 },  // (First char = [0x006D, m], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x006E, -2 },  // (First char = [0x006E, n], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x006F, -3 },  // (First char = [0x006F, o], Second char = [0x005C, backslash], Kerning dist = -3)
    { 0x0070, -3 },  // (First char = [0x0070, p], Second char = [0x005C, backslash], Kerning dist = -3)
    { 0x0071, -2 },  // (First char = [0x0071, q], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x0073, -2 },  // (First char = [0x0073, s], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x00AD, -2 },  // (First char = [0x00AD, uni00AD], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x00BF, -1 },  // (First char = [0x00BF, questiondown], Second char = [0x005C, backslash], Kerning dist = -1)
    { 0x00C0, -2 },  // (First char = [0x00C0, Agrave], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x00C1, -2 },  // (First char = [0x00C1, Aacute], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x00C2, -2 },  // (First char = [0x00C2, Acircumflex], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x00C3, -2 },  // (First char = [0x00C3, Atilde], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x00C4, -2 },  // (First char = [0x00C4, Adieresis], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x00C5, -2 },  // (First char = [0x00C5, Aring], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x00D0, -1 },  // (First char = [0x00D0, Eth], Second char = [0x005C, backslash], Kerning dist = -1)
    { 0x00D2, -1 },  // (First char = [0x00D2, Ograve], Second char = [0x005C, backslash], Kerning dist = -1)
    { 0x00D3, -1 },  // (First char = [0x00D3, Oacute], Second char = [0x005C, backslash], Kerning dist = -1)
    { 0x00D4, -1 },  // (First char = [0x00D4, Ocircumflex], Second char = [0x005C, backslash], Kerning dist = -1)
    { 0x00D5, -1 },  // (First char = [0x00D5, Otilde], Second char = [0x005C, backslash], Kerning dist = -1)
    { 0x00D6, -1 },  // (First char = [0x00D6, Odieresis], Second char = [0x005C, backslash], Kerning dist = -1)
    { 0x00E0, -2 },  // (First char = [0x00E0, agrave], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x00E1, -2 },  // (First char = [0x00E1, aacute], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x00E2, -2 },  // (First char = [0x00E2, acircumflex], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x00E3, -2 },  // (First char = [0x00E3, atilde], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x00E4, -2 },  // (First char = [0x00E4, adieresis], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x00E5, -2 },  // (First char = [0x00E5, aring], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x00E6, -2 },  // (First char = [0x00E6, ae], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x00E7, -2 },  // (First char = [0x00E7, ccedilla], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x00E8, -2 },  // (First char = [0x00E8, egrave], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x00E9, -2 },  // (First char = [0x00E9, eacute], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x00EA, -2 },  // (First char = [0x00EA, ecircumflex], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x00EB, -2 },  // (First char = [0x00EB, edieresis], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x00ED,  3 },  // (First char = [0x00ED, iacute], Second char = [0x005C, backslash], Kerning dist = 3)
    { 0x00F1, -2 },  // (First char = [0x00F1, ntilde], Second char = [0x005C, backslash], Kerning dist = -2)
    { 0x00F2, -3 },  // (First char = [0x00F2, ograve], Second char = [0x005C, backslash], Kerning dist = -3)
    { 0x00F3, -3 },  // (First char = [0x00F3, oacute], Second char = [0x005C, backslash], Kerning dist = -3)
    { 0x00F4, -3 },  // (First char = [0x00F4, ocircumflex], Second char = [0x005C, backslash], Kerning dist = -3)
    { 0x00F5, -3 },  // (First char = [0x00F5, otilde], Second char = [0x005C, backslash], Kerning dist = -3)
    { 0x00F6, -3 },  // (First char = [0x00F6, odieresis], Second char = [0x005C, backslash], Kerning dist = -3)
    { 0x00FE, -3 },  // (First char = [0x00FE, thorn], Second char = [0x005C, backslash], Kerning dist = -3)
    { 0x002A, -4 },  // (First char = [0x002A, asterisk], Second char = [0x005F, underscore], Kerning dist = -4)
    { 0x002F, -6 },  // (First char = [0x002F, slash], Second char = [0x005F, underscore], Kerning dist = -6)
    { 0x0030, -2 },  // (First char = [0x0030, zero], Second char = [0x005F, underscore], Kerning dist = -2)
    { 0x0035, -2 },  // (First char = [0x0035, five], Second char = [0x005F, underscore], Kerning dist = -2)
    { 0x0036, -2 },  // (First char = [0x0036, six], Second char = [0x005F, underscore], Kerning dist = -2)
    { 0x0037, -2 },  // (First char = [0x0037, seven], Second char = [0x005F, underscore], Kerning dist = -2)
    { 0x0038, -2 },  // (First char = [0x0038, eight], Second char = [0x005F, underscore], Kerning dist = -2)
    { 0x0039, -2 },  // (First char = [0x0039, nine], Second char = [0x005F, underscore], Kerning dist = -2)
    { 0x003F, -4 },  // (First char = [0x003F, question], Second char = [0x005F, underscore], Kerning dist = -4)
    { 0x0040, -2 },  // (First char = [0x0040, at], Second char = [0x005F, underscore], Kerning dist = -2)
    { 0x0044, -2 },  // (First char = [0x0044, D], Second char = [0x005F, underscore], Kerning dist = -2)
    { 0x0046, -2 },  // (First char = [0x0046, F], Second char = [0x005F, underscore], Kerning dist = -2)
    { 0x004F, -2 },  // (First char = [0x004F, O], Second char = [0x005F, underscore], Kerning dist = -2)
    { 0x0050, -3 },  // (First char = [0x0050, P], Second char = [0x005F, underscore], Kerning dist = -3)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x005F, underscore], Kerning dist = -2)
    { 0x0055, -2 },  // (First char = [0x0055, U], Second char = [0x005F, underscore], Kerning dist = -2)
    { 0x0056, -4 },  // (First char = [0x0056, V], Second char = [0x005F, underscore], Kerning dist = -4)
    { 0x0057, -3 },  // (First char = [0x0057, W], Second char = [0x005F, underscore], Kerning dist = -3)
    { 0x0059, -3 },  // (First char = [0x0059, Y], Second char = [0x005F, underscore], Kerning dist = -3)
    { 0x005C,  2 },  // (First char = [0x005C, backslash], Second char = [0x005F, underscore], Kerning dist = 2)
    { 0x00D0, -2 },  // (First char = [0x00D0, Eth], Second char = [0x005F, underscore], Kerning dist = -2)
    { 0x00D2, -2 },  // (First char = [0x00D2, Ograve], Second char = [0x005F, underscore], Kerning dist = -2)
    { 0x00D3, -2 },  // (First char = [0x00D3, Oacute], Second char = [0x005F, underscore], Kerning dist = -2)
    { 0x00D4, -2 },  // (First char = [0x00D4, Ocircumflex], Second char = [0x005F, underscore], Kerning dist = -2)
    { 0x00D5, -2 },  // (First char = [0x00D5, Otilde], Second char = [0x005F, underscore], Kerning dist = -2)
    { 0x00D6, -2 },  // (First char = [0x00D6, Odieresis], Second char = [0x005F, underscore], Kerning dist = -2)
    { 0x00D8, -2 },  // (First char = [0x00D8, Oslash], Second char = [0x005F, underscore], Kerning dist = -2)
    { 0x00D9, -2 },  // (First char = [0x00D9, Ugrave], Second char = [0x005F, underscore], Kerning dist = -2)
    { 0x00DA, -2 },  // (First char = [0x00DA, Uacute], Second char = [0x005F, underscore], Kerning dist = -2)
    { 0x00DB, -2 },  // (First char = [0x00DB, Ucircumflex], Second char = [0x005F, underscore], Kerning dist = -2)
    { 0x00DC, -2 },  // (First char = [0x00DC, Udieresis], Second char = [0x005F, underscore], Kerning dist = -2)
    { 0x00DD, -3 },  // (First char = [0x00DD, Yacute], Second char = [0x005F, underscore], Kerning dist = -3)
    { 0x0028, -2 },  // (First char = [0x0028, parenleft], Second char = [0x0061, a], Kerning dist = -2)
    { 0x002A, -1 },  // (First char = [0x002A, asterisk], Second char = [0x0061, a], Kerning dist = -1)
    { 0x002F, -2 },  // (First char = [0x002F, slash], Second char = [0x0061, a], Kerning dist = -2)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0061, a], Kerning dist = -1)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0052, -1 },  // (First char = [0x0052, R], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0054, -3 },  // (First char = [0x0054, T], Second char = [0x0061, a], Kerning dist = -3)
    { 0x0056, -2 },  // (First char = [0x0056, V], Second char = [0x0061, a], Kerning dist = -2)
    { 0x0057, -2 },  // (First char = [0x0057, W], Second char = [0x0061, a], Kerning dist = -2)
    { 0x0058, -1 },  // (First char = [0x0058, X], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0059, -3 },  // (First char = [0x0059, Y], Second char = [0x0061, a], Kerning dist = -3)
    { 0x0066, -1 },  // (First char = [0x0066, f], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0079, -1 },  // (First char = [0x0079, y], Second char = [0x0061, a], Kerning dist = -1)
    { 0x00C0, -1 },  // (First char = [0x00C0, Agrave], Second char = [0x0061, a], Kerning dist = -1)
    { 0x00C1, -1 },  // (First char = [0x00C1, Aacute], Second char = [0x0061, a], Kerning dist = -1)
    { 0x00C2, -1 },  // (First char = [0x00C2, Acircumflex], Second char = [0x0061, a], Kerning dist = -1)
    { 0x00C3, -1 },  // (First char = [0x00C3, Atilde], Second char = [0x0061, a], Kerning dist = -1)
    { 0x00C4, -1 },  // (First char = [0x00C4, Adieresis], Second char = [0x0061, a], Kerning dist = -1)
    { 0x00C5, -1 },  // (First char = [0x00C5, Aring], Second char = [0x0061, a], Kerning dist = -1)
    { 0x00DD, -3 },  // (First char = [0x00DD, Yacute], Second char = [0x0061, a], Kerning dist = -3)
    { 0x00FD, -1 },  // (First char = [0x00FD, yacute], Second char = [0x0061, a], Kerning dist = -1)
    { 0x00FF, -1 },  // (First char = [0x00FF, ydieresis], Second char = [0x0061, a], Kerning dist = -1)
    { 0x00ED,  2 },  // (First char = [0x00ED, iacute], Second char = [0x0062, b], Kerning dist = 2)
    { 0x0022, -2 },  // (First char = [0x0022, quotedbl], Second char = [0x0063, c], Kerning dist = -2)
    { 0x0027, -2 },  // (First char = [0x0027, quotesingle], Second char = [0x0063, c], Kerning dist = -2)
    { 0x0028, -2 },  // (First char = [0x0028, parenleft], Second char = [0x0063, c], Kerning dist = -2)
    { 0x002A, -1 },  // (First char = [0x002A, asterisk], Second char = [0x0063, c], Kerning dist = -1)
    { 0x002F, -2 },  // (First char = [0x002F, slash], Second char = [0x0063, c], Kerning dist = -2)
    { 0x0032, -1 },  // (First char = [0x0032, two], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0037, -2 },  // (First char = [0x0037, seven], Second char = [0x0063, c], Kerning dist = -2)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0063, c], Kerning dist = -1)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x0063, c], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0052, -1 },  // (First char = [0x0052, R], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0054, -4 },  // (First char = [0x0054, T], Second char = [0x0063, c], Kerning dist = -4)
    { 0x0056, -3 },  // (First char = [0x0056, V], Second char = [0x0063, c], Kerning dist = -3)
    { 0x0057, -2 },  // (First char = [0x0057, W], Second char = [0x0063, c], Kerning dist = -2)
    { 0x0058, -1 },  // (First char = [0x0058, X], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0059, -3 },  // (First char = [0x0059, Y], Second char = [0x0063, c], Kerning dist = -3)
    { 0x005C, -1 },  // (First char = [0x005C, backslash], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0066, -1 },  // (First char = [0x0066, f], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0067, -1 },  // (First char = [0x0067, g], Second char = [0x0063, c], Kerning dist = -1)
    { 0x006B, -1 },  // (First char = [0x006B, k], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0072, -1 },  // (First char = [0x0072, r], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0074, -1 },  // (First char = [0x0074, t], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0078, -1 },  // (First char = [0x0078, x], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0079, -2 },  // (First char = [0x0079, y], Second char = [0x0063, c], Kerning dist = -2)
    { 0x007B, -2 },  // (First char = [0x007B, braceleft], Second char = [0x0063, c], Kerning dist = -2)
    { 0x00BF, -1 },  // (First char = [0x00BF, questiondown], Second char = [0x0063, c], Kerning dist = -1)
    { 0x00C0, -1 },  // (First char = [0x00C0, Agrave], Second char = [0x0063, c], Kerning dist = -1)
    { 0x00C1, -1 },  // (First char = [0x00C1, Aacute], Second char = [0x0063, c], Kerning dist = -1)
    { 0x00C2, -1 },  // (First char = [0x00C2, Acircumflex], Second char = [0x0063, c], Kerning dist = -1)
    { 0x00C3, -1 },  // (First char = [0x00C3, Atilde], Second char = [0x0063, c], Kerning dist = -1)
    { 0x00C4, -1 },  // (First char = [0x00C4, Adieresis], Second char = [0x0063, c], Kerning dist = -1)
    { 0x00C5, -1 },  // (First char = [0x00C5, Aring], Second char = [0x0063, c], Kerning dist = -1)
    { 0x00DD, -3 },  // (First char = [0x00DD, Yacute], Second char = [0x0063, c], Kerning dist = -3)
    { 0x00FD, -2 },  // (First char = [0x00FD, yacute], Second char = [0x0063, c], Kerning dist = -2)
    { 0x00FF, -2 },  // (First char = [0x00FF, ydieresis], Second char = [0x0063, c], Kerning dist = -2)
    { 0x0022, -2 },  // (First char = [0x0022, quotedbl], Second char = [0x0064, d], Kerning dist = -2)
    { 0x0027, -2 },  // (First char = [0x0027, quotesingle], Second char = [0x0064, d], Kerning dist = -2)
    { 0x0028, -2 },  // (First char = [0x0028, parenleft], Second char = [0x0064, d], Kerning dist = -2)
    { 0x002A, -1 },  // (First char = [0x002A, asterisk], Second char = [0x0064, d], Kerning dist = -1)
    { 0x002F, -2 },  // (First char = [0x002F, slash], Second char = [0x0064, d], Kerning dist = -2)
    { 0x0032, -1 },  // (First char = [0x0032, two], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0037, -2 },  // (First char = [0x0037, seven], Second char = [0x0064, d], Kerning dist = -2)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0064, d], Kerning dist = -1)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x0064, d], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0052, -1 },  // (First char = [0x0052, R], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0054, -4 },  // (First char = [0x0054, T], Second char = [0x0064, d], Kerning dist = -4)
    { 0x0056, -3 },  // (First char = [0x0056, V], Second char = [0x0064, d], Kerning dist = -3)
    { 0x0057, -2 },  // (First char = [0x0057, W], Second char = [0x0064, d], Kerning dist = -2)
    { 0x0058, -1 },  // (First char = [0x0058, X], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0059, -3 },  // (First char = [0x0059, Y], Second char = [0x0064, d], Kerning dist = -3)
    { 0x005C, -1 },  // (First char = [0x005C, backslash], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0066, -1 },  // (First char = [0x0066, f], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0067, -1 },  // (First char = [0x0067, g], Second char = [0x0064, d], Kerning dist = -1)
    { 0x006B, -1 },  // (First char = [0x006B, k], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0072, -1 },  // (First char = [0x0072, r], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0074, -1 },  // (First char = [0x0074, t], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0078, -1 },  // (First char = [0x0078, x], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0079, -2 },  // (First char = [0x0079, y], Second char = [0x0064, d], Kerning dist = -2)
    { 0x007B, -2 },  // (First char = [0x007B, braceleft], Second char = [0x0064, d], Kerning dist = -2)
    { 0x00BF, -1 },  // (First char = [0x00BF, questiondown], Second char = [0x0064, d], Kerning dist = -1)
    { 0x00C0, -1 },  // (First char = [0x00C0, Agrave], Second char = [0x0064, d], Kerning dist = -1)
    { 0x00C1, -1 },  // (First char = [0x00C1, Aacute], Second char = [0x0064, d], Kerning dist = -1)
    { 0x00C2, -1 },  // (First char = [0x00C2, Acircumflex], Second char = [0x0064, d], Kerning dist = -1)
    { 0x00C3, -1 },  // (First char = [0x00C3, Atilde], Second char = [0x0064, d], Kerning dist = -1)
    { 0x00C4, -1 },  // (First char = [0x00C4, Adieresis], Second char = [0x0064, d], Kerning dist = -1)
    { 0x00C5, -1 },  // (First char = [0x00C5, Aring], Second char = [0x0064, d], Kerning dist = -1)
    { 0x00DD, -3 },  // (First char = [0x00DD, Yacute], Second char = [0x0064, d], Kerning dist = -3)
    { 0x00FD, -2 },  // (First char = [0x00FD, yacute], Second char = [0x0064, d], Kerning dist = -2)
    { 0x00FF, -2 },  // (First char = [0x00FF, ydieresis], Second char = [0x0064, d], Kerning dist = -2)
    { 0x0022, -2 },  // (First char = [0x0022, quotedbl], Second char = [0x0065, e], Kerning dist = -2)
    { 0x0027, -2 },  // (First char = [0x0027, quotesingle], Second char = [0x0065, e], Kerning dist = -2)
    { 0x0028, -2 },  // (First char = [0x0028, parenleft], Second char = [0x0065, e], Kerning dist = -2)
    { 0x002A, -1 },  // (First char = [0x002A, asterisk], Second char = [0x0065, e], Kerning dist = -1)
    { 0x002F, -2 },  // (First char = [0x002F, slash], Second char = [0x0065, e], Kerning dist = -2)
    { 0x0032, -1 },  // (First char = [0x0032, two], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0037, -2 },  // (First char = [0x0037, seven], Second char = [0x0065, e], Kerning dist = -2)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0065, e], Kerning dist = -1)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x0065, e], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0052, -1 },  // (First char = [0x0052, R], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0054, -4 },  // (First char = [0x0054, T], Second char = [0x0065, e], Kerning dist = -4)
    { 0x0056, -3 },  // (First char = [0x0056, V], Second char = [0x0065, e], Kerning dist = -3)
    { 0x0057, -2 },  // (First char = [0x0057, W], Second char = [0x0065, e], Kerning dist = -2)
    { 0x0058, -1 },  // (First char = [0x0058, X], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0059, -3 },  // (First char = [0x0059, Y], Second char = [0x0065, e], Kerning dist = -3)
    { 0x005C, -1 },  // (First char = [0x005C, backslash], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0066, -1 },  // (First char = [0x0066, f], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0067, -1 },  // (First char = [0x0067, g], Second char = [0x0065, e], Kerning dist = -1)
    { 0x006B, -1 },  // (First char = [0x006B, k], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0072, -1 },  // (First char = [0x0072, r], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0074, -1 },  // (First char = [0x0074, t], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0078, -1 },  // (First char = [0x0078, x], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0079, -2 },  // (First char = [0x0079, y], Second char = [0x0065, e], Kerning dist = -2)
    { 0x007B, -2 },  // (First char = [0x007B, braceleft], Second char = [0x0065, e], Kerning dist = -2)
    { 0x00BF, -1 },  // (First char = [0x00BF, questiondown], Second char = [0x0065, e], Kerning dist = -1)
    { 0x00C0, -1 },  // (First char = [0x00C0, Agrave], Second char = [0x0065, e], Kerning dist = -1)
    { 0x00C1, -1 },  // (First char = [0x00C1, Aacute], Second char = [0x0065, e], Kerning dist = -1)
    { 0x00C2, -1 },  // (First char = [0x00C2, Acircumflex], Second char = [0x0065, e], Kerning dist = -1)
    { 0x00C3, -1 },  // (First char = [0x00C3, Atilde], Second char = [0x0065, e], Kerning dist = -1)
    { 0x00C4, -1 },  // (First char = [0x00C4, Adieresis], Second char = [0x0065, e], Kerning dist = -1)
    { 0x00C5, -1 },  // (First char = [0x00C5, Aring], Second char = [0x0065, e], Kerning dist = -1)
    { 0x00DD, -3 },  // (First char = [0x00DD, Yacute], Second char = [0x0065, e], Kerning dist = -3)
    { 0x00FD, -2 },  // (First char = [0x00FD, yacute], Second char = [0x0065, e], Kerning dist = -2)
    { 0x00FF, -2 },  // (First char = [0x00FF, ydieresis], Second char = [0x0065, e], Kerning dist = -2)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0066, f], Kerning dist = -1)
    { 0x0076,  1 },  // (First char = [0x0076, v], Second char = [0x0066, f], Kerning dist = 1)
    { 0x00C0, -1 },  // (First char = [0x00C0, Agrave], Second char = [0x0066, f], Kerning dist = -1)
    { 0x00C1, -1 },  // (First char = [0x00C1, Aacute], Second char = [0x0066, f], Kerning dist = -1)
    { 0x00C2, -1 },  // (First char = [0x00C2, Acircumflex], Second char = [0x0066, f], Kerning dist = -1)
    { 0x00C3, -1 },  // (First char = [0x00C3, Atilde], Second char = [0x0066, f], Kerning dist = -1)
    { 0x00C4, -1 },  // (First char = [0x00C4, Adieresis], Second char = [0x0066, f], Kerning dist = -1)
    { 0x00C5, -1 },  // (First char = [0x00C5, Aring], Second char = [0x0066, f], Kerning dist = -1)
    { 0x00ED,  2 },  // (First char = [0x00ED, iacute], Second char = [0x0066, f], Kerning dist = 2)
    { 0x0022, -2 },  // (First char = [0x0022, quotedbl], Second char = [0x0067, g], Kerning dist = -2)
    { 0x0027, -2 },  // (First char = [0x0027, quotesingle], Second char = [0x0067, g], Kerning dist = -2)
    { 0x002F, -1 },  // (First char = [0x002F, slash], Second char = [0x0067, g], Kerning dist = -1)
    { 0x0036, -1 },  // (First char = [0x0036, six], Second char = [0x0067, g], Kerning dist = -1)
    { 0x0037, -2 },  // (First char = [0x0037, seven], Second char = [0x0067, g], Kerning dist = -2)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x0067, g], Kerning dist = -1)
    { 0x0054, -4 },  // (First char = [0x0054, T], Second char = [0x0067, g], Kerning dist = -4)
    { 0x0056, -2 },  // (First char = [0x0056, V], Second char = [0x0067, g], Kerning dist = -2)
    { 0x0057, -2 },  // (First char = [0x0057, W], Second char = [0x0067, g], Kerning dist = -2)
    { 0x0059, -3 },  // (First char = [0x0059, Y], Second char = [0x0067, g], Kerning dist = -3)
    { 0x0062, -1 },  // (First char = [0x0062, b], Second char = [0x0067, g], Kerning dist = -1)
    { 0x0066, -2 },  // (First char = [0x0066, f], Second char = [0x0067, g], Kerning dist = -2)
    { 0x006F, -1 },  // (First char = [0x006F, o], Second char = [0x0067, g], Kerning dist = -1)
    { 0x0070, -1 },  // (First char = [0x0070, p], Second char = [0x0067, g], Kerning dist = -1)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x0067, g], Kerning dist = -1)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x0067, g], Kerning dist = -1)
    { 0x0079, -1 },  // (First char = [0x0079, y], Second char = [0x0067, g], Kerning dist = -1)
    { 0x00DD, -3 },  // (First char = [0x00DD, Yacute], Second char = [0x0067, g], Kerning dist = -3)
    { 0x00F2, -1 },  // (First char = [0x00F2, ograve], Second char = [0x0067, g], Kerning dist = -1)
    { 0x00F3, -1 },  // (First char = [0x00F3, oacute], Second char = [0x0067, g], Kerning dist = -1)
    { 0x00F4, -1 },  // (First char = [0x00F4, ocircumflex], Second char = [0x0067, g], Kerning dist = -1)
    { 0x00F5, -1 },  // (First char = [0x00F5, otilde], Second char = [0x0067, g], Kerning dist = -1)
    { 0x00F6, -1 },  // (First char = [0x00F6, odieresis], Second char = [0x0067, g], Kerning dist = -1)
    { 0x00FD, -1 },  // (First char = [0x00FD, yacute], Second char = [0x0067, g], Kerning dist = -1)
    { 0x00FE, -1 },  // (First char = [0x00FE, thorn], Second char = [0x0067, g], Kerning dist = -1)
    { 0x00FF, -1 },  // (First char = [0x00FF, ydieresis], Second char = [0x0067, g], Kerning dist = -1)
    { 0x00ED,  2 },  // (First char = [0x00ED, iacute], Second char = [0x0068, h], Kerning dist = 2)
    { 0x0067,  1 },  // (First char = [0x0067, g], Second char = [0x006A, j], Kerning dist = 1)
    { 0x0071,  1 },  // (First char = [0x0071, q], Second char = [0x006A, j], Kerning dist = 1)
    { 0x00ED,  2 },  // (First char = [0x00ED, iacute], Second char = [0x006B, k], Kerning dist = 2)
    { 0x00ED,  2 },  // (First char = [0x00ED, iacute], Second char = [0x006C, l], Kerning dist = 2)
    { 0x002F, -1 },  // (First char = [0x002F, slash], Second char = [0x006D, m], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x006D, m], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x006D, m], Kerning dist = -2)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x006D, m], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x006D, m], Kerning dist = -1)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x006D, m], Kerning dist = -2)
    { 0x00DD, -2 },  // (First char = [0x00DD, Yacute], Second char = [0x006D, m], Kerning dist = -2)
    { 0x002F, -1 },  // (First char = [0x002F, slash], Second char = [0x006E, n], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x006E, n], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x006E, n], Kerning dist = -2)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x006E, n], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x006E, n], Kerning dist = -1)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x006E, n], Kerning dist = -2)
    { 0x00DD, -2 },  // (First char = [0x00DD, Yacute], Second char = [0x006E, n], Kerning dist = -2)
    { 0x0022, -2 },  // (First char = [0x0022, quotedbl], Second char = [0x006F, o], Kerning dist = -2)
    { 0x0027, -2 },  // (First char = [0x0027, quotesingle], Second char = [0x006F, o], Kerning dist = -2)
    { 0x0028, -2 },  // (First char = [0x0028, parenleft], Second char = [0x006F, o], Kerning dist = -2)
    { 0x002A, -1 },  // (First char = [0x002A, asterisk], Second char = [0x006F, o], Kerning dist = -1)
    { 0x002F, -2 },  // (First char = [0x002F, slash], Second char = [0x006F, o], Kerning dist = -2)
    { 0x0032, -1 },  // (First char = [0x0032, two], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0037, -2 },  // (First char = [0x0037, seven], Second char = [0x006F, o], Kerning dist = -2)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x006F, o], Kerning dist = -1)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x006F, o], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0052, -1 },  // (First char = [0x0052, R], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0054, -4 },  // (First char = [0x0054, T], Second char = [0x006F, o], Kerning dist = -4)
    { 0x0056, -3 },  // (First char = [0x0056, V], Second char = [0x006F, o], Kerning dist = -3)
    { 0x0057, -2 },  // (First char = [0x0057, W], Second char = [0x006F, o], Kerning dist = -2)
    { 0x0058, -1 },  // (First char = [0x0058, X], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0059, -3 },  // (First char = [0x0059, Y], Second char = [0x006F, o], Kerning dist = -3)
    { 0x005C, -1 },  // (First char = [0x005C, backslash], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0066, -1 },  // (First char = [0x0066, f], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0067, -1 },  // (First char = [0x0067, g], Second char = [0x006F, o], Kerning dist = -1)
    { 0x006B, -1 },  // (First char = [0x006B, k], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0072, -1 },  // (First char = [0x0072, r], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0074, -1 },  // (First char = [0x0074, t], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0078, -1 },  // (First char = [0x0078, x], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0079, -2 },  // (First char = [0x0079, y], Second char = [0x006F, o], Kerning dist = -2)
    { 0x007B, -2 },  // (First char = [0x007B, braceleft], Second char = [0x006F, o], Kerning dist = -2)
    { 0x00BF, -1 },  // (First char = [0x00BF, questiondown], Second char = [0x006F, o], Kerning dist = -1)
    { 0x00C0, -1 },  // (First char = [0x00C0, Agrave], Second char = [0x006F, o], Kerning dist = -1)
    { 0x00C1, -1 },  // (First char = [0x00C1, Aacute], Second char = [0x006F, o], Kerning dist = -1)
    { 0x00C2, -1 },  // (First char = [0x00C2, Acircumflex], Second char = [0x006F, o], Kerning dist = -1)
    { 0x00C3, -1 },  // (First char = [0x00C3, Atilde], Second char = [0x006F, o], Kerning dist = -1)
    { 0x00C4, -1 },  // (First char = [0x00C4, Adieresis], Second char = [0x006F, o], Kerning dist = -1)
    { 0x00C5, -1 },  // (First char = [0x00C5, Aring], Second char = [0x006F, o], Kerning dist = -1)
    { 0x00DD, -3 },  // (First char = [0x00DD, Yacute], Second char = [0x006F, o], Kerning dist = -3)
    { 0x00FD, -2 },  // (First char = [0x00FD, yacute], Second char = [0x006F, o], Kerning dist = -2)
    { 0x00FF, -2 },  // (First char = [0x00FF, ydieresis], Second char = [0x006F, o], Kerning dist = -2)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x0070, p], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0070, p], Kerning dist = -2)
    { 0x0022, -2 },  // (First char = [0x0022, quotedbl], Second char = [0x0071, q], Kerning dist = -2)
    { 0x0027, -2 },  // (First char = [0x0027, quotesingle], Second char = [0x0071, q], Kerning dist = -2)
    { 0x0028, -2 },  // (First char = [0x0028, parenleft], Second char = [0x0071, q], Kerning dist = -2)
    { 0x002A, -1 },  // (First char = [0x002A, asterisk], Second char = [0x0071, q], Kerning dist = -1)
    { 0x002F, -2 },  // (First char = [0x002F, slash], Second char = [0x0071, q], Kerning dist = -2)
    { 0x0032, -1 },  // (First char = [0x0032, two], Second char = [0x0071, q], Kerning dist = -1)
    { 0x0037, -2 },  // (First char = [0x0037, seven], Second char = [0x0071, q], Kerning dist = -2)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0071, q], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0071, q], Kerning dist = -1)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x0071, q], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0071, q], Kerning dist = -1)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x0071, q], Kerning dist = -1)
    { 0x0052, -1 },  // (First char = [0x0052, R], Second char = [0x0071, q], Kerning dist = -1)
    { 0x0054, -4 },  // (First char = [0x0054, T], Second char = [0x0071, q], Kerning dist = -4)
    { 0x0056, -3 },  // (First char = [0x0056, V], Second char = [0x0071, q], Kerning dist = -3)
    { 0x0057, -2 },  // (First char = [0x0057, W], Second char = [0x0071, q], Kerning dist = -2)
    { 0x0058, -1 },  // (First char = [0x0058, X], Second char = [0x0071, q], Kerning dist = -1)
    { 0x0059, -3 },  // (First char = [0x0059, Y], Second char = [0x0071, q], Kerning dist = -3)
    { 0x005C, -1 },  // (First char = [0x005C, backslash], Second char = [0x0071, q], Kerning dist = -1)
    { 0x0066, -1 },  // (First char = [0x0066, f], Second char = [0x0071, q], Kerning dist = -1)
    { 0x0067, -1 },  // (First char = [0x0067, g], Second char = [0x0071, q], Kerning dist = -1)
    { 0x006B, -1 },  // (First char = [0x006B, k], Second char = [0x0071, q], Kerning dist = -1)
    { 0x0072, -1 },  // (First char = [0x0072, r], Second char = [0x0071, q], Kerning dist = -1)
    { 0x0074, -1 },  // (First char = [0x0074, t], Second char = [0x0071, q], Kerning dist = -1)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x0071, q], Kerning dist = -1)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x0071, q], Kerning dist = -1)
    { 0x0078, -1 },  // (First char = [0x0078, x], Second char = [0x0071, q], Kerning dist = -1)
    { 0x0079, -2 },  // (First char = [0x0079, y], Second char = [0x0071, q], Kerning dist = -2)
    { 0x007B, -2 },  // (First char = [0x007B, braceleft], Second char = [0x0071, q], Kerning dist = -2)
    { 0x00BF, -1 },  // (First char = [0x00BF, questiondown], Second char = [0x0071, q], Kerning dist = -1)
    { 0x00C0, -1 },  // (First char = [0x00C0, Agrave], Second char = [0x0071, q], Kerning dist = -1)
    { 0x00C1, -1 },  // (First char = [0x00C1, Aacute], Second char = [0x0071, q], Kerning dist = -1)
    { 0x00C2, -1 },  // (First char = [0x00C2, Acircumflex], Second char = [0x0071, q], Kerning dist = -1)
    { 0x00C3, -1 },  // (First char = [0x00C3, Atilde], Second char = [0x0071, q], Kerning dist = -1)
    { 0x00C4, -1 },  // (First char = [0x00C4, Adieresis], Second char = [0x0071, q], Kerning dist = -1)
    { 0x00C5, -1 },  // (First char = [0x00C5, Aring], Second char = [0x0071, q], Kerning dist = -1)
    { 0x00DD, -3 },  // (First char = [0x00DD, Yacute], Second char = [0x0071, q], Kerning dist = -3)
    { 0x00FD, -2 },  // (First char = [0x00FD, yacute], Second char = [0x0071, q], Kerning dist = -2)
    { 0x00FF, -2 },  // (First char = [0x00FF, ydieresis], Second char = [0x0071, q], Kerning dist = -2)
    { 0x002F, -1 },  // (First char = [0x002F, slash], Second char = [0x0072, r], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x0072, r], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0072, r], Kerning dist = -2)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0072, r], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0072, r], Kerning dist = -1)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x0072, r], Kerning dist = -2)
    { 0x00DD, -2 },  // (First char = [0x00DD, Yacute], Second char = [0x0072, r], Kerning dist = -2)
    { 0x0028, -1 },  // (First char = [0x0028, parenleft], Second char = [0x0073, s], Kerning dist = -1)
    { 0x002A, -1 },  // (First char = [0x002A, asterisk], Second char = [0x0073, s], Kerning dist = -1)
    { 0x002F, -1 },  // (First char = [0x002F, slash], Second char = [0x0073, s], Kerning dist = -1)
    { 0x0037, -3 },  // (First char = [0x0037, seven], Second char = [0x0073, s], Kerning dist = -3)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0073, s], Kerning dist = -1)
    { 0x0052, -1 },  // (First char = [0x0052, R], Second char = [0x0073, s], Kerning dist = -1)
    { 0x0054, -3 },  // (First char = [0x0054, T], Second char = [0x0073, s], Kerning dist = -3)
    { 0x0056, -2 },  // (First char = [0x0056, V], Second char = [0x0073, s], Kerning dist = -2)
    { 0x0057, -2 },  // (First char = [0x0057, W], Second char = [0x0073, s], Kerning dist = -2)
    { 0x0058, -1 },  // (First char = [0x0058, X], Second char = [0x0073, s], Kerning dist = -1)
    { 0x0059, -3 },  // (First char = [0x0059, Y], Second char = [0x0073, s], Kerning dist = -3)
    { 0x0066, -1 },  // (First char = [0x0066, f], Second char = [0x0073, s], Kerning dist = -1)
    { 0x006B, -1 },  // (First char = [0x006B, k], Second char = [0x0073, s], Kerning dist = -1)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x0073, s], Kerning dist = -1)
    { 0x0079, -1 },  // (First char = [0x0079, y], Second char = [0x0073, s], Kerning dist = -1)
    { 0x00DD, -3 },  // (First char = [0x00DD, Yacute], Second char = [0x0073, s], Kerning dist = -3)
    { 0x00FD, -1 },  // (First char = [0x00FD, yacute], Second char = [0x0073, s], Kerning dist = -1)
    { 0x00FF, -1 },  // (First char = [0x00FF, ydieresis], Second char = [0x0073, s], Kerning dist = -1)
    { 0x0028, -1 },  // (First char = [0x0028, parenleft], Second char = [0x0074, t], Kerning dist = -1)
    { 0x002C, -1 },  // (First char = [0x002C, comma], Second char = [0x0074, t], Kerning dist = -1)
    { 0x0041, -2 },  // (First char = [0x0041, A], Second char = [0x0074, t], Kerning dist = -2)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x0074, t], Kerning dist = -1)
    { 0x004C, -2 },  // (First char = [0x004C, L], Second char = [0x0074, t], Kerning dist = -2)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0074, t], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0074, t], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x0074, t], Kerning dist = -1)
    { 0x0061, -1 },  // (First char = [0x0061, a], Second char = [0x0074, t], Kerning dist = -1)
    { 0x0062, -1 },  // (First char = [0x0062, b], Second char = [0x0074, t], Kerning dist = -1)
    { 0x0063, -1 },  // (First char = [0x0063, c], Second char = [0x0074, t], Kerning dist = -1)
    { 0x006F, -1 },  // (First char = [0x006F, o], Second char = [0x0074, t], Kerning dist = -1)
    { 0x0070, -1 },  // (First char = [0x0070, p], Second char = [0x0074, t], Kerning dist = -1)
    { 0x0073, -1 },  // (First char = [0x0073, s], Second char = [0x0074, t], Kerning dist = -1)
    { 0x00C0, -2 },  // (First char = [0x00C0, Agrave], Second char = [0x0074, t], Kerning dist = -2)
    { 0x00C1, -2 },  // (First char = [0x00C1, Aacute], Second char = [0x0074, t], Kerning dist = -2)
    { 0x00C2, -2 },  // (First char = [0x00C2, Acircumflex], Second char = [0x0074, t], Kerning dist = -2)
    { 0x00C3, -2 },  // (First char = [0x00C3, Atilde], Second char = [0x0074, t], Kerning dist = -2)
    { 0x00C4, -2 },  // (First char = [0x00C4, Adieresis], Second char = [0x0074, t], Kerning dist = -2)
    { 0x00C5, -2 },  // (First char = [0x00C5, Aring], Second char = [0x0074, t], Kerning dist = -2)
    { 0x00DD, -1 },  // (First char = [0x00DD, Yacute], Second char = [0x0074, t], Kerning dist = -1)
    { 0x00E0, -1 },  // (First char = [0x00E0, agrave], Second char = [0x0074, t], Kerning dist = -1)
    { 0x00E1, -1 },  // (First char = [0x00E1, aacute], Second char = [0x0074, t], Kerning dist = -1)
    { 0x00E2, -1 },  // (First char = [0x00E2, acircumflex], Second char = [0x0074, t], Kerning dist = -1)
    { 0x00E3, -1 },  // (First char = [0x00E3, atilde], Second char = [0x0074, t], Kerning dist = -1)
    { 0x00E4, -1 },  // (First char = [0x00E4, adieresis], Second char = [0x0074, t], Kerning dist = -1)
    { 0x00E5, -1 },  // (First char = [0x00E5, aring], Second char = [0x0074, t], Kerning dist = -1)
    { 0x00E7, -1 },  // (First char = [0x00E7, ccedilla], Second char = [0x0074, t], Kerning dist = -1)
    { 0x00F2, -1 },  // (First char = [0x00F2, ograve], Second char = [0x0074, t], Kerning dist = -1)
    { 0x00F3, -1 },  // (First char = [0x00F3, oacute], Second char = [0x0074, t], Kerning dist = -1)
    { 0x00F4, -1 },  // (First char = [0x00F4, ocircumflex], Second char = [0x0074, t], Kerning dist = -1)
    { 0x00F5, -1 },  // (First char = [0x00F5, otilde], Second char = [0x0074, t], Kerning dist = -1)
    { 0x00F6, -1 },  // (First char = [0x00F6, odieresis], Second char = [0x0074, t], Kerning dist = -1)
    { 0x00FE, -1 },  // (First char = [0x00FE, thorn], Second char = [0x0074, t], Kerning dist = -1)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x0075, u], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0075, u], Kerning dist = -2)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0075, u], Kerning dist = -1)
    { 0x0058, -1 },  // (First char = [0x0058, X], Second char = [0x0075, u], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x0075, u], Kerning dist = -1)
    { 0x00DD, -1 },  // (First char = [0x00DD, Yacute], Second char = [0x0075, u], Kerning dist = -1)
    { 0x002C, -2 },  // (First char = [0x002C, comma], Second char = [0x0076, v], Kerning dist = -2)
    { 0x002E, -2 },  // (First char = [0x002E, period], Second char = [0x0076, v], Kerning dist = -2)
    { 0x0041, -2 },  // (First char = [0x0041, A], Second char = [0x0076, v], Kerning dist = -2)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x0076, v], Kerning dist = -1)
    { 0x004C, -3 },  // (First char = [0x004C, L], Second char = [0x0076, v], Kerning dist = -3)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0076, v], Kerning dist = -2)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0076, v], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0076, v], Kerning dist = -1)
    { 0x0058, -1 },  // (First char = [0x0058, X], Second char = [0x0076, v], Kerning dist = -1)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x0076, v], Kerning dist = -2)
    { 0x0061, -1 },  // (First char = [0x0061, a], Second char = [0x0076, v], Kerning dist = -1)
    { 0x0062, -1 },  // (First char = [0x0062, b], Second char = [0x0076, v], Kerning dist = -1)
    { 0x0063, -1 },  // (First char = [0x0063, c], Second char = [0x0076, v], Kerning dist = -1)
    { 0x0065, -1 },  // (First char = [0x0065, e], Second char = [0x0076, v], Kerning dist = -1)
    { 0x006F, -1 },  // (First char = [0x006F, o], Second char = [0x0076, v], Kerning dist = -1)
    { 0x0070, -1 },  // (First char = [0x0070, p], Second char = [0x0076, v], Kerning dist = -1)
    { 0x0073, -1 },  // (First char = [0x0073, s], Second char = [0x0076, v], Kerning dist = -1)
    { 0x00BF, -1 },  // (First char = [0x00BF, questiondown], Second char = [0x0076, v], Kerning dist = -1)
    { 0x00C0, -2 },  // (First char = [0x00C0, Agrave], Second char = [0x0076, v], Kerning dist = -2)
    { 0x00C1, -2 },  // (First char = [0x00C1, Aacute], Second char = [0x0076, v], Kerning dist = -2)
    { 0x00C2, -2 },  // (First char = [0x00C2, Acircumflex], Second char = [0x0076, v], Kerning dist = -2)
    { 0x00C3, -2 },  // (First char = [0x00C3, Atilde], Second char = [0x0076, v], Kerning dist = -2)
    { 0x00C4, -2 },  // (First char = [0x00C4, Adieresis], Second char = [0x0076, v], Kerning dist = -2)
    { 0x00C5, -2 },  // (First char = [0x00C5, Aring], Second char = [0x0076, v], Kerning dist = -2)
    { 0x00DD, -2 },  // (First char = [0x00DD, Yacute], Second char = [0x0076, v], Kerning dist = -2)
    { 0x00DF, -2 },  // (First char = [0x00DF, germandbls], Second char = [0x0076, v], Kerning dist = -2)
    { 0x00E0, -1 },  // (First char = [0x00E0, agrave], Second char = [0x0076, v], Kerning dist = -1)
    { 0x00E1, -1 },  // (First char = [0x00E1, aacute], Second char = [0x0076, v], Kerning dist = -1)
    { 0x00E2, -1 },  // (First char = [0x00E2, acircumflex], Second char = [0x0076, v], Kerning dist = -1)
    { 0x00E3, -1 },  // (First char = [0x00E3, atilde], Second char = [0x0076, v], Kerning dist = -1)
    { 0x00E4, -1 },  // (First char = [0x00E4, adieresis], Second char = [0x0076, v], Kerning dist = -1)
    { 0x00E5, -1 },  // (First char = [0x00E5, aring], Second char = [0x0076, v], Kerning dist = -1)
    { 0x00E6, -1 },  // (First char = [0x00E6, ae], Second char = [0x0076, v], Kerning dist = -1)
    { 0x00E7, -1 },  // (First char = [0x00E7, ccedilla], Second char = [0x0076, v], Kerning dist = -1)
    { 0x00E8, -1 },  // (First char = [0x00E8, egrave], Second char = [0x0076, v], Kerning dist = -1)
    { 0x00E9, -1 },  // (First char = [0x00E9, eacute], Second char = [0x0076, v], Kerning dist = -1)
    { 0x00EA, -1 },  // (First char = [0x00EA, ecircumflex], Second char = [0x0076, v], Kerning dist = -1)
    { 0x00EB, -1 },  // (First char = [0x00EB, edieresis], Second char = [0x0076, v], Kerning dist = -1)
    { 0x00F2, -1 },  // (First char = [0x00F2, ograve], Second char = [0x0076, v], Kerning dist = -1)
    { 0x00F3, -1 },  // (First char = [0x00F3, oacute], Second char = [0x0076, v], Kerning dist = -1)
    { 0x00F4, -1 },  // (First char = [0x00F4, ocircumflex], Second char = [0x0076, v], Kerning dist = -1)
    { 0x00F5, -1 },  // (First char = [0x00F5, otilde], Second char = [0x0076, v], Kerning dist = -1)
    { 0x00F6, -1 },  // (First char = [0x00F6, odieresis], Second char = [0x0076, v], Kerning dist = -1)
    { 0x00F8, -1 },  // (First char = [0x00F8, oslash], Second char = [0x0076, v], Kerning dist = -1)
    { 0x00FE, -1 },  // (First char = [0x00FE, thorn], Second char = [0x0076, v], Kerning dist = -1)
    { 0x002C, -1 },  // (First char = [0x002C, comma], Second char = [0x0077, w], Kerning dist = -1)
    { 0x002E, -1 },  // (First char = [0x002E, period], Second char = [0x0077, w], Kerning dist = -1)
    { 0x0035, -1 },  // (First char = [0x0035, five], Second char = [0x0077, w], Kerning dist = -1)
    { 0x0038, -1 },  // (First char = [0x0038, eight], Second char = [0x0077, w], Kerning dist = -1)
    { 0x0040, -1 },  // (First char = [0x0040, at], Second char = [0x0077, w], Kerning dist = -1)
    { 0x0041, -2 },  // (First char = [0x0041, A], Second char = [0x0077, w], Kerning dist = -2)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x0077, w], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0077, w], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0077, w], Kerning dist = -2)
    { 0x0058, -1 },  // (First char = [0x0058, X], Second char = [0x0077, w], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x0077, w], Kerning dist = -1)
    { 0x0062, -1 },  // (First char = [0x0062, b], Second char = [0x0077, w], Kerning dist = -1)
    { 0x006F, -1 },  // (First char = [0x006F, o], Second char = [0x0077, w], Kerning dist = -1)
    { 0x0070, -1 },  // (First char = [0x0070, p], Second char = [0x0077, w], Kerning dist = -1)
    { 0x0073, -1 },  // (First char = [0x0073, s], Second char = [0x0077, w], Kerning dist = -1)
    { 0x00C0, -2 },  // (First char = [0x00C0, Agrave], Second char = [0x0077, w], Kerning dist = -2)
    { 0x00C1, -2 },  // (First char = [0x00C1, Aacute], Second char = [0x0077, w], Kerning dist = -2)
    { 0x00C2, -2 },  // (First char = [0x00C2, Acircumflex], Second char = [0x0077, w], Kerning dist = -2)
    { 0x00C3, -2 },  // (First char = [0x00C3, Atilde], Second char = [0x0077, w], Kerning dist = -2)
    { 0x00C4, -2 },  // (First char = [0x00C4, Adieresis], Second char = [0x0077, w], Kerning dist = -2)
    { 0x00C5, -2 },  // (First char = [0x00C5, Aring], Second char = [0x0077, w], Kerning dist = -2)
    { 0x00DD, -1 },  // (First char = [0x00DD, Yacute], Second char = [0x0077, w], Kerning dist = -1)
    { 0x00F2, -1 },  // (First char = [0x00F2, ograve], Second char = [0x0077, w], Kerning dist = -1)
    { 0x00F3, -1 },  // (First char = [0x00F3, oacute], Second char = [0x0077, w], Kerning dist = -1)
    { 0x00F4, -1 },  // (First char = [0x00F4, ocircumflex], Second char = [0x0077, w], Kerning dist = -1)
    { 0x00F5, -1 },  // (First char = [0x00F5, otilde], Second char = [0x0077, w], Kerning dist = -1)
    { 0x00F6, -1 },  // (First char = [0x00F6, odieresis], Second char = [0x0077, w], Kerning dist = -1)
    { 0x00FE, -1 },  // (First char = [0x00FE, thorn], Second char = [0x0077, w], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0078, x], Kerning dist = -2)
    { 0x0062, -1 },  // (First char = [0x0062, b], Second char = [0x0078, x], Kerning dist = -1)
    { 0x0065, -1 },  // (First char = [0x0065, e], Second char = [0x0078, x], Kerning dist = -1)
    { 0x006F, -1 },  // (First char = [0x006F, o], Second char = [0x0078, x], Kerning dist = -1)
    { 0x0070, -1 },  // (First char = [0x0070, p], Second char = [0x0078, x], Kerning dist = -1)
    { 0x00E6, -1 },  // (First char = [0x00E6, ae], Second char = [0x0078, x], Kerning dist = -1)
    { 0x00E8, -1 },  // (First char = [0x00E8, egrave], Second char = [0x0078, x], Kerning dist = -1)
    { 0x00E9, -1 },  // (First char = [0x00E9, eacute], Second char = [0x0078, x], Kerning dist = -1)
    { 0x00EA, -1 },  // (First char = [0x00EA, ecircumflex], Second char = [0x0078, x], Kerning dist = -1)
    { 0x00EB, -1 },  // (First char = [0x00EB, edieresis], Second char = [0x0078, x], Kerning dist = -1)
    { 0x00F2, -1 },  // (First char = [0x00F2, ograve], Second char = [0x0078, x], Kerning dist = -1)
    { 0x00F3, -1 },  // (First char = [0x00F3, oacute], Second char = [0x0078, x], Kerning dist = -1)
    { 0x00F4, -1 },  // (First char = [0x00F4, ocircumflex], Second char = [0x0078, x], Kerning dist = -1)
    { 0x00F5, -1 },  // (First char = [0x00F5, otilde], Second char = [0x0078, x], Kerning dist = -1)
    { 0x00F6, -1 },  // (First char = [0x00F6, odieresis], Second char = [0x0078, x], Kerning dist = -1)
    { 0x00FE, -1 },  // (First char = [0x00FE, thorn], Second char = [0x0078, x], Kerning dist = -1)
    { 0x002C, -2 },  // (First char = [0x002C, comma], Second char = [0x0079, y], Kerning dist = -2)
    { 0x002E, -2 },  // (First char = [0x002E, period], Second char = [0x0079, y], Kerning dist = -2)
    { 0x0034, -1 },  // (First char = [0x0034, four], Second char = [0x0079, y], Kerning dist = -1)
    { 0x0035, -1 },  // (First char = [0x0035, five], Second char = [0x0079, y], Kerning dist = -1)
    { 0x0040, -1 },  // (First char = [0x0040, at], Second char = [0x0079, y], Kerning dist = -1)
    { 0x0041, -2 },  // (First char = [0x0041, A], Second char = [0x0079, y], Kerning dist = -2)
    { 0x004B, -2 },  // (First char = [0x004B, K], Second char = [0x0079, y], Kerning dist = -2)
    { 0x004C, -2 },  // (First char = [0x004C, L], Second char = [0x0079, y], Kerning dist = -2)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0079, y], Kerning dist = -2)
    { 0x0058, -1 },  // (First char = [0x0058, X], Second char = [0x0079, y], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x0079, y], Kerning dist = -1)
    { 0x0061, -1 },  // (First char = [0x0061, a], Second char = [0x0079, y], Kerning dist = -1)
    { 0x0062, -2 },  // (First char = [0x0062, b], Second char = [0x0079, y], Kerning dist = -2)
    { 0x0068, -1 },  // (First char = [0x0068, h], Second char = [0x0079, y], Kerning dist = -1)
    { 0x006D, -1 },  // (First char = [0x006D, m], Second char = [0x0079, y], Kerning dist = -1)
    { 0x006E, -1 },  // (First char = [0x006E, n], Second char = [0x0079, y], Kerning dist = -1)
    { 0x006F, -2 },  // (First char = [0x006F, o], Second char = [0x0079, y], Kerning dist = -2)
    { 0x0070, -2 },  // (First char = [0x0070, p], Second char = [0x0079, y], Kerning dist = -2)
    { 0x0073, -1 },  // (First char = [0x0073, s], Second char = [0x0079, y], Kerning dist = -1)
    { 0x00C0, -2 },  // (First char = [0x00C0, Agrave], Second char = [0x0079, y], Kerning dist = -2)
    { 0x00C1, -2 },  // (First char = [0x00C1, Aacute], Second char = [0x0079, y], Kerning dist = -2)
    { 0x00C2, -2 },  // (First char = [0x00C2, Acircumflex], Second char = [0x0079, y], Kerning dist = -2)
    { 0x00C3, -2 },  // (First char = [0x00C3, Atilde], Second char = [0x0079, y], Kerning dist = -2)
    { 0x00C4, -2 },  // (First char = [0x00C4, Adieresis], Second char = [0x0079, y], Kerning dist = -2)
    { 0x00C5, -2 },  // (First char = [0x00C5, Aring], Second char = [0x0079, y], Kerning dist = -2)
    { 0x00D7, -1 },  // (First char = [0x00D7, multiply], Second char = [0x0079, y], Kerning dist = -1)
    { 0x00DD, -1 },  // (First char = [0x00DD, Yacute], Second char = [0x0079, y], Kerning dist = -1)
    { 0x00DF, -2 },  // (First char = [0x00DF, germandbls], Second char = [0x0079, y], Kerning dist = -2)
    { 0x00E0, -1 },  // (First char = [0x00E0, agrave], Second char = [0x0079, y], Kerning dist = -1)
    { 0x00E1, -1 },  // (First char = [0x00E1, aacute], Second char = [0x0079, y], Kerning dist = -1)
    { 0x00E2, -1 },  // (First char = [0x00E2, acircumflex], Second char = [0x0079, y], Kerning dist = -1)
    { 0x00E3, -1 },  // (First char = [0x00E3, atilde], Second char = [0x0079, y], Kerning dist = -1)
    { 0x00E4, -1 },  // (First char = [0x00E4, adieresis], Second char = [0x0079, y], Kerning dist = -1)
    { 0x00E5, -1 },  // (First char = [0x00E5, aring], Second char = [0x0079, y], Kerning dist = -1)
    { 0x00F1, -1 },  // (First char = [0x00F1, ntilde], Second char = [0x0079, y], Kerning dist = -1)
    { 0x00F2, -2 },  // (First char = [0x00F2, ograve], Second char = [0x0079, y], Kerning dist = -2)
    { 0x00F3, -2 },  // (First char = [0x00F3, oacute], Second char = [0x0079, y], Kerning dist = -2)
    { 0x00F4, -2 },  // (First char = [0x00F4, ocircumflex], Second char = [0x0079, y], Kerning dist = -2)
    { 0x00F5, -2 },  // (First char = [0x00F5, otilde], Second char = [0x0079, y], Kerning dist = -2)
    { 0x00F6, -2 },  // (First char = [0x00F6, odieresis], Second char = [0x0079, y], Kerning dist = -2)
    { 0x00FE, -2 },  // (First char = [0x00FE, thorn], Second char = [0x0079, y], Kerning dist = -2)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x007A, z], Kerning dist = -2)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x007A, z], Kerning dist = -1)
    { 0x00BF,  1 },  // (First char = [0x00BF, questiondown], Second char = [0x007A, z], Kerning dist = 1)
    { 0x00DD, -1 },  // (First char = [0x00DD, Yacute], Second char = [0x007A, z], Kerning dist = -1)
    { 0x002E, -2 },  // (First char = [0x002E, period], Second char = [0x007B, braceleft], Kerning dist = -2)
    { 0x0041, -2 },  // (First char = [0x0041, A], Second char = [0x007B, braceleft], Kerning dist = -2)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x007B, braceleft], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x007B, braceleft], Kerning dist = -1)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x007B, braceleft], Kerning dist = -2)
    { 0x00C0, -2 },  // (First char = [0x00C0, Agrave], Second char = [0x007B, braceleft], Kerning dist = -2)
    { 0x00C1, -2 },  // (First char = [0x00C1, Aacute], Second char = [0x007B, braceleft], Kerning dist = -2)
    { 0x00C2, -2 },  // (First char = [0x00C2, Acircumflex], Second char = [0x007B, braceleft], Kerning dist = -2)
    { 0x00C3, -2 },  // (First char = [0x00C3, Atilde], Second char = [0x007B, braceleft], Kerning dist = -2)
    { 0x00C4, -2 },  // (First char = [0x00C4, Adieresis], Second char = [0x007B, braceleft], Kerning dist = -2)
    { 0x00C5, -2 },  // (First char = [0x00C5, Aring], Second char = [0x007B, braceleft], Kerning dist = -2)
    { 0x00DD, -2 },  // (First char = [0x00DD, Yacute], Second char = [0x007B, braceleft], Kerning dist = -2)
    { 0x002F,  2 },  // (First char = [0x002F, slash], Second char = [0x007C, bar], Kerning dist = 2)
    { 0x0044, -1 },  // (First char = [0x0044, D], Second char = [0x007D, braceright], Kerning dist = -1)
    { 0x004F, -1 },  // (First char = [0x004F, O], Second char = [0x007D, braceright], Kerning dist = -1)
    { 0x0062, -2 },  // (First char = [0x0062, b], Second char = [0x007D, braceright], Kerning dist = -2)
    { 0x006F, -2 },  // (First char = [0x006F, o], Second char = [0x007D, braceright], Kerning dist = -2)
    { 0x0070, -2 },  // (First char = [0x0070, p], Second char = [0x007D, braceright], Kerning dist = -2)
    { 0x00D0, -1 },  // (First char = [0x00D0, Eth], Second char = [0x007D, braceright], Kerning dist = -1)
    { 0x00D2, -1 },  // (First char = [0x00D2, Ograve], Second char = [0x007D, braceright], Kerning dist = -1)
    { 0x00D3, -1 },  // (First char = [0x00D3, Oacute], Second char = [0x007D, braceright], Kerning dist = -1)
    { 0x00D4, -1 },  // (First char = [0x00D4, Ocircumflex], Second char = [0x007D, braceright], Kerning dist = -1)
    { 0x00D5, -1 },  // (First char = [0x00D5, Otilde], Second char = [0x007D, braceright], Kerning dist = -1)
    { 0x00D6, -1 },  // (First char = [0x00D6, Odieresis], Second char = [0x007D, braceright], Kerning dist = -1)
    { 0x00F2, -2 },  // (First char = [0x00F2, ograve], Second char = [0x007D, braceright], Kerning dist = -2)
    { 0x00F3, -2 },  // (First char = [0x00F3, oacute], Second char = [0x007D, braceright], Kerning dist = -2)
    { 0x00F4, -2 },  // (First char = [0x00F4, ocircumflex], Second char = [0x007D, braceright], Kerning dist = -2)
    { 0x00F5, -2 },  // (First char = [0x00F5, otilde], Second char = [0x007D, braceright], Kerning dist = -2)
    { 0x00F6, -2 },  // (First char = [0x00F6, odieresis], Second char = [0x007D, braceright], Kerning dist = -2)
    { 0x00FE, -2 },  // (First char = [0x00FE, thorn], Second char = [0x007D, braceright], Kerning dist = -2)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x00A1, exclamdown], Kerning dist = -2)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x00A1, exclamdown], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x00A1, exclamdown], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x00A1, exclamdown], Kerning dist = -1)
    { 0x00DD, -1 },  // (First char = [0x00DD, Yacute], Second char = [0x00A1, exclamdown], Kerning dist = -1)
    { 0x0037, -2 },  // (First char = [0x0037, seven], Second char = [0x00A2, cent], Kerning dist = -2)
    { 0x002F,  2 },  // (First char = [0x002F, slash], Second char = [0x00A6, brokenbar], Kerning dist = 2)
    { 0x0037, -2 },  // (First char = [0x0037, seven], Second char = [0x00AB, guillemotleft], Kerning dist = -2)
    { 0x004B, -2 },  // (First char = [0x004B, K], Second char = [0x00AB, guillemotleft], Kerning dist = -2)
    { 0x002F, -3 },  // (First char = [0x002F, slash], Second char = [0x00AD, uni00AD], Kerning dist = -3)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x00AD, uni00AD], Kerning dist = -1)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x00AD, uni00AD], Kerning dist = -1)
    { 0x004B, -2 },  // (First char = [0x004B, K], Second char = [0x00AD, uni00AD], Kerning dist = -2)
    { 0x004C, -3 },  // (First char = [0x004C, L], Second char = [0x00AD, uni00AD], Kerning dist = -3)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x00AD, uni00AD], Kerning dist = -2)
    { 0x0056, -2 },  // (First char = [0x0056, V], Second char = [0x00AD, uni00AD], Kerning dist = -2)
    { 0x0057, -2 },  // (First char = [0x0057, W], Second char = [0x00AD, uni00AD], Kerning dist = -2)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x00AD, uni00AD], Kerning dist = -2)
    { 0x005C, -1 },  // (First char = [0x005C, backslash], Second char = [0x00AD, uni00AD], Kerning dist = -1)
    { 0x00C0, -1 },  // (First char = [0x00C0, Agrave], Second char = [0x00AD, uni00AD], Kerning dist = -1)
    { 0x00C1, -1 },  // (First char = [0x00C1, Aacute], Second char = [0x00AD, uni00AD], Kerning dist = -1)
    { 0x00C2, -1 },  // (First char = [0x00C2, Acircumflex], Second char = [0x00AD, uni00AD], Kerning dist = -1)
    { 0x00C3, -1 },  // (First char = [0x00C3, Atilde], Second char = [0x00AD, uni00AD], Kerning dist = -1)
    { 0x00C4, -1 },  // (First char = [0x00C4, Adieresis], Second char = [0x00AD, uni00AD], Kerning dist = -1)
    { 0x00C5, -1 },  // (First char = [0x00C5, Aring], Second char = [0x00AD, uni00AD], Kerning dist = -1)
    { 0x00DD, -2 },  // (First char = [0x00DD, Yacute], Second char = [0x00AD, uni00AD], Kerning dist = -2)
    { 0x002A, -4 },  // (First char = [0x002A, asterisk], Second char = [0x00BF, questiondown], Kerning dist = -4)
    { 0x002F, -2 },  // (First char = [0x002F, slash], Second char = [0x00BF, questiondown], Kerning dist = -2)
    { 0x0037, -3 },  // (First char = [0x0037, seven], Second char = [0x00BF, questiondown], Kerning dist = -3)
    { 0x003F, -4 },  // (First char = [0x003F, question], Second char = [0x00BF, questiondown], Kerning dist = -4)
    { 0x0054, -4 },  // (First char = [0x0054, T], Second char = [0x00BF, questiondown], Kerning dist = -4)
    { 0x0059, -4 },  // (First char = [0x0059, Y], Second char = [0x00BF, questiondown], Kerning dist = -4)
    { 0x0076, -2 },  // (First char = [0x0076, v], Second char = [0x00BF, questiondown], Kerning dist = -2)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x00BF, questiondown], Kerning dist = -1)
    { 0x0079, -2 },  // (First char = [0x0079, y], Second char = [0x00BF, questiondown], Kerning dist = -2)
    { 0x00DD, -4 },  // (First char = [0x00DD, Yacute], Second char = [0x00BF, questiondown], Kerning dist = -4)
    { 0x00FD, -2 },  // (First char = [0x00FD, yacute], Second char = [0x00BF, questiondown], Kerning dist = -2)
    { 0x00FF, -2 },  // (First char = [0x00FF, ydieresis], Second char = [0x00BF, questiondown], Kerning dist = -2)
    { 0x0022, -2 },  // (First char = [0x0022, quotedbl], Second char = [0x00C0, Agrave], Kerning dist = -2)
    { 0x0027, -2 },  // (First char = [0x0027, quotesingle], Second char = [0x00C0, Agrave], Kerning dist = -2)
    { 0x0028, -1 },  // (First char = [0x0028, parenleft], Second char = [0x00C0, Agrave], Kerning dist = -1)
    { 0x002A, -4 },  // (First char = [0x002A, asterisk], Second char = [0x00C0, Agrave], Kerning dist = -4)
    { 0x002B, -1 },  // (First char = [0x002B, plus], Second char = [0x00C0, Agrave], Kerning dist = -1)
    { 0x002D, -1 },  // (First char = [0x002D, hyphen], Second char = [0x00C0, Agrave], Kerning dist = -1)
    { 0x0030, -2 },  // (First char = [0x0030, zero], Second char = [0x00C0, Agrave], Kerning dist = -2)
    { 0x0033, -2 },  // (First char = [0x0033, three], Second char = [0x00C0, Agrave], Kerning dist = -2)
    { 0x0035, -2 },  // (First char = [0x0035, five], Second char = [0x00C0, Agrave], Kerning dist = -2)
    { 0x0036, -2 },  // (First char = [0x0036, six], Second char = [0x00C0, Agrave], Kerning dist = -2)
    { 0x0037, -3 },  // (First char = [0x0037, seven], Second char = [0x00C0, Agrave], Kerning dist = -3)
    { 0x0038, -1 },  // (First char = [0x0038, eight], Second char = [0x00C0, Agrave], Kerning dist = -1)
    { 0x0039, -2 },  // (First char = [0x0039, nine], Second char = [0x00C0, Agrave], Kerning dist = -2)
    { 0x003F, -3 },  // (First char = [0x003F, question], Second char = [0x00C0, Agrave], Kerning dist = -3)
    { 0x0040, -2 },  // (First char = [0x0040, at], Second char = [0x00C0, Agrave], Kerning dist = -2)
    { 0x0043, -1 },  // (First char = [0x0043, C], Second char = [0x00C0, Agrave], Kerning dist = -1)
    { 0x0044, -2 },  // (First char = [0x0044, D], Second char = [0x00C0, Agrave], Kerning dist = -2)
    { 0x0046, -3 },  // (First char = [0x0046, F], Second char = [0x00C0, Agrave], Kerning dist = -3)
    { 0x004A, -1 },  // (First char = [0x004A, J], Second char = [0x00C0, Agrave], Kerning dist = -1)
    { 0x004F, -2 },  // (First char = [0x004F, O], Second char = [0x00C0, Agrave], Kerning dist = -2)
    { 0x0050, -4 },  // (First char = [0x0050, P], Second char = [0x00C0, Agrave], Kerning dist = -4)
    { 0x0051, -1 },  // (First char = [0x0051, Q], Second char = [0x00C0, Agrave], Kerning dist = -1)
    { 0x0054, -3 },  // (First char = [0x0054, T], Second char = [0x00C0, Agrave], Kerning dist = -3)
    { 0x0055, -1 },  // (First char = [0x0055, U], Second char = [0x00C0, Agrave], Kerning dist = -1)
    { 0x0056, -4 },  // (First char = [0x0056, V], Second char = [0x00C0, Agrave], Kerning dist = -4)
    { 0x0057, -3 },  // (First char = [0x0057, W], Second char = [0x00C0, Agrave], Kerning dist = -3)
    { 0x0059, -3 },  // (First char = [0x0059, Y], Second char = [0x00C0, Agrave], Kerning dist = -3)
    { 0x007D, -2 },  // (First char = [0x007D, braceright], Second char = [0x00C0, Agrave], Kerning dist = -2)
    { 0x00AD, -1 },  // (First char = [0x00AD, uni00AD], Second char = [0x00C0, Agrave], Kerning dist = -1)
    { 0x00C7, -1 },  // (First char = [0x00C7, Ccedilla], Second char = [0x00C0, Agrave], Kerning dist = -1)
    { 0x00D0, -2 },  // (First char = [0x00D0, Eth], Second char = [0x00C0, Agrave], Kerning dist = -2)
    { 0x00D2, -2 },  // (First char = [0x00D2, Ograve], Second char = [0x00C0, Agrave], Kerning dist = -2)
    { 0x00D3, -2 },  // (First char = [0x00D3, Oacute], Second char = [0x00C0, Agrave], Kerning dist = -2)
    { 0x00D4, -2 },  // (First char = [0x00D4, Ocircumflex], Second char = [0x00C0, Agrave], Kerning dist = -2)
    { 0x00D5, -2 },  // (First char = [0x00D5, Otilde], Second char = [0x00C0, Agrave], Kerning dist = -2)
    { 0x00D6, -2 },  // (First char = [0x00D6, Odieresis], Second char = [0x00C0, Agrave], Kerning dist = -2)
    { 0x00D7, -1 },  // (First char = [0x00D7, multiply], Second char = [0x00C0, Agrave], Kerning dist = -1)
    { 0x00D9, -1 },  // (First char = [0x00D9, Ugrave], Second char = [0x00C0, Agrave], Kerning dist = -1)
    { 0x00DA, -1 },  // (First char = [0x00DA, Uacute], Second char = [0x00C0, Agrave], Kerning dist = -1)
    { 0x00DB, -1 },  // (First char = [0x00DB, Ucircumflex], Second char = [0x00C0, Agrave], Kerning dist = -1)
    { 0x00DC, -1 },  // (First char = [0x00DC, Udieresis], Second char = [0x00C0, Agrave], Kerning dist = -1)
    { 0x00DD, -3 },  // (First char = [0x00DD, Yacute], Second char = [0x00C0, Agrave], Kerning dist = -3)
    { 0x00DE, -2 },  // (First char = [0x00DE, Thorn], Second char = [0x00C0, Agrave], Kerning dist = -2)
    { 0x0022, -2 },  // (First char = [0x0022, quotedbl], Second char = [0x00C1, Aacute], Kerning dist = -2)
    { 0x0027, -2 },  // (First char = [0x0027, quotesingle], Second char = [0x00C1, Aacute], Kerning dist = -2)
    { 0x0028, -1 },  // (First char = [0x0028, parenleft], Second char = [0x00C1, Aacute], Kerning dist = -1)
    { 0x002A, -4 },  // (First char = [0x002A, asterisk], Second char = [0x00C1, Aacute], Kerning dist = -4)
    { 0x002B, -1 },  // (First char = [0x002B, plus], Second char = [0x00C1, Aacute], Kerning dist = -1)
    { 0x002D, -1 },  // (First char = [0x002D, hyphen], Second char = [0x00C1, Aacute], Kerning dist = -1)
    { 0x0030, -2 },  // (First char = [0x0030, zero], Second char = [0x00C1, Aacute], Kerning dist = -2)
    { 0x0033, -2 },  // (First char = [0x0033, three], Second char = [0x00C1, Aacute], Kerning dist = -2)
    { 0x0035, -2 },  // (First char = [0x0035, five], Second char = [0x00C1, Aacute], Kerning dist = -2)
    { 0x0036, -2 },  // (First char = [0x0036, six], Second char = [0x00C1, Aacute], Kerning dist = -2)
    { 0x0037, -3 },  // (First char = [0x0037, seven], Second char = [0x00C1, Aacute], Kerning dist = -3)
    { 0x0038, -1 },  // (First char = [0x0038, eight], Second char = [0x00C1, Aacute], Kerning dist = -1)
    { 0x0039, -2 },  // (First char = [0x0039, nine], Second char = [0x00C1, Aacute], Kerning dist = -2)
    { 0x003F, -3 },  // (First char = [0x003F, question], Second char = [0x00C1, Aacute], Kerning dist = -3)
    { 0x0040, -2 },  // (First char = [0x0040, at], Second char = [0x00C1, Aacute], Kerning dist = -2)
    { 0x0043, -1 },  // (First char = [0x0043, C], Second char = [0x00C1, Aacute], Kerning dist = -1)
    { 0x0044, -2 },  // (First char = [0x0044, D], Second char = [0x00C1, Aacute], Kerning dist = -2)
    { 0x0046, -3 },  // (First char = [0x0046, F], Second char = [0x00C1, Aacute], Kerning dist = -3)
    { 0x004A, -1 },  // (First char = [0x004A, J], Second char = [0x00C1, Aacute], Kerning dist = -1)
    { 0x004F, -2 },  // (First char = [0x004F, O], Second char = [0x00C1, Aacute], Kerning dist = -2)
    { 0x0050, -4 },  // (First char = [0x0050, P], Second char = [0x00C1, Aacute], Kerning dist = -4)
    { 0x0051, -1 },  // (First char = [0x0051, Q], Second char = [0x00C1, Aacute], Kerning dist = -1)
    { 0x0054, -3 },  // (First char = [0x0054, T], Second char = [0x00C1, Aacute], Kerning dist = -3)
    { 0x0055, -1 },  // (First char = [0x0055, U], Second char = [0x00C1, Aacute], Kerning dist = -1)
    { 0x0056, -4 },  // (First char = [0x0056, V], Second char = [0x00C1, Aacute], Kerning dist = -4)
    { 0x0057, -3 },  // (First char = [0x0057, W], Second char = [0x00C1, Aacute], Kerning dist = -3)
    { 0x0059, -3 },  // (First char = [0x0059, Y], Second char = [0x00C1, Aacute], Kerning dist = -3)
    { 0x007D, -2 },  // (First char = [0x007D, braceright], Second char = [0x00C1, Aacute], Kerning dist = -2)
    { 0x00AD, -1 },  // (First char = [0x00AD, uni00AD], Second char = [0x00C1, Aacute], Kerning dist = -1)
    { 0x00C7, -1 },  // (First char = [0x00C7, Ccedilla], Second char = [0x00C1, Aacute], Kerning dist = -1)
    { 0x00D0, -2 },  // (First char = [0x00D0, Eth], Second char = [0x00C1, Aacute], Kerning dist = -2)
    { 0x00D2, -2 },  // (First char = [0x00D2, Ograve], Second char = [0x00C1, Aacute], Kerning dist = -2)
    { 0x00D3, -2 },  // (First char = [0x00D3, Oacute], Second char = [0x00C1, Aacute], Kerning dist = -2)
    { 0x00D4, -2 },  // (First char = [0x00D4, Ocircumflex], Second char = [0x00C1, Aacute], Kerning dist = -2)
    { 0x00D5, -2 },  // (First char = [0x00D5, Otilde], Second char = [0x00C1, Aacute], Kerning dist = -2)
    { 0x00D6, -2 },  // (First char = [0x00D6, Odieresis], Second char = [0x00C1, Aacute], Kerning dist = -2)
    { 0x00D7, -1 },  // (First char = [0x00D7, multiply], Second char = [0x00C1, Aacute], Kerning dist = -1)
    { 0x00D9, -1 },  // (First char = [0x00D9, Ugrave], Second char = [0x00C1, Aacute], Kerning dist = -1)
    { 0x00DA, -1 },  // (First char = [0x00DA, Uacute], Second char = [0x00C1, Aacute], Kerning dist = -1)
    { 0x00DB, -1 },  // (First char = [0x00DB, Ucircumflex], Second char = [0x00C1, Aacute], Kerning dist = -1)
    { 0x00DC, -1 },  // (First char = [0x00DC, Udieresis], Second char = [0x00C1, Aacute], Kerning dist = -1)
    { 0x00DD, -3 },  // (First char = [0x00DD, Yacute], Second char = [0x00C1, Aacute], Kerning dist = -3)
    { 0x00DE, -2 },  // (First char = [0x00DE, Thorn], Second char = [0x00C1, Aacute], Kerning dist = -2)
    { 0x0022, -2 },  // (First char = [0x0022, quotedbl], Second char = [0x00C2, Acircumflex], Kerning dist = -2)
    { 0x0027, -2 },  // (First char = [0x0027, quotesingle], Second char = [0x00C2, Acircumflex], Kerning dist = -2)
    { 0x0028, -1 },  // (First char = [0x0028, parenleft], Second char = [0x00C2, Acircumflex], Kerning dist = -1)
    { 0x002A, -4 },  // (First char = [0x002A, asterisk], Second char = [0x00C2, Acircumflex], Kerning dist = -4)
    { 0x002B, -1 },  // (First char = [0x002B, plus], Second char = [0x00C2, Acircumflex], Kerning dist = -1)
    { 0x002D, -1 },  // (First char = [0x002D, hyphen], Second char = [0x00C2, Acircumflex], Kerning dist = -1)
    { 0x0030, -2 },  // (First char = [0x0030, zero], Second char = [0x00C2, Acircumflex], Kerning dist = -2)
    { 0x0033, -2 },  // (First char = [0x0033, three], Second char = [0x00C2, Acircumflex], Kerning dist = -2)
    { 0x0035, -2 },  // (First char = [0x0035, five], Second char = [0x00C2, Acircumflex], Kerning dist = -2)
    { 0x0036, -2 },  // (First char = [0x0036, six], Second char = [0x00C2, Acircumflex], Kerning dist = -2)
    { 0x0037, -3 },  // (First char = [0x0037, seven], Second char = [0x00C2, Acircumflex], Kerning dist = -3)
    { 0x0038, -1 },  // (First char = [0x0038, eight], Second char = [0x00C2, Acircumflex], Kerning dist = -1)
    { 0x0039, -2 },  // (First char = [0x0039, nine], Second char = [0x00C2, Acircumflex], Kerning dist = -2)
    { 0x003F, -3 },  // (First char = [0x003F, question], Second char = [0x00C2, Acircumflex], Kerning dist = -3)
    { 0x0040, -2 },  // (First char = [0x0040, at], Second char = [0x00C2, Acircumflex], Kerning dist = -2)
    { 0x0043, -1 },  // (First char = [0x0043, C], Second char = [0x00C2, Acircumflex], Kerning dist = -1)
    { 0x0044, -2 },  // (First char = [0x0044, D], Second char = [0x00C2, Acircumflex], Kerning dist = -2)
    { 0x0046, -3 },  // (First char = [0x0046, F], Second char = [0x00C2, Acircumflex], Kerning dist = -3)
    { 0x004A, -1 },  // (First char = [0x004A, J], Second char = [0x00C2, Acircumflex], Kerning dist = -1)
    { 0x004F, -2 },  // (First char = [0x004F, O], Second char = [0x00C2, Acircumflex], Kerning dist = -2)
    { 0x0050, -4 },  // (First char = [0x0050, P], Second char = [0x00C2, Acircumflex], Kerning dist = -4)
    { 0x0051, -1 },  // (First char = [0x0051, Q], Second char = [0x00C2, Acircumflex], Kerning dist = -1)
    { 0x0054, -3 },  // (First char = [0x0054, T], Second char = [0x00C2, Acircumflex], Kerning dist = -3)
    { 0x0055, -1 },  // (First char = [0x0055, U], Second char = [0x00C2, Acircumflex], Kerning dist = -1)
    { 0x0056, -4 },  // (First char = [0x0056, V], Second char = [0x00C2, Acircumflex], Kerning dist = -4)
    { 0x0057, -3 },  // (First char = [0x0057, W], Second char = [0x00C2, Acircumflex], Kerning dist = -3)
    { 0x0059, -3 },  // (First char = [0x0059, Y], Second char = [0x00C2, Acircumflex], Kerning dist = -3)
    { 0x007D, -2 },  // (First char = [0x007D, braceright], Second char = [0x00C2, Acircumflex], Kerning dist = -2)
    { 0x00AD, -1 },  // (First char = [0x00AD, uni00AD], Second char = [0x00C2, Acircumflex], Kerning dist = -1)
    { 0x00C7, -1 },  // (First char = [0x00C7, Ccedilla], Second char = [0x00C2, Acircumflex], Kerning dist = -1)
    { 0x00D0, -2 },  // (First char = [0x00D0, Eth], Second char = [0x00C2, Acircumflex], Kerning dist = -2)
    { 0x00D2, -2 },  // (First char = [0x00D2, Ograve], Second char = [0x00C2, Acircumflex], Kerning dist = -2)
    { 0x00D3, -2 },  // (First char = [0x00D3, Oacute], Second char = [0x00C2, Acircumflex], Kerning dist = -2)
    { 0x00D4, -2 },  // (First char = [0x00D4, Ocircumflex], Second char = [0x00C2, Acircumflex], Kerning dist = -2)
    { 0x00D5, -2 },  // (First char = [0x00D5, Otilde], Second char = [0x00C2, Acircumflex], Kerning dist = -2)
    { 0x00D6, -2 },  // (First char = [0x00D6, Odieresis], Second char = [0x00C2, Acircumflex], Kerning dist = -2)
    { 0x00D7, -1 },  // (First char = [0x00D7, multiply], Second char = [0x00C2, Acircumflex], Kerning dist = -1)
    { 0x00D9, -1 },  // (First char = [0x00D9, Ugrave], Second char = [0x00C2, Acircumflex], Kerning dist = -1)
    { 0x00DA, -1 },  // (First char = [0x00DA, Uacute], Second char = [0x00C2, Acircumflex], Kerning dist = -1)
    { 0x00DB, -1 },  // (First char = [0x00DB, Ucircumflex], Second char = [0x00C2, Acircumflex], Kerning dist = -1)
    { 0x00DC, -1 },  // (First char = [0x00DC, Udieresis], Second char = [0x00C2, Acircumflex], Kerning dist = -1)
    { 0x00DD, -3 },  // (First char = [0x00DD, Yacute], Second char = [0x00C2, Acircumflex], Kerning dist = -3)
    { 0x00DE, -2 },  // (First char = [0x00DE, Thorn], Second char = [0x00C2, Acircumflex], Kerning dist = -2)
    { 0x0022, -2 },  // (First char = [0x0022, quotedbl], Second char = [0x00C3, Atilde], Kerning dist = -2)
    { 0x0027, -2 },  // (First char = [0x0027, quotesingle], Second char = [0x00C3, Atilde], Kerning dist = -2)
    { 0x0028, -1 },  // (First char = [0x0028, parenleft], Second char = [0x00C3, Atilde], Kerning dist = -1)
    { 0x002A, -4 },  // (First char = [0x002A, asterisk], Second char = [0x00C3, Atilde], Kerning dist = -4)
    { 0x002B, -1 },  // (First char = [0x002B, plus], Second char = [0x00C3, Atilde], Kerning dist = -1)
    { 0x002D, -1 },  // (First char = [0x002D, hyphen], Second char = [0x00C3, Atilde], Kerning dist = -1)
    { 0x0030, -2 },  // (First char = [0x0030, zero], Second char = [0x00C3, Atilde], Kerning dist = -2)
    { 0x0033, -2 },  // (First char = [0x0033, three], Second char = [0x00C3, Atilde], Kerning dist = -2)
    { 0x0035, -2 },  // (First char = [0x0035, five], Second char = [0x00C3, Atilde], Kerning dist = -2)
    { 0x0036, -2 },  // (First char = [0x0036, six], Second char = [0x00C3, Atilde], Kerning dist = -2)
    { 0x0037, -3 },  // (First char = [0x0037, seven], Second char = [0x00C3, Atilde], Kerning dist = -3)
    { 0x0038, -1 },  // (First char = [0x0038, eight], Second char = [0x00C3, Atilde], Kerning dist = -1)
    { 0x0039, -2 },  // (First char = [0x0039, nine], Second char = [0x00C3, Atilde], Kerning dist = -2)
    { 0x003F, -3 },  // (First char = [0x003F, question], Second char = [0x00C3, Atilde], Kerning dist = -3)
    { 0x0040, -2 },  // (First char = [0x0040, at], Second char = [0x00C3, Atilde], Kerning dist = -2)
    { 0x0043, -1 },  // (First char = [0x0043, C], Second char = [0x00C3, Atilde], Kerning dist = -1)
    { 0x0044, -2 },  // (First char = [0x0044, D], Second char = [0x00C3, Atilde], Kerning dist = -2)
    { 0x0046, -3 },  // (First char = [0x0046, F], Second char = [0x00C3, Atilde], Kerning dist = -3)
    { 0x004A, -1 },  // (First char = [0x004A, J], Second char = [0x00C3, Atilde], Kerning dist = -1)
    { 0x004F, -2 },  // (First char = [0x004F, O], Second char = [0x00C3, Atilde], Kerning dist = -2)
    { 0x0050, -4 },  // (First char = [0x0050, P], Second char = [0x00C3, Atilde], Kerning dist = -4)
    { 0x0051, -1 },  // (First char = [0x0051, Q], Second char = [0x00C3, Atilde], Kerning dist = -1)
    { 0x0054, -3 },  // (First char = [0x0054, T], Second char = [0x00C3, Atilde], Kerning dist = -3)
    { 0x0055, -1 },  // (First char = [0x0055, U], Second char = [0x00C3, Atilde], Kerning dist = -1)
    { 0x0056, -4 },  // (First char = [0x0056, V], Second char = [0x00C3, Atilde], Kerning dist = -4)
    { 0x0057, -3 },  // (First char = [0x0057, W], Second char = [0x00C3, Atilde], Kerning dist = -3)
    { 0x0059, -3 },  // (First char = [0x0059, Y], Second char = [0x00C3, Atilde], Kerning dist = -3)
    { 0x007D, -2 },  // (First char = [0x007D, braceright], Second char = [0x00C3, Atilde], Kerning dist = -2)
    { 0x00AD, -1 },  // (First char = [0x00AD, uni00AD], Second char = [0x00C3, Atilde], Kerning dist = -1)
    { 0x00C7, -1 },  // (First char = [0x00C7, Ccedilla], Second char = [0x00C3, Atilde], Kerning dist = -1)
    { 0x00D0, -2 },  // (First char = [0x00D0, Eth], Second char = [0x00C3, Atilde], Kerning dist = -2)
    { 0x00D2, -2 },  // (First char = [0x00D2, Ograve], Second char = [0x00C3, Atilde], Kerning dist = -2)
    { 0x00D3, -2 },  // (First char = [0x00D3, Oacute], Second char = [0x00C3, Atilde], Kerning dist = -2)
    { 0x00D4, -2 },  // (First char = [0x00D4, Ocircumflex], Second char = [0x00C3, Atilde], Kerning dist = -2)
    { 0x00D5, -2 },  // (First char = [0x00D5, Otilde], Second char = [0x00C3, Atilde], Kerning dist = -2)
    { 0x00D6, -2 },  // (First char = [0x00D6, Odieresis], Second char = [0x00C3, Atilde], Kerning dist = -2)
    { 0x00D7, -1 },  // (First char = [0x00D7, multiply], Second char = [0x00C3, Atilde], Kerning dist = -1)
    { 0x00D9, -1 },  // (First char = [0x00D9, Ugrave], Second char = [0x00C3, Atilde], Kerning dist = -1)
    { 0x00DA, -1 },  // (First char = [0x00DA, Uacute], Second char = [0x00C3, Atilde], Kerning dist = -1)
    { 0x00DB, -1 },  // (First char = [0x00DB, Ucircumflex], Second char = [0x00C3, Atilde], Kerning dist = -1)
    { 0x00DC, -1 },  // (First char = [0x00DC, Udieresis], Second char = [0x00C3, Atilde], Kerning dist = -1)
    { 0x00DD, -3 },  // (First char = [0x00DD, Yacute], Second char = [0x00C3, Atilde], Kerning dist = -3)
    { 0x00DE, -2 },  // (First char = [0x00DE, Thorn], Second char = [0x00C3, Atilde], Kerning dist = -2)
    { 0x0022, -2 },  // (First char = [0x0022, quotedbl], Second char = [0x00C4, Adieresis], Kerning dist = -2)
    { 0x0027, -2 },  // (First char = [0x0027, quotesingle], Second char = [0x00C4, Adieresis], Kerning dist = -2)
    { 0x0028, -1 },  // (First char = [0x0028, parenleft], Second char = [0x00C4, Adieresis], Kerning dist = -1)
    { 0x002A, -4 },  // (First char = [0x002A, asterisk], Second char = [0x00C4, Adieresis], Kerning dist = -4)
    { 0x002B, -1 },  // (First char = [0x002B, plus], Second char = [0x00C4, Adieresis], Kerning dist = -1)
    { 0x002D, -1 },  // (First char = [0x002D, hyphen], Second char = [0x00C4, Adieresis], Kerning dist = -1)
    { 0x0030, -2 },  // (First char = [0x0030, zero], Second char = [0x00C4, Adieresis], Kerning dist = -2)
    { 0x0033, -2 },  // (First char = [0x0033, three], Second char = [0x00C4, Adieresis], Kerning dist = -2)
    { 0x0035, -2 },  // (First char = [0x0035, five], Second char = [0x00C4, Adieresis], Kerning dist = -2)
    { 0x0036, -2 },  // (First char = [0x0036, six], Second char = [0x00C4, Adieresis], Kerning dist = -2)
    { 0x0037, -3 },  // (First char = [0x0037, seven], Second char = [0x00C4, Adieresis], Kerning dist = -3)
    { 0x0038, -1 },  // (First char = [0x0038, eight], Second char = [0x00C4, Adieresis], Kerning dist = -1)
    { 0x0039, -2 },  // (First char = [0x0039, nine], Second char = [0x00C4, Adieresis], Kerning dist = -2)
    { 0x003F, -3 },  // (First char = [0x003F, question], Second char = [0x00C4, Adieresis], Kerning dist = -3)
    { 0x0040, -2 },  // (First char = [0x0040, at], Second char = [0x00C4, Adieresis], Kerning dist = -2)
    { 0x0043, -1 },  // (First char = [0x0043, C], Second char = [0x00C4, Adieresis], Kerning dist = -1)
    { 0x0044, -2 },  // (First char = [0x0044, D], Second char = [0x00C4, Adieresis], Kerning dist = -2)
    { 0x0046, -3 },  // (First char = [0x0046, F], Second char = [0x00C4, Adieresis], Kerning dist = -3)
    { 0x004A, -1 },  // (First char = [0x004A, J], Second char = [0x00C4, Adieresis], Kerning dist = -1)
    { 0x004F, -2 },  // (First char = [0x004F, O], Second char = [0x00C4, Adieresis], Kerning dist = -2)
    { 0x0050, -4 },  // (First char = [0x0050, P], Second char = [0x00C4, Adieresis], Kerning dist = -4)
    { 0x0051, -1 },  // (First char = [0x0051, Q], Second char = [0x00C4, Adieresis], Kerning dist = -1)
    { 0x0054, -3 },  // (First char = [0x0054, T], Second char = [0x00C4, Adieresis], Kerning dist = -3)
    { 0x0055, -1 },  // (First char = [0x0055, U], Second char = [0x00C4, Adieresis], Kerning dist = -1)
    { 0x0056, -4 },  // (First char = [0x0056, V], Second char = [0x00C4, Adieresis], Kerning dist = -4)
    { 0x0057, -3 },  // (First char = [0x0057, W], Second char = [0x00C4, Adieresis], Kerning dist = -3)
    { 0x0059, -3 },  // (First char = [0x0059, Y], Second char = [0x00C4, Adieresis], Kerning dist = -3)
    { 0x007D, -2 },  // (First char = [0x007D, braceright], Second char = [0x00C4, Adieresis], Kerning dist = -2)
    { 0x00AD, -1 },  // (First char = [0x00AD, uni00AD], Second char = [0x00C4, Adieresis], Kerning dist = -1)
    { 0x00C7, -1 },  // (First char = [0x00C7, Ccedilla], Second char = [0x00C4, Adieresis], Kerning dist = -1)
    { 0x00D0, -2 },  // (First char = [0x00D0, Eth], Second char = [0x00C4, Adieresis], Kerning dist = -2)
    { 0x00D2, -2 },  // (First char = [0x00D2, Ograve], Second char = [0x00C4, Adieresis], Kerning dist = -2)
    { 0x00D3, -2 },  // (First char = [0x00D3, Oacute], Second char = [0x00C4, Adieresis], Kerning dist = -2)
    { 0x00D4, -2 },  // (First char = [0x00D4, Ocircumflex], Second char = [0x00C4, Adieresis], Kerning dist = -2)
    { 0x00D5, -2 },  // (First char = [0x00D5, Otilde], Second char = [0x00C4, Adieresis], Kerning dist = -2)
    { 0x00D6, -2 },  // (First char = [0x00D6, Odieresis], Second char = [0x00C4, Adieresis], Kerning dist = -2)
    { 0x00D7, -1 },  // (First char = [0x00D7, multiply], Second char = [0x00C4, Adieresis], Kerning dist = -1)
    { 0x00D9, -1 },  // (First char = [0x00D9, Ugrave], Second char = [0x00C4, Adieresis], Kerning dist = -1)
    { 0x00DA, -1 },  // (First char = [0x00DA, Uacute], Second char = [0x00C4, Adieresis], Kerning dist = -1)
    { 0x00DB, -1 },  // (First char = [0x00DB, Ucircumflex], Second char = [0x00C4, Adieresis], Kerning dist = -1)
    { 0x00DC, -1 },  // (First char = [0x00DC, Udieresis], Second char = [0x00C4, Adieresis], Kerning dist = -1)
    { 0x00DD, -3 },  // (First char = [0x00DD, Yacute], Second char = [0x00C4, Adieresis], Kerning dist = -3)
    { 0x00DE, -2 },  // (First char = [0x00DE, Thorn], Second char = [0x00C4, Adieresis], Kerning dist = -2)
    { 0x0022, -2 },  // (First char = [0x0022, quotedbl], Second char = [0x00C5, Aring], Kerning dist = -2)
    { 0x0027, -2 },  // (First char = [0x0027, quotesingle], Second char = [0x00C5, Aring], Kerning dist = -2)
    { 0x0028, -1 },  // (First char = [0x0028, parenleft], Second char = [0x00C5, Aring], Kerning dist = -1)
    { 0x002A, -4 },  // (First char = [0x002A, asterisk], Second char = [0x00C5, Aring], Kerning dist = -4)
    { 0x002B, -1 },  // (First char = [0x002B, plus], Second char = [0x00C5, Aring], Kerning dist = -1)
    { 0x002D, -1 },  // (First char = [0x002D, hyphen], Second char = [0x00C5, Aring], Kerning dist = -1)
    { 0x0030, -2 },  // (First char = [0x0030, zero], Second char = [0x00C5, Aring], Kerning dist = -2)
    { 0x0033, -2 },  // (First char = [0x0033, three], Second char = [0x00C5, Aring], Kerning dist = -2)
    { 0x0035, -2 },  // (First char = [0x0035, five], Second char = [0x00C5, Aring], Kerning dist = -2)
    { 0x0036, -2 },  // (First char = [0x0036, six], Second char = [0x00C5, Aring], Kerning dist = -2)
    { 0x0037, -3 },  // (First char = [0x0037, seven], Second char = [0x00C5, Aring], Kerning dist = -3)
    { 0x0038, -1 },  // (First char = [0x0038, eight], Second char = [0x00C5, Aring], Kerning dist = -1)
    { 0x0039, -2 },  // (First char = [0x0039, nine], Second char = [0x00C5, Aring], Kerning dist = -2)
    { 0x003F, -3 },  // (First char = [0x003F, question], Second char = [0x00C5, Aring], Kerning dist = -3)
    { 0x0040, -2 },  // (First char = [0x0040, at], Second char = [0x00C5, Aring], Kerning dist = -2)
    { 0x0043, -1 },  // (First char = [0x0043, C], Second char = [0x00C5, Aring], Kerning dist = -1)
    { 0x0044, -2 },  // (First char = [0x0044, D], Second char = [0x00C5, Aring], Kerning dist = -2)
    { 0x0046, -3 },  // (First char = [0x0046, F], Second char = [0x00C5, Aring], Kerning dist = -3)
    { 0x004A, -1 },  // (First char = [0x004A, J], Second char = [0x00C5, Aring], Kerning dist = -1)
    { 0x004F, -2 },  // (First char = [0x004F, O], Second char = [0x00C5, Aring], Kerning dist = -2)
    { 0x0050, -4 },  // (First char = [0x0050, P], Second char = [0x00C5, Aring], Kerning dist = -4)
    { 0x0051, -1 },  // (First char = [0x0051, Q], Second char = [0x00C5, Aring], Kerning dist = -1)
    { 0x0054, -3 },  // (First char = [0x0054, T], Second char = [0x00C5, Aring], Kerning dist = -3)
    { 0x0055, -1 },  // (First char = [0x0055, U], Second char = [0x00C5, Aring], Kerning dist = -1)
    { 0x0056, -4 },  // (First char = [0x0056, V], Second char = [0x00C5, Aring], Kerning dist = -4)
    { 0x0057, -3 },  // (First char = [0x0057, W], Second char = [0x00C5, Aring], Kerning dist = -3)
    { 0x0059, -3 },  // (First char = [0x0059, Y], Second char = [0x00C5, Aring], Kerning dist = -3)
    { 0x007D, -2 },  // (First char = [0x007D, braceright], Second char = [0x00C5, Aring], Kerning dist = -2)
    { 0x00AD, -1 },  // (First char = [0x00AD, uni00AD], Second char = [0x00C5, Aring], Kerning dist = -1)
    { 0x00C7, -1 },  // (First char = [0x00C7, Ccedilla], Second char = [0x00C5, Aring], Kerning dist = -1)
    { 0x00D0, -2 },  // (First char = [0x00D0, Eth], Second char = [0x00C5, Aring], Kerning dist = -2)
    { 0x00D2, -2 },  // (First char = [0x00D2, Ograve], Second char = [0x00C5, Aring], Kerning dist = -2)
    { 0x00D3, -2 },  // (First char = [0x00D3, Oacute], Second char = [0x00C5, Aring], Kerning dist = -2)
    { 0x00D4, -2 },  // (First char = [0x00D4, Ocircumflex], Second char = [0x00C5, Aring], Kerning dist = -2)
    { 0x00D5, -2 },  // (First char = [0x00D5, Otilde], Second char = [0x00C5, Aring], Kerning dist = -2)
    { 0x00D6, -2 },  // (First char = [0x00D6, Odieresis], Second char = [0x00C5, Aring], Kerning dist = -2)
    { 0x00D7, -1 },  // (First char = [0x00D7, multiply], Second char = [0x00C5, Aring], Kerning dist = -1)
    { 0x00D9, -1 },  // (First char = [0x00D9, Ugrave], Second char = [0x00C5, Aring], Kerning dist = -1)
    { 0x00DA, -1 },  // (First char = [0x00DA, Uacute], Second char = [0x00C5, Aring], Kerning dist = -1)
    { 0x00DB, -1 },  // (First char = [0x00DB, Ucircumflex], Second char = [0x00C5, Aring], Kerning dist = -1)
    { 0x00DC, -1 },  // (First char = [0x00DC, Udieresis], Second char = [0x00C5, Aring], Kerning dist = -1)
    { 0x00DD, -3 },  // (First char = [0x00DD, Yacute], Second char = [0x00C5, Aring], Kerning dist = -3)
    { 0x00DE, -2 },  // (First char = [0x00DE, Thorn], Second char = [0x00C5, Aring], Kerning dist = -2)
    { 0x0022, -4 },  // (First char = [0x0022, quotedbl], Second char = [0x00C6, AE], Kerning dist = -4)
    { 0x0027, -4 },  // (First char = [0x0027, quotesingle], Second char = [0x00C6, AE], Kerning dist = -4)
    { 0x002A, -5 },  // (First char = [0x002A, asterisk], Second char = [0x00C6, AE], Kerning dist = -5)
    { 0x0030, -2 },  // (First char = [0x0030, zero], Second char = [0x00C6, AE], Kerning dist = -2)
    { 0x0033, -1 },  // (First char = [0x0033, three], Second char = [0x00C6, AE], Kerning dist = -1)
    { 0x0035, -1 },  // (First char = [0x0035, five], Second char = [0x00C6, AE], Kerning dist = -1)
    { 0x0036, -2 },  // (First char = [0x0036, six], Second char = [0x00C6, AE], Kerning dist = -2)
    { 0x0038, -1 },  // (First char = [0x0038, eight], Second char = [0x00C6, AE], Kerning dist = -1)
    { 0x0039, -2 },  // (First char = [0x0039, nine], Second char = [0x00C6, AE], Kerning dist = -2)
    { 0x003F, -4 },  // (First char = [0x003F, question], Second char = [0x00C6, AE], Kerning dist = -4)
    { 0x0040, -2 },  // (First char = [0x0040, at], Second char = [0x00C6, AE], Kerning dist = -2)
    { 0x0042, -1 },  // (First char = [0x0042, B], Second char = [0x00C6, AE], Kerning dist = -1)
    { 0x0043, -1 },  // (First char = [0x0043, C], Second char = [0x00C6, AE], Kerning dist = -1)
    { 0x0044, -2 },  // (First char = [0x0044, D], Second char = [0x00C6, AE], Kerning dist = -2)
    { 0x004F, -2 },  // (First char = [0x004F, O], Second char = [0x00C6, AE], Kerning dist = -2)
    { 0x0050, -5 },  // (First char = [0x0050, P], Second char = [0x00C6, AE], Kerning dist = -5)
    { 0x0054, -4 },  // (First char = [0x0054, T], Second char = [0x00C6, AE], Kerning dist = -4)
    { 0x0055, -2 },  // (First char = [0x0055, U], Second char = [0x00C6, AE], Kerning dist = -2)
    { 0x0056, -5 },  // (First char = [0x0056, V], Second char = [0x00C6, AE], Kerning dist = -5)
    { 0x0057, -4 },  // (First char = [0x0057, W], Second char = [0x00C6, AE], Kerning dist = -4)
    { 0x0059, -5 },  // (First char = [0x0059, Y], Second char = [0x00C6, AE], Kerning dist = -5)
    { 0x007D, -3 },  // (First char = [0x007D, braceright], Second char = [0x00C6, AE], Kerning dist = -3)
    { 0x00C7, -1 },  // (First char = [0x00C7, Ccedilla], Second char = [0x00C6, AE], Kerning dist = -1)
    { 0x00D0, -2 },  // (First char = [0x00D0, Eth], Second char = [0x00C6, AE], Kerning dist = -2)
    { 0x00D2, -2 },  // (First char = [0x00D2, Ograve], Second char = [0x00C6, AE], Kerning dist = -2)
    { 0x00D3, -2 },  // (First char = [0x00D3, Oacute], Second char = [0x00C6, AE], Kerning dist = -2)
    { 0x00D4, -2 },  // (First char = [0x00D4, Ocircumflex], Second char = [0x00C6, AE], Kerning dist = -2)
    { 0x00D5, -2 },  // (First char = [0x00D5, Otilde], Second char = [0x00C6, AE], Kerning dist = -2)
    { 0x00D6, -2 },  // (First char = [0x00D6, Odieresis], Second char = [0x00C6, AE], Kerning dist = -2)
    { 0x00D7, -2 },  // (First char = [0x00D7, multiply], Second char = [0x00C6, AE], Kerning dist = -2)
    { 0x00D9, -2 },  // (First char = [0x00D9, Ugrave], Second char = [0x00C6, AE], Kerning dist = -2)
    { 0x00DA, -2 },  // (First char = [0x00DA, Uacute], Second char = [0x00C6, AE], Kerning dist = -2)
    { 0x00DB, -2 },  // (First char = [0x00DB, Ucircumflex], Second char = [0x00C6, AE], Kerning dist = -2)
    { 0x00DC, -2 },  // (First char = [0x00DC, Udieresis], Second char = [0x00C6, AE], Kerning dist = -2)
    { 0x00DD, -5 },  // (First char = [0x00DD, Yacute], Second char = [0x00C6, AE], Kerning dist = -5)
    { 0x0028, -3 },  // (First char = [0x0028, parenleft], Second char = [0x00C7, Ccedilla], Kerning dist = -3)
    { 0x002C, -1 },  // (First char = [0x002C, comma], Second char = [0x00C7, Ccedilla], Kerning dist = -1)
    { 0x002E, -1 },  // (First char = [0x002E, period], Second char = [0x00C7, Ccedilla], Kerning dist = -1)
    { 0x002F, -1 },  // (First char = [0x002F, slash], Second char = [0x00C7, Ccedilla], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x00C7, Ccedilla], Kerning dist = -1)
    { 0x0041, -2 },  // (First char = [0x0041, A], Second char = [0x00C7, Ccedilla], Kerning dist = -2)
    { 0x004B, -2 },  // (First char = [0x004B, K], Second char = [0x00C7, Ccedilla], Kerning dist = -2)
    { 0x004C, -3 },  // (First char = [0x004C, L], Second char = [0x00C7, Ccedilla], Kerning dist = -3)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x00C7, Ccedilla], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x00C7, Ccedilla], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x00C7, Ccedilla], Kerning dist = -1)
    { 0x0058, -2 },  // (First char = [0x0058, X], Second char = [0x00C7, Ccedilla], Kerning dist = -2)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x00C7, Ccedilla], Kerning dist = -2)
    { 0x005A, -1 },  // (First char = [0x005A, Z], Second char = [0x00C7, Ccedilla], Kerning dist = -1)
    { 0x005C, -1 },  // (First char = [0x005C, backslash], Second char = [0x00C7, Ccedilla], Kerning dist = -1)
    { 0x005F, -2 },  // (First char = [0x005F, underscore], Second char = [0x00C7, Ccedilla], Kerning dist = -2)
    { 0x007B, -1 },  // (First char = [0x007B, braceleft], Second char = [0x00C7, Ccedilla], Kerning dist = -1)
    { 0x00C0, -2 },  // (First char = [0x00C0, Agrave], Second char = [0x00C7, Ccedilla], Kerning dist = -2)
    { 0x00C1, -2 },  // (First char = [0x00C1, Aacute], Second char = [0x00C7, Ccedilla], Kerning dist = -2)
    { 0x00C2, -2 },  // (First char = [0x00C2, Acircumflex], Second char = [0x00C7, Ccedilla], Kerning dist = -2)
    { 0x00C3, -2 },  // (First char = [0x00C3, Atilde], Second char = [0x00C7, Ccedilla], Kerning dist = -2)
    { 0x00C4, -2 },  // (First char = [0x00C4, Adieresis], Second char = [0x00C7, Ccedilla], Kerning dist = -2)
    { 0x00C5, -2 },  // (First char = [0x00C5, Aring], Second char = [0x00C7, Ccedilla], Kerning dist = -2)
    { 0x00DD, -2 },  // (First char = [0x00DD, Yacute], Second char = [0x00C7, Ccedilla], Kerning dist = -2)
    { 0x002F,  2 },  // (First char = [0x002F, slash], Second char = [0x00C8, Egrave], Kerning dist = 2)
    { 0x002F,  2 },  // (First char = [0x002F, slash], Second char = [0x00C9, Eacute], Kerning dist = 2)
    { 0x002F,  2 },  // (First char = [0x002F, slash], Second char = [0x00CA, Ecircumflex], Kerning dist = 2)
    { 0x002F,  2 },  // (First char = [0x002F, slash], Second char = [0x00CB, Edieresis], Kerning dist = 2)
    { 0x002F,  2 },  // (First char = [0x002F, slash], Second char = [0x00CC, Igrave], Kerning dist = 2)
    { 0x002F,  2 },  // (First char = [0x002F, slash], Second char = [0x00CD, Iacute], Kerning dist = 2)
    { 0x002F,  2 },  // (First char = [0x002F, slash], Second char = [0x00CE, Icircumflex], Kerning dist = 2)
    { 0x002F,  2 },  // (First char = [0x002F, slash], Second char = [0x00CF, Idieresis], Kerning dist = 2)
    { 0x002F,  2 },  // (First char = [0x002F, slash], Second char = [0x00D1, Ntilde], Kerning dist = 2)
    { 0x0028, -3 },  // (First char = [0x0028, parenleft], Second char = [0x00D2, Ograve], Kerning dist = -3)
    { 0x002C, -1 },  // (First char = [0x002C, comma], Second char = [0x00D2, Ograve], Kerning dist = -1)
    { 0x002E, -1 },  // (First char = [0x002E, period], Second char = [0x00D2, Ograve], Kerning dist = -1)
    { 0x002F, -1 },  // (First char = [0x002F, slash], Second char = [0x00D2, Ograve], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, seven], Second char = [0x00D2, Ograve], Kerning dist = -1)
    { 0x0041, -2 },  // (First char = [0x0041, A], Second char = [0x00D2, Ograve], Kerning dist = -2)
    { 0x004B, -2 },  // (First char = [0x004B, K], Second char = [0x00D2, Ograve], Kerning dist = -2)
    { 0x004C, -3 },  // (First char = [0x004C, L], Second char = [0x00D2, Ograve], Kerning dist = -3)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x00D2, Ograve], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x00D2, Ograve], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x00D2, Ograve], Kerning dist = -1)
    { 0x0058, -2 },  // (First char = [0x0058, X], Second char = [0x00D2, Ograve], Kerning dist = -2)
};
